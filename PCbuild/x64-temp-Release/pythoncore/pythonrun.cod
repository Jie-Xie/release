; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_09BFJOLACN@_shutdown?$AA@			; `string'
PUBLIC	??_C@_0EH@FGGCAPDG@?6During?5handling?5of?5the?5above?5ex@ ; `string'
PUBLIC	??_C@_0EI@ENDHMPEA@?6The?5above?5exception?5was?5the?5dir@ ; `string'
PUBLIC	??_C@_0L@LNCJCPDP@__module__?$AA@		; `string'
PUBLIC	??_C@_0BE@DKBHEDDB@print_file_and_line?$AA@	; `string'
PUBLIC	??_C@_04NDFOBODE@code?$AA@			; `string'
PUBLIC	??_C@_04CIMGMMMG@text?$AA@			; `string'
PUBLIC	??_C@_06KLHHMIGM@offset?$AA@			; `string'
PUBLIC	??_C@_06ILKIAHNN@lineno?$AA@			; `string'
PUBLIC	??_C@_08BABJIOEM@filename?$AA@			; `string'
PUBLIC	??_C@_03GLPMCEFE@msg?$AA@			; `string'
PUBLIC	??_C@_08MLPGAEIK@encoding?$AA@			; `string'
PUBLIC	??_C@_03DGOGAGNC@raw?$AA@			; `string'
PUBLIC	??_C@_04GMGOKAFF@mode?$AA@			; `string'
PUBLIC	??_C@_0O@CKECCIPK@TextIOWrapper?$AA@		; `string'
PUBLIC	??_C@_06BMABDNNN@isatty?$AA@			; `string'
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	??_C@_1O@KDDPCNEL@?$AAp?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	Py_UseClassExceptionsFlag
PUBLIC	Py_NoUserSiteDirectory
PUBLIC	Py_UnbufferedStdioFlag
PUBLIC	Py_HashRandomizationFlag
PUBLIC	_Py_Finalizing
PUBLIC	_PyOS_mystrnicmp_hack
EXTRN	PyOS_mystrnicmp:PROC
_DATA	SEGMENT
COMM	Py_DontWriteBytecodeFlag:DWORD
COMM	Py_QuietFlag:DWORD
COMM	Py_InspectFlag:DWORD
COMM	Py_FrozenFlag:DWORD
COMM	Py_NoSiteFlag:DWORD
COMM	Py_DebugFlag:DWORD
COMM	Py_BytesWarningFlag:DWORD
COMM	Py_InteractiveFlag:DWORD
COMM	Py_IgnoreEnvironmentFlag:DWORD
COMM	Py_VerboseFlag:DWORD
_DATA	ENDS
_BSS	SEGMENT
Py_NoUserSiteDirectory DD 01H DUP (?)
Py_UnbufferedStdioFlag DD 01H DUP (?)
Py_HashRandomizationFlag DD 01H DUP (?)
	ALIGN	8

_Py_Finalizing DQ 01H DUP (?)
initialized DD	01H DUP (?)
	ALIGN	8

default_home DQ	01H DUP (?)
pyexitfunc DQ	01H DUP (?)
nexitfuncs DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_09BFJOLACN@_shutdown?$AA@
CONST	SEGMENT
??_C@_09BFJOLACN@_shutdown?$AA@ DB '_shutdown', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@FGGCAPDG@?6During?5handling?5of?5the?5above?5ex@
CONST	SEGMENT
??_C@_0EH@FGGCAPDG@?6During?5handling?5of?5the?5above?5ex@ DB 0aH, 'Durin'
	DB	'g handling of the above exception, another exception occurred'
	DB	':', 0aH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@ENDHMPEA@?6The?5above?5exception?5was?5the?5dir@
CONST	SEGMENT
??_C@_0EI@ENDHMPEA@?6The?5above?5exception?5was?5the?5dir@ DB 0aH, 'The a'
	DB	'bove exception was the direct cause of the following exceptio'
	DB	'n:', 0aH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LNCJCPDP@__module__?$AA@
CONST	SEGMENT
??_C@_0L@LNCJCPDP@__module__?$AA@ DB '__module__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DKBHEDDB@print_file_and_line?$AA@
CONST	SEGMENT
??_C@_0BE@DKBHEDDB@print_file_and_line?$AA@ DB 'print_file_and_line', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NDFOBODE@code?$AA@
CONST	SEGMENT
??_C@_04NDFOBODE@code?$AA@ DB 'code', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CIMGMMMG@text?$AA@
CONST	SEGMENT
??_C@_04CIMGMMMG@text?$AA@ DB 'text', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KLHHMIGM@offset?$AA@
CONST	SEGMENT
??_C@_06KLHHMIGM@offset?$AA@ DB 'offset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ILKIAHNN@lineno?$AA@
CONST	SEGMENT
??_C@_06ILKIAHNN@lineno?$AA@ DB 'lineno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BABJIOEM@filename?$AA@
CONST	SEGMENT
??_C@_08BABJIOEM@filename?$AA@ DB 'filename', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLPMCEFE@msg?$AA@
CONST	SEGMENT
??_C@_03GLPMCEFE@msg?$AA@ DB 'msg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLPGAEIK@encoding?$AA@
CONST	SEGMENT
??_C@_08MLPGAEIK@encoding?$AA@ DB 'encoding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGOGAGNC@raw?$AA@
CONST	SEGMENT
??_C@_03DGOGAGNC@raw?$AA@ DB 'raw', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMGOKAFF@mode?$AA@
CONST	SEGMENT
??_C@_04GMGOKAFF@mode?$AA@ DB 'mode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CKECCIPK@TextIOWrapper?$AA@
CONST	SEGMENT
??_C@_0O@CKECCIPK@TextIOWrapper?$AA@ DB 'TextIOWrapper', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMABDNNN@isatty?$AA@
CONST	SEGMENT
??_C@_06BMABDNNN@isatty?$AA@ DB 'isatty', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@KDDPCNEL@?$AAp?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1O@KDDPCNEL@?$AAp?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?$AA@ DB 'p', 00H, 'y'
	DB	00H, 't', 00H, 'h', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_flush@?1??flush_io@@9@9 DQ 0000000000000000H	; `flush_io'::`2'::PyId_flush
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	0000000000000000H
?PyId_flush@?1??flush_std_files@@9@9 DQ 0000000000000000H ; `flush_std_files'::`2'::PyId_flush
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	0000000000000000H
?PyId__shutdown@?1??wait_for_thread_shutdown@@9@9 DQ 0000000000000000H ; `wait_for_thread_shutdown'::`2'::PyId__shutdown
	DQ	FLAT:??_C@_09BFJOLACN@_shutdown?$AA@
	DQ	0000000000000000H
?PyId___module__@?6??print_exception@@9@9 DQ 0000000000000000H ; `print_exception'::`7'::PyId___module__
	DQ	FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
	DQ	0000000000000000H
?PyId_print_file_and_line@?1??print_exception@@9@9 DQ 0000000000000000H ; `print_exception'::`2'::PyId_print_file_and_line
	DQ	FLAT:??_C@_0BE@DKBHEDDB@print_file_and_line?$AA@
	DQ	0000000000000000H
?PyId_code@?2??handle_system_exit@@9@9 DQ 0000000000000000H ; `handle_system_exit'::`3'::PyId_code
	DQ	FLAT:??_C@_04NDFOBODE@code?$AA@
	DQ	0000000000000000H
?PyId_text@?1??parse_syntax_error@@9@9 DQ 0000000000000000H ; `parse_syntax_error'::`2'::PyId_text
	DQ	FLAT:??_C@_04CIMGMMMG@text?$AA@
	DQ	0000000000000000H
?PyId_offset@?1??parse_syntax_error@@9@9 DQ 0000000000000000H ; `parse_syntax_error'::`2'::PyId_offset
	DQ	FLAT:??_C@_06KLHHMIGM@offset?$AA@
	DQ	0000000000000000H
?PyId_lineno@?1??parse_syntax_error@@9@9 DQ 0000000000000000H ; `parse_syntax_error'::`2'::PyId_lineno
	DQ	FLAT:??_C@_06ILKIAHNN@lineno?$AA@
	DQ	0000000000000000H
?PyId_filename@?1??parse_syntax_error@@9@9 DQ 0000000000000000H ; `parse_syntax_error'::`2'::PyId_filename
	DQ	FLAT:??_C@_08BABJIOEM@filename?$AA@
	DQ	0000000000000000H
?PyId_msg@?1??parse_syntax_error@@9@9 DQ 0000000000000000H ; `parse_syntax_error'::`2'::PyId_msg
	DQ	FLAT:??_C@_03GLPMCEFE@msg?$AA@
	DQ	0000000000000000H
?PyId_encoding@?1??PyRun_InteractiveOneFlags@@9@9 DQ 0000000000000000H ; `PyRun_InteractiveOneFlags'::`2'::PyId_encoding
	DQ	FLAT:??_C@_08MLPGAEIK@encoding?$AA@
	DQ	0000000000000000H
?PyId_raw@?2??create_stdio@@9@9 DQ 0000000000000000H	; `create_stdio'::`3'::PyId_raw
	DQ	FLAT:??_C@_03DGOGAGNC@raw?$AA@
	DQ	0000000000000000H
?PyId_mode@?1??create_stdio@@9@9 DQ 0000000000000000H	; `create_stdio'::`2'::PyId_mode
	DQ	FLAT:??_C@_04GMGOKAFF@mode?$AA@
	DQ	0000000000000000H
?PyId_name@?1??create_stdio@@9@9 DQ 0000000000000000H	; `create_stdio'::`2'::PyId_name
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	0000000000000000H
?PyId_TextIOWrapper@?1??create_stdio@@9@9 DQ 0000000000000000H ; `create_stdio'::`2'::PyId_TextIOWrapper
	DQ	FLAT:??_C@_0O@CKECCIPK@TextIOWrapper?$AA@
	DQ	0000000000000000H
?PyId_isatty@?1??create_stdio@@9@9 DQ 0000000000000000H	; `create_stdio'::`2'::PyId_isatty
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	0000000000000000H
?PyId_open@?1??create_stdio@@9@9 DQ 0000000000000000H	; `create_stdio'::`2'::PyId_open
	DQ	FLAT:??_C@_04PMOCAHAA@open?$AA@
	DQ	0000000000000000H
?PyId_name@?1??get_codec_name@@9@9 DQ 0000000000000000H	; `get_codec_name'::`2'::PyId_name
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
Py_UseClassExceptionsFlag DD 01H
	ORG $+4
_PyOS_mystrnicmp_hack DQ FLAT:PyOS_mystrnicmp
progname DQ	FLAT:??_C@_1O@KDDPCNEL@?$AAp?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?$AA@
cause_message DQ FLAT:??_C@_0EI@ENDHMPEA@?6The?5above?5exception?5was?5the?5dir@
context_message DQ FLAT:??_C@_0EH@FGGCAPDG@?6During?5handling?5of?5the?5above?5ex@
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_08NOCNCINM@warnings?$AA@			; `string'
PUBLIC	PyModule_GetWarningsModule
EXTRN	PyImport_ImportModule:PROC
;	COMDAT ??_C@_08NOCNCINM@warnings?$AA@
; File c:\src\pyparallel\python\pythonrun.c
CONST	SEGMENT
??_C@_08NOCNCINM@warnings?$AA@ DB 'warnings', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyModule_GetWarningsModule
_TEXT	SEGMENT
PyModule_GetWarningsModule PROC				; COMDAT

; 108  :     return PyImport_ImportModule("warnings");

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NOCNCINM@warnings?$AA@

; 109  : }

  00007	e9 00 00 00 00	 jmp	 PyImport_ImportModule
PyModule_GetWarningsModule ENDP
_TEXT	ENDS
PUBLIC	Py_IsInitialized
; Function compile flags: /Ogtpy
;	COMDAT Py_IsInitialized
_TEXT	SEGMENT
Py_IsInitialized PROC					; COMDAT

; 118  :     return initialized;

  00000	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR initialized

; 119  : }

  00006	c3		 ret	 0
Py_IsInitialized ENDP
_TEXT	ENDS
EXTRN	__imp_atoi:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_flag DD imagerel add_flag
	DD	imagerel add_flag+40
	DD	imagerel $unwind$add_flag
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_flag DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT add_flag
_TEXT	SEGMENT
flag$ = 48
envs$ = 56
add_flag PROC						; COMDAT

; 135  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	8b d9		 mov	 ebx, ecx

; 136  :     int env = atoi(envs);

  00008	48 8b ca	 mov	 rcx, rdx
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi

; 137  :     if (flag < env)

  00011	3b d8		 cmp	 ebx, eax
  00013	0f 4c d8	 cmovl	 ebx, eax

; 138  :         flag = env;
; 139  :     if (flag < 1)

  00016	b8 01 00 00 00	 mov	 eax, 1
  0001b	3b d8		 cmp	 ebx, eax
  0001d	0f 4c d8	 cmovl	 ebx, eax

; 140  :         flag = 1;
; 141  :     return flag;

  00020	8b c3		 mov	 eax, ebx

; 142  : }

  00022	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00026	5b		 pop	 rbx
  00027	c3		 ret	 0
add_flag ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@HAKCHPI@get_codec_name?$AA@		; `string'
PUBLIC	??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@ ; `string'
EXTRN	PyErr_NoMemory:PROC
EXTRN	__imp_strdup:PROC
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_PyCodec_Lookup:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$get_codec_name DD imagerel get_codec_name
	DD	imagerel get_codec_name+103
	DD	imagerel $unwind$get_codec_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$get_codec_name DD imagerel get_codec_name+103
	DD	imagerel get_codec_name+219
	DD	imagerel $chain$0$get_codec_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$get_codec_name DD imagerel get_codec_name+219
	DD	imagerel get_codec_name+541
	DD	imagerel $chain$1$get_codec_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$get_codec_name DD 021H
	DD	imagerel get_codec_name
	DD	imagerel get_codec_name+103
	DD	imagerel $unwind$get_codec_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$get_codec_name DD 020521H
	DD	086405H
	DD	imagerel get_codec_name
	DD	imagerel get_codec_name+103
	DD	imagerel $unwind$get_codec_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_codec_name DD 040a01H
	DD	09340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0P@HAKCHPI@get_codec_name?$AA@
CONST	SEGMENT
??_C@_0P@HAKCHPI@get_codec_name?$AA@ DB 'get_codec_name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@
CONST	SEGMENT
??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@ DB '..\Python\pythonru'
	DB	'n.c', 00H					; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pythonrun.c
CONST	ENDS
;	COMDAT get_codec_name
_TEXT	SEGMENT
encoding$ = 64
get_codec_name PROC					; COMDAT

; 146  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 147  :     char *name_utf8, *name_str;
; 148  :     PyObject *codec, *name = NULL;
; 149  :     _Py_IDENTIFIER(name);
; 150  : 
; 151  :     codec = _PyCodec_Lookup(encoding);

  0000a	e8 00 00 00 00	 call	 _PyCodec_Lookup
  0000f	48 8b f8	 mov	 rdi, rax

; 152  :     if (!codec)

  00012	48 85 c0	 test	 rax, rax
  00015	0f 84 f5 01 00
	00		 je	 $LN3@get_codec_

; 153  :         goto error;
; 154  : 
; 155  :     name = _PyObject_GetAttrId(codec, &PyId_name);

  0001b	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00022	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  0002b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_name@?1??get_codec_name@@9@9
  00030	4a 03 14 c1	 add	 rdx, QWORD PTR [rcx+r8*8]
  00034	48 8b c8	 mov	 rcx, rax
  00037	e8 00 00 00 00	 call	 _PyObject_GetAttrId

; 156  :     Py_CLEAR(codec);

  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@HAKCHPI@get_codec_name?$AA@
  0004a	4c 8b cf	 mov	 r9, rdi
  0004d	41 b8 9c 00 00
	00		 mov	 r8d, 156		; 0000009cH
  00053	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0005b	48 8b d8	 mov	 rbx, rax
  0005e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00063	85 c0		 test	 eax, eax
  00065	75 74		 jne	 SHORT $LN14@get_codec_
  00067	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0006c	48 8b f7	 mov	 rsi, rdi
  0006f	33 ff		 xor	 edi, edi
  00071	e8 00 00 00 00	 call	 _Py_PXCTX
  00076	85 c0		 test	 eax, eax
  00078	75 5c		 jne	 SHORT $LN52@get_codec_
  0007a	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0007e	a8 20		 test	 al, 32			; 00000020H
  00080	75 4c		 jne	 SHORT $LN23@get_codec_
  00082	84 c0		 test	 al, al
  00084	78 48		 js	 SHORT $LN23@get_codec_
  00086	a8 02		 test	 al, 2
  00088	75 4c		 jne	 SHORT $LN52@get_codec_
  0008a	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  0008e	75 46		 jne	 SHORT $LN52@get_codec_
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0009e	4c 8b ce	 mov	 r9, rsi
  000a1	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000a7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000af	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b4	48 8b ce	 mov	 rcx, rsi
  000b7	85 c0		 test	 eax, eax
  000b9	74 07		 je	 SHORT $LN28@get_codec_
  000bb	e8 00 00 00 00	 call	 _Px_Dealloc
  000c0	eb 14		 jmp	 SHORT $LN52@get_codec_
$LN28@get_codec_:
  000c2	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  000c6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000cc	eb 08		 jmp	 SHORT $LN52@get_codec_
$LN23@get_codec_:
  000ce	48 8b ce	 mov	 rcx, rsi
  000d1	e8 00 00 00 00	 call	 Px_DecRef
$LN52@get_codec_:
  000d6	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
$LN14@get_codec_:

; 157  :     if (!name)

  000db	48 85 db	 test	 rbx, rbx
  000de	74 46		 je	 SHORT $error$121986

; 158  :         goto error;
; 159  : 
; 160  :     name_utf8 = _PyUnicode_AsString(name);

  000e0	48 8b cb	 mov	 rcx, rbx
  000e3	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 161  :     if (name_utf8 == NULL)

  000e8	48 85 c0	 test	 rax, rax
  000eb	74 39		 je	 SHORT $error$121986

; 162  :         goto error;
; 163  :     name_str = strdup(name_utf8);

  000ed	48 8b c8	 mov	 rcx, rax
  000f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup

; 164  :     Py_DECREF(name);

  000f6	48 8b cb	 mov	 rcx, rbx
  000f9	48 8b f8	 mov	 rdi, rax
  000fc	e8 00 00 00 00	 call	 _Py_DecRef

; 165  :     if (name_str == NULL) {

  00101	48 85 ff	 test	 rdi, rdi
  00104	75 12		 jne	 SHORT $LN9@get_codec_

; 166  :         PyErr_NoMemory();

  00106	e8 00 00 00 00	 call	 PyErr_NoMemory

; 174  :     return NULL;

  0010b	33 c0		 xor	 eax, eax

; 175  : }

  0010d	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00112	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00116	5f		 pop	 rdi
  00117	c3		 ret	 0
$LN9@get_codec_:

; 167  :         return NULL;
; 168  :     }
; 169  :     return name_str;

  00118	48 8b c7	 mov	 rax, rdi

; 175  : }

  0011b	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00120	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00124	5f		 pop	 rdi
  00125	c3		 ret	 0
$error$121986:

; 170  : 
; 171  : error:
; 172  :     Py_XDECREF(codec);

  00126	48 85 ff	 test	 rdi, rdi
  00129	74 65		 je	 SHORT $LN7@get_codec_
  0012b	e8 00 00 00 00	 call	 _Py_PXCTX
  00130	85 c0		 test	 eax, eax
  00132	75 5c		 jne	 SHORT $LN7@get_codec_
  00134	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00138	a8 20		 test	 al, 32			; 00000020H
  0013a	75 4c		 jne	 SHORT $LN34@get_codec_
  0013c	84 c0		 test	 al, al
  0013e	78 48		 js	 SHORT $LN34@get_codec_
  00140	a8 02		 test	 al, 2
  00142	75 4c		 jne	 SHORT $LN7@get_codec_
  00144	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00148	75 46		 jne	 SHORT $LN7@get_codec_
  0014a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00151	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00158	4c 8b cf	 mov	 r9, rdi
  0015b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00161	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00169	e8 00 00 00 00	 call	 _PyParallel_Guard
  0016e	48 8b cf	 mov	 rcx, rdi
  00171	85 c0		 test	 eax, eax
  00173	74 07		 je	 SHORT $LN39@get_codec_
  00175	e8 00 00 00 00	 call	 _Px_Dealloc
  0017a	eb 14		 jmp	 SHORT $LN7@get_codec_
$LN39@get_codec_:
  0017c	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00180	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00186	eb 08		 jmp	 SHORT $LN7@get_codec_
$LN34@get_codec_:
  00188	48 8b cf	 mov	 rcx, rdi
  0018b	e8 00 00 00 00	 call	 Px_DecRef
$LN7@get_codec_:

; 173  :     Py_XDECREF(name);

  00190	48 85 db	 test	 rbx, rbx
  00193	74 7b		 je	 SHORT $LN3@get_codec_
  00195	e8 00 00 00 00	 call	 _Py_PXCTX
  0019a	85 c0		 test	 eax, eax
  0019c	75 72		 jne	 SHORT $LN3@get_codec_
  0019e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001a2	a8 20		 test	 al, 32			; 00000020H
  001a4	75 62		 jne	 SHORT $LN45@get_codec_
  001a6	84 c0		 test	 al, al
  001a8	78 5e		 js	 SHORT $LN45@get_codec_
  001aa	a8 02		 test	 al, 2
  001ac	75 62		 jne	 SHORT $LN3@get_codec_
  001ae	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001b2	75 5c		 jne	 SHORT $LN3@get_codec_
  001b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001c2	4c 8b cb	 mov	 r9, rbx
  001c5	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001cb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001d3	e8 00 00 00 00	 call	 _PyParallel_Guard
  001d8	48 8b cb	 mov	 rcx, rbx
  001db	85 c0		 test	 eax, eax
  001dd	74 12		 je	 SHORT $LN50@get_codec_
  001df	e8 00 00 00 00	 call	 _Px_Dealloc

; 174  :     return NULL;

  001e4	33 c0		 xor	 eax, eax

; 175  : }

  001e6	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  001eb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001ef	5f		 pop	 rdi
  001f0	c3		 ret	 0

; 173  :     Py_XDECREF(name);

$LN50@get_codec_:
  001f1	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001f5	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 174  :     return NULL;

  001fb	33 c0		 xor	 eax, eax

; 175  : }

  001fd	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00202	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00206	5f		 pop	 rdi
  00207	c3		 ret	 0

; 173  :     Py_XDECREF(name);

$LN45@get_codec_:
  00208	48 8b cb	 mov	 rcx, rbx
  0020b	e8 00 00 00 00	 call	 Px_DecRef
$LN3@get_codec_:

; 174  :     return NULL;

  00210	33 c0		 xor	 eax, eax

; 175  : }

  00212	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00217	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0021b	5f		 pop	 rdi
  0021c	c3		 ret	 0
get_codec_name ENDP
_TEXT	ENDS
PUBLIC	??_C@_04LDGHIPEL@cp?$CFd?$AA@			; `string'
EXTRN	PyOS_snprintf:PROC
EXTRN	__imp_GetACP:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_locale_encoding DD imagerel get_locale_encoding
	DD	imagerel get_locale_encoding+56
	DD	imagerel $unwind$get_locale_encoding
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_locale_encoding DD 020701H
	DD	0130107H
xdata	ENDS
;	COMDAT ??_C@_04LDGHIPEL@cp?$CFd?$AA@
CONST	SEGMENT
??_C@_04LDGHIPEL@cp?$CFd?$AA@ DB 'cp%d', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT get_locale_encoding
_TEXT	SEGMENT
codepage$ = 32
get_locale_encoding PROC				; COMDAT

; 179  : {

  00000	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 180  : #ifdef MS_WINDOWS
; 181  :     char codepage[100];
; 182  :     PyOS_snprintf(codepage, sizeof(codepage), "cp%d", GetACP());

  00007	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetACP
  0000d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04LDGHIPEL@cp?$CFd?$AA@
  00014	48 8d 4c 24 20	 lea	 rcx, QWORD PTR codepage$[rsp]
  00019	44 8b c8	 mov	 r9d, eax
  0001c	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  00021	e8 00 00 00 00	 call	 PyOS_snprintf

; 183  :     return get_codec_name(codepage);

  00026	48 8d 4c 24 20	 lea	 rcx, QWORD PTR codepage$[rsp]
  0002b	e8 00 00 00 00	 call	 get_codec_name

; 184  : #elif defined(HAVE_LANGINFO_H) && defined(CODESET)
; 185  :     char* codeset = nl_langinfo(CODESET);
; 186  :     if (!codeset || codeset[0] == '\0') {
; 187  :         PyErr_SetString(PyExc_ValueError, "CODESET is not set or empty");
; 188  :         return NULL;
; 189  :     }
; 190  :     return get_codec_name(codeset);
; 191  : #else
; 192  :     PyErr_SetNone(PyExc_NotImplementedError);
; 193  :     return NULL;
; 194  : #endif
; 195  : }

  00030	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00037	c3		 ret	 0
get_locale_encoding ENDP
_TEXT	ENDS
PUBLIC	??_C@_06IKJOPBFO@closed?$AA@			; `string'
EXTRN	PyObject_IsTrue:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyObject_GetAttrString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$file_is_closed DD imagerel file_is_closed
	DD	imagerel file_is_closed+89
	DD	imagerel $unwind$file_is_closed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$file_is_closed DD 042f01H
	DD	06342fH
	DD	070023206H
xdata	ENDS
;	COMDAT ??_C@_06IKJOPBFO@closed?$AA@
CONST	SEGMENT
??_C@_06IKJOPBFO@closed?$AA@ DB 'closed', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT file_is_closed
_TEXT	SEGMENT
fobj$ = 48
file_is_closed PROC					; COMDAT

; 448  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 449  :     int r;
; 450  :     PyObject *tmp = PyObject_GetAttrString(fobj, "closed");

  00006	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IKJOPBFO@closed?$AA@
  0000d	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00012	48 8b f8	 mov	 rdi, rax

; 451  :     if (tmp == NULL) {

  00015	48 85 c0	 test	 rax, rax
  00018	75 0d		 jne	 SHORT $LN2@file_is_cl

; 452  :         PyErr_Clear();

  0001a	e8 00 00 00 00	 call	 PyErr_Clear

; 453  :         return 0;

  0001f	33 c0		 xor	 eax, eax

; 460  : }

  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5f		 pop	 rdi
  00026	c3		 ret	 0
$LN2@file_is_cl:

; 454  :     }
; 455  :     r = PyObject_IsTrue(tmp);

  00027	48 8b c8	 mov	 rcx, rax
  0002a	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0002f	e8 00 00 00 00	 call	 PyObject_IsTrue

; 456  :     Py_DECREF(tmp);

  00034	48 8b cf	 mov	 rcx, rdi
  00037	8b d8		 mov	 ebx, eax
  00039	e8 00 00 00 00	 call	 _Py_DecRef

; 457  :     if (r < 0)

  0003e	85 db		 test	 ebx, ebx
  00040	79 05		 jns	 SHORT $LN1@file_is_cl

; 458  :         PyErr_Clear();

  00042	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@file_is_cl:

; 459  :     return r > 0;

  00047	33 c0		 xor	 eax, eax
  00049	85 db		 test	 ebx, ebx
  0004b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00050	0f 9f c0	 setg	 al

; 460  : }

  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
file_is_closed ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_06FJGNEBG@stderr?$AA@			; `string'
PUBLIC	??_C@_06DJDOIFHB@stdout?$AA@			; `string'
EXTRN	PyErr_WriteUnraisable:PROC
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PySys_GetObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$flush_std_files DD imagerel flush_std_files
	DD	imagerel flush_std_files+247
	DD	imagerel $unwind$flush_std_files
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$flush_std_files DD 081501H
	DD	087415H
	DD	075415H
	DD	063415H
	DD	0c0113215H
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJGNEBG@stderr?$AA@
CONST	SEGMENT
??_C@_06FJGNEBG@stderr?$AA@ DB 'stderr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJDOIFHB@stdout?$AA@
CONST	SEGMENT
??_C@_06DJDOIFHB@stdout?$AA@ DB 'stdout', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT flush_std_files
_TEXT	SEGMENT
flush_std_files PROC					; COMDAT

; 464  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	41 54		 push	 r12
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 465  :     PyObject *fout = PySys_GetObject("stdout");

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  0001c	e8 00 00 00 00	 call	 PySys_GetObject

; 466  :     PyObject *ferr = PySys_GetObject("stderr");

  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00028	48 8b d8	 mov	 rbx, rax
  0002b	e8 00 00 00 00	 call	 PySys_GetObject

; 467  :     PyObject *tmp;
; 468  :     _Py_IDENTIFIER(flush);
; 469  : 
; 470  :     if (fout != NULL && fout != Py_None && !file_is_closed(fout)) {

  00030	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_Py_NoneStruct
  00037	41 bc 00 00 00
	00		 mov	 r12d, OFFSET FLAT:?PyId_flush@?1??flush_std_files@@9@9
  0003d	48 8b f8	 mov	 rdi, rax
  00040	48 85 db	 test	 rbx, rbx
  00043	74 4d		 je	 SHORT $LN4@flush_std_
  00045	48 3b dd	 cmp	 rbx, rbp
  00048	74 48		 je	 SHORT $LN4@flush_std_
  0004a	48 8b cb	 mov	 rcx, rbx
  0004d	e8 00 00 00 00	 call	 file_is_closed
  00052	85 c0		 test	 eax, eax
  00054	75 3c		 jne	 SHORT $LN4@flush_std_

; 471  :         tmp = _PyObject_CallMethodId(fout, &PyId_flush, "");

  00056	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005c	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00065	41 8b d4	 mov	 edx, r12d
  00068	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  0006c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00073	48 8b cb	 mov	 rcx, rbx
  00076	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 472  :         if (tmp == NULL)

  0007b	48 85 c0	 test	 rax, rax
  0007e	75 0a		 jne	 SHORT $LN5@flush_std_

; 473  :             PyErr_WriteUnraisable(fout);

  00080	48 8b cb	 mov	 rcx, rbx
  00083	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 474  :         else

  00088	eb 08		 jmp	 SHORT $LN4@flush_std_
$LN5@flush_std_:

; 475  :             Py_DECREF(tmp);

  0008a	48 8b c8	 mov	 rcx, rax
  0008d	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@flush_std_:

; 476  :     }
; 477  : 
; 478  :     if (ferr != NULL && ferr != Py_None && !file_is_closed(ferr)) {

  00092	48 85 ff	 test	 rdi, rdi
  00095	74 4a		 je	 SHORT $LN1@flush_std_
  00097	48 3b fd	 cmp	 rdi, rbp
  0009a	74 45		 je	 SHORT $LN1@flush_std_
  0009c	48 8b cf	 mov	 rcx, rdi
  0009f	e8 00 00 00 00	 call	 file_is_closed
  000a4	85 c0		 test	 eax, eax
  000a6	75 39		 jne	 SHORT $LN1@flush_std_

; 479  :         tmp = _PyObject_CallMethodId(ferr, &PyId_flush, "");

  000a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000ae	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  000b7	41 8b d4	 mov	 edx, r12d
  000ba	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  000be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000c5	48 8b cf	 mov	 rcx, rdi
  000c8	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 480  :         if (tmp == NULL)

  000cd	48 85 c0	 test	 rax, rax
  000d0	75 07		 jne	 SHORT $LN2@flush_std_

; 481  :             PyErr_Clear();

  000d2	e8 00 00 00 00	 call	 PyErr_Clear

; 482  :         else

  000d7	eb 08		 jmp	 SHORT $LN1@flush_std_
$LN2@flush_std_:

; 483  :             Py_DECREF(tmp);

  000d9	48 8b c8	 mov	 rcx, rax
  000dc	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@flush_std_:

; 484  :     }
; 485  : }

  000e1	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000e6	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000eb	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000f0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f4	41 5c		 pop	 r12
  000f6	c3		 ret	 0
flush_std_files ENDP
_TEXT	ENDS
PUBLIC	Py_SetProgramName
; Function compile flags: /Ogtpy
;	COMDAT Py_SetProgramName
_TEXT	SEGMENT
pn$ = 8
Py_SetProgramName PROC					; COMDAT

; 823  :     if (pn && *pn)

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 16		 je	 SHORT $LN1@Py_SetProg
  00005	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR progname
  0000c	66 83 39 00	 cmp	 WORD PTR [rcx], 0
  00010	48 0f 45 c1	 cmovne	 rax, rcx
  00014	48 89 05 00 00
	00 00		 mov	 QWORD PTR progname, rax
$LN1@Py_SetProg:

; 824  :         progname = pn;
; 825  : }

  0001b	f3 c3		 fatret	 0
Py_SetProgramName ENDP
_TEXT	ENDS
PUBLIC	Py_GetProgramName
; Function compile flags: /Ogtpy
;	COMDAT Py_GetProgramName
_TEXT	SEGMENT
Py_GetProgramName PROC					; COMDAT

; 830  :     return progname;

  00000	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR progname

; 831  : }

  00007	c3		 ret	 0
Py_GetProgramName ENDP
_TEXT	ENDS
PUBLIC	Py_SetPythonHome
; Function compile flags: /Ogtpy
;	COMDAT Py_SetPythonHome
_TEXT	SEGMENT
home$ = 8
Py_SetPythonHome PROC					; COMDAT

; 839  :     default_home = home;

  00000	48 89 0d 00 00
	00 00		 mov	 QWORD PTR default_home, rcx

; 840  : }

  00007	c3		 ret	 0
Py_SetPythonHome ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@KFKIGHCL@PYTHONHOME?$AA@		; `string'
PUBLIC	Py_GetPythonHome
EXTRN	__imp_mbstowcs:PROC
EXTRN	__imp_getenv:PROC
_BSS	SEGMENT
env_home DW	0101H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_GetPythonHome DD imagerel $LN13
	DD	imagerel $LN13+44
	DD	imagerel $unwind$Py_GetPythonHome
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$Py_GetPythonHome DD imagerel $LN13+44
	DD	imagerel $LN13+104
	DD	imagerel $chain$0$Py_GetPythonHome
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$Py_GetPythonHome DD imagerel $LN13+104
	DD	imagerel $LN13+118
	DD	imagerel $chain$2$Py_GetPythonHome
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$Py_GetPythonHome DD imagerel $LN13+118
	DD	imagerel $LN13+127
	DD	imagerel $chain$3$Py_GetPythonHome
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$Py_GetPythonHome DD 021H
	DD	imagerel $LN13
	DD	imagerel $LN13+44
	DD	imagerel $unwind$Py_GetPythonHome
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$Py_GetPythonHome DD 020021H
	DD	067400H
	DD	imagerel $LN13
	DD	imagerel $LN13+44
	DD	imagerel $unwind$Py_GetPythonHome
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$Py_GetPythonHome DD 020521H
	DD	067405H
	DD	imagerel $LN13
	DD	imagerel $LN13+44
	DD	imagerel $unwind$Py_GetPythonHome
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_GetPythonHome DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0L@KFKIGHCL@PYTHONHOME?$AA@
CONST	SEGMENT
??_C@_0L@KFKIGHCL@PYTHONHOME?$AA@ DB 'PYTHONHOME', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT Py_GetPythonHome
_TEXT	SEGMENT
Py_GetPythonHome PROC					; COMDAT

; 844  : {

$LN13:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 845  :     wchar_t *home = default_home;

  00006	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR default_home

; 846  :     if (home == NULL && !Py_IgnoreEnvironmentFlag) {

  0000d	48 85 db	 test	 rbx, rbx
  00010	75 64		 jne	 SHORT $LN9@Py_GetPyth
  00012	39 1d 00 00 00
	00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, ebx
  00018	75 5c		 jne	 SHORT $LN9@Py_GetPyth

; 847  :         char* chome = Py_GETENV("PYTHONHOME");

  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@KFKIGHCL@PYTHONHOME?$AA@
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv

; 848  :         if (chome) {

  00027	48 85 c0	 test	 rax, rax
  0002a	74 4a		 je	 SHORT $LN9@Py_GetPyth

; 849  :             size_t size = Py_ARRAY_LENGTH(env_home);
; 850  :             size_t r = mbstowcs(env_home, chome, size);

  0002c	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00031	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:env_home
  00038	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  0003e	48 8b cf	 mov	 rcx, rdi
  00041	48 8b d0	 mov	 rdx, rax
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_mbstowcs

; 851  :             if (r != (size_t)-1 && r < size)

  0004a	48 83 f8 ff	 cmp	 rax, -1
  0004e	74 18		 je	 SHORT $LN8@Py_GetPyth
  00050	48 3d 01 01 00
	00		 cmp	 rax, 257		; 00000101H
  00056	48 0f 43 fb	 cmovae	 rdi, rbx

; 852  :                 home = env_home;
; 853  :         }
; 854  : 
; 855  :     }
; 856  :     return home;

  0005a	48 8b c7	 mov	 rax, rdi
  0005d	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 857  : }

  00062	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00066	5b		 pop	 rbx
  00067	c3		 ret	 0
$LN8@Py_GetPyth:

; 852  :                 home = env_home;
; 853  :         }
; 854  : 
; 855  :     }
; 856  :     return home;

  00068	48 8b c3	 mov	 rax, rbx
  0006b	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 857  : }

  00070	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00074	5b		 pop	 rbx
  00075	c3		 ret	 0
$LN9@Py_GetPyth:

; 852  :                 home = env_home;
; 853  :         }
; 854  : 
; 855  :     }
; 856  :     return home;

  00076	48 8b c3	 mov	 rax, rbx

; 857  : }

  00079	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007d	5b		 pop	 rbx
  0007e	c3		 ret	 0
Py_GetPythonHome ENDP
_TEXT	ENDS
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_05FGJNPGEL@OsssO?$AA@			; `string'
PUBLIC	??_C@_0N@OEHPDOBJ@create_stdio?$AA@		; `string'
PUBLIC	??_C@_07HBCPJCMC@isiOOOi?$AA@			; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_PyObject_SetAttrId:PROC
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$create_stdio DD imagerel create_stdio
	DD	imagerel create_stdio+1267
	DD	imagerel $unwind$create_stdio
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$create_stdio DD 0c7501H
	DD	011d475H
	DD	013541bH
	DD	012341bH
	DD	0f017921bH
	DD	0c013e015H
	DD	060107011H
xdata	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FGJNPGEL@OsssO?$AA@
CONST	SEGMENT
??_C@_05FGJNPGEL@OsssO?$AA@ DB 'OsssO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OEHPDOBJ@create_stdio?$AA@
CONST	SEGMENT
??_C@_0N@OEHPDOBJ@create_stdio?$AA@ DB 'create_stdio', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07HBCPJCMC@isiOOOi?$AA@
CONST	SEGMENT
??_C@_07HBCPJCMC@isiOOOi?$AA@ DB 'isiOOOi', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pythonrun.c
CONST	ENDS
;	COMDAT create_stdio
_TEXT	SEGMENT
io$ = 128
fd$ = 136
write_mode$ = 144
name$ = 152
encoding$ = 160
errors$ = 168
create_stdio PROC					; COMDAT

; 948  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	41 54		 push	 r12
  00013	41 56		 push	 r14
  00015	41 57		 push	 r15
  00017	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 949  :     PyObject *buf = NULL, *stream = NULL, *text = NULL, *raw = NULL, *res;

  0001b	33 db		 xor	 ebx, ebx
  0001d	33 ed		 xor	 ebp, ebp
  0001f	4d 8b e1	 mov	 r12, r9

; 950  :     const char* mode;
; 951  :     const char* newline;
; 952  :     PyObject *line_buffering;
; 953  :     int buffering, isatty;
; 954  :     _Py_IDENTIFIER(open);
; 955  :     _Py_IDENTIFIER(isatty);
; 956  :     _Py_IDENTIFIER(TextIOWrapper);
; 957  :     _Py_IDENTIFIER(name);
; 958  :     _Py_IDENTIFIER(mode);
; 959  : 
; 960  :     /* stdin is always opened in buffered mode, first because it shouldn't
; 961  :        make a difference in common use cases, second because TextIOWrapper
; 962  :        depends on the presence of a read1() method which only exists on
; 963  :        buffered streams.
; 964  :     */
; 965  :     if (Py_UnbufferedStdioFlag && write_mode)

  00022	39 1d 00 00 00
	00		 cmp	 DWORD PTR Py_UnbufferedStdioFlag, ebx
  00028	45 8b f8	 mov	 r15d, r8d
  0002b	44 8b ca	 mov	 r9d, edx
  0002e	4c 8b d1	 mov	 r10, rcx
  00031	74 09		 je	 SHORT $LN52@create_std
  00033	45 85 c0	 test	 r8d, r8d
  00036	74 04		 je	 SHORT $LN52@create_std

; 966  :         buffering = 0;

  00038	33 ff		 xor	 edi, edi

; 967  :     else

  0003a	eb 03		 jmp	 SHORT $LN51@create_std
$LN52@create_std:

; 968  :         buffering = -1;

  0003c	83 cf ff	 or	 edi, -1
$LN51@create_std:

; 969  :     if (write_mode)
; 970  :         mode = "wb";
; 971  :     else
; 972  :         mode = "rb";
; 973  :     buf = _PyObject_CallMethodId(io, &PyId_open, "isiOOOi",
; 974  :                                  fd, mode, buffering,
; 975  :                                  Py_None, Py_None, Py_None, 0);

  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00045	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  0004a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  00051	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
  00058	45 85 ff	 test	 r15d, r15d
  0005b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_open@?1??create_stdio@@9@9
  00060	4c 0f 44 c0	 cmove	 r8, rax
  00064	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0006d	4c 89 ac 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], r13
  00075	4c 8b 34 c8	 mov	 r14, QWORD PTR [rax+rcx*8]
  00079	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00080	49 8b ca	 mov	 rcx, r10
  00083	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00088	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0008d	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00092	89 7c 24 28	 mov	 DWORD PTR [rsp+40], edi
  00096	4c 89 44 24 20	 mov	 QWORD PTR [rsp+32], r8
  0009b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07HBCPJCMC@isiOOOi?$AA@
  000a2	49 03 d6	 add	 rdx, r14
  000a5	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  000aa	48 8b f0	 mov	 rsi, rax

; 976  :     if (buf == NULL)

  000ad	48 85 c0	 test	 rax, rax
  000b0	0f 84 1a 04 00
	00		 je	 $LN3@create_std

; 977  :         goto error;
; 978  : 
; 979  :     if (buffering) {

  000b6	85 ff		 test	 edi, edi
  000b8	0f 84 91 00 00
	00		 je	 $LN47@create_std

; 980  :         _Py_IDENTIFIER(raw);
; 981  :         raw = _PyObject_GetAttrId(buf, &PyId_raw);

  000be	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_raw@?2??create_stdio@@9@9
  000c3	48 8b c8	 mov	 rcx, rax
  000c6	49 03 d6	 add	 rdx, r14
  000c9	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000ce	48 8b f8	 mov	 rdi, rax

; 982  :         if (raw == NULL)

  000d1	48 85 c0	 test	 rax, rax
  000d4	0f 85 b3 00 00
	00		 jne	 $LN56@create_std
$error$122387:

; 1035 : 
; 1036 : error:
; 1037 :     Py_XDECREF(buf);

  000da	48 85 f6	 test	 rsi, rsi
  000dd	0f 84 af 02 00
	00		 je	 $LN15@create_std
  000e3	e8 00 00 00 00	 call	 _Py_PXCTX
  000e8	85 c0		 test	 eax, eax
  000ea	0f 85 a2 02 00
	00		 jne	 $LN15@create_std
  000f0	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  000f4	a8 20		 test	 al, 32			; 00000020H
  000f6	0f 85 8e 02 00
	00		 jne	 $LN63@create_std
  000fc	84 c0		 test	 al, al
  000fe	0f 88 86 02 00
	00		 js	 $LN63@create_std
  00104	a8 02		 test	 al, 2
  00106	0f 85 86 02 00
	00		 jne	 $LN15@create_std
  0010c	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  00110	0f 85 7c 02 00
	00		 jne	 $LN15@create_std
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00124	4c 8b ce	 mov	 r9, rsi
  00127	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0012d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00135	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013a	48 8b ce	 mov	 rcx, rsi
  0013d	85 c0		 test	 eax, eax
  0013f	0f 84 39 02 00
	00		 je	 $LN68@create_std
  00145	e8 00 00 00 00	 call	 _Px_Dealloc
  0014a	e9 43 02 00 00	 jmp	 $LN15@create_std
$LN47@create_std:

; 983  :             goto error;
; 984  :     }
; 985  :     else {
; 986  :         raw = buf;

  0014f	48 8b f8	 mov	 rdi, rax

; 987  :         Py_INCREF(raw);

  00152	e8 00 00 00 00	 call	 _Py_PXCTX
  00157	85 c0		 test	 eax, eax
  00159	75 32		 jne	 SHORT $LN56@create_std
  0015b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00162	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00169	4c 8b ce	 mov	 r9, rsi
  0016c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00172	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0017a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0017f	85 c0		 test	 eax, eax
  00181	75 06		 jne	 SHORT $LN55@create_std
  00183	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  00187	74 04		 je	 SHORT $LN56@create_std
$LN55@create_std:
  00189	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN56@create_std:

; 988  :     }
; 989  : 
; 990  :     text = PyUnicode_FromString(name);

  0018d	49 8b cc	 mov	 rcx, r12
  00190	e8 00 00 00 00	 call	 PyUnicode_FromString
  00195	48 8b d8	 mov	 rbx, rax

; 991  :     if (text == NULL || _PyObject_SetAttrId(raw, &PyId_name, text) < 0)

  00198	48 85 c0	 test	 rax, rax
  0019b	0f 84 39 ff ff
	ff		 je	 $error$122387
  001a1	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_name@?1??create_stdio@@9@9
  001a6	4c 8b c0	 mov	 r8, rax
  001a9	48 8b cf	 mov	 rcx, rdi
  001ac	49 03 d6	 add	 rdx, r14
  001af	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001b4	85 c0		 test	 eax, eax
  001b6	0f 88 1e ff ff
	ff		 js	 $error$122387

; 992  :         goto error;
; 993  :     res = _PyObject_CallMethodId(raw, &PyId_isatty, "");

  001bc	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_isatty@?1??create_stdio@@9@9
  001c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  001c8	48 8b cf	 mov	 rcx, rdi
  001cb	49 03 d6	 add	 rdx, r14
  001ce	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  001d3	4c 8b e0	 mov	 r12, rax

; 994  :     if (res == NULL)

  001d6	48 85 c0	 test	 rax, rax
  001d9	0f 84 fb fe ff
	ff		 je	 $error$122387

; 995  :         goto error;
; 996  :     isatty = PyObject_IsTrue(res);

  001df	48 8b c8	 mov	 rcx, rax
  001e2	e8 00 00 00 00	 call	 PyObject_IsTrue

; 997  :     Py_DECREF(res);

  001e7	49 8b cc	 mov	 rcx, r12
  001ea	44 8b e8	 mov	 r13d, eax
  001ed	e8 00 00 00 00	 call	 _Py_DecRef

; 998  :     if (isatty == -1)

  001f2	41 83 fd ff	 cmp	 r13d, -1
  001f6	0f 84 de fe ff
	ff		 je	 $error$122387

; 999  :         goto error;
; 1000 :     if (isatty || Py_UnbufferedStdioFlag)

  001fc	45 85 ed	 test	 r13d, r13d
  001ff	75 0f		 jne	 SHORT $LN39@create_std
  00201	39 2d 00 00 00
	00		 cmp	 DWORD PTR Py_UnbufferedStdioFlag, ebp

; 1002 :     else
; 1003 :         line_buffering = Py_False;

  00207	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_Py_FalseStruct
  0020e	74 07		 je	 SHORT $LN37@create_std
$LN39@create_std:

; 1001 :         line_buffering = Py_True;

  00210	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_Py_TrueStruct
$LN37@create_std:

; 1004 : 
; 1005 :     Py_CLEAR(raw);

  00217	48 85 ff	 test	 rdi, rdi
  0021a	74 32		 je	 SHORT $LN36@create_std
  0021c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@
  00223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@OEHPDOBJ@create_stdio?$AA@
  0022a	4c 8b cf	 mov	 r9, rdi
  0022d	41 b8 ed 03 00
	00		 mov	 r8d, 1005		; 000003edH
  00233	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0023b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00240	85 c0		 test	 eax, eax
  00242	75 0a		 jne	 SHORT $LN36@create_std
  00244	48 8b cf	 mov	 rcx, rdi
  00247	33 ff		 xor	 edi, edi
  00249	e8 00 00 00 00	 call	 _Py_DecRef
$LN36@create_std:

; 1006 :     Py_CLEAR(text);

  0024e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@
  00255	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@OEHPDOBJ@create_stdio?$AA@
  0025c	4c 8b cb	 mov	 r9, rbx
  0025f	41 b8 ee 03 00
	00		 mov	 r8d, 1006		; 000003eeH
  00265	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0026d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00272	85 c0		 test	 eax, eax
  00274	75 0a		 jne	 SHORT $LN32@create_std
  00276	48 8b cb	 mov	 rcx, rbx
  00279	33 db		 xor	 ebx, ebx
  0027b	e8 00 00 00 00	 call	 _Py_DecRef
$LN32@create_std:

; 1007 : 
; 1008 : #ifdef MS_WINDOWS
; 1009 :     /* sys.stdin: enable universal newline mode, translate "\r\n" and "\r"
; 1010 :        newlines to "\n".
; 1011 :        sys.stdout and sys.stderr: translate "\n" to "\r\n". */
; 1012 :     newline = NULL;
; 1013 : #else
; 1014 :     /* sys.stdin: split lines at "\n".
; 1015 :        sys.stdout and sys.stderr: don't translate newlines (use "\n"). */
; 1016 :     newline = "\n";
; 1017 : #endif
; 1018 : 
; 1019 :     stream = _PyObject_CallMethodId(io, &PyId_TextIOWrapper, "OsssO",
; 1020 :                                     buf, encoding, errors,
; 1021 :                                     newline, line_buffering);

  00280	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR errors$[rsp]
  00288	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR io$[rsp]
  00290	48 89 6c 24 38	 mov	 QWORD PTR [rsp+56], rbp
  00295	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0029e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  002a3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR encoding$[rsp]
  002ab	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_TextIOWrapper@?1??create_stdio@@9@9
  002b0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05FGJNPGEL@OsssO?$AA@
  002b7	4c 8b ce	 mov	 r9, rsi
  002ba	49 03 d6	 add	 rdx, r14
  002bd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002c2	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 1022 :     Py_CLEAR(buf);

  002c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@
  002ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@OEHPDOBJ@create_stdio?$AA@
  002d5	4c 8b ce	 mov	 r9, rsi
  002d8	41 b8 fe 03 00
	00		 mov	 r8d, 1022		; 000003feH
  002de	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002e6	48 8b e8	 mov	 rbp, rax
  002e9	e8 00 00 00 00	 call	 _PyParallel_Guard
  002ee	85 c0		 test	 eax, eax
  002f0	75 0a		 jne	 SHORT $LN28@create_std
  002f2	48 8b ce	 mov	 rcx, rsi
  002f5	33 f6		 xor	 esi, esi
  002f7	e8 00 00 00 00	 call	 _Py_DecRef
$LN28@create_std:

; 1023 :     if (stream == NULL)

  002fc	48 85 ed	 test	 rbp, rbp
  002ff	0f 84 d5 fd ff
	ff		 je	 $error$122387

; 1024 :         goto error;
; 1025 : 
; 1026 :     if (write_mode)

  00305	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01KDCPPGHE@r?$AA@
  0030c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01NOFIACDB@w?$AA@
  00313	45 85 ff	 test	 r15d, r15d
  00316	48 0f 44 c8	 cmove	 rcx, rax

; 1027 :         mode = "w";
; 1028 :     else
; 1029 :         mode = "r";
; 1030 :     text = PyUnicode_FromString(mode);

  0031a	e8 00 00 00 00	 call	 PyUnicode_FromString
  0031f	48 8b d8	 mov	 rbx, rax

; 1031 :     if (!text || _PyObject_SetAttrId(stream, &PyId_mode, text) < 0)

  00322	48 85 c0	 test	 rax, rax
  00325	0f 84 af fd ff
	ff		 je	 $error$122387
  0032b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_mode@?1??create_stdio@@9@9
  00330	4c 8b c0	 mov	 r8, rax
  00333	48 8b cd	 mov	 rcx, rbp
  00336	49 03 d6	 add	 rdx, r14
  00339	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0033e	85 c0		 test	 eax, eax
  00340	0f 88 94 fd ff
	ff		 js	 $error$122387

; 1032 :         goto error;
; 1033 :     Py_CLEAR(text);

  00346	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@
  0034d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@OEHPDOBJ@create_stdio?$AA@
  00354	4c 8b cb	 mov	 r9, rbx
  00357	41 b8 09 04 00
	00		 mov	 r8d, 1033		; 00000409H
  0035d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00365	e8 00 00 00 00	 call	 _PyParallel_Guard
  0036a	85 c0		 test	 eax, eax
  0036c	75 08		 jne	 SHORT $LN19@create_std
  0036e	48 8b cb	 mov	 rcx, rbx
  00371	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@create_std:

; 1034 :     return stream;

  00376	48 8b c5	 mov	 rax, rbp
  00379	e9 54 01 00 00	 jmp	 $LN53@create_std

; 1035 : 
; 1036 : error:
; 1037 :     Py_XDECREF(buf);

$LN68@create_std:
  0037e	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  00382	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00388	eb 08		 jmp	 SHORT $LN15@create_std
$LN63@create_std:
  0038a	48 8b ce	 mov	 rcx, rsi
  0038d	e8 00 00 00 00	 call	 Px_DecRef
$LN15@create_std:

; 1038 :     Py_XDECREF(stream);

  00392	48 85 ed	 test	 rbp, rbp
  00395	74 65		 je	 SHORT $LN11@create_std
  00397	e8 00 00 00 00	 call	 _Py_PXCTX
  0039c	85 c0		 test	 eax, eax
  0039e	75 5c		 jne	 SHORT $LN11@create_std
  003a0	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  003a4	a8 20		 test	 al, 32			; 00000020H
  003a6	75 4c		 jne	 SHORT $LN74@create_std
  003a8	84 c0		 test	 al, al
  003aa	78 48		 js	 SHORT $LN74@create_std
  003ac	a8 02		 test	 al, 2
  003ae	75 4c		 jne	 SHORT $LN11@create_std
  003b0	48 ff 4d 50	 dec	 QWORD PTR [rbp+80]
  003b4	75 46		 jne	 SHORT $LN11@create_std
  003b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  003c4	4c 8b cd	 mov	 r9, rbp
  003c7	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  003cd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003d5	e8 00 00 00 00	 call	 _PyParallel_Guard
  003da	48 8b cd	 mov	 rcx, rbp
  003dd	85 c0		 test	 eax, eax
  003df	74 07		 je	 SHORT $LN79@create_std
  003e1	e8 00 00 00 00	 call	 _Px_Dealloc
  003e6	eb 14		 jmp	 SHORT $LN11@create_std
$LN79@create_std:
  003e8	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  003ec	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003f2	eb 08		 jmp	 SHORT $LN11@create_std
$LN74@create_std:
  003f4	48 8b cd	 mov	 rcx, rbp
  003f7	e8 00 00 00 00	 call	 Px_DecRef
$LN11@create_std:

; 1039 :     Py_XDECREF(text);

  003fc	48 85 db	 test	 rbx, rbx
  003ff	74 65		 je	 SHORT $LN7@create_std
  00401	e8 00 00 00 00	 call	 _Py_PXCTX
  00406	85 c0		 test	 eax, eax
  00408	75 5c		 jne	 SHORT $LN7@create_std
  0040a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0040e	a8 20		 test	 al, 32			; 00000020H
  00410	75 4c		 jne	 SHORT $LN85@create_std
  00412	84 c0		 test	 al, al
  00414	78 48		 js	 SHORT $LN85@create_std
  00416	a8 02		 test	 al, 2
  00418	75 4c		 jne	 SHORT $LN7@create_std
  0041a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0041e	75 46		 jne	 SHORT $LN7@create_std
  00420	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00427	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0042e	4c 8b cb	 mov	 r9, rbx
  00431	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00437	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0043f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00444	48 8b cb	 mov	 rcx, rbx
  00447	85 c0		 test	 eax, eax
  00449	74 07		 je	 SHORT $LN90@create_std
  0044b	e8 00 00 00 00	 call	 _Px_Dealloc
  00450	eb 14		 jmp	 SHORT $LN7@create_std
$LN90@create_std:
  00452	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00456	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0045c	eb 08		 jmp	 SHORT $LN7@create_std
$LN85@create_std:
  0045e	48 8b cb	 mov	 rcx, rbx
  00461	e8 00 00 00 00	 call	 Px_DecRef
$LN7@create_std:

; 1040 :     Py_XDECREF(raw);

  00466	48 85 ff	 test	 rdi, rdi
  00469	74 65		 je	 SHORT $LN3@create_std
  0046b	e8 00 00 00 00	 call	 _Py_PXCTX
  00470	85 c0		 test	 eax, eax
  00472	75 5c		 jne	 SHORT $LN3@create_std
  00474	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00478	a8 20		 test	 al, 32			; 00000020H
  0047a	75 4c		 jne	 SHORT $LN96@create_std
  0047c	84 c0		 test	 al, al
  0047e	78 48		 js	 SHORT $LN96@create_std
  00480	a8 02		 test	 al, 2
  00482	75 4c		 jne	 SHORT $LN3@create_std
  00484	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00488	75 46		 jne	 SHORT $LN3@create_std
  0048a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00491	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00498	4c 8b cf	 mov	 r9, rdi
  0049b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  004a1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004a9	e8 00 00 00 00	 call	 _PyParallel_Guard
  004ae	48 8b cf	 mov	 rcx, rdi
  004b1	85 c0		 test	 eax, eax
  004b3	74 07		 je	 SHORT $LN101@create_std
  004b5	e8 00 00 00 00	 call	 _Px_Dealloc
  004ba	eb 14		 jmp	 SHORT $LN3@create_std
$LN101@create_std:
  004bc	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  004c0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  004c6	eb 08		 jmp	 SHORT $LN3@create_std
$LN96@create_std:
  004c8	48 8b cf	 mov	 rcx, rdi
  004cb	e8 00 00 00 00	 call	 Px_DecRef
$LN3@create_std:

; 1041 :     return NULL;

  004d0	33 c0		 xor	 eax, eax
$LN53@create_std:
  004d2	4c 8b ac 24 88
	00 00 00	 mov	 r13, QWORD PTR [rsp+136]

; 1042 : }

  004da	4c 8d 5c 24 50	 lea	 r11, QWORD PTR [rsp+80]
  004df	49 8b 5b 40	 mov	 rbx, QWORD PTR [r11+64]
  004e3	49 8b 6b 48	 mov	 rbp, QWORD PTR [r11+72]
  004e7	49 8b e3	 mov	 rsp, r11
  004ea	41 5f		 pop	 r15
  004ec	41 5e		 pop	 r14
  004ee	41 5c		 pop	 r12
  004f0	5f		 pop	 rdi
  004f1	5e		 pop	 rsi
  004f2	c3		 ret	 0
create_stdio ENDP
_TEXT	ENDS
EXTRN	__imp_close:PROC
EXTRN	__imp_dup:PROC
EXTRN	_PyVerify_fd:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$is_valid_fd DD imagerel is_valid_fd
	DD	imagerel is_valid_fd+60
	DD	imagerel $unwind$is_valid_fd
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$is_valid_fd DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT is_valid_fd
_TEXT	SEGMENT
fd$ = 48
is_valid_fd PROC					; COMDAT

; 1046 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	8b d9		 mov	 ebx, ecx

; 1047 :     int dummy_fd;
; 1048 :     if (fd < 0 || !_PyVerify_fd(fd))

  00008	85 c9		 test	 ecx, ecx
  0000a	78 28		 js	 SHORT $LN2@is_valid_f
  0000c	e8 00 00 00 00	 call	 _PyVerify_fd
  00011	85 c0		 test	 eax, eax
  00013	74 1f		 je	 SHORT $LN2@is_valid_f

; 1050 :     dummy_fd = dup(fd);

  00015	8b cb		 mov	 ecx, ebx
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_dup

; 1051 :     if (dummy_fd < 0)

  0001d	85 c0		 test	 eax, eax

; 1052 :         return 0;

  0001f	78 13		 js	 SHORT $LN2@is_valid_f

; 1053 :     close(dummy_fd);

  00021	8b c8		 mov	 ecx, eax
  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 1054 :     return 1;

  00029	b8 01 00 00 00	 mov	 eax, 1

; 1055 : }

  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5b		 pop	 rbx
  00033	c3		 ret	 0
$LN2@is_valid_f:

; 1049 :         return 0;

  00034	33 c0		 xor	 eax, eax

; 1055 : }

  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5b		 pop	 rbx
  0003b	c3		 ret	 0
is_valid_fd ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@OJDCNPPP@__stderr__?$AA@		; `string'
PUBLIC	??_C@_08PODKMAPJ@?$DMstderr?$DO?$AA@		; `string'
PUBLIC	??_C@_0BB@GGCFDDAA@backslashreplace?$AA@	; `string'
PUBLIC	??_C@_0L@NPOCHPFF@__stdout__?$AA@		; `string'
PUBLIC	??_C@_08CNNAJMFD@?$DMstdout?$DO?$AA@		; `string'
PUBLIC	??_C@_05MHOFLBOO@stdin?$AA@			; `string'
PUBLIC	??_C@_09EFAEFGPG@__stdin__?$AA@			; `string'
PUBLIC	??_C@_07CMJMHHJG@?$DMstdin?$DO?$AA@		; `string'
PUBLIC	??_C@_0BB@DDJHNGCM@PYTHONIOENCODING?$AA@	; `string'
PUBLIC	??_C@_0M@LNNEGDCO@OpenWrapper?$AA@		; `string'
PUBLIC	??_C@_02KFNNKBCK@io?$AA@			; `string'
PUBLIC	??_C@_08OCOMCJAJ@builtins?$AA@			; `string'
PUBLIC	??_C@_0BC@IIKNEEFE@encodings?4latin_1?$AA@	; `string'
PUBLIC	??_C@_0BA@FFBNEIDG@encodings?4utf_8?$AA@	; `string'
EXTRN	PySys_SetObject:PROC
EXTRN	__imp_fileno:PROC
EXTRN	__imp___iob_func:PROC
EXTRN	__imp_strchr:PROC
EXTRN	__imp_free:PROC
EXTRN	PyObject_SetAttrString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$initstdio DD imagerel initstdio
	DD	imagerel initstdio+7
	DD	imagerel $unwind$initstdio
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$initstdio DD imagerel initstdio+7
	DD	imagerel initstdio+216
	DD	imagerel $chain$4$initstdio
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$initstdio DD imagerel initstdio+216
	DD	imagerel initstdio+239
	DD	imagerel $chain$5$initstdio
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$initstdio DD imagerel initstdio+239
	DD	imagerel initstdio+347
	DD	imagerel $chain$6$initstdio
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$initstdio DD imagerel initstdio+347
	DD	imagerel initstdio+886
	DD	imagerel $chain$7$initstdio
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$initstdio DD imagerel initstdio+886
	DD	imagerel initstdio+916
	DD	imagerel $chain$8$initstdio
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$initstdio DD imagerel initstdio+916
	DD	imagerel initstdio+1040
	DD	imagerel $chain$9$initstdio
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$initstdio DD 021H
	DD	imagerel initstdio
	DD	imagerel initstdio+7
	DD	imagerel $unwind$initstdio
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$initstdio DD 020021H
	DD	0b6400H
	DD	imagerel initstdio
	DD	imagerel initstdio+7
	DD	imagerel $unwind$initstdio
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$initstdio DD 0a0021H
	DD	06e400H
	DD	0dd400H
	DD	0cc400H
	DD	0b6400H
	DD	0a5400H
	DD	imagerel initstdio
	DD	imagerel initstdio+7
	DD	imagerel $unwind$initstdio
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$initstdio DD 020021H
	DD	0b6400H
	DD	imagerel initstdio
	DD	imagerel initstdio+7
	DD	imagerel $unwind$initstdio
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$initstdio DD 040021H
	DD	0cc400H
	DD	0b6400H
	DD	imagerel initstdio
	DD	imagerel initstdio+7
	DD	imagerel $unwind$initstdio
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$initstdio DD 0a2221H
	DD	06e422H
	DD	0dd41dH
	DD	0cc411H
	DD	0b640aH
	DD	0a5405H
	DD	imagerel initstdio
	DD	imagerel initstdio+7
	DD	imagerel $unwind$initstdio
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$initstdio DD 030701H
	DD	070036207H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_0L@OJDCNPPP@__stderr__?$AA@
CONST	SEGMENT
??_C@_0L@OJDCNPPP@__stderr__?$AA@ DB '__stderr__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PODKMAPJ@?$DMstderr?$DO?$AA@
CONST	SEGMENT
??_C@_08PODKMAPJ@?$DMstderr?$DO?$AA@ DB '<stderr>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GGCFDDAA@backslashreplace?$AA@
CONST	SEGMENT
??_C@_0BB@GGCFDDAA@backslashreplace?$AA@ DB 'backslashreplace', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NPOCHPFF@__stdout__?$AA@
CONST	SEGMENT
??_C@_0L@NPOCHPFF@__stdout__?$AA@ DB '__stdout__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CNNAJMFD@?$DMstdout?$DO?$AA@
CONST	SEGMENT
??_C@_08CNNAJMFD@?$DMstdout?$DO?$AA@ DB '<stdout>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHOFLBOO@stdin?$AA@
CONST	SEGMENT
??_C@_05MHOFLBOO@stdin?$AA@ DB 'stdin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EFAEFGPG@__stdin__?$AA@
CONST	SEGMENT
??_C@_09EFAEFGPG@__stdin__?$AA@ DB '__stdin__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CMJMHHJG@?$DMstdin?$DO?$AA@
CONST	SEGMENT
??_C@_07CMJMHHJG@?$DMstdin?$DO?$AA@ DB '<stdin>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DDJHNGCM@PYTHONIOENCODING?$AA@
CONST	SEGMENT
??_C@_0BB@DDJHNGCM@PYTHONIOENCODING?$AA@ DB 'PYTHONIOENCODING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LNNEGDCO@OpenWrapper?$AA@
CONST	SEGMENT
??_C@_0M@LNNEGDCO@OpenWrapper?$AA@ DB 'OpenWrapper', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KFNNKBCK@io?$AA@
CONST	SEGMENT
??_C@_02KFNNKBCK@io?$AA@ DB 'io', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08OCOMCJAJ@builtins?$AA@
CONST	SEGMENT
??_C@_08OCOMCJAJ@builtins?$AA@ DB 'builtins', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IIKNEEFE@encodings?4latin_1?$AA@
CONST	SEGMENT
??_C@_0BC@IIKNEEFE@encodings?4latin_1?$AA@ DB 'encodings.latin_1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FFBNEIDG@encodings?4utf_8?$AA@
CONST	SEGMENT
??_C@_0BA@FFBNEIDG@encodings?4utf_8?$AA@ DB 'encodings.utf_8', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pythonrun.c
CONST	ENDS
;	COMDAT initstdio
_TEXT	SEGMENT
initstdio PROC						; COMDAT

; 1060 : {

  00000	40 53		 push	 rbx
  00002	57		 push	 rdi
  00003	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00007	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  0000c	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi

; 1061 :     PyObject *iomod = NULL, *wrapper;

  00011	33 db		 xor	 ebx, ebx
  00013	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12

; 1062 :     PyObject *bimod = NULL;
; 1063 :     PyObject *m;
; 1064 :     PyObject *std = NULL;
; 1065 :     int status = 0, fd;
; 1066 :     PyObject * encoding_attr;
; 1067 :     char *encoding = NULL, *errors;
; 1068 : 
; 1069 :     /* Hack to avoid a nasty recursion issue when Python is invoked
; 1070 :        in verbose mode: pre-import the Latin-1 and UTF-8 codecs */
; 1071 :     if ((m = PyImport_ImportModule("encodings.utf_8")) == NULL) {

  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FFBNEIDG@encodings?4utf_8?$AA@
  0001f	4c 89 6c 24 68	 mov	 QWORD PTR [rsp+104], r13
  00024	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  00029	8b fb		 mov	 edi, ebx
  0002b	8b f3		 mov	 esi, ebx
  0002d	44 8b e3	 mov	 r12d, ebx
  00030	e8 00 00 00 00	 call	 PyImport_ImportModule
  00035	48 85 c0	 test	 rax, rax
  00038	0f 84 83 00 00
	00		 je	 $error$122499

; 1072 :         goto error;
; 1073 :     }
; 1074 :     Py_DECREF(m);

  0003e	48 8b c8	 mov	 rcx, rax
  00041	e8 00 00 00 00	 call	 _Py_DecRef

; 1075 : 
; 1076 :     if (!(m = PyImport_ImportModule("encodings.latin_1"))) {

  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@IIKNEEFE@encodings?4latin_1?$AA@
  0004d	e8 00 00 00 00	 call	 PyImport_ImportModule
  00052	48 85 c0	 test	 rax, rax
  00055	74 6a		 je	 SHORT $error$122499

; 1077 :         goto error;
; 1078 :     }
; 1079 :     Py_DECREF(m);

  00057	48 8b c8	 mov	 rcx, rax
  0005a	e8 00 00 00 00	 call	 _Py_DecRef

; 1080 : 
; 1081 :     if (!(bimod = PyImport_ImportModule("builtins"))) {

  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00066	e8 00 00 00 00	 call	 PyImport_ImportModule
  0006b	48 8b f0	 mov	 rsi, rax
  0006e	48 85 c0	 test	 rax, rax
  00071	74 4e		 je	 SHORT $error$122499

; 1082 :         goto error;
; 1083 :     }
; 1084 : 
; 1085 :     if (!(iomod = PyImport_ImportModule("io"))) {

  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02KFNNKBCK@io?$AA@
  0007a	e8 00 00 00 00	 call	 PyImport_ImportModule
  0007f	48 8b f8	 mov	 rdi, rax
  00082	48 85 c0	 test	 rax, rax
  00085	74 3a		 je	 SHORT $error$122499

; 1086 :         goto error;
; 1087 :     }
; 1088 :     if (!(wrapper = PyObject_GetAttrString(iomod, "OpenWrapper"))) {

  00087	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@LNNEGDCO@OpenWrapper?$AA@
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00096	48 8b e8	 mov	 rbp, rax
  00099	48 85 c0	 test	 rax, rax
  0009c	74 23		 je	 SHORT $error$122499

; 1089 :         goto error;
; 1090 :     }
; 1091 : 
; 1092 :     /* Set builtins.open */
; 1093 :     if (PyObject_SetAttrString(bimod, "open", wrapper) == -1) {

  0009e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04PMOCAHAA@open?$AA@
  000a5	4c 8b c0	 mov	 r8, rax
  000a8	48 8b ce	 mov	 rcx, rsi
  000ab	e8 00 00 00 00	 call	 PyObject_SetAttrString

; 1094 :         Py_DECREF(wrapper);

  000b0	48 8b cd	 mov	 rcx, rbp
  000b3	83 f8 ff	 cmp	 eax, -1
  000b6	0f 85 9f 00 00
	00		 jne	 $LN28@initstdio
  000bc	e8 00 00 00 00	 call	 _Py_DecRef
$error$122499:

; 1174 : #endif
; 1175 : 
; 1176 :     if (0) {
; 1177 :   error:
; 1178 :         status = -1;

  000c1	83 cb ff	 or	 ebx, -1
$LN10@initstdio:
  000c4	4c 8b 74 24 30	 mov	 r14, QWORD PTR [rsp+48]
  000c9	4c 8b 6c 24 68	 mov	 r13, QWORD PTR [rsp+104]
  000ce	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]

; 1179 :     }
; 1180 : 
; 1181 :     if (encoding)

  000d3	4d 85 e4	 test	 r12, r12
  000d6	74 09		 je	 SHORT $LN8@initstdio

; 1182 :         free(encoding);

  000d8	49 8b cc	 mov	 rcx, r12
  000db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN8@initstdio:

; 1183 :     Py_XDECREF(bimod);

  000e1	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]
  000e6	48 85 f6	 test	 rsi, rsi
  000e9	0f 84 9b 02 00
	00		 je	 $LN7@initstdio
  000ef	e8 00 00 00 00	 call	 _Py_PXCTX
  000f4	85 c0		 test	 eax, eax
  000f6	0f 85 8e 02 00
	00		 jne	 $LN7@initstdio
  000fc	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00100	a8 20		 test	 al, 32			; 00000020H
  00102	0f 85 7a 02 00
	00		 jne	 $LN42@initstdio
  00108	84 c0		 test	 al, al
  0010a	0f 88 72 02 00
	00		 js	 $LN42@initstdio
  00110	a8 02		 test	 al, 2
  00112	0f 85 72 02 00
	00		 jne	 $LN7@initstdio
  00118	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  0011c	0f 85 68 02 00
	00		 jne	 $LN7@initstdio
  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00129	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00130	4c 8b ce	 mov	 r9, rsi
  00133	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00139	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00141	e8 00 00 00 00	 call	 _PyParallel_Guard
  00146	48 8b ce	 mov	 rcx, rsi
  00149	85 c0		 test	 eax, eax
  0014b	0f 84 25 02 00
	00		 je	 $LN47@initstdio
  00151	e8 00 00 00 00	 call	 _Px_Dealloc
  00156	e9 2f 02 00 00	 jmp	 $LN7@initstdio
$LN28@initstdio:

; 1095 :         goto error;
; 1096 :     }
; 1097 :     Py_DECREF(wrapper);

  0015b	e8 00 00 00 00	 call	 _Py_DecRef

; 1098 : 
; 1099 :     encoding = Py_GETENV("PYTHONIOENCODING");

  00160	39 1d 00 00 00
	00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, ebx
  00166	75 10		 jne	 SHORT $LN37@initstdio
  00168	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@DDJHNGCM@PYTHONIOENCODING?$AA@
  0016f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  00175	4c 8b e0	 mov	 r12, rax
$LN37@initstdio:

; 1100 :     errors = NULL;

  00178	4c 8b eb	 mov	 r13, rbx

; 1101 :     if (encoding) {

  0017b	4d 85 e4	 test	 r12, r12
  0017e	74 27		 je	 SHORT $LN26@initstdio

; 1102 :         encoding = strdup(encoding);

  00180	49 8b cc	 mov	 rcx, r12
  00183	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup

; 1103 :         errors = strchr(encoding, ':');

  00189	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  0018e	48 8b c8	 mov	 rcx, rax
  00191	4c 8b e0	 mov	 r12, rax
  00194	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0019a	4c 8b e8	 mov	 r13, rax

; 1104 :         if (errors) {

  0019d	48 85 c0	 test	 rax, rax
  001a0	74 05		 je	 SHORT $LN26@initstdio

; 1105 :             *errors = '\0';

  001a2	88 18		 mov	 BYTE PTR [rax], bl

; 1106 :             errors++;

  001a4	49 ff c5	 inc	 r13
$LN26@initstdio:

; 1107 :         }
; 1108 :     }
; 1109 : 
; 1110 :     /* Set sys.stdin */
; 1111 :     fd = fileno(stdin);

  001a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  001ad	48 8b c8	 mov	 rcx, rax
  001b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno

; 1112 :     /* Under some conditions stdin, stdout and stderr may not be connected
; 1113 :      * and fileno() may point to an invalid file descriptor. For example
; 1114 :      * GUI apps don't have valid standard streams by default.
; 1115 :      */
; 1116 :     if (!is_valid_fd(fd)) {

  001b6	8b c8		 mov	 ecx, eax
  001b8	44 8b f0	 mov	 r14d, eax
  001bb	e8 00 00 00 00	 call	 is_valid_fd
  001c0	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_Py_NoneStruct
  001c7	85 c0		 test	 eax, eax
  001c9	75 0d		 jne	 SHORT $LN25@initstdio

; 1117 :         std = Py_None;
; 1118 :         Py_INCREF(std);

  001cb	48 8b cd	 mov	 rcx, rbp
  001ce	4c 8b f5	 mov	 r14, rbp
  001d1	e8 00 00 00 00	 call	 _Py_IncRef

; 1119 :     }
; 1120 :     else {

  001d6	eb 2b		 jmp	 SHORT $LN23@initstdio
$LN25@initstdio:

; 1121 :         std = create_stdio(iomod, fd, 0, "<stdin>", encoding, errors);

  001d8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_07CMJMHHJG@?$DMstdin?$DO?$AA@
  001df	45 33 c0	 xor	 r8d, r8d
  001e2	41 8b d6	 mov	 edx, r14d
  001e5	48 8b cf	 mov	 rcx, rdi
  001e8	4c 89 6c 24 28	 mov	 QWORD PTR [rsp+40], r13
  001ed	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  001f2	e8 00 00 00 00	 call	 create_stdio
  001f7	4c 8b f0	 mov	 r14, rax

; 1122 :         if (std == NULL)

  001fa	48 85 c0	 test	 rax, rax
  001fd	0f 84 be fe ff
	ff		 je	 $error$122499
$LN23@initstdio:

; 1123 :             goto error;
; 1124 :     } /* if (fd < 0) */
; 1125 :     PySys_SetObject("__stdin__", std);

  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EFAEFGPG@__stdin__?$AA@
  0020a	49 8b d6	 mov	 rdx, r14
  0020d	e8 00 00 00 00	 call	 PySys_SetObject

; 1126 :     PySys_SetObject("stdin", std);

  00212	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MHOFLBOO@stdin?$AA@
  00219	49 8b d6	 mov	 rdx, r14
  0021c	e8 00 00 00 00	 call	 PySys_SetObject

; 1127 :     Py_DECREF(std);

  00221	49 8b ce	 mov	 rcx, r14
  00224	e8 00 00 00 00	 call	 _Py_DecRef

; 1128 : 
; 1129 :     /* Set sys.stdout */
; 1130 :     fd = fileno(stdout);

  00229	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0022f	48 8d 48 30	 lea	 rcx, QWORD PTR [rax+48]
  00233	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno

; 1131 :     if (!is_valid_fd(fd)) {

  00239	8b c8		 mov	 ecx, eax
  0023b	44 8b f0	 mov	 r14d, eax
  0023e	e8 00 00 00 00	 call	 is_valid_fd
  00243	85 c0		 test	 eax, eax
  00245	75 0d		 jne	 SHORT $LN22@initstdio

; 1132 :         std = Py_None;
; 1133 :         Py_INCREF(std);

  00247	48 8b cd	 mov	 rcx, rbp
  0024a	4c 8b ed	 mov	 r13, rbp
  0024d	e8 00 00 00 00	 call	 _Py_IncRef

; 1134 :     }
; 1135 :     else {

  00252	eb 2e		 jmp	 SHORT $LN20@initstdio
$LN22@initstdio:

; 1136 :         std = create_stdio(iomod, fd, 1, "<stdout>", encoding, errors);

  00254	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_08CNNAJMFD@?$DMstdout?$DO?$AA@
  0025b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00261	41 8b d6	 mov	 edx, r14d
  00264	48 8b cf	 mov	 rcx, rdi
  00267	4c 89 6c 24 28	 mov	 QWORD PTR [rsp+40], r13
  0026c	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  00271	e8 00 00 00 00	 call	 create_stdio
  00276	4c 8b e8	 mov	 r13, rax

; 1137 :         if (std == NULL)

  00279	48 85 c0	 test	 rax, rax
  0027c	0f 84 3f fe ff
	ff		 je	 $error$122499
$LN20@initstdio:

; 1138 :             goto error;
; 1139 :     } /* if (fd < 0) */
; 1140 :     PySys_SetObject("__stdout__", std);

  00282	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@NPOCHPFF@__stdout__?$AA@
  00289	49 8b d5	 mov	 rdx, r13
  0028c	e8 00 00 00 00	 call	 PySys_SetObject

; 1141 :     PySys_SetObject("stdout", std);

  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  00298	49 8b d5	 mov	 rdx, r13
  0029b	e8 00 00 00 00	 call	 PySys_SetObject

; 1142 :     Py_DECREF(std);

  002a0	49 8b cd	 mov	 rcx, r13
  002a3	e8 00 00 00 00	 call	 _Py_DecRef

; 1143 : 
; 1144 : #if 1 /* Disable this if you have trouble debugging bootstrap stuff */
; 1145 :     /* Set sys.stderr, replaces the preliminary stderr */
; 1146 :     fd = fileno(stderr);

  002a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  002ae	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  002b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno

; 1147 :     if (!is_valid_fd(fd)) {

  002b8	8b c8		 mov	 ecx, eax
  002ba	44 8b e8	 mov	 r13d, eax
  002bd	e8 00 00 00 00	 call	 is_valid_fd
  002c2	85 c0		 test	 eax, eax
  002c4	75 0a		 jne	 SHORT $LN19@initstdio

; 1148 :         std = Py_None;
; 1149 :         Py_INCREF(std);

  002c6	48 8b cd	 mov	 rcx, rbp
  002c9	e8 00 00 00 00	 call	 _Py_IncRef

; 1150 :     }
; 1151 :     else {

  002ce	eb 35		 jmp	 SHORT $LN17@initstdio
$LN19@initstdio:

; 1152 :         std = create_stdio(iomod, fd, 1, "<stderr>", encoding, "backslashreplace");

  002d0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BB@GGCFDDAA@backslashreplace?$AA@
  002d7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_08PODKMAPJ@?$DMstderr?$DO?$AA@
  002de	41 b8 01 00 00
	00		 mov	 r8d, 1
  002e4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  002e9	41 8b d5	 mov	 edx, r13d
  002ec	48 8b cf	 mov	 rcx, rdi
  002ef	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  002f4	e8 00 00 00 00	 call	 create_stdio
  002f9	48 8b e8	 mov	 rbp, rax

; 1153 :         if (std == NULL)

  002fc	48 85 c0	 test	 rax, rax
  002ff	0f 84 bc fd ff
	ff		 je	 $error$122499
$LN17@initstdio:

; 1154 :             goto error;
; 1155 :     } /* if (fd < 0) */
; 1156 : 
; 1157 :     /* Same as hack above, pre-import stderr's codec to avoid recursion
; 1158 :        when import.c tries to write to stderr in verbose mode. */
; 1159 :     encoding_attr = PyObject_GetAttrString(std, "encoding");

  00305	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08MLPGAEIK@encoding?$AA@
  0030c	48 8b cd	 mov	 rcx, rbp
  0030f	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00314	4c 8b e8	 mov	 r13, rax

; 1160 :     if (encoding_attr != NULL) {

  00317	48 85 c0	 test	 rax, rax
  0031a	74 2a		 je	 SHORT $LN16@initstdio

; 1161 :         const char * encoding;
; 1162 :         encoding = _PyUnicode_AsString(encoding_attr);

  0031c	48 8b c8	 mov	 rcx, rax
  0031f	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 1163 :         if (encoding != NULL) {

  00324	48 85 c0	 test	 rax, rax
  00327	74 15		 je	 SHORT $LN12@initstdio

; 1164 :             PyObject *codec_info = _PyCodec_Lookup(encoding);

  00329	48 8b c8	 mov	 rcx, rax
  0032c	e8 00 00 00 00	 call	 _PyCodec_Lookup

; 1165 :             Py_XDECREF(codec_info);

  00331	48 85 c0	 test	 rax, rax
  00334	74 08		 je	 SHORT $LN12@initstdio
  00336	48 8b c8	 mov	 rcx, rax
  00339	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@initstdio:

; 1166 :         }
; 1167 :         Py_DECREF(encoding_attr);

  0033e	49 8b cd	 mov	 rcx, r13
  00341	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@initstdio:

; 1168 :     }
; 1169 :     PyErr_Clear();  /* Not a fatal error if codec isn't available */

  00346	e8 00 00 00 00	 call	 PyErr_Clear

; 1170 : 
; 1171 :     PySys_SetObject("__stderr__", std);

  0034b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OJDCNPPP@__stderr__?$AA@
  00352	48 8b d5	 mov	 rdx, rbp
  00355	e8 00 00 00 00	 call	 PySys_SetObject

; 1172 :     PySys_SetObject("stderr", std);

  0035a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00361	48 8b d5	 mov	 rdx, rbp
  00364	e8 00 00 00 00	 call	 PySys_SetObject

; 1173 :     Py_DECREF(std);

  00369	48 8b cd	 mov	 rcx, rbp
  0036c	e8 00 00 00 00	 call	 _Py_DecRef
  00371	e9 4e fd ff ff	 jmp	 $LN10@initstdio

; 1183 :     Py_XDECREF(bimod);

$LN47@initstdio:
  00376	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  0037a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00380	eb 08		 jmp	 SHORT $LN7@initstdio
$LN42@initstdio:
  00382	48 8b ce	 mov	 rcx, rsi
  00385	e8 00 00 00 00	 call	 Px_DecRef
$LN7@initstdio:

; 1184 :     Py_XDECREF(iomod);

  0038a	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  0038f	48 85 ff	 test	 rdi, rdi
  00392	74 73		 je	 SHORT $LN62@initstdio
  00394	e8 00 00 00 00	 call	 _Py_PXCTX
  00399	85 c0		 test	 eax, eax
  0039b	75 6a		 jne	 SHORT $LN62@initstdio
  0039d	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  003a1	a8 20		 test	 al, 32			; 00000020H
  003a3	75 5a		 jne	 SHORT $LN53@initstdio
  003a5	84 c0		 test	 al, al
  003a7	78 56		 js	 SHORT $LN53@initstdio
  003a9	a8 02		 test	 al, 2
  003ab	75 5a		 jne	 SHORT $LN62@initstdio
  003ad	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  003b1	75 54		 jne	 SHORT $LN62@initstdio
  003b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  003c1	4c 8b cf	 mov	 r9, rdi
  003c4	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  003ca	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003d2	e8 00 00 00 00	 call	 _PyParallel_Guard
  003d7	48 8b cf	 mov	 rcx, rdi
  003da	85 c0		 test	 eax, eax
  003dc	74 0e		 je	 SHORT $LN58@initstdio
  003de	e8 00 00 00 00	 call	 _Px_Dealloc

; 1185 :     return status;

  003e3	8b c3		 mov	 eax, ebx

; 1186 : }

  003e5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  003e9	5f		 pop	 rdi
  003ea	5b		 pop	 rbx
  003eb	c3		 ret	 0

; 1184 :     Py_XDECREF(iomod);

$LN58@initstdio:
  003ec	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  003f0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 1185 :     return status;

  003f6	8b c3		 mov	 eax, ebx

; 1186 : }

  003f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  003fc	5f		 pop	 rdi
  003fd	5b		 pop	 rbx
  003fe	c3		 ret	 0

; 1184 :     Py_XDECREF(iomod);

$LN53@initstdio:
  003ff	48 8b cf	 mov	 rcx, rdi
  00402	e8 00 00 00 00	 call	 Px_DecRef
$LN62@initstdio:

; 1185 :     return status;

  00407	8b c3		 mov	 eax, ebx

; 1186 : }

  00409	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0040d	5f		 pop	 rdi
  0040e	5b		 pop	 rbx
  0040f	c3		 ret	 0
initstdio ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT PARSER_FLAGS
_TEXT	SEGMENT
flags$ = 8
PARSER_FLAGS PROC					; COMDAT

; 1242 :     int parser_flags = 0;

  00000	33 c0		 xor	 eax, eax

; 1243 :     if (!flags)

  00002	48 85 c9	 test	 rcx, rcx

; 1244 :         return 0;

  00005	74 20		 je	 SHORT $LN1@PARSER_FLA

; 1245 :     if (flags->cf_flags & PyCF_DONT_IMPLY_DEDENT)

  00007	8b 11		 mov	 edx, DWORD PTR [rcx]
  00009	b9 02 00 00 00	 mov	 ecx, 2
  0000e	0f ba e2 09	 bt	 edx, 9
  00012	0f 42 c1	 cmovb	 eax, ecx

; 1246 :         parser_flags |= PyPARSE_DONT_IMPLY_DEDENT;
; 1247 :     if (flags->cf_flags & PyCF_IGNORE_COOKIE)

  00015	0f ba e2 0b	 bt	 edx, 11
  00019	73 03		 jae	 SHORT $LN2@PARSER_FLA

; 1248 :         parser_flags |= PyPARSE_IGNORE_COOKIE;

  0001b	83 c8 10	 or	 eax, 16
$LN2@PARSER_FLA:

; 1249 :     if (flags->cf_flags & CO_FUTURE_BARRY_AS_BDFL)

  0001e	0f ba e2 12	 bt	 edx, 18
  00022	73 03		 jae	 SHORT $LN1@PARSER_FLA

; 1250 :         parser_flags |= PyPARSE_BARRY_AS_BDFL;

  00024	83 c8 20	 or	 eax, 32			; 00000020H
$LN1@PARSER_FLA:

; 1251 :     return parser_flags;
; 1252 : }

  00027	f3 c3		 fatret	 0
PARSER_FLAGS ENDP
_TEXT	ENDS
PUBLIC	??_C@_04JFFGBNKM@?4pyo?$AA@			; `string'
PUBLIC	??_C@_04DJODFCKA@?4pyc?$AA@			; `string'
EXTRN	__imp_rewind:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp_ftell:PROC
EXTRN	PyImport_GetMagicNumber:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$maybe_pyc_file DD imagerel maybe_pyc_file
	DD	imagerel maybe_pyc_file+69
	DD	imagerel $unwind$maybe_pyc_file
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$maybe_pyc_file DD imagerel maybe_pyc_file+69
	DD	imagerel maybe_pyc_file+180
	DD	imagerel $chain$0$maybe_pyc_file
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$maybe_pyc_file DD imagerel maybe_pyc_file+180
	DD	imagerel maybe_pyc_file+219
	DD	imagerel $chain$1$maybe_pyc_file
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$maybe_pyc_file DD 021H
	DD	imagerel maybe_pyc_file
	DD	imagerel maybe_pyc_file+69
	DD	imagerel $unwind$maybe_pyc_file
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$maybe_pyc_file DD 020521H
	DD	065405H
	DD	imagerel maybe_pyc_file
	DD	imagerel maybe_pyc_file+69
	DD	imagerel $unwind$maybe_pyc_file
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$maybe_pyc_file DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_04JFFGBNKM@?4pyo?$AA@
CONST	SEGMENT
??_C@_04JFFGBNKM@?4pyo?$AA@ DB '.pyo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DJODFCKA@?4pyc?$AA@
CONST	SEGMENT
??_C@_04DJODFCKA@?4pyc?$AA@ DB '.pyc', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT maybe_pyc_file
_TEXT	SEGMENT
fp$ = 48
ext$ = 56
closeit$ = 64
buf$122726 = 72
maybe_pyc_file PROC					; COMDAT

; 1354 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b d9	 mov	 rbx, rcx

; 1355 :     if (strcmp(ext, ".pyc") == 0 || strcmp(ext, ".pyo") == 0)

  00012	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_04DJODFCKA@?4pyc?$AA@
  00019	48 8b f2	 mov	 rsi, rdx
  0001c	b9 05 00 00 00	 mov	 ecx, 5
  00021	f3 a6		 repe cmpsb
  00023	0f 84 9d 00 00
	00		 je	 $LN4@maybe_pyc_
  00029	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_04JFFGBNKM@?4pyo?$AA@
  00030	48 8b f2	 mov	 rsi, rdx
  00033	b9 05 00 00 00	 mov	 ecx, 5
  00038	f3 a6		 repe cmpsb
  0003a	0f 84 86 00 00
	00		 je	 $LN4@maybe_pyc_

; 1356 :         return 1;
; 1357 : 
; 1358 :     /* Only look into the file if we are allowed to close it, since
; 1359 :        it then should also be seekable. */
; 1360 :     if (closeit) {

  00040	45 85 c0	 test	 r8d, r8d
  00043	74 6f		 je	 SHORT $LN3@maybe_pyc_

; 1361 :         /* Read only two bytes of the magic. If the file was opened in
; 1362 :            text mode, the bytes 3 and 4 of the magic (\r\n) might not
; 1363 :            be read as they are on disk. */
; 1364 :         unsigned int halfmagic = PyImport_GetMagicNumber() & 0xFFFF;

  00045	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  0004a	e8 00 00 00 00	 call	 PyImport_GetMagicNumber

; 1365 :         unsigned char buf[2];
; 1366 :         /* Mess:  In case of -x, the stream is NOT at its start now,
; 1367 :            and ungetc() was used to push back the first newline,
; 1368 :            which makes the current stream position formally undefined,
; 1369 :            and a x-platform nightmare.
; 1370 :            Unfortunately, we have no direct way to know whether -x
; 1371 :            was specified.  So we use a terrible hack:  if the current
; 1372 :            stream position is not 0, we assume -x was specified, and
; 1373 :            give up.  Bug 132850 on SourceForge spells out the
; 1374 :            hopelessness of trying anything else (fseek and ftell
; 1375 :            don't work predictably x-platform for text-mode files).
; 1376 :         */
; 1377 :         int ispyc = 0;
; 1378 :         if (ftell(fp) == 0) {

  0004f	48 8b cb	 mov	 rcx, rbx
  00052	0f b7 e8	 movzx	 ebp, ax
  00055	33 f6		 xor	 esi, esi
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ftell
  0005d	85 c0		 test	 eax, eax
  0005f	75 3c		 jne	 SHORT $LN2@maybe_pyc_

; 1379 :             if (fread(buf, 1, 2, fp) == 2 &&
; 1380 :                 ((unsigned int)buf[1]<<8 | buf[0]) == halfmagic)

  00061	bf 01 00 00 00	 mov	 edi, 1
  00066	44 8d 46 02	 lea	 r8d, QWORD PTR [rsi+2]
  0006a	48 8d 4c 24 48	 lea	 rcx, QWORD PTR buf$122726[rsp]
  0006f	8b d7		 mov	 edx, edi
  00071	4c 8b cb	 mov	 r9, rbx
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  0007a	48 83 f8 02	 cmp	 rax, 2
  0007e	75 14		 jne	 SHORT $LN1@maybe_pyc_
  00080	0f b6 54 24 49	 movzx	 edx, BYTE PTR buf$122726[rsp+1]
  00085	0f b6 4c 24 48	 movzx	 ecx, BYTE PTR buf$122726[rsp]
  0008a	c1 e2 08	 shl	 edx, 8
  0008d	0b d1		 or	 edx, ecx
  0008f	3b d5		 cmp	 edx, ebp
  00091	0f 44 f7	 cmove	 esi, edi
$LN1@maybe_pyc_:

; 1381 :                 ispyc = 1;
; 1382 :             rewind(fp);

  00094	48 8b cb	 mov	 rcx, rbx
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rewind
$LN2@maybe_pyc_:

; 1383 :         }
; 1384 :         return ispyc;

  0009d	8b c6		 mov	 eax, esi
  0009f	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]

; 1387 : }

  000a4	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000a9	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ae	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b2	5f		 pop	 rdi
  000b3	c3		 ret	 0
$LN3@maybe_pyc_:

; 1385 :     }
; 1386 :     return 0;

  000b4	33 c0		 xor	 eax, eax

; 1387 : }

  000b6	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000bb	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000c0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c4	5f		 pop	 rdi
  000c5	c3		 ret	 0
$LN4@maybe_pyc_:
  000c6	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000cb	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000d0	b8 01 00 00 00	 mov	 eax, 1
  000d5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d9	5f		 pop	 rdi
  000da	c3		 ret	 0
maybe_pyc_file ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@PADOMILC@__loader__?$AA@		; `string'
PUBLIC	??_C@_02DIPDJCGP@sN?$AA@			; `string'
PUBLIC	??_C@_08EMKMIFM@__main__?$AA@			; `string'
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyObject_CallFunction:PROC
EXTRN	_PyThreadState_Current:QWORD
EXTRN	_PyParallel_GetThreadState:PROC
EXTRN	PyUnicode_DecodeFSDefault:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$set_main_loader DD imagerel set_main_loader
	DD	imagerel set_main_loader+202
	DD	imagerel $unwind$set_main_loader
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$set_main_loader DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0L@PADOMILC@__loader__?$AA@
CONST	SEGMENT
??_C@_0L@PADOMILC@__loader__?$AA@ DB '__loader__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DIPDJCGP@sN?$AA@
CONST	SEGMENT
??_C@_02DIPDJCGP@sN?$AA@ DB 'sN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMKMIFM@__main__?$AA@
CONST	SEGMENT
??_C@_08EMKMIFM@__main__?$AA@ DB '__main__', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT set_main_loader
_TEXT	SEGMENT
d$ = 48
filename$ = 56
loader_name$ = 64
set_main_loader PROC					; COMDAT

; 1391 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b e9	 mov	 rbp, rcx

; 1392 :     PyInterpreterState *interp;
; 1393 :     PyThreadState *tstate;
; 1394 :     PyObject *filename_obj, *loader_type, *loader;
; 1395 :     int result = 0;
; 1396 : 
; 1397 :     filename_obj = PyUnicode_DecodeFSDefault(filename);

  00017	48 8b ca	 mov	 rcx, rdx
  0001a	49 8b f8	 mov	 rdi, r8
  0001d	33 f6		 xor	 esi, esi
  0001f	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  00024	48 8b d8	 mov	 rbx, rax

; 1398 :     if (filename_obj == NULL)

  00027	48 85 c0	 test	 rax, rax

; 1399 :         return -1;

  0002a	74 37		 je	 SHORT $LN9@set_main_l

; 1400 :     /* Get current thread state and interpreter pointer */
; 1401 :     tstate = PyThreadState_GET();

  0002c	e8 00 00 00 00	 call	 _Py_PXCTX
  00031	85 c0		 test	 eax, eax
  00033	74 07		 je	 SHORT $LN7@set_main_l
  00035	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  0003a	eb 07		 jmp	 SHORT $LN8@set_main_l
$LN7@set_main_l:
  0003c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN8@set_main_l:

; 1402 :     interp = tstate->interp;

  00043	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]

; 1403 :     loader_type = PyObject_GetAttrString(interp->importlib, loader_name);

  00047	48 8b d7	 mov	 rdx, rdi
  0004a	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0004e	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00053	48 8b f8	 mov	 rdi, rax

; 1404 :     if (loader_type == NULL) {

  00056	48 85 c0	 test	 rax, rax
  00059	75 0d		 jne	 SHORT $LN3@set_main_l

; 1405 :         Py_DECREF(filename_obj);

  0005b	48 8b cb	 mov	 rcx, rbx
  0005e	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@set_main_l:

; 1406 :         return -1;

  00063	83 c8 ff	 or	 eax, -1
  00066	eb 4d		 jmp	 SHORT $LN5@set_main_l
$LN3@set_main_l:

; 1407 :     }
; 1408 :     loader = PyObject_CallFunction(loader_type, "sN", "__main__", filename_obj);

  00068	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DIPDJCGP@sN?$AA@
  00076	4c 8b cb	 mov	 r9, rbx
  00079	48 8b c8	 mov	 rcx, rax
  0007c	e8 00 00 00 00	 call	 PyObject_CallFunction

; 1409 :     Py_DECREF(loader_type);

  00081	48 8b cf	 mov	 rcx, rdi
  00084	48 8b d8	 mov	 rbx, rax
  00087	e8 00 00 00 00	 call	 _Py_DecRef

; 1410 :     if (loader == NULL) {

  0008c	48 85 db	 test	 rbx, rbx

; 1411 :         return -1;

  0008f	74 d2		 je	 SHORT $LN9@set_main_l

; 1412 :     }
; 1413 :     if (PyDict_SetItemString(d, "__loader__", loader) < 0) {

  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@PADOMILC@__loader__?$AA@
  00098	4c 8b c3	 mov	 r8, rbx
  0009b	48 8b cd	 mov	 rcx, rbp
  0009e	e8 00 00 00 00	 call	 PyDict_SetItemString
  000a3	83 c9 ff	 or	 ecx, -1
  000a6	85 c0		 test	 eax, eax
  000a8	0f 48 f1	 cmovs	 esi, ecx

; 1414 :         result = -1;
; 1415 :     }
; 1416 :     Py_DECREF(loader);

  000ab	48 8b cb	 mov	 rcx, rbx
  000ae	e8 00 00 00 00	 call	 _Py_DecRef

; 1417 :     return result;

  000b3	8b c6		 mov	 eax, esi
$LN5@set_main_l:

; 1418 : }

  000b5	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ba	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000bf	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000c4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c8	5f		 pop	 rdi
  000c9	c3		 ret	 0
set_main_loader ENDP
_TEXT	ENDS
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsLong:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$parse_syntax_error DD imagerel parse_syntax_error
	DD	imagerel parse_syntax_error+575
	DD	imagerel $unwind$parse_syntax_error
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parse_syntax_error DD 0c1e01H
	DD	0d741eH
	DD	0c641eH
	DD	0b541eH
	DD	0a341eH
	DD	0e01a521eH
	DD	0c016d018H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pythonrun.c
xdata	ENDS
;	COMDAT parse_syntax_error
_TEXT	SEGMENT
err$ = 80
message$ = 88
filename$ = 96
lineno$ = 104
offset$ = 112
text$ = 120
parse_syntax_error PROC					; COMDAT

; 1518 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	41 55		 push	 r13
  00018	41 56		 push	 r14
  0001a	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1519 :     long hold;
; 1520 :     PyObject *v;
; 1521 :     _Py_IDENTIFIER(msg);
; 1522 :     _Py_IDENTIFIER(filename);
; 1523 :     _Py_IDENTIFIER(lineno);
; 1524 :     _Py_IDENTIFIER(offset);
; 1525 :     _Py_IDENTIFIER(text);
; 1526 : 
; 1527 :     *message = NULL;
; 1528 : 
; 1529 :     /* new style errors.  `err' is an instance */
; 1530 :     *message = _PyObject_GetAttrId(err, &PyId_msg);

  0001e	44 8b 15 00 00
	00 00		 mov	 r10d, DWORD PTR _tls_index
  00025	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0002e	4c 8b e2	 mov	 r12, rdx
  00031	4a 8b 2c d0	 mov	 rbp, QWORD PTR [rax+r10*8]
  00035	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
  0003c	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_msg@?1??parse_syntax_error@@9@9
  00041	48 03 d5	 add	 rdx, rbp
  00044	4d 8b e9	 mov	 r13, r9
  00047	49 8b f8	 mov	 rdi, r8
  0004a	48 8b f1	 mov	 rsi, rcx
  0004d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00052	49 89 04 24	 mov	 QWORD PTR [r12], rax

; 1531 :     if (!*message)

  00056	48 85 c0	 test	 rax, rax
  00059	0f 84 bf 01 00
	00		 je	 $LN3@parse_synt

; 1532 :         goto finally;
; 1533 : 
; 1534 :     v = _PyObject_GetAttrId(err, &PyId_filename);

  0005f	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_filename@?1??parse_syntax_error@@9@9
  00064	48 8b ce	 mov	 rcx, rsi
  00067	48 03 d5	 add	 rdx, rbp
  0006a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0006f	48 8b d8	 mov	 rbx, rax

; 1535 :     if (!v)

  00072	48 85 c0	 test	 rax, rax
  00075	0f 84 35 01 00
	00		 je	 $finally$122853

; 1536 :         goto finally;
; 1537 :     if (v == Py_None) {

  0007b	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:_Py_NoneStruct

; 1538 :         Py_DECREF(v);

  00082	48 8b c8	 mov	 rcx, rax
  00085	49 3b c6	 cmp	 rax, r14
  00088	75 0e		 jne	 SHORT $LN17@parse_synt
  0008a	e8 00 00 00 00	 call	 _Py_DecRef

; 1539 :         *filename = NULL;

  0008f	48 c7 07 00 00
	00 00		 mov	 QWORD PTR [rdi], 0

; 1540 :     }
; 1541 :     else {

  00096	eb 1a		 jmp	 SHORT $LN15@parse_synt
$LN17@parse_synt:

; 1542 :         *filename = _PyUnicode_AsString(v);

  00098	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 1543 :         Py_DECREF(v);

  0009d	48 8b cb	 mov	 rcx, rbx
  000a0	48 89 07	 mov	 QWORD PTR [rdi], rax
  000a3	e8 00 00 00 00	 call	 _Py_DecRef

; 1544 :         if (!*filename)

  000a8	48 83 3f 00	 cmp	 QWORD PTR [rdi], 0
  000ac	0f 84 fe 00 00
	00		 je	 $finally$122853
$LN15@parse_synt:

; 1545 :             goto finally;
; 1546 :     }
; 1547 : 
; 1548 :     v = _PyObject_GetAttrId(err, &PyId_lineno);

  000b2	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_lineno@?1??parse_syntax_error@@9@9
  000b7	48 8b ce	 mov	 rcx, rsi
  000ba	48 03 d5	 add	 rdx, rbp
  000bd	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000c2	48 8b d8	 mov	 rbx, rax

; 1549 :     if (!v)

  000c5	48 85 c0	 test	 rax, rax
  000c8	0f 84 e2 00 00
	00		 je	 $finally$122853

; 1550 :         goto finally;
; 1551 :     hold = PyLong_AsLong(v);

  000ce	48 8b c8	 mov	 rcx, rax
  000d1	e8 00 00 00 00	 call	 PyLong_AsLong

; 1552 :     Py_DECREF(v);

  000d6	48 8b cb	 mov	 rcx, rbx
  000d9	8b f8		 mov	 edi, eax
  000db	e8 00 00 00 00	 call	 _Py_DecRef

; 1553 :     if (hold < 0 && PyErr_Occurred())

  000e0	85 ff		 test	 edi, edi
  000e2	79 0e		 jns	 SHORT $LN13@parse_synt
  000e4	e8 00 00 00 00	 call	 PyErr_Occurred
  000e9	48 85 c0	 test	 rax, rax
  000ec	0f 85 be 00 00
	00		 jne	 $finally$122853
$LN13@parse_synt:

; 1554 :         goto finally;
; 1555 :     *lineno = (int)hold;
; 1556 : 
; 1557 :     v = _PyObject_GetAttrId(err, &PyId_offset);

  000f2	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_offset@?1??parse_syntax_error@@9@9
  000f7	48 8b ce	 mov	 rcx, rsi
  000fa	41 89 7d 00	 mov	 DWORD PTR [r13], edi
  000fe	48 03 d5	 add	 rdx, rbp
  00101	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00106	48 8b d8	 mov	 rbx, rax

; 1558 :     if (!v)

  00109	48 85 c0	 test	 rax, rax
  0010c	0f 84 9e 00 00
	00		 je	 $finally$122853

; 1559 :         goto finally;
; 1560 :     if (v == Py_None) {

  00112	49 3b c6	 cmp	 rax, r14
  00115	75 15		 jne	 SHORT $LN11@parse_synt

; 1561 :         *offset = -1;

  00117	48 8b 4c 24 70	 mov	 rcx, QWORD PTR offset$[rsp]
  0011c	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [rcx], -1

; 1562 :         Py_DECREF(v);

  00122	48 8b c8	 mov	 rcx, rax
  00125	e8 00 00 00 00	 call	 _Py_DecRef

; 1563 :     } else {

  0012a	eb 27		 jmp	 SHORT $LN10@parse_synt
$LN11@parse_synt:

; 1564 :         hold = PyLong_AsLong(v);

  0012c	48 8b c8	 mov	 rcx, rax
  0012f	e8 00 00 00 00	 call	 PyLong_AsLong

; 1565 :         Py_DECREF(v);

  00134	48 8b cb	 mov	 rcx, rbx
  00137	8b f8		 mov	 edi, eax
  00139	e8 00 00 00 00	 call	 _Py_DecRef

; 1566 :         if (hold < 0 && PyErr_Occurred())

  0013e	85 ff		 test	 edi, edi
  00140	79 0a		 jns	 SHORT $LN9@parse_synt
  00142	e8 00 00 00 00	 call	 PyErr_Occurred
  00147	48 85 c0	 test	 rax, rax
  0014a	75 64		 jne	 SHORT $finally$122853
$LN9@parse_synt:

; 1567 :             goto finally;
; 1568 :         *offset = (int)hold;

  0014c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR offset$[rsp]
  00151	89 39		 mov	 DWORD PTR [rcx], edi
$LN10@parse_synt:

; 1569 :     }
; 1570 : 
; 1571 :     v = _PyObject_GetAttrId(err, &PyId_text);

  00153	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_text@?1??parse_syntax_error@@9@9
  00158	48 8b ce	 mov	 rcx, rsi
  0015b	48 03 d5	 add	 rdx, rbp
  0015e	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00163	48 8b f8	 mov	 rdi, rax

; 1572 :     if (!v)

  00166	48 85 c0	 test	 rax, rax
  00169	74 45		 je	 SHORT $finally$122853

; 1573 :         goto finally;
; 1574 :     if (v == Py_None) {
; 1575 :         Py_DECREF(v);

  0016b	48 8b c8	 mov	 rcx, rax
  0016e	49 3b c6	 cmp	 rax, r14
  00171	75 1b		 jne	 SHORT $LN7@parse_synt
  00173	e8 00 00 00 00	 call	 _Py_DecRef

; 1576 :         *text = NULL;

  00178	4c 8b 5c 24 78	 mov	 r11, QWORD PTR text$[rsp]

; 1582 :             goto finally;
; 1583 :     }
; 1584 :     return 1;

  0017d	b8 01 00 00 00	 mov	 eax, 1
  00182	49 c7 03 00 00
	00 00		 mov	 QWORD PTR [r11], 0
  00189	e9 92 00 00 00	 jmp	 $LN20@parse_synt
$LN7@parse_synt:

; 1577 :     }
; 1578 :     else {
; 1579 :         *text = _PyUnicode_AsString(v);

  0018e	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00193	48 8b 5c 24 78	 mov	 rbx, QWORD PTR text$[rsp]

; 1580 :         Py_DECREF(v);

  00198	48 8b cf	 mov	 rcx, rdi
  0019b	48 89 03	 mov	 QWORD PTR [rbx], rax
  0019e	e8 00 00 00 00	 call	 _Py_DecRef

; 1581 :         if (!*text)

  001a3	48 83 3b 00	 cmp	 QWORD PTR [rbx], 0
  001a7	74 07		 je	 SHORT $finally$122853

; 1582 :             goto finally;
; 1583 :     }
; 1584 :     return 1;

  001a9	b8 01 00 00 00	 mov	 eax, 1
  001ae	eb 70		 jmp	 SHORT $LN20@parse_synt
$finally$122853:

; 1585 : 
; 1586 : finally:
; 1587 :     Py_XDECREF(*message);

  001b0	49 8b 1c 24	 mov	 rbx, QWORD PTR [r12]
  001b4	48 85 db	 test	 rbx, rbx
  001b7	74 65		 je	 SHORT $LN3@parse_synt
  001b9	e8 00 00 00 00	 call	 _Py_PXCTX
  001be	85 c0		 test	 eax, eax
  001c0	75 5c		 jne	 SHORT $LN3@parse_synt
  001c2	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001c6	a8 20		 test	 al, 32			; 00000020H
  001c8	75 4c		 jne	 SHORT $LN26@parse_synt
  001ca	84 c0		 test	 al, al
  001cc	78 48		 js	 SHORT $LN26@parse_synt
  001ce	a8 02		 test	 al, 2
  001d0	75 4c		 jne	 SHORT $LN3@parse_synt
  001d2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001d6	75 46		 jne	 SHORT $LN3@parse_synt
  001d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001e6	4c 8b cb	 mov	 r9, rbx
  001e9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001ef	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001f7	e8 00 00 00 00	 call	 _PyParallel_Guard
  001fc	48 8b cb	 mov	 rcx, rbx
  001ff	85 c0		 test	 eax, eax
  00201	74 07		 je	 SHORT $LN31@parse_synt
  00203	e8 00 00 00 00	 call	 _Px_Dealloc
  00208	eb 14		 jmp	 SHORT $LN3@parse_synt
$LN31@parse_synt:
  0020a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0020e	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00214	eb 08		 jmp	 SHORT $LN3@parse_synt
$LN26@parse_synt:
  00216	48 8b cb	 mov	 rcx, rbx
  00219	e8 00 00 00 00	 call	 Px_DecRef
$LN3@parse_synt:

; 1588 :     return 0;

  0021e	33 c0		 xor	 eax, eax
$LN20@parse_synt:

; 1589 : }

  00220	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00225	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0022a	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  0022f	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  00234	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00238	41 5e		 pop	 r14
  0023a	41 5d		 pop	 r13
  0023c	41 5c		 pop	 r12
  0023e	c3		 ret	 0
parse_syntax_error ENDP
_TEXT	ENDS
PUBLIC	??_C@_02JMHDMNNN@?$FO?6?$AA@			; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_04PFOHOKJK@?5?5?5?5?$AA@			; `string'
EXTRN	PyFile_WriteString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$print_error_text DD imagerel print_error_text
	DD	imagerel print_error_text+10
	DD	imagerel $unwind$print_error_text
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$print_error_text DD imagerel print_error_text+10
	DD	imagerel print_error_text+244
	DD	imagerel $chain$1$print_error_text
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$print_error_text DD imagerel print_error_text+244
	DD	imagerel print_error_text+319
	DD	imagerel $chain$2$print_error_text
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$print_error_text DD 021H
	DD	imagerel print_error_text
	DD	imagerel print_error_text+10
	DD	imagerel $unwind$print_error_text
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$print_error_text DD 041021H
	DD	077410H
	DD	066405H
	DD	imagerel print_error_text
	DD	imagerel print_error_text+10
	DD	imagerel $unwind$print_error_text
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$print_error_text DD 040a01H
	DD	08340aH
	DD	05006320aH
xdata	ENDS
;	COMDAT ??_C@_02JMHDMNNN@?$FO?6?$AA@
CONST	SEGMENT
??_C@_02JMHDMNNN@?$FO?6?$AA@ DB '^', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PFOHOKJK@?5?5?5?5?$AA@
CONST	SEGMENT
??_C@_04PFOHOKJK@?5?5?5?5?$AA@ DB '    ', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT print_error_text
_TEXT	SEGMENT
f$ = 48
offset$ = 56
text$ = 64
print_error_text PROC					; COMDAT

; 1599 : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  0000f	48 63 da	 movsxd	 rbx, edx
  00012	48 8b e9	 mov	 rbp, rcx
  00015	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  0001a	49 8b f0	 mov	 rsi, r8

; 1600 :     char *nl;
; 1601 :     if (offset >= 0) {

  0001d	85 d2		 test	 edx, edx
  0001f	0f 88 7d 00 00
	00		 js	 $LN28@print_erro

; 1602 :         if (offset > 0 && offset == strlen(text) && text[offset - 1] == '\n')

  00025	7e 20		 jle	 SHORT $LN17@print_erro
  00027	48 83 c9 ff	 or	 rcx, -1
  0002b	33 c0		 xor	 eax, eax
  0002d	49 8b f8	 mov	 rdi, r8
  00030	f2 ae		 repne scasb
  00032	48 f7 d1	 not	 rcx
  00035	48 ff c9	 dec	 rcx
  00038	48 3b d9	 cmp	 rbx, rcx
  0003b	75 0a		 jne	 SHORT $LN17@print_erro
  0003d	42 80 7c 03 ff
	0a		 cmp	 BYTE PTR [rbx+r8-1], 10
  00043	75 02		 jne	 SHORT $LN17@print_erro

; 1603 :             offset--;

  00045	ff cb		 dec	 ebx
$LN17@print_erro:

; 1604 :         for (;;) {
; 1605 :             nl = strchr(text, '\n');

  00047	ba 0a 00 00 00	 mov	 edx, 10
  0004c	49 8b c8	 mov	 rcx, r8
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr

; 1606 :             if (nl == NULL || nl-text >= offset)

  00055	48 85 c0	 test	 rax, rax
  00058	74 36		 je	 SHORT $LL8@print_erro
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL12@print_erro:
  00060	48 8b d0	 mov	 rdx, rax
  00063	48 63 cb	 movsxd	 rcx, ebx
  00066	48 2b d6	 sub	 rdx, rsi
  00069	48 3b d1	 cmp	 rdx, rcx
  0006c	7d 22		 jge	 SHORT $LL8@print_erro

; 1607 :                 break;
; 1608 :             offset -= (int)(nl+1-text);

  0006e	2b f0		 sub	 esi, eax
  00070	ba 0a 00 00 00	 mov	 edx, 10
  00075	8d 5c 33 ff	 lea	 ebx, DWORD PTR [rbx+rsi-1]

; 1609 :             text = nl+1;

  00079	48 8d 70 01	 lea	 rsi, QWORD PTR [rax+1]
  0007d	48 8b ce	 mov	 rcx, rsi
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  00086	48 85 c0	 test	 rax, rax
  00089	75 d5		 jne	 SHORT $LL12@print_erro
  0008b	0f 1f 44 00 00	 npad	 5
$LL8@print_erro:

; 1610 :         }
; 1611 :         while (*text == ' ' || *text == '\t') {

  00090	0f b6 06	 movzx	 eax, BYTE PTR [rsi]
  00093	3c 20		 cmp	 al, 32			; 00000020H
  00095	74 04		 je	 SHORT $LN6@print_erro
  00097	3c 09		 cmp	 al, 9
  00099	75 07		 jne	 SHORT $LN28@print_erro
$LN6@print_erro:

; 1612 :             text++;

  0009b	48 ff c6	 inc	 rsi

; 1613 :             offset--;

  0009e	ff cb		 dec	 ebx

; 1614 :         }

  000a0	eb ee		 jmp	 SHORT $LL8@print_erro
$LN28@print_erro:

; 1615 :     }
; 1616 :     PyFile_WriteString("    ", f);

  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04PFOHOKJK@?5?5?5?5?$AA@
  000a9	48 8b d5	 mov	 rdx, rbp
  000ac	e8 00 00 00 00	 call	 PyFile_WriteString

; 1617 :     PyFile_WriteString(text, f);

  000b1	48 8b d5	 mov	 rdx, rbp
  000b4	48 8b ce	 mov	 rcx, rsi
  000b7	e8 00 00 00 00	 call	 PyFile_WriteString

; 1618 :     if (*text == '\0' || text[strlen(text)-1] != '\n')

  000bc	80 3e 00	 cmp	 BYTE PTR [rsi], 0
  000bf	74 15		 je	 SHORT $LN4@print_erro
  000c1	48 83 c9 ff	 or	 rcx, -1
  000c5	33 c0		 xor	 eax, eax
  000c7	48 8b fe	 mov	 rdi, rsi
  000ca	f2 ae		 repne scasb
  000cc	48 f7 d1	 not	 rcx
  000cf	80 7c 31 fe 0a	 cmp	 BYTE PTR [rcx+rsi-2], 10
  000d4	74 0f		 je	 SHORT $LN5@print_erro
$LN4@print_erro:

; 1619 :         PyFile_WriteString("\n", f);

  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  000dd	48 8b d5	 mov	 rdx, rbp
  000e0	e8 00 00 00 00	 call	 PyFile_WriteString
$LN5@print_erro:

; 1620 :     if (offset == -1)

  000e5	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  000ea	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  000ef	83 fb ff	 cmp	 ebx, -1
  000f2	74 40		 je	 SHORT $LN15@print_erro

; 1621 :         return;
; 1622 :     PyFile_WriteString("    ", f);

  000f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04PFOHOKJK@?5?5?5?5?$AA@
  000fb	48 8b d5	 mov	 rdx, rbp
  000fe	e8 00 00 00 00	 call	 PyFile_WriteString

; 1623 :     while (--offset > 0)

  00103	ff cb		 dec	 ebx
  00105	85 db		 test	 ebx, ebx
  00107	7e 1c		 jle	 SHORT $LN1@print_erro
  00109	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@print_erro:

; 1624 :         PyFile_WriteString(" ", f);

  00110	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01CLKCMJKC@?5?$AA@
  00117	48 8b d5	 mov	 rdx, rbp
  0011a	e8 00 00 00 00	 call	 PyFile_WriteString
  0011f	ff cb		 dec	 ebx
  00121	85 db		 test	 ebx, ebx
  00123	7f eb		 jg	 SHORT $LL2@print_erro
$LN1@print_erro:

; 1625 :     PyFile_WriteString("^\n", f);

  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02JMHDMNNN@?$FO?6?$AA@
  0012c	48 8b d5	 mov	 rdx, rbp
  0012f	e8 00 00 00 00	 call	 PyFile_WriteString
$LN15@print_erro:

; 1626 : }

  00134	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00139	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0013d	5d		 pop	 rbp
  0013e	c3		 ret	 0
print_error_text ENDP
_TEXT	ENDS
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@		; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_08DPOAHILF@?$CC?0?5line?5?$AA@		; `string'
PUBLIC	??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@		; `string'
PUBLIC	??_C@_08KFJEIIMI@?5?5File?5?$CC?$AA@		; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_07CNJFOCGJ@?5found?6?$AA@			; `string'
PUBLIC	??_C@_0DN@FJODKFFN@TypeError?3?5print_exception?$CI?$CJ?3?5Ex@ ; `string'
EXTRN	PyFile_WriteObject:PROC
EXTRN	PyUnicode_GetLength:PROC
EXTRN	PyObject_Str:PROC
EXTRN	__imp_strrchr:PROC
EXTRN	_PyObject_HasAttrId:PROC
EXTRN	PyTraceBack_Print:PROC
EXTRN	PyException_GetTraceback:PROC
EXTRN	__imp_fflush:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$print_exception DD imagerel print_exception
	DD	imagerel print_exception+88
	DD	imagerel $unwind$print_exception
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$print_exception DD imagerel print_exception+88
	DD	imagerel print_exception+245
	DD	imagerel $chain$1$print_exception
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$print_exception DD imagerel print_exception+245
	DD	imagerel print_exception+342
	DD	imagerel $chain$2$print_exception
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$print_exception DD imagerel print_exception+342
	DD	imagerel print_exception+507
	DD	imagerel $chain$4$print_exception
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$print_exception DD imagerel print_exception+507
	DD	imagerel print_exception+683
	DD	imagerel $chain$5$print_exception
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$print_exception DD imagerel print_exception+683
	DD	imagerel print_exception+718
	DD	imagerel $chain$6$print_exception
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$print_exception DD imagerel print_exception+718
	DD	imagerel print_exception+862
	DD	imagerel $chain$7$print_exception
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$print_exception DD imagerel print_exception+862
	DD	imagerel print_exception+870
	DD	imagerel $chain$8$print_exception
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$print_exception DD imagerel print_exception+870
	DD	imagerel print_exception+897
	DD	imagerel $chain$9$print_exception
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$print_exception DD imagerel print_exception+897
	DD	imagerel print_exception+1015
	DD	imagerel $chain$10$print_exception
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$print_exception DD imagerel print_exception+1015
	DD	imagerel print_exception+1029
	DD	imagerel $chain$11$print_exception
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$print_exception DD 021H
	DD	imagerel print_exception
	DD	imagerel print_exception+88
	DD	imagerel $unwind$print_exception
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$print_exception DD 020021H
	DD	0cd400H
	DD	imagerel print_exception
	DD	imagerel print_exception+88
	DD	imagerel $unwind$print_exception
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$print_exception DD 021H
	DD	imagerel print_exception+88
	DD	imagerel print_exception+245
	DD	imagerel $chain$1$print_exception
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$print_exception DD 021H
	DD	imagerel print_exception+245
	DD	imagerel print_exception+342
	DD	imagerel $chain$2$print_exception
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$print_exception DD 020021H
	DD	0be400H
	DD	imagerel print_exception+245
	DD	imagerel print_exception+342
	DD	imagerel $chain$2$print_exception
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$print_exception DD 040021H
	DD	0af400H
	DD	0be400H
	DD	imagerel print_exception+245
	DD	imagerel print_exception+342
	DD	imagerel $chain$2$print_exception
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$print_exception DD 021H
	DD	imagerel print_exception+245
	DD	imagerel print_exception+342
	DD	imagerel $chain$2$print_exception
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$print_exception DD 040e21H
	DD	0af40eH
	DD	0be405H
	DD	imagerel print_exception+245
	DD	imagerel print_exception+342
	DD	imagerel $chain$2$print_exception
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$print_exception DD 020821H
	DD	0126408H
	DD	imagerel print_exception+88
	DD	imagerel print_exception+245
	DD	imagerel $chain$1$print_exception
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$print_exception DD 040a21H
	DD	0cd40aH
	DD	0d7405H
	DD	imagerel print_exception
	DD	imagerel print_exception+88
	DD	imagerel $unwind$print_exception
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$print_exception DD 040901H
	DD	0c005d209H
	DD	030025003H
xdata	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
CONST	SEGMENT
??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@ DB '<unknown>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DPOAHILF@?$CC?0?5line?5?$AA@
CONST	SEGMENT
??_C@_08DPOAHILF@?$CC?0?5line?5?$AA@ DB '", line ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@
CONST	SEGMENT
??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@ DB '<string>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KFJEIIMI@?5?5File?5?$CC?$AA@
CONST	SEGMENT
??_C@_08KFJEIIMI@?5?5File?5?$CC?$AA@ DB '  File "', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07CNJFOCGJ@?5found?6?$AA@
CONST	SEGMENT
??_C@_07CNJFOCGJ@?5found?6?$AA@ DB ' found', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@FJODKFFN@TypeError?3?5print_exception?$CI?$CJ?3?5Ex@
CONST	SEGMENT
??_C@_0DN@FJODKFFN@TypeError?3?5print_exception?$CI?$CJ?3?5Ex@ DB 'TypeEr'
	DB	'ror: print_exception(): Exception expected for value, ', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pythonrun.c
CONST	ENDS
;	COMDAT print_exception
_TEXT	SEGMENT
text$123042 = 48
message$123040 = 56
buf$123047 = 64
f$ = 144
lineno$123043 = 152
value$ = 152
offset$123044 = 160
filename$123041 = 168
print_exception PROC					; COMDAT

; 1750 : {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	41 54		 push	 r12
  00005	48 83 ec 70	 sub	 rsp, 112		; 00000070H

; 1751 :     int err = 0;
; 1752 :     PyObject *type, *tb;
; 1753 :     _Py_IDENTIFIER(print_file_and_line);
; 1754 : 
; 1755 :     if (!PyExceptionInstance_Check(value)) {

  00009	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0000d	33 db		 xor	 ebx, ebx
  0000f	4c 8b e2	 mov	 r12, rdx
  00012	f7 80 00 01 00
	00 00 00 00 40	 test	 DWORD PTR [rax+256], 1073741824 ; 40000000H
  0001c	48 8b e9	 mov	 rbp, rcx
  0001f	75 37		 jne	 SHORT $LN39@print_exce

; 1756 :         PyFile_WriteString("TypeError: print_exception(): Exception expected for value, ", f);

  00021	48 8b d1	 mov	 rdx, rcx
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DN@FJODKFFN@TypeError?3?5print_exception?$CI?$CJ?3?5Ex@
  0002b	e8 00 00 00 00	 call	 PyFile_WriteString

; 1757 :         PyFile_WriteString(Py_TYPE(value)->tp_name, f);

  00030	49 8b 4c 24 58	 mov	 rcx, QWORD PTR [r12+88]
  00035	48 8b d5	 mov	 rdx, rbp
  00038	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0003c	e8 00 00 00 00	 call	 PyFile_WriteString

; 1758 :         PyFile_WriteString(" found\n", f);

  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07CNJFOCGJ@?5found?6?$AA@
  00048	48 8b d5	 mov	 rdx, rbp

; 1857 : }

  0004b	48 83 c4 70	 add	 rsp, 112		; 00000070H
  0004f	41 5c		 pop	 r12
  00051	5d		 pop	 rbp
  00052	5b		 pop	 rbx
  00053	e9 00 00 00 00	 jmp	 PyFile_WriteString
$LN39@print_exce:
  00058	48 89 7c 24 68	 mov	 QWORD PTR [rsp+104], rdi
  0005d	4c 89 6c 24 60	 mov	 QWORD PTR [rsp+96], r13

; 1759 :         return;
; 1760 :     }
; 1761 : 
; 1762 :     Py_INCREF(value);

  00062	e8 00 00 00 00	 call	 _Py_PXCTX
  00067	85 c0		 test	 eax, eax
  00069	75 35		 jne	 SHORT $LN43@print_exce
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00079	4d 8b cc	 mov	 r9, r12
  0007c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00082	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0008a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008f	85 c0		 test	 eax, eax
  00091	75 08		 jne	 SHORT $LN42@print_exce
  00093	41 f6 44 24 20
	20		 test	 BYTE PTR [r12+32], 32	; 00000020H
  00099	74 05		 je	 SHORT $LN43@print_exce
$LN42@print_exce:
  0009b	49 ff 44 24 50	 inc	 QWORD PTR [r12+80]
$LN43@print_exce:

; 1763 :     fflush(stdout);

  000a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  000a6	48 8d 48 30	 lea	 rcx, QWORD PTR [rax+48]
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 1764 :     type = (PyObject *) Py_TYPE(value);

  000b0	49 8b 7c 24 58	 mov	 rdi, QWORD PTR [r12+88]

; 1765 :     tb = PyException_GetTraceback(value);

  000b5	49 8b cc	 mov	 rcx, r12
  000b8	e8 00 00 00 00	 call	 PyException_GetTraceback
  000bd	4c 8b e8	 mov	 r13, rax

; 1766 :     if (tb && tb != Py_None)

  000c0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000c7	4d 85 ed	 test	 r13, r13
  000ca	74 1a		 je	 SHORT $LN57@print_exce
  000cc	4c 3b e8	 cmp	 r13, rax
  000cf	74 15		 je	 SHORT $LN57@print_exce

; 1767 :         err = PyTraceBack_Print(tb, f);

  000d1	48 8b d5	 mov	 rdx, rbp
  000d4	49 8b cd	 mov	 rcx, r13
  000d7	e8 00 00 00 00	 call	 PyTraceBack_Print
  000dc	8b d8		 mov	 ebx, eax

; 1768 :     if (err == 0 &&
; 1769 :         _PyObject_HasAttrId(value, &PyId_print_file_and_line))

  000de	85 c0		 test	 eax, eax
  000e0	0f 85 80 02 00
	00		 jne	 $LN7@print_exce
$LN57@print_exce:
  000e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  000ec	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  000f5	48 89 b4 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rsi
  000fd	48 8b 34 d1	 mov	 rsi, QWORD PTR [rcx+rdx*8]
  00101	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_print_file_and_line@?1??print_exception@@9@9
  00106	49 8b cc	 mov	 rcx, r12
  00109	48 03 d6	 add	 rdx, rsi
  0010c	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00111	85 c0		 test	 eax, eax
  00113	74 41		 je	 SHORT $LN58@print_exce

; 1770 :     {
; 1771 :         PyObject *message;
; 1772 :         const char *filename, *text;
; 1773 :         int lineno, offset;
; 1774 :         if (!parse_syntax_error(value, &message, &filename,
; 1775 :                                 &lineno, &offset, &text))

  00115	48 8d 44 24 30	 lea	 rax, QWORD PTR text$123042[rsp]
  0011a	4c 8d 8c 24 98
	00 00 00	 lea	 r9, QWORD PTR lineno$123043[rsp]
  00122	4c 8d 84 24 a8
	00 00 00	 lea	 r8, QWORD PTR filename$123041[rsp]
  0012a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0012f	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR offset$123044[rsp]
  00137	48 8d 54 24 38	 lea	 rdx, QWORD PTR message$123040[rsp]
  0013c	49 8b cc	 mov	 rcx, r12
  0013f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00144	e8 00 00 00 00	 call	 parse_syntax_error
  00149	85 c0		 test	 eax, eax
  0014b	0f 85 aa 00 00
	00		 jne	 $LN36@print_exce

; 1776 :             PyErr_Clear();

  00151	e8 00 00 00 00	 call	 PyErr_Clear
$LN58@print_exce:
  00156	4c 89 74 24 58	 mov	 QWORD PTR [rsp+88], r14

; 1799 :         /* Don't do anything else */
; 1800 :     }
; 1801 :     else {
; 1802 :         PyObject* moduleName;
; 1803 :         char* className;
; 1804 :         _Py_IDENTIFIER(__module__);
; 1805 :         assert(PyExceptionClass_Check(type));
; 1806 :         className = PyExceptionClass_Name(type);

  0015b	4c 8b 77 70	 mov	 r14, QWORD PTR [rdi+112]
  0015f	4c 89 7c 24 50	 mov	 QWORD PTR [rsp+80], r15

; 1807 :         if (className != NULL) {

  00164	4d 85 f6	 test	 r14, r14
  00167	74 17		 je	 SHORT $LN27@print_exce

; 1808 :             char *dot = strrchr(className, '.');

  00169	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  0016e	49 8b ce	 mov	 rcx, r14
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strrchr

; 1809 :             if (dot != NULL)

  00177	48 85 c0	 test	 rax, rax
  0017a	74 04		 je	 SHORT $LN27@print_exce

; 1810 :                 className = dot+1;

  0017c	4c 8d 70 01	 lea	 r14, QWORD PTR [rax+1]
$LN27@print_exce:

; 1811 :         }
; 1812 : 
; 1813 :         moduleName = _PyObject_GetAttrId(type, &PyId___module__);

  00180	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___module__@?6??print_exception@@9@9
  00185	48 8b cf	 mov	 rcx, rdi
  00188	48 03 d6	 add	 rdx, rsi
  0018b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00190	4c 8b f8	 mov	 r15, rax

; 1814 :         if (moduleName == NULL || !PyUnicode_Check(moduleName))

  00193	48 85 c0	 test	 rax, rax
  00196	0f 84 14 01 00
	00		 je	 $LN23@print_exce
  0019c	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  001a0	f7 81 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rcx+256], 268435456 ; 10000000H

; 1818 :         }
; 1819 :         else {
; 1820 :             char* modstr = _PyUnicode_AsString(moduleName);

  001aa	48 8b c8	 mov	 rcx, rax
  001ad	0f 84 f8 00 00
	00		 je	 $LN24@print_exce
  001b3	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 1821 :             if (modstr && strcmp(modstr, "builtins"))

  001b8	48 85 c0	 test	 rax, rax
  001bb	74 31		 je	 SHORT $LN19@print_exce
  001bd	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  001c4	48 8b f0	 mov	 rsi, rax
  001c7	b9 09 00 00 00	 mov	 ecx, 9
  001cc	f3 a6		 repe cmpsb
  001ce	74 1e		 je	 SHORT $LN19@print_exce

; 1822 :             {
; 1823 :                 err = PyFile_WriteString(modstr, f);

  001d0	48 8b d5	 mov	 rdx, rbp
  001d3	48 8b c8	 mov	 rcx, rax
  001d6	e8 00 00 00 00	 call	 PyFile_WriteString

; 1824 :                 err += PyFile_WriteString(".", f);

  001db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  001e2	48 8b d5	 mov	 rdx, rbp
  001e5	8b d8		 mov	 ebx, eax
  001e7	e8 00 00 00 00	 call	 PyFile_WriteString
  001ec	03 d8		 add	 ebx, eax
$LN19@print_exce:

; 1825 :             }
; 1826 :             Py_DECREF(moduleName);

  001ee	49 8b cf	 mov	 rcx, r15
  001f1	e8 00 00 00 00	 call	 _Py_DecRef
  001f6	e9 c6 00 00 00	 jmp	 $LN20@print_exce
$LN36@print_exce:

; 1777 :         else {
; 1778 :             char buf[10];
; 1779 :             PyFile_WriteString("  File \"", f);

  001fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KFJEIIMI@?5?5File?5?$CC?$AA@
  00202	48 8b d5	 mov	 rdx, rbp
  00205	e8 00 00 00 00	 call	 PyFile_WriteString

; 1780 :             if (filename == NULL)

  0020a	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR filename$123041[rsp]

; 1781 :                 PyFile_WriteString("<string>", f);

  00212	48 8b d5	 mov	 rdx, rbp
  00215	48 85 c9	 test	 rcx, rcx
  00218	75 07		 jne	 SHORT $LN34@print_exce
  0021a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@
$LN34@print_exce:

; 1782 :             else
; 1783 :                 PyFile_WriteString(filename, f);

  00221	e8 00 00 00 00	 call	 PyFile_WriteString

; 1784 :             PyFile_WriteString("\", line ", f);

  00226	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08DPOAHILF@?$CC?0?5line?5?$AA@
  0022d	48 8b d5	 mov	 rdx, rbp
  00230	e8 00 00 00 00	 call	 PyFile_WriteString

; 1785 :             PyOS_snprintf(buf, sizeof(buf), "%d", lineno);

  00235	44 8b 8c 24 98
	00 00 00	 mov	 r9d, DWORD PTR lineno$123043[rsp]
  0023d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  00244	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$123047[rsp]
  00249	ba 0a 00 00 00	 mov	 edx, 10
  0024e	e8 00 00 00 00	 call	 PyOS_snprintf

; 1786 :             PyFile_WriteString(buf, f);

  00253	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$123047[rsp]
  00258	48 8b d5	 mov	 rdx, rbp
  0025b	e8 00 00 00 00	 call	 PyFile_WriteString

; 1787 :             PyFile_WriteString("\n", f);

  00260	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00267	48 8b d5	 mov	 rdx, rbp
  0026a	e8 00 00 00 00	 call	 PyFile_WriteString

; 1788 :             if (text != NULL)

  0026f	4c 8b 44 24 30	 mov	 r8, QWORD PTR text$123042[rsp]
  00274	4d 85 c0	 test	 r8, r8
  00277	74 0f		 je	 SHORT $LN32@print_exce

; 1789 :                 print_error_text(f, offset, text);

  00279	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR offset$123044[rsp]
  00280	48 8b cd	 mov	 rcx, rbp
  00283	e8 00 00 00 00	 call	 print_error_text
$LN32@print_exce:

; 1790 :             Py_DECREF(value);

  00288	49 8b cc	 mov	 rcx, r12
  0028b	e8 00 00 00 00	 call	 _Py_DecRef

; 1791 :             value = message;

  00290	4c 8b 64 24 38	 mov	 r12, QWORD PTR message$123040[rsp]

; 1792 :             /* Can't be bothered to check all those
; 1793 :                PyFile_WriteString() calls */
; 1794 :             if (PyErr_Occurred())

  00295	e8 00 00 00 00	 call	 PyErr_Occurred
  0029a	48 85 c0	 test	 rax, rax
  0029d	0f 84 b3 fe ff
	ff		 je	 $LN58@print_exce

; 1795 :                 err = -1;

  002a3	83 cb ff	 or	 ebx, -1

; 1796 :         }
; 1797 :     }
; 1798 :     if (err) {

  002a6	e9 b3 00 00 00	 jmp	 $LN60@print_exce
$LN24@print_exce:

; 1815 :         {
; 1816 :             Py_XDECREF(moduleName);

  002ab	e8 00 00 00 00	 call	 _Py_DecRef
$LN23@print_exce:

; 1817 :             err = PyFile_WriteString("<unknown>", f);

  002b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
  002b7	48 8b d5	 mov	 rdx, rbp
  002ba	e8 00 00 00 00	 call	 PyFile_WriteString
  002bf	8b d8		 mov	 ebx, eax
$LN20@print_exce:

; 1827 :         }
; 1828 :         if (err == 0) {

  002c1	4c 8b 7c 24 50	 mov	 r15, QWORD PTR [rsp+80]
  002c6	85 db		 test	 ebx, ebx
  002c8	0f 85 8b 00 00
	00		 jne	 $LN61@print_exce

; 1829 :             if (className == NULL)
; 1830 :                       err = PyFile_WriteString("<unknown>", f);

  002ce	48 8b d5	 mov	 rdx, rbp
  002d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
  002d8	4d 85 f6	 test	 r14, r14
  002db	74 03		 je	 SHORT $LN62@print_exce

; 1831 :             else
; 1832 :                       err = PyFile_WriteString(className, f);

  002dd	49 8b ce	 mov	 rcx, r14
$LN62@print_exce:
  002e0	e8 00 00 00 00	 call	 PyFile_WriteString
  002e5	8b d8		 mov	 ebx, eax

; 1833 :         }
; 1834 :     }
; 1835 :     if (err == 0 && (value != Py_None)) {

  002e7	85 c0		 test	 eax, eax
  002e9	75 6e		 jne	 SHORT $LN61@print_exce
  002eb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  002f2	4c 3b e0	 cmp	 r12, rax
  002f5	74 62		 je	 SHORT $LN61@print_exce

; 1836 :         PyObject *s = PyObject_Str(value);

  002f7	49 8b cc	 mov	 rcx, r12
  002fa	e8 00 00 00 00	 call	 PyObject_Str
  002ff	48 8b f8	 mov	 rdi, rax

; 1837 :         /* only print colon if the str() of the
; 1838 :            object is not the empty string
; 1839 :         */
; 1840 :         if (s == NULL)

  00302	48 85 c0	 test	 rax, rax
  00305	75 05		 jne	 SHORT $LN14@print_exce

; 1841 :             err = -1;

  00307	83 cb ff	 or	 ebx, -1

; 1842 :         else if (!PyUnicode_Check(s) ||

  0030a	eb 4d		 jmp	 SHORT $LN61@print_exce
$LN14@print_exce:

; 1843 :             PyUnicode_GetLength(s) != 0)

  0030c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00310	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0031a	74 0d		 je	 SHORT $LN11@print_exce
  0031c	48 8b cf	 mov	 rcx, rdi
  0031f	e8 00 00 00 00	 call	 PyUnicode_GetLength
  00324	48 85 c0	 test	 rax, rax
  00327	74 15		 je	 SHORT $LN59@print_exce
$LN11@print_exce:

; 1844 :             err = PyFile_WriteString(": ", f);

  00329	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02LMMGGCAJ@?3?5?$AA@
  00330	48 8b d5	 mov	 rdx, rbp
  00333	e8 00 00 00 00	 call	 PyFile_WriteString
  00338	8b d8		 mov	 ebx, eax

; 1845 :         if (err == 0)

  0033a	85 c0		 test	 eax, eax
  0033c	75 13		 jne	 SHORT $LN9@print_exce
$LN59@print_exce:

; 1846 :           err = PyFile_WriteObject(s, f, Py_PRINT_RAW);

  0033e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00344	48 8b d5	 mov	 rdx, rbp
  00347	48 8b cf	 mov	 rcx, rdi
  0034a	e8 00 00 00 00	 call	 PyFile_WriteObject
  0034f	8b d8		 mov	 ebx, eax
$LN9@print_exce:

; 1847 :         Py_XDECREF(s);

  00351	48 8b cf	 mov	 rcx, rdi
  00354	e8 00 00 00 00	 call	 _Py_DecRef
$LN61@print_exce:
  00359	4c 8b 74 24 58	 mov	 r14, QWORD PTR [rsp+88]
$LN60@print_exce:
  0035e	48 8b b4 24 90
	00 00 00	 mov	 rsi, QWORD PTR [rsp+144]
$LN7@print_exce:

; 1848 :     }
; 1849 :     /* try to write a newline in any case */
; 1850 :     err += PyFile_WriteString("\n", f);

  00366	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  0036d	48 8b d5	 mov	 rdx, rbp
  00370	e8 00 00 00 00	 call	 PyFile_WriteString
  00375	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  0037a	03 d8		 add	 ebx, eax

; 1851 :     Py_XDECREF(tb);

  0037c	4d 85 ed	 test	 r13, r13
  0037f	74 65		 je	 SHORT $LN4@print_exce
  00381	e8 00 00 00 00	 call	 _Py_PXCTX
  00386	85 c0		 test	 eax, eax
  00388	75 5c		 jne	 SHORT $LN4@print_exce
  0038a	49 8b 45 20	 mov	 rax, QWORD PTR [r13+32]
  0038e	a8 20		 test	 al, 32			; 00000020H
  00390	75 4c		 jne	 SHORT $LN50@print_exce
  00392	84 c0		 test	 al, al
  00394	78 48		 js	 SHORT $LN50@print_exce
  00396	a8 02		 test	 al, 2
  00398	75 4c		 jne	 SHORT $LN4@print_exce
  0039a	49 ff 4d 50	 dec	 QWORD PTR [r13+80]
  0039e	75 46		 jne	 SHORT $LN4@print_exce
  003a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  003ae	4d 8b cd	 mov	 r9, r13
  003b1	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  003b7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003bf	e8 00 00 00 00	 call	 _PyParallel_Guard
  003c4	49 8b cd	 mov	 rcx, r13
  003c7	85 c0		 test	 eax, eax
  003c9	74 07		 je	 SHORT $LN55@print_exce
  003cb	e8 00 00 00 00	 call	 _Px_Dealloc
  003d0	eb 14		 jmp	 SHORT $LN4@print_exce
$LN55@print_exce:
  003d2	49 8b 45 58	 mov	 rax, QWORD PTR [r13+88]
  003d6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003dc	eb 08		 jmp	 SHORT $LN4@print_exce
$LN50@print_exce:
  003de	49 8b cd	 mov	 rcx, r13
  003e1	e8 00 00 00 00	 call	 Px_DecRef
$LN4@print_exce:

; 1852 :     Py_DECREF(value);

  003e6	49 8b cc	 mov	 rcx, r12
  003e9	e8 00 00 00 00	 call	 _Py_DecRef
  003ee	4c 8b 6c 24 60	 mov	 r13, QWORD PTR [rsp+96]

; 1853 :     /* If an error happened here, don't show it.
; 1854 :        XXX This is wrong, but too many callers rely on this behavior. */
; 1855 :     if (err != 0)

  003f3	85 db		 test	 ebx, ebx
  003f5	74 05		 je	 SHORT $LN1@print_exce

; 1856 :         PyErr_Clear();

  003f7	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@print_exce:

; 1857 : }

  003fc	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00400	41 5c		 pop	 r12
  00402	5d		 pop	 rbp
  00403	5b		 pop	 rbx
  00404	c3		 ret	 0
print_exception ENDP
_TEXT	ENDS
EXTRN	PySet_Contains:PROC
EXTRN	PyException_GetContext:PROC
EXTRN	PyException_GetCause:PROC
EXTRN	PySet_Add:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$print_exception_recursive DD imagerel print_exception_recursive
	DD	imagerel print_exception_recursive+9
	DD	imagerel $unwind$print_exception_recursive
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$print_exception_recursive DD imagerel print_exception_recursive+9
	DD	imagerel print_exception_recursive+89
	DD	imagerel $chain$1$print_exception_recursive
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$print_exception_recursive DD imagerel print_exception_recursive+89
	DD	imagerel print_exception_recursive+99
	DD	imagerel $chain$2$print_exception_recursive
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$print_exception_recursive DD imagerel print_exception_recursive+99
	DD	imagerel print_exception_recursive+118
	DD	imagerel $chain$3$print_exception_recursive
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$print_exception_recursive DD imagerel print_exception_recursive+118
	DD	imagerel print_exception_recursive+337
	DD	imagerel $chain$5$print_exception_recursive
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$print_exception_recursive DD imagerel print_exception_recursive+337
	DD	imagerel print_exception_recursive+357
	DD	imagerel $chain$7$print_exception_recursive
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$print_exception_recursive DD 040021H
	DD	047400H
	DD	065400H
	DD	imagerel print_exception_recursive+99
	DD	imagerel print_exception_recursive+118
	DD	imagerel $chain$3$print_exception_recursive
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$print_exception_recursive DD 040a21H
	DD	04740aH
	DD	065405H
	DD	imagerel print_exception_recursive+99
	DD	imagerel print_exception_recursive+118
	DD	imagerel $chain$3$print_exception_recursive
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$print_exception_recursive DD 040021H
	DD	056400H
	DD	093400H
	DD	imagerel print_exception_recursive
	DD	imagerel print_exception_recursive+9
	DD	imagerel $unwind$print_exception_recursive
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$print_exception_recursive DD 021H
	DD	imagerel print_exception_recursive
	DD	imagerel print_exception_recursive+9
	DD	imagerel $unwind$print_exception_recursive
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$print_exception_recursive DD 040a21H
	DD	05640aH
	DD	093405H
	DD	imagerel print_exception_recursive
	DD	imagerel print_exception_recursive+9
	DD	imagerel $unwind$print_exception_recursive
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$print_exception_recursive DD 010901H
	DD	06209H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT print_exception_recursive
_TEXT	SEGMENT
f$ = 64
value$ = 72
err$1$ = 80
seen$ = 80
print_exception_recursive PROC				; COMDAT

; 1869 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  0000e	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi

; 1870 :     int err = 0, res;

  00013	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR err$1$[rsp], 0
  0001b	49 8b f0	 mov	 rsi, r8
  0001e	48 8b da	 mov	 rbx, rdx

; 1871 :     PyObject *cause, *context;
; 1872 : 
; 1873 :     if (seen != NULL) {

  00021	4d 85 c0	 test	 r8, r8
  00024	74 12		 je	 SHORT $LN24@print_exce@2

; 1874 :         /* Exception chaining */
; 1875 :         if (PySet_Add(seen, value) == -1)

  00026	49 8b c8	 mov	 rcx, r8
  00029	e8 00 00 00 00	 call	 PySet_Add
  0002e	83 f8 ff	 cmp	 eax, -1
  00031	75 30		 jne	 SHORT $LN19@print_exce@2

; 1876 :             PyErr_Clear();

  00033	e8 00 00 00 00	 call	 PyErr_Clear
$LN24@print_exce@2:
  00038	48 8b 74 24 40	 mov	 rsi, QWORD PTR f$[rsp]
$LN3@print_exce@2:

; 1905 :         }
; 1906 :     }
; 1907 :     print_exception(f, value);

  0003d	48 8b d3	 mov	 rdx, rbx
  00040	48 8b ce	 mov	 rcx, rsi
  00043	e8 00 00 00 00	 call	 print_exception

; 1908 :     if (err != 0)

  00048	83 7c 24 50 00	 cmp	 DWORD PTR err$1$[rsp], 0
  0004d	48 8b 74 24 28	 mov	 rsi, QWORD PTR [rsp+40]
  00052	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00057	74 05		 je	 SHORT $LN1@print_exce@2

; 1909 :         PyErr_Clear();

  00059	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@print_exce@2:

; 1910 : }

  0005e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00062	c3		 ret	 0
$LN19@print_exce@2:

; 1877 :         else if (PyExceptionInstance_Check(value)) {

  00063	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00067	f7 80 00 01 00
	00 00 00 00 40	 test	 DWORD PTR [rax+256], 1073741824 ; 40000000H
  00071	74 c5		 je	 SHORT $LN24@print_exce@2

; 1878 :             cause = PyException_GetCause(value);

  00073	48 8b cb	 mov	 rcx, rbx
  00076	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  0007b	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00080	e8 00 00 00 00	 call	 PyException_GetCause

; 1879 :             context = PyException_GetContext(value);

  00085	48 8b cb	 mov	 rcx, rbx
  00088	48 8b e8	 mov	 rbp, rax
  0008b	e8 00 00 00 00	 call	 PyException_GetContext
  00090	48 8b f8	 mov	 rdi, rax

; 1880 :             if (cause) {

  00093	48 85 ed	 test	 rbp, rbp
  00096	74 3c		 je	 SHORT $LN16@print_exce@2

; 1881 :                 res = PySet_Contains(seen, cause);

  00098	48 8b d5	 mov	 rdx, rbp
  0009b	48 8b ce	 mov	 rcx, rsi
  0009e	e8 00 00 00 00	 call	 PySet_Contains

; 1882 :                 if (res == -1)

  000a3	83 f8 ff	 cmp	 eax, -1

; 1883 :                     PyErr_Clear();
; 1884 :                 if (res == 0) {

  000a6	74 76		 je	 SHORT $LN30@print_exce@2
  000a8	85 c0		 test	 eax, eax
  000aa	75 77		 jne	 SHORT $LN28@print_exce@2

; 1885 :                     print_exception_recursive(
; 1886 :                         f, cause, seen);

  000ac	4c 8b c6	 mov	 r8, rsi
  000af	48 8b 74 24 40	 mov	 rsi, QWORD PTR f$[rsp]
  000b4	48 8b d5	 mov	 rdx, rbp
  000b7	48 8b ce	 mov	 rcx, rsi
  000ba	e8 00 00 00 00	 call	 print_exception_recursive

; 1887 :                     err |= PyFile_WriteString(
; 1888 :                         cause_message, f);

  000bf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cause_message
  000c6	48 8b d6	 mov	 rdx, rsi
  000c9	e8 00 00 00 00	 call	 PyFile_WriteString
  000ce	89 44 24 50	 mov	 DWORD PTR err$1$[rsp], eax

; 1889 :                 }
; 1890 :             }
; 1891 :             else if (context &&

  000d2	eb 4f		 jmp	 SHORT $LN28@print_exce@2
$LN16@print_exce@2:

; 1892 :                 !((PyBaseExceptionObject *)value)->suppress_context) {

  000d4	48 85 c0	 test	 rax, rax
  000d7	74 78		 je	 SHORT $LN25@print_exce@2
  000d9	80 bb 88 00 00
	00 00		 cmp	 BYTE PTR [rbx+136], 0
  000e0	75 41		 jne	 SHORT $LN28@print_exce@2

; 1893 :                 res = PySet_Contains(seen, context);

  000e2	48 8b d0	 mov	 rdx, rax
  000e5	48 8b ce	 mov	 rcx, rsi
  000e8	e8 00 00 00 00	 call	 PySet_Contains

; 1894 :                 if (res == -1)

  000ed	83 f8 ff	 cmp	 eax, -1

; 1896 :                 if (res == 0) {

  000f0	74 2c		 je	 SHORT $LN30@print_exce@2
  000f2	85 c0		 test	 eax, eax
  000f4	75 2d		 jne	 SHORT $LN28@print_exce@2

; 1897 :                     print_exception_recursive(
; 1898 :                         f, context, seen);

  000f6	4c 8b c6	 mov	 r8, rsi
  000f9	48 8b 74 24 40	 mov	 rsi, QWORD PTR f$[rsp]
  000fe	48 8b d7	 mov	 rdx, rdi
  00101	48 8b ce	 mov	 rcx, rsi
  00104	e8 00 00 00 00	 call	 print_exception_recursive

; 1899 :                     err |= PyFile_WriteString(
; 1900 :                         context_message, f);

  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR context_message
  00110	48 8b d6	 mov	 rdx, rsi
  00113	e8 00 00 00 00	 call	 PyFile_WriteString
  00118	89 44 24 50	 mov	 DWORD PTR err$1$[rsp], eax
  0011c	eb 0a		 jmp	 SHORT $LN9@print_exce@2
$LN30@print_exce@2:

; 1895 :                     PyErr_Clear();

  0011e	e8 00 00 00 00	 call	 PyErr_Clear
$LN28@print_exce@2:

; 1889 :                 }
; 1890 :             }
; 1891 :             else if (context &&

  00123	48 8b 74 24 40	 mov	 rsi, QWORD PTR f$[rsp]
$LN9@print_exce@2:

; 1901 :                 }
; 1902 :             }
; 1903 :             Py_XDECREF(context);

  00128	48 85 ff	 test	 rdi, rdi
  0012b	74 08		 je	 SHORT $LN8@print_exce@2
  0012d	48 8b cf	 mov	 rcx, rdi
  00130	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@print_exce@2:

; 1904 :             Py_XDECREF(cause);

  00135	48 85 ed	 test	 rbp, rbp
  00138	74 1c		 je	 SHORT $LN4@print_exce@2
  0013a	48 8b cd	 mov	 rcx, rbp
  0013d	e8 00 00 00 00	 call	 _Py_DecRef
  00142	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]
  00147	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  0014c	e9 ec fe ff ff	 jmp	 $LN3@print_exce@2
$LN25@print_exce@2:

; 1876 :             PyErr_Clear();

  00151	48 8b 74 24 40	 mov	 rsi, QWORD PTR f$[rsp]
$LN4@print_exce@2:
  00156	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]
  0015b	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  00160	e9 d8 fe ff ff	 jmp	 $LN3@print_exce@2
print_exception_recursive ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@CFMPKPJP@lost?5sys?4stderr?6?$AA@	; `string'
PUBLIC	PyErr_Display
EXTRN	PySet_New:PROC
EXTRN	__imp_fprintf:PROC
EXTRN	_PyObject_Dump:PROC
EXTRN	PyException_SetTraceback:PROC
EXTRN	PyTraceBack_Type:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_Display DD imagerel $LN26
	DD	imagerel $LN26+359
	DD	imagerel $unwind$PyErr_Display
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_Display DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0BB@CFMPKPJP@lost?5sys?4stderr?6?$AA@
CONST	SEGMENT
??_C@_0BB@CFMPKPJP@lost?5sys?4stderr?6?$AA@ DB 'lost sys.stderr', 0aH, 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pythonrun.c
CONST	ENDS
;	COMDAT PyErr_Display
_TEXT	SEGMENT
exception$ = 64
value$ = 72
tb$ = 80
PyErr_Display PROC					; COMDAT

; 1914 : {

$LN26:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1915 :     PyObject *seen;
; 1916 :     PyObject *f = PySys_GetObject("stderr");

  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00016	49 8b d8	 mov	 rbx, r8
  00019	48 8b fa	 mov	 rdi, rdx
  0001c	e8 00 00 00 00	 call	 PySys_GetObject

; 1917 :     if (PyExceptionInstance_Check(value)
; 1918 :         && tb != NULL && PyTraceBack_Check(tb)) {

  00021	48 8b 4f 58	 mov	 rcx, QWORD PTR [rdi+88]
  00025	f7 81 00 01 00
	00 00 00 00 40	 test	 DWORD PTR [rcx+256], 1073741824 ; 40000000H
  0002f	48 8b f0	 mov	 rsi, rax
  00032	74 34		 je	 SHORT $LN10@PyErr_Disp
  00034	48 85 db	 test	 rbx, rbx
  00037	74 2f		 je	 SHORT $LN10@PyErr_Disp
  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTraceBack_Type
  00040	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  00044	75 22		 jne	 SHORT $LN10@PyErr_Disp

; 1919 :         /* Put the traceback on the exception, otherwise it won't get
; 1920 :            displayed.  See issue #18776. */
; 1921 :         PyObject *cur_tb = PyException_GetTraceback(value);

  00046	48 8b cf	 mov	 rcx, rdi
  00049	e8 00 00 00 00	 call	 PyException_GetTraceback

; 1922 :         if (cur_tb == NULL)

  0004e	48 85 c0	 test	 rax, rax
  00051	75 0d		 jne	 SHORT $LN11@PyErr_Disp

; 1923 :             PyException_SetTraceback(value, tb);

  00053	48 8b d3	 mov	 rdx, rbx
  00056	48 8b cf	 mov	 rcx, rdi
  00059	e8 00 00 00 00	 call	 PyException_SetTraceback

; 1924 :         else

  0005e	eb 08		 jmp	 SHORT $LN10@PyErr_Disp
$LN11@PyErr_Disp:

; 1925 :             Py_DECREF(cur_tb);

  00060	48 8b c8	 mov	 rcx, rax
  00063	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@PyErr_Disp:

; 1926 :     }
; 1927 :     if (f == Py_None) {

  00068	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006f	48 3b f0	 cmp	 rsi, rax
  00072	0f 84 df 00 00
	00		 je	 $LN2@PyErr_Disp

; 1928 :         /* pass */
; 1929 :     }
; 1930 :     else if (f == NULL) {

  00078	48 85 f6	 test	 rsi, rsi
  0007b	75 2f		 jne	 SHORT $LN7@PyErr_Disp

; 1931 :         _PyObject_Dump(value);

  0007d	48 8b cf	 mov	 rcx, rdi
  00080	e8 00 00 00 00	 call	 _PyObject_Dump

; 1932 :         fprintf(stderr, "lost sys.stderr\n");

  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0008b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@CFMPKPJP@lost?5sys?4stderr?6?$AA@
  00092	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]

; 1943 :     }
; 1944 : }

  00096	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0009b	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000a0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a4	5f		 pop	 rdi
  000a5	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_fprintf
$LN7@PyErr_Disp:

; 1933 :     }
; 1934 :     else {
; 1935 :         /* We choose to ignore seen being possibly NULL, and report
; 1936 :            at least the main exception (it could be a MemoryError).
; 1937 :         */
; 1938 :         seen = PySet_New(NULL);

  000ac	33 c9		 xor	 ecx, ecx
  000ae	e8 00 00 00 00	 call	 PySet_New
  000b3	48 8b d8	 mov	 rbx, rax

; 1939 :         if (seen == NULL)

  000b6	48 85 c0	 test	 rax, rax
  000b9	75 05		 jne	 SHORT $LN5@PyErr_Disp

; 1940 :             PyErr_Clear();

  000bb	e8 00 00 00 00	 call	 PyErr_Clear
$LN5@PyErr_Disp:

; 1941 :         print_exception_recursive(f, value, seen);

  000c0	4c 8b c3	 mov	 r8, rbx
  000c3	48 8b d7	 mov	 rdx, rdi
  000c6	48 8b ce	 mov	 rcx, rsi
  000c9	e8 00 00 00 00	 call	 print_exception_recursive

; 1942 :         Py_XDECREF(seen);

  000ce	48 85 db	 test	 rbx, rbx
  000d1	0f 84 80 00 00
	00		 je	 $LN2@PyErr_Disp
  000d7	e8 00 00 00 00	 call	 _Py_PXCTX
  000dc	85 c0		 test	 eax, eax
  000de	75 77		 jne	 SHORT $LN2@PyErr_Disp
  000e0	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000e4	a8 20		 test	 al, 32			; 00000020H
  000e6	75 67		 jne	 SHORT $LN19@PyErr_Disp
  000e8	84 c0		 test	 al, al
  000ea	78 63		 js	 SHORT $LN19@PyErr_Disp
  000ec	a8 02		 test	 al, 2
  000ee	75 67		 jne	 SHORT $LN2@PyErr_Disp
  000f0	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000f4	75 61		 jne	 SHORT $LN2@PyErr_Disp
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00104	4c 8b cb	 mov	 r9, rbx
  00107	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0010d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00115	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011a	48 8b cb	 mov	 rcx, rbx
  0011d	85 c0		 test	 eax, eax
  0011f	74 14		 je	 SHORT $LN24@PyErr_Disp

; 1943 :     }
; 1944 : }

  00121	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00126	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0012b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0012f	5f		 pop	 rdi
  00130	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 1942 :         Py_XDECREF(seen);

$LN24@PyErr_Disp:
  00135	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 1943 :     }
; 1944 : }

  00139	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0013e	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00143	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00147	5f		 pop	 rdi
  00148	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 1942 :         Py_XDECREF(seen);

$LN19@PyErr_Disp:
  0014f	48 8b cb	 mov	 rcx, rbx
  00152	e8 00 00 00 00	 call	 Px_DecRef
$LN2@PyErr_Disp:

; 1943 :     }
; 1944 : }

  00157	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0015c	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00161	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00165	5f		 pop	 rdi
  00166	c3		 ret	 0
PyErr_Display ENDP
_TEXT	ENDS
EXTRN	PyErr_Restore:PROC
EXTRN	PyErr_Fetch:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$flush_io DD imagerel flush_io
	DD	imagerel flush_io+205
	DD	imagerel $unwind$flush_io
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$flush_io DD 020601H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT flush_io
_TEXT	SEGMENT
traceback$ = 48
value$ = 56
type$ = 64
flush_io PROC						; COMDAT

; 1988 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1989 :     PyObject *f, *r;
; 1990 :     PyObject *type, *value, *traceback;
; 1991 :     _Py_IDENTIFIER(flush);
; 1992 : 
; 1993 :     /* Save the current exception */
; 1994 :     PyErr_Fetch(&type, &value, &traceback);

  00006	4c 8d 44 24 30	 lea	 r8, QWORD PTR traceback$[rsp]
  0000b	48 8d 54 24 38	 lea	 rdx, QWORD PTR value$[rsp]
  00010	48 8d 4c 24 40	 lea	 rcx, QWORD PTR type$[rsp]
  00015	e8 00 00 00 00	 call	 PyErr_Fetch

; 1995 : 
; 1996 :     f = PySys_GetObject("stderr");

  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00021	e8 00 00 00 00	 call	 PySys_GetObject

; 1997 :     if (f != NULL) {

  00026	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:?PyId_flush@?1??flush_io@@9@9
  0002b	48 85 c0	 test	 rax, rax
  0002e	74 39		 je	 SHORT $LN4@flush_io

; 1998 :         r = _PyObject_CallMethodId(f, &PyId_flush, "");

  00030	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00037	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  00040	8b d7		 mov	 edx, edi
  00042	4a 03 14 c1	 add	 rdx, QWORD PTR [rcx+r8*8]
  00046	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 1999 :         if (r)

  00055	48 85 c0	 test	 rax, rax
  00058	74 0a		 je	 SHORT $LN5@flush_io

; 2000 :             Py_DECREF(r);

  0005a	48 8b c8	 mov	 rcx, rax
  0005d	e8 00 00 00 00	 call	 _Py_DecRef

; 2001 :         else

  00062	eb 05		 jmp	 SHORT $LN4@flush_io
$LN5@flush_io:

; 2002 :             PyErr_Clear();

  00064	e8 00 00 00 00	 call	 PyErr_Clear
$LN4@flush_io:

; 2003 :     }
; 2004 :     f = PySys_GetObject("stdout");

  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  00070	e8 00 00 00 00	 call	 PySys_GetObject

; 2005 :     if (f != NULL) {

  00075	48 85 c0	 test	 rax, rax
  00078	74 39		 je	 SHORT $LN1@flush_io

; 2006 :         r = _PyObject_CallMethodId(f, &PyId_flush, "");

  0007a	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR _tls_index
  00081	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  0008a	8b d7		 mov	 edx, edi
  0008c	4a 03 14 c9	 add	 rdx, QWORD PTR [rcx+r9*8]
  00090	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00097	48 8b c8	 mov	 rcx, rax
  0009a	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 2007 :         if (r)

  0009f	48 85 c0	 test	 rax, rax
  000a2	74 0a		 je	 SHORT $LN2@flush_io

; 2008 :             Py_DECREF(r);

  000a4	48 8b c8	 mov	 rcx, rax
  000a7	e8 00 00 00 00	 call	 _Py_DecRef

; 2009 :         else

  000ac	eb 05		 jmp	 SHORT $LN1@flush_io
$LN2@flush_io:

; 2010 :             PyErr_Clear();

  000ae	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@flush_io:

; 2011 :     }
; 2012 : 
; 2013 :     PyErr_Restore(type, value, traceback);

  000b3	4c 8b 44 24 30	 mov	 r8, QWORD PTR traceback$[rsp]
  000b8	48 8b 54 24 38	 mov	 rdx, QWORD PTR value$[rsp]
  000bd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  000c2	e8 00 00 00 00	 call	 PyErr_Restore

; 2014 : }

  000c7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cb	5f		 pop	 rdi
  000cc	c3		 ret	 0
flush_io ENDP
_TEXT	ENDS
EXTRN	PyEval_EvalCode:PROC
EXTRN	PyAST_CompileEx:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$run_mod DD imagerel run_mod
	DD	imagerel run_mod+113
	DD	imagerel $unwind$run_mod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$run_mod DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT run_mod
_TEXT	SEGMENT
mod$ = 64
filename$ = 72
globals$ = 80
locals$ = 88
flags$ = 96
arena$ = 104
run_mod	PROC						; COMDAT

; 2019 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2020 :     PyCodeObject *co;
; 2021 :     PyObject *v;
; 2022 :     co = PyAST_Compile(mod, filename, flags, arena);

  0000f	48 8b 44 24 68	 mov	 rax, QWORD PTR arena$[rsp]
  00014	49 8b f0	 mov	 rsi, r8
  00017	4c 8b 44 24 60	 mov	 r8, QWORD PTR flags$[rsp]
  0001c	49 8b d9	 mov	 rbx, r9
  0001f	41 83 c9 ff	 or	 r9d, -1
  00023	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00028	e8 00 00 00 00	 call	 PyAST_CompileEx
  0002d	48 8b f8	 mov	 rdi, rax

; 2023 :     if (co == NULL)

  00030	48 85 c0	 test	 rax, rax
  00033	75 10		 jne	 SHORT $LN1@run_mod

; 2027 :     return v;
; 2028 : }

  00035	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0003a	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0003f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
$LN1@run_mod:

; 2024 :         return NULL;
; 2025 :     v = PyEval_EvalCode((PyObject*)co, globals, locals);

  00045	4c 8b c3	 mov	 r8, rbx
  00048	48 8b d6	 mov	 rdx, rsi
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 PyEval_EvalCode

; 2026 :     Py_DECREF(co);

  00053	48 8b cf	 mov	 rcx, rdi
  00056	48 8b d8	 mov	 rbx, rax
  00059	e8 00 00 00 00	 call	 _Py_DecRef

; 2027 :     return v;
; 2028 : }

  0005e	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00063	48 8b c3	 mov	 rax, rbx
  00066	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0006b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
run_mod	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@HFJPDIJP@Bad?5code?5object?5in?5?4pyc?5file?$AA@ ; `string'
PUBLIC	??_C@_0BO@NCBNDPKB@Bad?5magic?5number?5in?5?4pyc?5file?$AA@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	PyCode_Type:BYTE
EXTRN	PyMarshal_ReadLastObjectFromFile:PROC
EXTRN	PyMarshal_ReadLongFromFile:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$run_pyc_file DD imagerel run_pyc_file
	DD	imagerel run_pyc_file+315
	DD	imagerel $unwind$run_pyc_file
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$run_pyc_file DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0c016521aH
xdata	ENDS
;	COMDAT ??_C@_0BN@HFJPDIJP@Bad?5code?5object?5in?5?4pyc?5file?$AA@
CONST	SEGMENT
??_C@_0BN@HFJPDIJP@Bad?5code?5object?5in?5?4pyc?5file?$AA@ DB 'Bad code o'
	DB	'bject in .pyc file', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NCBNDPKB@Bad?5magic?5number?5in?5?4pyc?5file?$AA@
CONST	SEGMENT
??_C@_0BO@NCBNDPKB@Bad?5magic?5number?5in?5?4pyc?5file?$AA@ DB 'Bad magic'
	DB	' number in .pyc file', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pythonrun.c
CONST	ENDS
;	COMDAT run_pyc_file
_TEXT	SEGMENT
fp$ = 64
globals$ = 72
locals$ = 80
flags$ = 88
run_pyc_file PROC					; COMDAT

; 2033 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0001a	49 8b f9	 mov	 rdi, r9
  0001d	49 8b e8	 mov	 rbp, r8
  00020	4c 8b e2	 mov	 r12, rdx
  00023	48 8b f1	 mov	 rsi, rcx

; 2034 :     PyCodeObject *co;
; 2035 :     PyObject *v;
; 2036 :     long magic;
; 2037 :     long PyImport_GetMagicNumber(void);
; 2038 : 
; 2039 :     magic = PyMarshal_ReadLongFromFile(fp);

  00026	e8 00 00 00 00	 call	 PyMarshal_ReadLongFromFile
  0002b	8b d8		 mov	 ebx, eax

; 2040 :     if (magic != PyImport_GetMagicNumber()) {

  0002d	e8 00 00 00 00	 call	 PyImport_GetMagicNumber
  00032	3b d8		 cmp	 ebx, eax
  00034	74 0c		 je	 SHORT $LN8@run_pyc_fi

; 2041 :         PyErr_SetString(PyExc_RuntimeError,
; 2042 :                    "Bad magic number in .pyc file");

  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@NCBNDPKB@Bad?5magic?5number?5in?5?4pyc?5file?$AA@

; 2043 :         return NULL;

  0003d	e9 d0 00 00 00	 jmp	 $LN22@run_pyc_fi
$LN8@run_pyc_fi:

; 2044 :     }
; 2045 :     /* Skip mtime and size */
; 2046 :     (void) PyMarshal_ReadLongFromFile(fp);

  00042	48 8b ce	 mov	 rcx, rsi
  00045	e8 00 00 00 00	 call	 PyMarshal_ReadLongFromFile

; 2047 :     (void) PyMarshal_ReadLongFromFile(fp);

  0004a	48 8b ce	 mov	 rcx, rsi
  0004d	e8 00 00 00 00	 call	 PyMarshal_ReadLongFromFile

; 2048 :     v = PyMarshal_ReadLastObjectFromFile(fp);

  00052	48 8b ce	 mov	 rcx, rsi
  00055	e8 00 00 00 00	 call	 PyMarshal_ReadLastObjectFromFile
  0005a	48 8b d8	 mov	 rbx, rax

; 2049 :     if (v == NULL || !PyCode_Check(v)) {

  0005d	48 85 c0	 test	 rax, rax
  00060	0f 84 a5 00 00
	00		 je	 $LN4@run_pyc_fi
  00066	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  0006d	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  00071	75 33		 jne	 SHORT $LN5@run_pyc_fi

; 2054 :     }
; 2055 :     co = (PyCodeObject *)v;
; 2056 :     v = PyEval_EvalCode((PyObject*)co, globals, locals);

  00073	4c 8b c5	 mov	 r8, rbp
  00076	49 8b d4	 mov	 rdx, r12
  00079	48 8b cb	 mov	 rcx, rbx
  0007c	e8 00 00 00 00	 call	 PyEval_EvalCode
  00081	48 8b f0	 mov	 rsi, rax

; 2057 :     if (v && flags)

  00084	48 85 c0	 test	 rax, rax
  00087	74 10		 je	 SHORT $LN1@run_pyc_fi
  00089	48 85 ff	 test	 rdi, rdi
  0008c	74 0b		 je	 SHORT $LN1@run_pyc_fi

; 2058 :         flags->cf_flags |= (co->co_flags & PyCF_MASK);

  0008e	8b 53 70	 mov	 edx, DWORD PTR [rbx+112]
  00091	81 e2 00 e0 07
	00		 and	 edx, 516096		; 0007e000H
  00097	09 17		 or	 DWORD PTR [rdi], edx
$LN1@run_pyc_fi:

; 2059 :     Py_DECREF(co);

  00099	48 8b cb	 mov	 rcx, rbx
  0009c	e8 00 00 00 00	 call	 _Py_DecRef

; 2060 :     return v;

  000a1	48 8b c6	 mov	 rax, rsi
  000a4	eb 7a		 jmp	 SHORT $LN9@run_pyc_fi
$LN5@run_pyc_fi:

; 2050 :         Py_XDECREF(v);

  000a6	e8 00 00 00 00	 call	 _Py_PXCTX
  000ab	85 c0		 test	 eax, eax
  000ad	75 5c		 jne	 SHORT $LN4@run_pyc_fi
  000af	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000b3	a8 20		 test	 al, 32			; 00000020H
  000b5	75 4c		 jne	 SHORT $LN15@run_pyc_fi
  000b7	84 c0		 test	 al, al
  000b9	78 48		 js	 SHORT $LN15@run_pyc_fi
  000bb	a8 02		 test	 al, 2
  000bd	75 4c		 jne	 SHORT $LN4@run_pyc_fi
  000bf	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000c3	75 46		 jne	 SHORT $LN4@run_pyc_fi
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000d3	4c 8b cb	 mov	 r9, rbx
  000d6	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000dc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e9	48 8b cb	 mov	 rcx, rbx
  000ec	85 c0		 test	 eax, eax
  000ee	74 07		 je	 SHORT $LN20@run_pyc_fi
  000f0	e8 00 00 00 00	 call	 _Px_Dealloc
  000f5	eb 14		 jmp	 SHORT $LN4@run_pyc_fi
$LN20@run_pyc_fi:
  000f7	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000fb	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00101	eb 08		 jmp	 SHORT $LN4@run_pyc_fi
$LN15@run_pyc_fi:
  00103	48 8b cb	 mov	 rcx, rbx
  00106	e8 00 00 00 00	 call	 Px_DecRef
$LN4@run_pyc_fi:

; 2051 :         PyErr_SetString(PyExc_RuntimeError,
; 2052 :                    "Bad code object in .pyc file");

  0010b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@HFJPDIJP@Bad?5code?5object?5in?5?4pyc?5file?$AA@
$LN22@run_pyc_fi:
  00112	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00119	e8 00 00 00 00	 call	 PyErr_SetString

; 2053 :         return NULL;

  0011e	33 c0		 xor	 eax, eax
$LN9@run_pyc_fi:

; 2061 : }

  00120	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00125	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0012a	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0012f	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  00134	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00138	41 5c		 pop	 r12
  0013a	c3		 ret	 0
run_pyc_file ENDP
_TEXT	ENDS
PUBLIC	??_C@_08OGIKLOKE@err_free?$AA@			; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$err_free DD imagerel err_free
	DD	imagerel err_free+63
	DD	imagerel $unwind$err_free
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$err_free DD imagerel err_free+63
	DD	imagerel err_free+169
	DD	imagerel $chain$0$err_free
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$err_free DD imagerel err_free+169
	DD	imagerel err_free+190
	DD	imagerel $chain$2$err_free
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$err_free DD imagerel err_free+190
	DD	imagerel err_free+203
	DD	imagerel $chain$4$err_free
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$err_free DD imagerel err_free+203
	DD	imagerel err_free+209
	DD	imagerel $chain$5$err_free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$err_free DD 021H
	DD	imagerel err_free
	DD	imagerel err_free+63
	DD	imagerel $unwind$err_free
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$err_free DD 020021H
	DD	083400H
	DD	imagerel err_free
	DD	imagerel err_free+63
	DD	imagerel $unwind$err_free
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$err_free DD 020021H
	DD	083400H
	DD	imagerel err_free
	DD	imagerel err_free+63
	DD	imagerel $unwind$err_free
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$err_free DD 020521H
	DD	083405H
	DD	imagerel err_free
	DD	imagerel err_free+63
	DD	imagerel $unwind$err_free
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$err_free DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_08OGIKLOKE@err_free?$AA@
CONST	SEGMENT
??_C@_08OGIKLOKE@err_free?$AA@ DB 'err_free', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pythonrun.c
CONST	ENDS
;	COMDAT err_free
_TEXT	SEGMENT
err$ = 64
err_free PROC						; COMDAT

; 2246 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2247 :     Py_CLEAR(err->filename);

  00006	4c 8b 49 08	 mov	 r9, QWORD PTR [rcx+8]
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	4d 85 c9	 test	 r9, r9
  00010	0f 84 b5 00 00
	00		 je	 $LN3@err_free
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OGIKLOKE@err_free?$AA@
  00024	41 b8 c7 08 00
	00		 mov	 r8d, 2247		; 000008c7H
  0002a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00032	e8 00 00 00 00	 call	 _PyParallel_Guard
  00037	85 c0		 test	 eax, eax
  00039	0f 85 8c 00 00
	00		 jne	 $LN3@err_free
  0003f	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00044	48 8b 5f 08	 mov	 rbx, QWORD PTR [rdi+8]
  00048	48 c7 47 08 00
	00 00 00	 mov	 QWORD PTR [rdi+8], 0
  00050	e8 00 00 00 00	 call	 _Py_PXCTX
  00055	85 c0		 test	 eax, eax
  00057	75 6d		 jne	 SHORT $LN18@err_free
  00059	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0005d	a8 20		 test	 al, 32			; 00000020H
  0005f	75 5d		 jne	 SHORT $LN11@err_free
  00061	84 c0		 test	 al, al
  00063	78 59		 js	 SHORT $LN11@err_free
  00065	a8 02		 test	 al, 2
  00067	75 5d		 jne	 SHORT $LN18@err_free
  00069	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0006d	75 57		 jne	 SHORT $LN18@err_free
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0007d	4c 8b cb	 mov	 r9, rbx
  00080	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00086	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00093	48 8b cb	 mov	 rcx, rbx
  00096	85 c0		 test	 eax, eax
  00098	74 0f		 je	 SHORT $LN16@err_free
  0009a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 2248 : }

  0009f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a3	5f		 pop	 rdi
  000a4	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 2247 :     Py_CLEAR(err->filename);

$LN16@err_free:
  000a9	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000ad	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 2248 : }

  000b2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b6	5f		 pop	 rdi
  000b7	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 2247 :     Py_CLEAR(err->filename);

$LN11@err_free:
  000be	48 8b cb	 mov	 rcx, rbx
  000c1	e8 00 00 00 00	 call	 Px_DecRef
$LN18@err_free:
  000c6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN3@err_free:

; 2248 : }

  000cb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cf	5f		 pop	 rdi
  000d0	c3		 ret	 0
err_free ENDP
_TEXT	ENDS
PUBLIC	??_C@_04IOGGDGED@?$CIsO?$CJ?$AA@		; `string'
PUBLIC	??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@		; `string'
PUBLIC	??_C@_06IMIBHNFH@?$CIOiiN?$CJ?$AA@		; `string'
PUBLIC	??_C@_07CLEHDIEJ@replace?$AA@			; `string'
PUBLIC	??_C@_0BG@BPGIPGPD@unknown?5parsing?5error?$AA@	; `string'
PUBLIC	??_C@_09FLODBNII@error?$DN?$CFd?6?$AA@		; `string'
PUBLIC	??_C@_0DN@BMNJCEJJ@multiple?5statements?5found?5while?5@ ; `string'
PUBLIC	??_C@_0CA@MBMGHOGA@invalid?5character?5in?5identifier?$AA@ ; `string'
PUBLIC	??_C@_0DH@CDIGDJHN@unexpected?5character?5after?5line?5@ ; `string'
PUBLIC	??_C@_0BF@GCGCDMBJ@unknown?5decode?5error?$AA@	; `string'
PUBLIC	??_C@_0BP@PIBOEKAB@too?5many?5levels?5of?5indentation?$AA@ ; `string'
PUBLIC	??_C@_0DE@DEIKPMIL@unindent?5does?5not?5match?5any?5oute@ ; `string'
PUBLIC	??_C@_0BE@CJOHKGGD@expression?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0DD@GEHBOAJA@inconsistent?5use?5of?5tabs?5and?5spa@ ; `string'
PUBLIC	??_C@_0BN@PKHPGBNI@unexpected?5EOF?5while?5parsing?$AA@ ; `string'
PUBLIC	??_C@_0CC@NOHDFAMP@EOL?5while?5scanning?5string?5litera@ ; `string'
PUBLIC	??_C@_0DA@JEABMMDJ@EOF?5while?5scanning?5triple?9quoted@ ; `string'
PUBLIC	??_C@_0O@NAGEJJCE@invalid?5token?$AA@		; `string'
PUBLIC	??_C@_0P@OAAEFEAJ@invalid?5syntax?$AA@		; `string'
PUBLIC	??_C@_0BE@GLFMJNCN@unexpected?5unindent?$AA@	; `string'
PUBLIC	??_C@_0BC@GPEJPPAM@unexpected?5indent?$AA@	; `string'
PUBLIC	??_C@_0BL@KKHMBMMH@expected?5an?5indented?5block?$AA@ ; `string'
EXTRN	PyObject_Free:PROC
EXTRN	PyErr_SetObject:PROC
EXTRN	Py_BuildValue:PROC
EXTRN	PyUnicode_DecodeUTF8:PROC
EXTRN	PyExc_TabError:QWORD
EXTRN	PyErr_SetNone:PROC
EXTRN	PyExc_KeyboardInterrupt:QWORD
EXTRN	PyExc_IndentationError:QWORD
EXTRN	__ImageBase:BYTE
EXTRN	PyExc_SyntaxError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$err_input DD imagerel err_input
	DD	imagerel err_input+479
	DD	imagerel $unwind$err_input
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$err_input DD imagerel err_input+479
	DD	imagerel err_input+865
	DD	imagerel $chain$0$err_input
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$err_input DD imagerel err_input+865
	DD	imagerel err_input+1180
	DD	imagerel $chain$1$err_input
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$err_input DD 021H
	DD	imagerel err_input
	DD	imagerel err_input+479
	DD	imagerel $unwind$err_input
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$err_input DD 020521H
	DD	066405H
	DD	imagerel err_input
	DD	imagerel err_input+479
	DD	imagerel $unwind$err_input
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$err_input DD 070e01H
	DD	0e00a620eH
	DD	0c006d008H
	DD	050037004H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_04IOGGDGED@?$CIsO?$CJ?$AA@
CONST	SEGMENT
??_C@_04IOGGDGED@?$CIsO?$CJ?$AA@ DB '(sO)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@
CONST	SEGMENT
??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@ DB '(OO)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IMIBHNFH@?$CIOiiN?$CJ?$AA@
CONST	SEGMENT
??_C@_06IMIBHNFH@?$CIOiiN?$CJ?$AA@ DB '(OiiN)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CLEHDIEJ@replace?$AA@
CONST	SEGMENT
??_C@_07CLEHDIEJ@replace?$AA@ DB 'replace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BPGIPGPD@unknown?5parsing?5error?$AA@
CONST	SEGMENT
??_C@_0BG@BPGIPGPD@unknown?5parsing?5error?$AA@ DB 'unknown parsing error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09FLODBNII@error?$DN?$CFd?6?$AA@
CONST	SEGMENT
??_C@_09FLODBNII@error?$DN?$CFd?6?$AA@ DB 'error=%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@BMNJCEJJ@multiple?5statements?5found?5while?5@
CONST	SEGMENT
??_C@_0DN@BMNJCEJJ@multiple?5statements?5found?5while?5@ DB 'multiple sta'
	DB	'tements found while compiling a single statement', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MBMGHOGA@invalid?5character?5in?5identifier?$AA@
CONST	SEGMENT
??_C@_0CA@MBMGHOGA@invalid?5character?5in?5identifier?$AA@ DB 'invalid ch'
	DB	'aracter in identifier', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@CDIGDJHN@unexpected?5character?5after?5line?5@
CONST	SEGMENT
??_C@_0DH@CDIGDJHN@unexpected?5character?5after?5line?5@ DB 'unexpected c'
	DB	'haracter after line continuation character', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GCGCDMBJ@unknown?5decode?5error?$AA@
CONST	SEGMENT
??_C@_0BF@GCGCDMBJ@unknown?5decode?5error?$AA@ DB 'unknown decode error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PIBOEKAB@too?5many?5levels?5of?5indentation?$AA@
CONST	SEGMENT
??_C@_0BP@PIBOEKAB@too?5many?5levels?5of?5indentation?$AA@ DB 'too many l'
	DB	'evels of indentation', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@DEIKPMIL@unindent?5does?5not?5match?5any?5oute@
CONST	SEGMENT
??_C@_0DE@DEIKPMIL@unindent?5does?5not?5match?5any?5oute@ DB 'unindent do'
	DB	'es not match any outer indentation level', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CJOHKGGD@expression?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@CJOHKGGD@expression?5too?5long?$AA@ DB 'expression too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GEHBOAJA@inconsistent?5use?5of?5tabs?5and?5spa@
CONST	SEGMENT
??_C@_0DD@GEHBOAJA@inconsistent?5use?5of?5tabs?5and?5spa@ DB 'inconsisten'
	DB	't use of tabs and spaces in indentation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PKHPGBNI@unexpected?5EOF?5while?5parsing?$AA@
CONST	SEGMENT
??_C@_0BN@PKHPGBNI@unexpected?5EOF?5while?5parsing?$AA@ DB 'unexpected EO'
	DB	'F while parsing', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NOHDFAMP@EOL?5while?5scanning?5string?5litera@
CONST	SEGMENT
??_C@_0CC@NOHDFAMP@EOL?5while?5scanning?5string?5litera@ DB 'EOL while sc'
	DB	'anning string literal', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@JEABMMDJ@EOF?5while?5scanning?5triple?9quoted@
CONST	SEGMENT
??_C@_0DA@JEABMMDJ@EOF?5while?5scanning?5triple?9quoted@ DB 'EOF while sc'
	DB	'anning triple-quoted string literal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NAGEJJCE@invalid?5token?$AA@
CONST	SEGMENT
??_C@_0O@NAGEJJCE@invalid?5token?$AA@ DB 'invalid token', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OAAEFEAJ@invalid?5syntax?$AA@
CONST	SEGMENT
??_C@_0P@OAAEFEAJ@invalid?5syntax?$AA@ DB 'invalid syntax', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GLFMJNCN@unexpected?5unindent?$AA@
CONST	SEGMENT
??_C@_0BE@GLFMJNCN@unexpected?5unindent?$AA@ DB 'unexpected unindent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GPEJPPAM@unexpected?5indent?$AA@
CONST	SEGMENT
??_C@_0BC@GPEJPPAM@unexpected?5indent?$AA@ DB 'unexpected indent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KKHMBMMH@expected?5an?5indented?5block?$AA@
CONST	SEGMENT
??_C@_0BL@KKHMBMMH@expected?5an?5indented?5block?$AA@ DB 'expected an ind'
	DB	'ented block', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pythonrun.c
CONST	ENDS
;	COMDAT err_input
_TEXT	SEGMENT
value$123524 = 112
err$ = 112
type$123523 = 120
tb$123525 = 128
err_input PROC						; COMDAT

; 2254 : {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	57		 push	 rdi
  00004	41 54		 push	 r12
  00006	41 55		 push	 r13
  00008	41 56		 push	 r14
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2255 :     PyObject *v, *w, *errtype, *errtext;
; 2256 :     PyObject *msg_obj = NULL;
; 2257 :     char *msg = NULL;
; 2258 :     int offset = err->offset;
; 2259 : 
; 2260 :     errtype = PyExc_SyntaxError;
; 2261 :     switch (err->error) {

  0000e	8b 39		 mov	 edi, DWORD PTR [rcx]
  00010	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_SyntaxError
  00017	44 8b 71 14	 mov	 r14d, DWORD PTR [rcx+20]
  0001b	8d 47 f5	 lea	 eax, DWORD PTR [rdi-11]
  0001e	33 ed		 xor	 ebp, ebp
  00020	4c 8b e1	 mov	 r12, rcx
  00023	4c 8b ea	 mov	 r13, rdx
  00026	83 f8 10	 cmp	 eax, 16
  00029	0f 87 8a 01 00
	00		 ja	 $LN22@err_input
  0002f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:__ImageBase
  00036	48 98		 cdqe
  00038	41 8b 8c 80 00
	00 00 00	 mov	 ecx, DWORD PTR $LN100@err_input[r8+rax*4]
  00040	49 03 c8	 add	 rcx, r8
  00043	ff e1		 jmp	 rcx
$LN57@err_input:

; 2262 :     case E_ERROR:
; 2263 :         return;
; 2264 :     case E_SYNTAX:
; 2265 :         errtype = PyExc_IndentationError;
; 2266 :         if (err->expected == INDENT)

  00045	41 83 7c 24 24
	05		 cmp	 DWORD PTR [r12+36], 5
  0004b	4c 8b 2d 00 00
	00 00		 mov	 r13, QWORD PTR PyExc_IndentationError
  00052	75 0c		 jne	 SHORT $LN56@err_input

; 2267 :             msg = "expected an indented block";

  00054	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0BL@KKHMBMMH@expected?5an?5indented?5block?$AA@
  0005b	e9 7a 01 00 00	 jmp	 $LN59@err_input
$LN56@err_input:

; 2268 :         else if (err->token == INDENT)

  00060	41 8b 44 24 20	 mov	 eax, DWORD PTR [r12+32]
  00065	83 f8 05	 cmp	 eax, 5
  00068	75 0c		 jne	 SHORT $LN54@err_input

; 2269 :             msg = "unexpected indent";

  0006a	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0BC@GPEJPPAM@unexpected?5indent?$AA@
  00071	e9 64 01 00 00	 jmp	 $LN59@err_input
$LN54@err_input:

; 2270 :         else if (err->token == DEDENT)

  00076	83 f8 06	 cmp	 eax, 6
  00079	75 0c		 jne	 SHORT $LN52@err_input

; 2271 :             msg = "unexpected unindent";

  0007b	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0BE@GLFMJNCN@unexpected?5unindent?$AA@

; 2272 :         else {

  00082	e9 53 01 00 00	 jmp	 $LN59@err_input
$LN52@err_input:

; 2273 :             errtype = PyExc_SyntaxError;

  00087	4c 8b ea	 mov	 r13, rdx

; 2274 :             msg = "invalid syntax";

  0008a	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0P@OAAEFEAJ@invalid?5syntax?$AA@

; 2275 :         }
; 2276 :         break;

  00091	e9 44 01 00 00	 jmp	 $LN59@err_input
$LN50@err_input:

; 2277 :     case E_TOKEN:
; 2278 :         msg = "invalid token";

  00096	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0O@NAGEJJCE@invalid?5token?$AA@

; 2279 :         break;

  0009d	e9 38 01 00 00	 jmp	 $LN59@err_input
$LN49@err_input:

; 2280 :     case E_EOFS:
; 2281 :         msg = "EOF while scanning triple-quoted string literal";

  000a2	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0DA@JEABMMDJ@EOF?5while?5scanning?5triple?9quoted@

; 2282 :         break;

  000a9	e9 2c 01 00 00	 jmp	 $LN59@err_input
$LN48@err_input:

; 2283 :     case E_EOLS:
; 2284 :         msg = "EOL while scanning string literal";

  000ae	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0CC@NOHDFAMP@EOL?5while?5scanning?5string?5litera@

; 2285 :         break;

  000b5	e9 20 01 00 00	 jmp	 $LN59@err_input
$LN47@err_input:

; 2286 :     case E_INTR:
; 2287 :         if (!PyErr_Occurred())

  000ba	e8 00 00 00 00	 call	 PyErr_Occurred
  000bf	48 85 c0	 test	 rax, rax
  000c2	0f 85 68 03 00
	00		 jne	 $LN4@err_input

; 2288 :             PyErr_SetNone(PyExc_KeyboardInterrupt);

  000c8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyboardInterrupt
  000cf	e8 00 00 00 00	 call	 PyErr_SetNone

; 2289 :         goto cleanup;

  000d4	e9 57 03 00 00	 jmp	 $LN4@err_input
$LN45@err_input:

; 2290 :     case E_NOMEM:
; 2291 :         PyErr_NoMemory();

  000d9	e8 00 00 00 00	 call	 PyErr_NoMemory

; 2292 :         goto cleanup;

  000de	e9 4d 03 00 00	 jmp	 $LN4@err_input
$LN44@err_input:

; 2293 :     case E_EOF:
; 2294 :         msg = "unexpected EOF while parsing";

  000e3	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0BN@PKHPGBNI@unexpected?5EOF?5while?5parsing?$AA@

; 2295 :         break;

  000ea	e9 eb 00 00 00	 jmp	 $LN59@err_input
$LN43@err_input:

; 2296 :     case E_TABSPACE:
; 2297 :         errtype = PyExc_TabError;

  000ef	4c 8b 2d 00 00
	00 00		 mov	 r13, QWORD PTR PyExc_TabError

; 2298 :         msg = "inconsistent use of tabs and spaces in indentation";

  000f6	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0DD@GEHBOAJA@inconsistent?5use?5of?5tabs?5and?5spa@

; 2299 :         break;

  000fd	e9 d8 00 00 00	 jmp	 $LN59@err_input
$LN42@err_input:

; 2300 :     case E_OVERFLOW:
; 2301 :         msg = "expression too long";

  00102	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0BE@CJOHKGGD@expression?5too?5long?$AA@

; 2302 :         break;

  00109	e9 cc 00 00 00	 jmp	 $LN59@err_input
$LN41@err_input:

; 2303 :     case E_DEDENT:
; 2304 :         errtype = PyExc_IndentationError;

  0010e	4c 8b 2d 00 00
	00 00		 mov	 r13, QWORD PTR PyExc_IndentationError

; 2305 :         msg = "unindent does not match any outer indentation level";

  00115	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0DE@DEIKPMIL@unindent?5does?5not?5match?5any?5oute@

; 2306 :         break;

  0011c	e9 b9 00 00 00	 jmp	 $LN59@err_input
$LN40@err_input:

; 2307 :     case E_TOODEEP:
; 2308 :         errtype = PyExc_IndentationError;

  00121	4c 8b 2d 00 00
	00 00		 mov	 r13, QWORD PTR PyExc_IndentationError

; 2309 :         msg = "too many levels of indentation";

  00128	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0BP@PIBOEKAB@too?5many?5levels?5of?5indentation?$AA@

; 2310 :         break;

  0012f	e9 a6 00 00 00	 jmp	 $LN59@err_input
$LN39@err_input:

; 2311 :     case E_DECODE: {
; 2312 :         PyObject *type, *value, *tb;
; 2313 :         PyErr_Fetch(&type, &value, &tb);

  00134	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR tb$123525[rsp]
  0013c	48 8d 54 24 70	 lea	 rdx, QWORD PTR value$123524[rsp]
  00141	48 8d 4c 24 78	 lea	 rcx, QWORD PTR type$123523[rsp]
  00146	e8 00 00 00 00	 call	 PyErr_Fetch

; 2314 :         msg = "unknown decode error";
; 2315 :         if (value != NULL)

  0014b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR value$123524[rsp]
  00150	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0BF@GCGCDMBJ@unknown?5decode?5error?$AA@
  00157	48 85 c9	 test	 rcx, rcx
  0015a	74 0d		 je	 SHORT $LN37@err_input

; 2316 :             msg_obj = PyObject_Str(value);

  0015c	e8 00 00 00 00	 call	 PyObject_Str
  00161	48 8b 4c 24 70	 mov	 rcx, QWORD PTR value$123524[rsp]
  00166	48 8b e8	 mov	 rbp, rax
$LN37@err_input:

; 2317 :         Py_XDECREF(type);

  00169	48 8b 44 24 78	 mov	 rax, QWORD PTR type$123523[rsp]
  0016e	48 85 c0	 test	 rax, rax
  00171	74 0d		 je	 SHORT $LN36@err_input
  00173	48 8b c8	 mov	 rcx, rax
  00176	e8 00 00 00 00	 call	 _Py_DecRef
  0017b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR value$123524[rsp]
$LN36@err_input:

; 2318 :         Py_XDECREF(value);

  00180	48 85 c9	 test	 rcx, rcx
  00183	74 05		 je	 SHORT $LN32@err_input
  00185	e8 00 00 00 00	 call	 _Py_DecRef
$LN32@err_input:

; 2319 :         Py_XDECREF(tb);

  0018a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tb$123525[rsp]
  00192	48 85 c9	 test	 rcx, rcx
  00195	74 43		 je	 SHORT $LN59@err_input
  00197	e8 00 00 00 00	 call	 _Py_DecRef

; 2320 :         break;

  0019c	eb 3c		 jmp	 SHORT $LN59@err_input
$LN25@err_input:

; 2321 :     }
; 2322 :     case E_LINECONT:
; 2323 :         msg = "unexpected character after line continuation character";

  0019e	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0DH@CDIGDJHN@unexpected?5character?5after?5line?5@

; 2324 :         break;

  001a5	eb 33		 jmp	 SHORT $LN59@err_input
$LN24@err_input:

; 2325 : 
; 2326 :     case E_IDENTIFIER:
; 2327 :         msg = "invalid character in identifier";

  001a7	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0CA@MBMGHOGA@invalid?5character?5in?5identifier?$AA@

; 2328 :         break;

  001ae	eb 2a		 jmp	 SHORT $LN59@err_input
$LN23@err_input:

; 2329 :     case E_BADSINGLE:
; 2330 :         msg = "multiple statements found while compiling a single statement";

  001b0	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0DN@BMNJCEJJ@multiple?5statements?5found?5while?5@

; 2331 :         break;

  001b7	eb 21		 jmp	 SHORT $LN59@err_input
$LN22@err_input:

; 2332 :     default:
; 2333 :         fprintf(stderr, "error=%d\n", err->error);

  001b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  001bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09FLODBNII@error?$DN?$CFd?6?$AA@
  001c6	44 8b c7	 mov	 r8d, edi
  001c9	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  001cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 2334 :         msg = "unknown parsing error";

  001d3	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_C@_0BG@BPGIPGPD@unknown?5parsing?5error?$AA@
$LN59@err_input:

; 2335 :         break;
; 2336 :     }
; 2337 :     /* err->text may not be UTF-8 in case of decoding errors.
; 2338 :        Explicitly convert to an object. */
; 2339 :     if (!err->text) {

  001da	49 8b 4c 24 18	 mov	 rcx, QWORD PTR [r12+24]
  001df	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  001e4	48 85 c9	 test	 rcx, rcx
  001e7	75 4e		 jne	 SHORT $LN21@err_input

; 2340 :         errtext = Py_None;

  001e9	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct

; 2341 :         Py_INCREF(Py_None);

  001f0	e8 00 00 00 00	 call	 _Py_PXCTX
  001f5	85 c0		 test	 eax, eax
  001f7	0f 85 96 00 00
	00		 jne	 $LN18@err_input
  001fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00204	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0020b	4c 8b ce	 mov	 r9, rsi
  0020e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00214	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0021c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00221	85 c0		 test	 eax, eax
  00223	75 09		 jne	 SHORT $LN63@err_input
  00225	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0022c	74 65		 je	 SHORT $LN18@err_input
$LN63@err_input:
  0022e	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80

; 2342 :     } else {

  00235	eb 5c		 jmp	 SHORT $LN18@err_input
$LN21@err_input:

; 2343 :         errtext = PyUnicode_DecodeUTF8(err->text, err->offset,
; 2344 :                                        "replace");

  00237	49 63 54 24 14	 movsxd	 rdx, DWORD PTR [r12+20]
  0023c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07CLEHDIEJ@replace?$AA@
  00243	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF8
  00248	48 8b f0	 mov	 rsi, rax

; 2345 :         if (errtext != NULL) {

  0024b	48 85 c0	 test	 rax, rax
  0024e	74 43		 je	 SHORT $LN18@err_input

; 2346 :             Py_ssize_t len = strlen(err->text);

  00250	49 8b 7c 24 18	 mov	 rdi, QWORD PTR [r12+24]

; 2347 :             offset = (int)PyUnicode_GET_LENGTH(errtext);
; 2348 :             if (len != err->offset) {

  00255	49 63 54 24 14	 movsxd	 rdx, DWORD PTR [r12+20]
  0025a	44 8b 76 60	 mov	 r14d, DWORD PTR [rsi+96]
  0025e	48 83 c9 ff	 or	 rcx, -1
  00262	33 c0		 xor	 eax, eax
  00264	f2 ae		 repne scasb
  00266	48 f7 d1	 not	 rcx
  00269	48 ff c9	 dec	 rcx
  0026c	48 8b f9	 mov	 rdi, rcx
  0026f	48 3b ca	 cmp	 rcx, rdx
  00272	74 1f		 je	 SHORT $LN18@err_input

; 2349 :                 Py_DECREF(errtext);

  00274	48 8b ce	 mov	 rcx, rsi
  00277	e8 00 00 00 00	 call	 _Py_DecRef

; 2350 :                 errtext = PyUnicode_DecodeUTF8(err->text, len,
; 2351 :                                                "replace");

  0027c	49 8b 4c 24 18	 mov	 rcx, QWORD PTR [r12+24]
  00281	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07CLEHDIEJ@replace?$AA@
  00288	48 8b d7	 mov	 rdx, rdi
  0028b	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF8
  00290	48 8b f0	 mov	 rsi, rax
$LN18@err_input:

; 2352 :             }
; 2353 :         }
; 2354 :     }
; 2355 :     v = Py_BuildValue("(OiiN)", err->filename,
; 2356 :                       err->lineno, offset, errtext);

  00293	45 8b 44 24 10	 mov	 r8d, DWORD PTR [r12+16]
  00298	49 8b 54 24 08	 mov	 rdx, QWORD PTR [r12+8]
  0029d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IMIBHNFH@?$CIOiiN?$CJ?$AA@
  002a4	45 8b ce	 mov	 r9d, r14d
  002a7	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  002ac	e8 00 00 00 00	 call	 Py_BuildValue
  002b1	48 8b f0	 mov	 rsi, rax

; 2357 :     if (v != NULL) {

  002b4	48 85 c0	 test	 rax, rax
  002b7	0f 84 8d 00 00
	00		 je	 $LN17@err_input

; 2358 :         if (msg_obj)
; 2359 :             w = Py_BuildValue("(OO)", msg_obj, v);

  002bd	4c 8b c0	 mov	 r8, rax
  002c0	48 85 ed	 test	 rbp, rbp
  002c3	74 0c		 je	 SHORT $LN16@err_input
  002c5	48 8b d5	 mov	 rdx, rbp
  002c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@

; 2360 :         else

  002cf	eb 0a		 jmp	 SHORT $LN101@err_input
$LN16@err_input:

; 2361 :             w = Py_BuildValue("(sO)", msg, v);

  002d1	48 8b d3	 mov	 rdx, rbx
  002d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IOGGDGED@?$CIsO?$CJ?$AA@
$LN101@err_input:
  002db	e8 00 00 00 00	 call	 Py_BuildValue
  002e0	48 8b f8	 mov	 rdi, rax

; 2364 :     Py_XDECREF(v);

  002e3	e8 00 00 00 00	 call	 _Py_PXCTX
  002e8	85 c0		 test	 eax, eax
  002ea	75 60		 jne	 SHORT $LN12@err_input
  002ec	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  002f0	a8 20		 test	 al, 32			; 00000020H
  002f2	75 4c		 jne	 SHORT $LN71@err_input
  002f4	84 c0		 test	 al, al
  002f6	78 48		 js	 SHORT $LN71@err_input
  002f8	a8 02		 test	 al, 2
  002fa	75 50		 jne	 SHORT $LN12@err_input
  002fc	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  00300	75 4a		 jne	 SHORT $LN12@err_input
  00302	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00309	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00310	4c 8b ce	 mov	 r9, rsi
  00313	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00319	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00321	e8 00 00 00 00	 call	 _PyParallel_Guard
  00326	48 8b ce	 mov	 rcx, rsi
  00329	85 c0		 test	 eax, eax
  0032b	74 07		 je	 SHORT $LN76@err_input
  0032d	e8 00 00 00 00	 call	 _Px_Dealloc
  00332	eb 18		 jmp	 SHORT $LN12@err_input
$LN76@err_input:
  00334	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  00338	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0033e	eb 0c		 jmp	 SHORT $LN12@err_input
$LN71@err_input:
  00340	48 8b ce	 mov	 rcx, rsi
  00343	e8 00 00 00 00	 call	 Px_DecRef
  00348	eb 02		 jmp	 SHORT $LN12@err_input
$LN17@err_input:

; 2362 :     } else
; 2363 :         w = NULL;

  0034a	33 ff		 xor	 edi, edi
$LN12@err_input:

; 2365 :     PyErr_SetObject(errtype, w);

  0034c	48 8b d7	 mov	 rdx, rdi
  0034f	49 8b cd	 mov	 rcx, r13
  00352	e8 00 00 00 00	 call	 PyErr_SetObject
  00357	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 2366 :     Py_XDECREF(w);

  0035c	48 85 ff	 test	 rdi, rdi
  0035f	74 65		 je	 SHORT $LN8@err_input
  00361	e8 00 00 00 00	 call	 _Py_PXCTX
  00366	85 c0		 test	 eax, eax
  00368	75 5c		 jne	 SHORT $LN8@err_input
  0036a	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0036e	a8 20		 test	 al, 32			; 00000020H
  00370	75 4c		 jne	 SHORT $LN82@err_input
  00372	84 c0		 test	 al, al
  00374	78 48		 js	 SHORT $LN82@err_input
  00376	a8 02		 test	 al, 2
  00378	75 4c		 jne	 SHORT $LN8@err_input
  0037a	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0037e	75 46		 jne	 SHORT $LN8@err_input
  00380	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00387	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0038e	4c 8b cf	 mov	 r9, rdi
  00391	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00397	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0039f	e8 00 00 00 00	 call	 _PyParallel_Guard
  003a4	48 8b cf	 mov	 rcx, rdi
  003a7	85 c0		 test	 eax, eax
  003a9	74 07		 je	 SHORT $LN87@err_input
  003ab	e8 00 00 00 00	 call	 _Px_Dealloc
  003b0	eb 14		 jmp	 SHORT $LN8@err_input
$LN87@err_input:
  003b2	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  003b6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003bc	eb 08		 jmp	 SHORT $LN8@err_input
$LN82@err_input:
  003be	48 8b cf	 mov	 rcx, rdi
  003c1	e8 00 00 00 00	 call	 Px_DecRef
$LN8@err_input:
$cleanup$123510:

; 2367 : cleanup:
; 2368 :     Py_XDECREF(msg_obj);

  003c6	48 85 ed	 test	 rbp, rbp
  003c9	74 65		 je	 SHORT $LN4@err_input
  003cb	e8 00 00 00 00	 call	 _Py_PXCTX
  003d0	85 c0		 test	 eax, eax
  003d2	75 5c		 jne	 SHORT $LN4@err_input
  003d4	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  003d8	a8 20		 test	 al, 32			; 00000020H
  003da	75 4c		 jne	 SHORT $LN93@err_input
  003dc	84 c0		 test	 al, al
  003de	78 48		 js	 SHORT $LN93@err_input
  003e0	a8 02		 test	 al, 2
  003e2	75 4c		 jne	 SHORT $LN4@err_input
  003e4	48 ff 4d 50	 dec	 QWORD PTR [rbp+80]
  003e8	75 46		 jne	 SHORT $LN4@err_input
  003ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  003f8	4c 8b cd	 mov	 r9, rbp
  003fb	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00401	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00409	e8 00 00 00 00	 call	 _PyParallel_Guard
  0040e	48 8b cd	 mov	 rcx, rbp
  00411	85 c0		 test	 eax, eax
  00413	74 07		 je	 SHORT $LN98@err_input
  00415	e8 00 00 00 00	 call	 _Px_Dealloc
  0041a	eb 14		 jmp	 SHORT $LN4@err_input
$LN98@err_input:
  0041c	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  00420	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00426	eb 08		 jmp	 SHORT $LN4@err_input
$LN93@err_input:
  00428	48 8b cd	 mov	 rcx, rbp
  0042b	e8 00 00 00 00	 call	 Px_DecRef
$LN4@err_input:

; 2369 :     if (err->text != NULL) {

  00430	49 8b 4c 24 18	 mov	 rcx, QWORD PTR [r12+24]
  00435	48 85 c9	 test	 rcx, rcx
  00438	74 0e		 je	 SHORT $LN1@err_input

; 2370 :         PyObject_FREE(err->text);

  0043a	e8 00 00 00 00	 call	 PyObject_Free

; 2371 :         err->text = NULL;

  0043f	49 c7 44 24 18
	00 00 00 00	 mov	 QWORD PTR [r12+24], 0
$LN1@err_input:

; 2372 :     }
; 2373 : }

  00448	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0044c	41 5e		 pop	 r14
  0044e	41 5d		 pop	 r13
  00450	41 5c		 pop	 r12
  00452	5f		 pop	 rdi
  00453	5d		 pop	 rbp
  00454	5b		 pop	 rbx
  00455	c3		 ret	 0
  00456	66 90		 npad	 2
$LN100@err_input:
  00458	00 00 00 00	 DD	 $LN44@err_input
  0045c	00 00 00 00	 DD	 $LN47@err_input
  00460	00 00 00 00	 DD	 $LN50@err_input
  00464	00 00 00 00	 DD	 $LN57@err_input
  00468	00 00 00 00	 DD	 $LN45@err_input
  0046c	00 00 00 00	 DD	 $LN22@err_input
  00470	00 00 00 00	 DD	 $LN1@err_input
  00474	00 00 00 00	 DD	 $LN43@err_input
  00478	00 00 00 00	 DD	 $LN42@err_input
  0047c	00 00 00 00	 DD	 $LN40@err_input
  00480	00 00 00 00	 DD	 $LN41@err_input
  00484	00 00 00 00	 DD	 $LN39@err_input
  00488	00 00 00 00	 DD	 $LN49@err_input
  0048c	00 00 00 00	 DD	 $LN48@err_input
  00490	00 00 00 00	 DD	 $LN25@err_input
  00494	00 00 00 00	 DD	 $LN24@err_input
  00498	00 00 00 00	 DD	 $LN23@err_input
err_input ENDP
_TEXT	ENDS
PUBLIC	_Py_PyAtExit
; Function compile flags: /Ogtpy
;	COMDAT _Py_PyAtExit
_TEXT	SEGMENT
func$ = 8
_Py_PyAtExit PROC					; COMDAT

; 2431 :     pyexitfunc = func;

  00000	48 89 0d 00 00
	00 00		 mov	 QWORD PTR pyexitfunc, rcx

; 2432 : }

  00007	c3		 ret	 0
_Py_PyAtExit ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_py_exitfuncs DD imagerel call_py_exitfuncs
	DD	imagerel call_py_exitfuncs+28
	DD	imagerel $unwind$call_py_exitfuncs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_py_exitfuncs DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT call_py_exitfuncs
_TEXT	SEGMENT
call_py_exitfuncs PROC					; COMDAT

; 2436 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2437 :     if (pyexitfunc == NULL)

  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR pyexitfunc
  0000b	48 85 c0	 test	 rax, rax
  0000e	74 07		 je	 SHORT $LN2@call_py_ex

; 2438 :         return;
; 2439 : 
; 2440 :     (*pyexitfunc)();

  00010	ff d0		 call	 rax

; 2441 :     PyErr_Clear();

  00012	e8 00 00 00 00	 call	 PyErr_Clear
$LN2@call_py_ex:

; 2442 : }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
call_py_exitfuncs ENDP
_TEXT	ENDS
PUBLIC	??_C@_09LCFGMKMJ@threading?$AA@			; `string'
EXTRN	PyMapping_GetItemString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$wait_for_thread_shutdown DD imagerel wait_for_thread_shutdown
	DD	imagerel wait_for_thread_shutdown+153
	DD	imagerel $unwind$wait_for_thread_shutdown
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wait_for_thread_shutdown DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_09LCFGMKMJ@threading?$AA@
CONST	SEGMENT
??_C@_09LCFGMKMJ@threading?$AA@ DB 'threading', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT wait_for_thread_shutdown
_TEXT	SEGMENT
wait_for_thread_shutdown PROC				; COMDAT

; 2450 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2451 : #ifdef WITH_THREAD
; 2452 :     _Py_IDENTIFIER(_shutdown);
; 2453 :     PyObject *result;
; 2454 :     PyThreadState *tstate = PyThreadState_GET();

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	74 07		 je	 SHORT $LN6@wait_for_t
  0000f	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00014	eb 07		 jmp	 SHORT $LN7@wait_for_t
$LN6@wait_for_t:
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN7@wait_for_t:

; 2455 :     PyObject *threading = PyMapping_GetItemString(tstate->interp->modules,
; 2456 :                                                   "threading");

  0001d	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09LCFGMKMJ@threading?$AA@
  00028	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0002c	e8 00 00 00 00	 call	 PyMapping_GetItemString
  00031	48 8b d8	 mov	 rbx, rax

; 2457 :     if (threading == NULL) {

  00034	48 85 c0	 test	 rax, rax
  00037	75 0a		 jne	 SHORT $LN3@wait_for_t

; 2470 : #endif
; 2471 : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5b		 pop	 rbx
  0003e	e9 00 00 00 00	 jmp	 PyErr_Clear
$LN3@wait_for_t:

; 2458 :         /* threading not imported */
; 2459 :         PyErr_Clear();
; 2460 :         return;
; 2461 :     }
; 2462 :     result = _PyObject_CallMethodId(threading, &PyId__shutdown, "");

  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00049	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00052	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId__shutdown@?1??wait_for_thread_shutdown@@9@9
  00057	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  0005b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00062	48 8b cb	 mov	 rcx, rbx
  00065	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 2463 :     if (result == NULL) {

  0006a	48 85 c0	 test	 rax, rax
  0006d	75 15		 jne	 SHORT $LN2@wait_for_t

; 2464 :         PyErr_WriteUnraisable(threading);

  0006f	48 8b cb	 mov	 rcx, rbx
  00072	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 2468 :     }
; 2469 :     Py_DECREF(threading);

  00077	48 8b cb	 mov	 rcx, rbx

; 2470 : #endif
; 2471 : }

  0007a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007e	5b		 pop	 rbx
  0007f	e9 00 00 00 00	 jmp	 _Py_DecRef
$LN2@wait_for_t:

; 2465 :     }
; 2466 :     else {
; 2467 :         Py_DECREF(result);

  00084	48 8b c8	 mov	 rcx, rax
  00087	e8 00 00 00 00	 call	 _Py_DecRef

; 2468 :     }
; 2469 :     Py_DECREF(threading);

  0008c	48 8b cb	 mov	 rcx, rbx

; 2470 : #endif
; 2471 : }

  0008f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00093	5b		 pop	 rbx
  00094	e9 00 00 00 00	 jmp	 _Py_DecRef
wait_for_thread_shutdown ENDP
_TEXT	ENDS
PUBLIC	Py_AtExit
_BSS	SEGMENT
	ALIGN	8

exitfuncs DQ	020H DUP (?)
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT Py_AtExit
_TEXT	SEGMENT
func$ = 8
Py_AtExit PROC						; COMDAT

; 2479 :     if (nexitfuncs >= NEXITFUNCS)

  00000	48 63 15 00 00
	00 00		 movsxd	 rdx, DWORD PTR nexitfuncs
  00007	83 fa 20	 cmp	 edx, 32			; 00000020H
  0000a	7c 04		 jl	 SHORT $LN1@Py_AtExit

; 2480 :         return -1;

  0000c	83 c8 ff	 or	 eax, -1

; 2483 : }

  0000f	c3		 ret	 0
$LN1@Py_AtExit:

; 2481 :     exitfuncs[nexitfuncs++] = func;

  00010	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:exitfuncs

; 2482 :     return 0;

  00017	33 c0		 xor	 eax, eax
  00019	49 89 0c d0	 mov	 QWORD PTR [r8+rdx*8], rcx
  0001d	ff c2		 inc	 edx
  0001f	89 15 00 00 00
	00		 mov	 DWORD PTR nexitfuncs, edx

; 2483 : }

  00025	c3		 ret	 0
Py_AtExit ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_ll_exitfuncs DD imagerel call_ll_exitfuncs
	DD	imagerel call_ll_exitfuncs+14
	DD	imagerel $unwind$call_ll_exitfuncs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$call_ll_exitfuncs DD imagerel call_ll_exitfuncs+14
	DD	imagerel call_ll_exitfuncs+60
	DD	imagerel $chain$0$call_ll_exitfuncs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$call_ll_exitfuncs DD imagerel call_ll_exitfuncs+60
	DD	imagerel call_ll_exitfuncs+97
	DD	imagerel $chain$1$call_ll_exitfuncs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$call_ll_exitfuncs DD 021H
	DD	imagerel call_ll_exitfuncs
	DD	imagerel call_ll_exitfuncs+14
	DD	imagerel $unwind$call_ll_exitfuncs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$call_ll_exitfuncs DD 020521H
	DD	043405H
	DD	imagerel call_ll_exitfuncs
	DD	imagerel call_ll_exitfuncs+14
	DD	imagerel $unwind$call_ll_exitfuncs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_ll_exitfuncs DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT call_ll_exitfuncs
_TEXT	SEGMENT
call_ll_exitfuncs PROC					; COMDAT

; 2487 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2488 :     while (nexitfuncs > 0)

  00004	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR nexitfuncs
  0000a	85 c0		 test	 eax, eax
  0000c	7e 2e		 jle	 SHORT $LN1@call_ll_ex
  0000e	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00013	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:exitfuncs
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL2@call_ll_ex:

; 2489 :         (*exitfuncs[--nexitfuncs])();

  00020	ff c8		 dec	 eax
  00022	89 05 00 00 00
	00		 mov	 DWORD PTR nexitfuncs, eax
  00028	48 98		 cdqe
  0002a	ff 14 c3	 call	 QWORD PTR [rbx+rax*8]
  0002d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR nexitfuncs
  00033	85 c0		 test	 eax, eax
  00035	7f e9		 jg	 SHORT $LL2@call_ll_ex
  00037	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]
$LN1@call_ll_ex:

; 2490 : 
; 2491 :     fflush(stdout);

  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00042	48 8d 48 30	 lea	 rcx, QWORD PTR [rax+48]
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 2492 :     fflush(stderr);

  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00052	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]

; 2493 : }

  00056	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005a	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_fflush
call_ll_exitfuncs ENDP
_TEXT	ENDS
EXTRN	PyOS_InitInterrupts:PROC
; Function compile flags: /Ogtpy
;	COMDAT initsigs
_TEXT	SEGMENT
initsigs PROC						; COMDAT

; 2506 : #ifdef SIGPIPE
; 2507 :     PyOS_setsig(SIGPIPE, SIG_IGN);
; 2508 : #endif
; 2509 : #ifdef SIGXFZ
; 2510 :     PyOS_setsig(SIGXFZ, SIG_IGN);
; 2511 : #endif
; 2512 : #ifdef SIGXFSZ
; 2513 :     PyOS_setsig(SIGXFSZ, SIG_IGN);
; 2514 : #endif
; 2515 :     PyOS_InitInterrupts(); /* May imply initsignal() */
; 2516 : }

  00000	e9 00 00 00 00	 jmp	 PyOS_InitInterrupts
initsigs ENDP
_TEXT	ENDS
PUBLIC	_Py_RestoreSignals
; Function compile flags: /Ogtpy
;	COMDAT _Py_RestoreSignals
_TEXT	SEGMENT
_Py_RestoreSignals PROC					; COMDAT

; 2528 : #ifdef SIGPIPE
; 2529 :     PyOS_setsig(SIGPIPE, SIG_DFL);
; 2530 : #endif
; 2531 : #ifdef SIGXFZ
; 2532 :     PyOS_setsig(SIGXFZ, SIG_DFL);
; 2533 : #endif
; 2534 : #ifdef SIGXFSZ
; 2535 :     PyOS_setsig(SIGXFSZ, SIG_DFL);
; 2536 : #endif
; 2537 : }

  00000	c2 00 00	 ret	 0
_Py_RestoreSignals ENDP
_TEXT	ENDS
PUBLIC	??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@		; `string'
PUBLIC	Py_FdIsInteractive
EXTRN	__imp_isatty:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_FdIsInteractive DD imagerel $LN7
	DD	imagerel $LN7+55
	DD	imagerel $unwind$Py_FdIsInteractive
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$Py_FdIsInteractive DD imagerel $LN7+55
	DD	imagerel $LN7+126
	DD	imagerel $chain$1$Py_FdIsInteractive
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$Py_FdIsInteractive DD imagerel $LN7+126
	DD	imagerel $LN7+147
	DD	imagerel $chain$3$Py_FdIsInteractive
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$Py_FdIsInteractive DD 040021H
	DD	077400H
	DD	066400H
	DD	imagerel $LN7
	DD	imagerel $LN7+55
	DD	imagerel $unwind$Py_FdIsInteractive
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$Py_FdIsInteractive DD 040a21H
	DD	07740aH
	DD	066405H
	DD	imagerel $LN7
	DD	imagerel $LN7+55
	DD	imagerel $unwind$Py_FdIsInteractive
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_FdIsInteractive DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
CONST	SEGMENT
??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@ DB '???', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT Py_FdIsInteractive
_TEXT	SEGMENT
fp$ = 48
filename$ = 56
Py_FdIsInteractive PROC					; COMDAT

; 2548 : {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b da	 mov	 rbx, rdx

; 2549 :     if (isatty((int)fileno(fp)))

  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  0000f	8b c8		 mov	 ecx, eax
  00011	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isatty
  00017	85 c0		 test	 eax, eax
  00019	74 0b		 je	 SHORT $LN2@Py_FdIsInt

; 2550 :         return 1;

  0001b	b8 01 00 00 00	 mov	 eax, 1

; 2556 : }

  00020	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00024	5b		 pop	 rbx
  00025	c3		 ret	 0
$LN2@Py_FdIsInt:

; 2551 :     if (!Py_InteractiveFlag)

  00026	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_InteractiveFlag, 0
  0002d	75 08		 jne	 SHORT $LN1@Py_FdIsInt

; 2552 :         return 0;

  0002f	33 c0		 xor	 eax, eax

; 2556 : }

  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5b		 pop	 rbx
  00036	c3		 ret	 0
$LN1@Py_FdIsInt:
  00037	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  0003c	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi

; 2553 :     return (filename == NULL) ||
; 2554 :            (strcmp(filename, "<stdin>") == 0) ||
; 2555 :            (strcmp(filename, "???") == 0);

  00041	48 85 db	 test	 rbx, rbx
  00044	74 38		 je	 SHORT $LN5@Py_FdIsInt
  00046	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_07CMJMHHJG@?$DMstdin?$DO?$AA@
  0004d	48 8b f3	 mov	 rsi, rbx
  00050	b9 08 00 00 00	 mov	 ecx, 8
  00055	f3 a6		 repe cmpsb
  00057	74 25		 je	 SHORT $LN5@Py_FdIsInt
  00059	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
  00060	48 8b f3	 mov	 rsi, rbx
  00063	b9 04 00 00 00	 mov	 ecx, 4
  00068	f3 a6		 repe cmpsb
  0006a	74 12		 je	 SHORT $LN5@Py_FdIsInt
  0006c	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  00071	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  00076	33 c0		 xor	 eax, eax

; 2556 : }

  00078	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007c	5b		 pop	 rbx
  0007d	c3		 ret	 0
$LN5@Py_FdIsInt:
  0007e	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  00083	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 2553 :     return (filename == NULL) ||
; 2554 :            (strcmp(filename, "<stdin>") == 0) ||
; 2555 :            (strcmp(filename, "???") == 0);

  00088	b8 01 00 00 00	 mov	 eax, 1

; 2556 : }

  0008d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00091	5b		 pop	 rbx
  00092	c3		 ret	 0
Py_FdIsInteractive ENDP
_TEXT	ENDS
PUBLIC	PyOS_getsig
EXTRN	__imp_signal:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyOS_getsig DD imagerel $LN10
	DD	imagerel $LN10+52
	DD	imagerel $unwind$PyOS_getsig
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyOS_getsig DD imagerel $LN10+52
	DD	imagerel $LN10+97
	DD	imagerel $chain$0$PyOS_getsig
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyOS_getsig DD imagerel $LN10+97
	DD	imagerel $LN10+137
	DD	imagerel $chain$1$PyOS_getsig
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyOS_getsig DD 021H
	DD	imagerel $LN10
	DD	imagerel $LN10+52
	DD	imagerel $unwind$PyOS_getsig
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyOS_getsig DD 020521H
	DD	063405H
	DD	imagerel $LN10
	DD	imagerel $LN10+52
	DD	imagerel $unwind$PyOS_getsig
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyOS_getsig DD 020601H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyOS_getsig
_TEXT	SEGMENT
sig$ = 48
PyOS_getsig PROC					; COMDAT

; 2601 : {

$LN10:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2602 : #ifdef HAVE_SIGACTION
; 2603 :     struct sigaction context;
; 2604 :     if (sigaction(sig, NULL, &context) == -1)
; 2605 :         return SIG_ERR;
; 2606 :     return context.sa_handler;
; 2607 : #else
; 2608 :     PyOS_sighandler_t handler;
; 2609 : /* Special signal handling for the secure CRT in Visual Studio 2005 */
; 2610 : #if defined(_MSC_VER) && _MSC_VER >= 1400
; 2611 :     switch (sig) {

  00006	8d 41 fe	 lea	 eax, DWORD PTR [rcx-2]
  00009	8b f9		 mov	 edi, ecx
  0000b	83 f8 14	 cmp	 eax, 20
  0000e	77 51		 ja	 SHORT $LN2@PyOS_getsi
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00017	48 98		 cdqe
  00019	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN8@PyOS_getsi[rcx+rax]
  00021	8b 94 81 00 00
	00 00		 mov	 edx, DWORD PTR $LN9@PyOS_getsi[rcx+rax*4]
  00028	48 03 d1	 add	 rdx, rcx
  0002b	ff e2		 jmp	 rdx
$LN3@PyOS_getsi:

; 2624 :     }
; 2625 : #endif /* _MSC_VER && _MSC_VER >= 1400 */
; 2626 :     handler = signal(sig, SIG_IGN);

  0002d	ba 01 00 00 00	 mov	 edx, 1
  00032	8b cf		 mov	 ecx, edi
  00034	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_signal
  0003f	48 8b d8	 mov	 rbx, rax

; 2627 :     if (handler != SIG_ERR)

  00042	48 83 f8 ff	 cmp	 rax, -1
  00046	74 0b		 je	 SHORT $LN1@PyOS_getsi

; 2628 :         signal(sig, handler);

  00048	48 8b d0	 mov	 rdx, rax
  0004b	8b cf		 mov	 ecx, edi
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_signal
$LN1@PyOS_getsi:

; 2629 :     return handler;

  00053	48 8b c3	 mov	 rax, rbx
  00056	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 2630 : #endif
; 2631 : }

  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
$LN2@PyOS_getsi:

; 2612 :     /* Only these signals are valid */
; 2613 :     case SIGINT:
; 2614 :     case SIGILL:
; 2615 :     case SIGFPE:
; 2616 :     case SIGSEGV:
; 2617 :     case SIGTERM:
; 2618 :     case SIGBREAK:
; 2619 :     case SIGABRT:
; 2620 :         break;
; 2621 :     /* Don't call signal() with other values or it will assert */
; 2622 :     default:
; 2623 :         return SIG_ERR;

  00061	48 83 c8 ff	 or	 rax, -1

; 2630 : #endif
; 2631 : }

  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
  0006b	90		 npad	 1
$LN9@PyOS_getsi:
  0006c	00 00 00 00	 DD	 $LN3@PyOS_getsi
  00070	00 00 00 00	 DD	 $LN2@PyOS_getsi
$LN8@PyOS_getsi:
  00074	00		 DB	 0
  00075	01		 DB	 1
  00076	00		 DB	 0
  00077	01		 DB	 1
  00078	01		 DB	 1
  00079	01		 DB	 1
  0007a	00		 DB	 0
  0007b	01		 DB	 1
  0007c	01		 DB	 1
  0007d	00		 DB	 0
  0007e	01		 DB	 1
  0007f	01		 DB	 1
  00080	01		 DB	 1
  00081	00		 DB	 0
  00082	01		 DB	 1
  00083	01		 DB	 1
  00084	01		 DB	 1
  00085	01		 DB	 1
  00086	01		 DB	 1
  00087	00		 DB	 0
  00088	00		 DB	 0
PyOS_getsig ENDP
_TEXT	ENDS
PUBLIC	PyOS_setsig
; Function compile flags: /Ogtpy
;	COMDAT PyOS_setsig
_TEXT	SEGMENT
sig$ = 8
handler$ = 16
PyOS_setsig PROC					; COMDAT

; 2641 : #ifdef HAVE_SIGACTION
; 2642 :     /* Some code in Modules/signalmodule.c depends on sigaction() being
; 2643 :      * used here if HAVE_SIGACTION is defined.  Fix that if this code
; 2644 :      * changes to invalidate that assumption.
; 2645 :      */
; 2646 :     struct sigaction context, ocontext;
; 2647 :     context.sa_handler = handler;
; 2648 :     sigemptyset(&context.sa_mask);
; 2649 :     context.sa_flags = 0;
; 2650 :     if (sigaction(sig, &context, &ocontext) == -1)
; 2651 :         return SIG_ERR;
; 2652 :     return ocontext.sa_handler;
; 2653 : #else
; 2654 :     PyOS_sighandler_t oldhandler;
; 2655 :     oldhandler = signal(sig, handler);
; 2656 : #ifdef HAVE_SIGINTERRUPT
; 2657 :     siginterrupt(sig, 1);
; 2658 : #endif
; 2659 :     return oldhandler;
; 2660 : #endif
; 2661 : }

  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_signal
PyOS_setsig ENDP
_TEXT	ENDS
PUBLIC	Py_Finalize
EXTRN	PyGrammar_RemoveAccelerators:PROC
EXTRN	_PyParser_Grammar:BYTE
EXTRN	Py_FileSystemDefaultEncoding:QWORD
EXTRN	Py_HasFileSystemDefaultEncoding:DWORD
EXTRN	PyInterpreterState_Delete:PROC
EXTRN	PyThreadState_Swap:PROC
EXTRN	_PyUnicode_Fini:PROC
EXTRN	PySlice_Fini:PROC
EXTRN	PyDict_Fini:PROC
EXTRN	PyFloat_Fini:PROC
EXTRN	PyLong_Fini:PROC
EXTRN	PyByteArray_Fini:PROC
EXTRN	PyBytes_Fini:PROC
EXTRN	PySet_Fini:PROC
EXTRN	PyList_Fini:PROC
EXTRN	PyTuple_Fini:PROC
EXTRN	PyCFunction_Fini:PROC
EXTRN	PyFrame_Fini:PROC
EXTRN	PyMethod_Fini:PROC
EXTRN	_PyGILState_Fini:PROC
EXTRN	_PyExc_Fini:PROC
EXTRN	PyInterpreterState_Clear:PROC
EXTRN	_PyFaulthandler_Fini:PROC
EXTRN	_PyType_Fini:PROC
EXTRN	_PyImport_Fini:PROC
EXTRN	PyImport_Cleanup:PROC
EXTRN	_PyGC_Fini:PROC
EXTRN	PyGC_Collect:PROC
EXTRN	PyOS_FiniInterrupts:PROC
EXTRN	_PyParallel_Finalize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_Finalize DD imagerel $LN7
	DD	imagerel $LN7+17
	DD	imagerel $unwind$Py_Finalize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$Py_Finalize DD imagerel $LN7+17
	DD	imagerel $LN7+238
	DD	imagerel $chain$0$Py_Finalize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$Py_Finalize DD imagerel $LN7+238
	DD	imagerel $LN7+289
	DD	imagerel $chain$1$Py_Finalize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$Py_Finalize DD 021H
	DD	imagerel $LN7
	DD	imagerel $LN7+17
	DD	imagerel $unwind$Py_Finalize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$Py_Finalize DD 020521H
	DD	043405H
	DD	imagerel $LN7
	DD	imagerel $LN7+17
	DD	imagerel $unwind$Py_Finalize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_Finalize DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT Py_Finalize
_TEXT	SEGMENT
Py_Finalize PROC					; COMDAT

; 503  : {

$LN7:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 504  :     PyInterpreterState *interp;
; 505  :     PyThreadState *tstate;
; 506  : 
; 507  :     if (!initialized)

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR initialized, 0
  0000b	0f 84 0b 01 00
	00		 je	 $LN3@Py_Finaliz

; 508  :         return;
; 509  : 
; 510  :     wait_for_thread_shutdown();

  00011	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00016	e8 00 00 00 00	 call	 wait_for_thread_shutdown

; 511  : 
; 512  : #ifdef WITH_PARALLEL
; 513  :     _PyParallel_Finalize();

  0001b	e8 00 00 00 00	 call	 _PyParallel_Finalize

; 514  : #endif
; 515  : 
; 516  :     /* The interpreter is still entirely intact at this point, and the
; 517  :      * exit funcs may be relying on that.  In particular, if some thread
; 518  :      * or exit func is still waiting to do an import, the import machinery
; 519  :      * expects Py_IsInitialized() to return true.  So don't say the
; 520  :      * interpreter is uninitialized until after the exit funcs have run.
; 521  :      * Note that Threading.py uses an exit func to do a join on all the
; 522  :      * threads created thru it, so this also protects pending imports in
; 523  :      * the threads created via Threading.
; 524  :      */
; 525  :     call_py_exitfuncs();

  00020	e8 00 00 00 00	 call	 call_py_exitfuncs

; 526  : 
; 527  :     /* Get current thread state and interpreter pointer */
; 528  :     tstate = PyThreadState_GET();

  00025	e8 00 00 00 00	 call	 _Py_PXCTX
  0002a	85 c0		 test	 eax, eax
  0002c	74 07		 je	 SHORT $LN5@Py_Finaliz
  0002e	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00033	eb 07		 jmp	 SHORT $LN6@Py_Finaliz
$LN5@Py_Finaliz:
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN6@Py_Finaliz:

; 529  :     interp = tstate->interp;

  0003c	48 8b 58 08	 mov	 rbx, QWORD PTR [rax+8]

; 530  : 
; 531  :     /* Remaining threads (e.g. daemon threads) will automatically exit
; 532  :        after taking the GIL (in PyEval_RestoreThread()). */
; 533  :     _Py_Finalizing = tstate;
; 534  :     initialized = 0;

  00040	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR initialized, 0
  0004a	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_Finalizing, rax

; 535  : 
; 536  :     /* Flush stdout+stderr */
; 537  :     flush_std_files();

  00051	e8 00 00 00 00	 call	 flush_std_files

; 538  : 
; 539  :     /* Disable signal handling */
; 540  :     PyOS_FiniInterrupts();

  00056	e8 00 00 00 00	 call	 PyOS_FiniInterrupts

; 541  : 
; 542  :     /* Collect garbage.  This may call finalizers; it's nice to call these
; 543  :      * before all modules are destroyed.
; 544  :      * XXX If a __del__ or weakref callback is triggered here, and tries to
; 545  :      * XXX import a module, bad things can happen, because Python no
; 546  :      * XXX longer believes it's initialized.
; 547  :      * XXX     Fatal Python error: Interpreter not initialized (version mismatch?)
; 548  :      * XXX is easy to provoke that way.  I've also seen, e.g.,
; 549  :      * XXX     Exception exceptions.ImportError: 'No module named sha'
; 550  :      * XXX         in <function callback at 0x008F5718> ignored
; 551  :      * XXX but I'm unclear on exactly how that one happens.  In any case,
; 552  :      * XXX I haven't seen a real-life report of either of these.
; 553  :      */
; 554  :     PyGC_Collect();

  0005b	e8 00 00 00 00	 call	 PyGC_Collect

; 555  : #ifdef COUNT_ALLOCS
; 556  :     /* With COUNT_ALLOCS, it helps to run GC multiple times:
; 557  :        each collection might release some types from the type
; 558  :        list, so they become garbage. */
; 559  :     while (PyGC_Collect() > 0)
; 560  :         /* nothing */;
; 561  : #endif
; 562  :     /* We run this while most interpreter state is still alive, so that
; 563  :        debug information can be printed out */
; 564  :     _PyGC_Fini();

  00060	e8 00 00 00 00	 call	 _PyGC_Fini

; 565  : 
; 566  :     /* Destroy all modules */
; 567  :     PyImport_Cleanup();

  00065	e8 00 00 00 00	 call	 PyImport_Cleanup

; 568  : 
; 569  :     /* Flush stdout+stderr (again, in case more was printed) */
; 570  :     flush_std_files();

  0006a	e8 00 00 00 00	 call	 flush_std_files

; 571  : 
; 572  :     /* Collect final garbage.  This disposes of cycles created by
; 573  :      * class definitions, for example.
; 574  :      * XXX This is disabled because it caused too many problems.  If
; 575  :      * XXX a __del__ or weakref callback triggers here, Python code has
; 576  :      * XXX a hard time running, because even the sys module has been
; 577  :      * XXX cleared out (sys.stdout is gone, sys.excepthook is gone, etc).
; 578  :      * XXX One symptom is a sequence of information-free messages
; 579  :      * XXX coming from threads (if a __del__ or callback is invoked,
; 580  :      * XXX other threads can execute too, and any exception they encounter
; 581  :      * XXX triggers a comedy of errors as subsystem after subsystem
; 582  :      * XXX fails to find what it *expects* to find in sys to help report
; 583  :      * XXX the exception and consequent unexpected failures).  I've also
; 584  :      * XXX seen segfaults then, after adding print statements to the
; 585  :      * XXX Python code getting called.
; 586  :      */
; 587  : #if 0
; 588  :     PyGC_Collect();
; 589  : #endif
; 590  : 
; 591  :     /* Destroy the database used by _PyImport_{Fixup,Find}Extension */
; 592  :     _PyImport_Fini();

  0006f	e8 00 00 00 00	 call	 _PyImport_Fini

; 593  : 
; 594  :     /* Cleanup typeobject.c's internal caches. */
; 595  :     _PyType_Fini();

  00074	e8 00 00 00 00	 call	 _PyType_Fini

; 596  : 
; 597  :     /* unload faulthandler module */
; 598  :     _PyFaulthandler_Fini();

  00079	e8 00 00 00 00	 call	 _PyFaulthandler_Fini

; 599  : 
; 600  :     /* Debugging stuff */
; 601  : #ifdef COUNT_ALLOCS
; 602  :     dump_counts(stdout);
; 603  : #endif
; 604  : 
; 605  :     PRINT_TOTAL_REFS();
; 606  : 
; 607  : #ifdef Py_TRACE_REFS
; 608  :     /* Display all objects still alive -- this can invoke arbitrary
; 609  :      * __repr__ overrides, so requires a mostly-intact interpreter.
; 610  :      * Alas, a lot of stuff may still be alive now that will be cleaned
; 611  :      * up later.
; 612  :      */
; 613  :     if (Py_GETENV("PYTHONDUMPREFS"))
; 614  :         _Py_PrintReferences(stderr);
; 615  : #endif /* Py_TRACE_REFS */
; 616  : 
; 617  :     /* Clear interpreter state and all thread states. */
; 618  :     PyInterpreterState_Clear(interp);

  0007e	48 8b cb	 mov	 rcx, rbx
  00081	e8 00 00 00 00	 call	 PyInterpreterState_Clear

; 619  : 
; 620  :     /* Now we decref the exception classes.  After this point nothing
; 621  :        can raise an exception.  That's okay, because each Fini() method
; 622  :        below has been checked to make sure no exceptions are ever
; 623  :        raised.
; 624  :     */
; 625  : 
; 626  :     _PyExc_Fini();

  00086	e8 00 00 00 00	 call	 _PyExc_Fini

; 627  : 
; 628  :     /* Cleanup auto-thread-state */
; 629  : #ifdef WITH_THREAD
; 630  :     _PyGILState_Fini();

  0008b	e8 00 00 00 00	 call	 _PyGILState_Fini

; 631  : #endif /* WITH_THREAD */
; 632  : 
; 633  :     /* Sundry finalizers */
; 634  :     PyMethod_Fini();

  00090	e8 00 00 00 00	 call	 PyMethod_Fini

; 635  :     PyFrame_Fini();

  00095	e8 00 00 00 00	 call	 PyFrame_Fini

; 636  :     PyCFunction_Fini();

  0009a	e8 00 00 00 00	 call	 PyCFunction_Fini

; 637  :     PyTuple_Fini();

  0009f	e8 00 00 00 00	 call	 PyTuple_Fini

; 638  :     PyList_Fini();

  000a4	e8 00 00 00 00	 call	 PyList_Fini

; 639  :     PySet_Fini();

  000a9	e8 00 00 00 00	 call	 PySet_Fini

; 640  :     PyBytes_Fini();

  000ae	e8 00 00 00 00	 call	 PyBytes_Fini

; 641  :     PyByteArray_Fini();

  000b3	e8 00 00 00 00	 call	 PyByteArray_Fini

; 642  :     PyLong_Fini();

  000b8	e8 00 00 00 00	 call	 PyLong_Fini

; 643  :     PyFloat_Fini();

  000bd	e8 00 00 00 00	 call	 PyFloat_Fini

; 644  :     PyDict_Fini();

  000c2	e8 00 00 00 00	 call	 PyDict_Fini

; 645  :     PySlice_Fini();

  000c7	e8 00 00 00 00	 call	 PySlice_Fini

; 646  : 
; 647  :     /* Cleanup Unicode implementation */
; 648  :     _PyUnicode_Fini();

  000cc	e8 00 00 00 00	 call	 _PyUnicode_Fini

; 649  : 
; 650  :     /* Delete current thread. After this, many C API calls become crashy. */
; 651  :     PyThreadState_Swap(NULL);

  000d1	33 c9		 xor	 ecx, ecx
  000d3	e8 00 00 00 00	 call	 PyThreadState_Swap

; 652  :     PyInterpreterState_Delete(interp);

  000d8	48 8b cb	 mov	 rcx, rbx
  000db	e8 00 00 00 00	 call	 PyInterpreterState_Delete

; 653  : 
; 654  :     /* reset file system default encoding */
; 655  :     if (!Py_HasFileSystemDefaultEncoding && Py_FileSystemDefaultEncoding) {

  000e0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_HasFileSystemDefaultEncoding, 0
  000e7	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]
  000ec	75 1d		 jne	 SHORT $LN1@Py_Finaliz
  000ee	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Py_FileSystemDefaultEncoding
  000f5	48 85 c9	 test	 rcx, rcx
  000f8	74 11		 je	 SHORT $LN1@Py_Finaliz

; 656  :         free((char*)Py_FileSystemDefaultEncoding);

  000fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 657  :         Py_FileSystemDefaultEncoding = NULL;

  00100	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR Py_FileSystemDefaultEncoding, 0
$LN1@Py_Finaliz:

; 658  :     }
; 659  : 
; 660  :     /* XXX Still allocated:
; 661  :        - various static ad-hoc pointers to interned strings
; 662  :        - int and float free list blocks
; 663  :        - whatever various modules and libraries allocate
; 664  :     */
; 665  : 
; 666  :     PyGrammar_RemoveAccelerators(&_PyParser_Grammar);

  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyParser_Grammar
  00112	e8 00 00 00 00	 call	 PyGrammar_RemoveAccelerators

; 667  : 
; 668  : #ifdef Py_TRACE_REFS
; 669  :     /* Display addresses (& refcnts) of all objects still alive.
; 670  :      * An address can be used to find the repr of the object, printed
; 671  :      * above by _Py_PrintReferences.
; 672  :      */
; 673  :     if (Py_GETENV("PYTHONDUMPREFS"))
; 674  :         _Py_PrintReferenceAddresses(stderr);
; 675  : #endif /* Py_TRACE_REFS */
; 676  : #ifdef PYMALLOC_DEBUG
; 677  :     if (Py_GETENV("PYTHONMALLOCSTATS"))
; 678  :         _PyObject_DebugMallocStats(stderr);
; 679  : #endif
; 680  : 
; 681  :     call_ll_exitfuncs();

  00117	e8 00 00 00 00	 call	 call_ll_exitfuncs
$LN3@Py_Finaliz:

; 682  : }

  0011c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00120	c3		 ret	 0
Py_Finalize ENDP
_TEXT	ENDS
PUBLIC	PyParser_ASTFromString
EXTRN	PyNode_Free:PROC
EXTRN	PyAST_FromNode:PROC
EXTRN	PyParser_ParseStringFlagsFilenameEx:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyParser_ASTFromString DD imagerel $LN6
	DD	imagerel $LN6+209
	DD	imagerel $unwind$PyParser_ASTFromString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyParser_ASTFromString DD 081401H
	DD	0106414H
	DD	0f5414H
	DD	0e3414H
	DD	07010b214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyParser_ASTFromString
_TEXT	SEGMENT
localflags$ = 48
err$ = 56
s$ = 112
filename$ = 120
start$ = 128
iflags$ = 136
flags$ = 136
arena$ = 144
PyParser_ASTFromString PROC				; COMDAT

; 2121 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00014	4c 8b d1	 mov	 r10, rcx

; 2122 :     mod_ty mod;
; 2123 :     PyCompilerFlags localflags;
; 2124 :     perrdetail err;
; 2125 :     int iflags = PARSER_FLAGS(flags);

  00017	49 8b c9	 mov	 rcx, r9
  0001a	49 8b d9	 mov	 rbx, r9
  0001d	48 8b ea	 mov	 rbp, rdx
  00020	e8 00 00 00 00	 call	 PARSER_FLAGS

; 2126 : 
; 2127 :     node *n = PyParser_ParseStringFlagsFilenameEx(s, filename,
; 2128 :                                     &_PyParser_Grammar, start, &err,
; 2129 :                                     &iflags);

  00025	45 8b c8	 mov	 r9d, r8d
  00028	89 84 24 88 00
	00 00		 mov	 DWORD PTR iflags$[rsp], eax
  0002f	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR iflags$[rsp]
  00037	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_PyParser_Grammar
  0003e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00043	48 8d 44 24 38	 lea	 rax, QWORD PTR err$[rsp]
  00048	48 8b d5	 mov	 rdx, rbp
  0004b	49 8b ca	 mov	 rcx, r10
  0004e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00053	e8 00 00 00 00	 call	 PyParser_ParseStringFlagsFilenameEx

; 2130 :     if (flags == NULL) {

  00058	33 ff		 xor	 edi, edi
  0005a	48 8b f0	 mov	 rsi, rax
  0005d	48 85 db	 test	 rbx, rbx
  00060	75 09		 jne	 SHORT $LN3@PyParser_A

; 2131 :         localflags.cf_flags = 0;

  00062	89 7c 24 30	 mov	 DWORD PTR localflags$[rsp], edi

; 2132 :         flags = &localflags;

  00066	48 8d 5c 24 30	 lea	 rbx, QWORD PTR localflags$[rsp]
$LN3@PyParser_A:

; 2133 :     }
; 2134 :     if (n) {

  0006b	48 85 c0	 test	 rax, rax
  0006e	74 32		 je	 SHORT $LN2@PyParser_A

; 2135 :         flags->cf_flags |= iflags & PyCF_MASK;

  00070	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR iflags$[rsp]

; 2136 :         mod = PyAST_FromNode(n, flags, filename, arena);

  00077	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  0007f	4c 8b c5	 mov	 r8, rbp
  00082	81 e1 00 e0 07
	00		 and	 ecx, 516096		; 0007e000H
  00088	48 8b d3	 mov	 rdx, rbx
  0008b	09 0b		 or	 DWORD PTR [rbx], ecx
  0008d	48 8b c8	 mov	 rcx, rax
  00090	e8 00 00 00 00	 call	 PyAST_FromNode

; 2137 :         PyNode_Free(n);

  00095	48 8b ce	 mov	 rcx, rsi
  00098	48 8b f8	 mov	 rdi, rax
  0009b	e8 00 00 00 00	 call	 PyNode_Free

; 2138 :     }
; 2139 :     else {

  000a0	eb 0a		 jmp	 SHORT $LN1@PyParser_A
$LN2@PyParser_A:

; 2140 :         err_input(&err);

  000a2	48 8d 4c 24 38	 lea	 rcx, QWORD PTR err$[rsp]
  000a7	e8 00 00 00 00	 call	 err_input
$LN1@PyParser_A:

; 2141 :         mod = NULL;
; 2142 :     }
; 2143 :     err_free(&err);

  000ac	48 8d 4c 24 38	 lea	 rcx, QWORD PTR err$[rsp]
  000b1	e8 00 00 00 00	 call	 err_free

; 2144 :     return mod;
; 2145 : }

  000b6	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  000bb	48 8b 6c 24 78	 mov	 rbp, QWORD PTR [rsp+120]
  000c0	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR [rsp+128]
  000c8	48 8b c7	 mov	 rax, rdi
  000cb	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000cf	5f		 pop	 rdi
  000d0	c3		 ret	 0
PyParser_ASTFromString ENDP
_TEXT	ENDS
PUBLIC	PyParser_ASTFromFile
EXTRN	PyParser_ParseFileFlagsEx:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyParser_ASTFromFile DD imagerel $LN7
	DD	imagerel $LN7+266
	DD	imagerel $unwind$PyParser_ASTFromFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyParser_ASTFromFile DD 081701H
	DD	0146417H
	DD	0135417H
	DD	0123417H
	DD	07010f217H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyParser_ASTFromFile
_TEXT	SEGMENT
localflags$ = 80
err$ = 88
fp$ = 144
filename$ = 152
enc$ = 160
start$ = 168
ps1$ = 176
ps2$ = 184
iflags$ = 192
flags$ = 192
errcode$ = 200
arena$ = 208
PyParser_ASTFromFile PROC				; COMDAT

; 2152 : {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H

; 2153 :     mod_ty mod;
; 2154 :     PyCompilerFlags localflags;
; 2155 :     perrdetail err;
; 2156 :     int iflags = PARSER_FLAGS(flags);

  00017	48 8b 9c 24 c0
	00 00 00	 mov	 rbx, QWORD PTR flags$[rsp]
  0001f	4c 8b d1	 mov	 r10, rcx
  00022	48 8b ea	 mov	 rbp, rdx
  00025	48 8b cb	 mov	 rcx, rbx
  00028	e8 00 00 00 00	 call	 PARSER_FLAGS

; 2157 : 
; 2158 :     node *n = PyParser_ParseFileFlagsEx(fp, filename, enc,
; 2159 :                                       &_PyParser_Grammar,
; 2160 :                             start, ps1, ps2, &err, &iflags);

  0002d	48 8b d5	 mov	 rdx, rbp
  00030	49 8b ca	 mov	 rcx, r10
  00033	89 84 24 c0 00
	00 00		 mov	 DWORD PTR iflags$[rsp], eax
  0003a	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR iflags$[rsp]
  00042	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00047	48 8d 44 24 58	 lea	 rax, QWORD PTR err$[rsp]
  0004c	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00051	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR ps2$[rsp]
  00059	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0005e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR ps1$[rsp]
  00066	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0006b	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00070	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_PyParser_Grammar
  00077	e8 00 00 00 00	 call	 PyParser_ParseFileFlagsEx

; 2161 :     if (flags == NULL) {

  0007c	33 ff		 xor	 edi, edi
  0007e	48 8b f0	 mov	 rsi, rax
  00081	48 85 db	 test	 rbx, rbx
  00084	75 09		 jne	 SHORT $LN4@PyParser_A@2

; 2162 :         localflags.cf_flags = 0;

  00086	89 7c 24 50	 mov	 DWORD PTR localflags$[rsp], edi

; 2163 :         flags = &localflags;

  0008a	48 8d 5c 24 50	 lea	 rbx, QWORD PTR localflags$[rsp]
$LN4@PyParser_A@2:

; 2164 :     }
; 2165 :     if (n) {

  0008f	48 85 c0	 test	 rax, rax
  00092	74 32		 je	 SHORT $LN3@PyParser_A@2

; 2166 :         flags->cf_flags |= iflags & PyCF_MASK;

  00094	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR iflags$[rsp]

; 2167 :         mod = PyAST_FromNode(n, flags, filename, arena);

  0009b	4c 8b 8c 24 d0
	00 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  000a3	4c 8b c5	 mov	 r8, rbp
  000a6	81 e1 00 e0 07
	00		 and	 ecx, 516096		; 0007e000H
  000ac	48 8b d3	 mov	 rdx, rbx
  000af	09 0b		 or	 DWORD PTR [rbx], ecx
  000b1	48 8b c8	 mov	 rcx, rax
  000b4	e8 00 00 00 00	 call	 PyAST_FromNode

; 2168 :         PyNode_Free(n);

  000b9	48 8b ce	 mov	 rcx, rsi
  000bc	48 8b f8	 mov	 rdi, rax
  000bf	e8 00 00 00 00	 call	 PyNode_Free

; 2169 :     }
; 2170 :     else {

  000c4	eb 1e		 jmp	 SHORT $LN1@PyParser_A@2
$LN3@PyParser_A@2:

; 2171 :         err_input(&err);

  000c6	48 8d 4c 24 58	 lea	 rcx, QWORD PTR err$[rsp]
  000cb	e8 00 00 00 00	 call	 err_input

; 2172 :         if (errcode)

  000d0	4c 8b 9c 24 c8
	00 00 00	 mov	 r11, QWORD PTR errcode$[rsp]
  000d8	4d 85 db	 test	 r11, r11
  000db	74 07		 je	 SHORT $LN1@PyParser_A@2

; 2173 :             *errcode = err.error;

  000dd	8b 44 24 58	 mov	 eax, DWORD PTR err$[rsp]
  000e1	41 89 03	 mov	 DWORD PTR [r11], eax
$LN1@PyParser_A@2:

; 2174 :         mod = NULL;
; 2175 :     }
; 2176 :     err_free(&err);

  000e4	48 8d 4c 24 58	 lea	 rcx, QWORD PTR err$[rsp]
  000e9	e8 00 00 00 00	 call	 err_free

; 2177 :     return mod;
; 2178 : }

  000ee	4c 8d 9c 24 80
	00 00 00	 lea	 r11, QWORD PTR [rsp+128]
  000f6	48 8b c7	 mov	 rax, rdi
  000f9	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  000fd	49 8b 6b 18	 mov	 rbp, QWORD PTR [r11+24]
  00101	49 8b 73 20	 mov	 rsi, QWORD PTR [r11+32]
  00105	49 8b e3	 mov	 rsp, r11
  00108	5f		 pop	 rdi
  00109	c3		 ret	 0
PyParser_ASTFromFile ENDP
_TEXT	ENDS
PUBLIC	PyParser_SimpleParseFileFlags
EXTRN	PyParser_ParseFileFlags:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyParser_SimpleParseFileFlags DD imagerel $LN4
	DD	imagerel $LN4+96
	DD	imagerel $unwind$PyParser_SimpleParseFileFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyParser_SimpleParseFileFlags DD 020901H
	DD	03002f209H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyParser_SimpleParseFileFlags
_TEXT	SEGMENT
err$ = 80
fp$ = 144
filename$ = 152
start$ = 160
flags$ = 168
PyParser_SimpleParseFileFlags PROC			; COMDAT

; 2184 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H

; 2185 :     perrdetail err;
; 2186 :     node *n = PyParser_ParseFileFlags(fp, filename, NULL,
; 2187 :                                       &_PyParser_Grammar,
; 2188 :                                       start, NULL, NULL, &err, flags);

  00009	44 89 4c 24 40	 mov	 DWORD PTR [rsp+64], r9d
  0000e	48 8d 44 24 50	 lea	 rax, QWORD PTR err$[rsp]
  00013	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_PyParser_Grammar
  0001a	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0001f	33 c0		 xor	 eax, eax
  00021	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00026	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002b	44 89 44 24 20	 mov	 DWORD PTR [rsp+32], r8d
  00030	45 33 c0	 xor	 r8d, r8d
  00033	e8 00 00 00 00	 call	 PyParser_ParseFileFlags
  00038	48 8b d8	 mov	 rbx, rax

; 2189 :     if (n == NULL)

  0003b	48 85 c0	 test	 rax, rax
  0003e	75 0a		 jne	 SHORT $LN1@PyParser_S

; 2190 :         err_input(&err);

  00040	48 8d 4c 24 50	 lea	 rcx, QWORD PTR err$[rsp]
  00045	e8 00 00 00 00	 call	 err_input
$LN1@PyParser_S:

; 2191 :     err_free(&err);

  0004a	48 8d 4c 24 50	 lea	 rcx, QWORD PTR err$[rsp]
  0004f	e8 00 00 00 00	 call	 err_free

; 2192 : 
; 2193 :     return n;

  00054	48 8b c3	 mov	 rax, rbx

; 2194 : }

  00057	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0005e	5b		 pop	 rbx
  0005f	c3		 ret	 0
PyParser_SimpleParseFileFlags ENDP
_TEXT	ENDS
PUBLIC	PyParser_SimpleParseStringFlags
EXTRN	PyParser_ParseStringFlags:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyParser_SimpleParseStringFlags DD imagerel $LN4
	DD	imagerel $LN4+68
	DD	imagerel $unwind$PyParser_SimpleParseStringFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyParser_SimpleParseStringFlags DD 020601H
	DD	03002b206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyParser_SimpleParseStringFlags
_TEXT	SEGMENT
err$ = 48
str$ = 112
start$ = 120
flags$ = 128
PyParser_SimpleParseStringFlags PROC			; COMDAT

; 2200 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 2201 :     perrdetail err;
; 2202 :     node *n = PyParser_ParseStringFlags(str, &_PyParser_Grammar,
; 2203 :                                         start, &err, flags);

  00006	44 89 44 24 20	 mov	 DWORD PTR [rsp+32], r8d
  0000b	44 8b c2	 mov	 r8d, edx
  0000e	4c 8d 4c 24 30	 lea	 r9, QWORD PTR err$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyParser_Grammar
  0001a	e8 00 00 00 00	 call	 PyParser_ParseStringFlags
  0001f	48 8b d8	 mov	 rbx, rax

; 2204 :     if (n == NULL)

  00022	48 85 c0	 test	 rax, rax
  00025	75 0a		 jne	 SHORT $LN1@PyParser_S@2

; 2205 :         err_input(&err);

  00027	48 8d 4c 24 30	 lea	 rcx, QWORD PTR err$[rsp]
  0002c	e8 00 00 00 00	 call	 err_input
$LN1@PyParser_S@2:

; 2206 :     err_free(&err);

  00031	48 8d 4c 24 30	 lea	 rcx, QWORD PTR err$[rsp]
  00036	e8 00 00 00 00	 call	 err_free

; 2207 :     return n;

  0003b	48 8b c3	 mov	 rax, rbx

; 2208 : }

  0003e	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00042	5b		 pop	 rbx
  00043	c3		 ret	 0
PyParser_SimpleParseStringFlags ENDP
_TEXT	ENDS
PUBLIC	PyParser_SimpleParseStringFlagsFilename
EXTRN	PyParser_ParseStringFlagsFilename:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyParser_SimpleParseStringFlagsFilename DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$PyParser_SimpleParseStringFlagsFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyParser_SimpleParseStringFlagsFilename DD 020601H
	DD	03002b206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyParser_SimpleParseStringFlagsFilename
_TEXT	SEGMENT
err$ = 48
str$ = 112
filename$ = 120
start$ = 128
flags$ = 136
PyParser_SimpleParseStringFlagsFilename PROC		; COMDAT

; 2213 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 2214 :     perrdetail err;
; 2215 :     node *n = PyParser_ParseStringFlagsFilename(str, filename,
; 2216 :                             &_PyParser_Grammar, start, &err, flags);

  00006	44 89 4c 24 28	 mov	 DWORD PTR [rsp+40], r9d
  0000b	48 8d 44 24 30	 lea	 rax, QWORD PTR err$[rsp]
  00010	45 8b c8	 mov	 r9d, r8d
  00013	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_PyParser_Grammar
  0001a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0001f	e8 00 00 00 00	 call	 PyParser_ParseStringFlagsFilename
  00024	48 8b d8	 mov	 rbx, rax

; 2217 :     if (n == NULL)

  00027	48 85 c0	 test	 rax, rax
  0002a	75 0a		 jne	 SHORT $LN1@PyParser_S@3

; 2218 :         err_input(&err);

  0002c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR err$[rsp]
  00031	e8 00 00 00 00	 call	 err_input
$LN1@PyParser_S@3:

; 2219 :     err_free(&err);

  00036	48 8d 4c 24 30	 lea	 rcx, QWORD PTR err$[rsp]
  0003b	e8 00 00 00 00	 call	 err_free

; 2220 :     return n;

  00040	48 8b c3	 mov	 rax, rbx

; 2221 : }

  00043	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00047	5b		 pop	 rbx
  00048	c3		 ret	 0
PyParser_SimpleParseStringFlagsFilename ENDP
_TEXT	ENDS
PUBLIC	PyParser_SimpleParseStringFilename
; Function compile flags: /Ogtpy
;	COMDAT PyParser_SimpleParseStringFilename
_TEXT	SEGMENT
str$ = 8
filename$ = 16
start$ = 24
PyParser_SimpleParseStringFilename PROC			; COMDAT

; 2226 :     return PyParser_SimpleParseStringFlagsFilename(str, filename, start, 0);

  00000	45 33 c9	 xor	 r9d, r9d

; 2227 : }

  00003	e9 00 00 00 00	 jmp	 PyParser_SimpleParseStringFlagsFilename
PyParser_SimpleParseStringFilename ENDP
_TEXT	ENDS
PUBLIC	PyParser_ClearError
; Function compile flags: /Ogtpy
;	COMDAT PyParser_ClearError
_TEXT	SEGMENT
err$ = 8
PyParser_ClearError PROC				; COMDAT

; 2235 :     err_free(err);
; 2236 : }

  00000	e9 00 00 00 00	 jmp	 err_free
PyParser_ClearError ENDP
_TEXT	ENDS
PUBLIC	PyParser_SetError
; Function compile flags: /Ogtpy
;	COMDAT PyParser_SetError
_TEXT	SEGMENT
err$ = 8
PyParser_SetError PROC					; COMDAT

; 2241 :     err_input(err);
; 2242 : }

  00000	e9 00 00 00 00	 jmp	 err_input
PyParser_SetError ENDP
_TEXT	ENDS
PUBLIC	Py_Exit
EXTRN	__imp_exit:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_Exit DD imagerel $LN4
	DD	imagerel $LN4+22
	DD	imagerel $unwind$Py_Exit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_Exit DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT Py_Exit
_TEXT	SEGMENT
sts$ = 48
Py_Exit	PROC						; COMDAT

; 2497 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	8b d9		 mov	 ebx, ecx

; 2498 :     Py_Finalize();

  00008	e8 00 00 00 00	 call	 Py_Finalize

; 2499 : 
; 2500 :     exit(sts);

  0000d	8b cb		 mov	 ecx, ebx
  0000f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  00015	cc		 int	 3
$LN3@Py_Exit:
Py_Exit	ENDP
_TEXT	ENDS
PUBLIC	PyParser_SimpleParseFile
; Function compile flags: /Ogtpy
;	COMDAT PyParser_SimpleParseFile
_TEXT	SEGMENT
fp$ = 8
filename$ = 16
start$ = 24
PyParser_SimpleParseFile PROC				; COMDAT

; 2669 :     return PyParser_SimpleParseFileFlags(fp, filename, start, 0);

  00000	45 33 c9	 xor	 r9d, r9d

; 2670 : }

  00003	e9 00 00 00 00	 jmp	 PyParser_SimpleParseFileFlags
PyParser_SimpleParseFile ENDP
_TEXT	ENDS
PUBLIC	PyParser_SimpleParseString
; Function compile flags: /Ogtpy
;	COMDAT PyParser_SimpleParseString
_TEXT	SEGMENT
str$ = 8
start$ = 16
PyParser_SimpleParseString PROC				; COMDAT

; 2676 :     return PyParser_SimpleParseStringFlags(str, start, 0);

  00000	45 33 c0	 xor	 r8d, r8d

; 2677 : }

  00003	e9 00 00 00 00	 jmp	 PyParser_SimpleParseStringFlags
PyParser_SimpleParseString ENDP
_TEXT	ENDS
EXTRN	PySys_WriteStderr:PROC
EXTRN	PyObject_Print:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$handle_system_exit DD imagerel handle_system_exit
	DD	imagerel handle_system_exit+35
	DD	imagerel $unwind$handle_system_exit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$handle_system_exit DD imagerel handle_system_exit+35
	DD	imagerel handle_system_exit+75
	DD	imagerel $chain$0$handle_system_exit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$handle_system_exit DD imagerel handle_system_exit+75
	DD	imagerel handle_system_exit+323
	DD	imagerel $chain$1$handle_system_exit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$handle_system_exit DD imagerel handle_system_exit+323
	DD	imagerel handle_system_exit+358
	DD	imagerel $chain$2$handle_system_exit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$handle_system_exit DD imagerel handle_system_exit+358
	DD	imagerel handle_system_exit+364
	DD	imagerel $chain$3$handle_system_exit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$handle_system_exit DD 021H
	DD	imagerel handle_system_exit
	DD	imagerel handle_system_exit+35
	DD	imagerel $unwind$handle_system_exit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$handle_system_exit DD 021H
	DD	imagerel handle_system_exit+35
	DD	imagerel handle_system_exit+75
	DD	imagerel $chain$0$handle_system_exit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$handle_system_exit DD 020521H
	DD	046405H
	DD	imagerel handle_system_exit+35
	DD	imagerel handle_system_exit+75
	DD	imagerel $chain$0$handle_system_exit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$handle_system_exit DD 020521H
	DD	053405H
	DD	imagerel handle_system_exit
	DD	imagerel handle_system_exit+35
	DD	imagerel $unwind$handle_system_exit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$handle_system_exit DD 020601H
	DD	070025206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT handle_system_exit
_TEXT	SEGMENT
value$ = 64
tb$ = 72
exception$ = 80
handle_system_exit PROC					; COMDAT

; 1630 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1631 :     PyObject *exception, *value, *tb;
; 1632 :     int exitcode = 0;

  00006	33 ff		 xor	 edi, edi

; 1633 : 
; 1634 :     if (Py_InspectFlag)

  00008	39 3d 00 00 00
	00		 cmp	 DWORD PTR Py_InspectFlag, edi
  0000e	0f 85 52 01 00
	00		 jne	 $LN11@handle_sys

; 1635 :         /* Don't exit if -i flag was given. This flag is set to 0
; 1636 :          * when entering interactive mode for inspecting. */
; 1637 :         return;
; 1638 : 
; 1639 :     PyErr_Fetch(&exception, &value, &tb);

  00014	4c 8d 44 24 48	 lea	 r8, QWORD PTR tb$[rsp]
  00019	48 8d 54 24 40	 lea	 rdx, QWORD PTR value$[rsp]
  0001e	48 8d 4c 24 50	 lea	 rcx, QWORD PTR exception$[rsp]
  00023	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  00028	e8 00 00 00 00	 call	 PyErr_Fetch

; 1640 :     fflush(stdout);

  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00033	48 8d 48 30	 lea	 rcx, QWORD PTR [rax+48]
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 1641 :     if (value == NULL || value == Py_None)

  0003d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR value$[rsp]
  00042	48 85 db	 test	 rbx, rbx
  00045	0f 84 f8 00 00
	00		 je	 $done$122929
  0004b	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  00050	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
  00057	48 3b de	 cmp	 rbx, rsi
  0005a	0f 84 de 00 00
	00		 je	 $LN14@handle_sys

; 1642 :         goto done;
; 1643 :     if (PyExceptionInstance_Check(value)) {

  00060	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00064	f7 80 00 01 00
	00 00 00 00 40	 test	 DWORD PTR [rax+256], 1073741824 ; 40000000H
  0006e	74 48		 je	 SHORT $LN5@handle_sys

; 1644 :         /* The error code should be in the `code' attribute. */
; 1645 :         _Py_IDENTIFIER(code);
; 1646 :         PyObject *code = _PyObject_GetAttrId(value, &PyId_code);

  00070	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00077	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00080	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_code@?2??handle_system_exit@@9@9
  00085	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00089	48 8b cb	 mov	 rcx, rbx
  0008c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00091	48 8b d8	 mov	 rbx, rax

; 1647 :         if (code) {

  00094	48 85 c0	 test	 rax, rax
  00097	74 1a		 je	 SHORT $LN13@handle_sys

; 1648 :             Py_DECREF(value);

  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  0009e	e8 00 00 00 00	 call	 _Py_DecRef

; 1649 :             value = code;

  000a3	48 89 5c 24 40	 mov	 QWORD PTR value$[rsp], rbx

; 1650 :             if (value == Py_None)

  000a8	48 3b de	 cmp	 rbx, rsi
  000ab	0f 84 8d 00 00
	00		 je	 $LN14@handle_sys
  000b1	eb 05		 jmp	 SHORT $LN5@handle_sys
$LN13@handle_sys:
  000b3	48 8b 5c 24 40	 mov	 rbx, QWORD PTR value$[rsp]
$LN5@handle_sys:

; 1651 :                 goto done;
; 1652 :         }
; 1653 :         /* If we failed to dig out the 'code' attribute,
; 1654 :            just let the else clause below print the error. */
; 1655 :     }
; 1656 :     if (PyLong_Check(value))

  000b8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000bc	f7 80 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rax+256], 16777216 ; 01000000H
  000c6	74 0c		 je	 SHORT $LN4@handle_sys

; 1657 :         exitcode = (int)PyLong_AsLong(value);

  000c8	48 8b cb	 mov	 rcx, rbx
  000cb	e8 00 00 00 00	 call	 PyLong_AsLong
  000d0	8b f8		 mov	 edi, eax

; 1658 :     else {

  000d2	eb 65		 jmp	 SHORT $LN16@handle_sys
$LN4@handle_sys:

; 1659 :         PyObject *sys_stderr = PySys_GetObject("stderr");

  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  000db	e8 00 00 00 00	 call	 PySys_GetObject

; 1660 :         if (sys_stderr != NULL && sys_stderr != Py_None) {

  000e0	48 85 c0	 test	 rax, rax
  000e3	74 1c		 je	 SHORT $LN2@handle_sys
  000e5	48 3b c6	 cmp	 rax, rsi
  000e8	74 17		 je	 SHORT $LN2@handle_sys

; 1661 :             PyFile_WriteObject(value, sys_stderr, Py_PRINT_RAW);

  000ea	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  000ef	bf 01 00 00 00	 mov	 edi, 1
  000f4	48 8b d0	 mov	 rdx, rax
  000f7	44 8b c7	 mov	 r8d, edi
  000fa	e8 00 00 00 00	 call	 PyFile_WriteObject

; 1662 :         } else {

  000ff	eb 2c		 jmp	 SHORT $LN1@handle_sys
$LN2@handle_sys:

; 1663 :             PyObject_Print(value, stderr, Py_PRINT_RAW);

  00101	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00107	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  0010c	bf 01 00 00 00	 mov	 edi, 1
  00111	48 8d 50 60	 lea	 rdx, QWORD PTR [rax+96]
  00115	44 8b c7	 mov	 r8d, edi
  00118	e8 00 00 00 00	 call	 PyObject_Print

; 1664 :             fflush(stderr);

  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00123	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00127	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush
$LN1@handle_sys:

; 1665 :         }
; 1666 :         PySys_WriteStderr("\n");

  0012d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00134	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN16@handle_sys:

; 1667 :         exitcode = 1;

  00139	48 8b 5c 24 40	 mov	 rbx, QWORD PTR value$[rsp]
$LN14@handle_sys:
  0013e	48 8b 74 24 20	 mov	 rsi, QWORD PTR [rsp+32]
$done$122929:

; 1668 :     }
; 1669 :  done:
; 1670 :     /* Restore and clear the exception info, in order to properly decref
; 1671 :      * the exception, value, and traceback.      If we just exit instead,
; 1672 :      * these leak, which confuses PYTHONDUMPREFS output, and may prevent
; 1673 :      * some finalizers from running.
; 1674 :      */
; 1675 :     PyErr_Restore(exception, value, tb);

  00143	4c 8b 44 24 48	 mov	 r8, QWORD PTR tb$[rsp]
  00148	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exception$[rsp]
  0014d	48 8b d3	 mov	 rdx, rbx
  00150	e8 00 00 00 00	 call	 PyErr_Restore

; 1676 :     PyErr_Clear();

  00155	e8 00 00 00 00	 call	 PyErr_Clear

; 1677 :     Py_Exit(exitcode);

  0015a	8b cf		 mov	 ecx, edi
  0015c	e8 00 00 00 00	 call	 Py_Exit
  00161	48 8b 5c 24 28	 mov	 rbx, QWORD PTR [rsp+40]
$LN11@handle_sys:

; 1678 :     /* NOTREACHED */
; 1679 : }

  00166	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0016a	5f		 pop	 rdi
  0016b	c3		 ret	 0
$LN15@handle_sys:
handle_system_exit ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@MEIMIMHC@sys?4excepthook?5is?5missing?6?$AA@ ; `string'
PUBLIC	??_C@_0BK@LFLHLMAE@?6Original?5exception?5was?3?6?$AA@ ; `string'
PUBLIC	??_C@_0BK@OEGNGKBF@Error?5in?5sys?4excepthook?3?6?$AA@ ; `string'
PUBLIC	??_C@_0L@NONONIOP@excepthook?$AA@		; `string'
PUBLIC	??_C@_0P@IGCACIDI@last_traceback?$AA@		; `string'
PUBLIC	??_C@_0L@IGFDBBEF@last_value?$AA@		; `string'
PUBLIC	??_C@_09NIIGAFC@last_type?$AA@			; `string'
PUBLIC	PyErr_PrintEx
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	PyTuple_Pack:PROC
EXTRN	PyErr_NormalizeException:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_SystemExit:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_PrintEx DD imagerel $LN46
	DD	imagerel $LN46+73
	DD	imagerel $unwind$PyErr_PrintEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyErr_PrintEx DD imagerel $LN46+73
	DD	imagerel $LN46+192
	DD	imagerel $chain$0$PyErr_PrintEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyErr_PrintEx DD imagerel $LN46+192
	DD	imagerel $LN46+579
	DD	imagerel $chain$1$PyErr_PrintEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyErr_PrintEx DD imagerel $LN46+579
	DD	imagerel $LN46+617
	DD	imagerel $chain$2$PyErr_PrintEx
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyErr_PrintEx DD imagerel $LN46+617
	DD	imagerel $LN46+624
	DD	imagerel $chain$3$PyErr_PrintEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyErr_PrintEx DD 021H
	DD	imagerel $LN46
	DD	imagerel $LN46+73
	DD	imagerel $unwind$PyErr_PrintEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyErr_PrintEx DD 021H
	DD	imagerel $LN46+73
	DD	imagerel $LN46+192
	DD	imagerel $chain$0$PyErr_PrintEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyErr_PrintEx DD 020521H
	DD	0a7405H
	DD	imagerel $LN46+73
	DD	imagerel $LN46+192
	DD	imagerel $chain$0$PyErr_PrintEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyErr_PrintEx DD 020521H
	DD	0e6405H
	DD	imagerel $LN46
	DD	imagerel $LN46+73
	DD	imagerel $unwind$PyErr_PrintEx
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_PrintEx DD 030a01H
	DD	03003a20aH
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0BL@MEIMIMHC@sys?4excepthook?5is?5missing?6?$AA@
CONST	SEGMENT
??_C@_0BL@MEIMIMHC@sys?4excepthook?5is?5missing?6?$AA@ DB 'sys.excepthook'
	DB	' is missing', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LFLHLMAE@?6Original?5exception?5was?3?6?$AA@
CONST	SEGMENT
??_C@_0BK@LFLHLMAE@?6Original?5exception?5was?3?6?$AA@ DB 0aH, 'Original '
	DB	'exception was:', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OEGNGKBF@Error?5in?5sys?4excepthook?3?6?$AA@
CONST	SEGMENT
??_C@_0BK@OEGNGKBF@Error?5in?5sys?4excepthook?3?6?$AA@ DB 'Error in sys.e'
	DB	'xcepthook:', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NONONIOP@excepthook?$AA@
CONST	SEGMENT
??_C@_0L@NONONIOP@excepthook?$AA@ DB 'excepthook', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IGCACIDI@last_traceback?$AA@
CONST	SEGMENT
??_C@_0P@IGCACIDI@last_traceback?$AA@ DB 'last_traceback', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IGFDBBEF@last_value?$AA@
CONST	SEGMENT
??_C@_0L@IGFDBBEF@last_value?$AA@ DB 'last_value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NIIGAFC@last_type?$AA@
CONST	SEGMENT
??_C@_09NIIGAFC@last_type?$AA@ DB 'last_type', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pythonrun.c
CONST	ENDS
;	COMDAT PyErr_PrintEx
_TEXT	SEGMENT
exception2$122973 = 48
v2$122974 = 56
tb2$122975 = 64
set_sys_last_vars$ = 112
tb$ = 120
exception$ = 128
v$ = 136
PyErr_PrintEx PROC					; COMDAT

; 1683 : {

$LN46:
  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	48 8b ec	 mov	 rbp, rsp
  00006	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0000a	8b d9		 mov	 ebx, ecx

; 1684 :     PyObject *exception, *v, *tb, *hook;
; 1685 : 
; 1686 :     if (PyErr_ExceptionMatches(PyExc_SystemExit)) {

  0000c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemExit
  00013	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00018	85 c0		 test	 eax, eax
  0001a	74 05		 je	 SHORT $LN35@PyErr_Prin

; 1687 :         handle_system_exit();

  0001c	e8 00 00 00 00	 call	 handle_system_exit
$LN35@PyErr_Prin:

; 1688 :     }
; 1689 :     PyErr_Fetch(&exception, &v, &tb);

  00021	4c 8d 45 20	 lea	 r8, QWORD PTR tb$[rbp-88]
  00025	48 8d 55 30	 lea	 rdx, QWORD PTR v$[rbp-88]
  00029	48 8d 4d 28	 lea	 rcx, QWORD PTR exception$[rbp-88]
  0002d	e8 00 00 00 00	 call	 PyErr_Fetch

; 1690 :     if (exception == NULL)

  00032	48 83 7d 28 00	 cmp	 QWORD PTR exception$[rbp-88], 0
  00037	0f 84 2c 02 00
	00		 je	 $LN2@PyErr_Prin

; 1691 :         return;
; 1692 :     PyErr_NormalizeException(&exception, &v, &tb);

  0003d	4c 8d 45 20	 lea	 r8, QWORD PTR tb$[rbp-88]
  00041	48 8d 55 30	 lea	 rdx, QWORD PTR v$[rbp-88]
  00045	48 8d 4d 28	 lea	 rcx, QWORD PTR exception$[rbp-88]
  00049	48 89 74 24 70	 mov	 QWORD PTR [rsp+112], rsi
  0004e	e8 00 00 00 00	 call	 PyErr_NormalizeException

; 1693 :     if (tb == NULL) {

  00053	48 83 7d 20 00	 cmp	 QWORD PTR tb$[rbp-88], 0
  00058	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
  0005f	75 45		 jne	 SHORT $LN43@PyErr_Prin

; 1694 :         tb = Py_None;

  00061	48 89 75 20	 mov	 QWORD PTR tb$[rbp-88], rsi

; 1695 :         Py_INCREF(tb);

  00065	e8 00 00 00 00	 call	 _Py_PXCTX
  0006a	85 c0		 test	 eax, eax
  0006c	75 38		 jne	 SHORT $LN43@PyErr_Prin
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0007c	4c 8b ce	 mov	 r9, rsi
  0007f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00085	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0008d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00092	85 c0		 test	 eax, eax
  00094	75 09		 jne	 SHORT $LN38@PyErr_Prin
  00096	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0009d	74 07		 je	 SHORT $LN43@PyErr_Prin
$LN38@PyErr_Prin:
  0009f	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN43@PyErr_Prin:

; 1696 :     }
; 1697 :     PyException_SetTraceback(v, tb);

  000a6	48 8b 55 20	 mov	 rdx, QWORD PTR tb$[rbp-88]
  000aa	48 8b 4d 30	 mov	 rcx, QWORD PTR v$[rbp-88]
  000ae	e8 00 00 00 00	 call	 PyException_SetTraceback

; 1698 :     if (exception == NULL)

  000b3	48 8b 55 28	 mov	 rdx, QWORD PTR exception$[rbp-88]
  000b7	48 85 d2	 test	 rdx, rdx
  000ba	0f 84 a4 01 00
	00		 je	 $LN44@PyErr_Prin

; 1699 :         return;
; 1700 :     /* Now we know v != NULL too */
; 1701 :     if (set_sys_last_vars) {

  000c0	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  000c5	85 db		 test	 ebx, ebx
  000c7	74 2c		 je	 SHORT $LN31@PyErr_Prin

; 1702 :         PySys_SetObject("last_type", exception);

  000c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09NIIGAFC@last_type?$AA@
  000d0	e8 00 00 00 00	 call	 PySys_SetObject

; 1703 :         PySys_SetObject("last_value", v);

  000d5	48 8b 55 30	 mov	 rdx, QWORD PTR v$[rbp-88]
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@IGFDBBEF@last_value?$AA@
  000e0	e8 00 00 00 00	 call	 PySys_SetObject

; 1704 :         PySys_SetObject("last_traceback", tb);

  000e5	48 8b 55 20	 mov	 rdx, QWORD PTR tb$[rbp-88]
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IGCACIDI@last_traceback?$AA@
  000f0	e8 00 00 00 00	 call	 PySys_SetObject
$LN31@PyErr_Prin:

; 1705 :     }
; 1706 :     hook = PySys_GetObject("excepthook");

  000f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@NONONIOP@excepthook?$AA@
  000fc	e8 00 00 00 00	 call	 PySys_GetObject
  00101	48 8b f8	 mov	 rdi, rax

; 1707 :     if (hook) {

  00104	48 85 c0	 test	 rax, rax
  00107	0f 84 0b 01 00
	00		 je	 $LN30@PyErr_Prin

; 1708 :         PyObject *args = PyTuple_Pack(3, exception, v, tb);

  0010d	4c 8b 4d 20	 mov	 r9, QWORD PTR tb$[rbp-88]
  00111	4c 8b 45 30	 mov	 r8, QWORD PTR v$[rbp-88]
  00115	48 8b 55 28	 mov	 rdx, QWORD PTR exception$[rbp-88]
  00119	b9 03 00 00 00	 mov	 ecx, 3
  0011e	e8 00 00 00 00	 call	 PyTuple_Pack

; 1709 :         PyObject *result = PyEval_CallObject(hook, args);

  00123	45 33 c0	 xor	 r8d, r8d
  00126	48 8b cf	 mov	 rcx, rdi
  00129	48 8b d0	 mov	 rdx, rax
  0012c	48 8b d8	 mov	 rbx, rax
  0012f	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords

; 1710 :         if (result == NULL) {

  00134	48 85 c0	 test	 rax, rax
  00137	0f 85 c4 00 00
	00		 jne	 $LN42@PyErr_Prin

; 1711 :             PyObject *exception2, *v2, *tb2;
; 1712 :             if (PyErr_ExceptionMatches(PyExc_SystemExit)) {

  0013d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemExit
  00144	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00149	85 c0		 test	 eax, eax
  0014b	74 05		 je	 SHORT $LN28@PyErr_Prin

; 1713 :                 handle_system_exit();

  0014d	e8 00 00 00 00	 call	 handle_system_exit
$LN28@PyErr_Prin:

; 1714 :             }
; 1715 :             PyErr_Fetch(&exception2, &v2, &tb2);

  00152	4c 8d 45 e8	 lea	 r8, QWORD PTR tb2$122975[rbp-88]
  00156	48 8d 55 e0	 lea	 rdx, QWORD PTR v2$122974[rbp-88]
  0015a	48 8d 4d d8	 lea	 rcx, QWORD PTR exception2$122973[rbp-88]
  0015e	e8 00 00 00 00	 call	 PyErr_Fetch

; 1716 :             PyErr_NormalizeException(&exception2, &v2, &tb2);

  00163	4c 8d 45 e8	 lea	 r8, QWORD PTR tb2$122975[rbp-88]
  00167	48 8d 55 e0	 lea	 rdx, QWORD PTR v2$122974[rbp-88]
  0016b	48 8d 4d d8	 lea	 rcx, QWORD PTR exception2$122973[rbp-88]
  0016f	e8 00 00 00 00	 call	 PyErr_NormalizeException

; 1717 :             /* It should not be possible for exception2 or v2
; 1718 :                to be NULL. However PyErr_Display() can't
; 1719 :                tolerate NULLs, so just be safe. */
; 1720 :             if (exception2 == NULL) {

  00174	48 83 7d d8 00	 cmp	 QWORD PTR exception2$122973[rbp-88], 0
  00179	75 0c		 jne	 SHORT $LN27@PyErr_Prin

; 1721 :                 exception2 = Py_None;
; 1722 :                 Py_INCREF(exception2);

  0017b	48 8b ce	 mov	 rcx, rsi
  0017e	48 89 75 d8	 mov	 QWORD PTR exception2$122973[rbp-88], rsi
  00182	e8 00 00 00 00	 call	 _Py_IncRef
$LN27@PyErr_Prin:

; 1723 :             }
; 1724 :             if (v2 == NULL) {

  00187	48 83 7d e0 00	 cmp	 QWORD PTR v2$122974[rbp-88], 0
  0018c	75 0c		 jne	 SHORT $LN26@PyErr_Prin

; 1725 :                 v2 = Py_None;
; 1726 :                 Py_INCREF(v2);

  0018e	48 8b ce	 mov	 rcx, rsi
  00191	48 89 75 e0	 mov	 QWORD PTR v2$122974[rbp-88], rsi
  00195	e8 00 00 00 00	 call	 _Py_IncRef
$LN26@PyErr_Prin:

; 1727 :             }
; 1728 :             fflush(stdout);

  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  001a0	48 8d 48 30	 lea	 rcx, QWORD PTR [rax+48]
  001a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 1729 :             PySys_WriteStderr("Error in sys.excepthook:\n");

  001aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@OEGNGKBF@Error?5in?5sys?4excepthook?3?6?$AA@
  001b1	e8 00 00 00 00	 call	 PySys_WriteStderr

; 1730 :             PyErr_Display(exception2, v2, tb2);

  001b6	4c 8b 45 e8	 mov	 r8, QWORD PTR tb2$122975[rbp-88]
  001ba	48 8b 55 e0	 mov	 rdx, QWORD PTR v2$122974[rbp-88]
  001be	48 8b 4d d8	 mov	 rcx, QWORD PTR exception2$122973[rbp-88]
  001c2	e8 00 00 00 00	 call	 PyErr_Display

; 1731 :             PySys_WriteStderr("\nOriginal exception was:\n");

  001c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@LFLHLMAE@?6Original?5exception?5was?3?6?$AA@
  001ce	e8 00 00 00 00	 call	 PySys_WriteStderr

; 1732 :             PyErr_Display(exception, v, tb);

  001d3	4c 8b 45 20	 mov	 r8, QWORD PTR tb$[rbp-88]
  001d7	48 8b 55 30	 mov	 rdx, QWORD PTR v$[rbp-88]
  001db	48 8b 4d 28	 mov	 rcx, QWORD PTR exception$[rbp-88]
  001df	e8 00 00 00 00	 call	 PyErr_Display

; 1733 :             Py_DECREF(exception2);

  001e4	48 8b 4d d8	 mov	 rcx, QWORD PTR exception2$122973[rbp-88]
  001e8	e8 00 00 00 00	 call	 _Py_DecRef

; 1734 :             Py_DECREF(v2);

  001ed	48 8b 4d e0	 mov	 rcx, QWORD PTR v2$122974[rbp-88]
  001f1	e8 00 00 00 00	 call	 _Py_DecRef

; 1735 :             Py_XDECREF(tb2);

  001f6	48 8b 4d e8	 mov	 rcx, QWORD PTR tb2$122975[rbp-88]
  001fa	48 85 c9	 test	 rcx, rcx
  001fd	74 0a		 je	 SHORT $LN20@PyErr_Prin

; 1736 :         }
; 1737 :         Py_XDECREF(result);

  001ff	eb 03		 jmp	 SHORT $LN45@PyErr_Prin
$LN42@PyErr_Prin:
  00201	48 8b c8	 mov	 rcx, rax
$LN45@PyErr_Prin:
  00204	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@PyErr_Prin:

; 1738 :         Py_XDECREF(args);

  00209	48 85 db	 test	 rbx, rbx
  0020c	74 27		 je	 SHORT $LN12@PyErr_Prin
  0020e	48 8b cb	 mov	 rcx, rbx
  00211	e8 00 00 00 00	 call	 _Py_DecRef

; 1739 :     } else {

  00216	eb 1d		 jmp	 SHORT $LN12@PyErr_Prin
$LN30@PyErr_Prin:

; 1740 :         PySys_WriteStderr("sys.excepthook is missing\n");

  00218	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@MEIMIMHC@sys?4excepthook?5is?5missing?6?$AA@
  0021f	e8 00 00 00 00	 call	 PySys_WriteStderr

; 1741 :         PyErr_Display(exception, v, tb);

  00224	4c 8b 45 20	 mov	 r8, QWORD PTR tb$[rbp-88]
  00228	48 8b 55 30	 mov	 rdx, QWORD PTR v$[rbp-88]
  0022c	48 8b 4d 28	 mov	 rcx, QWORD PTR exception$[rbp-88]
  00230	e8 00 00 00 00	 call	 PyErr_Display
$LN12@PyErr_Prin:

; 1742 :     }
; 1743 :     Py_XDECREF(exception);

  00235	48 8b 4d 28	 mov	 rcx, QWORD PTR exception$[rbp-88]
  00239	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  0023e	48 85 c9	 test	 rcx, rcx
  00241	74 05		 je	 SHORT $LN11@PyErr_Prin
  00243	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@PyErr_Prin:

; 1744 :     Py_XDECREF(v);

  00248	48 8b 4d 30	 mov	 rcx, QWORD PTR v$[rbp-88]
  0024c	48 85 c9	 test	 rcx, rcx
  0024f	74 05		 je	 SHORT $LN7@PyErr_Prin
  00251	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@PyErr_Prin:

; 1745 :     Py_XDECREF(tb);

  00256	48 8b 4d 20	 mov	 rcx, QWORD PTR tb$[rbp-88]
  0025a	48 85 c9	 test	 rcx, rcx
  0025d	74 05		 je	 SHORT $LN44@PyErr_Prin
  0025f	e8 00 00 00 00	 call	 _Py_DecRef
$LN44@PyErr_Prin:
  00264	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
$LN2@PyErr_Prin:

; 1746 : }

  00269	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0026d	5b		 pop	 rbx
  0026e	5d		 pop	 rbp
  0026f	c3		 ret	 0
PyErr_PrintEx ENDP
_TEXT	ENDS
PUBLIC	PyRun_StringFlags
EXTRN	PyArena_Free:PROC
EXTRN	PyArena_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_StringFlags DD imagerel $LN5
	DD	imagerel $LN5+51
	DD	imagerel $unwind$PyRun_StringFlags
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyRun_StringFlags DD imagerel $LN5+51
	DD	imagerel $LN5+142
	DD	imagerel $chain$0$PyRun_StringFlags
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyRun_StringFlags DD imagerel $LN5+142
	DD	imagerel $LN5+167
	DD	imagerel $chain$1$PyRun_StringFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyRun_StringFlags DD 021H
	DD	imagerel $LN5
	DD	imagerel $LN5+51
	DD	imagerel $unwind$PyRun_StringFlags
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyRun_StringFlags DD 020521H
	DD	0ae405H
	DD	imagerel $LN5
	DD	imagerel $LN5+51
	DD	imagerel $unwind$PyRun_StringFlags
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_StringFlags DD 0a1801H
	DD	0d6418H
	DD	0c5418H
	DD	0b3418H
	DD	0d0145218H
	DD	07010c012H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyRun_StringFlags
_TEXT	SEGMENT
str$ = 80
start$ = 88
globals$ = 96
locals$ = 104
flags$ = 112
PyRun_StringFlags PROC					; COMDAT

; 1949 : {

$LN5:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00018	49 8b f1	 mov	 rsi, r9
  0001b	49 8b e8	 mov	 rbp, r8
  0001e	44 8b e2	 mov	 r12d, edx
  00021	4c 8b e9	 mov	 r13, rcx

; 1950 :     PyObject *ret = NULL;

  00024	33 ff		 xor	 edi, edi

; 1951 :     mod_ty mod;
; 1952 :     PyArena *arena = PyArena_New();

  00026	e8 00 00 00 00	 call	 PyArena_New
  0002b	48 8b d8	 mov	 rbx, rax

; 1953 :     if (arena == NULL)

  0002e	48 85 c0	 test	 rax, rax
  00031	74 5b		 je	 SHORT $LN3@PyRun_Stri
$LN2@PyRun_Stri:
  00033	4c 89 74 24 50	 mov	 QWORD PTR [rsp+80], r14

; 1954 :         return NULL;
; 1955 : 
; 1956 :     mod = PyParser_ASTFromString(str, "<string>", start, flags, arena);

  00038	4c 8b 74 24 70	 mov	 r14, QWORD PTR flags$[rsp]
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@
  00044	45 8b c4	 mov	 r8d, r12d
  00047	49 8b cd	 mov	 rcx, r13
  0004a	4d 8b ce	 mov	 r9, r14
  0004d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00052	e8 00 00 00 00	 call	 PyParser_ASTFromString

; 1957 :     if (mod != NULL)

  00057	48 85 c0	 test	 rax, rax
  0005a	74 22		 je	 SHORT $LN1@PyRun_Stri

; 1958 :         ret = run_mod(mod, "<string>", globals, locals, flags, arena);

  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@
  00063	4c 8b ce	 mov	 r9, rsi
  00066	4c 8b c5	 mov	 r8, rbp
  00069	48 8b c8	 mov	 rcx, rax
  0006c	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  00071	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  00076	e8 00 00 00 00	 call	 run_mod
  0007b	48 8b f8	 mov	 rdi, rax
$LN1@PyRun_Stri:

; 1959 :     PyArena_Free(arena);

  0007e	48 8b cb	 mov	 rcx, rbx
  00081	e8 00 00 00 00	 call	 PyArena_Free
  00086	4c 8b 74 24 50	 mov	 r14, QWORD PTR [rsp+80]

; 1960 :     return ret;

  0008b	48 8b c7	 mov	 rax, rdi
$LN3@PyRun_Stri:

; 1961 : }

  0008e	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00093	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  00098	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  0009d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a1	41 5d		 pop	 r13
  000a3	41 5c		 pop	 r12
  000a5	5f		 pop	 rdi
  000a6	c3		 ret	 0
PyRun_StringFlags ENDP
_TEXT	ENDS
PUBLIC	PyRun_FileExFlags
EXTRN	__imp_fclose:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_FileExFlags DD imagerel $LN7
	DD	imagerel $LN7+54
	DD	imagerel $unwind$PyRun_FileExFlags
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyRun_FileExFlags DD imagerel $LN7+54
	DD	imagerel $LN7+194
	DD	imagerel $chain$0$PyRun_FileExFlags
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyRun_FileExFlags DD imagerel $LN7+194
	DD	imagerel $LN7+216
	DD	imagerel $chain$1$PyRun_FileExFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyRun_FileExFlags DD 021H
	DD	imagerel $LN7
	DD	imagerel $LN7+54
	DD	imagerel $unwind$PyRun_FileExFlags
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyRun_FileExFlags DD 020521H
	DD	0ed405H
	DD	imagerel $LN7
	DD	imagerel $LN7+54
	DD	imagerel $unwind$PyRun_FileExFlags
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_FileExFlags DD 081201H
	DD	0105412H
	DD	0f3412H
	DD	0c00e9212H
	DD	0600b700cH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyRun_FileExFlags
_TEXT	SEGMENT
fp$ = 112
filename$ = 120
start$ = 128
globals$ = 136
locals$ = 144
closeit$ = 152
flags$ = 160
PyRun_FileExFlags PROC					; COMDAT

; 1966 : {

$LN7:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00012	4d 8b e1	 mov	 r12, r9
  00015	41 8b f0	 mov	 esi, r8d
  00018	48 8b ea	 mov	 rbp, rdx
  0001b	48 8b d9	 mov	 rbx, rcx

; 1967 :     PyObject *ret;
; 1968 :     mod_ty mod;
; 1969 :     PyArena *arena = PyArena_New();

  0001e	e8 00 00 00 00	 call	 PyArena_New
  00023	48 8b f8	 mov	 rdi, rax

; 1970 :     if (arena == NULL)

  00026	48 85 c0	 test	 rax, rax
  00029	0f 84 93 00 00
	00		 je	 $LN4@PyRun_File
$LN3@PyRun_File:

; 1971 :         return NULL;
; 1972 : 
; 1973 :     mod = PyParser_ASTFromFile(fp, filename, NULL, start, 0, 0,
; 1974 :                                flags, NULL, arena);

  0002f	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00034	33 c0		 xor	 eax, eax
  00036	4c 89 6c 24 70	 mov	 QWORD PTR [rsp+112], r13
  0003b	4c 8b ac 24 a0
	00 00 00	 mov	 r13, QWORD PTR flags$[rsp]
  00043	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00048	44 8b ce	 mov	 r9d, esi
  0004b	4c 89 6c 24 30	 mov	 QWORD PTR [rsp+48], r13
  00050	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00055	45 33 c0	 xor	 r8d, r8d
  00058	48 8b d5	 mov	 rdx, rbp
  0005b	48 8b cb	 mov	 rcx, rbx
  0005e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00063	e8 00 00 00 00	 call	 PyParser_ASTFromFile

; 1975 :     if (closeit)

  00068	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR closeit$[rsp], 0
  00070	48 8b f0	 mov	 rsi, rax
  00073	74 09		 je	 SHORT $LN2@PyRun_File

; 1976 :         fclose(fp);

  00075	48 8b cb	 mov	 rcx, rbx
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
$LN2@PyRun_File:

; 1977 :     if (mod == NULL) {

  0007e	48 85 f6	 test	 rsi, rsi
  00081	75 0c		 jne	 SHORT $LN1@PyRun_File

; 1978 :         PyArena_Free(arena);

  00083	48 8b cf	 mov	 rcx, rdi
  00086	e8 00 00 00 00	 call	 PyArena_Free

; 1979 :         return NULL;

  0008b	33 c0		 xor	 eax, eax
  0008d	eb 2e		 jmp	 SHORT $LN6@PyRun_File
$LN1@PyRun_File:

; 1980 :     }
; 1981 :     ret = run_mod(mod, filename, globals, locals, flags, arena);

  0008f	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR locals$[rsp]
  00097	4d 8b c4	 mov	 r8, r12
  0009a	48 8b d5	 mov	 rdx, rbp
  0009d	48 8b ce	 mov	 rcx, rsi
  000a0	48 89 7c 24 28	 mov	 QWORD PTR [rsp+40], rdi
  000a5	4c 89 6c 24 20	 mov	 QWORD PTR [rsp+32], r13
  000aa	e8 00 00 00 00	 call	 run_mod

; 1982 :     PyArena_Free(arena);

  000af	48 8b cf	 mov	 rcx, rdi
  000b2	48 8b d8	 mov	 rbx, rax
  000b5	e8 00 00 00 00	 call	 PyArena_Free

; 1983 :     return ret;

  000ba	48 8b c3	 mov	 rax, rbx
$LN6@PyRun_File:
  000bd	4c 8b 6c 24 70	 mov	 r13, QWORD PTR [rsp+112]
$LN4@PyRun_File:

; 1984 : }

  000c2	48 8b 5c 24 78	 mov	 rbx, QWORD PTR [rsp+120]
  000c7	48 8b ac 24 80
	00 00 00	 mov	 rbp, QWORD PTR [rsp+128]
  000cf	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000d3	41 5c		 pop	 r12
  000d5	5f		 pop	 rdi
  000d6	5e		 pop	 rsi
  000d7	c3		 ret	 0
PyRun_FileExFlags ENDP
_TEXT	ENDS
PUBLIC	Py_CompileStringExFlags
EXTRN	PyAST_mod2obj:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_CompileStringExFlags DD imagerel $LN8
	DD	imagerel $LN8+178
	DD	imagerel $unwind$Py_CompileStringExFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_CompileStringExFlags DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0c016521aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT Py_CompileStringExFlags
_TEXT	SEGMENT
str$ = 64
filename$ = 72
start$ = 80
flags$ = 88
optimize$ = 96
Py_CompileStringExFlags PROC				; COMDAT

; 2066 : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0001a	49 8b d9	 mov	 rbx, r9
  0001d	41 8b f0	 mov	 esi, r8d
  00020	4c 8b e2	 mov	 r12, rdx
  00023	48 8b e9	 mov	 rbp, rcx

; 2067 :     PyCodeObject *co;
; 2068 :     mod_ty mod;
; 2069 :     PyArena *arena = PyArena_New();

  00026	e8 00 00 00 00	 call	 PyArena_New
  0002b	48 8b f8	 mov	 rdi, rax

; 2070 :     if (arena == NULL)

  0002e	48 85 c0	 test	 rax, rax

; 2071 :         return NULL;

  00031	74 23		 je	 SHORT $LN7@Py_Compile

; 2072 : 
; 2073 :     mod = PyParser_ASTFromString(str, filename, start, flags, arena);

  00033	4c 8b cb	 mov	 r9, rbx
  00036	44 8b c6	 mov	 r8d, esi
  00039	49 8b d4	 mov	 rdx, r12
  0003c	48 8b cd	 mov	 rcx, rbp
  0003f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00044	e8 00 00 00 00	 call	 PyParser_ASTFromString

; 2074 :     if (mod == NULL) {

  00049	48 85 c0	 test	 rax, rax
  0004c	75 0c		 jne	 SHORT $LN2@Py_Compile

; 2075 :         PyArena_Free(arena);

  0004e	48 8b cf	 mov	 rcx, rdi
  00051	e8 00 00 00 00	 call	 PyArena_Free
$LN7@Py_Compile:

; 2076 :         return NULL;

  00056	33 c0		 xor	 eax, eax
  00058	eb 3d		 jmp	 SHORT $LN4@Py_Compile
$LN2@Py_Compile:

; 2077 :     }
; 2078 :     if (flags && (flags->cf_flags & PyCF_ONLY_AST)) {

  0005a	48 85 db	 test	 rbx, rbx
  0005d	74 12		 je	 SHORT $LN1@Py_Compile
  0005f	f7 03 00 04 00
	00		 test	 DWORD PTR [rbx], 1024	; 00000400H
  00065	74 0a		 je	 SHORT $LN1@Py_Compile

; 2079 :         PyObject *result = PyAST_mod2obj(mod);

  00067	48 8b c8	 mov	 rcx, rax
  0006a	e8 00 00 00 00	 call	 PyAST_mod2obj

; 2080 :         PyArena_Free(arena);
; 2081 :         return result;

  0006f	eb 18		 jmp	 SHORT $LN6@Py_Compile
$LN1@Py_Compile:

; 2082 :     }
; 2083 :     co = PyAST_CompileEx(mod, filename, flags, optimize, arena);

  00071	44 8b 4c 24 60	 mov	 r9d, DWORD PTR optimize$[rsp]
  00076	4c 8b c3	 mov	 r8, rbx
  00079	49 8b d4	 mov	 rdx, r12
  0007c	48 8b c8	 mov	 rcx, rax
  0007f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00084	e8 00 00 00 00	 call	 PyAST_CompileEx
$LN6@Py_Compile:

; 2084 :     PyArena_Free(arena);

  00089	48 8b cf	 mov	 rcx, rdi
  0008c	48 8b d8	 mov	 rbx, rax
  0008f	e8 00 00 00 00	 call	 PyArena_Free

; 2085 :     return (PyObject *)co;

  00094	48 8b c3	 mov	 rax, rbx
$LN4@Py_Compile:

; 2086 : }

  00097	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0009c	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000a1	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000a6	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  000ab	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000af	41 5c		 pop	 r12
  000b1	c3		 ret	 0
Py_CompileStringExFlags ENDP
_TEXT	ENDS
PUBLIC	PyCompileString
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCompileString DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$PyCompileString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCompileString DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyCompileString
_TEXT	SEGMENT
str$ = 64
filename$ = 72
start$ = 80
PyCompileString PROC					; COMDAT

; 2092 : {

$LN3:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2093 :     return Py_CompileStringFlags(str, filename, start, NULL);

  00004	45 33 c9	 xor	 r9d, r9d
  00007	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  0000f	e8 00 00 00 00	 call	 Py_CompileStringExFlags

; 2094 : }

  00014	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00018	c3		 ret	 0
PyCompileString ENDP
_TEXT	ENDS
PUBLIC	Py_SymtableString
EXTRN	PySymtable_Build:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_SymtableString DD imagerel $LN6
	DD	imagerel $LN6+140
	DD	imagerel $unwind$Py_SymtableString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_SymtableString DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT Py_SymtableString
_TEXT	SEGMENT
str$ = 64
filename$ = 72
start$ = 80
flags$ = 88
Py_SymtableString PROC					; COMDAT

; 2098 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	41 8b f0	 mov	 esi, r8d
  00017	48 8b da	 mov	 rbx, rdx
  0001a	48 8b e9	 mov	 rbp, rcx

; 2099 :     struct symtable *st;
; 2100 :     mod_ty mod;
; 2101 :     PyCompilerFlags flags;
; 2102 :     PyArena *arena = PyArena_New();

  0001d	e8 00 00 00 00	 call	 PyArena_New
  00022	48 8b f8	 mov	 rdi, rax

; 2103 :     if (arena == NULL)

  00025	48 85 c0	 test	 rax, rax

; 2104 :         return NULL;

  00028	74 2d		 je	 SHORT $LN5@Py_Symtabl

; 2105 : 
; 2106 :     flags.cf_flags = 0;
; 2107 :     mod = PyParser_ASTFromString(str, filename, start, &flags, arena);

  0002a	4c 8d 4c 24 58	 lea	 r9, QWORD PTR flags$[rsp]
  0002f	44 8b c6	 mov	 r8d, esi
  00032	48 8b d3	 mov	 rdx, rbx
  00035	48 8b cd	 mov	 rcx, rbp
  00038	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR flags$[rsp], 0
  00040	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00045	e8 00 00 00 00	 call	 PyParser_ASTFromString

; 2108 :     if (mod == NULL) {

  0004a	48 85 c0	 test	 rax, rax
  0004d	75 0c		 jne	 SHORT $LN1@Py_Symtabl

; 2109 :         PyArena_Free(arena);

  0004f	48 8b cf	 mov	 rcx, rdi
  00052	e8 00 00 00 00	 call	 PyArena_Free
$LN5@Py_Symtabl:

; 2110 :         return NULL;

  00057	33 c0		 xor	 eax, eax
  00059	eb 1c		 jmp	 SHORT $LN3@Py_Symtabl
$LN1@Py_Symtabl:

; 2111 :     }
; 2112 :     st = PySymtable_Build(mod, filename, 0);

  0005b	45 33 c0	 xor	 r8d, r8d
  0005e	48 8b d3	 mov	 rdx, rbx
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 PySymtable_Build

; 2113 :     PyArena_Free(arena);

  00069	48 8b cf	 mov	 rcx, rdi
  0006c	48 8b d8	 mov	 rbx, rax
  0006f	e8 00 00 00 00	 call	 PyArena_Free

; 2114 :     return st;

  00074	48 8b c3	 mov	 rax, rbx
$LN3@Py_Symtabl:

; 2115 : }

  00077	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0007c	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00081	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00086	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008a	5f		 pop	 rdi
  0008b	c3		 ret	 0
Py_SymtableString ENDP
_TEXT	ENDS
PUBLIC	??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@		; `string'
PUBLIC	??_C@_1CK@FEEIBFIN@?$AAF?$AAa?$AAt?$AAa?$AAl?$AA?5?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BI@MGCCOBGK@Fatal?5Python?5error?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	Py_FatalError
EXTRN	__imp_abort:PROC
EXTRN	__imp_OutputDebugStringW:PROC
EXTRN	_Py_DumpTracebackThreads:PROC
EXTRN	__imp_fputc:PROC
EXTRN	__chkstk:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_FatalError DD imagerel $LN12
	DD	imagerel $LN12+315
	DD	imagerel $unwind$Py_FatalError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_FatalError DD 025091701H
	DD	087417H
	DD	076413H
	DD	06340fH
	DD	03206230bH
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@ DB 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@FEEIBFIN@?$AAF?$AAa?$AAt?$AAa?$AAl?$AA?5?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@FEEIBFIN@?$AAF?$AAa?$AAt?$AAa?$AAl?$AA?5?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AA?$AA@ DB 'F'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 'P', 00H
	DB	'y', 00H, 't', 00H, 'h', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'e'
	DB	00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ':', 00H, ' ', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MGCCOBGK@Fatal?5Python?5error?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BI@MGCCOBGK@Fatal?5Python?5error?3?5?$CFs?6?$AA@ DB 'Fatal Python '
	DB	'error: %s', 0aH, 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT Py_FatalError
_TEXT	SEGMENT
msg$ = 16
Py_FatalError PROC					; COMDAT

; 2379 : {

$LN12:
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000b	48 89 5d 10	 mov	 QWORD PTR [rbp+16], rbx
  0000f	48 89 75 18	 mov	 QWORD PTR [rbp+24], rsi
  00013	48 89 7d 20	 mov	 QWORD PTR [rbp+32], rdi
  00017	48 8b d9	 mov	 rbx, rcx

; 2380 :     const int fd = fileno(stderr);

  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00020	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  0002a	8b f0		 mov	 esi, eax

; 2381 :     PyThreadState *tstate;
; 2382 : 
; 2383 :     fprintf(stderr, "Fatal Python error: %s\n", msg);

  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@MGCCOBGK@Fatal?5Python?5error?3?5?$CFs?6?$AA@
  00039	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  0003d	4c 8b c3	 mov	 r8, rbx
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 2384 :     fflush(stderr); /* it helps in Windows debug build */

  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0004c	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 2385 :     if (PyErr_Occurred()) {

  00056	e8 00 00 00 00	 call	 PyErr_Occurred
  0005b	48 85 c0	 test	 rax, rax
  0005e	74 09		 je	 SHORT $LN6@Py_FatalEr

; 2386 :         PyErr_PrintEx(0);

  00060	33 c9		 xor	 ecx, ecx
  00062	e8 00 00 00 00	 call	 PyErr_PrintEx

; 2387 :     }
; 2388 :     else {

  00067	eb 44		 jmp	 SHORT $LN5@Py_FatalEr
$LN6@Py_FatalEr:

; 2389 :         tstate = _Py_atomic_load_relaxed(&_PyThreadState_Current);

  00069	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR _PyThreadState_Current

; 2390 :         if (tstate != NULL) {

  00070	48 85 ff	 test	 rdi, rdi
  00073	74 33		 je	 SHORT $LN4@Py_FatalEr

; 2391 :             fputc('\n', stderr);

  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0007b	b9 0a 00 00 00	 mov	 ecx, 10
  00080	48 8d 50 60	 lea	 rdx, QWORD PTR [rax+96]
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fputc

; 2392 :             fflush(stderr);

  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00090	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 2393 :             _Py_DumpTracebackThreads(fd, tstate->interp, tstate);

  0009a	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  0009e	4c 8b c7	 mov	 r8, rdi
  000a1	8b ce		 mov	 ecx, esi
  000a3	e8 00 00 00 00	 call	 _Py_DumpTracebackThreads
$LN4@Py_FatalEr:

; 2394 :         }
; 2395 :         _PyFaulthandler_Fini();

  000a8	e8 00 00 00 00	 call	 _PyFaulthandler_Fini
$LN5@Py_FatalEr:

; 2396 :     }
; 2397 : 
; 2398 : #ifdef MS_WINDOWS
; 2399 :     {
; 2400 :         size_t len = strlen(msg);

  000ad	48 83 c9 ff	 or	 rcx, -1
  000b1	33 c0		 xor	 eax, eax
  000b3	48 8b fb	 mov	 rdi, rbx
  000b6	f2 ae		 repne scasb
  000b8	48 f7 d1	 not	 rcx
  000bb	48 ff c9	 dec	 rcx

; 2401 :         WCHAR* buffer;
; 2402 :         size_t i;
; 2403 : 
; 2404 :         /* Convert the message to wchar_t. This uses a simple one-to-one
; 2405 :         conversion, assuming that the this error message actually uses ASCII
; 2406 :         only. If this ceases to be true, we will have to convert. */
; 2407 :         buffer = alloca( (len+1) * (sizeof *buffer));

  000be	48 8d 44 09 02	 lea	 rax, QWORD PTR [rcx+rcx+2]
  000c3	48 8d 50 0f	 lea	 rdx, QWORD PTR [rax+15]
  000c7	48 3b d0	 cmp	 rdx, rax
  000ca	77 0a		 ja	 SHORT $LN11@Py_FatalEr
  000cc	48 ba f0 ff ff
	ff ff ff ff 0f	 mov	 rdx, 1152921504606846960 ; 0ffffffffffffff0H
$LN11@Py_FatalEr:
  000d6	48 83 e2 f0	 and	 rdx, -16
  000da	48 8b c2	 mov	 rax, rdx
  000dd	e8 00 00 00 00	 call	 __chkstk
  000e2	48 2b e2	 sub	 rsp, rdx

; 2408 :         for( i=0; i<=len; ++i)

  000e5	33 d2		 xor	 edx, edx
  000e7	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  000ec	0f 1f 40 00	 npad	 4
$LL3@Py_FatalEr:

; 2409 :             buffer[i] = msg[i];

  000f0	0f be 04 1a	 movsx	 eax, BYTE PTR [rdx+rbx]
  000f4	48 ff c2	 inc	 rdx
  000f7	66 89 44 57 fe	 mov	 WORD PTR [rdi+rdx*2-2], ax
  000fc	48 3b d1	 cmp	 rdx, rcx
  000ff	76 ef		 jbe	 SHORT $LL3@Py_FatalEr

; 2410 :         OutputDebugStringW(L"Fatal Python error: ");

  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FEEIBFIN@?$AAF?$AAa?$AAt?$AAa?$AAl?$AA?5?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AA?$AA@
  00108	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringW

; 2411 :         OutputDebugStringW(buffer);

  0010e	48 8b cf	 mov	 rcx, rdi
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringW

; 2412 :         OutputDebugStringW(L"\n");

  00117	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
  0011e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringW

; 2413 :     }
; 2414 : #ifdef _DEBUG
; 2415 :     DebugBreak();
; 2416 : #endif
; 2417 : #endif /* MS_WINDOWS */
; 2418 :     abort();

  00124	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_abort

; 2419 : }

  0012a	48 8b 5d 10	 mov	 rbx, QWORD PTR [rbp+16]
  0012e	48 8b 75 18	 mov	 rsi, QWORD PTR [rbp+24]
  00132	48 8b 7d 20	 mov	 rdi, QWORD PTR [rbp+32]
  00136	48 8b e5	 mov	 rsp, rbp
  00139	5d		 pop	 rbp
  0013a	c3		 ret	 0
Py_FatalError ENDP
_TEXT	ENDS
PUBLIC	PyRun_File
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_File DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$PyRun_File
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_File DD 010401H
	DD	08204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyRun_File
_TEXT	SEGMENT
fp$ = 80
p$ = 88
s$ = 96
g$ = 104
l$ = 112
PyRun_File PROC						; COMDAT

; 2703 : {

$LN3:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2704 :     return PyRun_FileExFlags(fp, p, s, g, l, 0, NULL);

  00004	33 c0		 xor	 eax, eax
  00006	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0000b	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0000f	48 8b 44 24 70	 mov	 rax, QWORD PTR l$[rsp]
  00014	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00019	e8 00 00 00 00	 call	 PyRun_FileExFlags

; 2705 : }

  0001e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00022	c3		 ret	 0
PyRun_File ENDP
_TEXT	ENDS
PUBLIC	PyRun_FileEx
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_FileEx DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$PyRun_FileEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_FileEx DD 010401H
	DD	08204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyRun_FileEx
_TEXT	SEGMENT
fp$ = 80
p$ = 88
s$ = 96
g$ = 104
l$ = 112
c$ = 120
PyRun_FileEx PROC					; COMDAT

; 2710 : {

$LN3:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2711 :     return PyRun_FileExFlags(fp, p, s, g, l, c, NULL);

  00004	8b 44 24 78	 mov	 eax, DWORD PTR c$[rsp]
  00008	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00011	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00015	48 8b 44 24 70	 mov	 rax, QWORD PTR l$[rsp]
  0001a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0001f	e8 00 00 00 00	 call	 PyRun_FileExFlags

; 2712 : }

  00024	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00028	c3		 ret	 0
PyRun_FileEx ENDP
_TEXT	ENDS
PUBLIC	PyRun_FileFlags
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_FileFlags DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$PyRun_FileFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_FileFlags DD 010401H
	DD	08204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyRun_FileFlags
_TEXT	SEGMENT
fp$ = 80
p$ = 88
s$ = 96
g$ = 104
l$ = 112
flags$ = 120
PyRun_FileFlags PROC					; COMDAT

; 2718 : {

$LN3:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2719 :     return PyRun_FileExFlags(fp, p, s, g, l, 0, flags);

  00004	48 8b 44 24 78	 mov	 rax, QWORD PTR flags$[rsp]
  00009	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR l$[rsp]
  00013	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0001b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00020	e8 00 00 00 00	 call	 PyRun_FileExFlags

; 2720 : }

  00025	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00029	c3		 ret	 0
PyRun_FileFlags ENDP
_TEXT	ENDS
PUBLIC	PyRun_String
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_String DD imagerel $LN3
	DD	imagerel $LN3+23
	DD	imagerel $unwind$PyRun_String
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_String DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyRun_String
_TEXT	SEGMENT
str$ = 64
s$ = 72
g$ = 80
l$ = 88
PyRun_String PROC					; COMDAT

; 2740 : {

$LN3:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2741 :     return PyRun_StringFlags(str, s, g, l, NULL);

  00004	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0000d	e8 00 00 00 00	 call	 PyRun_StringFlags

; 2742 : }

  00012	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00016	c3		 ret	 0
PyRun_String ENDP
_TEXT	ENDS
PUBLIC	Py_CompileString
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_CompileString DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$Py_CompileString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_CompileString DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT Py_CompileString
_TEXT	SEGMENT
str$ = 64
p$ = 72
s$ = 80
Py_CompileString PROC					; COMDAT

; 2754 : {

$LN3:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2755 :     return Py_CompileStringExFlags(str, p, s, NULL, -1);

  00004	45 33 c9	 xor	 r9d, r9d
  00007	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  0000f	e8 00 00 00 00	 call	 Py_CompileStringExFlags

; 2756 : }

  00014	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00018	c3		 ret	 0
Py_CompileString ENDP
_TEXT	ENDS
PUBLIC	Py_CompileStringFlags
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_CompileStringFlags DD imagerel $LN3
	DD	imagerel $LN3+22
	DD	imagerel $unwind$Py_CompileStringFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_CompileStringFlags DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT Py_CompileStringFlags
_TEXT	SEGMENT
str$ = 64
p$ = 72
s$ = 80
flags$ = 88
Py_CompileStringFlags PROC				; COMDAT

; 2762 : {

$LN3:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2763 :     return Py_CompileStringExFlags(str, p, s, flags, -1);

  00004	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  0000c	e8 00 00 00 00	 call	 Py_CompileStringExFlags

; 2764 : }

  00011	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00015	c3		 ret	 0
Py_CompileStringFlags ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@BMJGACPI@Py_EndInterpreter?3?5not?5the?5last?5@ ; `string'
PUBLIC	??_C@_0CM@JEDPKMPD@Py_EndInterpreter?3?5thread?5still?5@ ; `string'
PUBLIC	??_C@_0CJ@OFMCECPE@Py_EndInterpreter?3?5thread?5is?5not@ ; `string'
PUBLIC	Py_EndInterpreter
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_EndInterpreter DD imagerel $LN9
	DD	imagerel $LN9+138
	DD	imagerel $unwind$Py_EndInterpreter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_EndInterpreter DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CH@BMJGACPI@Py_EndInterpreter?3?5not?5the?5last?5@
CONST	SEGMENT
??_C@_0CH@BMJGACPI@Py_EndInterpreter?3?5not?5the?5last?5@ DB 'Py_EndInter'
	DB	'preter: not the last thread', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@JEDPKMPD@Py_EndInterpreter?3?5thread?5still?5@
CONST	SEGMENT
??_C@_0CM@JEDPKMPD@Py_EndInterpreter?3?5thread?5still?5@ DB 'Py_EndInterp'
	DB	'reter: thread still has a frame', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OFMCECPE@Py_EndInterpreter?3?5thread?5is?5not@
CONST	SEGMENT
??_C@_0CJ@OFMCECPE@Py_EndInterpreter?3?5thread?5is?5not@ DB 'Py_EndInterp'
	DB	'reter: thread is not current', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT Py_EndInterpreter
_TEXT	SEGMENT
tstate$ = 48
Py_EndInterpreter PROC					; COMDAT

; 798  : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 799  :     PyInterpreterState *interp = tstate->interp;

  0000a	48 8b 79 08	 mov	 rdi, QWORD PTR [rcx+8]
  0000e	48 8b d9	 mov	 rbx, rcx

; 800  : 
; 801  :     if (tstate != PyThreadState_GET())

  00011	e8 00 00 00 00	 call	 _Py_PXCTX
  00016	85 c0		 test	 eax, eax
  00018	74 07		 je	 SHORT $LN7@Py_EndInte
  0001a	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  0001f	eb 07		 jmp	 SHORT $LN8@Py_EndInte
$LN7@Py_EndInte:
  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN8@Py_EndInte:
  00028	48 3b d8	 cmp	 rbx, rax
  0002b	74 0c		 je	 SHORT $LN4@Py_EndInte

; 802  :         Py_FatalError("Py_EndInterpreter: thread is not current");

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@OFMCECPE@Py_EndInterpreter?3?5thread?5is?5not@
  00034	e8 00 00 00 00	 call	 Py_FatalError
$LN4@Py_EndInte:

; 803  :     if (tstate->frame != NULL)

  00039	48 83 7b 10 00	 cmp	 QWORD PTR [rbx+16], 0
  0003e	74 0c		 je	 SHORT $LN3@Py_EndInte

; 804  :         Py_FatalError("Py_EndInterpreter: thread still has a frame");

  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@JEDPKMPD@Py_EndInterpreter?3?5thread?5still?5@
  00047	e8 00 00 00 00	 call	 Py_FatalError
$LN3@Py_EndInte:

; 805  :     if (tstate != interp->tstate_head || tstate->next != NULL)

  0004c	48 3b 5f 08	 cmp	 rbx, QWORD PTR [rdi+8]
  00050	75 06		 jne	 SHORT $LN1@Py_EndInte
  00052	48 83 3b 00	 cmp	 QWORD PTR [rbx], 0
  00056	74 0c		 je	 SHORT $LN2@Py_EndInte
$LN1@Py_EndInte:

; 806  :         Py_FatalError("Py_EndInterpreter: not the last thread");

  00058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@BMJGACPI@Py_EndInterpreter?3?5not?5the?5last?5@
  0005f	e8 00 00 00 00	 call	 Py_FatalError
$LN2@Py_EndInte:

; 807  : 
; 808  :     PyImport_Cleanup();

  00064	e8 00 00 00 00	 call	 PyImport_Cleanup

; 809  :     PyInterpreterState_Clear(interp);

  00069	48 8b cf	 mov	 rcx, rdi
  0006c	e8 00 00 00 00	 call	 PyInterpreterState_Clear

; 810  :     PyThreadState_Swap(NULL);

  00071	33 c9		 xor	 ecx, ecx
  00073	e8 00 00 00 00	 call	 PyThreadState_Swap

; 811  :     PyInterpreterState_Delete(interp);

  00078	48 8b cf	 mov	 rcx, rdi

; 812  : }

  0007b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00080	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00084	5f		 pop	 rdi
  00085	e9 00 00 00 00	 jmp	 PyInterpreterState_Delete
Py_EndInterpreter ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@NHBIPDPB@Failed?5to?5initialize?5__main__?4__@ ; `string'
PUBLIC	??_C@_0CD@OJEPFHEH@Failed?5to?5retrieve?5BuiltinImport@ ; `string'
PUBLIC	??_C@_0BA@OCDHMNGE@BuiltinImporter?$AA@		; `string'
PUBLIC	??_C@_0CL@KHAKOLEM@Failed?5to?5initialize?5__main__?4__@ ; `string'
PUBLIC	??_C@_0CD@KMLAPGBK@Failed?5to?5retrieve?5builtins?5modu@ ; `string'
PUBLIC	??_C@_0N@MNFFDJII@__builtins__?$AA@		; `string'
PUBLIC	??_C@_0BN@MDHCIOAB@can?8t?5create?5__main__?5module?$AA@ ; `string'
EXTRN	PyDict_GetItemString:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyImport_AddModule:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$initmain DD imagerel initmain
	DD	imagerel initmain+269
	DD	imagerel $unwind$initmain
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$initmain DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0CJ@NHBIPDPB@Failed?5to?5initialize?5__main__?4__@
CONST	SEGMENT
??_C@_0CJ@NHBIPDPB@Failed?5to?5initialize?5__main__?4__@ DB 'Failed to in'
	DB	'itialize __main__.__loader__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OJEPFHEH@Failed?5to?5retrieve?5BuiltinImport@
CONST	SEGMENT
??_C@_0CD@OJEPFHEH@Failed?5to?5retrieve?5BuiltinImport@ DB 'Failed to ret'
	DB	'rieve BuiltinImporter', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OCDHMNGE@BuiltinImporter?$AA@
CONST	SEGMENT
??_C@_0BA@OCDHMNGE@BuiltinImporter?$AA@ DB 'BuiltinImporter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KHAKOLEM@Failed?5to?5initialize?5__main__?4__@
CONST	SEGMENT
??_C@_0CL@KHAKOLEM@Failed?5to?5initialize?5__main__?4__@ DB 'Failed to in'
	DB	'itialize __main__.__builtins__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KMLAPGBK@Failed?5to?5retrieve?5builtins?5modu@
CONST	SEGMENT
??_C@_0CD@KMLAPGBK@Failed?5to?5retrieve?5builtins?5modu@ DB 'Failed to re'
	DB	'trieve builtins module', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MNFFDJII@__builtins__?$AA@
CONST	SEGMENT
??_C@_0N@MNFFDJII@__builtins__?$AA@ DB '__builtins__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MDHCIOAB@can?8t?5create?5__main__?5module?$AA@
CONST	SEGMENT
??_C@_0BN@MDHCIOAB@can?8t?5create?5__main__?5module?$AA@ DB 'can''t creat'
	DB	'e __main__ module', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT initmain
_TEXT	SEGMENT
interp$ = 48
initmain PROC						; COMDAT

; 863  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f1	 mov	 rsi, rcx

; 864  :     PyObject *m, *d;
; 865  :     m = PyImport_AddModule("__main__");

  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  00019	e8 00 00 00 00	 call	 PyImport_AddModule
  0001e	48 8b d8	 mov	 rbx, rax

; 866  :     if (m == NULL)

  00021	48 85 c0	 test	 rax, rax
  00024	75 0c		 jne	 SHORT $LN7@initmain

; 867  :         Py_FatalError("can't create __main__ module");

  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@MDHCIOAB@can?8t?5create?5__main__?5module?$AA@
  0002d	e8 00 00 00 00	 call	 Py_FatalError
$LN7@initmain:

; 868  :     d = PyModule_GetDict(m);

  00032	48 8b cb	 mov	 rcx, rbx
  00035	e8 00 00 00 00	 call	 PyModule_GetDict

; 869  :     if (PyDict_GetItemString(d, "__builtins__") == NULL) {

  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  00041	48 8b c8	 mov	 rcx, rax
  00044	48 8b f8	 mov	 rdi, rax
  00047	e8 00 00 00 00	 call	 PyDict_GetItemString
  0004c	48 85 c0	 test	 rax, rax
  0004f	75 4a		 jne	 SHORT $LN6@initmain

; 870  :         PyObject *bimod = PyImport_ImportModule("builtins");

  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00058	e8 00 00 00 00	 call	 PyImport_ImportModule
  0005d	48 8b d8	 mov	 rbx, rax

; 871  :         if (bimod == NULL) {

  00060	48 85 c0	 test	 rax, rax
  00063	75 0c		 jne	 SHORT $LN5@initmain

; 872  :             Py_FatalError("Failed to retrieve builtins module");

  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@KMLAPGBK@Failed?5to?5retrieve?5builtins?5modu@
  0006c	e8 00 00 00 00	 call	 Py_FatalError
$LN5@initmain:

; 873  :         }
; 874  :         if (PyDict_SetItemString(d, "__builtins__", bimod) < 0) {

  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  00078	4c 8b c3	 mov	 r8, rbx
  0007b	48 8b cf	 mov	 rcx, rdi
  0007e	e8 00 00 00 00	 call	 PyDict_SetItemString
  00083	85 c0		 test	 eax, eax
  00085	79 0c		 jns	 SHORT $LN4@initmain

; 875  :             Py_FatalError("Failed to initialize __main__.__builtins__");

  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@KHAKOLEM@Failed?5to?5initialize?5__main__?4__@
  0008e	e8 00 00 00 00	 call	 Py_FatalError
$LN4@initmain:

; 876  :         }
; 877  :         Py_DECREF(bimod);

  00093	48 8b cb	 mov	 rcx, rbx
  00096	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@initmain:

; 878  :     }
; 879  :     /* Main is a little special - imp.is_builtin("__main__") will return
; 880  :      * False, but BuiltinImporter is still the most appropriate initial
; 881  :      * setting for its __loader__ attribute. A more suitable value will
; 882  :      * be set if __main__ gets further initialized later in the startup
; 883  :      * process.
; 884  :      */
; 885  :     if (PyDict_GetItemString(d, "__loader__") == NULL) {

  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@PADOMILC@__loader__?$AA@
  000a2	48 8b cf	 mov	 rcx, rdi
  000a5	e8 00 00 00 00	 call	 PyDict_GetItemString
  000aa	48 85 c0	 test	 rax, rax
  000ad	75 4e		 jne	 SHORT $LN3@initmain

; 886  :         PyObject *loader = PyObject_GetAttrString(interp->importlib,
; 887  :                                                   "BuiltinImporter");

  000af	48 8b 4e 30	 mov	 rcx, QWORD PTR [rsi+48]
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@OCDHMNGE@BuiltinImporter?$AA@
  000ba	e8 00 00 00 00	 call	 PyObject_GetAttrString
  000bf	48 8b d8	 mov	 rbx, rax

; 888  :         if (loader == NULL) {

  000c2	48 85 c0	 test	 rax, rax
  000c5	75 0c		 jne	 SHORT $LN2@initmain

; 889  :             Py_FatalError("Failed to retrieve BuiltinImporter");

  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@OJEPFHEH@Failed?5to?5retrieve?5BuiltinImport@
  000ce	e8 00 00 00 00	 call	 Py_FatalError
$LN2@initmain:

; 890  :         }
; 891  :         if (PyDict_SetItemString(d, "__loader__", loader) < 0) {

  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@PADOMILC@__loader__?$AA@
  000da	4c 8b c3	 mov	 r8, rbx
  000dd	48 8b cf	 mov	 rcx, rdi
  000e0	e8 00 00 00 00	 call	 PyDict_SetItemString
  000e5	85 c0		 test	 eax, eax
  000e7	79 0c		 jns	 SHORT $LN1@initmain

; 892  :             Py_FatalError("Failed to initialize __main__.__loader__");

  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@NHBIPDPB@Failed?5to?5initialize?5__main__?4__@
  000f0	e8 00 00 00 00	 call	 Py_FatalError
$LN1@initmain:

; 893  :         }
; 894  :         Py_DECREF(loader);

  000f5	48 8b cb	 mov	 rcx, rbx
  000f8	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@initmain:

; 895  :     }
; 896  : }

  000fd	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00102	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00107	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0010b	5f		 pop	 rdi
  0010c	c3		 ret	 0
initmain ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@FEOCANB@Py_Initialize?3?5Unable?5to?5get?5the@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$initfsencoding DD imagerel initfsencoding
	DD	imagerel initfsencoding+117
	DD	imagerel $unwind$initfsencoding
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$initfsencoding DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0DB@FEOCANB@Py_Initialize?3?5Unable?5to?5get?5the@
CONST	SEGMENT
??_C@_0DB@FEOCANB@Py_Initialize?3?5Unable?5to?5get?5the@ DB 'Py_Initializ'
	DB	'e: Unable to get the locale encoding', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT initfsencoding
_TEXT	SEGMENT
interp$ = 48
initfsencoding PROC					; COMDAT

; 900  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 901  :     PyObject *codec;
; 902  : 
; 903  :     if (Py_FileSystemDefaultEncoding == NULL)

  00009	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Py_FileSystemDefaultEncoding
  00010	48 85 c9	 test	 rcx, rcx
  00013	75 36		 jne	 SHORT $LN3@initfsenco

; 904  :     {
; 905  :         Py_FileSystemDefaultEncoding = get_locale_encoding();

  00015	e8 00 00 00 00	 call	 get_locale_encoding
  0001a	48 89 05 00 00
	00 00		 mov	 QWORD PTR Py_FileSystemDefaultEncoding, rax

; 906  :         if (Py_FileSystemDefaultEncoding == NULL)

  00021	48 85 c0	 test	 rax, rax
  00024	75 0c		 jne	 SHORT $LN2@initfsenco

; 907  :             Py_FatalError("Py_Initialize: Unable to get the locale encoding");

  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@FEOCANB@Py_Initialize?3?5Unable?5to?5get?5the@
  0002d	e8 00 00 00 00	 call	 Py_FatalError
$LN2@initfsenco:

; 908  : 
; 909  :         Py_HasFileSystemDefaultEncoding = 0;

  00032	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR Py_HasFileSystemDefaultEncoding, 0

; 923  :     interp->fscodec_initialized = 1;
; 924  :     return 0;

  0003c	33 c0		 xor	 eax, eax
  0003e	c7 43 54 01 00
	00 00		 mov	 DWORD PTR [rbx+84], 1

; 925  : }

  00045	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00049	5b		 pop	 rbx
  0004a	c3		 ret	 0
$LN3@initfsenco:

; 910  :         interp->fscodec_initialized = 1;
; 911  :         return 0;
; 912  :     }
; 913  : 
; 914  :     /* the encoding is mbcs, utf-8 or ascii */
; 915  :     codec = _PyCodec_Lookup(Py_FileSystemDefaultEncoding);

  0004b	e8 00 00 00 00	 call	 _PyCodec_Lookup

; 916  :     if (!codec) {

  00050	48 85 c0	 test	 rax, rax
  00053	75 09		 jne	 SHORT $LN1@initfsenco

; 917  :         /* Such error can only occurs in critical situations: no more
; 918  :          * memory, import a module of the standard library failed,
; 919  :          * etc. */
; 920  :         return -1;

  00055	83 c8 ff	 or	 eax, -1

; 925  : }

  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5b		 pop	 rbx
  0005d	c3		 ret	 0
$LN1@initfsenco:

; 921  :     }
; 922  :     Py_DECREF(codec);

  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 _Py_DecRef

; 923  :     interp->fscodec_initialized = 1;
; 924  :     return 0;

  00066	33 c0		 xor	 eax, eax
  00068	c7 43 54 01 00
	00 00		 mov	 DWORD PTR [rbx+84], 1

; 925  : }

  0006f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00073	5b		 pop	 rbx
  00074	c3		 ret	 0
initfsencoding ENDP
_TEXT	ENDS
PUBLIC	PyErr_Print
; Function compile flags: /Ogtpy
;	COMDAT PyErr_Print
_TEXT	SEGMENT
PyErr_Print PROC					; COMDAT

; 1594 :     PyErr_PrintEx(1);

  00000	b9 01 00 00 00	 mov	 ecx, 1

; 1595 : }

  00005	e9 00 00 00 00	 jmp	 PyErr_PrintEx
PyErr_Print ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@LDJDJHNL@Py_Initialize?3?5importlib?5install@ ; `string'
PUBLIC	??_C@_08CKMLFGDH@_install?$AA@			; `string'
PUBLIC	??_C@_02MJJLPNK@OO?$AA@				; `string'
PUBLIC	??_C@_0CO@NHLGIPOO@Py_Initialize?3?5can?8t?5save?5_imp?5t@ ; `string'
PUBLIC	??_C@_04KKIAMJPE@_imp?$AA@			; `string'
PUBLIC	??_C@_0BG@ECKJLMOC@import?5sys?5?$CD?5builtin?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@KDBAIBAC@import?5imp?5?$CD?5builtin?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@IKDHDMHB@Py_Initialize?3?5can?8t?5import?5imp?$AA@ ; `string'
PUBLIC	??_C@_0DP@JKEJOPCF@Py_Initialize?3?5couldn?8t?5get?5_fro@ ; `string'
PUBLIC	??_C@_0CD@EMCOKPID@import?5_frozen_importlib?5?$CD?5froze@ ; `string'
PUBLIC	??_C@_0CO@DNANHCJL@Py_Initialize?3?5can?8t?5import?5_fro@ ; `string'
PUBLIC	??_C@_0BC@BLEAGBOG@_frozen_importlib?$AA@	; `string'
EXTRN	_PyImportZip_Init:PROC
EXTRN	PyObject_CallMethod:PROC
EXTRN	PyImport_GetModuleDict:PROC
EXTRN	PyInit_imp:PROC
EXTRN	PySys_FormatStderr:PROC
EXTRN	PyImport_ImportFrozenModule:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$import_init DD imagerel import_init
	DD	imagerel import_init+379
	DD	imagerel $unwind$import_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$import_init DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT ??_C@_0CI@LDJDJHNL@Py_Initialize?3?5importlib?5install@
CONST	SEGMENT
??_C@_0CI@LDJDJHNL@Py_Initialize?3?5importlib?5install@ DB 'Py_Initialize'
	DB	': importlib install failed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CKMLFGDH@_install?$AA@
CONST	SEGMENT
??_C@_08CKMLFGDH@_install?$AA@ DB '_install', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02MJJLPNK@OO?$AA@
CONST	SEGMENT
??_C@_02MJJLPNK@OO?$AA@ DB 'OO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NHLGIPOO@Py_Initialize?3?5can?8t?5save?5_imp?5t@
CONST	SEGMENT
??_C@_0CO@NHLGIPOO@Py_Initialize?3?5can?8t?5save?5_imp?5t@ DB 'Py_Initial'
	DB	'ize: can''t save _imp to sys.modules', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KKIAMJPE@_imp?$AA@
CONST	SEGMENT
??_C@_04KKIAMJPE@_imp?$AA@ DB '_imp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ECKJLMOC@import?5sys?5?$CD?5builtin?6?$AA@
CONST	SEGMENT
??_C@_0BG@ECKJLMOC@import?5sys?5?$CD?5builtin?6?$AA@ DB 'import sys # bui'
	DB	'ltin', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KDBAIBAC@import?5imp?5?$CD?5builtin?6?$AA@
CONST	SEGMENT
??_C@_0BG@KDBAIBAC@import?5imp?5?$CD?5builtin?6?$AA@ DB 'import imp # bui'
	DB	'ltin', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IKDHDMHB@Py_Initialize?3?5can?8t?5import?5imp?$AA@
CONST	SEGMENT
??_C@_0CA@IKDHDMHB@Py_Initialize?3?5can?8t?5import?5imp?$AA@ DB 'Py_Initi'
	DB	'alize: can''t import imp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@JKEJOPCF@Py_Initialize?3?5couldn?8t?5get?5_fro@
CONST	SEGMENT
??_C@_0DP@JKEJOPCF@Py_Initialize?3?5couldn?8t?5get?5_fro@ DB 'Py_Initiali'
	DB	'ze: couldn''t get _frozen_importlib from sys.modules', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EMCOKPID@import?5_frozen_importlib?5?$CD?5froze@
CONST	SEGMENT
??_C@_0CD@EMCOKPID@import?5_frozen_importlib?5?$CD?5froze@ DB 'import _fr'
	DB	'ozen_importlib # frozen', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@DNANHCJL@Py_Initialize?3?5can?8t?5import?5_fro@
CONST	SEGMENT
??_C@_0CO@DNANHCJL@Py_Initialize?3?5can?8t?5import?5_fro@ DB 'Py_Initiali'
	DB	'ze: can''t import _frozen_importlib', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BLEAGBOG@_frozen_importlib?$AA@
CONST	SEGMENT
??_C@_0BC@BLEAGBOG@_frozen_importlib?$AA@ DB '_frozen_importlib', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pythonrun.c
CONST	ENDS
;	COMDAT import_init
_TEXT	SEGMENT
interp$ = 64
sysmod$ = 72
import_init PROC					; COMDAT

; 199  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b f9	 mov	 rdi, rcx

; 200  :     PyObject *importlib;
; 201  :     PyObject *impmod;
; 202  :     PyObject *sys_modules;
; 203  :     PyObject *value;
; 204  : 
; 205  :     /* Import _importlib through its frozen version, _frozen_importlib. */
; 206  :     if (PyImport_ImportFrozenModule("_frozen_importlib") <= 0) {

  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@BLEAGBOG@_frozen_importlib?$AA@
  0001e	48 8b ea	 mov	 rbp, rdx
  00021	e8 00 00 00 00	 call	 PyImport_ImportFrozenModule
  00026	85 c0		 test	 eax, eax
  00028	7f 0e		 jg	 SHORT $LN10@import_ini

; 207  :         Py_FatalError("Py_Initialize: can't import _frozen_importlib");

  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@DNANHCJL@Py_Initialize?3?5can?8t?5import?5_fro@
  00031	e8 00 00 00 00	 call	 Py_FatalError
  00036	eb 15		 jmp	 SHORT $LN8@import_ini
$LN10@import_ini:

; 208  :     }
; 209  :     else if (Py_VerboseFlag) {

  00038	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  0003f	74 0c		 je	 SHORT $LN8@import_ini

; 210  :         PySys_FormatStderr("import _frozen_importlib # frozen\n");

  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@EMCOKPID@import?5_frozen_importlib?5?$CD?5froze@
  00048	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN8@import_ini:

; 211  :     }
; 212  :     importlib = PyImport_AddModule("_frozen_importlib");

  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@BLEAGBOG@_frozen_importlib?$AA@
  00054	e8 00 00 00 00	 call	 PyImport_AddModule
  00059	48 8b d8	 mov	 rbx, rax

; 213  :     if (importlib == NULL) {

  0005c	48 85 c0	 test	 rax, rax
  0005f	75 0c		 jne	 SHORT $LN7@import_ini

; 214  :         Py_FatalError("Py_Initialize: couldn't get _frozen_importlib from "
; 215  :                       "sys.modules");

  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DP@JKEJOPCF@Py_Initialize?3?5couldn?8t?5get?5_fro@
  00068	e8 00 00 00 00	 call	 Py_FatalError
$LN7@import_ini:

; 216  :     }
; 217  :     interp->importlib = importlib;

  0006d	48 89 5f 30	 mov	 QWORD PTR [rdi+48], rbx

; 218  :     Py_INCREF(interp->importlib);

  00071	e8 00 00 00 00	 call	 _Py_PXCTX
  00076	85 c0		 test	 eax, eax
  00078	75 32		 jne	 SHORT $LN14@import_ini
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00088	4c 8b cb	 mov	 r9, rbx
  0008b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00091	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00099	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009e	85 c0		 test	 eax, eax
  000a0	75 06		 jne	 SHORT $LN13@import_ini
  000a2	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000a6	74 04		 je	 SHORT $LN14@import_ini
$LN13@import_ini:
  000a8	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN14@import_ini:

; 219  : 
; 220  :     /* Install _importlib as __import__ */
; 221  :     impmod = PyInit_imp();

  000ac	e8 00 00 00 00	 call	 PyInit_imp
  000b1	48 8b f8	 mov	 rdi, rax

; 222  :     if (impmod == NULL) {

  000b4	48 85 c0	 test	 rax, rax
  000b7	75 0e		 jne	 SHORT $LN6@import_ini

; 223  :         Py_FatalError("Py_Initialize: can't import imp");

  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@IKDHDMHB@Py_Initialize?3?5can?8t?5import?5imp?$AA@
  000c0	e8 00 00 00 00	 call	 Py_FatalError
  000c5	eb 15		 jmp	 SHORT $LN4@import_ini
$LN6@import_ini:

; 224  :     }
; 225  :     else if (Py_VerboseFlag) {

  000c7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  000ce	74 0c		 je	 SHORT $LN4@import_ini

; 226  :         PySys_FormatStderr("import imp # builtin\n");

  000d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@KDBAIBAC@import?5imp?5?$CD?5builtin?6?$AA@
  000d7	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN4@import_ini:

; 227  :     }
; 228  :     sys_modules = PyImport_GetModuleDict();

  000dc	e8 00 00 00 00	 call	 PyImport_GetModuleDict

; 229  :     if (Py_VerboseFlag) {

  000e1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  000e8	48 8b f0	 mov	 rsi, rax
  000eb	74 0c		 je	 SHORT $LN3@import_ini

; 230  :         PySys_FormatStderr("import sys # builtin\n");

  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@ECKJLMOC@import?5sys?5?$CD?5builtin?6?$AA@
  000f4	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN3@import_ini:

; 231  :     }
; 232  :     if (PyDict_SetItemString(sys_modules, "_imp", impmod) < 0) {

  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KKIAMJPE@_imp?$AA@
  00100	4c 8b c7	 mov	 r8, rdi
  00103	48 8b ce	 mov	 rcx, rsi
  00106	e8 00 00 00 00	 call	 PyDict_SetItemString
  0010b	85 c0		 test	 eax, eax
  0010d	79 0c		 jns	 SHORT $LN2@import_ini

; 233  :         Py_FatalError("Py_Initialize: can't save _imp to sys.modules");

  0010f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@NHLGIPOO@Py_Initialize?3?5can?8t?5save?5_imp?5t@
  00116	e8 00 00 00 00	 call	 Py_FatalError
$LN2@import_ini:

; 234  :     }
; 235  : 
; 236  :     value = PyObject_CallMethod(importlib, "_install", "OO", sysmod, impmod);

  0011b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02MJJLPNK@OO?$AA@
  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08CKMLFGDH@_install?$AA@
  00129	4c 8b cd	 mov	 r9, rbp
  0012c	48 8b cb	 mov	 rcx, rbx
  0012f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00134	e8 00 00 00 00	 call	 PyObject_CallMethod
  00139	48 8b d8	 mov	 rbx, rax

; 237  :     if (value == NULL) {

  0013c	48 85 c0	 test	 rax, rax
  0013f	75 11		 jne	 SHORT $LN1@import_ini

; 238  :         PyErr_Print();

  00141	e8 00 00 00 00	 call	 PyErr_Print

; 239  :         Py_FatalError("Py_Initialize: importlib install failed");

  00146	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@LDJDJHNL@Py_Initialize?3?5importlib?5install@
  0014d	e8 00 00 00 00	 call	 Py_FatalError
$LN1@import_ini:

; 240  :     }
; 241  :     Py_DECREF(value);

  00152	48 8b cb	 mov	 rcx, rbx
  00155	e8 00 00 00 00	 call	 _Py_DecRef

; 242  :     Py_DECREF(impmod);

  0015a	48 8b cf	 mov	 rcx, rdi
  0015d	e8 00 00 00 00	 call	 _Py_DecRef

; 243  : 
; 244  :     _PyImportZip_Init();
; 245  : }

  00162	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00167	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0016c	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00171	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00175	5f		 pop	 rdi
  00176	e9 00 00 00 00	 jmp	 _PyImportZip_Init
import_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_04IKPDHFBK@site?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$initsite DD imagerel initsite
	DD	imagerel initsite+55
	DD	imagerel $unwind$initsite
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$initsite DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_04IKPDHFBK@site?$AA@
CONST	SEGMENT
??_C@_04IKPDHFBK@site?$AA@ DB 'site', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT initsite
_TEXT	SEGMENT
initsite PROC						; COMDAT

; 931  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 932  :     PyObject *m;
; 933  :     m = PyImport_ImportModule("site");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IKPDHFBK@site?$AA@
  0000b	e8 00 00 00 00	 call	 PyImport_ImportModule

; 934  :     if (m == NULL) {

  00010	48 85 c0	 test	 rax, rax
  00013	75 16		 jne	 SHORT $LN2@initsite

; 935  :         PyErr_Print();

  00015	e8 00 00 00 00	 call	 PyErr_Print

; 936  :         Py_Finalize();

  0001a	e8 00 00 00 00	 call	 Py_Finalize

; 937  :         exit(1);

  0001f	b9 01 00 00 00	 mov	 ecx, 1
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  0002a	cc		 int	 3
$LN2@initsite:

; 938  :     }
; 939  :     else {
; 940  :         Py_DECREF(m);

  0002b	48 8b c8	 mov	 rcx, rax

; 941  :     }
; 942  : }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	e9 00 00 00 00	 jmp	 _Py_DecRef
$LN5@initsite:
initsite ENDP
_TEXT	ENDS
PUBLIC	??_C@_03OEDACAH@ps2?$AA@			; `string'
PUBLIC	??_C@_03CFGOFBME@ps1?$AA@			; `string'
PUBLIC	PyRun_InteractiveOneFlags
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyRun_InteractiveOneFlags DD imagerel $LN113
	DD	imagerel $LN113+1251
	DD	imagerel $unwind$PyRun_InteractiveOneFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_InteractiveOneFlags DD 0a1e01H
	DD	015341eH
	DD	0f01a921eH
	DD	0d016e018H
	DD	07012c014H
	DD	050106011H
xdata	ENDS
;	COMDAT ??_C@_03OEDACAH@ps2?$AA@
CONST	SEGMENT
??_C@_03OEDACAH@ps2?$AA@ DB 'ps2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CFGOFBME@ps1?$AA@
CONST	SEGMENT
??_C@_03CFGOFBME@ps1?$AA@ DB 'ps1', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pythonrun.c
CONST	ENDS
;	COMDAT PyRun_InteractiveOneFlags
_TEXT	SEGMENT
errcode$ = 144
fp$ = 144
filename$ = 152
flags$ = 160
PyRun_InteractiveOneFlags PROC				; COMDAT

; 1265 : {

$LN113:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 20	 mov	 QWORD PTR [rax+32], rbx
  00007	4c 89 40 18	 mov	 QWORD PTR [rax+24], r8
  0000b	48 89 50 10	 mov	 QWORD PTR [rax+16], rdx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	41 54		 push	 r12
  00014	41 55		 push	 r13
  00016	41 56		 push	 r14
  00018	41 57		 push	 r15
  0001a	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 1266 :     PyObject *m, *d, *v, *w, *oenc = NULL;

  0001e	33 ff		 xor	 edi, edi
  00020	4c 8b f9	 mov	 r15, rcx

; 1267 :     mod_ty mod;
; 1268 :     PyArena *arena;
; 1269 :     char *ps1 = "", *ps2 = "", *enc = NULL;

  00023	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0002a	44 8b f7	 mov	 r14d, edi

; 1270 :     int errcode = 0;

  0002d	89 78 08	 mov	 DWORD PTR [rax+8], edi
  00030	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@

; 1271 :     _Py_IDENTIFIER(encoding);
; 1272 : 
; 1273 :     if (fp == stdin) {

  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0003d	4c 3b f8	 cmp	 r15, rax
  00040	75 5b		 jne	 SHORT $LN40@PyRun_Inte

; 1274 :         /* Fetch encoding from sys.stdin if possible. */
; 1275 :         v = PySys_GetObject("stdin");

  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MHOFLBOO@stdin?$AA@
  00049	e8 00 00 00 00	 call	 PySys_GetObject

; 1276 :         if (v && v != Py_None) {

  0004e	48 85 c0	 test	 rax, rax
  00051	74 4a		 je	 SHORT $LN40@PyRun_Inte
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0005a	48 3b c1	 cmp	 rax, rcx
  0005d	74 3e		 je	 SHORT $LN40@PyRun_Inte

; 1277 :             oenc = _PyObject_GetAttrId(v, &PyId_encoding);

  0005f	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00066	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  0006f	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_encoding@?1??PyRun_InteractiveOneFlags@@9@9
  00074	4a 03 14 c1	 add	 rdx, QWORD PTR [rcx+r8*8]
  00078	48 8b c8	 mov	 rcx, rax
  0007b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00080	48 8b f8	 mov	 rdi, rax

; 1278 :             if (oenc)

  00083	48 85 c0	 test	 rax, rax
  00086	74 10		 je	 SHORT $LN112@PyRun_Inte

; 1279 :                 enc = _PyUnicode_AsString(oenc);

  00088	48 8b c8	 mov	 rcx, rax
  0008b	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00090	4c 8b f0	 mov	 r14, rax

; 1280 :             if (!enc)

  00093	48 85 c0	 test	 rax, rax
  00096	75 05		 jne	 SHORT $LN40@PyRun_Inte
$LN112@PyRun_Inte:

; 1281 :                 PyErr_Clear();

  00098	e8 00 00 00 00	 call	 PyErr_Clear
$LN40@PyRun_Inte:

; 1282 :         }
; 1283 :     }
; 1284 :     v = PySys_GetObject("ps1");

  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CFGOFBME@ps1?$AA@
  000a4	e8 00 00 00 00	 call	 PySys_GetObject
  000a9	48 8b f0	 mov	 rsi, rax

; 1285 :     if (v != NULL) {

  000ac	48 85 c0	 test	 rax, rax
  000af	74 43		 je	 SHORT $LN35@PyRun_Inte

; 1286 :         v = PyObject_Str(v);

  000b1	48 8b c8	 mov	 rcx, rax
  000b4	e8 00 00 00 00	 call	 PyObject_Str
  000b9	48 8b f0	 mov	 rsi, rax

; 1287 :         if (v == NULL)

  000bc	48 85 c0	 test	 rax, rax
  000bf	75 07		 jne	 SHORT $LN38@PyRun_Inte

; 1288 :             PyErr_Clear();

  000c1	e8 00 00 00 00	 call	 PyErr_Clear
  000c6	eb 2c		 jmp	 SHORT $LN35@PyRun_Inte
$LN38@PyRun_Inte:

; 1289 :         else if (PyUnicode_Check(v)) {

  000c8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000cc	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  000d6	74 1c		 je	 SHORT $LN35@PyRun_Inte

; 1290 :             ps1 = _PyUnicode_AsString(v);

  000d8	48 8b ce	 mov	 rcx, rsi
  000db	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  000e0	4c 8b e0	 mov	 r12, rax

; 1291 :             if (ps1 == NULL) {

  000e3	48 85 c0	 test	 rax, rax
  000e6	75 0c		 jne	 SHORT $LN35@PyRun_Inte

; 1292 :                 PyErr_Clear();

  000e8	e8 00 00 00 00	 call	 PyErr_Clear

; 1293 :                 ps1 = "";

  000ed	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
$LN35@PyRun_Inte:

; 1294 :             }
; 1295 :         }
; 1296 :     }
; 1297 :     w = PySys_GetObject("ps2");

  000f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OEDACAH@ps2?$AA@
  000fb	e8 00 00 00 00	 call	 PySys_GetObject
  00100	48 8b d8	 mov	 rbx, rax

; 1298 :     if (w != NULL) {

  00103	48 85 c0	 test	 rax, rax
  00106	74 43		 je	 SHORT $LN30@PyRun_Inte

; 1299 :         w = PyObject_Str(w);

  00108	48 8b c8	 mov	 rcx, rax
  0010b	e8 00 00 00 00	 call	 PyObject_Str
  00110	48 8b d8	 mov	 rbx, rax

; 1300 :         if (w == NULL)

  00113	48 85 c0	 test	 rax, rax
  00116	75 07		 jne	 SHORT $LN33@PyRun_Inte

; 1301 :             PyErr_Clear();

  00118	e8 00 00 00 00	 call	 PyErr_Clear
  0011d	eb 2c		 jmp	 SHORT $LN30@PyRun_Inte
$LN33@PyRun_Inte:

; 1302 :         else if (PyUnicode_Check(w)) {

  0011f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00123	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0012d	74 1c		 je	 SHORT $LN30@PyRun_Inte

; 1303 :             ps2 = _PyUnicode_AsString(w);

  0012f	48 8b cb	 mov	 rcx, rbx
  00132	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00137	4c 8b e8	 mov	 r13, rax

; 1304 :             if (ps2 == NULL) {

  0013a	48 85 c0	 test	 rax, rax
  0013d	75 0c		 jne	 SHORT $LN30@PyRun_Inte

; 1305 :                 PyErr_Clear();

  0013f	e8 00 00 00 00	 call	 PyErr_Clear

; 1306 :                 ps2 = "";

  00144	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
$LN30@PyRun_Inte:

; 1307 :             }
; 1308 :         }
; 1309 :     }
; 1310 :     arena = PyArena_New();

  0014b	e8 00 00 00 00	 call	 PyArena_New
  00150	48 8b e8	 mov	 rbp, rax

; 1311 :     if (arena == NULL) {

  00153	48 85 c0	 test	 rax, rax
  00156	0f 85 52 01 00
	00		 jne	 $LN29@PyRun_Inte

; 1312 :         Py_XDECREF(v);

  0015c	48 85 f6	 test	 rsi, rsi
  0015f	74 65		 je	 SHORT $LN27@PyRun_Inte
  00161	e8 00 00 00 00	 call	 _Py_PXCTX
  00166	85 c0		 test	 eax, eax
  00168	75 5c		 jne	 SHORT $LN27@PyRun_Inte
  0016a	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0016e	a8 20		 test	 al, 32			; 00000020H
  00170	75 4c		 jne	 SHORT $LN50@PyRun_Inte
  00172	84 c0		 test	 al, al
  00174	78 48		 js	 SHORT $LN50@PyRun_Inte
  00176	a8 02		 test	 al, 2
  00178	75 4c		 jne	 SHORT $LN27@PyRun_Inte
  0017a	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  0017e	75 46		 jne	 SHORT $LN27@PyRun_Inte
  00180	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00187	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0018e	4c 8b ce	 mov	 r9, rsi
  00191	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00197	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0019f	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a4	48 8b ce	 mov	 rcx, rsi
  001a7	85 c0		 test	 eax, eax
  001a9	74 07		 je	 SHORT $LN55@PyRun_Inte
  001ab	e8 00 00 00 00	 call	 _Px_Dealloc
  001b0	eb 14		 jmp	 SHORT $LN27@PyRun_Inte
$LN55@PyRun_Inte:
  001b2	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  001b6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001bc	eb 08		 jmp	 SHORT $LN27@PyRun_Inte
$LN50@PyRun_Inte:
  001be	48 8b ce	 mov	 rcx, rsi
  001c1	e8 00 00 00 00	 call	 Px_DecRef
$LN27@PyRun_Inte:

; 1313 :         Py_XDECREF(w);

  001c6	48 85 db	 test	 rbx, rbx
  001c9	74 65		 je	 SHORT $LN23@PyRun_Inte
  001cb	e8 00 00 00 00	 call	 _Py_PXCTX
  001d0	85 c0		 test	 eax, eax
  001d2	75 5c		 jne	 SHORT $LN23@PyRun_Inte
  001d4	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001d8	a8 20		 test	 al, 32			; 00000020H
  001da	75 4c		 jne	 SHORT $LN61@PyRun_Inte
  001dc	84 c0		 test	 al, al
  001de	78 48		 js	 SHORT $LN61@PyRun_Inte
  001e0	a8 02		 test	 al, 2
  001e2	75 4c		 jne	 SHORT $LN23@PyRun_Inte
  001e4	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001e8	75 46		 jne	 SHORT $LN23@PyRun_Inte
  001ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001f8	4c 8b cb	 mov	 r9, rbx
  001fb	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00201	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00209	e8 00 00 00 00	 call	 _PyParallel_Guard
  0020e	48 8b cb	 mov	 rcx, rbx
  00211	85 c0		 test	 eax, eax
  00213	74 07		 je	 SHORT $LN66@PyRun_Inte
  00215	e8 00 00 00 00	 call	 _Px_Dealloc
  0021a	eb 14		 jmp	 SHORT $LN23@PyRun_Inte
$LN66@PyRun_Inte:
  0021c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00220	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00226	eb 08		 jmp	 SHORT $LN23@PyRun_Inte
$LN61@PyRun_Inte:
  00228	48 8b cb	 mov	 rcx, rbx
  0022b	e8 00 00 00 00	 call	 Px_DecRef
$LN23@PyRun_Inte:

; 1314 :         Py_XDECREF(oenc);

  00230	48 85 ff	 test	 rdi, rdi
  00233	74 71		 je	 SHORT $LN19@PyRun_Inte
  00235	e8 00 00 00 00	 call	 _Py_PXCTX
  0023a	85 c0		 test	 eax, eax
  0023c	75 68		 jne	 SHORT $LN19@PyRun_Inte
  0023e	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00242	a8 20		 test	 al, 32			; 00000020H
  00244	75 58		 jne	 SHORT $LN72@PyRun_Inte
  00246	84 c0		 test	 al, al
  00248	78 54		 js	 SHORT $LN72@PyRun_Inte
  0024a	a8 02		 test	 al, 2
  0024c	75 58		 jne	 SHORT $LN19@PyRun_Inte
  0024e	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00252	75 52		 jne	 SHORT $LN19@PyRun_Inte
  00254	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0025b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00262	4c 8b cf	 mov	 r9, rdi
  00265	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0026b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00273	e8 00 00 00 00	 call	 _PyParallel_Guard
  00278	48 8b cf	 mov	 rcx, rdi
  0027b	85 c0		 test	 eax, eax
  0027d	74 0d		 je	 SHORT $LN77@PyRun_Inte
  0027f	e8 00 00 00 00	 call	 _Px_Dealloc

; 1315 :         return -1;

  00284	83 c8 ff	 or	 eax, -1
  00287	e9 3f 02 00 00	 jmp	 $LN44@PyRun_Inte

; 1314 :         Py_XDECREF(oenc);

$LN77@PyRun_Inte:
  0028c	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00290	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 1315 :         return -1;

  00296	83 c8 ff	 or	 eax, -1
  00299	e9 2d 02 00 00	 jmp	 $LN44@PyRun_Inte

; 1314 :         Py_XDECREF(oenc);

$LN72@PyRun_Inte:
  0029e	48 8b cf	 mov	 rcx, rdi
  002a1	e8 00 00 00 00	 call	 Px_DecRef
$LN19@PyRun_Inte:

; 1315 :         return -1;

  002a6	83 c8 ff	 or	 eax, -1
  002a9	e9 1d 02 00 00	 jmp	 $LN44@PyRun_Inte
$LN29@PyRun_Inte:

; 1316 :     }
; 1317 :     mod = PyParser_ASTFromFile(fp, filename, enc,
; 1318 :                                Py_single_input, ps1, ps2,
; 1319 :                                flags, &errcode, arena);

  002ae	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  002b3	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR errcode$[rsp]
  002bb	41 b9 00 01 00
	00		 mov	 r9d, 256		; 00000100H
  002c1	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  002c6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR flags$[rsp]
  002ce	4d 8b c6	 mov	 r8, r14
  002d1	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  002d6	4c 89 6c 24 28	 mov	 QWORD PTR [rsp+40], r13
  002db	4c 8b ac 24 98
	00 00 00	 mov	 r13, QWORD PTR filename$[rsp]
  002e3	49 8b cf	 mov	 rcx, r15
  002e6	49 8b d5	 mov	 rdx, r13
  002e9	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  002ee	e8 00 00 00 00	 call	 PyParser_ASTFromFile
  002f3	4c 8b e0	 mov	 r12, rax

; 1320 :     Py_XDECREF(v);

  002f6	48 85 f6	 test	 rsi, rsi
  002f9	74 67		 je	 SHORT $LN15@PyRun_Inte
  002fb	e8 00 00 00 00	 call	 _Py_PXCTX
  00300	85 c0		 test	 eax, eax
  00302	75 5e		 jne	 SHORT $LN15@PyRun_Inte
  00304	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  00308	f6 c1 20	 test	 cl, 32			; 00000020H
  0030b	75 4d		 jne	 SHORT $LN83@PyRun_Inte
  0030d	84 c9		 test	 cl, cl
  0030f	78 49		 js	 SHORT $LN83@PyRun_Inte
  00311	f6 c1 02	 test	 cl, 2
  00314	75 4c		 jne	 SHORT $LN15@PyRun_Inte
  00316	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  0031a	75 46		 jne	 SHORT $LN15@PyRun_Inte
  0031c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00323	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0032a	4c 8b ce	 mov	 r9, rsi
  0032d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00333	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0033b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00340	48 8b ce	 mov	 rcx, rsi
  00343	85 c0		 test	 eax, eax
  00345	74 07		 je	 SHORT $LN88@PyRun_Inte
  00347	e8 00 00 00 00	 call	 _Px_Dealloc
  0034c	eb 14		 jmp	 SHORT $LN15@PyRun_Inte
$LN88@PyRun_Inte:
  0034e	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  00352	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00358	eb 08		 jmp	 SHORT $LN15@PyRun_Inte
$LN83@PyRun_Inte:
  0035a	48 8b ce	 mov	 rcx, rsi
  0035d	e8 00 00 00 00	 call	 Px_DecRef
$LN15@PyRun_Inte:

; 1321 :     Py_XDECREF(w);

  00362	48 85 db	 test	 rbx, rbx
  00365	74 65		 je	 SHORT $LN11@PyRun_Inte
  00367	e8 00 00 00 00	 call	 _Py_PXCTX
  0036c	85 c0		 test	 eax, eax
  0036e	75 5c		 jne	 SHORT $LN11@PyRun_Inte
  00370	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00374	a8 20		 test	 al, 32			; 00000020H
  00376	75 4c		 jne	 SHORT $LN94@PyRun_Inte
  00378	84 c0		 test	 al, al
  0037a	78 48		 js	 SHORT $LN94@PyRun_Inte
  0037c	a8 02		 test	 al, 2
  0037e	75 4c		 jne	 SHORT $LN11@PyRun_Inte
  00380	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00384	75 46		 jne	 SHORT $LN11@PyRun_Inte
  00386	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0038d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00394	4c 8b cb	 mov	 r9, rbx
  00397	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0039d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003a5	e8 00 00 00 00	 call	 _PyParallel_Guard
  003aa	48 8b cb	 mov	 rcx, rbx
  003ad	85 c0		 test	 eax, eax
  003af	74 07		 je	 SHORT $LN99@PyRun_Inte
  003b1	e8 00 00 00 00	 call	 _Px_Dealloc
  003b6	eb 14		 jmp	 SHORT $LN11@PyRun_Inte
$LN99@PyRun_Inte:
  003b8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  003bc	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003c2	eb 08		 jmp	 SHORT $LN11@PyRun_Inte
$LN94@PyRun_Inte:
  003c4	48 8b cb	 mov	 rcx, rbx
  003c7	e8 00 00 00 00	 call	 Px_DecRef
$LN11@PyRun_Inte:

; 1322 :     Py_XDECREF(oenc);

  003cc	48 85 ff	 test	 rdi, rdi
  003cf	74 65		 je	 SHORT $LN7@PyRun_Inte
  003d1	e8 00 00 00 00	 call	 _Py_PXCTX
  003d6	85 c0		 test	 eax, eax
  003d8	75 5c		 jne	 SHORT $LN7@PyRun_Inte
  003da	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  003de	a8 20		 test	 al, 32			; 00000020H
  003e0	75 4c		 jne	 SHORT $LN105@PyRun_Inte
  003e2	84 c0		 test	 al, al
  003e4	78 48		 js	 SHORT $LN105@PyRun_Inte
  003e6	a8 02		 test	 al, 2
  003e8	75 4c		 jne	 SHORT $LN7@PyRun_Inte
  003ea	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  003ee	75 46		 jne	 SHORT $LN7@PyRun_Inte
  003f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  003fe	4c 8b cf	 mov	 r9, rdi
  00401	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00407	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0040f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00414	48 8b cf	 mov	 rcx, rdi
  00417	85 c0		 test	 eax, eax
  00419	74 07		 je	 SHORT $LN110@PyRun_Inte
  0041b	e8 00 00 00 00	 call	 _Px_Dealloc
  00420	eb 14		 jmp	 SHORT $LN7@PyRun_Inte
$LN110@PyRun_Inte:
  00422	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00426	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0042c	eb 08		 jmp	 SHORT $LN7@PyRun_Inte
$LN105@PyRun_Inte:
  0042e	48 8b cf	 mov	 rcx, rdi
  00431	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyRun_Inte:

; 1323 :     if (mod == NULL) {

  00436	4d 85 e4	 test	 r12, r12
  00439	75 28		 jne	 SHORT $LN4@PyRun_Inte

; 1324 :         PyArena_Free(arena);

  0043b	48 8b cd	 mov	 rcx, rbp
  0043e	e8 00 00 00 00	 call	 PyArena_Free

; 1325 :         if (errcode == E_EOF) {

  00443	83 bc 24 90 00
	00 00 0b	 cmp	 DWORD PTR errcode$[rsp], 11
  0044b	75 0c		 jne	 SHORT $LN3@PyRun_Inte

; 1326 :             PyErr_Clear();

  0044d	e8 00 00 00 00	 call	 PyErr_Clear

; 1327 :             return E_EOF;

  00452	41 8d 44 24 0b	 lea	 eax, QWORD PTR [r12+11]
  00457	eb 72		 jmp	 SHORT $LN44@PyRun_Inte
$LN3@PyRun_Inte:

; 1328 :         }
; 1329 :         PyErr_Print();

  00459	e8 00 00 00 00	 call	 PyErr_Print

; 1330 :         return -1;

  0045e	83 c8 ff	 or	 eax, -1
  00461	eb 68		 jmp	 SHORT $LN44@PyRun_Inte
$LN4@PyRun_Inte:

; 1331 :     }
; 1332 :     m = PyImport_AddModule("__main__");

  00463	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  0046a	e8 00 00 00 00	 call	 PyImport_AddModule

; 1333 :     if (m == NULL) {

  0046f	48 85 c0	 test	 rax, rax
  00472	75 0d		 jne	 SHORT $LN2@PyRun_Inte

; 1334 :         PyArena_Free(arena);

  00474	48 8b cd	 mov	 rcx, rbp
  00477	e8 00 00 00 00	 call	 PyArena_Free

; 1335 :         return -1;

  0047c	83 c8 ff	 or	 eax, -1
  0047f	eb 4a		 jmp	 SHORT $LN44@PyRun_Inte
$LN2@PyRun_Inte:

; 1336 :     }
; 1337 :     d = PyModule_GetDict(m);

  00481	48 8b c8	 mov	 rcx, rax
  00484	e8 00 00 00 00	 call	 PyModule_GetDict

; 1338 :     v = run_mod(mod, filename, d, d, flags, arena);

  00489	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR flags$[rsp]
  00491	48 89 6c 24 28	 mov	 QWORD PTR [rsp+40], rbp
  00496	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0049b	4c 8b c8	 mov	 r9, rax
  0049e	4c 8b c0	 mov	 r8, rax
  004a1	49 8b cc	 mov	 rcx, r12
  004a4	49 8b d5	 mov	 rdx, r13
  004a7	e8 00 00 00 00	 call	 run_mod

; 1339 :     PyArena_Free(arena);

  004ac	48 8b cd	 mov	 rcx, rbp
  004af	48 8b d8	 mov	 rbx, rax
  004b2	e8 00 00 00 00	 call	 PyArena_Free

; 1340 :     flush_io();

  004b7	e8 00 00 00 00	 call	 flush_io

; 1341 :     if (v == NULL) {

  004bc	48 85 db	 test	 rbx, rbx

; 1342 :         PyErr_Print();
; 1343 :         return -1;

  004bf	74 98		 je	 SHORT $LN3@PyRun_Inte

; 1344 :     }
; 1345 :     Py_DECREF(v);

  004c1	48 8b cb	 mov	 rcx, rbx
  004c4	e8 00 00 00 00	 call	 _Py_DecRef

; 1346 :     return 0;

  004c9	33 c0		 xor	 eax, eax
$LN44@PyRun_Inte:

; 1347 : }

  004cb	48 8b 9c 24 a8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+168]
  004d3	48 83 c4 50	 add	 rsp, 80			; 00000050H
  004d7	41 5f		 pop	 r15
  004d9	41 5e		 pop	 r14
  004db	41 5d		 pop	 r13
  004dd	41 5c		 pop	 r12
  004df	5f		 pop	 rdi
  004e0	5e		 pop	 rsi
  004e1	5d		 pop	 rbp
  004e2	c3		 ret	 0
PyRun_InteractiveOneFlags ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@KNHNFDFI@SourceFileLoader?$AA@	; `string'
PUBLIC	??_C@_0CL@HOHNJFCL@python?3?5failed?5to?5set?5__main__?4_@ ; `string'
PUBLIC	??_C@_0BF@JDOCAIAK@SourcelessFileLoader?$AA@	; `string'
PUBLIC	??_C@_0CA@PGFKDAAB@python?3?5Can?8t?5reopen?5?4pyc?5file?6?$AA@ ; `string'
PUBLIC	??_C@_0L@KPCCMMEA@__cached__?$AA@		; `string'
PUBLIC	??_C@_08PFHPBGLK@__file__?$AA@			; `string'
PUBLIC	PyRun_SimpleFileExFlags
EXTRN	PyDict_DelItemString:PROC
EXTRN	Py_OptimizeFlag:DWORD
EXTRN	__imp_fopen:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyRun_SimpleFileExFlags DD imagerel $LN23
	DD	imagerel $LN23+63
	DD	imagerel $unwind$PyRun_SimpleFileExFlags
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyRun_SimpleFileExFlags DD imagerel $LN23+63
	DD	imagerel $LN23+731
	DD	imagerel $chain$2$PyRun_SimpleFileExFlags
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyRun_SimpleFileExFlags DD imagerel $LN23+731
	DD	imagerel $LN23+747
	DD	imagerel $chain$3$PyRun_SimpleFileExFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyRun_SimpleFileExFlags DD 021H
	DD	imagerel $LN23
	DD	imagerel $LN23+63
	DD	imagerel $unwind$PyRun_SimpleFileExFlags
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyRun_SimpleFileExFlags DD 065921H
	DD	0127459H
	DD	0116410H
	DD	0105408H
	DD	imagerel $LN23
	DD	imagerel $LN23+63
	DD	imagerel $unwind$PyRun_SimpleFileExFlags
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_SimpleFileExFlags DD 061201H
	DD	0f00e9212H
	DD	0d00ae00cH
	DD	03006c008H
xdata	ENDS
;	COMDAT ??_C@_0BB@KNHNFDFI@SourceFileLoader?$AA@
CONST	SEGMENT
??_C@_0BB@KNHNFDFI@SourceFileLoader?$AA@ DB 'SourceFileLoader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HOHNJFCL@python?3?5failed?5to?5set?5__main__?4_@
CONST	SEGMENT
??_C@_0CL@HOHNJFCL@python?3?5failed?5to?5set?5__main__?4_@ DB 'python: fa'
	DB	'iled to set __main__.__loader__', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JDOCAIAK@SourcelessFileLoader?$AA@
CONST	SEGMENT
??_C@_0BF@JDOCAIAK@SourcelessFileLoader?$AA@ DB 'SourcelessFileLoader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PGFKDAAB@python?3?5Can?8t?5reopen?5?4pyc?5file?6?$AA@
CONST	SEGMENT
??_C@_0CA@PGFKDAAB@python?3?5Can?8t?5reopen?5?4pyc?5file?6?$AA@ DB 'pytho'
	DB	'n: Can''t reopen .pyc file', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KPCCMMEA@__cached__?$AA@
CONST	SEGMENT
??_C@_0L@KPCCMMEA@__cached__?$AA@ DB '__cached__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PFHPBGLK@__file__?$AA@
CONST	SEGMENT
??_C@_08PFHPBGLK@__file__?$AA@ DB '__file__', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pythonrun.c
CONST	ENDS
;	COMDAT PyRun_SimpleFileExFlags
_TEXT	SEGMENT
set_file_name$1$ = 64
fp$ = 128
filename$ = 136
closeit$ = 144
flags$ = 152
PyRun_SimpleFileExFlags PROC				; COMDAT

; 1423 : {

$LN23:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	53		 push	 rbx
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	41 56		 push	 r14
  0000c	41 57		 push	 r15
  0000e	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00012	4c 8b f9	 mov	 r15, rcx

; 1424 :     PyObject *m, *d, *v;
; 1425 :     const char *ext;
; 1426 :     int set_file_name = 0, ret = -1;
; 1427 :     size_t len;
; 1428 : 
; 1429 :     m = PyImport_AddModule("__main__");

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  0001c	45 8b f0	 mov	 r14d, r8d
  0001f	4c 8b ea	 mov	 r13, rdx
  00022	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR set_file_name$1$[rsp], 0
  0002a	48 83 cb ff	 or	 rbx, -1
  0002e	e8 00 00 00 00	 call	 PyImport_AddModule
  00033	4c 8b e0	 mov	 r12, rax

; 1430 :     if (m == NULL)

  00036	48 85 c0	 test	 rax, rax

; 1431 :         return -1;

  00039	0f 84 9c 02 00
	00		 je	 $LN21@PyRun_Simp

; 1432 :     Py_INCREF(m);

  0003f	48 89 ac 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbp
  00047	48 89 b4 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rsi
  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	75 35		 jne	 SHORT $LN18@PyRun_Simp
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00066	4d 8b cc	 mov	 r9, r12
  00069	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00077	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007c	85 c0		 test	 eax, eax
  0007e	75 08		 jne	 SHORT $LN17@PyRun_Simp
  00080	41 f6 44 24 20
	20		 test	 BYTE PTR [r12+32], 32	; 00000020H
  00086	74 05		 je	 SHORT $LN18@PyRun_Simp
$LN17@PyRun_Simp:
  00088	49 ff 44 24 50	 inc	 QWORD PTR [r12+80]
$LN18@PyRun_Simp:

; 1433 :     d = PyModule_GetDict(m);

  0008d	49 8b cc	 mov	 rcx, r12
  00090	48 89 bc 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rdi
  00098	e8 00 00 00 00	 call	 PyModule_GetDict

; 1434 :     if (PyDict_GetItemString(d, "__file__") == NULL) {

  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PFHPBGLK@__file__?$AA@
  000a4	48 8b c8	 mov	 rcx, rax
  000a7	48 8b e8	 mov	 rbp, rax
  000aa	e8 00 00 00 00	 call	 PyDict_GetItemString
  000af	be 01 00 00 00	 mov	 esi, 1
  000b4	48 85 c0	 test	 rax, rax
  000b7	75 5d		 jne	 SHORT $LN13@PyRun_Simp

; 1435 :         PyObject *f;
; 1436 :         f = PyUnicode_DecodeFSDefault(filename);

  000b9	49 8b cd	 mov	 rcx, r13
  000bc	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  000c1	48 8b f8	 mov	 rdi, rax

; 1437 :         if (f == NULL)

  000c4	48 85 c0	 test	 rax, rax
  000c7	0f 84 ee 01 00
	00		 je	 $LN1@PyRun_Simp

; 1438 :             goto done;
; 1439 :         if (PyDict_SetItemString(d, "__file__", f) < 0) {

  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PFHPBGLK@__file__?$AA@
  000d4	4c 8b c0	 mov	 r8, rax
  000d7	48 8b cd	 mov	 rcx, rbp
  000da	e8 00 00 00 00	 call	 PyDict_SetItemString
  000df	85 c0		 test	 eax, eax
  000e1	79 0d		 jns	 SHORT $LN11@PyRun_Simp

; 1440 :             Py_DECREF(f);

  000e3	48 8b cf	 mov	 rcx, rdi
$LN22@PyRun_Simp:
  000e6	e8 00 00 00 00	 call	 _Py_DecRef

; 1441 :             goto done;

  000eb	e9 cb 01 00 00	 jmp	 $LN1@PyRun_Simp
$LN11@PyRun_Simp:

; 1442 :         }
; 1443 :         if (PyDict_SetItemString(d, "__cached__", Py_None) < 0) {

  000f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@KPCCMMEA@__cached__?$AA@
  000fe	48 8b cd	 mov	 rcx, rbp
  00101	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1444 :             Py_DECREF(f);

  00106	48 8b cf	 mov	 rcx, rdi
  00109	85 c0		 test	 eax, eax

; 1445 :             goto done;

  0010b	78 d9		 js	 SHORT $LN22@PyRun_Simp

; 1446 :         }
; 1447 :         set_file_name = 1;

  0010d	89 74 24 40	 mov	 DWORD PTR set_file_name$1$[rsp], esi

; 1448 :         Py_DECREF(f);

  00111	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@PyRun_Simp:

; 1449 :     }
; 1450 :     len = strlen(filename);

  00116	33 c0		 xor	 eax, eax
  00118	48 8b cb	 mov	 rcx, rbx
  0011b	49 8b fd	 mov	 rdi, r13
  0011e	f2 ae		 repne scasb

; 1451 :     ext = filename + len - (len > 4 ? 4 : 0);
; 1452 :     if (maybe_pyc_file(fp, filename, ext, closeit)) {

  00120	45 8b c6	 mov	 r8d, r14d
  00123	48 f7 d1	 not	 rcx
  00126	48 8d 71 ff	 lea	 rsi, QWORD PTR [rcx-1]
  0012a	b9 04 00 00 00	 mov	 ecx, 4
  0012f	48 3b f1	 cmp	 rsi, rcx
  00132	0f 47 c1	 cmova	 eax, ecx
  00135	49 8b cf	 mov	 rcx, r15
  00138	48 2b f0	 sub	 rsi, rax
  0013b	49 03 f5	 add	 rsi, r13
  0013e	48 8b d6	 mov	 rdx, rsi
  00141	e8 00 00 00 00	 call	 maybe_pyc_file
  00146	85 c0		 test	 eax, eax
  00148	0f 84 c3 00 00
	00		 je	 $LN9@PyRun_Simp

; 1453 :         FILE *pyc_fp;
; 1454 :         /* Try to run a pyc file. First, re-open in binary */
; 1455 :         if (closeit)

  0014e	45 85 f6	 test	 r14d, r14d
  00151	74 09		 je	 SHORT $LN8@PyRun_Simp

; 1456 :             fclose(fp);

  00153	49 8b cf	 mov	 rcx, r15
  00156	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
$LN8@PyRun_Simp:

; 1457 :         if ((pyc_fp = fopen(filename, "rb")) == NULL) {

  0015c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  00163	49 8b cd	 mov	 rcx, r13
  00166	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  0016c	4c 8b f0	 mov	 r14, rax
  0016f	48 85 c0	 test	 rax, rax
  00172	75 1c		 jne	 SHORT $LN7@PyRun_Simp

; 1458 :             fprintf(stderr, "python: Can't reopen .pyc file\n");

  00174	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0017a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@PGFKDAAB@python?3?5Can?8t?5reopen?5?4pyc?5file?6?$AA@
  00181	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00185	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 1459 :             goto done;

  0018b	e9 0c 01 00 00	 jmp	 $done$122782
$LN7@PyRun_Simp:

; 1460 :         }
; 1461 :         /* Turn on optimization if a .pyo file is given */
; 1462 :         if (strcmp(ext, ".pyo") == 0)

  00190	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR Py_OptimizeFlag
  00196	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_04JFFGBNKM@?4pyo?$AA@
  0019d	b9 05 00 00 00	 mov	 ecx, 5
  001a2	f3 a6		 repe cmpsb
  001a4	b9 01 00 00 00	 mov	 ecx, 1

; 1463 :             Py_OptimizeFlag = 1;
; 1464 : 
; 1465 :         if (set_main_loader(d, filename, "SourcelessFileLoader") < 0) {

  001a9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BF@JDOCAIAK@SourcelessFileLoader?$AA@
  001b0	0f 44 c1	 cmove	 eax, ecx
  001b3	48 8b cd	 mov	 rcx, rbp
  001b6	49 8b d5	 mov	 rdx, r13
  001b9	89 05 00 00 00
	00		 mov	 DWORD PTR Py_OptimizeFlag, eax
  001bf	e8 00 00 00 00	 call	 set_main_loader
  001c4	85 c0		 test	 eax, eax
  001c6	79 25		 jns	 SHORT $LN5@PyRun_Simp

; 1466 :             fprintf(stderr, "python: failed to set __main__.__loader__\n");

  001c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  001ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@HOHNJFCL@python?3?5failed?5to?5set?5__main__?4_@
  001d5	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  001d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 1467 :             ret = -1;
; 1468 :             fclose(pyc_fp);

  001df	49 8b ce	 mov	 rcx, r14
  001e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 1469 :             goto done;

  001e8	e9 af 00 00 00	 jmp	 $done$122782
$LN5@PyRun_Simp:

; 1470 :         }
; 1471 :         v = run_pyc_file(pyc_fp, filename, d, d, flags);

  001ed	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR flags$[rsp]
  001f5	4c 8b c5	 mov	 r8, rbp
  001f8	48 8b d5	 mov	 rdx, rbp
  001fb	49 8b ce	 mov	 rcx, r14
  001fe	e8 00 00 00 00	 call	 run_pyc_file

; 1472 :         fclose(pyc_fp);

  00203	49 8b ce	 mov	 rcx, r14
  00206	48 8b f8	 mov	 rdi, rax
  00209	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 1473 :     } else {

  0020f	eb 70		 jmp	 SHORT $LN4@PyRun_Simp
$LN9@PyRun_Simp:

; 1474 :         /* When running from stdin, leave __main__.__loader__ alone */
; 1475 :         if (strcmp(filename, "<stdin>") != 0 &&
; 1476 :             set_main_loader(d, filename, "SourceFileLoader") < 0) {

  00211	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_07CMJMHHJG@?$DMstdin?$DO?$AA@
  00218	49 8b f5	 mov	 rsi, r13
  0021b	b9 08 00 00 00	 mov	 ecx, 8
  00220	f3 a6		 repe cmpsb
  00222	74 2f		 je	 SHORT $LN3@PyRun_Simp
  00224	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@KNHNFDFI@SourceFileLoader?$AA@
  0022b	49 8b d5	 mov	 rdx, r13
  0022e	48 8b cd	 mov	 rcx, rbp
  00231	e8 00 00 00 00	 call	 set_main_loader
  00236	85 c0		 test	 eax, eax
  00238	79 19		 jns	 SHORT $LN3@PyRun_Simp

; 1477 :             fprintf(stderr, "python: failed to set __main__.__loader__\n");

  0023a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00240	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@HOHNJFCL@python?3?5failed?5to?5set?5__main__?4_@
  00247	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  0024b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 1478 :             ret = -1;
; 1479 :             goto done;

  00251	eb 49		 jmp	 SHORT $done$122782
$LN3@PyRun_Simp:

; 1480 :         }
; 1481 :         v = PyRun_FileExFlags(fp, filename, Py_file_input, d, d,
; 1482 :                               closeit, flags);

  00253	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR flags$[rsp]
  0025b	4c 8b cd	 mov	 r9, rbp
  0025e	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  00264	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00269	49 8b d5	 mov	 rdx, r13
  0026c	49 8b cf	 mov	 rcx, r15
  0026f	44 89 74 24 28	 mov	 DWORD PTR [rsp+40], r14d
  00274	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00279	e8 00 00 00 00	 call	 PyRun_FileExFlags
  0027e	48 8b f8	 mov	 rdi, rax
$LN4@PyRun_Simp:

; 1483 :     }
; 1484 :     flush_io();

  00281	e8 00 00 00 00	 call	 flush_io

; 1485 :     if (v == NULL) {

  00286	48 85 ff	 test	 rdi, rdi
  00289	75 07		 jne	 SHORT $LN2@PyRun_Simp

; 1486 :         PyErr_Print();

  0028b	e8 00 00 00 00	 call	 PyErr_Print

; 1487 :         goto done;

  00290	eb 0a		 jmp	 SHORT $done$122782
$LN2@PyRun_Simp:

; 1488 :     }
; 1489 :     Py_DECREF(v);

  00292	48 8b cf	 mov	 rcx, rdi
  00295	e8 00 00 00 00	 call	 _Py_DecRef

; 1490 :     ret = 0;

  0029a	33 db		 xor	 ebx, ebx
$done$122782:

; 1491 :   done:
; 1492 :     if (set_file_name && PyDict_DelItemString(d, "__file__"))

  0029c	83 7c 24 40 00	 cmp	 DWORD PTR set_file_name$1$[rsp], 0
  002a1	74 18		 je	 SHORT $LN1@PyRun_Simp
  002a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PFHPBGLK@__file__?$AA@
  002aa	48 8b cd	 mov	 rcx, rbp
  002ad	e8 00 00 00 00	 call	 PyDict_DelItemString
  002b2	85 c0		 test	 eax, eax
  002b4	74 05		 je	 SHORT $LN1@PyRun_Simp

; 1493 :         PyErr_Clear();

  002b6	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@PyRun_Simp:

; 1494 :     Py_DECREF(m);

  002bb	49 8b cc	 mov	 rcx, r12
  002be	e8 00 00 00 00	 call	 _Py_DecRef
  002c3	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR [rsp+144]
  002cb	48 8b b4 24 88
	00 00 00	 mov	 rsi, QWORD PTR [rsp+136]
  002d3	48 8b ac 24 80
	00 00 00	 mov	 rbp, QWORD PTR [rsp+128]
$LN21@PyRun_Simp:

; 1495 :     return ret;

  002db	8b c3		 mov	 eax, ebx

; 1496 : }

  002dd	48 83 c4 50	 add	 rsp, 80			; 00000050H
  002e1	41 5f		 pop	 r15
  002e3	41 5e		 pop	 r14
  002e5	41 5d		 pop	 r13
  002e7	41 5c		 pop	 r12
  002e9	5b		 pop	 rbx
  002ea	c3		 ret	 0
PyRun_SimpleFileExFlags ENDP
_TEXT	ENDS
PUBLIC	PyRun_SimpleStringFlags
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_SimpleStringFlags DD imagerel $LN6
	DD	imagerel $LN6+110
	DD	imagerel $unwind$PyRun_SimpleStringFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_SimpleStringFlags DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyRun_SimpleStringFlags
_TEXT	SEGMENT
command$ = 64
flags$ = 72
PyRun_SimpleStringFlags PROC				; COMDAT

; 1500 : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1501 :     PyObject *m, *d, *v;
; 1502 :     m = PyImport_AddModule("__main__");

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  00014	48 8b da	 mov	 rbx, rdx
  00017	e8 00 00 00 00	 call	 PyImport_AddModule

; 1503 :     if (m == NULL)

  0001c	48 85 c0	 test	 rax, rax

; 1504 :         return -1;

  0001f	74 2a		 je	 SHORT $LN5@PyRun_Simp@2

; 1505 :     d = PyModule_GetDict(m);

  00021	48 8b c8	 mov	 rcx, rax
  00024	e8 00 00 00 00	 call	 PyModule_GetDict

; 1506 :     v = PyRun_StringFlags(command, Py_file_input, d, d, flags);

  00029	ba 01 01 00 00	 mov	 edx, 257		; 00000101H
  0002e	48 8b cf	 mov	 rcx, rdi
  00031	4c 8b c8	 mov	 r9, rax
  00034	4c 8b c0	 mov	 r8, rax
  00037	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0003c	e8 00 00 00 00	 call	 PyRun_StringFlags

; 1507 :     if (v == NULL) {

  00041	48 85 c0	 test	 rax, rax
  00044	75 13		 jne	 SHORT $LN1@PyRun_Simp@2

; 1508 :         PyErr_Print();

  00046	e8 00 00 00 00	 call	 PyErr_Print
$LN5@PyRun_Simp@2:

; 1509 :         return -1;

  0004b	83 c8 ff	 or	 eax, -1

; 1512 :     return 0;
; 1513 : }

  0004e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
$LN1@PyRun_Simp@2:

; 1510 :     }
; 1511 :     Py_DECREF(v);

  00059	48 8b c8	 mov	 rcx, rax
  0005c	e8 00 00 00 00	 call	 _Py_DecRef

; 1512 :     return 0;
; 1513 : }

  00061	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00066	33 c0		 xor	 eax, eax
  00068	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006c	5f		 pop	 rdi
  0006d	c3		 ret	 0
PyRun_SimpleStringFlags ENDP
_TEXT	ENDS
PUBLIC	PyRun_SimpleFile
; Function compile flags: /Ogtpy
;	COMDAT PyRun_SimpleFile
_TEXT	SEGMENT
f$ = 8
p$ = 16
PyRun_SimpleFile PROC					; COMDAT

; 2726 :     return PyRun_SimpleFileExFlags(f, p, 0, NULL);

  00000	45 33 c9	 xor	 r9d, r9d
  00003	45 33 c0	 xor	 r8d, r8d

; 2727 : }

  00006	e9 00 00 00 00	 jmp	 PyRun_SimpleFileExFlags
PyRun_SimpleFile ENDP
_TEXT	ENDS
PUBLIC	PyRun_SimpleFileEx
; Function compile flags: /Ogtpy
;	COMDAT PyRun_SimpleFileEx
_TEXT	SEGMENT
f$ = 8
p$ = 16
c$ = 24
PyRun_SimpleFileEx PROC					; COMDAT

; 2733 :     return PyRun_SimpleFileExFlags(f, p, c, NULL);

  00000	45 33 c9	 xor	 r9d, r9d

; 2734 : }

  00003	e9 00 00 00 00	 jmp	 PyRun_SimpleFileExFlags
PyRun_SimpleFileEx ENDP
_TEXT	ENDS
PUBLIC	PyRun_SimpleString
; Function compile flags: /Ogtpy
;	COMDAT PyRun_SimpleString
_TEXT	SEGMENT
s$ = 8
PyRun_SimpleString PROC					; COMDAT

; 2748 :     return PyRun_SimpleStringFlags(s, NULL);

  00000	33 d2		 xor	 edx, edx

; 2749 : }

  00002	e9 00 00 00 00	 jmp	 PyRun_SimpleStringFlags
PyRun_SimpleString ENDP
_TEXT	ENDS
PUBLIC	PyRun_InteractiveOne
; Function compile flags: /Ogtpy
;	COMDAT PyRun_InteractiveOne
_TEXT	SEGMENT
f$ = 8
p$ = 16
PyRun_InteractiveOne PROC				; COMDAT

; 2770 :     return PyRun_InteractiveOneFlags(f, p, NULL);

  00000	45 33 c0	 xor	 r8d, r8d

; 2771 : }

  00003	e9 00 00 00 00	 jmp	 PyRun_InteractiveOneFlags
PyRun_InteractiveOne ENDP
_TEXT	ENDS
PUBLIC	??_C@_06NAHKMOGH@_async?$AA@			; `string'
PUBLIC	??_C@_0CO@PJOLMBNF@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	??_C@_09KKLBMLNG@_parallel?$AA@			; `string'
PUBLIC	??_C@_0DB@GBLAJFBE@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	??_C@_0CG@PJEKFHMO@?8import?5warnings?8?5failed?$DL?5traceb@ ; `string'
PUBLIC	??_C@_0DF@BMECFJNN@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	??_C@_0DE@GJBFCCGH@Py_Initialize?3?5unable?5to?5load?5th@ ; `string'
PUBLIC	??_C@_0CN@LMHHBFOI@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	??_C@_0CM@PBJGLECD@Py_Initialize?3?5can?8t?5set?5prelimi@ ; `string'
PUBLIC	??_C@_07DFGEOAEG@modules?$AA@			; `string'
PUBLIC	??_C@_03PIADFGHL@sys?$AA@			; `string'
PUBLIC	??_C@_0CJ@PDBCFFEI@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	??_C@_0CE@DDAMEANI@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	??_C@_0CO@LKOHMMCC@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	??_C@_0DB@FOMCBPB@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	??_C@_0CI@KMMHKOEA@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	??_C@_0CN@GDNGMGLE@Py_Initialize?3?5can?8t?5make?5module@ ; `string'
PUBLIC	??_C@_0CE@GMGFLAMI@Py_Initialize?3?5can?8t?5init?5bytear@ ; `string'
PUBLIC	??_C@_0CA@HKLDAHHJ@Py_Initialize?3?5can?8t?5init?5longs?$AA@ ; `string'
PUBLIC	??_C@_0CB@MDMPLGNG@Py_Initialize?3?5can?8t?5init?5frames@ ; `string'
PUBLIC	??_C@_0CH@HJDBGLIJ@Py_Initialize?3?5can?8t?5make?5first?5@ ; `string'
PUBLIC	??_C@_0CM@DNEMEGHJ@Py_Initialize?3?5can?8t?5make?5first?5@ ; `string'
PUBLIC	??_C@_0P@FFABKKFN@PYTHONHASHSEED?$AA@		; `string'
PUBLIC	??_C@_0BI@OGIPAPOL@PYTHONDONTWRITEBYTECODE?$AA@	; `string'
PUBLIC	??_C@_0P@BEONFIFN@PYTHONOPTIMIZE?$AA@		; `string'
PUBLIC	??_C@_0O@GLMLAMNF@PYTHONVERBOSE?$AA@		; `string'
PUBLIC	??_C@_0M@GKBGODBJ@PYTHONDEBUG?$AA@		; `string'
PUBLIC	_Py_InitializeEx_Private
EXTRN	_PyAsync_ModInit:PROC
EXTRN	_PyParallel_ModInit:PROC
EXTRN	PySys_HasWarnOptions:PROC
EXTRN	_PyTime_Init:PROC
EXTRN	_PyFaulthandler_Init:PROC
EXTRN	_PyWarnings_Init:PROC
EXTRN	_PyImportHooks_Init:PROC
EXTRN	_PyImport_Init:PROC
EXTRN	PyFile_NewStdPrinter:PROC
EXTRN	PySys_SetPath:PROC
EXTRN	Py_GetPath:PROC
EXTRN	_PySys_Init:PROC
EXTRN	_PyExc_Init:PROC
EXTRN	_PyImport_FixupBuiltin:PROC
EXTRN	_PyBuiltin_Init:PROC
EXTRN	_PyUnicode_Init:PROC
EXTRN	PyDict_New:PROC
EXTRN	_PyFloat_Init:PROC
EXTRN	PyByteArray_Init:PROC
EXTRN	_PyLong_Init:PROC
EXTRN	_PyFrame_Init:PROC
EXTRN	_Py_ReadyTypes:PROC
EXTRN	_PyGILState_Init:PROC
EXTRN	_PyEval_FiniThreads:PROC
EXTRN	PyThreadState_New:PROC
EXTRN	PyInterpreterState_New:PROC
EXTRN	_PyRandom_Init:PROC
EXTRN	_PyParallel_Init:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_InitializeEx_Private DD imagerel $LN68
	DD	imagerel $LN68+29
	DD	imagerel $unwind$_Py_InitializeEx_Private
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_Py_InitializeEx_Private DD imagerel $LN68+29
	DD	imagerel $LN68+49
	DD	imagerel $chain$1$_Py_InitializeEx_Private
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_Py_InitializeEx_Private DD imagerel $LN68+49
	DD	imagerel $LN68+959
	DD	imagerel $chain$2$_Py_InitializeEx_Private
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_Py_InitializeEx_Private DD imagerel $LN68+959
	DD	imagerel $LN68+1344
	DD	imagerel $chain$3$_Py_InitializeEx_Private
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_Py_InitializeEx_Private DD imagerel $LN68+1344
	DD	imagerel $LN68+1356
	DD	imagerel $chain$4$_Py_InitializeEx_Private
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_Py_InitializeEx_Private DD 021H
	DD	imagerel $LN68
	DD	imagerel $LN68+29
	DD	imagerel $unwind$_Py_InitializeEx_Private
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_Py_InitializeEx_Private DD 021H
	DD	imagerel $LN68+29
	DD	imagerel $LN68+49
	DD	imagerel $chain$1$_Py_InitializeEx_Private
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_Py_InitializeEx_Private DD 020521H
	DD	0a7405H
	DD	imagerel $LN68+29
	DD	imagerel $LN68+49
	DD	imagerel $chain$1$_Py_InitializeEx_Private
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_Py_InitializeEx_Private DD 040a21H
	DD	09640aH
	DD	083405H
	DD	imagerel $LN68
	DD	imagerel $LN68+29
	DD	imagerel $unwind$_Py_InitializeEx_Private
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_InitializeEx_Private DD 040b01H
	DD	0b540bH
	DD	0c007520bH
xdata	ENDS
;	COMDAT ??_C@_06NAHKMOGH@_async?$AA@
CONST	SEGMENT
??_C@_06NAHKMOGH@_async?$AA@ DB '_async', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PJOLMBNF@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0CO@PJOLMBNF@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initiali'
	DB	'ze: can''t initialize _async module', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KKLBMLNG@_parallel?$AA@
CONST	SEGMENT
??_C@_09KKLBMLNG@_parallel?$AA@ DB '_parallel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@GBLAJFBE@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0DB@GBLAJFBE@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initiali'
	DB	'ze: can''t initialize _parallel module', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PJEKFHMO@?8import?5warnings?8?5failed?$DL?5traceb@
CONST	SEGMENT
??_C@_0CG@PJEKFHMO@?8import?5warnings?8?5failed?$DL?5traceb@ DB '''import'
	DB	' warnings'' failed; traceback:', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@BMECFJNN@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0DF@BMECFJNN@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initiali'
	DB	'ze: can''t initialize sys standard streams', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@GJBFCCGH@Py_Initialize?3?5unable?5to?5load?5th@
CONST	SEGMENT
??_C@_0DE@GJBFCCGH@Py_Initialize?3?5unable?5to?5load?5th@ DB 'Py_Initiali'
	DB	'ze: unable to load the file system codec', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LMHHBFOI@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0CN@LMHHBFOI@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initiali'
	DB	'ze: can''t initialize faulthandler', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PBJGLECD@Py_Initialize?3?5can?8t?5set?5prelimi@
CONST	SEGMENT
??_C@_0CM@PBJGLECD@Py_Initialize?3?5can?8t?5set?5prelimi@ DB 'Py_Initiali'
	DB	'ze: can''t set preliminary stderr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DFGEOAEG@modules?$AA@
CONST	SEGMENT
??_C@_07DFGEOAEG@modules?$AA@ DB 'modules', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PIADFGHL@sys?$AA@
CONST	SEGMENT
??_C@_03PIADFGHL@sys?$AA@ DB 'sys', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PDBCFFEI@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0CJ@PDBCFFEI@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initiali'
	DB	'ze: can''t initialize sys dict', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DDAMEANI@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0CE@DDAMEANI@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initiali'
	DB	'ze: can''t initialize sys', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@LKOHMMCC@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0CO@LKOHMMCC@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initiali'
	DB	'ze: can''t initialize builtins dict', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@FOMCBPB@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0DB@FOMCBPB@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initializ'
	DB	'e: can''t initialize builtins modules', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KMMHKOEA@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0CI@KMMHKOEA@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initiali'
	DB	'ze: can''t initialize unicode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@GDNGMGLE@Py_Initialize?3?5can?8t?5make?5module@
CONST	SEGMENT
??_C@_0CN@GDNGMGLE@Py_Initialize?3?5can?8t?5make?5module@ DB 'Py_Initiali'
	DB	'ze: can''t make modules dictionary', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GMGFLAMI@Py_Initialize?3?5can?8t?5init?5bytear@
CONST	SEGMENT
??_C@_0CE@GMGFLAMI@Py_Initialize?3?5can?8t?5init?5bytear@ DB 'Py_Initiali'
	DB	'ze: can''t init bytearray', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HKLDAHHJ@Py_Initialize?3?5can?8t?5init?5longs?$AA@
CONST	SEGMENT
??_C@_0CA@HKLDAHHJ@Py_Initialize?3?5can?8t?5init?5longs?$AA@ DB 'Py_Initi'
	DB	'alize: can''t init longs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MDMPLGNG@Py_Initialize?3?5can?8t?5init?5frames@
CONST	SEGMENT
??_C@_0CB@MDMPLGNG@Py_Initialize?3?5can?8t?5init?5frames@ DB 'Py_Initiali'
	DB	'ze: can''t init frames', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HJDBGLIJ@Py_Initialize?3?5can?8t?5make?5first?5@
CONST	SEGMENT
??_C@_0CH@HJDBGLIJ@Py_Initialize?3?5can?8t?5make?5first?5@ DB 'Py_Initial'
	DB	'ize: can''t make first thread', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@DNEMEGHJ@Py_Initialize?3?5can?8t?5make?5first?5@
CONST	SEGMENT
??_C@_0CM@DNEMEGHJ@Py_Initialize?3?5can?8t?5make?5first?5@ DB 'Py_Initial'
	DB	'ize: can''t make first interpreter', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FFABKKFN@PYTHONHASHSEED?$AA@
CONST	SEGMENT
??_C@_0P@FFABKKFN@PYTHONHASHSEED?$AA@ DB 'PYTHONHASHSEED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OGIPAPOL@PYTHONDONTWRITEBYTECODE?$AA@
CONST	SEGMENT
??_C@_0BI@OGIPAPOL@PYTHONDONTWRITEBYTECODE?$AA@ DB 'PYTHONDONTWRITEBYTECO'
	DB	'DE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BEONFIFN@PYTHONOPTIMIZE?$AA@
CONST	SEGMENT
??_C@_0P@BEONFIFN@PYTHONOPTIMIZE?$AA@ DB 'PYTHONOPTIMIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GLMLAMNF@PYTHONVERBOSE?$AA@
CONST	SEGMENT
??_C@_0O@GLMLAMNF@PYTHONVERBOSE?$AA@ DB 'PYTHONVERBOSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GKBGODBJ@PYTHONDEBUG?$AA@
CONST	SEGMENT
??_C@_0M@GKBGODBJ@PYTHONDEBUG?$AA@ DB 'PYTHONDEBUG', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pythonrun.c
CONST	ENDS
;	COMDAT _Py_InitializeEx_Private
_TEXT	SEGMENT
install_sigs$ = 64
install_importlib$ = 72
_Py_InitializeEx_Private PROC				; COMDAT

; 249  : {

$LN68:
  00000	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00005	41 54		 push	 r12
  00007	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 250  :     PyInterpreterState *interp;
; 251  :     PyThreadState *tstate;
; 252  :     PyObject *bimod, *sysmod, *pstderr;
; 253  : #ifdef WITH_PARALLEL
; 254  :     PyObject *_parallelmod;
; 255  :     PyObject *_asyncmod;
; 256  : #endif
; 257  :     char *p;
; 258  :     extern void _Py_ReadyTypes(void);
; 259  : 
; 260  :     if (initialized)

  0000b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR initialized, 0
  00012	44 8b e2	 mov	 r12d, edx
  00015	8b e9		 mov	 ebp, ecx
  00017	0f 85 23 05 00
	00		 jne	 $LN33@Py_Initial

; 261  :         return;
; 262  :     initialized = 1;

  0001d	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00022	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  00027	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR initialized, 1
  00031	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi

; 263  :     _Py_Finalizing = NULL;

  00036	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR _Py_Finalizing, 0

; 264  : 
; 265  : #ifdef WITH_PARALLEL
; 266  :     _PyParallel_Init();

  00041	e8 00 00 00 00	 call	 _PyParallel_Init

; 267  : #endif
; 268  : 
; 269  : #if defined(HAVE_LANGINFO_H) && defined(HAVE_SETLOCALE)
; 270  :     /* Set up the LC_CTYPE locale, so we can obtain
; 271  :        the locale's charset without having to switch
; 272  :        locales. */
; 273  :     setlocale(LC_CTYPE, "");
; 274  : #endif
; 275  : 
; 276  :     if ((p = Py_GETENV("PYTHONDEBUG")) && *p != '\0')

  00046	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, 0
  0004d	0f 85 03 01 00
	00		 jne	 $LN27@Py_Initial
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GKBGODBJ@PYTHONDEBUG?$AA@
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  00060	48 85 c0	 test	 rax, rax
  00063	74 19		 je	 SHORT $LN31@Py_Initial
  00065	80 38 00	 cmp	 BYTE PTR [rax], 0
  00068	74 14		 je	 SHORT $LN31@Py_Initial

; 277  :         Py_DebugFlag = add_flag(Py_DebugFlag, p);

  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_DebugFlag
  00070	48 8b d0	 mov	 rdx, rax
  00073	e8 00 00 00 00	 call	 add_flag
  00078	89 05 00 00 00
	00		 mov	 DWORD PTR Py_DebugFlag, eax
$LN31@Py_Initial:

; 278  :     if ((p = Py_GETENV("PYTHONVERBOSE")) && *p != '\0')

  0007e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, 0
  00085	0f 85 cb 00 00
	00		 jne	 $LN27@Py_Initial
  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GLMLAMNF@PYTHONVERBOSE?$AA@
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  00098	48 85 c0	 test	 rax, rax
  0009b	74 19		 je	 SHORT $LN30@Py_Initial
  0009d	80 38 00	 cmp	 BYTE PTR [rax], 0
  000a0	74 14		 je	 SHORT $LN30@Py_Initial

; 279  :         Py_VerboseFlag = add_flag(Py_VerboseFlag, p);

  000a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_VerboseFlag
  000a8	48 8b d0	 mov	 rdx, rax
  000ab	e8 00 00 00 00	 call	 add_flag
  000b0	89 05 00 00 00
	00		 mov	 DWORD PTR Py_VerboseFlag, eax
$LN30@Py_Initial:

; 280  :     if ((p = Py_GETENV("PYTHONOPTIMIZE")) && *p != '\0')

  000b6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, 0
  000bd	0f 85 93 00 00
	00		 jne	 $LN27@Py_Initial
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@BEONFIFN@PYTHONOPTIMIZE?$AA@
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  000d0	48 85 c0	 test	 rax, rax
  000d3	74 19		 je	 SHORT $LN29@Py_Initial
  000d5	80 38 00	 cmp	 BYTE PTR [rax], 0
  000d8	74 14		 je	 SHORT $LN29@Py_Initial

; 281  :         Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p);

  000da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_OptimizeFlag
  000e0	48 8b d0	 mov	 rdx, rax
  000e3	e8 00 00 00 00	 call	 add_flag
  000e8	89 05 00 00 00
	00		 mov	 DWORD PTR Py_OptimizeFlag, eax
$LN29@Py_Initial:

; 282  :     if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p != '\0')

  000ee	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, 0
  000f5	75 5f		 jne	 SHORT $LN27@Py_Initial
  000f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@OGIPAPOL@PYTHONDONTWRITEBYTECODE?$AA@
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  00104	48 85 c0	 test	 rax, rax
  00107	74 19		 je	 SHORT $LN28@Py_Initial
  00109	80 38 00	 cmp	 BYTE PTR [rax], 0
  0010c	74 14		 je	 SHORT $LN28@Py_Initial

; 283  :         Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p);

  0010e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_DontWriteBytecodeFlag
  00114	48 8b d0	 mov	 rdx, rax
  00117	e8 00 00 00 00	 call	 add_flag
  0011c	89 05 00 00 00
	00		 mov	 DWORD PTR Py_DontWriteBytecodeFlag, eax
$LN28@Py_Initial:

; 284  :     /* The variable is only tested for existence here; _PyRandom_Init will
; 285  :        check its value further. */
; 286  :     if ((p = Py_GETENV("PYTHONHASHSEED")) && *p != '\0')

  00122	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, 0
  00129	75 2b		 jne	 SHORT $LN27@Py_Initial
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@FFABKKFN@PYTHONHASHSEED?$AA@
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  00138	48 85 c0	 test	 rax, rax
  0013b	74 19		 je	 SHORT $LN27@Py_Initial
  0013d	80 38 00	 cmp	 BYTE PTR [rax], 0
  00140	74 14		 je	 SHORT $LN27@Py_Initial

; 287  :         Py_HashRandomizationFlag = add_flag(Py_HashRandomizationFlag, p);

  00142	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_HashRandomizationFlag
  00148	48 8b d0	 mov	 rdx, rax
  0014b	e8 00 00 00 00	 call	 add_flag
  00150	89 05 00 00 00
	00		 mov	 DWORD PTR Py_HashRandomizationFlag, eax
$LN27@Py_Initial:

; 288  : 
; 289  :     _PyRandom_Init();

  00156	e8 00 00 00 00	 call	 _PyRandom_Init

; 290  : 
; 291  :     interp = PyInterpreterState_New();

  0015b	e8 00 00 00 00	 call	 PyInterpreterState_New
  00160	48 8b d8	 mov	 rbx, rax

; 292  :     if (interp == NULL)

  00163	48 85 c0	 test	 rax, rax
  00166	75 0c		 jne	 SHORT $LN26@Py_Initial

; 293  :         Py_FatalError("Py_Initialize: can't make first interpreter");

  00168	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@DNEMEGHJ@Py_Initialize?3?5can?8t?5make?5first?5@
  0016f	e8 00 00 00 00	 call	 Py_FatalError
$LN26@Py_Initial:

; 294  : 
; 295  :     tstate = PyThreadState_New(interp);

  00174	48 8b cb	 mov	 rcx, rbx
  00177	e8 00 00 00 00	 call	 PyThreadState_New
  0017c	48 8b f8	 mov	 rdi, rax

; 296  :     if (tstate == NULL)

  0017f	48 85 c0	 test	 rax, rax
  00182	75 0c		 jne	 SHORT $LN25@Py_Initial

; 297  :         Py_FatalError("Py_Initialize: can't make first thread");

  00184	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@HJDBGLIJ@Py_Initialize?3?5can?8t?5make?5first?5@
  0018b	e8 00 00 00 00	 call	 Py_FatalError
$LN25@Py_Initial:

; 298  :     (void) PyThreadState_Swap(tstate);

  00190	48 8b cf	 mov	 rcx, rdi
  00193	e8 00 00 00 00	 call	 PyThreadState_Swap

; 299  : 
; 300  : #ifdef WITH_PARALLEL
; 301  :     /*_PyParallel_InterpreterCreatedFirstThread(tstate);*/
; 302  : #endif
; 303  : 
; 304  : #ifdef WITH_THREAD
; 305  :     /* We can't call _PyEval_FiniThreads() in Py_Finalize because
; 306  :        destroying the GIL might fail when it is being referenced from
; 307  :        another running thread (see issue #9901).
; 308  :        Instead we destroy the previously created GIL here, which ensures
; 309  :        that we can call Py_Initialize / Py_Finalize multiple times. */
; 310  :     _PyEval_FiniThreads();

  00198	e8 00 00 00 00	 call	 _PyEval_FiniThreads

; 311  : 
; 312  :     /* Auto-thread-state API */
; 313  :     _PyGILState_Init(interp, tstate);

  0019d	48 8b d7	 mov	 rdx, rdi
  001a0	48 8b cb	 mov	 rcx, rbx
  001a3	e8 00 00 00 00	 call	 _PyGILState_Init

; 314  : #endif /* WITH_THREAD */
; 315  : 
; 316  :     _Py_ReadyTypes();

  001a8	e8 00 00 00 00	 call	 _Py_ReadyTypes

; 317  : 
; 318  :     if (!_PyFrame_Init())

  001ad	e8 00 00 00 00	 call	 _PyFrame_Init
  001b2	85 c0		 test	 eax, eax
  001b4	75 0c		 jne	 SHORT $LN24@Py_Initial

; 319  :         Py_FatalError("Py_Initialize: can't init frames");

  001b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@MDMPLGNG@Py_Initialize?3?5can?8t?5init?5frames@
  001bd	e8 00 00 00 00	 call	 Py_FatalError
$LN24@Py_Initial:

; 320  : 
; 321  :     if (!_PyLong_Init())

  001c2	e8 00 00 00 00	 call	 _PyLong_Init
  001c7	85 c0		 test	 eax, eax
  001c9	75 0c		 jne	 SHORT $LN23@Py_Initial

; 322  :         Py_FatalError("Py_Initialize: can't init longs");

  001cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@HKLDAHHJ@Py_Initialize?3?5can?8t?5init?5longs?$AA@
  001d2	e8 00 00 00 00	 call	 Py_FatalError
$LN23@Py_Initial:

; 323  : 
; 324  :     if (!PyByteArray_Init())

  001d7	e8 00 00 00 00	 call	 PyByteArray_Init
  001dc	85 c0		 test	 eax, eax
  001de	75 0c		 jne	 SHORT $LN22@Py_Initial

; 325  :         Py_FatalError("Py_Initialize: can't init bytearray");

  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@GMGFLAMI@Py_Initialize?3?5can?8t?5init?5bytear@
  001e7	e8 00 00 00 00	 call	 Py_FatalError
$LN22@Py_Initial:

; 326  : 
; 327  :     _PyFloat_Init();

  001ec	e8 00 00 00 00	 call	 _PyFloat_Init

; 328  : 
; 329  :     interp->modules = PyDict_New();

  001f1	e8 00 00 00 00	 call	 PyDict_New
  001f6	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 330  :     if (interp->modules == NULL)

  001fa	48 85 c0	 test	 rax, rax
  001fd	75 0c		 jne	 SHORT $LN21@Py_Initial

; 331  :         Py_FatalError("Py_Initialize: can't make modules dictionary");

  001ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@GDNGMGLE@Py_Initialize?3?5can?8t?5make?5module@
  00206	e8 00 00 00 00	 call	 Py_FatalError
$LN21@Py_Initial:

; 332  : 
; 333  :     /* Init Unicode implementation; relies on the codec registry */
; 334  :     if (_PyUnicode_Init() < 0)

  0020b	e8 00 00 00 00	 call	 _PyUnicode_Init
  00210	85 c0		 test	 eax, eax
  00212	79 0c		 jns	 SHORT $LN20@Py_Initial

; 335  :         Py_FatalError("Py_Initialize: can't initialize unicode");

  00214	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@KMMHKOEA@Py_Initialize?3?5can?8t?5initialize?5@
  0021b	e8 00 00 00 00	 call	 Py_FatalError
$LN20@Py_Initial:

; 336  : 
; 337  :     bimod = _PyBuiltin_Init();

  00220	e8 00 00 00 00	 call	 _PyBuiltin_Init
  00225	48 8b f8	 mov	 rdi, rax

; 338  :     if (bimod == NULL)

  00228	48 85 c0	 test	 rax, rax
  0022b	75 0c		 jne	 SHORT $LN19@Py_Initial

; 339  :         Py_FatalError("Py_Initialize: can't initialize builtins modules");

  0022d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@FOMCBPB@Py_Initialize?3?5can?8t?5initialize?5@
  00234	e8 00 00 00 00	 call	 Py_FatalError
$LN19@Py_Initial:

; 340  :     _PyImport_FixupBuiltin(bimod, "builtins");

  00239	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00240	48 8b cf	 mov	 rcx, rdi
  00243	e8 00 00 00 00	 call	 _PyImport_FixupBuiltin

; 341  :     interp->builtins = PyModule_GetDict(bimod);

  00248	48 8b cf	 mov	 rcx, rdi
  0024b	e8 00 00 00 00	 call	 PyModule_GetDict
  00250	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax

; 342  :     if (interp->builtins == NULL)

  00254	48 85 c0	 test	 rax, rax
  00257	75 0c		 jne	 SHORT $LN18@Py_Initial

; 343  :         Py_FatalError("Py_Initialize: can't initialize builtins dict");

  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@LKOHMMCC@Py_Initialize?3?5can?8t?5initialize?5@
  00260	e8 00 00 00 00	 call	 Py_FatalError
$LN18@Py_Initial:

; 344  :     Py_INCREF(interp->builtins);

  00265	48 8b 73 28	 mov	 rsi, QWORD PTR [rbx+40]
  00269	e8 00 00 00 00	 call	 _Py_PXCTX
  0026e	85 c0		 test	 eax, eax
  00270	75 32		 jne	 SHORT $LN46@Py_Initial
  00272	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00279	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00280	4c 8b ce	 mov	 r9, rsi
  00283	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00289	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00291	e8 00 00 00 00	 call	 _PyParallel_Guard
  00296	85 c0		 test	 eax, eax
  00298	75 06		 jne	 SHORT $LN45@Py_Initial
  0029a	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  0029e	74 04		 je	 SHORT $LN46@Py_Initial
$LN45@Py_Initial:
  002a0	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN46@Py_Initial:

; 345  : 
; 346  :     /* initialize builtin exceptions */
; 347  :     _PyExc_Init(bimod);

  002a4	48 8b cf	 mov	 rcx, rdi
  002a7	e8 00 00 00 00	 call	 _PyExc_Init

; 348  : 
; 349  :     sysmod = _PySys_Init();

  002ac	e8 00 00 00 00	 call	 _PySys_Init
  002b1	48 8b f0	 mov	 rsi, rax

; 350  :     if (sysmod == NULL)

  002b4	48 85 c0	 test	 rax, rax
  002b7	75 0c		 jne	 SHORT $LN17@Py_Initial

; 351  :         Py_FatalError("Py_Initialize: can't initialize sys");

  002b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@DDAMEANI@Py_Initialize?3?5can?8t?5initialize?5@
  002c0	e8 00 00 00 00	 call	 Py_FatalError
$LN17@Py_Initial:

; 352  :     interp->sysdict = PyModule_GetDict(sysmod);

  002c5	48 8b ce	 mov	 rcx, rsi
  002c8	e8 00 00 00 00	 call	 PyModule_GetDict
  002cd	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax

; 353  :     if (interp->sysdict == NULL)

  002d1	48 85 c0	 test	 rax, rax
  002d4	75 0c		 jne	 SHORT $LN16@Py_Initial

; 354  :         Py_FatalError("Py_Initialize: can't initialize sys dict");

  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@PDBCFFEI@Py_Initialize?3?5can?8t?5initialize?5@
  002dd	e8 00 00 00 00	 call	 Py_FatalError
$LN16@Py_Initial:

; 355  :     Py_INCREF(interp->sysdict);

  002e2	48 8b 7b 20	 mov	 rdi, QWORD PTR [rbx+32]
  002e6	e8 00 00 00 00	 call	 _Py_PXCTX
  002eb	85 c0		 test	 eax, eax
  002ed	75 32		 jne	 SHORT $LN50@Py_Initial
  002ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  002fd	4c 8b cf	 mov	 r9, rdi
  00300	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00306	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0030e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00313	85 c0		 test	 eax, eax
  00315	75 06		 jne	 SHORT $LN49@Py_Initial
  00317	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0031b	74 04		 je	 SHORT $LN50@Py_Initial
$LN49@Py_Initial:
  0031d	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN50@Py_Initial:

; 356  :     _PyImport_FixupBuiltin(sysmod, "sys");

  00321	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PIADFGHL@sys?$AA@
  00328	48 8b ce	 mov	 rcx, rsi
  0032b	e8 00 00 00 00	 call	 _PyImport_FixupBuiltin

; 357  :     PySys_SetPath(Py_GetPath());

  00330	e8 00 00 00 00	 call	 Py_GetPath
  00335	48 8b c8	 mov	 rcx, rax
  00338	e8 00 00 00 00	 call	 PySys_SetPath

; 358  :     PyDict_SetItemString(interp->sysdict, "modules",
; 359  :                          interp->modules);

  0033d	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  00341	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00345	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DFGEOAEG@modules?$AA@
  0034c	e8 00 00 00 00	 call	 PyDict_SetItemString

; 360  : 
; 361  :     /* Set up a preliminary stderr printer until we have enough
; 362  :        infrastructure for the io module in place. */
; 363  :     pstderr = PyFile_NewStdPrinter(fileno(stderr));

  00351	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00357	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  0035b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  00361	8b c8		 mov	 ecx, eax
  00363	e8 00 00 00 00	 call	 PyFile_NewStdPrinter
  00368	48 8b f8	 mov	 rdi, rax

; 364  :     if (pstderr == NULL)

  0036b	48 85 c0	 test	 rax, rax
  0036e	75 0c		 jne	 SHORT $LN15@Py_Initial

; 365  :         Py_FatalError("Py_Initialize: can't set preliminary stderr");

  00370	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@PBJGLECD@Py_Initialize?3?5can?8t?5set?5prelimi@
  00377	e8 00 00 00 00	 call	 Py_FatalError
$LN15@Py_Initial:

; 366  :     PySys_SetObject("stderr", pstderr);

  0037c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00383	48 8b d7	 mov	 rdx, rdi
  00386	e8 00 00 00 00	 call	 PySys_SetObject

; 367  :     PySys_SetObject("__stderr__", pstderr);

  0038b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OJDCNPPP@__stderr__?$AA@
  00392	48 8b d7	 mov	 rdx, rdi
  00395	e8 00 00 00 00	 call	 PySys_SetObject

; 368  :     Py_DECREF(pstderr);

  0039a	48 8b cf	 mov	 rcx, rdi
  0039d	e8 00 00 00 00	 call	 _Py_DecRef

; 369  : 
; 370  :     _PyImport_Init();

  003a2	e8 00 00 00 00	 call	 _PyImport_Init

; 371  : 
; 372  :     _PyImportHooks_Init();

  003a7	e8 00 00 00 00	 call	 _PyImportHooks_Init

; 373  : 
; 374  :     /* Initialize _warnings. */
; 375  :     _PyWarnings_Init();

  003ac	e8 00 00 00 00	 call	 _PyWarnings_Init
  003b1	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 376  : 
; 377  :     if (!install_importlib)

  003b6	45 85 e4	 test	 r12d, r12d
  003b9	0f 84 77 01 00
	00		 je	 $LN67@Py_Initial

; 378  :         return;
; 379  : 
; 380  :     import_init(interp, sysmod);

  003bf	48 8b d6	 mov	 rdx, rsi
  003c2	48 8b cb	 mov	 rcx, rbx
  003c5	e8 00 00 00 00	 call	 import_init

; 381  : 
; 382  :     /* initialize the faulthandler module */
; 383  :     if (_PyFaulthandler_Init())

  003ca	e8 00 00 00 00	 call	 _PyFaulthandler_Init
  003cf	85 c0		 test	 eax, eax
  003d1	74 0c		 je	 SHORT $LN13@Py_Initial

; 384  :         Py_FatalError("Py_Initialize: can't initialize faulthandler");

  003d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@LMHHBFOI@Py_Initialize?3?5can?8t?5initialize?5@
  003da	e8 00 00 00 00	 call	 Py_FatalError
$LN13@Py_Initial:

; 385  : 
; 386  :     _PyTime_Init();

  003df	e8 00 00 00 00	 call	 _PyTime_Init

; 387  : 
; 388  :     if (initfsencoding(interp) < 0)

  003e4	48 8b cb	 mov	 rcx, rbx
  003e7	e8 00 00 00 00	 call	 initfsencoding
  003ec	85 c0		 test	 eax, eax
  003ee	79 0c		 jns	 SHORT $LN12@Py_Initial

; 389  :         Py_FatalError("Py_Initialize: unable to load the file system codec");

  003f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DE@GJBFCCGH@Py_Initialize?3?5unable?5to?5load?5th@
  003f7	e8 00 00 00 00	 call	 Py_FatalError
$LN12@Py_Initial:

; 390  : 
; 391  :     if (install_sigs)

  003fc	85 ed		 test	 ebp, ebp
  003fe	74 05		 je	 SHORT $LN11@Py_Initial

; 392  :         initsigs(); /* Signal handling stuff, including initintr() */

  00400	e8 00 00 00 00	 call	 initsigs
$LN11@Py_Initial:

; 393  : 
; 394  :     initmain(interp); /* Module __main__ */

  00405	48 8b cb	 mov	 rcx, rbx
  00408	e8 00 00 00 00	 call	 initmain

; 395  :     if (initstdio() < 0)

  0040d	e8 00 00 00 00	 call	 initstdio
  00412	85 c0		 test	 eax, eax
  00414	79 0c		 jns	 SHORT $LN10@Py_Initial

; 396  :         Py_FatalError(
; 397  :             "Py_Initialize: can't initialize sys standard streams");

  00416	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DF@BMECFJNN@Py_Initialize?3?5can?8t?5initialize?5@
  0041d	e8 00 00 00 00	 call	 Py_FatalError
$LN10@Py_Initial:

; 398  : 
; 399  :     /* Initialize warnings. */
; 400  :     if (PySys_HasWarnOptions()) {

  00422	e8 00 00 00 00	 call	 PySys_HasWarnOptions
  00427	85 c0		 test	 eax, eax
  00429	74 37		 je	 SHORT $LN5@Py_Initial

; 401  :         PyObject *warnings_module = PyImport_ImportModule("warnings");

  0042b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NOCNCINM@warnings?$AA@
  00432	e8 00 00 00 00	 call	 PyImport_ImportModule

; 402  :         if (warnings_module == NULL) {

  00437	48 85 c0	 test	 rax, rax
  0043a	75 1e		 jne	 SHORT $LN61@Py_Initial

; 403  :             fprintf(stderr, "'import warnings' failed; traceback:\n");

  0043c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00442	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@PJEKFHMO@?8import?5warnings?8?5failed?$DL?5traceb@
  00449	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  0044d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 404  :             PyErr_Print();

  00453	e8 00 00 00 00	 call	 PyErr_Print

; 405  :         }
; 406  :         Py_XDECREF(warnings_module);

  00458	eb 08		 jmp	 SHORT $LN5@Py_Initial
$LN61@Py_Initial:
  0045a	48 8b c8	 mov	 rcx, rax
  0045d	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@Py_Initial:

; 407  :     }
; 408  : 
; 409  :     if (!Py_NoSiteFlag)

  00462	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_NoSiteFlag, 0
  00469	75 05		 jne	 SHORT $LN3@Py_Initial

; 410  :         initsite(); /* Module site */

  0046b	e8 00 00 00 00	 call	 initsite
$LN3@Py_Initial:

; 411  : #ifdef WITH_PARALLEL
; 412  :     _parallelmod = _PyParallel_ModInit();

  00470	e8 00 00 00 00	 call	 _PyParallel_ModInit
  00475	48 8b d8	 mov	 rbx, rax

; 413  :     if (_parallelmod == NULL)

  00478	48 85 c0	 test	 rax, rax
  0047b	75 0c		 jne	 SHORT $LN2@Py_Initial

; 414  :         Py_FatalError("Py_Initialize: can't initialize _parallel module");

  0047d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@GBLAJFBE@Py_Initialize?3?5can?8t?5initialize?5@
  00484	e8 00 00 00 00	 call	 Py_FatalError
$LN2@Py_Initial:

; 415  :     Py_INCREF(_parallelmod);

  00489	e8 00 00 00 00	 call	 _Py_PXCTX
  0048e	85 c0		 test	 eax, eax
  00490	75 32		 jne	 SHORT $LN54@Py_Initial
  00492	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00499	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  004a0	4c 8b cb	 mov	 r9, rbx
  004a3	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  004a9	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  004b1	e8 00 00 00 00	 call	 _PyParallel_Guard
  004b6	85 c0		 test	 eax, eax
  004b8	75 06		 jne	 SHORT $LN53@Py_Initial
  004ba	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  004be	74 04		 je	 SHORT $LN54@Py_Initial
$LN53@Py_Initial:
  004c0	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN54@Py_Initial:

; 416  :     _PyImport_FixupBuiltin(_parallelmod, "_parallel");

  004c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09KKLBMLNG@_parallel?$AA@
  004cb	48 8b cb	 mov	 rcx, rbx
  004ce	e8 00 00 00 00	 call	 _PyImport_FixupBuiltin

; 417  : 
; 418  :     _asyncmod = _PyAsync_ModInit();

  004d3	e8 00 00 00 00	 call	 _PyAsync_ModInit
  004d8	48 8b d8	 mov	 rbx, rax

; 419  :     if (_asyncmod == NULL)

  004db	48 85 c0	 test	 rax, rax
  004de	75 0c		 jne	 SHORT $LN1@Py_Initial

; 420  :         Py_FatalError("Py_Initialize: can't initialize _async module");

  004e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PJOLMBNF@Py_Initialize?3?5can?8t?5initialize?5@
  004e7	e8 00 00 00 00	 call	 Py_FatalError
$LN1@Py_Initial:

; 421  :     Py_INCREF(_asyncmod);

  004ec	e8 00 00 00 00	 call	 _Py_PXCTX
  004f1	85 c0		 test	 eax, eax
  004f3	75 32		 jne	 SHORT $LN58@Py_Initial
  004f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  004fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00503	4c 8b cb	 mov	 r9, rbx
  00506	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0050c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00514	e8 00 00 00 00	 call	 _PyParallel_Guard
  00519	85 c0		 test	 eax, eax
  0051b	75 06		 jne	 SHORT $LN57@Py_Initial
  0051d	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00521	74 04		 je	 SHORT $LN58@Py_Initial
$LN57@Py_Initial:
  00523	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN58@Py_Initial:

; 422  :     _PyImport_FixupBuiltin(_asyncmod, "_async");

  00527	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06NAHKMOGH@_async?$AA@
  0052e	48 8b cb	 mov	 rcx, rbx
  00531	e8 00 00 00 00	 call	 _PyImport_FixupBuiltin
$LN67@Py_Initial:
  00536	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0053b	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
$LN33@Py_Initial:

; 423  : 
; 424  : #endif
; 425  : }

  00540	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00545	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00549	41 5c		 pop	 r12
  0054b	c3		 ret	 0
_Py_InitializeEx_Private ENDP
_TEXT	ENDS
PUBLIC	Py_InitializeEx
; Function compile flags: /Ogtpy
;	COMDAT Py_InitializeEx
_TEXT	SEGMENT
install_sigs$ = 8
Py_InitializeEx PROC					; COMDAT

; 430  :     _Py_InitializeEx_Private(install_sigs, 1);

  00000	ba 01 00 00 00	 mov	 edx, 1

; 431  : }

  00005	e9 00 00 00 00	 jmp	 _Py_InitializeEx_Private
Py_InitializeEx ENDP
_TEXT	ENDS
PUBLIC	Py_Initialize
; Function compile flags: /Ogtpy
;	COMDAT Py_Initialize
_TEXT	SEGMENT
Py_Initialize PROC					; COMDAT

; 436  :     Py_InitializeEx(1);

  00000	b9 01 00 00 00	 mov	 ecx, 1

; 437  : }

  00005	e9 00 00 00 00	 jmp	 Py_InitializeEx
Py_Initialize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@OMAIIAMK@Py_NewInterpreter?3?5call?5Py_Initi@ ; `string'
PUBLIC	Py_NewInterpreter
EXTRN	PyThreadState_Delete:PROC
EXTRN	PyThreadState_Clear:PROC
EXTRN	_PyImport_FindBuiltin:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_NewInterpreter DD imagerel $LN19
	DD	imagerel $LN19+49
	DD	imagerel $unwind$Py_NewInterpreter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$Py_NewInterpreter DD imagerel $LN19+49
	DD	imagerel $LN19+88
	DD	imagerel $chain$0$Py_NewInterpreter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$Py_NewInterpreter DD imagerel $LN19+88
	DD	imagerel $LN19+509
	DD	imagerel $chain$5$Py_NewInterpreter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$Py_NewInterpreter DD 081221H
	DD	09c412H
	DD	07640dH
	DD	065405H
	DD	087400H
	DD	imagerel $LN19
	DD	imagerel $LN19+49
	DD	imagerel $unwind$Py_NewInterpreter
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$Py_NewInterpreter DD 020521H
	DD	087405H
	DD	imagerel $LN19
	DD	imagerel $LN19+49
	DD	imagerel $unwind$Py_NewInterpreter
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_NewInterpreter DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CM@OMAIIAMK@Py_NewInterpreter?3?5call?5Py_Initi@
CONST	SEGMENT
??_C@_0CM@OMAIIAMK@Py_NewInterpreter?3?5call?5Py_Initi@ DB 'Py_NewInterpr'
	DB	'eter: call Py_Initialize first', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT Py_NewInterpreter
_TEXT	SEGMENT
Py_NewInterpreter PROC					; COMDAT

; 699  : {

$LN19:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 700  :     PyInterpreterState *interp;
; 701  :     PyThreadState *tstate, *save_tstate;
; 702  :     PyObject *bimod, *sysmod;
; 703  : 
; 704  :     if (!initialized)

  00006	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR initialized, 0
  0000d	75 0c		 jne	 SHORT $LN12@Py_NewInte

; 705  :         Py_FatalError("Py_NewInterpreter: call Py_Initialize first");

  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@OMAIIAMK@Py_NewInterpreter?3?5call?5Py_Initi@
  00016	e8 00 00 00 00	 call	 Py_FatalError
$LN12@Py_NewInte:

; 706  : 
; 707  :     interp = PyInterpreterState_New();

  0001b	e8 00 00 00 00	 call	 PyInterpreterState_New
  00020	48 8b d8	 mov	 rbx, rax

; 708  :     if (interp == NULL)

  00023	48 85 c0	 test	 rax, rax
  00026	75 06		 jne	 SHORT $LN11@Py_NewInte

; 782  : }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
$LN11@Py_NewInte:

; 709  :         return NULL;
; 710  : 
; 711  :     tstate = PyThreadState_New(interp);

  0002e	48 8b c8	 mov	 rcx, rax
  00031	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00036	e8 00 00 00 00	 call	 PyThreadState_New
  0003b	48 8b f8	 mov	 rdi, rax

; 712  :     if (tstate == NULL) {

  0003e	48 85 c0	 test	 rax, rax
  00041	75 15		 jne	 SHORT $LN10@Py_NewInte

; 713  :         PyInterpreterState_Delete(interp);

  00043	48 8b cb	 mov	 rcx, rbx
  00046	e8 00 00 00 00	 call	 PyInterpreterState_Delete
  0004b	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 714  :         return NULL;

  00050	33 c0		 xor	 eax, eax

; 782  : }

  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5b		 pop	 rbx
  00057	c3		 ret	 0
$LN10@Py_NewInte:
  00058	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp

; 715  :     }
; 716  : 
; 717  :     save_tstate = PyThreadState_Swap(tstate);

  0005d	48 8b c8	 mov	 rcx, rax
  00060	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  00065	4c 89 64 24 48	 mov	 QWORD PTR [rsp+72], r12
  0006a	e8 00 00 00 00	 call	 PyThreadState_Swap
  0006f	4c 8b e0	 mov	 r12, rax

; 718  : 
; 719  :     /* XXX The following is lax in error checking */
; 720  : 
; 721  :     interp->modules = PyDict_New();

  00072	e8 00 00 00 00	 call	 PyDict_New

; 722  : 
; 723  :     bimod = _PyImport_FindBuiltin("builtins");

  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  0007e	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  00082	e8 00 00 00 00	 call	 _PyImport_FindBuiltin
  00087	48 8b f0	 mov	 rsi, rax

; 724  :     if (bimod != NULL) {

  0008a	48 85 c0	 test	 rax, rax
  0008d	74 1d		 je	 SHORT $LN9@Py_NewInte

; 725  :         interp->builtins = PyModule_GetDict(bimod);

  0008f	48 8b c8	 mov	 rcx, rax
  00092	e8 00 00 00 00	 call	 PyModule_GetDict
  00097	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax

; 726  :         if (interp->builtins == NULL)

  0009b	48 85 c0	 test	 rax, rax
  0009e	0f 84 16 01 00
	00		 je	 $handle_error$122228

; 727  :             goto handle_error;
; 728  :         Py_INCREF(interp->builtins);

  000a4	48 8b c8	 mov	 rcx, rax
  000a7	e8 00 00 00 00	 call	 _Py_IncRef
$LN9@Py_NewInte:

; 729  :     }
; 730  : 
; 731  :     /* initialize builtin exceptions */
; 732  :     _PyExc_Init(bimod);

  000ac	48 8b ce	 mov	 rcx, rsi
  000af	e8 00 00 00 00	 call	 _PyExc_Init

; 733  : 
; 734  :     sysmod = _PyImport_FindBuiltin("sys");

  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03PIADFGHL@sys?$AA@
  000bb	e8 00 00 00 00	 call	 _PyImport_FindBuiltin
  000c0	48 8b e8	 mov	 rbp, rax

; 735  :     if (bimod != NULL && sysmod != NULL) {

  000c3	48 85 f6	 test	 rsi, rsi
  000c6	0f 84 df 00 00
	00		 je	 $LN2@Py_NewInte
  000cc	48 85 c0	 test	 rax, rax
  000cf	0f 84 d6 00 00
	00		 je	 $LN2@Py_NewInte

; 736  :         PyObject *pstderr;
; 737  : 
; 738  :         interp->sysdict = PyModule_GetDict(sysmod);

  000d5	48 8b c8	 mov	 rcx, rax
  000d8	e8 00 00 00 00	 call	 PyModule_GetDict
  000dd	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax

; 739  :         if (interp->sysdict == NULL)

  000e1	48 85 c0	 test	 rax, rax
  000e4	0f 84 d0 00 00
	00		 je	 $handle_error$122228

; 740  :             goto handle_error;
; 741  :         Py_INCREF(interp->sysdict);

  000ea	48 8b c8	 mov	 rcx, rax
  000ed	e8 00 00 00 00	 call	 _Py_IncRef

; 742  :         PySys_SetPath(Py_GetPath());

  000f2	e8 00 00 00 00	 call	 Py_GetPath
  000f7	48 8b c8	 mov	 rcx, rax
  000fa	e8 00 00 00 00	 call	 PySys_SetPath

; 743  :         PyDict_SetItemString(interp->sysdict, "modules",
; 744  :                              interp->modules);

  000ff	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  00103	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00107	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DFGEOAEG@modules?$AA@
  0010e	e8 00 00 00 00	 call	 PyDict_SetItemString

; 745  :         /* Set up a preliminary stderr printer until we have enough
; 746  :            infrastructure for the io module in place. */
; 747  :         pstderr = PyFile_NewStdPrinter(fileno(stderr));

  00113	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00119	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  00123	8b c8		 mov	 ecx, eax
  00125	e8 00 00 00 00	 call	 PyFile_NewStdPrinter
  0012a	48 8b f0	 mov	 rsi, rax

; 748  :         if (pstderr == NULL)

  0012d	48 85 c0	 test	 rax, rax
  00130	75 0c		 jne	 SHORT $LN5@Py_NewInte

; 749  :             Py_FatalError("Py_Initialize: can't set preliminary stderr");

  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@PBJGLECD@Py_Initialize?3?5can?8t?5set?5prelimi@
  00139	e8 00 00 00 00	 call	 Py_FatalError
$LN5@Py_NewInte:

; 750  :         PySys_SetObject("stderr", pstderr);

  0013e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00145	48 8b d6	 mov	 rdx, rsi
  00148	e8 00 00 00 00	 call	 PySys_SetObject

; 751  :         PySys_SetObject("__stderr__", pstderr);

  0014d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OJDCNPPP@__stderr__?$AA@
  00154	48 8b d6	 mov	 rdx, rsi
  00157	e8 00 00 00 00	 call	 PySys_SetObject

; 752  :         Py_DECREF(pstderr);

  0015c	48 8b ce	 mov	 rcx, rsi
  0015f	e8 00 00 00 00	 call	 _Py_DecRef

; 753  : 
; 754  :         _PyImportHooks_Init();

  00164	e8 00 00 00 00	 call	 _PyImportHooks_Init

; 755  : 
; 756  :         import_init(interp, sysmod);

  00169	48 8b d5	 mov	 rdx, rbp
  0016c	48 8b cb	 mov	 rcx, rbx
  0016f	e8 00 00 00 00	 call	 import_init

; 757  : 
; 758  :         if (initfsencoding(interp) < 0)

  00174	48 8b cb	 mov	 rcx, rbx
  00177	e8 00 00 00 00	 call	 initfsencoding
  0017c	85 c0		 test	 eax, eax
  0017e	78 3a		 js	 SHORT $handle_error$122228

; 759  :             goto handle_error;
; 760  : 
; 761  :         if (initstdio() < 0)

  00180	e8 00 00 00 00	 call	 initstdio
  00185	85 c0		 test	 eax, eax
  00187	79 0c		 jns	 SHORT $LN3@Py_NewInte

; 762  :             Py_FatalError(
; 763  :             "Py_Initialize: can't initialize sys standard streams");

  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DF@BMECFJNN@Py_Initialize?3?5can?8t?5initialize?5@
  00190	e8 00 00 00 00	 call	 Py_FatalError
$LN3@Py_NewInte:

; 764  :         initmain(interp);

  00195	48 8b cb	 mov	 rcx, rbx
  00198	e8 00 00 00 00	 call	 initmain

; 765  :         if (!Py_NoSiteFlag)

  0019d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_NoSiteFlag, 0
  001a4	75 05		 jne	 SHORT $LN2@Py_NewInte

; 766  :             initsite();

  001a6	e8 00 00 00 00	 call	 initsite
$LN2@Py_NewInte:

; 767  :     }
; 768  : 
; 769  :     if (!PyErr_Occurred())

  001ab	e8 00 00 00 00	 call	 PyErr_Occurred
  001b0	48 85 c0	 test	 rax, rax
  001b3	75 05		 jne	 SHORT $handle_error$122228

; 770  :         return tstate;

  001b5	48 8b c7	 mov	 rax, rdi
  001b8	eb 29		 jmp	 SHORT $LN18@Py_NewInte
$handle_error$122228:

; 771  : 
; 772  : handle_error:
; 773  :     /* Oops, it didn't work.  Undo it all. */
; 774  : 
; 775  :     PyErr_PrintEx(0);

  001ba	33 c9		 xor	 ecx, ecx
  001bc	e8 00 00 00 00	 call	 PyErr_PrintEx

; 776  :     PyThreadState_Clear(tstate);

  001c1	48 8b cf	 mov	 rcx, rdi
  001c4	e8 00 00 00 00	 call	 PyThreadState_Clear

; 777  :     PyThreadState_Swap(save_tstate);

  001c9	49 8b cc	 mov	 rcx, r12
  001cc	e8 00 00 00 00	 call	 PyThreadState_Swap

; 778  :     PyThreadState_Delete(tstate);

  001d1	48 8b cf	 mov	 rcx, rdi
  001d4	e8 00 00 00 00	 call	 PyThreadState_Delete

; 779  :     PyInterpreterState_Delete(interp);

  001d9	48 8b cb	 mov	 rcx, rbx
  001dc	e8 00 00 00 00	 call	 PyInterpreterState_Delete

; 780  : 
; 781  :     return NULL;

  001e1	33 c0		 xor	 eax, eax
$LN18@Py_NewInte:
  001e3	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  001e8	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  001ed	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]
  001f2	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 782  : }

  001f7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001fb	5b		 pop	 rbx
  001fc	c3		 ret	 0
Py_NewInterpreter ENDP
_TEXT	ENDS
PUBLIC	??_C@_04KAJGAOMC@?4?4?4?5?$AA@			; `string'
PUBLIC	??_C@_04IMEJGNKP@?$DO?$DO?$DO?5?$AA@		; `string'
PUBLIC	PyRun_InteractiveLoopFlags
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyRun_InteractiveLoopFlags DD imagerel $LN42
	DD	imagerel $LN42+46
	DD	imagerel $unwind$PyRun_InteractiveLoopFlags
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyRun_InteractiveLoopFlags DD imagerel $LN42+46
	DD	imagerel $LN42+368
	DD	imagerel $chain$0$PyRun_InteractiveLoopFlags
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyRun_InteractiveLoopFlags DD imagerel $LN42+368
	DD	imagerel $LN42+405
	DD	imagerel $chain$1$PyRun_InteractiveLoopFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyRun_InteractiveLoopFlags DD 021H
	DD	imagerel $LN42
	DD	imagerel $LN42+46
	DD	imagerel $unwind$PyRun_InteractiveLoopFlags
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyRun_InteractiveLoopFlags DD 020521H
	DD	083405H
	DD	imagerel $LN42
	DD	imagerel $LN42+46
	DD	imagerel $unwind$PyRun_InteractiveLoopFlags
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_InteractiveLoopFlags DD 060f01H
	DD	0b640fH
	DD	09540fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_04KAJGAOMC@?4?4?4?5?$AA@
CONST	SEGMENT
??_C@_04KAJGAOMC@?4?4?4?5?$AA@ DB '... ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IMEJGNKP@?$DO?$DO?$DO?5?$AA@
CONST	SEGMENT
??_C@_04IMEJGNKP@?$DO?$DO?$DO?5?$AA@ DB '>>> ', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pythonrun.c
CONST	ENDS
;	COMDAT PyRun_InteractiveLoopFlags
_TEXT	SEGMENT
fp$ = 64
filename$ = 72
local_flags$ = 80
flags$ = 80
PyRun_InteractiveLoopFlags PROC				; COMDAT

; 1208 : {

$LN42:
  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b e9	 mov	 rbp, rcx

; 1209 :     PyObject *v;
; 1210 :     int ret;
; 1211 :     PyCompilerFlags local_flags;
; 1212 : 
; 1213 :     if (flags == NULL) {

  00018	4d 85 c0	 test	 r8, r8
  0001b	75 0a		 jne	 SHORT $LN14@PyRun_Inte@2

; 1214 :         flags = &local_flags;

  0001d	48 8d 7c 24 50	 lea	 rdi, QWORD PTR local_flags$[rsp]

; 1215 :         local_flags.cf_flags = 0;

  00022	44 89 44 24 50	 mov	 DWORD PTR local_flags$[rsp], r8d
$LN14@PyRun_Inte@2:

; 1216 :     }
; 1217 :     v = PySys_GetObject("ps1");

  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CFGOFBME@ps1?$AA@
  0002e	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00033	e8 00 00 00 00	 call	 PySys_GetObject

; 1218 :     if (v == NULL) {

  00038	48 85 c0	 test	 rax, rax
  0003b	0f 85 88 00 00
	00		 jne	 $LN10@PyRun_Inte@2

; 1219 :         PySys_SetObject("ps1", v = PyUnicode_FromString(">>> "));

  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IMEJGNKP@?$DO?$DO?$DO?5?$AA@
  00048	e8 00 00 00 00	 call	 PyUnicode_FromString
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CFGOFBME@ps1?$AA@
  00054	48 8b d0	 mov	 rdx, rax
  00057	48 8b d8	 mov	 rbx, rax
  0005a	e8 00 00 00 00	 call	 PySys_SetObject

; 1220 :         Py_XDECREF(v);

  0005f	48 85 db	 test	 rbx, rbx
  00062	74 65		 je	 SHORT $LN10@PyRun_Inte@2
  00064	e8 00 00 00 00	 call	 _Py_PXCTX
  00069	85 c0		 test	 eax, eax
  0006b	75 5c		 jne	 SHORT $LN10@PyRun_Inte@2
  0006d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00071	a8 20		 test	 al, 32			; 00000020H
  00073	75 4c		 jne	 SHORT $LN21@PyRun_Inte@2
  00075	84 c0		 test	 al, al
  00077	78 48		 js	 SHORT $LN21@PyRun_Inte@2
  00079	a8 02		 test	 al, 2
  0007b	75 4c		 jne	 SHORT $LN10@PyRun_Inte@2
  0007d	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00081	75 46		 jne	 SHORT $LN10@PyRun_Inte@2
  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00091	4c 8b cb	 mov	 r9, rbx
  00094	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0009a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a2	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a7	48 8b cb	 mov	 rcx, rbx
  000aa	85 c0		 test	 eax, eax
  000ac	74 07		 je	 SHORT $LN26@PyRun_Inte@2
  000ae	e8 00 00 00 00	 call	 _Px_Dealloc
  000b3	eb 14		 jmp	 SHORT $LN10@PyRun_Inte@2
$LN26@PyRun_Inte@2:
  000b5	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000b9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000bf	eb 08		 jmp	 SHORT $LN10@PyRun_Inte@2
$LN21@PyRun_Inte@2:
  000c1	48 8b cb	 mov	 rcx, rbx
  000c4	e8 00 00 00 00	 call	 Px_DecRef
$LN10@PyRun_Inte@2:

; 1221 :     }
; 1222 :     v = PySys_GetObject("ps2");

  000c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OEDACAH@ps2?$AA@
  000d0	e8 00 00 00 00	 call	 PySys_GetObject

; 1223 :     if (v == NULL) {

  000d5	48 85 c0	 test	 rax, rax
  000d8	0f 85 88 00 00
	00		 jne	 $LN5@PyRun_Inte@2

; 1224 :         PySys_SetObject("ps2", v = PyUnicode_FromString("... "));

  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04KAJGAOMC@?4?4?4?5?$AA@
  000e5	e8 00 00 00 00	 call	 PyUnicode_FromString
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OEDACAH@ps2?$AA@
  000f1	48 8b d0	 mov	 rdx, rax
  000f4	48 8b d8	 mov	 rbx, rax
  000f7	e8 00 00 00 00	 call	 PySys_SetObject

; 1225 :         Py_XDECREF(v);

  000fc	48 85 db	 test	 rbx, rbx
  000ff	74 65		 je	 SHORT $LN5@PyRun_Inte@2
  00101	e8 00 00 00 00	 call	 _Py_PXCTX
  00106	85 c0		 test	 eax, eax
  00108	75 5c		 jne	 SHORT $LN5@PyRun_Inte@2
  0010a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0010e	a8 20		 test	 al, 32			; 00000020H
  00110	75 4c		 jne	 SHORT $LN32@PyRun_Inte@2
  00112	84 c0		 test	 al, al
  00114	78 48		 js	 SHORT $LN32@PyRun_Inte@2
  00116	a8 02		 test	 al, 2
  00118	75 4c		 jne	 SHORT $LN5@PyRun_Inte@2
  0011a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0011e	75 46		 jne	 SHORT $LN5@PyRun_Inte@2
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0012e	4c 8b cb	 mov	 r9, rbx
  00131	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00137	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0013f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00144	48 8b cb	 mov	 rcx, rbx
  00147	85 c0		 test	 eax, eax
  00149	74 07		 je	 SHORT $LN37@PyRun_Inte@2
  0014b	e8 00 00 00 00	 call	 _Px_Dealloc
  00150	eb 14		 jmp	 SHORT $LN5@PyRun_Inte@2
$LN37@PyRun_Inte@2:
  00152	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00156	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0015c	eb 08		 jmp	 SHORT $LN5@PyRun_Inte@2
$LN32@PyRun_Inte@2:
  0015e	48 8b cb	 mov	 rcx, rbx
  00161	e8 00 00 00 00	 call	 Px_DecRef
$LN5@PyRun_Inte@2:
  00166	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0016b	0f 1f 44 00 00	 npad	 5
$LL3@PyRun_Inte@2:

; 1226 :     }
; 1227 :     for (;;) {
; 1228 :         ret = PyRun_InteractiveOneFlags(fp, filename, flags);

  00170	4c 8b c7	 mov	 r8, rdi
  00173	48 8b d6	 mov	 rdx, rsi
  00176	48 8b cd	 mov	 rcx, rbp
  00179	e8 00 00 00 00	 call	 PyRun_InteractiveOneFlags

; 1229 :         PRINT_TOTAL_REFS();
; 1230 :         if (ret == E_EOF)

  0017e	83 f8 0b	 cmp	 eax, 11
  00181	75 ed		 jne	 SHORT $LL3@PyRun_Inte@2

; 1231 :             return 0;
; 1232 :         /*
; 1233 :         if (ret == E_NOMEM)
; 1234 :             return -1;
; 1235 :         */
; 1236 :     }
; 1237 : }

  00183	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00188	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  0018d	33 c0		 xor	 eax, eax
  0018f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00193	5f		 pop	 rdi
  00194	c3		 ret	 0
PyRun_InteractiveLoopFlags ENDP
_TEXT	ENDS
PUBLIC	PyRun_InteractiveLoop
; Function compile flags: /Ogtpy
;	COMDAT PyRun_InteractiveLoop
_TEXT	SEGMENT
f$ = 8
p$ = 16
PyRun_InteractiveLoop PROC				; COMDAT

; 2777 :     return PyRun_InteractiveLoopFlags(f, p, NULL);

  00000	45 33 c0	 xor	 r8d, r8d

; 2778 : }

  00003	e9 00 00 00 00	 jmp	 PyRun_InteractiveLoopFlags
PyRun_InteractiveLoop ENDP
_TEXT	ENDS
PUBLIC	PyRun_AnyFileExFlags
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_AnyFileExFlags DD imagerel $LN7
	DD	imagerel $LN7+120
	DD	imagerel $unwind$PyRun_AnyFileExFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_AnyFileExFlags DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyRun_AnyFileExFlags
_TEXT	SEGMENT
fp$ = 48
filename$ = 56
closeit$ = 64
flags$ = 72
PyRun_AnyFileExFlags PROC				; COMDAT

; 1193 : {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1194 :     if (filename == NULL)

  00014	48 85 d2	 test	 rdx, rdx
  00017	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
  0001e	49 8b f1	 mov	 rsi, r9
  00021	48 0f 45 fa	 cmovne	 rdi, rdx
  00025	41 8b e8	 mov	 ebp, r8d
  00028	48 8b d9	 mov	 rbx, rcx

; 1195 :         filename = "???";
; 1196 :     if (Py_FdIsInteractive(fp, filename)) {

  0002b	48 8b d7	 mov	 rdx, rdi
  0002e	e8 00 00 00 00	 call	 Py_FdIsInteractive

; 1197 :         int err = PyRun_InteractiveLoopFlags(fp, filename, flags);

  00033	48 8b d7	 mov	 rdx, rdi
  00036	48 8b cb	 mov	 rcx, rbx
  00039	85 c0		 test	 eax, eax
  0003b	74 1b		 je	 SHORT $LN3@PyRun_AnyF
  0003d	4c 8b c6	 mov	 r8, rsi
  00040	e8 00 00 00 00	 call	 PyRun_InteractiveLoopFlags
  00045	8b f8		 mov	 edi, eax

; 1198 :         if (closeit)

  00047	85 ed		 test	 ebp, ebp
  00049	74 09		 je	 SHORT $LN2@PyRun_AnyF

; 1199 :             fclose(fp);

  0004b	48 8b cb	 mov	 rcx, rbx
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
$LN2@PyRun_AnyF:

; 1200 :         return err;

  00054	8b c7		 mov	 eax, edi
  00056	eb 0b		 jmp	 SHORT $LN1@PyRun_AnyF
$LN3@PyRun_AnyF:

; 1201 :     }
; 1202 :     else
; 1203 :         return PyRun_SimpleFileExFlags(fp, filename, closeit, flags);

  00058	4c 8b ce	 mov	 r9, rsi
  0005b	44 8b c5	 mov	 r8d, ebp
  0005e	e8 00 00 00 00	 call	 PyRun_SimpleFileExFlags
$LN1@PyRun_AnyF:

; 1204 : }

  00063	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00068	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006d	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00072	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00076	5f		 pop	 rdi
  00077	c3		 ret	 0
PyRun_AnyFileExFlags ENDP
_TEXT	ENDS
PUBLIC	PyRun_AnyFile
; Function compile flags: /Ogtpy
;	COMDAT PyRun_AnyFile
_TEXT	SEGMENT
fp$ = 8
name$ = 16
PyRun_AnyFile PROC					; COMDAT

; 2683 :     return PyRun_AnyFileExFlags(fp, name, 0, NULL);

  00000	45 33 c9	 xor	 r9d, r9d
  00003	45 33 c0	 xor	 r8d, r8d

; 2684 : }

  00006	e9 00 00 00 00	 jmp	 PyRun_AnyFileExFlags
PyRun_AnyFile ENDP
_TEXT	ENDS
PUBLIC	PyRun_AnyFileEx
; Function compile flags: /Ogtpy
;	COMDAT PyRun_AnyFileEx
_TEXT	SEGMENT
fp$ = 8
name$ = 16
closeit$ = 24
PyRun_AnyFileEx PROC					; COMDAT

; 2690 :     return PyRun_AnyFileExFlags(fp, name, closeit, NULL);

  00000	45 33 c9	 xor	 r9d, r9d

; 2691 : }

  00003	e9 00 00 00 00	 jmp	 PyRun_AnyFileExFlags
PyRun_AnyFileEx ENDP
_TEXT	ENDS
PUBLIC	PyRun_AnyFileFlags
; Function compile flags: /Ogtpy
;	COMDAT PyRun_AnyFileFlags
_TEXT	SEGMENT
fp$ = 8
name$ = 16
flags$ = 24
PyRun_AnyFileFlags PROC					; COMDAT

; 2697 :     return PyRun_AnyFileExFlags(fp, name, 0, flags);

  00000	4d 8b c8	 mov	 r9, r8
  00003	45 33 c0	 xor	 r8d, r8d

; 2698 : }

  00006	e9 00 00 00 00	 jmp	 PyRun_AnyFileExFlags
PyRun_AnyFileFlags ENDP
_TEXT	ENDS
END
