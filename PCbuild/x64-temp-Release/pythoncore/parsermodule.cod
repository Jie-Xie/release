; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06MKPCHOAB@pickle?$AA@			; `string'
PUBLIC	??_C@_06OENOICDH@parser?$AA@			; `string'
PUBLIC	??_C@_0DM@NBLABHOM@Returns?5the?5pickle?5magic?5to?5allo@ ; `string'
PUBLIC	??_C@_08EEAEJMPM@_pickler?$AA@			; `string'
PUBLIC	??_C@_08NFEDFLJK@tuple2st?$AA@			; `string'
PUBLIC	??_C@_0CN@NOCBOFNF@Creates?5a?5list?9tree?5representati@ ; `string'
PUBLIC	??_C@_07OOJPKMEF@st2list?$AA@			; `string'
PUBLIC	??_C@_0CO@IAPBJAMO@Creates?5a?5tuple?9tree?5representat@ ; `string'
PUBLIC	??_C@_08FEMHBCAC@st2tuple?$AA@			; `string'
PUBLIC	??_C@_0DB@LOLPPNBK@Creates?5an?5ST?5object?5from?5a?5tree@ ; `string'
PUBLIC	??_C@_0M@IODEHOKN@sequence2st?$AA@		; `string'
PUBLIC	??_C@_0CD@KPIPHOID@Creates?5an?5ST?5object?5from?5a?5suit@ ; `string'
PUBLIC	??_C@_05PPOFKJGL@suite?$AA@			; `string'
PUBLIC	??_C@_0DF@LCMHLDAF@Determines?5if?5an?5ST?5object?5was?5c@ ; `string'
PUBLIC	??_C@_0DL@CMEKOJEA@Determines?5if?5an?5ST?5object?5was?5c@ ; `string'
PUBLIC	??_C@_0CJ@LPHIHCBO@Creates?5an?5ST?5object?5from?5an?5exp@ ; `string'
PUBLIC	??_C@_04IPHMALII@expr?$AA@			; `string'
PUBLIC	??_C@_0CK@BFIACKMB@Compiles?5an?5ST?5object?5into?5a?5cod@ ; `string'
PUBLIC	??_C@_09GANMKKNK@compilest?$AA@			; `string'
PUBLIC	??_C@_08IBBDGPOF@sequence?$AA@			; `string'
PUBLIC	??_C@_06OEKOLKIL@source?$AA@			; `string'
PUBLIC	??_C@_08BABJIOEM@filename?$AA@			; `string'
PUBLIC	??_C@_08CFPJCNGC@col_info?$AA@			; `string'
PUBLIC	??_C@_09CHLNHKJH@line_info?$AA@			; `string'
PUBLIC	??_C@_02BNFKEMBG@st?$AA@			; `string'
PUBLIC	??_C@_0DE@MHDFBGFO@Intermediate?5representation?5of?5a@ ; `string'
PUBLIC	??_C@_09BEPDEEBN@parser?4st?$AA@		; `string'
PUBLIC	??_C@_0CC@KFEBPDOJ@Returns?5size?5in?5memory?0?5in?5bytes@ ; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_0DA@KGMEGDFO@Creates?5a?5tuple?9tree?5representat@ ; `string'
PUBLIC	??_C@_07FMMAKOKC@totuple?$AA@			; `string'
PUBLIC	??_C@_0CP@CPJNHDKH@Creates?5a?5list?9tree?5representati@ ; `string'
PUBLIC	??_C@_06IEBOCBAI@tolist?$AA@			; `string'
PUBLIC	??_C@_0DH@JMKDJABI@Determines?5if?5this?5ST?5object?5was@ ; `string'
PUBLIC	??_C@_07DJCBKGIH@issuite?$AA@			; `string'
PUBLIC	??_C@_0DN@JDPEKGGP@Determines?5if?5this?5ST?5object?5was@ ; `string'
PUBLIC	??_C@_06EHKKFFLC@isexpr?$AA@			; `string'
PUBLIC	??_C@_0CL@DBGONLLJ@Compile?5this?5ST?5object?5into?5a?5co@ ; `string'
PUBLIC	??_C@_07OLJGFCKG@compile?$AA@			; `string'
_BSS	SEGMENT
parser_error DQ	01H DUP (?)
pickle_constructor DQ 01H DUP (?)
_BSS	ENDS
_TLS	SEGMENT
?PyId__pickler@?2??PyInit_parser@@9@9 DQ 0000000000000000H ; `PyInit_parser'::`3'::PyId__pickler
	DQ	FLAT:??_C@_08EEAEJMPM@_pickler?$AA@
	DQ	0000000000000000H
?PyId_sequence2st@?2??PyInit_parser@@9@9 DQ 0000000000000000H ; `PyInit_parser'::`3'::PyId_sequence2st
	DQ	FLAT:??_C@_0M@IODEHOKN@sequence2st?$AA@
	DQ	0000000000000000H
?PyId_pickle@?2??PyInit_parser@@9@9 DQ 0000000000000000H ; `PyInit_parser'::`3'::PyId_pickle
	DQ	FLAT:??_C@_06MKPCHOAB@pickle?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_06MKPCHOAB@pickle?$AA@
CONST	SEGMENT
??_C@_06MKPCHOAB@pickle?$AA@ DB 'pickle', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OENOICDH@parser?$AA@
CONST	SEGMENT
??_C@_06OENOICDH@parser?$AA@ DB 'parser', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@NBLABHOM@Returns?5the?5pickle?5magic?5to?5allo@
CONST	SEGMENT
??_C@_0DM@NBLABHOM@Returns?5the?5pickle?5magic?5to?5allo@ DB 'Returns the'
	DB	' pickle magic to allow ST objects to be pickled.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EEAEJMPM@_pickler?$AA@
CONST	SEGMENT
??_C@_08EEAEJMPM@_pickler?$AA@ DB '_pickler', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NFEDFLJK@tuple2st?$AA@
CONST	SEGMENT
??_C@_08NFEDFLJK@tuple2st?$AA@ DB 'tuple2st', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NOCBOFNF@Creates?5a?5list?9tree?5representati@
CONST	SEGMENT
??_C@_0CN@NOCBOFNF@Creates?5a?5list?9tree?5representati@ DB 'Creates a li'
	DB	'st-tree representation of an ST.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OOJPKMEF@st2list?$AA@
CONST	SEGMENT
??_C@_07OOJPKMEF@st2list?$AA@ DB 'st2list', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IAPBJAMO@Creates?5a?5tuple?9tree?5representat@
CONST	SEGMENT
??_C@_0CO@IAPBJAMO@Creates?5a?5tuple?9tree?5representat@ DB 'Creates a tu'
	DB	'ple-tree representation of an ST.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FEMHBCAC@st2tuple?$AA@
CONST	SEGMENT
??_C@_08FEMHBCAC@st2tuple?$AA@ DB 'st2tuple', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@LOLPPNBK@Creates?5an?5ST?5object?5from?5a?5tree@
CONST	SEGMENT
??_C@_0DB@LOLPPNBK@Creates?5an?5ST?5object?5from?5a?5tree@ DB 'Creates an'
	DB	' ST object from a tree representation.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IODEHOKN@sequence2st?$AA@
CONST	SEGMENT
??_C@_0M@IODEHOKN@sequence2st?$AA@ DB 'sequence2st', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KPIPHOID@Creates?5an?5ST?5object?5from?5a?5suit@
CONST	SEGMENT
??_C@_0CD@KPIPHOID@Creates?5an?5ST?5object?5from?5a?5suit@ DB 'Creates an'
	DB	' ST object from a suite.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PPOFKJGL@suite?$AA@
CONST	SEGMENT
??_C@_05PPOFKJGL@suite?$AA@ DB 'suite', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@LCMHLDAF@Determines?5if?5an?5ST?5object?5was?5c@
CONST	SEGMENT
??_C@_0DF@LCMHLDAF@Determines?5if?5an?5ST?5object?5was?5c@ DB 'Determines'
	DB	' if an ST object was created from a suite.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@CMEKOJEA@Determines?5if?5an?5ST?5object?5was?5c@
CONST	SEGMENT
??_C@_0DL@CMEKOJEA@Determines?5if?5an?5ST?5object?5was?5c@ DB 'Determines'
	DB	' if an ST object was created from an expression.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LPHIHCBO@Creates?5an?5ST?5object?5from?5an?5exp@
CONST	SEGMENT
??_C@_0CJ@LPHIHCBO@Creates?5an?5ST?5object?5from?5an?5exp@ DB 'Creates an'
	DB	' ST object from an expression.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IPHMALII@expr?$AA@
CONST	SEGMENT
??_C@_04IPHMALII@expr?$AA@ DB 'expr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BFIACKMB@Compiles?5an?5ST?5object?5into?5a?5cod@
CONST	SEGMENT
??_C@_0CK@BFIACKMB@Compiles?5an?5ST?5object?5into?5a?5cod@ DB 'Compiles a'
	DB	'n ST object into a code object.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GANMKKNK@compilest?$AA@
CONST	SEGMENT
??_C@_09GANMKKNK@compilest?$AA@ DB 'compilest', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBBDGPOF@sequence?$AA@
CONST	SEGMENT
??_C@_08IBBDGPOF@sequence?$AA@ DB 'sequence', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source?$AA@
CONST	SEGMENT
??_C@_06OEKOLKIL@source?$AA@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BABJIOEM@filename?$AA@
CONST	SEGMENT
??_C@_08BABJIOEM@filename?$AA@ DB 'filename', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CFPJCNGC@col_info?$AA@
CONST	SEGMENT
??_C@_08CFPJCNGC@col_info?$AA@ DB 'col_info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CHLNHKJH@line_info?$AA@
CONST	SEGMENT
??_C@_09CHLNHKJH@line_info?$AA@ DB 'line_info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02BNFKEMBG@st?$AA@
CONST	SEGMENT
??_C@_02BNFKEMBG@st?$AA@ DB 'st', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@MHDFBGFO@Intermediate?5representation?5of?5a@
CONST	SEGMENT
??_C@_0DE@MHDFBGFO@Intermediate?5representation?5of?5a@ DB 'Intermediate '
	DB	'representation of a Python parse tree.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BEPDEEBN@parser?4st?$AA@
CONST	SEGMENT
??_C@_09BEPDEEBN@parser?4st?$AA@ DB 'parser.st', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KFEBPDOJ@Returns?5size?5in?5memory?0?5in?5bytes@
CONST	SEGMENT
??_C@_0CC@KFEBPDOJ@Returns?5size?5in?5memory?0?5in?5bytes@ DB 'Returns si'
	DB	'ze in memory, in bytes.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@KGMEGDFO@Creates?5a?5tuple?9tree?5representat@
CONST	SEGMENT
??_C@_0DA@KGMEGDFO@Creates?5a?5tuple?9tree?5representat@ DB 'Creates a tu'
	DB	'ple-tree representation of this ST.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FMMAKOKC@totuple?$AA@
CONST	SEGMENT
??_C@_07FMMAKOKC@totuple?$AA@ DB 'totuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@CPJNHDKH@Creates?5a?5list?9tree?5representati@
CONST	SEGMENT
??_C@_0CP@CPJNHDKH@Creates?5a?5list?9tree?5representati@ DB 'Creates a li'
	DB	'st-tree representation of this ST.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IEBOCBAI@tolist?$AA@
CONST	SEGMENT
??_C@_06IEBOCBAI@tolist?$AA@ DB 'tolist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@JMKDJABI@Determines?5if?5this?5ST?5object?5was@
CONST	SEGMENT
??_C@_0DH@JMKDJABI@Determines?5if?5this?5ST?5object?5was@ DB 'Determines '
	DB	'if this ST object was created from a suite.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DJCBKGIH@issuite?$AA@
CONST	SEGMENT
??_C@_07DJCBKGIH@issuite?$AA@ DB 'issuite', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@JDPEKGGP@Determines?5if?5this?5ST?5object?5was@
CONST	SEGMENT
??_C@_0DN@JDPEKGGP@Determines?5if?5this?5ST?5object?5was@ DB 'Determines '
	DB	'if this ST object was created from an expression.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EHKKFFLC@isexpr?$AA@
CONST	SEGMENT
??_C@_06EHKKFFLC@isexpr?$AA@ DB 'isexpr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DBGONLLJ@Compile?5this?5ST?5object?5into?5a?5co@
CONST	SEGMENT
??_C@_0CL@DBGONLLJ@Compile?5this?5ST?5object?5into?5a?5co@ DB 'Compile th'
	DB	'is ST object into a code object.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OLJGFCKG@compile?$AA@
CONST	SEGMENT
??_C@_07OLJGFCKG@compile?$AA@ DB 'compile', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
parser_copyright_string DB 'Copyright 1995-1996 by Virginia Polytechnic I'
	DB	'nstitute & State', 0aH, 'University, Blacksburg, Virginia, US'
	DB	'A, and Fred L. Drake, Jr., Reston,', 0aH, 'Virginia, USA.  Po'
	DB	'rtions copyright 1991-1995 by Stichting Mathematisch', 0aH, 'C'
	DB	'entrum, Amsterdam, The Netherlands.', 00H
	ORG $+7
parser_doc_string DB 'This is an interface to Python''s internal parser.', 00H
	ORG $+2
parser_version_string DB '0.5', 00H
parser_methods DQ FLAT:??_C@_07OLJGFCKG@compile?$AA@
	DQ	FLAT:parser_compilest
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0CL@DBGONLLJ@Compile?5this?5ST?5object?5into?5a?5co@
	DQ	FLAT:??_C@_06EHKKFFLC@isexpr?$AA@
	DQ	FLAT:parser_isexpr
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0DN@JDPEKGGP@Determines?5if?5this?5ST?5object?5was@
	DQ	FLAT:??_C@_07DJCBKGIH@issuite?$AA@
	DQ	FLAT:parser_issuite
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0DH@JMKDJABI@Determines?5if?5this?5ST?5object?5was@
	DQ	FLAT:??_C@_06IEBOCBAI@tolist?$AA@
	DQ	FLAT:parser_st2list
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0CP@CPJNHDKH@Creates?5a?5list?9tree?5representati@
	DQ	FLAT:??_C@_07FMMAKOKC@totuple?$AA@
	DQ	FLAT:parser_st2tuple
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0DA@KGMEGDFO@Creates?5a?5tuple?9tree?5representat@
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:parser_sizeof
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0CC@KFEBPDOJ@Returns?5size?5in?5memory?0?5in?5bytes@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
PyST_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09BEPDEEBN@parser?4st?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:parser_free
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	FLAT:??_C@_0DE@MHDFBGFO@Intermediate?5representation?5of?5a@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:parser_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:parser_methods
	ORG $+152
?keywords@?1??parser_st2tuple@@9@9 DQ FLAT:??_C@_02BNFKEMBG@st?$AA@ ; `parser_st2tuple'::`2'::keywords
	DQ	FLAT:??_C@_09CHLNHKJH@line_info?$AA@
	DQ	FLAT:??_C@_08CFPJCNGC@col_info?$AA@
	DQ	0000000000000000H
?keywords@?1??parser_st2list@@9@9 DQ FLAT:??_C@_02BNFKEMBG@st?$AA@ ; `parser_st2list'::`2'::keywords
	DQ	FLAT:??_C@_09CHLNHKJH@line_info?$AA@
	DQ	FLAT:??_C@_08CFPJCNGC@col_info?$AA@
	DQ	0000000000000000H
?keywords@?1??parser_compilest@@9@9 DQ FLAT:??_C@_02BNFKEMBG@st?$AA@ ; `parser_compilest'::`2'::keywords
	DQ	FLAT:??_C@_08BABJIOEM@filename?$AA@
	DQ	0000000000000000H
?keywords@?1??parser_isexpr@@9@9 DQ FLAT:??_C@_02BNFKEMBG@st?$AA@ ; `parser_isexpr'::`2'::keywords
	DQ	0000000000000000H
?keywords@?1??parser_issuite@@9@9 DQ FLAT:??_C@_02BNFKEMBG@st?$AA@ ; `parser_issuite'::`2'::keywords
	DQ	0000000000000000H
?keywords@?1??parser_do_parse@@9@9 DQ FLAT:??_C@_06OEKOLKIL@source?$AA@ ; `parser_do_parse'::`2'::keywords
	DQ	0000000000000000H
?keywords@?1??parser_tuple2st@@9@9 DQ FLAT:??_C@_08IBBDGPOF@sequence?$AA@ ; `parser_tuple2st'::`2'::keywords
	DQ	0000000000000000H
	ORG $+8
parser_functions DQ FLAT:??_C@_09GANMKKNK@compilest?$AA@
	DQ	FLAT:parser_compilest
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0CK@BFIACKMB@Compiles?5an?5ST?5object?5into?5a?5cod@
	DQ	FLAT:??_C@_04IPHMALII@expr?$AA@
	DQ	FLAT:parser_expr
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0CJ@LPHIHCBO@Creates?5an?5ST?5object?5from?5an?5exp@
	DQ	FLAT:??_C@_06EHKKFFLC@isexpr?$AA@
	DQ	FLAT:parser_isexpr
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0DL@CMEKOJEA@Determines?5if?5an?5ST?5object?5was?5c@
	DQ	FLAT:??_C@_07DJCBKGIH@issuite?$AA@
	DQ	FLAT:parser_issuite
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0DF@LCMHLDAF@Determines?5if?5an?5ST?5object?5was?5c@
	DQ	FLAT:??_C@_05PPOFKJGL@suite?$AA@
	DQ	FLAT:parser_suite
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0CD@KPIPHOID@Creates?5an?5ST?5object?5from?5a?5suit@
	DQ	FLAT:??_C@_0M@IODEHOKN@sequence2st?$AA@
	DQ	FLAT:parser_tuple2st
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0DB@LOLPPNBK@Creates?5an?5ST?5object?5from?5a?5tree@
	DQ	FLAT:??_C@_08FEMHBCAC@st2tuple?$AA@
	DQ	FLAT:parser_st2tuple
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0CO@IAPBJAMO@Creates?5a?5tuple?9tree?5representat@
	DQ	FLAT:??_C@_07OOJPKMEF@st2list?$AA@
	DQ	FLAT:parser_st2list
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0CN@NOCBOFNF@Creates?5a?5list?9tree?5representati@
	DQ	FLAT:??_C@_08NFEDFLJK@tuple2st?$AA@
	DQ	FLAT:parser_tuple2st
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0DB@LOLPPNBK@Creates?5an?5ST?5object?5from?5a?5tree@
	DQ	FLAT:??_C@_08EEAEJMPM@_pickler?$AA@
	DQ	FLAT:parser__pickler
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DM@NBLABHOM@Returns?5the?5pickle?5magic?5to?5allo@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
parsermodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06OENOICDH@parser?$AA@
	DQ	0000000000000000H
	DQ	ffffffffffffffffH
	DQ	FLAT:parser_functions
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$node2tuple DD imagerel node2tuple
	DD	imagerel node2tuple+118
	DD	imagerel $unwind$node2tuple
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$node2tuple DD imagerel node2tuple+118
	DD	imagerel node2tuple+333
	DD	imagerel $chain$1$node2tuple
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$node2tuple DD imagerel node2tuple+333
	DD	imagerel node2tuple+467
	DD	imagerel $chain$3$node2tuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$node2tuple DD 040021H
	DD	067400H
	DD	0a6400H
	DD	imagerel node2tuple
	DD	imagerel node2tuple+118
	DD	imagerel $unwind$node2tuple
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$node2tuple DD 040a21H
	DD	06740aH
	DD	0a6405H
	DD	imagerel node2tuple
	DD	imagerel node2tuple+118
	DD	imagerel $unwind$node2tuple
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$node2tuple DD 031001H
	DD	0500c6210H
	DD	0300bH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\parsermodule.c
xdata	ENDS
;	COMDAT node2tuple
_TEXT	SEGMENT
n$ = 80
mkseq$ = 88
addelem$ = 96
lineno$ = 104
col_offset$ = 112
node2tuple PROC						; COMDAT

; 85   : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	53		 push	 rbx
  0000b	55		 push	 rbp
  0000c	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00010	49 8b e8	 mov	 rbp, r8
  00013	48 8b d9	 mov	 rbx, rcx

; 86   :     if (n == NULL) {

  00016	48 85 c9	 test	 rcx, rcx
  00019	75 53		 jne	 SHORT $LN15@node2tuple

; 87   :         Py_INCREF(Py_None);

  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 3c		 jne	 SHORT $LN19@node2tuple
  00024	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00039	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	85 c0		 test	 eax, eax
  0004e	75 09		 jne	 SHORT $LN18@node2tuple
  00050	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00057	74 07		 je	 SHORT $LN19@node2tuple
$LN18@node2tuple:
  00059	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN19@node2tuple:

; 88   :         return (Py_None);

  00060	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 128  :     }
; 129  :     else {
; 130  :         PyErr_SetString(PyExc_SystemError,
; 131  :                         "unrecognized parse tree node type");
; 132  :         return ((PyObject*) NULL);
; 133  :     }
; 134  : }

  00067	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006b	5d		 pop	 rbp
  0006c	5b		 pop	 rbx
  0006d	c3		 ret	 0
$LN15@node2tuple:

; 89   :     }
; 90   :     if (ISNONTERMINAL(TYPE(n))) {

  0006e	0f b7 01	 movzx	 eax, WORD PTR [rcx]
  00071	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00076	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  0007b	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00080	66 3b c1	 cmp	 ax, cx
  00083	0f 8c c4 00 00
	00		 jl	 $LN25@node2tuple

; 91   :         int i;
; 92   :         PyObject *v;
; 93   :         PyObject *w;
; 94   : 
; 95   :         v = mkseq(1 + NCH(n) + (TYPE(n) == encoding_decl));

  00089	41 b8 4f 01 00
	00		 mov	 r8d, 335		; 0000014fH
  0008f	33 f6		 xor	 esi, esi
  00091	66 41 3b c0	 cmp	 ax, r8w
  00095	8b 43 18	 mov	 eax, DWORD PTR [rbx+24]
  00098	8b ce		 mov	 ecx, esi
  0009a	0f 94 c1	 sete	 cl
  0009d	8d 4c 01 01	 lea	 ecx, DWORD PTR [rcx+rax+1]
  000a1	48 63 c9	 movsxd	 rcx, ecx
  000a4	ff d2		 call	 rdx
  000a6	48 8b f8	 mov	 rdi, rax

; 96   :         if (v == NULL)

  000a9	48 85 c0	 test	 rax, rax

; 97   :             return (v);

  000ac	0f 84 88 00 00
	00		 je	 $LN29@node2tuple

; 98   :         w = PyLong_FromLong(TYPE(n));

  000b2	0f bf 0b	 movsx	 ecx, WORD PTR [rbx]
  000b5	e8 00 00 00 00	 call	 PyLong_FromLong

; 99   :         if (w == NULL) {
; 100  :             Py_DECREF(v);

  000ba	48 8b cf	 mov	 rcx, rdi
  000bd	48 85 c0	 test	 rax, rax

; 101  :             return ((PyObject*) NULL);

  000c0	74 73		 je	 SHORT $LN23@node2tuple

; 102  :         }
; 103  :         (void) addelem(v, 0, w);

  000c2	4c 8b c0	 mov	 r8, rax
  000c5	33 d2		 xor	 edx, edx
  000c7	ff d5		 call	 rbp

; 104  :         for (i = 0; i < NCH(n); i++) {

  000c9	39 73 18	 cmp	 DWORD PTR [rbx+24], esi
  000cc	7e 42		 jle	 SHORT $LN9@node2tuple
  000ce	66 90		 npad	 2
$LL11@node2tuple:

; 105  :             w = node2tuple(CHILD(n, i), mkseq, addelem, lineno, col_offset);

  000d0	44 8b 4c 24 68	 mov	 r9d, DWORD PTR lineno$[rsp]
  000d5	48 8b 54 24 58	 mov	 rdx, QWORD PTR mkseq$[rsp]
  000da	48 63 c6	 movsxd	 rax, esi
  000dd	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  000e1	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000e5	4c 8b c5	 mov	 r8, rbp
  000e8	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  000ec	8b 44 24 70	 mov	 eax, DWORD PTR col_offset$[rsp]
  000f0	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000f4	e8 00 00 00 00	 call	 node2tuple

; 109  :             }
; 110  :             (void) addelem(v, i+1, w);

  000f9	48 8b cf	 mov	 rcx, rdi
  000fc	48 85 c0	 test	 rax, rax
  000ff	74 34		 je	 SHORT $LN23@node2tuple
  00101	ff c6		 inc	 esi
  00103	4c 8b c0	 mov	 r8, rax
  00106	48 63 d6	 movsxd	 rdx, esi
  00109	ff d5		 call	 rbp
  0010b	3b 73 18	 cmp	 esi, DWORD PTR [rbx+24]
  0010e	7c c0		 jl	 SHORT $LL11@node2tuple
$LN9@node2tuple:

; 111  :         }
; 112  : 
; 113  :         if (TYPE(n) == encoding_decl)

  00110	b8 4f 01 00 00	 mov	 eax, 335		; 0000014fH
  00115	66 39 03	 cmp	 WORD PTR [rbx], ax
  00118	0f 85 a1 00 00
	00		 jne	 $LN2@node2tuple

; 114  :             (void) addelem(v, i+1, PyUnicode_FromString(STR(n)));

  0011e	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00122	e8 00 00 00 00	 call	 PyUnicode_FromString
  00127	4c 8b c0	 mov	 r8, rax
  0012a	8d 46 01	 lea	 eax, DWORD PTR [rsi+1]
  0012d	48 63 d0	 movsxd	 rdx, eax

; 115  :         return (v);

  00130	e9 85 00 00 00	 jmp	 $LN28@node2tuple
$LN23@node2tuple:

; 106  :             if (w == NULL) {
; 107  :                 Py_DECREF(v);

  00135	e8 00 00 00 00	 call	 _Py_DecRef
$LN29@node2tuple:
  0013a	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0013f	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 108  :                 return ((PyObject*) NULL);

  00144	33 c0		 xor	 eax, eax

; 128  :     }
; 129  :     else {
; 130  :         PyErr_SetString(PyExc_SystemError,
; 131  :                         "unrecognized parse tree node type");
; 132  :         return ((PyObject*) NULL);
; 133  :     }
; 134  : }

  00146	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0014a	5d		 pop	 rbp
  0014b	5b		 pop	 rbx
  0014c	c3		 ret	 0
$LN25@node2tuple:

; 116  :     }
; 117  :     else if (ISTERMINAL(TYPE(n))) {
; 118  :         PyObject *result = mkseq(2 + lineno + col_offset);

  0014d	8b 74 24 70	 mov	 esi, DWORD PTR col_offset$[rsp]
  00151	41 8d 44 31 02	 lea	 eax, DWORD PTR [r9+rsi+2]
  00156	48 63 c8	 movsxd	 rcx, eax
  00159	ff d2		 call	 rdx
  0015b	48 8b f8	 mov	 rdi, rax

; 119  :         if (result != NULL) {

  0015e	48 85 c0	 test	 rax, rax
  00161	74 5c		 je	 SHORT $LN2@node2tuple

; 120  :             (void) addelem(result, 0, PyLong_FromLong(TYPE(n)));

  00163	0f bf 0b	 movsx	 ecx, WORD PTR [rbx]
  00166	e8 00 00 00 00	 call	 PyLong_FromLong
  0016b	33 d2		 xor	 edx, edx
  0016d	48 8b cf	 mov	 rcx, rdi
  00170	4c 8b c0	 mov	 r8, rax
  00173	ff d5		 call	 rbp

; 121  :             (void) addelem(result, 1, PyUnicode_FromString(STR(n)));

  00175	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00179	e8 00 00 00 00	 call	 PyUnicode_FromString
  0017e	ba 01 00 00 00	 mov	 edx, 1
  00183	48 8b cf	 mov	 rcx, rdi
  00186	4c 8b c0	 mov	 r8, rax
  00189	ff d5		 call	 rbp

; 122  :             if (lineno == 1)

  0018b	83 7c 24 68 01	 cmp	 DWORD PTR lineno$[rsp], 1
  00190	75 15		 jne	 SHORT $LN3@node2tuple

; 123  :                 (void) addelem(result, 2, PyLong_FromLong(n->n_lineno));

  00192	8b 4b 10	 mov	 ecx, DWORD PTR [rbx+16]
  00195	e8 00 00 00 00	 call	 PyLong_FromLong
  0019a	ba 02 00 00 00	 mov	 edx, 2
  0019f	48 8b cf	 mov	 rcx, rdi
  001a2	4c 8b c0	 mov	 r8, rax
  001a5	ff d5		 call	 rbp
$LN3@node2tuple:

; 124  :             if (col_offset == 1)

  001a7	83 fe 01	 cmp	 esi, 1
  001aa	75 13		 jne	 SHORT $LN2@node2tuple

; 125  :                 (void) addelem(result, 3, PyLong_FromLong(n->n_col_offset));

  001ac	8b 4b 14	 mov	 ecx, DWORD PTR [rbx+20]
  001af	e8 00 00 00 00	 call	 PyLong_FromLong
  001b4	8d 56 02	 lea	 edx, QWORD PTR [rsi+2]
  001b7	4c 8b c0	 mov	 r8, rax
$LN28@node2tuple:
  001ba	48 8b cf	 mov	 rcx, rdi
  001bd	ff d5		 call	 rbp
$LN2@node2tuple:

; 126  :         }
; 127  :         return (result);

  001bf	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  001c4	48 8b c7	 mov	 rax, rdi
  001c7	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 128  :     }
; 129  :     else {
; 130  :         PyErr_SetString(PyExc_SystemError,
; 131  :                         "unrecognized parse tree node type");
; 132  :         return ((PyObject*) NULL);
; 133  :     }
; 134  : }

  001cc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001d0	5d		 pop	 rbp
  001d1	5b		 pop	 rbx
  001d2	c3		 ret	 0
node2tuple ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_compare_nodes DD imagerel parser_compare_nodes
	DD	imagerel parser_compare_nodes+64
	DD	imagerel $unwind$parser_compare_nodes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$parser_compare_nodes DD imagerel parser_compare_nodes+64
	DD	imagerel parser_compare_nodes+120
	DD	imagerel $chain$0$parser_compare_nodes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$parser_compare_nodes DD imagerel parser_compare_nodes+120
	DD	imagerel parser_compare_nodes+143
	DD	imagerel $chain$2$parser_compare_nodes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$parser_compare_nodes DD imagerel parser_compare_nodes+143
	DD	imagerel parser_compare_nodes+172
	DD	imagerel $chain$4$parser_compare_nodes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$parser_compare_nodes DD imagerel parser_compare_nodes+172
	DD	imagerel parser_compare_nodes+195
	DD	imagerel $chain$6$parser_compare_nodes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$parser_compare_nodes DD imagerel parser_compare_nodes+195
	DD	imagerel parser_compare_nodes+265
	DD	imagerel $chain$8$parser_compare_nodes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$parser_compare_nodes DD 020021H
	DD	063400H
	DD	imagerel parser_compare_nodes
	DD	imagerel parser_compare_nodes+64
	DD	imagerel $unwind$parser_compare_nodes
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$parser_compare_nodes DD 020021H
	DD	063400H
	DD	imagerel parser_compare_nodes
	DD	imagerel parser_compare_nodes+64
	DD	imagerel $unwind$parser_compare_nodes
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$parser_compare_nodes DD 020021H
	DD	063400H
	DD	imagerel parser_compare_nodes
	DD	imagerel parser_compare_nodes+64
	DD	imagerel $unwind$parser_compare_nodes
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$parser_compare_nodes DD 020021H
	DD	063400H
	DD	imagerel parser_compare_nodes
	DD	imagerel parser_compare_nodes+64
	DD	imagerel $unwind$parser_compare_nodes
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$parser_compare_nodes DD 020521H
	DD	063405H
	DD	imagerel parser_compare_nodes
	DD	imagerel parser_compare_nodes+64
	DD	imagerel $unwind$parser_compare_nodes
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_compare_nodes DD 040a01H
	DD	07640aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT parser_compare_nodes
_TEXT	SEGMENT
left$ = 48
right$ = 56
parser_compare_nodes PROC				; COMDAT

; 239  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 240  :     int j;
; 241  : 
; 242  :     if (TYPE(left) < TYPE(right))

  0000a	0f b7 01	 movzx	 eax, WORD PTR [rcx]
  0000d	48 8b f9	 mov	 rdi, rcx
  00010	0f b7 0a	 movzx	 ecx, WORD PTR [rdx]
  00013	48 8b f2	 mov	 rsi, rdx
  00016	66 3b c8	 cmp	 cx, ax
  00019	7e 0e		 jle	 SHORT $LN19@parser_com

; 243  :         return (-1);

  0001b	83 c8 ff	 or	 eax, -1

; 264  : }

  0001e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00023	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00027	5f		 pop	 rdi
  00028	c3		 ret	 0
$LN19@parser_com:

; 244  : 
; 245  :     if (TYPE(right) < TYPE(left))

  00029	7d 10		 jge	 SHORT $LN8@parser_com

; 246  :         return (1);

  0002b	b8 01 00 00 00	 mov	 eax, 1

; 264  : }

  00030	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5f		 pop	 rdi
  0003a	c3		 ret	 0
$LN8@parser_com:

; 247  : 
; 248  :     if (ISTERMINAL(TYPE(left)))

  0003b	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00040	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00045	66 3b c1	 cmp	 ax, cx
  00048	7d 45		 jge	 SHORT $LN7@parser_com

; 249  :         return (strcmp(STR(left), STR(right)));

  0004a	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  0004e	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  00052	48 2b d0	 sub	 rdx, rax
$LL15@parser_com:
  00055	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00058	3a 0c 10	 cmp	 cl, BYTE PTR [rax+rdx]
  0005b	75 1b		 jne	 SHORT $LN17@parser_com
  0005d	48 ff c0	 inc	 rax
  00060	84 c9		 test	 cl, cl
  00062	75 f1		 jne	 SHORT $LL15@parser_com
  00064	33 db		 xor	 ebx, ebx
  00066	8b c3		 mov	 eax, ebx
  00068	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 264  : }

  0006d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00072	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00076	5f		 pop	 rdi
  00077	c3		 ret	 0
$LN17@parser_com:

; 249  :         return (strcmp(STR(left), STR(right)));

  00078	1b db		 sbb	 ebx, ebx
  0007a	83 db ff	 sbb	 ebx, -1
  0007d	8b c3		 mov	 eax, ebx
  0007f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 264  : }

  00084	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00089	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008d	5f		 pop	 rdi
  0008e	c3		 ret	 0
$LN7@parser_com:

; 250  : 
; 251  :     if (NCH(left) < NCH(right))

  0008f	8b 47 18	 mov	 eax, DWORD PTR [rdi+24]
  00092	8b 4a 18	 mov	 ecx, DWORD PTR [rdx+24]
  00095	3b c8		 cmp	 ecx, eax
  00097	7e 13		 jle	 SHORT $LN20@parser_com

; 252  :         return (-1);

  00099	83 c8 ff	 or	 eax, -1
  0009c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 264  : }

  000a1	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0
$LN20@parser_com:

; 253  : 
; 254  :     if (NCH(right) < NCH(left))

  000ac	7d 15		 jge	 SHORT $LN5@parser_com

; 255  :         return (1);

  000ae	b8 01 00 00 00	 mov	 eax, 1
  000b3	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 264  : }

  000b8	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000bd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c1	5f		 pop	 rdi
  000c2	c3		 ret	 0
$LN5@parser_com:

; 256  : 
; 257  :     for (j = 0; j < NCH(left); ++j) {

  000c3	33 db		 xor	 ebx, ebx
  000c5	85 c0		 test	 eax, eax
  000c7	7e 2e		 jle	 SHORT $LN2@parser_com
  000c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@parser_com:

; 258  :         int v = parser_compare_nodes(CHILD(left, j), CHILD(right, j));

  000d0	48 63 c3	 movsxd	 rax, ebx
  000d3	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  000d7	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  000db	48 8d 14 c8	 lea	 rdx, QWORD PTR [rax+rcx*8]
  000df	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000e3	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  000e7	e8 00 00 00 00	 call	 parser_compare_nodes

; 259  : 
; 260  :         if (v != 0)

  000ec	85 c0		 test	 eax, eax
  000ee	75 09		 jne	 SHORT $LN18@parser_com

; 256  : 
; 257  :     for (j = 0; j < NCH(left); ++j) {

  000f0	ff c3		 inc	 ebx
  000f2	3b 5f 18	 cmp	 ebx, DWORD PTR [rdi+24]
  000f5	7c d9		 jl	 SHORT $LL4@parser_com
$LN2@parser_com:

; 261  :             return (v);
; 262  :     }
; 263  :     return (0);

  000f7	33 c0		 xor	 eax, eax
$LN18@parser_com:
  000f9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 264  : }

  000fe	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00103	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00107	5f		 pop	 rdi
  00108	c3		 ret	 0
parser_compare_nodes ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@ENIMKLG@?4?4?2Modules?2parsermodule?4c?$AA@ ; `string'
EXTRN	_PyErr_BadInternalCall:PROC
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	PyErr_BadArgument:PROC
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$parser_richcompare DD imagerel parser_richcompare
	DD	imagerel parser_richcompare+29
	DD	imagerel $unwind$parser_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$parser_richcompare DD imagerel parser_richcompare+29
	DD	imagerel parser_richcompare+261
	DD	imagerel $chain$0$parser_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$parser_richcompare DD imagerel parser_richcompare+261
	DD	imagerel parser_richcompare+340
	DD	imagerel $chain$2$parser_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$parser_richcompare DD imagerel parser_richcompare+340
	DD	imagerel parser_richcompare+364
	DD	imagerel $chain$3$parser_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$parser_richcompare DD imagerel parser_richcompare+364
	DD	imagerel parser_richcompare+388
	DD	imagerel $chain$4$parser_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$parser_richcompare DD 020021H
	DD	063400H
	DD	imagerel parser_richcompare
	DD	imagerel parser_richcompare+29
	DD	imagerel $unwind$parser_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$parser_richcompare DD 021H
	DD	imagerel parser_richcompare
	DD	imagerel parser_richcompare+29
	DD	imagerel $unwind$parser_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$parser_richcompare DD 020021H
	DD	063400H
	DD	imagerel parser_richcompare
	DD	imagerel parser_richcompare+29
	DD	imagerel $unwind$parser_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$parser_richcompare DD 020521H
	DD	063405H
	DD	imagerel parser_richcompare
	DD	imagerel parser_richcompare+29
	DD	imagerel $unwind$parser_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_richcompare DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BK@ENIMKLG@?4?4?2Modules?2parsermodule?4c?$AA@
CONST	SEGMENT
??_C@_0BK@ENIMKLG@?4?4?2Modules?2parsermodule?4c?$AA@ DB '..\Modules\pars'
	DB	'ermodule.c', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\parsermodule.c
CONST	ENDS
;	COMDAT parser_richcompare
_TEXT	SEGMENT
left$ = 64
right$ = 72
op$ = 80
parser_richcompare PROC					; COMDAT

; 278  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 279  :     int result;
; 280  :     PyObject *v;
; 281  : 
; 282  :     /* neither argument should be NULL, unless something's gone wrong */
; 283  :     if (left == NULL || right == NULL) {

  00004	48 85 c9	 test	 rcx, rcx
  00007	0f 84 47 01 00
	00		 je	 $LN14@parser_ric
  0000d	48 85 d2	 test	 rdx, rdx
  00010	0f 84 3e 01 00
	00		 je	 $LN14@parser_ric

; 286  :     }
; 287  : 
; 288  :     /* both arguments should be instances of PyST_Object */
; 289  :     if (!PyST_Object_Check(left) || !PyST_Object_Check(right)) {

  00016	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyST_Type
  0001d	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00022	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00026	0f 85 d9 00 00
	00		 jne	 $LN12@parser_ric
  0002c	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00030	0f 85 cf 00 00
	00		 jne	 $LN12@parser_ric

; 291  :         goto finished;
; 292  :     }
; 293  : 
; 294  :     if (left == right)

  00036	48 3b ca	 cmp	 rcx, rdx
  00039	75 04		 jne	 SHORT $LN11@parser_ric

; 295  :         /* if arguments are identical, they're equal */
; 296  :         result = 0;

  0003b	33 c0		 xor	 eax, eax

; 297  :     else

  0003d	eb 0d		 jmp	 SHORT $LN10@parser_ric
$LN11@parser_ric:

; 298  :         result = parser_compare_nodes(((PyST_Object *)left)->st_node,
; 299  :                                       ((PyST_Object *)right)->st_node);

  0003f	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00043	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00047	e8 00 00 00 00	 call	 parser_compare_nodes
$LN10@parser_ric:

; 300  : 
; 301  :     /* Convert return value to a Boolean */
; 302  :     switch (op) {

  0004c	41 83 f8 05	 cmp	 r8d, 5
  00050	0f 87 9e 00 00
	00		 ja	 $LN1@parser_ric
  00056	49 63 c8	 movsxd	 rcx, r8d
  00059	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:__ImageBase
  00060	41 8b 94 88 00
	00 00 00	 mov	 edx, DWORD PTR $LN22@parser_ric[r8+rcx*4]
  00068	49 03 d0	 add	 rdx, r8
  0006b	ff e2		 jmp	 rdx
$LN7@parser_ric:

; 303  :       case Py_EQ:
; 304  :         v = TEST_COND(result == 0);

  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00074	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  0007b	85 c0		 test	 eax, eax
  0007d	48 0f 44 d9	 cmove	 rbx, rcx

; 305  :         break;

  00081	e9 86 00 00 00	 jmp	 $finished$21914
$LN6@parser_ric:

; 306  :       case Py_NE:
; 307  :         v = TEST_COND(result != 0);

  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  0008d	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00094	85 c0		 test	 eax, eax
  00096	48 0f 45 d9	 cmovne	 rbx, rcx

; 308  :         break;

  0009a	eb 70		 jmp	 SHORT $finished$21914
$LN5@parser_ric:

; 309  :       case Py_LE:
; 310  :         v = TEST_COND(result <= 0);

  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  000a3	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000aa	85 c0		 test	 eax, eax
  000ac	48 0f 4e d9	 cmovle	 rbx, rcx

; 311  :         break;

  000b0	eb 5a		 jmp	 SHORT $finished$21914
$LN4@parser_ric:

; 312  :       case Py_GE:
; 313  :         v = TEST_COND(result >= 0);

  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  000b9	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000c0	85 c0		 test	 eax, eax
  000c2	48 0f 49 d9	 cmovns	 rbx, rcx

; 314  :         break;

  000c6	eb 44		 jmp	 SHORT $finished$21914
$LN3@parser_ric:

; 315  :       case Py_LT:
; 316  :         v = TEST_COND(result < 0);

  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  000cf	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000d6	85 c0		 test	 eax, eax
  000d8	48 0f 48 d9	 cmovs	 rbx, rcx

; 317  :         break;

  000dc	eb 2e		 jmp	 SHORT $finished$21914
$LN2@parser_ric:

; 318  :       case Py_GT:
; 319  :         v = TEST_COND(result > 0);

  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  000e5	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000ec	85 c0		 test	 eax, eax
  000ee	48 0f 4f d9	 cmovg	 rbx, rcx

; 320  :         break;

  000f2	eb 18		 jmp	 SHORT $finished$21914
$LN1@parser_ric:

; 321  :       default:
; 322  :         PyErr_BadArgument();

  000f4	e8 00 00 00 00	 call	 PyErr_BadArgument
  000f9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 323  :         return NULL;

  000fe	33 c0		 xor	 eax, eax

; 328  : }

  00100	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00104	c3		 ret	 0
$LN12@parser_ric:

; 290  :         v = Py_NotImplemented;

  00105	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NotImplementedStruct
$finished$21914:

; 324  :     }
; 325  :   finished:
; 326  :     Py_INCREF(v);

  0010c	e8 00 00 00 00	 call	 _Py_PXCTX
  00111	85 c0		 test	 eax, eax
  00113	75 32		 jne	 SHORT $LN19@parser_ric
  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00123	4c 8b cb	 mov	 r9, rbx
  00126	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0012c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00134	e8 00 00 00 00	 call	 _PyParallel_Guard
  00139	85 c0		 test	 eax, eax
  0013b	75 06		 jne	 SHORT $LN18@parser_ric
  0013d	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00141	74 04		 je	 SHORT $LN19@parser_ric
$LN18@parser_ric:
  00143	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN19@parser_ric:

; 327  :     return v;

  00147	48 8b c3	 mov	 rax, rbx
  0014a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 328  : }

  0014f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00153	c3		 ret	 0
$LN14@parser_ric:

; 284  :         PyErr_BadInternalCall();

  00154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@ENIMKLG@?4?4?2Modules?2parsermodule?4c?$AA@
  0015b	ba 1c 01 00 00	 mov	 edx, 284		; 0000011cH
  00160	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 285  :         return NULL;

  00165	33 c0		 xor	 eax, eax

; 328  : }

  00167	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0016b	c3		 ret	 0
$LN22@parser_ric:
  0016c	00 00 00 00	 DD	 $LN3@parser_ric
  00170	00 00 00 00	 DD	 $LN5@parser_ric
  00174	00 00 00 00	 DD	 $LN7@parser_ric
  00178	00 00 00 00	 DD	 $LN6@parser_ric
  0017c	00 00 00 00	 DD	 $LN2@parser_ric
  00180	00 00 00 00	 DD	 $LN4@parser_ric
parser_richcompare ENDP
_TEXT	ENDS
EXTRN	PyNode_Free:PROC
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_newstobject DD imagerel parser_newstobject
	DD	imagerel parser_newstobject+113
	DD	imagerel $unwind$parser_newstobject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_newstobject DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT parser_newstobject
_TEXT	SEGMENT
st$ = 48
type$ = 56
parser_newstobject PROC					; COMDAT

; 339  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b f2		 mov	 esi, edx
  00011	48 8b f9	 mov	 rdi, rcx

; 340  :     PyST_Object* o = PyObject_New(PyST_Object, &PyST_Type);

  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyST_Type
  00020	85 c0		 test	 eax, eax
  00022	74 07		 je	 SHORT $LN5@parser_new
  00024	e8 00 00 00 00	 call	 _PxObject_New
  00029	eb 05		 jmp	 SHORT $LN7@parser_new
$LN5@parser_new:
  0002b	e8 00 00 00 00	 call	 _PyObject_New
$LN7@parser_new:
  00030	48 8b d8	 mov	 rbx, rax

; 341  : 
; 342  :     if (o != 0) {

  00033	48 85 c0	 test	 rax, rax
  00036	74 1e		 je	 SHORT $LN2@parser_new

; 343  :         o->st_node = st;

  00038	48 89 78 60	 mov	 QWORD PTR [rax+96], rdi

; 344  :         o->st_type = type;

  0003c	89 70 68	 mov	 DWORD PTR [rax+104], esi

; 345  :         o->st_flags.cf_flags = 0;

  0003f	c7 40 6c 00 00
	00 00		 mov	 DWORD PTR [rax+108], 0

; 349  :     }
; 350  :     return ((PyObject*)o);
; 351  : }

  00046	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004b	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
$LN2@parser_new:

; 346  :     }
; 347  :     else {
; 348  :         PyNode_Free(st);

  00056	48 8b cf	 mov	 rcx, rdi
  00059	e8 00 00 00 00	 call	 PyNode_Free

; 349  :     }
; 350  :     return ((PyObject*)o);
; 351  : }

  0005e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00063	48 8b c3	 mov	 rax, rbx
  00066	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
parser_newstobject ENDP
_TEXT	ENDS
EXTRN	PyObject_Free:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_free DD imagerel parser_free
	DD	imagerel parser_free+31
	DD	imagerel $unwind$parser_free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_free DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT parser_free
_TEXT	SEGMENT
st$ = 48
parser_free PROC					; COMDAT

; 361  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 362  :     PyNode_Free(st->st_node);

  00009	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0000d	e8 00 00 00 00	 call	 PyNode_Free

; 363  :     PyObject_Del(st);

  00012	48 8b cb	 mov	 rcx, rbx

; 364  : }

  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5b		 pop	 rbx
  0001a	e9 00 00 00 00	 jmp	 PyObject_Free
parser_free ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	_PyNode_SizeOf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_sizeof DD imagerel parser_sizeof
	DD	imagerel parser_sizeof+26
	DD	imagerel $unwind$parser_sizeof
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_sizeof DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT parser_sizeof
_TEXT	SEGMENT
st$ = 48
unused$ = 56
parser_sizeof PROC					; COMDAT

; 368  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 369  :     Py_ssize_t res;
; 370  : 
; 371  :     res = sizeof(PyST_Object) + _PyNode_SizeOf(st->st_node);

  00004	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00008	e8 00 00 00 00	 call	 _PyNode_SizeOf

; 372  :     return PyLong_FromSsize_t(res);

  0000d	48 8d 48 70	 lea	 rcx, QWORD PTR [rax+112]

; 373  : }

  00011	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00015	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
parser_sizeof ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@COPCCAIM@O?$CB?$HMpp?3st2tuple?$AA@	; `string'
PUBLIC	??_C@_0M@NAADOGPG@?$HMpp?3totuple?$AA@		; `string'
EXTRN	PyTuple_New:PROC
EXTRN	PyTuple_SetItem:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyModule_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_st2tuple DD imagerel parser_st2tuple
	DD	imagerel parser_st2tuple+251
	DD	imagerel $unwind$parser_st2tuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_st2tuple DD 040f01H
	DD	0d340fH
	DD	0700b920fH
xdata	ENDS
;	COMDAT ??_C@_0P@COPCCAIM@O?$CB?$HMpp?3st2tuple?$AA@
CONST	SEGMENT
??_C@_0P@COPCCAIM@O?$CB?$HMpp?3st2tuple?$AA@ DB 'O!|pp:st2tuple', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NAADOGPG@?$HMpp?3totuple?$AA@
CONST	SEGMENT
??_C@_0M@NAADOGPG@?$HMpp?3totuple?$AA@ DB '|pp:totuple', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT parser_st2tuple
_TEXT	SEGMENT
line_info$ = 64
self$ = 96
args$ = 104
kw$ = 112
col_info$ = 120
parser_st2tuple PROC					; COMDAT

; 384  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000f	49 8b d8	 mov	 rbx, r8
  00012	48 8b fa	 mov	 rdi, rdx

; 385  :     int line_info = 0;

  00015	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR line_info$[rsp], 0

; 386  :     int col_info = 0;

  0001d	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR col_info$[rsp], 0

; 387  :     PyObject *res = 0;
; 388  :     int ok;
; 389  : 
; 390  :     static char *keywords[] = {"st", "line_info", "col_info", NULL};
; 391  : 
; 392  :     if (self == NULL || PyModule_Check(self)) {

  00025	48 85 c9	 test	 rcx, rcx
  00028	74 49		 je	 SHORT $LN3@parser_st2
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00031	48 39 51 58	 cmp	 QWORD PTR [rcx+88], rdx
  00035	74 3c		 je	 SHORT $LN3@parser_st2
  00037	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0003b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00040	85 c0		 test	 eax, eax
  00042	75 2f		 jne	 SHORT $LN3@parser_st2

; 396  :     }
; 397  :     else
; 398  :         ok = PyArg_ParseTupleAndKeywords(args, kw, "|pp:totuple", &keywords[1],
; 399  :                                          &line_info, &col_info);

  00044	48 8d 44 24 78	 lea	 rax, QWORD PTR col_info$[rsp]
  00049	4c 8d 0d 08 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_st2tuple@@9@9+8
  00050	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@NAADOGPG@?$HMpp?3totuple?$AA@
  00057	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0005c	48 8d 44 24 40	 lea	 rax, QWORD PTR line_info$[rsp]
  00061	48 8b d3	 mov	 rdx, rbx
  00064	48 8b cf	 mov	 rcx, rdi
  00067	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006c	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00071	eb 43		 jmp	 SHORT $LN2@parser_st2
$LN3@parser_st2:

; 393  :         ok = PyArg_ParseTupleAndKeywords(args, kw, "O!|pp:st2tuple", keywords,
; 394  :                                          &PyST_Type, &self, &line_info,
; 395  :                                          &col_info);

  00073	48 8d 44 24 78	 lea	 rax, QWORD PTR col_info$[rsp]
  00078	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_st2tuple@@9@9
  0007f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@COPCCAIM@O?$CB?$HMpp?3st2tuple?$AA@
  00086	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0008b	48 8d 44 24 40	 lea	 rax, QWORD PTR line_info$[rsp]
  00090	48 8b d3	 mov	 rdx, rbx
  00093	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00098	48 8d 44 24 60	 lea	 rax, QWORD PTR self$[rsp]
  0009d	48 8b cf	 mov	 rcx, rdi
  000a0	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyST_Type
  000ac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b1	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
$LN2@parser_st2:

; 400  :     if (ok != 0) {

  000b6	85 c0		 test	 eax, eax
  000b8	74 34		 je	 SHORT $LN8@parser_st2

; 401  :         /*
; 402  :          *  Convert ST into a tuple representation.  Use Guido's function,
; 403  :          *  since it's known to work already.
; 404  :          */
; 405  :         res = node2tuple(((PyST_Object*)self)->st_node,
; 406  :                          PyTuple_New, PyTuple_SetItem, line_info, col_info);

  000ba	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  000bf	8b 44 24 78	 mov	 eax, DWORD PTR col_info$[rsp]
  000c3	44 8b 4c 24 40	 mov	 r9d, DWORD PTR line_info$[rsp]
  000c8	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000cc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyTuple_SetItem
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyTuple_New
  000da	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000de	e8 00 00 00 00	 call	 node2tuple

; 409  : }

  000e3	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  000e8	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000ec	5f		 pop	 rdi
  000ed	c3		 ret	 0
$LN8@parser_st2:

; 407  :     }
; 408  :     return (res);

  000ee	33 c0		 xor	 eax, eax

; 409  : }

  000f0	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  000f5	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000f9	5f		 pop	 rdi
  000fa	c3		 ret	 0
parser_st2tuple ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@LBPHIKMO@O?$CB?$HMpp?3st2list?$AA@	; `string'
PUBLIC	??_C@_0L@JECKIGFG@?$HMpp?3tolist?$AA@		; `string'
EXTRN	PyList_New:PROC
EXTRN	PyList_SetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_st2list DD imagerel parser_st2list
	DD	imagerel parser_st2list+251
	DD	imagerel $unwind$parser_st2list
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_st2list DD 040f01H
	DD	0d340fH
	DD	0700b920fH
xdata	ENDS
;	COMDAT ??_C@_0O@LBPHIKMO@O?$CB?$HMpp?3st2list?$AA@
CONST	SEGMENT
??_C@_0O@LBPHIKMO@O?$CB?$HMpp?3st2list?$AA@ DB 'O!|pp:st2list', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JECKIGFG@?$HMpp?3tolist?$AA@
CONST	SEGMENT
??_C@_0L@JECKIGFG@?$HMpp?3tolist?$AA@ DB '|pp:tolist', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT parser_st2list
_TEXT	SEGMENT
line_info$ = 64
self$ = 96
args$ = 104
kw$ = 112
col_info$ = 120
parser_st2list PROC					; COMDAT

; 420  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000f	49 8b d8	 mov	 rbx, r8
  00012	48 8b fa	 mov	 rdi, rdx

; 421  :     int line_info = 0;

  00015	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR line_info$[rsp], 0

; 422  :     int col_info = 0;

  0001d	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR col_info$[rsp], 0

; 423  :     PyObject *res = 0;
; 424  :     int ok;
; 425  : 
; 426  :     static char *keywords[] = {"st", "line_info", "col_info", NULL};
; 427  : 
; 428  :     if (self == NULL || PyModule_Check(self))

  00025	48 85 c9	 test	 rcx, rcx
  00028	74 49		 je	 SHORT $LN3@parser_st2@2
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00031	48 39 51 58	 cmp	 QWORD PTR [rcx+88], rdx
  00035	74 3c		 je	 SHORT $LN3@parser_st2@2
  00037	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0003b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00040	85 c0		 test	 eax, eax
  00042	75 2f		 jne	 SHORT $LN3@parser_st2@2

; 432  :     else
; 433  :         ok = PyArg_ParseTupleAndKeywords(args, kw, "|pp:tolist", &keywords[1],
; 434  :                                          &line_info, &col_info);

  00044	48 8d 44 24 78	 lea	 rax, QWORD PTR col_info$[rsp]
  00049	4c 8d 0d 08 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_st2list@@9@9+8
  00050	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@JECKIGFG@?$HMpp?3tolist?$AA@
  00057	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0005c	48 8d 44 24 40	 lea	 rax, QWORD PTR line_info$[rsp]
  00061	48 8b d3	 mov	 rdx, rbx
  00064	48 8b cf	 mov	 rcx, rdi
  00067	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006c	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00071	eb 43		 jmp	 SHORT $LN2@parser_st2@2
$LN3@parser_st2@2:

; 429  :         ok = PyArg_ParseTupleAndKeywords(args, kw, "O!|pp:st2list", keywords,
; 430  :                                          &PyST_Type, &self, &line_info,
; 431  :                                          &col_info);

  00073	48 8d 44 24 78	 lea	 rax, QWORD PTR col_info$[rsp]
  00078	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_st2list@@9@9
  0007f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@LBPHIKMO@O?$CB?$HMpp?3st2list?$AA@
  00086	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0008b	48 8d 44 24 40	 lea	 rax, QWORD PTR line_info$[rsp]
  00090	48 8b d3	 mov	 rdx, rbx
  00093	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00098	48 8d 44 24 60	 lea	 rax, QWORD PTR self$[rsp]
  0009d	48 8b cf	 mov	 rcx, rdi
  000a0	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyST_Type
  000ac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b1	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
$LN2@parser_st2@2:

; 435  :     if (ok) {

  000b6	85 c0		 test	 eax, eax
  000b8	74 34		 je	 SHORT $LN8@parser_st2@2

; 436  :         /*
; 437  :          *  Convert ST into a tuple representation.  Use Guido's function,
; 438  :          *  since it's known to work already.
; 439  :          */
; 440  :         res = node2tuple(self->st_node,
; 441  :                          PyList_New, PyList_SetItem, line_info, col_info);

  000ba	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  000bf	8b 44 24 78	 mov	 eax, DWORD PTR col_info$[rsp]
  000c3	44 8b 4c 24 40	 mov	 r9d, DWORD PTR line_info$[rsp]
  000c8	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000cc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyList_SetItem
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyList_New
  000da	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000de	e8 00 00 00 00	 call	 node2tuple

; 444  : }

  000e3	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  000e8	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000ec	5f		 pop	 rdi
  000ed	c3		 ret	 0
$LN8@parser_st2@2:

; 442  :     }
; 443  :     return (res);

  000ee	33 c0		 xor	 eax, eax

; 444  : }

  000f0	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  000f5	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000f9	5f		 pop	 rdi
  000fa	c3		 ret	 0
parser_st2list ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@CDMCGFOG@O?$CB?$HMs?3compilest?$AA@	; `string'
PUBLIC	??_C@_0L@LHGKIIMA@?$HMs?3compile?$AA@		; `string'
PUBLIC	??_C@_0O@GGPNMODD@?$DMsyntax?9tree?$DO?$AA@	; `string'
EXTRN	PyArena_Free:PROC
EXTRN	PyAST_CompileEx:PROC
EXTRN	PyAST_FromNode:PROC
EXTRN	PyArena_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_compilest DD imagerel parser_compilest
	DD	imagerel parser_compilest+274
	DD	imagerel $unwind$parser_compilest
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_compilest DD 061401H
	DD	0c6414H
	DD	0b3414H
	DD	070107214H
xdata	ENDS
;	COMDAT ??_C@_0P@CDMCGFOG@O?$CB?$HMs?3compilest?$AA@
CONST	SEGMENT
??_C@_0P@CDMCGFOG@O?$CB?$HMs?3compilest?$AA@ DB 'O!|s:compilest', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LHGKIIMA@?$HMs?3compile?$AA@
CONST	SEGMENT
??_C@_0L@LHGKIIMA@?$HMs?3compile?$AA@ DB '|s:compile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GGPNMODD@?$DMsyntax?9tree?$DO?$AA@
CONST	SEGMENT
??_C@_0O@GGPNMODD@?$DMsyntax?9tree?$DO?$AA@ DB '<syntax-tree>', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT parser_compilest
_TEXT	SEGMENT
self$ = 80
args$ = 88
kw$ = 96
str$ = 104
parser_compilest PROC					; COMDAT

; 455  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 456  :     PyObject*     res = 0;
; 457  :     PyArena*      arena;
; 458  :     mod_ty        mod;
; 459  :     char*         str = "<syntax-tree>";

  00014	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@GGPNMODD@?$DMsyntax?9tree?$DO?$AA@
  0001b	33 ff		 xor	 edi, edi
  0001d	49 8b d8	 mov	 rbx, r8
  00020	48 8b f2	 mov	 rsi, rdx
  00023	48 89 44 24 68	 mov	 QWORD PTR str$[rsp], rax

; 460  :     int ok;
; 461  : 
; 462  :     static char *keywords[] = {"st", "filename", NULL};
; 463  : 
; 464  :     if (self == NULL || PyModule_Check(self))

  00028	48 85 c9	 test	 rcx, rcx
  0002b	74 3f		 je	 SHORT $LN5@parser_com@2
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00034	48 39 51 58	 cmp	 QWORD PTR [rcx+88], rdx
  00038	74 32		 je	 SHORT $LN5@parser_com@2
  0003a	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0003e	e8 00 00 00 00	 call	 PyType_IsSubtype
  00043	85 c0		 test	 eax, eax
  00045	75 25		 jne	 SHORT $LN5@parser_com@2

; 467  :     else
; 468  :         ok = PyArg_ParseTupleAndKeywords(args, kw, "|s:compile", &keywords[1],
; 469  :                                          &str);

  00047	48 8d 44 24 68	 lea	 rax, QWORD PTR str$[rsp]
  0004c	4c 8d 0d 08 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_compilest@@9@9+8
  00053	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@LHGKIIMA@?$HMs?3compile?$AA@
  0005a	48 8b d3	 mov	 rdx, rbx
  0005d	48 8b ce	 mov	 rcx, rsi
  00060	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00065	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0006a	eb 39		 jmp	 SHORT $LN4@parser_com@2
$LN5@parser_com@2:

; 465  :         ok = PyArg_ParseTupleAndKeywords(args, kw, "O!|s:compilest", keywords,
; 466  :                                          &PyST_Type, &self, &str);

  0006c	48 8d 44 24 68	 lea	 rax, QWORD PTR str$[rsp]
  00071	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_compilest@@9@9
  00078	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@CDMCGFOG@O?$CB?$HMs?3compilest?$AA@
  0007f	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00084	48 8d 44 24 50	 lea	 rax, QWORD PTR self$[rsp]
  00089	48 8b d3	 mov	 rdx, rbx
  0008c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00091	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyST_Type
  00098	48 8b ce	 mov	 rcx, rsi
  0009b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a0	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
$LN4@parser_com@2:

; 470  : 
; 471  :     if (ok) {

  000a5	85 c0		 test	 eax, eax
  000a7	74 56		 je	 SHORT $LN11@parser_com@2

; 472  :         arena = PyArena_New();

  000a9	e8 00 00 00 00	 call	 PyArena_New
  000ae	48 8b d8	 mov	 rbx, rax

; 473  :         if (arena) {

  000b1	48 85 c0	 test	 rax, rax
  000b4	74 49		 je	 SHORT $LN11@parser_com@2

; 474  :            mod = PyAST_FromNode(self->st_node, &(self->st_flags), str, arena);

  000b6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000bb	4c 8b 44 24 68	 mov	 r8, QWORD PTR str$[rsp]
  000c0	4c 8b c8	 mov	 r9, rax
  000c3	48 8d 51 6c	 lea	 rdx, QWORD PTR [rcx+108]
  000c7	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000cb	e8 00 00 00 00	 call	 PyAST_FromNode

; 475  :            if (mod) {

  000d0	48 85 c0	 test	 rax, rax
  000d3	74 22		 je	 SHORT $LN1@parser_com@2

; 476  :                res = (PyObject *)PyAST_Compile(mod, str, &(self->st_flags), arena);

  000d5	4c 8b 44 24 50	 mov	 r8, QWORD PTR self$[rsp]
  000da	48 8b 54 24 68	 mov	 rdx, QWORD PTR str$[rsp]
  000df	41 83 c9 ff	 or	 r9d, -1
  000e3	48 8b c8	 mov	 rcx, rax
  000e6	49 83 c0 6c	 add	 r8, 108			; 0000006cH
  000ea	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  000ef	e8 00 00 00 00	 call	 PyAST_CompileEx
  000f4	48 8b f8	 mov	 rdi, rax
$LN1@parser_com@2:

; 477  :            }
; 478  :            PyArena_Free(arena);

  000f7	48 8b cb	 mov	 rcx, rbx
  000fa	e8 00 00 00 00	 call	 PyArena_Free
$LN11@parser_com@2:

; 479  :         }
; 480  :     }
; 481  : 
; 482  :     return (res);
; 483  : }

  000ff	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00104	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00109	48 8b c7	 mov	 rax, rdi
  0010c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00110	5f		 pop	 rdi
  00111	c3		 ret	 0
parser_compilest ENDP
_TEXT	ENDS
PUBLIC	??_C@_09NHHKGHMC@O?$CB?3isexpr?$AA@		; `string'
PUBLIC	??_C@_07KLOJBKBA@?3isexpr?$AA@			; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$parser_isexpr DD imagerel parser_isexpr
	DD	imagerel parser_isexpr+243
	DD	imagerel $unwind$parser_isexpr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_isexpr DD 040f01H
	DD	09340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_09NHHKGHMC@O?$CB?3isexpr?$AA@
CONST	SEGMENT
??_C@_09NHHKGHMC@O?$CB?3isexpr?$AA@ DB 'O!:isexpr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KLOJBKBA@?3isexpr?$AA@
CONST	SEGMENT
??_C@_07KLOJBKBA@?3isexpr?$AA@ DB ':isexpr', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\parsermodule.c
CONST	ENDS
;	COMDAT parser_isexpr
_TEXT	SEGMENT
self$ = 64
args$ = 72
kw$ = 80
parser_isexpr PROC					; COMDAT

; 495  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	49 8b d8	 mov	 rbx, r8
  00012	48 8b fa	 mov	 rdi, rdx

; 496  :     PyObject* res = 0;
; 497  :     int ok;
; 498  : 
; 499  :     static char *keywords[] = {"st", NULL};
; 500  : 
; 501  :     if (self == NULL || PyModule_Check(self))

  00015	48 85 c9	 test	 rcx, rcx
  00018	74 35		 je	 SHORT $LN3@parser_ise
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00021	48 39 51 58	 cmp	 QWORD PTR [rcx+88], rdx
  00025	74 28		 je	 SHORT $LN3@parser_ise
  00027	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0002b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00030	85 c0		 test	 eax, eax
  00032	75 1b		 jne	 SHORT $LN3@parser_ise

; 504  :     else
; 505  :         ok = PyArg_ParseTupleAndKeywords(args, kw, ":isexpr", &keywords[1]);

  00034	4c 8d 0d 08 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_isexpr@@9@9+8
  0003b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07KLOJBKBA@?3isexpr?$AA@
  00042	48 8b d3	 mov	 rdx, rbx
  00045	48 8b cf	 mov	 rcx, rdi
  00048	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0004d	eb 2f		 jmp	 SHORT $LN2@parser_ise
$LN3@parser_ise:

; 502  :         ok = PyArg_ParseTupleAndKeywords(args, kw, "O!:isexpr", keywords,
; 503  :                                          &PyST_Type, &self);

  0004f	48 8d 44 24 40	 lea	 rax, QWORD PTR self$[rsp]
  00054	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_isexpr@@9@9
  0005b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09NHHKGHMC@O?$CB?3isexpr?$AA@
  00062	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyST_Type
  0006e	48 8b d3	 mov	 rdx, rbx
  00071	48 8b cf	 mov	 rcx, rdi
  00074	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00079	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
$LN2@parser_ise:

; 506  : 
; 507  :     if (ok) {

  0007e	85 c0		 test	 eax, eax
  00080	74 64		 je	 SHORT $LN14@parser_ise

; 508  :         /* Check to see if the ST represents an expression or not. */
; 509  :         res = (self->st_type == PyST_EXPR) ? Py_True : Py_False;

  00082	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  0008e	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00095	83 78 68 01	 cmp	 DWORD PTR [rax+104], 1
  00099	48 0f 44 d9	 cmove	 rbx, rcx

; 510  :         Py_INCREF(res);

  0009d	e8 00 00 00 00	 call	 _Py_PXCTX
  000a2	85 c0		 test	 eax, eax
  000a4	75 32		 jne	 SHORT $LN12@parser_ise
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000b4	4c 8b cb	 mov	 r9, rbx
  000b7	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000bd	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 06		 jne	 SHORT $LN8@parser_ise
  000ce	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000d2	74 04		 je	 SHORT $LN12@parser_ise
$LN8@parser_ise:
  000d4	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN12@parser_ise:

; 511  :     }
; 512  :     return (res);

  000d8	48 8b c3	 mov	 rax, rbx

; 513  : }

  000db	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000e0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e4	5f		 pop	 rdi
  000e5	c3		 ret	 0
$LN14@parser_ise:

; 511  :     }
; 512  :     return (res);

  000e6	33 c0		 xor	 eax, eax

; 513  : }

  000e8	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000ed	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f1	5f		 pop	 rdi
  000f2	c3		 ret	 0
parser_isexpr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@GJLEAHIJ@O?$CB?3issuite?$AA@		; `string'
PUBLIC	??_C@_08BBFCHAM@?3issuite?$AA@			; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$parser_issuite DD imagerel parser_issuite
	DD	imagerel parser_issuite+243
	DD	imagerel $unwind$parser_issuite
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_issuite DD 040f01H
	DD	09340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0L@GJLEAHIJ@O?$CB?3issuite?$AA@
CONST	SEGMENT
??_C@_0L@GJLEAHIJ@O?$CB?3issuite?$AA@ DB 'O!:issuite', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BBFCHAM@?3issuite?$AA@
CONST	SEGMENT
??_C@_08BBFCHAM@?3issuite?$AA@ DB ':issuite', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\parsermodule.c
CONST	ENDS
;	COMDAT parser_issuite
_TEXT	SEGMENT
self$ = 64
args$ = 72
kw$ = 80
parser_issuite PROC					; COMDAT

; 518  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	49 8b d8	 mov	 rbx, r8
  00012	48 8b fa	 mov	 rdi, rdx

; 519  :     PyObject* res = 0;
; 520  :     int ok;
; 521  : 
; 522  :     static char *keywords[] = {"st", NULL};
; 523  : 
; 524  :     if (self == NULL || PyModule_Check(self))

  00015	48 85 c9	 test	 rcx, rcx
  00018	74 35		 je	 SHORT $LN3@parser_iss
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00021	48 39 51 58	 cmp	 QWORD PTR [rcx+88], rdx
  00025	74 28		 je	 SHORT $LN3@parser_iss
  00027	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0002b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00030	85 c0		 test	 eax, eax
  00032	75 1b		 jne	 SHORT $LN3@parser_iss

; 527  :     else
; 528  :         ok = PyArg_ParseTupleAndKeywords(args, kw, ":issuite", &keywords[1]);

  00034	4c 8d 0d 08 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_issuite@@9@9+8
  0003b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08BBFCHAM@?3issuite?$AA@
  00042	48 8b d3	 mov	 rdx, rbx
  00045	48 8b cf	 mov	 rcx, rdi
  00048	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0004d	eb 2f		 jmp	 SHORT $LN2@parser_iss
$LN3@parser_iss:

; 525  :         ok = PyArg_ParseTupleAndKeywords(args, kw, "O!:issuite", keywords,
; 526  :                                          &PyST_Type, &self);

  0004f	48 8d 44 24 40	 lea	 rax, QWORD PTR self$[rsp]
  00054	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_issuite@@9@9
  0005b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@GJLEAHIJ@O?$CB?3issuite?$AA@
  00062	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyST_Type
  0006e	48 8b d3	 mov	 rdx, rbx
  00071	48 8b cf	 mov	 rcx, rdi
  00074	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00079	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
$LN2@parser_iss:

; 529  : 
; 530  :     if (ok) {

  0007e	85 c0		 test	 eax, eax
  00080	74 64		 je	 SHORT $LN14@parser_iss

; 531  :         /* Check to see if the ST represents an expression or not. */
; 532  :         res = (self->st_type == PyST_EXPR) ? Py_False : Py_True;

  00082	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  0008e	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_TrueStruct
  00095	83 78 68 01	 cmp	 DWORD PTR [rax+104], 1
  00099	48 0f 44 d9	 cmove	 rbx, rcx

; 533  :         Py_INCREF(res);

  0009d	e8 00 00 00 00	 call	 _Py_PXCTX
  000a2	85 c0		 test	 eax, eax
  000a4	75 32		 jne	 SHORT $LN12@parser_iss
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000b4	4c 8b cb	 mov	 r9, rbx
  000b7	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000bd	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 06		 jne	 SHORT $LN8@parser_iss
  000ce	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000d2	74 04		 je	 SHORT $LN12@parser_iss
$LN8@parser_iss:
  000d4	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN12@parser_iss:

; 534  :     }
; 535  :     return (res);

  000d8	48 8b c3	 mov	 rax, rbx

; 536  : }

  000db	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000e0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e4	5f		 pop	 rdi
  000e5	c3		 ret	 0
$LN14@parser_iss:

; 534  :     }
; 535  :     return (res);

  000e6	33 c0		 xor	 eax, eax

; 536  : }

  000e8	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000ed	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f1	5f		 pop	 rdi
  000f2	c3		 ret	 0
parser_issuite ENDP
_TEXT	ENDS
EXTRN	PyErr_SetString:PROC
; Function compile flags: /Ogtpy
;	COMDAT err_string
_TEXT	SEGMENT
message$ = 8
err_string PROC						; COMDAT

; 547  :     PyErr_SetString(parser_error, message);

  00000	48 8b d1	 mov	 rdx, rcx
  00003	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error

; 548  : }

  0000a	e9 00 00 00 00	 jmp	 PyErr_SetString
err_string ENDP
_TEXT	ENDS
EXTRN	PyParser_ClearError:PROC
EXTRN	PyParser_SetError:PROC
EXTRN	PyParser_ParseStringFlagsFilenameEx:PROC
EXTRN	_PyParser_Grammar:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_do_parse DD imagerel parser_do_parse
	DD	imagerel parser_do_parse+181
	DD	imagerel $unwind$parser_do_parse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_do_parse DD 040a01H
	DD	010340aH
	DD	07006d20aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT parser_do_parse
_TEXT	SEGMENT
flags$ = 48
string$ = 56
err$ = 64
args$ = 128
kw$ = 136
argspec$ = 144
type$ = 152
parser_do_parse PROC					; COMDAT

; 559  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000a	41 8b f9	 mov	 edi, r9d

; 560  :     char*     string = 0;
; 561  :     PyObject* res    = 0;
; 562  :     int flags        = 0;
; 563  :     perrdetail err;
; 564  : 
; 565  :     static char *keywords[] = {"source", NULL};
; 566  : 
; 567  :     if (PyArg_ParseTupleAndKeywords(args, kw, argspec, keywords, &string)) {

  0000d	48 8d 44 24 38	 lea	 rax, QWORD PTR string$[rsp]
  00012	33 db		 xor	 ebx, ebx
  00014	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_do_parse@@9@9
  0001b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00020	48 89 5c 24 38	 mov	 QWORD PTR string$[rsp], rbx
  00025	89 5c 24 30	 mov	 DWORD PTR flags$[rsp], ebx
  00029	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0002e	85 c0		 test	 eax, eax
  00030	74 72		 je	 SHORT $LN7@parser_do_

; 568  :         node* n = PyParser_ParseStringFlagsFilenameEx(string, NULL,
; 569  :                                                        &_PyParser_Grammar,
; 570  :                                                       (type == PyST_EXPR)
; 571  :                                                       ? eval_input : file_input,
; 572  :                                                       &err, &flags);

  00032	48 8b 4c 24 38	 mov	 rcx, QWORD PTR string$[rsp]
  00037	44 8b cb	 mov	 r9d, ebx
  0003a	48 8d 44 24 30	 lea	 rax, QWORD PTR flags$[rsp]
  0003f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00044	48 8d 44 24 40	 lea	 rax, QWORD PTR err$[rsp]
  00049	83 ff 01	 cmp	 edi, 1
  0004c	41 0f 94 c1	 sete	 r9b
  00050	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_PyParser_Grammar
  00057	33 d2		 xor	 edx, edx
  00059	41 81 c1 01 01
	00 00		 add	 r9d, 257		; 00000101H
  00060	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00065	e8 00 00 00 00	 call	 PyParser_ParseStringFlagsFilenameEx

; 573  : 
; 574  :         if (n) {

  0006a	48 85 c0	 test	 rax, rax
  0006d	74 21		 je	 SHORT $LN3@parser_do_

; 575  :             res = parser_newstobject(n, type);

  0006f	8b d7		 mov	 edx, edi
  00071	48 8b c8	 mov	 rcx, rax
  00074	e8 00 00 00 00	 call	 parser_newstobject
  00079	48 8b d8	 mov	 rbx, rax

; 576  :             if (res)

  0007c	48 85 c0	 test	 rax, rax
  0007f	74 19		 je	 SHORT $LN1@parser_do_

; 577  :                 ((PyST_Object *)res)->st_flags.cf_flags = flags & PyCF_MASK;

  00081	8b 4c 24 30	 mov	 ecx, DWORD PTR flags$[rsp]
  00085	81 e1 00 e0 07
	00		 and	 ecx, 516096		; 0007e000H
  0008b	89 48 6c	 mov	 DWORD PTR [rax+108], ecx

; 578  :         }
; 579  :         else {

  0008e	eb 0a		 jmp	 SHORT $LN1@parser_do_
$LN3@parser_do_:

; 580  :             PyParser_SetError(&err);

  00090	48 8d 4c 24 40	 lea	 rcx, QWORD PTR err$[rsp]
  00095	e8 00 00 00 00	 call	 PyParser_SetError
$LN1@parser_do_:

; 581  :         }
; 582  :         PyParser_ClearError(&err);

  0009a	48 8d 4c 24 40	 lea	 rcx, QWORD PTR err$[rsp]
  0009f	e8 00 00 00 00	 call	 PyParser_ClearError
$LN7@parser_do_:

; 583  :     }
; 584  :     return (res);

  000a4	48 8b c3	 mov	 rax, rbx

; 585  : }

  000a7	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  000af	48 83 c4 70	 add	 rsp, 112		; 00000070H
  000b3	5f		 pop	 rdi
  000b4	c3		 ret	 0
parser_do_parse ENDP
_TEXT	ENDS
PUBLIC	??_C@_06KMFDMNJG@s?3expr?$AA@			; `string'
;	COMDAT ??_C@_06KMFDMNJG@s?3expr?$AA@
CONST	SEGMENT
??_C@_06KMFDMNJG@s?3expr?$AA@ DB 's:expr', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT parser_expr
_TEXT	SEGMENT
self$ = 8
args$ = 16
kw$ = 24
parser_expr PROC					; COMDAT

; 598  : {

  00000	49 8b c0	 mov	 rax, r8

; 599  :     NOTE(ARGUNUSED(self))
; 600  :     return (parser_do_parse(args, kw, "s:expr", PyST_EXPR));

  00003	48 8b ca	 mov	 rcx, rdx
  00006	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06KMFDMNJG@s?3expr?$AA@
  0000d	48 8b d0	 mov	 rdx, rax
  00010	41 b9 01 00 00
	00		 mov	 r9d, 1

; 601  : }

  00016	e9 00 00 00 00	 jmp	 parser_do_parse
parser_expr ENDP
_TEXT	ENDS
PUBLIC	??_C@_07FMJLLMO@s?3suite?$AA@			; `string'
;	COMDAT ??_C@_07FMJLLMO@s?3suite?$AA@
CONST	SEGMENT
??_C@_07FMJLLMO@s?3suite?$AA@ DB 's:suite', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT parser_suite
_TEXT	SEGMENT
self$ = 8
args$ = 16
kw$ = 24
parser_suite PROC					; COMDAT

; 606  : {

  00000	49 8b c0	 mov	 rax, r8

; 607  :     NOTE(ARGUNUSED(self))
; 608  :     return (parser_do_parse(args, kw, "s:suite", PyST_SUITE));

  00003	48 8b ca	 mov	 rcx, rdx
  00006	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07FMJLLMO@s?3suite?$AA@
  0000d	48 8b d0	 mov	 rdx, rax
  00010	41 b9 02 00 00
	00		 mov	 r9d, 2

; 609  : }

  00016	e9 00 00 00 00	 jmp	 parser_do_parse
parser_suite ENDP
_TEXT	ENDS
PUBLIC	??_C@_02HPGKMGCF@Os?$AA@			; `string'
PUBLIC	??_C@_0BI@BAFIMPPI@Illegal?5node?5construct?4?$AA@ ; `string'
PUBLIC	??_C@_0CC@CHNLNIPM@unsupported?5number?5of?5child?5node@ ; `string'
PUBLIC	??_C@_0DI@NEKLAEMC@second?5item?5in?5terminal?5node?5mus@ ; `string'
PUBLIC	??_C@_0DJ@NONGLHAJ@third?5item?5in?5terminal?5node?5must@ ; `string'
PUBLIC	??_C@_0CI@JBBHOFOG@terminal?5nodes?5must?5have?52?5or?53?5@ ; `string'
EXTRN	PyErr_SetObject:PROC
EXTRN	Py_BuildValue:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyErr_Format:PROC
EXTRN	PyNode_AddChild:PROC
EXTRN	PyObject_Malloc:PROC
EXTRN	PyUnicode_AsUTF8AndSize:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	_PyLong_AsInt:PROC
EXTRN	PySequence_Check:PROC
EXTRN	PySequence_GetItem:PROC
EXTRN	PyObject_Size:PROC
EXTRN	memcpy:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$build_node_children DD imagerel build_node_children
	DD	imagerel build_node_children+1182
	DD	imagerel $unwind$build_node_children
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$build_node_children DD 051701H
	DD	07013a217H
	DD	050116012H
	DD	03010H
xdata	ENDS
;	COMDAT ??_C@_02HPGKMGCF@Os?$AA@
CONST	SEGMENT
??_C@_02HPGKMGCF@Os?$AA@ DB 'Os', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BAFIMPPI@Illegal?5node?5construct?4?$AA@
CONST	SEGMENT
??_C@_0BI@BAFIMPPI@Illegal?5node?5construct?4?$AA@ DB 'Illegal node const'
	DB	'ruct.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CHNLNIPM@unsupported?5number?5of?5child?5node@
CONST	SEGMENT
??_C@_0CC@CHNLNIPM@unsupported?5number?5of?5child?5node@ DB 'unsupported '
	DB	'number of child nodes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@NEKLAEMC@second?5item?5in?5terminal?5node?5mus@
CONST	SEGMENT
??_C@_0DI@NEKLAEMC@second?5item?5in?5terminal?5node?5mus@ DB 'second item'
	DB	' in terminal node must be a string, found %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NONGLHAJ@third?5item?5in?5terminal?5node?5must@
CONST	SEGMENT
??_C@_0DJ@NONGLHAJ@third?5item?5in?5terminal?5node?5must@ DB 'third item '
	DB	'in terminal node must be an integer, found %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JBBHOFOG@terminal?5nodes?5must?5have?52?5or?53?5@
CONST	SEGMENT
??_C@_0CI@JBBHOFOG@terminal?5nodes?5must?5have?52?5or?53?5@ DB 'terminal '
	DB	'nodes must have 2 or 3 entries', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\parsermodule.c
CONST	ENDS
;	COMDAT build_node_children
_TEXT	SEGMENT
len$22240 = 48
tv517 = 56
i$1$ = 64
len$1$ = 72
tuple$ = 128
root$ = 136
line_num$ = 144
type$1$ = 152
build_node_children PROC				; COMDAT

; 719  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	53		 push	 rbx
  00010	55		 push	 rbp
  00011	56		 push	 rsi
  00012	57		 push	 rdi
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00017	48 8b d9	 mov	 rbx, rcx

; 720  :     Py_ssize_t len = PyObject_Size(tuple);

  0001a	e8 00 00 00 00	 call	 PyObject_Size

; 721  :     Py_ssize_t i;
; 722  :     int  err;
; 723  : 
; 724  :     for (i = 1; i < len; ++i) {

  0001f	48 83 f8 01	 cmp	 rax, 1
  00023	48 89 44 24 48	 mov	 QWORD PTR len$1$[rsp], rax
  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	48 89 44 24 40	 mov	 QWORD PTR i$1$[rsp], rax
  00032	0f 8e 55 04 00
	00		 jle	 $LN63@build_node

; 720  :     Py_ssize_t len = PyObject_Size(tuple);

  00038	48 c7 44 24 38
	28 00 00 00	 mov	 QWORD PTR tv517[rsp], 40 ; 00000028H
$LL65@build_node:

; 725  :         /* elem must always be a sequence, however simple */
; 726  :         PyObject* elem = PySequence_GetItem(tuple, i);

  00041	48 8b d0	 mov	 rdx, rax
  00044	48 8b cb	 mov	 rcx, rbx
  00047	e8 00 00 00 00	 call	 PySequence_GetItem

; 727  :         int ok = elem != NULL;

  0004c	33 c9		 xor	 ecx, ecx

; 728  :         int type = 0;

  0004e	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR type$1$[rsp], 0
  00059	48 85 c0	 test	 rax, rax
  0005c	48 8b f8	 mov	 rdi, rax
  0005f	0f 95 c1	 setne	 cl

; 729  :         char *strn = 0;

  00062	33 ed		 xor	 ebp, ebp

; 730  : 
; 731  :         if (ok)

  00064	85 c9		 test	 ecx, ecx
  00066	0f 84 08 03 00
	00		 je	 $LN114@build_node

; 732  :             ok = PySequence_Check(elem);

  0006c	48 8b c8	 mov	 rcx, rax
  0006f	e8 00 00 00 00	 call	 PySequence_Check

; 733  :         if (ok) {

  00074	85 c0		 test	 eax, eax
  00076	0f 84 f8 02 00
	00		 je	 $LN114@build_node

; 734  :             PyObject *temp = PySequence_GetItem(elem, 0);

  0007c	33 d2		 xor	 edx, edx
  0007e	48 8b cf	 mov	 rcx, rdi
  00081	e8 00 00 00 00	 call	 PySequence_GetItem
  00086	48 8b d8	 mov	 rbx, rax

; 735  :             if (temp == NULL)

  00089	48 85 c0	 test	 rax, rax
  0008c	0f 84 e2 02 00
	00		 je	 $LN114@build_node

; 736  :                 ok = 0;
; 737  :             else {
; 738  :                 ok = PyLong_Check(temp);

  00092	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00096	0f b6 b1 03 01
	00 00		 movzx	 esi, BYTE PTR [rcx+259]
  0009d	83 e6 01	 and	 esi, 1

; 739  :                 if (ok) {

  000a0	74 22		 je	 SHORT $LN57@build_node

; 740  :                     type = _PyLong_AsInt(temp);

  000a2	48 8b c8	 mov	 rcx, rax
  000a5	e8 00 00 00 00	 call	 _PyLong_AsInt
  000aa	89 84 24 98 00
	00 00		 mov	 DWORD PTR type$1$[rsp], eax

; 741  :                     if (type == -1 && PyErr_Occurred()) {

  000b1	83 f8 ff	 cmp	 eax, -1
  000b4	75 0e		 jne	 SHORT $LN57@build_node
  000b6	e8 00 00 00 00	 call	 PyErr_Occurred
  000bb	48 85 c0	 test	 rax, rax
  000be	0f 85 40 02 00
	00		 jne	 $LN113@build_node
$LN57@build_node:

; 742  :                         Py_DECREF(temp);
; 743  :                         Py_DECREF(elem);
; 744  :                         return 0;
; 745  :                     }
; 746  :                 }
; 747  :                 Py_DECREF(temp);

  000c4	48 8b cb	 mov	 rcx, rbx
  000c7	e8 00 00 00 00	 call	 _Py_DecRef

; 748  :             }
; 749  :         }
; 750  :         if (!ok) {

  000cc	85 f6		 test	 esi, esi
  000ce	0f 84 a0 02 00
	00		 je	 $LN114@build_node

; 757  :         }
; 758  :         if (ISTERMINAL(type)) {

  000d4	8b 9c 24 98 00
	00 00		 mov	 ebx, DWORD PTR type$1$[rsp]
  000db	81 fb 00 01 00
	00		 cmp	 ebx, 256		; 00000100H
  000e1	0f 8d fa 00 00
	00		 jge	 $LN31@build_node

; 759  :             Py_ssize_t len = PyObject_Size(elem);

  000e7	48 8b cf	 mov	 rcx, rdi
  000ea	e8 00 00 00 00	 call	 PyObject_Size
  000ef	48 89 44 24 30	 mov	 QWORD PTR len$22240[rsp], rax

; 760  :             PyObject *temp;
; 761  :             const char *temp_str;
; 762  : 
; 763  :             if ((len != 2) && (len != 3)) {

  000f4	48 83 f8 02	 cmp	 rax, 2
  000f8	74 0a		 je	 SHORT $LN46@build_node
  000fa	48 83 f8 03	 cmp	 rax, 3
  000fe	0f 85 8d 01 00
	00		 jne	 $LN115@build_node
$LN46@build_node:

; 766  :             }
; 767  :             temp = PySequence_GetItem(elem, 1);

  00104	ba 01 00 00 00	 mov	 edx, 1
  00109	48 8b cf	 mov	 rcx, rdi
  0010c	e8 00 00 00 00	 call	 PySequence_GetItem
  00111	48 8b d8	 mov	 rbx, rax

; 768  :             if (temp == NULL)

  00114	48 85 c0	 test	 rax, rax
  00117	0f 84 f7 01 00
	00		 je	 $LN116@build_node

; 769  :                 return 0;
; 770  :             if (!PyUnicode_Check(temp)) {

  0011d	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00121	f7 81 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rcx+256], 268435456 ; 10000000H
  0012b	0f 84 bc 01 00
	00		 je	 $LN117@build_node

; 778  :             }
; 779  :             if (len == 3) {

  00131	48 83 7c 24 30
	03		 cmp	 QWORD PTR len$22240[rsp], 3
  00137	75 58		 jne	 SHORT $LN42@build_node

; 780  :                 PyObject *o = PySequence_GetItem(elem, 2);

  00139	ba 02 00 00 00	 mov	 edx, 2
  0013e	48 8b cf	 mov	 rcx, rdi
  00141	e8 00 00 00 00	 call	 PySequence_GetItem
  00146	48 8b f0	 mov	 rsi, rax

; 781  :                 if (o != NULL) {

  00149	48 85 c0	 test	 rax, rax
  0014c	74 43		 je	 SHORT $LN42@build_node

; 782  :                     if (PyLong_Check(o)) {

  0014e	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00152	f7 81 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rcx+256], 16777216 ; 01000000H
  0015c	0f 84 46 01 00
	00		 je	 $LN41@build_node

; 783  :                         int num = _PyLong_AsInt(o);

  00162	48 8b c8	 mov	 rcx, rax
  00165	e8 00 00 00 00	 call	 _PyLong_AsInt
  0016a	8b e8		 mov	 ebp, eax

; 784  :                         if (num == -1 && PyErr_Occurred()) {

  0016c	83 f8 ff	 cmp	 eax, -1
  0016f	75 0e		 jne	 SHORT $LN40@build_node
  00171	e8 00 00 00 00	 call	 PyErr_Occurred
  00176	48 85 c0	 test	 rax, rax
  00179	0f 85 44 01 00
	00		 jne	 $LN118@build_node
$LN40@build_node:

; 785  :                             Py_DECREF(o);
; 786  :                             Py_DECREF(temp);
; 787  :                             Py_DECREF(elem);
; 788  :                             return 0;
; 789  :                         }
; 790  :                         *line_num = num;

  0017f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR line_num$[rsp]

; 801  :                     }
; 802  :                     Py_DECREF(o);

  00187	48 8b ce	 mov	 rcx, rsi
  0018a	89 28		 mov	 DWORD PTR [rax], ebp
  0018c	e8 00 00 00 00	 call	 _Py_DecRef
$LN42@build_node:

; 803  :                 }
; 804  :             }
; 805  :             temp_str = _PyUnicode_AsStringAndSize(temp, &len);

  00191	48 8d 54 24 30	 lea	 rdx, QWORD PTR len$22240[rsp]
  00196	48 8b cb	 mov	 rcx, rbx
  00199	e8 00 00 00 00	 call	 PyUnicode_AsUTF8AndSize
  0019e	48 8b f0	 mov	 rsi, rax

; 806  :             if (temp_str == NULL) {

  001a1	48 85 c0	 test	 rax, rax
  001a4	0f 84 23 01 00
	00		 je	 $LN119@build_node

; 809  :                 return 0;
; 810  :             }
; 811  :             strn = (char *)PyObject_MALLOC(len + 1);

  001aa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR len$22240[rsp]
  001af	48 ff c1	 inc	 rcx
  001b2	e8 00 00 00 00	 call	 PyObject_Malloc
  001b7	48 8b e8	 mov	 rbp, rax

; 812  :             if (strn != NULL)

  001ba	48 85 c0	 test	 rax, rax
  001bd	74 13		 je	 SHORT $LN33@build_node

; 813  :                 (void) memcpy(strn, temp_str, len + 1);

  001bf	4c 8b 44 24 30	 mov	 r8, QWORD PTR len$22240[rsp]
  001c4	48 8b d6	 mov	 rdx, rsi
  001c7	48 8b c8	 mov	 rcx, rax
  001ca	49 ff c0	 inc	 r8
  001cd	e8 00 00 00 00	 call	 memcpy
$LN33@build_node:

; 814  :             Py_DECREF(temp);

  001d2	48 8b cb	 mov	 rcx, rbx
  001d5	e8 00 00 00 00	 call	 _Py_DecRef
  001da	8b 9c 24 98 00
	00 00		 mov	 ebx, DWORD PTR type$1$[rsp]
$LN31@build_node:

; 815  :         }
; 816  :         else if (!ISNONTERMINAL(type)) {
; 817  :             /*
; 818  :              *  It has to be one or the other; this is an error.
; 819  :              *  Raise an exception.
; 820  :              */
; 821  :             PyObject *err = Py_BuildValue("os", elem, "unknown node type.");
; 822  :             PyErr_SetObject(parser_error, err);
; 823  :             Py_XDECREF(err);
; 824  :             Py_XDECREF(elem);
; 825  :             return (0);
; 826  :         }
; 827  :         err = PyNode_AddChild(root, type, strn, *line_num, 0);

  001e1	48 8b b4 24 90
	00 00 00	 mov	 rsi, QWORD PTR line_num$[rsp]
  001e9	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR root$[rsp]
  001f1	4c 8b c5	 mov	 r8, rbp
  001f4	44 8b 0e	 mov	 r9d, DWORD PTR [rsi]
  001f7	8b d3		 mov	 edx, ebx
  001f9	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00201	e8 00 00 00 00	 call	 PyNode_AddChild

; 828  :         if (err == E_NOMEM) {

  00206	83 f8 0f	 cmp	 eax, 15
  00209	0f 84 43 01 00
	00		 je	 $LN121@build_node

; 831  :             return (node *) PyErr_NoMemory();
; 832  :         }
; 833  :         if (err == E_OVERFLOW) {

  0020f	83 f8 13	 cmp	 eax, 19
  00212	0f 84 07 01 00
	00		 je	 $LN122@build_node

; 838  :             return NULL;
; 839  :         }
; 840  : 
; 841  :         if (ISNONTERMINAL(type)) {
; 842  :             node* new_child = CHILD(root, i - 1);

  00218	48 8b 6c 24 38	 mov	 rbp, QWORD PTR tv517[rsp]
  0021d	81 fb 00 01 00
	00		 cmp	 ebx, 256		; 00000100H
  00223	7c 2a		 jl	 SHORT $LN12@build_node
  00225	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR root$[rsp]

; 843  : 
; 844  :             if (new_child != build_node_children(elem, new_child, line_num)) {

  0022d	4c 8b c6	 mov	 r8, rsi
  00230	48 8b cf	 mov	 rcx, rdi
  00233	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00237	48 8d 5c 28 d8	 lea	 rbx, QWORD PTR [rax+rbp-40]
  0023c	48 8b d3	 mov	 rdx, rbx
  0023f	e8 00 00 00 00	 call	 build_node_children
  00244	48 3b d8	 cmp	 rbx, rax
  00247	0f 85 88 00 00
	00		 jne	 $LN123@build_node

; 845  :                 Py_XDECREF(elem);
; 846  :                 return (0);
; 847  :             }

  0024d	eb 07		 jmp	 SHORT $LN4@build_node
$LN12@build_node:

; 848  :         }
; 849  :         else if (type == NEWLINE) {     /* It's true:  we increment the     */

  0024f	83 fb 04	 cmp	 ebx, 4
  00252	75 02		 jne	 SHORT $LN4@build_node

; 850  :             ++(*line_num);              /* line number *after* the newline! */

  00254	ff 06		 inc	 DWORD PTR [rsi]
$LN4@build_node:

; 851  :         }
; 852  :         Py_XDECREF(elem);

  00256	48 85 ff	 test	 rdi, rdi
  00259	74 08		 je	 SHORT $LN3@build_node
  0025b	48 8b cf	 mov	 rcx, rdi
  0025e	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@build_node:

; 721  :     Py_ssize_t i;
; 722  :     int  err;
; 723  : 
; 724  :     for (i = 1; i < len; ++i) {

  00263	48 8b 44 24 40	 mov	 rax, QWORD PTR i$1$[rsp]
  00268	48 83 c5 28	 add	 rbp, 40			; 00000028H
  0026c	48 ff c0	 inc	 rax
  0026f	48 89 6c 24 38	 mov	 QWORD PTR tv517[rsp], rbp
  00274	48 89 44 24 40	 mov	 QWORD PTR i$1$[rsp], rax
  00279	48 3b 44 24 48	 cmp	 rax, QWORD PTR len$1$[rsp]
  0027e	0f 8d 09 02 00
	00		 jge	 $LN63@build_node
  00284	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR tuple$[rsp]
  0028c	e9 b0 fd ff ff	 jmp	 $LL65@build_node
$LN115@build_node:

; 764  :                 err_string("terminal nodes must have 2 or 3 entries");

  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@JBBHOFOG@terminal?5nodes?5must?5have?52?5or?53?5@
  00298	e8 00 00 00 00	 call	 err_string

; 765  :                 return 0;

  0029d	33 c0		 xor	 eax, eax

; 855  : }

  0029f	48 83 c4 58	 add	 rsp, 88			; 00000058H
  002a3	5f		 pop	 rdi
  002a4	5e		 pop	 rsi
  002a5	5d		 pop	 rbp
  002a6	5b		 pop	 rbx
  002a7	c3		 ret	 0
$LN41@build_node:

; 791  :                     }
; 792  :                     else {
; 793  :                         PyErr_Format(parser_error,
; 794  :                                      "third item in terminal node must be an"
; 795  :                                      " integer, found %s",
; 796  :                                      Py_TYPE(temp)->tp_name);

  002a8	4c 8b 43 58	 mov	 r8, QWORD PTR [rbx+88]
  002ac	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  002b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@NONGLHAJ@third?5item?5in?5terminal?5node?5must@
  002ba	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  002be	e8 00 00 00 00	 call	 PyErr_Format
$LN118@build_node:

; 797  :                         Py_DECREF(o);

  002c3	48 8b ce	 mov	 rcx, rsi
  002c6	e8 00 00 00 00	 call	 _Py_DecRef

; 798  :                         Py_DECREF(temp);
; 799  :                         Py_DECREF(elem);
; 800  :                         return 0;

  002cb	eb 37		 jmp	 SHORT $LN113@build_node
$LN119@build_node:

; 807  :                 Py_DECREF(temp);

  002cd	48 8b cb	 mov	 rcx, rbx
  002d0	e8 00 00 00 00	 call	 _Py_DecRef
$LN123@build_node:

; 808  :                 Py_XDECREF(elem);

  002d5	48 85 ff	 test	 rdi, rdi
  002d8	74 3a		 je	 SHORT $LN116@build_node

; 776  :                 Py_DECREF(elem);

  002da	48 8b cf	 mov	 rcx, rdi
  002dd	e8 00 00 00 00	 call	 _Py_DecRef

; 777  :                 return 0;

  002e2	33 c0		 xor	 eax, eax

; 855  : }

  002e4	48 83 c4 58	 add	 rsp, 88			; 00000058H
  002e8	5f		 pop	 rdi
  002e9	5e		 pop	 rsi
  002ea	5d		 pop	 rbp
  002eb	5b		 pop	 rbx
  002ec	c3		 ret	 0
$LN117@build_node:

; 771  :                 PyErr_Format(parser_error,
; 772  :                              "second item in terminal node must be a string,"
; 773  :                              " found %s",
; 774  :                              Py_TYPE(temp)->tp_name);

  002ed	4c 8b 41 70	 mov	 r8, QWORD PTR [rcx+112]
  002f1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  002f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@NEKLAEMC@second?5item?5in?5terminal?5node?5mus@
  002ff	e8 00 00 00 00	 call	 PyErr_Format
$LN113@build_node:

; 775  :                 Py_DECREF(temp);

  00304	48 8b cb	 mov	 rcx, rbx
  00307	e8 00 00 00 00	 call	 _Py_DecRef

; 776  :                 Py_DECREF(elem);

  0030c	48 8b cf	 mov	 rcx, rdi
  0030f	e8 00 00 00 00	 call	 _Py_DecRef
$LN116@build_node:

; 777  :                 return 0;

  00314	33 c0		 xor	 eax, eax

; 855  : }

  00316	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0031a	5f		 pop	 rdi
  0031b	5e		 pop	 rsi
  0031c	5d		 pop	 rbp
  0031d	5b		 pop	 rbx
  0031e	c3		 ret	 0
$LN122@build_node:

; 834  :             Py_XDECREF(elem);

  0031f	48 85 ff	 test	 rdi, rdi
  00322	74 08		 je	 SHORT $LN15@build_node
  00324	48 8b cf	 mov	 rcx, rdi
  00327	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@build_node:

; 835  :             PyObject_FREE(strn);

  0032c	48 8b cd	 mov	 rcx, rbp
  0032f	e8 00 00 00 00	 call	 PyObject_Free

; 836  :             PyErr_SetString(PyExc_ValueError,
; 837  :                             "unsupported number of child nodes");

  00334	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0033b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@CHNLNIPM@unsupported?5number?5of?5child?5node@
  00342	e8 00 00 00 00	 call	 PyErr_SetString
  00347	33 c0		 xor	 eax, eax

; 855  : }

  00349	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0034d	5f		 pop	 rdi
  0034e	5e		 pop	 rsi
  0034f	5d		 pop	 rbp
  00350	5b		 pop	 rbx
  00351	c3		 ret	 0
$LN121@build_node:

; 829  :             Py_XDECREF(elem);

  00352	48 85 ff	 test	 rdi, rdi
  00355	74 08		 je	 SHORT $LN20@build_node
  00357	48 8b cf	 mov	 rcx, rdi
  0035a	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@build_node:

; 830  :             PyObject_FREE(strn);

  0035f	48 8b cd	 mov	 rcx, rbp
  00362	e8 00 00 00 00	 call	 PyObject_Free

; 855  : }

  00367	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0036b	5f		 pop	 rdi
  0036c	5e		 pop	 rsi
  0036d	5d		 pop	 rbp
  0036e	5b		 pop	 rbx
  0036f	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN114@build_node:

; 751  :             PyObject *err = Py_BuildValue("Os", elem,
; 752  :                                           "Illegal node construct.");

  00374	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BI@BAFIMPPI@Illegal?5node?5construct?4?$AA@
  0037b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02HPGKMGCF@Os?$AA@
  00382	48 8b d7	 mov	 rdx, rdi
  00385	e8 00 00 00 00	 call	 Py_BuildValue

; 753  :             PyErr_SetObject(parser_error, err);

  0038a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  00391	48 8b d0	 mov	 rdx, rax
  00394	48 8b d8	 mov	 rbx, rax
  00397	e8 00 00 00 00	 call	 PyErr_SetObject

; 754  :             Py_XDECREF(err);

  0039c	48 85 db	 test	 rbx, rbx
  0039f	74 65		 je	 SHORT $LN54@build_node
  003a1	e8 00 00 00 00	 call	 _Py_PXCTX
  003a6	85 c0		 test	 eax, eax
  003a8	75 5c		 jne	 SHORT $LN54@build_node
  003aa	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  003ae	a8 20		 test	 al, 32			; 00000020H
  003b0	75 4c		 jne	 SHORT $LN72@build_node
  003b2	84 c0		 test	 al, al
  003b4	78 48		 js	 SHORT $LN72@build_node
  003b6	a8 02		 test	 al, 2
  003b8	75 4c		 jne	 SHORT $LN54@build_node
  003ba	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  003be	75 46		 jne	 SHORT $LN54@build_node
  003c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  003ce	4c 8b cb	 mov	 r9, rbx
  003d1	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  003d7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003df	e8 00 00 00 00	 call	 _PyParallel_Guard
  003e4	48 8b cb	 mov	 rcx, rbx
  003e7	85 c0		 test	 eax, eax
  003e9	74 07		 je	 SHORT $LN77@build_node
  003eb	e8 00 00 00 00	 call	 _Px_Dealloc
  003f0	eb 14		 jmp	 SHORT $LN54@build_node
$LN77@build_node:
  003f2	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  003f6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003fc	eb 08		 jmp	 SHORT $LN54@build_node
$LN72@build_node:
  003fe	48 8b cb	 mov	 rcx, rbx
  00401	e8 00 00 00 00	 call	 Px_DecRef
$LN54@build_node:

; 755  :             Py_XDECREF(elem);

  00406	48 85 ff	 test	 rdi, rdi
  00409	74 77		 je	 SHORT $LN50@build_node
  0040b	e8 00 00 00 00	 call	 _Py_PXCTX
  00410	85 c0		 test	 eax, eax
  00412	75 6e		 jne	 SHORT $LN50@build_node
  00414	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00418	a8 20		 test	 al, 32			; 00000020H
  0041a	75 5e		 jne	 SHORT $LN83@build_node
  0041c	84 c0		 test	 al, al
  0041e	78 5a		 js	 SHORT $LN83@build_node
  00420	a8 02		 test	 al, 2
  00422	75 5e		 jne	 SHORT $LN50@build_node
  00424	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00428	75 58		 jne	 SHORT $LN50@build_node
  0042a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00431	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00438	4c 8b cf	 mov	 r9, rdi
  0043b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00441	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00449	e8 00 00 00 00	 call	 _PyParallel_Guard
  0044e	48 8b cf	 mov	 rcx, rdi
  00451	85 c0		 test	 eax, eax
  00453	74 10		 je	 SHORT $LN88@build_node
  00455	e8 00 00 00 00	 call	 _Px_Dealloc

; 756  :             return (0);

  0045a	33 c0		 xor	 eax, eax

; 855  : }

  0045c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00460	5f		 pop	 rdi
  00461	5e		 pop	 rsi
  00462	5d		 pop	 rbp
  00463	5b		 pop	 rbx
  00464	c3		 ret	 0

; 755  :             Py_XDECREF(elem);

$LN88@build_node:
  00465	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00469	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 756  :             return (0);

  0046f	33 c0		 xor	 eax, eax

; 855  : }

  00471	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00475	5f		 pop	 rdi
  00476	5e		 pop	 rsi
  00477	5d		 pop	 rbp
  00478	5b		 pop	 rbx
  00479	c3		 ret	 0

; 755  :             Py_XDECREF(elem);

$LN83@build_node:
  0047a	48 8b cf	 mov	 rcx, rdi
  0047d	e8 00 00 00 00	 call	 Px_DecRef
$LN50@build_node:

; 756  :             return (0);

  00482	33 c0		 xor	 eax, eax

; 855  : }

  00484	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00488	5f		 pop	 rdi
  00489	5e		 pop	 rsi
  0048a	5d		 pop	 rbp
  0048b	5b		 pop	 rbx
  0048c	c3		 ret	 0
$LN63@build_node:

; 853  :     }
; 854  :     return root;

  0048d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR root$[rsp]

; 855  : }

  00495	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00499	5f		 pop	 rdi
  0049a	5e		 pop	 rsi
  0049b	5d		 pop	 rbp
  0049c	5b		 pop	 rbx
  0049d	c3		 ret	 0
build_node_children ENDP
_TEXT	ENDS
PUBLIC	??_C@_02EHCHIAMF@os?$AA@			; `string'
PUBLIC	??_C@_0DI@CJPEHLPC@Illegal?5syntax?9tree?$DL?5cannot?5star@ ; `string'
EXTRN	PyNode_New:PROC
EXTRN	PySequence_GetSlice:PROC
EXTRN	PyLong_AsLong:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$build_node_tree DD imagerel build_node_tree
	DD	imagerel build_node_tree+612
	DD	imagerel $unwind$build_node_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$build_node_tree DD 060c01H
	DD	0a340cH
	DD	07008520cH
	DD	050066007H
xdata	ENDS
;	COMDAT ??_C@_02EHCHIAMF@os?$AA@
CONST	SEGMENT
??_C@_02EHCHIAMF@os?$AA@ DB 'os', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@CJPEHLPC@Illegal?5syntax?9tree?$DL?5cannot?5star@
CONST	SEGMENT
??_C@_0DI@CJPEHLPC@Illegal?5syntax?9tree?$DL?5cannot?5star@ DB 'Illegal s'
	DB	'yntax-tree; cannot start with terminal symbol.', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\parsermodule.c
CONST	ENDS
;	COMDAT build_node_tree
_TEXT	SEGMENT
tuple$ = 80
line_num$22351 = 88
len$22363 = 96
build_node_tree PROC					; COMDAT

; 860  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 861  :     node* res = 0;
; 862  :     PyObject *temp = PySequence_GetItem(tuple, 0);

  0000c	33 d2		 xor	 edx, edx
  0000e	48 8b f1	 mov	 rsi, rcx
  00011	33 ff		 xor	 edi, edi
  00013	e8 00 00 00 00	 call	 PySequence_GetItem
  00018	48 8b d8	 mov	 rbx, rax

; 863  :     long num = -1;
; 864  : 
; 865  :     if (temp != NULL)

  0001b	48 85 c0	 test	 rax, rax
  0001e	0f 84 7e 01 00
	00		 je	 $LN50@build_node@2

; 866  :         num = PyLong_AsLong(temp);

  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 PyLong_AsLong
  0002c	8b e8		 mov	 ebp, eax

; 867  :     Py_XDECREF(temp);

  0002e	e8 00 00 00 00	 call	 _Py_PXCTX
  00033	85 c0		 test	 eax, eax
  00035	75 5e		 jne	 SHORT $LN22@build_node@2
  00037	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0003b	f6 c1 20	 test	 cl, 32			; 00000020H
  0003e	75 4d		 jne	 SHORT $LN31@build_node@2
  00040	84 c9		 test	 cl, cl
  00042	78 49		 js	 SHORT $LN31@build_node@2
  00044	f6 c1 02	 test	 cl, 2
  00047	75 4c		 jne	 SHORT $LN22@build_node@2
  00049	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0004d	75 46		 jne	 SHORT $LN22@build_node@2
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0005d	4c 8b cb	 mov	 r9, rbx
  00060	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00066	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0006e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00073	48 8b cb	 mov	 rcx, rbx
  00076	85 c0		 test	 eax, eax
  00078	74 07		 je	 SHORT $LN36@build_node@2
  0007a	e8 00 00 00 00	 call	 _Px_Dealloc
  0007f	eb 14		 jmp	 SHORT $LN22@build_node@2
$LN36@build_node@2:
  00081	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00085	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0008b	eb 08		 jmp	 SHORT $LN22@build_node@2
$LN31@build_node@2:
  0008d	48 8b cb	 mov	 rcx, rbx
  00090	e8 00 00 00 00	 call	 Px_DecRef
$LN22@build_node@2:

; 868  :     if (ISTERMINAL(num)) {

  00095	81 fd 00 01 00
	00		 cmp	 ebp, 256		; 00000100H
  0009b	0f 8c 01 01 00
	00		 jl	 $LN50@build_node@2

; 877  :     }
; 878  :     else if (ISNONTERMINAL(num)) {
; 879  :         /*
; 880  :          *  Not efficient, but that can be handled later.
; 881  :          */
; 882  :         int line_num = 0;
; 883  :         PyObject *encoding = NULL;

  000a1	33 db		 xor	 ebx, ebx
  000a3	89 7c 24 58	 mov	 DWORD PTR line_num$22351[rsp], edi

; 884  : 
; 885  :         if (num == encoding_decl) {

  000a7	81 fd 4f 01 00
	00		 cmp	 ebp, 335		; 0000014fH
  000ad	75 24		 jne	 SHORT $LN11@build_node@2

; 886  :             encoding = PySequence_GetItem(tuple, 2);

  000af	8d 53 02	 lea	 edx, QWORD PTR [rbx+2]
  000b2	48 8b ce	 mov	 rcx, rsi
  000b5	e8 00 00 00 00	 call	 PySequence_GetItem

; 887  :             /* tuple isn't borrowed anymore here, need to DECREF */
; 888  :             tuple = PySequence_GetSlice(tuple, 0, 2);

  000ba	33 d2		 xor	 edx, edx
  000bc	48 8b ce	 mov	 rcx, rsi
  000bf	44 8d 42 02	 lea	 r8d, QWORD PTR [rdx+2]
  000c3	48 8b d8	 mov	 rbx, rax
  000c6	e8 00 00 00 00	 call	 PySequence_GetSlice
  000cb	48 8b f0	 mov	 rsi, rax

; 889  :             if (tuple == NULL)

  000ce	48 85 c0	 test	 rax, rax

; 890  :                 return NULL;

  000d1	74 77		 je	 SHORT $LN51@build_node@2
$LN11@build_node@2:

; 891  :         }
; 892  :         res = PyNode_New(num);

  000d3	8b cd		 mov	 ecx, ebp
  000d5	e8 00 00 00 00	 call	 PyNode_New
  000da	48 8b f8	 mov	 rdi, rax

; 893  :         if (res != NULL) {

  000dd	48 85 c0	 test	 rax, rax
  000e0	0f 84 6e 01 00
	00		 je	 $LN2@build_node@2

; 894  :             if (res != build_node_children(tuple, res, &line_num)) {

  000e6	4c 8d 44 24 58	 lea	 r8, QWORD PTR line_num$22351[rsp]
  000eb	48 8b d0	 mov	 rdx, rax
  000ee	48 8b ce	 mov	 rcx, rsi
  000f1	e8 00 00 00 00	 call	 build_node_children
  000f6	48 3b f8	 cmp	 rdi, rax
  000f9	74 19		 je	 SHORT $LN9@build_node@2

; 895  :                 PyNode_Free(res);

  000fb	48 8b cf	 mov	 rcx, rdi
  000fe	e8 00 00 00 00	 call	 PyNode_Free

; 896  :                 res = NULL;

  00103	33 ff		 xor	 edi, edi

; 913  :             }
; 914  :         }
; 915  :     }
; 916  :     else {
; 917  :         /*  The tuple is illegal -- if the number is neither TERMINAL nor
; 918  :          *  NONTERMINAL, we can't use it.  Not sure the implementation
; 919  :          *  allows this condition, but the API doesn't preclude it.
; 920  :          */
; 921  :         PyObject *err = Py_BuildValue("os", tuple,
; 922  :                                       "Illegal component tuple.");
; 923  :         PyErr_SetObject(parser_error, err);
; 924  :         Py_XDECREF(err);
; 925  :     }
; 926  : 
; 927  :     return (res);

  00105	8b c7		 mov	 eax, edi

; 928  : }

  00107	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0010c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00110	5f		 pop	 rdi
  00111	5e		 pop	 rsi
  00112	5d		 pop	 rbp
  00113	c3		 ret	 0
$LN9@build_node@2:

; 897  :             }
; 898  :             if (res && encoding) {

  00114	48 85 db	 test	 rbx, rbx
  00117	0f 84 37 01 00
	00		 je	 $LN2@build_node@2

; 899  :                 Py_ssize_t len;
; 900  :                 const char *temp;
; 901  :                 temp = _PyUnicode_AsStringAndSize(encoding, &len);

  0011d	48 8d 54 24 60	 lea	 rdx, QWORD PTR len$22363[rsp]
  00122	48 8b cb	 mov	 rcx, rbx
  00125	e8 00 00 00 00	 call	 PyUnicode_AsUTF8AndSize
  0012a	48 8b e8	 mov	 rbp, rax

; 902  :                 if (temp == NULL) {

  0012d	48 85 c0	 test	 rax, rax
  00130	75 27		 jne	 SHORT $LN7@build_node@2

; 903  :                     Py_DECREF(res);

  00132	48 8b cf	 mov	 rcx, rdi
  00135	e8 00 00 00 00	 call	 _Py_DecRef

; 904  :                     Py_DECREF(encoding);

  0013a	48 8b cb	 mov	 rcx, rbx
  0013d	e8 00 00 00 00	 call	 _Py_DecRef

; 905  :                     Py_DECREF(tuple);

  00142	48 8b ce	 mov	 rcx, rsi
  00145	e8 00 00 00 00	 call	 _Py_DecRef
$LN51@build_node@2:

; 906  :                     return NULL;

  0014a	33 c0		 xor	 eax, eax

; 928  : }

  0014c	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00151	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00155	5f		 pop	 rdi
  00156	5e		 pop	 rsi
  00157	5d		 pop	 rbp
  00158	c3		 ret	 0
$LN7@build_node@2:

; 907  :                 }
; 908  :                 res->n_str = (char *)PyObject_MALLOC(len + 1);

  00159	48 8b 4c 24 60	 mov	 rcx, QWORD PTR len$22363[rsp]
  0015e	48 ff c1	 inc	 rcx
  00161	e8 00 00 00 00	 call	 PyObject_Malloc
  00166	48 89 47 08	 mov	 QWORD PTR [rdi+8], rax

; 909  :                 if (res->n_str != NULL && temp != NULL)

  0016a	48 85 c0	 test	 rax, rax
  0016d	74 13		 je	 SHORT $LN6@build_node@2

; 910  :                     (void) memcpy(res->n_str, temp, len + 1);

  0016f	4c 8b 44 24 60	 mov	 r8, QWORD PTR len$22363[rsp]
  00174	48 8b d5	 mov	 rdx, rbp
  00177	48 8b c8	 mov	 rcx, rax
  0017a	49 ff c0	 inc	 r8
  0017d	e8 00 00 00 00	 call	 memcpy
$LN6@build_node@2:

; 911  :                 Py_DECREF(encoding);

  00182	48 8b cb	 mov	 rcx, rbx
  00185	e8 00 00 00 00	 call	 _Py_DecRef

; 912  :                 Py_DECREF(tuple);

  0018a	48 8b ce	 mov	 rcx, rsi
  0018d	e8 00 00 00 00	 call	 _Py_DecRef

; 913  :             }
; 914  :         }
; 915  :     }
; 916  :     else {
; 917  :         /*  The tuple is illegal -- if the number is neither TERMINAL nor
; 918  :          *  NONTERMINAL, we can't use it.  Not sure the implementation
; 919  :          *  allows this condition, but the API doesn't preclude it.
; 920  :          */
; 921  :         PyObject *err = Py_BuildValue("os", tuple,
; 922  :                                       "Illegal component tuple.");
; 923  :         PyErr_SetObject(parser_error, err);
; 924  :         Py_XDECREF(err);
; 925  :     }
; 926  : 
; 927  :     return (res);

  00192	48 8b c7	 mov	 rax, rdi

; 928  : }

  00195	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0019a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0019e	5f		 pop	 rdi
  0019f	5e		 pop	 rsi
  001a0	5d		 pop	 rbp
  001a1	c3		 ret	 0
$LN50@build_node@2:

; 869  :         /*
; 870  :          *  The tuple is simple, but it doesn't start with a start symbol.
; 871  :          *  Raise an exception now and be done with it.
; 872  :          */
; 873  :         tuple = Py_BuildValue("os", tuple,
; 874  :                     "Illegal syntax-tree; cannot start with terminal symbol.");

  001a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DI@CJPEHLPC@Illegal?5syntax?9tree?$DL?5cannot?5star@
  001a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02EHCHIAMF@os?$AA@
  001b0	48 8b d6	 mov	 rdx, rsi
  001b3	e8 00 00 00 00	 call	 Py_BuildValue

; 875  :         PyErr_SetObject(parser_error, tuple);

  001b8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  001bf	48 8b d0	 mov	 rdx, rax
  001c2	48 8b d8	 mov	 rbx, rax
  001c5	e8 00 00 00 00	 call	 PyErr_SetObject

; 876  :         Py_XDECREF(tuple);

  001ca	48 85 db	 test	 rbx, rbx
  001cd	0f 84 81 00 00
	00		 je	 $LN2@build_node@2
  001d3	e8 00 00 00 00	 call	 _Py_PXCTX
  001d8	85 c0		 test	 eax, eax
  001da	75 78		 jne	 SHORT $LN2@build_node@2
  001dc	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001e0	a8 20		 test	 al, 32			; 00000020H
  001e2	75 68		 jne	 SHORT $LN42@build_node@2
  001e4	84 c0		 test	 al, al
  001e6	78 64		 js	 SHORT $LN42@build_node@2
  001e8	a8 02		 test	 al, 2
  001ea	75 68		 jne	 SHORT $LN2@build_node@2
  001ec	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001f0	75 62		 jne	 SHORT $LN2@build_node@2
  001f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00200	4c 8b cb	 mov	 r9, rbx
  00203	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00209	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00211	e8 00 00 00 00	 call	 _PyParallel_Guard
  00216	48 8b cb	 mov	 rcx, rbx
  00219	85 c0		 test	 eax, eax
  0021b	74 15		 je	 SHORT $LN47@build_node@2
  0021d	e8 00 00 00 00	 call	 _Px_Dealloc

; 913  :             }
; 914  :         }
; 915  :     }
; 916  :     else {
; 917  :         /*  The tuple is illegal -- if the number is neither TERMINAL nor
; 918  :          *  NONTERMINAL, we can't use it.  Not sure the implementation
; 919  :          *  allows this condition, but the API doesn't preclude it.
; 920  :          */
; 921  :         PyObject *err = Py_BuildValue("os", tuple,
; 922  :                                       "Illegal component tuple.");
; 923  :         PyErr_SetObject(parser_error, err);
; 924  :         Py_XDECREF(err);
; 925  :     }
; 926  : 
; 927  :     return (res);

  00222	48 8b c7	 mov	 rax, rdi

; 928  : }

  00225	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0022a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0022e	5f		 pop	 rdi
  0022f	5e		 pop	 rsi
  00230	5d		 pop	 rbp
  00231	c3		 ret	 0

; 876  :         Py_XDECREF(tuple);

$LN47@build_node@2:
  00232	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00236	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 913  :             }
; 914  :         }
; 915  :     }
; 916  :     else {
; 917  :         /*  The tuple is illegal -- if the number is neither TERMINAL nor
; 918  :          *  NONTERMINAL, we can't use it.  Not sure the implementation
; 919  :          *  allows this condition, but the API doesn't preclude it.
; 920  :          */
; 921  :         PyObject *err = Py_BuildValue("os", tuple,
; 922  :                                       "Illegal component tuple.");
; 923  :         PyErr_SetObject(parser_error, err);
; 924  :         Py_XDECREF(err);
; 925  :     }
; 926  : 
; 927  :     return (res);

  0023c	48 8b c7	 mov	 rax, rdi

; 928  : }

  0023f	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00244	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00248	5f		 pop	 rdi
  00249	5e		 pop	 rsi
  0024a	5d		 pop	 rbp
  0024b	c3		 ret	 0

; 876  :         Py_XDECREF(tuple);

$LN42@build_node@2:
  0024c	48 8b cb	 mov	 rcx, rbx
  0024f	e8 00 00 00 00	 call	 Px_DecRef
$LN2@build_node@2:

; 913  :             }
; 914  :         }
; 915  :     }
; 916  :     else {
; 917  :         /*  The tuple is illegal -- if the number is neither TERMINAL nor
; 918  :          *  NONTERMINAL, we can't use it.  Not sure the implementation
; 919  :          *  allows this condition, but the API doesn't preclude it.
; 920  :          */
; 921  :         PyObject *err = Py_BuildValue("os", tuple,
; 922  :                                       "Illegal component tuple.");
; 923  :         PyErr_SetObject(parser_error, err);
; 924  :         Py_XDECREF(err);
; 925  :     }
; 926  : 
; 927  :     return (res);

  00254	48 8b c7	 mov	 rax, rdi

; 928  : }

  00257	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0025c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00260	5f		 pop	 rdi
  00261	5e		 pop	 rsi
  00262	5d		 pop	 rbp
  00263	c3		 ret	 0
build_node_tree ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@BCHGMPMP@Expected?5node?5type?5?$CFd?0?5got?5?$CFd?4?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_ntype DD imagerel validate_ntype
	DD	imagerel validate_ntype+52
	DD	imagerel $unwind$validate_ntype
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_ntype DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BP@BCHGMPMP@Expected?5node?5type?5?$CFd?0?5got?5?$CFd?4?$AA@
CONST	SEGMENT
??_C@_0BP@BCHGMPMP@Expected?5node?5type?5?$CFd?0?5got?5?$CFd?4?$AA@ DB 'E'
	DB	'xpected node type %d, got %d.', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_ntype
_TEXT	SEGMENT
n$ = 48
t$ = 56
validate_ntype PROC					; COMDAT

; 1000 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1001 :     if (TYPE(n) != t) {

  00004	44 0f bf 09	 movsx	 r9d, WORD PTR [rcx]
  00008	44 3b ca	 cmp	 r9d, edx
  0000b	74 1d		 je	 SHORT $LN1@validate_n

; 1002 :         PyErr_Format(parser_error, "Expected node type %d, got %d.",
; 1003 :                      t, TYPE(n));

  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  00014	44 8b c2	 mov	 r8d, edx
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@BCHGMPMP@Expected?5node?5type?5?$CFd?0?5got?5?$CFd?4?$AA@
  0001e	e8 00 00 00 00	 call	 PyErr_Format

; 1004 :         return 0;

  00023	33 c0		 xor	 eax, eax

; 1007 : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
$LN1@validate_n:

; 1005 :     }
; 1006 :     return 1;

  0002a	b8 01 00 00 00	 mov	 eax, 1

; 1007 : }

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
validate_ntype ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@BOIMMDDD@Illegal?5number?5of?5children?5for?5?$CF@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_numnodes DD imagerel validate_numnodes
	DD	imagerel validate_numnodes+45
	DD	imagerel $unwind$validate_numnodes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_numnodes DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CI@BOIMMDDD@Illegal?5number?5of?5children?5for?5?$CF@
CONST	SEGMENT
??_C@_0CI@BOIMMDDD@Illegal?5number?5of?5children?5for?5?$CF@ DB 'Illegal '
	DB	'number of children for %s node.', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_numnodes
_TEXT	SEGMENT
n$ = 48
num$ = 56
name$ = 64
validate_numnodes PROC					; COMDAT

; 1019 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1020 :     if (NCH(n) != num) {

  00004	39 51 18	 cmp	 DWORD PTR [rcx+24], edx
  00007	74 1a		 je	 SHORT $LN1@validate_n@2

; 1021 :         PyErr_Format(parser_error,
; 1022 :                      "Illegal number of children for %s node.", name);

  00009	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@BOIMMDDD@Illegal?5number?5of?5children?5for?5?$CF@
  00017	e8 00 00 00 00	 call	 PyErr_Format

; 1023 :         return 0;

  0001c	33 c0		 xor	 eax, eax

; 1026 : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
$LN1@validate_n@2:

; 1024 :     }
; 1025 :     return 1;

  00023	b8 01 00 00 00	 mov	 eax, 1

; 1026 : }

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
validate_numnodes ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@JKOOGBNF@Illegal?5terminal?3?5expected?5?$CC?$CFs?$CC?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_terminal DD imagerel validate_terminal
	DD	imagerel validate_terminal+132
	DD	imagerel $unwind$validate_terminal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_terminal DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CA@JKOOGBNF@Illegal?5terminal?3?5expected?5?$CC?$CFs?$CC?$AA@
CONST	SEGMENT
??_C@_0CA@JKOOGBNF@Illegal?5terminal?3?5expected?5?$CC?$CFs?$CC?$AA@ DB 'I'
	DB	'llegal terminal: expected "%s"', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_terminal
_TEXT	SEGMENT
terminal$ = 48
type$ = 56
string$ = 64
validate_terminal PROC					; COMDAT

; 1031 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	49 8b d8	 mov	 rbx, r8
  0000d	48 8b f9	 mov	 rdi, rcx

; 1032 :     int res = (validate_ntype(terminal, type)
; 1033 :                && ((string == 0) || (strcmp(string, STR(terminal)) == 0)));

  00010	e8 00 00 00 00	 call	 validate_ntype
  00015	85 c0		 test	 eax, eax
  00017	74 3e		 je	 SHORT $LN5@validate_t
  00019	48 85 db	 test	 rbx, rbx
  0001c	74 29		 je	 SHORT $LN4@validate_t
  0001e	4c 8b 47 08	 mov	 r8, QWORD PTR [rdi+8]
  00022	48 8b c3	 mov	 rax, rbx
  00025	4c 2b c3	 sub	 r8, rbx
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL8@validate_t:
  00030	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00033	42 0f b6 0c 00	 movzx	 ecx, BYTE PTR [rax+r8]
  00038	2b d1		 sub	 edx, ecx
  0003a	75 07		 jne	 SHORT $LN9@validate_t
  0003c	48 ff c0	 inc	 rax
  0003f	85 c9		 test	 ecx, ecx
  00041	75 ed		 jne	 SHORT $LL8@validate_t
$LN9@validate_t:
  00043	85 d2		 test	 edx, edx
  00045	75 10		 jne	 SHORT $LN5@validate_t
$LN4@validate_t:

; 1038 :     }
; 1039 :     return (res);

  00047	b8 01 00 00 00	 mov	 eax, 1

; 1040 : }

  0004c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00051	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00055	5f		 pop	 rdi
  00056	c3		 ret	 0
$LN5@validate_t:

; 1034 : 
; 1035 :     if (!res && !PyErr_Occurred()) {

  00057	e8 00 00 00 00	 call	 PyErr_Occurred
  0005c	48 85 c0	 test	 rax, rax
  0005f	75 16		 jne	 SHORT $LN10@validate_t

; 1036 :         PyErr_Format(parser_error,
; 1037 :                      "Illegal terminal: expected \"%s\"", string);

  00061	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@JKOOGBNF@Illegal?5terminal?3?5expected?5?$CC?$CFs?$CC?$AA@
  0006f	4c 8b c3	 mov	 r8, rbx
  00072	e8 00 00 00 00	 call	 PyErr_Format
$LN10@validate_t:

; 1038 :     }
; 1039 :     return (res);

  00077	33 c0		 xor	 eax, eax

; 1040 : }

  00079	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00082	5f		 pop	 rdi
  00083	c3		 ret	 0
validate_terminal ENDP
_TEXT	ENDS
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_repeating_list DD imagerel validate_repeating_list
	DD	imagerel validate_repeating_list+277
	DD	imagerel $unwind$validate_repeating_list
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_repeating_list DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0c016321aH
xdata	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_repeating_list
_TEXT	SEGMENT
tree$ = 48
ntype$ = 56
vfunc$ = 64
name$ = 72
validate_repeating_list PROC				; COMDAT

; 1048 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1049 :     int nch = NCH(tree);

  0001a	8b 71 18	 mov	 esi, DWORD PTR [rcx+24]
  0001d	49 8b f9	 mov	 rdi, r9
  00020	4d 8b e0	 mov	 r12, r8
  00023	48 8b e9	 mov	 rbp, rcx

; 1050 :     int res = (nch && validate_ntype(tree, ntype)
; 1051 :                && vfunc(CHILD(tree, 0)));

  00026	85 f6		 test	 esi, esi
  00028	0f 84 a1 00 00
	00		 je	 $LN10@validate_r
  0002e	e8 00 00 00 00	 call	 validate_ntype
  00033	85 c0		 test	 eax, eax
  00035	0f 84 94 00 00
	00		 je	 $LN10@validate_r
  0003b	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  0003f	41 ff d4	 call	 r12
  00042	85 c0		 test	 eax, eax
  00044	0f 84 85 00 00
	00		 je	 $LN10@validate_r
  0004a	bb 01 00 00 00	 mov	 ebx, 1
$LN7@validate_r:

; 1056 :         if (is_even(nch))

  0004f	40 f6 c6 01	 test	 sil, 1
  00053	75 24		 jne	 SHORT $LN5@validate_r

; 1057 :             res = validate_comma(CHILD(tree, --nch));

  00055	ff ce		 dec	 esi
  00057	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  0005e	ba 0c 00 00 00	 mov	 edx, 12
  00063	48 63 c6	 movsxd	 rax, esi
  00066	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0006a	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  0006e	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00072	e8 00 00 00 00	 call	 validate_terminal
  00077	8b d8		 mov	 ebx, eax
$LN5@validate_r:

; 1058 :         if (res && nch > 1) {

  00079	85 db		 test	 ebx, ebx
  0007b	74 7b		 je	 SHORT $LN18@validate_r
  0007d	83 fe 01	 cmp	 esi, 1
  00080	7e 76		 jle	 SHORT $LN18@validate_r

; 1059 :             int pos = 1;

  00082	bf 01 00 00 00	 mov	 edi, 1
$LL3@validate_r:

; 1060 :             for ( ; res && pos < nch; pos += 2)

  00087	3b fe		 cmp	 edi, esi
  00089	7d 6d		 jge	 SHORT $LN18@validate_r

; 1061 :                 res = (validate_comma(CHILD(tree, pos))
; 1062 :                        && vfunc(CHILD(tree, pos + 1)));

  0008b	48 63 c7	 movsxd	 rax, edi
  0008e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  00095	ba 0c 00 00 00	 mov	 edx, 12
  0009a	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0009e	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  000a2	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  000a6	e8 00 00 00 00	 call	 validate_terminal
  000ab	85 c0		 test	 eax, eax
  000ad	74 40		 je	 SHORT $LN12@validate_r
  000af	8d 47 01	 lea	 eax, DWORD PTR [rdi+1]
  000b2	48 63 c8	 movsxd	 rcx, eax
  000b5	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  000b9	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  000bd	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  000c1	41 ff d4	 call	 r12
  000c4	85 c0		 test	 eax, eax
  000c6	74 27		 je	 SHORT $LN12@validate_r
  000c8	bb 01 00 00 00	 mov	 ebx, 1
  000cd	eb 22		 jmp	 SHORT $LN13@validate_r
$LN10@validate_r:

; 1050 :     int res = (nch && validate_ntype(tree, ntype)
; 1051 :                && vfunc(CHILD(tree, 0)));

  000cf	33 db		 xor	 ebx, ebx

; 1052 : 
; 1053 :     if (!res && !PyErr_Occurred())

  000d1	e8 00 00 00 00	 call	 PyErr_Occurred
  000d6	48 85 c0	 test	 rax, rax
  000d9	0f 85 70 ff ff
	ff		 jne	 $LN7@validate_r

; 1054 :         (void) validate_numnodes(tree, 1, name);

  000df	8d 53 01	 lea	 edx, QWORD PTR [rbx+1]
  000e2	4c 8b c7	 mov	 r8, rdi
  000e5	48 8b cd	 mov	 rcx, rbp
  000e8	e8 00 00 00 00	 call	 validate_numnodes

; 1055 :     else {

  000ed	eb 09		 jmp	 SHORT $LN18@validate_r
$LN12@validate_r:

; 1061 :                 res = (validate_comma(CHILD(tree, pos))
; 1062 :                        && vfunc(CHILD(tree, pos + 1)));

  000ef	33 db		 xor	 ebx, ebx
$LN13@validate_r:

; 1060 :             for ( ; res && pos < nch; pos += 2)

  000f1	83 c7 02	 add	 edi, 2
  000f4	85 db		 test	 ebx, ebx
  000f6	75 8f		 jne	 SHORT $LL3@validate_r
$LN18@validate_r:

; 1063 :         }
; 1064 :     }
; 1065 :     return (res);
; 1066 : }

  000f8	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000fd	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00102	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00107	8b c3		 mov	 eax, ebx
  00109	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0010e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00112	41 5c		 pop	 r12
  00114	c3		 ret	 0
validate_repeating_list ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_suite DD imagerel validate_suite
	DD	imagerel validate_suite+59
	DD	imagerel $unwind$validate_suite
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$validate_suite DD imagerel validate_suite+59
	DD	imagerel validate_suite+222
	DD	imagerel $chain$0$validate_suite
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$validate_suite DD imagerel validate_suite+222
	DD	imagerel validate_suite+264
	DD	imagerel $chain$2$validate_suite
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$validate_suite DD imagerel validate_suite+264
	DD	imagerel validate_suite+296
	DD	imagerel $chain$3$validate_suite
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$validate_suite DD 021H
	DD	imagerel validate_suite
	DD	imagerel validate_suite+59
	DD	imagerel $unwind$validate_suite
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$validate_suite DD 020021H
	DD	066400H
	DD	imagerel validate_suite
	DD	imagerel validate_suite+59
	DD	imagerel $unwind$validate_suite
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$validate_suite DD 020521H
	DD	066405H
	DD	imagerel validate_suite
	DD	imagerel validate_suite+59
	DD	imagerel $unwind$validate_suite
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_suite DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_suite
_TEXT	SEGMENT
tree$ = 48
validate_suite PROC					; COMDAT

; 1178 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1179 :     int nch = NCH(tree);

  0000a	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]

; 1180 :     int res = (validate_ntype(tree, suite) && ((nch == 1) || (nch >= 4)));

  0000d	ba 2d 01 00 00	 mov	 edx, 301		; 0000012dH
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 f9 00 00
	00		 je	 $LN13@validate_s
  00022	83 fb 01	 cmp	 ebx, 1
  00025	0f 84 dd 00 00
	00		 je	 $LN22@validate_s
  0002b	83 fb 04	 cmp	 ebx, 4
  0002e	0f 8c e7 00 00
	00		 jl	 $LN13@validate_s

; 1184 :     else if (res) {
; 1185 :         /*  NEWLINE INDENT stmt+ DEDENT  */
; 1186 :         res = (validate_newline(CHILD(tree, 0))
; 1187 :                && validate_indent(CHILD(tree, 1))
; 1188 :                && validate_stmt(CHILD(tree, 2))
; 1189 :                && validate_dedent(CHILD(tree, nch - 1)));

  00034	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00038	45 33 c0	 xor	 r8d, r8d
  0003b	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00040	41 8d 50 04	 lea	 edx, QWORD PTR [r8+4]
  00044	e8 00 00 00 00	 call	 validate_terminal
  00049	85 c0		 test	 eax, eax
  0004b	0f 84 8d 00 00
	00		 je	 $LN15@validate_s
  00051	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00055	45 33 c0	 xor	 r8d, r8d
  00058	41 8d 50 05	 lea	 edx, QWORD PTR [r8+5]
  0005c	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00060	e8 00 00 00 00	 call	 validate_terminal
  00065	85 c0		 test	 eax, eax
  00067	74 75		 je	 SHORT $LN15@validate_s
  00069	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0006d	48 83 c1 50	 add	 rcx, 80			; 00000050H
  00071	e8 00 00 00 00	 call	 validate_stmt
  00076	85 c0		 test	 eax, eax
  00078	74 64		 je	 SHORT $LN15@validate_s
  0007a	8d 73 ff	 lea	 esi, DWORD PTR [rbx-1]
  0007d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00084	ba 06 00 00 00	 mov	 edx, 6
  00089	48 63 c6	 movsxd	 rax, esi
  0008c	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00090	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00094	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00098	e8 00 00 00 00	 call	 validate_terminal
  0009d	85 c0		 test	 eax, eax
  0009f	74 3d		 je	 SHORT $LN15@validate_s
  000a1	b8 01 00 00 00	 mov	 eax, 1

; 1190 : 
; 1191 :         if (res && (nch > 4)) {

  000a6	83 fb 04	 cmp	 ebx, 4
  000a9	7e 38		 jle	 SHORT $LN26@validate_s

; 1192 :             int i = 3;

  000ab	bb 03 00 00 00	 mov	 ebx, 3
$LL5@validate_s:

; 1193 :             --nch;                      /* forget the DEDENT     */
; 1194 :             for ( ; res && (i < nch); ++i)

  000b0	3b de		 cmp	 ebx, esi
  000b2	7d 1a		 jge	 SHORT $LN25@validate_s

; 1195 :                 res = validate_stmt(CHILD(tree, i));

  000b4	48 63 c3	 movsxd	 rax, ebx
  000b7	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  000bb	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000bf	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  000c3	e8 00 00 00 00	 call	 validate_stmt
  000c8	ff c3		 inc	 ebx
  000ca	85 c0		 test	 eax, eax
  000cc	75 e2		 jne	 SHORT $LL5@validate_s
$LN25@validate_s:
  000ce	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 1199 :     }
; 1200 :     return (res);
; 1201 : }

  000d3	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000d8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000dc	5f		 pop	 rdi
  000dd	c3		 ret	 0
$LN15@validate_s:

; 1184 :     else if (res) {
; 1185 :         /*  NEWLINE INDENT stmt+ DEDENT  */
; 1186 :         res = (validate_newline(CHILD(tree, 0))
; 1187 :                && validate_indent(CHILD(tree, 1))
; 1188 :                && validate_stmt(CHILD(tree, 2))
; 1189 :                && validate_dedent(CHILD(tree, nch - 1)));

  000de	33 c0		 xor	 eax, eax

; 1196 :         }
; 1197 :         else if (nch < 4)

  000e0	83 fb 04	 cmp	 ebx, 4
$LN26@validate_s:
  000e3	7d e9		 jge	 SHORT $LN25@validate_s

; 1198 :             res = validate_numnodes(tree, 4, "suite");

  000e5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05PPOFKJGL@suite?$AA@
  000ec	ba 04 00 00 00	 mov	 edx, 4
  000f1	48 8b cf	 mov	 rcx, rdi
  000f4	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 1199 :     }
; 1200 :     return (res);
; 1201 : }

  000f9	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000fe	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00102	5f		 pop	 rdi
  00103	e9 00 00 00 00	 jmp	 validate_numnodes
$LN22@validate_s:

; 1181 : 
; 1182 :     if (res && (nch == 1))
; 1183 :         res = validate_simple_stmt(CHILD(tree, 0));

  00108	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]

; 1199 :     }
; 1200 :     return (res);
; 1201 : }

  0010c	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00111	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00115	5f		 pop	 rdi
  00116	e9 00 00 00 00	 jmp	 validate_simple_stmt
$LN13@validate_s:

; 1180 :     int res = (validate_ntype(tree, suite) && ((nch == 1) || (nch >= 4)));

  0011b	33 c0		 xor	 eax, eax

; 1199 :     }
; 1200 :     return (res);
; 1201 : }

  0011d	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00122	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00126	5f		 pop	 rdi
  00127	c3		 ret	 0
validate_suite ENDP
_TEXT	ENDS
PUBLIC	??_C@_08GGIJBKAI@testlist?$AA@			; `string'
;	COMDAT ??_C@_08GGIJBKAI@testlist?$AA@
CONST	SEGMENT
??_C@_08GGIJBKAI@testlist?$AA@ DB 'testlist', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_testlist
_TEXT	SEGMENT
tree$ = 8
validate_testlist PROC					; COMDAT

; 1207 :     return (validate_repeating_list(tree, testlist,
; 1208 :                                     validate_test, "testlist"));

  00000	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_08GGIJBKAI@testlist?$AA@
  00007	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:validate_test
  0000e	ba 47 01 00 00	 mov	 edx, 327		; 00000147H

; 1209 : }

  00013	e9 00 00 00 00	 jmp	 validate_repeating_list
validate_testlist ENDP
_TEXT	ENDS
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_vfpdef DD imagerel validate_vfpdef
	DD	imagerel validate_vfpdef+208
	DD	imagerel $unwind$validate_vfpdef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_vfpdef DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_vfpdef
_TEXT	SEGMENT
tree$ = 48
validate_vfpdef PROC					; COMDAT

; 1225 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1226 :     int nch = NCH(tree);

  0000a	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  0000d	48 8b f9	 mov	 rdi, rcx

; 1227 :     if (TYPE(tree) == vfpdef) {

  00010	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  00013	ba 0b 01 00 00	 mov	 edx, 267		; 0000010bH
  00018	66 3b ca	 cmp	 cx, dx
  0001b	75 28		 jne	 SHORT $LN6@validate_v

; 1228 :         return nch == 1 && validate_name(CHILD(tree, 0), NULL);

  0001d	83 f8 01	 cmp	 eax, 1
  00020	75 14		 jne	 SHORT $LN9@validate_v
  00022	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00026	45 33 c0	 xor	 r8d, r8d
  00029	8b d0		 mov	 edx, eax
  0002b	8b d8		 mov	 ebx, eax
  0002d	e8 00 00 00 00	 call	 validate_terminal
  00032	85 c0		 test	 eax, eax
  00034	75 02		 jne	 SHORT $LN10@validate_v
$LN9@validate_v:
  00036	33 db		 xor	 ebx, ebx
$LN10@validate_v:
  00038	8b c3		 mov	 eax, ebx

; 1241 : }

  0003a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
$LN6@validate_v:

; 1229 :     }
; 1230 :     else if (TYPE(tree) == tfpdef) {

  00045	ba 09 01 00 00	 mov	 edx, 265		; 00000109H
  0004a	66 3b ca	 cmp	 cx, dx
  0004d	75 74		 jne	 SHORT $LN1@validate_v

; 1231 :         if (nch == 1) {

  0004f	83 f8 01	 cmp	 eax, 1
  00052	75 18		 jne	 SHORT $LN3@validate_v

; 1232 :             return validate_name(CHILD(tree, 0), NULL);

  00054	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00058	45 33 c0	 xor	 r8d, r8d
  0005b	8b d0		 mov	 edx, eax

; 1241 : }

  0005d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00062	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00066	5f		 pop	 rdi
  00067	e9 00 00 00 00	 jmp	 validate_terminal
$LN3@validate_v:

; 1233 :         }
; 1234 :         else if (nch == 3) {

  0006c	83 f8 03	 cmp	 eax, 3
  0006f	75 52		 jne	 SHORT $LN1@validate_v

; 1235 :             return validate_name(CHILD(tree, 0), NULL) &&
; 1236 :                    validate_colon(CHILD(tree, 1)) &&
; 1237 :                    validate_test(CHILD(tree, 2));

  00071	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00075	bb 01 00 00 00	 mov	 ebx, 1
  0007a	45 33 c0	 xor	 r8d, r8d
  0007d	8b d3		 mov	 edx, ebx
  0007f	e8 00 00 00 00	 call	 validate_terminal
  00084	85 c0		 test	 eax, eax
  00086	74 2c		 je	 SHORT $LN11@validate_v
  00088	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0008c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00093	8d 53 0a	 lea	 edx, QWORD PTR [rbx+10]
  00096	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0009a	e8 00 00 00 00	 call	 validate_terminal
  0009f	85 c0		 test	 eax, eax
  000a1	74 11		 je	 SHORT $LN11@validate_v
  000a3	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  000a7	48 83 c1 50	 add	 rcx, 80			; 00000050H
  000ab	e8 00 00 00 00	 call	 validate_test
  000b0	85 c0		 test	 eax, eax
  000b2	75 02		 jne	 SHORT $LN12@validate_v
$LN11@validate_v:
  000b4	33 db		 xor	 ebx, ebx
$LN12@validate_v:
  000b6	8b c3		 mov	 eax, ebx

; 1241 : }

  000b8	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000bd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c1	5f		 pop	 rdi
  000c2	c3		 ret	 0
$LN1@validate_v:

; 1238 :         }
; 1239 :     }
; 1240 :     return 0;

  000c3	33 c0		 xor	 eax, eax

; 1241 : }

  000c5	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ca	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ce	5f		 pop	 rdi
  000cf	c3		 ret	 0
validate_vfpdef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@EOOFKHNC@expected?5?$CK?5or?5?$CK?$CK?5in?5varargslist?5@ ; `string'
PUBLIC	??_C@_0DA@FACEPCPA@expected?5vfpdef?5after?5?$CK?$CK?5in?5vara@ ; `string'
PUBLIC	??_C@_0DB@DKCHLGHN@unexpected?5extra?5children?5in?5var@ ; `string'
PUBLIC	??_C@_02FKAPCJPD@?$CK?$CK?$AA@			; `string'
PUBLIC	??_C@_01NEMOKFLO@?$DN?$AA@			; `string'
PUBLIC	??_C@_01NBENCBCI@?$CK?$AA@			; `string'
PUBLIC	??_C@_0DD@BKLPCAMF@expected?5variable?5argument?5trail@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_varargslist_trailer DD imagerel validate_varargslist_trailer
	DD	imagerel validate_varargslist_trailer+697
	DD	imagerel $unwind$validate_varargslist_trailer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_varargslist_trailer DD 0e5401H
	DD	04f454H
	DD	05e44bH
	DD	0cc442H
	DD	0b543dH
	DD	0a3438H
	DD	0d0055209H
	DD	060027003H
xdata	ENDS
;	COMDAT ??_C@_0CI@EOOFKHNC@expected?5?$CK?5or?5?$CK?$CK?5in?5varargslist?5@
CONST	SEGMENT
??_C@_0CI@EOOFKHNC@expected?5?$CK?5or?5?$CK?$CK?5in?5varargslist?5@ DB 'e'
	DB	'xpected * or ** in varargslist trailer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@FACEPCPA@expected?5vfpdef?5after?5?$CK?$CK?5in?5vara@
CONST	SEGMENT
??_C@_0DA@FACEPCPA@expected?5vfpdef?5after?5?$CK?$CK?5in?5vara@ DB 'expec'
	DB	'ted vfpdef after ** in varargslist trailer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DKCHLGHN@unexpected?5extra?5children?5in?5var@
CONST	SEGMENT
??_C@_0DB@DKCHLGHN@unexpected?5extra?5children?5in?5var@ DB 'unexpected e'
	DB	'xtra children in varargslist trailer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02FKAPCJPD@?$CK?$CK?$AA@
CONST	SEGMENT
??_C@_02FKAPCJPD@?$CK?$CK?$AA@ DB '**', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01NEMOKFLO@?$DN?$AA@
CONST	SEGMENT
??_C@_01NEMOKFLO@?$DN?$AA@ DB '=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NBENCBCI@?$CK?$AA@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK?$AA@ DB '*', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@BKLPCAMF@expected?5variable?5argument?5trail@
CONST	SEGMENT
??_C@_0DD@BKLPCAMF@expected?5variable?5argument?5trail@ DB 'expected vari'
	DB	'able argument trailer for varargslist', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_varargslist_trailer
_TEXT	SEGMENT
tree$ = 80
start$ = 88
validate_varargslist_trailer PROC			; COMDAT

; 1248 : {

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	41 55		 push	 r13
  00005	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1249 :     int nch = NCH(tree);

  00009	44 8b 69 18	 mov	 r13d, DWORD PTR [rcx+24]
  0000d	48 63 fa	 movsxd	 rdi, edx
  00010	48 8b f1	 mov	 rsi, rcx

; 1250 :     int res = 0;
; 1251 : 
; 1252 :     if (nch <= start) {

  00013	44 3b ef	 cmp	 r13d, edi
  00016	7f 17		 jg	 SHORT $LN15@validate_v@2

; 1253 :         err_string("expected variable argument trailer for varargslist");

  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DD@BKLPCAMF@expected?5variable?5argument?5trail@
  0001f	e8 00 00 00 00	 call	 err_string

; 1254 :         return 0;

  00024	33 c0		 xor	 eax, eax

; 1306 : }

  00026	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002a	41 5d		 pop	 r13
  0002c	5f		 pop	 rdi
  0002d	5e		 pop	 rsi
  0002e	c3		 ret	 0
$LN15@validate_v@2:

; 1255 :     }
; 1256 :     if (TYPE(CHILD(tree, start)) == STAR) {

  0002f	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00033	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00038	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp
  0003d	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12
  00042	48 8d 0c bf	 lea	 rcx, QWORD PTR [rdi+rdi*4]
  00046	4c 89 74 24 28	 mov	 QWORD PTR [rsp+40], r14
  0004b	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0004f	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00054	0f b7 01	 movzx	 eax, WORD PTR [rcx]
  00057	66 83 f8 10	 cmp	 ax, 16
  0005b	0f 85 c6 01 00
	00		 jne	 $LN14@validate_v@2

; 1257 :         /*
; 1258 :          * '*' [vfpdef]
; 1259 :          */
; 1260 :         res = validate_star(CHILD(tree, start++));

  00061	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01NBENCBCI@?$CK?$AA@
  00068	ba 10 00 00 00	 mov	 edx, 16
  0006d	e8 00 00 00 00	 call	 validate_terminal

; 1261 :         if (res && start < nch && (TYPE(CHILD(tree, start)) == vfpdef ||
; 1262 :                                    TYPE(CHILD(tree, start)) == tfpdef))

  00072	41 bf 0b 01 00
	00		 mov	 r15d, 267		; 0000010bH
  00078	ff c7		 inc	 edi
  0007a	8b d8		 mov	 ebx, eax
  0007c	45 8d 77 fe	 lea	 r14d, QWORD PTR [r15-2]
  00080	85 c0		 test	 eax, eax
  00082	74 2d		 je	 SHORT $LN26@validate_v@2
  00084	41 3b fd	 cmp	 edi, r13d
  00087	7d 28		 jge	 SHORT $LN26@validate_v@2
  00089	48 63 cf	 movsxd	 rcx, edi
  0008c	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00090	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  00094	0f b7 04 d1	 movzx	 eax, WORD PTR [rcx+rdx*8]
  00098	48 8d 0c d1	 lea	 rcx, QWORD PTR [rcx+rdx*8]
  0009c	66 41 3b c7	 cmp	 ax, r15w
  000a0	74 06		 je	 SHORT $LN12@validate_v@2
  000a2	66 41 3b c6	 cmp	 ax, r14w
  000a6	75 09		 jne	 SHORT $LN26@validate_v@2
$LN12@validate_v@2:

; 1263 :             res = validate_vfpdef(CHILD(tree, start++));

  000a8	e8 00 00 00 00	 call	 validate_vfpdef
  000ad	ff c7		 inc	 edi
  000af	8b d8		 mov	 ebx, eax
$LN26@validate_v@2:
  000b1	48 63 c7	 movsxd	 rax, edi

; 1264 :         /*
; 1265 :          * (',' vfpdef ['=' test])*
; 1266 :          */
; 1267 :         while (res && start + 1 < nch && (
; 1268 :                    TYPE(CHILD(tree, start + 1)) == vfpdef ||
; 1269 :                    TYPE(CHILD(tree, start + 1)) == tfpdef)) {

  000b4	85 db		 test	 ebx, ebx
  000b6	0f 84 d9 01 00
	00		 je	 $LN1@validate_v@2
  000bc	48 8d 2c 80	 lea	 rbp, QWORD PTR [rax+rax*4]

; 1270 :             res = (validate_comma(CHILD(tree, start++))
; 1271 :                    && validate_vfpdef(CHILD(tree, start++)));

  000c0	44 8d 67 01	 lea	 r12d, DWORD PTR [rdi+1]
  000c4	48 c1 e5 03	 shl	 rbp, 3
  000c8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL11@validate_v@2:

; 1264 :         /*
; 1265 :          * (',' vfpdef ['=' test])*
; 1266 :          */
; 1267 :         while (res && start + 1 < nch && (
; 1268 :                    TYPE(CHILD(tree, start + 1)) == vfpdef ||
; 1269 :                    TYPE(CHILD(tree, start + 1)) == tfpdef)) {

  000d0	45 3b e5	 cmp	 r12d, r13d
  000d3	0f 8d bf 00 00
	00		 jge	 $LN10@validate_v@2
  000d9	48 8b 56 20	 mov	 rdx, QWORD PTR [rsi+32]
  000dd	0f b7 44 2a 28	 movzx	 eax, WORD PTR [rdx+rbp+40]
  000e2	66 41 3b c7	 cmp	 ax, r15w
  000e6	74 0a		 je	 SHORT $LN9@validate_v@2
  000e8	66 41 3b c6	 cmp	 ax, r14w
  000ec	0f 85 a6 00 00
	00		 jne	 $LN10@validate_v@2
$LN9@validate_v@2:

; 1270 :             res = (validate_comma(CHILD(tree, start++))
; 1271 :                    && validate_vfpdef(CHILD(tree, start++)));

  000f2	48 63 c7	 movsxd	 rax, edi
  000f5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  000fc	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00100	48 8d 0c ca	 lea	 rcx, QWORD PTR [rdx+rcx*8]
  00104	ba 0c 00 00 00	 mov	 edx, 12
  00109	e8 00 00 00 00	 call	 validate_terminal
  0010e	ff c7		 inc	 edi
  00110	85 c0		 test	 eax, eax
  00112	74 7d		 je	 SHORT $LN20@validate_v@2
  00114	48 63 c7	 movsxd	 rax, edi
  00117	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0011b	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0011f	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00123	e8 00 00 00 00	 call	 validate_vfpdef
  00128	ff c7		 inc	 edi
  0012a	41 83 c4 02	 add	 r12d, 2
  0012e	48 83 c5 50	 add	 rbp, 80			; 00000050H
  00132	85 c0		 test	 eax, eax
  00134	74 5b		 je	 SHORT $LN20@validate_v@2
  00136	bb 01 00 00 00	 mov	 ebx, 1

; 1272 :             if (res && start + 1 < nch && TYPE(CHILD(tree, start)) == EQUAL)

  0013b	45 3b e5	 cmp	 r12d, r13d
  0013e	7d 58		 jge	 SHORT $LN10@validate_v@2
  00140	48 8b 56 20	 mov	 rdx, QWORD PTR [rsi+32]
  00144	66 83 3c 2a 16	 cmp	 WORD PTR [rdx+rbp], 22
  00149	75 85		 jne	 SHORT $LL11@validate_v@2

; 1273 :                 res = (validate_equal(CHILD(tree, start++))
; 1274 :                        && validate_test(CHILD(tree, start++)));

  0014b	48 63 c7	 movsxd	 rax, edi
  0014e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01NEMOKFLO@?$DN?$AA@
  00155	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00159	48 8d 0c ca	 lea	 rcx, QWORD PTR [rdx+rcx*8]
  0015d	8d 53 15	 lea	 edx, QWORD PTR [rbx+21]
  00160	e8 00 00 00 00	 call	 validate_terminal
  00165	ff c7		 inc	 edi
  00167	85 c0		 test	 eax, eax
  00169	74 26		 je	 SHORT $LN20@validate_v@2
  0016b	48 63 c7	 movsxd	 rax, edi
  0016e	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00172	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00176	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0017a	e8 00 00 00 00	 call	 validate_test
  0017f	ff c7		 inc	 edi
  00181	41 83 c4 02	 add	 r12d, 2
  00185	48 83 c5 50	 add	 rbp, 80			; 00000050H
  00189	85 c0		 test	 eax, eax
  0018b	0f 85 3f ff ff
	ff		 jne	 $LL11@validate_v@2
$LN20@validate_v@2:
  00191	33 db		 xor	 ebx, ebx

; 1275 :         }
; 1276 :         /*
; 1277 :          * [',' '**' vfpdef]
; 1278 :          */
; 1279 :         if (res && start + 2 < nch && TYPE(CHILD(tree, start+1)) == DOUBLESTAR)

  00193	e9 fd 00 00 00	 jmp	 $LN1@validate_v@2
$LN10@validate_v@2:
  00198	85 db		 test	 ebx, ebx
  0019a	0f 84 f5 00 00
	00		 je	 $LN1@validate_v@2
  001a0	8d 47 02	 lea	 eax, DWORD PTR [rdi+2]
  001a3	41 3b c5	 cmp	 eax, r13d
  001a6	0f 8d c4 00 00
	00		 jge	 $LN2@validate_v@2
  001ac	4c 8b 4e 20	 mov	 r9, QWORD PTR [rsi+32]
  001b0	48 63 cf	 movsxd	 rcx, edi
  001b3	48 8d 44 89 05	 lea	 rax, QWORD PTR [rcx+rcx*4+5]
  001b8	66 41 83 3c c1
	23		 cmp	 WORD PTR [r9+rax*8], 35	; 00000023H
  001be	0f 85 ac 00 00
	00		 jne	 $LN2@validate_v@2

; 1280 :             res = (validate_comma(CHILD(tree, start++))
; 1281 :                    && validate_doublestar(CHILD(tree, start++))
; 1282 :                    && validate_vfpdef(CHILD(tree, start++)));

  001c4	48 8d 04 89	 lea	 rax, QWORD PTR [rcx+rcx*4]
  001c8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  001cf	ba 0c 00 00 00	 mov	 edx, 12
  001d4	49 8d 0c c1	 lea	 rcx, QWORD PTR [r9+rax*8]
  001d8	e8 00 00 00 00	 call	 validate_terminal
  001dd	ff c7		 inc	 edi
  001df	85 c0		 test	 eax, eax
  001e1	74 40		 je	 SHORT $LN22@validate_v@2
  001e3	48 63 c7	 movsxd	 rax, edi
  001e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02FKAPCJPD@?$CK?$CK?$AA@
  001ed	ba 23 00 00 00	 mov	 edx, 35			; 00000023H
  001f2	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  001f6	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  001fa	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  001fe	e8 00 00 00 00	 call	 validate_terminal
  00203	ff c7		 inc	 edi
  00205	85 c0		 test	 eax, eax
  00207	74 1a		 je	 SHORT $LN22@validate_v@2
  00209	48 63 c7	 movsxd	 rax, edi
  0020c	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00210	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00214	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00218	e8 00 00 00 00	 call	 validate_vfpdef
  0021d	ff c7		 inc	 edi
  0021f	85 c0		 test	 eax, eax
  00221	75 48		 jne	 SHORT $LN31@validate_v@2
$LN22@validate_v@2:
  00223	33 db		 xor	 ebx, ebx

; 1283 :     }
; 1284 :     else if (TYPE(CHILD(tree, start)) == DOUBLESTAR) {

  00225	eb 6e		 jmp	 SHORT $LN1@validate_v@2
$LN14@validate_v@2:
  00227	66 83 f8 23	 cmp	 ax, 35			; 00000023H
  0022b	75 5a		 jne	 SHORT $LN5@validate_v@2

; 1285 :         /*
; 1286 :          * '**' vfpdef
; 1287 :          */
; 1288 :         if (start + 1 < nch)

  0022d	ff c7		 inc	 edi
  0022f	41 3b fd	 cmp	 edi, r13d
  00232	7d 4a		 jge	 SHORT $LN4@validate_v@2

; 1289 :             res = (validate_doublestar(CHILD(tree, start++))
; 1290 :                    && validate_vfpdef(CHILD(tree, start++)));

  00234	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02FKAPCJPD@?$CK?$CK?$AA@
  0023b	ba 23 00 00 00	 mov	 edx, 35			; 00000023H
  00240	e8 00 00 00 00	 call	 validate_terminal
  00245	85 c0		 test	 eax, eax
  00247	0f 84 44 ff ff
	ff		 je	 $LN20@validate_v@2
  0024d	48 63 c7	 movsxd	 rax, edi
  00250	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00254	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00258	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0025c	e8 00 00 00 00	 call	 validate_vfpdef
  00261	ff c7		 inc	 edi
  00263	85 c0		 test	 eax, eax
  00265	0f 84 26 ff ff
	ff		 je	 $LN20@validate_v@2
$LN31@validate_v@2:
  0026b	bb 01 00 00 00	 mov	 ebx, 1
$LN2@validate_v@2:

; 1299 :     }
; 1300 : 
; 1301 :     if (res && start != nch) {

  00270	41 3b fd	 cmp	 edi, r13d
  00273	74 20		 je	 SHORT $LN1@validate_v@2

; 1302 :         res = 0;
; 1303 :         err_string("unexpected extra children in varargslist trailer");

  00275	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@DKCHLGHN@unexpected?5extra?5children?5in?5var@
  0027c	eb 10		 jmp	 SHORT $LN32@validate_v@2
$LN4@validate_v@2:

; 1291 :         else {
; 1292 :             res = 0;
; 1293 :             err_string("expected vfpdef after ** in varargslist trailer");

  0027e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DA@FACEPCPA@expected?5vfpdef?5after?5?$CK?$CK?5in?5vara@

; 1294 :         }
; 1295 :     }
; 1296 :     else {

  00285	eb 07		 jmp	 SHORT $LN32@validate_v@2
$LN5@validate_v@2:

; 1298 :         err_string("expected * or ** in varargslist trailer");

  00287	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@EOOFKHNC@expected?5?$CK?5or?5?$CK?$CK?5in?5varargslist?5@
$LN32@validate_v@2:

; 1297 :         res = 0;

  0028e	33 db		 xor	 ebx, ebx

; 1298 :         err_string("expected * or ** in varargslist trailer");

  00290	e8 00 00 00 00	 call	 err_string
$LN1@validate_v@2:

; 1304 :     }
; 1305 :     return res;

  00295	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
  0029a	4c 8b 74 24 28	 mov	 r14, QWORD PTR [rsp+40]
  0029f	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]
  002a4	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  002a9	8b c3		 mov	 eax, ebx
  002ab	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 1306 : }

  002b0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  002b4	41 5d		 pop	 r13
  002b6	5f		 pop	 rdi
  002b7	5e		 pop	 rsi
  002b8	c3		 ret	 0
validate_varargslist_trailer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@HEHOEFB@illegal?5formation?5for?5varargslis@ ; `string'
PUBLIC	??_C@_0CA@BFNDAGCM@varargslist?5missing?5child?5nodes?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_varargslist DD imagerel validate_varargslist
	DD	imagerel validate_varargslist+108
	DD	imagerel $unwind$validate_varargslist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$validate_varargslist DD imagerel validate_varargslist+108
	DD	imagerel validate_varargslist+429
	DD	imagerel $chain$3$validate_varargslist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$validate_varargslist DD imagerel validate_varargslist+429
	DD	imagerel validate_varargslist+447
	DD	imagerel $chain$4$validate_varargslist
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$validate_varargslist DD 021H
	DD	imagerel validate_varargslist
	DD	imagerel validate_varargslist+108
	DD	imagerel $unwind$validate_varargslist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$validate_varargslist DD 060f21H
	DD	04e40fH
	DD	0cc40aH
	DD	0a6405H
	DD	imagerel validate_varargslist
	DD	imagerel validate_varargslist+108
	DD	imagerel $unwind$validate_varargslist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_varargslist DD 076101H
	DD	0b7461H
	DD	0f007420bH
	DD	05003d005H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_0CC@HEHOEFB@illegal?5formation?5for?5varargslis@
CONST	SEGMENT
??_C@_0CC@HEHOEFB@illegal?5formation?5for?5varargslis@ DB 'illegal format'
	DB	'ion for varargslist', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BFNDAGCM@varargslist?5missing?5child?5nodes?$AA@
CONST	SEGMENT
??_C@_0CA@BFNDAGCM@varargslist?5missing?5child?5nodes?$AA@ DB 'varargslis'
	DB	't missing child nodes', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_varargslist
_TEXT	SEGMENT
tree$ = 80
validate_varargslist PROC				; COMDAT

; 1327 : {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	41 55		 push	 r13
  00005	41 57		 push	 r15
  00007	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1328 :     int nch = NCH(tree);
; 1329 :     int res = (TYPE(tree) == varargslist ||
; 1330 :                TYPE(tree) == typedargslist) &&
; 1331 :               (nch != 0);

  0000b	0f b7 01	 movzx	 eax, WORD PTR [rcx]
  0000e	4c 63 79 18	 movsxd	 r15, DWORD PTR [rcx+24]
  00012	4c 8b e9	 mov	 r13, rcx
  00015	b9 0a 01 00 00	 mov	 ecx, 266		; 0000010aH
  0001a	66 3b c1	 cmp	 ax, cx
  0001d	74 0a		 je	 SHORT $LN16@validate_v@3
  0001f	b9 08 01 00 00	 mov	 ecx, 264		; 00000108H
  00024	66 3b c1	 cmp	 ax, cx
  00027	75 0c		 jne	 SHORT $LN17@validate_v@3
$LN16@validate_v@3:
  00029	45 85 ff	 test	 r15d, r15d
  0002c	74 07		 je	 SHORT $LN17@validate_v@3
  0002e	bb 01 00 00 00	 mov	 ebx, 1
  00033	eb 02		 jmp	 SHORT $LN18@validate_v@3
$LN17@validate_v@3:
  00035	33 db		 xor	 ebx, ebx
$LN18@validate_v@3:

; 1332 :     int sym;
; 1333 :     node *ch;
; 1334 :     int i = 0;

  00037	33 ed		 xor	 ebp, ebp

; 1335 : 
; 1336 :     if (!res)

  00039	85 db		 test	 ebx, ebx

; 1337 :         return 0;

  0003b	74 12		 je	 SHORT $LN30@validate_v@3

; 1338 :     if (nch < 1) {

  0003d	41 83 ff 01	 cmp	 r15d, 1
  00041	7d 19		 jge	 SHORT $LN21@validate_v@3

; 1339 :         err_string("varargslist missing child nodes");

  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@BFNDAGCM@varargslist?5missing?5child?5nodes?$AA@
  0004a	e8 00 00 00 00	 call	 err_string
$LN30@validate_v@3:

; 1340 :         return 0;

  0004f	33 c0		 xor	 eax, eax

; 1368 : }

  00051	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00055	41 5f		 pop	 r15
  00057	41 5d		 pop	 r13
  00059	5d		 pop	 rbp
  0005a	5b		 pop	 rbx
  0005b	c3		 ret	 0
$LN21@validate_v@3:
  0005c	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi

; 1332 :     int sym;
; 1333 :     node *ch;
; 1334 :     int i = 0;

  00061	33 ff		 xor	 edi, edi

; 1341 :     }
; 1342 :     while (i < nch) {

  00063	45 85 ff	 test	 r15d, r15d
  00066	0f 8e 41 01 00
	00		 jle	 $LN26@validate_v@3

; 1332 :     int sym;
; 1333 :     node *ch;
; 1334 :     int i = 0;

  0006c	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  00071	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12
  00076	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  0007b	44 8d 77 01	 lea	 r14d, QWORD PTR [rdi+1]
  0007f	33 f6		 xor	 esi, esi
  00081	44 8d 67 02	 lea	 r12d, QWORD PTR [rdi+2]
  00085	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL11@validate_v@3:

; 1343 :         ch = CHILD(tree, i);

  00090	49 8b 45 20	 mov	 rax, QWORD PTR [r13+32]
  00094	48 8d 0c 06	 lea	 rcx, QWORD PTR [rsi+rax]

; 1344 :         sym = TYPE(ch);

  00098	0f bf 04 06	 movsx	 eax, WORD PTR [rsi+rax]

; 1345 :         if (sym == vfpdef || sym == tfpdef) {

  0009c	3d 0b 01 00 00	 cmp	 eax, 267		; 0000010bH
  000a1	74 2c		 je	 SHORT $LN8@validate_v@3
  000a3	3d 09 01 00 00	 cmp	 eax, 265		; 00000109H
  000a8	74 25		 je	 SHORT $LN8@validate_v@3

; 1358 :             }
; 1359 :         } else if (sym == DOUBLESTAR || sym == STAR) {

  000aa	83 f8 23	 cmp	 eax, 35			; 00000023H
  000ad	0f 84 df 00 00
	00		 je	 $LN22@validate_v@3
  000b3	83 f8 10	 cmp	 eax, 16
  000b6	0f 84 d6 00 00
	00		 je	 $LN22@validate_v@3

; 1361 :             break;
; 1362 :         } else {
; 1363 :             res = 0;
; 1364 :             err_string("illegal formation for varargslist");

  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@HEHOEFB@illegal?5formation?5for?5varargslis@
  000c3	33 db		 xor	 ebx, ebx
  000c5	e8 00 00 00 00	 call	 err_string
  000ca	e9 b4 00 00 00	 jmp	 $LN5@validate_v@3
$LN8@validate_v@3:

; 1346 :             /* validate (vfpdef ['=' test] ',')+ */
; 1347 :             res = validate_vfpdef(ch);

  000cf	e8 00 00 00 00	 call	 validate_vfpdef

; 1348 :             ++i;

  000d4	ff c5		 inc	 ebp
  000d6	41 ff c4	 inc	 r12d
  000d9	41 ff c6	 inc	 r14d
  000dc	48 ff c7	 inc	 rdi
  000df	48 83 c6 28	 add	 rsi, 40			; 00000028H
  000e3	8b d8		 mov	 ebx, eax

; 1349 :             if (res && (i+2 <= nch) && TYPE(CHILD(tree, i)) == EQUAL) {

  000e5	85 c0		 test	 eax, eax
  000e7	0f 84 96 00 00
	00		 je	 $LN5@validate_v@3
  000ed	45 3b e7	 cmp	 r12d, r15d
  000f0	7f 5b		 jg	 SHORT $LN6@validate_v@3
  000f2	49 8b 55 20	 mov	 rdx, QWORD PTR [r13+32]
  000f6	66 83 3c 16 16	 cmp	 WORD PTR [rsi+rdx], 22
  000fb	75 50		 jne	 SHORT $LN6@validate_v@3

; 1350 :                 res = (validate_equal(CHILD(tree, i))
; 1351 :                        && validate_test(CHILD(tree, i+1)));

  000fd	48 63 c5	 movsxd	 rax, ebp
  00100	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01NEMOKFLO@?$DN?$AA@
  00107	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0010b	48 8d 0c ca	 lea	 rcx, QWORD PTR [rdx+rcx*8]
  0010f	ba 16 00 00 00	 mov	 edx, 22
  00114	e8 00 00 00 00	 call	 validate_terminal
  00119	85 c0		 test	 eax, eax
  0011b	74 71		 je	 SHORT $LN19@validate_v@3
  0011d	49 63 c6	 movsxd	 rax, r14d
  00120	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00124	49 8b 45 20	 mov	 rax, QWORD PTR [r13+32]
  00128	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0012c	e8 00 00 00 00	 call	 validate_test
  00131	85 c0		 test	 eax, eax
  00133	74 59		 je	 SHORT $LN19@validate_v@3

; 1353 :                   i += 2;

  00135	83 c5 02	 add	 ebp, 2
  00138	41 83 c4 02	 add	 r12d, 2
  0013c	41 83 c6 02	 add	 r14d, 2
  00140	48 83 c7 02	 add	 rdi, 2
  00144	bb 01 00 00 00	 mov	 ebx, 1
  00149	48 83 c6 50	 add	 rsi, 80			; 00000050H
$LN6@validate_v@3:

; 1354 :             }
; 1355 :             if (res && i < nch) {

  0014d	49 3b ff	 cmp	 rdi, r15
  00150	7d 4c		 jge	 SHORT $LN29@validate_v@3

; 1356 :                 res = validate_comma(CHILD(tree, i));

  00152	48 63 c5	 movsxd	 rax, ebp
  00155	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  0015c	ba 0c 00 00 00	 mov	 edx, 12
  00161	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00165	49 8b 45 20	 mov	 rax, QWORD PTR [r13+32]
  00169	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0016d	e8 00 00 00 00	 call	 validate_terminal

; 1357 :                 ++i;

  00172	ff c5		 inc	 ebp
  00174	41 ff c4	 inc	 r12d
  00177	41 ff c6	 inc	 r14d
  0017a	48 ff c7	 inc	 rdi
  0017d	8b d8		 mov	 ebx, eax
  0017f	48 83 c6 28	 add	 rsi, 40			; 00000028H
$LN5@validate_v@3:

; 1341 :     }
; 1342 :     while (i < nch) {

  00183	49 3b ff	 cmp	 rdi, r15
  00186	0f 8c 04 ff ff
	ff		 jl	 $LL11@validate_v@3
  0018c	eb 10		 jmp	 SHORT $LN29@validate_v@3
$LN19@validate_v@3:

; 1350 :                 res = (validate_equal(CHILD(tree, i))
; 1351 :                        && validate_test(CHILD(tree, i+1)));

  0018e	33 db		 xor	 ebx, ebx

; 1352 :                 if (res)

  00190	eb f1		 jmp	 SHORT $LN5@validate_v@3
$LN22@validate_v@3:

; 1360 :             res = validate_varargslist_trailer(tree, i);

  00192	8b d5		 mov	 edx, ebp
  00194	49 8b cd	 mov	 rcx, r13
  00197	e8 00 00 00 00	 call	 validate_varargslist_trailer
  0019c	8b d8		 mov	 ebx, eax
$LN29@validate_v@3:
  0019e	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]
  001a3	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  001a8	4c 8b 74 24 20	 mov	 r14, QWORD PTR [rsp+32]
$LN26@validate_v@3:

; 1365 :         }
; 1366 :     }
; 1367 :     return res;

  001ad	8b c3		 mov	 eax, ebx
  001af	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 1368 : }

  001b4	48 83 c4 28	 add	 rsp, 40			; 00000028H
  001b8	41 5f		 pop	 r15
  001ba	41 5d		 pop	 r13
  001bc	5d		 pop	 rbp
  001bd	5b		 pop	 rbx
  001be	c3		 ret	 0
validate_varargslist ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@EJAOEKGC@Illegal?5compound?5statement?5type?3@ ; `string'
PUBLIC	??_C@_0O@DDEPOMNL@compound_stmt?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_compound_stmt DD imagerel validate_compound_stmt
	DD	imagerel validate_compound_stmt+181
	DD	imagerel $unwind$validate_compound_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_compound_stmt DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CF@EJAOEKGC@Illegal?5compound?5statement?5type?3@
CONST	SEGMENT
??_C@_0CF@EJAOEKGC@Illegal?5compound?5statement?5type?3@ DB 'Illegal comp'
	DB	'ound statement type: %d.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DDEPOMNL@compound_stmt?$AA@
CONST	SEGMENT
??_C@_0O@DDEPOMNL@compound_stmt?$AA@ DB 'compound_stmt', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_compound_stmt
_TEXT	SEGMENT
tree$ = 48
validate_compound_stmt PROC				; COMDAT

; 1516 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1517 :     int res = (validate_ntype(tree, compound_stmt)
; 1518 :                && validate_numnodes(tree, 1, "compound_stmt"));

  00006	ba 25 01 00 00	 mov	 edx, 293		; 00000125H
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 validate_ntype
  00013	85 c0		 test	 eax, eax
  00015	0f 84 92 00 00
	00		 je	 $LN7@validate_c
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@DDEPOMNL@compound_stmt?$AA@
  00022	ba 01 00 00 00	 mov	 edx, 1
  00027	48 8b cb	 mov	 rcx, rbx
  0002a	e8 00 00 00 00	 call	 validate_numnodes
  0002f	85 c0		 test	 eax, eax
  00031	74 7a		 je	 SHORT $LN7@validate_c

; 1523 : 
; 1524 :     tree = CHILD(tree, 0);

  00033	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]

; 1525 :     ntype = TYPE(tree);

  00037	44 0f bf 01	 movsx	 r8d, WORD PTR [rcx]

; 1526 :     if (  (ntype == if_stmt)
; 1527 :           || (ntype == while_stmt)
; 1528 :           || (ntype == for_stmt)
; 1529 :           || (ntype == try_stmt)
; 1530 :           || (ntype == with_stmt)
; 1531 :           || (ntype == funcdef)
; 1532 :           || (ntype == classdef)
; 1533 :           || (ntype == decorated))

  0003b	41 81 f8 26 01
	00 00		 cmp	 r8d, 294		; 00000126H
  00042	74 5c		 je	 SHORT $LN2@validate_c
  00044	41 81 f8 27 01
	00 00		 cmp	 r8d, 295		; 00000127H
  0004b	74 53		 je	 SHORT $LN2@validate_c
  0004d	41 81 f8 28 01
	00 00		 cmp	 r8d, 296		; 00000128H
  00054	74 4a		 je	 SHORT $LN2@validate_c
  00056	41 81 f8 29 01
	00 00		 cmp	 r8d, 297		; 00000129H
  0005d	74 41		 je	 SHORT $LN2@validate_c
  0005f	41 81 f8 2a 01
	00 00		 cmp	 r8d, 298		; 0000012aH
  00066	74 38		 je	 SHORT $LN2@validate_c
  00068	41 81 f8 06 01
	00 00		 cmp	 r8d, 262		; 00000106H
  0006f	74 2f		 je	 SHORT $LN2@validate_c
  00071	41 81 f8 49 01
	00 00		 cmp	 r8d, 329		; 00000149H
  00078	74 26		 je	 SHORT $LN2@validate_c
  0007a	41 81 f8 05 01
	00 00		 cmp	 r8d, 261		; 00000105H
  00081	74 1d		 je	 SHORT $LN2@validate_c

; 1535 :     else {
; 1536 :         res = 0;
; 1537 :         PyErr_Format(parser_error,
; 1538 :                      "Illegal compound statement type: %d.", TYPE(tree));

  00083	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@EJAOEKGC@Illegal?5compound?5statement?5type?3@
  00091	33 db		 xor	 ebx, ebx
  00093	e8 00 00 00 00	 call	 PyErr_Format

; 1539 :     }
; 1540 :     return (res);

  00098	8b c3		 mov	 eax, ebx

; 1541 : }

  0009a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009e	5b		 pop	 rbx
  0009f	c3		 ret	 0
$LN2@validate_c:

; 1534 :         res = validate_node(tree);

  000a0	e8 00 00 00 00	 call	 validate_node
  000a5	8b d8		 mov	 ebx, eax

; 1541 : }

  000a7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ab	5b		 pop	 rbx
  000ac	c3		 ret	 0
$LN7@validate_c:

; 1519 :     int ntype;
; 1520 : 
; 1521 :     if (!res)
; 1522 :         return (0);

  000ad	33 c0		 xor	 eax, eax

; 1541 : }

  000af	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b3	5b		 pop	 rbx
  000b4	c3		 ret	 0
validate_compound_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_06LNOFJDNM@return?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_return_stmt DD imagerel validate_return_stmt
	DD	imagerel validate_return_stmt+122
	DD	imagerel $unwind$validate_return_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_return_stmt DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_06LNOFJDNM@return?$AA@
CONST	SEGMENT
??_C@_06LNOFJDNM@return?$AA@ DB 'return', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_return_stmt
_TEXT	SEGMENT
tree$ = 48
validate_return_stmt PROC				; COMDAT

; 1610 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1611 :     int nch = NCH(tree);

  0000a	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]

; 1612 :     int res = (validate_ntype(tree, return_stmt)
; 1613 :                && ((nch == 1) || (nch == 2))
; 1614 :                && validate_name(CHILD(tree, 0), "return"));

  0000d	ba 17 01 00 00	 mov	 edx, 279		; 00000117H
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	74 4f		 je	 SHORT $LN5@validate_r@2
  0001e	83 fb 01	 cmp	 ebx, 1
  00021	74 05		 je	 SHORT $LN4@validate_r@2
  00023	83 fb 02	 cmp	 ebx, 2
  00026	75 45		 jne	 SHORT $LN5@validate_r@2
$LN4@validate_r@2:
  00028	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0002c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06LNOFJDNM@return?$AA@
  00033	ba 01 00 00 00	 mov	 edx, 1
  00038	e8 00 00 00 00	 call	 validate_terminal
  0003d	85 c0		 test	 eax, eax
  0003f	74 2c		 je	 SHORT $LN5@validate_r@2

; 1615 : 
; 1616 :     if (res && (nch == 2))

  00041	83 fb 02	 cmp	 ebx, 2
  00044	75 17		 jne	 SHORT $LN8@validate_r@2

; 1617 :         res = validate_testlist(CHILD(tree, 1));

  00046	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0004a	48 83 c1 28	 add	 rcx, 40			; 00000028H

; 1620 : }

  0004e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	e9 00 00 00 00	 jmp	 validate_testlist
$LN8@validate_r@2:

; 1618 : 
; 1619 :     return (res);

  0005d	b8 01 00 00 00	 mov	 eax, 1

; 1620 : }

  00062	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00067	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006b	5f		 pop	 rdi
  0006c	c3		 ret	 0
$LN5@validate_r@2:

; 1618 : 
; 1619 :     return (res);

  0006d	33 c0		 xor	 eax, eax

; 1620 : }

  0006f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00074	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00078	5f		 pop	 rdi
  00079	c3		 ret	 0
validate_return_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_04HNEBHLOP@from?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_yield_arg DD imagerel validate_yield_arg
	DD	imagerel validate_yield_arg+120
	DD	imagerel $unwind$validate_yield_arg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_yield_arg DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_04HNEBHLOP@from?$AA@
CONST	SEGMENT
??_C@_04HNEBHLOP@from?$AA@ DB 'from', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_yield_arg
_TEXT	SEGMENT
tree$ = 48
validate_yield_arg PROC					; COMDAT

; 1674 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1675 :     int nch = NCH(tree);

  0000a	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]

; 1676 :     if (!validate_ntype(tree, yield_arg))

  0000d	ba 51 01 00 00	 mov	 edx, 337		; 00000151H
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax

; 1677 :         return 0;

  0001c	74 30		 je	 SHORT $LN12@validate_y

; 1678 :     switch (nch) {

  0001e	ff cb		 dec	 ebx
  00020	74 39		 je	 SHORT $LN6@validate_y
  00022	ff cb		 dec	 ebx

; 1688 :         break;
; 1689 :       default:
; 1690 :         return 0;

  00024	75 28		 jne	 SHORT $LN12@validate_y

; 1682 :         break;
; 1683 :       case 2:
; 1684 :         if (!validate_name(CHILD(tree, 0), "from"))

  00026	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0002a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04HNEBHLOP@from?$AA@
  00031	8d 53 01	 lea	 edx, QWORD PTR [rbx+1]
  00034	e8 00 00 00 00	 call	 validate_terminal
  00039	85 c0		 test	 eax, eax

; 1685 :             return 0;

  0003b	74 11		 je	 SHORT $LN12@validate_y

; 1686 :         if (!validate_test(CHILD(tree, 1)))

  0003d	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00041	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00045	e8 00 00 00 00	 call	 validate_test
  0004a	85 c0		 test	 eax, eax
  0004c	75 1a		 jne	 SHORT $LN5@validate_y
$LN12@validate_y:

; 1687 :             return 0;

  0004e	33 c0		 xor	 eax, eax

; 1693 : }

  00050	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00055	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00059	5f		 pop	 rdi
  0005a	c3		 ret	 0
$LN6@validate_y:

; 1679 :       case 1:
; 1680 :         if (!validate_testlist(CHILD(tree, nch - 1)))

  0005b	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0005f	e8 00 00 00 00	 call	 validate_testlist
  00064	85 c0		 test	 eax, eax

; 1681 :             return 0;

  00066	74 e6		 je	 SHORT $LN12@validate_y
$LN5@validate_y:

; 1691 :     }
; 1692 :     return 1;

  00068	b8 01 00 00 00	 mov	 eax, 1

; 1693 : }

  0006d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00072	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00076	5f		 pop	 rdi
  00077	c3		 ret	 0
validate_yield_arg ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@PCHGNAAG@import_as_name?$AA@		; `string'
PUBLIC	??_C@_02ENLJKNMP@as?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_import_as_name DD imagerel validate_import_as_name
	DD	imagerel validate_import_as_name+195
	DD	imagerel $unwind$validate_import_as_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_import_as_name DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0P@PCHGNAAG@import_as_name?$AA@
CONST	SEGMENT
??_C@_0P@PCHGNAAG@import_as_name?$AA@ DB 'import_as_name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02ENLJKNMP@as?$AA@
CONST	SEGMENT
??_C@_02ENLJKNMP@as?$AA@ DB 'as', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_import_as_name
_TEXT	SEGMENT
tree$ = 48
validate_import_as_name PROC				; COMDAT

; 1708 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1709 :     int nch = NCH(tree);

  0000a	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]

; 1710 :     int ok = validate_ntype(tree, import_as_name);

  0000d	ba 1d 01 00 00	 mov	 edx, 285		; 0000011dH
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype

; 1711 : 
; 1712 :     if (ok) {

  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 96 00 00
	00		 je	 $LN10@validate_i

; 1713 :         if (nch == 1)

  00022	83 fb 01	 cmp	 ebx, 1
  00025	75 18		 jne	 SHORT $LN4@validate_i

; 1714 :             ok = validate_name(CHILD(tree, 0), NULL);

  00027	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0002b	45 33 c0	 xor	 r8d, r8d
  0002e	8b d3		 mov	 edx, ebx

; 1723 : }

  00030	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5f		 pop	 rdi
  0003a	e9 00 00 00 00	 jmp	 validate_terminal
$LN4@validate_i:

; 1715 :         else if (nch == 3)

  0003f	83 fb 03	 cmp	 ebx, 3
  00042	75 60		 jne	 SHORT $LN2@validate_i

; 1716 :             ok = (validate_name(CHILD(tree, 0), NULL)
; 1717 :                   && validate_name(CHILD(tree, 1), "as")
; 1718 :                   && validate_name(CHILD(tree, 2), NULL));

  00044	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00048	8d 53 fe	 lea	 edx, QWORD PTR [rbx-2]
  0004b	45 33 c0	 xor	 r8d, r8d
  0004e	e8 00 00 00 00	 call	 validate_terminal
  00053	85 c0		 test	 eax, eax
  00055	74 40		 je	 SHORT $LN8@validate_i
  00057	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0005b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02ENLJKNMP@as?$AA@
  00062	8d 53 fe	 lea	 edx, QWORD PTR [rbx-2]
  00065	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00069	e8 00 00 00 00	 call	 validate_terminal
  0006e	85 c0		 test	 eax, eax
  00070	74 25		 je	 SHORT $LN8@validate_i
  00072	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00076	8d 53 fe	 lea	 edx, QWORD PTR [rbx-2]
  00079	45 33 c0	 xor	 r8d, r8d
  0007c	48 83 c1 50	 add	 rcx, 80			; 00000050H
  00080	e8 00 00 00 00	 call	 validate_terminal
  00085	85 c0		 test	 eax, eax
  00087	74 0e		 je	 SHORT $LN8@validate_i

; 1721 :     }
; 1722 :     return ok;

  00089	8d 43 fe	 lea	 eax, QWORD PTR [rbx-2]

; 1723 : }

  0008c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00091	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00095	5f		 pop	 rdi
  00096	c3		 ret	 0
$LN8@validate_i:

; 1721 :     }
; 1722 :     return ok;

  00097	33 c0		 xor	 eax, eax

; 1723 : }

  00099	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a2	5f		 pop	 rdi
  000a3	c3		 ret	 0
$LN2@validate_i:

; 1719 :         else
; 1720 :             ok = validate_numnodes(tree, 3, "import_as_name");

  000a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@PCHGNAAG@import_as_name?$AA@
  000ab	ba 03 00 00 00	 mov	 edx, 3
  000b0	48 8b cf	 mov	 rcx, rdi
  000b3	e8 00 00 00 00	 call	 validate_numnodes
$LN10@validate_i:

; 1723 : }

  000b8	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000bd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c1	5f		 pop	 rdi
  000c2	c3		 ret	 0
validate_import_as_name ENDP
_TEXT	ENDS
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_dotted_name DD imagerel validate_dotted_name
	DD	imagerel validate_dotted_name+186
	DD	imagerel $unwind$validate_dotted_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_dotted_name DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_dotted_name
_TEXT	SEGMENT
tree$ = 48
validate_dotted_name PROC				; COMDAT

; 1730 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1731 :     int nch = NCH(tree);

  0000f	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 1732 :     int res = (validate_ntype(tree, dotted_name)
; 1733 :                && is_odd(nch)
; 1734 :                && validate_name(CHILD(tree, 0), NULL));

  00012	ba 21 01 00 00	 mov	 edx, 289		; 00000121H
  00017	48 8b f1	 mov	 rsi, rcx
  0001a	e8 00 00 00 00	 call	 validate_ntype
  0001f	85 c0		 test	 eax, eax
  00021	74 21		 je	 SHORT $LN6@validate_d
  00023	40 f6 c7 01	 test	 dil, 1
  00027	74 1b		 je	 SHORT $LN6@validate_d
  00029	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  0002d	45 33 c0	 xor	 r8d, r8d
  00030	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  00034	e8 00 00 00 00	 call	 validate_terminal
  00039	85 c0		 test	 eax, eax
  0003b	74 07		 je	 SHORT $LN6@validate_d
  0003d	b8 01 00 00 00	 mov	 eax, 1
  00042	eb 02		 jmp	 SHORT $LN7@validate_d
$LN6@validate_d:
  00044	33 c0		 xor	 eax, eax
$LN7@validate_d:

; 1735 :     int i;
; 1736 : 
; 1737 :     for (i = 1; res && (i < nch); i += 2) {

  00046	bb 01 00 00 00	 mov	 ebx, 1
  0004b	85 c0		 test	 eax, eax
  0004d	74 5b		 je	 SHORT $LN12@validate_d
  0004f	90		 npad	 1
$LL3@validate_d:
  00050	3b df		 cmp	 ebx, edi
  00052	7d 56		 jge	 SHORT $LN12@validate_d

; 1738 :         res = (validate_dot(CHILD(tree, i))
; 1739 :                && validate_name(CHILD(tree, i+1), NULL));

  00054	48 63 c3	 movsxd	 rax, ebx
  00057	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  0005e	ba 17 00 00 00	 mov	 edx, 23
  00063	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00067	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0006b	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0006f	e8 00 00 00 00	 call	 validate_terminal
  00074	85 c0		 test	 eax, eax
  00076	74 29		 je	 SHORT $LN8@validate_d
  00078	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  0007b	45 33 c0	 xor	 r8d, r8d
  0007e	48 63 c8	 movsxd	 rcx, eax
  00081	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00085	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00089	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  0008d	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  00091	e8 00 00 00 00	 call	 validate_terminal
  00096	85 c0		 test	 eax, eax
  00098	74 07		 je	 SHORT $LN8@validate_d
  0009a	b8 01 00 00 00	 mov	 eax, 1
  0009f	eb 02		 jmp	 SHORT $LN9@validate_d
$LN8@validate_d:
  000a1	33 c0		 xor	 eax, eax
$LN9@validate_d:

; 1735 :     int i;
; 1736 : 
; 1737 :     for (i = 1; res && (i < nch); i += 2) {

  000a3	83 c3 02	 add	 ebx, 2
  000a6	85 c0		 test	 eax, eax
  000a8	75 a6		 jne	 SHORT $LL3@validate_d
$LN12@validate_d:

; 1740 :     }
; 1741 :     return res;
; 1742 : }

  000aa	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000af	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000b4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b8	5f		 pop	 rdi
  000b9	c3		 ret	 0
validate_dotted_name ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@LFFPLA@illegal?5number?5of?5children?5for?5d@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_dotted_as_name DD imagerel validate_dotted_as_name
	DD	imagerel validate_dotted_as_name+161
	DD	imagerel $unwind$validate_dotted_as_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_dotted_as_name DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CO@LFFPLA@illegal?5number?5of?5children?5for?5d@
CONST	SEGMENT
??_C@_0CO@LFFPLA@illegal?5number?5of?5children?5for?5d@ DB 'illegal numbe'
	DB	'r of children for dotted_as_name', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_dotted_as_name
_TEXT	SEGMENT
tree$ = 48
validate_dotted_as_name PROC				; COMDAT

; 1749 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1750 :     int nch = NCH(tree);

  0000a	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 1751 :     int res = validate_ntype(tree, dotted_as_name);

  0000d	ba 1e 01 00 00	 mov	 edx, 286		; 0000011eH
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype

; 1752 : 
; 1753 :     if (res) {

  0001a	85 c0		 test	 eax, eax
  0001c	74 78		 je	 SHORT $LN10@validate_d@2

; 1754 :         if (nch == 1)

  0001e	83 ff 01	 cmp	 edi, 1
  00021	75 13		 jne	 SHORT $LN4@validate_d@2

; 1755 :             res = validate_dotted_name(CHILD(tree, 0));

  00023	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]

; 1766 : }

  00027	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5f		 pop	 rdi
  00031	e9 00 00 00 00	 jmp	 validate_dotted_name
$LN4@validate_d@2:

; 1756 :         else if (nch == 3)

  00036	83 ff 03	 cmp	 edi, 3
  00039	75 4d		 jne	 SHORT $LN2@validate_d@2

; 1757 :             res = (validate_dotted_name(CHILD(tree, 0))
; 1758 :                    && validate_name(CHILD(tree, 1), "as")
; 1759 :                    && validate_name(CHILD(tree, 2), NULL));

  0003b	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0003f	e8 00 00 00 00	 call	 validate_dotted_name
  00044	85 c0		 test	 eax, eax
  00046	74 4c		 je	 SHORT $LN8@validate_d@2
  00048	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0004c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02ENLJKNMP@as?$AA@
  00053	8d 57 fe	 lea	 edx, QWORD PTR [rdi-2]
  00056	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0005a	e8 00 00 00 00	 call	 validate_terminal
  0005f	85 c0		 test	 eax, eax
  00061	74 31		 je	 SHORT $LN8@validate_d@2
  00063	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00067	8d 57 fe	 lea	 edx, QWORD PTR [rdi-2]
  0006a	45 33 c0	 xor	 r8d, r8d
  0006d	48 83 c1 50	 add	 rcx, 80			; 00000050H
  00071	e8 00 00 00 00	 call	 validate_terminal
  00076	85 c0		 test	 eax, eax
  00078	74 1a		 je	 SHORT $LN8@validate_d@2

; 1763 :         }
; 1764 :     }
; 1765 :     return res;

  0007a	8d 47 fe	 lea	 eax, QWORD PTR [rdi-2]

; 1766 : }

  0007d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	5f		 pop	 rdi
  00087	c3		 ret	 0
$LN2@validate_d@2:

; 1760 :         else {
; 1761 :             res = 0;
; 1762 :             err_string("illegal number of children for dotted_as_name");

  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@LFFPLA@illegal?5number?5of?5children?5for?5d@
  0008f	e8 00 00 00 00	 call	 err_string
$LN8@validate_d@2:

; 1763 :         }
; 1764 :     }
; 1765 :     return res;

  00094	33 c0		 xor	 eax, eax
$LN10@validate_d@2:

; 1766 : }

  00096	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
validate_dotted_as_name ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_dotted_as_names DD imagerel validate_dotted_as_names
	DD	imagerel validate_dotted_as_names+163
	DD	imagerel $unwind$validate_dotted_as_names
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_dotted_as_names DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT validate_dotted_as_names
_TEXT	SEGMENT
tree$ = 48
validate_dotted_as_names PROC				; COMDAT

; 1772 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1773 :         int nch = NCH(tree);

  0000f	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]
  00012	48 8b f1	 mov	 rsi, rcx

; 1774 :         int res = is_odd(nch) && validate_dotted_as_name(CHILD(tree, 0));

  00015	40 f6 c7 01	 test	 dil, 1
  00019	74 14		 je	 SHORT $LN6@validate_d@3
  0001b	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0001f	e8 00 00 00 00	 call	 validate_dotted_as_name
  00024	85 c0		 test	 eax, eax
  00026	74 07		 je	 SHORT $LN6@validate_d@3
  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	eb 02		 jmp	 SHORT $LN7@validate_d@3
$LN6@validate_d@3:
  0002f	33 c0		 xor	 eax, eax
$LN7@validate_d@3:

; 1775 :         int i;
; 1776 : 
; 1777 :         for (i = 1; res && (i < nch); i += 2)

  00031	bb 01 00 00 00	 mov	 ebx, 1
  00036	85 c0		 test	 eax, eax
  00038	74 59		 je	 SHORT $LN12@validate_d@3
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL3@validate_d@3:
  00040	3b df		 cmp	 ebx, edi
  00042	7d 4f		 jge	 SHORT $LN12@validate_d@3

; 1778 :             res = (validate_comma(CHILD(tree, i))
; 1779 :                    && validate_dotted_as_name(CHILD(tree, i + 1)));

  00044	48 63 c3	 movsxd	 rax, ebx
  00047	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  0004e	ba 0c 00 00 00	 mov	 edx, 12
  00053	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00057	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0005b	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0005f	e8 00 00 00 00	 call	 validate_terminal
  00064	85 c0		 test	 eax, eax
  00066	74 22		 je	 SHORT $LN8@validate_d@3
  00068	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  0006b	48 63 c8	 movsxd	 rcx, eax
  0006e	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00072	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00076	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  0007a	e8 00 00 00 00	 call	 validate_dotted_as_name
  0007f	85 c0		 test	 eax, eax
  00081	74 07		 je	 SHORT $LN8@validate_d@3
  00083	b8 01 00 00 00	 mov	 eax, 1
  00088	eb 02		 jmp	 SHORT $LN9@validate_d@3
$LN8@validate_d@3:
  0008a	33 c0		 xor	 eax, eax
$LN9@validate_d@3:

; 1775 :         int i;
; 1776 : 
; 1777 :         for (i = 1; res && (i < nch); i += 2)

  0008c	83 c3 02	 add	 ebx, 2
  0008f	85 c0		 test	 eax, eax
  00091	75 ad		 jne	 SHORT $LL3@validate_d@3
$LN12@validate_d@3:

; 1780 :         return (res);
; 1781 : }

  00093	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00098	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0009d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a1	5f		 pop	 rdi
  000a2	c3		 ret	 0
validate_dotted_as_names ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_import_as_names DD imagerel validate_import_as_names
	DD	imagerel validate_import_as_names+29
	DD	imagerel $unwind$validate_import_as_names
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$validate_import_as_names DD imagerel validate_import_as_names+29
	DD	imagerel validate_import_as_names+127
	DD	imagerel $chain$0$validate_import_as_names
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$validate_import_as_names DD imagerel validate_import_as_names+127
	DD	imagerel validate_import_as_names+138
	DD	imagerel $chain$1$validate_import_as_names
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$validate_import_as_names DD 021H
	DD	imagerel validate_import_as_names
	DD	imagerel validate_import_as_names+29
	DD	imagerel $unwind$validate_import_as_names
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$validate_import_as_names DD 020521H
	DD	063405H
	DD	imagerel validate_import_as_names
	DD	imagerel validate_import_as_names+29
	DD	imagerel $unwind$validate_import_as_names
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_import_as_names DD 040a01H
	DD	07640aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT validate_import_as_names
_TEXT	SEGMENT
tree$ = 48
validate_import_as_names PROC				; COMDAT

; 1787 : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1788 :     int nch = NCH(tree);

  0000a	8b 71 18	 mov	 esi, DWORD PTR [rcx+24]
  0000d	48 8b f9	 mov	 rdi, rcx

; 1789 :     int res = validate_import_as_name(CHILD(tree, 0));

  00010	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00014	e8 00 00 00 00	 call	 validate_import_as_name

; 1790 :     int i;
; 1791 : 
; 1792 :     for (i = 1; res && (i + 1 < nch); i += 2)

  00019	85 c0		 test	 eax, eax
  0001b	74 62		 je	 SHORT $LN1@validate_i@2

; 1788 :     int nch = NCH(tree);

  0001d	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00022	bb 02 00 00 00	 mov	 ebx, 2
$LL3@validate_i@2:

; 1790 :     int i;
; 1791 : 
; 1792 :     for (i = 1; res && (i + 1 < nch); i += 2)

  00027	3b de		 cmp	 ebx, esi
  00029	7d 4f		 jge	 SHORT $LN12@validate_i@2

; 1793 :         res = (validate_comma(CHILD(tree, i))
; 1794 :                && validate_import_as_name(CHILD(tree, i + 1)));

  0002b	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
  0002e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  00035	48 63 c8	 movsxd	 rcx, eax
  00038	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0003c	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00040	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00044	ba 0c 00 00 00	 mov	 edx, 12
  00049	e8 00 00 00 00	 call	 validate_terminal
  0004e	85 c0		 test	 eax, eax
  00050	74 1f		 je	 SHORT $LN6@validate_i@2
  00052	48 63 c3	 movsxd	 rax, ebx
  00055	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00059	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0005d	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00061	e8 00 00 00 00	 call	 validate_import_as_name
  00066	85 c0		 test	 eax, eax
  00068	74 07		 je	 SHORT $LN6@validate_i@2
  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	eb 02		 jmp	 SHORT $LN7@validate_i@2
$LN6@validate_i@2:
  00071	33 c0		 xor	 eax, eax
$LN7@validate_i@2:

; 1790 :     int i;
; 1791 : 
; 1792 :     for (i = 1; res && (i + 1 < nch); i += 2)

  00073	83 c3 02	 add	 ebx, 2
  00076	85 c0		 test	 eax, eax
  00078	75 ad		 jne	 SHORT $LL3@validate_i@2
$LN12@validate_i@2:
  0007a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN1@validate_i@2:

; 1795 :     return (res);
; 1796 : }

  0007f	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00084	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00088	5f		 pop	 rdi
  00089	c3		 ret	 0
validate_import_as_names ENDP
_TEXT	ENDS
PUBLIC	??_C@_06EOGGDCGF@import?$AA@			; `string'
PUBLIC	??_C@_0M@CJJFDJPH@import_name?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_import_name DD imagerel validate_import_name
	DD	imagerel validate_import_name+108
	DD	imagerel $unwind$validate_import_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_import_name DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_06EOGGDCGF@import?$AA@
CONST	SEGMENT
??_C@_06EOGGDCGF@import?$AA@ DB 'import', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CJJFDJPH@import_name?$AA@
CONST	SEGMENT
??_C@_0M@CJJFDJPH@import_name?$AA@ DB 'import_name', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_import_name
_TEXT	SEGMENT
tree$ = 48
validate_import_name PROC				; COMDAT

; 1802 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1803 :         return (validate_ntype(tree, import_name)
; 1804 :                 && validate_numnodes(tree, 2, "import_name")
; 1805 :                 && validate_name(CHILD(tree, 0), "import")
; 1806 :                 && validate_dotted_as_names(CHILD(tree, 1)));

  00006	ba 1b 01 00 00	 mov	 edx, 283		; 0000011bH
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 validate_ntype
  00013	85 c0		 test	 eax, eax
  00015	74 4d		 je	 SHORT $LN3@validate_i@3
  00017	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@CJJFDJPH@import_name?$AA@
  0001e	ba 02 00 00 00	 mov	 edx, 2
  00023	48 8b cb	 mov	 rcx, rbx
  00026	e8 00 00 00 00	 call	 validate_numnodes
  0002b	85 c0		 test	 eax, eax
  0002d	74 35		 je	 SHORT $LN3@validate_i@3
  0002f	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00033	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06EOGGDCGF@import?$AA@
  0003a	ba 01 00 00 00	 mov	 edx, 1
  0003f	e8 00 00 00 00	 call	 validate_terminal
  00044	85 c0		 test	 eax, eax
  00046	74 1c		 je	 SHORT $LN3@validate_i@3
  00048	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0004c	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00050	e8 00 00 00 00	 call	 validate_dotted_as_names
  00055	85 c0		 test	 eax, eax
  00057	74 0b		 je	 SHORT $LN3@validate_i@3
  00059	b8 01 00 00 00	 mov	 eax, 1

; 1807 : }

  0005e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
$LN3@validate_i@3:

; 1803 :         return (validate_ntype(tree, import_name)
; 1804 :                 && validate_numnodes(tree, 2, "import_name")
; 1805 :                 && validate_name(CHILD(tree, 0), "import")
; 1806 :                 && validate_dotted_as_names(CHILD(tree, 1)));

  00064	33 c0		 xor	 eax, eax

; 1807 : }

  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5b		 pop	 rbx
  0006b	c3		 ret	 0
validate_import_name ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT count_from_dots
_TEXT	SEGMENT
tree$ = 8
count_from_dots PROC					; COMDAT

; 1815 :     int i;
; 1816 :     for (i = 1; i < NCH(tree); i++)

  00000	44 8b 41 18	 mov	 r8d, DWORD PTR [rcx+24]
  00004	b8 01 00 00 00	 mov	 eax, 1
  00009	44 3b c0	 cmp	 r8d, eax
  0000c	7e 22		 jle	 SHORT $LN11@count_from
  0000e	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00012	48 83 c1 28	 add	 rcx, 40			; 00000028H
$LL4@count_from:

; 1817 :         if (TYPE(CHILD(tree, i)) != DOT && TYPE(CHILD(tree, i)) != ELLIPSIS)

  00016	0f b7 11	 movzx	 edx, WORD PTR [rcx]
  00019	66 83 fa 17	 cmp	 dx, 23
  0001d	74 06		 je	 SHORT $LN3@count_from
  0001f	66 83 fa 33	 cmp	 dx, 51			; 00000033H
  00023	75 0b		 jne	 SHORT $LN11@count_from
$LN3@count_from:

; 1815 :     int i;
; 1816 :     for (i = 1; i < NCH(tree); i++)

  00025	ff c0		 inc	 eax
  00027	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0002b	41 3b c0	 cmp	 eax, r8d
  0002e	7c e6		 jl	 SHORT $LL4@count_from
$LN11@count_from:

; 1818 :             break;
; 1819 :     return i - 1;

  00030	ff c8		 dec	 eax

; 1820 : }

  00032	c3		 ret	 0
count_from_dots ENDP
_TEXT	ENDS
PUBLIC	??_C@_01PKGAHCOL@?$CJ?$AA@			; `string'
PUBLIC	??_C@_01ODHLEDKK@?$CI?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_import_from DD imagerel validate_import_from
	DD	imagerel validate_import_from+408
	DD	imagerel $unwind$validate_import_from
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_import_from DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0d0143218H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ?$AA@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ?$AA@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ODHLEDKK@?$CI?$AA@
CONST	SEGMENT
??_C@_01ODHLEDKK@?$CI?$AA@ DB '(', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_import_from
_TEXT	SEGMENT
tree$ = 64
validate_import_from PROC				; COMDAT

; 1827 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1828 :         int nch = NCH(tree);

  00018	8b 69 18	 mov	 ebp, DWORD PTR [rcx+24]
  0001b	48 8b f9	 mov	 rdi, rcx

; 1829 :         int ndots = count_from_dots(tree);

  0001e	e8 00 00 00 00	 call	 count_from_dots

; 1830 :         int havename = (TYPE(CHILD(tree, ndots + 1)) == dotted_name);

  00023	48 8b 57 20	 mov	 rdx, QWORD PTR [rdi+32]
  00027	4c 63 e8	 movsxd	 r13, eax
  0002a	b8 21 01 00 00	 mov	 eax, 289		; 00000121H
  0002f	45 33 e4	 xor	 r12d, r12d
  00032	4f 8d 44 ad 05	 lea	 r8, QWORD PTR [r13+r13*4+5]

; 1831 :         int offset = ndots + havename;
; 1832 :         int res = validate_ntype(tree, import_from)
; 1833 :                 && (offset >= 1)
; 1834 :                 && (nch >= 3 + offset)
; 1835 :                 && validate_name(CHILD(tree, 0), "from")
; 1836 :                 && (!havename || validate_dotted_name(CHILD(tree, ndots + 1)))
; 1837 :                 && validate_name(CHILD(tree, offset + 1), "import");

  00037	48 8b cf	 mov	 rcx, rdi
  0003a	66 42 39 04 c2	 cmp	 WORD PTR [rdx+r8*8], ax
  0003f	8d 50 fb	 lea	 edx, QWORD PTR [rax-5]
  00042	41 0f 94 c4	 sete	 r12b
  00046	43 8d 1c 2c	 lea	 ebx, DWORD PTR [r12+r13]
  0004a	e8 00 00 00 00	 call	 validate_ntype
  0004f	85 c0		 test	 eax, eax
  00051	0f 84 26 01 00
	00		 je	 $LN6@validate_i@4
  00057	83 fb 01	 cmp	 ebx, 1
  0005a	0f 8c 1d 01 00
	00		 jl	 $LN6@validate_i@4
  00060	8d 73 03	 lea	 esi, DWORD PTR [rbx+3]
  00063	3b ee		 cmp	 ebp, esi
  00065	0f 8c 12 01 00
	00		 jl	 $LN6@validate_i@4
  0006b	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0006f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04HNEBHLOP@from?$AA@
  00076	ba 01 00 00 00	 mov	 edx, 1
  0007b	e8 00 00 00 00	 call	 validate_terminal
  00080	85 c0		 test	 eax, eax
  00082	0f 84 f5 00 00
	00		 je	 $LN6@validate_i@4
  00088	45 85 e4	 test	 r12d, r12d
  0008b	74 20		 je	 SHORT $LN7@validate_i@4
  0008d	41 8d 45 01	 lea	 eax, DWORD PTR [r13+1]
  00091	48 63 c8	 movsxd	 rcx, eax
  00094	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00098	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  0009c	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  000a0	e8 00 00 00 00	 call	 validate_dotted_name
  000a5	85 c0		 test	 eax, eax
  000a7	0f 84 d0 00 00
	00		 je	 $LN6@validate_i@4
$LN7@validate_i@4:
  000ad	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  000b0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06EOGGDCGF@import?$AA@
  000b7	48 63 c8	 movsxd	 rcx, eax
  000ba	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000be	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  000c2	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  000c6	ba 01 00 00 00	 mov	 edx, 1
  000cb	e8 00 00 00 00	 call	 validate_terminal
  000d0	85 c0		 test	 eax, eax
  000d2	0f 84 a5 00 00
	00		 je	 $LN6@validate_i@4

; 1838 : 
; 1839 :         if (res && TYPE(CHILD(tree, offset + 2)) == LPAR)

  000d8	48 8b 57 20	 mov	 rdx, QWORD PTR [rdi+32]
  000dc	48 63 c3	 movsxd	 rax, ebx
  000df	48 8d 44 80 0a	 lea	 rax, QWORD PTR [rax+rax*4+10]
  000e4	0f b7 0c c2	 movzx	 ecx, WORD PTR [rdx+rax*8]
  000e8	66 83 f9 07	 cmp	 cx, 7
  000ec	75 74		 jne	 SHORT $LN12@validate_i@4

; 1840 :             res = ((nch == offset + 5)
; 1841 :                    && validate_lparen(CHILD(tree, offset + 2))
; 1842 :                    && validate_import_as_names(CHILD(tree, offset + 3))
; 1843 :                    && validate_rparen(CHILD(tree, offset + 4)));

  000ee	8d 43 05	 lea	 eax, DWORD PTR [rbx+5]
  000f1	3b e8		 cmp	 ebp, eax
  000f3	0f 85 84 00 00
	00		 jne	 $LN6@validate_i@4
  000f9	8d 43 02	 lea	 eax, DWORD PTR [rbx+2]
  000fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI?$AA@
  00103	48 63 c8	 movsxd	 rcx, eax
  00106	48 8d 04 89	 lea	 rax, QWORD PTR [rcx+rcx*4]
  0010a	48 8d 0c c2	 lea	 rcx, QWORD PTR [rdx+rax*8]
  0010e	ba 07 00 00 00	 mov	 edx, 7
  00113	e8 00 00 00 00	 call	 validate_terminal
  00118	85 c0		 test	 eax, eax
  0011a	74 61		 je	 SHORT $LN6@validate_i@4
  0011c	48 63 c6	 movsxd	 rax, esi
  0011f	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00123	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00127	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0012b	e8 00 00 00 00	 call	 validate_import_as_names
  00130	85 c0		 test	 eax, eax
  00132	74 49		 je	 SHORT $LN6@validate_i@4
  00134	8d 4b 04	 lea	 ecx, DWORD PTR [rbx+4]
  00137	48 63 d1	 movsxd	 rdx, ecx
  0013a	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0013e	4c 8d 04 92	 lea	 r8, QWORD PTR [rdx+rdx*4]
  00142	ba 08 00 00 00	 mov	 edx, 8
  00147	4a 8d 0c c1	 lea	 rcx, QWORD PTR [rcx+r8*8]
  0014b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
  00152	e8 00 00 00 00	 call	 validate_terminal
  00157	85 c0		 test	 eax, eax
  00159	74 22		 je	 SHORT $LN6@validate_i@4
$LN13@validate_i@4:

; 1846 :         return (res);

  0015b	b8 01 00 00 00	 mov	 eax, 1
  00160	eb 1d		 jmp	 SHORT $LN1@validate_i@4
$LN12@validate_i@4:

; 1844 :         else if (res && TYPE(CHILD(tree, offset + 2)) != STAR)

  00162	66 83 f9 10	 cmp	 cx, 16
  00166	74 f3		 je	 SHORT $LN13@validate_i@4

; 1845 :             res = validate_import_as_names(CHILD(tree, offset + 2));

  00168	8d 43 02	 lea	 eax, DWORD PTR [rbx+2]
  0016b	48 63 c8	 movsxd	 rcx, eax
  0016e	48 8d 04 89	 lea	 rax, QWORD PTR [rcx+rcx*4]
  00172	48 8d 0c c2	 lea	 rcx, QWORD PTR [rdx+rax*8]
  00176	e8 00 00 00 00	 call	 validate_import_as_names
  0017b	eb 02		 jmp	 SHORT $LN1@validate_i@4
$LN6@validate_i@4:

; 1846 :         return (res);

  0017d	33 c0		 xor	 eax, eax
$LN1@validate_i@4:

; 1847 : }

  0017f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00184	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00189	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0018e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00192	41 5d		 pop	 r13
  00194	41 5c		 pop	 r12
  00196	5f		 pop	 rdi
  00197	c3		 ret	 0
validate_import_from ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@BAMCCOHB@Unrecognized?5child?5node?5of?5impor@ ; `string'
PUBLIC	??_C@_0BP@PEGCBHED@illegal?5import_stmt?5child?5type?$AA@ ; `string'
PUBLIC	??_C@_0M@IFPLOOHJ@import_stmt?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_import_stmt DD imagerel validate_import_stmt
	DD	imagerel validate_import_stmt+143
	DD	imagerel $unwind$validate_import_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_import_stmt DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CM@BAMCCOHB@Unrecognized?5child?5node?5of?5impor@
CONST	SEGMENT
??_C@_0CM@BAMCCOHB@Unrecognized?5child?5node?5of?5impor@ DB 'Unrecognized'
	DB	' child node of import_stmt: %d.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PEGCBHED@illegal?5import_stmt?5child?5type?$AA@
CONST	SEGMENT
??_C@_0BP@PEGCBHED@illegal?5import_stmt?5child?5type?$AA@ DB 'illegal imp'
	DB	'ort_stmt child type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IFPLOOHJ@import_stmt?$AA@
CONST	SEGMENT
??_C@_0M@IFPLOOHJ@import_stmt?$AA@ DB 'import_stmt', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_import_stmt
_TEXT	SEGMENT
tree$ = 48
validate_import_stmt PROC				; COMDAT

; 1853 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1854 :     int nch = NCH(tree);

  0000a	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 1855 :     int res = validate_numnodes(tree, 1, "import_stmt");

  0000d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@IFPLOOHJ@import_stmt?$AA@
  00014	ba 01 00 00 00	 mov	 edx, 1
  00019	48 8b d9	 mov	 rbx, rcx
  0001c	e8 00 00 00 00	 call	 validate_numnodes

; 1856 : 
; 1857 :     if (res) {

  00021	85 c0		 test	 eax, eax
  00023	74 3d		 je	 SHORT $LN6@validate_i@5

; 1858 :         int ntype = TYPE(CHILD(tree, 0));

  00025	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00029	0f bf 01	 movsx	 eax, WORD PTR [rcx]

; 1859 : 
; 1860 :         if (ntype == import_name || ntype == import_from)

  0002c	3d 1b 01 00 00	 cmp	 eax, 283		; 0000011bH
  00031	74 20		 je	 SHORT $LN4@validate_i@5
  00033	3d 1c 01 00 00	 cmp	 eax, 284		; 0000011cH
  00038	74 19		 je	 SHORT $LN4@validate_i@5

; 1861 :             res = validate_node(CHILD(tree, 0));
; 1862 :         else {
; 1863 :             res = 0;
; 1864 :             err_string("illegal import_stmt child type");

  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@PEGCBHED@illegal?5import_stmt?5child?5type?$AA@
  00041	e8 00 00 00 00	 call	 err_string

; 1872 :     }
; 1873 :     return (res);

  00046	33 c0		 xor	 eax, eax

; 1874 : }

  00048	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
$LN4@validate_i@5:
  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
  0005d	e9 00 00 00 00	 jmp	 validate_node
$LN6@validate_i@5:

; 1865 :         }
; 1866 :     }
; 1867 :     else if (nch == 1) {

  00062	83 ff 01	 cmp	 edi, 1
  00065	75 1d		 jne	 SHORT $LN9@validate_i@5

; 1868 :         res = 0;
; 1869 :         PyErr_Format(parser_error,
; 1870 :                      "Unrecognized child node of import_stmt: %d.",
; 1871 :                      TYPE(CHILD(tree, 0)));

  00067	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@BAMCCOHB@Unrecognized?5child?5node?5of?5impor@
  00072	44 0f bf 01	 movsx	 r8d, WORD PTR [rcx]
  00076	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  0007d	e8 00 00 00 00	 call	 PyErr_Format

; 1872 :     }
; 1873 :     return (res);

  00082	33 c0		 xor	 eax, eax
$LN9@validate_i@5:

; 1874 : }

  00084	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00089	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008d	5f		 pop	 rdi
  0008e	c3		 ret	 0
validate_import_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@CJBALKIM@illegal?5global?5statement?$AA@ ; `string'
PUBLIC	??_C@_06FJKEMHGD@global?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_global_stmt DD imagerel validate_global_stmt
	DD	imagerel validate_global_stmt+255
	DD	imagerel $unwind$validate_global_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_global_stmt DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0BJ@CJBALKIM@illegal?5global?5statement?$AA@
CONST	SEGMENT
??_C@_0BJ@CJBALKIM@illegal?5global?5statement?$AA@ DB 'illegal global sta'
	DB	'tement', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJKEMHGD@global?$AA@
CONST	SEGMENT
??_C@_06FJKEMHGD@global?$AA@ DB 'global', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_global_stmt
_TEXT	SEGMENT
tree$ = 48
validate_global_stmt PROC				; COMDAT

; 1883 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1884 :     int j;
; 1885 :     int nch = NCH(tree);

  00014	8b 71 18	 mov	 esi, DWORD PTR [rcx+24]

; 1886 :     int res = (validate_ntype(tree, global_stmt)
; 1887 :                && is_even(nch) && (nch >= 2));

  00017	ba 22 01 00 00	 mov	 edx, 290		; 00000122H
  0001c	48 8b e9	 mov	 rbp, rcx
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 45		 je	 SHORT $LN8@validate_g
  00028	40 f6 c6 01	 test	 sil, 1
  0002c	75 3f		 jne	 SHORT $LN8@validate_g
  0002e	83 fe 02	 cmp	 esi, 2
  00031	7c 3a		 jl	 SHORT $LN8@validate_g

; 1891 : 
; 1892 :     if (res)
; 1893 :         res = (validate_name(CHILD(tree, 0), "global")
; 1894 :                && validate_ntype(CHILD(tree, 1), NAME));

  00033	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  00037	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06FJKEMHGD@global?$AA@
  0003e	ba 01 00 00 00	 mov	 edx, 1
  00043	e8 00 00 00 00	 call	 validate_terminal
  00048	85 c0		 test	 eax, eax
  0004a	74 1d		 je	 SHORT $LN10@validate_g
  0004c	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  00050	ba 01 00 00 00	 mov	 edx, 1
  00055	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00059	e8 00 00 00 00	 call	 validate_ntype
  0005e	85 c0		 test	 eax, eax
  00060	74 07		 je	 SHORT $LN10@validate_g
  00062	bb 01 00 00 00	 mov	 ebx, 1
  00067	eb 1c		 jmp	 SHORT $LN11@validate_g
$LN10@validate_g:
  00069	33 db		 xor	 ebx, ebx
  0006b	eb 18		 jmp	 SHORT $LN11@validate_g
$LN8@validate_g:

; 1886 :     int res = (validate_ntype(tree, global_stmt)
; 1887 :                && is_even(nch) && (nch >= 2));

  0006d	33 db		 xor	 ebx, ebx

; 1888 : 
; 1889 :     if (!res && !PyErr_Occurred())

  0006f	e8 00 00 00 00	 call	 PyErr_Occurred
  00074	48 85 c0	 test	 rax, rax
  00077	75 0c		 jne	 SHORT $LN11@validate_g

; 1890 :         err_string("illegal global statement");

  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@CJBALKIM@illegal?5global?5statement?$AA@
  00080	e8 00 00 00 00	 call	 err_string
$LN11@validate_g:

; 1895 :     for (j = 2; res && (j < nch); j += 2)

  00085	bf 02 00 00 00	 mov	 edi, 2
  0008a	85 db		 test	 ebx, ebx
  0008c	74 5a		 je	 SHORT $LN18@validate_g
  0008e	66 90		 npad	 2
$LL3@validate_g:
  00090	3b fe		 cmp	 edi, esi
  00092	7d 54		 jge	 SHORT $LN18@validate_g

; 1896 :         res = (validate_comma(CHILD(tree, j))
; 1897 :                && validate_ntype(CHILD(tree, j + 1), NAME));

  00094	48 63 c7	 movsxd	 rax, edi
  00097	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  0009e	ba 0c 00 00 00	 mov	 edx, 12
  000a3	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  000a7	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  000ab	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  000af	e8 00 00 00 00	 call	 validate_terminal
  000b4	85 c0		 test	 eax, eax
  000b6	74 27		 je	 SHORT $LN12@validate_g
  000b8	8d 47 01	 lea	 eax, DWORD PTR [rdi+1]
  000bb	48 63 c8	 movsxd	 rcx, eax
  000be	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  000c2	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  000c6	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  000ca	ba 01 00 00 00	 mov	 edx, 1
  000cf	e8 00 00 00 00	 call	 validate_ntype
  000d4	85 c0		 test	 eax, eax
  000d6	74 07		 je	 SHORT $LN12@validate_g
  000d8	bb 01 00 00 00	 mov	 ebx, 1
  000dd	eb 02		 jmp	 SHORT $LN13@validate_g
$LN12@validate_g:
  000df	33 db		 xor	 ebx, ebx
$LN13@validate_g:

; 1895 :     for (j = 2; res && (j < nch); j += 2)

  000e1	83 c7 02	 add	 edi, 2
  000e4	85 db		 test	 ebx, ebx
  000e6	75 a8		 jne	 SHORT $LL3@validate_g
$LN18@validate_g:

; 1898 : 
; 1899 :     return (res);
; 1900 : }

  000e8	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000ed	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000f2	8b c3		 mov	 eax, ebx
  000f4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000f9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000fd	5f		 pop	 rdi
  000fe	c3		 ret	 0
validate_global_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@LBDMHHNE@illegal?5nonlocal?5statement?$AA@ ; `string'
PUBLIC	??_C@_08JCIPMGCE@nonlocal?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_nonlocal_stmt DD imagerel validate_nonlocal_stmt
	DD	imagerel validate_nonlocal_stmt+255
	DD	imagerel $unwind$validate_nonlocal_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_nonlocal_stmt DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0BL@LBDMHHNE@illegal?5nonlocal?5statement?$AA@
CONST	SEGMENT
??_C@_0BL@LBDMHHNE@illegal?5nonlocal?5statement?$AA@ DB 'illegal nonlocal'
	DB	' statement', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08JCIPMGCE@nonlocal?$AA@
CONST	SEGMENT
??_C@_08JCIPMGCE@nonlocal?$AA@ DB 'nonlocal', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_nonlocal_stmt
_TEXT	SEGMENT
tree$ = 48
validate_nonlocal_stmt PROC				; COMDAT

; 1908 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1909 :     int j;
; 1910 :     int nch = NCH(tree);

  00014	8b 71 18	 mov	 esi, DWORD PTR [rcx+24]

; 1911 :     int res = (validate_ntype(tree, nonlocal_stmt)
; 1912 :                && is_even(nch) && (nch >= 2));

  00017	ba 23 01 00 00	 mov	 edx, 291		; 00000123H
  0001c	48 8b e9	 mov	 rbp, rcx
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 45		 je	 SHORT $LN8@validate_n@3
  00028	40 f6 c6 01	 test	 sil, 1
  0002c	75 3f		 jne	 SHORT $LN8@validate_n@3
  0002e	83 fe 02	 cmp	 esi, 2
  00031	7c 3a		 jl	 SHORT $LN8@validate_n@3

; 1916 : 
; 1917 :     if (res)
; 1918 :         res = (validate_name(CHILD(tree, 0), "nonlocal")
; 1919 :                && validate_ntype(CHILD(tree, 1), NAME));

  00033	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  00037	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08JCIPMGCE@nonlocal?$AA@
  0003e	ba 01 00 00 00	 mov	 edx, 1
  00043	e8 00 00 00 00	 call	 validate_terminal
  00048	85 c0		 test	 eax, eax
  0004a	74 1d		 je	 SHORT $LN10@validate_n@3
  0004c	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  00050	ba 01 00 00 00	 mov	 edx, 1
  00055	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00059	e8 00 00 00 00	 call	 validate_ntype
  0005e	85 c0		 test	 eax, eax
  00060	74 07		 je	 SHORT $LN10@validate_n@3
  00062	bb 01 00 00 00	 mov	 ebx, 1
  00067	eb 1c		 jmp	 SHORT $LN11@validate_n@3
$LN10@validate_n@3:
  00069	33 db		 xor	 ebx, ebx
  0006b	eb 18		 jmp	 SHORT $LN11@validate_n@3
$LN8@validate_n@3:

; 1911 :     int res = (validate_ntype(tree, nonlocal_stmt)
; 1912 :                && is_even(nch) && (nch >= 2));

  0006d	33 db		 xor	 ebx, ebx

; 1913 : 
; 1914 :     if (!res && !PyErr_Occurred())

  0006f	e8 00 00 00 00	 call	 PyErr_Occurred
  00074	48 85 c0	 test	 rax, rax
  00077	75 0c		 jne	 SHORT $LN11@validate_n@3

; 1915 :         err_string("illegal nonlocal statement");

  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@LBDMHHNE@illegal?5nonlocal?5statement?$AA@
  00080	e8 00 00 00 00	 call	 err_string
$LN11@validate_n@3:

; 1920 :     for (j = 2; res && (j < nch); j += 2)

  00085	bf 02 00 00 00	 mov	 edi, 2
  0008a	85 db		 test	 ebx, ebx
  0008c	74 5a		 je	 SHORT $LN18@validate_n@3
  0008e	66 90		 npad	 2
$LL3@validate_n@3:
  00090	3b fe		 cmp	 edi, esi
  00092	7d 54		 jge	 SHORT $LN18@validate_n@3

; 1921 :         res = (validate_comma(CHILD(tree, j))
; 1922 :                && validate_ntype(CHILD(tree, j + 1), NAME));

  00094	48 63 c7	 movsxd	 rax, edi
  00097	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  0009e	ba 0c 00 00 00	 mov	 edx, 12
  000a3	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  000a7	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  000ab	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  000af	e8 00 00 00 00	 call	 validate_terminal
  000b4	85 c0		 test	 eax, eax
  000b6	74 27		 je	 SHORT $LN12@validate_n@3
  000b8	8d 47 01	 lea	 eax, DWORD PTR [rdi+1]
  000bb	48 63 c8	 movsxd	 rcx, eax
  000be	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  000c2	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  000c6	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  000ca	ba 01 00 00 00	 mov	 edx, 1
  000cf	e8 00 00 00 00	 call	 validate_ntype
  000d4	85 c0		 test	 eax, eax
  000d6	74 07		 je	 SHORT $LN12@validate_n@3
  000d8	bb 01 00 00 00	 mov	 ebx, 1
  000dd	eb 02		 jmp	 SHORT $LN13@validate_n@3
$LN12@validate_n@3:
  000df	33 db		 xor	 ebx, ebx
$LN13@validate_n@3:

; 1920 :     for (j = 2; res && (j < nch); j += 2)

  000e1	83 c7 02	 add	 edi, 2
  000e4	85 db		 test	 ebx, ebx
  000e6	75 a8		 jne	 SHORT $LL3@validate_n@3
$LN18@validate_n@3:

; 1923 : 
; 1924 :     return res;
; 1925 : }

  000e8	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000ed	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000f2	8b c3		 mov	 eax, ebx
  000f4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000f9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000fd	5f		 pop	 rdi
  000fe	c3		 ret	 0
validate_nonlocal_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@NAGHNPAP@unknown?5comparison?5operator?$AA@ ; `string'
PUBLIC	??_C@_03NJKJADM@not?$AA@			; `string'
PUBLIC	??_C@_07LCFKNJG@comp_op?$AA@			; `string'
PUBLIC	??_C@_0BG@FKPNMIFG@illegal?5operator?5?8?$CFs?8?$AA@ ; `string'
PUBLIC	??_C@_02EDKKPMHH@is?$AA@			; `string'
PUBLIC	??_C@_02LMMGJAGL@in?$AA@			; `string'
PUBLIC	??_C@_0CB@OBDDMBL@illegal?5comparison?5operator?5type@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_comp_op DD imagerel validate_comp_op
	DD	imagerel validate_comp_op+403
	DD	imagerel $unwind$validate_comp_op
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_comp_op DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BM@NAGHNPAP@unknown?5comparison?5operator?$AA@
CONST	SEGMENT
??_C@_0BM@NAGHNPAP@unknown?5comparison?5operator?$AA@ DB 'unknown compari'
	DB	'son operator', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJKJADM@not?$AA@
CONST	SEGMENT
??_C@_03NJKJADM@not?$AA@ DB 'not', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07LCFKNJG@comp_op?$AA@
CONST	SEGMENT
??_C@_07LCFKNJG@comp_op?$AA@ DB 'comp_op', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FKPNMIFG@illegal?5operator?5?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_0BG@FKPNMIFG@illegal?5operator?5?8?$CFs?8?$AA@ DB 'illegal operator'
	DB	' ''%s''', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02EDKKPMHH@is?$AA@
CONST	SEGMENT
??_C@_02EDKKPMHH@is?$AA@ DB 'is', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGJAGL@in?$AA@
CONST	SEGMENT
??_C@_02LMMGJAGL@in?$AA@ DB 'in', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OBDDMBL@illegal?5comparison?5operator?5type@
CONST	SEGMENT
??_C@_0CB@OBDDMBL@illegal?5comparison?5operator?5type@ DB 'illegal compar'
	DB	'ison operator type', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_comp_op
_TEXT	SEGMENT
tree$ = 48
validate_comp_op PROC					; COMDAT

; 2175 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2176 :     int res = 0;
; 2177 :     int nch = NCH(tree);

  0000f	8b 71 18	 mov	 esi, DWORD PTR [rcx+24]

; 2178 : 
; 2179 :     if (!validate_ntype(tree, comp_op))

  00012	ba 36 01 00 00	 mov	 edx, 310		; 00000136H
  00017	48 8b f9	 mov	 rdi, rcx
  0001a	33 db		 xor	 ebx, ebx
  0001c	e8 00 00 00 00	 call	 validate_ntype
  00021	85 c0		 test	 eax, eax
  00023	75 10		 jne	 SHORT $LN11@validate_c@2

; 2221 : }

  00025	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
$LN11@validate_c@2:

; 2180 :         return (0);
; 2181 :     if (nch == 1) {

  00035	83 fe 01	 cmp	 esi, 1
  00038	0f 85 90 00 00
	00		 jne	 $LN10@validate_c@2

; 2182 :         /*
; 2183 :          *  Only child will be a terminal with a well-defined symbolic name
; 2184 :          *  or a NAME with a string of either 'is' or 'in'
; 2185 :          */
; 2186 :         tree = CHILD(tree, 0);

  0003e	4c 8b 47 20	 mov	 r8, QWORD PTR [rdi+32]

; 2187 :         switch (TYPE(tree)) {

  00042	41 0f bf 00	 movsx	 eax, WORD PTR [r8]
  00046	3b c6		 cmp	 eax, esi
  00048	74 35		 je	 SHORT $LN6@validate_c@2
  0004a	83 f8 13	 cmp	 eax, 19
  0004d	7e 24		 jle	 SHORT $LN4@validate_c@2
  0004f	83 f8 16	 cmp	 eax, 22
  00052	7e 08		 jle	 SHORT $LN7@validate_c@2
  00054	83 c0 e5	 add	 eax, -27		; ffffffe5H
  00057	83 f8 03	 cmp	 eax, 3
  0005a	77 17		 ja	 SHORT $LN4@validate_c@2
$LN7@validate_c@2:

; 2188 :           case LESS:
; 2189 :           case GREATER:
; 2190 :           case EQEQUAL:
; 2191 :           case EQUAL:
; 2192 :           case LESSEQUAL:
; 2193 :           case GREATEREQUAL:
; 2194 :           case NOTEQUAL:
; 2195 :               res = 1;

  0005c	bb 01 00 00 00	 mov	 ebx, 1

; 2219 :     }
; 2220 :     return (res);

  00061	8b c3		 mov	 eax, ebx

; 2221 : }

  00063	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00068	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0006d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00071	5f		 pop	 rdi
  00072	c3		 ret	 0
$LN4@validate_c@2:

; 2203 :               }
; 2204 :               break;
; 2205 :           default:
; 2206 :               err_string("illegal comparison operator type");

  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@OBDDMBL@illegal?5comparison?5operator?5type@

; 2207 :               break;

  0007a	e9 fd 00 00 00	 jmp	 $LN23@validate_c@2
$LN6@validate_c@2:

; 2196 :               break;
; 2197 :           case NAME:
; 2198 :               res = ((strcmp(STR(tree), "in") == 0)
; 2199 :                      || (strcmp(STR(tree), "is") == 0));

  0007f	4d 8b 40 08	 mov	 r8, QWORD PTR [r8+8]
  00083	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_02LMMGJAGL@in?$AA@
  0008a	b9 03 00 00 00	 mov	 ecx, 3
  0008f	49 8b f0	 mov	 rsi, r8
  00092	f3 a6		 repe cmpsb
  00094	74 c6		 je	 SHORT $LN7@validate_c@2
  00096	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_02EDKKPMHH@is?$AA@
  0009d	49 8b f0	 mov	 rsi, r8
  000a0	b9 03 00 00 00	 mov	 ecx, 3
  000a5	f3 a6		 repe cmpsb
  000a7	74 b3		 je	 SHORT $LN7@validate_c@2

; 2200 :               if (!res) {
; 2201 :                   PyErr_Format(parser_error,
; 2202 :                                "illegal operator '%s'", STR(tree));

  000a9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  000b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@FKPNMIFG@illegal?5operator?5?8?$CFs?8?$AA@
  000b7	e8 00 00 00 00	 call	 PyErr_Format

; 2219 :     }
; 2220 :     return (res);

  000bc	8b c3		 mov	 eax, ebx

; 2221 : }

  000be	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c3	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000c8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cc	5f		 pop	 rdi
  000cd	c3		 ret	 0
$LN10@validate_c@2:

; 2208 :         }
; 2209 :     }
; 2210 :     else if ((res = validate_numnodes(tree, 2, "comp_op")) != 0) {

  000ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07LCFKNJG@comp_op?$AA@
  000d5	ba 02 00 00 00	 mov	 edx, 2
  000da	48 8b cf	 mov	 rcx, rdi
  000dd	e8 00 00 00 00	 call	 validate_numnodes
  000e2	8b d8		 mov	 ebx, eax
  000e4	85 c0		 test	 eax, eax
  000e6	0f 84 95 00 00
	00		 je	 $LN1@validate_c@2

; 2211 :         res = (validate_ntype(CHILD(tree, 0), NAME)
; 2212 :                && validate_ntype(CHILD(tree, 1), NAME)
; 2213 :                && (((strcmp(STR(CHILD(tree, 0)), "is") == 0)
; 2214 :                     && (strcmp(STR(CHILD(tree, 1)), "not") == 0))
; 2215 :                    || ((strcmp(STR(CHILD(tree, 0)), "not") == 0)
; 2216 :                        && (strcmp(STR(CHILD(tree, 1)), "in") == 0))));

  000ec	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  000f0	bb 01 00 00 00	 mov	 ebx, 1
  000f5	8b d3		 mov	 edx, ebx
  000f7	e8 00 00 00 00	 call	 validate_ntype
  000fc	85 c0		 test	 eax, eax
  000fe	74 69		 je	 SHORT $LN16@validate_c@2
  00100	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00104	8b d3		 mov	 edx, ebx
  00106	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0010a	e8 00 00 00 00	 call	 validate_ntype
  0010f	85 c0		 test	 eax, eax
  00111	74 56		 je	 SHORT $LN16@validate_c@2
  00113	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00117	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_02EDKKPMHH@is?$AA@
  0011e	b9 03 00 00 00	 mov	 ecx, 3
  00123	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00127	48 8b f2	 mov	 rsi, rdx
  0012a	f3 a6		 repe cmpsb
  0012c	75 14		 jne	 SHORT $LN17@validate_c@2
  0012e	48 8b 70 30	 mov	 rsi, QWORD PTR [rax+48]
  00132	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03NJKJADM@not?$AA@
  00139	b9 04 00 00 00	 mov	 ecx, 4
  0013e	f3 a6		 repe cmpsb
  00140	74 3f		 je	 SHORT $LN1@validate_c@2
$LN17@validate_c@2:
  00142	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03NJKJADM@not?$AA@
  00149	48 8b f2	 mov	 rsi, rdx
  0014c	b9 04 00 00 00	 mov	 ecx, 4
  00151	f3 a6		 repe cmpsb
  00153	75 14		 jne	 SHORT $LN16@validate_c@2
  00155	48 8b 70 30	 mov	 rsi, QWORD PTR [rax+48]
  00159	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_02LMMGJAGL@in?$AA@
  00160	b9 03 00 00 00	 mov	 ecx, 3
  00165	f3 a6		 repe cmpsb
  00167	74 18		 je	 SHORT $LN1@validate_c@2
$LN16@validate_c@2:
  00169	33 db		 xor	 ebx, ebx

; 2217 :         if (!res && !PyErr_Occurred())

  0016b	e8 00 00 00 00	 call	 PyErr_Occurred
  00170	48 85 c0	 test	 rax, rax
  00173	75 0c		 jne	 SHORT $LN1@validate_c@2

; 2218 :             err_string("unknown comparison operator");

  00175	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@NAGHNPAP@unknown?5comparison?5operator?$AA@
$LN23@validate_c@2:
  0017c	e8 00 00 00 00	 call	 err_string
$LN1@validate_c@2:

; 2221 : }

  00181	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00186	8b c3		 mov	 eax, ebx
  00188	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0018d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00191	5f		 pop	 rdi
  00192	c3		 ret	 0
validate_comp_op ENDP
_TEXT	ENDS
PUBLIC	??_C@_09IAILODKE@star_expr?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_star_expr DD imagerel validate_star_expr
	DD	imagerel validate_star_expr+101
	DD	imagerel $unwind$validate_star_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_star_expr DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_09IAILODKE@star_expr?$AA@
CONST	SEGMENT
??_C@_09IAILODKE@star_expr?$AA@ DB 'star_expr', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_star_expr
_TEXT	SEGMENT
tree$ = 48
validate_star_expr PROC					; COMDAT

; 2226 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2227 :     int res = validate_ntype(tree, star_expr);

  00006	ba 37 01 00 00	 mov	 edx, 311		; 00000137H
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 validate_ntype

; 2228 :     if (!res) return res;

  00013	85 c0		 test	 eax, eax
  00015	74 46		 je	 SHORT $LN5@validate_s@2

; 2229 :     if (!validate_numnodes(tree, 2, "star_expr"))

  00017	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09IAILODKE@star_expr?$AA@
  0001e	ba 02 00 00 00	 mov	 edx, 2
  00023	48 8b cb	 mov	 rcx, rbx
  00026	e8 00 00 00 00	 call	 validate_numnodes
  0002b	85 c0		 test	 eax, eax

; 2230 :         return 0;

  0002d	74 2e		 je	 SHORT $LN5@validate_s@2

; 2231 :     return validate_ntype(CHILD(tree, 0), STAR) &&      \
; 2232 :         validate_expr(CHILD(tree, 1));

  0002f	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00033	ba 10 00 00 00	 mov	 edx, 16
  00038	e8 00 00 00 00	 call	 validate_ntype
  0003d	85 c0		 test	 eax, eax
  0003f	74 1c		 je	 SHORT $LN5@validate_s@2
  00041	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00045	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00049	e8 00 00 00 00	 call	 validate_expr
  0004e	85 c0		 test	 eax, eax
  00050	74 0b		 je	 SHORT $LN5@validate_s@2
  00052	b8 01 00 00 00	 mov	 eax, 1

; 2233 : }

  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5b		 pop	 rbx
  0005c	c3		 ret	 0
$LN5@validate_s@2:

; 2231 :     return validate_ntype(CHILD(tree, 0), STAR) &&      \
; 2232 :         validate_expr(CHILD(tree, 1));

  0005d	33 c0		 xor	 eax, eax

; 2233 : }

  0005f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00063	5b		 pop	 rbx
  00064	c3		 ret	 0
validate_star_expr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_chain_two_ops DD imagerel validate_chain_two_ops
	DD	imagerel validate_chain_two_ops+198
	DD	imagerel $unwind$validate_chain_two_ops
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_chain_two_ops DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT validate_chain_two_ops
_TEXT	SEGMENT
tree$ = 80
termvalid$ = 88
op1$ = 96
op2$ = 104
validate_chain_two_ops PROC				; COMDAT

; 2289 :  {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2291 :     int nch = NCH(tree);

  0001c	48 63 71 18	 movsxd	 rsi, DWORD PTR [rcx+24]
  00020	bf 01 00 00 00	 mov	 edi, 1
  00025	45 8b f9	 mov	 r15d, r9d
  00028	45 8b e8	 mov	 r13d, r8d
  0002b	4c 8b f2	 mov	 r14, rdx
  0002e	48 8b e9	 mov	 rbp, rcx

; 2292 :     int res = (is_odd(nch)
; 2293 :                && (*termvalid)(CHILD(tree, 0)));

  00031	40 84 f7	 test	 sil, dil
  00034	74 0f		 je	 SHORT $LN8@validate_c@3
  00036	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0003a	41 ff d6	 call	 r14
  0003d	85 c0		 test	 eax, eax
  0003f	74 04		 je	 SHORT $LN8@validate_c@3
  00041	8b cf		 mov	 ecx, edi
  00043	eb 02		 jmp	 SHORT $LN9@validate_c@3
$LN8@validate_c@3:
  00045	33 c9		 xor	 ecx, ecx
$LN9@validate_c@3:

; 2290 :     int pos = 1;

  00047	48 8b df	 mov	 rbx, rdi

; 2294 : 
; 2295 :     for ( ; res && (pos < nch); pos += 2) {

  0004a	4c 8b e6	 mov	 r12, rsi
  0004d	85 c9		 test	 ecx, ecx
  0004f	74 56		 je	 SHORT $LN12@validate_c@3

; 2290 :     int pos = 1;

  00051	be 28 00 00 00	 mov	 esi, 40			; 00000028H
$LL5@validate_c@3:

; 2294 : 
; 2295 :     for ( ; res && (pos < nch); pos += 2) {

  00056	49 3b dc	 cmp	 rbx, r12
  00059	7d 4c		 jge	 SHORT $LN12@validate_c@3

; 2296 :         if (TYPE(CHILD(tree, pos)) != op1)

  0005b	48 8b 55 20	 mov	 rdx, QWORD PTR [rbp+32]
  0005f	0f bf 04 16	 movsx	 eax, WORD PTR [rsi+rdx]
  00063	41 3b c5	 cmp	 eax, r13d
  00066	74 15		 je	 SHORT $LN2@validate_c@3

; 2297 :             res = validate_ntype(CHILD(tree, pos), op2);

  00068	48 63 c7	 movsxd	 rax, edi
  0006b	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0006f	48 8d 0c ca	 lea	 rcx, QWORD PTR [rdx+rcx*8]
  00073	41 8b d7	 mov	 edx, r15d
  00076	e8 00 00 00 00	 call	 validate_ntype
  0007b	8b c8		 mov	 ecx, eax
$LN2@validate_c@3:

; 2298 :         if (res)

  0007d	85 c9		 test	 ecx, ecx
  0007f	74 17		 je	 SHORT $LN4@validate_c@3

; 2299 :             res = (*termvalid)(CHILD(tree, pos + 1));

  00081	8d 47 01	 lea	 eax, DWORD PTR [rdi+1]
  00084	48 63 c8	 movsxd	 rcx, eax
  00087	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  0008b	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  0008f	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00093	41 ff d6	 call	 r14
  00096	8b c8		 mov	 ecx, eax
$LN4@validate_c@3:

; 2294 : 
; 2295 :     for ( ; res && (pos < nch); pos += 2) {

  00098	83 c7 02	 add	 edi, 2
  0009b	48 83 c3 02	 add	 rbx, 2
  0009f	48 83 c6 50	 add	 rsi, 80			; 00000050H
  000a3	85 c9		 test	 ecx, ecx
  000a5	75 af		 jne	 SHORT $LL5@validate_c@3
$LN12@validate_c@3:

; 2300 :     }
; 2301 :     return (res);
; 2302 : }

  000a7	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000ac	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  000b1	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  000b6	8b c1		 mov	 eax, ecx
  000b8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bc	41 5f		 pop	 r15
  000be	41 5e		 pop	 r14
  000c0	41 5d		 pop	 r13
  000c2	41 5c		 pop	 r12
  000c4	5f		 pop	 rdi
  000c5	c3		 ret	 0
validate_chain_two_ops ENDP
_TEXT	ENDS
PUBLIC	??_C@_07KODPEPCE@lambdef?$AA@			; `string'
PUBLIC	??_C@_06COJIGPIB@lambda?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_lambdef DD imagerel validate_lambdef
	DD	imagerel validate_lambdef+224
	DD	imagerel $unwind$validate_lambdef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_lambdef DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_07KODPEPCE@lambdef?$AA@
CONST	SEGMENT
??_C@_07KODPEPCE@lambdef?$AA@ DB 'lambdef', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06COJIGPIB@lambda?$AA@
CONST	SEGMENT
??_C@_06COJIGPIB@lambda?$AA@ DB 'lambda', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_lambdef
_TEXT	SEGMENT
tree$ = 48
validate_lambdef PROC					; COMDAT

; 2613 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2614 :     int nch = NCH(tree);

  0000a	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 2615 :     int res = (validate_ntype(tree, lambdef)
; 2616 :                && ((nch == 3) || (nch == 4))
; 2617 :                && validate_name(CHILD(tree, 0), "lambda")
; 2618 :                && validate_colon(CHILD(tree, nch - 2))
; 2619 :                && validate_test(CHILD(tree, nch - 1)));

  0000d	ba 30 01 00 00	 mov	 edx, 304		; 00000130H
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 95 00 00
	00		 je	 $LN7@validate_l
  00022	83 ff 03	 cmp	 edi, 3
  00025	74 09		 je	 SHORT $LN6@validate_l
  00027	83 ff 04	 cmp	 edi, 4
  0002a	0f 85 87 00 00
	00		 jne	 $LN7@validate_l
$LN6@validate_l:
  00030	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00034	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06COJIGPIB@lambda?$AA@
  0003b	ba 01 00 00 00	 mov	 edx, 1
  00040	e8 00 00 00 00	 call	 validate_terminal
  00045	85 c0		 test	 eax, eax
  00047	74 6e		 je	 SHORT $LN7@validate_l
  00049	8d 47 fe	 lea	 eax, DWORD PTR [rdi-2]
  0004c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00053	48 63 c8	 movsxd	 rcx, eax
  00056	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0005a	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  0005e	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00062	ba 0b 00 00 00	 mov	 edx, 11
  00067	e8 00 00 00 00	 call	 validate_terminal
  0006c	85 c0		 test	 eax, eax
  0006e	74 47		 je	 SHORT $LN7@validate_l
  00070	8d 47 ff	 lea	 eax, DWORD PTR [rdi-1]
  00073	48 63 c8	 movsxd	 rcx, eax
  00076	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0007a	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  0007e	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00082	e8 00 00 00 00	 call	 validate_test
  00087	85 c0		 test	 eax, eax
  00089	74 2c		 je	 SHORT $LN7@validate_l

; 2620 : 
; 2621 :     if (res && (nch == 4))

  0008b	83 ff 04	 cmp	 edi, 4
  0008e	75 17		 jne	 SHORT $LN12@validate_l

; 2622 :         res = validate_varargslist(CHILD(tree, 1));

  00090	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00094	48 83 c1 28	 add	 rcx, 40			; 00000028H

; 2627 : }

  00098	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a1	5f		 pop	 rdi
  000a2	e9 00 00 00 00	 jmp	 validate_varargslist
$LN12@validate_l:

; 2625 : 
; 2626 :     return (res);

  000a7	b8 01 00 00 00	 mov	 eax, 1

; 2627 : }

  000ac	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b5	5f		 pop	 rdi
  000b6	c3		 ret	 0
$LN7@validate_l:

; 2623 :     else if (!res && !PyErr_Occurred())

  000b7	e8 00 00 00 00	 call	 PyErr_Occurred
  000bc	48 85 c0	 test	 rax, rax
  000bf	75 12		 jne	 SHORT $LN11@validate_l

; 2624 :         (void) validate_numnodes(tree, 3, "lambdef");

  000c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07KODPEPCE@lambdef?$AA@
  000c8	8d 50 03	 lea	 edx, QWORD PTR [rax+3]
  000cb	48 8b cb	 mov	 rcx, rbx
  000ce	e8 00 00 00 00	 call	 validate_numnodes
$LN11@validate_l:

; 2625 : 
; 2626 :     return (res);

  000d3	33 c0		 xor	 eax, eax

; 2627 : }

  000d5	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000da	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000de	5f		 pop	 rdi
  000df	c3		 ret	 0
validate_lambdef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@BLBLCNEL@lambdef_nocond?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_lambdef_nocond DD imagerel validate_lambdef_nocond
	DD	imagerel validate_lambdef_nocond+224
	DD	imagerel $unwind$validate_lambdef_nocond
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_lambdef_nocond DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0P@BLBLCNEL@lambdef_nocond?$AA@
CONST	SEGMENT
??_C@_0P@BLBLCNEL@lambdef_nocond?$AA@ DB 'lambdef_nocond', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_lambdef_nocond
_TEXT	SEGMENT
tree$ = 48
validate_lambdef_nocond PROC				; COMDAT

; 2632 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2633 :     int nch = NCH(tree);

  0000a	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 2634 :     int res = (validate_ntype(tree, lambdef_nocond)
; 2635 :                && ((nch == 3) || (nch == 4))
; 2636 :                && validate_name(CHILD(tree, 0), "lambda")
; 2637 :                && validate_colon(CHILD(tree, nch - 2))
; 2638 :                && validate_test(CHILD(tree, nch - 1)));

  0000d	ba 31 01 00 00	 mov	 edx, 305		; 00000131H
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 95 00 00
	00		 je	 $LN7@validate_l@2
  00022	83 ff 03	 cmp	 edi, 3
  00025	74 09		 je	 SHORT $LN6@validate_l@2
  00027	83 ff 04	 cmp	 edi, 4
  0002a	0f 85 87 00 00
	00		 jne	 $LN7@validate_l@2
$LN6@validate_l@2:
  00030	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00034	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06COJIGPIB@lambda?$AA@
  0003b	ba 01 00 00 00	 mov	 edx, 1
  00040	e8 00 00 00 00	 call	 validate_terminal
  00045	85 c0		 test	 eax, eax
  00047	74 6e		 je	 SHORT $LN7@validate_l@2
  00049	8d 47 fe	 lea	 eax, DWORD PTR [rdi-2]
  0004c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00053	48 63 c8	 movsxd	 rcx, eax
  00056	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0005a	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  0005e	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00062	ba 0b 00 00 00	 mov	 edx, 11
  00067	e8 00 00 00 00	 call	 validate_terminal
  0006c	85 c0		 test	 eax, eax
  0006e	74 47		 je	 SHORT $LN7@validate_l@2
  00070	8d 47 ff	 lea	 eax, DWORD PTR [rdi-1]
  00073	48 63 c8	 movsxd	 rcx, eax
  00076	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0007a	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  0007e	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00082	e8 00 00 00 00	 call	 validate_test
  00087	85 c0		 test	 eax, eax
  00089	74 2c		 je	 SHORT $LN7@validate_l@2

; 2639 : 
; 2640 :     if (res && (nch == 4))

  0008b	83 ff 04	 cmp	 edi, 4
  0008e	75 17		 jne	 SHORT $LN12@validate_l@2

; 2641 :         res = validate_varargslist(CHILD(tree, 1));

  00090	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00094	48 83 c1 28	 add	 rcx, 40			; 00000028H

; 2646 : }

  00098	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a1	5f		 pop	 rdi
  000a2	e9 00 00 00 00	 jmp	 validate_varargslist
$LN12@validate_l@2:

; 2644 : 
; 2645 :     return (res);

  000a7	b8 01 00 00 00	 mov	 eax, 1

; 2646 : }

  000ac	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b5	5f		 pop	 rdi
  000b6	c3		 ret	 0
$LN7@validate_l@2:

; 2642 :     else if (!res && !PyErr_Occurred())

  000b7	e8 00 00 00 00	 call	 PyErr_Occurred
  000bc	48 85 c0	 test	 rax, rax
  000bf	75 12		 jne	 SHORT $LN11@validate_l@2

; 2643 :         (void) validate_numnodes(tree, 3, "lambdef_nocond");

  000c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@BLBLCNEL@lambdef_nocond?$AA@
  000c8	8d 50 03	 lea	 edx, QWORD PTR [rax+3]
  000cb	48 8b cb	 mov	 rcx, rbx
  000ce	e8 00 00 00 00	 call	 validate_numnodes
$LN11@validate_l@2:

; 2644 : 
; 2645 :     return (res);

  000d3	33 c0		 xor	 eax, eax

; 2646 : }

  000d5	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000da	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000de	5f		 pop	 rdi
  000df	c3		 ret	 0
validate_lambdef_nocond ENDP
_TEXT	ENDS
PUBLIC	??_C@_07GFDBDBKB@sliceop?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_sliceop DD imagerel validate_sliceop
	DD	imagerel validate_sliceop+158
	DD	imagerel $unwind$validate_sliceop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_sliceop DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_07GFDBDBKB@sliceop?$AA@
CONST	SEGMENT
??_C@_07GFDBDBKB@sliceop?$AA@ DB 'sliceop', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_sliceop
_TEXT	SEGMENT
tree$ = 48
validate_sliceop PROC					; COMDAT

; 2863 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2864 :     int nch = NCH(tree);

  0000a	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]
  0000d	48 8b d9	 mov	 rbx, rcx

; 2865 :     int res = ((nch == 1) || validate_numnodes(tree, 2, "sliceop"))
; 2866 :               && validate_ntype(tree, sliceop);

  00010	83 ff 01	 cmp	 edi, 1
  00013	74 15		 je	 SHORT $LN6@validate_s@3
  00015	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07GFDBDBKB@sliceop?$AA@
  0001c	ba 02 00 00 00	 mov	 edx, 2
  00021	e8 00 00 00 00	 call	 validate_numnodes
  00026	85 c0		 test	 eax, eax
  00028	74 11		 je	 SHORT $LN7@validate_s@3
$LN6@validate_s@3:
  0002a	ba 45 01 00 00	 mov	 edx, 325		; 00000145H
  0002f	48 8b cb	 mov	 rcx, rbx
  00032	e8 00 00 00 00	 call	 validate_ntype
  00037	85 c0		 test	 eax, eax
  00039	75 20		 jne	 SHORT $LN9@validate_s@3
$LN7@validate_s@3:

; 2867 :     if (!res && !PyErr_Occurred()) {

  0003b	e8 00 00 00 00	 call	 PyErr_Occurred
  00040	48 85 c0	 test	 rax, rax
  00043	75 4c		 jne	 SHORT $LN14@validate_s@3

; 2868 :         res = validate_numnodes(tree, 1, "sliceop");

  00045	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07GFDBDBKB@sliceop?$AA@
  0004c	8d 50 01	 lea	 edx, QWORD PTR [rax+1]
  0004f	48 8b cb	 mov	 rcx, rbx
  00052	e8 00 00 00 00	 call	 validate_numnodes

; 2869 :     }
; 2870 :     if (res)

  00057	85 c0		 test	 eax, eax
  00059	74 2b		 je	 SHORT $LN11@validate_s@3
$LN9@validate_s@3:

; 2871 :         res = validate_colon(CHILD(tree, 0));

  0005b	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0005f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00066	ba 0b 00 00 00	 mov	 edx, 11
  0006b	e8 00 00 00 00	 call	 validate_terminal

; 2872 :     if (res && (nch == 2))

  00070	85 c0		 test	 eax, eax
  00072	74 12		 je	 SHORT $LN11@validate_s@3
  00074	83 ff 02	 cmp	 edi, 2
  00077	75 0d		 jne	 SHORT $LN11@validate_s@3

; 2873 :         res = validate_test(CHILD(tree, 1));

  00079	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0007d	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00081	e8 00 00 00 00	 call	 validate_test
$LN11@validate_s@3:

; 2876 : }

  00086	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008f	5f		 pop	 rdi
  00090	c3		 ret	 0
$LN14@validate_s@3:

; 2874 : 
; 2875 :     return (res);

  00091	33 c0		 xor	 eax, eax

; 2876 : }

  00093	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00098	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009c	5f		 pop	 rdi
  0009d	c3		 ret	 0
validate_sliceop ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT validate_test_or_star_expr
_TEXT	SEGMENT
n$ = 8
validate_test_or_star_expr PROC				; COMDAT

; 2882 :     if (TYPE(n) == test)

  00000	b8 2e 01 00 00	 mov	 eax, 302		; 0000012eH
  00005	66 39 01	 cmp	 WORD PTR [rcx], ax
  00008	75 05		 jne	 SHORT $LN1@validate_t@2

; 2883 :         return validate_test(n);
; 2884 :     return validate_star_expr(n);
; 2885 : }

  0000a	e9 00 00 00 00	 jmp	 validate_test
$LN1@validate_t@2:
  0000f	e9 00 00 00 00	 jmp	 validate_star_expr
validate_test_or_star_expr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT validate_expr_or_star_expr
_TEXT	SEGMENT
n$ = 8
validate_expr_or_star_expr PROC				; COMDAT

; 2890 :     if (TYPE(n) == expr)

  00000	b8 38 01 00 00	 mov	 eax, 312		; 00000138H
  00005	66 39 01	 cmp	 WORD PTR [rcx], ax
  00008	75 05		 jne	 SHORT $LN1@validate_e

; 2891 :         return validate_expr(n);
; 2892 :     return validate_star_expr(n);
; 2893 : }

  0000a	e9 00 00 00 00	 jmp	 validate_expr
$LN1@validate_e:
  0000f	e9 00 00 00 00	 jmp	 validate_star_expr
validate_expr_or_star_expr ENDP
_TEXT	ENDS
PUBLIC	??_C@_08NNDNJBEA@exprlist?$AA@			; `string'
;	COMDAT ??_C@_08NNDNJBEA@exprlist?$AA@
CONST	SEGMENT
??_C@_08NNDNJBEA@exprlist?$AA@ DB 'exprlist', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_exprlist
_TEXT	SEGMENT
tree$ = 8
validate_exprlist PROC					; COMDAT

; 2899 :     return (validate_repeating_list(tree, exprlist,
; 2900 :                                     validate_expr_or_star_expr, "exprlist"));

  00000	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_08NNDNJBEA@exprlist?$AA@
  00007	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:validate_expr_or_star_expr
  0000e	ba 46 01 00 00	 mov	 edx, 326		; 00000146H

; 2901 : }

  00013	e9 00 00 00 00	 jmp	 validate_repeating_list
validate_exprlist ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_eval_input DD imagerel validate_eval_input
	DD	imagerel validate_eval_input+150
	DD	imagerel $unwind$validate_eval_input
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_eval_input DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT validate_eval_input
_TEXT	SEGMENT
tree$ = 48
validate_eval_input PROC				; COMDAT

; 2994 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2995 :     int pos;
; 2996 :     int nch = NCH(tree);

  0000f	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 2997 :     int res = (validate_ntype(tree, eval_input)
; 2998 :                && (nch >= 2)
; 2999 :                && validate_testlist(CHILD(tree, 0))
; 3000 :                && validate_ntype(CHILD(tree, nch - 1), ENDMARKER));

  00012	ba 02 01 00 00	 mov	 edx, 258		; 00000102H
  00017	48 8b f1	 mov	 rsi, rcx
  0001a	e8 00 00 00 00	 call	 validate_ntype
  0001f	bb 01 00 00 00	 mov	 ebx, 1
  00024	85 c0		 test	 eax, eax
  00026	74 33		 je	 SHORT $LN6@validate_e@2
  00028	83 ff 02	 cmp	 edi, 2
  0002b	7c 2e		 jl	 SHORT $LN6@validate_e@2
  0002d	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  00031	e8 00 00 00 00	 call	 validate_testlist
  00036	85 c0		 test	 eax, eax
  00038	74 21		 je	 SHORT $LN6@validate_e@2
  0003a	8d 47 ff	 lea	 eax, DWORD PTR [rdi-1]
  0003d	48 63 c8	 movsxd	 rcx, eax
  00040	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00044	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00048	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  0004c	33 d2		 xor	 edx, edx
  0004e	e8 00 00 00 00	 call	 validate_ntype
  00053	85 c0		 test	 eax, eax
  00055	74 04		 je	 SHORT $LN6@validate_e@2
  00057	8b c3		 mov	 eax, ebx
  00059	eb 02		 jmp	 SHORT $LN7@validate_e@2
$LN6@validate_e@2:
  0005b	33 c0		 xor	 eax, eax
$LN7@validate_e@2:

; 3001 : 
; 3002 :     for (pos = 1; res && (pos < (nch - 1)); ++pos)

  0005d	85 c0		 test	 eax, eax
  0005f	74 25		 je	 SHORT $LN10@validate_e@2
  00061	ff cf		 dec	 edi
$LL3@validate_e@2:
  00063	3b df		 cmp	 ebx, edi
  00065	7d 1f		 jge	 SHORT $LN10@validate_e@2

; 3003 :         res = validate_ntype(CHILD(tree, pos), NEWLINE);

  00067	48 63 c3	 movsxd	 rax, ebx
  0006a	ba 04 00 00 00	 mov	 edx, 4
  0006f	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00073	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00077	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0007b	e8 00 00 00 00	 call	 validate_ntype
  00080	ff c3		 inc	 ebx
  00082	85 c0		 test	 eax, eax
  00084	75 dd		 jne	 SHORT $LL3@validate_e@2
$LN10@validate_e@2:

; 3004 : 
; 3005 :     return (res);
; 3006 : }

  00086	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008b	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00090	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00094	5f		 pop	 rdi
  00095	c3		 ret	 0
validate_eval_input ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@IMEBFCII@could?5not?5validate?5expression?5tu@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_expr_tree DD imagerel validate_expr_tree
	DD	imagerel validate_expr_tree+47
	DD	imagerel $unwind$validate_expr_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_expr_tree DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CE@IMEBFCII@could?5not?5validate?5expression?5tu@
CONST	SEGMENT
??_C@_0CE@IMEBFCII@could?5not?5validate?5expression?5tu@ DB 'could not va'
	DB	'lidate expression tuple', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_expr_tree
_TEXT	SEGMENT
tree$ = 48
validate_expr_tree PROC					; COMDAT

; 3202 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 3203 :     int res = validate_eval_input(tree);

  00006	e8 00 00 00 00	 call	 validate_eval_input
  0000b	8b d8		 mov	 ebx, eax

; 3204 : 
; 3205 :     if (!res && !PyErr_Occurred())

  0000d	85 c0		 test	 eax, eax
  0000f	75 18		 jne	 SHORT $LN1@validate_e@3
  00011	e8 00 00 00 00	 call	 PyErr_Occurred
  00016	48 85 c0	 test	 rax, rax
  00019	75 0c		 jne	 SHORT $LN5@validate_e@3

; 3206 :         err_string("could not validate expression tuple");

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@IMEBFCII@could?5not?5validate?5expression?5tu@
  00022	e8 00 00 00 00	 call	 err_string
$LN5@validate_e@3:

; 3207 : 
; 3208 :     return (res);

  00027	8b c3		 mov	 eax, ebx
$LN1@validate_e@3:

; 3209 : }

  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5b		 pop	 rbx
  0002e	c3		 ret	 0
validate_expr_tree ENDP
_TEXT	ENDS
PUBLIC	??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@		; `string'
PUBLIC	??_C@_02MPEHDMPO@Oi?$AA@			; `string'
PUBLIC	??_C@_0M@KDOMCEFK@O?$CB?3_pickler?$AA@		; `string'
EXTRN	PyDict_New:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$parser__pickler DD imagerel parser__pickler
	DD	imagerel parser__pickler+48
	DD	imagerel $unwind$parser__pickler
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$parser__pickler DD imagerel parser__pickler+48
	DD	imagerel parser__pickler+86
	DD	imagerel $chain$0$parser__pickler
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$parser__pickler DD imagerel parser__pickler+86
	DD	imagerel parser__pickler+112
	DD	imagerel $chain$1$parser__pickler
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$parser__pickler DD imagerel parser__pickler+112
	DD	imagerel parser__pickler+184
	DD	imagerel $chain$2$parser__pickler
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$parser__pickler DD imagerel parser__pickler+184
	DD	imagerel parser__pickler+198
	DD	imagerel $chain$3$parser__pickler
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$parser__pickler DD imagerel parser__pickler+198
	DD	imagerel parser__pickler+282
	DD	imagerel $chain$4$parser__pickler
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$parser__pickler DD imagerel parser__pickler+282
	DD	imagerel parser__pickler+306
	DD	imagerel $chain$6$parser__pickler
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$parser__pickler DD imagerel parser__pickler+306
	DD	imagerel parser__pickler+319
	DD	imagerel $chain$8$parser__pickler
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$parser__pickler DD imagerel parser__pickler+319
	DD	imagerel parser__pickler+328
	DD	imagerel $chain$9$parser__pickler
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$parser__pickler DD 021H
	DD	imagerel parser__pickler
	DD	imagerel parser__pickler+48
	DD	imagerel $unwind$parser__pickler
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$parser__pickler DD 020021H
	DD	083400H
	DD	imagerel parser__pickler
	DD	imagerel parser__pickler+48
	DD	imagerel $unwind$parser__pickler
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$parser__pickler DD 020021H
	DD	083400H
	DD	imagerel parser__pickler
	DD	imagerel parser__pickler+48
	DD	imagerel $unwind$parser__pickler
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$parser__pickler DD 021H
	DD	imagerel parser__pickler+48
	DD	imagerel parser__pickler+86
	DD	imagerel $chain$0$parser__pickler
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$parser__pickler DD 021H
	DD	imagerel parser__pickler+86
	DD	imagerel parser__pickler+112
	DD	imagerel $chain$1$parser__pickler
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$parser__pickler DD 020521H
	DD	095405H
	DD	imagerel parser__pickler+86
	DD	imagerel parser__pickler+112
	DD	imagerel $chain$1$parser__pickler
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$parser__pickler DD 020521H
	DD	0b6405H
	DD	imagerel parser__pickler+48
	DD	imagerel parser__pickler+86
	DD	imagerel $chain$0$parser__pickler
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$parser__pickler DD 020521H
	DD	083405H
	DD	imagerel parser__pickler
	DD	imagerel parser__pickler+48
	DD	imagerel $unwind$parser__pickler
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser__pickler DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@
CONST	SEGMENT
??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@ DB 'O(O)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02MPEHDMPO@Oi?$AA@
CONST	SEGMENT
??_C@_02MPEHDMPO@Oi?$AA@ DB 'Oi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KDOMCEFK@O?$CB?3_pickler?$AA@
CONST	SEGMENT
??_C@_0M@KDOMCEFK@O?$CB?3_pickler?$AA@ DB 'O!:_pickler', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\parsermodule.c
CONST	ENDS
;	COMDAT parser__pickler
_TEXT	SEGMENT
self$ = 64
args$ = 72
st$ = 80
parser__pickler PROC					; COMDAT

; 3258 : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3259 :     NOTE(ARGUNUSED(self))
; 3260 :     PyObject *result = NULL;
; 3261 :     PyObject *st = NULL;
; 3262 :     PyObject *empty_dict = NULL;
; 3263 : 
; 3264 :     if (PyArg_ParseTuple(args, "O!:_pickler", &PyST_Type, &st)) {

  00006	48 8b ca	 mov	 rcx, rdx
  00009	4c 8d 4c 24 50	 lea	 r9, QWORD PTR st$[rsp]
  0000e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyST_Type
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@KDOMCEFK@O?$CB?3_pickler?$AA@
  0001c	33 ff		 xor	 edi, edi
  0001e	48 89 7c 24 50	 mov	 QWORD PTR st$[rsp], rdi
  00023	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00028	85 c0		 test	 eax, eax
  0002a	0f 84 0f 01 00
	00		 je	 $LN26@parser__pi

; 3265 :         PyObject *newargs;
; 3266 :         PyObject *tuple;
; 3267 : 
; 3268 :         if ((empty_dict = PyDict_New()) == NULL)

  00030	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00035	e8 00 00 00 00	 call	 PyDict_New
  0003a	48 8b d8	 mov	 rbx, rax
  0003d	48 85 c0	 test	 rax, rax
  00040	0f 84 f4 00 00
	00		 je	 $LN24@parser__pi

; 3269 :             goto finally;
; 3270 :         if ((newargs = Py_BuildValue("Oi", st, 1)) == NULL)

  00046	48 8b 54 24 50	 mov	 rdx, QWORD PTR st$[rsp]
  0004b	44 8d 47 01	 lea	 r8d, QWORD PTR [rdi+1]
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02MPEHDMPO@Oi?$AA@
  00056	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  0005b	e8 00 00 00 00	 call	 Py_BuildValue
  00060	48 8b f0	 mov	 rsi, rax
  00063	48 85 c0	 test	 rax, rax
  00066	74 50		 je	 SHORT $finally$23715

; 3271 :             goto finally;
; 3272 :         tuple = parser_st2tuple((PyST_Object*)NULL, newargs, empty_dict);

  00068	4c 8b c3	 mov	 r8, rbx
  0006b	48 8b d0	 mov	 rdx, rax
  0006e	33 c9		 xor	 ecx, ecx
  00070	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00075	e8 00 00 00 00	 call	 parser_st2tuple
  0007a	48 8b e8	 mov	 rbp, rax

; 3273 :         if (tuple != NULL) {

  0007d	48 85 c0	 test	 rax, rax
  00080	74 21		 je	 SHORT $LN5@parser__pi

; 3274 :             result = Py_BuildValue("O(O)", pickle_constructor, tuple);

  00082	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR pickle_constructor
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@
  00090	4c 8b c0	 mov	 r8, rax
  00093	e8 00 00 00 00	 call	 Py_BuildValue

; 3275 :             Py_DECREF(tuple);

  00098	48 8b cd	 mov	 rcx, rbp
  0009b	48 8b f8	 mov	 rdi, rax
  0009e	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@parser__pi:

; 3276 :         }
; 3277 :         Py_DECREF(empty_dict);

  000a3	48 8b cb	 mov	 rcx, rbx
  000a6	e8 00 00 00 00	 call	 _Py_DecRef

; 3278 :         Py_DECREF(newargs);

  000ab	48 8b ce	 mov	 rcx, rsi
  000ae	e8 00 00 00 00	 call	 _Py_DecRef
  000b3	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
$finally$23715:

; 3279 :     }
; 3280 :   finally:
; 3281 :     Py_XDECREF(empty_dict);

  000b8	e8 00 00 00 00	 call	 _Py_PXCTX
  000bd	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  000c2	85 c0		 test	 eax, eax
  000c4	75 74		 jne	 SHORT $LN24@parser__pi
  000c6	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000ca	a8 20		 test	 al, 32			; 00000020H
  000cc	75 64		 jne	 SHORT $LN15@parser__pi
  000ce	84 c0		 test	 al, al
  000d0	78 60		 js	 SHORT $LN15@parser__pi
  000d2	a8 02		 test	 al, 2
  000d4	75 64		 jne	 SHORT $LN24@parser__pi
  000d6	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000da	75 5e		 jne	 SHORT $LN24@parser__pi
  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000ea	4c 8b cb	 mov	 r9, rbx
  000ed	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000f3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000fb	e8 00 00 00 00	 call	 _PyParallel_Guard
  00100	48 8b cb	 mov	 rcx, rbx
  00103	85 c0		 test	 eax, eax
  00105	74 13		 je	 SHORT $LN20@parser__pi
  00107	e8 00 00 00 00	 call	 _Px_Dealloc
  0010c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 3282 : 
; 3283 :     return (result);

  00111	48 8b c7	 mov	 rax, rdi

; 3284 : }

  00114	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00118	5f		 pop	 rdi
  00119	c3		 ret	 0

; 3279 :     }
; 3280 :   finally:
; 3281 :     Py_XDECREF(empty_dict);

$LN20@parser__pi:
  0011a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0011e	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00124	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 3282 : 
; 3283 :     return (result);

  00129	48 8b c7	 mov	 rax, rdi

; 3284 : }

  0012c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00130	5f		 pop	 rdi
  00131	c3		 ret	 0

; 3279 :     }
; 3280 :   finally:
; 3281 :     Py_XDECREF(empty_dict);

$LN15@parser__pi:
  00132	48 8b cb	 mov	 rcx, rbx
  00135	e8 00 00 00 00	 call	 Px_DecRef
$LN24@parser__pi:
  0013a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN26@parser__pi:

; 3282 : 
; 3283 :     return (result);

  0013f	48 8b c7	 mov	 rax, rdi

; 3284 : }

  00142	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00146	5f		 pop	 rdi
  00147	c3		 ret	 0
parser__pickler ENDP
_TEXT	ENDS
PUBLIC	??_C@_07ODDBKIAB@copyreg?$AA@			; `string'
PUBLIC	??_C@_0M@EKHGKOEI@__version__?$AA@		; `string'
PUBLIC	??_C@_07DIBBIFIJ@__doc__?$AA@			; `string'
PUBLIC	??_C@_0O@LFPOLEGP@__copyright__?$AA@		; `string'
PUBLIC	??_C@_06HAGOOIOF@STType?$AA@			; `string'
PUBLIC	??_C@_0M@LCFGDIAC@ParserError?$AA@		; `string'
PUBLIC	??_C@_0BD@BGNKHKBP@parser?4ParserError?$AA@	; `string'
PUBLIC	PyInit_parser
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	PyImport_ImportModuleNoBlock:PROC
EXTRN	PyModule_AddStringConstant:PROC
EXTRN	PyModule_AddObject:PROC
EXTRN	PyErr_NewException:PROC
EXTRN	PyModule_Create2:PROC
EXTRN	PyType_Ready:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyInit_parser DD imagerel $LN36
	DD	imagerel $LN36+39
	DD	imagerel $unwind$PyInit_parser
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyInit_parser DD imagerel $LN36+39
	DD	imagerel $LN36+144
	DD	imagerel $chain$0$PyInit_parser
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyInit_parser DD imagerel $LN36+144
	DD	imagerel $LN36+345
	DD	imagerel $chain$3$PyInit_parser
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyInit_parser DD imagerel $LN36+345
	DD	imagerel $LN36+365
	DD	imagerel $chain$4$PyInit_parser
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyInit_parser DD imagerel $LN36+365
	DD	imagerel $LN36+527
	DD	imagerel $chain$5$PyInit_parser
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyInit_parser DD imagerel $LN36+527
	DD	imagerel $LN36+558
	DD	imagerel $chain$6$PyInit_parser
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$PyInit_parser DD imagerel $LN36+558
	DD	imagerel $LN36+576
	DD	imagerel $chain$7$PyInit_parser
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$PyInit_parser DD 021H
	DD	imagerel $LN36+144
	DD	imagerel $LN36+345
	DD	imagerel $chain$3$PyInit_parser
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyInit_parser DD 021H
	DD	imagerel $LN36+345
	DD	imagerel $LN36+365
	DD	imagerel $chain$4$PyInit_parser
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyInit_parser DD 020521H
	DD	0a6405H
	DD	imagerel $LN36+345
	DD	imagerel $LN36+365
	DD	imagerel $chain$4$PyInit_parser
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyInit_parser DD 020521H
	DD	083405H
	DD	imagerel $LN36+144
	DD	imagerel $LN36+345
	DD	imagerel $chain$3$PyInit_parser
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyInit_parser DD 040521H
	DD	095405H
	DD	067400H
	DD	imagerel $LN36
	DD	imagerel $LN36+39
	DD	imagerel $unwind$PyInit_parser
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyInit_parser DD 020521H
	DD	067405H
	DD	imagerel $LN36
	DD	imagerel $LN36+39
	DD	imagerel $unwind$PyInit_parser
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_parser DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_07ODDBKIAB@copyreg?$AA@
CONST	SEGMENT
??_C@_07ODDBKIAB@copyreg?$AA@ DB 'copyreg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EKHGKOEI@__version__?$AA@
CONST	SEGMENT
??_C@_0M@EKHGKOEI@__version__?$AA@ DB '__version__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIBBIFIJ@__doc__?$AA@
CONST	SEGMENT
??_C@_07DIBBIFIJ@__doc__?$AA@ DB '__doc__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LFPOLEGP@__copyright__?$AA@
CONST	SEGMENT
??_C@_0O@LFPOLEGP@__copyright__?$AA@ DB '__copyright__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HAGOOIOF@STType?$AA@
CONST	SEGMENT
??_C@_06HAGOOIOF@STType?$AA@ DB 'STType', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LCFGDIAC@ParserError?$AA@
CONST	SEGMENT
??_C@_0M@LCFGDIAC@ParserError?$AA@ DB 'ParserError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BGNKHKBP@parser?4ParserError?$AA@
CONST	SEGMENT
??_C@_0BD@BGNKHKBP@parser?4ParserError?$AA@ DB 'parser.ParserError', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\parsermodule.c
CONST	ENDS
;	COMDAT PyInit_parser
_TEXT	SEGMENT
PyInit_parser PROC					; COMDAT

; 3338 : {

$LN36:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3339 :     PyObject *module, *copyreg;
; 3340 : 
; 3341 :     if (PyType_Ready(&PyST_Type) < 0)

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyST_Type
  0000b	e8 00 00 00 00	 call	 PyType_Ready
  00010	85 c0		 test	 eax, eax
  00012	79 07		 jns	 SHORT $LN27@PyInit_par

; 3342 :         return NULL;

  00014	33 c0		 xor	 eax, eax

; 3401 : }

  00016	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0001a	c3		 ret	 0
$LN27@PyInit_par:

; 3343 :     module = PyModule_Create(&parsermodule);

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:parsermodule
  00022	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00027	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0002c	e8 00 00 00 00	 call	 PyModule_Create2
  00031	48 8b f8	 mov	 rdi, rax

; 3344 :     if (module == NULL)

  00034	48 85 c0	 test	 rax, rax

; 3345 :         return NULL;

  00037	74 4b		 je	 SHORT $LN35@PyInit_par

; 3346 : 
; 3347 :     if (parser_error == 0)

  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR parser_error
  00040	48 85 c0	 test	 rax, rax
  00043	75 1d		 jne	 SHORT $LN24@PyInit_par

; 3348 :         parser_error = PyErr_NewException("parser.ParserError", NULL, NULL);

  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BGNKHKBP@parser?4ParserError?$AA@
  0004c	45 33 c0	 xor	 r8d, r8d
  0004f	33 d2		 xor	 edx, edx
  00051	e8 00 00 00 00	 call	 PyErr_NewException
  00056	48 89 05 00 00
	00 00		 mov	 QWORD PTR parser_error, rax

; 3349 : 
; 3350 :     if (parser_error == 0)

  0005d	48 85 c0	 test	 rax, rax

; 3351 :         return NULL;

  00060	74 22		 je	 SHORT $LN35@PyInit_par
$LN24@PyInit_par:

; 3352 :     /* CAUTION:  The code next used to skip bumping the refcount on
; 3353 :      * parser_error.  That's a disaster if PyInit_parser() gets called more
; 3354 :      * than once.  By incref'ing, we ensure that each module dict that
; 3355 :      * gets created owns its reference to the shared parser_error object,
; 3356 :      * and the file static parser_error vrbl owns a reference too.
; 3357 :      */
; 3358 :     Py_INCREF(parser_error);

  00062	48 8b c8	 mov	 rcx, rax
  00065	e8 00 00 00 00	 call	 _Py_IncRef

; 3359 :     if (PyModule_AddObject(module, "ParserError", parser_error) != 0)

  0006a	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR parser_error
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@LCFGDIAC@ParserError?$AA@
  00078	48 8b cf	 mov	 rcx, rdi
  0007b	e8 00 00 00 00	 call	 PyModule_AddObject
  00080	85 c0		 test	 eax, eax
  00082	74 0c		 je	 SHORT $LN23@PyInit_par
$LN35@PyInit_par:

; 3360 :         return NULL;

  00084	33 c0		 xor	 eax, eax
  00086	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 3401 : }

  0008b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008f	c3		 ret	 0
$LN23@PyInit_par:
  00090	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp

; 3361 : 
; 3362 :     Py_INCREF(&PyST_Type);

  00095	e8 00 00 00 00	 call	 _Py_PXCTX
  0009a	85 c0		 test	 eax, eax
  0009c	75 3c		 jne	 SHORT $LN31@PyInit_par
  0009e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:PyST_Type
  000a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000b3	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000b9	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c6	85 c0		 test	 eax, eax
  000c8	75 09		 jne	 SHORT $LN30@PyInit_par
  000ca	f6 05 20 00 00
	00 20		 test	 BYTE PTR PyST_Type+32, 32 ; 00000020H
  000d1	74 07		 je	 SHORT $LN31@PyInit_par
$LN30@PyInit_par:
  000d3	48 ff 05 50 00
	00 00		 inc	 QWORD PTR PyST_Type+80
$LN31@PyInit_par:

; 3363 :     PyModule_AddObject(module, "STType", (PyObject*)&PyST_Type);

  000da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyST_Type
  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06HAGOOIOF@STType?$AA@
  000e8	48 8b cf	 mov	 rcx, rdi
  000eb	e8 00 00 00 00	 call	 PyModule_AddObject

; 3364 : 
; 3365 :     PyModule_AddStringConstant(module, "__copyright__",
; 3366 :                                parser_copyright_string);

  000f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:parser_copyright_string
  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@LFPOLEGP@__copyright__?$AA@
  000fe	48 8b cf	 mov	 rcx, rdi
  00101	e8 00 00 00 00	 call	 PyModule_AddStringConstant

; 3367 :     PyModule_AddStringConstant(module, "__doc__",
; 3368 :                                parser_doc_string);

  00106	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:parser_doc_string
  0010d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
  00114	48 8b cf	 mov	 rcx, rdi
  00117	e8 00 00 00 00	 call	 PyModule_AddStringConstant

; 3369 :     PyModule_AddStringConstant(module, "__version__",
; 3370 :                                parser_version_string);

  0011c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:parser_version_string
  00123	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@EKHGKOEI@__version__?$AA@
  0012a	48 8b cf	 mov	 rcx, rdi
  0012d	e8 00 00 00 00	 call	 PyModule_AddStringConstant

; 3371 : 
; 3372 :     /* Register to support pickling.
; 3373 :      * If this fails, the import of this module will fail because an
; 3374 :      * exception will be raised here; should we clear the exception?
; 3375 :      */
; 3376 :     copyreg = PyImport_ImportModuleNoBlock("copyreg");

  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07ODDBKIAB@copyreg?$AA@
  00139	e8 00 00 00 00	 call	 PyImport_ImportModuleNoBlock
  0013e	48 8b e8	 mov	 rbp, rax

; 3377 :     if (copyreg != NULL) {

  00141	48 85 c0	 test	 rax, rax
  00144	0f 84 e4 00 00
	00		 je	 $LN22@PyInit_par

; 3378 :         PyObject *func, *pickler;
; 3379 :         _Py_IDENTIFIER(pickle);
; 3380 :         _Py_IDENTIFIER(sequence2st);
; 3381 :         _Py_IDENTIFIER(_pickler);
; 3382 : 
; 3383 :         func = _PyObject_GetAttrId(copyreg, &PyId_pickle);

  0014a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  00150	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  00159	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0015e	48 8b 1c d1	 mov	 rbx, QWORD PTR [rcx+rdx*8]
  00162	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_pickle@?2??PyInit_parser@@9@9
  00167	48 8b c8	 mov	 rcx, rax
  0016a	48 03 d3	 add	 rdx, rbx
  0016d	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  00172	e8 00 00 00 00	 call	 _PyObject_GetAttrId

; 3384 :         pickle_constructor = _PyObject_GetAttrId(module, &PyId_sequence2st);

  00177	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_sequence2st@?2??PyInit_parser@@9@9
  0017c	48 8b cf	 mov	 rcx, rdi
  0017f	48 03 d3	 add	 rdx, rbx
  00182	48 8b f0	 mov	 rsi, rax
  00185	e8 00 00 00 00	 call	 _PyObject_GetAttrId

; 3385 :         pickler = _PyObject_GetAttrId(module, &PyId__pickler);

  0018a	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId__pickler@?2??PyInit_parser@@9@9
  0018f	48 8b cf	 mov	 rcx, rdi
  00192	48 03 d3	 add	 rdx, rbx
  00195	48 89 05 00 00
	00 00		 mov	 QWORD PTR pickle_constructor, rax
  0019c	e8 00 00 00 00	 call	 _PyObject_GetAttrId

; 3386 :         Py_XINCREF(pickle_constructor);

  001a1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR pickle_constructor
  001a8	48 8b d8	 mov	 rbx, rax
  001ab	48 85 c9	 test	 rcx, rcx
  001ae	74 0c		 je	 SHORT $LN20@PyInit_par
  001b0	e8 00 00 00 00	 call	 _Py_IncRef
  001b5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR pickle_constructor
$LN20@PyInit_par:

; 3387 :         if ((func != NULL) && (pickle_constructor != NULL)
; 3388 :             && (pickler != NULL)) {

  001bc	48 85 f6	 test	 rsi, rsi
  001bf	74 44		 je	 SHORT $LN11@PyInit_par
  001c1	48 85 c9	 test	 rcx, rcx
  001c4	74 30		 je	 SHORT $LN14@PyInit_par
  001c6	48 85 db	 test	 rbx, rbx
  001c9	74 2b		 je	 SHORT $LN14@PyInit_par

; 3389 :             PyObject *res;
; 3390 : 
; 3391 :             res = PyObject_CallFunctionObjArgs(func, &PyST_Type, pickler,
; 3392 :                                                pickle_constructor, NULL);

  001cb	4c 8b c9	 mov	 r9, rcx
  001ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyST_Type
  001d5	4c 8b c3	 mov	 r8, rbx
  001d8	48 8b ce	 mov	 rcx, rsi
  001db	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  001e4	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs

; 3393 :             Py_XDECREF(res);

  001e9	48 85 c0	 test	 rax, rax
  001ec	74 08		 je	 SHORT $LN14@PyInit_par
  001ee	48 8b c8	 mov	 rcx, rax
  001f1	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@PyInit_par:

; 3394 :         }
; 3395 :         Py_XDECREF(func);

  001f6	48 8b ce	 mov	 rcx, rsi
  001f9	e8 00 00 00 00	 call	 _Py_DecRef
  001fe	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR pickle_constructor
$LN11@PyInit_par:

; 3396 :         Py_XDECREF(pickle_constructor);

  00205	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0020a	48 85 c9	 test	 rcx, rcx
  0020d	74 05		 je	 SHORT $LN7@PyInit_par
  0020f	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@PyInit_par:

; 3397 :         Py_XDECREF(pickler);

  00214	48 85 db	 test	 rbx, rbx
  00217	74 08		 je	 SHORT $LN3@PyInit_par
  00219	48 8b cb	 mov	 rcx, rbx
  0021c	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyInit_par:

; 3398 :         Py_DECREF(copyreg);

  00221	48 8b cd	 mov	 rcx, rbp
  00224	e8 00 00 00 00	 call	 _Py_DecRef
  00229	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN22@PyInit_par:

; 3399 :     }
; 3400 :     return module;

  0022e	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00233	48 8b c7	 mov	 rax, rdi
  00236	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 3401 : }

  0023b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0023f	c3		 ret	 0
PyInit_parser ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@HHPOFMCB@parameters?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_parameters DD imagerel validate_parameters
	DD	imagerel validate_parameters+181
	DD	imagerel $unwind$validate_parameters
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_parameters DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0L@HHPOFMCB@parameters?$AA@
CONST	SEGMENT
??_C@_0L@HHPOFMCB@parameters?$AA@ DB 'parameters', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_parameters
_TEXT	SEGMENT
tree$ = 48
validate_parameters PROC				; COMDAT

; 1153 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1154 :     int nch = NCH(tree);

  0000a	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]

; 1155 :     int res = validate_ntype(tree, parameters) && ((nch == 2) || (nch == 3));

  0000d	ba 07 01 00 00	 mov	 edx, 263		; 00000107H
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	74 76		 je	 SHORT $LN7@validate_p
  0001e	83 fb 02	 cmp	 ebx, 2
  00021	74 05		 je	 SHORT $LN11@validate_p
  00023	83 fb 03	 cmp	 ebx, 3
  00026	75 6c		 jne	 SHORT $LN7@validate_p
$LN11@validate_p:

; 1156 : 
; 1157 :     if (res) {
; 1158 :         res = (validate_lparen(CHILD(tree, 0))
; 1159 :                && validate_rparen(CHILD(tree, nch - 1)));

  00028	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0002c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI?$AA@
  00033	ba 07 00 00 00	 mov	 edx, 7
  00038	e8 00 00 00 00	 call	 validate_terminal
  0003d	85 c0		 test	 eax, eax
  0003f	74 67		 je	 SHORT $LN9@validate_p
  00041	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
  00044	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
  0004b	48 63 c8	 movsxd	 rcx, eax
  0004e	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00052	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00056	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  0005a	ba 08 00 00 00	 mov	 edx, 8
  0005f	e8 00 00 00 00	 call	 validate_terminal
  00064	85 c0		 test	 eax, eax
  00066	74 40		 je	 SHORT $LN9@validate_p

; 1160 :         if (res && (nch == 3))

  00068	83 fb 03	 cmp	 ebx, 3
  0006b	75 17		 jne	 SHORT $LN13@validate_p

; 1161 :             res = validate_varargslist(CHILD(tree, 1));

  0006d	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00071	48 83 c1 28	 add	 rcx, 40			; 00000028H

; 1167 : }

  00075	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007e	5f		 pop	 rdi
  0007f	e9 00 00 00 00	 jmp	 validate_varargslist
$LN13@validate_p:

; 1165 :     }
; 1166 :     return (res);

  00084	b8 01 00 00 00	 mov	 eax, 1

; 1167 : }

  00089	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00092	5f		 pop	 rdi
  00093	c3		 ret	 0
$LN7@validate_p:

; 1162 :     }
; 1163 :     else {
; 1164 :         (void) validate_numnodes(tree, 2, "parameters");

  00094	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@HHPOFMCB@parameters?$AA@
  0009b	ba 02 00 00 00	 mov	 edx, 2
  000a0	48 8b cf	 mov	 rcx, rdi
  000a3	e8 00 00 00 00	 call	 validate_numnodes
$LN9@validate_p:

; 1165 :     }
; 1166 :     return (res);

  000a8	33 c0		 xor	 eax, eax

; 1167 : }

  000aa	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000af	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b3	5f		 pop	 rdi
  000b4	c3		 ret	 0
validate_parameters ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT validate_testlist_star_expr
_TEXT	SEGMENT
tl$ = 8
validate_testlist_star_expr PROC			; COMDAT

; 1214 :     return (validate_repeating_list(tl, testlist_star_expr, validate_test_or_star_expr,
; 1215 :                                     "testlist"));

  00000	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_08GGIJBKAI@testlist?$AA@
  00007	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:validate_test_or_star_expr
  0000e	ba 10 01 00 00	 mov	 edx, 272		; 00000110H

; 1216 : }

  00013	e9 00 00 00 00	 jmp	 validate_repeating_list
validate_testlist_star_expr ENDP
_TEXT	ENDS
PUBLIC	??_C@_03ONKLGNNH@del?$AA@			; `string'
PUBLIC	??_C@_08GAMPEAMA@del_stmt?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_del_stmt DD imagerel validate_del_stmt
	DD	imagerel validate_del_stmt+91
	DD	imagerel $unwind$validate_del_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_del_stmt DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_03ONKLGNNH@del?$AA@
CONST	SEGMENT
??_C@_03ONKLGNNH@del?$AA@ DB 'del', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GAMPEAMA@del_stmt?$AA@
CONST	SEGMENT
??_C@_08GAMPEAMA@del_stmt?$AA@ DB 'del_stmt', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_del_stmt
_TEXT	SEGMENT
tree$ = 48
validate_del_stmt PROC					; COMDAT

; 1601 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1602 :     return (validate_numnodes(tree, 2, "del_stmt")
; 1603 :             && validate_name(CHILD(tree, 0), "del")
; 1604 :             && validate_exprlist(CHILD(tree, 1)));

  00006	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08GAMPEAMA@del_stmt?$AA@
  0000d	ba 02 00 00 00	 mov	 edx, 2
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 validate_numnodes
  0001a	85 c0		 test	 eax, eax
  0001c	74 35		 je	 SHORT $LN3@validate_d@4
  0001e	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00022	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03ONKLGNNH@del?$AA@
  00029	ba 01 00 00 00	 mov	 edx, 1
  0002e	e8 00 00 00 00	 call	 validate_terminal
  00033	85 c0		 test	 eax, eax
  00035	74 1c		 je	 SHORT $LN3@validate_d@4
  00037	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0003b	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0003f	e8 00 00 00 00	 call	 validate_exprlist
  00044	85 c0		 test	 eax, eax
  00046	74 0b		 je	 SHORT $LN3@validate_d@4
  00048	b8 01 00 00 00	 mov	 eax, 1

; 1605 : }

  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5b		 pop	 rbx
  00052	c3		 ret	 0
$LN3@validate_d@4:

; 1602 :     return (validate_numnodes(tree, 2, "del_stmt")
; 1603 :             && validate_name(CHILD(tree, 0), "del")
; 1604 :             && validate_exprlist(CHILD(tree, 1)));

  00053	33 c0		 xor	 eax, eax

; 1605 : }

  00055	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00059	5b		 pop	 rbx
  0005a	c3		 ret	 0
validate_del_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_05LKJGIMLP@yield?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_yield_expr DD imagerel validate_yield_expr
	DD	imagerel validate_yield_expr+114
	DD	imagerel $unwind$validate_yield_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_yield_expr DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_05LKJGIMLP@yield?$AA@
CONST	SEGMENT
??_C@_05LKJGIMLP@yield?$AA@ DB 'yield', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_yield_expr
_TEXT	SEGMENT
tree$ = 48
validate_yield_expr PROC				; COMDAT

; 1655 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1656 :     int nch = NCH(tree);

  0000a	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]
  0000d	48 8b d9	 mov	 rbx, rcx

; 1657 :     if (nch < 1 || nch > 2)

  00010	8d 47 ff	 lea	 eax, DWORD PTR [rdi-1]
  00013	83 f8 01	 cmp	 eax, 1
  00016	77 4d		 ja	 SHORT $LN5@validate_y@2

; 1659 :     if (!validate_ntype(tree, yield_expr))

  00018	ba 50 01 00 00	 mov	 edx, 336		; 00000150H
  0001d	e8 00 00 00 00	 call	 validate_ntype
  00022	85 c0		 test	 eax, eax

; 1660 :         return 0;

  00024	74 3f		 je	 SHORT $LN5@validate_y@2

; 1661 :     if (!validate_name(CHILD(tree, 0), "yield"))

  00026	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0002a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05LKJGIMLP@yield?$AA@
  00031	ba 01 00 00 00	 mov	 edx, 1
  00036	e8 00 00 00 00	 call	 validate_terminal
  0003b	85 c0		 test	 eax, eax

; 1662 :         return 0;

  0003d	74 26		 je	 SHORT $LN5@validate_y@2

; 1663 :     if (nch == 2) {

  0003f	83 ff 02	 cmp	 edi, 2
  00042	75 11		 jne	 SHORT $LN1@validate_y@2

; 1664 :         if (!validate_yield_arg(CHILD(tree, 1)))

  00044	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00048	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0004c	e8 00 00 00 00	 call	 validate_yield_arg
  00051	85 c0		 test	 eax, eax

; 1665 :             return 0;

  00053	74 10		 je	 SHORT $LN5@validate_y@2
$LN1@validate_y@2:

; 1666 :     }
; 1667 :     return 1;

  00055	b8 01 00 00 00	 mov	 eax, 1

; 1668 : }

  0005a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00063	5f		 pop	 rdi
  00064	c3		 ret	 0
$LN5@validate_y@2:

; 1658 :         return 0;

  00065	33 c0		 xor	 eax, eax

; 1668 : }

  00067	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5f		 pop	 rdi
  00071	c3		 ret	 0
validate_yield_expr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@HOAHOHEB@yield_stmt?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_yield_stmt DD imagerel validate_yield_stmt
	DD	imagerel validate_yield_stmt+79
	DD	imagerel $unwind$validate_yield_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_yield_stmt DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0L@HOAHOHEB@yield_stmt?$AA@
CONST	SEGMENT
??_C@_0L@HOAHOHEB@yield_stmt?$AA@ DB 'yield_stmt', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_yield_stmt
_TEXT	SEGMENT
tree$ = 48
validate_yield_stmt PROC				; COMDAT

; 1699 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1700 :     return (validate_ntype(tree, yield_stmt)
; 1701 :             && validate_numnodes(tree, 1, "yield_stmt")
; 1702 :             && validate_yield_expr(CHILD(tree, 0)));

  00006	ba 18 01 00 00	 mov	 edx, 280		; 00000118H
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 validate_ntype
  00013	85 c0		 test	 eax, eax
  00015	74 30		 je	 SHORT $LN3@validate_y@3
  00017	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@HOAHOHEB@yield_stmt?$AA@
  0001e	ba 01 00 00 00	 mov	 edx, 1
  00023	48 8b cb	 mov	 rcx, rbx
  00026	e8 00 00 00 00	 call	 validate_numnodes
  0002b	85 c0		 test	 eax, eax
  0002d	74 18		 je	 SHORT $LN3@validate_y@3
  0002f	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00033	e8 00 00 00 00	 call	 validate_yield_expr
  00038	85 c0		 test	 eax, eax
  0003a	74 0b		 je	 SHORT $LN3@validate_y@3
  0003c	b8 01 00 00 00	 mov	 eax, 1

; 1703 : }

  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5b		 pop	 rbx
  00046	c3		 ret	 0
$LN3@validate_y@3:

; 1700 :     return (validate_ntype(tree, yield_stmt)
; 1701 :             && validate_numnodes(tree, 1, "yield_stmt")
; 1702 :             && validate_yield_expr(CHILD(tree, 0)));

  00047	33 c0		 xor	 eax, eax

; 1703 : }

  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5b		 pop	 rbx
  0004e	c3		 ret	 0
validate_yield_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_04FHMCPBIP@else?$AA@			; `string'
PUBLIC	??_C@_03JOHEBPFF@for?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_for DD imagerel validate_for
	DD	imagerel validate_for+318
	DD	imagerel $unwind$validate_for
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_for DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_04FHMCPBIP@else?$AA@
CONST	SEGMENT
??_C@_04FHMCPBIP@else?$AA@ DB 'else', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JOHEBPFF@for?$AA@
CONST	SEGMENT
??_C@_03JOHEBPFF@for?$AA@ DB 'for', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_for
_TEXT	SEGMENT
tree$ = 48
validate_for PROC					; COMDAT

; 1972 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1973 :     int nch = NCH(tree);

  0000a	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 1974 :     int res = (validate_ntype(tree, for_stmt)
; 1975 :                && ((nch == 6) || (nch == 9))
; 1976 :                && validate_name(CHILD(tree, 0), "for")
; 1977 :                && validate_exprlist(CHILD(tree, 1))
; 1978 :                && validate_name(CHILD(tree, 2), "in")
; 1979 :                && validate_testlist(CHILD(tree, 3))
; 1980 :                && validate_colon(CHILD(tree, 4))
; 1981 :                && validate_suite(CHILD(tree, 5)));

  0000d	ba 28 01 00 00	 mov	 edx, 296		; 00000128H
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 0f 01 00
	00		 je	 $LN5@validate_f
  00022	83 ff 06	 cmp	 edi, 6
  00025	74 09		 je	 SHORT $LN4@validate_f
  00027	83 ff 09	 cmp	 edi, 9
  0002a	0f 85 01 01 00
	00		 jne	 $LN5@validate_f
$LN4@validate_f:
  00030	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00034	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03JOHEBPFF@for?$AA@
  0003b	ba 01 00 00 00	 mov	 edx, 1
  00040	e8 00 00 00 00	 call	 validate_terminal
  00045	85 c0		 test	 eax, eax
  00047	0f 84 e4 00 00
	00		 je	 $LN5@validate_f
  0004d	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00051	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00055	e8 00 00 00 00	 call	 validate_exprlist
  0005a	85 c0		 test	 eax, eax
  0005c	0f 84 cf 00 00
	00		 je	 $LN5@validate_f
  00062	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00066	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02LMMGJAGL@in?$AA@
  0006d	ba 01 00 00 00	 mov	 edx, 1
  00072	48 83 c1 50	 add	 rcx, 80			; 00000050H
  00076	e8 00 00 00 00	 call	 validate_terminal
  0007b	85 c0		 test	 eax, eax
  0007d	0f 84 ae 00 00
	00		 je	 $LN5@validate_f
  00083	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00087	48 83 c1 78	 add	 rcx, 120		; 00000078H
  0008b	e8 00 00 00 00	 call	 validate_testlist
  00090	85 c0		 test	 eax, eax
  00092	0f 84 99 00 00
	00		 je	 $LN5@validate_f
  00098	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0009c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  000a3	ba 0b 00 00 00	 mov	 edx, 11
  000a8	48 81 c1 a0 00
	00 00		 add	 rcx, 160		; 000000a0H
  000af	e8 00 00 00 00	 call	 validate_terminal
  000b4	85 c0		 test	 eax, eax
  000b6	74 79		 je	 SHORT $LN5@validate_f
  000b8	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  000bc	48 81 c1 c8 00
	00 00		 add	 rcx, 200		; 000000c8H
  000c3	e8 00 00 00 00	 call	 validate_suite
  000c8	85 c0		 test	 eax, eax
  000ca	74 65		 je	 SHORT $LN5@validate_f

; 1982 : 
; 1983 :     if (res && (nch == 9))

  000cc	83 ff 09	 cmp	 edi, 9
  000cf	75 50		 jne	 SHORT $LN10@validate_f

; 1984 :         res = (validate_name(CHILD(tree, 6), "else")
; 1985 :                && validate_colon(CHILD(tree, 7))
; 1986 :                && validate_suite(CHILD(tree, 8)));

  000d1	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  000d5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04FHMCPBIP@else?$AA@
  000dc	8d 57 f8	 lea	 edx, QWORD PTR [rdi-8]
  000df	48 81 c1 f0 00
	00 00		 add	 rcx, 240		; 000000f0H
  000e6	e8 00 00 00 00	 call	 validate_terminal
  000eb	85 c0		 test	 eax, eax
  000ed	74 42		 je	 SHORT $LN5@validate_f
  000ef	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  000f3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  000fa	8d 57 02	 lea	 edx, QWORD PTR [rdi+2]
  000fd	48 81 c1 18 01
	00 00		 add	 rcx, 280		; 00000118H
  00104	e8 00 00 00 00	 call	 validate_terminal
  00109	85 c0		 test	 eax, eax
  0010b	74 24		 je	 SHORT $LN5@validate_f
  0010d	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00111	48 81 c1 40 01
	00 00		 add	 rcx, 320		; 00000140H
  00118	e8 00 00 00 00	 call	 validate_suite
  0011d	85 c0		 test	 eax, eax
  0011f	74 10		 je	 SHORT $LN5@validate_f
$LN10@validate_f:

; 1987 : 
; 1988 :     return (res);

  00121	b8 01 00 00 00	 mov	 eax, 1

; 1989 : }

  00126	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0012b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0012f	5f		 pop	 rdi
  00130	c3		 ret	 0
$LN5@validate_f:

; 1987 : 
; 1988 :     return (res);

  00131	33 c0		 xor	 eax, eax

; 1989 : }

  00133	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00138	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0013c	5f		 pop	 rdi
  0013d	c3		 ret	 0
validate_for ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_test_nocond DD imagerel validate_test_nocond
	DD	imagerel validate_test_nocond+92
	DD	imagerel $unwind$validate_test_nocond
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_test_nocond DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT validate_test_nocond
_TEXT	SEGMENT
tree$ = 48
validate_test_nocond PROC				; COMDAT

; 2093 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2094 :     int nch = NCH(tree);

  0000a	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 2095 :     int res = validate_ntype(tree, test_nocond) && (nch == 1);

  0000d	ba 2f 01 00 00	 mov	 edx, 303		; 0000012fH
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	74 31		 je	 SHORT $LN6@validate_t@3
  0001e	83 ff 01	 cmp	 edi, 1
  00021	75 2c		 jne	 SHORT $LN6@validate_t@3

; 2096 : 
; 2097 :     if (res && (TYPE(CHILD(tree, 0)) == lambdef_nocond))

  00023	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00027	b8 31 01 00 00	 mov	 eax, 305		; 00000131H
  0002c	66 39 01	 cmp	 WORD PTR [rcx], ax
  0002f	75 0f		 jne	 SHORT $LN9@validate_t@3

; 2103 : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5f		 pop	 rdi
  0003b	e9 00 00 00 00	 jmp	 validate_lambdef_nocond
$LN9@validate_t@3:
  00040	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00045	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00049	5f		 pop	 rdi
  0004a	e9 00 00 00 00	 jmp	 validate_or_test
$LN6@validate_t@3:

; 2098 :         res = (validate_lambdef_nocond(CHILD(tree, 0)));
; 2099 :     else if (res) {
; 2100 :         res = (validate_or_test(CHILD(tree, 0)));
; 2101 :     }
; 2102 :     return (res);

  0004f	33 c0		 xor	 eax, eax

; 2103 : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
validate_test_nocond ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@LBBKIOJG@invalid?5number?5of?5arguments?5for?5@ ; `string'
PUBLIC	??_C@_09KAIPOAII@subscript?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_subscript DD imagerel validate_subscript
	DD	imagerel validate_subscript+457
	DD	imagerel $unwind$validate_subscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_subscript DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0CP@LBBKIOJG@invalid?5number?5of?5arguments?5for?5@
CONST	SEGMENT
??_C@_0CP@LBBKIOJG@invalid?5number?5of?5arguments?5for?5@ DB 'invalid num'
	DB	'ber of arguments for subscript node', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KAIPOAII@subscript?$AA@
CONST	SEGMENT
??_C@_09KAIPOAII@subscript?$AA@ DB 'subscript', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_subscript
_TEXT	SEGMENT
tree$ = 48
validate_subscript PROC					; COMDAT

; 2812 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2813 :     int offset = 0;
; 2814 :     int nch = NCH(tree);

  0000f	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 2815 :     int res = validate_ntype(tree, subscript) && (nch >= 1) && (nch <= 4);

  00012	ba 44 01 00 00	 mov	 edx, 324		; 00000144H
  00017	48 8b f1	 mov	 rsi, rcx
  0001a	33 db		 xor	 ebx, ebx
  0001c	e8 00 00 00 00	 call	 validate_ntype
  00021	85 c0		 test	 eax, eax
  00023	0f 84 78 01 00
	00		 je	 $LN16@validate_s@4
  00029	8d 47 ff	 lea	 eax, DWORD PTR [rdi-1]
  0002c	83 f8 03	 cmp	 eax, 3
  0002f	0f 87 6c 01 00
	00		 ja	 $LN16@validate_s@4

; 2820 :         return (0);
; 2821 :     }
; 2822 :     if (TYPE(CHILD(tree, 0)) == DOT)

  00035	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  00039	0f b7 01	 movzx	 eax, WORD PTR [rcx]
  0003c	66 83 f8 17	 cmp	 ax, 23
  00040	75 7a		 jne	 SHORT $LN11@validate_s@4

; 2823 :         /* take care of ('.' '.' '.') possibility */
; 2824 :         return (validate_numnodes(tree, 3, "subscript")
; 2825 :                 && validate_dot(CHILD(tree, 0))
; 2826 :                 && validate_dot(CHILD(tree, 1))
; 2827 :                 && validate_dot(CHILD(tree, 2)));

  00042	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09KAIPOAII@subscript?$AA@
  00049	8d 53 03	 lea	 edx, QWORD PTR [rbx+3]
  0004c	48 8b ce	 mov	 rcx, rsi
  0004f	e8 00 00 00 00	 call	 validate_numnodes
  00054	85 c0		 test	 eax, eax
  00056	74 52		 je	 SHORT $LN18@validate_s@4
  00058	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  0005c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  00063	8d 53 17	 lea	 edx, QWORD PTR [rbx+23]
  00066	e8 00 00 00 00	 call	 validate_terminal
  0006b	85 c0		 test	 eax, eax
  0006d	74 3b		 je	 SHORT $LN18@validate_s@4
  0006f	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  00073	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  0007a	8d 53 17	 lea	 edx, QWORD PTR [rbx+23]
  0007d	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00081	e8 00 00 00 00	 call	 validate_terminal
  00086	85 c0		 test	 eax, eax
  00088	74 20		 je	 SHORT $LN18@validate_s@4
  0008a	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  0008e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  00095	8d 53 17	 lea	 edx, QWORD PTR [rbx+23]
  00098	48 83 c1 50	 add	 rcx, 80			; 00000050H
  0009c	e8 00 00 00 00	 call	 validate_terminal
  000a1	85 c0		 test	 eax, eax
  000a3	74 05		 je	 SHORT $LN18@validate_s@4
  000a5	bb 01 00 00 00	 mov	 ebx, 1
$LN18@validate_s@4:
  000aa	8b c3		 mov	 eax, ebx

; 2858 : }

  000ac	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b1	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000b6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ba	5f		 pop	 rdi
  000bb	c3		 ret	 0
$LN11@validate_s@4:

; 2828 :     if (nch == 1) {

  000bc	83 ff 01	 cmp	 edi, 1
  000bf	75 3e		 jne	 SHORT $LN10@validate_s@4

; 2829 :         if (TYPE(CHILD(tree, 0)) == test)

  000c1	ba 2e 01 00 00	 mov	 edx, 302		; 0000012eH
  000c6	66 3b c2	 cmp	 ax, dx
  000c9	75 14		 jne	 SHORT $LN9@validate_s@4

; 2858 : }

  000cb	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000d0	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000d5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d9	5f		 pop	 rdi
  000da	e9 00 00 00 00	 jmp	 validate_test
$LN9@validate_s@4:

; 2830 :             res = validate_test(CHILD(tree, 0));
; 2831 :         else
; 2832 :             res = validate_colon(CHILD(tree, 0));

  000df	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  000e6	ba 0b 00 00 00	 mov	 edx, 11

; 2858 : }

  000eb	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000f0	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000f5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f9	5f		 pop	 rdi
  000fa	e9 00 00 00 00	 jmp	 validate_terminal
$LN10@validate_s@4:

; 2833 :         return (res);
; 2834 :     }
; 2835 :     /*  Must be [test] ':' [test] [sliceop],
; 2836 :      *  but at least one of the optional components will
; 2837 :      *  be present, but we don't know which yet.
; 2838 :      */
; 2839 :     if ((TYPE(CHILD(tree, 0)) != COLON) || (nch == 4)) {

  000ff	66 83 f8 0b	 cmp	 ax, 11
  00103	75 05		 jne	 SHORT $LN6@validate_s@4
  00105	83 ff 04	 cmp	 edi, 4
  00108	75 11		 jne	 SHORT $LN21@validate_s@4
$LN6@validate_s@4:

; 2840 :         res = validate_test(CHILD(tree, 0));

  0010a	e8 00 00 00 00	 call	 validate_test

; 2841 :         offset = 1;

  0010f	bb 01 00 00 00	 mov	 ebx, 1
  00114	44 8b d8	 mov	 r11d, eax

; 2842 :     }
; 2843 :     if (res)

  00117	85 c0		 test	 eax, eax
  00119	74 73		 je	 SHORT $LN1@validate_s@4
$LN21@validate_s@4:

; 2844 :         res = validate_colon(CHILD(tree, offset));

  0011b	48 63 c3	 movsxd	 rax, ebx
  0011e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00125	ba 0b 00 00 00	 mov	 edx, 11
  0012a	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0012e	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00132	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00136	e8 00 00 00 00	 call	 validate_terminal
  0013b	44 8b d8	 mov	 r11d, eax

; 2845 :     if (res) {

  0013e	85 c0		 test	 eax, eax
  00140	74 4c		 je	 SHORT $LN1@validate_s@4

; 2846 :         int rem = nch - ++offset;

  00142	ff c3		 inc	 ebx
  00144	2b fb		 sub	 edi, ebx

; 2847 :         if (rem) {

  00146	74 46		 je	 SHORT $LN1@validate_s@4

; 2848 :             if (TYPE(CHILD(tree, offset)) == test) {

  00148	48 63 c3	 movsxd	 rax, ebx
  0014b	ba 2e 01 00 00	 mov	 edx, 302		; 0000012eH
  00150	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00154	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00158	66 39 14 c8	 cmp	 WORD PTR [rax+rcx*8], dx
  0015c	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00160	75 0c		 jne	 SHORT $LN2@validate_s@4

; 2849 :                 res = validate_test(CHILD(tree, offset));

  00162	e8 00 00 00 00	 call	 validate_test

; 2850 :                 ++offset;

  00167	ff c3		 inc	 ebx

; 2851 :                 --rem;

  00169	ff cf		 dec	 edi
  0016b	44 8b d8	 mov	 r11d, eax
$LN2@validate_s@4:

; 2852 :             }
; 2853 :             if (res && rem)

  0016e	45 85 db	 test	 r11d, r11d
  00171	74 1b		 je	 SHORT $LN1@validate_s@4
  00173	85 ff		 test	 edi, edi
  00175	74 17		 je	 SHORT $LN1@validate_s@4

; 2854 :                 res = validate_sliceop(CHILD(tree, offset));

  00177	48 63 c3	 movsxd	 rax, ebx
  0017a	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0017e	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00182	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00186	e8 00 00 00 00	 call	 validate_sliceop
  0018b	44 8b d8	 mov	 r11d, eax
$LN1@validate_s@4:

; 2855 :         }
; 2856 :     }
; 2857 :     return (res);

  0018e	41 8b c3	 mov	 eax, r11d

; 2858 : }

  00191	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00196	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0019b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0019f	5f		 pop	 rdi
  001a0	c3		 ret	 0
$LN16@validate_s@4:

; 2816 : 
; 2817 :     if (!res) {
; 2818 :         if (!PyErr_Occurred())

  001a1	e8 00 00 00 00	 call	 PyErr_Occurred
  001a6	48 85 c0	 test	 rax, rax
  001a9	75 0c		 jne	 SHORT $LN12@validate_s@4

; 2819 :             err_string("invalid number of arguments for subscript node");

  001ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CP@LBBKIOJG@invalid?5number?5of?5arguments?5for?5@
  001b2	e8 00 00 00 00	 call	 err_string
$LN12@validate_s@4:

; 2858 : }

  001b7	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001bc	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  001c1	33 c0		 xor	 eax, eax
  001c3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001c7	5f		 pop	 rdi
  001c8	c3		 ret	 0
validate_subscript ENDP
_TEXT	ENDS
PUBLIC	??_C@_02HEBPBKGD@if?$AA@			; `string'
PUBLIC	??_C@_07BDDAGEPD@comp_if?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_comp_if DD imagerel validate_comp_if
	DD	imagerel validate_comp_if+112
	DD	imagerel $unwind$validate_comp_if
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_comp_if DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_02HEBPBKGD@if?$AA@
CONST	SEGMENT
??_C@_02HEBPBKGD@if?$AA@ DB 'if', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07BDDAGEPD@comp_if?$AA@
CONST	SEGMENT
??_C@_07BDDAGEPD@comp_if?$AA@ DB 'comp_if', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_comp_if
_TEXT	SEGMENT
tree$ = 48
validate_comp_if PROC					; COMDAT

; 1412 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1413 :     int nch = NCH(tree);
; 1414 :     int res;
; 1415 : 
; 1416 :     if (nch == 3)

  00006	83 79 18 03	 cmp	 DWORD PTR [rcx+24], 3
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	75 0f		 jne	 SHORT $LN3@validate_c@4

; 1417 :         res = validate_comp_iter(CHILD(tree, 2));

  0000f	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00013	48 83 c1 50	 add	 rcx, 80			; 00000050H
  00017	e8 00 00 00 00	 call	 validate_comp_iter

; 1418 :     else

  0001c	eb 11		 jmp	 SHORT $LN2@validate_c@4
$LN3@validate_c@4:

; 1419 :         res = validate_numnodes(tree, 2, "comp_if");

  0001e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07BDDAGEPD@comp_if?$AA@
  00025	ba 02 00 00 00	 mov	 edx, 2
  0002a	e8 00 00 00 00	 call	 validate_numnodes
$LN2@validate_c@4:

; 1420 : 
; 1421 :     if (res)

  0002f	85 c0		 test	 eax, eax
  00031	74 37		 je	 SHORT $LN8@validate_c@4

; 1422 :         res = (validate_name(CHILD(tree, 0), "if")
; 1423 :                && validate_test_nocond(CHILD(tree, 1)));

  00033	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00037	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HEBPBKGD@if?$AA@
  0003e	ba 01 00 00 00	 mov	 edx, 1
  00043	e8 00 00 00 00	 call	 validate_terminal
  00048	85 c0		 test	 eax, eax
  0004a	74 1c		 je	 SHORT $LN6@validate_c@4
  0004c	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00050	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00054	e8 00 00 00 00	 call	 validate_test_nocond
  00059	85 c0		 test	 eax, eax
  0005b	74 0b		 je	 SHORT $LN6@validate_c@4

; 1424 : 
; 1425 :     return res;

  0005d	b8 01 00 00 00	 mov	 eax, 1

; 1426 : }

  00062	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00066	5b		 pop	 rbx
  00067	c3		 ret	 0
$LN6@validate_c@4:

; 1424 : 
; 1425 :     return res;

  00068	33 c0		 xor	 eax, eax
$LN8@validate_c@4:

; 1426 : }

  0006a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006e	5b		 pop	 rbx
  0006f	c3		 ret	 0
validate_comp_if ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT validate_yield_or_testlist
_TEXT	SEGMENT
tree$ = 8
tse$ = 16
validate_yield_or_testlist PROC				; COMDAT

; 1546 :     if (TYPE(tree) == yield_expr) {

  00000	b8 50 01 00 00	 mov	 eax, 336		; 00000150H
  00005	66 39 01	 cmp	 WORD PTR [rcx], ax
  00008	75 05		 jne	 SHORT $LN4@validate_y@4

; 1551 :             return validate_testlist_star_expr(tree);
; 1552 :         else
; 1553 :             return validate_testlist(tree);
; 1554 :     }
; 1555 : }

  0000a	e9 00 00 00 00	 jmp	 validate_yield_expr
$LN4@validate_y@4:

; 1547 :         return validate_yield_expr(tree);
; 1548 :     }
; 1549 :     else {
; 1550 :         if (tse)

  0000f	85 d2		 test	 edx, edx
  00011	74 05		 je	 SHORT $LN2@validate_y@4

; 1551 :             return validate_testlist_star_expr(tree);
; 1552 :         else
; 1553 :             return validate_testlist(tree);
; 1554 :     }
; 1555 : }

  00013	e9 00 00 00 00	 jmp	 validate_testlist_star_expr
$LN2@validate_y@4:
  00018	e9 00 00 00 00	 jmp	 validate_testlist
validate_yield_or_testlist ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@JNCGNNHN@illegal?5augmented?5assignment?5ope@ ; `string'
PUBLIC	??_C@_03EOAGOEDB@?$CK?$CK?$DN?$AA@		; `string'
PUBLIC	??_C@_03IKFCCPFF@?$DO?$DO?$DN?$AA@		; `string'
PUBLIC	??_C@_03CDNPDDLA@?$DM?$DM?$DN?$AA@		; `string'
PUBLIC	??_C@_02MHEGNOJ@?$FO?$DN?$AA@			; `string'
PUBLIC	??_C@_02DHLNPPGH@?$HM?$DN?$AA@			; `string'
PUBLIC	??_C@_02FGJGFEAB@?$CG?$DN?$AA@			; `string'
PUBLIC	??_C@_02FENAOKFI@?$CF?$DN?$AA@			; `string'
PUBLIC	??_C@_03HPBDNGOI@?1?1?$DN?$AA@			; `string'
PUBLIC	??_C@_02FJEHGPIO@?1?$DN?$AA@			; `string'
PUBLIC	??_C@_02FPIMKNGF@?$CK?$DN?$AA@			; `string'
PUBLIC	??_C@_02FKMDLLOA@?9?$DN?$AA@			; `string'
PUBLIC	??_C@_02FOEOMHFC@?$CL?$DN?$AA@			; `string'
PUBLIC	??_C@_09KMIHFGNL@augassign?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_expr_stmt DD imagerel validate_expr_stmt
	DD	imagerel validate_expr_stmt+576
	DD	imagerel $unwind$validate_expr_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_expr_stmt DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0CG@JNCGNNHN@illegal?5augmented?5assignment?5ope@
CONST	SEGMENT
??_C@_0CG@JNCGNNHN@illegal?5augmented?5assignment?5ope@ DB 'illegal augme'
	DB	'nted assignment operator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EOAGOEDB@?$CK?$CK?$DN?$AA@
CONST	SEGMENT
??_C@_03EOAGOEDB@?$CK?$CK?$DN?$AA@ DB '**=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03IKFCCPFF@?$DO?$DO?$DN?$AA@
CONST	SEGMENT
??_C@_03IKFCCPFF@?$DO?$DO?$DN?$AA@ DB '>>=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CDNPDDLA@?$DM?$DM?$DN?$AA@
CONST	SEGMENT
??_C@_03CDNPDDLA@?$DM?$DM?$DN?$AA@ DB '<<=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02MHEGNOJ@?$FO?$DN?$AA@
CONST	SEGMENT
??_C@_02MHEGNOJ@?$FO?$DN?$AA@ DB '^=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DHLNPPGH@?$HM?$DN?$AA@
CONST	SEGMENT
??_C@_02DHLNPPGH@?$HM?$DN?$AA@ DB '|=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FGJGFEAB@?$CG?$DN?$AA@
CONST	SEGMENT
??_C@_02FGJGFEAB@?$CG?$DN?$AA@ DB '&=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FENAOKFI@?$CF?$DN?$AA@
CONST	SEGMENT
??_C@_02FENAOKFI@?$CF?$DN?$AA@ DB '%=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HPBDNGOI@?1?1?$DN?$AA@
CONST	SEGMENT
??_C@_03HPBDNGOI@?1?1?$DN?$AA@ DB '//=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FJEHGPIO@?1?$DN?$AA@
CONST	SEGMENT
??_C@_02FJEHGPIO@?1?$DN?$AA@ DB '/=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FPIMKNGF@?$CK?$DN?$AA@
CONST	SEGMENT
??_C@_02FPIMKNGF@?$CK?$DN?$AA@ DB '*=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FKMDLLOA@?9?$DN?$AA@
CONST	SEGMENT
??_C@_02FKMDLLOA@?9?$DN?$AA@ DB '-=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FOEOMHFC@?$CL?$DN?$AA@
CONST	SEGMENT
??_C@_02FOEOMHFC@?$CL?$DN?$AA@ DB '+=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KMIHFGNL@augassign?$AA@
CONST	SEGMENT
??_C@_09KMIHFGNL@augassign?$AA@ DB 'augassign', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_expr_stmt
_TEXT	SEGMENT
tree$ = 48
validate_expr_stmt PROC					; COMDAT

; 1559 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1560 :     int j;
; 1561 :     int nch = NCH(tree);

  0000f	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]

; 1562 :     int res = (validate_ntype(tree, expr_stmt)
; 1563 :                && is_odd(nch)
; 1564 :                && validate_testlist_star_expr(CHILD(tree, 0)));

  00012	ba 0f 01 00 00	 mov	 edx, 271		; 0000010fH
  00017	48 8b f1	 mov	 rsi, rcx
  0001a	e8 00 00 00 00	 call	 validate_ntype
  0001f	85 c0		 test	 eax, eax
  00021	0f 84 a4 01 00
	00		 je	 $LN10@validate_e@4
  00027	f6 c3 01	 test	 bl, 1
  0002a	0f 84 9b 01 00
	00		 je	 $LN10@validate_e@4
  00030	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  00034	e8 00 00 00 00	 call	 validate_testlist_star_expr
  00039	85 c0		 test	 eax, eax
  0003b	0f 84 8a 01 00
	00		 je	 $LN10@validate_e@4
  00041	ba 01 00 00 00	 mov	 edx, 1

; 1565 : 
; 1566 :     if (res && nch == 3
; 1567 :         && TYPE(CHILD(tree, 1)) == augassign) {

  00046	83 fb 03	 cmp	 ebx, 3
  00049	0f 85 7e 01 00
	00		 jne	 $LN7@validate_e@4
  0004f	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  00053	b8 11 01 00 00	 mov	 eax, 273		; 00000111H
  00058	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0005c	66 39 01	 cmp	 WORD PTR [rcx], ax
  0005f	0f 85 68 01 00
	00		 jne	 $LN7@validate_e@4

; 1568 :         res = validate_numnodes(CHILD(tree, 1), 1, "augassign")
; 1569 :             && validate_yield_or_testlist(CHILD(tree, 2), 0);

  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09KMIHFGNL@augassign?$AA@
  0006c	e8 00 00 00 00	 call	 validate_numnodes
  00071	85 c0		 test	 eax, eax
  00073	0f 84 2b 01 00
	00		 je	 $LN12@validate_e@4
  00079	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  0007d	33 d2		 xor	 edx, edx
  0007f	48 83 c1 50	 add	 rcx, 80			; 00000050H
  00083	e8 00 00 00 00	 call	 validate_yield_or_testlist
  00088	85 c0		 test	 eax, eax
  0008a	0f 84 14 01 00
	00		 je	 $LN12@validate_e@4

; 1570 : 
; 1571 :         if (res) {
; 1572 :             char *s = STR(CHILD(CHILD(tree, 1), 0));

  00090	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]

; 1573 : 
; 1574 :             res = (strcmp(s, "+=") == 0
; 1575 :                    || strcmp(s, "-=") == 0
; 1576 :                    || strcmp(s, "*=") == 0
; 1577 :                    || strcmp(s, "/=") == 0
; 1578 :                    || strcmp(s, "//=") == 0
; 1579 :                    || strcmp(s, "%=") == 0
; 1580 :                    || strcmp(s, "&=") == 0
; 1581 :                    || strcmp(s, "|=") == 0
; 1582 :                    || strcmp(s, "^=") == 0
; 1583 :                    || strcmp(s, "<<=") == 0
; 1584 :                    || strcmp(s, ">>=") == 0
; 1585 :                    || strcmp(s, "**=") == 0);

  00094	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_02FOEOMHFC@?$CL?$DN?$AA@
  0009b	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  0009f	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  000a3	b9 03 00 00 00	 mov	 ecx, 3
  000a8	48 8b f0	 mov	 rsi, rax
  000ab	f3 a6		 repe cmpsb
  000ad	0f 84 03 01 00
	00		 je	 $LN14@validate_e@4
  000b3	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_02FKMDLLOA@?9?$DN?$AA@
  000ba	48 8b f0	 mov	 rsi, rax
  000bd	b9 03 00 00 00	 mov	 ecx, 3
  000c2	f3 a6		 repe cmpsb
  000c4	0f 84 ec 00 00
	00		 je	 $LN14@validate_e@4
  000ca	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_02FPIMKNGF@?$CK?$DN?$AA@
  000d1	48 8b f0	 mov	 rsi, rax
  000d4	b9 03 00 00 00	 mov	 ecx, 3
  000d9	f3 a6		 repe cmpsb
  000db	0f 84 d5 00 00
	00		 je	 $LN14@validate_e@4
  000e1	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_02FJEHGPIO@?1?$DN?$AA@
  000e8	48 8b f0	 mov	 rsi, rax
  000eb	b9 03 00 00 00	 mov	 ecx, 3
  000f0	f3 a6		 repe cmpsb
  000f2	0f 84 be 00 00
	00		 je	 $LN14@validate_e@4
  000f8	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03HPBDNGOI@?1?1?$DN?$AA@
  000ff	48 8b f0	 mov	 rsi, rax
  00102	b9 04 00 00 00	 mov	 ecx, 4
  00107	f3 a6		 repe cmpsb
  00109	0f 84 a7 00 00
	00		 je	 $LN14@validate_e@4
  0010f	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_02FENAOKFI@?$CF?$DN?$AA@
  00116	48 8b f0	 mov	 rsi, rax
  00119	b9 03 00 00 00	 mov	 ecx, 3
  0011e	f3 a6		 repe cmpsb
  00120	0f 84 90 00 00
	00		 je	 $LN14@validate_e@4
  00126	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_02FGJGFEAB@?$CG?$DN?$AA@
  0012d	48 8b f0	 mov	 rsi, rax
  00130	b9 03 00 00 00	 mov	 ecx, 3
  00135	f3 a6		 repe cmpsb
  00137	74 7d		 je	 SHORT $LN14@validate_e@4
  00139	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_02DHLNPPGH@?$HM?$DN?$AA@
  00140	48 8b f0	 mov	 rsi, rax
  00143	b9 03 00 00 00	 mov	 ecx, 3
  00148	f3 a6		 repe cmpsb
  0014a	74 6a		 je	 SHORT $LN14@validate_e@4
  0014c	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_02MHEGNOJ@?$FO?$DN?$AA@
  00153	48 8b f0	 mov	 rsi, rax
  00156	b9 03 00 00 00	 mov	 ecx, 3
  0015b	f3 a6		 repe cmpsb
  0015d	74 57		 je	 SHORT $LN14@validate_e@4
  0015f	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03CDNPDDLA@?$DM?$DM?$DN?$AA@
  00166	48 8b f0	 mov	 rsi, rax
  00169	b9 04 00 00 00	 mov	 ecx, 4
  0016e	f3 a6		 repe cmpsb
  00170	74 44		 je	 SHORT $LN14@validate_e@4
  00172	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03IKFCCPFF@?$DO?$DO?$DN?$AA@
  00179	48 8b f0	 mov	 rsi, rax
  0017c	b9 04 00 00 00	 mov	 ecx, 4
  00181	f3 a6		 repe cmpsb
  00183	74 31		 je	 SHORT $LN14@validate_e@4
  00185	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03EOAGOEDB@?$CK?$CK?$DN?$AA@
  0018c	48 8b f0	 mov	 rsi, rax
  0018f	b9 04 00 00 00	 mov	 ecx, 4
  00194	f3 a6		 repe cmpsb
  00196	74 1e		 je	 SHORT $LN14@validate_e@4

; 1586 :             if (!res)
; 1587 :                 err_string("illegal augmented assignment operator");

  00198	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@JNCGNNHN@illegal?5augmented?5assignment?5ope@
  0019f	e8 00 00 00 00	 call	 err_string
$LN12@validate_e@4:

; 1594 :     }
; 1595 :     return (res);

  001a4	33 c0		 xor	 eax, eax

; 1596 : }

  001a6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001ab	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  001b0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001b4	5f		 pop	 rdi
  001b5	c3		 ret	 0
$LN14@validate_e@4:

; 1594 :     }
; 1595 :     return (res);

  001b6	b8 01 00 00 00	 mov	 eax, 1

; 1596 : }

  001bb	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001c0	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  001c5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001c9	5f		 pop	 rdi
  001ca	c3		 ret	 0
$LN10@validate_e@4:

; 1562 :     int res = (validate_ntype(tree, expr_stmt)
; 1563 :                && is_odd(nch)
; 1564 :                && validate_testlist_star_expr(CHILD(tree, 0)));

  001cb	33 d2		 xor	 edx, edx
$LN7@validate_e@4:

; 1588 :         }
; 1589 :     }
; 1590 :     else {
; 1591 :         for (j = 1; res && (j < nch); j += 2)

  001cd	bf 01 00 00 00	 mov	 edi, 1
  001d2	85 d2		 test	 edx, edx
  001d4	74 58		 je	 SHORT $LN23@validate_e@4
$LL3@validate_e@4:
  001d6	3b fb		 cmp	 edi, ebx
  001d8	7d 54		 jge	 SHORT $LN23@validate_e@4

; 1592 :             res = validate_equal(CHILD(tree, j))
; 1593 :                 && validate_yield_or_testlist(CHILD(tree, j + 1), 1);

  001da	48 63 c7	 movsxd	 rax, edi
  001dd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01NEMOKFLO@?$DN?$AA@
  001e4	ba 16 00 00 00	 mov	 edx, 22
  001e9	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  001ed	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  001f1	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  001f5	e8 00 00 00 00	 call	 validate_terminal
  001fa	85 c0		 test	 eax, eax
  001fc	74 27		 je	 SHORT $LN16@validate_e@4
  001fe	8d 47 01	 lea	 eax, DWORD PTR [rdi+1]
  00201	48 63 c8	 movsxd	 rcx, eax
  00204	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00208	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  0020c	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00210	ba 01 00 00 00	 mov	 edx, 1
  00215	e8 00 00 00 00	 call	 validate_yield_or_testlist
  0021a	85 c0		 test	 eax, eax
  0021c	74 07		 je	 SHORT $LN16@validate_e@4
  0021e	ba 01 00 00 00	 mov	 edx, 1
  00223	eb 02		 jmp	 SHORT $LN17@validate_e@4
$LN16@validate_e@4:
  00225	33 d2		 xor	 edx, edx
$LN17@validate_e@4:

; 1588 :         }
; 1589 :     }
; 1590 :     else {
; 1591 :         for (j = 1; res && (j < nch); j += 2)

  00227	83 c7 02	 add	 edi, 2
  0022a	85 d2		 test	 edx, edx
  0022c	75 a8		 jne	 SHORT $LL3@validate_e@4
$LN23@validate_e@4:

; 1596 : }

  0022e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00233	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00238	8b c2		 mov	 eax, edx
  0023a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0023e	5f		 pop	 rdi
  0023f	c3		 ret	 0
validate_expr_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@OMMKCBCG@subscriptlist?$AA@		; `string'
;	COMDAT ??_C@_0O@OMMKCBCG@subscriptlist?$AA@
CONST	SEGMENT
??_C@_0O@OMMKCBCG@subscriptlist?$AA@ DB 'subscriptlist', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_subscriptlist
_TEXT	SEGMENT
tree$ = 8
validate_subscriptlist PROC				; COMDAT

; 2801 :     return (validate_repeating_list(tree, subscriptlist,
; 2802 :                                     validate_subscript, "subscriptlist"));

  00000	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0O@OMMKCBCG@subscriptlist?$AA@
  00007	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:validate_subscript
  0000e	ba 43 01 00 00	 mov	 edx, 323		; 00000143H

; 2803 : }

  00013	e9 00 00 00 00	 jmp	 validate_repeating_list
validate_subscriptlist ENDP
_TEXT	ENDS
PUBLIC	??_C@_09NMELIJKE@comp_iter?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_comp_iter DD imagerel validate_comp_iter
	DD	imagerel validate_comp_iter+85
	DD	imagerel $unwind$validate_comp_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_comp_iter DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_09NMELIJKE@comp_iter?$AA@
CONST	SEGMENT
??_C@_09NMELIJKE@comp_iter?$AA@ DB 'comp_iter', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_comp_iter
_TEXT	SEGMENT
tree$ = 48
validate_comp_iter PROC					; COMDAT

; 1375 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1376 :     int res = (validate_ntype(tree, comp_iter)
; 1377 :                && validate_numnodes(tree, 1, "comp_iter"));

  00006	ba 4c 01 00 00	 mov	 edx, 332		; 0000014cH
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 validate_ntype
  00013	85 c0		 test	 eax, eax
  00015	74 30		 je	 SHORT $LN2@validate_c@5
  00017	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09NMELIJKE@comp_iter?$AA@
  0001e	ba 01 00 00 00	 mov	 edx, 1
  00023	48 8b cb	 mov	 rcx, rbx
  00026	e8 00 00 00 00	 call	 validate_numnodes
  0002b	85 c0		 test	 eax, eax

; 1378 :     if (res && TYPE(CHILD(tree, 0)) == comp_for)

  0002d	74 18		 je	 SHORT $LN2@validate_c@5
  0002f	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00033	b8 4d 01 00 00	 mov	 eax, 333		; 0000014dH
  00038	66 39 01	 cmp	 WORD PTR [rcx], ax
  0003b	75 0a		 jne	 SHORT $LN2@validate_c@5

; 1382 : 
; 1383 :     return res;
; 1384 : }

  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5b		 pop	 rbx
  00042	e9 00 00 00 00	 jmp	 validate_comp_for
$LN2@validate_c@5:

; 1379 :         res = validate_comp_for(CHILD(tree, 0));
; 1380 :     else
; 1381 :         res = validate_comp_if(CHILD(tree, 0));

  00047	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]

; 1382 : 
; 1383 :     return res;
; 1384 : }

  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5b		 pop	 rbx
  00050	e9 00 00 00 00	 jmp	 validate_comp_if
validate_comp_iter ENDP
_TEXT	ENDS
PUBLIC	??_C@_08GOBMKDGP@comp_for?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_comp_for DD imagerel validate_comp_for
	DD	imagerel validate_comp_for+161
	DD	imagerel $unwind$validate_comp_for
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_comp_for DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_08GOBMKDGP@comp_for?$AA@
CONST	SEGMENT
??_C@_08GOBMKDGP@comp_for?$AA@ DB 'comp_for', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_comp_for
_TEXT	SEGMENT
tree$ = 48
validate_comp_for PROC					; COMDAT

; 1390 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1391 :     int nch = NCH(tree);
; 1392 :     int res;
; 1393 : 
; 1394 :     if (nch == 5)

  00006	83 79 18 05	 cmp	 DWORD PTR [rcx+24], 5
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	75 12		 jne	 SHORT $LN3@validate_c@6

; 1395 :         res = validate_comp_iter(CHILD(tree, 4));

  0000f	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00013	48 81 c1 a0 00
	00 00		 add	 rcx, 160		; 000000a0H
  0001a	e8 00 00 00 00	 call	 validate_comp_iter

; 1396 :     else

  0001f	eb 11		 jmp	 SHORT $LN2@validate_c@6
$LN3@validate_c@6:

; 1397 :         res = validate_numnodes(tree, 4, "comp_for");

  00021	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08GOBMKDGP@comp_for?$AA@
  00028	ba 04 00 00 00	 mov	 edx, 4
  0002d	e8 00 00 00 00	 call	 validate_numnodes
$LN2@validate_c@6:

; 1398 : 
; 1399 :     if (res)

  00032	85 c0		 test	 eax, eax
  00034	74 65		 je	 SHORT $LN8@validate_c@6

; 1400 :         res = (validate_name(CHILD(tree, 0), "for")
; 1401 :                && validate_exprlist(CHILD(tree, 1))
; 1402 :                && validate_name(CHILD(tree, 2), "in")
; 1403 :                && validate_or_test(CHILD(tree, 3)));

  00036	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0003a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03JOHEBPFF@for?$AA@
  00041	ba 01 00 00 00	 mov	 edx, 1
  00046	e8 00 00 00 00	 call	 validate_terminal
  0004b	85 c0		 test	 eax, eax
  0004d	74 4a		 je	 SHORT $LN6@validate_c@6
  0004f	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00053	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00057	e8 00 00 00 00	 call	 validate_exprlist
  0005c	85 c0		 test	 eax, eax
  0005e	74 39		 je	 SHORT $LN6@validate_c@6
  00060	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00064	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02LMMGJAGL@in?$AA@
  0006b	ba 01 00 00 00	 mov	 edx, 1
  00070	48 83 c1 50	 add	 rcx, 80			; 00000050H
  00074	e8 00 00 00 00	 call	 validate_terminal
  00079	85 c0		 test	 eax, eax
  0007b	74 1c		 je	 SHORT $LN6@validate_c@6
  0007d	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00081	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00085	e8 00 00 00 00	 call	 validate_or_test
  0008a	85 c0		 test	 eax, eax
  0008c	74 0b		 je	 SHORT $LN6@validate_c@6

; 1404 : 
; 1405 :     return res;

  0008e	b8 01 00 00 00	 mov	 eax, 1

; 1406 : }

  00093	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00097	5b		 pop	 rbx
  00098	c3		 ret	 0
$LN6@validate_c@6:

; 1404 : 
; 1405 :     return res;

  00099	33 c0		 xor	 eax, eax
$LN8@validate_c@6:

; 1406 : }

  0009b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009f	5b		 pop	 rbx
  000a0	c3		 ret	 0
validate_comp_for ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@LKPLJEO@illegal?5trailing?5nodes?5for?5testl@ ; `string'
PUBLIC	??_C@_0CF@IEDODHFK@missing?5child?5nodes?5of?5testlist_@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_testlist_comp DD imagerel validate_testlist_comp
	DD	imagerel validate_testlist_comp+40
	DD	imagerel $unwind$validate_testlist_comp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$validate_testlist_comp DD imagerel validate_testlist_comp+40
	DD	imagerel validate_testlist_comp+159
	DD	imagerel $chain$2$validate_testlist_comp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$validate_testlist_comp DD imagerel validate_testlist_comp+159
	DD	imagerel validate_testlist_comp+215
	DD	imagerel $chain$3$validate_testlist_comp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$validate_testlist_comp DD imagerel validate_testlist_comp+215
	DD	imagerel validate_testlist_comp+321
	DD	imagerel $chain$4$validate_testlist_comp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$validate_testlist_comp DD 060021H
	DD	0ad400H
	DD	097400H
	DD	086400H
	DD	imagerel validate_testlist_comp
	DD	imagerel validate_testlist_comp+40
	DD	imagerel $unwind$validate_testlist_comp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$validate_testlist_comp DD 021H
	DD	imagerel validate_testlist_comp
	DD	imagerel validate_testlist_comp+40
	DD	imagerel $unwind$validate_testlist_comp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$validate_testlist_comp DD 060f21H
	DD	0ad40fH
	DD	09740aH
	DD	086405H
	DD	imagerel validate_testlist_comp
	DD	imagerel validate_testlist_comp+40
	DD	imagerel $unwind$validate_testlist_comp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_testlist_comp DD 040901H
	DD	0c0053209H
	DD	030025003H
xdata	ENDS
;	COMDAT ??_C@_0CJ@LKPLJEO@illegal?5trailing?5nodes?5for?5testl@
CONST	SEGMENT
??_C@_0CJ@LKPLJEO@illegal?5trailing?5nodes?5for?5testl@ DB 'illegal trail'
	DB	'ing nodes for testlist_comp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IEDODHFK@missing?5child?5nodes?5of?5testlist_@
CONST	SEGMENT
??_C@_0CF@IEDODHFK@missing?5child?5nodes?5of?5testlist_@ DB 'missing chil'
	DB	'd nodes of testlist_comp', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_testlist_comp
_TEXT	SEGMENT
tree$ = 64
validate_testlist_comp PROC				; COMDAT

; 2452 : {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	41 54		 push	 r12
  00005	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2453 :     int nch = NCH(tree);

  00009	44 8b 61 18	 mov	 r12d, DWORD PTR [rcx+24]
  0000d	48 8b e9	 mov	 rbp, rcx

; 2454 :     int ok = nch;

  00010	41 8b dc	 mov	 ebx, r12d

; 2455 : 
; 2456 :     if (nch == 0)

  00013	45 85 e4	 test	 r12d, r12d
  00016	0f 85 83 00 00
	00		 jne	 $LN9@validate_t@4

; 2457 :         err_string("missing child nodes of testlist_comp");

  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@IEDODHFK@missing?5child?5nodes?5of?5testlist_@
  00023	e8 00 00 00 00	 call	 err_string
$LN7@validate_t@4:

; 2466 :         ok = validate_comp_for(CHILD(tree, 1));
; 2467 :     else {
; 2468 :         /*  (',' test)* [',']  */
; 2469 :         int i = 1;

  00028	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0002d	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00032	4c 89 6c 24 50	 mov	 QWORD PTR [rsp+80], r13
  00037	bf 01 00 00 00	 mov	 edi, 1

; 2470 :         while (ok && nch - i >= 2) {

  0003c	85 db		 test	 ebx, ebx
  0003e	0f 84 a3 00 00
	00		 je	 $LN3@validate_t@4

; 2466 :         ok = validate_comp_for(CHILD(tree, 1));
; 2467 :     else {
; 2468 :         /*  (',' test)* [',']  */
; 2469 :         int i = 1;

  00044	45 8d 6c 24 ff	 lea	 r13d, DWORD PTR [r12-1]
  00049	41 8b f5	 mov	 esi, r13d
  0004c	0f 1f 40 00	 npad	 4
$LL5@validate_t@4:

; 2470 :         while (ok && nch - i >= 2) {

  00050	83 fe 02	 cmp	 esi, 2
  00053	0f 8c a3 00 00
	00		 jl	 $LN4@validate_t@4

; 2471 :             ok = (validate_comma(CHILD(tree, i))
; 2472 :                   && validate_test_or_star_expr(CHILD(tree, i+1)));

  00059	48 63 c7	 movsxd	 rax, edi
  0005c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  00063	ba 0c 00 00 00	 mov	 edx, 12
  00068	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0006c	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  00070	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00074	e8 00 00 00 00	 call	 validate_terminal
  00079	85 c0		 test	 eax, eax
  0007b	74 5a		 je	 SHORT $LN12@validate_t@4
  0007d	8d 47 01	 lea	 eax, DWORD PTR [rdi+1]
  00080	48 63 c8	 movsxd	 rcx, eax
  00083	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  00087	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  0008b	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  0008f	e8 00 00 00 00	 call	 validate_test_or_star_expr
  00094	85 c0		 test	 eax, eax
  00096	74 3f		 je	 SHORT $LN12@validate_t@4
  00098	bb 01 00 00 00	 mov	 ebx, 1
  0009d	eb 3a		 jmp	 SHORT $LN13@validate_t@4
$LN9@validate_t@4:

; 2458 :     else {
; 2459 :         ok = validate_test_or_star_expr(CHILD(tree, 0));

  0009f	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  000a3	e8 00 00 00 00	 call	 validate_test_or_star_expr
  000a8	8b d8		 mov	 ebx, eax

; 2460 :     }
; 2461 : 
; 2462 :     /*
; 2463 :      *  comp_for | (',' test)* [',']
; 2464 :      */
; 2465 :     if (nch == 2 && TYPE(CHILD(tree, 1)) == comp_for)

  000aa	41 83 fc 02	 cmp	 r12d, 2
  000ae	0f 85 74 ff ff
	ff		 jne	 $LN7@validate_t@4
  000b4	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  000b8	b8 4d 01 00 00	 mov	 eax, 333		; 0000014dH
  000bd	48 83 c1 28	 add	 rcx, 40			; 00000028H
  000c1	66 39 01	 cmp	 WORD PTR [rcx], ax
  000c4	0f 85 5e ff ff
	ff		 jne	 $LN7@validate_t@4

; 2483 : }

  000ca	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ce	41 5c		 pop	 r12
  000d0	5d		 pop	 rbp
  000d1	5b		 pop	 rbx
  000d2	e9 00 00 00 00	 jmp	 validate_comp_for
$LN12@validate_t@4:

; 2471 :             ok = (validate_comma(CHILD(tree, i))
; 2472 :                   && validate_test_or_star_expr(CHILD(tree, i+1)));

  000d7	33 db		 xor	 ebx, ebx
$LN13@validate_t@4:

; 2473 :             i += 2;

  000d9	83 c7 02	 add	 edi, 2
  000dc	83 ee 02	 sub	 esi, 2
  000df	85 db		 test	 ebx, ebx
  000e1	0f 85 69 ff ff
	ff		 jne	 $LL5@validate_t@4
$LN3@validate_t@4:

; 2477 :         else if (i != nch) {

  000e7	41 3b fc	 cmp	 edi, r12d
  000ea	74 3b		 je	 SHORT $LN16@validate_t@4

; 2478 :             ok = 0;
; 2479 :             err_string("illegal trailing nodes for testlist_comp");

  000ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@LKPLJEO@illegal?5trailing?5nodes?5for?5testl@
  000f3	e8 00 00 00 00	 call	 err_string

; 2480 :         }
; 2481 :     }
; 2482 :     return ok;

  000f8	33 c0		 xor	 eax, eax
  000fa	eb 2d		 jmp	 SHORT $LN19@validate_t@4
$LN4@validate_t@4:

; 2474 :         }
; 2475 :         if (ok && i == nch-1)

  000fc	85 db		 test	 ebx, ebx
  000fe	74 e7		 je	 SHORT $LN3@validate_t@4
  00100	41 3b fd	 cmp	 edi, r13d
  00103	75 e2		 jne	 SHORT $LN3@validate_t@4

; 2476 :             ok = validate_comma(CHILD(tree, i));

  00105	48 63 c7	 movsxd	 rax, edi
  00108	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  0010f	ba 0c 00 00 00	 mov	 edx, 12
  00114	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00118	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  0011c	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00120	e8 00 00 00 00	 call	 validate_terminal
  00125	eb 02		 jmp	 SHORT $LN19@validate_t@4
$LN16@validate_t@4:

; 2480 :         }
; 2481 :     }
; 2482 :     return ok;

  00127	8b c3		 mov	 eax, ebx
$LN19@validate_t@4:
  00129	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  0012e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00133	4c 8b 6c 24 50	 mov	 r13, QWORD PTR [rsp+80]

; 2483 : }

  00138	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0013c	41 5c		 pop	 r12
  0013e	5d		 pop	 rbp
  0013f	5b		 pop	 rbx
  00140	c3		 ret	 0
validate_testlist_comp ENDP
_TEXT	ENDS
PUBLIC	??_C@_07LMFPONDJ@trailer?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_trailer DD imagerel validate_trailer
	DD	imagerel validate_trailer+346
	DD	imagerel $unwind$validate_trailer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_trailer DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_07LMFPONDJ@trailer?$AA@
CONST	SEGMENT
??_C@_07LMFPONDJ@trailer?$AA@ DB 'trailer', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_trailer
_TEXT	SEGMENT
tree$ = 48
validate_trailer PROC					; COMDAT

; 2762 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2763 :     int nch = NCH(tree);

  0000f	8b 71 18	 mov	 esi, DWORD PTR [rcx+24]

; 2764 :     int res = validate_ntype(tree, trailer) && ((nch == 2) || (nch == 3));

  00012	ba 42 01 00 00	 mov	 edx, 322		; 00000142H
  00017	48 8b f9	 mov	 rdi, rcx
  0001a	e8 00 00 00 00	 call	 validate_ntype
  0001f	85 c0		 test	 eax, eax
  00021	0f 84 0d 01 00
	00		 je	 $LN13@validate_t@5
  00027	83 fe 02	 cmp	 esi, 2
  0002a	74 09		 je	 SHORT $LN19@validate_t@5
  0002c	83 fe 03	 cmp	 esi, 3
  0002f	0f 85 ff 00 00
	00		 jne	 $LN13@validate_t@5
$LN19@validate_t@5:

; 2765 : 
; 2766 :     if (res) {
; 2767 :         switch (TYPE(CHILD(tree, 0))) {

  00035	48 8b 57 20	 mov	 rdx, QWORD PTR [rdi+32]
  00039	0f bf 02	 movsx	 eax, WORD PTR [rdx]
  0003c	83 f8 07	 cmp	 eax, 7
  0003f	0f 84 a6 00 00
	00		 je	 $LN6@validate_t@5
  00045	83 f8 09	 cmp	 eax, 9
  00048	74 4b		 je	 SHORT $LN4@validate_t@5
  0004a	83 f8 17	 cmp	 eax, 23

; 2781 :             break;
; 2782 :           default:
; 2783 :             res = 0;
; 2784 :             break;

  0004d	75 32		 jne	 SHORT $LN17@validate_t@5

; 2777 :             break;
; 2778 :           case DOT:
; 2779 :             res = (validate_numnodes(tree, 2, "trailer")
; 2780 :                    && validate_ntype(CHILD(tree, 1), NAME));

  0004f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07LMFPONDJ@trailer?$AA@
  00056	8d 50 eb	 lea	 edx, QWORD PTR [rax-21]
  00059	48 8b cf	 mov	 rcx, rdi
  0005c	e8 00 00 00 00	 call	 validate_numnodes
  00061	85 c0		 test	 eax, eax
  00063	74 1c		 je	 SHORT $LN17@validate_t@5
  00065	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00069	bb 01 00 00 00	 mov	 ebx, 1
  0006e	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00072	8b d3		 mov	 edx, ebx
  00074	e8 00 00 00 00	 call	 validate_ntype
  00079	85 c0		 test	 eax, eax
  0007b	0f 85 c7 00 00
	00		 jne	 $LN1@validate_t@5
$LN17@validate_t@5:
  00081	33 db		 xor	 ebx, ebx

; 2789 :     }
; 2790 :     return (res);

  00083	8b c3		 mov	 eax, ebx

; 2791 : }

  00085	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0008f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00093	5f		 pop	 rdi
  00094	c3		 ret	 0
$LN4@validate_t@5:

; 2772 :             break;
; 2773 :           case LSQB:
; 2774 :             res = (validate_numnodes(tree, 3, "trailer")
; 2775 :                    && validate_subscriptlist(CHILD(tree, 1))
; 2776 :                    && validate_ntype(CHILD(tree, 2), RSQB));

  00095	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07LMFPONDJ@trailer?$AA@
  0009c	ba 03 00 00 00	 mov	 edx, 3
  000a1	48 8b cf	 mov	 rcx, rdi
  000a4	e8 00 00 00 00	 call	 validate_numnodes
  000a9	85 c0		 test	 eax, eax
  000ab	74 d4		 je	 SHORT $LN17@validate_t@5
  000ad	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  000b1	48 83 c1 28	 add	 rcx, 40			; 00000028H
  000b5	e8 00 00 00 00	 call	 validate_subscriptlist
  000ba	85 c0		 test	 eax, eax
  000bc	74 c3		 je	 SHORT $LN17@validate_t@5
  000be	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  000c2	ba 0a 00 00 00	 mov	 edx, 10
  000c7	48 83 c1 50	 add	 rcx, 80			; 00000050H
  000cb	e8 00 00 00 00	 call	 validate_ntype
  000d0	85 c0		 test	 eax, eax
  000d2	74 ad		 je	 SHORT $LN17@validate_t@5
  000d4	bb 01 00 00 00	 mov	 ebx, 1

; 2789 :     }
; 2790 :     return (res);

  000d9	8b c3		 mov	 eax, ebx

; 2791 : }

  000db	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000e0	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000e5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e9	5f		 pop	 rdi
  000ea	c3		 ret	 0
$LN6@validate_t@5:

; 2768 :           case LPAR:
; 2769 :             res = validate_rparen(CHILD(tree, nch - 1));

  000eb	8d 46 ff	 lea	 eax, DWORD PTR [rsi-1]
  000ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
  000f5	48 63 c8	 movsxd	 rcx, eax
  000f8	48 8d 04 89	 lea	 rax, QWORD PTR [rcx+rcx*4]
  000fc	48 8d 0c c2	 lea	 rcx, QWORD PTR [rdx+rax*8]
  00100	ba 08 00 00 00	 mov	 edx, 8
  00105	e8 00 00 00 00	 call	 validate_terminal
  0010a	8b d8		 mov	 ebx, eax

; 2770 :             if (res && (nch == 3))

  0010c	85 c0		 test	 eax, eax
  0010e	74 38		 je	 SHORT $LN1@validate_t@5
  00110	83 fe 03	 cmp	 esi, 3
  00113	75 33		 jne	 SHORT $LN1@validate_t@5

; 2771 :                 res = validate_arglist(CHILD(tree, 1));

  00115	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00119	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0011d	e8 00 00 00 00	 call	 validate_arglist
  00122	8b d8		 mov	 ebx, eax

; 2791 : }

  00124	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00129	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0012e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00132	5f		 pop	 rdi
  00133	c3		 ret	 0
$LN13@validate_t@5:

; 2764 :     int res = validate_ntype(tree, trailer) && ((nch == 2) || (nch == 3));

  00134	33 db		 xor	 ebx, ebx

; 2785 :         }
; 2786 :     }
; 2787 :     else {
; 2788 :         (void) validate_numnodes(tree, 2, "trailer");

  00136	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07LMFPONDJ@trailer?$AA@
  0013d	48 8b cf	 mov	 rcx, rdi
  00140	8d 53 02	 lea	 edx, QWORD PTR [rbx+2]
  00143	e8 00 00 00 00	 call	 validate_numnodes
$LN1@validate_t@5:

; 2791 : }

  00148	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0014d	8b c3		 mov	 eax, ebx
  0014f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00154	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00158	5f		 pop	 rdi
  00159	c3		 ret	 0
validate_trailer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@KNEKHPEI@Illegal?5trailing?5nodes?5for?5dicto@ ; `string'
PUBLIC	??_C@_0P@IBAIBCIC@dictorsetmaker?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_dictorsetmaker DD imagerel validate_dictorsetmaker
	DD	imagerel validate_dictorsetmaker+72
	DD	imagerel $unwind$validate_dictorsetmaker
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$validate_dictorsetmaker DD imagerel validate_dictorsetmaker+72
	DD	imagerel validate_dictorsetmaker+107
	DD	imagerel $chain$0$validate_dictorsetmaker
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$validate_dictorsetmaker DD imagerel validate_dictorsetmaker+107
	DD	imagerel validate_dictorsetmaker+695
	DD	imagerel $chain$3$validate_dictorsetmaker
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$validate_dictorsetmaker DD 040521H
	DD	077405H
	DD	063400H
	DD	imagerel validate_dictorsetmaker
	DD	imagerel validate_dictorsetmaker+72
	DD	imagerel $unwind$validate_dictorsetmaker
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$validate_dictorsetmaker DD 020521H
	DD	063405H
	DD	imagerel validate_dictorsetmaker
	DD	imagerel validate_dictorsetmaker+72
	DD	imagerel $unwind$validate_dictorsetmaker
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_dictorsetmaker DD 040a01H
	DD	08540aH
	DD	06006320aH
xdata	ENDS
;	COMDAT ??_C@_0CL@KNEKHPEI@Illegal?5trailing?5nodes?5for?5dicto@
CONST	SEGMENT
??_C@_0CL@KNEKHPEI@Illegal?5trailing?5nodes?5for?5dicto@ DB 'Illegal trai'
	DB	'ling nodes for dictorsetmaker.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IBAIBCIC@dictorsetmaker?$AA@
CONST	SEGMENT
??_C@_0P@IBAIBCIC@dictorsetmaker?$AA@ DB 'dictorsetmaker', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_dictorsetmaker
_TEXT	SEGMENT
tree$ = 48
validate_dictorsetmaker PROC				; COMDAT

; 2911 : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2912 :     int nch = NCH(tree);

  0000a	8b 69 18	 mov	 ebp, DWORD PTR [rcx+24]

; 2913 :     int res;
; 2914 :     int i = 0;
; 2915 : 
; 2916 :     res = validate_ntype(tree, dictorsetmaker);

  0000d	ba 48 01 00 00	 mov	 edx, 328		; 00000148H
  00012	48 8b f1	 mov	 rsi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype

; 2917 :     if (!res)

  0001a	85 c0		 test	 eax, eax

; 2918 :         return 0;

  0001c	74 19		 je	 SHORT $LN44@validate_d@5

; 2919 : 
; 2920 :     if (nch - i < 1) {

  0001e	83 fd 01	 cmp	 ebp, 1
  00021	7d 21		 jge	 SHORT $LN22@validate_d@5

; 2921 :         (void) validate_numnodes(tree, 1, "dictorsetmaker");

  00023	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@IBAIBCIC@dictorsetmaker?$AA@
  0002a	ba 01 00 00 00	 mov	 edx, 1
  0002f	48 8b ce	 mov	 rcx, rsi
  00032	e8 00 00 00 00	 call	 validate_numnodes
$LN44@validate_d@5:

; 2922 :         return 0;

  00037	33 c0		 xor	 eax, eax

; 2989 : }

  00039	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0003e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00042	5e		 pop	 rsi
  00043	c3		 ret	 0
$LN22@validate_d@5:

; 2923 :     }
; 2924 : 
; 2925 :     res = validate_test(CHILD(tree, i++));

  00044	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  00048	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0004d	bb 01 00 00 00	 mov	 ebx, 1
  00052	e8 00 00 00 00	 call	 validate_test

; 2926 :     if (!res)

  00057	85 c0		 test	 eax, eax
  00059	75 10		 jne	 SHORT $LN21@validate_d@5
  0005b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 2989 : }

  00060	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5e		 pop	 rsi
  0006a	c3		 ret	 0
$LN21@validate_d@5:
  0006b	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi

; 2927 :         return 0;
; 2928 : 
; 2929 :     if (nch - i >= 2 && TYPE(CHILD(tree, i)) == COLON) {

  00070	8d 7d ff	 lea	 edi, DWORD PTR [rbp-1]
  00073	83 ff 02	 cmp	 edi, 2
  00076	0f 8c 5c 01 00
	00		 jl	 $LN20@validate_d@5
  0007c	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  00080	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00084	66 83 39 0b	 cmp	 WORD PTR [rcx], 11
  00088	0f 85 4a 01 00
	00		 jne	 $LN20@validate_d@5

; 2930 :         /* Dictionary display or dictionary comprehension. */
; 2931 :         res = (validate_colon(CHILD(tree, i++))
; 2932 :                && validate_test(CHILD(tree, i++)));

  0008e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00095	ba 0b 00 00 00	 mov	 edx, 11
  0009a	e8 00 00 00 00	 call	 validate_terminal
  0009f	85 c0		 test	 eax, eax
  000a1	0f 84 f2 01 00
	00		 je	 $LN43@validate_d@5
  000a7	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  000ab	48 83 c1 50	 add	 rcx, 80			; 00000050H
  000af	e8 00 00 00 00	 call	 validate_test
  000b4	bb 03 00 00 00	 mov	 ebx, 3
  000b9	85 c0		 test	 eax, eax
  000bb	0f 84 d8 01 00
	00		 je	 $LN43@validate_d@5

; 2933 :         if (!res)
; 2934 :             return 0;
; 2935 : 
; 2936 :         if (nch - i >= 1 && TYPE(CHILD(tree, i)) == comp_for) {

  000c1	8d 7d fd	 lea	 edi, DWORD PTR [rbp-3]
  000c4	83 ff 01	 cmp	 edi, 1
  000c7	7c 29		 jl	 SHORT $LN32@validate_d@5
  000c9	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  000cd	b8 4d 01 00 00	 mov	 eax, 333		; 0000014dH
  000d2	48 83 c1 78	 add	 rcx, 120		; 00000078H
  000d6	66 39 01	 cmp	 WORD PTR [rcx], ax
  000d9	75 17		 jne	 SHORT $LN32@validate_d@5

; 2937 :             /* Dictionary comprehension. */
; 2938 :             res = validate_comp_for(CHILD(tree, i++));

  000db	bb 04 00 00 00	 mov	 ebx, 4
  000e0	e8 00 00 00 00	 call	 validate_comp_for

; 2939 :             if (!res)

  000e5	85 c0		 test	 eax, eax
  000e7	0f 85 9a 01 00
	00		 jne	 $LN2@validate_d@5

; 2940 :                 return 0;

  000ed	e9 b0 01 00 00	 jmp	 $LN42@validate_d@5
$LN32@validate_d@5:

; 2941 :         }
; 2942 :         else {
; 2943 :             /* Dictionary display. */
; 2944 :             while (nch - i >= 4) {

  000f2	83 ff 04	 cmp	 edi, 4
  000f5	0f 8c a1 00 00
	00		 jl	 $LN14@validate_d@5
  000fb	0f 1f 44 00 00	 npad	 5
$LL15@validate_d@5:

; 2945 :                 res = (validate_comma(CHILD(tree, i++))
; 2946 :                        && validate_test(CHILD(tree, i++))
; 2947 :                        && validate_colon(CHILD(tree, i++))
; 2948 :                        && validate_test(CHILD(tree, i++)));

  00100	48 63 c3	 movsxd	 rax, ebx
  00103	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  0010a	ba 0c 00 00 00	 mov	 edx, 12
  0010f	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00113	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00117	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0011b	e8 00 00 00 00	 call	 validate_terminal
  00120	ff c3		 inc	 ebx
  00122	85 c0		 test	 eax, eax
  00124	0f 84 6f 01 00
	00		 je	 $LN43@validate_d@5
  0012a	48 63 c3	 movsxd	 rax, ebx
  0012d	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00131	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00135	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00139	e8 00 00 00 00	 call	 validate_test
  0013e	ff c3		 inc	 ebx
  00140	85 c0		 test	 eax, eax
  00142	0f 84 51 01 00
	00		 je	 $LN43@validate_d@5
  00148	48 63 c3	 movsxd	 rax, ebx
  0014b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00152	ba 0b 00 00 00	 mov	 edx, 11
  00157	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0015b	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0015f	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00163	e8 00 00 00 00	 call	 validate_terminal
  00168	ff c3		 inc	 ebx
  0016a	85 c0		 test	 eax, eax
  0016c	0f 84 27 01 00
	00		 je	 $LN43@validate_d@5
  00172	48 63 c3	 movsxd	 rax, ebx
  00175	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00179	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0017d	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00181	e8 00 00 00 00	 call	 validate_test
  00186	ff c3		 inc	 ebx
  00188	83 ef 04	 sub	 edi, 4
  0018b	85 c0		 test	 eax, eax
  0018d	0f 84 06 01 00
	00		 je	 $LN43@validate_d@5

; 2941 :         }
; 2942 :         else {
; 2943 :             /* Dictionary display. */
; 2944 :             while (nch - i >= 4) {

  00193	83 ff 04	 cmp	 edi, 4
  00196	0f 8d 64 ff ff
	ff		 jge	 $LL15@validate_d@5
$LN14@validate_d@5:

; 2949 :                 if (!res)
; 2950 :                     return 0;
; 2951 :             }
; 2952 :             if (nch - i == 1) {

  0019c	8b c5		 mov	 eax, ebp
  0019e	2b c3		 sub	 eax, ebx
  001a0	83 f8 01	 cmp	 eax, 1
  001a3	0f 85 de 00 00
	00		 jne	 $LN2@validate_d@5

; 2953 :                 res = validate_comma(CHILD(tree, i++));

  001a9	48 63 c3	 movsxd	 rax, ebx
  001ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  001b3	ba 0c 00 00 00	 mov	 edx, 12
  001b8	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  001bc	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  001c0	ff c3		 inc	 ebx
  001c2	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  001c6	e8 00 00 00 00	 call	 validate_terminal

; 2954 :                 if (!res)

  001cb	85 c0		 test	 eax, eax
  001cd	0f 85 b4 00 00
	00		 jne	 $LN2@validate_d@5

; 2955 :                     return 0;

  001d3	e9 ca 00 00 00	 jmp	 $LN42@validate_d@5
$LN20@validate_d@5:

; 2956 :             }
; 2957 :         }
; 2958 :     }
; 2959 :     else {
; 2960 :         /* Set display or set comprehension. */
; 2961 :         if (nch - i >= 1 && TYPE(CHILD(tree, i)) == comp_for) {

  001d8	3b fb		 cmp	 edi, ebx
  001da	7c 29		 jl	 SHORT $LN33@validate_d@5
  001dc	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  001e0	b8 4d 01 00 00	 mov	 eax, 333		; 0000014dH
  001e5	48 83 c1 28	 add	 rcx, 40			; 00000028H
  001e9	66 39 01	 cmp	 WORD PTR [rcx], ax
  001ec	75 17		 jne	 SHORT $LN33@validate_d@5

; 2962 :             /* Set comprehension. */
; 2963 :             res = validate_comp_for(CHILD(tree, i++));

  001ee	bb 02 00 00 00	 mov	 ebx, 2
  001f3	e8 00 00 00 00	 call	 validate_comp_for

; 2964 :             if (!res)

  001f8	85 c0		 test	 eax, eax
  001fa	0f 85 87 00 00
	00		 jne	 $LN2@validate_d@5

; 2965 :                 return 0;

  00200	e9 9d 00 00 00	 jmp	 $LN42@validate_d@5
$LN33@validate_d@5:

; 2966 :         }
; 2967 :         else {
; 2968 :             /* Set display. */
; 2969 :             while (nch - i >= 2) {

  00205	83 ff 02	 cmp	 edi, 2
  00208	7c 4e		 jl	 SHORT $LN5@validate_d@5
  0020a	66 0f 1f 44 00
	00		 npad	 6
$LL6@validate_d@5:

; 2970 :                 res = (validate_comma(CHILD(tree, i++))
; 2971 :                        && validate_test(CHILD(tree, i++)));

  00210	48 63 c3	 movsxd	 rax, ebx
  00213	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  0021a	ba 0c 00 00 00	 mov	 edx, 12
  0021f	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00223	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00227	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0022b	e8 00 00 00 00	 call	 validate_terminal
  00230	ff c3		 inc	 ebx
  00232	85 c0		 test	 eax, eax
  00234	74 63		 je	 SHORT $LN43@validate_d@5
  00236	48 63 c3	 movsxd	 rax, ebx
  00239	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0023d	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00241	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00245	e8 00 00 00 00	 call	 validate_test
  0024a	ff c3		 inc	 ebx
  0024c	83 ef 02	 sub	 edi, 2
  0024f	85 c0		 test	 eax, eax
  00251	74 46		 je	 SHORT $LN43@validate_d@5

; 2966 :         }
; 2967 :         else {
; 2968 :             /* Set display. */
; 2969 :             while (nch - i >= 2) {

  00253	83 ff 02	 cmp	 edi, 2
  00256	7d b8		 jge	 SHORT $LL6@validate_d@5
$LN5@validate_d@5:

; 2972 :                 if (!res)
; 2973 :                     return 0;
; 2974 :             }
; 2975 :             if (nch - i == 1) {

  00258	8b c5		 mov	 eax, ebp
  0025a	2b c3		 sub	 eax, ebx
  0025c	83 f8 01	 cmp	 eax, 1
  0025f	75 26		 jne	 SHORT $LN2@validate_d@5

; 2976 :                 res = validate_comma(CHILD(tree, i++));

  00261	48 63 c3	 movsxd	 rax, ebx
  00264	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  0026b	ba 0c 00 00 00	 mov	 edx, 12
  00270	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00274	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00278	ff c3		 inc	 ebx
  0027a	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0027e	e8 00 00 00 00	 call	 validate_terminal

; 2977 :                 if (!res)

  00283	85 c0		 test	 eax, eax

; 2978 :                     return 0;

  00285	74 12		 je	 SHORT $LN43@validate_d@5
$LN2@validate_d@5:

; 2979 :             }
; 2980 :         }
; 2981 :     }
; 2982 : 
; 2983 :     if (nch - i > 0) {

  00287	2b eb		 sub	 ebp, ebx
  00289	85 ed		 test	 ebp, ebp
  0028b	7e 10		 jle	 SHORT $LN1@validate_d@5

; 2984 :         err_string("Illegal trailing nodes for dictorsetmaker.");

  0028d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@KNEKHPEI@Illegal?5trailing?5nodes?5for?5dicto@
  00294	e8 00 00 00 00	 call	 err_string
$LN43@validate_d@5:

; 2985 :         return 0;

  00299	33 c0		 xor	 eax, eax
  0029b	eb 05		 jmp	 SHORT $LN42@validate_d@5
$LN1@validate_d@5:

; 2986 :     }
; 2987 : 
; 2988 :     return 1;

  0029d	b8 01 00 00 00	 mov	 eax, 1
$LN42@validate_d@5:
  002a2	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  002a7	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 2989 : }

  002ac	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  002b1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  002b5	5e		 pop	 rsi
  002b6	c3		 ret	 0
validate_dictorsetmaker ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@DEPPHBBJ@illegal?5list?5display?5atom?$AA@ ; `string'
PUBLIC	??_C@_04OKAKPICD@atom?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_atom DD imagerel validate_atom
	DD	imagerel validate_atom+78
	DD	imagerel $unwind$validate_atom
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$validate_atom DD imagerel validate_atom+78
	DD	imagerel validate_atom+447
	DD	imagerel $chain$0$validate_atom
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$validate_atom DD imagerel validate_atom+447
	DD	imagerel validate_atom+468
	DD	imagerel $chain$1$validate_atom
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$validate_atom DD imagerel validate_atom+468
	DD	imagerel validate_atom+543
	DD	imagerel $chain$2$validate_atom
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$validate_atom DD 020021H
	DD	066400H
	DD	imagerel validate_atom
	DD	imagerel validate_atom+78
	DD	imagerel $unwind$validate_atom
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$validate_atom DD 021H
	DD	imagerel validate_atom
	DD	imagerel validate_atom+78
	DD	imagerel $unwind$validate_atom
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$validate_atom DD 020521H
	DD	066405H
	DD	imagerel validate_atom
	DD	imagerel validate_atom+78
	DD	imagerel $unwind$validate_atom
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_atom DD 060f01H
	DD	08540fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BK@DEPPHBBJ@illegal?5list?5display?5atom?$AA@
CONST	SEGMENT
??_C@_0BK@DEPPHBBJ@illegal?5list?5display?5atom?$AA@ DB 'illegal list dis'
	DB	'play atom', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKAKPICD@atom?$AA@
CONST	SEGMENT
??_C@_04OKAKPICD@atom?$AA@ DB 'atom', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_atom
_TEXT	SEGMENT
tree$ = 48
validate_atom PROC					; COMDAT

; 2391 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2392 :     int pos;
; 2393 :     int nch = NCH(tree);

  0000f	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 2394 :     int res = validate_ntype(tree, atom);

  00012	ba 40 01 00 00	 mov	 edx, 320		; 00000140H
  00017	48 8b e9	 mov	 rbp, rcx
  0001a	e8 00 00 00 00	 call	 validate_ntype
  0001f	8b d8		 mov	 ebx, eax

; 2395 : 
; 2396 :     if (res && nch < 1)

  00021	85 c0		 test	 eax, eax
  00023	0f 84 96 01 00
	00		 je	 $LN18@validate_a
  00029	83 ff 01	 cmp	 edi, 1
  0002c	7d 14		 jge	 SHORT $LN21@validate_a

; 2397 :         res = validate_numnodes(tree, nch+1, "atom");

  0002e	8d 57 01	 lea	 edx, DWORD PTR [rdi+1]
  00031	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04OKAKPICD@atom?$AA@
  00038	48 8b cd	 mov	 rcx, rbp
  0003b	e8 00 00 00 00	 call	 validate_numnodes
  00040	8b d8		 mov	 ebx, eax
$LN21@validate_a:

; 2398 :     if (res) {

  00042	85 db		 test	 ebx, ebx
  00044	0f 84 75 01 00
	00		 je	 $LN18@validate_a

; 2399 :         switch (TYPE(CHILD(tree, 0))) {

  0004a	48 8b 55 20	 mov	 rdx, QWORD PTR [rbp+32]
  0004e	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00053	0f bf 02	 movsx	 eax, WORD PTR [rdx]
  00056	ff c8		 dec	 eax
  00058	83 f8 32	 cmp	 eax, 50			; 00000032H
  0005b	0f 87 57 01 00
	00		 ja	 $LN1@validate_a
  00061	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:__ImageBase
  00068	48 98		 cdqe
  0006a	41 0f b6 84 00
	00 00 00 00	 movzx	 eax, BYTE PTR $LN34@validate_a[r8+rax]
  00073	41 8b 8c 80 00
	00 00 00	 mov	 ecx, DWORD PTR $LN35@validate_a[r8+rax*4]
  0007b	49 03 c8	 add	 rcx, r8
  0007e	ff e1		 jmp	 rcx
$LN17@validate_a:

; 2400 :           case LPAR:
; 2401 :             res = ((nch <= 3)
; 2402 :                    && (validate_rparen(CHILD(tree, nch - 1))));

  00080	83 ff 03	 cmp	 edi, 3
  00083	0f 8f 2f 01 00
	00		 jg	 $LN1@validate_a
  00089	8d 47 ff	 lea	 eax, DWORD PTR [rdi-1]
  0008c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
  00093	48 63 c8	 movsxd	 rcx, eax
  00096	48 8d 04 89	 lea	 rax, QWORD PTR [rcx+rcx*4]
  0009a	48 8d 0c c2	 lea	 rcx, QWORD PTR [rdx+rax*8]
  0009e	ba 08 00 00 00	 mov	 edx, 8
  000a3	e8 00 00 00 00	 call	 validate_terminal
  000a8	85 c0		 test	 eax, eax
  000aa	0f 84 08 01 00
	00		 je	 $LN1@validate_a
  000b0	bb 01 00 00 00	 mov	 ebx, 1

; 2403 : 
; 2404 :             if (res && (nch == 3)) {

  000b5	83 ff 03	 cmp	 edi, 3
  000b8	0f 85 fc 00 00
	00		 jne	 $LN36@validate_a

; 2405 :                 if (TYPE(CHILD(tree, 1))==yield_expr)

  000be	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  000c2	b8 50 01 00 00	 mov	 eax, 336		; 00000150H
  000c7	48 83 c1 28	 add	 rcx, 40			; 00000028H
  000cb	66 39 01	 cmp	 WORD PTR [rcx], ax
  000ce	75 0c		 jne	 SHORT $LN15@validate_a

; 2406 :                         res = validate_yield_expr(CHILD(tree, 1));

  000d0	e8 00 00 00 00	 call	 validate_yield_expr
  000d5	8b d8		 mov	 ebx, eax

; 2407 :                 else

  000d7	e9 de 00 00 00	 jmp	 $LN36@validate_a
$LN15@validate_a:

; 2408 :                         res = validate_testlist_comp(CHILD(tree, 1));

  000dc	e8 00 00 00 00	 call	 validate_testlist_comp
  000e1	8b d8		 mov	 ebx, eax
  000e3	e9 d2 00 00 00	 jmp	 $LN36@validate_a
$LN13@validate_a:

; 2409 :             }
; 2410 :             break;
; 2411 :           case LSQB:
; 2412 :             if (nch == 2)

  000e8	83 ff 02	 cmp	 edi, 2
  000eb	75 13		 jne	 SHORT $LN12@validate_a

; 2413 :                 res = validate_ntype(CHILD(tree, 1), RSQB);

  000ed	48 8d 4a 28	 lea	 rcx, QWORD PTR [rdx+40]
  000f1	8d 57 08	 lea	 edx, QWORD PTR [rdi+8]
  000f4	e8 00 00 00 00	 call	 validate_ntype
  000f9	8b d8		 mov	 ebx, eax
  000fb	e9 ba 00 00 00	 jmp	 $LN36@validate_a
$LN12@validate_a:

; 2414 :             else if (nch == 3)

  00100	83 ff 03	 cmp	 edi, 3
  00103	75 31		 jne	 SHORT $LN10@validate_a

; 2415 :                 res = (validate_testlist_comp(CHILD(tree, 1))
; 2416 :                        && validate_ntype(CHILD(tree, 2), RSQB));

  00105	48 8d 4a 28	 lea	 rcx, QWORD PTR [rdx+40]
  00109	e8 00 00 00 00	 call	 validate_testlist_comp
  0010e	85 c0		 test	 eax, eax
  00110	0f 84 a2 00 00
	00		 je	 $LN1@validate_a
  00116	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  0011a	8d 57 07	 lea	 edx, QWORD PTR [rdi+7]
  0011d	48 83 c1 50	 add	 rcx, 80			; 00000050H
  00121	e8 00 00 00 00	 call	 validate_ntype
  00126	85 c0		 test	 eax, eax
  00128	0f 84 8a 00 00
	00		 je	 $LN1@validate_a
  0012e	8d 5f fe	 lea	 ebx, QWORD PTR [rdi-2]

; 2417 :             else {

  00131	e9 84 00 00 00	 jmp	 $LN36@validate_a
$LN10@validate_a:

; 2418 :                 res = 0;
; 2419 :                 err_string("illegal list display atom");

  00136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@DEPPHBBJ@illegal?5list?5display?5atom?$AA@
  0013d	33 db		 xor	 ebx, ebx
  0013f	e8 00 00 00 00	 call	 err_string

; 2420 :             }
; 2421 :             break;

  00144	eb 74		 jmp	 SHORT $LN36@validate_a
$LN8@validate_a:

; 2422 :           case LBRACE:
; 2423 :             res = ((nch <= 3)
; 2424 :                    && validate_ntype(CHILD(tree, nch - 1), RBRACE));

  00146	83 ff 03	 cmp	 edi, 3
  00149	7f 6d		 jg	 SHORT $LN1@validate_a
  0014b	8d 47 ff	 lea	 eax, DWORD PTR [rdi-1]
  0014e	48 63 c8	 movsxd	 rcx, eax
  00151	48 8d 04 89	 lea	 rax, QWORD PTR [rcx+rcx*4]
  00155	48 8d 0c c2	 lea	 rcx, QWORD PTR [rdx+rax*8]
  00159	ba 1a 00 00 00	 mov	 edx, 26
  0015e	e8 00 00 00 00	 call	 validate_ntype
  00163	85 c0		 test	 eax, eax
  00165	74 51		 je	 SHORT $LN1@validate_a
  00167	bb 01 00 00 00	 mov	 ebx, 1

; 2425 : 
; 2426 :             if (res && (nch == 3))

  0016c	83 ff 03	 cmp	 edi, 3
  0016f	75 49		 jne	 SHORT $LN36@validate_a

; 2427 :                 res = validate_dictorsetmaker(CHILD(tree, 1));

  00171	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  00175	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00179	e8 00 00 00 00	 call	 validate_dictorsetmaker
  0017e	8b d8		 mov	 ebx, eax
  00180	eb 38		 jmp	 SHORT $LN36@validate_a
$LN6@validate_a:

; 2428 :             break;
; 2429 :           case NAME:
; 2430 :           case NUMBER:
; 2431 :           case ELLIPSIS:
; 2432 :             res = (nch == 1);

  00182	33 db		 xor	 ebx, ebx
  00184	83 ff 01	 cmp	 edi, 1
  00187	0f 94 c3	 sete	 bl

; 2433 :             break;

  0018a	eb 2e		 jmp	 SHORT $LN36@validate_a
$LN5@validate_a:

; 2434 :           case STRING:
; 2435 :             for (pos = 1; res && (pos < nch); ++pos)

  0018c	be 01 00 00 00	 mov	 esi, 1
$LL4@validate_a:
  00191	3b f7		 cmp	 esi, edi
  00193	7d 25		 jge	 SHORT $LN36@validate_a

; 2436 :                 res = validate_ntype(CHILD(tree, pos), STRING);

  00195	48 63 c6	 movsxd	 rax, esi
  00198	ba 03 00 00 00	 mov	 edx, 3
  0019d	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  001a1	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  001a5	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  001a9	e8 00 00 00 00	 call	 validate_ntype
  001ae	ff c6		 inc	 esi
  001b0	8b d8		 mov	 ebx, eax
  001b2	85 c0		 test	 eax, eax
  001b4	75 db		 jne	 SHORT $LL4@validate_a

; 2437 :             break;

  001b6	eb 02		 jmp	 SHORT $LN36@validate_a
$LN1@validate_a:

; 2438 :           default:
; 2439 :             res = 0;

  001b8	33 db		 xor	 ebx, ebx
$LN36@validate_a:
  001ba	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
$LN18@validate_a:

; 2440 :             break;
; 2441 :         }
; 2442 :     }
; 2443 :     return (res);
; 2444 : }

  001bf	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  001c4	8b c3		 mov	 eax, ebx
  001c6	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  001cb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001cf	5f		 pop	 rdi
  001d0	c3		 ret	 0
  001d1	0f 1f 00	 npad	 3
$LN35@validate_a:
  001d4	00 00 00 00	 DD	 $LN6@validate_a
  001d8	00 00 00 00	 DD	 $LN5@validate_a
  001dc	00 00 00 00	 DD	 $LN17@validate_a
  001e0	00 00 00 00	 DD	 $LN13@validate_a
  001e4	00 00 00 00	 DD	 $LN8@validate_a
  001e8	00 00 00 00	 DD	 $LN1@validate_a
$LN34@validate_a:
  001ec	00		 DB	 0
  001ed	00		 DB	 0
  001ee	01		 DB	 1
  001ef	05		 DB	 5
  001f0	05		 DB	 5
  001f1	05		 DB	 5
  001f2	02		 DB	 2
  001f3	05		 DB	 5
  001f4	03		 DB	 3
  001f5	05		 DB	 5
  001f6	05		 DB	 5
  001f7	05		 DB	 5
  001f8	05		 DB	 5
  001f9	05		 DB	 5
  001fa	05		 DB	 5
  001fb	05		 DB	 5
  001fc	05		 DB	 5
  001fd	05		 DB	 5
  001fe	05		 DB	 5
  001ff	05		 DB	 5
  00200	05		 DB	 5
  00201	05		 DB	 5
  00202	05		 DB	 5
  00203	05		 DB	 5
  00204	04		 DB	 4
  00205	05		 DB	 5
  00206	05		 DB	 5
  00207	05		 DB	 5
  00208	05		 DB	 5
  00209	05		 DB	 5
  0020a	05		 DB	 5
  0020b	05		 DB	 5
  0020c	05		 DB	 5
  0020d	05		 DB	 5
  0020e	05		 DB	 5
  0020f	05		 DB	 5
  00210	05		 DB	 5
  00211	05		 DB	 5
  00212	05		 DB	 5
  00213	05		 DB	 5
  00214	05		 DB	 5
  00215	05		 DB	 5
  00216	05		 DB	 5
  00217	05		 DB	 5
  00218	05		 DB	 5
  00219	05		 DB	 5
  0021a	05		 DB	 5
  0021b	05		 DB	 5
  0021c	05		 DB	 5
  0021d	05		 DB	 5
  0021e	00		 DB	 0
validate_atom ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@JPDBCOJJ@illegal?5number?5of?5nodes?5for?5?8pow@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_power DD imagerel validate_power
	DD	imagerel validate_power+309
	DD	imagerel $unwind$validate_power
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_power DD 0c5201H
	DD	09e452H
	DD	08544aH
	DD	0b6413H
	DD	0a3413H
	DD	0d00f3213H
	DD	0700bc00dH
xdata	ENDS
;	COMDAT ??_C@_0CE@JPDBCOJJ@illegal?5number?5of?5nodes?5for?5?8pow@
CONST	SEGMENT
??_C@_0CE@JPDBCOJJ@illegal?5number?5of?5nodes?5for?5?8pow@ DB 'illegal nu'
	DB	'mber of nodes for ''power''', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_power
_TEXT	SEGMENT
tree$ = 64
validate_power PROC					; COMDAT

; 2368 : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	41 54		 push	 r12
  0000d	41 55		 push	 r13
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2370 :     int nch = NCH(tree);

  00013	48 63 71 18	 movsxd	 rsi, DWORD PTR [rcx+24]

; 2371 :     int res = (validate_ntype(tree, power) && (nch >= 1)
; 2372 :                && validate_atom(CHILD(tree, 0)));

  00017	ba 3f 01 00 00	 mov	 edx, 319		; 0000013fH
  0001c	4c 8b e1	 mov	 r12, rcx
  0001f	bb 01 00 00 00	 mov	 ebx, 1
  00024	e8 00 00 00 00	 call	 validate_ntype
  00029	85 c0		 test	 eax, eax
  0002b	74 16		 je	 SHORT $LN10@validate_p@2
  0002d	3b f3		 cmp	 esi, ebx
  0002f	7c 12		 jl	 SHORT $LN10@validate_p@2
  00031	49 8b 4c 24 20	 mov	 rcx, QWORD PTR [r12+32]
  00036	e8 00 00 00 00	 call	 validate_atom
  0003b	85 c0		 test	 eax, eax
  0003d	74 04		 je	 SHORT $LN10@validate_p@2
  0003f	8b cb		 mov	 ecx, ebx
  00041	eb 02		 jmp	 SHORT $LN11@validate_p@2
$LN10@validate_p@2:
  00043	33 c9		 xor	 ecx, ecx
$LN11@validate_p@2:
  00045	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp

; 2369 :     int pos = 1;

  0004a	48 8b fb	 mov	 rdi, rbx
  0004d	4c 89 74 24 48	 mov	 QWORD PTR [rsp+72], r14

; 2373 : 
; 2374 :     while (res && (pos < nch) && (TYPE(CHILD(tree, pos)) == trailer))

  00052	85 c9		 test	 ecx, ecx
  00054	0f 84 bb 00 00
	00		 je	 $LN19@validate_p@2

; 2369 :     int pos = 1;

  0005a	bd 28 00 00 00	 mov	 ebp, 40			; 00000028H
  0005f	41 be 42 01 00
	00		 mov	 r14d, 322		; 00000142H
$LL7@validate_p@2:

; 2373 : 
; 2374 :     while (res && (pos < nch) && (TYPE(CHILD(tree, pos)) == trailer))

  00065	48 3b fe	 cmp	 rdi, rsi
  00068	7d 2d		 jge	 SHORT $LN6@validate_p@2
  0006a	49 8b 54 24 20	 mov	 rdx, QWORD PTR [r12+32]
  0006f	66 44 39 34 2a	 cmp	 WORD PTR [rdx+rbp], r14w
  00074	75 21		 jne	 SHORT $LN6@validate_p@2

; 2375 :         res = validate_trailer(CHILD(tree, pos++));

  00076	48 63 c3	 movsxd	 rax, ebx
  00079	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0007d	48 8d 0c ca	 lea	 rcx, QWORD PTR [rdx+rcx*8]
  00081	e8 00 00 00 00	 call	 validate_trailer
  00086	ff c3		 inc	 ebx
  00088	48 ff c7	 inc	 rdi
  0008b	48 83 c5 28	 add	 rbp, 40			; 00000028H
  0008f	8b c8		 mov	 ecx, eax
  00091	85 c0		 test	 eax, eax
  00093	75 d0		 jne	 SHORT $LL7@validate_p@2

; 2376 :     if (res && (pos < nch)) {

  00095	eb 7e		 jmp	 SHORT $LN19@validate_p@2
$LN6@validate_p@2:
  00097	85 c9		 test	 ecx, ecx
  00099	74 7a		 je	 SHORT $LN19@validate_p@2
  0009b	3b de		 cmp	 ebx, esi
  0009d	7d 76		 jge	 SHORT $LN19@validate_p@2

; 2377 :         if (!is_even(nch - pos)) {

  0009f	8b c6		 mov	 eax, esi
  000a1	2b c3		 sub	 eax, ebx
  000a3	a8 01		 test	 al, 1
  000a5	74 10		 je	 SHORT $LN18@validate_p@2

; 2378 :             err_string("illegal number of nodes for 'power'");

  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@JPDBCOJJ@illegal?5number?5of?5nodes?5for?5?8pow@
  000ae	e8 00 00 00 00	 call	 err_string

; 2379 :             return (0);

  000b3	33 c0		 xor	 eax, eax
  000b5	eb 60		 jmp	 SHORT $LN8@validate_p@2
$LN18@validate_p@2:
  000b7	ff ce		 dec	 esi
  000b9	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@validate_p@2:

; 2380 :         }
; 2381 :         for ( ; res && (pos < (nch - 1)); pos += 2)

  000c0	3b de		 cmp	 ebx, esi
  000c2	7d 51		 jge	 SHORT $LN19@validate_p@2

; 2382 :             res = (validate_doublestar(CHILD(tree, pos))
; 2383 :                    && validate_factor(CHILD(tree, pos + 1)));

  000c4	48 63 c3	 movsxd	 rax, ebx
  000c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02FKAPCJPD@?$CK?$CK?$AA@
  000ce	ba 23 00 00 00	 mov	 edx, 35			; 00000023H
  000d3	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  000d7	49 8b 44 24 20	 mov	 rax, QWORD PTR [r12+32]
  000dc	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  000e0	e8 00 00 00 00	 call	 validate_terminal
  000e5	85 c0		 test	 eax, eax
  000e7	74 23		 je	 SHORT $LN12@validate_p@2
  000e9	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  000ec	48 63 c8	 movsxd	 rcx, eax
  000ef	49 8b 44 24 20	 mov	 rax, QWORD PTR [r12+32]
  000f4	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  000f8	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  000fc	e8 00 00 00 00	 call	 validate_factor
  00101	85 c0		 test	 eax, eax
  00103	74 07		 je	 SHORT $LN12@validate_p@2
  00105	b9 01 00 00 00	 mov	 ecx, 1
  0010a	eb 02		 jmp	 SHORT $LN13@validate_p@2
$LN12@validate_p@2:
  0010c	33 c9		 xor	 ecx, ecx
$LN13@validate_p@2:

; 2380 :         }
; 2381 :         for ( ; res && (pos < (nch - 1)); pos += 2)

  0010e	83 c3 02	 add	 ebx, 2
  00111	85 c9		 test	 ecx, ecx
  00113	75 ab		 jne	 SHORT $LL4@validate_p@2
$LN19@validate_p@2:

; 2384 :     }
; 2385 :     return (res);

  00115	8b c1		 mov	 eax, ecx
$LN8@validate_p@2:
  00117	4c 8b 74 24 48	 mov	 r14, QWORD PTR [rsp+72]
  0011c	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]

; 2386 : }

  00121	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00126	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  0012b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0012f	41 5d		 pop	 r13
  00131	41 5c		 pop	 r12
  00133	5f		 pop	 rdi
  00134	c3		 ret	 0
validate_power ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_factor DD imagerel validate_factor
	DD	imagerel validate_factor+120
	DD	imagerel $unwind$validate_factor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_factor DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT validate_factor
_TEXT	SEGMENT
tree$ = 48
validate_factor PROC					; COMDAT

; 2348 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2349 :     int nch = NCH(tree);

  0000a	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]

; 2350 :     int res = (validate_ntype(tree, factor)
; 2351 :                && (((nch == 2)
; 2352 :                     && ((TYPE(CHILD(tree, 0)) == PLUS)
; 2353 :                         || (TYPE(CHILD(tree, 0)) == MINUS)
; 2354 :                         || (TYPE(CHILD(tree, 0)) == TILDE))
; 2355 :                     && validate_factor(CHILD(tree, 1)))
; 2356 :                    || ((nch == 1)
; 2357 :                        && validate_power(CHILD(tree, 0)))));

  0000d	ba 3e 01 00 00	 mov	 edx, 318		; 0000013eH
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	74 2b		 je	 SHORT $LN7@validate_f@2
  0001e	83 fb 02	 cmp	 ebx, 2
  00021	75 33		 jne	 SHORT $LN4@validate_f@2
  00023	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00027	0f b7 01	 movzx	 eax, WORD PTR [rcx]
  0002a	66 83 f8 0e	 cmp	 ax, 14
  0002e	74 0c		 je	 SHORT $LN3@validate_f@2
  00030	66 83 f8 0f	 cmp	 ax, 15
  00034	74 06		 je	 SHORT $LN3@validate_f@2
  00036	66 83 f8 1f	 cmp	 ax, 31
  0003a	75 0d		 jne	 SHORT $LN7@validate_f@2
$LN3@validate_f@2:
  0003c	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00040	e8 00 00 00 00	 call	 validate_factor
  00045	85 c0		 test	 eax, eax
  00047	75 1f		 jne	 SHORT $LN6@validate_f@2
$LN7@validate_f@2:

; 2358 :     return (res);

  00049	33 c0		 xor	 eax, eax

; 2359 : }

  0004b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
$LN4@validate_f@2:

; 2350 :     int res = (validate_ntype(tree, factor)
; 2351 :                && (((nch == 2)
; 2352 :                     && ((TYPE(CHILD(tree, 0)) == PLUS)
; 2353 :                         || (TYPE(CHILD(tree, 0)) == MINUS)
; 2354 :                         || (TYPE(CHILD(tree, 0)) == TILDE))
; 2355 :                     && validate_factor(CHILD(tree, 1)))
; 2356 :                    || ((nch == 1)
; 2357 :                        && validate_power(CHILD(tree, 0)))));

  00056	83 fb 01	 cmp	 ebx, 1
  00059	75 ee		 jne	 SHORT $LN7@validate_f@2
  0005b	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0005f	e8 00 00 00 00	 call	 validate_power
  00064	85 c0		 test	 eax, eax
  00066	74 e1		 je	 SHORT $LN7@validate_f@2
$LN6@validate_f@2:

; 2358 :     return (res);

  00068	b8 01 00 00 00	 mov	 eax, 1

; 2359 : }

  0006d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00072	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00076	5f		 pop	 rdi
  00077	c3		 ret	 0
validate_factor ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_term DD imagerel validate_term
	DD	imagerel validate_term+82
	DD	imagerel $unwind$validate_term
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$validate_term DD imagerel validate_term+82
	DD	imagerel validate_term+182
	DD	imagerel $chain$0$validate_term
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$validate_term DD imagerel validate_term+182
	DD	imagerel validate_term+204
	DD	imagerel $chain$1$validate_term
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$validate_term DD 021H
	DD	imagerel validate_term
	DD	imagerel validate_term+82
	DD	imagerel $unwind$validate_term
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$validate_term DD 020521H
	DD	066405H
	DD	imagerel validate_term
	DD	imagerel validate_term+82
	DD	imagerel $unwind$validate_term
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_term DD 081501H
	DD	097415H
	DD	085415H
	DD	073415H
	DD	0c0113215H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT validate_term
_TEXT	SEGMENT
tree$ = 48
validate_term PROC					; COMDAT

; 2324 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000f	41 54		 push	 r12
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2326 :     int nch = NCH(tree);

  00015	48 63 79 18	 movsxd	 rdi, DWORD PTR [rcx+24]

; 2327 :     int res = (validate_ntype(tree, term)
; 2328 :                && is_odd(nch)
; 2329 :                && validate_factor(CHILD(tree, 0)));

  00019	ba 3d 01 00 00	 mov	 edx, 317		; 0000013dH
  0001e	48 8b e9	 mov	 rbp, rcx
  00021	e8 00 00 00 00	 call	 validate_ntype
  00026	85 c0		 test	 eax, eax
  00028	74 1a		 je	 SHORT $LN6@validate_t@6
  0002a	40 f6 c7 01	 test	 dil, 1
  0002e	74 14		 je	 SHORT $LN6@validate_t@6
  00030	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  00034	e8 00 00 00 00	 call	 validate_factor
  00039	85 c0		 test	 eax, eax
  0003b	74 07		 je	 SHORT $LN6@validate_t@6
  0003d	b8 01 00 00 00	 mov	 eax, 1
  00042	eb 02		 jmp	 SHORT $LN7@validate_t@6
$LN6@validate_t@6:
  00044	33 c0		 xor	 eax, eax
$LN7@validate_t@6:

; 2325 :     int pos = 1;

  00046	bb 01 00 00 00	 mov	 ebx, 1

; 2330 : 
; 2331 :     for ( ; res && (pos < nch); pos += 2)

  0004b	4c 8b e7	 mov	 r12, rdi
  0004e	85 c0		 test	 eax, eax
  00050	74 64		 je	 SHORT $LN1@validate_t@6

; 2325 :     int pos = 1;

  00052	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00057	8d 7b 27	 lea	 edi, QWORD PTR [rbx+39]
  0005a	8d 73 01	 lea	 esi, QWORD PTR [rbx+1]
  0005d	0f 1f 00	 npad	 3
$LL3@validate_t@6:

; 2330 : 
; 2331 :     for ( ; res && (pos < nch); pos += 2)

  00060	49 3b dc	 cmp	 rbx, r12
  00063	7d 4c		 jge	 SHORT $LN15@validate_t@6

; 2332 :         res = (((TYPE(CHILD(tree, pos)) == STAR)
; 2333 :                || (TYPE(CHILD(tree, pos)) == SLASH)
; 2334 :                || (TYPE(CHILD(tree, pos)) == DOUBLESLASH)
; 2335 :                || (TYPE(CHILD(tree, pos)) == PERCENT))
; 2336 :                && validate_factor(CHILD(tree, pos + 1)));

  00065	48 8b 55 20	 mov	 rdx, QWORD PTR [rbp+32]
  00069	0f b7 04 17	 movzx	 eax, WORD PTR [rdi+rdx]
  0006d	66 83 f8 10	 cmp	 ax, 16
  00071	74 12		 je	 SHORT $LN8@validate_t@6
  00073	66 83 f8 11	 cmp	 ax, 17
  00077	74 0c		 je	 SHORT $LN8@validate_t@6
  00079	66 83 f8 2f	 cmp	 ax, 47			; 0000002fH
  0007d	74 06		 je	 SHORT $LN8@validate_t@6
  0007f	66 83 f8 18	 cmp	 ax, 24
  00083	75 1b		 jne	 SHORT $LN9@validate_t@6
$LN8@validate_t@6:
  00085	48 63 c6	 movsxd	 rax, esi
  00088	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0008c	48 8d 0c ca	 lea	 rcx, QWORD PTR [rdx+rcx*8]
  00090	e8 00 00 00 00	 call	 validate_factor
  00095	85 c0		 test	 eax, eax
  00097	74 07		 je	 SHORT $LN9@validate_t@6
  00099	b8 01 00 00 00	 mov	 eax, 1
  0009e	eb 02		 jmp	 SHORT $LN10@validate_t@6
$LN9@validate_t@6:
  000a0	33 c0		 xor	 eax, eax
$LN10@validate_t@6:

; 2330 : 
; 2331 :     for ( ; res && (pos < nch); pos += 2)

  000a2	83 c6 02	 add	 esi, 2
  000a5	48 83 c3 02	 add	 rbx, 2
  000a9	48 83 c7 50	 add	 rdi, 80			; 00000050H
  000ad	85 c0		 test	 eax, eax
  000af	75 af		 jne	 SHORT $LL3@validate_t@6
$LN15@validate_t@6:
  000b1	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
$LN1@validate_t@6:

; 2337 : 
; 2338 :     return (res);
; 2339 : }

  000b6	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000bb	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000c0	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000c5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c9	41 5c		 pop	 r12
  000cb	c3		 ret	 0
validate_term ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_arith_expr DD imagerel validate_arith_expr
	DD	imagerel validate_arith_expr+71
	DD	imagerel $unwind$validate_arith_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_arith_expr DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT validate_arith_expr
_TEXT	SEGMENT
tree$ = 48
validate_arith_expr PROC				; COMDAT

; 2316 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2317 :     return (validate_ntype(tree, arith_expr)
; 2318 :             && validate_chain_two_ops(tree, validate_term, PLUS, MINUS));

  00006	ba 3c 01 00 00	 mov	 edx, 316		; 0000013cH
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 validate_ntype
  00013	85 c0		 test	 eax, eax
  00015	74 28		 je	 SHORT $LN3@validate_a@2
  00017	41 b9 0f 00 00
	00		 mov	 r9d, 15
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:validate_term
  00024	48 8b cb	 mov	 rcx, rbx
  00027	45 8d 41 ff	 lea	 r8d, QWORD PTR [r9-1]
  0002b	e8 00 00 00 00	 call	 validate_chain_two_ops
  00030	85 c0		 test	 eax, eax
  00032	74 0b		 je	 SHORT $LN3@validate_a@2
  00034	b8 01 00 00 00	 mov	 eax, 1

; 2319 : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5b		 pop	 rbx
  0003e	c3		 ret	 0
$LN3@validate_a@2:

; 2317 :     return (validate_ntype(tree, arith_expr)
; 2318 :             && validate_chain_two_ops(tree, validate_term, PLUS, MINUS));

  0003f	33 c0		 xor	 eax, eax

; 2319 : }

  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5b		 pop	 rbx
  00046	c3		 ret	 0
validate_arith_expr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_shift_expr DD imagerel validate_shift_expr
	DD	imagerel validate_shift_expr+71
	DD	imagerel $unwind$validate_shift_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_shift_expr DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT validate_shift_expr
_TEXT	SEGMENT
tree$ = 48
validate_shift_expr PROC				; COMDAT

; 2307 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2308 :     return (validate_ntype(tree, shift_expr)
; 2309 :             && validate_chain_two_ops(tree, validate_arith_expr,
; 2310 :                                       LEFTSHIFT, RIGHTSHIFT));

  00006	ba 3b 01 00 00	 mov	 edx, 315		; 0000013bH
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 validate_ntype
  00013	85 c0		 test	 eax, eax
  00015	74 28		 je	 SHORT $LN3@validate_s@5
  00017	41 b9 22 00 00
	00		 mov	 r9d, 34			; 00000022H
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:validate_arith_expr
  00024	48 8b cb	 mov	 rcx, rbx
  00027	45 8d 41 ff	 lea	 r8d, QWORD PTR [r9-1]
  0002b	e8 00 00 00 00	 call	 validate_chain_two_ops
  00030	85 c0		 test	 eax, eax
  00032	74 0b		 je	 SHORT $LN3@validate_s@5
  00034	b8 01 00 00 00	 mov	 eax, 1

; 2311 : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5b		 pop	 rbx
  0003e	c3		 ret	 0
$LN3@validate_s@5:

; 2308 :     return (validate_ntype(tree, shift_expr)
; 2309 :             && validate_chain_two_ops(tree, validate_arith_expr,
; 2310 :                                       LEFTSHIFT, RIGHTSHIFT));

  0003f	33 c0		 xor	 eax, eax

; 2311 : }

  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5b		 pop	 rbx
  00046	c3		 ret	 0
validate_shift_expr ENDP
_TEXT	ENDS
PUBLIC	??_C@_01HNPIGOCE@?$CG?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_and_expr DD imagerel validate_and_expr
	DD	imagerel validate_and_expr+171
	DD	imagerel $unwind$validate_and_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_and_expr DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_01HNPIGOCE@?$CG?$AA@
CONST	SEGMENT
??_C@_01HNPIGOCE@?$CG?$AA@ DB '&', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_and_expr
_TEXT	SEGMENT
tree$ = 48
validate_and_expr PROC					; COMDAT

; 2272 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2273 :     int pos;
; 2274 :     int nch = NCH(tree);

  0000f	8b 71 18	 mov	 esi, DWORD PTR [rcx+24]

; 2275 :     int res = (validate_ntype(tree, and_expr)
; 2276 :                && is_odd(nch)
; 2277 :                && validate_shift_expr(CHILD(tree, 0)));

  00012	ba 3a 01 00 00	 mov	 edx, 314		; 0000013aH
  00017	48 8b f9	 mov	 rdi, rcx
  0001a	e8 00 00 00 00	 call	 validate_ntype
  0001f	85 c0		 test	 eax, eax
  00021	74 1a		 je	 SHORT $LN6@validate_a@3
  00023	40 f6 c6 01	 test	 sil, 1
  00027	74 14		 je	 SHORT $LN6@validate_a@3
  00029	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0002d	e8 00 00 00 00	 call	 validate_shift_expr
  00032	85 c0		 test	 eax, eax
  00034	74 07		 je	 SHORT $LN6@validate_a@3
  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	eb 02		 jmp	 SHORT $LN7@validate_a@3
$LN6@validate_a@3:
  0003d	33 c0		 xor	 eax, eax
$LN7@validate_a@3:

; 2278 : 
; 2279 :     for (pos = 1; res && (pos < nch); pos += 2)

  0003f	bb 01 00 00 00	 mov	 ebx, 1
  00044	85 c0		 test	 eax, eax
  00046	74 53		 je	 SHORT $LN12@validate_a@3
$LL3@validate_a@3:
  00048	3b de		 cmp	 ebx, esi
  0004a	7d 4f		 jge	 SHORT $LN12@validate_a@3

; 2280 :         res = (validate_ampersand(CHILD(tree, pos))
; 2281 :                && validate_shift_expr(CHILD(tree, pos + 1)));

  0004c	48 63 c3	 movsxd	 rax, ebx
  0004f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01HNPIGOCE@?$CG?$AA@
  00056	ba 13 00 00 00	 mov	 edx, 19
  0005b	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0005f	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00063	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00067	e8 00 00 00 00	 call	 validate_terminal
  0006c	85 c0		 test	 eax, eax
  0006e	74 22		 je	 SHORT $LN8@validate_a@3
  00070	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  00073	48 63 c8	 movsxd	 rcx, eax
  00076	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0007a	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  0007e	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00082	e8 00 00 00 00	 call	 validate_shift_expr
  00087	85 c0		 test	 eax, eax
  00089	74 07		 je	 SHORT $LN8@validate_a@3
  0008b	b8 01 00 00 00	 mov	 eax, 1
  00090	eb 02		 jmp	 SHORT $LN9@validate_a@3
$LN8@validate_a@3:
  00092	33 c0		 xor	 eax, eax
$LN9@validate_a@3:

; 2278 : 
; 2279 :     for (pos = 1; res && (pos < nch); pos += 2)

  00094	83 c3 02	 add	 ebx, 2
  00097	85 c0		 test	 eax, eax
  00099	75 ad		 jne	 SHORT $LL3@validate_a@3
$LN12@validate_a@3:

; 2282 : 
; 2283 :     return (res);
; 2284 : }

  0009b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a0	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a9	5f		 pop	 rdi
  000aa	c3		 ret	 0
validate_and_expr ENDP
_TEXT	ENDS
PUBLIC	??_C@_01JKBOJNNK@?$FO?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_xor_expr DD imagerel validate_xor_expr
	DD	imagerel validate_xor_expr+171
	DD	imagerel $unwind$validate_xor_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_xor_expr DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_01JKBOJNNK@?$FO?$AA@
CONST	SEGMENT
??_C@_01JKBOJNNK@?$FO?$AA@ DB '^', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_xor_expr
_TEXT	SEGMENT
tree$ = 48
validate_xor_expr PROC					; COMDAT

; 2255 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2256 :     int j;
; 2257 :     int nch = NCH(tree);

  0000f	8b 71 18	 mov	 esi, DWORD PTR [rcx+24]

; 2258 :     int res = (validate_ntype(tree, xor_expr)
; 2259 :                && is_odd(nch)
; 2260 :                && validate_and_expr(CHILD(tree, 0)));

  00012	ba 39 01 00 00	 mov	 edx, 313		; 00000139H
  00017	48 8b f9	 mov	 rdi, rcx
  0001a	e8 00 00 00 00	 call	 validate_ntype
  0001f	85 c0		 test	 eax, eax
  00021	74 1a		 je	 SHORT $LN6@validate_x
  00023	40 f6 c6 01	 test	 sil, 1
  00027	74 14		 je	 SHORT $LN6@validate_x
  00029	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0002d	e8 00 00 00 00	 call	 validate_and_expr
  00032	85 c0		 test	 eax, eax
  00034	74 07		 je	 SHORT $LN6@validate_x
  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	eb 02		 jmp	 SHORT $LN7@validate_x
$LN6@validate_x:
  0003d	33 c0		 xor	 eax, eax
$LN7@validate_x:

; 2261 : 
; 2262 :     for (j = 2; res && (j < nch); j += 2)

  0003f	bb 02 00 00 00	 mov	 ebx, 2
  00044	85 c0		 test	 eax, eax
  00046	74 53		 je	 SHORT $LN12@validate_x
$LL3@validate_x:
  00048	3b de		 cmp	 ebx, esi
  0004a	7d 4f		 jge	 SHORT $LN12@validate_x

; 2263 :         res = (validate_circumflex(CHILD(tree, j - 1))
; 2264 :                && validate_and_expr(CHILD(tree, j)));

  0004c	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
  0004f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JKBOJNNK@?$FO?$AA@
  00056	48 63 c8	 movsxd	 rcx, eax
  00059	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0005d	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00061	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00065	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0006a	e8 00 00 00 00	 call	 validate_terminal
  0006f	85 c0		 test	 eax, eax
  00071	74 1f		 je	 SHORT $LN8@validate_x
  00073	48 63 c3	 movsxd	 rax, ebx
  00076	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0007a	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0007e	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00082	e8 00 00 00 00	 call	 validate_and_expr
  00087	85 c0		 test	 eax, eax
  00089	74 07		 je	 SHORT $LN8@validate_x
  0008b	b8 01 00 00 00	 mov	 eax, 1
  00090	eb 02		 jmp	 SHORT $LN9@validate_x
$LN8@validate_x:
  00092	33 c0		 xor	 eax, eax
$LN9@validate_x:

; 2261 : 
; 2262 :     for (j = 2; res && (j < nch); j += 2)

  00094	83 c3 02	 add	 ebx, 2
  00097	85 c0		 test	 eax, eax
  00099	75 ad		 jne	 SHORT $LL3@validate_x
$LN12@validate_x:

; 2265 : 
; 2266 :     return (res);
; 2267 : }

  0009b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a0	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a9	5f		 pop	 rdi
  000aa	c3		 ret	 0
validate_xor_expr ENDP
_TEXT	ENDS
PUBLIC	??_C@_01DNKMNLPK@?$HM?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_expr DD imagerel validate_expr
	DD	imagerel validate_expr+171
	DD	imagerel $unwind$validate_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_expr DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_01DNKMNLPK@?$HM?$AA@
CONST	SEGMENT
??_C@_01DNKMNLPK@?$HM?$AA@ DB '|', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_expr
_TEXT	SEGMENT
tree$ = 48
validate_expr PROC					; COMDAT

; 2238 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2239 :     int j;
; 2240 :     int nch = NCH(tree);

  0000f	8b 71 18	 mov	 esi, DWORD PTR [rcx+24]

; 2241 :     int res = (validate_ntype(tree, expr)
; 2242 :                && is_odd(nch)
; 2243 :                && validate_xor_expr(CHILD(tree, 0)));

  00012	ba 38 01 00 00	 mov	 edx, 312		; 00000138H
  00017	48 8b f9	 mov	 rdi, rcx
  0001a	e8 00 00 00 00	 call	 validate_ntype
  0001f	85 c0		 test	 eax, eax
  00021	74 1a		 je	 SHORT $LN6@validate_e@5
  00023	40 f6 c6 01	 test	 sil, 1
  00027	74 14		 je	 SHORT $LN6@validate_e@5
  00029	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0002d	e8 00 00 00 00	 call	 validate_xor_expr
  00032	85 c0		 test	 eax, eax
  00034	74 07		 je	 SHORT $LN6@validate_e@5
  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	eb 02		 jmp	 SHORT $LN7@validate_e@5
$LN6@validate_e@5:
  0003d	33 c0		 xor	 eax, eax
$LN7@validate_e@5:

; 2244 : 
; 2245 :     for (j = 2; res && (j < nch); j += 2)

  0003f	bb 02 00 00 00	 mov	 ebx, 2
  00044	85 c0		 test	 eax, eax
  00046	74 53		 je	 SHORT $LN12@validate_e@5
$LL3@validate_e@5:
  00048	3b de		 cmp	 ebx, esi
  0004a	7d 4f		 jge	 SHORT $LN12@validate_e@5

; 2246 :         res = (validate_xor_expr(CHILD(tree, j))
; 2247 :                && validate_vbar(CHILD(tree, j - 1)));

  0004c	48 63 c3	 movsxd	 rax, ebx
  0004f	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00053	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00057	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0005b	e8 00 00 00 00	 call	 validate_xor_expr
  00060	85 c0		 test	 eax, eax
  00062	74 2e		 je	 SHORT $LN8@validate_e@5
  00064	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
  00067	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01DNKMNLPK@?$HM?$AA@
  0006e	48 63 c8	 movsxd	 rcx, eax
  00071	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00075	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00079	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  0007d	ba 12 00 00 00	 mov	 edx, 18
  00082	e8 00 00 00 00	 call	 validate_terminal
  00087	85 c0		 test	 eax, eax
  00089	74 07		 je	 SHORT $LN8@validate_e@5
  0008b	b8 01 00 00 00	 mov	 eax, 1
  00090	eb 02		 jmp	 SHORT $LN9@validate_e@5
$LN8@validate_e@5:
  00092	33 c0		 xor	 eax, eax
$LN9@validate_e@5:

; 2244 : 
; 2245 :     for (j = 2; res && (j < nch); j += 2)

  00094	83 c3 02	 add	 ebx, 2
  00097	85 c0		 test	 eax, eax
  00099	75 ad		 jne	 SHORT $LL3@validate_e@5
$LN12@validate_e@5:

; 2248 : 
; 2249 :     return (res);
; 2250 : }

  0009b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a0	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a9	5f		 pop	 rdi
  000aa	c3		 ret	 0
validate_expr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_comparison DD imagerel validate_comparison
	DD	imagerel validate_comparison+159
	DD	imagerel $unwind$validate_comparison
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_comparison DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT validate_comparison
_TEXT	SEGMENT
tree$ = 48
validate_comparison PROC				; COMDAT

; 2158 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2159 :     int pos;
; 2160 :     int nch = NCH(tree);

  0000f	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 2161 :     int res = (validate_ntype(tree, comparison)
; 2162 :                && is_odd(nch)
; 2163 :                && validate_expr(CHILD(tree, 0)));

  00012	ba 35 01 00 00	 mov	 edx, 309		; 00000135H
  00017	48 8b f1	 mov	 rsi, rcx
  0001a	e8 00 00 00 00	 call	 validate_ntype
  0001f	85 c0		 test	 eax, eax
  00021	74 1a		 je	 SHORT $LN6@validate_c@7
  00023	40 f6 c7 01	 test	 dil, 1
  00027	74 14		 je	 SHORT $LN6@validate_c@7
  00029	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  0002d	e8 00 00 00 00	 call	 validate_expr
  00032	85 c0		 test	 eax, eax
  00034	74 07		 je	 SHORT $LN6@validate_c@7
  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	eb 02		 jmp	 SHORT $LN7@validate_c@7
$LN6@validate_c@7:
  0003d	33 c0		 xor	 eax, eax
$LN7@validate_c@7:

; 2164 : 
; 2165 :     for (pos = 1; res && (pos < nch); pos += 2)

  0003f	bb 01 00 00 00	 mov	 ebx, 1
  00044	85 c0		 test	 eax, eax
  00046	74 47		 je	 SHORT $LN12@validate_c@7
$LL3@validate_c@7:
  00048	3b df		 cmp	 ebx, edi
  0004a	7d 43		 jge	 SHORT $LN12@validate_c@7

; 2166 :         res = (validate_comp_op(CHILD(tree, pos))
; 2167 :                && validate_expr(CHILD(tree, pos + 1)));

  0004c	48 63 c3	 movsxd	 rax, ebx
  0004f	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00053	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00057	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0005b	e8 00 00 00 00	 call	 validate_comp_op
  00060	85 c0		 test	 eax, eax
  00062	74 22		 je	 SHORT $LN8@validate_c@7
  00064	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  00067	48 63 c8	 movsxd	 rcx, eax
  0006a	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0006e	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00072	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00076	e8 00 00 00 00	 call	 validate_expr
  0007b	85 c0		 test	 eax, eax
  0007d	74 07		 je	 SHORT $LN8@validate_c@7
  0007f	b8 01 00 00 00	 mov	 eax, 1
  00084	eb 02		 jmp	 SHORT $LN9@validate_c@7
$LN8@validate_c@7:
  00086	33 c0		 xor	 eax, eax
$LN9@validate_c@7:

; 2164 : 
; 2165 :     for (pos = 1; res && (pos < nch); pos += 2)

  00088	83 c3 02	 add	 ebx, 2
  0008b	85 c0		 test	 eax, eax
  0008d	75 b9		 jne	 SHORT $LL3@validate_c@7
$LN12@validate_c@7:

; 2168 : 
; 2169 :     return (res);
; 2170 : }

  0008f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00094	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00099	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009d	5f		 pop	 rdi
  0009e	c3		 ret	 0
validate_comparison ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_not_test DD imagerel validate_not_test
	DD	imagerel validate_not_test+138
	DD	imagerel $unwind$validate_not_test
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_not_test DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT validate_not_test
_TEXT	SEGMENT
tree$ = 48
validate_not_test PROC					; COMDAT

; 2141 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2142 :     int nch = NCH(tree);

  0000a	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]

; 2143 :     int res = validate_ntype(tree, not_test) && ((nch == 1) || (nch == 2));

  0000d	ba 34 01 00 00	 mov	 edx, 308		; 00000134H
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	74 5f		 je	 SHORT $LN8@validate_n@4
  0001e	83 fb 01	 cmp	 ebx, 1
  00021	74 05		 je	 SHORT $LN7@validate_n@4
  00023	83 fb 02	 cmp	 ebx, 2
  00026	75 55		 jne	 SHORT $LN8@validate_n@4
$LN7@validate_n@4:

; 2144 : 
; 2145 :     if (res) {
; 2146 :         if (nch == 2)

  00028	83 fb 02	 cmp	 ebx, 2
  0002b	75 38		 jne	 SHORT $LN3@validate_n@4

; 2147 :             res = (validate_name(CHILD(tree, 0), "not")
; 2148 :                    && validate_not_test(CHILD(tree, 1)));

  0002d	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00031	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03NJKJADM@not?$AA@
  00038	8d 53 ff	 lea	 edx, QWORD PTR [rbx-1]
  0003b	e8 00 00 00 00	 call	 validate_terminal
  00040	85 c0		 test	 eax, eax
  00042	74 39		 je	 SHORT $LN8@validate_n@4
  00044	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00048	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0004c	e8 00 00 00 00	 call	 validate_not_test
  00051	85 c0		 test	 eax, eax
  00053	74 28		 je	 SHORT $LN8@validate_n@4
$LN13@validate_n@4:

; 2151 :     }
; 2152 :     return (res);

  00055	b8 01 00 00 00	 mov	 eax, 1

; 2153 : }

  0005a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00063	5f		 pop	 rdi
  00064	c3		 ret	 0
$LN3@validate_n@4:

; 2149 :         else if (nch == 1)

  00065	83 fb 01	 cmp	 ebx, 1
  00068	75 eb		 jne	 SHORT $LN13@validate_n@4

; 2150 :             res = validate_comparison(CHILD(tree, 0));

  0006a	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]

; 2153 : }

  0006e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00073	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00077	5f		 pop	 rdi
  00078	e9 00 00 00 00	 jmp	 validate_comparison
$LN8@validate_n@4:

; 2151 :     }
; 2152 :     return (res);

  0007d	33 c0		 xor	 eax, eax

; 2153 : }

  0007f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00084	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00088	5f		 pop	 rdi
  00089	c3		 ret	 0
validate_not_test ENDP
_TEXT	ENDS
PUBLIC	??_C@_03BOPJPIAM@and?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_and_test DD imagerel validate_and_test
	DD	imagerel validate_and_test+157
	DD	imagerel $unwind$validate_and_test
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_and_test DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_03BOPJPIAM@and?$AA@
CONST	SEGMENT
??_C@_03BOPJPIAM@and?$AA@ DB 'and', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_and_test
_TEXT	SEGMENT
tree$ = 48
validate_and_test PROC					; COMDAT

; 2124 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2125 :     int pos;
; 2126 :     int nch = NCH(tree);

  0000f	8b 71 18	 mov	 esi, DWORD PTR [rcx+24]

; 2127 :     int res = (validate_ntype(tree, and_test)
; 2128 :                && is_odd(nch)
; 2129 :                && validate_not_test(CHILD(tree, 0)));

  00012	ba 33 01 00 00	 mov	 edx, 307		; 00000133H
  00017	48 8b f9	 mov	 rdi, rcx
  0001a	e8 00 00 00 00	 call	 validate_ntype
  0001f	85 c0		 test	 eax, eax
  00021	74 1a		 je	 SHORT $LN6@validate_a@4
  00023	40 f6 c6 01	 test	 sil, 1
  00027	74 14		 je	 SHORT $LN6@validate_a@4
  00029	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0002d	e8 00 00 00 00	 call	 validate_not_test
  00032	85 c0		 test	 eax, eax
  00034	74 07		 je	 SHORT $LN6@validate_a@4
  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	eb 02		 jmp	 SHORT $LN7@validate_a@4
$LN6@validate_a@4:
  0003d	33 c0		 xor	 eax, eax
$LN7@validate_a@4:

; 2130 : 
; 2131 :     for (pos = 1; res && (pos < nch); pos += 2)

  0003f	bb 01 00 00 00	 mov	 ebx, 1
  00044	85 c0		 test	 eax, eax
  00046	74 45		 je	 SHORT $LN12@validate_a@4
$LL3@validate_a@4:
  00048	3b de		 cmp	 ebx, esi
  0004a	7d 41		 jge	 SHORT $LN12@validate_a@4

; 2132 :         res = (validate_name(CHILD(tree, pos), "and")
; 2133 :                && validate_not_test(CHILD(tree, 0)));

  0004c	48 63 c3	 movsxd	 rax, ebx
  0004f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03BOPJPIAM@and?$AA@
  00056	ba 01 00 00 00	 mov	 edx, 1
  0005b	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0005f	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00063	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00067	e8 00 00 00 00	 call	 validate_terminal
  0006c	85 c0		 test	 eax, eax
  0006e	74 14		 je	 SHORT $LN8@validate_a@4
  00070	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00074	e8 00 00 00 00	 call	 validate_not_test
  00079	85 c0		 test	 eax, eax
  0007b	74 07		 je	 SHORT $LN8@validate_a@4
  0007d	b8 01 00 00 00	 mov	 eax, 1
  00082	eb 02		 jmp	 SHORT $LN9@validate_a@4
$LN8@validate_a@4:
  00084	33 c0		 xor	 eax, eax
$LN9@validate_a@4:

; 2130 : 
; 2131 :     for (pos = 1; res && (pos < nch); pos += 2)

  00086	83 c3 02	 add	 ebx, 2
  00089	85 c0		 test	 eax, eax
  0008b	75 bb		 jne	 SHORT $LL3@validate_a@4
$LN12@validate_a@4:

; 2134 : 
; 2135 :     return (res);
; 2136 : }

  0008d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00092	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00097	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009b	5f		 pop	 rdi
  0009c	c3		 ret	 0
validate_and_test ENDP
_TEXT	ENDS
PUBLIC	??_C@_02FODMLBIE@or?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_or_test DD imagerel validate_or_test
	DD	imagerel validate_or_test+44
	DD	imagerel $unwind$validate_or_test
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$validate_or_test DD imagerel validate_or_test+44
	DD	imagerel validate_or_test+163
	DD	imagerel $chain$0$validate_or_test
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$validate_or_test DD imagerel validate_or_test+163
	DD	imagerel validate_or_test+176
	DD	imagerel $chain$1$validate_or_test
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$validate_or_test DD 021H
	DD	imagerel validate_or_test
	DD	imagerel validate_or_test+44
	DD	imagerel $unwind$validate_or_test
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$validate_or_test DD 020521H
	DD	063405H
	DD	imagerel validate_or_test
	DD	imagerel validate_or_test+44
	DD	imagerel $unwind$validate_or_test
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_or_test DD 040a01H
	DD	07640aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_02FODMLBIE@or?$AA@
CONST	SEGMENT
??_C@_02FODMLBIE@or?$AA@ DB 'or', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_or_test
_TEXT	SEGMENT
tree$ = 48
validate_or_test PROC					; COMDAT

; 2107 : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2108 :     int nch = NCH(tree);

  0000a	8b 71 18	 mov	 esi, DWORD PTR [rcx+24]

; 2109 :     int res = validate_ntype(tree, or_test) && is_odd(nch);

  0000d	ba 32 01 00 00	 mov	 edx, 306		; 00000132H
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 81 00 00
	00		 je	 $LN7@validate_o
  00022	40 f6 c6 01	 test	 sil, 1
  00026	74 7b		 je	 SHORT $LN7@validate_o

; 2110 : 
; 2111 :     if (res) {
; 2112 :         int pos;
; 2113 :         res = validate_and_test(CHILD(tree, 0));

  00028	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0002c	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00031	e8 00 00 00 00	 call	 validate_and_test

; 2114 :         for (pos = 1; res && (pos < nch); pos += 2)

  00036	bb 01 00 00 00	 mov	 ebx, 1
  0003b	85 c0		 test	 eax, eax
  0003d	74 54		 je	 SHORT $LN16@validate_o
  0003f	90		 npad	 1
$LL3@validate_o:
  00040	3b de		 cmp	 ebx, esi
  00042	7d 4f		 jge	 SHORT $LN16@validate_o

; 2115 :             res = (validate_name(CHILD(tree, pos), "or")
; 2116 :                    && validate_and_test(CHILD(tree, pos + 1)));

  00044	48 63 c3	 movsxd	 rax, ebx
  00047	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02FODMLBIE@or?$AA@
  0004e	ba 01 00 00 00	 mov	 edx, 1
  00053	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00057	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0005b	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0005f	e8 00 00 00 00	 call	 validate_terminal
  00064	85 c0		 test	 eax, eax
  00066	74 22		 je	 SHORT $LN9@validate_o
  00068	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  0006b	48 63 c8	 movsxd	 rcx, eax
  0006e	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00072	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00076	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  0007a	e8 00 00 00 00	 call	 validate_and_test
  0007f	85 c0		 test	 eax, eax
  00081	74 07		 je	 SHORT $LN9@validate_o
  00083	b8 01 00 00 00	 mov	 eax, 1
  00088	eb 02		 jmp	 SHORT $LN10@validate_o
$LN9@validate_o:
  0008a	33 c0		 xor	 eax, eax
$LN10@validate_o:

; 2114 :         for (pos = 1; res && (pos < nch); pos += 2)

  0008c	83 c3 02	 add	 ebx, 2
  0008f	85 c0		 test	 eax, eax
  00091	75 ad		 jne	 SHORT $LL3@validate_o
$LN16@validate_o:
  00093	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 2119 : }

  00098	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0009d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a1	5f		 pop	 rdi
  000a2	c3		 ret	 0
$LN7@validate_o:

; 2117 :     }
; 2118 :     return (res);

  000a3	33 c0		 xor	 eax, eax

; 2119 : }

  000a5	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000aa	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ae	5f		 pop	 rdi
  000af	c3		 ret	 0
validate_or_test ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_test DD imagerel validate_test
	DD	imagerel validate_test+231
	DD	imagerel $unwind$validate_test
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_test DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT validate_test
_TEXT	SEGMENT
tree$ = 48
validate_test PROC					; COMDAT

; 2073 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2074 :     int nch = NCH(tree);

  0000a	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]

; 2075 :     int res = validate_ntype(tree, test) && is_odd(nch);

  0000d	ba 2e 01 00 00	 mov	 edx, 302		; 0000012eH
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 b8 00 00
	00		 je	 $LN6@validate_t@7
  00022	f6 c3 01	 test	 bl, 1
  00025	0f 84 af 00 00
	00		 je	 $LN6@validate_t@7

; 2076 : 
; 2077 :     if (res && (TYPE(CHILD(tree, 0)) == lambdef))

  0002b	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0002f	b8 30 01 00 00	 mov	 eax, 304		; 00000130H
  00034	66 39 01	 cmp	 WORD PTR [rcx], ax
  00037	75 23		 jne	 SHORT $LN15@validate_t@7

; 2078 :         res = ((nch == 1)
; 2079 :                && validate_lambdef(CHILD(tree, 0)));

  00039	83 fb 01	 cmp	 ebx, 1
  0003c	0f 85 98 00 00
	00		 jne	 $LN6@validate_t@7
  00042	e8 00 00 00 00	 call	 validate_lambdef
  00047	85 c0		 test	 eax, eax
  00049	0f 84 8b 00 00
	00		 je	 $LN6@validate_t@7

; 2087 :     }
; 2088 :     return (res);

  0004f	8b c3		 mov	 eax, ebx

; 2089 : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
$LN15@validate_t@7:

; 2080 :     else if (res) {
; 2081 :         res = validate_or_test(CHILD(tree, 0));

  0005c	e8 00 00 00 00	 call	 validate_or_test

; 2082 :         res = (res && (nch == 1 || (nch == 5 &&
; 2083 :             validate_name(CHILD(tree, 1), "if") &&
; 2084 :             validate_or_test(CHILD(tree, 2)) &&
; 2085 :             validate_name(CHILD(tree, 3), "else") &&
; 2086 :             validate_test(CHILD(tree, 4)))));

  00061	85 c0		 test	 eax, eax
  00063	74 75		 je	 SHORT $LN6@validate_t@7
  00065	83 fb 01	 cmp	 ebx, 1
  00068	74 60		 je	 SHORT $LN11@validate_t@7
  0006a	83 fb 05	 cmp	 ebx, 5
  0006d	75 6b		 jne	 SHORT $LN6@validate_t@7
  0006f	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00073	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HEBPBKGD@if?$AA@
  0007a	8d 53 fc	 lea	 edx, QWORD PTR [rbx-4]
  0007d	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00081	e8 00 00 00 00	 call	 validate_terminal
  00086	85 c0		 test	 eax, eax
  00088	74 50		 je	 SHORT $LN6@validate_t@7
  0008a	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0008e	48 83 c1 50	 add	 rcx, 80			; 00000050H
  00092	e8 00 00 00 00	 call	 validate_or_test
  00097	85 c0		 test	 eax, eax
  00099	74 3f		 je	 SHORT $LN6@validate_t@7
  0009b	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0009f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04FHMCPBIP@else?$AA@
  000a6	8d 53 fc	 lea	 edx, QWORD PTR [rbx-4]
  000a9	48 83 c1 78	 add	 rcx, 120		; 00000078H
  000ad	e8 00 00 00 00	 call	 validate_terminal
  000b2	85 c0		 test	 eax, eax
  000b4	74 24		 je	 SHORT $LN6@validate_t@7
  000b6	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  000ba	48 81 c1 a0 00
	00 00		 add	 rcx, 160		; 000000a0H
  000c1	e8 00 00 00 00	 call	 validate_test
  000c6	85 c0		 test	 eax, eax
  000c8	74 10		 je	 SHORT $LN6@validate_t@7
$LN11@validate_t@7:

; 2087 :     }
; 2088 :     return (res);

  000ca	b8 01 00 00 00	 mov	 eax, 1

; 2089 : }

  000cf	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000d4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d8	5f		 pop	 rdi
  000d9	c3		 ret	 0
$LN6@validate_t@7:

; 2087 :     }
; 2088 :     return (res);

  000da	33 c0		 xor	 eax, eax

; 2089 : }

  000dc	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000e1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e5	5f		 pop	 rdi
  000e6	c3		 ret	 0
validate_test ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_with_item DD imagerel validate_with_item
	DD	imagerel validate_with_item+131
	DD	imagerel $unwind$validate_with_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_with_item DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT validate_with_item
_TEXT	SEGMENT
tree$ = 48
validate_with_item PROC					; COMDAT

; 2531 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2532 :     int nch = NCH(tree);

  0000a	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]

; 2533 :     int ok = (validate_ntype(tree, with_item)
; 2534 :               && (nch == 1 || nch == 3)
; 2535 :               && validate_test(CHILD(tree, 0)));

  0000d	ba 2b 01 00 00	 mov	 edx, 299		; 0000012bH
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	74 58		 je	 SHORT $LN5@validate_w
  0001e	83 fb 01	 cmp	 ebx, 1
  00021	74 05		 je	 SHORT $LN4@validate_w
  00023	83 fb 03	 cmp	 ebx, 3
  00026	75 4e		 jne	 SHORT $LN5@validate_w
$LN4@validate_w:
  00028	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0002c	e8 00 00 00 00	 call	 validate_test
  00031	85 c0		 test	 eax, eax
  00033	74 41		 je	 SHORT $LN5@validate_w

; 2536 :     if (ok && nch == 3)

  00035	83 fb 03	 cmp	 ebx, 3
  00038	75 2c		 jne	 SHORT $LN10@validate_w

; 2537 :         ok = (validate_name(CHILD(tree, 1), "as")
; 2538 :               && validate_expr(CHILD(tree, 2)));

  0003a	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0003e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02ENLJKNMP@as?$AA@
  00045	8d 53 fe	 lea	 edx, QWORD PTR [rbx-2]
  00048	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0004c	e8 00 00 00 00	 call	 validate_terminal
  00051	85 c0		 test	 eax, eax
  00053	74 21		 je	 SHORT $LN5@validate_w
  00055	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00059	48 83 c1 50	 add	 rcx, 80			; 00000050H
  0005d	e8 00 00 00 00	 call	 validate_expr
  00062	85 c0		 test	 eax, eax
  00064	74 10		 je	 SHORT $LN5@validate_w
$LN10@validate_w:

; 2539 :     return ok;

  00066	b8 01 00 00 00	 mov	 eax, 1

; 2540 : }

  0006b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00070	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00074	5f		 pop	 rdi
  00075	c3		 ret	 0
$LN5@validate_w:

; 2539 :     return ok;

  00076	33 c0		 xor	 eax, eax

; 2540 : }

  00078	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00081	5f		 pop	 rdi
  00082	c3		 ret	 0
validate_with_item ENDP
_TEXT	ENDS
PUBLIC	??_C@_04MKNNKNJH@with?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_with_stmt DD imagerel validate_with_stmt
	DD	imagerel validate_with_stmt+211
	DD	imagerel $unwind$validate_with_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_with_stmt DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_04MKNNKNJH@with?$AA@
CONST	SEGMENT
??_C@_04MKNNKNJH@with?$AA@ DB 'with', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_with_stmt
_TEXT	SEGMENT
tree$ = 48
validate_with_stmt PROC					; COMDAT

; 2548 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2549 :     int i;
; 2550 :     int nch = NCH(tree);

  0000f	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 2551 :     int ok = (validate_ntype(tree, with_stmt)
; 2552 :         && (nch % 2 == 0)
; 2553 :         && validate_name(CHILD(tree, 0), "with")
; 2554 :         && validate_colon(RCHILD(tree, -2))
; 2555 :         && validate_suite(RCHILD(tree, -1)));

  00012	ba 2a 01 00 00	 mov	 edx, 298		; 0000012aH
  00017	48 8b f1	 mov	 rsi, rcx
  0001a	e8 00 00 00 00	 call	 validate_ntype
  0001f	bb 01 00 00 00	 mov	 ebx, 1
  00024	85 c0		 test	 eax, eax
  00026	74 73		 je	 SHORT $LN6@validate_w@2
  00028	8b c7		 mov	 eax, edi
  0002a	25 01 00 00 80	 and	 eax, -2147483647	; ffffffff80000001H
  0002f	7d 07		 jge	 SHORT $LN10@validate_w@2
  00031	ff c8		 dec	 eax
  00033	83 c8 fe	 or	 eax, -2
  00036	ff c0		 inc	 eax
$LN10@validate_w@2:
  00038	85 c0		 test	 eax, eax
  0003a	75 5f		 jne	 SHORT $LN6@validate_w@2
  0003c	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  00040	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04MKNNKNJH@with?$AA@
  00047	8b d3		 mov	 edx, ebx
  00049	e8 00 00 00 00	 call	 validate_terminal
  0004e	85 c0		 test	 eax, eax
  00050	74 49		 je	 SHORT $LN6@validate_w@2
  00052	8b 46 18	 mov	 eax, DWORD PTR [rsi+24]
  00055	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  0005c	ba 0b 00 00 00	 mov	 edx, 11
  00061	83 e8 02	 sub	 eax, 2
  00064	48 98		 cdqe
  00066	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0006a	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0006e	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00072	e8 00 00 00 00	 call	 validate_terminal
  00077	85 c0		 test	 eax, eax
  00079	74 20		 je	 SHORT $LN6@validate_w@2
  0007b	8b 46 18	 mov	 eax, DWORD PTR [rsi+24]
  0007e	ff c8		 dec	 eax
  00080	48 98		 cdqe
  00082	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00086	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0008a	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0008e	e8 00 00 00 00	 call	 validate_suite
  00093	85 c0		 test	 eax, eax
  00095	74 04		 je	 SHORT $LN6@validate_w@2
  00097	8b c3		 mov	 eax, ebx
  00099	eb 02		 jmp	 SHORT $LN7@validate_w@2
$LN6@validate_w@2:
  0009b	33 c0		 xor	 eax, eax
$LN7@validate_w@2:

; 2556 :     for (i = 1; ok && i < nch - 2; i += 2)

  0009d	85 c0		 test	 eax, eax
  0009f	74 22		 je	 SHORT $LN11@validate_w@2
  000a1	83 c7 fe	 add	 edi, -2
$LL3@validate_w@2:
  000a4	3b df		 cmp	 ebx, edi
  000a6	7d 1b		 jge	 SHORT $LN11@validate_w@2

; 2557 :         ok = validate_with_item(CHILD(tree, i));

  000a8	48 63 c3	 movsxd	 rax, ebx
  000ab	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  000af	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  000b3	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  000b7	e8 00 00 00 00	 call	 validate_with_item
  000bc	83 c3 02	 add	 ebx, 2
  000bf	85 c0		 test	 eax, eax
  000c1	75 e1		 jne	 SHORT $LL3@validate_w@2
$LN11@validate_w@2:

; 2558 :     return ok;
; 2559 : }

  000c3	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c8	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000cd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d1	5f		 pop	 rdi
  000d2	c3		 ret	 0
validate_with_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@MCGEOJBN@illegal?5number?5of?5children?5for?5f@ ; `string'
PUBLIC	??_C@_02HBOOOICD@?9?$DO?$AA@			; `string'
PUBLIC	??_C@_03BHEEIFFN@def?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_funcdef DD imagerel validate_funcdef
	DD	imagerel validate_funcdef+377
	DD	imagerel $unwind$validate_funcdef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_funcdef DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CH@MCGEOJBN@illegal?5number?5of?5children?5for?5f@
CONST	SEGMENT
??_C@_0CH@MCGEOJBN@illegal?5number?5of?5children?5for?5f@ DB 'illegal num'
	DB	'ber of children for funcdef', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HBOOOICD@?9?$DO?$AA@
CONST	SEGMENT
??_C@_02HBOOOICD@?9?$DO?$AA@ DB '->', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BHEEIFFN@def?$AA@
CONST	SEGMENT
??_C@_03BHEEIFFN@def?$AA@ DB 'def', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_funcdef
_TEXT	SEGMENT
tree$ = 48
validate_funcdef PROC					; COMDAT

; 2565 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2566 :     int nch = NCH(tree);

  0000a	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 2567 :     int res = validate_ntype(tree, funcdef);

  0000d	ba 06 01 00 00	 mov	 edx, 262		; 00000106H
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype

; 2568 :     if (res) {

  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 4c 01 00
	00		 je	 $LN12@validate_f@3

; 2569 :         if (nch == 5) {

  00022	83 ff 05	 cmp	 edi, 5
  00025	0f 85 8f 00 00
	00		 jne	 $LN4@validate_f@3

; 2570 :             res = (validate_name(CHILD(tree, 0), "def")
; 2571 :                    && validate_ntype(CHILD(tree, 1), NAME)
; 2572 :                    && validate_parameters(CHILD(tree, 2))
; 2573 :                    && validate_colon(CHILD(tree, 3))
; 2574 :                    && validate_suite(CHILD(tree, 4)));

  0002b	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0002f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03BHEEIFFN@def?$AA@
  00036	8d 57 fc	 lea	 edx, QWORD PTR [rdi-4]
  00039	e8 00 00 00 00	 call	 validate_terminal
  0003e	85 c0		 test	 eax, eax
  00040	0f 84 26 01 00
	00		 je	 $LN10@validate_f@3
  00046	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0004a	8d 57 fc	 lea	 edx, QWORD PTR [rdi-4]
  0004d	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00051	e8 00 00 00 00	 call	 validate_ntype
  00056	85 c0		 test	 eax, eax
  00058	0f 84 0e 01 00
	00		 je	 $LN10@validate_f@3
  0005e	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00062	48 83 c1 50	 add	 rcx, 80			; 00000050H
  00066	e8 00 00 00 00	 call	 validate_parameters
  0006b	85 c0		 test	 eax, eax
  0006d	0f 84 f9 00 00
	00		 je	 $LN10@validate_f@3
  00073	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00077	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  0007e	8d 57 06	 lea	 edx, QWORD PTR [rdi+6]
  00081	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00085	e8 00 00 00 00	 call	 validate_terminal
  0008a	85 c0		 test	 eax, eax
  0008c	0f 84 da 00 00
	00		 je	 $LN10@validate_f@3
  00092	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00096	48 81 c1 a0 00
	00 00		 add	 rcx, 160		; 000000a0H
$LN13@validate_f@3:
  0009d	e8 00 00 00 00	 call	 validate_suite
  000a2	85 c0		 test	 eax, eax
  000a4	0f 84 c2 00 00
	00		 je	 $LN10@validate_f@3

; 2588 :         }
; 2589 :     }
; 2590 :     return res;

  000aa	b8 01 00 00 00	 mov	 eax, 1

; 2591 : }

  000af	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b8	5f		 pop	 rdi
  000b9	c3		 ret	 0
$LN4@validate_f@3:

; 2575 :         }
; 2576 :         else if (nch == 7) {

  000ba	83 ff 07	 cmp	 edi, 7
  000bd	0f 85 9d 00 00
	00		 jne	 $LN2@validate_f@3

; 2577 :             res = (validate_name(CHILD(tree, 0), "def")
; 2578 :                    && validate_ntype(CHILD(tree, 1), NAME)
; 2579 :                    && validate_parameters(CHILD(tree, 2))
; 2580 :                    && validate_rarrow(CHILD(tree, 3))
; 2581 :                    && validate_test(CHILD(tree, 4))
; 2582 :                    && validate_colon(CHILD(tree, 5))
; 2583 :                    && validate_suite(CHILD(tree, 6)));

  000c3	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  000c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03BHEEIFFN@def?$AA@
  000ce	8d 57 fa	 lea	 edx, QWORD PTR [rdi-6]
  000d1	e8 00 00 00 00	 call	 validate_terminal
  000d6	85 c0		 test	 eax, eax
  000d8	0f 84 8e 00 00
	00		 je	 $LN10@validate_f@3
  000de	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  000e2	8d 57 fa	 lea	 edx, QWORD PTR [rdi-6]
  000e5	48 83 c1 28	 add	 rcx, 40			; 00000028H
  000e9	e8 00 00 00 00	 call	 validate_ntype
  000ee	85 c0		 test	 eax, eax
  000f0	74 7a		 je	 SHORT $LN10@validate_f@3
  000f2	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  000f6	48 83 c1 50	 add	 rcx, 80			; 00000050H
  000fa	e8 00 00 00 00	 call	 validate_parameters
  000ff	85 c0		 test	 eax, eax
  00101	74 69		 je	 SHORT $LN10@validate_f@3
  00103	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00107	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HBOOOICD@?9?$DO?$AA@
  0010e	8d 57 2b	 lea	 edx, QWORD PTR [rdi+43]
  00111	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00115	e8 00 00 00 00	 call	 validate_terminal
  0011a	85 c0		 test	 eax, eax
  0011c	74 4e		 je	 SHORT $LN10@validate_f@3
  0011e	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00122	48 81 c1 a0 00
	00 00		 add	 rcx, 160		; 000000a0H
  00129	e8 00 00 00 00	 call	 validate_test
  0012e	85 c0		 test	 eax, eax
  00130	74 3a		 je	 SHORT $LN10@validate_f@3
  00132	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00136	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  0013d	8d 57 04	 lea	 edx, QWORD PTR [rdi+4]
  00140	48 81 c1 c8 00
	00 00		 add	 rcx, 200		; 000000c8H
  00147	e8 00 00 00 00	 call	 validate_terminal
  0014c	85 c0		 test	 eax, eax
  0014e	74 1c		 je	 SHORT $LN10@validate_f@3
  00150	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00154	48 81 c1 f0 00
	00 00		 add	 rcx, 240		; 000000f0H
  0015b	e9 3d ff ff ff	 jmp	 $LN13@validate_f@3
$LN2@validate_f@3:

; 2584 :         }
; 2585 :         else {
; 2586 :             res = 0;
; 2587 :             err_string("illegal number of children for funcdef");

  00160	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@MCGEOJBN@illegal?5number?5of?5children?5for?5f@
  00167	e8 00 00 00 00	 call	 err_string
$LN10@validate_f@3:

; 2588 :         }
; 2589 :     }
; 2590 :     return res;

  0016c	33 c0		 xor	 eax, eax
$LN12@validate_f@3:

; 2591 : }

  0016e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00173	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00177	5f		 pop	 rdi
  00178	c3		 ret	 0
validate_funcdef ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_argument DD imagerel validate_argument
	DD	imagerel validate_argument+162
	DD	imagerel $unwind$validate_argument
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_argument DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT validate_argument
_TEXT	SEGMENT
tree$ = 48
validate_argument PROC					; COMDAT

; 2739 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2740 :     int nch = NCH(tree);

  0000a	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]

; 2741 :     int res = (validate_ntype(tree, argument)
; 2742 :                && ((nch == 1) || (nch == 2) || (nch == 3)));

  0000d	ba 4b 01 00 00	 mov	 edx, 331		; 0000014bH
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	74 77		 je	 SHORT $LN8@validate_a@5
  0001e	83 fb 01	 cmp	 ebx, 1
  00021	74 0a		 je	 SHORT $LN12@validate_a@5
  00023	83 fb 02	 cmp	 ebx, 2
  00026	74 05		 je	 SHORT $LN12@validate_a@5
  00028	83 fb 03	 cmp	 ebx, 3
  0002b	75 68		 jne	 SHORT $LN8@validate_a@5
$LN12@validate_a@5:

; 2743 :     if (res) 
; 2744 :         res = validate_test(CHILD(tree, 0));

  0002d	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00031	e8 00 00 00 00	 call	 validate_test

; 2745 :     if (res && (nch == 2))

  00036	85 c0		 test	 eax, eax
  00038	74 5d		 je	 SHORT $LN11@validate_a@5
  0003a	83 fb 02	 cmp	 ebx, 2
  0003d	75 17		 jne	 SHORT $LN3@validate_a@5

; 2746 :         res = validate_comp_for(CHILD(tree, 1));

  0003f	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00043	48 83 c1 28	 add	 rcx, 40			; 00000028H

; 2752 : }

  00047	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00050	5f		 pop	 rdi
  00051	e9 00 00 00 00	 jmp	 validate_comp_for
$LN3@validate_a@5:

; 2747 :     else if (res && (nch == 3))

  00056	83 fb 03	 cmp	 ebx, 3
  00059	75 3c		 jne	 SHORT $LN11@validate_a@5

; 2748 :         res = (validate_equal(CHILD(tree, 1))
; 2749 :                && validate_test(CHILD(tree, 2)));

  0005b	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0005f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01NEMOKFLO@?$DN?$AA@
  00066	8d 53 13	 lea	 edx, QWORD PTR [rbx+19]
  00069	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0006d	e8 00 00 00 00	 call	 validate_terminal
  00072	85 c0		 test	 eax, eax
  00074	74 1f		 je	 SHORT $LN8@validate_a@5
  00076	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0007a	48 83 c1 50	 add	 rcx, 80			; 00000050H
  0007e	e8 00 00 00 00	 call	 validate_test
  00083	85 c0		 test	 eax, eax
  00085	74 0e		 je	 SHORT $LN8@validate_a@5

; 2750 : 
; 2751 :     return (res);

  00087	8d 43 fe	 lea	 eax, QWORD PTR [rbx-2]

; 2752 : }

  0008a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00093	5f		 pop	 rdi
  00094	c3		 ret	 0
$LN8@validate_a@5:

; 2750 : 
; 2751 :     return (res);

  00095	33 c0		 xor	 eax, eax
$LN11@validate_a@5:

; 2752 : }

  00097	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a0	5f		 pop	 rdi
  000a1	c3		 ret	 0
validate_argument ENDP
_TEXT	ENDS
PUBLIC	??_C@_04GNFOIEOK@elif?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_if DD imagerel validate_if
	DD	imagerel validate_if+572
	DD	imagerel $unwind$validate_if
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_if DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_04GNFOIEOK@elif?$AA@
CONST	SEGMENT
??_C@_04GNFOIEOK@elif?$AA@ DB 'elif', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_if
_TEXT	SEGMENT
tree$ = 48
validate_if PROC					; COMDAT

; 1111 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1112 :     int nch = NCH(tree);

  00014	8b 69 18	 mov	 ebp, DWORD PTR [rcx+24]

; 1113 :     int res = (validate_ntype(tree, if_stmt)
; 1114 :                && (nch >= 4)
; 1115 :                && validate_name(CHILD(tree, 0), "if")
; 1116 :                && validate_test(CHILD(tree, 1))
; 1117 :                && validate_colon(CHILD(tree, 2))
; 1118 :                && validate_suite(CHILD(tree, 3)));

  00017	ba 26 01 00 00	 mov	 edx, 294		; 00000126H
  0001c	48 8b f1	 mov	 rsi, rcx
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	0f 84 fb 00 00
	00		 je	 $LN11@validate_i@6
  0002c	83 fd 04	 cmp	 ebp, 4
  0002f	0f 8c f2 00 00
	00		 jl	 $LN11@validate_i@6
  00035	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  00039	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HEBPBKGD@if?$AA@
  00040	ba 01 00 00 00	 mov	 edx, 1
  00045	e8 00 00 00 00	 call	 validate_terminal
  0004a	85 c0		 test	 eax, eax
  0004c	0f 84 d5 00 00
	00		 je	 $LN11@validate_i@6
  00052	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  00056	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0005a	e8 00 00 00 00	 call	 validate_test
  0005f	85 c0		 test	 eax, eax
  00061	0f 84 c0 00 00
	00		 je	 $LN11@validate_i@6
  00067	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  0006b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00072	ba 0b 00 00 00	 mov	 edx, 11
  00077	48 83 c1 50	 add	 rcx, 80			; 00000050H
  0007b	e8 00 00 00 00	 call	 validate_terminal
  00080	85 c0		 test	 eax, eax
  00082	0f 84 9f 00 00
	00		 je	 $LN11@validate_i@6
  00088	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  0008c	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00090	e8 00 00 00 00	 call	 validate_suite
  00095	85 c0		 test	 eax, eax
  00097	0f 84 8a 00 00
	00		 je	 $LN11@validate_i@6

; 1119 : 
; 1120 :     if (res && ((nch % 4) == 3)) {

  0009d	8b c5		 mov	 eax, ebp
  0009f	bb 01 00 00 00	 mov	 ebx, 1
  000a4	25 03 00 00 80	 and	 eax, -2147483645	; ffffffff80000003H
  000a9	7d 07		 jge	 SHORT $LN22@validate_i@6
  000ab	ff c8		 dec	 eax
  000ad	83 c8 fc	 or	 eax, -4
  000b0	ff c0		 inc	 eax
$LN22@validate_i@6:
  000b2	83 f8 03	 cmp	 eax, 3
  000b5	0f 85 8a 00 00
	00		 jne	 $LN6@validate_i@6

; 1121 :         /*  ... 'else' ':' suite  */
; 1122 :         res = (validate_name(CHILD(tree, nch - 3), "else")
; 1123 :                && validate_colon(CHILD(tree, nch - 2))
; 1124 :                && validate_suite(CHILD(tree, nch - 1)));

  000bb	8d 7d fd	 lea	 edi, DWORD PTR [rbp-3]
  000be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04FHMCPBIP@else?$AA@
  000c5	8b d3		 mov	 edx, ebx
  000c7	48 63 c7	 movsxd	 rax, edi
  000ca	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  000ce	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  000d2	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  000d6	e8 00 00 00 00	 call	 validate_terminal
  000db	85 c0		 test	 eax, eax
  000dd	74 42		 je	 SHORT $LN13@validate_i@6
  000df	8d 45 fe	 lea	 eax, DWORD PTR [rbp-2]
  000e2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  000e9	48 63 c8	 movsxd	 rcx, eax
  000ec	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  000f0	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  000f4	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  000f8	ba 0b 00 00 00	 mov	 edx, 11
  000fd	e8 00 00 00 00	 call	 validate_terminal
  00102	85 c0		 test	 eax, eax
  00104	74 1b		 je	 SHORT $LN13@validate_i@6
  00106	8d 45 ff	 lea	 eax, DWORD PTR [rbp-1]
  00109	48 63 c8	 movsxd	 rcx, eax
  0010c	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00110	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00114	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00118	e8 00 00 00 00	 call	 validate_suite
  0011d	85 c0		 test	 eax, eax
  0011f	75 02		 jne	 SHORT $LN14@validate_i@6
$LN13@validate_i@6:
  00121	33 db		 xor	 ebx, ebx
$LN14@validate_i@6:

; 1125 :         nch -= 3;

  00123	8b ef		 mov	 ebp, edi
  00125	eb 1e		 jmp	 SHORT $LN6@validate_i@6
$LN11@validate_i@6:

; 1113 :     int res = (validate_ntype(tree, if_stmt)
; 1114 :                && (nch >= 4)
; 1115 :                && validate_name(CHILD(tree, 0), "if")
; 1116 :                && validate_test(CHILD(tree, 1))
; 1117 :                && validate_colon(CHILD(tree, 2))
; 1118 :                && validate_suite(CHILD(tree, 3)));

  00127	33 db		 xor	 ebx, ebx

; 1126 :     }
; 1127 :     else if (!res && !PyErr_Occurred())

  00129	e8 00 00 00 00	 call	 PyErr_Occurred
  0012e	48 85 c0	 test	 rax, rax
  00131	75 12		 jne	 SHORT $LN6@validate_i@6

; 1128 :         (void) validate_numnodes(tree, 4, "if");

  00133	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HEBPBKGD@if?$AA@
  0013a	8d 53 04	 lea	 edx, QWORD PTR [rbx+4]
  0013d	48 8b ce	 mov	 rcx, rsi
  00140	e8 00 00 00 00	 call	 validate_numnodes
$LN6@validate_i@6:

; 1129 :     if ((nch % 4) != 0)

  00145	8b c5		 mov	 eax, ebp
  00147	25 03 00 00 80	 and	 eax, -2147483645	; ffffffff80000003H
  0014c	7d 07		 jge	 SHORT $LN21@validate_i@6
  0014e	ff c8		 dec	 eax
  00150	83 c8 fc	 or	 eax, -4
  00153	ff c0		 inc	 eax
$LN21@validate_i@6:
  00155	85 c0		 test	 eax, eax
  00157	74 16		 je	 SHORT $LN5@validate_i@6

; 1130 :         /* Will catch the case for nch < 4 */
; 1131 :         res = validate_numnodes(tree, 0, "if");

  00159	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HEBPBKGD@if?$AA@
  00160	33 d2		 xor	 edx, edx
  00162	48 8b ce	 mov	 rcx, rsi
  00165	e8 00 00 00 00	 call	 validate_numnodes
  0016a	e9 b8 00 00 00	 jmp	 $LN1@validate_i@6
$LN5@validate_i@6:

; 1132 :     else if (res && (nch > 4)) {

  0016f	85 db		 test	 ebx, ebx
  00171	0f 84 ae 00 00
	00		 je	 $LN25@validate_i@6
  00177	83 fd 04	 cmp	 ebp, 4
  0017a	0f 8e a5 00 00
	00		 jle	 $LN25@validate_i@6

; 1133 :         /*  ... ('elif' test ':' suite)+ ...  */
; 1134 :         int j = 4;

  00180	bf 05 00 00 00	 mov	 edi, 5
$LL2@validate_i@6:

; 1135 :         while ((j < nch) && res) {

  00185	85 db		 test	 ebx, ebx
  00187	0f 84 98 00 00
	00		 je	 $LN25@validate_i@6

; 1136 :             res = (validate_name(CHILD(tree, j), "elif")
; 1137 :                    && validate_colon(CHILD(tree, j + 2))
; 1138 :                    && validate_test(CHILD(tree, j + 1))
; 1139 :                    && validate_suite(CHILD(tree, j + 3)));

  0018d	8d 47 ff	 lea	 eax, DWORD PTR [rdi-1]
  00190	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04GNFOIEOK@elif?$AA@
  00197	48 63 c8	 movsxd	 rcx, eax
  0019a	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0019e	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  001a2	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  001a6	ba 01 00 00 00	 mov	 edx, 1
  001ab	e8 00 00 00 00	 call	 validate_terminal
  001b0	85 c0		 test	 eax, eax
  001b2	74 61		 je	 SHORT $LN15@validate_i@6
  001b4	8d 47 01	 lea	 eax, DWORD PTR [rdi+1]
  001b7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  001be	48 63 c8	 movsxd	 rcx, eax
  001c1	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  001c5	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  001c9	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  001cd	ba 0b 00 00 00	 mov	 edx, 11
  001d2	e8 00 00 00 00	 call	 validate_terminal
  001d7	85 c0		 test	 eax, eax
  001d9	74 3a		 je	 SHORT $LN15@validate_i@6
  001db	48 63 c7	 movsxd	 rax, edi
  001de	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  001e2	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  001e6	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  001ea	e8 00 00 00 00	 call	 validate_test
  001ef	85 c0		 test	 eax, eax
  001f1	74 22		 je	 SHORT $LN15@validate_i@6
  001f3	8d 47 02	 lea	 eax, DWORD PTR [rdi+2]
  001f6	48 63 c8	 movsxd	 rcx, eax
  001f9	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  001fd	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00201	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00205	e8 00 00 00 00	 call	 validate_suite
  0020a	85 c0		 test	 eax, eax
  0020c	74 07		 je	 SHORT $LN15@validate_i@6
  0020e	bb 01 00 00 00	 mov	 ebx, 1
  00213	eb 02		 jmp	 SHORT $LN16@validate_i@6
$LN15@validate_i@6:
  00215	33 db		 xor	 ebx, ebx
$LN16@validate_i@6:

; 1140 :             j += 4;

  00217	83 c7 04	 add	 edi, 4
  0021a	8d 4f ff	 lea	 ecx, DWORD PTR [rdi-1]
  0021d	3b cd		 cmp	 ecx, ebp
  0021f	0f 8c 60 ff ff
	ff		 jl	 $LL2@validate_i@6
$LN25@validate_i@6:

; 1141 :         }
; 1142 :     }
; 1143 :     return (res);

  00225	8b c3		 mov	 eax, ebx
$LN1@validate_i@6:

; 1144 : }

  00227	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0022c	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00231	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00236	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0023a	5f		 pop	 rdi
  0023b	c3		 ret	 0
validate_if ENDP
_TEXT	ENDS
PUBLIC	??_C@_05KEJGFNAJ@raise?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_raise_stmt DD imagerel validate_raise_stmt
	DD	imagerel validate_raise_stmt+196
	DD	imagerel $unwind$validate_raise_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_raise_stmt DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_05KEJGFNAJ@raise?$AA@
CONST	SEGMENT
??_C@_05KEJGFNAJ@raise?$AA@ DB 'raise', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_raise_stmt
_TEXT	SEGMENT
tree$ = 48
validate_raise_stmt PROC				; COMDAT

; 1630 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1631 :     int nch = NCH(tree);

  0000a	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]

; 1632 :     int res = (validate_ntype(tree, raise_stmt)
; 1633 :                && ((nch == 1) || (nch == 2) || (nch == 4)));

  0000d	ba 19 01 00 00	 mov	 edx, 281		; 00000119H
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	74 7d		 je	 SHORT $LN8@validate_r@3
  0001e	83 fb 01	 cmp	 ebx, 1
  00021	74 0a		 je	 SHORT $LN12@validate_r@3
  00023	83 fb 02	 cmp	 ebx, 2
  00026	74 05		 je	 SHORT $LN12@validate_r@3
  00028	83 fb 04	 cmp	 ebx, 4
  0002b	75 6e		 jne	 SHORT $LN8@validate_r@3
$LN12@validate_r@3:

; 1637 : 
; 1638 :     if (res) {
; 1639 :         res = validate_name(CHILD(tree, 0), "raise");

  0002d	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00031	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KEJGFNAJ@raise?$AA@
  00038	ba 01 00 00 00	 mov	 edx, 1
  0003d	e8 00 00 00 00	 call	 validate_terminal

; 1640 :         if (res && (nch >= 2))

  00042	85 c0		 test	 eax, eax
  00044	74 73		 je	 SHORT $LN11@validate_r@3
  00046	83 fb 02	 cmp	 ebx, 2
  00049	7c 0d		 jl	 SHORT $LN2@validate_r@3

; 1641 :             res = validate_test(CHILD(tree, 1));

  0004b	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0004f	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00053	e8 00 00 00 00	 call	 validate_test
$LN2@validate_r@3:

; 1642 :         if (res && (nch == 4)) {

  00058	85 c0		 test	 eax, eax
  0005a	74 5d		 je	 SHORT $LN11@validate_r@3
  0005c	83 fb 04	 cmp	 ebx, 4
  0005f	75 58		 jne	 SHORT $LN11@validate_r@3

; 1643 :             res = (validate_name(CHILD(tree, 2), "from")
; 1644 :                    && validate_test(CHILD(tree, 3)));

  00061	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04HNEBHLOP@from?$AA@
  0006c	8d 53 fd	 lea	 edx, QWORD PTR [rbx-3]
  0006f	48 83 c1 50	 add	 rcx, 80			; 00000050H
  00073	e8 00 00 00 00	 call	 validate_terminal
  00078	85 c0		 test	 eax, eax
  0007a	74 3b		 je	 SHORT $LN17@validate_r@3
  0007c	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00080	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00084	e8 00 00 00 00	 call	 validate_test
  00089	85 c0		 test	 eax, eax
  0008b	74 2a		 je	 SHORT $LN17@validate_r@3

; 1645 :         }
; 1646 :     }
; 1647 :     return (res);

  0008d	8d 43 fd	 lea	 eax, QWORD PTR [rbx-3]

; 1648 : }

  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00099	5f		 pop	 rdi
  0009a	c3		 ret	 0
$LN8@validate_r@3:

; 1634 : 
; 1635 :     if (!res && !PyErr_Occurred())

  0009b	e8 00 00 00 00	 call	 PyErr_Occurred
  000a0	48 85 c0	 test	 rax, rax
  000a3	75 12		 jne	 SHORT $LN17@validate_r@3

; 1636 :         (void) validate_numnodes(tree, 2, "raise");

  000a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KEJGFNAJ@raise?$AA@
  000ac	8d 50 02	 lea	 edx, QWORD PTR [rax+2]
  000af	48 8b cf	 mov	 rcx, rdi
  000b2	e8 00 00 00 00	 call	 validate_numnodes
$LN17@validate_r@3:

; 1645 :         }
; 1646 :     }
; 1647 :     return (res);

  000b7	33 c0		 xor	 eax, eax
$LN11@validate_r@3:

; 1648 : }

  000b9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000be	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c2	5f		 pop	 rdi
  000c3	c3		 ret	 0
validate_raise_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@IBGKJJFN@illegal?5assert?5statement?$AA@ ; `string'
PUBLIC	??_C@_06GMEIIFFN@assert?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_assert_stmt DD imagerel validate_assert_stmt
	DD	imagerel validate_assert_stmt+184
	DD	imagerel $unwind$validate_assert_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_assert_stmt DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BJ@IBGKJJFN@illegal?5assert?5statement?$AA@
CONST	SEGMENT
??_C@_0BJ@IBGKJJFN@illegal?5assert?5statement?$AA@ DB 'illegal assert sta'
	DB	'tement', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06GMEIIFFN@assert?$AA@
CONST	SEGMENT
??_C@_06GMEIIFFN@assert?$AA@ DB 'assert', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_assert_stmt
_TEXT	SEGMENT
tree$ = 48
validate_assert_stmt PROC				; COMDAT

; 1933 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1934 :     int nch = NCH(tree);

  0000a	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]

; 1935 :     int res = (validate_ntype(tree, assert_stmt)
; 1936 :                && ((nch == 2) || (nch == 4))
; 1937 :                && (validate_name(CHILD(tree, 0), "assert"))
; 1938 :                && validate_test(CHILD(tree, 1)));

  0000d	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	74 77		 je	 SHORT $LN6@validate_a@6
  0001e	83 fb 02	 cmp	 ebx, 2
  00021	74 05		 je	 SHORT $LN5@validate_a@6
  00023	83 fb 04	 cmp	 ebx, 4
  00026	75 6d		 jne	 SHORT $LN6@validate_a@6
$LN5@validate_a@6:
  00028	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0002c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06GMEIIFFN@assert?$AA@
  00033	ba 01 00 00 00	 mov	 edx, 1
  00038	e8 00 00 00 00	 call	 validate_terminal
  0003d	85 c0		 test	 eax, eax
  0003f	74 54		 je	 SHORT $LN6@validate_a@6
  00041	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00045	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00049	e8 00 00 00 00	 call	 validate_test
  0004e	85 c0		 test	 eax, eax
  00050	74 43		 je	 SHORT $LN6@validate_a@6

; 1942 :     if (res && (nch > 2))

  00052	83 fb 02	 cmp	 ebx, 2
  00055	7e 2e		 jle	 SHORT $LN12@validate_a@6

; 1943 :         res = (validate_comma(CHILD(tree, 2))
; 1944 :                && validate_test(CHILD(tree, 3)));

  00057	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0005b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  00062	ba 0c 00 00 00	 mov	 edx, 12
  00067	48 83 c1 50	 add	 rcx, 80			; 00000050H
  0006b	e8 00 00 00 00	 call	 validate_terminal
  00070	85 c0		 test	 eax, eax
  00072	74 37		 je	 SHORT $LN13@validate_a@6
  00074	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00078	48 83 c1 78	 add	 rcx, 120		; 00000078H
  0007c	e8 00 00 00 00	 call	 validate_test
  00081	85 c0		 test	 eax, eax
  00083	74 26		 je	 SHORT $LN13@validate_a@6
$LN12@validate_a@6:

; 1945 : 
; 1946 :     return (res);

  00085	b8 01 00 00 00	 mov	 eax, 1

; 1947 : }

  0008a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00093	5f		 pop	 rdi
  00094	c3		 ret	 0
$LN6@validate_a@6:

; 1939 : 
; 1940 :     if (!res && !PyErr_Occurred())

  00095	e8 00 00 00 00	 call	 PyErr_Occurred
  0009a	48 85 c0	 test	 rax, rax
  0009d	75 0c		 jne	 SHORT $LN13@validate_a@6

; 1941 :         err_string("illegal assert statement");

  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@IBGKJJFN@illegal?5assert?5statement?$AA@
  000a6	e8 00 00 00 00	 call	 err_string
$LN13@validate_a@6:

; 1945 : 
; 1946 :     return (res);

  000ab	33 c0		 xor	 eax, eax

; 1947 : }

  000ad	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b6	5f		 pop	 rdi
  000b7	c3		 ret	 0
validate_assert_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_05OODBEKIG@while?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_while DD imagerel validate_while
	DD	imagerel validate_while+258
	DD	imagerel $unwind$validate_while
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_while DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_05OODBEKIG@while?$AA@
CONST	SEGMENT
??_C@_05OODBEKIG@while?$AA@ DB 'while', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_while
_TEXT	SEGMENT
tree$ = 48
validate_while PROC					; COMDAT

; 1952 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1953 :     int nch = NCH(tree);

  0000a	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 1954 :     int res = (validate_ntype(tree, while_stmt)
; 1955 :                && ((nch == 4) || (nch == 7))
; 1956 :                && validate_name(CHILD(tree, 0), "while")
; 1957 :                && validate_test(CHILD(tree, 1))
; 1958 :                && validate_colon(CHILD(tree, 2))
; 1959 :                && validate_suite(CHILD(tree, 3)));

  0000d	ba 27 01 00 00	 mov	 edx, 295		; 00000127H
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 d3 00 00
	00		 je	 $LN5@validate_w@3
  00022	83 ff 04	 cmp	 edi, 4
  00025	74 09		 je	 SHORT $LN4@validate_w@3
  00027	83 ff 07	 cmp	 edi, 7
  0002a	0f 85 c5 00 00
	00		 jne	 $LN5@validate_w@3
$LN4@validate_w@3:
  00030	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00034	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05OODBEKIG@while?$AA@
  0003b	ba 01 00 00 00	 mov	 edx, 1
  00040	e8 00 00 00 00	 call	 validate_terminal
  00045	85 c0		 test	 eax, eax
  00047	0f 84 a8 00 00
	00		 je	 $LN5@validate_w@3
  0004d	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00051	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00055	e8 00 00 00 00	 call	 validate_test
  0005a	85 c0		 test	 eax, eax
  0005c	0f 84 93 00 00
	00		 je	 $LN5@validate_w@3
  00062	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00066	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  0006d	ba 0b 00 00 00	 mov	 edx, 11
  00072	48 83 c1 50	 add	 rcx, 80			; 00000050H
  00076	e8 00 00 00 00	 call	 validate_terminal
  0007b	85 c0		 test	 eax, eax
  0007d	74 76		 je	 SHORT $LN5@validate_w@3
  0007f	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00083	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00087	e8 00 00 00 00	 call	 validate_suite
  0008c	85 c0		 test	 eax, eax
  0008e	74 65		 je	 SHORT $LN5@validate_w@3

; 1960 : 
; 1961 :     if (res && (nch == 7))

  00090	83 ff 07	 cmp	 edi, 7
  00093	75 50		 jne	 SHORT $LN10@validate_w@3

; 1962 :         res = (validate_name(CHILD(tree, 4), "else")
; 1963 :                && validate_colon(CHILD(tree, 5))
; 1964 :                && validate_suite(CHILD(tree, 6)));

  00095	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00099	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04FHMCPBIP@else?$AA@
  000a0	8d 57 fa	 lea	 edx, QWORD PTR [rdi-6]
  000a3	48 81 c1 a0 00
	00 00		 add	 rcx, 160		; 000000a0H
  000aa	e8 00 00 00 00	 call	 validate_terminal
  000af	85 c0		 test	 eax, eax
  000b1	74 42		 je	 SHORT $LN5@validate_w@3
  000b3	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  000b7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  000be	8d 57 04	 lea	 edx, QWORD PTR [rdi+4]
  000c1	48 81 c1 c8 00
	00 00		 add	 rcx, 200		; 000000c8H
  000c8	e8 00 00 00 00	 call	 validate_terminal
  000cd	85 c0		 test	 eax, eax
  000cf	74 24		 je	 SHORT $LN5@validate_w@3
  000d1	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  000d5	48 81 c1 f0 00
	00 00		 add	 rcx, 240		; 000000f0H
  000dc	e8 00 00 00 00	 call	 validate_suite
  000e1	85 c0		 test	 eax, eax
  000e3	74 10		 je	 SHORT $LN5@validate_w@3
$LN10@validate_w@3:

; 1965 : 
; 1966 :     return (res);

  000e5	b8 01 00 00 00	 mov	 eax, 1

; 1967 : }

  000ea	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ef	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f3	5f		 pop	 rdi
  000f4	c3		 ret	 0
$LN5@validate_w@3:

; 1965 : 
; 1966 :     return (res);

  000f5	33 c0		 xor	 eax, eax

; 1967 : }

  000f7	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000fc	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00100	5f		 pop	 rdi
  00101	c3		 ret	 0
validate_while ENDP
_TEXT	ENDS
PUBLIC	??_C@_06JBKEBCGB@except?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_except_clause DD imagerel validate_except_clause
	DD	imagerel validate_except_clause+179
	DD	imagerel $unwind$validate_except_clause
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_except_clause DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_06JBKEBCGB@except?$AA@
CONST	SEGMENT
??_C@_06JBKEBCGB@except?$AA@ DB 'except', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_except_clause
_TEXT	SEGMENT
tree$ = 48
validate_except_clause PROC				; COMDAT

; 2055 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2056 :     int nch = NCH(tree);

  0000a	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]

; 2057 :     int res = (validate_ntype(tree, except_clause)
; 2058 :                && ((nch == 1) || (nch == 2) || (nch == 4))
; 2059 :                && validate_name(CHILD(tree, 0), "except"));

  0000d	ba 2c 01 00 00	 mov	 edx, 300		; 0000012cH
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 84 00 00
	00		 je	 $LN6@validate_e@6
  00022	83 fb 01	 cmp	 ebx, 1
  00025	74 0a		 je	 SHORT $LN5@validate_e@6
  00027	83 fb 02	 cmp	 ebx, 2
  0002a	74 05		 je	 SHORT $LN5@validate_e@6
  0002c	83 fb 04	 cmp	 ebx, 4
  0002f	75 75		 jne	 SHORT $LN6@validate_e@6
$LN5@validate_e@6:
  00031	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00035	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06JBKEBCGB@except?$AA@
  0003c	ba 01 00 00 00	 mov	 edx, 1
  00041	e8 00 00 00 00	 call	 validate_terminal
  00046	85 c0		 test	 eax, eax
  00048	74 5c		 je	 SHORT $LN6@validate_e@6
  0004a	b8 01 00 00 00	 mov	 eax, 1

; 2060 : 
; 2061 :     if (res && (nch > 1))

  0004f	3b d8		 cmp	 ebx, eax
  00051	7e 11		 jle	 SHORT $LN11@validate_e@6

; 2062 :         res = validate_test(CHILD(tree, 1));

  00053	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00057	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0005b	e8 00 00 00 00	 call	 validate_test

; 2063 :     if (res && (nch == 4))

  00060	85 c0		 test	 eax, eax
  00062	74 44		 je	 SHORT $LN9@validate_e@6
$LN11@validate_e@6:
  00064	83 fb 04	 cmp	 ebx, 4
  00067	75 3f		 jne	 SHORT $LN9@validate_e@6

; 2064 :         res = (validate_name(CHILD(tree, 2), "as")
; 2065 :                && validate_ntype(CHILD(tree, 3), NAME));

  00069	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0006d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02ENLJKNMP@as?$AA@
  00074	8d 53 fd	 lea	 edx, QWORD PTR [rbx-3]
  00077	48 83 c1 50	 add	 rcx, 80			; 00000050H
  0007b	e8 00 00 00 00	 call	 validate_terminal
  00080	85 c0		 test	 eax, eax
  00082	74 22		 je	 SHORT $LN6@validate_e@6
  00084	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00088	8d 53 fd	 lea	 edx, QWORD PTR [rbx-3]
  0008b	48 83 c1 78	 add	 rcx, 120		; 00000078H
  0008f	e8 00 00 00 00	 call	 validate_ntype
  00094	85 c0		 test	 eax, eax
  00096	74 0e		 je	 SHORT $LN6@validate_e@6

; 2066 : 
; 2067 :     return (res);

  00098	8d 43 fd	 lea	 eax, QWORD PTR [rbx-3]

; 2068 : }

  0009b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a4	5f		 pop	 rdi
  000a5	c3		 ret	 0
$LN6@validate_e@6:

; 2066 : 
; 2067 :     return (res);

  000a6	33 c0		 xor	 eax, eax
$LN9@validate_e@6:

; 2068 : }

  000a8	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ad	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b1	5f		 pop	 rdi
  000b2	c3		 ret	 0
validate_except_clause ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@CCGECEOG@illegal?5arglist?5specification?$AA@ ; `string'
PUBLIC	??_C@_0BP@BLEOBCFM@illegal?5use?5of?5?8?$CK?$CK?8?5in?5arglist?$AA@ ; `string'
PUBLIC	??_C@_0BO@IMAGFJEN@illegal?5use?5of?5?8?$CK?8?5in?5arglist?$AA@ ; `string'
PUBLIC	??_C@_0DD@OJLOMKNJ@illegal?5arglist?5specification?5?$CIe@ ; `string'
PUBLIC	??_C@_0CH@EKFJPBFO@need?5?8?$CI?8?0?5?8?$CJ?8?5for?5generator?5expr@ ; `string'
PUBLIC	??_C@_07OPJCDGGN@arglist?$AA@			; `string'
EXTRN	PyErr_Clear:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_arglist DD imagerel validate_arglist
	DD	imagerel validate_arglist+48
	DD	imagerel $unwind$validate_arglist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$validate_arglist DD imagerel validate_arglist+48
	DD	imagerel validate_arglist+117
	DD	imagerel $chain$0$validate_arglist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$validate_arglist DD imagerel validate_arglist+117
	DD	imagerel validate_arglist+208
	DD	imagerel $chain$2$validate_arglist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$validate_arglist DD imagerel validate_arglist+208
	DD	imagerel validate_arglist+236
	DD	imagerel $chain$3$validate_arglist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$validate_arglist DD imagerel validate_arglist+236
	DD	imagerel validate_arglist+649
	DD	imagerel $chain$5$validate_arglist
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$validate_arglist DD 060021H
	DD	0ad400H
	DD	097400H
	DD	085400H
	DD	imagerel validate_arglist
	DD	imagerel validate_arglist+48
	DD	imagerel $unwind$validate_arglist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$validate_arglist DD 021H
	DD	imagerel validate_arglist+48
	DD	imagerel validate_arglist+117
	DD	imagerel $chain$0$validate_arglist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$validate_arglist DD 040a21H
	DD	09740aH
	DD	085405H
	DD	imagerel validate_arglist+48
	DD	imagerel validate_arglist+117
	DD	imagerel $chain$0$validate_arglist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$validate_arglist DD 020521H
	DD	0ad405H
	DD	imagerel validate_arglist
	DD	imagerel validate_arglist+48
	DD	imagerel $unwind$validate_arglist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_arglist DD 040901H
	DD	0c0053209H
	DD	030026003H
xdata	ENDS
;	COMDAT ??_C@_0BO@CCGECEOG@illegal?5arglist?5specification?$AA@
CONST	SEGMENT
??_C@_0BO@CCGECEOG@illegal?5arglist?5specification?$AA@ DB 'illegal argli'
	DB	'st specification', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BLEOBCFM@illegal?5use?5of?5?8?$CK?$CK?8?5in?5arglist?$AA@
CONST	SEGMENT
??_C@_0BP@BLEOBCFM@illegal?5use?5of?5?8?$CK?$CK?8?5in?5arglist?$AA@ DB 'i'
	DB	'llegal use of ''**'' in arglist', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IMAGFJEN@illegal?5use?5of?5?8?$CK?8?5in?5arglist?$AA@
CONST	SEGMENT
??_C@_0BO@IMAGFJEN@illegal?5use?5of?5?8?$CK?8?5in?5arglist?$AA@ DB 'illeg'
	DB	'al use of ''*'' in arglist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@OJLOMKNJ@illegal?5arglist?5specification?5?$CIe@
CONST	SEGMENT
??_C@_0DD@OJLOMKNJ@illegal?5arglist?5specification?5?$CIe@ DB 'illegal ar'
	DB	'glist specification (extra stuff on end)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EKFJPBFO@need?5?8?$CI?8?0?5?8?$CJ?8?5for?5generator?5expr@
CONST	SEGMENT
??_C@_0CH@EKFJPBFO@need?5?8?$CI?8?0?5?8?$CJ?8?5for?5generator?5expr@ DB 'n'
	DB	'eed ''('', '')'' for generator expression', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07OPJCDGGN@arglist?$AA@
CONST	SEGMENT
??_C@_07OPJCDGGN@arglist?$AA@ DB 'arglist', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_arglist
_TEXT	SEGMENT
tree$ = 64
validate_arglist PROC					; COMDAT

; 2655 : {

  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	41 54		 push	 r12
  00005	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2656 :     int nch = NCH(tree);

  00009	4c 63 61 18	 movsxd	 r12, DWORD PTR [rcx+24]

; 2657 :     int i = 0;

  0000d	33 db		 xor	 ebx, ebx
  0000f	48 8b f1	 mov	 rsi, rcx

; 2658 :     int ok = 1;
; 2659 : 
; 2660 :     if (nch <= 0)

  00012	45 85 e4	 test	 r12d, r12d
  00015	7f 19		 jg	 SHORT $LN25@validate_a@7

; 2661 :         /* raise the right error from having an invalid number of children */
; 2662 :         return validate_numnodes(tree, nch + 1, "arglist");

  00017	41 8d 54 24 01	 lea	 edx, DWORD PTR [r12+1]
  0001c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07OPJCDGGN@arglist?$AA@

; 2729 : }

  00023	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00027	41 5c		 pop	 r12
  00029	5e		 pop	 rsi
  0002a	5b		 pop	 rbx
  0002b	e9 00 00 00 00	 jmp	 validate_numnodes
$LN25@validate_a@7:
  00030	4c 89 6c 24 50	 mov	 QWORD PTR [rsp+80], r13

; 2663 : 
; 2664 :     if (nch > 1) {

  00035	41 bd 4b 01 00
	00		 mov	 r13d, 331		; 0000014bH
  0003b	41 83 fc 01	 cmp	 r12d, 1
  0003f	7e 34		 jle	 SHORT $LN41@validate_a@7

; 2665 :         for (i=0; i<nch; i++) {

  00041	33 d2		 xor	 edx, edx
  00043	45 85 e4	 test	 r12d, r12d
  00046	7e 2d		 jle	 SHORT $LN41@validate_a@7
  00048	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0004c	45 8d 4d 02	 lea	 r9d, QWORD PTR [r13+2]
$LL23@validate_a@7:

; 2666 :             if (TYPE(CHILD(tree, i)) == argument) {

  00050	66 44 39 29	 cmp	 WORD PTR [rcx], r13w
  00054	75 11		 jne	 SHORT $LN22@validate_a@7

; 2667 :                 node *ch = CHILD(tree, i);
; 2668 :                 if (NCH(ch) == 2 && TYPE(CHILD(ch, 1)) == comp_for) {

  00056	83 79 18 02	 cmp	 DWORD PTR [rcx+24], 2
  0005a	75 0b		 jne	 SHORT $LN22@validate_a@7
  0005c	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00060	66 44 39 48 28	 cmp	 WORD PTR [rax+40], r9w
  00065	74 69		 je	 SHORT $LN36@validate_a@7
$LN22@validate_a@7:

; 2665 :         for (i=0; i<nch; i++) {

  00067	48 ff c2	 inc	 rdx
  0006a	ff c3		 inc	 ebx
  0006c	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00070	49 3b d4	 cmp	 rdx, r12
  00073	7c db		 jl	 SHORT $LL23@validate_a@7
$LN41@validate_a@7:
  00075	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  0007a	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi

; 2671 :                 }
; 2672 :             }
; 2673 :         }
; 2674 :     }
; 2675 : 
; 2676 :     while (ok && nch-i >= 2) {

  0007f	41 8b fc	 mov	 edi, r12d
  00082	2b fb		 sub	 edi, ebx
$LL18@validate_a@7:
  00084	83 ff 02	 cmp	 edi, 2
  00087	7c 68		 jl	 SHORT $LN17@validate_a@7

; 2677 :         /* skip leading (argument ',') */
; 2678 :         ok = (validate_argument(CHILD(tree, i))
; 2679 :               && validate_comma(CHILD(tree, i+1)));

  00089	48 63 c3	 movsxd	 rax, ebx
  0008c	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00090	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00094	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00098	e8 00 00 00 00	 call	 validate_argument
  0009d	85 c0		 test	 eax, eax
  0009f	74 4b		 je	 SHORT $LN28@validate_a@7
  000a1	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  000a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  000ab	48 63 c8	 movsxd	 rcx, eax
  000ae	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  000b2	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  000b6	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  000ba	ba 0c 00 00 00	 mov	 edx, 12
  000bf	e8 00 00 00 00	 call	 validate_terminal
  000c4	85 c0		 test	 eax, eax
  000c6	74 24		 je	 SHORT $LN28@validate_a@7

; 2680 :         if (ok)
; 2681 :             i += 2;

  000c8	83 c3 02	 add	 ebx, 2
  000cb	83 ef 02	 sub	 edi, 2

; 2682 :         else

  000ce	eb b4		 jmp	 SHORT $LL18@validate_a@7
$LN36@validate_a@7:

; 2669 :                     err_string("need '(', ')' for generator expression");

  000d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@EKFJPBFO@need?5?8?$CI?8?0?5?8?$CJ?8?5for?5generator?5expr@
  000d7	e8 00 00 00 00	 call	 err_string
  000dc	4c 8b 6c 24 50	 mov	 r13, QWORD PTR [rsp+80]

; 2670 :                     return 0;

  000e1	33 c0		 xor	 eax, eax

; 2729 : }

  000e3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e7	41 5c		 pop	 r12
  000e9	5e		 pop	 rsi
  000ea	5b		 pop	 rbx
  000eb	c3		 ret	 0
$LN28@validate_a@7:

; 2683 :             PyErr_Clear();

  000ec	e8 00 00 00 00	 call	 PyErr_Clear
$LN17@validate_a@7:

; 2684 :     }
; 2685 :     ok = 1;
; 2686 :     if (nch-i > 0) {

  000f1	41 8b ec	 mov	 ebp, r12d
  000f4	bf 01 00 00 00	 mov	 edi, 1
  000f9	2b eb		 sub	 ebp, ebx
  000fb	85 ed		 test	 ebp, ebp
  000fd	0f 8e 6c 01 00
	00		 jle	 $LN1@validate_a@7

; 2687 :         /*
; 2688 :          * argument | '*' test [',' '**' test] | '**' test
; 2689 :          */
; 2690 :         int sym = TYPE(CHILD(tree, i));

  00103	48 63 c3	 movsxd	 rax, ebx
  00106	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0010a	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0010e	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00112	0f bf 01	 movsx	 eax, WORD PTR [rcx]

; 2691 : 
; 2692 :         if (sym == argument) {

  00115	41 3b c5	 cmp	 eax, r13d
  00118	75 27		 jne	 SHORT $LN13@validate_a@7

; 2693 :             ok = validate_argument(CHILD(tree, i));

  0011a	e8 00 00 00 00	 call	 validate_argument
  0011f	8b f8		 mov	 edi, eax

; 2694 :             if (ok && i+1 != nch) {

  00121	85 c0		 test	 eax, eax
  00123	0f 84 46 01 00
	00		 je	 $LN1@validate_a@7
  00129	8d 4b 01	 lea	 ecx, DWORD PTR [rbx+1]
  0012c	41 3b cc	 cmp	 ecx, r12d
  0012f	0f 84 3a 01 00
	00		 je	 $LN1@validate_a@7

; 2695 :                 err_string("illegal arglist specification"
; 2696 :                            " (extra stuff on end)");

  00135	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DD@OJLOMKNJ@illegal?5arglist?5specification?5?$CIe@

; 2697 :                 ok = 0;
; 2698 :             }

  0013c	e9 27 01 00 00	 jmp	 $LN43@validate_a@7
$LN13@validate_a@7:

; 2699 :         }
; 2700 :         else if (sym == STAR) {

  00141	83 f8 10	 cmp	 eax, 16
  00144	0f 85 d5 00 00
	00		 jne	 $LN10@validate_a@7

; 2701 :             ok = validate_star(CHILD(tree, i));

  0014a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01NBENCBCI@?$CK?$AA@
  00151	8b d0		 mov	 edx, eax
  00153	e8 00 00 00 00	 call	 validate_terminal

; 2702 :             if (ok && (nch-i == 2))

  00158	85 c0		 test	 eax, eax
  0015a	0f 84 b6 00 00
	00		 je	 $LN7@validate_a@7
  00160	83 fd 02	 cmp	 ebp, 2
  00163	75 1e		 jne	 SHORT $LN9@validate_a@7

; 2703 :                 ok = validate_test(CHILD(tree, i+1));

  00165	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  00168	48 63 c8	 movsxd	 rcx, eax
  0016b	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0016f	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00173	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00177	e8 00 00 00 00	 call	 validate_test
  0017c	8b f8		 mov	 edi, eax
  0017e	e9 ec 00 00 00	 jmp	 $LN1@validate_a@7
$LN9@validate_a@7:

; 2704 :             else if (ok && (nch-i == 5))

  00183	83 fd 05	 cmp	 ebp, 5
  00186	0f 85 8a 00 00
	00		 jne	 $LN7@validate_a@7

; 2705 :                 ok = (validate_test(CHILD(tree, i+1))
; 2706 :                       && validate_comma(CHILD(tree, i+2))
; 2707 :                       && validate_doublestar(CHILD(tree, i+3))
; 2708 :                       && validate_test(CHILD(tree, i+4)));

  0018c	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  0018f	48 63 c8	 movsxd	 rcx, eax
  00192	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00196	4c 8d 0c 89	 lea	 r9, QWORD PTR [rcx+rcx*4]
  0019a	4a 8d 0c c8	 lea	 rcx, QWORD PTR [rax+r9*8]
  0019e	e8 00 00 00 00	 call	 validate_test
  001a3	85 c0		 test	 eax, eax
  001a5	0f 84 c2 00 00
	00		 je	 $LN30@validate_a@7
  001ab	8d 43 02	 lea	 eax, DWORD PTR [rbx+2]
  001ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  001b5	8d 55 07	 lea	 edx, QWORD PTR [rbp+7]
  001b8	48 63 c8	 movsxd	 rcx, eax
  001bb	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  001bf	4c 8d 0c 89	 lea	 r9, QWORD PTR [rcx+rcx*4]
  001c3	4a 8d 0c c8	 lea	 rcx, QWORD PTR [rax+r9*8]
  001c7	e8 00 00 00 00	 call	 validate_terminal
  001cc	85 c0		 test	 eax, eax
  001ce	0f 84 99 00 00
	00		 je	 $LN30@validate_a@7
  001d4	8d 43 03	 lea	 eax, DWORD PTR [rbx+3]
  001d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02FKAPCJPD@?$CK?$CK?$AA@
  001de	48 63 c8	 movsxd	 rcx, eax
  001e1	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  001e5	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  001e9	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  001ed	8d 55 1e	 lea	 edx, QWORD PTR [rbp+30]
  001f0	e8 00 00 00 00	 call	 validate_terminal
  001f5	85 c0		 test	 eax, eax
  001f7	74 74		 je	 SHORT $LN30@validate_a@7
  001f9	8d 43 04	 lea	 eax, DWORD PTR [rbx+4]
  001fc	48 63 c8	 movsxd	 rcx, eax
  001ff	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00203	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00207	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  0020b	e8 00 00 00 00	 call	 validate_test
  00210	85 c0		 test	 eax, eax
  00212	75 5b		 jne	 SHORT $LN1@validate_a@7

; 2709 :             else {

  00214	eb 57		 jmp	 SHORT $LN30@validate_a@7
$LN7@validate_a@7:

; 2710 :                 err_string("illegal use of '*' in arglist");

  00216	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@IMAGFJEN@illegal?5use?5of?5?8?$CK?8?5in?5arglist?$AA@

; 2711 :                 ok = 0;
; 2712 :             }

  0021d	eb 49		 jmp	 SHORT $LN43@validate_a@7
$LN10@validate_a@7:

; 2713 :         }
; 2714 :         else if (sym == DOUBLESTAR) {

  0021f	83 f8 23	 cmp	 eax, 35			; 00000023H
  00222	75 3d		 jne	 SHORT $LN4@validate_a@7

; 2715 :             if (nch-i == 2)

  00224	83 fd 02	 cmp	 ebp, 2
  00227	75 2f		 jne	 SHORT $LN3@validate_a@7

; 2716 :                 ok = (validate_doublestar(CHILD(tree, i))
; 2717 :                       && validate_test(CHILD(tree, i+1)));

  00229	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02FKAPCJPD@?$CK?$CK?$AA@
  00230	8b d0		 mov	 edx, eax
  00232	e8 00 00 00 00	 call	 validate_terminal
  00237	85 c0		 test	 eax, eax
  00239	74 32		 je	 SHORT $LN30@validate_a@7
  0023b	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  0023e	48 63 c8	 movsxd	 rcx, eax
  00241	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00245	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00249	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  0024d	e8 00 00 00 00	 call	 validate_test
  00252	85 c0		 test	 eax, eax
  00254	75 19		 jne	 SHORT $LN1@validate_a@7

; 2718 :             else {

  00256	eb 15		 jmp	 SHORT $LN30@validate_a@7
$LN3@validate_a@7:

; 2719 :                 err_string("illegal use of '**' in arglist");

  00258	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@BLEOBCFM@illegal?5use?5of?5?8?$CK?$CK?8?5in?5arglist?$AA@

; 2720 :                 ok = 0;
; 2721 :             }
; 2722 :         }
; 2723 :         else {

  0025f	eb 07		 jmp	 SHORT $LN43@validate_a@7
$LN4@validate_a@7:

; 2724 :             err_string("illegal arglist specification");

  00261	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@CCGECEOG@illegal?5arglist?5specification?$AA@
$LN43@validate_a@7:
  00268	e8 00 00 00 00	 call	 err_string
$LN30@validate_a@7:

; 2725 :             ok = 0;

  0026d	33 ff		 xor	 edi, edi
$LN1@validate_a@7:
  0026f	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00274	4c 8b 6c 24 50	 mov	 r13, QWORD PTR [rsp+80]

; 2726 :         }
; 2727 :     }
; 2728 :     return (ok);

  00279	8b c7		 mov	 eax, edi
  0027b	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 2729 : }

  00280	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00284	41 5c		 pop	 r12
  00286	5e		 pop	 rsi
  00287	5b		 pop	 rbx
  00288	c3		 ret	 0
validate_arglist ENDP
_TEXT	ENDS
PUBLIC	??_C@_05ENKANFLO@class?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_class DD imagerel validate_class
	DD	imagerel validate_class+353
	DD	imagerel $unwind$validate_class
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_class DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_05ENKANFLO@class?$AA@
CONST	SEGMENT
??_C@_05ENKANFLO@class?$AA@ DB 'class', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_class
_TEXT	SEGMENT
tree$ = 48
validate_class PROC					; COMDAT

; 1076 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1077 :     int nch = NCH(tree);

  0000a	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]

; 1078 :     int res = (validate_ntype(tree, classdef) &&
; 1079 :                 ((nch == 4) || (nch == 6) || (nch == 7)));

  0000d	ba 49 01 00 00	 mov	 edx, 329		; 00000149H
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 1e 01 00
	00		 je	 $LN10@validate_c@8
  00022	83 fb 04	 cmp	 ebx, 4
  00025	74 0e		 je	 SHORT $LN18@validate_c@8
  00027	83 fb 06	 cmp	 ebx, 6
  0002a	74 09		 je	 SHORT $LN18@validate_c@8
  0002c	83 fb 07	 cmp	 ebx, 7
  0002f	0f 85 0b 01 00
	00		 jne	 $LN10@validate_c@8
$LN18@validate_c@8:

; 1080 : 
; 1081 :     if (res) {
; 1082 :         res = (validate_name(CHILD(tree, 0), "class")
; 1083 :                && validate_ntype(CHILD(tree, 1), NAME)
; 1084 :                && validate_colon(CHILD(tree, nch - 2))
; 1085 :                && validate_suite(CHILD(tree, nch - 1)));

  00035	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00039	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05ENKANFLO@class?$AA@
  00040	ba 01 00 00 00	 mov	 edx, 1
  00045	e8 00 00 00 00	 call	 validate_terminal
  0004a	85 c0		 test	 eax, eax
  0004c	0f 84 02 01 00
	00		 je	 $LN14@validate_c@8
  00052	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00056	ba 01 00 00 00	 mov	 edx, 1
  0005b	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0005f	e8 00 00 00 00	 call	 validate_ntype
  00064	85 c0		 test	 eax, eax
  00066	0f 84 e8 00 00
	00		 je	 $LN14@validate_c@8
  0006c	8d 43 fe	 lea	 eax, DWORD PTR [rbx-2]
  0006f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00076	48 63 c8	 movsxd	 rcx, eax
  00079	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0007d	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00081	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00085	ba 0b 00 00 00	 mov	 edx, 11
  0008a	e8 00 00 00 00	 call	 validate_terminal
  0008f	85 c0		 test	 eax, eax
  00091	0f 84 bd 00 00
	00		 je	 $LN14@validate_c@8
  00097	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
  0009a	48 63 c8	 movsxd	 rcx, eax
  0009d	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000a1	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  000a5	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  000a9	e8 00 00 00 00	 call	 validate_suite
  000ae	85 c0		 test	 eax, eax
  000b0	0f 84 9e 00 00
	00		 je	 $LN14@validate_c@8

; 1089 :     }
; 1090 : 
; 1091 :     if (res) {
; 1092 :         if (nch == 7) {

  000b6	83 fb 07	 cmp	 ebx, 7
  000b9	75 38		 jne	 SHORT $LN3@validate_c@8

; 1093 :                 res = ((validate_lparen(CHILD(tree, 2)) &&
; 1094 :                         validate_arglist(CHILD(tree, 3)) &&
; 1095 :                         validate_rparen(CHILD(tree, 4))));

  000bb	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  000bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI?$AA@
  000c6	8b d3		 mov	 edx, ebx
  000c8	48 83 c1 50	 add	 rcx, 80			; 00000050H
  000cc	e8 00 00 00 00	 call	 validate_terminal
  000d1	85 c0		 test	 eax, eax
  000d3	74 7f		 je	 SHORT $LN14@validate_c@8
  000d5	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  000d9	48 83 c1 78	 add	 rcx, 120		; 00000078H
  000dd	e8 00 00 00 00	 call	 validate_arglist
  000e2	85 c0		 test	 eax, eax
  000e4	74 6e		 je	 SHORT $LN14@validate_c@8
  000e6	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  000ea	48 81 c1 a0 00
	00 00		 add	 rcx, 160		; 000000a0H
  000f1	eb 28		 jmp	 SHORT $LN21@validate_c@8
$LN3@validate_c@8:

; 1096 :         }
; 1097 :         else if (nch == 6) {

  000f3	83 fb 06	 cmp	 ebx, 6
  000f6	75 38		 jne	 SHORT $LN20@validate_c@8

; 1098 :                 res = (validate_lparen(CHILD(tree,2)) &&
; 1099 :                         validate_rparen(CHILD(tree,3)));

  000f8	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  000fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI?$AA@
  00103	8d 53 01	 lea	 edx, QWORD PTR [rbx+1]
  00106	48 83 c1 50	 add	 rcx, 80			; 00000050H
  0010a	e8 00 00 00 00	 call	 validate_terminal
  0010f	85 c0		 test	 eax, eax
  00111	74 41		 je	 SHORT $LN14@validate_c@8
  00113	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00117	48 83 c1 78	 add	 rcx, 120		; 00000078H
$LN21@validate_c@8:
  0011b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
  00122	ba 08 00 00 00	 mov	 edx, 8
  00127	e8 00 00 00 00	 call	 validate_terminal
  0012c	85 c0		 test	 eax, eax
  0012e	74 24		 je	 SHORT $LN14@validate_c@8
$LN20@validate_c@8:

; 1100 :         }
; 1101 :     }
; 1102 :     return (res);

  00130	b8 01 00 00 00	 mov	 eax, 1

; 1103 : }

  00135	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0013a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0013e	5f		 pop	 rdi
  0013f	c3		 ret	 0
$LN10@validate_c@8:

; 1086 :     }
; 1087 :     else {
; 1088 :         (void) validate_numnodes(tree, 4, "class");

  00140	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05ENKANFLO@class?$AA@
  00147	ba 04 00 00 00	 mov	 edx, 4
  0014c	48 8b cf	 mov	 rcx, rdi
  0014f	e8 00 00 00 00	 call	 validate_numnodes
$LN14@validate_c@8:

; 1100 :         }
; 1101 :     }
; 1102 :     return (res);

  00154	33 c0		 xor	 eax, eax

; 1103 : }

  00156	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0015b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0015f	5f		 pop	 rdi
  00160	c3		 ret	 0
validate_class ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@EDHDNKAL@try?1except?1finally?$AA@	; `string'
PUBLIC	??_C@_0CM@OPOINJOA@Illegal?5number?5of?5children?5for?5t@ ; `string'
PUBLIC	??_C@_0M@CPKKDJE@try?1finally?$AA@		; `string'
PUBLIC	??_C@_07MKBLAIAL@finally?$AA@			; `string'
PUBLIC	??_C@_03JDGOGJKJ@try?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_try DD imagerel validate_try
	DD	imagerel validate_try+469
	DD	imagerel $unwind$validate_try
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$validate_try DD imagerel validate_try+469
	DD	imagerel validate_try+913
	DD	imagerel $chain$0$validate_try
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$validate_try DD imagerel validate_try+913
	DD	imagerel validate_try+938
	DD	imagerel $chain$1$validate_try
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$validate_try DD 021H
	DD	imagerel validate_try
	DD	imagerel validate_try+469
	DD	imagerel $unwind$validate_try
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$validate_try DD 020521H
	DD	0ad405H
	DD	imagerel validate_try
	DD	imagerel validate_try+469
	DD	imagerel $unwind$validate_try
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_try DD 0a1601H
	DD	0c5416H
	DD	0b3416H
	DD	0f0123216H
	DD	0c00ee010H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_0BD@EDHDNKAL@try?1except?1finally?$AA@
CONST	SEGMENT
??_C@_0BD@EDHDNKAL@try?1except?1finally?$AA@ DB 'try/except/finally', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OPOINJOA@Illegal?5number?5of?5children?5for?5t@
CONST	SEGMENT
??_C@_0CM@OPOINJOA@Illegal?5number?5of?5children?5for?5t@ DB 'Illegal num'
	DB	'ber of children for try/%s node.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CPKKDJE@try?1finally?$AA@
CONST	SEGMENT
??_C@_0M@CPKKDJE@try?1finally?$AA@ DB 'try/finally', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MKBLAIAL@finally?$AA@
CONST	SEGMENT
??_C@_07MKBLAIAL@finally?$AA@ DB 'finally', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JDGOGJKJ@try?$AA@
CONST	SEGMENT
??_C@_03JDGOGJKJ@try?$AA@ DB 'try', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_try
_TEXT	SEGMENT
tree$ = 80
validate_try PROC					; COMDAT

; 2000 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	41 56		 push	 r14
  00010	41 57		 push	 r15
  00012	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2001 :     int nch = NCH(tree);

  00016	4c 63 79 18	 movsxd	 r15, DWORD PTR [rcx+24]

; 2003 :     int res = (validate_ntype(tree, try_stmt)
; 2004 :                && (nch >= 6) && ((nch % 3) == 0));

  0001a	ba 29 01 00 00	 mov	 edx, 297		; 00000129H
  0001f	48 8b e9	 mov	 rbp, rcx
  00022	41 bc 03 00 00
	00		 mov	 r12d, 3
  00028	e8 00 00 00 00	 call	 validate_ntype
  0002d	bf 2c 01 00 00	 mov	 edi, 300		; 0000012cH
  00032	45 8d 74 24 fe	 lea	 r14d, QWORD PTR [r12-2]
  00037	85 c0		 test	 eax, eax
  00039	0f 84 49 01 00
	00		 je	 $LN12@validate_t@8
  0003f	41 83 ff 06	 cmp	 r15d, 6
  00043	0f 8c 3f 01 00
	00		 jl	 $LN12@validate_t@8
  00049	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  0004e	41 f7 ef	 imul	 r15d
  00051	8b c2		 mov	 eax, edx
  00053	c1 e8 1f	 shr	 eax, 31
  00056	03 d0		 add	 edx, eax
  00058	8d 0c 52	 lea	 ecx, DWORD PTR [rdx+rdx*2]
  0005b	44 3b f9	 cmp	 r15d, ecx
  0005e	0f 85 24 01 00
	00		 jne	 $LN12@validate_t@8

; 2005 : 
; 2006 :     if (res)
; 2007 :         res = (validate_name(CHILD(tree, 0), "try")
; 2008 :                && validate_colon(CHILD(tree, 1))
; 2009 :                && validate_suite(CHILD(tree, 2))
; 2010 :                && validate_colon(CHILD(tree, nch - 2))
; 2011 :                && validate_suite(CHILD(tree, nch - 1)));

  00064	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  00068	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03JDGOGJKJ@try?$AA@
  0006f	41 8b d6	 mov	 edx, r14d
  00072	e8 00 00 00 00	 call	 validate_terminal
  00077	85 c0		 test	 eax, eax
  00079	0f 84 05 01 00
	00		 je	 $LN14@validate_t@8
  0007f	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  00083	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  0008a	41 8d 54 24 08	 lea	 edx, QWORD PTR [r12+8]
  0008f	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00093	e8 00 00 00 00	 call	 validate_terminal
  00098	85 c0		 test	 eax, eax
  0009a	0f 84 e4 00 00
	00		 je	 $LN14@validate_t@8
  000a0	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  000a4	48 83 c1 50	 add	 rcx, 80			; 00000050H
  000a8	e8 00 00 00 00	 call	 validate_suite
  000ad	85 c0		 test	 eax, eax
  000af	0f 84 cf 00 00
	00		 je	 $LN14@validate_t@8
  000b5	41 8d 47 fe	 lea	 eax, DWORD PTR [r15-2]
  000b9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  000c0	48 63 c8	 movsxd	 rcx, eax
  000c3	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  000c7	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  000cb	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  000cf	41 8d 54 24 08	 lea	 edx, QWORD PTR [r12+8]
  000d4	e8 00 00 00 00	 call	 validate_terminal
  000d9	85 c0		 test	 eax, eax
  000db	0f 84 a3 00 00
	00		 je	 $LN14@validate_t@8
  000e1	41 8d 47 ff	 lea	 eax, DWORD PTR [r15-1]
  000e5	48 63 c8	 movsxd	 rcx, eax
  000e8	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  000ec	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  000f0	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  000f4	e8 00 00 00 00	 call	 validate_suite
  000f9	85 c0		 test	 eax, eax
  000fb	0f 84 83 00 00
	00		 je	 $LN14@validate_t@8

; 2019 :     }
; 2020 :     /* Handle try/finally statement */
; 2021 :     if (res && (TYPE(CHILD(tree, pos)) == NAME) &&
; 2022 :         (strcmp(STR(CHILD(tree, pos)), "finally") == 0)) {

  00101	48 8b 75 20	 mov	 rsi, QWORD PTR [rbp+32]
  00105	41 8b de	 mov	 ebx, r14d
  00108	66 39 5e 78	 cmp	 WORD PTR [rsi+120], bx
  0010c	0f 85 b0 00 00
	00		 jne	 $LN24@validate_t@8
  00112	48 8b b6 80 00
	00 00		 mov	 rsi, QWORD PTR [rsi+128]
  00119	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_07MKBLAIAL@finally?$AA@
  00120	b9 08 00 00 00	 mov	 ecx, 8
  00125	f3 a6		 repe cmpsb
  00127	0f 85 95 00 00
	00		 jne	 $LN24@validate_t@8

; 2023 :         res = (validate_numnodes(tree, 6, "try/finally")
; 2024 :                && validate_colon(CHILD(tree, 4))
; 2025 :                && validate_suite(CHILD(tree, 5)));

  0012d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@CPKKDJE@try?1finally?$AA@
  00134	41 8d 54 24 03	 lea	 edx, QWORD PTR [r12+3]
  00139	48 8b cd	 mov	 rcx, rbp
  0013c	e8 00 00 00 00	 call	 validate_numnodes
  00141	85 c0		 test	 eax, eax
  00143	74 34		 je	 SHORT $LN16@validate_t@8
  00145	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  00149	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00150	41 8d 54 24 08	 lea	 edx, QWORD PTR [r12+8]
  00155	48 81 c1 a0 00
	00 00		 add	 rcx, 160		; 000000a0H
  0015c	e8 00 00 00 00	 call	 validate_terminal
  00161	85 c0		 test	 eax, eax
  00163	74 14		 je	 SHORT $LN16@validate_t@8
  00165	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  00169	48 81 c1 c8 00
	00 00		 add	 rcx, 200		; 000000c8H
  00170	e8 00 00 00 00	 call	 validate_suite
  00175	85 c0		 test	 eax, eax
  00177	75 03		 jne	 SHORT $LN17@validate_t@8
$LN16@validate_t@8:
  00179	45 33 f6	 xor	 r14d, r14d
$LN17@validate_t@8:

; 2026 :         return (res);

  0017c	41 8b c6	 mov	 eax, r14d
  0017f	e9 0f 02 00 00	 jmp	 $LN10@validate_t@8
$LN14@validate_t@8:

; 2005 : 
; 2006 :     if (res)
; 2007 :         res = (validate_name(CHILD(tree, 0), "try")
; 2008 :                && validate_colon(CHILD(tree, 1))
; 2009 :                && validate_suite(CHILD(tree, 2))
; 2010 :                && validate_colon(CHILD(tree, nch - 2))
; 2011 :                && validate_suite(CHILD(tree, nch - 1)));

  00184	33 db		 xor	 ebx, ebx
  00186	eb 3a		 jmp	 SHORT $LN24@validate_t@8
$LN12@validate_t@8:

; 2003 :     int res = (validate_ntype(tree, try_stmt)
; 2004 :                && (nch >= 6) && ((nch % 3) == 0));

  00188	33 db		 xor	 ebx, ebx

; 2012 :     else if (!PyErr_Occurred()) {

  0018a	e8 00 00 00 00	 call	 PyErr_Occurred
  0018f	48 85 c0	 test	 rax, rax
  00192	75 2e		 jne	 SHORT $LN24@validate_t@8

; 2013 :         const char* name = "except";
; 2014 :         if (TYPE(CHILD(tree, nch - 3)) != except_clause)

  00194	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  00198	4b 8d 4c bf f1	 lea	 rcx, QWORD PTR [r15+r15*4-15]
  0019d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06JBKEBCGB@except?$AA@
  001a4	66 39 3c c8	 cmp	 WORD PTR [rax+rcx*8], di
  001a8	74 05		 je	 SHORT $LN6@validate_t@8

; 2015 :             name = STR(CHILD(tree, nch - 3));

  001aa	4c 8b 44 c8 08	 mov	 r8, QWORD PTR [rax+rcx*8+8]
$LN6@validate_t@8:

; 2016 : 
; 2017 :         PyErr_Format(parser_error,
; 2018 :                      "Illegal number of children for try/%s node.", name);

  001af	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  001b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@OPOINJOA@Illegal?5number?5of?5children?5for?5t@
  001bd	e8 00 00 00 00	 call	 PyErr_Format
$LN24@validate_t@8:

; 2027 :     }
; 2028 :     /* try/except statement: skip past except_clause sections */
; 2029 :     while (res && pos < nch && (TYPE(CHILD(tree, pos)) == except_clause)) {

  001c2	49 8b fc	 mov	 rdi, r12
  001c5	49 8b c7	 mov	 rax, r15
  001c8	85 db		 test	 ebx, ebx
  001ca	0f 84 c1 01 00
	00		 je	 $LN23@validate_t@8

; 2002 :     int pos = 3;

  001d0	be 05 00 00 00	 mov	 esi, 5
  001d5	4c 89 6c 24 50	 mov	 QWORD PTR [rsp+80], r13
  001da	44 8d 6e 73	 lea	 r13d, QWORD PTR [rsi+115]
  001de	66 90		 npad	 2
$LL4@validate_t@8:

; 2027 :     }
; 2028 :     /* try/except statement: skip past except_clause sections */
; 2029 :     while (res && pos < nch && (TYPE(CHILD(tree, pos)) == except_clause)) {

  001e0	48 3b f8	 cmp	 rdi, rax
  001e3	0f 8d 8a 00 00
	00		 jge	 $LN3@validate_t@8
  001e9	48 8b 55 20	 mov	 rdx, QWORD PTR [rbp+32]
  001ed	b8 2c 01 00 00	 mov	 eax, 300		; 0000012cH
  001f2	66 41 39 44 15
	00		 cmp	 WORD PTR [r13+rdx], ax
  001f8	75 79		 jne	 SHORT $LN3@validate_t@8

; 2030 :         res = (validate_except_clause(CHILD(tree, pos))
; 2031 :                && validate_colon(CHILD(tree, pos + 1))
; 2032 :                && validate_suite(CHILD(tree, pos + 2)));

  001fa	49 63 c4	 movsxd	 rax, r12d
  001fd	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00201	48 8d 0c ca	 lea	 rcx, QWORD PTR [rdx+rcx*8]
  00205	e8 00 00 00 00	 call	 validate_except_clause
  0020a	85 c0		 test	 eax, eax
  0020c	74 44		 je	 SHORT $LN18@validate_t@8
  0020e	8d 46 ff	 lea	 eax, DWORD PTR [rsi-1]
  00211	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00218	48 63 c8	 movsxd	 rcx, eax
  0021b	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  0021f	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00223	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00227	ba 0b 00 00 00	 mov	 edx, 11
  0022c	e8 00 00 00 00	 call	 validate_terminal
  00231	85 c0		 test	 eax, eax
  00233	74 1d		 je	 SHORT $LN18@validate_t@8
  00235	48 63 c6	 movsxd	 rax, esi
  00238	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0023c	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  00240	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00244	e8 00 00 00 00	 call	 validate_suite
  00249	85 c0		 test	 eax, eax
  0024b	74 05		 je	 SHORT $LN18@validate_t@8
  0024d	41 8b de	 mov	 ebx, r14d
  00250	eb 02		 jmp	 SHORT $LN19@validate_t@8
$LN18@validate_t@8:
  00252	33 db		 xor	 ebx, ebx
$LN19@validate_t@8:

; 2033 :         pos += 3;

  00254	41 83 c4 03	 add	 r12d, 3
  00258	83 c6 03	 add	 esi, 3
  0025b	48 83 c7 03	 add	 rdi, 3
  0025f	49 83 c5 78	 add	 r13, 120		; 00000078H
  00263	49 8b c7	 mov	 rax, r15
  00266	85 db		 test	 ebx, ebx
  00268	0f 85 72 ff ff
	ff		 jne	 $LL4@validate_t@8

; 2034 :     }
; 2035 :     /* skip else clause */
; 2036 :     if (res && pos < nch && (TYPE(CHILD(tree, pos)) == NAME) &&
; 2037 :         (strcmp(STR(CHILD(tree, pos)), "else") == 0)) {

  0026e	e9 19 01 00 00	 jmp	 $LN28@validate_t@8
$LN3@validate_t@8:
  00273	85 db		 test	 ebx, ebx
  00275	0f 84 11 01 00
	00		 je	 $LN28@validate_t@8
  0027b	45 3b e7	 cmp	 r12d, r15d
  0027e	7d 74		 jge	 SHORT $LN2@validate_t@8
  00280	48 8b 55 20	 mov	 rdx, QWORD PTR [rbp+32]
  00284	49 63 c4	 movsxd	 rax, r12d
  00287	48 8d 34 80	 lea	 rsi, QWORD PTR [rax+rax*4]
  0028b	66 44 39 34 f2	 cmp	 WORD PTR [rdx+rsi*8], r14w
  00290	75 62		 jne	 SHORT $LN2@validate_t@8
  00292	48 8b 74 f2 08	 mov	 rsi, QWORD PTR [rdx+rsi*8+8]
  00297	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_04FHMCPBIP@else?$AA@
  0029e	b9 05 00 00 00	 mov	 ecx, 5
  002a3	f3 a6		 repe cmpsb
  002a5	75 4d		 jne	 SHORT $LN2@validate_t@8

; 2038 :         res = (validate_colon(CHILD(tree, pos + 1))
; 2039 :                && validate_suite(CHILD(tree, pos + 2)));

  002a7	41 8d 44 24 01	 lea	 eax, DWORD PTR [r12+1]
  002ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  002b3	48 63 c8	 movsxd	 rcx, eax
  002b6	48 8d 04 89	 lea	 rax, QWORD PTR [rcx+rcx*4]
  002ba	48 8d 0c c2	 lea	 rcx, QWORD PTR [rdx+rax*8]
  002be	ba 0b 00 00 00	 mov	 edx, 11
  002c3	e8 00 00 00 00	 call	 validate_terminal
  002c8	85 c0		 test	 eax, eax
  002ca	74 22		 je	 SHORT $LN20@validate_t@8
  002cc	41 8d 44 24 02	 lea	 eax, DWORD PTR [r12+2]
  002d1	48 63 c8	 movsxd	 rcx, eax
  002d4	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  002d8	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  002dc	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  002e0	e8 00 00 00 00	 call	 validate_suite
  002e5	85 c0		 test	 eax, eax
  002e7	74 05		 je	 SHORT $LN20@validate_t@8
  002e9	41 8b de	 mov	 ebx, r14d
  002ec	eb 02		 jmp	 SHORT $LN21@validate_t@8
$LN20@validate_t@8:
  002ee	33 db		 xor	 ebx, ebx
$LN21@validate_t@8:

; 2040 :         pos += 3;

  002f0	41 83 c4 03	 add	 r12d, 3
$LN2@validate_t@8:

; 2041 :     }
; 2042 :     if (res && pos < nch) {

  002f4	85 db		 test	 ebx, ebx
  002f6	0f 84 90 00 00
	00		 je	 $LN28@validate_t@8
  002fc	45 3b e7	 cmp	 r12d, r15d
  002ff	0f 8d 87 00 00
	00		 jge	 $LN28@validate_t@8

; 2043 :         /* last clause must be a finally */
; 2044 :         res = (validate_name(CHILD(tree, pos), "finally")
; 2045 :                && validate_numnodes(tree, pos + 3, "try/except/finally")
; 2046 :                && validate_colon(CHILD(tree, pos + 1))
; 2047 :                && validate_suite(CHILD(tree, pos + 2)));

  00305	49 63 c4	 movsxd	 rax, r12d
  00308	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07MKBLAIAL@finally?$AA@
  0030f	41 8b d6	 mov	 edx, r14d
  00312	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00316	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  0031a	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  0031e	e8 00 00 00 00	 call	 validate_terminal
  00323	85 c0		 test	 eax, eax
  00325	74 63		 je	 SHORT $LN22@validate_t@8
  00327	41 8d 54 24 03	 lea	 edx, DWORD PTR [r12+3]
  0032c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@EDHDNKAL@try?1except?1finally?$AA@
  00333	48 8b cd	 mov	 rcx, rbp
  00336	e8 00 00 00 00	 call	 validate_numnodes
  0033b	85 c0		 test	 eax, eax
  0033d	74 4b		 je	 SHORT $LN22@validate_t@8
  0033f	41 8d 44 24 01	 lea	 eax, DWORD PTR [r12+1]
  00344	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  0034b	48 63 c8	 movsxd	 rcx, eax
  0034e	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  00352	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00356	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  0035a	ba 0b 00 00 00	 mov	 edx, 11
  0035f	e8 00 00 00 00	 call	 validate_terminal
  00364	85 c0		 test	 eax, eax
  00366	74 22		 je	 SHORT $LN22@validate_t@8
  00368	41 8d 44 24 02	 lea	 eax, DWORD PTR [r12+2]
  0036d	48 63 c8	 movsxd	 rcx, eax
  00370	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  00374	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00378	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  0037c	e8 00 00 00 00	 call	 validate_suite
  00381	85 c0		 test	 eax, eax
  00383	74 05		 je	 SHORT $LN22@validate_t@8
  00385	41 8b de	 mov	 ebx, r14d
  00388	eb 02		 jmp	 SHORT $LN28@validate_t@8
$LN22@validate_t@8:
  0038a	33 db		 xor	 ebx, ebx
$LN28@validate_t@8:
  0038c	4c 8b 6c 24 50	 mov	 r13, QWORD PTR [rsp+80]
$LN23@validate_t@8:

; 2048 :     }
; 2049 :     return (res);

  00391	8b c3		 mov	 eax, ebx
$LN10@validate_t@8:

; 2050 : }

  00393	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00398	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  0039d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  003a1	41 5f		 pop	 r15
  003a3	41 5e		 pop	 r14
  003a5	41 5c		 pop	 r12
  003a7	5f		 pop	 rdi
  003a8	5e		 pop	 rsi
  003a9	c3		 ret	 0
validate_try ENDP
_TEXT	ENDS
PUBLIC	??_C@_01EOFPKCAF@?$EA?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_decorator DD imagerel validate_decorator
	DD	imagerel validate_decorator+270
	DD	imagerel $unwind$validate_decorator
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_decorator DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_01EOFPKCAF@?$EA?$AA@
CONST	SEGMENT
??_C@_01EOFPKCAF@?$EA?$AA@ DB '@', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_decorator
_TEXT	SEGMENT
tree$ = 48
validate_decorator PROC					; COMDAT

; 2490 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2491 :     int ok;
; 2492 :     int nch = NCH(tree);

  0000a	8b 59 18	 mov	 ebx, DWORD PTR [rcx+24]

; 2493 :     ok = (validate_ntype(tree, decorator) &&
; 2494 :           (nch == 3 || nch == 5 || nch == 6) &&
; 2495 :           validate_at(CHILD(tree, 0)) &&
; 2496 :           validate_dotted_name(CHILD(tree, 1)) &&
; 2497 :           validate_newline(RCHILD(tree, -1)));

  0000d	ba 03 01 00 00	 mov	 edx, 259		; 00000103H
  00012	48 8b f9	 mov	 rdi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 df 00 00
	00		 je	 $LN6@validate_d@6
  00022	83 fb 03	 cmp	 ebx, 3
  00025	74 0e		 je	 SHORT $LN5@validate_d@6
  00027	83 fb 05	 cmp	 ebx, 5
  0002a	74 09		 je	 SHORT $LN5@validate_d@6
  0002c	83 fb 06	 cmp	 ebx, 6
  0002f	0f 85 cc 00 00
	00		 jne	 $LN6@validate_d@6
$LN5@validate_d@6:
  00035	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00039	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01EOFPKCAF@?$EA?$AA@
  00040	ba 31 00 00 00	 mov	 edx, 49			; 00000031H
  00045	e8 00 00 00 00	 call	 validate_terminal
  0004a	85 c0		 test	 eax, eax
  0004c	0f 84 af 00 00
	00		 je	 $LN6@validate_d@6
  00052	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00056	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0005a	e8 00 00 00 00	 call	 validate_dotted_name
  0005f	85 c0		 test	 eax, eax
  00061	0f 84 9a 00 00
	00		 je	 $LN6@validate_d@6
  00067	8b 47 18	 mov	 eax, DWORD PTR [rdi+24]
  0006a	45 33 c0	 xor	 r8d, r8d
  0006d	ff c8		 dec	 eax
  0006f	41 8d 50 04	 lea	 edx, QWORD PTR [r8+4]
  00073	48 98		 cdqe
  00075	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00079	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0007d	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00081	e8 00 00 00 00	 call	 validate_terminal
  00086	85 c0		 test	 eax, eax
  00088	74 77		 je	 SHORT $LN6@validate_d@6

; 2498 : 
; 2499 :     if (ok && nch != 3) {

  0008a	83 fb 03	 cmp	 ebx, 3
  0008d	74 62		 je	 SHORT $LN13@validate_d@6

; 2500 :         ok = (validate_lparen(CHILD(tree, 2)) &&
; 2501 :               validate_rparen(RCHILD(tree, -2)));

  0008f	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00093	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI?$AA@
  0009a	ba 07 00 00 00	 mov	 edx, 7
  0009f	48 83 c1 50	 add	 rcx, 80			; 00000050H
  000a3	e8 00 00 00 00	 call	 validate_terminal
  000a8	85 c0		 test	 eax, eax
  000aa	74 55		 je	 SHORT $LN6@validate_d@6
  000ac	8b 47 18	 mov	 eax, DWORD PTR [rdi+24]
  000af	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	83 e8 02	 sub	 eax, 2
  000be	48 98		 cdqe
  000c0	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  000c4	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000c8	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  000cc	e8 00 00 00 00	 call	 validate_terminal
  000d1	85 c0		 test	 eax, eax
  000d3	74 2c		 je	 SHORT $LN6@validate_d@6

; 2502 : 
; 2503 :         if (ok && nch == 6)

  000d5	83 fb 06	 cmp	 ebx, 6
  000d8	75 17		 jne	 SHORT $LN13@validate_d@6

; 2504 :             ok = validate_arglist(CHILD(tree, 3));

  000da	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  000de	48 83 c1 78	 add	 rcx, 120		; 00000078H

; 2508 : }

  000e2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000e7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000eb	5f		 pop	 rdi
  000ec	e9 00 00 00 00	 jmp	 validate_arglist
$LN13@validate_d@6:

; 2505 :     }
; 2506 : 
; 2507 :     return ok;

  000f1	b8 01 00 00 00	 mov	 eax, 1

; 2508 : }

  000f6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000fb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
$LN6@validate_d@6:

; 2505 :     }
; 2506 : 
; 2507 :     return ok;

  00101	33 c0		 xor	 eax, eax

; 2508 : }

  00103	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00108	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0010c	5f		 pop	 rdi
  0010d	c3		 ret	 0
validate_decorator ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_decorators DD imagerel validate_decorators
	DD	imagerel validate_decorators+97
	DD	imagerel $unwind$validate_decorators
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_decorators DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT validate_decorators
_TEXT	SEGMENT
tree$ = 48
validate_decorators PROC				; COMDAT

; 2515 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2516 :     int i, nch, ok;
; 2517 :     nch = NCH(tree);

  0000f	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 2518 :     ok = validate_ntype(tree, decorators) && nch >= 1;

  00012	ba 04 01 00 00	 mov	 edx, 260		; 00000104H
  00017	48 8b f1	 mov	 rsi, rcx
  0001a	e8 00 00 00 00	 call	 validate_ntype
  0001f	33 db		 xor	 ebx, ebx
  00021	85 c0		 test	 eax, eax
  00023	74 08		 je	 SHORT $LN6@validate_d@7
  00025	8d 43 01	 lea	 eax, QWORD PTR [rbx+1]
  00028	83 ff 01	 cmp	 edi, 1
  0002b	7d 02		 jge	 SHORT $LN7@validate_d@7
$LN6@validate_d@7:
  0002d	8b c3		 mov	 eax, ebx
$LN7@validate_d@7:

; 2519 : 
; 2520 :     for (i = 0; ok && i < nch; ++i)

  0002f	85 c0		 test	 eax, eax
  00031	74 1e		 je	 SHORT $LN10@validate_d@7
$LL3@validate_d@7:
  00033	3b df		 cmp	 ebx, edi
  00035	7d 1a		 jge	 SHORT $LN10@validate_d@7

; 2521 :         ok = validate_decorator(CHILD(tree, i));

  00037	48 63 c3	 movsxd	 rax, ebx
  0003a	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0003e	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00042	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00046	e8 00 00 00 00	 call	 validate_decorator
  0004b	ff c3		 inc	 ebx
  0004d	85 c0		 test	 eax, eax
  0004f	75 e2		 jne	 SHORT $LL3@validate_d@7
$LN10@validate_d@7:

; 2522 : 
; 2523 :     return ok;
; 2524 : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
validate_decorators ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_decorated DD imagerel validate_decorated
	DD	imagerel validate_decorated+178
	DD	imagerel $unwind$validate_decorated
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_decorated DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT validate_decorated
_TEXT	SEGMENT
tree$ = 48
validate_decorated PROC					; COMDAT

; 2599 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2600 :     int nch = NCH(tree);

  0000a	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 2601 :     int ok = (validate_ntype(tree, decorated)
; 2602 :               && (nch == 2)
; 2603 :               && validate_decorators(RCHILD(tree, -2)));

  0000d	ba 05 01 00 00	 mov	 edx, 261		; 00000105H
  00012	48 8b d9	 mov	 rbx, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	74 26		 je	 SHORT $LN5@validate_d@8
  0001e	83 ff 02	 cmp	 edi, 2
  00021	75 21		 jne	 SHORT $LN5@validate_d@8
  00023	8b 43 18	 mov	 eax, DWORD PTR [rbx+24]
  00026	2b c7		 sub	 eax, edi
  00028	48 98		 cdqe
  0002a	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  0002e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00032	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  00036	e8 00 00 00 00	 call	 validate_decorators
  0003b	85 c0		 test	 eax, eax
  0003d	74 05		 je	 SHORT $LN5@validate_d@8
  0003f	8d 57 ff	 lea	 edx, QWORD PTR [rdi-1]
  00042	eb 02		 jmp	 SHORT $LN6@validate_d@8
$LN5@validate_d@8:
  00044	33 d2		 xor	 edx, edx
$LN6@validate_d@8:

; 2604 :     if (TYPE(RCHILD(tree, -1)) == funcdef)

  00046	4c 63 43 18	 movsxd	 r8, DWORD PTR [rbx+24]
  0004a	4c 8b 4b 20	 mov	 r9, QWORD PTR [rbx+32]
  0004e	b8 06 01 00 00	 mov	 eax, 262		; 00000106H
  00053	4b 8d 0c 80	 lea	 rcx, QWORD PTR [r8+r8*4]
  00057	66 41 39 44 c9
	d8		 cmp	 WORD PTR [r9+rcx*8-40], ax
  0005d	75 1a		 jne	 SHORT $LN2@validate_d@8

; 2605 :         ok = ok && validate_funcdef(RCHILD(tree, -1));

  0005f	85 d2		 test	 edx, edx
  00061	74 42		 je	 SHORT $LN9@validate_d@8
  00063	41 8d 40 ff	 lea	 eax, DWORD PTR [r8-1]
  00067	48 63 c8	 movsxd	 rcx, eax
  0006a	48 8d 04 89	 lea	 rax, QWORD PTR [rcx+rcx*4]
  0006e	49 8d 0c c1	 lea	 rcx, QWORD PTR [r9+rax*8]
  00072	e8 00 00 00 00	 call	 validate_funcdef

; 2606 :     else

  00077	eb 18		 jmp	 SHORT $LN13@validate_d@8
$LN2@validate_d@8:

; 2607 :         ok = ok && validate_class(RCHILD(tree, -1));

  00079	85 d2		 test	 edx, edx
  0007b	74 28		 je	 SHORT $LN9@validate_d@8
  0007d	41 8d 48 ff	 lea	 ecx, DWORD PTR [r8-1]
  00081	48 63 d1	 movsxd	 rdx, ecx
  00084	48 8d 0c 92	 lea	 rcx, QWORD PTR [rdx+rdx*4]
  00088	49 8d 0c c9	 lea	 rcx, QWORD PTR [r9+rcx*8]
  0008c	e8 00 00 00 00	 call	 validate_class
$LN13@validate_d@8:
  00091	85 c0		 test	 eax, eax
  00093	74 10		 je	 SHORT $LN9@validate_d@8

; 2608 :     return ok;

  00095	b8 01 00 00 00	 mov	 eax, 1

; 2609 : }

  0009a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
$LN9@validate_d@8:

; 2608 :     return ok;

  000a5	33 c0		 xor	 eax, eax

; 2609 : }

  000a7	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ac	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b0	5f		 pop	 rdi
  000b1	c3		 ret	 0
validate_decorated ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@OAHKNDHF@unrecognized?5node?5type?$AA@ ; `string'
PUBLIC	??_C@_08DLICDMBN@continue?$AA@			; `string'
PUBLIC	??_C@_05ELPHFHOI@break?$AA@			; `string'
PUBLIC	??_C@_04BBDAIEHH@pass?$AA@			; `string'
PUBLIC	??_C@_0BH@NIHNHKIN@illegal?5flow_stmt?5type?$AA@ ; `string'
PUBLIC	??_C@_09PGHEDOML@flow_stmt?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_node DD imagerel validate_node
	DD	imagerel validate_node+1272
	DD	imagerel $unwind$validate_node
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_node DD 0c3101H
	DD	0b6431H
	DD	0a541dH
	DD	0c3412H
	DD	0f00e3212H
	DD	0d00ae00cH
	DD	07006c008H
xdata	ENDS
;	COMDAT ??_C@_0BH@OAHKNDHF@unrecognized?5node?5type?$AA@
CONST	SEGMENT
??_C@_0BH@OAHKNDHF@unrecognized?5node?5type?$AA@ DB 'unrecognized node ty'
	DB	'pe', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08DLICDMBN@continue?$AA@
CONST	SEGMENT
??_C@_08DLICDMBN@continue?$AA@ DB 'continue', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05ELPHFHOI@break?$AA@
CONST	SEGMENT
??_C@_05ELPHFHOI@break?$AA@ DB 'break', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BBDAIEHH@pass?$AA@
CONST	SEGMENT
??_C@_04BBDAIEHH@pass?$AA@ DB 'pass', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NIHNHKIN@illegal?5flow_stmt?5type?$AA@
CONST	SEGMENT
??_C@_0BH@NIHNHKIN@illegal?5flow_stmt?5type?$AA@ DB 'illegal flow_stmt ty'
	DB	'pe', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09PGHEDOML@flow_stmt?$AA@
CONST	SEGMENT
??_C@_09PGHEDOML@flow_stmt?$AA@ DB 'flow_stmt', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_node
_TEXT	SEGMENT
tree$ = 80
validate_node PROC					; COMDAT

; 3011 : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	57		 push	 rdi
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	41 56		 push	 r14
  0000c	41 57		 push	 r15
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 3012 :     int   nch  = 0;                     /* num. children on current node  */
; 3013 :     int   res  = 1;                     /* result value                   */

  00012	41 bd 16 01 00
	00		 mov	 r13d, 278		; 00000116H
  00018	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  0001d	48 8b f9	 mov	 rdi, rcx
  00020	bb 01 00 00 00	 mov	 ebx, 1
  00025	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:__ImageBase
  0002c	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00031	45 8d 75 02	 lea	 r14d, QWORD PTR [r13+2]
  00035	45 8d 7d 01	 lea	 r15d, QWORD PTR [r13+1]
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL53@validate_n@5:

; 3014 :     node* next = 0;                     /* node to process after this one */
; 3015 : 
; 3016 :     while (res && (tree != 0)) {

  00040	48 85 ff	 test	 rdi, rdi
  00043	0f 84 8b 03 00
	00		 je	 $LN70@validate_n@5

; 3017 :         nch  = NCH(tree);
; 3018 :         next = 0;
; 3019 :         switch (TYPE(tree)) {

  00049	0f bf 07	 movsx	 eax, WORD PTR [rdi]
  0004c	8b 77 18	 mov	 esi, DWORD PTR [rdi+24]
  0004f	33 ed		 xor	 ebp, ebp
  00051	05 fb fe ff ff	 add	 eax, -261		; fffffffffffffefbH
  00056	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  00059	0f 87 5c 03 00
	00		 ja	 $LN1@validate_n@5
  0005f	48 98		 cdqe
  00061	41 0f b6 84 04
	00 00 00 00	 movzx	 eax, BYTE PTR $LN68@validate_n@5[r12+rax]
  0006a	41 8b 8c 84 00
	00 00 00	 mov	 ecx, DWORD PTR $LN69@validate_n@5[r12+rax*4]
  00072	49 03 cc	 add	 rcx, r12
  00075	ff e1		 jmp	 rcx
$LN49@validate_n@5:

; 3020 :             /*
; 3021 :              *  Definition nodes.
; 3022 :              */
; 3023 :           case funcdef:
; 3024 :             res = validate_funcdef(tree);

  00077	48 8b cf	 mov	 rcx, rdi
  0007a	e8 00 00 00 00	 call	 validate_funcdef
  0007f	8b d8		 mov	 ebx, eax

; 3025 :             break;

  00081	e9 43 03 00 00	 jmp	 $LN50@validate_n@5
$LN48@validate_n@5:

; 3026 :           case with_stmt:
; 3027 :             res = validate_with_stmt(tree);

  00086	48 8b cf	 mov	 rcx, rdi
  00089	e8 00 00 00 00	 call	 validate_with_stmt
  0008e	8b d8		 mov	 ebx, eax

; 3028 :             break;

  00090	e9 34 03 00 00	 jmp	 $LN50@validate_n@5
$LN47@validate_n@5:

; 3029 :           case classdef:
; 3030 :             res = validate_class(tree);

  00095	48 8b cf	 mov	 rcx, rdi
  00098	e8 00 00 00 00	 call	 validate_class
  0009d	8b d8		 mov	 ebx, eax

; 3031 :             break;

  0009f	e9 25 03 00 00	 jmp	 $LN50@validate_n@5
$LN46@validate_n@5:

; 3032 :           case decorated:
; 3033 :             res = validate_decorated(tree);

  000a4	48 8b cf	 mov	 rcx, rdi
  000a7	e8 00 00 00 00	 call	 validate_decorated
  000ac	8b d8		 mov	 ebx, eax

; 3034 :             break;

  000ae	e9 16 03 00 00	 jmp	 $LN50@validate_n@5
$LN45@validate_n@5:

; 3035 :             /*
; 3036 :              *  "Trivial" parse tree nodes.
; 3037 :              *  (Why did I call these trivial?)
; 3038 :              */
; 3039 :           case stmt:
; 3040 :             res = validate_stmt(tree);

  000b3	48 8b cf	 mov	 rcx, rdi
  000b6	e8 00 00 00 00	 call	 validate_stmt
  000bb	8b d8		 mov	 ebx, eax

; 3041 :             break;

  000bd	e9 07 03 00 00	 jmp	 $LN50@validate_n@5
$LN44@validate_n@5:

; 3042 :           case small_stmt:
; 3043 :             /*
; 3044 :              *  expr_stmt | del_stmt | pass_stmt | flow_stmt |
; 3045 :              *  import_stmt | global_stmt | nonlocal_stmt | assert_stmt
; 3046 :              */
; 3047 :             res = validate_small_stmt(tree);

  000c2	48 8b cf	 mov	 rcx, rdi
  000c5	e8 00 00 00 00	 call	 validate_small_stmt
  000ca	8b d8		 mov	 ebx, eax

; 3048 :             break;

  000cc	e9 f8 02 00 00	 jmp	 $LN50@validate_n@5
$LN43@validate_n@5:

; 3049 :           case flow_stmt:
; 3050 :             res  = (validate_numnodes(tree, 1, "flow_stmt")
; 3051 :                     && ((TYPE(CHILD(tree, 0)) == break_stmt)
; 3052 :                         || (TYPE(CHILD(tree, 0)) == continue_stmt)
; 3053 :                         || (TYPE(CHILD(tree, 0)) == yield_stmt)
; 3054 :                         || (TYPE(CHILD(tree, 0)) == return_stmt)
; 3055 :                         || (TYPE(CHILD(tree, 0)) == raise_stmt)));

  000d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09PGHEDOML@flow_stmt?$AA@
  000d8	ba 01 00 00 00	 mov	 edx, 1
  000dd	48 8b cf	 mov	 rcx, rdi
  000e0	e8 00 00 00 00	 call	 validate_numnodes
  000e5	85 c0		 test	 eax, eax
  000e7	74 3a		 je	 SHORT $LN57@validate_n@5
  000e9	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  000ed	ba 15 01 00 00	 mov	 edx, 277		; 00000115H
  000f2	0f b7 01	 movzx	 eax, WORD PTR [rcx]
  000f5	66 3b c2	 cmp	 ax, dx
  000f8	74 1c		 je	 SHORT $LN56@validate_n@5
  000fa	66 41 3b c5	 cmp	 ax, r13w
  000fe	74 16		 je	 SHORT $LN56@validate_n@5
  00100	66 41 3b c6	 cmp	 ax, r14w
  00104	74 10		 je	 SHORT $LN56@validate_n@5
  00106	66 41 3b c7	 cmp	 ax, r15w
  0010a	74 0a		 je	 SHORT $LN56@validate_n@5
  0010c	ba 19 01 00 00	 mov	 edx, 281		; 00000119H
  00111	66 3b c2	 cmp	 ax, dx
  00114	75 0d		 jne	 SHORT $LN57@validate_n@5
$LN56@validate_n@5:
  00116	bb 01 00 00 00	 mov	 ebx, 1

; 3056 :             if (res)
; 3057 :                 next = CHILD(tree, 0);

  0011b	48 8b e9	 mov	 rbp, rcx
  0011e	e9 a6 02 00 00	 jmp	 $LN50@validate_n@5
$LN57@validate_n@5:

; 3049 :           case flow_stmt:
; 3050 :             res  = (validate_numnodes(tree, 1, "flow_stmt")
; 3051 :                     && ((TYPE(CHILD(tree, 0)) == break_stmt)
; 3052 :                         || (TYPE(CHILD(tree, 0)) == continue_stmt)
; 3053 :                         || (TYPE(CHILD(tree, 0)) == yield_stmt)
; 3054 :                         || (TYPE(CHILD(tree, 0)) == return_stmt)
; 3055 :                         || (TYPE(CHILD(tree, 0)) == raise_stmt)));

  00123	33 db		 xor	 ebx, ebx

; 3058 :             else if (nch == 1)

  00125	83 fe 01	 cmp	 esi, 1
  00128	0f 85 9b 02 00
	00		 jne	 $LN50@validate_n@5

; 3059 :                 err_string("illegal flow_stmt type");

  0012e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@NIHNHKIN@illegal?5flow_stmt?5type?$AA@
  00135	e8 00 00 00 00	 call	 err_string

; 3060 :             break;

  0013a	e9 8a 02 00 00	 jmp	 $LN50@validate_n@5
$LN39@validate_n@5:

; 3061 :           case yield_stmt:
; 3062 :             res = validate_yield_stmt(tree);

  0013f	48 8b cf	 mov	 rcx, rdi
  00142	e8 00 00 00 00	 call	 validate_yield_stmt
  00147	8b d8		 mov	 ebx, eax

; 3063 :             break;

  00149	e9 7b 02 00 00	 jmp	 $LN50@validate_n@5
$LN38@validate_n@5:

; 3064 :             /*
; 3065 :              *  Compound statements.
; 3066 :              */
; 3067 :           case simple_stmt:
; 3068 :             res = validate_simple_stmt(tree);

  0014e	48 8b cf	 mov	 rcx, rdi
  00151	e8 00 00 00 00	 call	 validate_simple_stmt
  00156	8b d8		 mov	 ebx, eax

; 3069 :             break;

  00158	e9 6c 02 00 00	 jmp	 $LN50@validate_n@5
$LN37@validate_n@5:

; 3070 :           case compound_stmt:
; 3071 :             res = validate_compound_stmt(tree);

  0015d	48 8b cf	 mov	 rcx, rdi
  00160	e8 00 00 00 00	 call	 validate_compound_stmt
  00165	8b d8		 mov	 ebx, eax

; 3072 :             break;

  00167	e9 5d 02 00 00	 jmp	 $LN50@validate_n@5
$LN36@validate_n@5:

; 3073 :             /*
; 3074 :              *  Fundamental statements.
; 3075 :              */
; 3076 :           case expr_stmt:
; 3077 :             res = validate_expr_stmt(tree);

  0016c	48 8b cf	 mov	 rcx, rdi
  0016f	e8 00 00 00 00	 call	 validate_expr_stmt
  00174	8b d8		 mov	 ebx, eax

; 3078 :             break;

  00176	e9 4e 02 00 00	 jmp	 $LN50@validate_n@5
$LN35@validate_n@5:

; 3079 :           case del_stmt:
; 3080 :             res = validate_del_stmt(tree);

  0017b	48 8b cf	 mov	 rcx, rdi
  0017e	e8 00 00 00 00	 call	 validate_del_stmt
  00183	8b d8		 mov	 ebx, eax

; 3081 :             break;

  00185	e9 3f 02 00 00	 jmp	 $LN50@validate_n@5
$LN34@validate_n@5:

; 3082 :           case pass_stmt:
; 3083 :             res = (validate_numnodes(tree, 1, "pass")
; 3084 :                    && validate_name(CHILD(tree, 0), "pass"));

  0018a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04BBDAIEHH@pass?$AA@
  00191	ba 01 00 00 00	 mov	 edx, 1
  00196	48 8b cf	 mov	 rcx, rdi
  00199	e8 00 00 00 00	 call	 validate_numnodes
  0019e	85 c0		 test	 eax, eax
  001a0	0f 84 21 02 00
	00		 je	 $LN59@validate_n@5
  001a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04BBDAIEHH@pass?$AA@
$LN71@validate_n@5:
  001ad	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  001b1	ba 01 00 00 00	 mov	 edx, 1
  001b6	e8 00 00 00 00	 call	 validate_terminal
  001bb	85 c0		 test	 eax, eax
  001bd	0f 84 04 02 00
	00		 je	 $LN59@validate_n@5
  001c3	bb 01 00 00 00	 mov	 ebx, 1
  001c8	e9 fc 01 00 00	 jmp	 $LN50@validate_n@5
$LN33@validate_n@5:

; 3085 :             break;
; 3086 :           case break_stmt:
; 3087 :             res = (validate_numnodes(tree, 1, "break")
; 3088 :                    && validate_name(CHILD(tree, 0), "break"));

  001cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05ELPHFHOI@break?$AA@
  001d4	ba 01 00 00 00	 mov	 edx, 1
  001d9	48 8b cf	 mov	 rcx, rdi
  001dc	e8 00 00 00 00	 call	 validate_numnodes
  001e1	85 c0		 test	 eax, eax
  001e3	0f 84 de 01 00
	00		 je	 $LN59@validate_n@5
  001e9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05ELPHFHOI@break?$AA@
  001f0	eb bb		 jmp	 SHORT $LN71@validate_n@5
$LN32@validate_n@5:

; 3089 :             break;
; 3090 :           case continue_stmt:
; 3091 :             res = (validate_numnodes(tree, 1, "continue")
; 3092 :                    && validate_name(CHILD(tree, 0), "continue"));

  001f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08DLICDMBN@continue?$AA@
  001f9	ba 01 00 00 00	 mov	 edx, 1
  001fe	48 8b cf	 mov	 rcx, rdi
  00201	e8 00 00 00 00	 call	 validate_numnodes
  00206	85 c0		 test	 eax, eax
  00208	0f 84 b9 01 00
	00		 je	 $LN59@validate_n@5
  0020e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08DLICDMBN@continue?$AA@
  00215	eb 96		 jmp	 SHORT $LN71@validate_n@5
$LN31@validate_n@5:

; 3093 :             break;
; 3094 :           case return_stmt:
; 3095 :             res = validate_return_stmt(tree);

  00217	48 8b cf	 mov	 rcx, rdi
  0021a	e8 00 00 00 00	 call	 validate_return_stmt
  0021f	8b d8		 mov	 ebx, eax

; 3096 :             break;

  00221	e9 a3 01 00 00	 jmp	 $LN50@validate_n@5
$LN30@validate_n@5:

; 3097 :           case raise_stmt:
; 3098 :             res = validate_raise_stmt(tree);

  00226	48 8b cf	 mov	 rcx, rdi
  00229	e8 00 00 00 00	 call	 validate_raise_stmt
  0022e	8b d8		 mov	 ebx, eax

; 3099 :             break;

  00230	e9 94 01 00 00	 jmp	 $LN50@validate_n@5
$LN29@validate_n@5:

; 3100 :           case import_stmt:
; 3101 :             res = validate_import_stmt(tree);

  00235	48 8b cf	 mov	 rcx, rdi
  00238	e8 00 00 00 00	 call	 validate_import_stmt
  0023d	8b d8		 mov	 ebx, eax

; 3102 :             break;

  0023f	e9 85 01 00 00	 jmp	 $LN50@validate_n@5
$LN28@validate_n@5:

; 3103 :           case import_name:
; 3104 :             res = validate_import_name(tree);

  00244	48 8b cf	 mov	 rcx, rdi
  00247	e8 00 00 00 00	 call	 validate_import_name
  0024c	8b d8		 mov	 ebx, eax

; 3105 :             break;

  0024e	e9 76 01 00 00	 jmp	 $LN50@validate_n@5
$LN27@validate_n@5:

; 3106 :           case import_from:
; 3107 :             res = validate_import_from(tree);

  00253	48 8b cf	 mov	 rcx, rdi
  00256	e8 00 00 00 00	 call	 validate_import_from
  0025b	8b d8		 mov	 ebx, eax

; 3108 :             break;

  0025d	e9 67 01 00 00	 jmp	 $LN50@validate_n@5
$LN26@validate_n@5:

; 3109 :           case global_stmt:
; 3110 :             res = validate_global_stmt(tree);

  00262	48 8b cf	 mov	 rcx, rdi
  00265	e8 00 00 00 00	 call	 validate_global_stmt
  0026a	8b d8		 mov	 ebx, eax

; 3111 :             break;

  0026c	e9 58 01 00 00	 jmp	 $LN50@validate_n@5
$LN25@validate_n@5:

; 3112 :           case nonlocal_stmt:
; 3113 :             res = validate_nonlocal_stmt(tree);

  00271	48 8b cf	 mov	 rcx, rdi
  00274	e8 00 00 00 00	 call	 validate_nonlocal_stmt
  00279	8b d8		 mov	 ebx, eax

; 3114 :             break;

  0027b	e9 49 01 00 00	 jmp	 $LN50@validate_n@5
$LN24@validate_n@5:

; 3115 :           case assert_stmt:
; 3116 :             res = validate_assert_stmt(tree);

  00280	48 8b cf	 mov	 rcx, rdi
  00283	e8 00 00 00 00	 call	 validate_assert_stmt
  00288	8b d8		 mov	 ebx, eax

; 3117 :             break;

  0028a	e9 3a 01 00 00	 jmp	 $LN50@validate_n@5
$LN23@validate_n@5:

; 3118 :           case if_stmt:
; 3119 :             res = validate_if(tree);

  0028f	48 8b cf	 mov	 rcx, rdi
  00292	e8 00 00 00 00	 call	 validate_if
  00297	8b d8		 mov	 ebx, eax

; 3120 :             break;

  00299	e9 2b 01 00 00	 jmp	 $LN50@validate_n@5
$LN22@validate_n@5:

; 3121 :           case while_stmt:
; 3122 :             res = validate_while(tree);

  0029e	48 8b cf	 mov	 rcx, rdi
  002a1	e8 00 00 00 00	 call	 validate_while
  002a6	8b d8		 mov	 ebx, eax

; 3123 :             break;

  002a8	e9 1c 01 00 00	 jmp	 $LN50@validate_n@5
$LN21@validate_n@5:

; 3124 :           case for_stmt:
; 3125 :             res = validate_for(tree);

  002ad	48 8b cf	 mov	 rcx, rdi
  002b0	e8 00 00 00 00	 call	 validate_for
  002b5	8b d8		 mov	 ebx, eax

; 3126 :             break;

  002b7	e9 0d 01 00 00	 jmp	 $LN50@validate_n@5
$LN20@validate_n@5:

; 3127 :           case try_stmt:
; 3128 :             res = validate_try(tree);

  002bc	48 8b cf	 mov	 rcx, rdi
  002bf	e8 00 00 00 00	 call	 validate_try
  002c4	8b d8		 mov	 ebx, eax

; 3129 :             break;

  002c6	e9 fe 00 00 00	 jmp	 $LN50@validate_n@5
$LN19@validate_n@5:

; 3130 :           case suite:
; 3131 :             res = validate_suite(tree);

  002cb	48 8b cf	 mov	 rcx, rdi
  002ce	e8 00 00 00 00	 call	 validate_suite
  002d3	8b d8		 mov	 ebx, eax

; 3132 :             break;

  002d5	e9 ef 00 00 00	 jmp	 $LN50@validate_n@5
$LN18@validate_n@5:

; 3133 :             /*
; 3134 :              *  Expression nodes.
; 3135 :              */
; 3136 :           case testlist:
; 3137 :             res = validate_testlist(tree);

  002da	48 8b cf	 mov	 rcx, rdi
  002dd	e8 00 00 00 00	 call	 validate_testlist
  002e2	8b d8		 mov	 ebx, eax

; 3138 :             break;

  002e4	e9 e0 00 00 00	 jmp	 $LN50@validate_n@5
$LN17@validate_n@5:

; 3139 :           case yield_expr:
; 3140 :             res = validate_yield_expr(tree);

  002e9	48 8b cf	 mov	 rcx, rdi
  002ec	e8 00 00 00 00	 call	 validate_yield_expr
  002f1	8b d8		 mov	 ebx, eax

; 3141 :             break;

  002f3	e9 d1 00 00 00	 jmp	 $LN50@validate_n@5
$LN16@validate_n@5:

; 3142 :           case test:
; 3143 :             res = validate_test(tree);

  002f8	48 8b cf	 mov	 rcx, rdi
  002fb	e8 00 00 00 00	 call	 validate_test
  00300	8b d8		 mov	 ebx, eax

; 3144 :             break;

  00302	e9 c2 00 00 00	 jmp	 $LN50@validate_n@5
$LN15@validate_n@5:

; 3145 :           case and_test:
; 3146 :             res = validate_and_test(tree);

  00307	48 8b cf	 mov	 rcx, rdi
  0030a	e8 00 00 00 00	 call	 validate_and_test
  0030f	8b d8		 mov	 ebx, eax

; 3147 :             break;

  00311	e9 b3 00 00 00	 jmp	 $LN50@validate_n@5
$LN14@validate_n@5:

; 3148 :           case not_test:
; 3149 :             res = validate_not_test(tree);

  00316	48 8b cf	 mov	 rcx, rdi
  00319	e8 00 00 00 00	 call	 validate_not_test
  0031e	8b d8		 mov	 ebx, eax

; 3150 :             break;

  00320	e9 a4 00 00 00	 jmp	 $LN50@validate_n@5
$LN13@validate_n@5:

; 3151 :           case comparison:
; 3152 :             res = validate_comparison(tree);

  00325	48 8b cf	 mov	 rcx, rdi
  00328	e8 00 00 00 00	 call	 validate_comparison
  0032d	8b d8		 mov	 ebx, eax

; 3153 :             break;

  0032f	e9 95 00 00 00	 jmp	 $LN50@validate_n@5
$LN12@validate_n@5:

; 3154 :           case exprlist:
; 3155 :             res = validate_exprlist(tree);

  00334	48 8b cf	 mov	 rcx, rdi
  00337	e8 00 00 00 00	 call	 validate_exprlist
  0033c	8b d8		 mov	 ebx, eax

; 3156 :             break;

  0033e	e9 86 00 00 00	 jmp	 $LN50@validate_n@5
$LN11@validate_n@5:

; 3157 :           case comp_op:
; 3158 :             res = validate_comp_op(tree);

  00343	48 8b cf	 mov	 rcx, rdi
  00346	e8 00 00 00 00	 call	 validate_comp_op
  0034b	8b d8		 mov	 ebx, eax

; 3159 :             break;

  0034d	eb 7a		 jmp	 SHORT $LN50@validate_n@5
$LN10@validate_n@5:

; 3160 :           case expr:
; 3161 :             res = validate_expr(tree);

  0034f	48 8b cf	 mov	 rcx, rdi
  00352	e8 00 00 00 00	 call	 validate_expr
  00357	8b d8		 mov	 ebx, eax

; 3162 :             break;

  00359	eb 6e		 jmp	 SHORT $LN50@validate_n@5
$LN9@validate_n@5:

; 3163 :           case xor_expr:
; 3164 :             res = validate_xor_expr(tree);

  0035b	48 8b cf	 mov	 rcx, rdi
  0035e	e8 00 00 00 00	 call	 validate_xor_expr
  00363	8b d8		 mov	 ebx, eax

; 3165 :             break;

  00365	eb 62		 jmp	 SHORT $LN50@validate_n@5
$LN8@validate_n@5:

; 3166 :           case and_expr:
; 3167 :             res = validate_and_expr(tree);

  00367	48 8b cf	 mov	 rcx, rdi
  0036a	e8 00 00 00 00	 call	 validate_and_expr
  0036f	8b d8		 mov	 ebx, eax

; 3168 :             break;

  00371	eb 56		 jmp	 SHORT $LN50@validate_n@5
$LN7@validate_n@5:

; 3169 :           case shift_expr:
; 3170 :             res = validate_shift_expr(tree);

  00373	48 8b cf	 mov	 rcx, rdi
  00376	e8 00 00 00 00	 call	 validate_shift_expr
  0037b	8b d8		 mov	 ebx, eax

; 3171 :             break;

  0037d	eb 4a		 jmp	 SHORT $LN50@validate_n@5
$LN6@validate_n@5:

; 3172 :           case arith_expr:
; 3173 :             res = validate_arith_expr(tree);

  0037f	48 8b cf	 mov	 rcx, rdi
  00382	e8 00 00 00 00	 call	 validate_arith_expr
  00387	8b d8		 mov	 ebx, eax

; 3174 :             break;

  00389	eb 3e		 jmp	 SHORT $LN50@validate_n@5
$LN5@validate_n@5:

; 3175 :           case term:
; 3176 :             res = validate_term(tree);

  0038b	48 8b cf	 mov	 rcx, rdi
  0038e	e8 00 00 00 00	 call	 validate_term
  00393	8b d8		 mov	 ebx, eax

; 3177 :             break;

  00395	eb 32		 jmp	 SHORT $LN50@validate_n@5
$LN4@validate_n@5:

; 3178 :           case factor:
; 3179 :             res = validate_factor(tree);

  00397	48 8b cf	 mov	 rcx, rdi
  0039a	e8 00 00 00 00	 call	 validate_factor
  0039f	8b d8		 mov	 ebx, eax

; 3180 :             break;

  003a1	eb 26		 jmp	 SHORT $LN50@validate_n@5
$LN3@validate_n@5:

; 3181 :           case power:
; 3182 :             res = validate_power(tree);

  003a3	48 8b cf	 mov	 rcx, rdi
  003a6	e8 00 00 00 00	 call	 validate_power
  003ab	8b d8		 mov	 ebx, eax

; 3183 :             break;

  003ad	eb 1a		 jmp	 SHORT $LN50@validate_n@5
$LN2@validate_n@5:

; 3184 :           case atom:
; 3185 :             res = validate_atom(tree);

  003af	48 8b cf	 mov	 rcx, rdi
  003b2	e8 00 00 00 00	 call	 validate_atom
  003b7	8b d8		 mov	 ebx, eax

; 3186 :             break;

  003b9	eb 0e		 jmp	 SHORT $LN50@validate_n@5
$LN1@validate_n@5:

; 3187 : 
; 3188 :           default:
; 3189 :             /* Hopefully never reached! */
; 3190 :             err_string("unrecognized node type");

  003bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@OAHKNDHF@unrecognized?5node?5type?$AA@
  003c2	e8 00 00 00 00	 call	 err_string
$LN59@validate_n@5:

; 3191 :             res = 0;

  003c7	33 db		 xor	 ebx, ebx
$LN50@validate_n@5:

; 3192 :             break;
; 3193 :         }
; 3194 :         tree = next;

  003c9	48 8b fd	 mov	 rdi, rbp
  003cc	85 db		 test	 ebx, ebx
  003ce	0f 85 6c fc ff
	ff		 jne	 $LL53@validate_n@5
$LN70@validate_n@5:
  003d4	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  003d9	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]

; 3195 :     }
; 3196 :     return (res);

  003de	8b c3		 mov	 eax, ebx

; 3197 : }

  003e0	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  003e5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  003e9	41 5f		 pop	 r15
  003eb	41 5e		 pop	 r14
  003ed	41 5d		 pop	 r13
  003ef	41 5c		 pop	 r12
  003f1	5f		 pop	 rdi
  003f2	c3		 ret	 0
  003f3	90		 npad	 1
$LN69@validate_n@5:
  003f4	00 00 00 00	 DD	 $LN46@validate_n@5
  003f8	00 00 00 00	 DD	 $LN49@validate_n@5
  003fc	00 00 00 00	 DD	 $LN45@validate_n@5
  00400	00 00 00 00	 DD	 $LN38@validate_n@5
  00404	00 00 00 00	 DD	 $LN44@validate_n@5
  00408	00 00 00 00	 DD	 $LN36@validate_n@5
  0040c	00 00 00 00	 DD	 $LN35@validate_n@5
  00410	00 00 00 00	 DD	 $LN34@validate_n@5
  00414	00 00 00 00	 DD	 $LN43@validate_n@5
  00418	00 00 00 00	 DD	 $LN33@validate_n@5
  0041c	00 00 00 00	 DD	 $LN32@validate_n@5
  00420	00 00 00 00	 DD	 $LN31@validate_n@5
  00424	00 00 00 00	 DD	 $LN39@validate_n@5
  00428	00 00 00 00	 DD	 $LN30@validate_n@5
  0042c	00 00 00 00	 DD	 $LN29@validate_n@5
  00430	00 00 00 00	 DD	 $LN28@validate_n@5
  00434	00 00 00 00	 DD	 $LN27@validate_n@5
  00438	00 00 00 00	 DD	 $LN26@validate_n@5
  0043c	00 00 00 00	 DD	 $LN25@validate_n@5
  00440	00 00 00 00	 DD	 $LN24@validate_n@5
  00444	00 00 00 00	 DD	 $LN37@validate_n@5
  00448	00 00 00 00	 DD	 $LN23@validate_n@5
  0044c	00 00 00 00	 DD	 $LN22@validate_n@5
  00450	00 00 00 00	 DD	 $LN21@validate_n@5
  00454	00 00 00 00	 DD	 $LN20@validate_n@5
  00458	00 00 00 00	 DD	 $LN48@validate_n@5
  0045c	00 00 00 00	 DD	 $LN19@validate_n@5
  00460	00 00 00 00	 DD	 $LN16@validate_n@5
  00464	00 00 00 00	 DD	 $LN15@validate_n@5
  00468	00 00 00 00	 DD	 $LN14@validate_n@5
  0046c	00 00 00 00	 DD	 $LN13@validate_n@5
  00470	00 00 00 00	 DD	 $LN11@validate_n@5
  00474	00 00 00 00	 DD	 $LN10@validate_n@5
  00478	00 00 00 00	 DD	 $LN9@validate_n@5
  0047c	00 00 00 00	 DD	 $LN8@validate_n@5
  00480	00 00 00 00	 DD	 $LN7@validate_n@5
  00484	00 00 00 00	 DD	 $LN6@validate_n@5
  00488	00 00 00 00	 DD	 $LN5@validate_n@5
  0048c	00 00 00 00	 DD	 $LN4@validate_n@5
  00490	00 00 00 00	 DD	 $LN3@validate_n@5
  00494	00 00 00 00	 DD	 $LN2@validate_n@5
  00498	00 00 00 00	 DD	 $LN12@validate_n@5
  0049c	00 00 00 00	 DD	 $LN18@validate_n@5
  004a0	00 00 00 00	 DD	 $LN47@validate_n@5
  004a4	00 00 00 00	 DD	 $LN17@validate_n@5
  004a8	00 00 00 00	 DD	 $LN1@validate_n@5
$LN68@validate_n@5:
  004ac	00		 DB	 0
  004ad	01		 DB	 1
  004ae	2d		 DB	 45			; 0000002dH
  004af	2d		 DB	 45			; 0000002dH
  004b0	2d		 DB	 45			; 0000002dH
  004b1	2d		 DB	 45			; 0000002dH
  004b2	2d		 DB	 45			; 0000002dH
  004b3	02		 DB	 2
  004b4	03		 DB	 3
  004b5	04		 DB	 4
  004b6	05		 DB	 5
  004b7	2d		 DB	 45			; 0000002dH
  004b8	2d		 DB	 45			; 0000002dH
  004b9	06		 DB	 6
  004ba	07		 DB	 7
  004bb	08		 DB	 8
  004bc	09		 DB	 9
  004bd	0a		 DB	 10
  004be	0b		 DB	 11
  004bf	0c		 DB	 12
  004c0	0d		 DB	 13
  004c1	0e		 DB	 14
  004c2	0f		 DB	 15
  004c3	10		 DB	 16
  004c4	2d		 DB	 45			; 0000002dH
  004c5	2d		 DB	 45			; 0000002dH
  004c6	2d		 DB	 45			; 0000002dH
  004c7	2d		 DB	 45			; 0000002dH
  004c8	2d		 DB	 45			; 0000002dH
  004c9	11		 DB	 17
  004ca	12		 DB	 18
  004cb	13		 DB	 19
  004cc	14		 DB	 20
  004cd	15		 DB	 21
  004ce	16		 DB	 22
  004cf	17		 DB	 23
  004d0	18		 DB	 24
  004d1	19		 DB	 25
  004d2	2d		 DB	 45			; 0000002dH
  004d3	2d		 DB	 45			; 0000002dH
  004d4	1a		 DB	 26
  004d5	1b		 DB	 27
  004d6	2d		 DB	 45			; 0000002dH
  004d7	2d		 DB	 45			; 0000002dH
  004d8	2d		 DB	 45			; 0000002dH
  004d9	2d		 DB	 45			; 0000002dH
  004da	1c		 DB	 28
  004db	1d		 DB	 29
  004dc	1e		 DB	 30
  004dd	1f		 DB	 31
  004de	2d		 DB	 45			; 0000002dH
  004df	20		 DB	 32			; 00000020H
  004e0	21		 DB	 33			; 00000021H
  004e1	22		 DB	 34			; 00000022H
  004e2	23		 DB	 35			; 00000023H
  004e3	24		 DB	 36			; 00000024H
  004e4	25		 DB	 37			; 00000025H
  004e5	26		 DB	 38			; 00000026H
  004e6	27		 DB	 39			; 00000027H
  004e7	28		 DB	 40			; 00000028H
  004e8	2d		 DB	 45			; 0000002dH
  004e9	2d		 DB	 45			; 0000002dH
  004ea	2d		 DB	 45			; 0000002dH
  004eb	2d		 DB	 45			; 0000002dH
  004ec	2d		 DB	 45			; 0000002dH
  004ed	29		 DB	 41			; 00000029H
  004ee	2a		 DB	 42			; 0000002aH
  004ef	2d		 DB	 45			; 0000002dH
  004f0	2b		 DB	 43			; 0000002bH
  004f1	2d		 DB	 45			; 0000002dH
  004f2	2d		 DB	 45			; 0000002dH
  004f3	2d		 DB	 45			; 0000002dH
  004f4	2d		 DB	 45			; 0000002dH
  004f5	2d		 DB	 45			; 0000002dH
  004f6	2d		 DB	 45			; 0000002dH
  004f7	2c		 DB	 44			; 0000002cH
validate_node ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@CDFFAMLN@Unrecognized?5child?5node?5of?5small@ ; `string'
PUBLIC	??_C@_0BO@JILDABBH@illegal?5small_stmt?5child?5type?$AA@ ; `string'
PUBLIC	??_C@_0L@PLEAAANE@small_stmt?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_small_stmt DD imagerel validate_small_stmt
	DD	imagerel validate_small_stmt+185
	DD	imagerel $unwind$validate_small_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_small_stmt DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CL@CDFFAMLN@Unrecognized?5child?5node?5of?5small@
CONST	SEGMENT
??_C@_0CL@CDFFAMLN@Unrecognized?5child?5node?5of?5small@ DB 'Unrecognized'
	DB	' child node of small_stmt: %d.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JILDABBH@illegal?5small_stmt?5child?5type?$AA@
CONST	SEGMENT
??_C@_0BO@JILDABBH@illegal?5small_stmt?5child?5type?$AA@ DB 'illegal smal'
	DB	'l_stmt child type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PLEAAANE@small_stmt?$AA@
CONST	SEGMENT
??_C@_0L@PLEAAANE@small_stmt?$AA@ DB 'small_stmt', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_small_stmt
_TEXT	SEGMENT
tree$ = 48
validate_small_stmt PROC				; COMDAT

; 1480 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1481 :     int nch = NCH(tree);

  0000a	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 1482 :     int res = validate_numnodes(tree, 1, "small_stmt");

  0000d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@PLEAAANE@small_stmt?$AA@
  00014	ba 01 00 00 00	 mov	 edx, 1
  00019	48 8b d9	 mov	 rbx, rcx
  0001c	e8 00 00 00 00	 call	 validate_numnodes

; 1483 : 
; 1484 :     if (res) {

  00021	85 c0		 test	 eax, eax
  00023	74 67		 je	 SHORT $LN6@validate_s@6

; 1485 :         int ntype = TYPE(CHILD(tree, 0));

  00025	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00029	0f bf 01	 movsx	 eax, WORD PTR [rcx]

; 1486 : 
; 1487 :         if (  (ntype == expr_stmt)
; 1488 :               || (ntype == del_stmt)
; 1489 :               || (ntype == pass_stmt)
; 1490 :               || (ntype == flow_stmt)
; 1491 :               || (ntype == import_stmt)
; 1492 :               || (ntype == global_stmt)
; 1493 :               || (ntype == nonlocal_stmt)
; 1494 :               || (ntype == assert_stmt))

  0002c	3d 0f 01 00 00	 cmp	 eax, 271		; 0000010fH
  00031	74 4a		 je	 SHORT $LN4@validate_s@6
  00033	3d 12 01 00 00	 cmp	 eax, 274		; 00000112H
  00038	74 43		 je	 SHORT $LN4@validate_s@6
  0003a	3d 13 01 00 00	 cmp	 eax, 275		; 00000113H
  0003f	74 3c		 je	 SHORT $LN4@validate_s@6
  00041	3d 14 01 00 00	 cmp	 eax, 276		; 00000114H
  00046	74 35		 je	 SHORT $LN4@validate_s@6
  00048	3d 1a 01 00 00	 cmp	 eax, 282		; 0000011aH
  0004d	74 2e		 je	 SHORT $LN4@validate_s@6
  0004f	3d 22 01 00 00	 cmp	 eax, 290		; 00000122H
  00054	74 27		 je	 SHORT $LN4@validate_s@6
  00056	3d 23 01 00 00	 cmp	 eax, 291		; 00000123H
  0005b	74 20		 je	 SHORT $LN4@validate_s@6
  0005d	3d 24 01 00 00	 cmp	 eax, 292		; 00000124H
  00062	74 19		 je	 SHORT $LN4@validate_s@6

; 1495 :             res = validate_node(CHILD(tree, 0));
; 1496 :         else {
; 1497 :             res = 0;
; 1498 :             err_string("illegal small_stmt child type");

  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@JILDABBH@illegal?5small_stmt?5child?5type?$AA@
  0006b	e8 00 00 00 00	 call	 err_string

; 1506 :     }
; 1507 :     return (res);

  00070	33 c0		 xor	 eax, eax

; 1508 : }

  00072	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00077	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007b	5f		 pop	 rdi
  0007c	c3		 ret	 0
$LN4@validate_s@6:
  0007d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	5f		 pop	 rdi
  00087	e9 00 00 00 00	 jmp	 validate_node
$LN6@validate_s@6:

; 1499 :         }
; 1500 :     }
; 1501 :     else if (nch == 1) {

  0008c	83 ff 01	 cmp	 edi, 1
  0008f	75 1d		 jne	 SHORT $LN9@validate_s@6

; 1502 :         res = 0;
; 1503 :         PyErr_Format(parser_error,
; 1504 :                      "Unrecognized child node of small_stmt: %d.",
; 1505 :                      TYPE(CHILD(tree, 0)));

  00091	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@CDFFAMLN@Unrecognized?5child?5node?5of?5small@
  0009c	44 0f bf 01	 movsx	 r8d, WORD PTR [rcx]
  000a0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  000a7	e8 00 00 00 00	 call	 PyErr_Format

; 1506 :     }
; 1507 :     return (res);

  000ac	33 c0		 xor	 eax, eax
$LN9@validate_s@6:

; 1508 : }

  000ae	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b7	5f		 pop	 rdi
  000b8	c3		 ret	 0
validate_small_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_01ICJEACDI@?$DL?$AA@			; `string'
PUBLIC	??_C@_0M@NKLMKLPN@simple_stmt?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_simple_stmt DD imagerel validate_simple_stmt
	DD	imagerel validate_simple_stmt+175
	DD	imagerel $unwind$validate_simple_stmt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$validate_simple_stmt DD imagerel validate_simple_stmt+175
	DD	imagerel validate_simple_stmt+280
	DD	imagerel $chain$0$validate_simple_stmt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$validate_simple_stmt DD imagerel validate_simple_stmt+280
	DD	imagerel validate_simple_stmt+291
	DD	imagerel $chain$1$validate_simple_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$validate_simple_stmt DD 021H
	DD	imagerel validate_simple_stmt
	DD	imagerel validate_simple_stmt+175
	DD	imagerel $unwind$validate_simple_stmt
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$validate_simple_stmt DD 020521H
	DD	063405H
	DD	imagerel validate_simple_stmt
	DD	imagerel validate_simple_stmt+175
	DD	imagerel $unwind$validate_simple_stmt
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_simple_stmt DD 040a01H
	DD	07640aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_01ICJEACDI@?$DL?$AA@
CONST	SEGMENT
??_C@_01ICJEACDI@?$DL?$AA@ DB ';', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NKLMKLPN@simple_stmt?$AA@
CONST	SEGMENT
??_C@_0M@NKLMKLPN@simple_stmt?$AA@ DB 'simple_stmt', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_simple_stmt
_TEXT	SEGMENT
tree$ = 48
validate_simple_stmt PROC				; COMDAT

; 1455 : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1456 :     int nch = NCH(tree);

  0000a	8b 79 18	 mov	 edi, DWORD PTR [rcx+24]

; 1457 :     int res = (validate_ntype(tree, simple_stmt)
; 1458 :                && (nch >= 2)
; 1459 :                && validate_small_stmt(CHILD(tree, 0))
; 1460 :                && validate_newline(CHILD(tree, nch - 1)));

  0000d	ba 0d 01 00 00	 mov	 edx, 269		; 0000010dH
  00012	48 8b f1	 mov	 rsi, rcx
  00015	e8 00 00 00 00	 call	 validate_ntype
  0001a	85 c0		 test	 eax, eax
  0001c	74 3b		 je	 SHORT $LN9@validate_s@7
  0001e	83 ff 02	 cmp	 edi, 2
  00021	7c 36		 jl	 SHORT $LN9@validate_s@7
  00023	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  00027	e8 00 00 00 00	 call	 validate_small_stmt
  0002c	85 c0		 test	 eax, eax
  0002e	74 29		 je	 SHORT $LN9@validate_s@7
  00030	8d 47 ff	 lea	 eax, DWORD PTR [rdi-1]
  00033	45 33 c0	 xor	 r8d, r8d
  00036	48 63 c8	 movsxd	 rcx, eax
  00039	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0003d	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  00041	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00045	41 8d 50 04	 lea	 edx, QWORD PTR [r8+4]
  00049	e8 00 00 00 00	 call	 validate_terminal
  0004e	85 c0		 test	 eax, eax
  00050	74 07		 je	 SHORT $LN9@validate_s@7
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	eb 02		 jmp	 SHORT $LN10@validate_s@7
$LN9@validate_s@7:
  00059	33 c0		 xor	 eax, eax
$LN10@validate_s@7:

; 1461 : 
; 1462 :     if (nch < 2)

  0005b	83 ff 02	 cmp	 edi, 2
  0005e	7d 14		 jge	 SHORT $LN6@validate_s@7

; 1463 :         res = validate_numnodes(tree, 2, "simple_stmt");

  00060	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@NKLMKLPN@simple_stmt?$AA@
  00067	ba 02 00 00 00	 mov	 edx, 2
  0006c	48 8b ce	 mov	 rcx, rsi
  0006f	e8 00 00 00 00	 call	 validate_numnodes
$LN6@validate_s@7:

; 1464 :     --nch;                              /* forget the NEWLINE    */

  00074	ff cf		 dec	 edi

; 1465 :     if (res && is_even(nch))

  00076	85 c0		 test	 eax, eax
  00078	0f 84 9a 00 00
	00		 je	 $LN1@validate_s@7
  0007e	40 f6 c7 01	 test	 dil, 1
  00082	75 22		 jne	 SHORT $LN5@validate_s@7

; 1466 :         res = validate_semi(CHILD(tree, --nch));

  00084	ff cf		 dec	 edi
  00086	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01ICJEACDI@?$DL?$AA@
  0008d	ba 0d 00 00 00	 mov	 edx, 13
  00092	48 63 c7	 movsxd	 rax, edi
  00095	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00099	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0009d	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  000a1	e8 00 00 00 00	 call	 validate_terminal
$LN5@validate_s@7:

; 1467 :     if (res && (nch > 2)) {

  000a6	85 c0		 test	 eax, eax
  000a8	74 6e		 je	 SHORT $LN1@validate_s@7
  000aa	83 ff 02	 cmp	 edi, 2
  000ad	7e 69		 jle	 SHORT $LN1@validate_s@7

; 1468 :         int i;
; 1469 : 
; 1470 :         for (i = 1; res && (i < nch); i += 2)

  000af	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  000b4	bb 01 00 00 00	 mov	 ebx, 1
  000b9	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@validate_s@7:
  000c0	3b df		 cmp	 ebx, edi
  000c2	7d 4f		 jge	 SHORT $LN19@validate_s@7

; 1471 :             res = (validate_semi(CHILD(tree, i))
; 1472 :                    && validate_small_stmt(CHILD(tree, i + 1)));

  000c4	48 63 c3	 movsxd	 rax, ebx
  000c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01ICJEACDI@?$DL?$AA@
  000ce	ba 0d 00 00 00	 mov	 edx, 13
  000d3	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  000d7	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  000db	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]
  000df	e8 00 00 00 00	 call	 validate_terminal
  000e4	85 c0		 test	 eax, eax
  000e6	74 22		 je	 SHORT $LN11@validate_s@7
  000e8	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  000eb	48 63 c8	 movsxd	 rcx, eax
  000ee	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  000f2	48 8d 14 89	 lea	 rdx, QWORD PTR [rcx+rcx*4]
  000f6	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  000fa	e8 00 00 00 00	 call	 validate_small_stmt
  000ff	85 c0		 test	 eax, eax
  00101	74 07		 je	 SHORT $LN11@validate_s@7
  00103	b8 01 00 00 00	 mov	 eax, 1
  00108	eb 02		 jmp	 SHORT $LN12@validate_s@7
$LN11@validate_s@7:
  0010a	33 c0		 xor	 eax, eax
$LN12@validate_s@7:

; 1468 :         int i;
; 1469 : 
; 1470 :         for (i = 1; res && (i < nch); i += 2)

  0010c	83 c3 02	 add	 ebx, 2
  0010f	85 c0		 test	 eax, eax
  00111	75 ad		 jne	 SHORT $LL3@validate_s@7
$LN19@validate_s@7:
  00113	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN1@validate_s@7:

; 1473 :     }
; 1474 :     return (res);
; 1475 : }

  00118	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0011d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00121	5f		 pop	 rdi
  00122	c3		 ret	 0
validate_simple_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_04GIKOEBLH@stmt?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_stmt DD imagerel validate_stmt
	DD	imagerel validate_stmt+89
	DD	imagerel $unwind$validate_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_stmt DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_04GIKOEBLH@stmt?$AA@
CONST	SEGMENT
??_C@_04GIKOEBLH@stmt?$AA@ DB 'stmt', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_stmt
_TEXT	SEGMENT
tree$ = 48
validate_stmt PROC					; COMDAT

; 1434 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1435 :     int res = (validate_ntype(tree, stmt)
; 1436 :                && validate_numnodes(tree, 1, "stmt"));

  00006	ba 0c 01 00 00	 mov	 edx, 268		; 0000010cH
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	e8 00 00 00 00	 call	 validate_ntype
  00013	85 c0		 test	 eax, eax
  00015	74 3a		 je	 SHORT $LN6@validate_s@8
  00017	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04GIKOEBLH@stmt?$AA@
  0001e	ba 01 00 00 00	 mov	 edx, 1
  00023	48 8b cb	 mov	 rcx, rbx
  00026	e8 00 00 00 00	 call	 validate_numnodes
  0002b	85 c0		 test	 eax, eax
  0002d	74 22		 je	 SHORT $LN6@validate_s@8

; 1437 : 
; 1438 :     if (res) {
; 1439 :         tree = CHILD(tree, 0);

  0002f	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]

; 1440 : 
; 1441 :         if (TYPE(tree) == simple_stmt)

  00033	b8 0d 01 00 00	 mov	 eax, 269		; 0000010dH
  00038	66 39 01	 cmp	 WORD PTR [rcx], ax
  0003b	75 0a		 jne	 SHORT $LN2@validate_s@8

; 1447 : }

  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5b		 pop	 rbx
  00042	e9 00 00 00 00	 jmp	 validate_simple_stmt
$LN2@validate_s@8:
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5b		 pop	 rbx
  0004c	e9 00 00 00 00	 jmp	 validate_compound_stmt
$LN6@validate_s@8:

; 1442 :             res = validate_simple_stmt(tree);
; 1443 :         else
; 1444 :             res = validate_compound_stmt(tree);
; 1445 :     }
; 1446 :     return (res);

  00051	33 c0		 xor	 eax, eax

; 1447 : }

  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5b		 pop	 rbx
  00058	c3		 ret	 0
validate_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@EIILMLPB@VALIDATION?5FAILURE?3?5report?5this?5@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_file_input DD imagerel validate_file_input
	DD	imagerel validate_file_input+218
	DD	imagerel $unwind$validate_file_input
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_file_input DD 0c4801H
	DD	08e448H
	DD	0b6418H
	DD	0a5418H
	DD	093418H
	DD	0d0143218H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_0DD@EIILMLPB@VALIDATION?5FAILURE?3?5report?5this?5@
CONST	SEGMENT
??_C@_0DD@EIILMLPB@VALIDATION?5FAILURE?3?5report?5this?5@ DB 'VALIDATION '
	DB	'FAILURE: report this to the maintainer!', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_file_input
_TEXT	SEGMENT
tree$ = 64
validate_file_input PROC				; COMDAT

; 3217 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 3218 :     int j;
; 3219 :     int nch = NCH(tree) - 1;

  00018	8b 69 18	 mov	 ebp, DWORD PTR [rcx+24]
  0001b	33 ff		 xor	 edi, edi
  0001d	4c 8b e1	 mov	 r12, rcx
  00020	ff cd		 dec	 ebp

; 3220 :     int res = ((nch >= 0)
; 3221 :                && validate_ntype(CHILD(tree, nch), ENDMARKER));

  00022	78 1d		 js	 SHORT $LN9@validate_f@4
  00024	48 63 c5	 movsxd	 rax, ebp
  00027	48 8d 14 80	 lea	 rdx, QWORD PTR [rax+rax*4]
  0002b	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  0002f	48 8d 0c d0	 lea	 rcx, QWORD PTR [rax+rdx*8]
  00033	33 d2		 xor	 edx, edx
  00035	e8 00 00 00 00	 call	 validate_ntype
  0003a	8d 5f 01	 lea	 ebx, QWORD PTR [rdi+1]
  0003d	85 c0		 test	 eax, eax
  0003f	75 02		 jne	 SHORT $LN10@validate_f@4
$LN9@validate_f@4:
  00041	8b df		 mov	 ebx, edi
$LN10@validate_f@4:
  00043	4c 89 74 24 40	 mov	 QWORD PTR [rsp+64], r14

; 3222 : 
; 3223 :     for (j = 0; res && (j < nch); ++j) {

  00048	48 8b f7	 mov	 rsi, rdi
  0004b	4c 63 ed	 movsxd	 r13, ebp
  0004e	85 db		 test	 ebx, ebx
  00050	74 52		 je	 SHORT $LN13@validate_f@4
  00052	48 8b ef	 mov	 rbp, rdi
  00055	41 be 0c 01 00
	00		 mov	 r14d, 268		; 0000010cH
  0005b	0f 1f 44 00 00	 npad	 5
$LL6@validate_f@4:
  00060	49 3b f5	 cmp	 rsi, r13
  00063	7d 3b		 jge	 SHORT $LN4@validate_f@4

; 3224 :         if (TYPE(CHILD(tree, j)) == stmt)

  00065	49 8b 54 24 20	 mov	 rdx, QWORD PTR [r12+32]

; 3225 :             res = validate_stmt(CHILD(tree, j));

  0006a	48 63 c7	 movsxd	 rax, edi
  0006d	48 8d 0c 80	 lea	 rcx, QWORD PTR [rax+rax*4]
  00071	48 8d 0c ca	 lea	 rcx, QWORD PTR [rdx+rcx*8]
  00075	66 44 39 34 2a	 cmp	 WORD PTR [rdx+rbp], r14w
  0007a	75 07		 jne	 SHORT $LN3@validate_f@4
  0007c	e8 00 00 00 00	 call	 validate_stmt

; 3226 :         else

  00081	eb 0c		 jmp	 SHORT $LN16@validate_f@4
$LN3@validate_f@4:

; 3227 :             res = validate_newline(CHILD(tree, j));

  00083	45 33 c0	 xor	 r8d, r8d
  00086	41 8d 50 04	 lea	 edx, QWORD PTR [r8+4]
  0008a	e8 00 00 00 00	 call	 validate_terminal
$LN16@validate_f@4:

; 3222 : 
; 3223 :     for (j = 0; res && (j < nch); ++j) {

  0008f	ff c7		 inc	 edi
  00091	48 ff c6	 inc	 rsi
  00094	48 83 c5 28	 add	 rbp, 40			; 00000028H

; 3227 :             res = validate_newline(CHILD(tree, j));

  00098	8b d8		 mov	 ebx, eax
  0009a	85 c0		 test	 eax, eax
  0009c	75 c2		 jne	 SHORT $LL6@validate_f@4

; 3228 :     }
; 3229 :     /*  This stays in to prevent any internal failures from getting to the
; 3230 :      *  user.  Hopefully, this won't be needed.  If a user reports getting
; 3231 :      *  this, we have some debugging to do.
; 3232 :      */
; 3233 :     if (!res && !PyErr_Occurred())

  0009e	eb 04		 jmp	 SHORT $LN13@validate_f@4
$LN4@validate_f@4:
  000a0	85 db		 test	 ebx, ebx
  000a2	75 16		 jne	 SHORT $LN15@validate_f@4
$LN13@validate_f@4:
  000a4	e8 00 00 00 00	 call	 PyErr_Occurred
  000a9	48 85 c0	 test	 rax, rax
  000ac	75 0c		 jne	 SHORT $LN15@validate_f@4

; 3234 :         err_string("VALIDATION FAILURE: report this to the maintainer!");

  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DD@EIILMLPB@VALIDATION?5FAILURE?3?5report?5this?5@
  000b5	e8 00 00 00 00	 call	 err_string
$LN15@validate_f@4:

; 3235 : 
; 3236 :     return (res);
; 3237 : }

  000ba	4c 8b 74 24 40	 mov	 r14, QWORD PTR [rsp+64]
  000bf	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000c4	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  000c9	8b c3		 mov	 eax, ebx
  000cb	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000d0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d4	41 5d		 pop	 r13
  000d6	41 5c		 pop	 r12
  000d8	5f		 pop	 rdi
  000d9	c3		 ret	 0
validate_file_input ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@BEJCFJCJ@Error?5Parsing?5encoding_decl?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_encoding_decl DD imagerel validate_encoding_decl
	DD	imagerel validate_encoding_decl+62
	DD	imagerel $unwind$validate_encoding_decl
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_encoding_decl DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BM@BEJCFJCJ@Error?5Parsing?5encoding_decl?$AA@
CONST	SEGMENT
??_C@_0BM@BEJCFJCJ@Error?5Parsing?5encoding_decl?$AA@ DB 'Error Parsing e'
	DB	'ncoding_decl', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_encoding_decl
_TEXT	SEGMENT
tree$ = 48
validate_encoding_decl PROC				; COMDAT

; 3241 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3242 :     int nch = NCH(tree);
; 3243 :     int res = ((nch == 1)
; 3244 :         && validate_file_input(CHILD(tree, 0)));

  00004	83 79 18 01	 cmp	 DWORD PTR [rcx+24], 1
  00008	75 17		 jne	 SHORT $LN4@validate_e@7
  0000a	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0000e	e8 00 00 00 00	 call	 validate_file_input
  00013	85 c0		 test	 eax, eax
  00015	74 0a		 je	 SHORT $LN4@validate_e@7

; 3248 : 
; 3249 :     return res;

  00017	b8 01 00 00 00	 mov	 eax, 1

; 3250 : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
$LN4@validate_e@7:

; 3245 : 
; 3246 :     if (!res && !PyErr_Occurred())

  00021	e8 00 00 00 00	 call	 PyErr_Occurred
  00026	48 85 c0	 test	 rax, rax
  00029	75 0c		 jne	 SHORT $LN7@validate_e@7

; 3247 :         err_string("Error Parsing encoding_decl");

  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@BEJCFJCJ@Error?5Parsing?5encoding_decl?$AA@
  00032	e8 00 00 00 00	 call	 err_string
$LN7@validate_e@7:

; 3248 : 
; 3249 :     return res;

  00037	33 c0		 xor	 eax, eax

; 3250 : }

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
validate_encoding_decl ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@MIOHNAME@unspecified?5ST?5error?5occurred?$AA@ ; `string'
PUBLIC	??_C@_0CN@CHBJDMFA@parse?5tree?5does?5not?5use?5a?5valid?5@ ; `string'
PUBLIC	??_C@_0DC@CFFOGKCJ@sequence2st?$CI?$CJ?5requires?5a?5single?5@ ; `string'
PUBLIC	??_C@_0O@OFBAJAL@O?3sequence2st?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_tuple2st DD imagerel parser_tuple2st
	DD	imagerel parser_tuple2st+267
	DD	imagerel $unwind$parser_tuple2st
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_tuple2st DD 046801H
	DD	083468H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0BO@MIOHNAME@unspecified?5ST?5error?5occurred?$AA@
CONST	SEGMENT
??_C@_0BO@MIOHNAME@unspecified?5ST?5error?5occurred?$AA@ DB 'unspecified '
	DB	'ST error occurred', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CHBJDMFA@parse?5tree?5does?5not?5use?5a?5valid?5@
CONST	SEGMENT
??_C@_0CN@CHBJDMFA@parse?5tree?5does?5not?5use?5a?5valid?5@ DB 'parse tre'
	DB	'e does not use a valid start symbol', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@CFFOGKCJ@sequence2st?$CI?$CJ?5requires?5a?5single?5@
CONST	SEGMENT
??_C@_0DC@CFFOGKCJ@sequence2st?$CI?$CJ?5requires?5a?5single?5@ DB 'sequen'
	DB	'ce2st() requires a single sequence argument', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OFBAJAL@O?3sequence2st?$AA@
CONST	SEGMENT
??_C@_0O@OFBAJAL@O?3sequence2st?$AA@ DB 'O:sequence2st', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT parser_tuple2st
_TEXT	SEGMENT
self$ = 64
args$ = 72
kw$ = 80
tuple$ = 88
parser_tuple2st PROC					; COMDAT

; 650  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	49 8b c0	 mov	 rax, r8
  00009	4c 8b d2	 mov	 r10, rdx

; 651  :     NOTE(ARGUNUSED(self))
; 652  :     PyObject *st = 0;
; 653  :     PyObject *tuple;
; 654  :     node *tree;
; 655  : 
; 656  :     static char *keywords[] = {"sequence", NULL};
; 657  : 
; 658  :     if (!PyArg_ParseTupleAndKeywords(args, kw, "O:sequence2st", keywords,
; 659  :                                      &tuple))

  0000c	48 8d 4c 24 58	 lea	 rcx, QWORD PTR tuple$[rsp]
  00011	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00016	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_tuple2st@@9@9
  0001d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@OFBAJAL@O?3sequence2st?$AA@
  00024	49 8b ca	 mov	 rcx, r10
  00027	48 8b d0	 mov	 rdx, rax
  0002a	33 ff		 xor	 edi, edi
  0002c	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00031	85 c0		 test	 eax, eax

; 660  :         return (0);

  00033	74 21		 je	 SHORT $LN22@parser_tup

; 661  :     if (!PySequence_Check(tuple)) {

  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tuple$[rsp]
  0003a	e8 00 00 00 00	 call	 PySequence_Check
  0003f	85 c0		 test	 eax, eax
  00041	75 1b		 jne	 SHORT $LN15@parser_tup

; 662  :         PyErr_SetString(PyExc_ValueError,
; 663  :                         "sequence2st() requires a single sequence argument");

  00043	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@CFFOGKCJ@sequence2st?$CI?$CJ?5requires?5a?5single?5@
  00051	e8 00 00 00 00	 call	 PyErr_SetString
$LN22@parser_tup:

; 664  :         return (0);

  00056	33 c0		 xor	 eax, eax

; 706  : }

  00058	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
$LN15@parser_tup:

; 665  :     }
; 666  :     /*
; 667  :      *  Convert the tree to the internal form before checking it.
; 668  :      */
; 669  :     tree = build_node_tree(tuple);

  0005e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tuple$[rsp]
  00063	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00068	e8 00 00 00 00	 call	 build_node_tree
  0006d	48 8b d8	 mov	 rbx, rax

; 670  :     if (tree != 0) {

  00070	48 85 c0	 test	 rax, rax
  00073	74 72		 je	 SHORT $LN19@parser_tup

; 671  :         int start_sym = TYPE(tree);

  00075	0f bf 00	 movsx	 eax, WORD PTR [rax]

; 672  :         if (start_sym == eval_input) {
; 673  :             /*  Might be an eval form.  */
; 674  :             if (validate_expr_tree(tree))

  00078	48 8b cb	 mov	 rcx, rbx
  0007b	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  00080	75 13		 jne	 SHORT $LN13@parser_tup
  00082	e8 00 00 00 00	 call	 validate_expr_tree

; 675  :                 st = parser_newstobject(tree, PyST_EXPR);

  00087	48 8b cb	 mov	 rcx, rbx
  0008a	85 c0		 test	 eax, eax
  0008c	74 1a		 je	 SHORT $LN12@parser_tup
  0008e	ba 01 00 00 00	 mov	 edx, 1

; 676  :             else

  00093	eb 32		 jmp	 SHORT $LN20@parser_tup
$LN13@parser_tup:

; 677  :                 PyNode_Free(tree);
; 678  :         }
; 679  :         else if (start_sym == file_input) {

  00095	3d 01 01 00 00	 cmp	 eax, 257		; 00000101H
  0009a	75 13		 jne	 SHORT $LN9@parser_tup

; 680  :             /*  This looks like an exec form so far.  */
; 681  :             if (validate_file_input(tree))

  0009c	e8 00 00 00 00	 call	 validate_file_input

; 682  :                 st = parser_newstobject(tree, PyST_SUITE);

  000a1	48 8b cb	 mov	 rcx, rbx
  000a4	85 c0		 test	 eax, eax

; 683  :             else

  000a6	75 1a		 jne	 SHORT $LN21@parser_tup
$LN12@parser_tup:

; 684  :                 PyNode_Free(tree);

  000a8	e8 00 00 00 00	 call	 PyNode_Free

; 685  :         }
; 686  :         else if (start_sym == encoding_decl) {

  000ad	eb 38		 jmp	 SHORT $LN19@parser_tup
$LN9@parser_tup:
  000af	3d 4f 01 00 00	 cmp	 eax, 335		; 0000014fH
  000b4	75 20		 jne	 SHORT $LN5@parser_tup

; 687  :             /* This looks like an encoding_decl so far. */
; 688  :             if (validate_encoding_decl(tree))

  000b6	e8 00 00 00 00	 call	 validate_encoding_decl

; 689  :                 st = parser_newstobject(tree, PyST_SUITE);

  000bb	48 8b cb	 mov	 rcx, rbx
  000be	85 c0		 test	 eax, eax
  000c0	74 e6		 je	 SHORT $LN12@parser_tup
$LN21@parser_tup:
  000c2	ba 02 00 00 00	 mov	 edx, 2
$LN20@parser_tup:
  000c7	e8 00 00 00 00	 call	 parser_newstobject
  000cc	48 8b f8	 mov	 rdi, rax

; 697  :         }
; 698  :     }
; 699  :     /*  Make sure we raise an exception on all errors.  We should never
; 700  :      *  get this, but we'd do well to be sure something is done.
; 701  :      */
; 702  :     if (st == NULL && !PyErr_Occurred())

  000cf	48 85 c0	 test	 rax, rax
  000d2	75 29		 jne	 SHORT $LN1@parser_tup
  000d4	eb 11		 jmp	 SHORT $LN19@parser_tup
$LN5@parser_tup:

; 690  :             else
; 691  :                 PyNode_Free(tree);
; 692  :         }
; 693  :         else {
; 694  :             /*  This is a fragment, at best. */
; 695  :             PyNode_Free(tree);

  000d6	e8 00 00 00 00	 call	 PyNode_Free

; 696  :             err_string("parse tree does not use a valid start symbol");

  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@CHBJDMFA@parse?5tree?5does?5not?5use?5a?5valid?5@
  000e2	e8 00 00 00 00	 call	 err_string
$LN19@parser_tup:

; 697  :         }
; 698  :     }
; 699  :     /*  Make sure we raise an exception on all errors.  We should never
; 700  :      *  get this, but we'd do well to be sure something is done.
; 701  :      */
; 702  :     if (st == NULL && !PyErr_Occurred())

  000e7	e8 00 00 00 00	 call	 PyErr_Occurred
  000ec	48 85 c0	 test	 rax, rax
  000ef	75 0c		 jne	 SHORT $LN1@parser_tup

; 703  :         err_string("unspecified ST error occurred");

  000f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@MIOHNAME@unspecified?5ST?5error?5occurred?$AA@
  000f8	e8 00 00 00 00	 call	 err_string
$LN1@parser_tup:

; 704  : 
; 705  :     return st;

  000fd	48 8b c7	 mov	 rax, rdi
  00100	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 706  : }

  00105	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00109	5f		 pop	 rdi
  0010a	c3		 ret	 0
parser_tuple2st ENDP
_TEXT	ENDS
END
