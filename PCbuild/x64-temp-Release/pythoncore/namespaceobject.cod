; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_09KPMGAFNI@namespace?$AA@			; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
PUBLIC	_PyNamespace_Type
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericSetAttr:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_09KPMGAFNI@namespace?$AA@
CONST	SEGMENT
??_C@_09KPMGAFNI@namespace?$AA@ DB 'namespace', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
namespace_members DQ FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
namespace_doc DB 'A simple attribute-based namespace.', 0aH, 0aH, 'namesp'
	DB	'ace(**kwargs)', 00H
	ORG $+7
_PyNamespace_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09KPMGAFNI@namespace?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:namespace_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:namespace_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:namespace_doc
	DQ	FLAT:namespace_traverse
	DQ	FLAT:namespace_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:namespace_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000060H
	DQ	FLAT:namespace_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:namespace_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
_DATA	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyDict_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\namespaceobject.c
pdata	SEGMENT
$pdata$namespace_new DD imagerel namespace_new
	DD	imagerel namespace_new+64
	DD	imagerel $unwind$namespace_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$namespace_new DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT namespace_new
_TEXT	SEGMENT
type$ = 48
args$ = 56
kwds$ = 64
namespace_new PROC					; COMDAT

; 23   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c1	 mov	 rax, rcx

; 24   :     PyObject *self;
; 25   : 
; 26   :     assert(type != NULL && type->tp_alloc != NULL);
; 27   :     self = type->tp_alloc(type, 0);

  00009	33 d2		 xor	 edx, edx
  0000b	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00011	48 8b d8	 mov	 rbx, rax

; 28   :     if (self != NULL) {

  00014	48 85 c0	 test	 rax, rax
  00017	74 1e		 je	 SHORT $LN1@namespace_

; 29   :         _PyNamespaceObject *ns = (_PyNamespaceObject *)self;
; 30   :         ns->ns_dict = PyDict_New();

  00019	e8 00 00 00 00	 call	 PyDict_New
  0001e	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 31   :         if (ns->ns_dict == NULL) {

  00022	48 85 c0	 test	 rax, rax
  00025	75 10		 jne	 SHORT $LN1@namespace_

; 32   :             Py_DECREF(ns);

  00027	48 8b cb	 mov	 rcx, rbx
  0002a	e8 00 00 00 00	 call	 _Py_DecRef

; 33   :             return NULL;

  0002f	33 c0		 xor	 eax, eax

; 37   : }

  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5b		 pop	 rbx
  00036	c3		 ret	 0
$LN1@namespace_:

; 34   :         }
; 35   :     }
; 36   :     return self;

  00037	48 8b c3	 mov	 rax, rbx

; 37   : }

  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5b		 pop	 rbx
  0003f	c3		 ret	 0
namespace_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@JAMNJANN@no?5positional?5arguments?5expected@ ; `string'
EXTRN	PyDict_Update:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyObject_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$namespace_init DD imagerel namespace_init
	DD	imagerel namespace_init+110
	DD	imagerel $unwind$namespace_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$namespace_init DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CB@JAMNJANN@no?5positional?5arguments?5expected@
CONST	SEGMENT
??_C@_0CB@JAMNJANN@no?5positional?5arguments?5expected@ DB 'no positional'
	DB	' arguments expected', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT namespace_init
_TEXT	SEGMENT
ns$ = 48
args$ = 56
kwds$ = 64
namespace_init PROC					; COMDAT

; 42   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	49 8b d8	 mov	 rbx, r8
  0000d	48 8b f9	 mov	 rdi, rcx

; 43   :     /* ignore args if it's NULL or empty */
; 44   :     if (args != NULL) {

  00010	48 85 d2	 test	 rdx, rdx
  00013	74 30		 je	 SHORT $LN2@namespace_@2

; 45   :         Py_ssize_t argcount = PyObject_Size(args);

  00015	48 8b ca	 mov	 rcx, rdx
  00018	e8 00 00 00 00	 call	 PyObject_Size

; 46   :         if (argcount < 0)

  0001d	48 85 c0	 test	 rax, rax

; 47   :             return argcount;

  00020	78 41		 js	 SHORT $LN6@namespace_@2

; 48   :         else if (argcount > 0) {

  00022	7e 21		 jle	 SHORT $LN2@namespace_@2

; 49   :             PyErr_Format(PyExc_TypeError, "no positional arguments expected");

  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@JAMNJANN@no?5positional?5arguments?5expected@
  00032	e8 00 00 00 00	 call	 PyErr_Format

; 50   :             return -1;

  00037	83 c8 ff	 or	 eax, -1

; 56   : }

  0003a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
$LN2@namespace_@2:

; 51   :         }
; 52   :     }
; 53   :     if (kwds == NULL)

  00045	48 85 db	 test	 rbx, rbx
  00048	75 0d		 jne	 SHORT $LN1@namespace_@2

; 54   :         return 0;

  0004a	33 c0		 xor	 eax, eax

; 56   : }

  0004c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00051	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00055	5f		 pop	 rdi
  00056	c3		 ret	 0
$LN1@namespace_@2:

; 55   :     return PyDict_Update(ns->ns_dict, kwds);

  00057	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  0005b	48 8b d3	 mov	 rdx, rbx
  0005e	e8 00 00 00 00	 call	 PyDict_Update
$LN6@namespace_@2:

; 56   : }

  00063	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00068	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006c	5f		 pop	 rdi
  0006d	c3		 ret	 0
namespace_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@HBADEODF@namespace_dealloc?$AA@	; `string'
PUBLIC	??_C@_0BN@HEJHJKIG@?4?4?2Objects?2namespaceobject?4c?$AA@ ; `string'
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$namespace_dealloc DD imagerel namespace_dealloc
	DD	imagerel namespace_dealloc+64
	DD	imagerel $unwind$namespace_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$namespace_dealloc DD imagerel namespace_dealloc+64
	DD	imagerel namespace_dealloc+187
	DD	imagerel $chain$0$namespace_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$namespace_dealloc DD imagerel namespace_dealloc+187
	DD	imagerel namespace_dealloc+206
	DD	imagerel $chain$1$namespace_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$namespace_dealloc DD 021H
	DD	imagerel namespace_dealloc
	DD	imagerel namespace_dealloc+64
	DD	imagerel $unwind$namespace_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$namespace_dealloc DD 020521H
	DD	083405H
	DD	imagerel namespace_dealloc
	DD	imagerel namespace_dealloc+64
	DD	imagerel $unwind$namespace_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$namespace_dealloc DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0BC@HBADEODF@namespace_dealloc?$AA@
CONST	SEGMENT
??_C@_0BC@HBADEODF@namespace_dealloc?$AA@ DB 'namespace_dealloc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HEJHJKIG@?4?4?2Objects?2namespaceobject?4c?$AA@
CONST	SEGMENT
??_C@_0BN@HEJHJKIG@?4?4?2Objects?2namespaceobject?4c?$AA@ DB '..\Objects\'
	DB	'namespaceobject.c', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\namespaceobject.c
CONST	ENDS
;	COMDAT namespace_dealloc
_TEXT	SEGMENT
ns$ = 64
namespace_dealloc PROC					; COMDAT

; 61   : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f9	 mov	 rdi, rcx

; 62   :     PyObject_GC_UnTrack(ns);

  00009	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 63   :     Py_CLEAR(ns->ns_dict);

  0000e	4c 8b 4f 60	 mov	 r9, QWORD PTR [rdi+96]
  00012	4d 85 c9	 test	 r9, r9
  00015	0f 84 a0 00 00
	00		 je	 $LN3@namespace_@3
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@HEJHJKIG@?4?4?2Objects?2namespaceobject?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@HBADEODF@namespace_dealloc?$AA@
  00029	41 b8 3f 00 00
	00		 mov	 r8d, 63			; 0000003fH
  0002f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00037	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003c	85 c0		 test	 eax, eax
  0003e	75 7b		 jne	 SHORT $LN3@namespace_@3
  00040	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00045	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00049	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0
  00051	e8 00 00 00 00	 call	 _Py_PXCTX
  00056	85 c0		 test	 eax, eax
  00058	75 5c		 jne	 SHORT $LN18@namespace_@3
  0005a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0005e	a8 20		 test	 al, 32			; 00000020H
  00060	75 4c		 jne	 SHORT $LN11@namespace_@3
  00062	84 c0		 test	 al, al
  00064	78 48		 js	 SHORT $LN11@namespace_@3
  00066	a8 02		 test	 al, 2
  00068	75 4c		 jne	 SHORT $LN18@namespace_@3
  0006a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0006e	75 46		 jne	 SHORT $LN18@namespace_@3
  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0007e	4c 8b cb	 mov	 r9, rbx
  00081	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00087	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00094	48 8b cb	 mov	 rcx, rbx
  00097	85 c0		 test	 eax, eax
  00099	74 07		 je	 SHORT $LN16@namespace_@3
  0009b	e8 00 00 00 00	 call	 _Px_Dealloc
  000a0	eb 14		 jmp	 SHORT $LN18@namespace_@3
$LN16@namespace_@3:
  000a2	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000ac	eb 08		 jmp	 SHORT $LN18@namespace_@3
$LN11@namespace_@3:
  000ae	48 8b cb	 mov	 rcx, rbx
  000b1	e8 00 00 00 00	 call	 Px_DecRef
$LN18@namespace_@3:
  000b6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN3@namespace_@3:

; 64   :     Py_TYPE(ns)->tp_free((PyObject *)ns);

  000bb	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000bf	48 8b cf	 mov	 rcx, rdi

; 65   : }

  000c2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c6	5f		 pop	 rdi
  000c7	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
namespace_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_06DOEBHNBO@?$CFs?$CI?$CFS?$CJ?$AA@	; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_05NCKFOEGD@?$CFS?$DN?$CFR?$AA@		; `string'
PUBLIC	??_C@_0P@JBJALEEM@namespace?$CI?4?4?4?$CJ?$AA@	; `string'
EXTRN	Py_ReprLeave:PROC
EXTRN	PyUnicode_Join:PROC
EXTRN	PyList_Append:PROC
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyDict_GetItem:PROC
EXTRN	PyUnicode_AsUnicode:PROC
EXTRN	PyIter_Next:PROC
EXTRN	PyObject_GetIter:PROC
EXTRN	PyList_Sort:PROC
EXTRN	PyDict_Keys:PROC
EXTRN	PyList_New:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	Py_ReprEnter:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$namespace_repr DD imagerel namespace_repr
	DD	imagerel namespace_repr+90
	DD	imagerel $unwind$namespace_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$namespace_repr DD imagerel namespace_repr+90
	DD	imagerel namespace_repr+222
	DD	imagerel $chain$2$namespace_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$namespace_repr DD imagerel namespace_repr+222
	DD	imagerel namespace_repr+520
	DD	imagerel $chain$3$namespace_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$namespace_repr DD imagerel namespace_repr+520
	DD	imagerel namespace_repr+739
	DD	imagerel $chain$4$namespace_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$namespace_repr DD imagerel namespace_repr+739
	DD	imagerel namespace_repr+850
	DD	imagerel $chain$5$namespace_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$namespace_repr DD imagerel namespace_repr+850
	DD	imagerel namespace_repr+981
	DD	imagerel $chain$6$namespace_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$namespace_repr DD 021H
	DD	imagerel namespace_repr
	DD	imagerel namespace_repr+90
	DD	imagerel $unwind$namespace_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$namespace_repr DD 020021H
	DD	06e400H
	DD	imagerel namespace_repr
	DD	imagerel namespace_repr+90
	DD	imagerel $unwind$namespace_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$namespace_repr DD 021H
	DD	imagerel namespace_repr+90
	DD	imagerel namespace_repr+222
	DD	imagerel $chain$2$namespace_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$namespace_repr DD 020521H
	DD	0e6405H
	DD	imagerel namespace_repr+90
	DD	imagerel namespace_repr+222
	DD	imagerel $chain$2$namespace_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$namespace_repr DD 040e21H
	DD	06e40eH
	DD	0c5405H
	DD	imagerel namespace_repr
	DD	imagerel namespace_repr+90
	DD	imagerel $unwind$namespace_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$namespace_repr DD 074901H
	DD	0fd449H
	DD	0f007620bH
	DD	07003c005H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_06DOEBHNBO@?$CFs?$CI?$CFS?$CJ?$AA@
CONST	SEGMENT
??_C@_06DOEBHNBO@?$CFs?$CI?$CFS?$CJ?$AA@ DB '%s(%S)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NCKFOEGD@?$CFS?$DN?$CFR?$AA@
CONST	SEGMENT
??_C@_05NCKFOEGD@?$CFS?$DN?$CFR?$AA@ DB '%S=%R', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JBJALEEM@namespace?$CI?4?4?4?$CJ?$AA@
CONST	SEGMENT
??_C@_0P@JBJALEEM@namespace?$CI?4?4?4?$CJ?$AA@ DB 'namespace(...)', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\namespaceobject.c
CONST	ENDS
;	COMDAT namespace_repr
_TEXT	SEGMENT
ns$ = 96
repr$1$ = 104
namespace_repr PROC					; COMDAT

; 70   : {

  00000	40 53		 push	 rbx
  00002	57		 push	 rdi
  00003	41 54		 push	 r12
  00005	41 57		 push	 r15
  00007	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 71   :     int i, loop_error = 0;

  0000b	33 ff		 xor	 edi, edi
  0000d	4c 8b f9	 mov	 r15, rcx

; 72   :     PyObject *pairs = NULL, *d = NULL, *keys = NULL, *keys_iter = NULL;
; 73   :     PyObject *key;
; 74   :     PyObject *separator, *pairsrepr, *repr = NULL;

  00010	8b df		 mov	 ebx, edi
  00012	44 8b e7	 mov	 r12d, edi
  00015	48 89 5c 24 68	 mov	 QWORD PTR repr$1$[rsp], rbx

; 75   : 
; 76   :     i = Py_ReprEnter((PyObject *)ns);

  0001a	e8 00 00 00 00	 call	 Py_ReprEnter

; 77   :     if (i != 0) {

  0001f	85 c0		 test	 eax, eax
  00021	74 1f		 je	 SHORT $LN29@namespace_@4

; 78   :         return i > 0 ? PyUnicode_FromString("namespace(...)") : NULL;

  00023	7e 0f		 jle	 SHORT $LN32@namespace_@4
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@JBJALEEM@namespace?$CI?4?4?4?$CJ?$AA@
  0002c	e8 00 00 00 00	 call	 PyUnicode_FromString
  00031	48 8b f8	 mov	 rdi, rax
$LN32@namespace_@4:
  00034	48 8b c7	 mov	 rax, rdi

; 142  : }

  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	41 5f		 pop	 r15
  0003d	41 5c		 pop	 r12
  0003f	5f		 pop	 rdi
  00040	5b		 pop	 rbx
  00041	c3		 ret	 0
$LN29@namespace_@4:

; 79   :     }
; 80   : 
; 81   :     pairs = PyList_New(0);

  00042	33 c9		 xor	 ecx, ecx
  00044	4c 89 6c 24 78	 mov	 QWORD PTR [rsp+120], r13
  00049	e8 00 00 00 00	 call	 PyList_New
  0004e	4c 8b e8	 mov	 r13, rax

; 82   :     if (pairs == NULL)

  00051	48 85 c0	 test	 rax, rax
  00054	0f 84 60 03 00
	00		 je	 $LN3@namespace_@4

; 83   :         goto error;
; 84   : 
; 85   :     d = ((_PyNamespaceObject *)ns)->ns_dict;

  0005a	48 89 6c 24 60	 mov	 QWORD PTR [rsp+96], rbp
  0005f	49 8b 6f 60	 mov	 rbp, QWORD PTR [r15+96]
  00063	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14

; 86   :     assert(d != NULL);
; 87   :     Py_INCREF(d);

  00068	e8 00 00 00 00	 call	 _Py_PXCTX
  0006d	85 c0		 test	 eax, eax
  0006f	75 32		 jne	 SHORT $LN41@namespace_@4
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0007f	4c 8b cd	 mov	 r9, rbp
  00082	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00088	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00090	e8 00 00 00 00	 call	 _PyParallel_Guard
  00095	85 c0		 test	 eax, eax
  00097	75 06		 jne	 SHORT $LN40@namespace_@4
  00099	f6 45 20 20	 test	 BYTE PTR [rbp+32], 32	; 00000020H
  0009d	74 04		 je	 SHORT $LN41@namespace_@4
$LN40@namespace_@4:
  0009f	48 ff 45 50	 inc	 QWORD PTR [rbp+80]
$LN41@namespace_@4:

; 88   : 
; 89   :     keys = PyDict_Keys(d);

  000a3	48 8b cd	 mov	 rcx, rbp
  000a6	e8 00 00 00 00	 call	 PyDict_Keys
  000ab	4c 8b f0	 mov	 r14, rax

; 90   :     if (keys == NULL)

  000ae	48 85 c0	 test	 rax, rax
  000b1	0f 84 51 01 00
	00		 je	 $error$20303

; 91   :         goto error;
; 92   :     if (PyList_Sort(keys) != 0)

  000b7	48 8b c8	 mov	 rcx, rax
  000ba	e8 00 00 00 00	 call	 PyList_Sort
  000bf	85 c0		 test	 eax, eax
  000c1	0f 85 41 01 00
	00		 jne	 $error$20303

; 93   :         goto error;
; 94   : 
; 95   :     keys_iter = PyObject_GetIter(keys);

  000c7	49 8b ce	 mov	 rcx, r14
  000ca	e8 00 00 00 00	 call	 PyObject_GetIter
  000cf	4c 8b e0	 mov	 r12, rax

; 96   :     if (keys_iter == NULL)

  000d2	48 85 c0	 test	 rax, rax
  000d5	0f 84 2d 01 00
	00		 je	 $error$20303

; 97   :         goto error;
; 98   : 
; 99   :     while ((key = PyIter_Next(keys_iter)) != NULL) {

  000db	48 8b c8	 mov	 rcx, rax
  000de	48 89 74 24 70	 mov	 QWORD PTR [rsp+112], rsi
  000e3	e8 00 00 00 00	 call	 PyIter_Next
  000e8	48 8b d8	 mov	 rbx, rax
  000eb	48 85 c0	 test	 rax, rax
  000ee	0f 84 b7 00 00
	00		 je	 $LN23@namespace_@4
  000f4	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL24@namespace_@4:

; 100  :         if (PyUnicode_Check(key) && PyUnicode_GET_SIZE(key) > 0) {

  00100	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  00104	f7 81 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rcx+256], 268435456 ; 10000000H
  0010e	74 7b		 je	 SHORT $LN20@namespace_@4
  00110	48 83 7b 78 00	 cmp	 QWORD PTR [rbx+120], 0
  00115	74 0b		 je	 SHORT $LN38@namespace_@4
  00117	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  0011a	a8 40		 test	 al, 64			; 00000040H
  0011c	74 22		 je	 SHORT $LN36@namespace_@4
  0011e	a8 20		 test	 al, 32			; 00000020H
  00120	eb 16		 jmp	 SHORT $LN95@namespace_@4
$LN38@namespace_@4:
  00122	48 8b cb	 mov	 rcx, rbx
  00125	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  0012a	44 8b 5b 70	 mov	 r11d, DWORD PTR [rbx+112]
  0012e	41 f6 c3 40	 test	 r11b, 64		; 00000040H
  00132	74 0c		 je	 SHORT $LN36@namespace_@4
  00134	41 f6 c3 20	 test	 r11b, 32		; 00000020H
$LN95@namespace_@4:
  00138	74 06		 je	 SHORT $LN36@namespace_@4
  0013a	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0013e	eb 07		 jmp	 SHORT $LN37@namespace_@4
$LN36@namespace_@4:
  00140	48 8b 83 90 00
	00 00		 mov	 rax, QWORD PTR [rbx+144]
$LN37@namespace_@4:
  00147	48 85 c0	 test	 rax, rax
  0014a	7e 3f		 jle	 SHORT $LN20@namespace_@4

; 101  :             PyObject *value, *item;
; 102  : 
; 103  :             value = PyDict_GetItem(d, key);

  0014c	48 8b d3	 mov	 rdx, rbx
  0014f	48 8b cd	 mov	 rcx, rbp
  00152	e8 00 00 00 00	 call	 PyDict_GetItem

; 104  :             assert(value != NULL);
; 105  : 
; 106  :             item = PyUnicode_FromFormat("%S=%R", key, value);

  00157	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NCKFOEGD@?$CFS?$DN?$CFR?$AA@
  0015e	48 8b d3	 mov	 rdx, rbx
  00161	4c 8b c0	 mov	 r8, rax
  00164	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00169	48 8b f0	 mov	 rsi, rax

; 107  :             if (item == NULL) {

  0016c	48 85 c0	 test	 rax, rax
  0016f	75 05		 jne	 SHORT $LN21@namespace_@4

; 108  :                 loop_error = 1;

  00171	8d 78 01	 lea	 edi, QWORD PTR [rax+1]

; 109  :             }
; 110  :             else {

  00174	eb 15		 jmp	 SHORT $LN20@namespace_@4
$LN21@namespace_@4:

; 111  :                 loop_error = PyList_Append(pairs, item);

  00176	48 8b d0	 mov	 rdx, rax
  00179	49 8b cd	 mov	 rcx, r13
  0017c	e8 00 00 00 00	 call	 PyList_Append

; 112  :                 Py_DECREF(item);

  00181	48 8b ce	 mov	 rcx, rsi
  00184	8b f8		 mov	 edi, eax
  00186	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@namespace_@4:

; 113  :             }
; 114  :         }
; 115  : 
; 116  :         Py_DECREF(key);

  0018b	48 8b cb	 mov	 rcx, rbx
  0018e	e8 00 00 00 00	 call	 _Py_DecRef

; 117  :         if (loop_error)

  00193	85 ff		 test	 edi, edi
  00195	75 67		 jne	 SHORT $LN92@namespace_@4

; 97   :         goto error;
; 98   : 
; 99   :     while ((key = PyIter_Next(keys_iter)) != NULL) {

  00197	49 8b cc	 mov	 rcx, r12
  0019a	e8 00 00 00 00	 call	 PyIter_Next
  0019f	48 8b d8	 mov	 rbx, rax
  001a2	48 85 c0	 test	 rax, rax
  001a5	0f 85 55 ff ff
	ff		 jne	 $LL24@namespace_@4
$LN23@namespace_@4:

; 118  :             goto error;
; 119  :     }
; 120  : 
; 121  :     separator = PyUnicode_FromString(", ");

  001ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02KEGNLNML@?0?5?$AA@
  001b2	e8 00 00 00 00	 call	 PyUnicode_FromString
  001b7	48 8b d8	 mov	 rbx, rax

; 122  :     if (separator == NULL)

  001ba	48 85 c0	 test	 rax, rax
  001bd	74 3f		 je	 SHORT $LN92@namespace_@4

; 123  :         goto error;
; 124  : 
; 125  :     pairsrepr = PyUnicode_Join(separator, pairs);

  001bf	49 8b d5	 mov	 rdx, r13
  001c2	48 8b c8	 mov	 rcx, rax
  001c5	e8 00 00 00 00	 call	 PyUnicode_Join

; 126  :     Py_DECREF(separator);

  001ca	48 8b cb	 mov	 rcx, rbx
  001cd	48 8b f8	 mov	 rdi, rax
  001d0	e8 00 00 00 00	 call	 _Py_DecRef

; 127  :     if (pairsrepr == NULL)

  001d5	48 85 ff	 test	 rdi, rdi
  001d8	74 24		 je	 SHORT $LN92@namespace_@4

; 128  :         goto error;
; 129  : 
; 130  :     repr = PyUnicode_FromFormat("%s(%S)",
; 131  :                                 ((PyObject *)ns)->ob_type->tp_name, pairsrepr);

  001da	49 8b 57 58	 mov	 rdx, QWORD PTR [r15+88]
  001de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DOEBHNBO@?$CFs?$CI?$CFS?$CJ?$AA@
  001e5	4c 8b c7	 mov	 r8, rdi
  001e8	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  001ec	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 132  :     Py_DECREF(pairsrepr);

  001f1	48 8b cf	 mov	 rcx, rdi
  001f4	48 8b d8	 mov	 rbx, rax
  001f7	e8 00 00 00 00	 call	 _Py_DecRef
  001fc	eb 05		 jmp	 SHORT $LN93@namespace_@4
$LN92@namespace_@4:

; 72   :     PyObject *pairs = NULL, *d = NULL, *keys = NULL, *keys_iter = NULL;
; 73   :     PyObject *key;
; 74   :     PyObject *separator, *pairsrepr, *repr = NULL;

  001fe	48 8b 5c 24 68	 mov	 rbx, QWORD PTR repr$1$[rsp]
$LN93@namespace_@4:
  00203	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
$error$20303:

; 133  : 
; 134  : error:
; 135  :     Py_XDECREF(pairs);

  00208	e8 00 00 00 00	 call	 _Py_PXCTX
  0020d	85 c0		 test	 eax, eax
  0020f	75 5e		 jne	 SHORT $LN15@namespace_@4
  00211	49 8b 4d 20	 mov	 rcx, QWORD PTR [r13+32]
  00215	f6 c1 20	 test	 cl, 32			; 00000020H
  00218	75 4d		 jne	 SHORT $LN48@namespace_@4
  0021a	84 c9		 test	 cl, cl
  0021c	78 49		 js	 SHORT $LN48@namespace_@4
  0021e	f6 c1 02	 test	 cl, 2
  00221	75 4c		 jne	 SHORT $LN15@namespace_@4
  00223	49 ff 4d 50	 dec	 QWORD PTR [r13+80]
  00227	75 46		 jne	 SHORT $LN15@namespace_@4
  00229	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00230	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00237	4d 8b cd	 mov	 r9, r13
  0023a	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00240	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00248	e8 00 00 00 00	 call	 _PyParallel_Guard
  0024d	49 8b cd	 mov	 rcx, r13
  00250	85 c0		 test	 eax, eax
  00252	74 07		 je	 SHORT $LN53@namespace_@4
  00254	e8 00 00 00 00	 call	 _Px_Dealloc
  00259	eb 14		 jmp	 SHORT $LN15@namespace_@4
$LN53@namespace_@4:
  0025b	49 8b 45 58	 mov	 rax, QWORD PTR [r13+88]
  0025f	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00265	eb 08		 jmp	 SHORT $LN15@namespace_@4
$LN48@namespace_@4:
  00267	49 8b cd	 mov	 rcx, r13
  0026a	e8 00 00 00 00	 call	 Px_DecRef
$LN15@namespace_@4:

; 136  :     Py_XDECREF(d);

  0026f	48 85 ed	 test	 rbp, rbp
  00272	74 65		 je	 SHORT $LN11@namespace_@4
  00274	e8 00 00 00 00	 call	 _Py_PXCTX
  00279	85 c0		 test	 eax, eax
  0027b	75 5c		 jne	 SHORT $LN11@namespace_@4
  0027d	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  00281	a8 20		 test	 al, 32			; 00000020H
  00283	75 4c		 jne	 SHORT $LN59@namespace_@4
  00285	84 c0		 test	 al, al
  00287	78 48		 js	 SHORT $LN59@namespace_@4
  00289	a8 02		 test	 al, 2
  0028b	75 4c		 jne	 SHORT $LN11@namespace_@4
  0028d	48 ff 4d 50	 dec	 QWORD PTR [rbp+80]
  00291	75 46		 jne	 SHORT $LN11@namespace_@4
  00293	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0029a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  002a1	4c 8b cd	 mov	 r9, rbp
  002a4	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002aa	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002b2	e8 00 00 00 00	 call	 _PyParallel_Guard
  002b7	48 8b cd	 mov	 rcx, rbp
  002ba	85 c0		 test	 eax, eax
  002bc	74 07		 je	 SHORT $LN64@namespace_@4
  002be	e8 00 00 00 00	 call	 _Px_Dealloc
  002c3	eb 14		 jmp	 SHORT $LN11@namespace_@4
$LN64@namespace_@4:
  002c5	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  002c9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002cf	eb 08		 jmp	 SHORT $LN11@namespace_@4
$LN59@namespace_@4:
  002d1	48 8b cd	 mov	 rcx, rbp
  002d4	e8 00 00 00 00	 call	 Px_DecRef
$LN11@namespace_@4:

; 137  :     Py_XDECREF(keys);

  002d9	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  002de	4d 85 f6	 test	 r14, r14
  002e1	74 65		 je	 SHORT $LN7@namespace_@4
  002e3	e8 00 00 00 00	 call	 _Py_PXCTX
  002e8	85 c0		 test	 eax, eax
  002ea	75 5c		 jne	 SHORT $LN7@namespace_@4
  002ec	49 8b 46 20	 mov	 rax, QWORD PTR [r14+32]
  002f0	a8 20		 test	 al, 32			; 00000020H
  002f2	75 4c		 jne	 SHORT $LN70@namespace_@4
  002f4	84 c0		 test	 al, al
  002f6	78 48		 js	 SHORT $LN70@namespace_@4
  002f8	a8 02		 test	 al, 2
  002fa	75 4c		 jne	 SHORT $LN7@namespace_@4
  002fc	49 ff 4e 50	 dec	 QWORD PTR [r14+80]
  00300	75 46		 jne	 SHORT $LN7@namespace_@4
  00302	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00309	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00310	4d 8b ce	 mov	 r9, r14
  00313	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00319	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00321	e8 00 00 00 00	 call	 _PyParallel_Guard
  00326	49 8b ce	 mov	 rcx, r14
  00329	85 c0		 test	 eax, eax
  0032b	74 07		 je	 SHORT $LN75@namespace_@4
  0032d	e8 00 00 00 00	 call	 _Px_Dealloc
  00332	eb 14		 jmp	 SHORT $LN7@namespace_@4
$LN75@namespace_@4:
  00334	49 8b 46 58	 mov	 rax, QWORD PTR [r14+88]
  00338	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0033e	eb 08		 jmp	 SHORT $LN7@namespace_@4
$LN70@namespace_@4:
  00340	49 8b ce	 mov	 rcx, r14
  00343	e8 00 00 00 00	 call	 Px_DecRef
$LN7@namespace_@4:

; 138  :     Py_XDECREF(keys_iter);

  00348	4c 8b 74 24 30	 mov	 r14, QWORD PTR [rsp+48]
  0034d	4d 85 e4	 test	 r12, r12
  00350	74 68		 je	 SHORT $LN3@namespace_@4
  00352	e8 00 00 00 00	 call	 _Py_PXCTX
  00357	85 c0		 test	 eax, eax
  00359	75 5f		 jne	 SHORT $LN3@namespace_@4
  0035b	49 8b 44 24 20	 mov	 rax, QWORD PTR [r12+32]
  00360	a8 20		 test	 al, 32			; 00000020H
  00362	75 4e		 jne	 SHORT $LN81@namespace_@4
  00364	84 c0		 test	 al, al
  00366	78 4a		 js	 SHORT $LN81@namespace_@4
  00368	a8 02		 test	 al, 2
  0036a	75 4e		 jne	 SHORT $LN3@namespace_@4
  0036c	49 ff 4c 24 50	 dec	 QWORD PTR [r12+80]
  00371	75 47		 jne	 SHORT $LN3@namespace_@4
  00373	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0037a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00381	4d 8b cc	 mov	 r9, r12
  00384	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0038a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00392	e8 00 00 00 00	 call	 _PyParallel_Guard
  00397	49 8b cc	 mov	 rcx, r12
  0039a	85 c0		 test	 eax, eax
  0039c	74 07		 je	 SHORT $LN86@namespace_@4
  0039e	e8 00 00 00 00	 call	 _Px_Dealloc
  003a3	eb 15		 jmp	 SHORT $LN3@namespace_@4
$LN86@namespace_@4:
  003a5	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]
  003aa	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003b0	eb 08		 jmp	 SHORT $LN3@namespace_@4
$LN81@namespace_@4:
  003b2	49 8b cc	 mov	 rcx, r12
  003b5	e8 00 00 00 00	 call	 Px_DecRef
$LN3@namespace_@4:

; 139  :     Py_ReprLeave((PyObject *)ns);

  003ba	49 8b cf	 mov	 rcx, r15
  003bd	e8 00 00 00 00	 call	 Py_ReprLeave
  003c2	4c 8b 6c 24 78	 mov	 r13, QWORD PTR [rsp+120]

; 140  : 
; 141  :     return repr;

  003c7	48 8b c3	 mov	 rax, rbx

; 142  : }

  003ca	48 83 c4 38	 add	 rsp, 56			; 00000038H
  003ce	41 5f		 pop	 r15
  003d0	41 5c		 pop	 r12
  003d2	5f		 pop	 rdi
  003d3	5b		 pop	 rbx
  003d4	c3		 ret	 0
namespace_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@IFPOENHC@namespace_traverse?$AA@	; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$namespace_traverse DD imagerel namespace_traverse
	DD	imagerel namespace_traverse+97
	DD	imagerel $unwind$namespace_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$namespace_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BD@IFPOENHC@namespace_traverse?$AA@
CONST	SEGMENT
??_C@_0BD@IFPOENHC@namespace_traverse?$AA@ DB 'namespace_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT namespace_traverse
_TEXT	SEGMENT
ns$ = 48
visit$ = 56
arg$ = 64
namespace_traverse PROC					; COMDAT

; 147  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 148  :     Py_VISIT(ns->ns_dict);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@namespace_@5
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@HEJHJKIG@?4?4?2Objects?2namespaceobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@IFPOENHC@namespace_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 94 00 00
	00		 mov	 r8d, 148		; 00000094H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@namespace_@5:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@namespace_@5
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@namespace_@5
$LN5@namespace_@5:

; 149  :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@namespace_@5:

; 150  : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
namespace_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@OIFEHJAB@namespace_clear?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$namespace_clear DD imagerel namespace_clear
	DD	imagerel namespace_clear+63
	DD	imagerel $unwind$namespace_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$namespace_clear DD imagerel namespace_clear+63
	DD	imagerel namespace_clear+172
	DD	imagerel $chain$0$namespace_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$namespace_clear DD imagerel namespace_clear+172
	DD	imagerel namespace_clear+195
	DD	imagerel $chain$2$namespace_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$namespace_clear DD imagerel namespace_clear+195
	DD	imagerel namespace_clear+208
	DD	imagerel $chain$4$namespace_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$namespace_clear DD imagerel namespace_clear+208
	DD	imagerel namespace_clear+216
	DD	imagerel $chain$5$namespace_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$namespace_clear DD 021H
	DD	imagerel namespace_clear
	DD	imagerel namespace_clear+63
	DD	imagerel $unwind$namespace_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$namespace_clear DD 020021H
	DD	083400H
	DD	imagerel namespace_clear
	DD	imagerel namespace_clear+63
	DD	imagerel $unwind$namespace_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$namespace_clear DD 020021H
	DD	083400H
	DD	imagerel namespace_clear
	DD	imagerel namespace_clear+63
	DD	imagerel $unwind$namespace_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$namespace_clear DD 020521H
	DD	083405H
	DD	imagerel namespace_clear
	DD	imagerel namespace_clear+63
	DD	imagerel $unwind$namespace_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$namespace_clear DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0BA@OIFEHJAB@namespace_clear?$AA@
CONST	SEGMENT
??_C@_0BA@OIFEHJAB@namespace_clear?$AA@ DB 'namespace_clear', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\namespaceobject.c
CONST	ENDS
;	COMDAT namespace_clear
_TEXT	SEGMENT
ns$ = 64
namespace_clear PROC					; COMDAT

; 155  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 156  :     Py_CLEAR(ns->ns_dict);

  00006	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	4d 85 c9	 test	 r9, r9
  00010	0f 84 ba 00 00
	00		 je	 $LN21@namespace_@6
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@HEJHJKIG@?4?4?2Objects?2namespaceobject?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OIFEHJAB@namespace_clear?$AA@
  00024	41 b8 9c 00 00
	00		 mov	 r8d, 156		; 0000009cH
  0002a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00032	e8 00 00 00 00	 call	 _PyParallel_Guard
  00037	85 c0		 test	 eax, eax
  00039	0f 85 91 00 00
	00		 jne	 $LN21@namespace_@6
  0003f	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00044	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00048	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0
  00050	e8 00 00 00 00	 call	 _Py_PXCTX
  00055	85 c0		 test	 eax, eax
  00057	75 72		 jne	 SHORT $LN22@namespace_@6
  00059	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0005d	a8 20		 test	 al, 32			; 00000020H
  0005f	75 62		 jne	 SHORT $LN11@namespace_@6
  00061	84 c0		 test	 al, al
  00063	78 5e		 js	 SHORT $LN11@namespace_@6
  00065	a8 02		 test	 al, 2
  00067	75 62		 jne	 SHORT $LN22@namespace_@6
  00069	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0006d	75 5c		 jne	 SHORT $LN22@namespace_@6
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0007d	4c 8b cb	 mov	 r9, rbx
  00080	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00086	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00093	48 8b cb	 mov	 rcx, rbx
  00096	85 c0		 test	 eax, eax
  00098	74 12		 je	 SHORT $LN16@namespace_@6
  0009a	e8 00 00 00 00	 call	 _Px_Dealloc
  0009f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 157  :     return 0;

  000a4	33 c0		 xor	 eax, eax

; 158  : }

  000a6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0

; 156  :     Py_CLEAR(ns->ns_dict);

$LN16@namespace_@6:
  000ac	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000b0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000b6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 157  :     return 0;

  000bb	33 c0		 xor	 eax, eax

; 158  : }

  000bd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c1	5f		 pop	 rdi
  000c2	c3		 ret	 0

; 156  :     Py_CLEAR(ns->ns_dict);

$LN11@namespace_@6:
  000c3	48 8b cb	 mov	 rcx, rbx
  000c6	e8 00 00 00 00	 call	 Px_DecRef
$LN22@namespace_@6:
  000cb	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN21@namespace_@6:

; 157  :     return 0;

  000d0	33 c0		 xor	 eax, eax

; 158  : }

  000d2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d6	5f		 pop	 rdi
  000d7	c3		 ret	 0
namespace_clear ENDP
_TEXT	ENDS
PUBLIC	_PyNamespace_New
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyNamespace_New DD imagerel $LN7
	DD	imagerel $LN7+94
	DD	imagerel $unwind$_PyNamespace_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyNamespace_New DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyNamespace_New
_TEXT	SEGMENT
kwds$ = 48
_PyNamespace_New PROC					; COMDAT

; 212  : {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 213  :     PyObject *ns = namespace_new(&_PyNamespace_Type, NULL, NULL);

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyNamespace_Type
  00014	45 33 c0	 xor	 r8d, r8d
  00017	33 d2		 xor	 edx, edx
  00019	e8 00 00 00 00	 call	 namespace_new
  0001e	48 8b d8	 mov	 rbx, rax

; 214  :     if (ns == NULL)

  00021	48 85 c0	 test	 rax, rax

; 215  :         return NULL;

  00024	74 1d		 je	 SHORT $LN6@PyNamespac

; 216  : 
; 217  :     if (kwds == NULL)

  00026	48 85 ff	 test	 rdi, rdi

; 218  :         return ns;

  00029	74 28		 je	 SHORT $LN4@PyNamespac

; 219  :     if (PyDict_Update(((_PyNamespaceObject *)ns)->ns_dict, kwds) != 0) {

  0002b	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0002f	48 8b d7	 mov	 rdx, rdi
  00032	e8 00 00 00 00	 call	 PyDict_Update
  00037	85 c0		 test	 eax, eax
  00039	74 15		 je	 SHORT $LN1@PyNamespac

; 220  :         Py_DECREF(ns);

  0003b	48 8b cb	 mov	 rcx, rbx
  0003e	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@PyNamespac:

; 221  :         return NULL;

  00043	33 c0		 xor	 eax, eax

; 225  : }

  00045	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5f		 pop	 rdi
  0004f	c3		 ret	 0
$LN1@PyNamespac:

; 222  :     }
; 223  : 
; 224  :     return (PyObject *)ns;

  00050	48 8b c3	 mov	 rax, rbx
$LN4@PyNamespac:

; 225  : }

  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
_PyNamespace_New ENDP
_TEXT	ENDS
END
