; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	PyOS_vsnprintf
EXTRN	__imp__vsnprintf:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\mysnprintf.c
pdata	SEGMENT
$pdata$PyOS_vsnprintf DD imagerel $LN6
	DD	imagerel $LN6+59
	DD	imagerel $unwind$PyOS_vsnprintf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyOS_vsnprintf DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyOS_vsnprintf
_TEXT	SEGMENT
str$ = 48
size$ = 56
format$ = 64
va$ = 72
PyOS_vsnprintf PROC					; COMDAT

; 54   : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 55   :     int len;  /* # bytes written, excluding \0 */
; 56   : #ifdef HAVE_SNPRINTF
; 57   : #define _PyOS_vsnprintf_EXTRA_SPACE 1
; 58   : #else
; 59   : #define _PyOS_vsnprintf_EXTRA_SPACE 512
; 60   :     char *buffer;
; 61   : #endif
; 62   :     assert(str != NULL);
; 63   :     assert(size > 0);
; 64   :     assert(format != NULL);
; 65   :     /* We take a size_t as input but return an int.  Sanity check
; 66   :      * our input so that it won't cause an overflow in the
; 67   :      * vsnprintf return value or the buffer malloc size.  */
; 68   :     if (size > INT_MAX - _PyOS_vsnprintf_EXTRA_SPACE) {

  00010	48 81 fa fe ff
	ff 7f		 cmp	 rdx, 2147483646		; 7ffffffeH
  00017	76 07		 jbe	 SHORT $LN2@PyOS_vsnpr

; 69   :         len = -666;

  00019	b8 66 fd ff ff	 mov	 eax, -666		; fffffffffffffd66H

; 70   :         goto Done;

  0001e	eb 06		 jmp	 SHORT $Done$20204
$LN2@PyOS_vsnpr:

; 71   :     }
; 72   : 
; 73   : #ifdef HAVE_SNPRINTF
; 74   :     len = vsnprintf(str, size, format, va);

  00020	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__vsnprintf
$Done$20204:

; 75   : #else
; 76   :     /* Emulate it. */
; 77   :     buffer = PyMem_MALLOC(size + _PyOS_vsnprintf_EXTRA_SPACE);
; 78   :     if (buffer == NULL) {
; 79   :         len = -666;
; 80   :         goto Done;
; 81   :     }
; 82   : 
; 83   :     len = vsprintf(buffer, format, va);
; 84   :     if (len < 0)
; 85   :         /* ignore the error */;
; 86   : 
; 87   :     else if ((size_t)len >= size + _PyOS_vsnprintf_EXTRA_SPACE)
; 88   :         Py_FatalError("Buffer overflow in PyOS_snprintf/PyOS_vsnprintf");
; 89   : 
; 90   :     else {
; 91   :         const size_t to_copy = (size_t)len < size ?
; 92   :                                 (size_t)len : size - 1;
; 93   :         assert(to_copy < size);
; 94   :         memcpy(str, buffer, to_copy);
; 95   :         str[to_copy] = '\0';
; 96   :     }
; 97   :     PyMem_FREE(buffer);
; 98   : #endif
; 99   : Done:
; 100  :     if (size > 0)

  00026	48 85 db	 test	 rbx, rbx
  00029	74 05		 je	 SHORT $LN5@PyOS_vsnpr

; 101  :         str[size-1] = '\0';

  0002b	c6 44 1f ff 00	 mov	 BYTE PTR [rdi+rbx-1], 0
$LN5@PyOS_vsnpr:

; 102  :     return len;
; 103  : #undef _PyOS_vsnprintf_EXTRA_SPACE
; 104  : }

  00030	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5f		 pop	 rdi
  0003a	c3		 ret	 0
PyOS_vsnprintf ENDP
_TEXT	ENDS
PUBLIC	PyOS_snprintf
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyOS_snprintf DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$PyOS_snprintf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyOS_snprintf DD 010e01H
	DD	0420eH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyOS_snprintf
_TEXT	SEGMENT
str$ = 48
size$ = 56
format$ = 64
PyOS_snprintf PROC					; COMDAT

; 42   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 43   :     int rc;
; 44   :     va_list va;
; 45   : 
; 46   :     va_start(va, format);

  0000e	4c 8d 4c 24 48	 lea	 r9, QWORD PTR format$[rsp+8]

; 47   :     rc = PyOS_vsnprintf(str, size, format, va);

  00013	e8 00 00 00 00	 call	 PyOS_vsnprintf

; 48   :     va_end(va);
; 49   :     return rc;
; 50   : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
PyOS_snprintf ENDP
_TEXT	ENDS
END
