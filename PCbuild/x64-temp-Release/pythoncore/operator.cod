; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_08LHJFAFGD@operator?$AA@			; `string'
PUBLIC	??_C@_0BG@EMEAEPLI@operator?4methodcaller?$AA@	; `string'
PUBLIC	??_C@_0BE@CNOAMID@operator?4attrgetter?$AA@	; `string'
PUBLIC	??_C@_0BE@KGDNJIHD@operator?4itemgetter?$AA@	; `string'
PUBLIC	??_C@_0BA@CCHAPNEK@_compare_digest?$AA@		; `string'
PUBLIC	??_C@_06DHPPIHIH@__ge__?$AA@			; `string'
PUBLIC	??_C@_0BK@FPMEPBOP@ge?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DO?$DNb?4?$AA@ ; `string'
PUBLIC	??_C@_02FFKMGEKK@ge?$AA@			; `string'
PUBLIC	??_C@_06NPFKLHHN@__gt__?$AA@			; `string'
PUBLIC	??_C@_0BJ@NIMNJJGI@gt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DOb?4?$AA@ ; `string'
PUBLIC	??_C@_02GHFEHLK@gt?$AA@				; `string'
PUBLIC	??_C@_06DKOPOFPG@__ne__?$AA@			; `string'
PUBLIC	??_C@_0BK@PEAHKJH@ne?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$CB?$DNb?4?$AA@ ; `string'
PUBLIC	??_C@_02FKHNFPCF@ne?$AA@			; `string'
PUBLIC	??_C@_06JCEEBECP@__eq__?$AA@			; `string'
PUBLIC	??_C@_0BK@KOIEKNMF@eq?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DN?$DNb?4?$AA@ ; `string'
PUBLIC	??_C@_02HIIGGHJB@eq?$AA@			; `string'
PUBLIC	??_C@_06EACPLGJG@__le__?$AA@			; `string'
PUBLIC	??_C@_0BK@ICHKGCML@le?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DM?$DNb?4?$AA@ ; `string'
PUBLIC	??_C@_02FJPJILEL@le?$AA@			; `string'
PUBLIC	??_C@_06KIIKIGGM@__lt__?$AA@			; `string'
PUBLIC	??_C@_0BJ@GLCCHEAH@lt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DMb?4?$AA@ ; `string'
PUBLIC	??_C@_02KCAKIFL@lt?$AA@				; `string'
PUBLIC	??_C@_08JKFONAME@__ipow__?$AA@			; `string'
PUBLIC	??_C@_0CD@GFFFGOPL@a?5?$DN?5ipow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?$DN?5@ ; `string'
PUBLIC	??_C@_04OFDFNOGO@ipow?$AA@			; `string'
PUBLIC	??_C@_07HPCNAFMM@__pow__?$AA@			; `string'
PUBLIC	??_C@_0BN@NBBILNGN@pow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?5b?4?$AA@ ; `string'
PUBLIC	??_C@_03JGHBODFD@pow?$AA@			; `string'
PUBLIC	??_C@_0M@CEPPLJAO@__delitem__?$AA@		; `string'
PUBLIC	??_C@_0CD@LEKNCCCN@delitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5del?5a?$FLb@ ; `string'
PUBLIC	??_C@_07IGPEBMGC@delitem?$AA@			; `string'
PUBLIC	??_C@_0M@EONDAJAB@__setitem__?$AA@		; `string'
PUBLIC	??_C@_0CG@NIJAIGAO@setitem?$CIa?0?5b?0?5c?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN@ ; `string'
PUBLIC	??_C@_07BPAPKEKG@setitem?$AA@			; `string'
PUBLIC	??_C@_0M@GAJGCIJD@__getitem__?$AA@		; `string'
PUBLIC	??_C@_0BP@FOGACANC@getitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN?4?$AA@ ; `string'
PUBLIC	??_C@_07OHPOJLHH@getitem?$AA@			; `string'
PUBLIC	??_C@_0M@CPHBPOKP@__iconcat__?$AA@		; `string'
PUBLIC	??_C@_0DM@IIMJEMCO@a?5?$DN?5iconcat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL@ ; `string'
PUBLIC	??_C@_07BLFCPMNF@iconcat?$AA@			; `string'
PUBLIC	??_C@_0L@BECBLOCO@__concat__?$AA@		; `string'
PUBLIC	??_C@_0DG@BBGMCNCL@concat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?0?5f@ ; `string'
PUBLIC	??_C@_06CMLIEHFC@concat?$AA@			; `string'
PUBLIC	??_C@_07GMCKKGKN@__ior__?$AA@			; `string'
PUBLIC	??_C@_0CB@BDPNKJBP@a?5?$DN?5ior?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?$DN?5b?4@ ; `string'
PUBLIC	??_C@_03MGBHAPAD@ior?$AA@			; `string'
PUBLIC	??_C@_08EBNDKCJL@__ixor__?$AA@			; `string'
PUBLIC	??_C@_0CC@FHKCFHJB@a?5?$DN?5ixor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?$DN?5b@ ; `string'
PUBLIC	??_C@_04FNPGACME@ixor?$AA@			; `string'
PUBLIC	??_C@_08CNBINADL@__iand__?$AA@			; `string'
PUBLIC	??_C@_0CC@BIFIECDB@a?5?$DN?5iand?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?$DN?5b@ ; `string'
PUBLIC	??_C@_04GNLNMFDB@iand?$AA@			; `string'
PUBLIC	??_C@_0M@MPLFEGLF@__irshift__?$AA@		; `string'
PUBLIC	??_C@_0CG@NHPOICPP@a?5?$DN?5irshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO@ ; `string'
PUBLIC	??_C@_07ELFNKKAO@irshift?$AA@			; `string'
PUBLIC	??_C@_0M@KLLHNPFG@__ilshift__?$AA@		; `string'
PUBLIC	??_C@_0CG@OKINCJM@a?5?$DN?5ilshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM@ ; `string'
PUBLIC	??_C@_07HMLMENJN@ilshift?$AA@			; `string'
PUBLIC	??_C@_08GHLKDJPA@__imod__?$AA@			; `string'
PUBLIC	??_C@_0CC@GGMLGKPB@a?5?$DN?5imod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?$DN?5b@ ; `string'
PUBLIC	??_C@_04CGKJBALO@imod?$AA@			; `string'
PUBLIC	??_C@_0N@LEBOILNI@__itruediv__?$AA@		; `string'
PUBLIC	??_C@_0CF@GLKGJJHG@a?5?$DN?5itruediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5@ ; `string'
PUBLIC	??_C@_08DKMBKIAC@itruediv?$AA@			; `string'
PUBLIC	??_C@_0O@FFFGEHEN@__ifloordiv__?$AA@		; `string'
PUBLIC	??_C@_0CI@FPDCBEOO@a?5?$DN?5ifloordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a@ ; `string'
PUBLIC	??_C@_09BENDIJEO@ifloordiv?$AA@			; `string'
PUBLIC	??_C@_08IIFOJODM@__imul__?$AA@			; `string'
PUBLIC	??_C@_0CC@EAIEMNKM@a?5?$DN?5imul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$DN?5b@ ; `string'
PUBLIC	??_C@_04PPMBLMBA@imul?$AA@			; `string'
PUBLIC	??_C@_08FBFNIKOE@__isub__?$AA@			; `string'
PUBLIC	??_C@_0CC@JKCPOOGH@a?5?$DN?5isub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?$DN?5b@ ; `string'
PUBLIC	??_C@_04NBIELBDC@isub?$AA@			; `string'
PUBLIC	??_C@_08GHKIMIJK@__iadd__?$AA@			; `string'
PUBLIC	??_C@_0CC@KKACEDDN@a?5?$DN?5iadd?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?$DN?5b@ ; `string'
PUBLIC	??_C@_04GACKEAOH@iadd?$AA@			; `string'
PUBLIC	??_C@_06MKEBKDGA@__or__?$AA@			; `string'
PUBLIC	??_C@_0BM@NDAOEIHO@or_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?5b?4?$AA@ ; `string'
PUBLIC	??_C@_03NHKIDKBD@or_?$AA@			; `string'
PUBLIC	??_C@_07KEKAHHJD@__xor__?$AA@			; `string'
PUBLIC	??_C@_0BM@PDBHLGAG@xor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?5b?4?$AA@ ; `string'
PUBLIC	??_C@_03COLCDPPJ@xor?$AA@			; `string'
PUBLIC	??_C@_07MIGLAFDD@__and__?$AA@			; `string'
PUBLIC	??_C@_0BN@KEHNNOM@and_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?5b?4?$AA@ ; `string'
PUBLIC	??_C@_04DEILPEEI@and_?$AA@			; `string'
PUBLIC	??_C@_07FEEEMJMJ@__not__?$AA@			; `string'
PUBLIC	??_C@_0BK@JLOIIDCO@not_?$CIa?$CJ?5?9?9?5Same?5as?5not?5a?4?$AA@ ; `string'
PUBLIC	??_C@_04BCEBKHIM@not_?$AA@			; `string'
PUBLIC	??_C@_0L@PEOFAGDE@__rshift__?$AA@		; `string'
PUBLIC	??_C@_0CA@GEBKPAJK@rshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO?$DO?5b?4?$AA@ ; `string'
PUBLIC	??_C@_06HMLHBBIJ@rshift?$AA@			; `string'
PUBLIC	??_C@_0L@JAOHJPNH@__lshift__?$AA@		; `string'
PUBLIC	??_C@_0CA@OEBAEPHD@lshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM?$DM?5b?4?$AA@ ; `string'
PUBLIC	??_C@_06ELFGPGBK@lshift?$AA@			; `string'
PUBLIC	??_C@_0L@OIINOIMI@__invert__?$AA@		; `string'
PUBLIC	??_C@_0BJ@PKLNHGAH@invert?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@ ; `string'
PUBLIC	??_C@_06CIAPFFAP@invert?$AA@			; `string'
PUBLIC	??_C@_07NOCIBIEK@__inv__?$AA@			; `string'
PUBLIC	??_C@_0BG@DLLGEIOG@inv?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@ ; `string'
PUBLIC	??_C@_03KDLJKADA@inv?$AA@			; `string'
PUBLIC	??_C@_07MAFFIHBE@__abs__?$AA@			; `string'
PUBLIC	??_C@_0BK@IOGGIPNN@abs?$CIa?$CJ?5?9?9?5Same?5as?5abs?$CIa?$CJ?4?$AA@ ; `string'
PUBLIC	??_C@_03BCGAIFPO@abs?$AA@			; `string'
PUBLIC	??_C@_07PAEPJCJL@__pos__?$AA@			; `string'
PUBLIC	??_C@_0BG@HEKJOMHG@pos?$CIa?$CJ?5?9?9?5Same?5as?5?$CLa?4?$AA@ ; `string'
PUBLIC	??_C@_03PCBNCGFH@pos?$AA@			; `string'
PUBLIC	??_C@_07FMFICJBJ@__neg__?$AA@			; `string'
PUBLIC	??_C@_0BG@FMJKMNBM@neg?$CIa?$CJ?5?9?9?5Same?5as?5?9a?4?$AA@ ; `string'
PUBLIC	??_C@_03GBOCFEHI@neg?$AA@			; `string'
PUBLIC	??_C@_07ICMJOMPI@__mod__?$AA@			; `string'
PUBLIC	??_C@_0BM@PEKEDJKI@mod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?5b?4?$AA@ ; `string'
PUBLIC	??_C@_03FFONCNID@mod?$AA@			; `string'
PUBLIC	??_C@_0M@COJKGICO@__truediv__?$AA@		; `string'
PUBLIC	??_C@_0CA@CADKHFMC@truediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?5b?4?$AA@ ; `string'
PUBLIC	??_C@_07EJCKFEDK@truediv?$AA@			; `string'
PUBLIC	??_C@_0N@BBCJEIH@__floordiv__?$AA@		; `string'
PUBLIC	??_C@_0CC@DEHEOIJ@floordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?1?5b@ ; `string'
PUBLIC	??_C@_08DMKCNKCM@floordiv?$AA@			; `string'
PUBLIC	??_C@_07GNCNELDE@__mul__?$AA@			; `string'
PUBLIC	??_C@_0BM@GCDDMIJI@mul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?5b?4?$AA@ ; `string'
PUBLIC	??_C@_03IMIFIBCN@mul?$AA@			; `string'
PUBLIC	??_C@_07LECOFPOM@__sub__?$AA@			; `string'
PUBLIC	??_C@_0BM@KJKINDPD@sub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?5b?4?$AA@ ; `string'
PUBLIC	??_C@_03KCMAIMAP@sub?$AA@			; `string'
PUBLIC	??_C@_07ICNLBNJC@__add__?$AA@			; `string'
PUBLIC	??_C@_0BM@DBPKGABM@add?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?4?$AA@ ; `string'
PUBLIC	??_C@_03BDGOHNNK@add?$AA@			; `string'
PUBLIC	??_C@_09NLFDFNNH@__index__?$AA@			; `string'
PUBLIC	??_C@_0CC@BIKLHAKK@index?$CIa?$CJ?5?9?9?5Same?5as?5a?4__index__?$CI@ ; `string'
PUBLIC	??_C@_05FKHKFDID@index?$AA@			; `string'
PUBLIC	??_C@_0CE@PAAJOOMJ@is_not?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5is?5not@ ; `string'
PUBLIC	??_C@_06JIGJLOBN@is_not?$AA@			; `string'
PUBLIC	??_C@_0BN@EIIILEPK@is_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5is?5b?4?$AA@ ; `string'
PUBLIC	??_C@_03PDABAPPI@is_?$AA@			; `string'
PUBLIC	??_C@_0DL@DEHBHGPO@countOf?$CIa?0?5b?$CJ?5?9?9?5Return?5the?5numb@ ; `string'
PUBLIC	??_C@_07GIJGNPIL@countOf?$AA@			; `string'
PUBLIC	??_C@_0DD@GINKOOGK@indexOf?$CIa?0?5b?$CJ?5?9?9?5Return?5the?5firs@ ; `string'
PUBLIC	??_C@_07KKKNJHGA@indexOf?$AA@			; `string'
PUBLIC	??_C@_0N@MCIOADFH@__contains__?$AA@		; `string'
PUBLIC	??_C@_0DL@MAEHMEEG@contains?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5b?5in?5a@ ; `string'
PUBLIC	??_C@_08JKMOLGCD@contains?$AA@			; `string'
PUBLIC	??_C@_0DH@EOBJDMEA@truth?$CIa?$CJ?5?9?9?5Return?5True?5if?5a?5is?5@ ; `string'
PUBLIC	??_C@_05PPKBNDKJ@truth?$AA@			; `string'
EXTRN	PyObject_GenericGetAttr:PROC
;	COMDAT ??_C@_08LHJFAFGD@operator?$AA@
CONST	SEGMENT
??_C@_08LHJFAFGD@operator?$AA@ DB 'operator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EMEAEPLI@operator?4methodcaller?$AA@
CONST	SEGMENT
??_C@_0BG@EMEAEPLI@operator?4methodcaller?$AA@ DB 'operator.methodcaller', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CNOAMID@operator?4attrgetter?$AA@
CONST	SEGMENT
??_C@_0BE@CNOAMID@operator?4attrgetter?$AA@ DB 'operator.attrgetter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KGDNJIHD@operator?4itemgetter?$AA@
CONST	SEGMENT
??_C@_0BE@KGDNJIHD@operator?4itemgetter?$AA@ DB 'operator.itemgetter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CCHAPNEK@_compare_digest?$AA@
CONST	SEGMENT
??_C@_0BA@CCHAPNEK@_compare_digest?$AA@ DB '_compare_digest', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DHPPIHIH@__ge__?$AA@
CONST	SEGMENT
??_C@_06DHPPIHIH@__ge__?$AA@ DB '__ge__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FPMEPBOP@ge?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DO?$DNb?4?$AA@
CONST	SEGMENT
??_C@_0BK@FPMEPBOP@ge?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DO?$DNb?4?$AA@ DB 'g'
	DB	'e(a, b) -- Same as a>=b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FFKMGEKK@ge?$AA@
CONST	SEGMENT
??_C@_02FFKMGEKK@ge?$AA@ DB 'ge', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NPFKLHHN@__gt__?$AA@
CONST	SEGMENT
??_C@_06NPFKLHHN@__gt__?$AA@ DB '__gt__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NIMNJJGI@gt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DOb?4?$AA@
CONST	SEGMENT
??_C@_0BJ@NIMNJJGI@gt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DOb?4?$AA@ DB 'gt'
	DB	'(a, b) -- Same as a>b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GHFEHLK@gt?$AA@
CONST	SEGMENT
??_C@_02GHFEHLK@gt?$AA@ DB 'gt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06DKOPOFPG@__ne__?$AA@
CONST	SEGMENT
??_C@_06DKOPOFPG@__ne__?$AA@ DB '__ne__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PEAHKJH@ne?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$CB?$DNb?4?$AA@
CONST	SEGMENT
??_C@_0BK@PEAHKJH@ne?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$CB?$DNb?4?$AA@ DB 'n'
	DB	'e(a, b) -- Same as a!=b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FKHNFPCF@ne?$AA@
CONST	SEGMENT
??_C@_02FKHNFPCF@ne?$AA@ DB 'ne', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCEEBECP@__eq__?$AA@
CONST	SEGMENT
??_C@_06JCEEBECP@__eq__?$AA@ DB '__eq__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KOIEKNMF@eq?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DN?$DNb?4?$AA@
CONST	SEGMENT
??_C@_0BK@KOIEKNMF@eq?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DN?$DNb?4?$AA@ DB 'e'
	DB	'q(a, b) -- Same as a==b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HIIGGHJB@eq?$AA@
CONST	SEGMENT
??_C@_02HIIGGHJB@eq?$AA@ DB 'eq', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06EACPLGJG@__le__?$AA@
CONST	SEGMENT
??_C@_06EACPLGJG@__le__?$AA@ DB '__le__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@ICHKGCML@le?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DM?$DNb?4?$AA@
CONST	SEGMENT
??_C@_0BK@ICHKGCML@le?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DM?$DNb?4?$AA@ DB 'l'
	DB	'e(a, b) -- Same as a<=b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FJPJILEL@le?$AA@
CONST	SEGMENT
??_C@_02FJPJILEL@le?$AA@ DB 'le', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06KIIKIGGM@__lt__?$AA@
CONST	SEGMENT
??_C@_06KIIKIGGM@__lt__?$AA@ DB '__lt__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GLCCHEAH@lt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DMb?4?$AA@
CONST	SEGMENT
??_C@_0BJ@GLCCHEAH@lt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DMb?4?$AA@ DB 'lt'
	DB	'(a, b) -- Same as a<b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KCAKIFL@lt?$AA@
CONST	SEGMENT
??_C@_02KCAKIFL@lt?$AA@ DB 'lt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JKFONAME@__ipow__?$AA@
CONST	SEGMENT
??_C@_08JKFONAME@__ipow__?$AA@ DB '__ipow__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@GFFFGOPL@a?5?$DN?5ipow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?$DN?5@
CONST	SEGMENT
??_C@_0CD@GFFFGOPL@a?5?$DN?5ipow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?$DN?5@ DB 'a'
	DB	' = ipow(a, b) -- Same as a **= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OFDFNOGO@ipow?$AA@
CONST	SEGMENT
??_C@_04OFDFNOGO@ipow?$AA@ DB 'ipow', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HPCNAFMM@__pow__?$AA@
CONST	SEGMENT
??_C@_07HPCNAFMM@__pow__?$AA@ DB '__pow__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NBBILNGN@pow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?5b?4?$AA@
CONST	SEGMENT
??_C@_0BN@NBBILNGN@pow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?5b?4?$AA@ DB 'p'
	DB	'ow(a, b) -- Same as a ** b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JGHBODFD@pow?$AA@
CONST	SEGMENT
??_C@_03JGHBODFD@pow?$AA@ DB 'pow', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CEPPLJAO@__delitem__?$AA@
CONST	SEGMENT
??_C@_0M@CEPPLJAO@__delitem__?$AA@ DB '__delitem__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LEKNCCCN@delitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5del?5a?$FLb@
CONST	SEGMENT
??_C@_0CD@LEKNCCCN@delitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5del?5a?$FLb@ DB 'd'
	DB	'elitem(a, b) -- Same as del a[b].', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07IGPEBMGC@delitem?$AA@
CONST	SEGMENT
??_C@_07IGPEBMGC@delitem?$AA@ DB 'delitem', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EONDAJAB@__setitem__?$AA@
CONST	SEGMENT
??_C@_0M@EONDAJAB@__setitem__?$AA@ DB '__setitem__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NIJAIGAO@setitem?$CIa?0?5b?0?5c?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN@
CONST	SEGMENT
??_C@_0CG@NIJAIGAO@setitem?$CIa?0?5b?0?5c?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN@ DB 's'
	DB	'etitem(a, b, c) -- Same as a[b] = c.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BPAPKEKG@setitem?$AA@
CONST	SEGMENT
??_C@_07BPAPKEKG@setitem?$AA@ DB 'setitem', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GAJGCIJD@__getitem__?$AA@
CONST	SEGMENT
??_C@_0M@GAJGCIJD@__getitem__?$AA@ DB '__getitem__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FOGACANC@getitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN?4?$AA@
CONST	SEGMENT
??_C@_0BP@FOGACANC@getitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN?4?$AA@ DB 'g'
	DB	'etitem(a, b) -- Same as a[b].', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHPOJLHH@getitem?$AA@
CONST	SEGMENT
??_C@_07OHPOJLHH@getitem?$AA@ DB 'getitem', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CPHBPOKP@__iconcat__?$AA@
CONST	SEGMENT
??_C@_0M@CPHBPOKP@__iconcat__?$AA@ DB '__iconcat__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@IIMJEMCO@a?5?$DN?5iconcat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL@
CONST	SEGMENT
??_C@_0DM@IIMJEMCO@a?5?$DN?5iconcat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL@ DB 'a'
	DB	' = iconcat(a, b) -- Same as a += b, for a and b sequences.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BLFCPMNF@iconcat?$AA@
CONST	SEGMENT
??_C@_07BLFCPMNF@iconcat?$AA@ DB 'iconcat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BECBLOCO@__concat__?$AA@
CONST	SEGMENT
??_C@_0L@BECBLOCO@__concat__?$AA@ DB '__concat__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@BBGMCNCL@concat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?0?5f@
CONST	SEGMENT
??_C@_0DG@BBGMCNCL@concat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?0?5f@ DB 'c'
	DB	'oncat(a, b) -- Same as a + b, for a and b sequences.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CMLIEHFC@concat?$AA@
CONST	SEGMENT
??_C@_06CMLIEHFC@concat?$AA@ DB 'concat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMCKKGKN@__ior__?$AA@
CONST	SEGMENT
??_C@_07GMCKKGKN@__ior__?$AA@ DB '__ior__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BDPNKJBP@a?5?$DN?5ior?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?$DN?5b?4@
CONST	SEGMENT
??_C@_0CB@BDPNKJBP@a?5?$DN?5ior?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?$DN?5b?4@ DB 'a'
	DB	' = ior(a, b) -- Same as a |= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGBHAPAD@ior?$AA@
CONST	SEGMENT
??_C@_03MGBHAPAD@ior?$AA@ DB 'ior', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08EBNDKCJL@__ixor__?$AA@
CONST	SEGMENT
??_C@_08EBNDKCJL@__ixor__?$AA@ DB '__ixor__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FHKCFHJB@a?5?$DN?5ixor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?$DN?5b@
CONST	SEGMENT
??_C@_0CC@FHKCFHJB@a?5?$DN?5ixor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?$DN?5b@ DB 'a'
	DB	' = ixor(a, b) -- Same as a ^= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNPGACME@ixor?$AA@
CONST	SEGMENT
??_C@_04FNPGACME@ixor?$AA@ DB 'ixor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CNBINADL@__iand__?$AA@
CONST	SEGMENT
??_C@_08CNBINADL@__iand__?$AA@ DB '__iand__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BIFIECDB@a?5?$DN?5iand?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?$DN?5b@
CONST	SEGMENT
??_C@_0CC@BIFIECDB@a?5?$DN?5iand?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?$DN?5b@ DB 'a'
	DB	' = iand(a, b) -- Same as a &= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GNLNMFDB@iand?$AA@
CONST	SEGMENT
??_C@_04GNLNMFDB@iand?$AA@ DB 'iand', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MPLFEGLF@__irshift__?$AA@
CONST	SEGMENT
??_C@_0M@MPLFEGLF@__irshift__?$AA@ DB '__irshift__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NHPOICPP@a?5?$DN?5irshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO@
CONST	SEGMENT
??_C@_0CG@NHPOICPP@a?5?$DN?5irshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO@ DB 'a'
	DB	' = irshift(a, b) -- Same as a >>= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07ELFNKKAO@irshift?$AA@
CONST	SEGMENT
??_C@_07ELFNKKAO@irshift?$AA@ DB 'irshift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KLLHNPFG@__ilshift__?$AA@
CONST	SEGMENT
??_C@_0M@KLLHNPFG@__ilshift__?$AA@ DB '__ilshift__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@OKINCJM@a?5?$DN?5ilshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM@
CONST	SEGMENT
??_C@_0CG@OKINCJM@a?5?$DN?5ilshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM@ DB 'a'
	DB	' = ilshift(a, b) -- Same as a <<= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HMLMENJN@ilshift?$AA@
CONST	SEGMENT
??_C@_07HMLMENJN@ilshift?$AA@ DB 'ilshift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHLKDJPA@__imod__?$AA@
CONST	SEGMENT
??_C@_08GHLKDJPA@__imod__?$AA@ DB '__imod__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GGMLGKPB@a?5?$DN?5imod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?$DN?5b@
CONST	SEGMENT
??_C@_0CC@GGMLGKPB@a?5?$DN?5imod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?$DN?5b@ DB 'a'
	DB	' = imod(a, b) -- Same as a %= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04CGKJBALO@imod?$AA@
CONST	SEGMENT
??_C@_04CGKJBALO@imod?$AA@ DB 'imod', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LEBOILNI@__itruediv__?$AA@
CONST	SEGMENT
??_C@_0N@LEBOILNI@__itruediv__?$AA@ DB '__itruediv__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GLKGJJHG@a?5?$DN?5itruediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5@
CONST	SEGMENT
??_C@_0CF@GLKGJJHG@a?5?$DN?5itruediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5@ DB 'a'
	DB	' = itruediv(a, b) -- Same as a /= b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DKMBKIAC@itruediv?$AA@
CONST	SEGMENT
??_C@_08DKMBKIAC@itruediv?$AA@ DB 'itruediv', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FFFGEHEN@__ifloordiv__?$AA@
CONST	SEGMENT
??_C@_0O@FFFGEHEN@__ifloordiv__?$AA@ DB '__ifloordiv__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FPDCBEOO@a?5?$DN?5ifloordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a@
CONST	SEGMENT
??_C@_0CI@FPDCBEOO@a?5?$DN?5ifloordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a@ DB 'a'
	DB	' = ifloordiv(a, b) -- Same as a //= b.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BENDIJEO@ifloordiv?$AA@
CONST	SEGMENT
??_C@_09BENDIJEO@ifloordiv?$AA@ DB 'ifloordiv', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IIFOJODM@__imul__?$AA@
CONST	SEGMENT
??_C@_08IIFOJODM@__imul__?$AA@ DB '__imul__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EAIEMNKM@a?5?$DN?5imul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$DN?5b@
CONST	SEGMENT
??_C@_0CC@EAIEMNKM@a?5?$DN?5imul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$DN?5b@ DB 'a'
	DB	' = imul(a, b) -- Same as a *= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04PPMBLMBA@imul?$AA@
CONST	SEGMENT
??_C@_04PPMBLMBA@imul?$AA@ DB 'imul', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FBFNIKOE@__isub__?$AA@
CONST	SEGMENT
??_C@_08FBFNIKOE@__isub__?$AA@ DB '__isub__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JKCPOOGH@a?5?$DN?5isub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?$DN?5b@
CONST	SEGMENT
??_C@_0CC@JKCPOOGH@a?5?$DN?5isub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?$DN?5b@ DB 'a'
	DB	' = isub(a, b) -- Same as a -= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04NBIELBDC@isub?$AA@
CONST	SEGMENT
??_C@_04NBIELBDC@isub?$AA@ DB 'isub', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHKIMIJK@__iadd__?$AA@
CONST	SEGMENT
??_C@_08GHKIMIJK@__iadd__?$AA@ DB '__iadd__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KKACEDDN@a?5?$DN?5iadd?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?$DN?5b@
CONST	SEGMENT
??_C@_0CC@KKACEDDN@a?5?$DN?5iadd?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?$DN?5b@ DB 'a'
	DB	' = iadd(a, b) -- Same as a += b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GACKEAOH@iadd?$AA@
CONST	SEGMENT
??_C@_04GACKEAOH@iadd?$AA@ DB 'iadd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MKEBKDGA@__or__?$AA@
CONST	SEGMENT
??_C@_06MKEBKDGA@__or__?$AA@ DB '__or__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NDAOEIHO@or_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?5b?4?$AA@
CONST	SEGMENT
??_C@_0BM@NDAOEIHO@or_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?5b?4?$AA@ DB 'o'
	DB	'r_(a, b) -- Same as a | b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NHKIDKBD@or_?$AA@
CONST	SEGMENT
??_C@_03NHKIDKBD@or_?$AA@ DB 'or_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07KEKAHHJD@__xor__?$AA@
CONST	SEGMENT
??_C@_07KEKAHHJD@__xor__?$AA@ DB '__xor__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PDBHLGAG@xor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?5b?4?$AA@
CONST	SEGMENT
??_C@_0BM@PDBHLGAG@xor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?5b?4?$AA@ DB 'x'
	DB	'or(a, b) -- Same as a ^ b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03COLCDPPJ@xor?$AA@
CONST	SEGMENT
??_C@_03COLCDPPJ@xor?$AA@ DB 'xor', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MIGLAFDD@__and__?$AA@
CONST	SEGMENT
??_C@_07MIGLAFDD@__and__?$AA@ DB '__and__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KEHNNOM@and_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?5b?4?$AA@
CONST	SEGMENT
??_C@_0BN@KEHNNOM@and_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?5b?4?$AA@ DB 'a'
	DB	'nd_(a, b) -- Same as a & b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DEILPEEI@and_?$AA@
CONST	SEGMENT
??_C@_04DEILPEEI@and_?$AA@ DB 'and_', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FEEEMJMJ@__not__?$AA@
CONST	SEGMENT
??_C@_07FEEEMJMJ@__not__?$AA@ DB '__not__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JLOIIDCO@not_?$CIa?$CJ?5?9?9?5Same?5as?5not?5a?4?$AA@
CONST	SEGMENT
??_C@_0BK@JLOIIDCO@not_?$CIa?$CJ?5?9?9?5Same?5as?5not?5a?4?$AA@ DB 'not_('
	DB	'a) -- Same as not a.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCEBKHIM@not_?$AA@
CONST	SEGMENT
??_C@_04BCEBKHIM@not_?$AA@ DB 'not_', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PEOFAGDE@__rshift__?$AA@
CONST	SEGMENT
??_C@_0L@PEOFAGDE@__rshift__?$AA@ DB '__rshift__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GEBKPAJK@rshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO?$DO?5b?4?$AA@
CONST	SEGMENT
??_C@_0CA@GEBKPAJK@rshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO?$DO?5b?4?$AA@ DB 'r'
	DB	'shift(a, b) -- Same as a >> b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HMLHBBIJ@rshift?$AA@
CONST	SEGMENT
??_C@_06HMLHBBIJ@rshift?$AA@ DB 'rshift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JAOHJPNH@__lshift__?$AA@
CONST	SEGMENT
??_C@_0L@JAOHJPNH@__lshift__?$AA@ DB '__lshift__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OEBAEPHD@lshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM?$DM?5b?4?$AA@
CONST	SEGMENT
??_C@_0CA@OEBAEPHD@lshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM?$DM?5b?4?$AA@ DB 'l'
	DB	'shift(a, b) -- Same as a << b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06ELFGPGBK@lshift?$AA@
CONST	SEGMENT
??_C@_06ELFGPGBK@lshift?$AA@ DB 'lshift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OIINOIMI@__invert__?$AA@
CONST	SEGMENT
??_C@_0L@OIINOIMI@__invert__?$AA@ DB '__invert__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PKLNHGAH@invert?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@
CONST	SEGMENT
??_C@_0BJ@PKLNHGAH@invert?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@ DB 'inve'
	DB	'rt(a) -- Same as ~a.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CIAPFFAP@invert?$AA@
CONST	SEGMENT
??_C@_06CIAPFFAP@invert?$AA@ DB 'invert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NOCIBIEK@__inv__?$AA@
CONST	SEGMENT
??_C@_07NOCIBIEK@__inv__?$AA@ DB '__inv__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DLLGEIOG@inv?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@
CONST	SEGMENT
??_C@_0BG@DLLGEIOG@inv?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@ DB 'inv(a) '
	DB	'-- Same as ~a.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KDLJKADA@inv?$AA@
CONST	SEGMENT
??_C@_03KDLJKADA@inv?$AA@ DB 'inv', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAFFIHBE@__abs__?$AA@
CONST	SEGMENT
??_C@_07MAFFIHBE@__abs__?$AA@ DB '__abs__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IOGGIPNN@abs?$CIa?$CJ?5?9?9?5Same?5as?5abs?$CIa?$CJ?4?$AA@
CONST	SEGMENT
??_C@_0BK@IOGGIPNN@abs?$CIa?$CJ?5?9?9?5Same?5as?5abs?$CIa?$CJ?4?$AA@ DB 'a'
	DB	'bs(a) -- Same as abs(a).', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BCGAIFPO@abs?$AA@
CONST	SEGMENT
??_C@_03BCGAIFPO@abs?$AA@ DB 'abs', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07PAEPJCJL@__pos__?$AA@
CONST	SEGMENT
??_C@_07PAEPJCJL@__pos__?$AA@ DB '__pos__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HEKJOMHG@pos?$CIa?$CJ?5?9?9?5Same?5as?5?$CLa?4?$AA@
CONST	SEGMENT
??_C@_0BG@HEKJOMHG@pos?$CIa?$CJ?5?9?9?5Same?5as?5?$CLa?4?$AA@ DB 'pos(a) '
	DB	'-- Same as +a.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PCBNCGFH@pos?$AA@
CONST	SEGMENT
??_C@_03PCBNCGFH@pos?$AA@ DB 'pos', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FMFICJBJ@__neg__?$AA@
CONST	SEGMENT
??_C@_07FMFICJBJ@__neg__?$AA@ DB '__neg__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMJKMNBM@neg?$CIa?$CJ?5?9?9?5Same?5as?5?9a?4?$AA@
CONST	SEGMENT
??_C@_0BG@FMJKMNBM@neg?$CIa?$CJ?5?9?9?5Same?5as?5?9a?4?$AA@ DB 'neg(a) --'
	DB	' Same as -a.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03GBOCFEHI@neg?$AA@
CONST	SEGMENT
??_C@_03GBOCFEHI@neg?$AA@ DB 'neg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07ICMJOMPI@__mod__?$AA@
CONST	SEGMENT
??_C@_07ICMJOMPI@__mod__?$AA@ DB '__mod__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PEKEDJKI@mod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?5b?4?$AA@
CONST	SEGMENT
??_C@_0BM@PEKEDJKI@mod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?5b?4?$AA@ DB 'm'
	DB	'od(a, b) -- Same as a % b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFONCNID@mod?$AA@
CONST	SEGMENT
??_C@_03FFONCNID@mod?$AA@ DB 'mod', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@COJKGICO@__truediv__?$AA@
CONST	SEGMENT
??_C@_0M@COJKGICO@__truediv__?$AA@ DB '__truediv__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CADKHFMC@truediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?5b?4?$AA@
CONST	SEGMENT
??_C@_0CA@CADKHFMC@truediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?5b?4?$AA@ DB 't'
	DB	'ruediv(a, b) -- Same as a / b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07EJCKFEDK@truediv?$AA@
CONST	SEGMENT
??_C@_07EJCKFEDK@truediv?$AA@ DB 'truediv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BBCJEIH@__floordiv__?$AA@
CONST	SEGMENT
??_C@_0N@BBCJEIH@__floordiv__?$AA@ DB '__floordiv__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DEHEOIJ@floordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?1?5b@
CONST	SEGMENT
??_C@_0CC@DEHEOIJ@floordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?1?5b@ DB 'f'
	DB	'loordiv(a, b) -- Same as a // b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DMKCNKCM@floordiv?$AA@
CONST	SEGMENT
??_C@_08DMKCNKCM@floordiv?$AA@ DB 'floordiv', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GNCNELDE@__mul__?$AA@
CONST	SEGMENT
??_C@_07GNCNELDE@__mul__?$AA@ DB '__mul__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GCDDMIJI@mul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?5b?4?$AA@
CONST	SEGMENT
??_C@_0BM@GCDDMIJI@mul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?5b?4?$AA@ DB 'm'
	DB	'ul(a, b) -- Same as a * b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IMIFIBCN@mul?$AA@
CONST	SEGMENT
??_C@_03IMIFIBCN@mul?$AA@ DB 'mul', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07LECOFPOM@__sub__?$AA@
CONST	SEGMENT
??_C@_07LECOFPOM@__sub__?$AA@ DB '__sub__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KJKINDPD@sub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?5b?4?$AA@
CONST	SEGMENT
??_C@_0BM@KJKINDPD@sub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?5b?4?$AA@ DB 's'
	DB	'ub(a, b) -- Same as a - b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KCMAIMAP@sub?$AA@
CONST	SEGMENT
??_C@_03KCMAIMAP@sub?$AA@ DB 'sub', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07ICNLBNJC@__add__?$AA@
CONST	SEGMENT
??_C@_07ICNLBNJC@__add__?$AA@ DB '__add__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DBPKGABM@add?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?4?$AA@
CONST	SEGMENT
??_C@_0BM@DBPKGABM@add?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?4?$AA@ DB 'a'
	DB	'dd(a, b) -- Same as a + b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BDGOHNNK@add?$AA@
CONST	SEGMENT
??_C@_03BDGOHNNK@add?$AA@ DB 'add', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09NLFDFNNH@__index__?$AA@
CONST	SEGMENT
??_C@_09NLFDFNNH@__index__?$AA@ DB '__index__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BIKLHAKK@index?$CIa?$CJ?5?9?9?5Same?5as?5a?4__index__?$CI@
CONST	SEGMENT
??_C@_0CC@BIKLHAKK@index?$CIa?$CJ?5?9?9?5Same?5as?5a?4__index__?$CI@ DB 'i'
	DB	'ndex(a) -- Same as a.__index__()', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FKHKFDID@index?$AA@
CONST	SEGMENT
??_C@_05FKHKFDID@index?$AA@ DB 'index', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PAAJOOMJ@is_not?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5is?5not@
CONST	SEGMENT
??_C@_0CE@PAAJOOMJ@is_not?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5is?5not@ DB 'i'
	DB	's_not(a, b) -- Same as a is not b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JIGJLOBN@is_not?$AA@
CONST	SEGMENT
??_C@_06JIGJLOBN@is_not?$AA@ DB 'is_not', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EIIILEPK@is_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5is?5b?4?$AA@
CONST	SEGMENT
??_C@_0BN@EIIILEPK@is_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5is?5b?4?$AA@ DB 'i'
	DB	's_(a, b) -- Same as a is b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PDABAPPI@is_?$AA@
CONST	SEGMENT
??_C@_03PDABAPPI@is_?$AA@ DB 'is_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@DEHBHGPO@countOf?$CIa?0?5b?$CJ?5?9?9?5Return?5the?5numb@
CONST	SEGMENT
??_C@_0DL@DEHBHGPO@countOf?$CIa?0?5b?$CJ?5?9?9?5Return?5the?5numb@ DB 'co'
	DB	'untOf(a, b) -- Return the number of times b occurs in a.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GIJGNPIL@countOf?$AA@
CONST	SEGMENT
??_C@_07GIJGNPIL@countOf?$AA@ DB 'countOf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GINKOOGK@indexOf?$CIa?0?5b?$CJ?5?9?9?5Return?5the?5firs@
CONST	SEGMENT
??_C@_0DD@GINKOOGK@indexOf?$CIa?0?5b?$CJ?5?9?9?5Return?5the?5firs@ DB 'in'
	DB	'dexOf(a, b) -- Return the first index of b in a.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07KKKNJHGA@indexOf?$AA@
CONST	SEGMENT
??_C@_07KKKNJHGA@indexOf?$AA@ DB 'indexOf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MCIOADFH@__contains__?$AA@
CONST	SEGMENT
??_C@_0N@MCIOADFH@__contains__?$AA@ DB '__contains__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@MAEHMEEG@contains?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5b?5in?5a@
CONST	SEGMENT
??_C@_0DL@MAEHMEEG@contains?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5b?5in?5a@ DB 'c'
	DB	'ontains(a, b) -- Same as b in a (note reversed operands).', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JKMOLGCD@contains?$AA@
CONST	SEGMENT
??_C@_08JKMOLGCD@contains?$AA@ DB 'contains', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@EOBJDMEA@truth?$CIa?$CJ?5?9?9?5Return?5True?5if?5a?5is?5@
CONST	SEGMENT
??_C@_0DH@EOBJDMEA@truth?$CIa?$CJ?5?9?9?5Return?5True?5if?5a?5is?5@ DB 't'
	DB	'ruth(a) -- Return True if a is true, False otherwise.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PPKBNDKJ@truth?$AA@
CONST	SEGMENT
??_C@_05PPKBNDKJ@truth?$AA@ DB 'truth', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
operator_doc DB	'Operator interface.', 0aH, 0aH, 'This module exports a s'
	DB	'et of functions implemented in C corresponding', 0aH, 'to the'
	DB	' intrinsic operators of Python.  For example, operator.add(x,'
	DB	' y)', 0aH, 'is equivalent to the expression x+y.  The functio'
	DB	'n names are those', 0aH, 'used for special methods; variants '
	DB	'without leading and trailing', 0aH, '''__'' are also provided'
	DB	' for convenience.', 00H
	ORG $+3
compare_digest__doc__ DB 'compare_digest(a, b) -> bool', 0aH, 0aH, 'Retur'
	DB	'n ''a == b''.  This function uses an approach designed to pre'
	DB	'vent', 0aH, 'timing analysis, making it appropriate for crypt'
	DB	'ography.', 0aH, 'a and b must both be of the same type: eithe'
	DB	'r str (ASCII only),', 0aH, 'or any type that supports the buf'
	DB	'fer protocol (e.g. bytes).', 0aH, 0aH, 'Note: If a and b are '
	DB	'of different lengths, or if an error occurs,', 0aH, 'a timing'
	DB	' attack could theoretically reveal information about the', 0aH
	DB	'types and lengths of a and b--but not their values.', 0aH, 00H
	ORG $+15
operator_methods DQ FLAT:??_C@_05PPKBNDKJ@truth?$AA@
	DQ	FLAT:truth
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0DH@EOBJDMEA@truth?$CIa?$CJ?5?9?9?5Return?5True?5if?5a?5is?5@
	DQ	FLAT:??_C@_08JKMOLGCD@contains?$AA@
	DQ	FLAT:op_contains
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DL@MAEHMEEG@contains?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5b?5in?5a@
	DQ	FLAT:??_C@_0N@MCIOADFH@__contains__?$AA@
	DQ	FLAT:op_contains
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DL@MAEHMEEG@contains?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5b?5in?5a@
	DQ	FLAT:??_C@_07KKKNJHGA@indexOf?$AA@
	DQ	FLAT:indexOf
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DD@GINKOOGK@indexOf?$CIa?0?5b?$CJ?5?9?9?5Return?5the?5firs@
	DQ	FLAT:??_C@_07GIJGNPIL@countOf?$AA@
	DQ	FLAT:countOf
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DL@DEHBHGPO@countOf?$CIa?0?5b?$CJ?5?9?9?5Return?5the?5numb@
	DQ	FLAT:??_C@_03PDABAPPI@is_?$AA@
	DQ	FLAT:is_
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BN@EIIILEPK@is_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5is?5b?4?$AA@
	DQ	FLAT:??_C@_06JIGJLOBN@is_not?$AA@
	DQ	FLAT:is_not
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CE@PAAJOOMJ@is_not?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5is?5not@
	DQ	FLAT:??_C@_05FKHKFDID@index?$AA@
	DQ	FLAT:op_index
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0CC@BIKLHAKK@index?$CIa?$CJ?5?9?9?5Same?5as?5a?4__index__?$CI@
	DQ	FLAT:??_C@_09NLFDFNNH@__index__?$AA@
	DQ	FLAT:op_index
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0CC@BIKLHAKK@index?$CIa?$CJ?5?9?9?5Same?5as?5a?4__index__?$CI@
	DQ	FLAT:??_C@_03BDGOHNNK@add?$AA@
	DQ	FLAT:op_add
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@DBPKGABM@add?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?4?$AA@
	DQ	FLAT:??_C@_07ICNLBNJC@__add__?$AA@
	DQ	FLAT:op_add
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@DBPKGABM@add?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?4?$AA@
	DQ	FLAT:??_C@_03KCMAIMAP@sub?$AA@
	DQ	FLAT:op_sub
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@KJKINDPD@sub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?5b?4?$AA@
	DQ	FLAT:??_C@_07LECOFPOM@__sub__?$AA@
	DQ	FLAT:op_sub
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@KJKINDPD@sub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?5b?4?$AA@
	DQ	FLAT:??_C@_03IMIFIBCN@mul?$AA@
	DQ	FLAT:op_mul
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@GCDDMIJI@mul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?5b?4?$AA@
	DQ	FLAT:??_C@_07GNCNELDE@__mul__?$AA@
	DQ	FLAT:op_mul
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@GCDDMIJI@mul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?5b?4?$AA@
	DQ	FLAT:??_C@_08DMKCNKCM@floordiv?$AA@
	DQ	FLAT:op_floordiv
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@DEHEOIJ@floordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?1?5b@
	DQ	FLAT:??_C@_0N@BBCJEIH@__floordiv__?$AA@
	DQ	FLAT:op_floordiv
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@DEHEOIJ@floordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?1?5b@
	DQ	FLAT:??_C@_07EJCKFEDK@truediv?$AA@
	DQ	FLAT:op_truediv
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CA@CADKHFMC@truediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?5b?4?$AA@
	DQ	FLAT:??_C@_0M@COJKGICO@__truediv__?$AA@
	DQ	FLAT:op_truediv
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CA@CADKHFMC@truediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?5b?4?$AA@
	DQ	FLAT:??_C@_03FFONCNID@mod?$AA@
	DQ	FLAT:op_mod
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@PEKEDJKI@mod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?5b?4?$AA@
	DQ	FLAT:??_C@_07ICMJOMPI@__mod__?$AA@
	DQ	FLAT:op_mod
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@PEKEDJKI@mod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?5b?4?$AA@
	DQ	FLAT:??_C@_03GBOCFEHI@neg?$AA@
	DQ	FLAT:op_neg
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BG@FMJKMNBM@neg?$CIa?$CJ?5?9?9?5Same?5as?5?9a?4?$AA@
	DQ	FLAT:??_C@_07FMFICJBJ@__neg__?$AA@
	DQ	FLAT:op_neg
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BG@FMJKMNBM@neg?$CIa?$CJ?5?9?9?5Same?5as?5?9a?4?$AA@
	DQ	FLAT:??_C@_03PCBNCGFH@pos?$AA@
	DQ	FLAT:op_pos
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BG@HEKJOMHG@pos?$CIa?$CJ?5?9?9?5Same?5as?5?$CLa?4?$AA@
	DQ	FLAT:??_C@_07PAEPJCJL@__pos__?$AA@
	DQ	FLAT:op_pos
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BG@HEKJOMHG@pos?$CIa?$CJ?5?9?9?5Same?5as?5?$CLa?4?$AA@
	DQ	FLAT:??_C@_03BCGAIFPO@abs?$AA@
	DQ	FLAT:op_abs
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BK@IOGGIPNN@abs?$CIa?$CJ?5?9?9?5Same?5as?5abs?$CIa?$CJ?4?$AA@
	DQ	FLAT:??_C@_07MAFFIHBE@__abs__?$AA@
	DQ	FLAT:op_abs
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BK@IOGGIPNN@abs?$CIa?$CJ?5?9?9?5Same?5as?5abs?$CIa?$CJ?4?$AA@
	DQ	FLAT:??_C@_03KDLJKADA@inv?$AA@
	DQ	FLAT:op_inv
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BG@DLLGEIOG@inv?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@
	DQ	FLAT:??_C@_07NOCIBIEK@__inv__?$AA@
	DQ	FLAT:op_inv
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BG@DLLGEIOG@inv?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@
	DQ	FLAT:??_C@_06CIAPFFAP@invert?$AA@
	DQ	FLAT:op_invert
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BJ@PKLNHGAH@invert?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@
	DQ	FLAT:??_C@_0L@OIINOIMI@__invert__?$AA@
	DQ	FLAT:op_invert
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BJ@PKLNHGAH@invert?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@
	DQ	FLAT:??_C@_06ELFGPGBK@lshift?$AA@
	DQ	FLAT:op_lshift
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CA@OEBAEPHD@lshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM?$DM?5b?4?$AA@
	DQ	FLAT:??_C@_0L@JAOHJPNH@__lshift__?$AA@
	DQ	FLAT:op_lshift
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CA@OEBAEPHD@lshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM?$DM?5b?4?$AA@
	DQ	FLAT:??_C@_06HMLHBBIJ@rshift?$AA@
	DQ	FLAT:op_rshift
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CA@GEBKPAJK@rshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO?$DO?5b?4?$AA@
	DQ	FLAT:??_C@_0L@PEOFAGDE@__rshift__?$AA@
	DQ	FLAT:op_rshift
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CA@GEBKPAJK@rshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO?$DO?5b?4?$AA@
	DQ	FLAT:??_C@_04BCEBKHIM@not_?$AA@
	DQ	FLAT:op_not_
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BK@JLOIIDCO@not_?$CIa?$CJ?5?9?9?5Same?5as?5not?5a?4?$AA@
	DQ	FLAT:??_C@_07FEEEMJMJ@__not__?$AA@
	DQ	FLAT:op_not_
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BK@JLOIIDCO@not_?$CIa?$CJ?5?9?9?5Same?5as?5not?5a?4?$AA@
	DQ	FLAT:??_C@_04DEILPEEI@and_?$AA@
	DQ	FLAT:op_and_
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BN@KEHNNOM@and_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?5b?4?$AA@
	DQ	FLAT:??_C@_07MIGLAFDD@__and__?$AA@
	DQ	FLAT:op_and_
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BN@KEHNNOM@and_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?5b?4?$AA@
	DQ	FLAT:??_C@_03COLCDPPJ@xor?$AA@
	DQ	FLAT:op_xor
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@PDBHLGAG@xor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?5b?4?$AA@
	DQ	FLAT:??_C@_07KEKAHHJD@__xor__?$AA@
	DQ	FLAT:op_xor
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@PDBHLGAG@xor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?5b?4?$AA@
	DQ	FLAT:??_C@_03NHKIDKBD@or_?$AA@
	DQ	FLAT:op_or_
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@NDAOEIHO@or_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?5b?4?$AA@
	DQ	FLAT:??_C@_06MKEBKDGA@__or__?$AA@
	DQ	FLAT:op_or_
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@NDAOEIHO@or_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?5b?4?$AA@
	DQ	FLAT:??_C@_04GACKEAOH@iadd?$AA@
	DQ	FLAT:op_iadd
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@KKACEDDN@a?5?$DN?5iadd?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?$DN?5b@
	DQ	FLAT:??_C@_08GHKIMIJK@__iadd__?$AA@
	DQ	FLAT:op_iadd
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@KKACEDDN@a?5?$DN?5iadd?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?$DN?5b@
	DQ	FLAT:??_C@_04NBIELBDC@isub?$AA@
	DQ	FLAT:op_isub
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@JKCPOOGH@a?5?$DN?5isub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?$DN?5b@
	DQ	FLAT:??_C@_08FBFNIKOE@__isub__?$AA@
	DQ	FLAT:op_isub
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@JKCPOOGH@a?5?$DN?5isub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?$DN?5b@
	DQ	FLAT:??_C@_04PPMBLMBA@imul?$AA@
	DQ	FLAT:op_imul
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@EAIEMNKM@a?5?$DN?5imul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$DN?5b@
	DQ	FLAT:??_C@_08IIFOJODM@__imul__?$AA@
	DQ	FLAT:op_imul
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@EAIEMNKM@a?5?$DN?5imul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$DN?5b@
	DQ	FLAT:??_C@_09BENDIJEO@ifloordiv?$AA@
	DQ	FLAT:op_ifloordiv
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CI@FPDCBEOO@a?5?$DN?5ifloordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a@
	DQ	FLAT:??_C@_0O@FFFGEHEN@__ifloordiv__?$AA@
	DQ	FLAT:op_ifloordiv
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CI@FPDCBEOO@a?5?$DN?5ifloordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a@
	DQ	FLAT:??_C@_08DKMBKIAC@itruediv?$AA@
	DQ	FLAT:op_itruediv
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CF@GLKGJJHG@a?5?$DN?5itruediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5@
	DQ	FLAT:??_C@_0N@LEBOILNI@__itruediv__?$AA@
	DQ	FLAT:op_itruediv
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CF@GLKGJJHG@a?5?$DN?5itruediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5@
	DQ	FLAT:??_C@_04CGKJBALO@imod?$AA@
	DQ	FLAT:op_imod
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@GGMLGKPB@a?5?$DN?5imod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?$DN?5b@
	DQ	FLAT:??_C@_08GHLKDJPA@__imod__?$AA@
	DQ	FLAT:op_imod
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@GGMLGKPB@a?5?$DN?5imod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?$DN?5b@
	DQ	FLAT:??_C@_07HMLMENJN@ilshift?$AA@
	DQ	FLAT:op_ilshift
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CG@OKINCJM@a?5?$DN?5ilshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM@
	DQ	FLAT:??_C@_0M@KLLHNPFG@__ilshift__?$AA@
	DQ	FLAT:op_ilshift
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CG@OKINCJM@a?5?$DN?5ilshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM@
	DQ	FLAT:??_C@_07ELFNKKAO@irshift?$AA@
	DQ	FLAT:op_irshift
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CG@NHPOICPP@a?5?$DN?5irshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO@
	DQ	FLAT:??_C@_0M@MPLFEGLF@__irshift__?$AA@
	DQ	FLAT:op_irshift
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CG@NHPOICPP@a?5?$DN?5irshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO@
	DQ	FLAT:??_C@_04GNLNMFDB@iand?$AA@
	DQ	FLAT:op_iand
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@BIFIECDB@a?5?$DN?5iand?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?$DN?5b@
	DQ	FLAT:??_C@_08CNBINADL@__iand__?$AA@
	DQ	FLAT:op_iand
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@BIFIECDB@a?5?$DN?5iand?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?$DN?5b@
	DQ	FLAT:??_C@_04FNPGACME@ixor?$AA@
	DQ	FLAT:op_ixor
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@FHKCFHJB@a?5?$DN?5ixor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?$DN?5b@
	DQ	FLAT:??_C@_08EBNDKCJL@__ixor__?$AA@
	DQ	FLAT:op_ixor
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@FHKCFHJB@a?5?$DN?5ixor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?$DN?5b@
	DQ	FLAT:??_C@_03MGBHAPAD@ior?$AA@
	DQ	FLAT:op_ior
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CB@BDPNKJBP@a?5?$DN?5ior?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?$DN?5b?4@
	DQ	FLAT:??_C@_07GMCKKGKN@__ior__?$AA@
	DQ	FLAT:op_ior
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CB@BDPNKJBP@a?5?$DN?5ior?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?$DN?5b?4@
	DQ	FLAT:??_C@_06CMLIEHFC@concat?$AA@
	DQ	FLAT:op_concat
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DG@BBGMCNCL@concat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?0?5f@
	DQ	FLAT:??_C@_0L@BECBLOCO@__concat__?$AA@
	DQ	FLAT:op_concat
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DG@BBGMCNCL@concat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?0?5f@
	DQ	FLAT:??_C@_07BLFCPMNF@iconcat?$AA@
	DQ	FLAT:op_iconcat
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DM@IIMJEMCO@a?5?$DN?5iconcat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL@
	DQ	FLAT:??_C@_0M@CPHBPOKP@__iconcat__?$AA@
	DQ	FLAT:op_iconcat
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DM@IIMJEMCO@a?5?$DN?5iconcat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL@
	DQ	FLAT:??_C@_07OHPOJLHH@getitem?$AA@
	DQ	FLAT:op_getitem
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BP@FOGACANC@getitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN?4?$AA@
	DQ	FLAT:??_C@_0M@GAJGCIJD@__getitem__?$AA@
	DQ	FLAT:op_getitem
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BP@FOGACANC@getitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN?4?$AA@
	DQ	FLAT:??_C@_07BPAPKEKG@setitem?$AA@
	DQ	FLAT:op_setitem
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CG@NIJAIGAO@setitem?$CIa?0?5b?0?5c?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN@
	DQ	FLAT:??_C@_0M@EONDAJAB@__setitem__?$AA@
	DQ	FLAT:op_setitem
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CG@NIJAIGAO@setitem?$CIa?0?5b?0?5c?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN@
	DQ	FLAT:??_C@_07IGPEBMGC@delitem?$AA@
	DQ	FLAT:op_delitem
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CD@LEKNCCCN@delitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5del?5a?$FLb@
	DQ	FLAT:??_C@_0M@CEPPLJAO@__delitem__?$AA@
	DQ	FLAT:op_delitem
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CD@LEKNCCCN@delitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5del?5a?$FLb@
	DQ	FLAT:??_C@_03JGHBODFD@pow?$AA@
	DQ	FLAT:op_pow
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BN@NBBILNGN@pow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?5b?4?$AA@
	DQ	FLAT:??_C@_07HPCNAFMM@__pow__?$AA@
	DQ	FLAT:op_pow
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BN@NBBILNGN@pow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?5b?4?$AA@
	DQ	FLAT:??_C@_04OFDFNOGO@ipow?$AA@
	DQ	FLAT:op_ipow
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CD@GFFFGOPL@a?5?$DN?5ipow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?$DN?5@
	DQ	FLAT:??_C@_08JKFONAME@__ipow__?$AA@
	DQ	FLAT:op_ipow
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CD@GFFFGOPL@a?5?$DN?5ipow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?$DN?5@
	DQ	FLAT:??_C@_02KCAKIFL@lt?$AA@
	DQ	FLAT:op_lt
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BJ@GLCCHEAH@lt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DMb?4?$AA@
	DQ	FLAT:??_C@_06KIIKIGGM@__lt__?$AA@
	DQ	FLAT:op_lt
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BJ@GLCCHEAH@lt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DMb?4?$AA@
	DQ	FLAT:??_C@_02FJPJILEL@le?$AA@
	DQ	FLAT:op_le
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BK@ICHKGCML@le?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DM?$DNb?4?$AA@
	DQ	FLAT:??_C@_06EACPLGJG@__le__?$AA@
	DQ	FLAT:op_le
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BK@ICHKGCML@le?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DM?$DNb?4?$AA@
	DQ	FLAT:??_C@_02HIIGGHJB@eq?$AA@
	DQ	FLAT:op_eq
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BK@KOIEKNMF@eq?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DN?$DNb?4?$AA@
	DQ	FLAT:??_C@_06JCEEBECP@__eq__?$AA@
	DQ	FLAT:op_eq
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BK@KOIEKNMF@eq?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DN?$DNb?4?$AA@
	DQ	FLAT:??_C@_02FKHNFPCF@ne?$AA@
	DQ	FLAT:op_ne
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BK@PEAHKJH@ne?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$CB?$DNb?4?$AA@
	DQ	FLAT:??_C@_06DKOPOFPG@__ne__?$AA@
	DQ	FLAT:op_ne
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BK@PEAHKJH@ne?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$CB?$DNb?4?$AA@
	DQ	FLAT:??_C@_02GHFEHLK@gt?$AA@
	DQ	FLAT:op_gt
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BJ@NIMNJJGI@gt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DOb?4?$AA@
	DQ	FLAT:??_C@_06NPFKLHHN@__gt__?$AA@
	DQ	FLAT:op_gt
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BJ@NIMNJJGI@gt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DOb?4?$AA@
	DQ	FLAT:??_C@_02FFKMGEKK@ge?$AA@
	DQ	FLAT:op_ge
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BK@FPMEPBOP@ge?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DO?$DNb?4?$AA@
	DQ	FLAT:??_C@_06DHPPIHIH@__ge__?$AA@
	DQ	FLAT:op_ge
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BK@FPMEPBOP@ge?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DO?$DNb?4?$AA@
	DQ	FLAT:??_C@_0BA@CCHAPNEK@_compare_digest?$AA@
	DQ	FLAT:compare_digest
	DD	01H
	ORG $+4
	DQ	FLAT:compare_digest__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
itemgetter_doc DB 'itemgetter(item, ...) --> itemgetter object', 0aH, 0aH
	DB	'Return a callable object that fetches the given item(s) from '
	DB	'its operand.', 0aH, 'After f = itemgetter(2), the call f(r) r'
	DB	'eturns r[2].', 0aH, 'After g = itemgetter(2, 5, 3), the call '
	DB	'g(r) returns (r[2], r[5], r[3])', 00H
	ORG $+12
itemgetter_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BE@KGDNJIHD@operator?4itemgetter?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:itemgetter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:itemgetter_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	FLAT:itemgetter_doc
	DQ	FLAT:itemgetter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:itemgetter_new
	DQ	0000000000000000H
	ORG $+64
attrgetter_doc DB 'attrgetter(attr, ...) --> attrgetter object', 0aH, 0aH
	DB	'Return a callable object that fetches the given attribute(s) '
	DB	'from its operand.', 0aH, 'After f = attrgetter(''name''), the'
	DB	' call f(r) returns r.name.', 0aH, 'After g = attrgetter(''nam'
	DB	'e'', ''date''), the call g(r) returns (r.name, r.date).', 0aH
	DB	'After h = attrgetter(''name.first'', ''name.last''), the call'
	DB	' h(r) returns', 0aH, '(r.name.first, r.name.last).', 00H
	ORG $+6
attrgetter_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BE@CNOAMID@operator?4attrgetter?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:attrgetter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:attrgetter_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	FLAT:attrgetter_doc
	DQ	FLAT:attrgetter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:attrgetter_new
	DQ	0000000000000000H
	ORG $+64
methodcaller_doc DB 'methodcaller(name, ...) --> methodcaller object', 0aH
	DB	0aH, 'Return a callable object that calls the given method on '
	DB	'its operand.', 0aH, 'After f = methodcaller(''name''), the ca'
	DB	'll f(r) returns r.name().', 0aH, 'After g = methodcaller(''na'
	DB	'me'', ''date'', foo=1), the call g(r) returns', 0aH, 'r.name('
	DB	'''date'', foo=1).', 00H
	ORG $+14
methodcaller_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BG@EMEAEPLI@operator?4methodcaller?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:methodcaller_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:methodcaller_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	FLAT:methodcaller_doc
	DQ	FLAT:methodcaller_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:methodcaller_new
	DQ	0000000000000000H
	ORG $+64
operatormodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08LHJFAFGD@operator?$AA@
	DQ	FLAT:operator_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:operator_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyBool_FromLong:PROC
EXTRN	PyObject_IsTrue:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\operator.c
pdata	SEGMENT
$pdata$truth DD	imagerel truth
	DD	imagerel truth+35
	DD	imagerel $unwind$truth
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$truth DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT truth
_TEXT	SEGMENT
s$ = 48
a1$ = 56
truth	PROC						; COMDAT

; 68   : spami(truth            , PyObject_IsTrue)

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8b ca	 mov	 rcx, rdx
  00007	e8 00 00 00 00	 call	 PyObject_IsTrue
  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	75 07		 jne	 SHORT $LN1@truth
  00011	33 c0		 xor	 eax, eax
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
$LN1@truth:
  00018	8b c8		 mov	 ecx, eax
  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	e9 00 00 00 00	 jmp	 PyBool_FromLong
truth	ENDP
_TEXT	ENDS
PUBLIC	??_C@_06GDNJBEGP@op_add?$AA@			; `string'
EXTRN	PyNumber_Add:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_add DD imagerel op_add
	DD	imagerel op_add+82
	DD	imagerel $unwind$op_add
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_add DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_06GDNJBEGP@op_add?$AA@
CONST	SEGMENT
??_C@_06GDNJBEGP@op_add?$AA@ DB 'op_add', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_add
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_add	PROC						; COMDAT

; 69   : spam2(op_add           , PyNumber_Add)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06GDNJBEGP@op_add?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_add
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_add:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_Add
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_add	ENDP
_TEXT	ENDS
PUBLIC	??_C@_06NCHHOFLK@op_sub?$AA@			; `string'
EXTRN	PyNumber_Subtract:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_sub DD imagerel op_sub
	DD	imagerel op_sub+82
	DD	imagerel $unwind$op_sub
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_sub DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_06NCHHOFLK@op_sub?$AA@
CONST	SEGMENT
??_C@_06NCHHOFLK@op_sub?$AA@ DB 'op_sub', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_sub
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_sub	PROC						; COMDAT

; 70   : spam2(op_sub           , PyNumber_Subtract)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06NCHHOFLK@op_sub?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_sub
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_sub:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_Subtract
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_sub	ENDP
_TEXT	ENDS
PUBLIC	??_C@_06PMDCOIJI@op_mul?$AA@			; `string'
EXTRN	PyNumber_Multiply:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_mul DD imagerel op_mul
	DD	imagerel op_mul+82
	DD	imagerel $unwind$op_mul
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_mul DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_06PMDCOIJI@op_mul?$AA@
CONST	SEGMENT
??_C@_06PMDCOIJI@op_mul?$AA@ DB 'op_mul', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_mul
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_mul	PROC						; COMDAT

; 71   : spam2(op_mul           , PyNumber_Multiply)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06PMDCOIJI@op_mul?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_mul
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_mul:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_Multiply
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_mul	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@ENIFHEKC@op_floordiv?$AA@		; `string'
EXTRN	PyNumber_FloorDivide:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_floordiv DD imagerel op_floordiv
	DD	imagerel op_floordiv+82
	DD	imagerel $unwind$op_floordiv
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_floordiv DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0M@ENIFHEKC@op_floordiv?$AA@
CONST	SEGMENT
??_C@_0M@ENIFHEKC@op_floordiv?$AA@ DB 'op_floordiv', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_floordiv
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_floordiv PROC					; COMDAT

; 72   : spam2(op_floordiv      , PyNumber_FloorDivide)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@ENIFHEKC@op_floordiv?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_floordi
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_floordi:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_FloorDivide
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_floordiv ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@NPABFDHO@op_truediv?$AA@		; `string'
EXTRN	PyNumber_TrueDivide:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_truediv DD imagerel op_truediv
	DD	imagerel op_truediv+82
	DD	imagerel $unwind$op_truediv
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_truediv DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0L@NPABFDHO@op_truediv?$AA@
CONST	SEGMENT
??_C@_0L@NPABFDHO@op_truediv?$AA@ DB 'op_truediv', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_truediv
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_truediv PROC						; COMDAT

; 73   : spam2(op_truediv       , PyNumber_TrueDivide)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NPABFDHO@op_truediv?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_truediv
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_truediv:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_TrueDivide
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_truediv ENDP
_TEXT	ENDS
PUBLIC	??_C@_06CFFKEEDG@op_mod?$AA@			; `string'
EXTRN	PyNumber_Remainder:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_mod DD imagerel op_mod
	DD	imagerel op_mod+82
	DD	imagerel $unwind$op_mod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_mod DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_06CFFKEEDG@op_mod?$AA@
CONST	SEGMENT
??_C@_06CFFKEEDG@op_mod?$AA@ DB 'op_mod', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_mod
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_mod	PROC						; COMDAT

; 74   : spam2(op_mod           , PyNumber_Remainder)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06CFFKEEDG@op_mod?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_mod
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_mod:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_Remainder
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_mod	ENDP
_TEXT	ENDS
EXTRN	PyNumber_Negative:PROC
; Function compile flags: /Ogtpy
;	COMDAT op_neg
_TEXT	SEGMENT
s$ = 8
a1$ = 16
op_neg	PROC						; COMDAT

; 75   : spam1(op_neg           , PyNumber_Negative)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	e9 00 00 00 00	 jmp	 PyNumber_Negative
op_neg	ENDP
_TEXT	ENDS
EXTRN	PyNumber_Positive:PROC
; Function compile flags: /Ogtpy
;	COMDAT op_pos
_TEXT	SEGMENT
s$ = 8
a1$ = 16
op_pos	PROC						; COMDAT

; 76   : spam1(op_pos           , PyNumber_Positive)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	e9 00 00 00 00	 jmp	 PyNumber_Positive
op_pos	ENDP
_TEXT	ENDS
EXTRN	PyNumber_Absolute:PROC
; Function compile flags: /Ogtpy
;	COMDAT op_abs
_TEXT	SEGMENT
s$ = 8
a1$ = 16
op_abs	PROC						; COMDAT

; 77   : spam1(op_abs           , PyNumber_Absolute)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	e9 00 00 00 00	 jmp	 PyNumber_Absolute
op_abs	ENDP
_TEXT	ENDS
EXTRN	PyNumber_Invert:PROC
; Function compile flags: /Ogtpy
;	COMDAT op_inv
_TEXT	SEGMENT
s$ = 8
a1$ = 16
op_inv	PROC						; COMDAT

; 78   : spam1(op_inv           , PyNumber_Invert)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	e9 00 00 00 00	 jmp	 PyNumber_Invert
op_inv	ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT op_invert
_TEXT	SEGMENT
s$ = 8
a1$ = 16
op_invert PROC						; COMDAT

; 79   : spam1(op_invert        , PyNumber_Invert)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	e9 00 00 00 00	 jmp	 PyNumber_Invert
op_invert ENDP
_TEXT	ENDS
PUBLIC	??_C@_09GJPJDMFA@op_lshift?$AA@			; `string'
EXTRN	PyNumber_Lshift:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_lshift DD imagerel op_lshift
	DD	imagerel op_lshift+82
	DD	imagerel $unwind$op_lshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_lshift DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_09GJPJDMFA@op_lshift?$AA@
CONST	SEGMENT
??_C@_09GJPJDMFA@op_lshift?$AA@ DB 'op_lshift', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_lshift
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_lshift PROC						; COMDAT

; 80   : spam2(op_lshift        , PyNumber_Lshift)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09GJPJDMFA@op_lshift?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_lshift
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_lshift:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_Lshift
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_lshift ENDP
_TEXT	ENDS
PUBLIC	??_C@_09FOBINLMD@op_rshift?$AA@			; `string'
EXTRN	PyNumber_Rshift:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_rshift DD imagerel op_rshift
	DD	imagerel op_rshift+82
	DD	imagerel $unwind$op_rshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_rshift DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_09FOBINLMD@op_rshift?$AA@
CONST	SEGMENT
??_C@_09FOBINLMD@op_rshift?$AA@ DB 'op_rshift', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_rshift
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_rshift PROC						; COMDAT

; 81   : spam2(op_rshift        , PyNumber_Rshift)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09FOBINLMD@op_rshift?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_rshift
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_rshift:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_Rshift
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_rshift ENDP
_TEXT	ENDS
EXTRN	PyObject_Not:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_not_ DD imagerel op_not_
	DD	imagerel op_not_+35
	DD	imagerel $unwind$op_not_
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_not_ DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT op_not_
_TEXT	SEGMENT
s$ = 48
a1$ = 56
op_not_	PROC						; COMDAT

; 82   : spami(op_not_          , PyObject_Not)

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8b ca	 mov	 rcx, rdx
  00007	e8 00 00 00 00	 call	 PyObject_Not
  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	75 07		 jne	 SHORT $LN1@op_not_
  00011	33 c0		 xor	 eax, eax
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
$LN1@op_not_:
  00018	8b c8		 mov	 ecx, eax
  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	e9 00 00 00 00	 jmp	 PyBool_FromLong
op_not_	ENDP
_TEXT	ENDS
PUBLIC	??_C@_07IPPAAECC@op_and_?$AA@			; `string'
EXTRN	PyNumber_And:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_and_ DD imagerel op_and_
	DD	imagerel op_and_+82
	DD	imagerel $unwind$op_and_
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_and_ DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_07IPPAAECC@op_and_?$AA@
CONST	SEGMENT
??_C@_07IPPAAECC@op_and_?$AA@ DB 'op_and_', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_and_
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_and_	PROC						; COMDAT

; 83   : spam2(op_and_          , PyNumber_And)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07IPPAAECC@op_and_?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_and_
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_and_:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_And
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_and_	ENDP
_TEXT	ENDS
PUBLIC	??_C@_06FOAFFGEM@op_xor?$AA@			; `string'
EXTRN	PyNumber_Xor:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_xor DD imagerel op_xor
	DD	imagerel op_xor+82
	DD	imagerel $unwind$op_xor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_xor DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_06FOAFFGEM@op_xor?$AA@
CONST	SEGMENT
??_C@_06FOAFFGEM@op_xor?$AA@ DB 'op_xor', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_xor
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_xor	PROC						; COMDAT

; 84   : spam2(op_xor           , PyNumber_Xor)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06FOAFFGEM@op_xor?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_xor
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_xor:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_Xor
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_xor	ENDP
_TEXT	ENDS
PUBLIC	??_C@_06KHBPFDKG@op_or_?$AA@			; `string'
EXTRN	PyNumber_Or:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_or_ DD imagerel op_or_
	DD	imagerel op_or_+82
	DD	imagerel $unwind$op_or_
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_or_ DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_06KHBPFDKG@op_or_?$AA@
CONST	SEGMENT
??_C@_06KHBPFDKG@op_or_?$AA@ DB 'op_or_', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_or_
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_or_	PROC						; COMDAT

; 85   : spam2(op_or_           , PyNumber_Or)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06KHBPFDKG@op_or_?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_or_
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_or_:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_Or
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_or_	ENDP
_TEXT	ENDS
PUBLIC	??_C@_07NLFBLAIN@op_iadd?$AA@			; `string'
EXTRN	PyNumber_InPlaceAdd:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_iadd DD imagerel op_iadd
	DD	imagerel op_iadd+82
	DD	imagerel $unwind$op_iadd
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_iadd DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_07NLFBLAIN@op_iadd?$AA@
CONST	SEGMENT
??_C@_07NLFBLAIN@op_iadd?$AA@ DB 'op_iadd', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_iadd
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_iadd	PROC						; COMDAT

; 86   : spam2(op_iadd          , PyNumber_InPlaceAdd)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07NLFBLAIN@op_iadd?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_iadd
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_iadd:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_InPlaceAdd
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_iadd	ENDP
_TEXT	ENDS
PUBLIC	??_C@_07GKPPEBFI@op_isub?$AA@			; `string'
EXTRN	PyNumber_InPlaceSubtract:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_isub DD imagerel op_isub
	DD	imagerel op_isub+82
	DD	imagerel $unwind$op_isub
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_isub DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_07GKPPEBFI@op_isub?$AA@
CONST	SEGMENT
??_C@_07GKPPEBFI@op_isub?$AA@ DB 'op_isub', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_isub
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_isub	PROC						; COMDAT

; 87   : spam2(op_isub          , PyNumber_InPlaceSubtract)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07GKPPEBFI@op_isub?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_isub
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_isub:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_InPlaceSubtract
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_isub	ENDP
_TEXT	ENDS
PUBLIC	??_C@_07EELKEMHK@op_imul?$AA@			; `string'
EXTRN	PyNumber_InPlaceMultiply:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_imul DD imagerel op_imul
	DD	imagerel op_imul+82
	DD	imagerel $unwind$op_imul
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_imul DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_07EELKEMHK@op_imul?$AA@
CONST	SEGMENT
??_C@_07EELKEMHK@op_imul?$AA@ DB 'op_imul', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_imul
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_imul	PROC						; COMDAT

; 88   : spam2(op_imul          , PyNumber_InPlaceMultiply)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07EELKEMHK@op_imul?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_imul
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_imul:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_InPlaceMultiply
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_imul	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@BOKCAAMH@op_ifloordiv?$AA@		; `string'
EXTRN	PyNumber_InPlaceFloorDivide:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_ifloordiv DD imagerel op_ifloordiv
	DD	imagerel op_ifloordiv+82
	DD	imagerel $unwind$op_ifloordiv
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_ifloordiv DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0N@BOKCAAMH@op_ifloordiv?$AA@
CONST	SEGMENT
??_C@_0N@BOKCAAMH@op_ifloordiv?$AA@ DB 'op_ifloordiv', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_ifloordiv
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_ifloordiv PROC					; COMDAT

; 89   : spam2(op_ifloordiv     , PyNumber_InPlaceFloorDivide)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@BOKCAAMH@op_ifloordiv?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_ifloord
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_ifloord:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_InPlaceFloorDivide
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_ifloordiv ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@ELOGAGIM@op_itruediv?$AA@		; `string'
EXTRN	PyNumber_InPlaceTrueDivide:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_itruediv DD imagerel op_itruediv
	DD	imagerel op_itruediv+82
	DD	imagerel $unwind$op_itruediv
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_itruediv DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0M@ELOGAGIM@op_itruediv?$AA@
CONST	SEGMENT
??_C@_0M@ELOGAGIM@op_itruediv?$AA@ DB 'op_itruediv', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_itruediv
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_itruediv PROC					; COMDAT

; 90   : spam2(op_itruediv      , PyNumber_InPlaceTrueDivide)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@ELOGAGIM@op_itruediv?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_itruedi
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_itruedi:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_InPlaceTrueDivide
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_itruediv ENDP
_TEXT	ENDS
PUBLIC	??_C@_07JNNCOANE@op_imod?$AA@			; `string'
EXTRN	PyNumber_InPlaceRemainder:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_imod DD imagerel op_imod
	DD	imagerel op_imod+82
	DD	imagerel $unwind$op_imod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_imod DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_07JNNCOANE@op_imod?$AA@
CONST	SEGMENT
??_C@_07JNNCOANE@op_imod?$AA@ DB 'op_imod', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_imod
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_imod	PROC						; COMDAT

; 91   : spam2(op_imod          , PyNumber_InPlaceRemainder)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07JNNCOANE@op_imod?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_imod
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_imod:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_InPlaceRemainder
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_imod	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@OKJHEKNJ@op_ilshift?$AA@		; `string'
EXTRN	PyNumber_InPlaceLshift:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_ilshift DD imagerel op_ilshift
	DD	imagerel op_ilshift+82
	DD	imagerel $unwind$op_ilshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_ilshift DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0L@OKJHEKNJ@op_ilshift?$AA@
CONST	SEGMENT
??_C@_0L@OKJHEKNJ@op_ilshift?$AA@ DB 'op_ilshift', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_ilshift
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_ilshift PROC						; COMDAT

; 92   : spam2(op_ilshift       , PyNumber_InPlaceLshift)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@OKJHEKNJ@op_ilshift?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_ilshift
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_ilshift:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_InPlaceLshift
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_ilshift ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@NNHGKNEK@op_irshift?$AA@		; `string'
EXTRN	PyNumber_InPlaceRshift:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_irshift DD imagerel op_irshift
	DD	imagerel op_irshift+82
	DD	imagerel $unwind$op_irshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_irshift DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0L@NNHGKNEK@op_irshift?$AA@
CONST	SEGMENT
??_C@_0L@NNHGKNEK@op_irshift?$AA@ DB 'op_irshift', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_irshift
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_irshift PROC						; COMDAT

; 93   : spam2(op_irshift       , PyNumber_InPlaceRshift)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NNHGKNEK@op_irshift?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_irshift
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_irshift:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_InPlaceRshift
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_irshift ENDP
_TEXT	ENDS
PUBLIC	??_C@_07NGMGDFFL@op_iand?$AA@			; `string'
EXTRN	PyNumber_InPlaceAnd:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_iand DD imagerel op_iand
	DD	imagerel op_iand+82
	DD	imagerel $unwind$op_iand
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_iand DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_07NGMGDFFL@op_iand?$AA@
CONST	SEGMENT
??_C@_07NGMGDFFL@op_iand?$AA@ DB 'op_iand', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_iand
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_iand	PROC						; COMDAT

; 94   : spam2(op_iand          , PyNumber_InPlaceAnd)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07NGMGDFFL@op_iand?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_iand
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_iand:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_InPlaceAnd
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_iand	ENDP
_TEXT	ENDS
PUBLIC	??_C@_07OGINPCKO@op_ixor?$AA@			; `string'
EXTRN	PyNumber_InPlaceXor:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_ixor DD imagerel op_ixor
	DD	imagerel op_ixor+82
	DD	imagerel $unwind$op_ixor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_ixor DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_07OGINPCKO@op_ixor?$AA@
CONST	SEGMENT
??_C@_07OGINPCKO@op_ixor?$AA@ DB 'op_ixor', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_ixor
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_ixor	PROC						; COMDAT

; 95   : spam2(op_ixor          , PyNumber_InPlaceXor)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07OGINPCKO@op_ixor?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_ixor
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_ixor:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_InPlaceXor
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_ixor	ENDP
_TEXT	ENDS
PUBLIC	??_C@_06LGKAGGLG@op_ior?$AA@			; `string'
EXTRN	PyNumber_InPlaceOr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_ior DD imagerel op_ior
	DD	imagerel op_ior+82
	DD	imagerel $unwind$op_ior
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_ior DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_06LGKAGGLG@op_ior?$AA@
CONST	SEGMENT
??_C@_06LGKAGGLG@op_ior?$AA@ DB 'op_ior', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_ior
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_ior	PROC						; COMDAT

; 96   : spam2(op_ior           , PyNumber_InPlaceOr)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06LGKAGGLG@op_ior?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_ior
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_ior:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyNumber_InPlaceOr
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_ior	ENDP
_TEXT	ENDS
PUBLIC	??_C@_09OBHINBI@op_concat?$AA@			; `string'
EXTRN	PySequence_Concat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_concat DD imagerel op_concat
	DD	imagerel op_concat+82
	DD	imagerel $unwind$op_concat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_concat DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_09OBHINBI@op_concat?$AA@
CONST	SEGMENT
??_C@_09OBHINBI@op_concat?$AA@ DB 'op_concat', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_concat
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_concat PROC						; COMDAT

; 97   : spam2(op_concat        , PySequence_Concat)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09OBHINBI@op_concat?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_concat
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_concat:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PySequence_Concat
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_concat ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@INHJPLJB@op_iconcat?$AA@		; `string'
EXTRN	PySequence_InPlaceConcat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_iconcat DD imagerel op_iconcat
	DD	imagerel op_iconcat+82
	DD	imagerel $unwind$op_iconcat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_iconcat DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0L@INHJPLJB@op_iconcat?$AA@
CONST	SEGMENT
??_C@_0L@INHJPLJB@op_iconcat?$AA@ DB 'op_iconcat', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_iconcat
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_iconcat PROC						; COMDAT

; 98   : spam2(op_iconcat       , PySequence_InPlaceConcat)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@INHJPLJB@op_iconcat?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_iconcat
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_iconcat:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PySequence_InPlaceConcat
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_iconcat ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@OLOJBIKN@op_contains?$AA@		; `string'
EXTRN	PySequence_Contains:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_contains DD imagerel op_contains
	DD	imagerel op_contains+94
	DD	imagerel $unwind$op_contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_contains DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0M@OLOJBIKN@op_contains?$AA@
CONST	SEGMENT
??_C@_0M@OLOJBIKN@op_contains?$AA@ DB 'op_contains', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_contains
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_contains PROC					; COMDAT

; 99   : spami2b(op_contains     , PySequence_Contains)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@OLOJBIKN@op_contains?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN2@op_contain
$LN5@op_contain:
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN2@op_contain:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PySequence_Contains
  0004d	83 f8 ff	 cmp	 eax, -1
  00050	74 e5		 je	 SHORT $LN5@op_contain
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 PyBool_FromLong
  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
op_contains ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PySequence_Index:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$indexOf DD imagerel indexOf
	DD	imagerel indexOf+96
	DD	imagerel $unwind$indexOf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$indexOf DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT indexOf
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
indexOf	PROC						; COMDAT

; 100  : spamn2(indexOf         , PySequence_Index)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07KKKNJHGA@indexOf?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN2@indexOf
$LN5@indexOf:
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN2@indexOf:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PySequence_Index
  0004d	48 83 f8 ff	 cmp	 rax, -1
  00051	74 e4		 je	 SHORT $LN5@indexOf
  00053	48 8b c8	 mov	 rcx, rax
  00056	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  0005b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005f	c3		 ret	 0
indexOf	ENDP
_TEXT	ENDS
EXTRN	PySequence_Count:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$countOf DD imagerel countOf
	DD	imagerel countOf+96
	DD	imagerel $unwind$countOf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$countOf DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT countOf
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
countOf	PROC						; COMDAT

; 101  : spamn2(countOf         , PySequence_Count)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07GIJGNPIL@countOf?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN2@countOf
$LN5@countOf:
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN2@countOf:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PySequence_Count
  0004d	48 83 f8 ff	 cmp	 rax, -1
  00051	74 e4		 je	 SHORT $LN5@countOf
  00053	48 8b c8	 mov	 rcx, rax
  00056	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  0005b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005f	c3		 ret	 0
countOf	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@HBNFJMDD@op_getitem?$AA@		; `string'
EXTRN	PyObject_GetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_getitem DD imagerel op_getitem
	DD	imagerel op_getitem+82
	DD	imagerel $unwind$op_getitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_getitem DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0L@HBNFJMDD@op_getitem?$AA@
CONST	SEGMENT
??_C@_0L@HBNFJMDD@op_getitem?$AA@ DB 'op_getitem', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_getitem
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_getitem PROC						; COMDAT

; 102  : spam2(op_getitem       , PyObject_GetItem)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@HBNFJMDD@op_getitem?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_getitem
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_getitem:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyObject_GetItem
  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
op_getitem ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@BANPBLCG@op_delitem?$AA@		; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyObject_DelItem:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$op_delitem DD imagerel op_delitem
	DD	imagerel op_delitem+163
	DD	imagerel $unwind$op_delitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_delitem DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0L@BANPBLCG@op_delitem?$AA@
CONST	SEGMENT
??_C@_0L@BANPBLCG@op_delitem?$AA@ DB 'op_delitem', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\operator.c
CONST	ENDS
;	COMDAT op_delitem
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_delitem PROC						; COMDAT

; 103  : spam2n(op_delitem       , PyObject_DelItem)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@BANPBLCG@op_delitem?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN2@op_delitem
$LN9@op_delitem:
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN2@op_delitem:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	e8 00 00 00 00	 call	 PyObject_DelItem
  0004d	83 f8 ff	 cmp	 eax, -1
  00050	74 e5		 je	 SHORT $LN9@op_delitem
  00052	e8 00 00 00 00	 call	 _Py_PXCTX
  00057	85 c0		 test	 eax, eax
  00059	75 3c		 jne	 SHORT $LN6@op_delitem
  0005b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00070	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00076	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00083	85 c0		 test	 eax, eax
  00085	75 09		 jne	 SHORT $LN5@op_delitem
  00087	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0008e	74 07		 je	 SHORT $LN6@op_delitem
$LN5@op_delitem:
  00090	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@op_delitem:
  00097	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
op_delitem ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@IJCEKDOC@op_setitem?$AA@		; `string'
EXTRN	PyObject_SetItem:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$op_setitem DD imagerel op_setitem
	DD	imagerel op_setitem+178
	DD	imagerel $unwind$op_setitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_setitem DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT ??_C@_0L@IJCEKDOC@op_setitem?$AA@
CONST	SEGMENT
??_C@_0L@IJCEKDOC@op_setitem?$AA@ DB 'op_setitem', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\operator.c
CONST	ENDS
;	COMDAT op_setitem
_TEXT	SEGMENT
a1$ = 64
s$ = 96
a$ = 104
a3$ = 112
a2$ = 120
op_setitem PROC						; COMDAT

; 104  : spam3n(op_setitem      , PyObject_SetItem)

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 70	 lea	 rcx, QWORD PTR a3$[rsp]
  0000c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00012	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00017	48 8d 4c 24 78	 lea	 rcx, QWORD PTR a2$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@IJCEKDOC@op_setitem?$AA@
  00023	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00028	48 8d 4c 24 40	 lea	 rcx, QWORD PTR a1$[rsp]
  0002d	45 8b c1	 mov	 r8d, r9d
  00030	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003d	85 c0		 test	 eax, eax
  0003f	75 07		 jne	 SHORT $LN2@op_setitem
$LN9@op_setitem:
  00041	33 c0		 xor	 eax, eax
  00043	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00047	c3		 ret	 0
$LN2@op_setitem:
  00048	4c 8b 44 24 70	 mov	 r8, QWORD PTR a3$[rsp]
  0004d	48 8b 54 24 78	 mov	 rdx, QWORD PTR a2$[rsp]
  00052	48 8b 4c 24 40	 mov	 rcx, QWORD PTR a1$[rsp]
  00057	e8 00 00 00 00	 call	 PyObject_SetItem
  0005c	83 f8 ff	 cmp	 eax, -1
  0005f	74 e0		 je	 SHORT $LN9@op_setitem
  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	75 3c		 jne	 SHORT $LN6@op_setitem
  0006a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0007f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00085	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0008d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00092	85 c0		 test	 eax, eax
  00094	75 09		 jne	 SHORT $LN5@op_setitem
  00096	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0009d	74 07		 je	 SHORT $LN6@op_setitem
$LN5@op_setitem:
  0009f	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@op_setitem:
  000a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000ad	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000b1	c3		 ret	 0
op_setitem ENDP
_TEXT	ENDS
PUBLIC	??_C@_05NHLNJCFO@op_lt?$AA@			; `string'
EXTRN	PyObject_RichCompare:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_lt DD	imagerel op_lt
	DD	imagerel op_lt+85
	DD	imagerel $unwind$op_lt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_lt DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_05NHLNJCFO@op_lt?$AA@
CONST	SEGMENT
??_C@_05NHLNJCFO@op_lt?$AA@ DB 'op_lt', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_lt
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_lt	PROC						; COMDAT

; 105  : spamrc(op_lt           , Py_LT)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05NHLNJCFO@op_lt?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_lt
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_lt:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	45 33 c0	 xor	 r8d, r8d
  0004b	e8 00 00 00 00	 call	 PyObject_RichCompare
  00050	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00054	c3		 ret	 0
op_lt	ENDP
_TEXT	ENDS
PUBLIC	??_C@_05IEGELBEO@op_le?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_le DD	imagerel op_le
	DD	imagerel op_le+88
	DD	imagerel $unwind$op_le
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_le DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_05IEGELBEO@op_le?$AA@
CONST	SEGMENT
??_C@_05IEGELBEO@op_le?$AA@ DB 'op_le', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_le
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_le	PROC						; COMDAT

; 106  : spamrc(op_le           , Py_LE)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05IEGELBEO@op_le?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_le
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_le:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	41 b8 01 00 00
	00		 mov	 r8d, 1
  0004e	e8 00 00 00 00	 call	 PyObject_RichCompare
  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	c3		 ret	 0
op_le	ENDP
_TEXT	ENDS
PUBLIC	??_C@_05KFBLFNJE@op_eq?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_eq DD	imagerel op_eq
	DD	imagerel op_eq+88
	DD	imagerel $unwind$op_eq
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_eq DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_05KFBLFNJE@op_eq?$AA@
CONST	SEGMENT
??_C@_05KFBLFNJE@op_eq?$AA@ DB 'op_eq', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_eq
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_eq	PROC						; COMDAT

; 107  : spamrc(op_eq           , Py_EQ)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KFBLFNJE@op_eq?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_eq
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_eq:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	41 b8 02 00 00
	00		 mov	 r8d, 2
  0004e	e8 00 00 00 00	 call	 PyObject_RichCompare
  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	c3		 ret	 0
op_eq	ENDP
_TEXT	ENDS
PUBLIC	??_C@_05IHOAGFCA@op_ne?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_ne DD	imagerel op_ne
	DD	imagerel op_ne+88
	DD	imagerel $unwind$op_ne
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_ne DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_05IHOAGFCA@op_ne?$AA@
CONST	SEGMENT
??_C@_05IHOAGFCA@op_ne?$AA@ DB 'op_ne', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_ne
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_ne	PROC						; COMDAT

; 108  : spamrc(op_ne           , Py_NE)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05IHOAGFCA@op_ne?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_ne
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_ne:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	41 b8 03 00 00
	00		 mov	 r8d, 3
  0004e	e8 00 00 00 00	 call	 PyObject_RichCompare
  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	c3		 ret	 0
op_ne	ENDP
_TEXT	ENDS
PUBLIC	??_C@_05NLOIHNLP@op_gt?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_gt DD	imagerel op_gt
	DD	imagerel op_gt+88
	DD	imagerel $unwind$op_gt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_gt DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_05NLOIHNLP@op_gt?$AA@
CONST	SEGMENT
??_C@_05NLOIHNLP@op_gt?$AA@ DB 'op_gt', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_gt
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_gt	PROC						; COMDAT

; 109  : spamrc(op_gt           , Py_GT)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05NLOIHNLP@op_gt?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_gt
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_gt:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	41 b8 04 00 00
	00		 mov	 r8d, 4
  0004e	e8 00 00 00 00	 call	 PyObject_RichCompare
  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	c3		 ret	 0
op_gt	ENDP
_TEXT	ENDS
PUBLIC	??_C@_05IIDBFOKP@op_ge?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_ge DD	imagerel op_ge
	DD	imagerel op_ge+88
	DD	imagerel $unwind$op_ge
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_ge DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_05IIDBFOKP@op_ge?$AA@
CONST	SEGMENT
??_C@_05IIDBFOKP@op_ge?$AA@ DB 'op_ge', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT op_ge
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_ge	PROC						; COMDAT

; 110  : spamrc(op_ge           , Py_GE)

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx
  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05IIDBFOKP@op_ge?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@op_ge
  00037	33 c0		 xor	 eax, eax
  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
$LN1@op_ge:
  0003e	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00048	41 b8 05 00 00
	00		 mov	 r8d, 5
  0004e	e8 00 00 00 00	 call	 PyObject_RichCompare
  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	c3		 ret	 0
op_ge	ENDP
_TEXT	ENDS
EXTRN	PyNumber_Power:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_pow DD imagerel op_pow
	DD	imagerel op_pow+89
	DD	imagerel $unwind$op_pow
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_pow DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT op_pow
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_pow	PROC						; COMDAT

; 114  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx

; 115  :     PyObject *a1, *a2;
; 116  :     if (PyArg_UnpackTuple(a,"pow", 2, 2, &a1, &a2))

  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03JGHBODFD@pow?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	74 1b		 je	 SHORT $LN1@op_pow

; 117  :         return PyNumber_Power(a1, a2, Py_None);

  00037	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  0003c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00041	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  00048	e8 00 00 00 00	 call	 PyNumber_Power

; 119  : }

  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
$LN1@op_pow:

; 118  :     return NULL;

  00052	33 c0		 xor	 eax, eax

; 119  : }

  00054	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00058	c3		 ret	 0
op_pow	ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlacePower:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_ipow DD imagerel op_ipow
	DD	imagerel op_ipow+89
	DD	imagerel $unwind$op_ipow
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_ipow DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT op_ipow
_TEXT	SEGMENT
s$ = 64
a$ = 72
a2$ = 80
a1$ = 88
op_ipow	PROC						; COMDAT

; 123  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx

; 124  :     PyObject *a1, *a2;
; 125  :     if (PyArg_UnpackTuple(a,"ipow", 2, 2, &a1, &a2))

  00007	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04OFDFNOGO@ipow?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	74 1b		 je	 SHORT $LN1@op_ipow

; 126  :         return PyNumber_InPlacePower(a1, a2, Py_None);

  00037	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  0003c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a1$[rsp]
  00041	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  00048	e8 00 00 00 00	 call	 PyNumber_InPlacePower

; 128  : }

  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
$LN1@op_ipow:

; 127  :     return NULL;

  00052	33 c0		 xor	 eax, eax

; 128  : }

  00054	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00058	c3		 ret	 0
op_ipow	ENDP
_TEXT	ENDS
EXTRN	PyNumber_Index:PROC
; Function compile flags: /Ogtpy
;	COMDAT op_index
_TEXT	SEGMENT
s$ = 8
a$ = 16
op_index PROC						; COMDAT

; 133  :     return PyNumber_Index(a);

  00000	48 8b ca	 mov	 rcx, rdx

; 134  : }

  00003	e9 00 00 00 00	 jmp	 PyNumber_Index
op_index ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$is_ DD	imagerel is_
	DD	imagerel is_+60
	DD	imagerel $unwind$is_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$is_ DD	imagerel is_+60
	DD	imagerel is_+160
	DD	imagerel $chain$0$is_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$is_ DD	imagerel is_+160
	DD	imagerel is_+167
	DD	imagerel $chain$1$is_
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$is_ DD	021H
	DD	imagerel is_
	DD	imagerel is_+60
	DD	imagerel $unwind$is_
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$is_ DD	020521H
	DD	063405H
	DD	imagerel is_
	DD	imagerel is_+60
	DD	imagerel $unwind$is_
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$is_ DD	010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\operator.c
xdata	ENDS
;	COMDAT is_
_TEXT	SEGMENT
s$ = 64
a$ = 72
a1$ = 80
a2$ = 88
is_	PROC						; COMDAT

; 138  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx

; 139  :     PyObject *a1, *a2, *result = NULL;
; 140  :     if (PyArg_UnpackTuple(a,"is_", 2, 2, &a1, &a2)) {

  00007	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PDABAPPI@is_?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	74 69		 je	 SHORT $LN10@is_

; 141  :         result = (a1 == a2) ? Py_True : Py_False;

  00037	48 8b 44 24 50	 mov	 rax, QWORD PTR a1$[rsp]
  0003c	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00048	48 3b 44 24 58	 cmp	 rax, QWORD PTR a2$[rsp]
  0004d	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00054	48 0f 44 d9	 cmove	 rbx, rcx

; 142  :         Py_INCREF(result);

  00058	e8 00 00 00 00	 call	 _Py_PXCTX
  0005d	85 c0		 test	 eax, eax
  0005f	75 32		 jne	 SHORT $LN8@is_
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006f	4c 8b cb	 mov	 r9, rbx
  00072	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00078	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00080	e8 00 00 00 00	 call	 _PyParallel_Guard
  00085	85 c0		 test	 eax, eax
  00087	75 06		 jne	 SHORT $LN4@is_
  00089	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0008d	74 04		 je	 SHORT $LN8@is_
$LN4@is_:
  0008f	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN8@is_:

; 143  :     }
; 144  :     return result;

  00093	48 8b c3	 mov	 rax, rbx
  00096	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 145  : }

  0009b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009f	c3		 ret	 0
$LN10@is_:

; 143  :     }
; 144  :     return result;

  000a0	33 c0		 xor	 eax, eax

; 145  : }

  000a2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a6	c3		 ret	 0
is_	ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$is_not DD imagerel is_not
	DD	imagerel is_not+60
	DD	imagerel $unwind$is_not
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$is_not DD imagerel is_not+60
	DD	imagerel is_not+160
	DD	imagerel $chain$0$is_not
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$is_not DD imagerel is_not+160
	DD	imagerel is_not+167
	DD	imagerel $chain$1$is_not
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$is_not DD 021H
	DD	imagerel is_not
	DD	imagerel is_not+60
	DD	imagerel $unwind$is_not
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$is_not DD 020521H
	DD	063405H
	DD	imagerel is_not
	DD	imagerel is_not+60
	DD	imagerel $unwind$is_not
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$is_not DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\operator.c
xdata	ENDS
;	COMDAT is_not
_TEXT	SEGMENT
s$ = 64
a$ = 72
a1$ = 80
a2$ = 88
is_not	PROC						; COMDAT

; 149  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 8b c2	 mov	 rax, rdx

; 150  :     PyObject *a1, *a2, *result = NULL;
; 151  :     if (PyArg_UnpackTuple(a,"is_not", 2, 2, &a1, &a2)) {

  00007	48 8d 4c 24 58	 lea	 rcx, QWORD PTR a2$[rsp]
  0000c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00012	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00017	48 8d 4c 24 50	 lea	 rcx, QWORD PTR a1$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06JIGJLOBN@is_not?$AA@
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	48 8b c8	 mov	 rcx, rax
  0002b	45 8b c1	 mov	 r8d, r9d
  0002e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00033	85 c0		 test	 eax, eax
  00035	74 69		 je	 SHORT $LN10@is_not

; 152  :         result = (a1 != a2) ? Py_True : Py_False;

  00037	48 8b 44 24 50	 mov	 rax, QWORD PTR a1$[rsp]
  0003c	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00048	48 3b 44 24 58	 cmp	 rax, QWORD PTR a2$[rsp]
  0004d	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00054	48 0f 45 d9	 cmovne	 rbx, rcx

; 153  :         Py_INCREF(result);

  00058	e8 00 00 00 00	 call	 _Py_PXCTX
  0005d	85 c0		 test	 eax, eax
  0005f	75 32		 jne	 SHORT $LN8@is_not
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006f	4c 8b cb	 mov	 r9, rbx
  00072	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00078	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00080	e8 00 00 00 00	 call	 _PyParallel_Guard
  00085	85 c0		 test	 eax, eax
  00087	75 06		 jne	 SHORT $LN4@is_not
  00089	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0008d	74 04		 je	 SHORT $LN8@is_not
$LN4@is_not:
  0008f	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN8@is_not:

; 154  :     }
; 155  :     return result;

  00093	48 8b c3	 mov	 rax, rbx
  00096	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 156  : }

  0009b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009f	c3		 ret	 0
$LN10@is_not:

; 154  :     }
; 155  :     return result;

  000a0	33 c0		 xor	 eax, eax

; 156  : }

  000a2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a6	c3		 ret	 0
is_not	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tscmp DD imagerel _tscmp
	DD	imagerel _tscmp+125
	DD	imagerel $unwind$_tscmp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tscmp DD 020501H
	DD	013405H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _tscmp
_TEXT	SEGMENT
a$ = 8
result$ = 16
length$ = 16
b$ = 16
len_a$ = 24
len_b$ = 32
_tscmp	PROC						; COMDAT

; 176  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx

; 177  :     /* The volatile type declarations make sure that the compiler has no
; 178  :      * chance to optimize and fold the code in any way that may change
; 179  :      * the timing.
; 180  :      */
; 181  :     volatile Py_ssize_t length;
; 182  :     volatile const unsigned char *left;
; 183  :     volatile const unsigned char *right;
; 184  :     Py_ssize_t i;
; 185  :     unsigned char result;
; 186  : 
; 187  :     /* loop count depends on length of b */
; 188  :     length = len_b;
; 189  :     left = NULL;

  00005	33 db		 xor	 ebx, ebx
  00007	4c 89 4c 24 10	 mov	 QWORD PTR length$[rsp], r9
  0000c	4c 8b d2	 mov	 r10, rdx

; 190  :     right = b;
; 191  : 
; 192  :     /* don't use else here to keep the amount of CPU instructions constant,
; 193  :      * volatile forces re-evaluation
; 194  :      *  */
; 195  :     if (len_a == length) {

  0000f	48 8b 44 24 10	 mov	 rax, QWORD PTR length$[rsp]
  00014	44 8b db	 mov	 r11d, ebx
  00017	4c 3b c0	 cmp	 r8, rax
  0001a	75 08		 jne	 SHORT $LN10@tscmp

; 196  :         left = *((volatile const unsigned char**)&a);

  0001c	4c 8b d9	 mov	 r11, rcx

; 197  :         result = 0;

  0001f	45 32 c9	 xor	 r9b, r9b
  00022	eb 06		 jmp	 SHORT $LN5@tscmp
$LN10@tscmp:
  00024	44 0f b6 4c 24
	10		 movzx	 r9d, BYTE PTR result$[rsp]
$LN5@tscmp:

; 198  :     }
; 199  :     if (len_a != length) {

  0002a	48 8b 44 24 10	 mov	 rax, QWORD PTR length$[rsp]
  0002f	4c 3b c0	 cmp	 r8, rax
  00032	74 06		 je	 SHORT $LN4@tscmp

; 200  :         left = b;

  00034	4c 8b da	 mov	 r11, rdx

; 201  :         result = 1;

  00037	41 b1 01	 mov	 r9b, 1
$LN4@tscmp:

; 202  :     }
; 203  : 
; 204  :     for (i=0; i < length; i++) {

  0003a	48 8b 44 24 10	 mov	 rax, QWORD PTR length$[rsp]
  0003f	48 85 c0	 test	 rax, rax
  00042	7e 2b		 jle	 SHORT $LN1@tscmp
  00044	4c 8b c2	 mov	 r8, rdx
  00047	49 f7 d8	 neg	 r8
  0004a	4c 2b da	 sub	 r11, rdx
  0004d	0f 1f 00	 npad	 3
$LL3@tscmp:

; 205  :         result |= *left++ ^ *right++;

  00050	43 0f b6 14 13	 movzx	 edx, BYTE PTR [r11+r10]
  00055	41 0f b6 0a	 movzx	 ecx, BYTE PTR [r10]
  00059	49 ff c2	 inc	 r10
  0005c	32 d1		 xor	 dl, cl
  0005e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR length$[rsp]
  00063	44 0a ca	 or	 r9b, dl
  00066	4b 8d 14 10	 lea	 rdx, QWORD PTR [r8+r10]
  0006a	48 3b d1	 cmp	 rdx, rcx
  0006d	7c e1		 jl	 SHORT $LL3@tscmp
$LN1@tscmp:

; 206  :     }
; 207  : 
; 208  :     return (result == 0);

  0006f	45 84 c9	 test	 r9b, r9b
  00072	0f 94 c3	 sete	 bl
  00075	8b c3		 mov	 eax, ebx

; 209  : }

  00077	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  0007c	c3		 ret	 0
_tscmp	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@ ; `string'
PUBLIC	??_C@_0EM@IKPOLIEF@unsupported?5operand?5types?$CIs?$CJ?5or?5@ ; `string'
PUBLIC	??_C@_0DN@MHNBEPFD@comparing?5strings?5with?5non?9ASCII@ ; `string'
PUBLIC	??_C@_0BC@DNPOKLOK@OO?3compare_digest?$AA@	; `string'
EXTRN	PyBuffer_Release:PROC
EXTRN	PyExc_BufferError:QWORD
EXTRN	PyObject_GetBuffer:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	_PyUnicode_Ready:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$compare_digest DD imagerel compare_digest
	DD	imagerel compare_digest+63
	DD	imagerel $unwind$compare_digest
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$compare_digest DD imagerel compare_digest+63
	DD	imagerel compare_digest+304
	DD	imagerel $chain$0$compare_digest
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$compare_digest DD imagerel compare_digest+304
	DD	imagerel compare_digest+428
	DD	imagerel $chain$2$compare_digest
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$compare_digest DD imagerel compare_digest+428
	DD	imagerel compare_digest+504
	DD	imagerel $chain$4$compare_digest
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$compare_digest DD imagerel compare_digest+504
	DD	imagerel compare_digest+597
	DD	imagerel $chain$6$compare_digest
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$compare_digest DD imagerel compare_digest+597
	DD	imagerel compare_digest+670
	DD	imagerel $chain$8$compare_digest
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$compare_digest DD 020021H
	DD	0183400H
	DD	imagerel compare_digest
	DD	imagerel compare_digest+63
	DD	imagerel $unwind$compare_digest
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$compare_digest DD 020021H
	DD	0183400H
	DD	imagerel compare_digest
	DD	imagerel compare_digest+63
	DD	imagerel $unwind$compare_digest
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$compare_digest DD 020021H
	DD	0183400H
	DD	imagerel compare_digest
	DD	imagerel compare_digest+63
	DD	imagerel $unwind$compare_digest
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$compare_digest DD 020021H
	DD	0183400H
	DD	imagerel compare_digest
	DD	imagerel compare_digest+63
	DD	imagerel $unwind$compare_digest
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$compare_digest DD 020821H
	DD	0183408H
	DD	imagerel compare_digest
	DD	imagerel compare_digest+63
	DD	imagerel $unwind$compare_digest
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compare_digest DD 020a01H
	DD	019010aH
xdata	ENDS
;	COMDAT ??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
CONST	SEGMENT
??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@ DB 'Buffer mus'
	DB	't be single dimension', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@IKPOLIEF@unsupported?5operand?5types?$CIs?$CJ?5or?5@
CONST	SEGMENT
??_C@_0EM@IKPOLIEF@unsupported?5operand?5types?$CIs?$CJ?5or?5@ DB 'unsupp'
	DB	'orted operand types(s) or combination of types: ''%.100s'' an'
	DB	'd ''%.100s''', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@MHNBEPFD@comparing?5strings?5with?5non?9ASCII@
CONST	SEGMENT
??_C@_0DN@MHNBEPFD@comparing?5strings?5with?5non?9ASCII@ DB 'comparing st'
	DB	'rings with non-ASCII characters is not supported', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DNPOKLOK@OO?3compare_digest?$AA@
CONST	SEGMENT
??_C@_0BC@DNPOKLOK@OO?3compare_digest?$AA@ DB 'OO:compare_digest', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT compare_digest
_TEXT	SEGMENT
view_a$20793 = 32
view_b$20794 = 112
self$ = 208
args$ = 216
b$ = 224
a$ = 232
compare_digest PROC					; COMDAT

; 225  : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 226  :     PyObject *a, *b;
; 227  :     int rc;
; 228  : 
; 229  :     if (!PyArg_ParseTuple(args, "OO:compare_digest", &a, &b)) {

  0000a	48 8b ca	 mov	 rcx, rdx
  0000d	4c 8d 48 18	 lea	 r9, QWORD PTR [rax+24]
  00011	4c 8d 40 20	 lea	 r8, QWORD PTR [rax+32]
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DNPOKLOK@OO?3compare_digest?$AA@
  0001c	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00021	85 c0		 test	 eax, eax
  00023	75 0a		 jne	 SHORT $LN12@compare_di

; 230  :         return NULL;

  00025	33 c0		 xor	 eax, eax

; 295  : }

  00027	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0002e	c3		 ret	 0
$LN12@compare_di:

; 231  :     }
; 232  : 
; 233  :     /* ASCII unicode string */
; 234  :     if(PyUnicode_Check(a) && PyUnicode_Check(b)) {

  0002f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR a$[rsp]
  00037	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR b$[rsp]
  0003f	48 89 9c 24 c0
	00 00 00	 mov	 QWORD PTR [rsp+192], rbx
  00047	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0004b	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00055	0f 84 d5 00 00
	00		 je	 $LN11@compare_di
  0005b	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0005f	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00069	0f 84 c1 00 00
	00		 je	 $LN11@compare_di

; 235  :         if (PyUnicode_READY(a) == -1 || PyUnicode_READY(b) == -1) {

  0006f	f6 41 70 80	 test	 BYTE PTR [rcx+112], 128	; 00000080H
  00073	75 1e		 jne	 SHORT $LN31@compare_di
  00075	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0007a	83 f8 ff	 cmp	 eax, -1
  0007d	0f 84 c0 01 00
	00		 je	 $LN34@compare_di
  00083	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR b$[rsp]
  0008b	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR a$[rsp]
$LN31@compare_di:
  00093	f6 42 70 80	 test	 BYTE PTR [rdx+112], 128	; 00000080H
  00097	75 21		 jne	 SHORT $LN32@compare_di
  00099	48 8b ca	 mov	 rcx, rdx
  0009c	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000a1	83 f8 ff	 cmp	 eax, -1
  000a4	0f 84 99 01 00
	00		 je	 $LN34@compare_di
  000aa	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR b$[rsp]
  000b2	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR a$[rsp]
$LN32@compare_di:

; 236  :             return NULL;
; 237  :         }
; 238  :         if (!PyUnicode_IS_ASCII(a) || !PyUnicode_IS_ASCII(b)) {

  000ba	44 8b 41 70	 mov	 r8d, DWORD PTR [rcx+112]
  000be	41 f6 c0 40	 test	 r8b, 64			; 00000040H
  000c2	74 47		 je	 SHORT $LN7@compare_di
  000c4	8b 42 70	 mov	 eax, DWORD PTR [rdx+112]
  000c7	a8 40		 test	 al, 64			; 00000040H
  000c9	74 40		 je	 SHORT $LN7@compare_di

; 243  :         }
; 244  : 
; 245  :         rc = _tscmp(PyUnicode_DATA(a),
; 246  :                     PyUnicode_DATA(b),
; 247  :                     PyUnicode_GET_LENGTH(a),
; 248  :                     PyUnicode_GET_LENGTH(b));

  000cb	4c 8d 92 80 00
	00 00		 lea	 r10, QWORD PTR [rdx+128]
  000d2	a8 20		 test	 al, 32			; 00000020H
  000d4	75 07		 jne	 SHORT $LN22@compare_di
  000d6	4c 8b 92 a0 00
	00 00		 mov	 r10, QWORD PTR [rdx+160]
$LN22@compare_di:
  000dd	48 8d 81 80 00
	00 00		 lea	 rax, QWORD PTR [rcx+128]
  000e4	41 f6 c0 20	 test	 r8b, 32			; 00000020H
  000e8	75 07		 jne	 SHORT $LN26@compare_di
  000ea	48 8b 81 a0 00
	00 00		 mov	 rax, QWORD PTR [rcx+160]
$LN26@compare_di:
  000f1	4c 8b 4a 60	 mov	 r9, QWORD PTR [rdx+96]
  000f5	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  000f9	49 8b d2	 mov	 rdx, r10
  000fc	48 8b c8	 mov	 rcx, rax
  000ff	e8 00 00 00 00	 call	 _tscmp
  00104	8b d8		 mov	 ebx, eax

; 249  :     }
; 250  :     /* fallback to buffer interface for bytes, bytesarray and other */
; 251  :     else {

  00106	e9 7c 01 00 00	 jmp	 $LN6@compare_di
$LN7@compare_di:

; 239  :             PyErr_SetString(PyExc_TypeError,
; 240  :                             "comparing strings with non-ASCII characters is "
; 241  :                             "not supported");

  0010b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00112	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@MHNBEPFD@comparing?5strings?5with?5non?9ASCII@
  00119	e8 00 00 00 00	 call	 PyErr_SetString
  0011e	48 8b 9c 24 c0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+192]

; 242  :             return NULL;

  00126	33 c0		 xor	 eax, eax

; 295  : }

  00128	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0012f	c3		 ret	 0
$LN11@compare_di:

; 252  :         Py_buffer view_a;
; 253  :         Py_buffer view_b;
; 254  : 
; 255  :         if ((PyObject_CheckBuffer(a) == 0) & (PyObject_CheckBuffer(b) == 0)) {

  00130	48 8b 59 58	 mov	 rbx, QWORD PTR [rcx+88]
  00134	45 33 c0	 xor	 r8d, r8d
  00137	48 8b 83 f8 00
	00 00		 mov	 rax, QWORD PTR [rbx+248]
  0013e	45 8d 48 01	 lea	 r9d, QWORD PTR [r8+1]
  00142	48 85 c0	 test	 rax, rax
  00145	74 08		 je	 SHORT $LN27@compare_di
  00147	45 8b d1	 mov	 r10d, r9d
  0014a	4c 39 00	 cmp	 QWORD PTR [rax], r8
  0014d	75 03		 jne	 SHORT $LN28@compare_di
$LN27@compare_di:
  0014f	45 8b d0	 mov	 r10d, r8d
$LN28@compare_di:
  00152	4c 8b 5a 58	 mov	 r11, QWORD PTR [rdx+88]
  00156	49 8b 83 f8 00
	00 00		 mov	 rax, QWORD PTR [r11+248]
  0015d	48 85 c0	 test	 rax, rax
  00160	74 05		 je	 SHORT $LN29@compare_di
  00162	4c 39 00	 cmp	 QWORD PTR [rax], r8
  00165	75 03		 jne	 SHORT $LN30@compare_di
$LN29@compare_di:
  00167	45 8b c8	 mov	 r9d, r8d
$LN30@compare_di:
  0016a	45 85 c9	 test	 r9d, r9d
  0016d	41 8b c0	 mov	 eax, r8d
  00170	0f 94 c0	 sete	 al
  00173	45 85 d2	 test	 r10d, r10d
  00176	41 0f 94 c0	 sete	 r8b
  0017a	41 85 c0	 test	 eax, r8d
  0017d	74 2d		 je	 SHORT $LN5@compare_di

; 256  :             PyErr_Format(PyExc_TypeError,
; 257  :                          "unsupported operand types(s) or combination of types: "
; 258  :                          "'%.100s' and '%.100s'",
; 259  :                          Py_TYPE(a)->tp_name, Py_TYPE(b)->tp_name);

  0017f	4d 8b 4b 70	 mov	 r9, QWORD PTR [r11+112]
  00183	4c 8b 43 70	 mov	 r8, QWORD PTR [rbx+112]
  00187	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0018e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EM@IKPOLIEF@unsupported?5operand?5types?$CIs?$CJ?5or?5@
  00195	e8 00 00 00 00	 call	 PyErr_Format
  0019a	48 8b 9c 24 c0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+192]

; 260  :             return NULL;

  001a2	33 c0		 xor	 eax, eax

; 295  : }

  001a4	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  001ab	c3		 ret	 0
$LN5@compare_di:

; 261  :         }
; 262  : 
; 263  :         if (PyObject_GetBuffer(a, &view_a, PyBUF_SIMPLE) == -1) {

  001ac	48 8d 54 24 20	 lea	 rdx, QWORD PTR view_a$20793[rsp]
  001b1	45 33 c0	 xor	 r8d, r8d
  001b4	e8 00 00 00 00	 call	 PyObject_GetBuffer
  001b9	83 f8 ff	 cmp	 eax, -1

; 264  :             return NULL;

  001bc	0f 84 81 00 00
	00		 je	 $LN34@compare_di

; 265  :         }
; 266  :         if (view_a.ndim > 1) {

  001c2	83 7c 24 44 01	 cmp	 DWORD PTR view_a$20793[rsp+36], 1
  001c7	7e 2f		 jle	 SHORT $LN3@compare_di

; 267  :             PyErr_SetString(PyExc_BufferError,
; 268  :                             "Buffer must be single dimension");

  001c9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BufferError
  001d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
  001d7	e8 00 00 00 00	 call	 PyErr_SetString
$LN35@compare_di:

; 269  :             PyBuffer_Release(&view_a);

  001dc	48 8d 4c 24 20	 lea	 rcx, QWORD PTR view_a$20793[rsp]
  001e1	e8 00 00 00 00	 call	 PyBuffer_Release
  001e6	48 8b 9c 24 c0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+192]

; 270  :             return NULL;

  001ee	33 c0		 xor	 eax, eax

; 295  : }

  001f0	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  001f7	c3		 ret	 0
$LN3@compare_di:

; 271  :         }
; 272  : 
; 273  :         if (PyObject_GetBuffer(b, &view_b, PyBUF_SIMPLE) == -1) {

  001f8	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR b$[rsp]
  00200	48 8d 54 24 70	 lea	 rdx, QWORD PTR view_b$20794[rsp]
  00205	45 33 c0	 xor	 r8d, r8d
  00208	e8 00 00 00 00	 call	 PyObject_GetBuffer
  0020d	83 f8 ff	 cmp	 eax, -1

; 274  :             PyBuffer_Release(&view_a);
; 275  :             return NULL;

  00210	74 ca		 je	 SHORT $LN35@compare_di

; 276  :         }
; 277  :         if (view_b.ndim > 1) {

  00212	83 bc 24 94 00
	00 00 01	 cmp	 DWORD PTR view_b$20794[rsp+36], 1
  0021a	7e 39		 jle	 SHORT $LN1@compare_di

; 278  :             PyErr_SetString(PyExc_BufferError,
; 279  :                             "Buffer must be single dimension");

  0021c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BufferError
  00223	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
  0022a	e8 00 00 00 00	 call	 PyErr_SetString

; 280  :             PyBuffer_Release(&view_a);

  0022f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR view_a$20793[rsp]
  00234	e8 00 00 00 00	 call	 PyBuffer_Release

; 281  :             PyBuffer_Release(&view_b);

  00239	48 8d 4c 24 70	 lea	 rcx, QWORD PTR view_b$20794[rsp]
  0023e	e8 00 00 00 00	 call	 PyBuffer_Release
$LN34@compare_di:

; 282  :             return NULL;

  00243	33 c0		 xor	 eax, eax
  00245	48 8b 9c 24 c0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+192]

; 295  : }

  0024d	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00254	c3		 ret	 0
$LN1@compare_di:

; 283  :         }
; 284  : 
; 285  :         rc = _tscmp((const unsigned char*)view_a.buf,
; 286  :                     (const unsigned char*)view_b.buf,
; 287  :                     view_a.len,
; 288  :                     view_b.len);

  00255	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR view_b$20794[rsp+16]
  0025d	4c 8b 44 24 30	 mov	 r8, QWORD PTR view_a$20793[rsp+16]
  00262	48 8b 54 24 70	 mov	 rdx, QWORD PTR view_b$20794[rsp]
  00267	48 8b 4c 24 20	 mov	 rcx, QWORD PTR view_a$20793[rsp]
  0026c	e8 00 00 00 00	 call	 _tscmp

; 289  : 
; 290  :         PyBuffer_Release(&view_a);

  00271	48 8d 4c 24 20	 lea	 rcx, QWORD PTR view_a$20793[rsp]
  00276	8b d8		 mov	 ebx, eax
  00278	e8 00 00 00 00	 call	 PyBuffer_Release

; 291  :         PyBuffer_Release(&view_b);

  0027d	48 8d 4c 24 70	 lea	 rcx, QWORD PTR view_b$20794[rsp]
  00282	e8 00 00 00 00	 call	 PyBuffer_Release
$LN6@compare_di:

; 292  :     }
; 293  : 
; 294  :     return PyBool_FromLong(rc);

  00287	8b cb		 mov	 ecx, ebx
  00289	e8 00 00 00 00	 call	 PyBool_FromLong
  0028e	48 8b 9c 24 c0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+192]

; 295  : }

  00296	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0029d	c3		 ret	 0
compare_digest ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@LAGLDNDE@itemgetter?$AA@		; `string'
PUBLIC	??_C@_0N@JBFKIHDO@itemgetter?$CI?$CJ?$AA@	; `string'
EXTRN	PyObject_GC_Track:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_PyArg_NoKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$itemgetter_new DD imagerel itemgetter_new
	DD	imagerel itemgetter_new+36
	DD	imagerel $unwind$itemgetter_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$itemgetter_new DD imagerel itemgetter_new+36
	DD	imagerel itemgetter_new+102
	DD	imagerel $chain$0$itemgetter_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$itemgetter_new DD imagerel itemgetter_new+102
	DD	imagerel itemgetter_new+188
	DD	imagerel $chain$2$itemgetter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$itemgetter_new DD 020021H
	DD	087400H
	DD	imagerel itemgetter_new
	DD	imagerel itemgetter_new+36
	DD	imagerel $unwind$itemgetter_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$itemgetter_new DD 020521H
	DD	087405H
	DD	imagerel itemgetter_new
	DD	imagerel itemgetter_new+36
	DD	imagerel $unwind$itemgetter_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$itemgetter_new DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@LAGLDNDE@itemgetter?$AA@
CONST	SEGMENT
??_C@_0L@LAGLDNDE@itemgetter?$AA@ DB 'itemgetter', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JBFKIHDO@itemgetter?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0N@JBFKIHDO@itemgetter?$CI?$CJ?$AA@ DB 'itemgetter()', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT itemgetter_new
_TEXT	SEGMENT
type$ = 64
args$ = 72
kwds$ = 80
item$ = 88
itemgetter_new PROC					; COMDAT

; 385  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 386  :     itemgetterobject *ig;
; 387  :     PyObject *item;
; 388  :     Py_ssize_t nitems;
; 389  : 
; 390  :     if (!_PyArg_NoKeywords("itemgetter()", kwds))

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@JBFKIHDO@itemgetter?$CI?$CJ?$AA@
  00010	49 8b d0	 mov	 rdx, r8
  00013	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00018	85 c0		 test	 eax, eax
  0001a	75 08		 jne	 SHORT $LN5@itemgetter

; 391  :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 411  : }

  0001e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00022	5b		 pop	 rbx
  00023	c3		 ret	 0
$LN5@itemgetter:
  00024	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 392  : 
; 393  :     nitems = PyTuple_GET_SIZE(args);

  00029	48 8b 7b 60	 mov	 rdi, QWORD PTR [rbx+96]

; 394  :     if (nitems <= 1) {

  0002d	48 83 ff 01	 cmp	 rdi, 1
  00031	7f 33		 jg	 SHORT $LN4@itemgetter

; 395  :         if (!PyArg_UnpackTuple(args, "itemgetter", 1, 1, &item))

  00033	48 8d 44 24 58	 lea	 rax, QWORD PTR item$[rsp]
  00038	41 b9 01 00 00
	00		 mov	 r9d, 1
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LAGLDNDE@itemgetter?$AA@
  00045	45 8b c1	 mov	 r8d, r9d
  00048	48 8b cb	 mov	 rcx, rbx
  0004b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00050	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00055	85 c0		 test	 eax, eax
  00057	75 12		 jne	 SHORT $LN2@itemgetter
$LN12@itemgetter:

; 396  :             return NULL;

  00059	33 c0		 xor	 eax, eax
  0005b	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 411  : }

  00060	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00064	5b		 pop	 rbx
  00065	c3		 ret	 0
$LN4@itemgetter:

; 397  :     } else
; 398  :         item = args;

  00066	48 89 5c 24 58	 mov	 QWORD PTR item$[rsp], rbx
$LN2@itemgetter:

; 399  : 
; 400  :     /* create itemgetterobject structure */
; 401  :     ig = PyObject_GC_New(itemgetterobject, &itemgetter_type);

  0006b	e8 00 00 00 00	 call	 _Py_PXCTX
  00070	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:itemgetter_type
  00077	85 c0		 test	 eax, eax
  00079	74 07		 je	 SHORT $LN8@itemgetter
  0007b	e8 00 00 00 00	 call	 _PxObject_New
  00080	eb 05		 jmp	 SHORT $LN11@itemgetter
$LN8@itemgetter:
  00082	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN11@itemgetter:
  00087	48 8b d8	 mov	 rbx, rax

; 402  :     if (ig == NULL)

  0008a	48 85 c0	 test	 rax, rax

; 403  :         return NULL;

  0008d	74 ca		 je	 SHORT $LN12@itemgetter

; 404  : 
; 405  :     Py_INCREF(item);

  0008f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR item$[rsp]
  00094	e8 00 00 00 00	 call	 _Py_IncRef

; 406  :     ig->item = item;

  00099	4c 8b 5c 24 58	 mov	 r11, QWORD PTR item$[rsp]

; 407  :     ig->nitems = nitems;
; 408  : 
; 409  :     PyObject_GC_Track(ig);

  0009e	48 8b cb	 mov	 rcx, rbx
  000a1	4c 89 5b 68	 mov	 QWORD PTR [rbx+104], r11
  000a5	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
  000a9	e8 00 00 00 00	 call	 PyObject_GC_Track
  000ae	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 410  :     return (PyObject *)ig;

  000b3	48 8b c3	 mov	 rax, rbx

; 411  : }

  000b6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ba	5b		 pop	 rbx
  000bb	c3		 ret	 0
itemgetter_new ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$itemgetter_dealloc DD imagerel itemgetter_dealloc
	DD	imagerel itemgetter_dealloc+182
	DD	imagerel $unwind$itemgetter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$itemgetter_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\operator.c
xdata	ENDS
;	COMDAT itemgetter_dealloc
_TEXT	SEGMENT
ig$ = 64
itemgetter_dealloc PROC					; COMDAT

; 415  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 416  :     PyObject_GC_UnTrack(ig);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 417  :     Py_XDECREF(ig->item);

  00012	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00016	48 85 db	 test	 rbx, rbx
  00019	0f 84 85 00 00
	00		 je	 $LN3@itemgetter@2
  0001f	e8 00 00 00 00	 call	 _Py_PXCTX
  00024	85 c0		 test	 eax, eax
  00026	75 7c		 jne	 SHORT $LN3@itemgetter@2
  00028	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0002c	a8 20		 test	 al, 32			; 00000020H
  0002e	75 6c		 jne	 SHORT $LN11@itemgetter@2
  00030	84 c0		 test	 al, al
  00032	78 68		 js	 SHORT $LN11@itemgetter@2
  00034	a8 02		 test	 al, 2
  00036	75 6c		 jne	 SHORT $LN3@itemgetter@2
  00038	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0003c	75 66		 jne	 SHORT $LN3@itemgetter@2
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0004c	4c 8b cb	 mov	 r9, rbx
  0004f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00055	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0005d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00062	48 8b cb	 mov	 rcx, rbx
  00065	85 c0		 test	 eax, eax
  00067	74 17		 je	 SHORT $LN16@itemgetter@2
  00069	e8 00 00 00 00	 call	 _Px_Dealloc

; 418  :     PyObject_GC_Del(ig);

  0006e	48 8b cf	 mov	 rcx, rdi

; 419  : }

  00071	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00076	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007a	5f		 pop	 rdi
  0007b	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 417  :     Py_XDECREF(ig->item);

$LN16@itemgetter@2:
  00080	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00084	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 418  :     PyObject_GC_Del(ig);

  0008a	48 8b cf	 mov	 rcx, rdi

; 419  : }

  0008d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00092	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00096	5f		 pop	 rdi
  00097	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 417  :     Py_XDECREF(ig->item);

$LN11@itemgetter@2:
  0009c	48 8b cb	 mov	 rcx, rbx
  0009f	e8 00 00 00 00	 call	 Px_DecRef
$LN3@itemgetter@2:

; 418  :     PyObject_GC_Del(ig);

  000a4	48 8b cf	 mov	 rcx, rdi

; 419  : }

  000a7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ac	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b0	5f		 pop	 rdi
  000b1	e9 00 00 00 00	 jmp	 PyObject_GC_Del
itemgetter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@NLCIHFKF@itemgetter_traverse?$AA@	; `string'
PUBLIC	??_C@_0BG@HPIKNNGK@?4?4?2Modules?2operator?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$itemgetter_traverse DD imagerel itemgetter_traverse
	DD	imagerel itemgetter_traverse+97
	DD	imagerel $unwind$itemgetter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$itemgetter_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BE@NLCIHFKF@itemgetter_traverse?$AA@
CONST	SEGMENT
??_C@_0BE@NLCIHFKF@itemgetter_traverse?$AA@ DB 'itemgetter_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HPIKNNGK@?4?4?2Modules?2operator?4c?$AA@
CONST	SEGMENT
??_C@_0BG@HPIKNNGK@?4?4?2Modules?2operator?4c?$AA@ DB '..\Modules\operato'
	DB	'r.c', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT itemgetter_traverse
_TEXT	SEGMENT
ig$ = 48
visit$ = 56
arg$ = 64
itemgetter_traverse PROC				; COMDAT

; 423  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 424  :     Py_VISIT(ig->item);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@itemgetter@3
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HPIKNNGK@?4?4?2Modules?2operator?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@NLCIHFKF@itemgetter_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 a8 01 00
	00		 mov	 r8d, 424		; 000001a8H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@itemgetter@3:
  0003d	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@itemgetter@3
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@itemgetter@3
$LN5@itemgetter@3:

; 425  :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@itemgetter@3:

; 426  : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
itemgetter_traverse ENDP
_TEXT	ENDS
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$itemgetter_call DD imagerel itemgetter_call
	DD	imagerel itemgetter_call+98
	DD	imagerel $unwind$itemgetter_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$itemgetter_call DD imagerel itemgetter_call+98
	DD	imagerel itemgetter_call+129
	DD	imagerel $chain$0$itemgetter_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$itemgetter_call DD imagerel itemgetter_call+129
	DD	imagerel itemgetter_call+226
	DD	imagerel $chain$4$itemgetter_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$itemgetter_call DD imagerel itemgetter_call+226
	DD	imagerel itemgetter_call+238
	DD	imagerel $chain$6$itemgetter_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$itemgetter_call DD 060021H
	DD	067400H
	DD	0c6400H
	DD	0b3400H
	DD	imagerel itemgetter_call
	DD	imagerel itemgetter_call+98
	DD	imagerel $unwind$itemgetter_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$itemgetter_call DD 060a21H
	DD	06740aH
	DD	0b3405H
	DD	0c6400H
	DD	imagerel itemgetter_call
	DD	imagerel itemgetter_call+98
	DD	imagerel $unwind$itemgetter_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$itemgetter_call DD 020521H
	DD	0c6405H
	DD	imagerel itemgetter_call
	DD	imagerel itemgetter_call+98
	DD	imagerel $unwind$itemgetter_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$itemgetter_call DD 030801H
	DD	0c0046208H
	DD	05002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT itemgetter_call
_TEXT	SEGMENT
obj$ = 80
ig$ = 80
args$ = 88
kw$ = 96
itemgetter_call PROC					; COMDAT

; 430  : {

  00000	40 55		 push	 rbp
  00002	41 54		 push	 r12
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 431  :     PyObject *obj, *result;
; 432  :     Py_ssize_t i, nitems=ig->nitems;

  00008	48 8b 69 60	 mov	 rbp, QWORD PTR [rcx+96]
  0000c	4c 8b e1	 mov	 r12, rcx
  0000f	48 8b c2	 mov	 rax, rdx

; 433  : 
; 434  :     if (!PyArg_UnpackTuple(args, "itemgetter", 1, 1, &obj))

  00012	48 8d 4c 24 50	 lea	 rcx, QWORD PTR obj$[rsp]
  00017	41 b9 01 00 00
	00		 mov	 r9d, 1
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LAGLDNDE@itemgetter?$AA@
  00024	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00029	48 8b c8	 mov	 rcx, rax
  0002c	45 8b c1	 mov	 r8d, r9d
  0002f	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00034	85 c0		 test	 eax, eax
  00036	75 0a		 jne	 SHORT $LN7@itemgetter@4

; 435  :         return NULL;

  00038	33 c0		 xor	 eax, eax

; 457  : }

  0003a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003e	41 5c		 pop	 r12
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
$LN7@itemgetter@4:

; 436  :     if (nitems == 1)

  00042	48 83 fd 01	 cmp	 rbp, 1
  00046	75 17		 jne	 SHORT $LN6@itemgetter@4

; 437  :         return PyObject_GetItem(obj, ig->item);

  00048	49 8b 54 24 68	 mov	 rdx, QWORD PTR [r12+104]
  0004d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  00052	e8 00 00 00 00	 call	 PyObject_GetItem

; 457  : }

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	41 5c		 pop	 r12
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
$LN6@itemgetter@4:

; 438  : 
; 439  :     assert(PyTuple_Check(ig->item));
; 440  :     assert(PyTuple_GET_SIZE(ig->item) == nitems);
; 441  : 
; 442  :     result = PyTuple_New(nitems);

  0005f	48 8b cd	 mov	 rcx, rbp
  00062	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  00067	e8 00 00 00 00	 call	 PyTuple_New
  0006c	48 8b f0	 mov	 rsi, rax

; 443  :     if (result == NULL)

  0006f	48 85 c0	 test	 rax, rax
  00072	75 0d		 jne	 SHORT $LN5@itemgetter@4
  00074	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 457  : }

  00079	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007d	41 5c		 pop	 r12
  0007f	5d		 pop	 rbp
  00080	c3		 ret	 0
$LN5@itemgetter@4:
  00081	48 89 5c 24 58	 mov	 QWORD PTR [rsp+88], rbx
  00086	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi

; 444  :         return NULL;
; 445  : 
; 446  :     for (i=0 ; i < nitems ; i++) {

  0008b	33 ff		 xor	 edi, edi
  0008d	48 85 ed	 test	 rbp, rbp
  00090	7e 36		 jle	 SHORT $LN2@itemgetter@4
  00092	bb 70 00 00 00	 mov	 ebx, 112		; 00000070H
  00097	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@itemgetter@4:

; 447  :         PyObject *item, *val;
; 448  :         item = PyTuple_GET_ITEM(ig->item, i);

  000a0	49 8b 44 24 68	 mov	 rax, QWORD PTR [r12+104]

; 449  :         val = PyObject_GetItem(obj, item);

  000a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  000aa	48 8b 14 03	 mov	 rdx, QWORD PTR [rbx+rax]
  000ae	e8 00 00 00 00	 call	 PyObject_GetItem

; 450  :         if (val == NULL) {

  000b3	48 85 c0	 test	 rax, rax
  000b6	74 2a		 je	 SHORT $LN11@itemgetter@4

; 453  :         }
; 454  :         PyTuple_SET_ITEM(result, i, val);

  000b8	48 ff c7	 inc	 rdi
  000bb	48 89 04 33	 mov	 QWORD PTR [rbx+rsi], rax
  000bf	48 83 c3 08	 add	 rbx, 8
  000c3	48 3b fd	 cmp	 rdi, rbp
  000c6	7c d8		 jl	 SHORT $LL4@itemgetter@4
$LN2@itemgetter@4:

; 455  :     }
; 456  :     return result;

  000c8	48 8b c6	 mov	 rax, rsi
$LN15@itemgetter@4:
  000cb	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  000d0	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  000d5	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 457  : }

  000da	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000de	41 5c		 pop	 r12
  000e0	5d		 pop	 rbp
  000e1	c3		 ret	 0
$LN11@itemgetter@4:

; 451  :             Py_DECREF(result);

  000e2	48 8b ce	 mov	 rcx, rsi
  000e5	e8 00 00 00 00	 call	 _Py_DecRef

; 452  :             return NULL;

  000ea	33 c0		 xor	 eax, eax
  000ec	eb dd		 jmp	 SHORT $LN15@itemgetter@4
itemgetter_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@LAAKKGAK@attribute?5name?5must?5be?5a?5string?$AA@ ; `string'
PUBLIC	??_C@_0L@BEIIKJME@attrgetter?$AA@		; `string'
PUBLIC	??_C@_0N@HCIEJFDN@attrgetter?$CI?$CJ?$AA@	; `string'
EXTRN	PyUnicode_InternInPlace:PROC
EXTRN	PyUnicode_Substring:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$attrgetter_new DD imagerel attrgetter_new
	DD	imagerel attrgetter_new+46
	DD	imagerel $unwind$attrgetter_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$attrgetter_new DD imagerel attrgetter_new+46
	DD	imagerel attrgetter_new+150
	DD	imagerel $chain$0$attrgetter_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$attrgetter_new DD imagerel attrgetter_new+150
	DD	imagerel attrgetter_new+907
	DD	imagerel $chain$8$attrgetter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$attrgetter_new DD 0e2d21H
	DD	0cf42dH
	DD	0de41fH
	DD	0ed41aH
	DD	0fc415H
	DD	0116410H
	DD	0145408H
	DD	0107400H
	DD	imagerel attrgetter_new
	DD	imagerel attrgetter_new+46
	DD	imagerel $unwind$attrgetter_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$attrgetter_new DD 020821H
	DD	0107408H
	DD	imagerel attrgetter_new
	DD	imagerel attrgetter_new+46
	DD	imagerel $unwind$attrgetter_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$attrgetter_new DD 030d01H
	DD	012010dH
	DD	03006H
xdata	ENDS
;	COMDAT ??_C@_0CA@LAAKKGAK@attribute?5name?5must?5be?5a?5string?$AA@
CONST	SEGMENT
??_C@_0CA@LAAKKGAK@attribute?5name?5must?5be?5a?5string?$AA@ DB 'attribut'
	DB	'e name must be a string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BEIIKJME@attrgetter?$AA@
CONST	SEGMENT
??_C@_0L@BEIIKJME@attrgetter?$AA@ DB 'attrgetter', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HCIEJFDN@attrgetter?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0N@HCIEJFDN@attrgetter?$CI?$CJ?$AA@ DB 'attrgetter()', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\operator.c
CONST	ENDS
;	COMDAT attrgetter_new
_TEXT	SEGMENT
attr_chain_item$21147 = 48
item$21100 = 56
idx$1$ = 64
tv582 = 72
nattrs$1$ = 80
type$ = 160
args$ = 168
kwds$ = 176
attr$ = 184
attrgetter_new PROC					; COMDAT

; 522  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	53		 push	 rbx
  00006	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  0000d	48 8b da	 mov	 rbx, rdx

; 523  :     attrgetterobject *ag;
; 524  :     PyObject *attr;
; 525  :     Py_ssize_t nattrs, idx, char_idx;
; 526  : 
; 527  :     if (!_PyArg_NoKeywords("attrgetter()", kwds))

  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HCIEJFDN@attrgetter?$CI?$CJ?$AA@
  00017	49 8b d0	 mov	 rdx, r8
  0001a	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  0001f	85 c0		 test	 eax, eax
  00021	75 0b		 jne	 SHORT $LN24@attrgetter

; 528  :         return NULL;

  00023	33 c0		 xor	 eax, eax

; 630  : }

  00025	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
$LN24@attrgetter:
  0002e	48 89 bc 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rdi

; 529  : 
; 530  :     nattrs = PyTuple_GET_SIZE(args);

  00036	48 8b 7b 60	 mov	 rdi, QWORD PTR [rbx+96]
  0003a	48 89 7c 24 50	 mov	 QWORD PTR nattrs$1$[rsp], rdi

; 531  :     if (nattrs <= 1) {

  0003f	48 83 ff 01	 cmp	 rdi, 1
  00043	7f 29		 jg	 SHORT $LN22@attrgetter

; 532  :         if (!PyArg_UnpackTuple(args, "attrgetter", 1, 1, &attr))

  00045	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR attr$[rsp]
  0004d	41 b9 01 00 00
	00		 mov	 r9d, 1
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@BEIIKJME@attrgetter?$AA@
  0005a	45 8b c1	 mov	 r8d, r9d
  0005d	48 8b cb	 mov	 rcx, rbx
  00060	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00065	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0006a	85 c0		 test	 eax, eax

; 533  :             return NULL;

  0006c	74 15		 je	 SHORT $LN71@attrgetter
$LN22@attrgetter:

; 534  :     }
; 535  : 
; 536  :     attr = PyTuple_New(nattrs);

  0006e	48 8b cf	 mov	 rcx, rdi
  00071	e8 00 00 00 00	 call	 PyTuple_New
  00076	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR attr$[rsp], rax

; 537  :     if (attr == NULL)

  0007e	48 85 c0	 test	 rax, rax
  00081	75 13		 jne	 SHORT $LN21@attrgetter
$LN71@attrgetter:

; 538  :         return NULL;

  00083	33 c0		 xor	 eax, eax
  00085	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR [rsp+128]

; 630  : }

  0008d	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00094	5b		 pop	 rbx
  00095	c3		 ret	 0
$LN21@attrgetter:
  00096	48 89 ac 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rbp
  0009e	48 89 b4 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rsi
  000a6	4c 89 64 24 78	 mov	 QWORD PTR [rsp+120], r12
  000ab	4c 89 6c 24 70	 mov	 QWORD PTR [rsp+112], r13
  000b0	4c 89 74 24 68	 mov	 QWORD PTR [rsp+104], r14

; 539  : 
; 540  :     /* prepare attr while checking args */
; 541  :     for (idx = 0; idx < nattrs; ++idx) {

  000b5	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR idx$1$[rsp], 0
  000be	4c 89 7c 24 60	 mov	 QWORD PTR [rsp+96], r15
  000c3	48 85 ff	 test	 rdi, rdi
  000c6	0f 8e 4b 02 00
	00		 jle	 $LN18@attrgetter
  000cc	41 bc 70 00 00
	00		 mov	 r12d, 112		; 00000070H
  000d2	4c 89 64 24 48	 mov	 QWORD PTR tv582[rsp], r12
  000d7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL20@attrgetter:

; 542  :         PyObject *item = PyTuple_GET_ITEM(args, idx);

  000e0	49 8b 1c 1c	 mov	 rbx, QWORD PTR [r12+rbx]
  000e4	48 89 5c 24 38	 mov	 QWORD PTR item$21100[rsp], rbx

; 543  :         Py_ssize_t item_len;
; 544  :         void *data;
; 545  :         unsigned int kind;
; 546  :         int dot_count;
; 547  : 
; 548  :         if (!PyUnicode_Check(item)) {

  000e9	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000ed	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  000f7	0f 84 f6 01 00
	00		 je	 $LN52@attrgetter

; 553  :         }
; 554  :         if (PyUnicode_READY(item)) {

  000fd	f6 43 70 80	 test	 BYTE PTR [rbx+112], 128	; 00000080H
  00101	75 15		 jne	 SHORT $LN59@attrgetter
  00103	48 8b cb	 mov	 rcx, rbx
  00106	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0010b	85 c0		 test	 eax, eax
  0010d	0f 85 f3 01 00
	00		 jne	 $LN70@attrgetter
  00113	48 8b 5c 24 38	 mov	 rbx, QWORD PTR item$21100[rsp]
$LN59@attrgetter:

; 555  :             Py_DECREF(attr);
; 556  :             return NULL;
; 557  :         }
; 558  :         item_len = PyUnicode_GET_LENGTH(item);
; 559  :         kind = PyUnicode_KIND(item);

  00118	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  0011b	4c 8b 7b 60	 mov	 r15, QWORD PTR [rbx+96]
  0011f	8b f0		 mov	 esi, eax
  00121	c1 ee 02	 shr	 esi, 2
  00124	83 e6 07	 and	 esi, 7

; 560  :         data = PyUnicode_DATA(item);

  00127	a8 20		 test	 al, 32			; 00000020H
  00129	74 16		 je	 SHORT $LN31@attrgetter
  0012b	a8 40		 test	 al, 64			; 00000040H
  0012d	74 09		 je	 SHORT $LN29@attrgetter
  0012f	48 8d bb 80 00
	00 00		 lea	 rdi, QWORD PTR [rbx+128]
  00136	eb 10		 jmp	 SHORT $LN32@attrgetter
$LN29@attrgetter:
  00138	48 8d bb a0 00
	00 00		 lea	 rdi, QWORD PTR [rbx+160]
  0013f	eb 07		 jmp	 SHORT $LN32@attrgetter
$LN31@attrgetter:
  00141	48 8b bb a0 00
	00 00		 mov	 rdi, QWORD PTR [rbx+160]
$LN32@attrgetter:

; 561  : 
; 562  :         /* check whethere the string is dotted */
; 563  :         dot_count = 0;

  00148	33 ed		 xor	 ebp, ebp

; 564  :         for (char_idx = 0; char_idx < item_len; ++char_idx) {

  0014a	33 c0		 xor	 eax, eax
  0014c	4d 85 ff	 test	 r15, r15
  0014f	0f 8e 02 01 00
	00		 jle	 $LN60@attrgetter
$LL15@attrgetter:

; 565  :             if (PyUnicode_READ(kind, data, char_idx) == '.')

  00155	83 fe 01	 cmp	 esi, 1
  00158	75 06		 jne	 SHORT $LN35@attrgetter
  0015a	0f b6 0c 38	 movzx	 ecx, BYTE PTR [rax+rdi]
  0015e	eb 0e		 jmp	 SHORT $LN34@attrgetter
$LN35@attrgetter:
  00160	83 fe 02	 cmp	 esi, 2
  00163	75 06		 jne	 SHORT $LN33@attrgetter
  00165	0f b7 0c 47	 movzx	 ecx, WORD PTR [rdi+rax*2]
  00169	eb 03		 jmp	 SHORT $LN34@attrgetter
$LN33@attrgetter:

; 564  :         for (char_idx = 0; char_idx < item_len; ++char_idx) {

  0016b	8b 0c 87	 mov	 ecx, DWORD PTR [rdi+rax*4]
$LN34@attrgetter:

; 565  :             if (PyUnicode_READ(kind, data, char_idx) == '.')

  0016e	83 f9 2e	 cmp	 ecx, 46			; 0000002eH
  00171	75 02		 jne	 SHORT $LN14@attrgetter

; 566  :                 ++dot_count;

  00173	ff c5		 inc	 ebp
$LN14@attrgetter:

; 564  :         for (char_idx = 0; char_idx < item_len; ++char_idx) {

  00175	48 ff c0	 inc	 rax
  00178	49 3b c7	 cmp	 rax, r15
  0017b	7c d8		 jl	 SHORT $LL15@attrgetter

; 567  :         }
; 568  : 
; 569  :         if (dot_count == 0) {

  0017d	85 ed		 test	 ebp, ebp
  0017f	0f 84 d2 00 00
	00		 je	 $LN60@attrgetter

; 573  :         } else { /* make it a tuple of non-dotted attrnames */
; 574  :             PyObject *attr_chain = PyTuple_New(dot_count + 1);

  00185	8d 45 01	 lea	 eax, DWORD PTR [rbp+1]
  00188	48 63 c8	 movsxd	 rcx, eax
  0018b	e8 00 00 00 00	 call	 PyTuple_New

; 575  :             PyObject *attr_chain_item;
; 576  :             Py_ssize_t unibuff_from = 0;

  00190	33 d2		 xor	 edx, edx

; 577  :             Py_ssize_t unibuff_till = 0;

  00192	33 db		 xor	 ebx, ebx

; 578  :             Py_ssize_t attr_chain_idx = 0;

  00194	45 33 ed	 xor	 r13d, r13d
  00197	4c 8b f0	 mov	 r14, rax

; 579  : 
; 580  :             if (attr_chain == NULL) {

  0019a	48 85 c0	 test	 rax, rax
  0019d	0f 84 63 01 00
	00		 je	 $LN70@attrgetter

; 581  :                 Py_DECREF(attr);
; 582  :                 return NULL;
; 583  :             }
; 584  : 
; 585  :             for (; dot_count > 0; --dot_count) {

  001a3	85 ed		 test	 ebp, ebp
  001a5	7e 73		 jle	 SHORT $LN6@attrgetter
  001a7	4c 8d 60 70	 lea	 r12, QWORD PTR [rax+112]
  001ab	0f 1f 44 00 00	 npad	 5
$LL5@attrgetter:

; 586  :                 while (PyUnicode_READ(kind, data, unibuff_till) != '.') {

  001b0	83 fe 01	 cmp	 esi, 1
  001b3	75 06		 jne	 SHORT $LN39@attrgetter
  001b5	0f b6 04 3b	 movzx	 eax, BYTE PTR [rbx+rdi]
  001b9	eb 0e		 jmp	 SHORT $LN38@attrgetter
$LN39@attrgetter:
  001bb	83 fe 02	 cmp	 esi, 2
  001be	75 06		 jne	 SHORT $LN37@attrgetter
  001c0	0f b7 04 5f	 movzx	 eax, WORD PTR [rdi+rbx*2]
  001c4	eb 03		 jmp	 SHORT $LN38@attrgetter
$LN37@attrgetter:
  001c6	8b 04 9f	 mov	 eax, DWORD PTR [rdi+rbx*4]
$LN38@attrgetter:
  001c9	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  001cc	74 05		 je	 SHORT $LN4@attrgetter

; 587  :                     ++unibuff_till;

  001ce	48 ff c3	 inc	 rbx

; 588  :                 }

  001d1	eb dd		 jmp	 SHORT $LL5@attrgetter
$LN4@attrgetter:

; 589  :                 attr_chain_item = PyUnicode_Substring(item,
; 590  :                                       unibuff_from,
; 591  :                                       unibuff_till);

  001d3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$21100[rsp]
  001d8	4c 8b c3	 mov	 r8, rbx
  001db	e8 00 00 00 00	 call	 PyUnicode_Substring
  001e0	48 89 44 24 30	 mov	 QWORD PTR attr_chain_item$21147[rsp], rax

; 592  :                 if (attr_chain_item == NULL) {

  001e5	48 85 c0	 test	 rax, rax
  001e8	0f 84 ec 00 00
	00		 je	 $LN55@attrgetter

; 593  :                     Py_DECREF(attr_chain);
; 594  :                     Py_DECREF(attr);
; 595  :                     return NULL;
; 596  :                 }
; 597  :                 PyUnicode_InternInPlace(&attr_chain_item);

  001ee	48 8d 4c 24 30	 lea	 rcx, QWORD PTR attr_chain_item$21147[rsp]
  001f3	e8 00 00 00 00	 call	 PyUnicode_InternInPlace

; 598  :                 PyTuple_SET_ITEM(attr_chain, attr_chain_idx, attr_chain_item);

  001f8	4c 8b 5c 24 30	 mov	 r11, QWORD PTR attr_chain_item$21147[rsp]

; 599  :                 ++attr_chain_idx;
; 600  :                 unibuff_till = unibuff_from = unibuff_till + 1;

  001fd	48 8d 53 01	 lea	 rdx, QWORD PTR [rbx+1]
  00201	ff cd		 dec	 ebp
  00203	4d 89 1c 24	 mov	 QWORD PTR [r12], r11
  00207	49 83 c4 08	 add	 r12, 8
  0020b	49 ff c5	 inc	 r13
  0020e	48 8b da	 mov	 rbx, rdx
  00211	85 ed		 test	 ebp, ebp
  00213	7f 9b		 jg	 SHORT $LL5@attrgetter
  00215	4c 8b 64 24 48	 mov	 r12, QWORD PTR tv582[rsp]
$LN6@attrgetter:

; 601  :             }
; 602  : 
; 603  :             /* now add the last dotless name */
; 604  :             attr_chain_item = PyUnicode_Substring(item,
; 605  :                                                   unibuff_from, item_len);

  0021a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$21100[rsp]
  0021f	4d 8b c7	 mov	 r8, r15
  00222	e8 00 00 00 00	 call	 PyUnicode_Substring
  00227	48 89 44 24 30	 mov	 QWORD PTR attr_chain_item$21147[rsp], rax

; 606  :             if (attr_chain_item == NULL) {

  0022c	48 85 c0	 test	 rax, rax
  0022f	0f 84 a5 00 00
	00		 je	 $LN55@attrgetter

; 610  :             }
; 611  :             PyUnicode_InternInPlace(&attr_chain_item);

  00235	48 8d 4c 24 30	 lea	 rcx, QWORD PTR attr_chain_item$21147[rsp]
  0023a	e8 00 00 00 00	 call	 PyUnicode_InternInPlace

; 612  :             PyTuple_SET_ITEM(attr_chain, attr_chain_idx, attr_chain_item);

  0023f	4c 8b 5c 24 30	 mov	 r11, QWORD PTR attr_chain_item$21147[rsp]
  00244	4f 89 5c ee 70	 mov	 QWORD PTR [r14+r13*8+112], r11

; 613  : 
; 614  :             PyTuple_SET_ITEM(attr, idx, attr_chain);

  00249	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR attr$[rsp]
  00251	4d 89 34 04	 mov	 QWORD PTR [r12+rax], r14
  00255	eb 56		 jmp	 SHORT $LN19@attrgetter
$LN60@attrgetter:

; 570  :             Py_INCREF(item);

  00257	e8 00 00 00 00	 call	 _Py_PXCTX
  0025c	85 c0		 test	 eax, eax
  0025e	75 32		 jne	 SHORT $LN44@attrgetter
  00260	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00267	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0026e	4c 8b cb	 mov	 r9, rbx
  00271	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00277	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0027f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00284	85 c0		 test	 eax, eax
  00286	75 06		 jne	 SHORT $LN43@attrgetter
  00288	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0028c	74 04		 je	 SHORT $LN44@attrgetter
$LN43@attrgetter:
  0028e	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN44@attrgetter:

; 571  :             PyUnicode_InternInPlace(&item);

  00292	48 8d 4c 24 38	 lea	 rcx, QWORD PTR item$21100[rsp]
  00297	e8 00 00 00 00	 call	 PyUnicode_InternInPlace

; 572  :             PyTuple_SET_ITEM(attr, idx, item);

  0029c	4c 8b 9c 24 b8
	00 00 00	 mov	 r11, QWORD PTR attr$[rsp]
  002a4	48 8b 44 24 38	 mov	 rax, QWORD PTR item$21100[rsp]
  002a9	4b 89 04 1c	 mov	 QWORD PTR [r12+r11], rax
$LN19@attrgetter:

; 539  : 
; 540  :     /* prepare attr while checking args */
; 541  :     for (idx = 0; idx < nattrs; ++idx) {

  002ad	48 8b 4c 24 40	 mov	 rcx, QWORD PTR idx$1$[rsp]
  002b2	48 8b 7c 24 50	 mov	 rdi, QWORD PTR nattrs$1$[rsp]
  002b7	49 83 c4 08	 add	 r12, 8
  002bb	48 ff c1	 inc	 rcx
  002be	4c 89 64 24 48	 mov	 QWORD PTR tv582[rsp], r12
  002c3	48 89 4c 24 40	 mov	 QWORD PTR idx$1$[rsp], rcx
  002c8	48 3b cf	 cmp	 rcx, rdi
  002cb	7d 4a		 jge	 SHORT $LN18@attrgetter
  002cd	48 8b 9c 24 a8
	00 00 00	 mov	 rbx, QWORD PTR args$[rsp]
  002d5	e9 06 fe ff ff	 jmp	 $LL20@attrgetter
$LN55@attrgetter:

; 607  :                 Py_DECREF(attr_chain);

  002da	49 8b ce	 mov	 rcx, r14
  002dd	e8 00 00 00 00	 call	 _Py_DecRef

; 608  :                 Py_DECREF(attr);

  002e2	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR attr$[rsp]
  002ea	e8 00 00 00 00	 call	 _Py_DecRef

; 609  :                 return NULL;

  002ef	33 c0		 xor	 eax, eax
  002f1	eb 63		 jmp	 SHORT $LN68@attrgetter
$LN52@attrgetter:

; 549  :             PyErr_SetString(PyExc_TypeError,
; 550  :                             "attribute name must be a string");

  002f3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  002fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LAAKKGAK@attribute?5name?5must?5be?5a?5string?$AA@
  00301	e8 00 00 00 00	 call	 PyErr_SetString
$LN70@attrgetter:

; 551  :             Py_DECREF(attr);

  00306	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR attr$[rsp]
  0030e	e8 00 00 00 00	 call	 _Py_DecRef

; 552  :             return NULL;

  00313	33 c0		 xor	 eax, eax
  00315	eb 3f		 jmp	 SHORT $LN68@attrgetter
$LN18@attrgetter:

; 615  :         }
; 616  :     }
; 617  : 
; 618  :     /* create attrgetterobject structure */
; 619  :     ag = PyObject_GC_New(attrgetterobject, &attrgetter_type);

  00317	e8 00 00 00 00	 call	 _Py_PXCTX
  0031c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:attrgetter_type
  00323	85 c0		 test	 eax, eax
  00325	74 07		 je	 SHORT $LN41@attrgetter
  00327	e8 00 00 00 00	 call	 _PxObject_New
  0032c	eb 05		 jmp	 SHORT $LN69@attrgetter
$LN41@attrgetter:
  0032e	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN69@attrgetter:
  00333	48 8b d8	 mov	 rbx, rax

; 620  :     if (ag == NULL) {

  00336	48 85 c0	 test	 rax, rax

; 621  :         Py_DECREF(attr);
; 622  :         return NULL;

  00339	74 cb		 je	 SHORT $LN70@attrgetter

; 623  :     }
; 624  : 
; 625  :     ag->attr = attr;

  0033b	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR attr$[rsp]

; 626  :     ag->nattrs = nattrs;
; 627  : 
; 628  :     PyObject_GC_Track(ag);

  00343	48 8b cb	 mov	 rcx, rbx
  00346	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
  0034a	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax
  0034e	e8 00 00 00 00	 call	 PyObject_GC_Track

; 629  :     return (PyObject *)ag;

  00353	48 8b c3	 mov	 rax, rbx
$LN68@attrgetter:
  00356	4c 8b 74 24 68	 mov	 r14, QWORD PTR [rsp+104]
  0035b	4c 8b 6c 24 70	 mov	 r13, QWORD PTR [rsp+112]
  00360	4c 8b 64 24 78	 mov	 r12, QWORD PTR [rsp+120]
  00365	48 8b ac 24 a0
	00 00 00	 mov	 rbp, QWORD PTR [rsp+160]
  0036d	48 8b b4 24 88
	00 00 00	 mov	 rsi, QWORD PTR [rsp+136]
  00375	4c 8b 7c 24 60	 mov	 r15, QWORD PTR [rsp+96]
  0037a	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR [rsp+128]

; 630  : }

  00382	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00389	5b		 pop	 rbx
  0038a	c3		 ret	 0
attrgetter_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$attrgetter_dealloc DD imagerel attrgetter_dealloc
	DD	imagerel attrgetter_dealloc+182
	DD	imagerel $unwind$attrgetter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$attrgetter_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\operator.c
xdata	ENDS
;	COMDAT attrgetter_dealloc
_TEXT	SEGMENT
ag$ = 64
attrgetter_dealloc PROC					; COMDAT

; 634  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 635  :     PyObject_GC_UnTrack(ag);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 636  :     Py_XDECREF(ag->attr);

  00012	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00016	48 85 db	 test	 rbx, rbx
  00019	0f 84 85 00 00
	00		 je	 $LN3@attrgetter@2
  0001f	e8 00 00 00 00	 call	 _Py_PXCTX
  00024	85 c0		 test	 eax, eax
  00026	75 7c		 jne	 SHORT $LN3@attrgetter@2
  00028	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0002c	a8 20		 test	 al, 32			; 00000020H
  0002e	75 6c		 jne	 SHORT $LN11@attrgetter@2
  00030	84 c0		 test	 al, al
  00032	78 68		 js	 SHORT $LN11@attrgetter@2
  00034	a8 02		 test	 al, 2
  00036	75 6c		 jne	 SHORT $LN3@attrgetter@2
  00038	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0003c	75 66		 jne	 SHORT $LN3@attrgetter@2
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0004c	4c 8b cb	 mov	 r9, rbx
  0004f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00055	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0005d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00062	48 8b cb	 mov	 rcx, rbx
  00065	85 c0		 test	 eax, eax
  00067	74 17		 je	 SHORT $LN16@attrgetter@2
  00069	e8 00 00 00 00	 call	 _Px_Dealloc

; 637  :     PyObject_GC_Del(ag);

  0006e	48 8b cf	 mov	 rcx, rdi

; 638  : }

  00071	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00076	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007a	5f		 pop	 rdi
  0007b	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 636  :     Py_XDECREF(ag->attr);

$LN16@attrgetter@2:
  00080	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00084	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 637  :     PyObject_GC_Del(ag);

  0008a	48 8b cf	 mov	 rcx, rdi

; 638  : }

  0008d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00092	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00096	5f		 pop	 rdi
  00097	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 636  :     Py_XDECREF(ag->attr);

$LN11@attrgetter@2:
  0009c	48 8b cb	 mov	 rcx, rbx
  0009f	e8 00 00 00 00	 call	 Px_DecRef
$LN3@attrgetter@2:

; 637  :     PyObject_GC_Del(ag);

  000a4	48 8b cf	 mov	 rcx, rdi

; 638  : }

  000a7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ac	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b0	5f		 pop	 rdi
  000b1	e9 00 00 00 00	 jmp	 PyObject_GC_Del
attrgetter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@FGNBODEG@attrgetter_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$attrgetter_traverse DD imagerel attrgetter_traverse
	DD	imagerel attrgetter_traverse+97
	DD	imagerel $unwind$attrgetter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$attrgetter_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BE@FGNBODEG@attrgetter_traverse?$AA@
CONST	SEGMENT
??_C@_0BE@FGNBODEG@attrgetter_traverse?$AA@ DB 'attrgetter_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT attrgetter_traverse
_TEXT	SEGMENT
ag$ = 48
visit$ = 56
arg$ = 64
attrgetter_traverse PROC				; COMDAT

; 642  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 643  :     Py_VISIT(ag->attr);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@attrgetter@3
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HPIKNNGK@?4?4?2Modules?2operator?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@FGNBODEG@attrgetter_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 83 02 00
	00		 mov	 r8d, 643		; 00000283H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@attrgetter@3:
  0003d	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@attrgetter@3
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@attrgetter@3
$LN5@attrgetter@3:

; 644  :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@attrgetter@3:

; 645  : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
attrgetter_traverse ENDP
_TEXT	ENDS
EXTRN	PyObject_GetAttr:PROC
EXTRN	PyTuple_Type:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$dotted_getattr DD imagerel dotted_getattr
	DD	imagerel dotted_getattr+319
	DD	imagerel $unwind$dotted_getattr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dotted_getattr DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0c016521aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\operator.c
xdata	ENDS
;	COMDAT dotted_getattr
_TEXT	SEGMENT
obj$ = 64
attr$ = 72
dotted_getattr PROC					; COMDAT

; 649  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 650  :     PyObject *newobj;
; 651  : 
; 652  :     /* attr is either a tuple or instance of str.
; 653  :        Ensured by the setup code of attrgetter_new */
; 654  :     if (PyTuple_CheckExact(attr)) { /* chained getattr */

  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00021	48 8b fa	 mov	 rdi, rdx
  00024	48 8b d9	 mov	 rbx, rcx
  00027	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  0002b	0f 85 e3 00 00
	00		 jne	 $LN7@dotted_get

; 655  :         Py_ssize_t name_idx = 0, name_count;
; 656  :         PyObject *attr_name;
; 657  : 
; 658  :         name_count = PyTuple_GET_SIZE(attr);

  00031	4c 8b 62 60	 mov	 r12, QWORD PTR [rdx+96]

; 659  :         Py_INCREF(obj);

  00035	e8 00 00 00 00	 call	 _Py_PXCTX
  0003a	85 c0		 test	 eax, eax
  0003c	75 32		 jne	 SHORT $LN11@dotted_get
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0004c	4c 8b cb	 mov	 r9, rbx
  0004f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00055	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0005d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00062	85 c0		 test	 eax, eax
  00064	75 06		 jne	 SHORT $LN10@dotted_get
  00066	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0006a	74 04		 je	 SHORT $LN11@dotted_get
$LN10@dotted_get:
  0006c	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN11@dotted_get:

; 660  :         for (name_idx = 0; name_idx < name_count; ++name_idx) {

  00070	33 f6		 xor	 esi, esi
  00072	4d 85 e4	 test	 r12, r12
  00075	0f 8e a6 00 00
	00		 jle	 $LN1@dotted_get
  0007b	48 8d 6f 70	 lea	 rbp, QWORD PTR [rdi+112]
  0007f	90		 npad	 1
$LL6@dotted_get:

; 661  :             attr_name = PyTuple_GET_ITEM(attr, name_idx);
; 662  :             newobj = PyObject_GetAttr(obj, attr_name);

  00080	48 8b 55 00	 mov	 rdx, QWORD PTR [rbp]
  00084	48 8b cb	 mov	 rcx, rbx
  00087	e8 00 00 00 00	 call	 PyObject_GetAttr
  0008c	48 8b f8	 mov	 rdi, rax

; 663  :             Py_DECREF(obj);

  0008f	e8 00 00 00 00	 call	 _Py_PXCTX
  00094	85 c0		 test	 eax, eax
  00096	75 5e		 jne	 SHORT $LN24@dotted_get
  00098	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0009c	f6 c1 20	 test	 cl, 32			; 00000020H
  0009f	75 4d		 jne	 SHORT $LN18@dotted_get
  000a1	84 c9		 test	 cl, cl
  000a3	78 49		 js	 SHORT $LN18@dotted_get
  000a5	f6 c1 02	 test	 cl, 2
  000a8	75 4c		 jne	 SHORT $LN24@dotted_get
  000aa	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000ae	75 46		 jne	 SHORT $LN24@dotted_get
  000b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000be	4c 8b cb	 mov	 r9, rbx
  000c1	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000c7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000cf	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d4	48 8b cb	 mov	 rcx, rbx
  000d7	85 c0		 test	 eax, eax
  000d9	74 07		 je	 SHORT $LN23@dotted_get
  000db	e8 00 00 00 00	 call	 _Px_Dealloc
  000e0	eb 14		 jmp	 SHORT $LN24@dotted_get
$LN23@dotted_get:
  000e2	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000e6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000ec	eb 08		 jmp	 SHORT $LN24@dotted_get
$LN18@dotted_get:
  000ee	48 8b cb	 mov	 rcx, rbx
  000f1	e8 00 00 00 00	 call	 Px_DecRef
$LN24@dotted_get:

; 664  :             if (newobj == NULL) {

  000f6	48 85 ff	 test	 rdi, rdi
  000f9	74 15		 je	 SHORT $LN26@dotted_get

; 660  :         for (name_idx = 0; name_idx < name_count; ++name_idx) {

  000fb	48 ff c6	 inc	 rsi
  000fe	48 83 c5 08	 add	 rbp, 8

; 666  :             }
; 667  :             /* here */
; 668  :             obj = newobj;

  00102	48 8b df	 mov	 rbx, rdi
  00105	49 3b f4	 cmp	 rsi, r12
  00108	0f 8c 72 ff ff
	ff		 jl	 $LL6@dotted_get

; 664  :             if (newobj == NULL) {

  0010e	eb 11		 jmp	 SHORT $LN1@dotted_get
$LN26@dotted_get:

; 665  :                 return NULL;

  00110	33 c0		 xor	 eax, eax
  00112	eb 10		 jmp	 SHORT $LN8@dotted_get
$LN7@dotted_get:

; 669  :         }
; 670  :     } else { /* single getattr */
; 671  :         newobj = PyObject_GetAttr(obj, attr);

  00114	e8 00 00 00 00	 call	 PyObject_GetAttr
  00119	48 8b d8	 mov	 rbx, rax

; 672  :         if (newobj == NULL)

  0011c	48 85 c0	 test	 rax, rax

; 673  :             return NULL;

  0011f	74 ef		 je	 SHORT $LN26@dotted_get
$LN1@dotted_get:

; 674  :         obj = newobj;
; 675  :     }
; 676  : 
; 677  :     return obj;

  00121	48 8b c3	 mov	 rax, rbx
$LN8@dotted_get:

; 678  : }

  00124	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00129	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0012e	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00133	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  00138	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0013c	41 5c		 pop	 r12
  0013e	c3		 ret	 0
dotted_getattr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$attrgetter_call DD imagerel attrgetter_call
	DD	imagerel attrgetter_call+104
	DD	imagerel $unwind$attrgetter_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$attrgetter_call DD imagerel attrgetter_call+104
	DD	imagerel attrgetter_call+135
	DD	imagerel $chain$0$attrgetter_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$attrgetter_call DD imagerel attrgetter_call+135
	DD	imagerel attrgetter_call+226
	DD	imagerel $chain$4$attrgetter_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$attrgetter_call DD imagerel attrgetter_call+226
	DD	imagerel attrgetter_call+238
	DD	imagerel $chain$6$attrgetter_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$attrgetter_call DD 060021H
	DD	067400H
	DD	0c6400H
	DD	0b3400H
	DD	imagerel attrgetter_call
	DD	imagerel attrgetter_call+104
	DD	imagerel $unwind$attrgetter_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$attrgetter_call DD 060a21H
	DD	06740aH
	DD	0b3405H
	DD	0c6400H
	DD	imagerel attrgetter_call
	DD	imagerel attrgetter_call+104
	DD	imagerel $unwind$attrgetter_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$attrgetter_call DD 020521H
	DD	0c6405H
	DD	imagerel attrgetter_call
	DD	imagerel attrgetter_call+104
	DD	imagerel $unwind$attrgetter_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$attrgetter_call DD 030801H
	DD	0c0046208H
	DD	05002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT attrgetter_call
_TEXT	SEGMENT
obj$ = 80
ag$ = 80
args$ = 88
kw$ = 96
attrgetter_call PROC					; COMDAT

; 682  : {

  00000	40 55		 push	 rbp
  00002	41 54		 push	 r12
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 683  :     PyObject *obj, *result;
; 684  :     Py_ssize_t i, nattrs=ag->nattrs;

  00008	48 8b 69 60	 mov	 rbp, QWORD PTR [rcx+96]
  0000c	4c 8b e1	 mov	 r12, rcx
  0000f	48 8b c2	 mov	 rax, rdx

; 685  : 
; 686  :     if (!PyArg_UnpackTuple(args, "attrgetter", 1, 1, &obj))

  00012	48 8d 4c 24 50	 lea	 rcx, QWORD PTR obj$[rsp]
  00017	41 b9 01 00 00
	00		 mov	 r9d, 1
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@BEIIKJME@attrgetter?$AA@
  00024	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00029	48 8b c8	 mov	 rcx, rax
  0002c	45 8b c1	 mov	 r8d, r9d
  0002f	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00034	85 c0		 test	 eax, eax
  00036	75 0a		 jne	 SHORT $LN7@attrgetter@4

; 687  :         return NULL;

  00038	33 c0		 xor	 eax, eax

; 709  : }

  0003a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003e	41 5c		 pop	 r12
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
$LN7@attrgetter@4:

; 688  :     if (ag->nattrs == 1) /* ag->attr is always a tuple */

  00042	49 83 7c 24 60
	01		 cmp	 QWORD PTR [r12+96], 1
  00048	75 1b		 jne	 SHORT $LN6@attrgetter@4

; 689  :         return dotted_getattr(obj, PyTuple_GET_ITEM(ag->attr, 0));

  0004a	49 8b 54 24 68	 mov	 rdx, QWORD PTR [r12+104]
  0004f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  00054	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  00058	e8 00 00 00 00	 call	 dotted_getattr

; 709  : }

  0005d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00061	41 5c		 pop	 r12
  00063	5d		 pop	 rbp
  00064	c3		 ret	 0
$LN6@attrgetter@4:

; 690  : 
; 691  :     assert(PyTuple_Check(ag->attr));
; 692  :     assert(PyTuple_GET_SIZE(ag->attr) == nattrs);
; 693  : 
; 694  :     result = PyTuple_New(nattrs);

  00065	48 8b cd	 mov	 rcx, rbp
  00068	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  0006d	e8 00 00 00 00	 call	 PyTuple_New
  00072	48 8b f0	 mov	 rsi, rax

; 695  :     if (result == NULL)

  00075	48 85 c0	 test	 rax, rax
  00078	75 0d		 jne	 SHORT $LN5@attrgetter@4
  0007a	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 709  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	41 5c		 pop	 r12
  00085	5d		 pop	 rbp
  00086	c3		 ret	 0
$LN5@attrgetter@4:
  00087	48 89 5c 24 58	 mov	 QWORD PTR [rsp+88], rbx
  0008c	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi

; 696  :         return NULL;
; 697  : 
; 698  :     for (i=0 ; i < nattrs ; i++) {

  00091	33 ff		 xor	 edi, edi
  00093	48 85 ed	 test	 rbp, rbp
  00096	7e 30		 jle	 SHORT $LN2@attrgetter@4
  00098	bb 70 00 00 00	 mov	 ebx, 112		; 00000070H
  0009d	0f 1f 00	 npad	 3
$LL4@attrgetter@4:

; 699  :         PyObject *attr, *val;
; 700  :         attr = PyTuple_GET_ITEM(ag->attr, i);

  000a0	49 8b 44 24 68	 mov	 rax, QWORD PTR [r12+104]

; 701  :         val = dotted_getattr(obj, attr);

  000a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  000aa	48 8b 14 03	 mov	 rdx, QWORD PTR [rbx+rax]
  000ae	e8 00 00 00 00	 call	 dotted_getattr

; 702  :         if (val == NULL) {

  000b3	48 85 c0	 test	 rax, rax
  000b6	74 2a		 je	 SHORT $LN11@attrgetter@4

; 705  :         }
; 706  :         PyTuple_SET_ITEM(result, i, val);

  000b8	48 ff c7	 inc	 rdi
  000bb	48 89 04 33	 mov	 QWORD PTR [rbx+rsi], rax
  000bf	48 83 c3 08	 add	 rbx, 8
  000c3	48 3b fd	 cmp	 rdi, rbp
  000c6	7c d8		 jl	 SHORT $LL4@attrgetter@4
$LN2@attrgetter@4:

; 707  :     }
; 708  :     return result;

  000c8	48 8b c6	 mov	 rax, rsi
$LN15@attrgetter@4:
  000cb	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  000d0	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  000d5	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 709  : }

  000da	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000de	41 5c		 pop	 r12
  000e0	5d		 pop	 rbp
  000e1	c3		 ret	 0
$LN11@attrgetter@4:

; 703  :             Py_DECREF(result);

  000e2	48 8b ce	 mov	 rcx, rsi
  000e5	e8 00 00 00 00	 call	 _Py_DecRef

; 704  :             return NULL;

  000ea	33 c0		 xor	 eax, eax
  000ec	eb dd		 jmp	 SHORT $LN15@attrgetter@4
attrgetter_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DK@JOKGBCGJ@methodcaller?5needs?5at?5least?5one?5@ ; `string'
EXTRN	PyTuple_GetSlice:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$methodcaller_new DD imagerel methodcaller_new
	DD	imagerel methodcaller_new+55
	DD	imagerel $unwind$methodcaller_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$methodcaller_new DD imagerel methodcaller_new+55
	DD	imagerel methodcaller_new+144
	DD	imagerel $chain$0$methodcaller_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$methodcaller_new DD imagerel methodcaller_new+144
	DD	imagerel methodcaller_new+259
	DD	imagerel $chain$2$methodcaller_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$methodcaller_new DD 020021H
	DD	087400H
	DD	imagerel methodcaller_new
	DD	imagerel methodcaller_new+55
	DD	imagerel $unwind$methodcaller_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$methodcaller_new DD 020521H
	DD	087405H
	DD	imagerel methodcaller_new
	DD	imagerel methodcaller_new+55
	DD	imagerel $unwind$methodcaller_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$methodcaller_new DD 040a01H
	DD	09340aH
	DD	06006520aH
xdata	ENDS
;	COMDAT ??_C@_0DK@JOKGBCGJ@methodcaller?5needs?5at?5least?5one?5@
CONST	SEGMENT
??_C@_0DK@JOKGBCGJ@methodcaller?5needs?5at?5least?5one?5@ DB 'methodcalle'
	DB	'r needs at least one argument, the method name', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\operator.c
CONST	ENDS
;	COMDAT methodcaller_new
_TEXT	SEGMENT
type$ = 64
args$ = 72
kwds$ = 80
methodcaller_new PROC					; COMDAT

; 777  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 778  :     methodcallerobject *mc;
; 779  :     PyObject *name, *newargs;
; 780  : 
; 781  :     if (PyTuple_GET_SIZE(args) < 1) {

  0000a	48 83 7a 60 01	 cmp	 QWORD PTR [rdx+96], 1
  0000f	49 8b f0	 mov	 rsi, r8
  00012	48 8b da	 mov	 rbx, rdx
  00015	7d 20		 jge	 SHORT $LN7@methodcall

; 782  :         PyErr_SetString(PyExc_TypeError, "methodcaller needs at least "
; 783  :                         "one argument, the method name");

  00017	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DK@JOKGBCGJ@methodcaller?5needs?5at?5least?5one?5@
  00025	e8 00 00 00 00	 call	 PyErr_SetString

; 784  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 807  :     return (PyObject *)mc;
; 808  : }

  0002c	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00031	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00035	5e		 pop	 rsi
  00036	c3		 ret	 0
$LN7@methodcall:
  00037	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 785  :     }
; 786  : 
; 787  :     /* create methodcallerobject structure */
; 788  :     mc = PyObject_GC_New(methodcallerobject, &methodcaller_type);

  0003c	e8 00 00 00 00	 call	 _Py_PXCTX
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:methodcaller_type
  00048	85 c0		 test	 eax, eax
  0004a	74 07		 je	 SHORT $LN10@methodcall
  0004c	e8 00 00 00 00	 call	 _PxObject_New
  00051	eb 05		 jmp	 SHORT $LN17@methodcall
$LN10@methodcall:
  00053	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN17@methodcall:
  00058	48 8b f8	 mov	 rdi, rax

; 789  :     if (mc == NULL)

  0005b	48 85 c0	 test	 rax, rax

; 790  :         return NULL;

  0005e	74 1e		 je	 SHORT $LN18@methodcall

; 791  : 
; 792  :     newargs = PyTuple_GetSlice(args, 1, PyTuple_GET_SIZE(args));

  00060	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  00064	ba 01 00 00 00	 mov	 edx, 1
  00069	48 8b cb	 mov	 rcx, rbx
  0006c	e8 00 00 00 00	 call	 PyTuple_GetSlice

; 793  :     if (newargs == NULL) {

  00071	48 85 c0	 test	 rax, rax
  00074	75 1a		 jne	 SHORT $LN5@methodcall

; 794  :         Py_DECREF(mc);

  00076	48 8b cf	 mov	 rcx, rdi
  00079	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@methodcall:

; 795  :         return NULL;

  0007e	33 c0		 xor	 eax, eax
  00080	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 807  :     return (PyObject *)mc;
; 808  : }

  00085	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0008a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008e	5e		 pop	 rsi
  0008f	c3		 ret	 0
$LN5@methodcall:

; 796  :     }
; 797  :     mc->args = newargs;

  00090	48 89 47 68	 mov	 QWORD PTR [rdi+104], rax

; 798  : 
; 799  :     name = PyTuple_GET_ITEM(args, 0);

  00094	48 8b 5b 70	 mov	 rbx, QWORD PTR [rbx+112]

; 800  :     Py_INCREF(name);

  00098	48 8b cb	 mov	 rcx, rbx
  0009b	e8 00 00 00 00	 call	 _Py_IncRef

; 801  :     mc->name = name;

  000a0	48 89 5f 60	 mov	 QWORD PTR [rdi+96], rbx

; 802  : 
; 803  :     Py_XINCREF(kwds);

  000a4	48 85 f6	 test	 rsi, rsi
  000a7	74 3b		 je	 SHORT $LN3@methodcall
  000a9	e8 00 00 00 00	 call	 _Py_PXCTX
  000ae	85 c0		 test	 eax, eax
  000b0	75 32		 jne	 SHORT $LN3@methodcall
  000b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000c0	4c 8b ce	 mov	 r9, rsi
  000c3	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000c9	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000d1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d6	85 c0		 test	 eax, eax
  000d8	75 06		 jne	 SHORT $LN12@methodcall
  000da	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  000de	74 04		 je	 SHORT $LN3@methodcall
$LN12@methodcall:
  000e0	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN3@methodcall:

; 804  :     mc->kwds = kwds;
; 805  : 
; 806  :     PyObject_GC_Track(mc);

  000e4	48 8b cf	 mov	 rcx, rdi
  000e7	48 89 77 70	 mov	 QWORD PTR [rdi+112], rsi
  000eb	e8 00 00 00 00	 call	 PyObject_GC_Track

; 807  :     return (PyObject *)mc;
; 808  : }

  000f0	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000f5	48 8b c7	 mov	 rax, rdi
  000f8	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000fd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00101	5e		 pop	 rsi
  00102	c3		 ret	 0
methodcaller_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$methodcaller_dealloc DD imagerel methodcaller_dealloc
	DD	imagerel methodcaller_dealloc+402
	DD	imagerel $unwind$methodcaller_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$methodcaller_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\operator.c
xdata	ENDS
;	COMDAT methodcaller_dealloc
_TEXT	SEGMENT
mc$ = 64
methodcaller_dealloc PROC				; COMDAT

; 812  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 813  :     PyObject_GC_UnTrack(mc);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 814  :     Py_XDECREF(mc->name);

  00012	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00016	48 85 db	 test	 rbx, rbx
  00019	74 65		 je	 SHORT $LN11@methodcall@2
  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	75 5c		 jne	 SHORT $LN11@methodcall@2
  00024	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00028	a8 20		 test	 al, 32			; 00000020H
  0002a	75 4c		 jne	 SHORT $LN19@methodcall@2
  0002c	84 c0		 test	 al, al
  0002e	78 48		 js	 SHORT $LN19@methodcall@2
  00030	a8 02		 test	 al, 2
  00032	75 4c		 jne	 SHORT $LN11@methodcall@2
  00034	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00038	75 46		 jne	 SHORT $LN11@methodcall@2
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00048	4c 8b cb	 mov	 r9, rbx
  0004b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00051	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	85 c0		 test	 eax, eax
  00063	74 07		 je	 SHORT $LN24@methodcall@2
  00065	e8 00 00 00 00	 call	 _Px_Dealloc
  0006a	eb 14		 jmp	 SHORT $LN11@methodcall@2
$LN24@methodcall@2:
  0006c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00070	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00076	eb 08		 jmp	 SHORT $LN11@methodcall@2
$LN19@methodcall@2:
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 Px_DecRef
$LN11@methodcall@2:

; 815  :     Py_XDECREF(mc->args);

  00080	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00084	48 85 db	 test	 rbx, rbx
  00087	74 65		 je	 SHORT $LN7@methodcall@2
  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 5c		 jne	 SHORT $LN7@methodcall@2
  00092	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00096	a8 20		 test	 al, 32			; 00000020H
  00098	75 4c		 jne	 SHORT $LN30@methodcall@2
  0009a	84 c0		 test	 al, al
  0009c	78 48		 js	 SHORT $LN30@methodcall@2
  0009e	a8 02		 test	 al, 2
  000a0	75 4c		 jne	 SHORT $LN7@methodcall@2
  000a2	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a6	75 46		 jne	 SHORT $LN7@methodcall@2
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b6	4c 8b cb	 mov	 r9, rbx
  000b9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN35@methodcall@2
  000d3	e8 00 00 00 00	 call	 _Px_Dealloc
  000d8	eb 14		 jmp	 SHORT $LN7@methodcall@2
$LN35@methodcall@2:
  000da	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000de	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e4	eb 08		 jmp	 SHORT $LN7@methodcall@2
$LN30@methodcall@2:
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 Px_DecRef
$LN7@methodcall@2:

; 816  :     Py_XDECREF(mc->kwds);

  000ee	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  000f2	48 85 db	 test	 rbx, rbx
  000f5	0f 84 85 00 00
	00		 je	 $LN3@methodcall@2
  000fb	e8 00 00 00 00	 call	 _Py_PXCTX
  00100	85 c0		 test	 eax, eax
  00102	75 7c		 jne	 SHORT $LN3@methodcall@2
  00104	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00108	a8 20		 test	 al, 32			; 00000020H
  0010a	75 6c		 jne	 SHORT $LN41@methodcall@2
  0010c	84 c0		 test	 al, al
  0010e	78 68		 js	 SHORT $LN41@methodcall@2
  00110	a8 02		 test	 al, 2
  00112	75 6c		 jne	 SHORT $LN3@methodcall@2
  00114	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00118	75 66		 jne	 SHORT $LN3@methodcall@2
  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00128	4c 8b cb	 mov	 r9, rbx
  0012b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00131	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00139	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013e	48 8b cb	 mov	 rcx, rbx
  00141	85 c0		 test	 eax, eax
  00143	74 17		 je	 SHORT $LN46@methodcall@2
  00145	e8 00 00 00 00	 call	 _Px_Dealloc

; 817  :     PyObject_GC_Del(mc);

  0014a	48 8b cf	 mov	 rcx, rdi

; 818  : }

  0014d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00152	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00156	5f		 pop	 rdi
  00157	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 816  :     Py_XDECREF(mc->kwds);

$LN46@methodcall@2:
  0015c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00160	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 817  :     PyObject_GC_Del(mc);

  00166	48 8b cf	 mov	 rcx, rdi

; 818  : }

  00169	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0016e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00172	5f		 pop	 rdi
  00173	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 816  :     Py_XDECREF(mc->kwds);

$LN41@methodcall@2:
  00178	48 8b cb	 mov	 rcx, rbx
  0017b	e8 00 00 00 00	 call	 Px_DecRef
$LN3@methodcall@2:

; 817  :     PyObject_GC_Del(mc);

  00180	48 8b cf	 mov	 rcx, rdi

; 818  : }

  00183	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00188	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0018c	5f		 pop	 rdi
  0018d	e9 00 00 00 00	 jmp	 PyObject_GC_Del
methodcaller_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@BBEIGJLO@methodcaller_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$methodcaller_traverse DD imagerel methodcaller_traverse
	DD	imagerel methodcaller_traverse+152
	DD	imagerel $unwind$methodcaller_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$methodcaller_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BG@BBEIGJLO@methodcaller_traverse?$AA@
CONST	SEGMENT
??_C@_0BG@BBEIGJLO@methodcaller_traverse?$AA@ DB 'methodcaller_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT methodcaller_traverse
_TEXT	SEGMENT
mc$ = 48
visit$ = 56
arg$ = 64
methodcaller_traverse PROC				; COMDAT

; 822  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 823  :     Py_VISIT(mc->args);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@methodcall@3
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HPIKNNGK@?4?4?2Modules?2operator?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@BBEIGJLO@methodcaller_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 37 03 00
	00		 mov	 r8d, 823		; 00000337H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@methodcall@3:
  0003d	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@methodcall@3
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@methodcall@3
$LN11@methodcall@3:

; 824  :     Py_VISIT(mc->kwds);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@methodcall@3
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HPIKNNGK@?4?4?2Modules?2operator?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@BBEIGJLO@methodcaller_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 38 03 00
	00		 mov	 r8d, 824		; 00000338H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@methodcall@3:
  00074	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@methodcall@3
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@methodcall@3
$LN5@methodcall@3:

; 825  :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@methodcall@3:

; 826  : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
methodcaller_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@FFMENHEL@methodcaller?$AA@		; `string'
EXTRN	PyObject_Call:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$methodcaller_call DD imagerel methodcaller_call
	DD	imagerel methodcaller_call+67
	DD	imagerel $unwind$methodcaller_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$methodcaller_call DD imagerel methodcaller_call+67
	DD	imagerel methodcaller_call+96
	DD	imagerel $chain$0$methodcaller_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$methodcaller_call DD imagerel methodcaller_call+96
	DD	imagerel methodcaller_call+137
	DD	imagerel $chain$2$methodcaller_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$methodcaller_call DD 020021H
	DD	087400H
	DD	imagerel methodcaller_call
	DD	imagerel methodcaller_call+67
	DD	imagerel $unwind$methodcaller_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$methodcaller_call DD 020521H
	DD	087405H
	DD	imagerel methodcaller_call
	DD	imagerel methodcaller_call+67
	DD	imagerel $unwind$methodcaller_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$methodcaller_call DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0N@FFMENHEL@methodcaller?$AA@
CONST	SEGMENT
??_C@_0N@FFMENHEL@methodcaller?$AA@ DB 'methodcaller', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT methodcaller_call
_TEXT	SEGMENT
mc$ = 64
args$ = 72
kw$ = 80
obj$ = 88
methodcaller_call PROC					; COMDAT

; 830  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	48 8b c2	 mov	 rax, rdx

; 831  :     PyObject *method, *obj, *result;
; 832  : 
; 833  :     if (!PyArg_UnpackTuple(args, "methodcaller", 1, 1, &obj))

  0000c	48 8d 4c 24 58	 lea	 rcx, QWORD PTR obj$[rsp]
  00011	41 b9 01 00 00
	00		 mov	 r9d, 1
  00017	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@FFMENHEL@methodcaller?$AA@
  00023	48 8b c8	 mov	 rcx, rax
  00026	45 8b c1	 mov	 r8d, r9d
  00029	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0002e	85 c0		 test	 eax, eax
  00030	75 08		 jne	 SHORT $LN2@methodcall@4

; 834  :         return NULL;

  00032	33 c0		 xor	 eax, eax

; 841  : }

  00034	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00038	5b		 pop	 rbx
  00039	c3		 ret	 0
$LN2@methodcall@4:

; 835  :     method = PyObject_GetAttr(obj, mc->name);

  0003a	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  0003e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR obj$[rsp]
  00043	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00048	e8 00 00 00 00	 call	 PyObject_GetAttr
  0004d	48 8b f8	 mov	 rdi, rax

; 836  :     if (method == NULL)

  00050	48 85 c0	 test	 rax, rax
  00053	75 0b		 jne	 SHORT $LN1@methodcall@4
  00055	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 841  : }

  0005a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005e	5b		 pop	 rbx
  0005f	c3		 ret	 0
$LN1@methodcall@4:

; 837  :         return NULL;
; 838  :     result = PyObject_Call(method, mc->args, mc->kwds);

  00060	4c 8b 43 70	 mov	 r8, QWORD PTR [rbx+112]
  00064	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  00068	48 8b c8	 mov	 rcx, rax
  0006b	e8 00 00 00 00	 call	 PyObject_Call

; 839  :     Py_DECREF(method);

  00070	48 8b cf	 mov	 rcx, rdi
  00073	48 8b d8	 mov	 rbx, rax
  00076	e8 00 00 00 00	 call	 _Py_DecRef
  0007b	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 840  :     return result;

  00080	48 8b c3	 mov	 rax, rbx

; 841  : }

  00083	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00087	5b		 pop	 rbx
  00088	c3		 ret	 0
methodcaller_call ENDP
_TEXT	ENDS
PUBLIC	PyInit_operator
EXTRN	PyModule_AddObject:PROC
EXTRN	PyType_Ready:PROC
EXTRN	PyModule_Create2:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyInit_operator DD imagerel $LN20
	DD	imagerel $LN20+377
	DD	imagerel $unwind$PyInit_operator
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_operator DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\operator.c
xdata	ENDS
;	COMDAT PyInit_operator
_TEXT	SEGMENT
PyInit_operator PROC					; COMDAT

; 912  : {

$LN20:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 913  :     PyObject *m;
; 914  : 
; 915  :     /* Create the module and add the functions */
; 916  :     m = PyModule_Create(&operatormodule);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:operatormodule
  0000d	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00012	e8 00 00 00 00	 call	 PyModule_Create2
  00017	48 8b d8	 mov	 rbx, rax

; 917  :     if (m == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	75 08		 jne	 SHORT $LN4@PyInit_ope
$LN19@PyInit_ope:

; 918  :         return NULL;

  0001f	33 c0		 xor	 eax, eax

; 935  : }

  00021	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00025	5b		 pop	 rbx
  00026	c3		 ret	 0
$LN4@PyInit_ope:

; 919  : 
; 920  :     if (PyType_Ready(&itemgetter_type) < 0)

  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:itemgetter_type
  0002e	e8 00 00 00 00	 call	 PyType_Ready
  00033	85 c0		 test	 eax, eax

; 921  :         return NULL;

  00035	78 e8		 js	 SHORT $LN19@PyInit_ope

; 922  :     Py_INCREF(&itemgetter_type);

  00037	e8 00 00 00 00	 call	 _Py_PXCTX
  0003c	85 c0		 test	 eax, eax
  0003e	75 3c		 jne	 SHORT $LN8@PyInit_ope
  00040	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:itemgetter_type
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00055	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00063	e8 00 00 00 00	 call	 _PyParallel_Guard
  00068	85 c0		 test	 eax, eax
  0006a	75 09		 jne	 SHORT $LN7@PyInit_ope
  0006c	f6 05 20 00 00
	00 20		 test	 BYTE PTR itemgetter_type+32, 32 ; 00000020H
  00073	74 07		 je	 SHORT $LN8@PyInit_ope
$LN7@PyInit_ope:
  00075	48 ff 05 50 00
	00 00		 inc	 QWORD PTR itemgetter_type+80
$LN8@PyInit_ope:

; 923  :     PyModule_AddObject(m, "itemgetter", (PyObject *)&itemgetter_type);

  0007c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:itemgetter_type
  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LAGLDNDE@itemgetter?$AA@
  0008a	48 8b cb	 mov	 rcx, rbx
  0008d	e8 00 00 00 00	 call	 PyModule_AddObject

; 924  : 
; 925  :     if (PyType_Ready(&attrgetter_type) < 0)

  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:attrgetter_type
  00099	e8 00 00 00 00	 call	 PyType_Ready
  0009e	85 c0		 test	 eax, eax

; 926  :         return NULL;

  000a0	0f 88 79 ff ff
	ff		 js	 $LN19@PyInit_ope

; 927  :     Py_INCREF(&attrgetter_type);

  000a6	e8 00 00 00 00	 call	 _Py_PXCTX
  000ab	85 c0		 test	 eax, eax
  000ad	75 3c		 jne	 SHORT $LN12@PyInit_ope
  000af	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:attrgetter_type
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000c4	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ca	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000d2	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d7	85 c0		 test	 eax, eax
  000d9	75 09		 jne	 SHORT $LN11@PyInit_ope
  000db	f6 05 20 00 00
	00 20		 test	 BYTE PTR attrgetter_type+32, 32 ; 00000020H
  000e2	74 07		 je	 SHORT $LN12@PyInit_ope
$LN11@PyInit_ope:
  000e4	48 ff 05 50 00
	00 00		 inc	 QWORD PTR attrgetter_type+80
$LN12@PyInit_ope:

; 928  :     PyModule_AddObject(m, "attrgetter", (PyObject *)&attrgetter_type);

  000eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:attrgetter_type
  000f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@BEIIKJME@attrgetter?$AA@
  000f9	48 8b cb	 mov	 rcx, rbx
  000fc	e8 00 00 00 00	 call	 PyModule_AddObject

; 929  : 
; 930  :     if (PyType_Ready(&methodcaller_type) < 0)

  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:methodcaller_type
  00108	e8 00 00 00 00	 call	 PyType_Ready
  0010d	85 c0		 test	 eax, eax

; 931  :         return NULL;

  0010f	0f 88 0a ff ff
	ff		 js	 $LN19@PyInit_ope

; 932  :     Py_INCREF(&methodcaller_type);

  00115	e8 00 00 00 00	 call	 _Py_PXCTX
  0011a	85 c0		 test	 eax, eax
  0011c	75 3c		 jne	 SHORT $LN16@PyInit_ope
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:methodcaller_type
  00125	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00133	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00139	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00141	e8 00 00 00 00	 call	 _PyParallel_Guard
  00146	85 c0		 test	 eax, eax
  00148	75 09		 jne	 SHORT $LN15@PyInit_ope
  0014a	f6 05 20 00 00
	00 20		 test	 BYTE PTR methodcaller_type+32, 32 ; 00000020H
  00151	74 07		 je	 SHORT $LN16@PyInit_ope
$LN15@PyInit_ope:
  00153	48 ff 05 50 00
	00 00		 inc	 QWORD PTR methodcaller_type+80
$LN16@PyInit_ope:

; 933  :     PyModule_AddObject(m, "methodcaller", (PyObject *)&methodcaller_type);

  0015a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:methodcaller_type
  00161	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@FFMENHEL@methodcaller?$AA@
  00168	48 8b cb	 mov	 rcx, rbx
  0016b	e8 00 00 00 00	 call	 PyModule_AddObject

; 934  :     return m;

  00170	48 8b c3	 mov	 rax, rbx

; 935  : }

  00173	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00177	5b		 pop	 rbx
  00178	c3		 ret	 0
PyInit_operator ENDP
_TEXT	ENDS
END
