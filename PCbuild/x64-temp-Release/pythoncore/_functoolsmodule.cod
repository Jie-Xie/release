; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0L@MLIHCBMC@_functools?$AA@		; `string'
PUBLIC	??_C@_0L@CPCLJIO@cmp_to_key?$AA@		; `string'
PUBLIC	??_C@_06CDBFBENC@reduce?$AA@			; `string'
PUBLIC	??_C@_05EIDGLJAO@mycmp?$AA@			; `string'
PUBLIC	??_C@_0BF@GDEPFHCM@functools?4KeyWrapper?$AA@	; `string'
PUBLIC	??_C@_0CB@OLAPEOPB@Value?5wrapped?5by?5a?5key?5function?4@ ; `string'
PUBLIC	??_C@_03GJLPFLNF@obj?$AA@			; `string'
PUBLIC	??_C@_0BC@CLJGJAAG@functools?4partial?$AA@	; `string'
PUBLIC	??_C@_0N@MOOGCAMH@__setstate__?$AA@		; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
PUBLIC	??_C@_0DI@JFMIELGJ@dictionary?5of?5keyword?5arguments?5@ ; `string'
PUBLIC	??_C@_08KBIEDDDE@keywords?$AA@			; `string'
PUBLIC	??_C@_0CL@JBDECGKC@tuple?5of?5arguments?5to?5future?5par@ ; `string'
PUBLIC	??_C@_04BFDDMJJI@args?$AA@			; `string'
PUBLIC	??_C@_0CP@GGFHCBJO@function?5object?5to?5use?5in?5future@ ; `string'
PUBLIC	??_C@_04HPNHAEOP@func?$AA@			; `string'
EXTRN	PyType_Type:BYTE
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyObject_GenericSetAttr:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyObject_GenericSetDict:PROC
EXTRN	PyObject_GenericGetDict:PROC
;	COMDAT ??_C@_0L@MLIHCBMC@_functools?$AA@
CONST	SEGMENT
??_C@_0L@MLIHCBMC@_functools?$AA@ DB '_functools', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CPCLJIO@cmp_to_key?$AA@
CONST	SEGMENT
??_C@_0L@CPCLJIO@cmp_to_key?$AA@ DB 'cmp_to_key', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CDBFBENC@reduce?$AA@
CONST	SEGMENT
??_C@_06CDBFBENC@reduce?$AA@ DB 'reduce', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EIDGLJAO@mycmp?$AA@
CONST	SEGMENT
??_C@_05EIDGLJAO@mycmp?$AA@ DB 'mycmp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GDEPFHCM@functools?4KeyWrapper?$AA@
CONST	SEGMENT
??_C@_0BF@GDEPFHCM@functools?4KeyWrapper?$AA@ DB 'functools.KeyWrapper', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OLAPEOPB@Value?5wrapped?5by?5a?5key?5function?4@
CONST	SEGMENT
??_C@_0CB@OLAPEOPB@Value?5wrapped?5by?5a?5key?5function?4@ DB 'Value wrap'
	DB	'ped by a key function.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GJLPFLNF@obj?$AA@
CONST	SEGMENT
??_C@_03GJLPFLNF@obj?$AA@ DB 'obj', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CLJGJAAG@functools?4partial?$AA@
CONST	SEGMENT
??_C@_0BC@CLJGJAAG@functools?4partial?$AA@ DB 'functools.partial', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOOGCAMH@__setstate__?$AA@
CONST	SEGMENT
??_C@_0N@MOOGCAMH@__setstate__?$AA@ DB '__setstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@JFMIELGJ@dictionary?5of?5keyword?5arguments?5@
CONST	SEGMENT
??_C@_0DI@JFMIELGJ@dictionary?5of?5keyword?5arguments?5@ DB 'dictionary o'
	DB	'f keyword arguments to future partial calls', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBIEDDDE@keywords?$AA@
CONST	SEGMENT
??_C@_08KBIEDDDE@keywords?$AA@ DB 'keywords', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@JBDECGKC@tuple?5of?5arguments?5to?5future?5par@
CONST	SEGMENT
??_C@_0CL@JBDECGKC@tuple?5of?5arguments?5to?5future?5par@ DB 'tuple of ar'
	DB	'guments to future partial calls', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFDDMJJI@args?$AA@
CONST	SEGMENT
??_C@_04BFDDMJJI@args?$AA@ DB 'args', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@GGFHCBJO@function?5object?5to?5use?5in?5future@
CONST	SEGMENT
??_C@_0CP@GGFHCBJO@function?5object?5to?5use?5in?5future@ DB 'function ob'
	DB	'ject to use in future partial calls', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPNHAEOP@func?$AA@
CONST	SEGMENT
??_C@_04HPNHAEOP@func?$AA@ DB 'func', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
partial_doc DB	'partial(func, *args, **keywords) - new function with par'
	DB	'tial application', 0aH, '    of the given arguments and keywo'
	DB	'rds.', 0aH, 00H
	ORG $+13
partial_memberlist DQ FLAT:??_C@_04HPNHAEOP@func?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CP@GGFHCBJO@function?5object?5to?5use?5in?5future@
	DQ	FLAT:??_C@_04BFDDMJJI@args?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CL@JBDECGKC@tuple?5of?5arguments?5to?5future?5par@
	DQ	FLAT:??_C@_08KBIEDDDE@keywords?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DI@JFMIELGJ@dictionary?5of?5keyword?5arguments?5@
	DQ	0000000000000000H
	ORG $+32
partial_getsetlist DQ FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	FLAT:PyObject_GenericGetDict
	DQ	FLAT:PyObject_GenericSetDict
	ORG $+16
	DQ	0000000000000000H
	ORG $+32
partial_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:partial_reduce
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:partial_setstate
	DD	08H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
partial_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@CLJGJAAG@functools?4partial?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:partial_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:partial_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:partial_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:partial_doc
	DQ	FLAT:partial_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:partial_methods
	DQ	FLAT:partial_memberlist
	DQ	FLAT:partial_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000078H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:partial_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
keyobject_members DQ FLAT:??_C@_03GJLPFLNF@obj?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	00H
	ORG $+4
	DQ	FLAT:??_C@_0CB@OLAPEOPB@Value?5wrapped?5by?5a?5key?5function?4@
	DQ	0000000000000000H
	ORG $+32
keyobject_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BF@GDEPFHCM@functools?4KeyWrapper?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:keyobject_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:keyobject_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:keyobject_traverse
	DQ	FLAT:keyobject_clear
	DQ	FLAT:keyobject_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:keyobject_members
	DQ	0000000000000000H
	ORG $+136
?kwargs@?1??keyobject_call@@9@9 DQ FLAT:??_C@_03GJLPFLNF@obj?$AA@ ; `keyobject_call'::`2'::kwargs
	DQ	0000000000000000H
?kwargs@?1??functools_cmp_to_key@@9@9 DQ FLAT:??_C@_05EIDGLJAO@mycmp?$AA@ ; `functools_cmp_to_key'::`2'::kwargs
	DQ	0000000000000000H
functools_cmp_to_key_doc DB 'Convert a cmp= function into a key= function'
	DB	'.', 00H
	ORG $+2
functools_reduce_doc DB 'reduce(function, sequence[, initial]) -> value', 0aH
	DB	0aH, 'Apply a function of two arguments cumulatively to the it'
	DB	'ems of a sequence,', 0aH, 'from left to right, so as to reduc'
	DB	'e the sequence to a single value.', 0aH, 'For example, reduce'
	DB	'(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates', 0aH, '((((1+'
	DB	'2)+3)+4)+5).  If initial is present, it is placed before the '
	DB	'items', 0aH, 'of the sequence in the calculation, and serves '
	DB	'as a default when the', 0aH, 'sequence is empty.', 00H
	ORG $+6
module_doc DB	'Tools that operate on functions.', 00H
	ORG $+7
module_methods DQ FLAT:??_C@_06CDBFBENC@reduce?$AA@
	DQ	FLAT:functools_reduce
	DD	01H
	ORG $+4
	DQ	FLAT:functools_reduce_doc
	DQ	FLAT:??_C@_0L@CPCLJIO@cmp_to_key?$AA@
	DQ	FLAT:functools_cmp_to_key
	DD	03H
	ORG $+4
	DQ	FLAT:functools_cmp_to_key_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_functoolsmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0L@MLIHCBMC@_functools?$AA@
	DQ	FLAT:module_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:module_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@ILJKFDML@the?5first?5argument?5must?5be?5calla@ ; `string'
PUBLIC	??_C@_0CL@BCHKBJID@type?5?8partial?8?5takes?5at?5least?5on@ ; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyDict_Copy:PROC
EXTRN	PyTuple_GetSlice:PROC
EXTRN	PyCallable_Check:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\modules\_functoolsmodule.c
pdata	SEGMENT
$pdata$partial_new DD imagerel partial_new
	DD	imagerel partial_new+281
	DD	imagerel $unwind$partial_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$partial_new DD 084901H
	DD	065449H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0CE@ILJKFDML@the?5first?5argument?5must?5be?5calla@
CONST	SEGMENT
??_C@_0CE@ILJKFDML@the?5first?5argument?5must?5be?5calla@ DB 'the first a'
	DB	'rgument must be callable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@BCHKBJID@type?5?8partial?8?5takes?5at?5least?5on@
CONST	SEGMENT
??_C@_0CL@BCHKBJID@type?5?8partial?8?5takes?5at?5least?5on@ DB 'type ''pa'
	DB	'rtial'' takes at least one argument', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT partial_new
_TEXT	SEGMENT
type$ = 48
args$ = 56
kw$ = 64
partial_new PROC					; COMDAT

; 27   : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 28   :     PyObject *func;
; 29   :     partialobject *pto;
; 30   : 
; 31   :     if (PyTuple_GET_SIZE(args) < 1) {

  0000f	48 83 7a 60 01	 cmp	 QWORD PTR [rdx+96], 1
  00014	49 8b f8	 mov	 rdi, r8
  00017	48 8b f2	 mov	 rsi, rdx
  0001a	48 8b d9	 mov	 rbx, rcx
  0001d	7d 25		 jge	 SHORT $LN7@partial_ne

; 32   :         PyErr_SetString(PyExc_TypeError,
; 33   :                         "type 'partial' takes at least one argument");

  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@BCHKBJID@type?5?8partial?8?5takes?5at?5least?5on@
  0002d	e8 00 00 00 00	 call	 PyErr_SetString

; 34   :         return NULL;

  00032	33 c0		 xor	 eax, eax

; 72   : }

  00034	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00039	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0003e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00042	5f		 pop	 rdi
  00043	c3		 ret	 0
$LN7@partial_ne:
  00044	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp

; 35   :     }
; 36   : 
; 37   :     func = PyTuple_GET_ITEM(args, 0);

  00049	48 8b 6a 70	 mov	 rbp, QWORD PTR [rdx+112]

; 38   :     if (!PyCallable_Check(func)) {

  0004d	48 8b cd	 mov	 rcx, rbp
  00050	e8 00 00 00 00	 call	 PyCallable_Check
  00055	85 c0		 test	 eax, eax
  00057	75 1a		 jne	 SHORT $LN6@partial_ne

; 39   :         PyErr_SetString(PyExc_TypeError,
; 40   :                         "the first argument must be callable");

  00059	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@ILJKFDML@the?5first?5argument?5must?5be?5calla@
  00067	e8 00 00 00 00	 call	 PyErr_SetString

; 41   :         return NULL;

  0006c	33 c0		 xor	 eax, eax
  0006e	e9 91 00 00 00	 jmp	 $LN10@partial_ne
$LN6@partial_ne:

; 42   :     }
; 43   : 
; 44   :     /* create partialobject structure */
; 45   :     pto = (partialobject *)type->tp_alloc(type, 0);

  00073	33 d2		 xor	 edx, edx
  00075	48 8b cb	 mov	 rcx, rbx
  00078	ff 93 88 01 00
	00		 call	 QWORD PTR [rbx+392]
  0007e	48 8b d8	 mov	 rbx, rax

; 46   :     if (pto == NULL)

  00081	48 85 c0	 test	 rax, rax

; 47   :         return NULL;

  00084	74 5a		 je	 SHORT $LN11@partial_ne

; 48   : 
; 49   :     pto->fn = func;
; 50   :     Py_INCREF(func);

  00086	48 8b cd	 mov	 rcx, rbp
  00089	48 89 68 60	 mov	 QWORD PTR [rax+96], rbp
  0008d	e8 00 00 00 00	 call	 _Py_IncRef

; 51   :     pto->args = PyTuple_GetSlice(args, 1, PY_SSIZE_T_MAX);

  00092	ba 01 00 00 00	 mov	 edx, 1
  00097	49 b8 ff ff ff
	ff ff ff ff 7f	 mov	 r8, 9223372036854775807	; 7fffffffffffffffH
  000a1	48 8b ce	 mov	 rcx, rsi
  000a4	e8 00 00 00 00	 call	 PyTuple_GetSlice
  000a9	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 52   :     if (pto->args == NULL) {

  000ad	48 85 c0	 test	 rax, rax
  000b0	75 10		 jne	 SHORT $LN4@partial_ne

; 53   :         pto->kw = NULL;
; 54   :         Py_DECREF(pto);

  000b2	48 8b cb	 mov	 rcx, rbx
  000b5	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax
  000b9	e8 00 00 00 00	 call	 _Py_DecRef

; 55   :         return NULL;

  000be	33 c0		 xor	 eax, eax
  000c0	eb 42		 jmp	 SHORT $LN10@partial_ne
$LN4@partial_ne:

; 56   :     }
; 57   :     if (kw != NULL) {

  000c2	48 85 ff	 test	 rdi, rdi
  000c5	74 1d		 je	 SHORT $LN3@partial_ne

; 58   :         pto->kw = PyDict_Copy(kw);

  000c7	48 8b cf	 mov	 rcx, rdi
  000ca	e8 00 00 00 00	 call	 PyDict_Copy
  000cf	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 59   :         if (pto->kw == NULL) {

  000d3	48 85 c0	 test	 rax, rax
  000d6	75 1c		 jne	 SHORT $LN1@partial_ne

; 60   :             Py_DECREF(pto);

  000d8	48 8b cb	 mov	 rcx, rbx
  000db	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@partial_ne:

; 61   :             return NULL;

  000e0	33 c0		 xor	 eax, eax
  000e2	eb 20		 jmp	 SHORT $LN10@partial_ne
$LN3@partial_ne:

; 62   :         }
; 63   :     } else {
; 64   :         pto->kw = Py_None;

  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000eb	48 89 4b 70	 mov	 QWORD PTR [rbx+112], rcx

; 65   :         Py_INCREF(Py_None);

  000ef	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@partial_ne:

; 66   :     }
; 67   : 
; 68   :     pto->weakreflist = NULL;

  000f4	33 c0		 xor	 eax, eax
  000f6	48 89 83 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rax

; 69   :     pto->dict = NULL;

  000fd	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax

; 70   : 
; 71   :     return (PyObject *)pto;

  00101	48 8b c3	 mov	 rax, rbx
$LN10@partial_ne:

; 72   : }

  00104	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  00109	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0010e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00113	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00117	5f		 pop	 rdi
  00118	c3		 ret	 0
partial_new ENDP
_TEXT	ENDS
EXTRN	PyObject_ClearWeakRefs:PROC
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$partial_dealloc DD imagerel partial_dealloc
	DD	imagerel partial_dealloc+500
	DD	imagerel $unwind$partial_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$partial_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_functoolsmodule.c
xdata	ENDS
;	COMDAT partial_dealloc
_TEXT	SEGMENT
pto$ = 64
partial_dealloc PROC					; COMDAT

; 76   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 77   :     PyObject_GC_UnTrack(pto);

  0000d	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 78   :     if (pto->weakreflist != NULL)

  00012	48 83 bf 80 00
	00 00 00	 cmp	 QWORD PTR [rdi+128], 0
  0001a	74 08		 je	 SHORT $LN16@partial_de

; 79   :         PyObject_ClearWeakRefs((PyObject *) pto);

  0001c	48 8b cf	 mov	 rcx, rdi
  0001f	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN16@partial_de:

; 80   :     Py_XDECREF(pto->fn);

  00024	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00028	48 85 db	 test	 rbx, rbx
  0002b	74 65		 je	 SHORT $LN15@partial_de
  0002d	e8 00 00 00 00	 call	 _Py_PXCTX
  00032	85 c0		 test	 eax, eax
  00034	75 5c		 jne	 SHORT $LN15@partial_de
  00036	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0003a	a8 20		 test	 al, 32			; 00000020H
  0003c	75 4c		 jne	 SHORT $LN24@partial_de
  0003e	84 c0		 test	 al, al
  00040	78 48		 js	 SHORT $LN24@partial_de
  00042	a8 02		 test	 al, 2
  00044	75 4c		 jne	 SHORT $LN15@partial_de
  00046	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0004a	75 46		 jne	 SHORT $LN15@partial_de
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0005a	4c 8b cb	 mov	 r9, rbx
  0005d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00063	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0006b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00070	48 8b cb	 mov	 rcx, rbx
  00073	85 c0		 test	 eax, eax
  00075	74 07		 je	 SHORT $LN29@partial_de
  00077	e8 00 00 00 00	 call	 _Px_Dealloc
  0007c	eb 14		 jmp	 SHORT $LN15@partial_de
$LN29@partial_de:
  0007e	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00082	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00088	eb 08		 jmp	 SHORT $LN15@partial_de
$LN24@partial_de:
  0008a	48 8b cb	 mov	 rcx, rbx
  0008d	e8 00 00 00 00	 call	 Px_DecRef
$LN15@partial_de:

; 81   :     Py_XDECREF(pto->args);

  00092	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  00096	48 85 db	 test	 rbx, rbx
  00099	74 65		 je	 SHORT $LN11@partial_de
  0009b	e8 00 00 00 00	 call	 _Py_PXCTX
  000a0	85 c0		 test	 eax, eax
  000a2	75 5c		 jne	 SHORT $LN11@partial_de
  000a4	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000a8	a8 20		 test	 al, 32			; 00000020H
  000aa	75 4c		 jne	 SHORT $LN35@partial_de
  000ac	84 c0		 test	 al, al
  000ae	78 48		 js	 SHORT $LN35@partial_de
  000b0	a8 02		 test	 al, 2
  000b2	75 4c		 jne	 SHORT $LN11@partial_de
  000b4	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000b8	75 46		 jne	 SHORT $LN11@partial_de
  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c8	4c 8b cb	 mov	 r9, rbx
  000cb	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000d1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000de	48 8b cb	 mov	 rcx, rbx
  000e1	85 c0		 test	 eax, eax
  000e3	74 07		 je	 SHORT $LN40@partial_de
  000e5	e8 00 00 00 00	 call	 _Px_Dealloc
  000ea	eb 14		 jmp	 SHORT $LN11@partial_de
$LN40@partial_de:
  000ec	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000f0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000f6	eb 08		 jmp	 SHORT $LN11@partial_de
$LN35@partial_de:
  000f8	48 8b cb	 mov	 rcx, rbx
  000fb	e8 00 00 00 00	 call	 Px_DecRef
$LN11@partial_de:

; 82   :     Py_XDECREF(pto->kw);

  00100	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  00104	48 85 db	 test	 rbx, rbx
  00107	74 65		 je	 SHORT $LN7@partial_de
  00109	e8 00 00 00 00	 call	 _Py_PXCTX
  0010e	85 c0		 test	 eax, eax
  00110	75 5c		 jne	 SHORT $LN7@partial_de
  00112	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00116	a8 20		 test	 al, 32			; 00000020H
  00118	75 4c		 jne	 SHORT $LN46@partial_de
  0011a	84 c0		 test	 al, al
  0011c	78 48		 js	 SHORT $LN46@partial_de
  0011e	a8 02		 test	 al, 2
  00120	75 4c		 jne	 SHORT $LN7@partial_de
  00122	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00126	75 46		 jne	 SHORT $LN7@partial_de
  00128	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0012f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00136	4c 8b cb	 mov	 r9, rbx
  00139	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0013f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00147	e8 00 00 00 00	 call	 _PyParallel_Guard
  0014c	48 8b cb	 mov	 rcx, rbx
  0014f	85 c0		 test	 eax, eax
  00151	74 07		 je	 SHORT $LN51@partial_de
  00153	e8 00 00 00 00	 call	 _Px_Dealloc
  00158	eb 14		 jmp	 SHORT $LN7@partial_de
$LN51@partial_de:
  0015a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0015e	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00164	eb 08		 jmp	 SHORT $LN7@partial_de
$LN46@partial_de:
  00166	48 8b cb	 mov	 rcx, rbx
  00169	e8 00 00 00 00	 call	 Px_DecRef
$LN7@partial_de:

; 83   :     Py_XDECREF(pto->dict);

  0016e	48 8b 5f 78	 mov	 rbx, QWORD PTR [rdi+120]
  00172	48 85 db	 test	 rbx, rbx
  00175	74 65		 je	 SHORT $LN3@partial_de
  00177	e8 00 00 00 00	 call	 _Py_PXCTX
  0017c	85 c0		 test	 eax, eax
  0017e	75 5c		 jne	 SHORT $LN3@partial_de
  00180	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00184	a8 20		 test	 al, 32			; 00000020H
  00186	75 4c		 jne	 SHORT $LN57@partial_de
  00188	84 c0		 test	 al, al
  0018a	78 48		 js	 SHORT $LN57@partial_de
  0018c	a8 02		 test	 al, 2
  0018e	75 4c		 jne	 SHORT $LN3@partial_de
  00190	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00194	75 46		 jne	 SHORT $LN3@partial_de
  00196	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0019d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001a4	4c 8b cb	 mov	 r9, rbx
  001a7	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001ad	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001b5	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ba	48 8b cb	 mov	 rcx, rbx
  001bd	85 c0		 test	 eax, eax
  001bf	74 07		 je	 SHORT $LN62@partial_de
  001c1	e8 00 00 00 00	 call	 _Px_Dealloc
  001c6	eb 14		 jmp	 SHORT $LN3@partial_de
$LN62@partial_de:
  001c8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001cc	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001d2	eb 08		 jmp	 SHORT $LN3@partial_de
$LN57@partial_de:
  001d4	48 8b cb	 mov	 rcx, rbx
  001d7	e8 00 00 00 00	 call	 Px_DecRef
$LN3@partial_de:

; 84   :     Py_TYPE(pto)->tp_free(pto);

  001dc	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  001e0	48 8b cf	 mov	 rcx, rdi

; 85   : }

  001e3	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001e8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001ec	5f		 pop	 rdi
  001ed	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
partial_dealloc ENDP
_TEXT	ENDS
EXTRN	PyDict_Merge:PROC
EXTRN	PySequence_Concat:PROC
EXTRN	PyObject_Call:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$partial_call DD imagerel partial_call
	DD	imagerel partial_call+119
	DD	imagerel $unwind$partial_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$partial_call DD imagerel partial_call+119
	DD	imagerel partial_call+341
	DD	imagerel $chain$0$partial_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$partial_call DD imagerel partial_call+341
	DD	imagerel partial_call+374
	DD	imagerel $chain$1$partial_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$partial_call DD imagerel partial_call+374
	DD	imagerel partial_call+497
	DD	imagerel $chain$2$partial_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$partial_call DD 020021H
	DD	083400H
	DD	imagerel partial_call
	DD	imagerel partial_call+119
	DD	imagerel $unwind$partial_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$partial_call DD 021H
	DD	imagerel partial_call
	DD	imagerel partial_call+119
	DD	imagerel $unwind$partial_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$partial_call DD 020521H
	DD	083405H
	DD	imagerel partial_call
	DD	imagerel partial_call+119
	DD	imagerel $unwind$partial_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$partial_call DD 060f01H
	DD	0a640fH
	DD	09540fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_functoolsmodule.c
xdata	ENDS
;	COMDAT partial_call
_TEXT	SEGMENT
pto$ = 64
args$ = 72
kw$ = 80
partial_call PROC					; COMDAT

; 89   : {

  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b e9	 mov	 rbp, rcx

; 90   :     PyObject *ret;
; 91   :     PyObject *argappl = NULL, *kwappl = NULL;
; 92   : 
; 93   :     assert (PyCallable_Check(pto->fn));
; 94   :     assert (PyTuple_Check(pto->args));
; 95   :     assert (pto->kw == Py_None  ||  PyDict_Check(pto->kw));
; 96   : 
; 97   :     if (PyTuple_GET_SIZE(pto->args) == 0) {

  00012	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00016	49 8b f0	 mov	 rsi, r8
  00019	48 83 79 60 00	 cmp	 QWORD PTR [rcx+96], 0
  0001e	48 8b fa	 mov	 rdi, rdx

; 98   :         argappl = args;
; 99   :         Py_INCREF(args);

  00021	74 0e		 je	 SHORT $LN45@partial_ca

; 100  :     } else if (PyTuple_GET_SIZE(args) == 0) {

  00023	48 83 7a 60 00	 cmp	 QWORD PTR [rdx+96], 0
  00028	0f 85 27 01 00
	00		 jne	 $LN16@partial_ca

; 101  :         argappl = pto->args;

  0002e	48 8b f9	 mov	 rdi, rcx
$LN45@partial_ca:

; 102  :         Py_INCREF(pto->args);

  00031	e8 00 00 00 00	 call	 _Py_PXCTX
  00036	85 c0		 test	 eax, eax
  00038	75 32		 jne	 SHORT $LN14@partial_ca
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00048	4c 8b cf	 mov	 r9, rdi
  0004b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00051	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00059	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005e	85 c0		 test	 eax, eax
  00060	75 06		 jne	 SHORT $LN25@partial_ca
  00062	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00066	74 04		 je	 SHORT $LN14@partial_ca
$LN25@partial_ca:
  00068	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN14@partial_ca:

; 106  :             return NULL;
; 107  :     }
; 108  : 
; 109  :     if (pto->kw == Py_None) {

  0006c	48 8b 4d 70	 mov	 rcx, QWORD PTR [rbp+112]
  00070	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00077	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0007c	48 3b c8	 cmp	 rcx, rax
  0007f	0f 85 f1 00 00
	00		 jne	 $LN13@partial_ca

; 110  :         kwappl = kw;

  00085	48 8b de	 mov	 rbx, rsi

; 111  :         Py_XINCREF(kw);

  00088	48 85 f6	 test	 rsi, rsi
  0008b	74 3b		 je	 SHORT $LN5@partial_ca
  0008d	e8 00 00 00 00	 call	 _Py_PXCTX
  00092	85 c0		 test	 eax, eax
  00094	75 32		 jne	 SHORT $LN5@partial_ca
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a4	4c 8b ce	 mov	 r9, rsi
  000a7	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ad	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ba	85 c0		 test	 eax, eax
  000bc	75 06		 jne	 SHORT $LN29@partial_ca
  000be	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  000c2	74 04		 je	 SHORT $LN5@partial_ca
$LN29@partial_ca:
  000c4	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN5@partial_ca:

; 123  :             }
; 124  :         }
; 125  :     }
; 126  : 
; 127  :     ret = PyObject_Call(pto->fn, argappl, kwappl);

  000c8	48 8b 4d 60	 mov	 rcx, QWORD PTR [rbp+96]
  000cc	4c 8b c3	 mov	 r8, rbx
  000cf	48 8b d7	 mov	 rdx, rdi
  000d2	e8 00 00 00 00	 call	 PyObject_Call

; 128  :     Py_DECREF(argappl);

  000d7	48 8b cf	 mov	 rcx, rdi
  000da	48 8b f0	 mov	 rsi, rax
  000dd	e8 00 00 00 00	 call	 _Py_DecRef

; 129  :     Py_XDECREF(kwappl);

  000e2	48 85 db	 test	 rbx, rbx
  000e5	0f 84 ee 00 00
	00		 je	 $LN3@partial_ca
  000eb	e8 00 00 00 00	 call	 _Py_PXCTX
  000f0	85 c0		 test	 eax, eax
  000f2	0f 85 e1 00 00
	00		 jne	 $LN3@partial_ca
  000f8	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  000fc	f6 c1 20	 test	 cl, 32			; 00000020H
  000ff	0f 85 cc 00 00
	00		 jne	 $LN37@partial_ca
  00105	84 c9		 test	 cl, cl
  00107	0f 88 c4 00 00
	00		 js	 $LN37@partial_ca
  0010d	f6 c1 02	 test	 cl, 2
  00110	0f 85 c3 00 00
	00		 jne	 $LN3@partial_ca
  00116	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0011a	0f 85 b9 00 00
	00		 jne	 $LN3@partial_ca
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0012e	4c 8b cb	 mov	 r9, rbx
  00131	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00137	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0013f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00144	48 8b cb	 mov	 rcx, rbx
  00147	85 c0		 test	 eax, eax
  00149	74 7a		 je	 SHORT $LN42@partial_ca
  0014b	e8 00 00 00 00	 call	 _Px_Dealloc
  00150	e9 84 00 00 00	 jmp	 $LN3@partial_ca
$LN16@partial_ca:

; 103  :     } else {
; 104  :         argappl = PySequence_Concat(pto->args, args);

  00155	e8 00 00 00 00	 call	 PySequence_Concat
  0015a	48 8b f8	 mov	 rdi, rax

; 105  :         if (argappl == NULL)

  0015d	48 85 c0	 test	 rax, rax
  00160	0f 85 06 ff ff
	ff		 jne	 $LN14@partial_ca

; 131  : }

  00166	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0016b	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00170	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00174	5f		 pop	 rdi
  00175	c3		 ret	 0
$LN13@partial_ca:

; 112  :     } else {
; 113  :         kwappl = PyDict_Copy(pto->kw);

  00176	e8 00 00 00 00	 call	 PyDict_Copy
  0017b	48 8b d8	 mov	 rbx, rax

; 114  :         if (kwappl == NULL) {

  0017e	48 85 c0	 test	 rax, rax
  00181	75 0c		 jne	 SHORT $LN7@partial_ca

; 115  :             Py_DECREF(argappl);

  00183	48 8b cf	 mov	 rcx, rdi
  00186	e8 00 00 00 00	 call	 _Py_DecRef

; 116  :             return NULL;

  0018b	33 c0		 xor	 eax, eax
  0018d	eb 4d		 jmp	 SHORT $LN44@partial_ca
$LN7@partial_ca:

; 117  :         }
; 118  :         if (kw != NULL) {

  0018f	48 85 f6	 test	 rsi, rsi
  00192	0f 84 30 ff ff
	ff		 je	 $LN5@partial_ca

; 119  :             if (PyDict_Merge(kwappl, kw, 1) != 0) {

  00198	41 b8 01 00 00
	00		 mov	 r8d, 1
  0019e	48 8b d6	 mov	 rdx, rsi
  001a1	48 8b c8	 mov	 rcx, rax
  001a4	e8 00 00 00 00	 call	 PyDict_Merge
  001a9	85 c0		 test	 eax, eax
  001ab	0f 84 17 ff ff
	ff		 je	 $LN5@partial_ca

; 120  :                 Py_DECREF(argappl);

  001b1	48 8b cf	 mov	 rcx, rdi
  001b4	e8 00 00 00 00	 call	 _Py_DecRef

; 121  :                 Py_DECREF(kwappl);

  001b9	48 8b cb	 mov	 rcx, rbx
  001bc	e8 00 00 00 00	 call	 _Py_DecRef

; 122  :                 return NULL;

  001c1	33 c0		 xor	 eax, eax
  001c3	eb 17		 jmp	 SHORT $LN44@partial_ca

; 129  :     Py_XDECREF(kwappl);

$LN42@partial_ca:
  001c5	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001c9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001cf	eb 08		 jmp	 SHORT $LN3@partial_ca
$LN37@partial_ca:
  001d1	48 8b cb	 mov	 rcx, rbx
  001d4	e8 00 00 00 00	 call	 Px_DecRef
$LN3@partial_ca:

; 130  :     return ret;

  001d9	48 8b c6	 mov	 rax, rsi
$LN44@partial_ca:
  001dc	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 131  : }

  001e1	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  001e6	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  001eb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001ef	5f		 pop	 rdi
  001f0	c3		 ret	 0
partial_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@NNINNGNH@partial_traverse?$AA@	; `string'
PUBLIC	??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$partial_traverse DD imagerel partial_traverse
	DD	imagerel partial_traverse+266
	DD	imagerel $unwind$partial_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$partial_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BB@NNINNGNH@partial_traverse?$AA@
CONST	SEGMENT
??_C@_0BB@NNINNGNH@partial_traverse?$AA@ DB 'partial_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
CONST	SEGMENT
??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@ DB '..\Modules'
	DB	'\_functoolsmodule.c', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT partial_traverse
_TEXT	SEGMENT
pto$ = 48
visit$ = 56
arg$ = 64
partial_traverse PROC					; COMDAT

; 135  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 136  :     Py_VISIT(pto->fn);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN21@partial_tr
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NNINNGNH@partial_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 88 00 00
	00		 mov	 r8d, 136		; 00000088H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@partial_tr:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 0d		 je	 SHORT $LN23@partial_tr
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	0f 85 a7 00 00
	00		 jne	 $LN25@partial_tr
$LN23@partial_tr:

; 137  :     Py_VISIT(pto->args);

  00053	e8 00 00 00 00	 call	 _Py_PXCTX
  00058	85 c0		 test	 eax, eax
  0005a	74 1c		 je	 SHORT $LN15@partial_tr
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NNINNGNH@partial_traverse?$AA@
  0006a	45 33 c9	 xor	 r9d, r9d
  0006d	41 b8 89 00 00
	00		 mov	 r8d, 137		; 00000089H
  00073	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@partial_tr:
  00078	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  0007c	48 85 c9	 test	 rcx, rcx
  0007f	74 09		 je	 SHORT $LN17@partial_tr
  00081	48 8b d7	 mov	 rdx, rdi
  00084	ff d6		 call	 rsi
  00086	85 c0		 test	 eax, eax
  00088	75 70		 jne	 SHORT $LN25@partial_tr
$LN17@partial_tr:

; 138  :     Py_VISIT(pto->kw);

  0008a	e8 00 00 00 00	 call	 _Py_PXCTX
  0008f	85 c0		 test	 eax, eax
  00091	74 1c		 je	 SHORT $LN9@partial_tr
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NNINNGNH@partial_traverse?$AA@
  000a1	45 33 c9	 xor	 r9d, r9d
  000a4	41 b8 8a 00 00
	00		 mov	 r8d, 138		; 0000008aH
  000aa	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@partial_tr:
  000af	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  000b3	48 85 c9	 test	 rcx, rcx
  000b6	74 09		 je	 SHORT $LN11@partial_tr
  000b8	48 8b d7	 mov	 rdx, rdi
  000bb	ff d6		 call	 rsi
  000bd	85 c0		 test	 eax, eax
  000bf	75 39		 jne	 SHORT $LN25@partial_tr
$LN11@partial_tr:

; 139  :     Py_VISIT(pto->dict);

  000c1	e8 00 00 00 00	 call	 _Py_PXCTX
  000c6	85 c0		 test	 eax, eax
  000c8	74 1c		 je	 SHORT $LN3@partial_tr
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NNINNGNH@partial_traverse?$AA@
  000d8	45 33 c9	 xor	 r9d, r9d
  000db	41 b8 8b 00 00
	00		 mov	 r8d, 139		; 0000008bH
  000e1	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@partial_tr:
  000e6	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  000ea	48 85 c9	 test	 rcx, rcx
  000ed	74 09		 je	 SHORT $LN5@partial_tr
  000ef	48 8b d7	 mov	 rdx, rdi
  000f2	ff d6		 call	 rsi
  000f4	85 c0		 test	 eax, eax
  000f6	75 02		 jne	 SHORT $LN25@partial_tr
$LN5@partial_tr:

; 140  :     return 0;

  000f8	33 c0		 xor	 eax, eax
$LN25@partial_tr:

; 141  : }

  000fa	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ff	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00104	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00108	5f		 pop	 rdi
  00109	c3		 ret	 0
partial_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_08KDHCOJKH@?$CFs?$CI?$CFR?$CFU?$CJ?$AA@	; `string'
PUBLIC	??_C@_09PPHIFKDO@?$CFU?0?5?$CFU?$DN?$CFR?$AA@	; `string'
PUBLIC	??_C@_06LBFNHJBI@?$CFU?0?5?$CFR?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	PyDict_Next:PROC
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$partial_repr DD imagerel partial_repr
	DD	imagerel partial_repr+41
	DD	imagerel $unwind$partial_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$partial_repr DD imagerel partial_repr+41
	DD	imagerel partial_repr+533
	DD	imagerel $chain$1$partial_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$partial_repr DD imagerel partial_repr+533
	DD	imagerel partial_repr+552
	DD	imagerel $chain$3$partial_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$partial_repr DD 040021H
	DD	066400H
	DD	0a3400H
	DD	imagerel partial_repr
	DD	imagerel partial_repr+41
	DD	imagerel $unwind$partial_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$partial_repr DD 040a21H
	DD	06640aH
	DD	0a3405H
	DD	imagerel partial_repr
	DD	imagerel partial_repr+41
	DD	imagerel $unwind$partial_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$partial_repr DD 030701H
	DD	070036207H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_08KDHCOJKH@?$CFs?$CI?$CFR?$CFU?$CJ?$AA@
CONST	SEGMENT
??_C@_08KDHCOJKH@?$CFs?$CI?$CFR?$CFU?$CJ?$AA@ DB '%s(%R%U)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PPHIFKDO@?$CFU?0?5?$CFU?$DN?$CFR?$AA@
CONST	SEGMENT
??_C@_09PPHIFKDO@?$CFU?0?5?$CFU?$DN?$CFR?$AA@ DB '%U, %U=%R', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LBFNHJBI@?$CFU?0?5?$CFR?$AA@
CONST	SEGMENT
??_C@_06LBFNHJBI@?$CFU?0?5?$CFR?$AA@ DB '%U, %R', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_functoolsmodule.c
CONST	ENDS
;	COMDAT partial_repr
_TEXT	SEGMENT
pto$ = 80
i$ = 88
value$20436 = 96
key$20435 = 104
partial_repr PROC					; COMDAT

; 165  : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00007	48 8b e9	 mov	 rbp, rcx

; 166  :     PyObject *result;
; 167  :     PyObject *arglist;
; 168  :     PyObject *tmp;
; 169  :     Py_ssize_t i, n;
; 170  : 
; 171  :     arglist = PyUnicode_FromString("");

  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00011	e8 00 00 00 00	 call	 PyUnicode_FromString
  00016	48 8b f8	 mov	 rdi, rax

; 172  :     if (arglist == NULL) {

  00019	48 85 c0	 test	 rax, rax
  0001c	75 07		 jne	 SHORT $LN9@partial_re

; 203  : }

  0001e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00022	5f		 pop	 rdi
  00023	5d		 pop	 rbp
  00024	c3		 ret	 0
$LN9@partial_re:

; 173  :         return NULL;
; 174  :     }
; 175  :     /* Pack positional arguments */
; 176  :     assert (PyTuple_Check(pto->args));
; 177  :     n = PyTuple_GET_SIZE(pto->args);

  00025	48 8b 45 68	 mov	 rax, QWORD PTR [rbp+104]
  00029	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0002e	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00033	48 8b 70 60	 mov	 rsi, QWORD PTR [rax+96]

; 178  :     for (i = 0; i < n; i++) {

  00037	33 c0		 xor	 eax, eax
  00039	48 89 44 24 58	 mov	 QWORD PTR i$[rsp], rax
  0003e	48 85 f6	 test	 rsi, rsi
  00041	0f 8e ad 00 00
	00		 jle	 $LN6@partial_re
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL8@partial_re:

; 179  :         tmp = PyUnicode_FromFormat("%U, %R", arglist,
; 180  :                                    PyTuple_GET_ITEM(pto->args, i));

  00050	4c 8b 45 68	 mov	 r8, QWORD PTR [rbp+104]
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06LBFNHJBI@?$CFU?0?5?$CFR?$AA@
  0005b	48 8b d7	 mov	 rdx, rdi
  0005e	4d 8b 44 c0 70	 mov	 r8, QWORD PTR [r8+rax*8+112]
  00063	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00068	48 8b d8	 mov	 rbx, rax

; 181  :         Py_DECREF(arglist);

  0006b	e8 00 00 00 00	 call	 _Py_PXCTX
  00070	85 c0		 test	 eax, eax
  00072	75 5e		 jne	 SHORT $LN22@partial_re
  00074	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00078	f6 c1 20	 test	 cl, 32			; 00000020H
  0007b	75 4d		 jne	 SHORT $LN16@partial_re
  0007d	84 c9		 test	 cl, cl
  0007f	78 49		 js	 SHORT $LN16@partial_re
  00081	f6 c1 02	 test	 cl, 2
  00084	75 4c		 jne	 SHORT $LN22@partial_re
  00086	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0008a	75 46		 jne	 SHORT $LN22@partial_re
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0009a	4c 8b cf	 mov	 r9, rdi
  0009d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000a3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ab	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b0	48 8b cf	 mov	 rcx, rdi
  000b3	85 c0		 test	 eax, eax
  000b5	74 07		 je	 SHORT $LN21@partial_re
  000b7	e8 00 00 00 00	 call	 _Px_Dealloc
  000bc	eb 14		 jmp	 SHORT $LN22@partial_re
$LN21@partial_re:
  000be	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000c2	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000c8	eb 08		 jmp	 SHORT $LN22@partial_re
$LN16@partial_re:
  000ca	48 8b cf	 mov	 rcx, rdi
  000cd	e8 00 00 00 00	 call	 Px_DecRef
$LN22@partial_re:

; 182  :         if (tmp == NULL)

  000d2	48 85 db	 test	 rbx, rbx
  000d5	0f 84 3a 01 00
	00		 je	 $LN37@partial_re

; 183  :             return NULL;
; 184  :         arglist = tmp;

  000db	48 8b 44 24 58	 mov	 rax, QWORD PTR i$[rsp]
  000e0	48 8b fb	 mov	 rdi, rbx
  000e3	48 ff c0	 inc	 rax
  000e6	48 89 44 24 58	 mov	 QWORD PTR i$[rsp], rax
  000eb	48 3b c6	 cmp	 rax, rsi
  000ee	0f 8c 5c ff ff
	ff		 jl	 $LL8@partial_re
$LN6@partial_re:

; 185  :     }
; 186  :     /* Pack keyword arguments */
; 187  :     assert (pto->kw == Py_None  ||  PyDict_Check(pto->kw));
; 188  :     if (pto->kw != Py_None) {

  000f4	48 8b 4d 70	 mov	 rcx, QWORD PTR [rbp+112]
  000f8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000ff	48 3b c8	 cmp	 rcx, rax
  00102	0f 84 d3 00 00
	00		 je	 $LN2@partial_re

; 189  :         PyObject *key, *value;
; 190  :         for (i = 0; PyDict_Next(pto->kw, &i, &key, &value);) {

  00108	4c 8d 4c 24 60	 lea	 r9, QWORD PTR value$20436[rsp]
  0010d	4c 8d 44 24 68	 lea	 r8, QWORD PTR key$20435[rsp]
  00112	48 8d 54 24 58	 lea	 rdx, QWORD PTR i$[rsp]
  00117	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00120	e8 00 00 00 00	 call	 PyDict_Next
  00125	85 c0		 test	 eax, eax
  00127	0f 84 ae 00 00
	00		 je	 $LN2@partial_re
  0012d	0f 1f 00	 npad	 3
$LL3@partial_re:

; 191  :             tmp = PyUnicode_FromFormat("%U, %U=%R", arglist,
; 192  :                                        key, value);

  00130	4c 8b 4c 24 60	 mov	 r9, QWORD PTR value$20436[rsp]
  00135	4c 8b 44 24 68	 mov	 r8, QWORD PTR key$20435[rsp]
  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09PPHIFKDO@?$CFU?0?5?$CFU?$DN?$CFR?$AA@
  00141	48 8b d7	 mov	 rdx, rdi
  00144	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00149	48 8b d8	 mov	 rbx, rax

; 193  :             Py_DECREF(arglist);

  0014c	e8 00 00 00 00	 call	 _Py_PXCTX
  00151	85 c0		 test	 eax, eax
  00153	75 5e		 jne	 SHORT $LN33@partial_re
  00155	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00159	f6 c1 20	 test	 cl, 32			; 00000020H
  0015c	75 4d		 jne	 SHORT $LN27@partial_re
  0015e	84 c9		 test	 cl, cl
  00160	78 49		 js	 SHORT $LN27@partial_re
  00162	f6 c1 02	 test	 cl, 2
  00165	75 4c		 jne	 SHORT $LN33@partial_re
  00167	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0016b	75 46		 jne	 SHORT $LN33@partial_re
  0016d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00174	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0017b	4c 8b cf	 mov	 r9, rdi
  0017e	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00184	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0018c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00191	48 8b cf	 mov	 rcx, rdi
  00194	85 c0		 test	 eax, eax
  00196	74 07		 je	 SHORT $LN32@partial_re
  00198	e8 00 00 00 00	 call	 _Px_Dealloc
  0019d	eb 14		 jmp	 SHORT $LN33@partial_re
$LN32@partial_re:
  0019f	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  001a3	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001a9	eb 08		 jmp	 SHORT $LN33@partial_re
$LN27@partial_re:
  001ab	48 8b cf	 mov	 rcx, rdi
  001ae	e8 00 00 00 00	 call	 Px_DecRef
$LN33@partial_re:

; 194  :             if (tmp == NULL)

  001b3	48 85 db	 test	 rbx, rbx
  001b6	74 5d		 je	 SHORT $LN37@partial_re

; 189  :         PyObject *key, *value;
; 190  :         for (i = 0; PyDict_Next(pto->kw, &i, &key, &value);) {

  001b8	48 8b 4d 70	 mov	 rcx, QWORD PTR [rbp+112]
  001bc	4c 8d 4c 24 60	 lea	 r9, QWORD PTR value$20436[rsp]
  001c1	4c 8d 44 24 68	 lea	 r8, QWORD PTR key$20435[rsp]
  001c6	48 8d 54 24 58	 lea	 rdx, QWORD PTR i$[rsp]

; 196  :             arglist = tmp;

  001cb	48 8b fb	 mov	 rdi, rbx
  001ce	e8 00 00 00 00	 call	 PyDict_Next
  001d3	85 c0		 test	 eax, eax
  001d5	0f 85 55 ff ff
	ff		 jne	 $LL3@partial_re
$LN2@partial_re:

; 197  :         }
; 198  :     }
; 199  :     result = PyUnicode_FromFormat("%s(%R%U)", Py_TYPE(pto)->tp_name,
; 200  :                                   pto->fn, arglist);

  001db	48 8b 55 58	 mov	 rdx, QWORD PTR [rbp+88]
  001df	4c 8b 45 60	 mov	 r8, QWORD PTR [rbp+96]
  001e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KDHCOJKH@?$CFs?$CI?$CFR?$CFU?$CJ?$AA@
  001ea	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  001ee	4c 8b cf	 mov	 r9, rdi
  001f1	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 201  :     Py_DECREF(arglist);

  001f6	48 8b cf	 mov	 rcx, rdi
  001f9	48 8b d8	 mov	 rbx, rax
  001fc	e8 00 00 00 00	 call	 _Py_DecRef
  00201	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 202  :     return result;

  00206	48 8b c3	 mov	 rax, rbx
  00209	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 203  : }

  0020e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00212	5f		 pop	 rdi
  00213	5d		 pop	 rbp
  00214	c3		 ret	 0
$LN37@partial_re:
  00215	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0021a	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 195  :                 return NULL;

  0021f	33 c0		 xor	 eax, eax

; 203  : }

  00221	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00225	5f		 pop	 rdi
  00226	5d		 pop	 rbp
  00227	c3		 ret	 0
partial_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@EOFIEIBC@O?$CIO?$CJ?$CIOOOO?$CJ?$AA@	; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$partial_reduce DD imagerel partial_reduce
	DD	imagerel partial_reduce+73
	DD	imagerel $unwind$partial_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$partial_reduce DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0L@EOFIEIBC@O?$CIO?$CJ?$CIOOOO?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@EOFIEIBC@O?$CIO?$CJ?$CIOOOO?$CJ?$AA@ DB 'O(O)(OOOO)', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT partial_reduce
_TEXT	SEGMENT
pto$ = 80
unused$ = 88
partial_reduce PROC					; COMDAT

; 214  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 215  :     return Py_BuildValue("O(O)(OOOO)", Py_TYPE(pto), pto->fn, pto->fn,
; 216  :                          pto->args, pto->kw,
; 217  :                          pto->dict ? pto->dict : Py_None);

  00004	48 8b 41 78	 mov	 rax, QWORD PTR [rcx+120]
  00008	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  00013	48 85 c0	 test	 rax, rax
  00016	4d 8b c8	 mov	 r9, r8
  00019	48 0f 45 d0	 cmovne	 rdx, rax
  0001d	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  00021	48 89 54 24 30	 mov	 QWORD PTR [rsp+48], rdx
  00026	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0002a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002f	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@EOFIEIBC@O?$CIO?$CJ?$CIOOOO?$CJ?$AA@
  0003a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003f	e8 00 00 00 00	 call	 Py_BuildValue

; 218  : }

  00044	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00048	c3		 ret	 0
partial_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_04CMCOBGCG@OOOO?$AA@			; `string'
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$partial_setstate DD imagerel partial_setstate
	DD	imagerel partial_setstate+69
	DD	imagerel $unwind$partial_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$partial_setstate DD imagerel partial_setstate+69
	DD	imagerel partial_setstate+842
	DD	imagerel $chain$1$partial_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$partial_setstate DD imagerel partial_setstate+842
	DD	imagerel partial_setstate+912
	DD	imagerel $chain$2$partial_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$partial_setstate DD 020021H
	DD	0b6400H
	DD	imagerel partial_setstate
	DD	imagerel partial_setstate+69
	DD	imagerel $unwind$partial_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$partial_setstate DD 040e21H
	DD	0b640eH
	DD	0a3405H
	DD	imagerel partial_setstate
	DD	imagerel partial_setstate+69
	DD	imagerel $unwind$partial_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$partial_setstate DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT ??_C@_04CMCOBGCG@OOOO?$AA@
CONST	SEGMENT
??_C@_04CMCOBGCG@OOOO?$AA@ DB 'OOOO', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_functoolsmodule.c
CONST	ENDS
;	COMDAT partial_setstate
_TEXT	SEGMENT
kw$ = 48
dict$ = 56
pto$ = 80
state$ = 88
fn$ = 96
fnargs$ = 104
partial_setstate PROC					; COMDAT

; 222  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b f9	 mov	 rdi, rcx
  00009	48 8b c2	 mov	 rax, rdx

; 223  :     PyObject *fn, *fnargs, *kw, *dict;
; 224  :     if (!PyArg_ParseTuple(state, "OOOO",
; 225  :                           &fn, &fnargs, &kw, &dict))

  0000c	48 8d 4c 24 38	 lea	 rcx, QWORD PTR dict$[rsp]
  00011	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00016	48 8d 4c 24 30	 lea	 rcx, QWORD PTR kw$[rsp]
  0001b	4c 8d 4c 24 68	 lea	 r9, QWORD PTR fnargs$[rsp]
  00020	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00025	4c 8d 44 24 60	 lea	 r8, QWORD PTR fn$[rsp]
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04CMCOBGCG@OOOO?$AA@
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00039	85 c0		 test	 eax, eax
  0003b	75 08		 jne	 SHORT $LN18@partial_se

; 226  :         return NULL;

  0003d	33 c0		 xor	 eax, eax

; 244  : }

  0003f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
$LN18@partial_se:
  00045	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx

; 227  :     Py_XDECREF(pto->fn);

  0004a	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  0004e	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00053	48 85 db	 test	 rbx, rbx
  00056	74 65		 je	 SHORT $LN17@partial_se
  00058	e8 00 00 00 00	 call	 _Py_PXCTX
  0005d	85 c0		 test	 eax, eax
  0005f	75 5c		 jne	 SHORT $LN17@partial_se
  00061	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00065	a8 20		 test	 al, 32			; 00000020H
  00067	75 4c		 jne	 SHORT $LN26@partial_se
  00069	84 c0		 test	 al, al
  0006b	78 48		 js	 SHORT $LN26@partial_se
  0006d	a8 02		 test	 al, 2
  0006f	75 4c		 jne	 SHORT $LN17@partial_se
  00071	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00075	75 46		 jne	 SHORT $LN17@partial_se
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00085	4c 8b cb	 mov	 r9, rbx
  00088	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0008e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00096	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009b	48 8b cb	 mov	 rcx, rbx
  0009e	85 c0		 test	 eax, eax
  000a0	74 07		 je	 SHORT $LN31@partial_se
  000a2	e8 00 00 00 00	 call	 _Px_Dealloc
  000a7	eb 14		 jmp	 SHORT $LN17@partial_se
$LN31@partial_se:
  000a9	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000ad	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000b3	eb 08		 jmp	 SHORT $LN17@partial_se
$LN26@partial_se:
  000b5	48 8b cb	 mov	 rcx, rbx
  000b8	e8 00 00 00 00	 call	 Px_DecRef
$LN17@partial_se:

; 228  :     Py_XDECREF(pto->args);

  000bd	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  000c1	48 85 db	 test	 rbx, rbx
  000c4	74 65		 je	 SHORT $LN13@partial_se
  000c6	e8 00 00 00 00	 call	 _Py_PXCTX
  000cb	85 c0		 test	 eax, eax
  000cd	75 5c		 jne	 SHORT $LN13@partial_se
  000cf	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000d3	a8 20		 test	 al, 32			; 00000020H
  000d5	75 4c		 jne	 SHORT $LN37@partial_se
  000d7	84 c0		 test	 al, al
  000d9	78 48		 js	 SHORT $LN37@partial_se
  000db	a8 02		 test	 al, 2
  000dd	75 4c		 jne	 SHORT $LN13@partial_se
  000df	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000e3	75 46		 jne	 SHORT $LN13@partial_se
  000e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000f3	4c 8b cb	 mov	 r9, rbx
  000f6	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000fc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00104	e8 00 00 00 00	 call	 _PyParallel_Guard
  00109	48 8b cb	 mov	 rcx, rbx
  0010c	85 c0		 test	 eax, eax
  0010e	74 07		 je	 SHORT $LN42@partial_se
  00110	e8 00 00 00 00	 call	 _Px_Dealloc
  00115	eb 14		 jmp	 SHORT $LN13@partial_se
$LN42@partial_se:
  00117	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0011b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00121	eb 08		 jmp	 SHORT $LN13@partial_se
$LN37@partial_se:
  00123	48 8b cb	 mov	 rcx, rbx
  00126	e8 00 00 00 00	 call	 Px_DecRef
$LN13@partial_se:

; 229  :     Py_XDECREF(pto->kw);

  0012b	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  0012f	48 85 db	 test	 rbx, rbx
  00132	74 65		 je	 SHORT $LN9@partial_se
  00134	e8 00 00 00 00	 call	 _Py_PXCTX
  00139	85 c0		 test	 eax, eax
  0013b	75 5c		 jne	 SHORT $LN9@partial_se
  0013d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00141	a8 20		 test	 al, 32			; 00000020H
  00143	75 4c		 jne	 SHORT $LN48@partial_se
  00145	84 c0		 test	 al, al
  00147	78 48		 js	 SHORT $LN48@partial_se
  00149	a8 02		 test	 al, 2
  0014b	75 4c		 jne	 SHORT $LN9@partial_se
  0014d	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00151	75 46		 jne	 SHORT $LN9@partial_se
  00153	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0015a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00161	4c 8b cb	 mov	 r9, rbx
  00164	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0016a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00172	e8 00 00 00 00	 call	 _PyParallel_Guard
  00177	48 8b cb	 mov	 rcx, rbx
  0017a	85 c0		 test	 eax, eax
  0017c	74 07		 je	 SHORT $LN53@partial_se
  0017e	e8 00 00 00 00	 call	 _Px_Dealloc
  00183	eb 14		 jmp	 SHORT $LN9@partial_se
$LN53@partial_se:
  00185	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00189	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0018f	eb 08		 jmp	 SHORT $LN9@partial_se
$LN48@partial_se:
  00191	48 8b cb	 mov	 rcx, rbx
  00194	e8 00 00 00 00	 call	 Px_DecRef
$LN9@partial_se:

; 230  :     Py_XDECREF(pto->dict);

  00199	48 8b 5f 78	 mov	 rbx, QWORD PTR [rdi+120]
  0019d	48 85 db	 test	 rbx, rbx
  001a0	74 65		 je	 SHORT $LN5@partial_se
  001a2	e8 00 00 00 00	 call	 _Py_PXCTX
  001a7	85 c0		 test	 eax, eax
  001a9	75 5c		 jne	 SHORT $LN5@partial_se
  001ab	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001af	a8 20		 test	 al, 32			; 00000020H
  001b1	75 4c		 jne	 SHORT $LN59@partial_se
  001b3	84 c0		 test	 al, al
  001b5	78 48		 js	 SHORT $LN59@partial_se
  001b7	a8 02		 test	 al, 2
  001b9	75 4c		 jne	 SHORT $LN5@partial_se
  001bb	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001bf	75 46		 jne	 SHORT $LN5@partial_se
  001c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001cf	4c 8b cb	 mov	 r9, rbx
  001d2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001d8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001e0	e8 00 00 00 00	 call	 _PyParallel_Guard
  001e5	48 8b cb	 mov	 rcx, rbx
  001e8	85 c0		 test	 eax, eax
  001ea	74 07		 je	 SHORT $LN64@partial_se
  001ec	e8 00 00 00 00	 call	 _Px_Dealloc
  001f1	eb 14		 jmp	 SHORT $LN5@partial_se
$LN64@partial_se:
  001f3	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001f7	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001fd	eb 08		 jmp	 SHORT $LN5@partial_se
$LN59@partial_se:
  001ff	48 8b cb	 mov	 rcx, rbx
  00202	e8 00 00 00 00	 call	 Px_DecRef
$LN5@partial_se:

; 231  :     pto->fn = fn;

  00207	48 8b 44 24 60	 mov	 rax, QWORD PTR fn$[rsp]

; 232  :     pto->args = fnargs;
; 233  :     pto->kw = kw;
; 234  :     if (dict != Py_None) {

  0020c	48 8b 5c 24 38	 mov	 rbx, QWORD PTR dict$[rsp]
  00211	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
  00218	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax
  0021c	48 8b 44 24 68	 mov	 rax, QWORD PTR fnargs$[rsp]
  00221	48 89 47 68	 mov	 QWORD PTR [rdi+104], rax
  00225	48 8b 44 24 30	 mov	 rax, QWORD PTR kw$[rsp]
  0022a	48 89 47 70	 mov	 QWORD PTR [rdi+112], rax
  0022e	48 3b de	 cmp	 rbx, rsi
  00231	74 41		 je	 SHORT $LN2@partial_se

; 235  :       pto->dict = dict;

  00233	48 89 5f 78	 mov	 QWORD PTR [rdi+120], rbx

; 236  :       Py_INCREF(dict);

  00237	e8 00 00 00 00	 call	 _Py_PXCTX
  0023c	85 c0		 test	 eax, eax
  0023e	75 3c		 jne	 SHORT $LN1@partial_se
  00240	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00247	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0024e	4c 8b cb	 mov	 r9, rbx
  00251	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00257	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0025f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00264	85 c0		 test	 eax, eax
  00266	75 06		 jne	 SHORT $LN66@partial_se
  00268	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0026c	74 0e		 je	 SHORT $LN1@partial_se
$LN66@partial_se:
  0026e	48 ff 43 50	 inc	 QWORD PTR [rbx+80]

; 237  :     } else {

  00272	eb 08		 jmp	 SHORT $LN1@partial_se
$LN2@partial_se:

; 238  :       pto->dict = NULL;

  00274	48 c7 47 78 00
	00 00 00	 mov	 QWORD PTR [rdi+120], 0
$LN1@partial_se:

; 239  :     }
; 240  :     Py_INCREF(fn);

  0027c	48 8b 5c 24 60	 mov	 rbx, QWORD PTR fn$[rsp]
  00281	e8 00 00 00 00	 call	 _Py_PXCTX
  00286	85 c0		 test	 eax, eax
  00288	75 32		 jne	 SHORT $LN71@partial_se
  0028a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00298	4c 8b cb	 mov	 r9, rbx
  0029b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  002a1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  002a9	e8 00 00 00 00	 call	 _PyParallel_Guard
  002ae	85 c0		 test	 eax, eax
  002b0	75 06		 jne	 SHORT $LN70@partial_se
  002b2	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  002b6	74 04		 je	 SHORT $LN71@partial_se
$LN70@partial_se:
  002b8	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN71@partial_se:

; 241  :     Py_INCREF(fnargs);

  002bc	48 8b 5c 24 68	 mov	 rbx, QWORD PTR fnargs$[rsp]
  002c1	e8 00 00 00 00	 call	 _Py_PXCTX
  002c6	85 c0		 test	 eax, eax
  002c8	75 32		 jne	 SHORT $LN75@partial_se
  002ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  002d8	4c 8b cb	 mov	 r9, rbx
  002db	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  002e1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  002e9	e8 00 00 00 00	 call	 _PyParallel_Guard
  002ee	85 c0		 test	 eax, eax
  002f0	75 06		 jne	 SHORT $LN74@partial_se
  002f2	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  002f6	74 04		 je	 SHORT $LN75@partial_se
$LN74@partial_se:
  002f8	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN75@partial_se:

; 242  :     Py_INCREF(kw);

  002fc	48 8b 5c 24 30	 mov	 rbx, QWORD PTR kw$[rsp]
  00301	e8 00 00 00 00	 call	 _Py_PXCTX
  00306	85 c0		 test	 eax, eax
  00308	75 32		 jne	 SHORT $LN79@partial_se
  0030a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00311	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00318	4c 8b cb	 mov	 r9, rbx
  0031b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00321	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00329	e8 00 00 00 00	 call	 _PyParallel_Guard
  0032e	85 c0		 test	 eax, eax
  00330	75 06		 jne	 SHORT $LN78@partial_se
  00332	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00336	74 04		 je	 SHORT $LN79@partial_se
$LN78@partial_se:
  00338	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN79@partial_se:

; 243  :     Py_RETURN_NONE;

  0033c	e8 00 00 00 00	 call	 _Py_PXCTX
  00341	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00346	85 c0		 test	 eax, eax
  00348	75 38		 jne	 SHORT $LN83@partial_se
  0034a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00358	4c 8b ce	 mov	 r9, rsi
  0035b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00361	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00369	e8 00 00 00 00	 call	 _PyParallel_Guard
  0036e	85 c0		 test	 eax, eax
  00370	75 09		 jne	 SHORT $LN82@partial_se
  00372	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00379	74 07		 je	 SHORT $LN83@partial_se
$LN82@partial_se:
  0037b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN83@partial_se:
  00382	48 8b c6	 mov	 rax, rsi
  00385	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]

; 244  : }

  0038a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0038e	5f		 pop	 rdi
  0038f	c3		 ret	 0
partial_setstate ENDP
_TEXT	ENDS
EXTRN	PyObject_Free:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$keyobject_dealloc DD imagerel keyobject_dealloc
	DD	imagerel keyobject_dealloc+186
	DD	imagerel $unwind$keyobject_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$keyobject_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_functoolsmodule.c
xdata	ENDS
;	COMDAT keyobject_dealloc
_TEXT	SEGMENT
ko$ = 64
keyobject_dealloc PROC					; COMDAT

; 307  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 308  :     Py_DECREF(ko->cmp);

  0000d	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00011	e8 00 00 00 00	 call	 _Py_DecRef

; 309  :     Py_XDECREF(ko->object);

  00016	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  0001a	48 85 db	 test	 rbx, rbx
  0001d	0f 84 85 00 00
	00		 je	 $LN3@keyobject_
  00023	e8 00 00 00 00	 call	 _Py_PXCTX
  00028	85 c0		 test	 eax, eax
  0002a	75 7c		 jne	 SHORT $LN3@keyobject_
  0002c	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00030	a8 20		 test	 al, 32			; 00000020H
  00032	75 6c		 jne	 SHORT $LN11@keyobject_
  00034	84 c0		 test	 al, al
  00036	78 68		 js	 SHORT $LN11@keyobject_
  00038	a8 02		 test	 al, 2
  0003a	75 6c		 jne	 SHORT $LN3@keyobject_
  0003c	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00040	75 66		 jne	 SHORT $LN3@keyobject_
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00050	4c 8b cb	 mov	 r9, rbx
  00053	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00059	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00061	e8 00 00 00 00	 call	 _PyParallel_Guard
  00066	48 8b cb	 mov	 rcx, rbx
  00069	85 c0		 test	 eax, eax
  0006b	74 17		 je	 SHORT $LN16@keyobject_
  0006d	e8 00 00 00 00	 call	 _Px_Dealloc

; 310  :     PyObject_FREE(ko);

  00072	48 8b cf	 mov	 rcx, rdi

; 311  : }

  00075	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0007a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007e	5f		 pop	 rdi
  0007f	e9 00 00 00 00	 jmp	 PyObject_Free

; 309  :     Py_XDECREF(ko->object);

$LN16@keyobject_:
  00084	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00088	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 310  :     PyObject_FREE(ko);

  0008e	48 8b cf	 mov	 rcx, rdi

; 311  : }

  00091	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00096	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009a	5f		 pop	 rdi
  0009b	e9 00 00 00 00	 jmp	 PyObject_Free

; 309  :     Py_XDECREF(ko->object);

$LN11@keyobject_:
  000a0	48 8b cb	 mov	 rcx, rbx
  000a3	e8 00 00 00 00	 call	 Px_DecRef
$LN3@keyobject_:

; 310  :     PyObject_FREE(ko);

  000a8	48 8b cf	 mov	 rcx, rdi

; 311  : }

  000ab	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b4	5f		 pop	 rdi
  000b5	e9 00 00 00 00	 jmp	 PyObject_Free
keyobject_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@MGOLMAJN@keyobject_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$keyobject_traverse DD imagerel keyobject_traverse
	DD	imagerel keyobject_traverse+159
	DD	imagerel $unwind$keyobject_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$keyobject_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BD@MGOLMAJN@keyobject_traverse?$AA@
CONST	SEGMENT
??_C@_0BD@MGOLMAJN@keyobject_traverse?$AA@ DB 'keyobject_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT keyobject_traverse
_TEXT	SEGMENT
ko$ = 48
visit$ = 56
arg$ = 64
keyobject_traverse PROC					; COMDAT

; 315  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 316  :     Py_VISIT(ko->cmp);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN10@keyobject_@2
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@MGOLMAJN@keyobject_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 3c 01 00
	00		 mov	 r8d, 316		; 0000013cH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN10@keyobject_@2:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN12@keyobject_@2
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 40		 jne	 SHORT $LN14@keyobject_@2
$LN12@keyobject_@2:

; 317  :     if (ko->object)

  0004f	48 83 7b 68 00	 cmp	 QWORD PTR [rbx+104], 0
  00054	74 37		 je	 SHORT $LN4@keyobject_@2

; 318  :         Py_VISIT(ko->object);

  00056	e8 00 00 00 00	 call	 _Py_PXCTX
  0005b	85 c0		 test	 eax, eax
  0005d	74 1c		 je	 SHORT $LN3@keyobject_@2
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@MGOLMAJN@keyobject_traverse?$AA@
  0006d	45 33 c9	 xor	 r9d, r9d
  00070	41 b8 3e 01 00
	00		 mov	 r8d, 318		; 0000013eH
  00076	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@keyobject_@2:
  0007b	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  0007f	48 85 c9	 test	 rcx, rcx
  00082	74 09		 je	 SHORT $LN4@keyobject_@2
  00084	48 8b d7	 mov	 rdx, rdi
  00087	ff d6		 call	 rsi
  00089	85 c0		 test	 eax, eax
  0008b	75 02		 jne	 SHORT $LN14@keyobject_@2
$LN4@keyobject_@2:

; 319  :     return 0;

  0008d	33 c0		 xor	 eax, eax
$LN14@keyobject_@2:

; 320  : }

  0008f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00094	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00099	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009d	5f		 pop	 rdi
  0009e	c3		 ret	 0
keyobject_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@DPCOLIDG@keyobject_clear?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$keyobject_clear DD imagerel keyobject_clear
	DD	imagerel keyobject_clear+59
	DD	imagerel $unwind$keyobject_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$keyobject_clear DD imagerel keyobject_clear+59
	DD	imagerel keyobject_clear+182
	DD	imagerel $chain$0$keyobject_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$keyobject_clear DD imagerel keyobject_clear+182
	DD	imagerel keyobject_clear+253
	DD	imagerel $chain$1$keyobject_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$keyobject_clear DD 021H
	DD	imagerel keyobject_clear
	DD	imagerel keyobject_clear+59
	DD	imagerel $unwind$keyobject_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$keyobject_clear DD 020521H
	DD	083405H
	DD	imagerel keyobject_clear
	DD	imagerel keyobject_clear+59
	DD	imagerel $unwind$keyobject_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$keyobject_clear DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0BA@DPCOLIDG@keyobject_clear?$AA@
CONST	SEGMENT
??_C@_0BA@DPCOLIDG@keyobject_clear?$AA@ DB 'keyobject_clear', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_functoolsmodule.c
CONST	ENDS
;	COMDAT keyobject_clear
_TEXT	SEGMENT
ko$ = 64
keyobject_clear PROC					; COMDAT

; 324  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 325  :     Py_CLEAR(ko->cmp);

  00006	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	4d 85 c9	 test	 r9, r9
  00010	0f 84 a0 00 00
	00		 je	 $LN8@keyobject_@3
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@DPCOLIDG@keyobject_clear?$AA@
  00024	41 b8 45 01 00
	00		 mov	 r8d, 325		; 00000145H
  0002a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00032	e8 00 00 00 00	 call	 _PyParallel_Guard
  00037	85 c0		 test	 eax, eax
  00039	75 7b		 jne	 SHORT $LN8@keyobject_@3
  0003b	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00040	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00044	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0
  0004c	e8 00 00 00 00	 call	 _Py_PXCTX
  00051	85 c0		 test	 eax, eax
  00053	75 5c		 jne	 SHORT $LN24@keyobject_@3
  00055	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00059	a8 20		 test	 al, 32			; 00000020H
  0005b	75 4c		 jne	 SHORT $LN16@keyobject_@3
  0005d	84 c0		 test	 al, al
  0005f	78 48		 js	 SHORT $LN16@keyobject_@3
  00061	a8 02		 test	 al, 2
  00063	75 4c		 jne	 SHORT $LN24@keyobject_@3
  00065	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00069	75 46		 jne	 SHORT $LN24@keyobject_@3
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00079	4c 8b cb	 mov	 r9, rbx
  0007c	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00082	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008f	48 8b cb	 mov	 rcx, rbx
  00092	85 c0		 test	 eax, eax
  00094	74 07		 je	 SHORT $LN21@keyobject_@3
  00096	e8 00 00 00 00	 call	 _Px_Dealloc
  0009b	eb 14		 jmp	 SHORT $LN24@keyobject_@3
$LN21@keyobject_@3:
  0009d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a1	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000a7	eb 08		 jmp	 SHORT $LN24@keyobject_@3
$LN16@keyobject_@3:
  000a9	48 8b cb	 mov	 rcx, rbx
  000ac	e8 00 00 00 00	 call	 Px_DecRef
$LN24@keyobject_@3:
  000b1	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN8@keyobject_@3:

; 326  :     if (ko->object)

  000b6	4c 8b 4f 68	 mov	 r9, QWORD PTR [rdi+104]
  000ba	4d 85 c9	 test	 r9, r9
  000bd	74 36		 je	 SHORT $LN23@keyobject_@3

; 327  :         Py_CLEAR(ko->object);

  000bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@DPCOLIDG@keyobject_clear?$AA@
  000cd	41 b8 47 01 00
	00		 mov	 r8d, 327		; 00000147H
  000d3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000db	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e0	85 c0		 test	 eax, eax
  000e2	75 11		 jne	 SHORT $LN23@keyobject_@3
  000e4	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  000e8	48 c7 47 68 00
	00 00 00	 mov	 QWORD PTR [rdi+104], 0
  000f0	e8 00 00 00 00	 call	 _Py_DecRef
$LN23@keyobject_@3:

; 328  :     return 0;

  000f5	33 c0		 xor	 eax, eax

; 329  : }

  000f7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fb	5f		 pop	 rdi
  000fc	c3		 ret	 0
keyobject_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_03CHLNJOAA@O?3K?$AA@			; `string'
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$keyobject_call DD imagerel keyobject_call
	DD	imagerel keyobject_call+62
	DD	imagerel $unwind$keyobject_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$keyobject_call DD imagerel keyobject_call+62
	DD	imagerel keyobject_call+114
	DD	imagerel $chain$0$keyobject_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$keyobject_call DD imagerel keyobject_call+114
	DD	imagerel keyobject_call+282
	DD	imagerel $chain$3$keyobject_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$keyobject_call DD 040521H
	DD	097405H
	DD	083400H
	DD	imagerel keyobject_call
	DD	imagerel keyobject_call+62
	DD	imagerel $unwind$keyobject_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$keyobject_call DD 020521H
	DD	083405H
	DD	imagerel keyobject_call
	DD	imagerel keyobject_call+62
	DD	imagerel $unwind$keyobject_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$keyobject_call DD 020601H
	DD	060025206H
xdata	ENDS
;	COMDAT ??_C@_03CHLNJOAA@O?3K?$AA@
CONST	SEGMENT
??_C@_03CHLNJOAA@O?3K?$AA@ DB 'O:K', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_functoolsmodule.c
CONST	ENDS
;	COMDAT keyobject_call
_TEXT	SEGMENT
ko$ = 64
args$ = 72
kwds$ = 80
object$ = 88
keyobject_call PROC					; COMDAT

; 380  : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f1	 mov	 rsi, rcx
  00009	49 8b c0	 mov	 rax, r8
  0000c	4c 8b d2	 mov	 r10, rdx

; 381  :     PyObject *object;
; 382  :     keyobject *result;
; 383  :     static char *kwargs[] = {"obj", NULL};
; 384  : 
; 385  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:K", kwargs, &object))

  0000f	48 8d 4c 24 58	 lea	 rcx, QWORD PTR object$[rsp]
  00014	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwargs@?1??keyobject_call@@9@9
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03CHLNJOAA@O?3K?$AA@
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	49 8b ca	 mov	 rcx, r10
  0002a	48 8b d0	 mov	 rdx, rax
  0002d	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00032	85 c0		 test	 eax, eax
  00034	75 08		 jne	 SHORT $LN2@keyobject_@4

; 386  :         return NULL;

  00036	33 c0		 xor	 eax, eax

; 395  : }

  00038	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003c	5e		 pop	 rsi
  0003d	c3		 ret	 0
$LN2@keyobject_@4:
  0003e	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 387  :     result = PyObject_New(keyobject, &keyobject_type);

  00043	e8 00 00 00 00	 call	 _Py_PXCTX
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:keyobject_type
  0004f	85 c0		 test	 eax, eax
  00051	74 07		 je	 SHORT $LN5@keyobject_@4
  00053	e8 00 00 00 00	 call	 _PxObject_New
  00058	eb 05		 jmp	 SHORT $LN16@keyobject_@4
$LN5@keyobject_@4:
  0005a	e8 00 00 00 00	 call	 _PyObject_New
$LN16@keyobject_@4:
  0005f	48 8b d8	 mov	 rbx, rax

; 388  :     if (!result)

  00062	48 85 c0	 test	 rax, rax
  00065	75 0b		 jne	 SHORT $LN1@keyobject_@4
  00067	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 395  : }

  0006c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00070	5e		 pop	 rsi
  00071	c3		 ret	 0
$LN1@keyobject_@4:
  00072	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi

; 389  :         return NULL;
; 390  :     Py_INCREF(ko->cmp);

  00077	48 8b 7e 60	 mov	 rdi, QWORD PTR [rsi+96]
  0007b	e8 00 00 00 00	 call	 _Py_PXCTX
  00080	85 c0		 test	 eax, eax
  00082	75 32		 jne	 SHORT $LN8@keyobject_@4
  00084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00092	4c 8b cf	 mov	 r9, rdi
  00095	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0009b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a8	85 c0		 test	 eax, eax
  000aa	75 06		 jne	 SHORT $LN7@keyobject_@4
  000ac	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000b0	74 04		 je	 SHORT $LN8@keyobject_@4
$LN7@keyobject_@4:
  000b2	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN8@keyobject_@4:

; 391  :     result->cmp = ko->cmp;

  000b6	48 8b 46 60	 mov	 rax, QWORD PTR [rsi+96]
  000ba	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 392  :     Py_INCREF(object);

  000be	48 8b 7c 24 58	 mov	 rdi, QWORD PTR object$[rsp]
  000c3	e8 00 00 00 00	 call	 _Py_PXCTX
  000c8	85 c0		 test	 eax, eax
  000ca	75 32		 jne	 SHORT $LN12@keyobject_@4
  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000da	4c 8b cf	 mov	 r9, rdi
  000dd	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000e3	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000eb	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f0	85 c0		 test	 eax, eax
  000f2	75 06		 jne	 SHORT $LN11@keyobject_@4
  000f4	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000f8	74 04		 je	 SHORT $LN12@keyobject_@4
$LN11@keyobject_@4:
  000fa	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN12@keyobject_@4:

; 393  :     result->object = object;

  000fe	48 8b 44 24 58	 mov	 rax, QWORD PTR object$[rsp]
  00103	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00108	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 394  :     return (PyObject *)result;

  0010c	48 8b c3	 mov	 rax, rbx
  0010f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 395  : }

  00114	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00118	5e		 pop	 rsi
  00119	c3		 ret	 0
keyobject_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_06IEOJBDIK@object?$AA@			; `string'
PUBLIC	??_C@_0CC@KMPGJAKF@other?5argument?5must?5be?5K?5instanc@ ; `string'
EXTRN	PyExc_AttributeError:QWORD
EXTRN	PyObject_RichCompare:PROC
EXTRN	PyTuple_New:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyLong_FromLong:PROC
_BSS	SEGMENT
?zero@?1??keyobject_richcompare@@9@9 DQ 01H DUP (?)	; `keyobject_richcompare'::`2'::zero
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$keyobject_richcompare DD imagerel keyobject_richcompare
	DD	imagerel keyobject_richcompare+288
	DD	imagerel $unwind$keyobject_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$keyobject_richcompare DD 0a7901H
	DD	07c479H
	DD	066470H
	DD	09540fH
	DD	08340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_06IEOJBDIK@object?$AA@
CONST	SEGMENT
??_C@_06IEOJBDIK@object?$AA@ DB 'object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KMPGJAKF@other?5argument?5must?5be?5K?5instanc@
CONST	SEGMENT
??_C@_0CC@KMPGJAKF@other?5argument?5must?5be?5K?5instanc@ DB 'other argum'
	DB	'ent must be K instance', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT keyobject_richcompare
_TEXT	SEGMENT
ko$ = 48
other$ = 56
op$ = 64
keyobject_richcompare PROC				; COMDAT

; 399  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 400  :     PyObject *res;
; 401  :     PyObject *args;
; 402  :     PyObject *x;
; 403  :     PyObject *y;
; 404  :     PyObject *compare;
; 405  :     PyObject *answer;
; 406  :     static PyObject *zero;
; 407  : 
; 408  :     if (zero == NULL) {

  0000f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?zero@?1??keyobject_richcompare@@9@9, 0
  00017	41 8b e8	 mov	 ebp, r8d
  0001a	48 8b da	 mov	 rbx, rdx
  0001d	48 8b f9	 mov	 rdi, rcx
  00020	75 13		 jne	 SHORT $LN6@keyobject_@5

; 409  :         zero = PyLong_FromLong(0);

  00022	33 c9		 xor	 ecx, ecx
  00024	e8 00 00 00 00	 call	 PyLong_FromLong
  00029	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?zero@?1??keyobject_richcompare@@9@9, rax

; 410  :         if (!zero)

  00030	48 85 c0	 test	 rax, rax

; 411  :             return NULL;

  00033	74 20		 je	 SHORT $LN13@keyobject_@5
$LN6@keyobject_@5:

; 412  :     }
; 413  : 
; 414  :     if (Py_TYPE(other) != &keyobject_type){

  00035	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:keyobject_type
  0003c	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  00040	74 25		 je	 SHORT $LN5@keyobject_@5

; 415  :         PyErr_Format(PyExc_TypeError, "other argument must be K instance");

  00042	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@KMPGJAKF@other?5argument?5must?5be?5K?5instanc@
  00050	e8 00 00 00 00	 call	 PyErr_Format
$LN13@keyobject_@5:

; 416  :         return NULL;

  00055	33 c0		 xor	 eax, eax

; 444  : }

  00057	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0005c	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00061	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00065	5f		 pop	 rdi
  00066	c3		 ret	 0
$LN5@keyobject_@5:

; 417  :     }
; 418  :     compare = ((keyobject *) ko)->cmp;
; 419  :     assert(compare != NULL);
; 420  :     x = ((keyobject *) ko)->object;
; 421  :     y = ((keyobject *) other)->object;

  00067	48 8b 5b 68	 mov	 rbx, QWORD PTR [rbx+104]
  0006b	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00070	48 8b 77 68	 mov	 rsi, QWORD PTR [rdi+104]
  00074	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12
  00079	4c 8b 67 60	 mov	 r12, QWORD PTR [rdi+96]

; 422  :     if (!x || !y){

  0007d	48 85 f6	 test	 rsi, rsi
  00080	74 6f		 je	 SHORT $LN3@keyobject_@5
  00082	48 85 db	 test	 rbx, rbx
  00085	74 6a		 je	 SHORT $LN3@keyobject_@5

; 425  :     }
; 426  : 
; 427  :     /* Call the user's comparison function and translate the 3-way
; 428  :      * result into true or false (or error).
; 429  :      */
; 430  :     args = PyTuple_New(2);

  00087	b9 02 00 00 00	 mov	 ecx, 2
  0008c	e8 00 00 00 00	 call	 PyTuple_New
  00091	48 8b f8	 mov	 rdi, rax

; 431  :     if (args == NULL)

  00094	48 85 c0	 test	 rax, rax

; 432  :         return NULL;

  00097	74 6b		 je	 SHORT $LN12@keyobject_@5

; 433  :     Py_INCREF(x);

  00099	48 8b ce	 mov	 rcx, rsi
  0009c	e8 00 00 00 00	 call	 _Py_IncRef

; 434  :     Py_INCREF(y);

  000a1	48 8b cb	 mov	 rcx, rbx
  000a4	e8 00 00 00 00	 call	 _Py_IncRef

; 435  :     PyTuple_SET_ITEM(args, 0, x);
; 436  :     PyTuple_SET_ITEM(args, 1, y);
; 437  :     res = PyObject_Call(compare, args, NULL);

  000a9	45 33 c0	 xor	 r8d, r8d
  000ac	48 8b d7	 mov	 rdx, rdi
  000af	49 8b cc	 mov	 rcx, r12
  000b2	48 89 77 70	 mov	 QWORD PTR [rdi+112], rsi
  000b6	48 89 5f 78	 mov	 QWORD PTR [rdi+120], rbx
  000ba	e8 00 00 00 00	 call	 PyObject_Call

; 438  :     Py_DECREF(args);

  000bf	48 8b cf	 mov	 rcx, rdi
  000c2	48 8b f0	 mov	 rsi, rax
  000c5	e8 00 00 00 00	 call	 _Py_DecRef

; 439  :     if (res == NULL)

  000ca	48 85 f6	 test	 rsi, rsi

; 440  :         return NULL;

  000cd	74 35		 je	 SHORT $LN12@keyobject_@5

; 441  :     answer = PyObject_RichCompare(res, zero, op);

  000cf	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?zero@?1??keyobject_richcompare@@9@9
  000d6	44 8b c5	 mov	 r8d, ebp
  000d9	48 8b ce	 mov	 rcx, rsi
  000dc	e8 00 00 00 00	 call	 PyObject_RichCompare

; 442  :     Py_DECREF(res);

  000e1	48 8b ce	 mov	 rcx, rsi
  000e4	48 8b d8	 mov	 rbx, rax
  000e7	e8 00 00 00 00	 call	 _Py_DecRef

; 443  :     return answer;

  000ec	48 8b c3	 mov	 rax, rbx
  000ef	eb 15		 jmp	 SHORT $LN11@keyobject_@5
$LN3@keyobject_@5:

; 423  :         PyErr_Format(PyExc_AttributeError, "object");

  000f1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  000f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IEOJBDIK@object?$AA@
  000ff	e8 00 00 00 00	 call	 PyErr_Format
$LN12@keyobject_@5:

; 424  :         return NULL;

  00104	33 c0		 xor	 eax, eax
$LN11@keyobject_@5:
  00106	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  0010b	4c 8b 64 24 38	 mov	 r12, QWORD PTR [rsp+56]

; 444  : }

  00110	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00115	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0011a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0011e	5f		 pop	 rdi
  0011f	c3		 ret	 0
keyobject_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@COCNEBL@O?3cmp_to_key?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$functools_cmp_to_key DD imagerel functools_cmp_to_key
	DD	imagerel functools_cmp_to_key+56
	DD	imagerel $unwind$functools_cmp_to_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$functools_cmp_to_key DD imagerel functools_cmp_to_key+56
	DD	imagerel functools_cmp_to_key+107
	DD	imagerel $chain$0$functools_cmp_to_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$functools_cmp_to_key DD imagerel functools_cmp_to_key+107
	DD	imagerel functools_cmp_to_key+211
	DD	imagerel $chain$3$functools_cmp_to_key
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$functools_cmp_to_key DD 040521H
	DD	067405H
	DD	083400H
	DD	imagerel functools_cmp_to_key
	DD	imagerel functools_cmp_to_key+56
	DD	imagerel $unwind$functools_cmp_to_key
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$functools_cmp_to_key DD 020521H
	DD	083405H
	DD	imagerel functools_cmp_to_key
	DD	imagerel functools_cmp_to_key+56
	DD	imagerel $unwind$functools_cmp_to_key
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$functools_cmp_to_key DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0N@COCNEBL@O?3cmp_to_key?$AA@
CONST	SEGMENT
??_C@_0N@COCNEBL@O?3cmp_to_key?$AA@ DB 'O:cmp_to_key', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_functoolsmodule.c
CONST	ENDS
;	COMDAT functools_cmp_to_key
_TEXT	SEGMENT
self$ = 64
args$ = 72
kwds$ = 80
cmp$ = 88
functools_cmp_to_key PROC				; COMDAT

; 448  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	49 8b c0	 mov	 rax, r8
  00007	4c 8b d2	 mov	 r10, rdx

; 449  :     PyObject *cmp;
; 450  :     static char *kwargs[] = {"mycmp", NULL};
; 451  :     keyobject *object;
; 452  : 
; 453  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:cmp_to_key", kwargs, &cmp))

  0000a	48 8d 4c 24 58	 lea	 rcx, QWORD PTR cmp$[rsp]
  0000f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00014	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwargs@?1??functools_cmp_to_key@@9@9
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@COCNEBL@O?3cmp_to_key?$AA@
  00022	49 8b ca	 mov	 rcx, r10
  00025	48 8b d0	 mov	 rdx, rax
  00028	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0002d	85 c0		 test	 eax, eax
  0002f	75 07		 jne	 SHORT $LN2@functools_

; 454  :         return NULL;

  00031	33 c0		 xor	 eax, eax

; 462  : }

  00033	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00037	c3		 ret	 0
$LN2@functools_:
  00038	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 455  :     object = PyObject_New(keyobject, &keyobject_type);

  0003d	e8 00 00 00 00	 call	 _Py_PXCTX
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:keyobject_type
  00049	85 c0		 test	 eax, eax
  0004b	74 07		 je	 SHORT $LN5@functools_
  0004d	e8 00 00 00 00	 call	 _PxObject_New
  00052	eb 05		 jmp	 SHORT $LN12@functools_
$LN5@functools_:
  00054	e8 00 00 00 00	 call	 _PyObject_New
$LN12@functools_:
  00059	48 8b d8	 mov	 rbx, rax

; 456  :     if (!object)

  0005c	48 85 c0	 test	 rax, rax
  0005f	75 0a		 jne	 SHORT $LN1@functools_
  00061	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 462  : }

  00066	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006a	c3		 ret	 0
$LN1@functools_:
  0006b	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi

; 457  :         return NULL;
; 458  :     Py_INCREF(cmp);

  00070	48 8b 7c 24 58	 mov	 rdi, QWORD PTR cmp$[rsp]
  00075	e8 00 00 00 00	 call	 _Py_PXCTX
  0007a	85 c0		 test	 eax, eax
  0007c	75 32		 jne	 SHORT $LN8@functools_
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0008c	4c 8b cf	 mov	 r9, rdi
  0008f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00095	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0009d	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a2	85 c0		 test	 eax, eax
  000a4	75 06		 jne	 SHORT $LN7@functools_
  000a6	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000aa	74 04		 je	 SHORT $LN8@functools_
$LN7@functools_:
  000ac	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN8@functools_:

; 459  :     object->cmp = cmp;

  000b0	48 8b 44 24 58	 mov	 rax, QWORD PTR cmp$[rsp]
  000b5	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 460  :     object->object = NULL;

  000ba	48 c7 43 68 00
	00 00 00	 mov	 QWORD PTR [rbx+104], 0
  000c2	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 461  :     return (PyObject *)object;

  000c6	48 8b c3	 mov	 rax, rbx
  000c9	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 462  : }

  000ce	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d2	c3		 ret	 0
functools_cmp_to_key ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@PFCNGPHO@reduce?$CI?$CJ?5of?5empty?5sequence?5with?5@ ; `string'
PUBLIC	??_C@_0CG@LHIMEKHE@reduce?$CI?$CJ?5arg?52?5must?5support?5iter@ ; `string'
EXTRN	PyErr_Occurred:PROC
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	PyTuple_SetItem:PROC
EXTRN	PyIter_Next:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyObject_GetIter:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$functools_reduce DD imagerel functools_reduce
	DD	imagerel functools_reduce+78
	DD	imagerel $unwind$functools_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$functools_reduce DD imagerel functools_reduce+78
	DD	imagerel functools_reduce+242
	DD	imagerel $chain$1$functools_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$functools_reduce DD imagerel functools_reduce+242
	DD	imagerel functools_reduce+474
	DD	imagerel $chain$4$functools_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$functools_reduce DD imagerel functools_reduce+474
	DD	imagerel functools_reduce+540
	DD	imagerel $chain$6$functools_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$functools_reduce DD 060021H
	DD	0a7400H
	DD	0d6400H
	DD	0c3400H
	DD	imagerel functools_reduce
	DD	imagerel functools_reduce+78
	DD	imagerel $unwind$functools_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$functools_reduce DD 060a21H
	DD	0a740aH
	DD	0d6400H
	DD	0c3400H
	DD	imagerel functools_reduce
	DD	imagerel functools_reduce+78
	DD	imagerel $unwind$functools_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$functools_reduce DD 040f21H
	DD	0d640fH
	DD	0c3405H
	DD	imagerel functools_reduce
	DD	imagerel functools_reduce+78
	DD	imagerel $unwind$functools_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$functools_reduce DD 010701H
	DD	0a207H
xdata	ENDS
;	COMDAT ??_C@_0DB@PFCNGPHO@reduce?$CI?$CJ?5of?5empty?5sequence?5with?5@
CONST	SEGMENT
??_C@_0DB@PFCNGPHO@reduce?$CI?$CJ?5of?5empty?5sequence?5with?5@ DB 'reduc'
	DB	'e() of empty sequence with no initial value', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LHIMEKHE@reduce?$CI?$CJ?5arg?52?5must?5support?5iter@
CONST	SEGMENT
??_C@_0CG@LHIMEKHE@reduce?$CI?$CJ?5arg?52?5must?5support?5iter@ DB 'reduc'
	DB	'e() arg 2 must support iteration', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_functoolsmodule.c
CONST	ENDS
;	COMDAT functools_reduce
_TEXT	SEGMENT
func$ = 64
self$ = 96
args$ = 104
result$ = 112
seq$ = 120
functools_reduce PROC					; COMDAT

; 471  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 472  :     PyObject *seq, *func, *result = NULL, *it;
; 473  : 
; 474  :     if (!PyArg_UnpackTuple(args, "reduce", 2, 3, &func, &seq, &result))

  00007	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0000b	48 8b c2	 mov	 rax, rdx
  0000e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00014	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00018	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06CDBFBENC@reduce?$AA@
  00023	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00027	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  0002b	45 8d 41 ff	 lea	 r8d, QWORD PTR [r9-1]
  0002f	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  00033	48 8b c8	 mov	 rcx, rax
  00036	49 c7 43 18 00
	00 00 00	 mov	 QWORD PTR [r11+24], 0
  0003e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00043	85 c0		 test	 eax, eax
  00045	75 07		 jne	 SHORT $LN27@functools_@2

; 475  :         return NULL;

  00047	33 c0		 xor	 eax, eax

; 531  : }

  00049	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0004d	c3		 ret	 0
$LN27@functools_@2:
  0004e	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx

; 476  :     if (result != NULL)

  00053	48 8b 5c 24 70	 mov	 rbx, QWORD PTR result$[rsp]
  00058	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi
  0005d	48 85 db	 test	 rbx, rbx
  00060	74 3b		 je	 SHORT $LN31@functools_@2

; 477  :         Py_INCREF(result);

  00062	e8 00 00 00 00	 call	 _Py_PXCTX
  00067	85 c0		 test	 eax, eax
  00069	75 32		 jne	 SHORT $LN31@functools_@2
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00079	4c 8b cb	 mov	 r9, rbx
  0007c	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00082	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0008a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008f	85 c0		 test	 eax, eax
  00091	75 06		 jne	 SHORT $LN30@functools_@2
  00093	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00097	74 04		 je	 SHORT $LN31@functools_@2
$LN30@functools_@2:
  00099	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN31@functools_@2:

; 478  : 
; 479  :     it = PyObject_GetIter(seq);

  0009d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR seq$[rsp]
  000a2	e8 00 00 00 00	 call	 PyObject_GetIter
  000a7	48 8b f0	 mov	 rsi, rax

; 480  :     if (it == NULL) {

  000aa	48 85 c0	 test	 rax, rax
  000ad	75 43		 jne	 SHORT $LN25@functools_@2

; 481  :         if (PyErr_ExceptionMatches(PyExc_TypeError))

  000af	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000b6	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000bb	85 c0		 test	 eax, eax
  000bd	74 13		 je	 SHORT $LN23@functools_@2

; 482  :             PyErr_SetString(PyExc_TypeError,
; 483  :                             "reduce() arg 2 must support iteration");

  000bf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@LHIMEKHE@reduce?$CI?$CJ?5arg?52?5must?5support?5iter@
  000cd	e8 00 00 00 00	 call	 PyErr_SetString
$LN23@functools_@2:

; 484  :         Py_XDECREF(result);

  000d2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR result$[rsp]
  000d7	48 85 c9	 test	 rcx, rcx
  000da	74 05		 je	 SHORT $LN22@functools_@2
  000dc	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@functools_@2:
  000e1	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  000e6	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]

; 485  :         return NULL;

  000eb	33 c0		 xor	 eax, eax

; 531  : }

  000ed	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f1	c3		 ret	 0
$LN25@functools_@2:

; 486  :     }
; 487  : 
; 488  :     if ((args = PyTuple_New(2)) == NULL)

  000f2	b9 02 00 00 00	 mov	 ecx, 2
  000f7	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  000fc	e8 00 00 00 00	 call	 PyTuple_New
  00101	48 8b d8	 mov	 rbx, rax
  00104	48 85 c0	 test	 rax, rax
  00107	0f 84 df 00 00
	00		 je	 $LN40@functools_@2
  0010d	0f 1f 00	 npad	 3
$LL18@functools_@2:

; 489  :         goto Fail;
; 490  : 
; 491  :     for (;;) {
; 492  :         PyObject *op2;
; 493  : 
; 494  :         if (args->ob_refcnt > 1) {

  00110	48 83 7b 50 01	 cmp	 QWORD PTR [rbx+80], 1
  00115	7e 1e		 jle	 SHORT $LN15@functools_@2

; 495  :             Py_DECREF(args);

  00117	48 8b cb	 mov	 rcx, rbx
  0011a	e8 00 00 00 00	 call	 _Py_DecRef

; 496  :             if ((args = PyTuple_New(2)) == NULL)

  0011f	b9 02 00 00 00	 mov	 ecx, 2
  00124	e8 00 00 00 00	 call	 PyTuple_New
  00129	48 8b d8	 mov	 rbx, rax
  0012c	48 85 c0	 test	 rax, rax
  0012f	0f 84 b7 00 00
	00		 je	 $LN40@functools_@2
$LN15@functools_@2:

; 497  :                 goto Fail;
; 498  :         }
; 499  : 
; 500  :         op2 = PyIter_Next(it);

  00135	48 8b ce	 mov	 rcx, rsi
  00138	e8 00 00 00 00	 call	 PyIter_Next
  0013d	48 8b f8	 mov	 rdi, rax

; 501  :         if (op2 == NULL) {

  00140	48 85 c0	 test	 rax, rax
  00143	74 47		 je	 SHORT $LN37@functools_@2

; 503  :                 goto Fail;
; 504  :             break;
; 505  :         }
; 506  : 
; 507  :         if (result == NULL)

  00145	4c 8b 44 24 70	 mov	 r8, QWORD PTR result$[rsp]
  0014a	4d 85 c0	 test	 r8, r8
  0014d	75 07		 jne	 SHORT $LN12@functools_@2

; 508  :             result = op2;

  0014f	48 89 44 24 70	 mov	 QWORD PTR result$[rsp], rax

; 509  :         else {

  00154	eb ba		 jmp	 SHORT $LL18@functools_@2
$LN12@functools_@2:

; 510  :             PyTuple_SetItem(args, 0, result);

  00156	33 d2		 xor	 edx, edx
  00158	48 8b cb	 mov	 rcx, rbx
  0015b	e8 00 00 00 00	 call	 PyTuple_SetItem

; 511  :             PyTuple_SetItem(args, 1, op2);

  00160	4c 8b c7	 mov	 r8, rdi
  00163	ba 01 00 00 00	 mov	 edx, 1
  00168	48 8b cb	 mov	 rcx, rbx
  0016b	e8 00 00 00 00	 call	 PyTuple_SetItem

; 512  :             if ((result = PyEval_CallObject(func, args)) == NULL)

  00170	48 8b 4c 24 40	 mov	 rcx, QWORD PTR func$[rsp]
  00175	45 33 c0	 xor	 r8d, r8d
  00178	48 8b d3	 mov	 rdx, rbx
  0017b	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  00180	48 89 44 24 70	 mov	 QWORD PTR result$[rsp], rax
  00185	48 85 c0	 test	 rax, rax
  00188	75 86		 jne	 SHORT $LL18@functools_@2

; 513  :                 goto Fail;
; 514  :         }
; 515  :     }

  0018a	eb 53		 jmp	 SHORT $Fail$20752
$LN37@functools_@2:

; 502  :             if (PyErr_Occurred())

  0018c	e8 00 00 00 00	 call	 PyErr_Occurred
  00191	48 85 c0	 test	 rax, rax
  00194	75 44		 jne	 SHORT $LN39@functools_@2

; 516  : 
; 517  :     Py_DECREF(args);

  00196	48 8b cb	 mov	 rcx, rbx
  00199	e8 00 00 00 00	 call	 _Py_DecRef

; 518  : 
; 519  :     if (result == NULL)

  0019e	48 83 7c 24 70
	00		 cmp	 QWORD PTR result$[rsp], 0
  001a4	75 13		 jne	 SHORT $LN9@functools_@2

; 520  :         PyErr_SetString(PyExc_TypeError,
; 521  :                    "reduce() of empty sequence with no initial value");

  001a6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@PFCNGPHO@reduce?$CI?$CJ?5of?5empty?5sequence?5with?5@
  001b4	e8 00 00 00 00	 call	 PyErr_SetString
$LN9@functools_@2:

; 522  : 
; 523  :     Py_DECREF(it);

  001b9	48 8b ce	 mov	 rcx, rsi
  001bc	e8 00 00 00 00	 call	 _Py_DecRef

; 524  :     return result;

  001c1	48 8b 44 24 70	 mov	 rax, QWORD PTR result$[rsp]
  001c6	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  001cb	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  001d0	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]

; 531  : }

  001d5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001d9	c3		 ret	 0
$LN39@functools_@2:

; 524  :     return result;

  001da	48 8b 44 24 70	 mov	 rax, QWORD PTR result$[rsp]
$Fail$20752:

; 525  : 
; 526  : Fail:
; 527  :     Py_XDECREF(args);

  001df	48 85 db	 test	 rbx, rbx
  001e2	74 0d		 je	 SHORT $LN7@functools_@2
  001e4	48 8b cb	 mov	 rcx, rbx
  001e7	e8 00 00 00 00	 call	 _Py_DecRef
$LN40@functools_@2:
  001ec	48 8b 44 24 70	 mov	 rax, QWORD PTR result$[rsp]
$LN7@functools_@2:

; 528  :     Py_XDECREF(result);

  001f1	48 85 c0	 test	 rax, rax
  001f4	74 08		 je	 SHORT $LN3@functools_@2
  001f6	48 8b c8	 mov	 rcx, rax
  001f9	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@functools_@2:

; 529  :     Py_DECREF(it);

  001fe	48 8b ce	 mov	 rcx, rsi
  00201	e8 00 00 00 00	 call	 _Py_DecRef
  00206	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  0020b	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00210	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]

; 530  :     return NULL;

  00215	33 c0		 xor	 eax, eax

; 531  : }

  00217	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0021b	c3		 ret	 0
functools_reduce ENDP
_TEXT	ENDS
PUBLIC	PyInit__functools
EXTRN	PyModule_AddObject:PROC
EXTRN	__imp_strchr:PROC
EXTRN	PyType_Ready:PROC
EXTRN	PyModule_Create2:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyInit__functools DD imagerel $LN17
	DD	imagerel $LN17+233
	DD	imagerel $unwind$PyInit__functools
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__functools DD 085001H
	DD	0a5450H
	DD	0c640fH
	DD	0b340fH
	DD	0700b720fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_functoolsmodule.c
xdata	ENDS
;	COMDAT PyInit__functools
_TEXT	SEGMENT
typelist$ = 48
PyInit__functools PROC					; COMDAT

; 570  : {

$LN17:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 571  :     int i;
; 572  :     PyObject *m;
; 573  :     char *name;
; 574  :     PyTypeObject *typelist[] = {
; 575  :         &partial_type,

  0000f	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:partial_type

; 576  :         NULL
; 577  :     };
; 578  : 
; 579  :     m = PyModule_Create(&_functoolsmodule);

  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_functoolsmodule
  0001d	33 ff		 xor	 edi, edi
  0001f	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00024	48 89 5c 24 30	 mov	 QWORD PTR typelist$[rsp], rbx
  00029	48 89 7c 24 38	 mov	 QWORD PTR typelist$[rsp+8], rdi
  0002e	e8 00 00 00 00	 call	 PyModule_Create2
  00033	48 8b f0	 mov	 rsi, rax

; 580  :     if (m == NULL)

  00036	48 85 c0	 test	 rax, rax
  00039	75 10		 jne	 SHORT $LN15@PyInit__fu

; 594  : }

  0003b	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00040	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00045	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00049	5f		 pop	 rdi
  0004a	c3		 ret	 0
$LN15@PyInit__fu:
  0004b	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
$LL5@PyInit__fu:

; 581  :         return NULL;
; 582  : 
; 583  :     for (i=0 ; typelist[i] != NULL ; i++) {
; 584  :         if (PyType_Ready(typelist[i]) < 0) {

  00050	48 8b cb	 mov	 rcx, rbx
  00053	e8 00 00 00 00	 call	 PyType_Ready
  00058	85 c0		 test	 eax, eax
  0005a	78 6e		 js	 SHORT $LN13@PyInit__fu

; 587  :         }
; 588  :         name = strchr(typelist[i]->tp_name, '.');

  0005c	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00060	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0006b	48 8b e8	 mov	 rbp, rax

; 589  :         assert (name != NULL);
; 590  :         Py_INCREF(typelist[i]);

  0006e	e8 00 00 00 00	 call	 _Py_PXCTX
  00073	85 c0		 test	 eax, eax
  00075	75 32		 jne	 SHORT $LN9@PyInit__fu
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00085	4c 8b cb	 mov	 r9, rbx
  00088	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0008e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00096	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009b	85 c0		 test	 eax, eax
  0009d	75 06		 jne	 SHORT $LN8@PyInit__fu
  0009f	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000a3	74 04		 je	 SHORT $LN9@PyInit__fu
$LN8@PyInit__fu:
  000a5	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN9@PyInit__fu:

; 591  :         PyModule_AddObject(m, name+1, (PyObject *)typelist[i]);

  000a9	48 8d 55 01	 lea	 rdx, QWORD PTR [rbp+1]
  000ad	4c 8b c3	 mov	 r8, rbx
  000b0	48 8b ce	 mov	 rcx, rsi
  000b3	e8 00 00 00 00	 call	 PyModule_AddObject
  000b8	48 8b 5c fc 38	 mov	 rbx, QWORD PTR typelist$[rsp+rdi*8+8]
  000bd	48 ff c7	 inc	 rdi
  000c0	48 85 db	 test	 rbx, rbx
  000c3	75 8b		 jne	 SHORT $LL5@PyInit__fu

; 592  :     }
; 593  :     return m;

  000c5	48 8b c6	 mov	 rax, rsi
  000c8	eb 0a		 jmp	 SHORT $LN16@PyInit__fu
$LN13@PyInit__fu:

; 585  :             Py_DECREF(m);

  000ca	48 8b ce	 mov	 rcx, rsi
  000cd	e8 00 00 00 00	 call	 _Py_DecRef

; 586  :             return NULL;

  000d2	33 c0		 xor	 eax, eax
$LN16@PyInit__fu:

; 594  : }

  000d4	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000d9	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  000de	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  000e3	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000e7	5f		 pop	 rdi
  000e8	c3		 ret	 0
PyInit__functools ENDP
_TEXT	ENDS
END
