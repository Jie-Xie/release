; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@NKEHLIOI@instancemethod?$AA@		; `string'
PUBLIC	??_C@_06GABBCIBA@method?$AA@			; `string'
PUBLIC	??_C@_07DIBBIFIJ@__doc__?$AA@			; `string'
PUBLIC	??_C@_0CI@GHOOOEEG@the?5instance?5to?5which?5a?5method?5i@ ; `string'
PUBLIC	??_C@_08KFOOMKEG@__self__?$AA@			; `string'
PUBLIC	??_C@_0DH@EAMKJIGG@the?5function?5?$CIor?5other?5callable?$CJ@ ; `string'
PUBLIC	??_C@_08NOMANIOG@__func__?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	PyMethod_Type
PUBLIC	PyInstanceMethod_Type
EXTRN	PyObject_GenericSetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
numfree	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0P@NKEHLIOI@instancemethod?$AA@
CONST	SEGMENT
??_C@_0P@NKEHLIOI@instancemethod?$AA@ DB 'instancemethod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GABBCIBA@method?$AA@
CONST	SEGMENT
??_C@_06GABBCIBA@method?$AA@ DB 'method', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIBBIFIJ@__doc__?$AA@
CONST	SEGMENT
??_C@_07DIBBIFIJ@__doc__?$AA@ DB '__doc__', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
method_memberlist DQ FLAT:??_C@_08NOMANIOG@__func__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	07H
	ORG $+4
	DQ	FLAT:??_C@_0DH@EAMKJIGG@the?5function?5?$CIor?5other?5callable?$CJ@
	DQ	FLAT:??_C@_08KFOOMKEG@__self__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	07H
	ORG $+4
	DQ	FLAT:??_C@_0CI@GHOOOEEG@the?5instance?5to?5which?5a?5method?5i@
	DQ	0000000000000000H
	ORG $+32
instancemethod_doc DB 'instancemethod(function)', 0aH, 0aH, 'Bind a funct'
	DB	'ion to a class.', 00H
	ORG $+2
method_getset DQ FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:method_get_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
method_doc DB	'method(function, instance)', 0aH, 0aH, 'Create a bound i'
	DB	'nstance method object.', 00H
	ORG $+13
PyMethod_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06GABBCIBA@method?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:method_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:method_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:method_hash
	DQ	FLAT:method_call
	DQ	0000000000000000H
	DQ	FLAT:method_getattro
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	FLAT:method_doc
	DQ	FLAT:method_traverse
	DQ	0000000000000000H
	DQ	FLAT:method_richcompare
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:method_memberlist
	DQ	FLAT:method_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:method_descr_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:method_new
	ORG $+72
instancemethod_memberlist DQ FLAT:??_C@_08NOMANIOG@__func__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	07H
	ORG $+4
	DQ	FLAT:??_C@_0DH@EAMKJIGG@the?5function?5?$CIor?5other?5callable?$CJ@
	DQ	0000000000000000H
	ORG $+32
instancemethod_getset DQ FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:instancemethod_get_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyInstanceMethod_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@NKEHLIOI@instancemethod?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:instancemethod_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:instancemethod_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:instancemethod_call
	DQ	0000000000000000H
	DQ	FLAT:instancemethod_getattro
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	FLAT:instancemethod_doc
	DQ	FLAT:instancemethod_traverse
	DQ	0000000000000000H
	DQ	FLAT:instancemethod_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:instancemethod_memberlist
	DQ	FLAT:instancemethod_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:instancemethod_descr_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:instancemethod_new
	ORG $+72
_DATA	ENDS
;	COMDAT ??_C@_0CI@GHOOOEEG@the?5instance?5to?5which?5a?5method?5i@
CONST	SEGMENT
??_C@_0CI@GHOOOEEG@the?5instance?5to?5which?5a?5method?5i@ DB 'the instan'
	DB	'ce to which a method is bound', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KFOOMKEG@__self__?$AA@
CONST	SEGMENT
??_C@_08KFOOMKEG@__self__?$AA@ DB '__self__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@EAMKJIGG@the?5function?5?$CIor?5other?5callable?$CJ@
CONST	SEGMENT
??_C@_0DH@EAMKJIGG@the?5function?5?$CIor?5other?5callable?$CJ@ DB 'the fu'
	DB	'nction (or other callable) implementing a method', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NOMANIOG@__func__?$AA@
CONST	SEGMENT
??_C@_08NOMANIOG@__func__?$AA@ DB '__func__', 00H	; `string'
CONST	ENDS
_TLS	SEGMENT
PyId___name__ DQ 0000000000000000H
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\include\objimpl.h
_TEXT	ENDS
;	COMDAT _PyObject_InitHead
_TEXT	SEGMENT
op$ = 8
_PyObject_InitHead PROC					; COMDAT

; 216  :     assert(Py_TYPE(op));
; 217  :     op->is_px = _Py_NOT_PARALLEL;

  00000	48 ba 78 56 ef
	be 34 12 ad de	 mov	 rdx, -2401243008567650696 ; dead1234beef5678H

; 218  :     op->px    = _Py_NOT_PARALLEL;
; 219  :     op->slist_entry.Next = NULL;

  0000a	33 c0		 xor	 eax, eax

; 220  :     op->px_flags  = Py_PXFLAGS_ISPY;

  0000c	48 c7 41 20 01
	00 00 00	 mov	 QWORD PTR [rcx+32], 1
  00014	48 89 11	 mov	 QWORD PTR [rcx], rdx
  00017	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx
  0001b	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 221  :     op->srw_lock  = NULL;

  0001f	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 222  :     op->event     = NULL;

  00023	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 223  :     op->orig_type = NULL;

  00027	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 224  : #ifdef Py_TRACE_REFS
; 225  :     op->_ob_next = NULL;
; 226  :     op->_ob_prev = NULL;
; 227  : #else
; 228  :     op->_ob_next = _Py_NOT_PARALLEL;

  0002b	48 89 51 40	 mov	 QWORD PTR [rcx+64], rdx

; 229  :     op->_ob_prev = _Py_NOT_PARALLEL;

  0002f	48 89 51 48	 mov	 QWORD PTR [rcx+72], rdx

; 230  : #endif
; 231  : }

  00033	c3		 ret	 0
_PyObject_InitHead ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@JKHPLOII@PyObject_INIT?$AA@		; `string'
PUBLIC	??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ ; `string'
EXTRN	_Px_NewReference:PROC
EXTRN	_PxObject_Init:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_INIT DD imagerel PyObject_INIT
	DD	imagerel PyObject_INIT+185
	DD	imagerel $unwind$PyObject_INIT
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0O@JKHPLOII@PyObject_INIT?$AA@
CONST	SEGMENT
??_C@_0O@JKHPLOII@PyObject_INIT?$AA@ DB 'PyObject_INIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
CONST	SEGMENT
??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ DB 'c:\src\pypa'
	DB	'rallel\include\objimpl.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_INIT
_TEXT	SEGMENT
op$ = 64
tp$ = 72
PyObject_INIT PROC					; COMDAT

; 236  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 237  :     Px_RETURN(_PxObject_Init(op, tp))

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 15		 je	 SHORT $LN1@PyObject_I
  00019	48 8b d7	 mov	 rdx, rdi
  0001c	48 8b cb	 mov	 rcx, rbx

; 242  : }

  0001f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00024	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00028	5f		 pop	 rdi
  00029	e9 00 00 00 00	 jmp	 _PxObject_Init
$LN1@PyObject_I:

; 238  :     Py_TYPE(op) = tp;
; 239  :     _PyObject_InitHead(op);

  0002e	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00038	33 c0		 xor	 eax, eax

; 240  :     _Py_NewReference(op);

  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
  00041	48 89 0b	 mov	 QWORD PTR [rbx], rcx
  00044	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  00048	48 89 4b 40	 mov	 QWORD PTR [rbx+64], rcx
  0004c	48 89 4b 48	 mov	 QWORD PTR [rbx+72], rcx
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@JKHPLOII@PyObject_INIT?$AA@
  00057	4c 8b cb	 mov	 r9, rbx
  0005a	41 b8 f0 00 00
	00		 mov	 r8d, 240		; 000000f0H
  00060	48 89 7b 58	 mov	 QWORD PTR [rbx+88], rdi
  00064	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  00068	48 c7 43 20 01
	00 00 00	 mov	 QWORD PTR [rbx+32], 1
  00070	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  00074	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  00078	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax
  0007c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00084	e8 00 00 00 00	 call	 _PyParallel_Guard
  00089	85 c0		 test	 eax, eax
  0008b	74 16		 je	 SHORT $LN4@PyObject_I
  0008d	48 8b cb	 mov	 rcx, rbx
  00090	e8 00 00 00 00	 call	 _Px_NewReference

; 241  :     return op;

  00095	48 8b c3	 mov	 rax, rbx

; 242  : }

  00098	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0009d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a1	5f		 pop	 rdi
  000a2	c3		 ret	 0
$LN4@PyObject_I:

; 240  :     _Py_NewReference(op);

  000a3	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1

; 241  :     return op;

  000ab	48 8b c3	 mov	 rax, rbx

; 242  : }

  000ae	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b7	5f		 pop	 rdi
  000b8	c3		 ret	 0
PyObject_INIT ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@ ; `string'
PUBLIC	PyMethod_Function
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\classobject.c
pdata	SEGMENT
$pdata$PyMethod_Function DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$PyMethod_Function
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMethod_Function DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@ DB '..\Objects\clas'
	DB	'sobject.c', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyMethod_Function
_TEXT	SEGMENT
im$ = 48
PyMethod_Function PROC					; COMDAT

; 21   : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 22   :     if (!PyMethod_Check(im)) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyMethod_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	74 18		 je	 SHORT $LN1@PyMethod_F

; 23   :         PyErr_BadInternalCall();

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00018	ba 17 00 00 00	 mov	 edx, 23
  0001d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 24   :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 27   : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
$LN1@PyMethod_F:

; 25   :     }
; 26   :     return ((PyMethodObject *)im)->im_func;

  00029	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]

; 27   : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
PyMethod_Function ENDP
_TEXT	ENDS
PUBLIC	PyMethod_Self
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMethod_Self DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$PyMethod_Self
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMethod_Self DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyMethod_Self
_TEXT	SEGMENT
im$ = 48
PyMethod_Self PROC					; COMDAT

; 31   : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 32   :     if (!PyMethod_Check(im)) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyMethod_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	74 18		 je	 SHORT $LN1@PyMethod_S

; 33   :         PyErr_BadInternalCall();

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00018	ba 21 00 00 00	 mov	 edx, 33			; 00000021H
  0001d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 34   :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 37   : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
$LN1@PyMethod_S:

; 35   :     }
; 36   :     return ((PyMethodObject *)im)->im_self;

  00029	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]

; 37   : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
PyMethod_Self ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0N@MFMAGHMM@PyMethod_New?$AA@		; `string'
PUBLIC	PyMethod_New
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
_BSS	SEGMENT
	ALIGN	8

free_list DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyMethod_New DD imagerel $LN30
	DD	imagerel $LN30+49
	DD	imagerel $unwind$PyMethod_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyMethod_New DD imagerel $LN30+49
	DD	imagerel $LN30+424
	DD	imagerel $chain$1$PyMethod_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyMethod_New DD imagerel $LN30+424
	DD	imagerel $LN30+480
	DD	imagerel $chain$3$PyMethod_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyMethod_New DD 020021H
	DD	083400H
	DD	imagerel $LN30
	DD	imagerel $LN30+49
	DD	imagerel $unwind$PyMethod_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyMethod_New DD 044721H
	DD	097447H
	DD	083405H
	DD	imagerel $LN30
	DD	imagerel $LN30+49
	DD	imagerel $unwind$PyMethod_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMethod_New DD 040a01H
	DD	0a540aH
	DD	06006520aH
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MFMAGHMM@PyMethod_New?$AA@
CONST	SEGMENT
??_C@_0N@MFMAGHMM@PyMethod_New?$AA@ DB 'PyMethod_New', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\classobject.c
CONST	ENDS
;	COMDAT PyMethod_New
_TEXT	SEGMENT
func$ = 64
self$ = 72
PyMethod_New PROC					; COMDAT

; 46   : {

$LN30:
  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f2	 mov	 rsi, rdx
  0000d	48 8b e9	 mov	 rbp, rcx

; 47   :     register PyMethodObject *im;
; 48   :     if (self == NULL) {

  00010	48 85 d2	 test	 rdx, rdx
  00013	75 1c		 jne	 SHORT $LN13@PyMethod_N

; 49   :         PyErr_BadInternalCall();

  00015	8d 56 31	 lea	 edx, QWORD PTR [rsi+49]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  0001f	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 50   :         return NULL;

  00024	33 c0		 xor	 eax, eax

; 70   : }

  00026	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  0002b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002f	5e		 pop	 rsi
  00030	c3		 ret	 0
$LN13@PyMethod_N:
  00031	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 51   :     }
; 52   :     im = free_list;

  00036	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR free_list

; 53   :     if (!Py_PXCTX && im != NULL) {

  0003d	e8 00 00 00 00	 call	 _Py_PXCTX
  00042	85 c0		 test	 eax, eax
  00044	0f 85 5e 01 00
	00		 jne	 $LN12@PyMethod_N
  0004a	48 85 db	 test	 rbx, rbx
  0004d	0f 84 55 01 00
	00		 je	 $LN12@PyMethod_N

; 54   :         free_list = (PyMethodObject *)(im->im_self);

  00053	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]

; 55   :         PyObject_INIT((PyObject *)im, &PyMethod_Type);

  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyMethod_Type
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	48 89 05 00 00
	00 00		 mov	 QWORD PTR free_list, rax
  00068	e8 00 00 00 00	 call	 PyObject_INIT

; 56   :         numfree--;

  0006d	ff 0d 00 00 00
	00		 dec	 DWORD PTR numfree
$LN10@PyMethod_N:

; 61   :             return NULL;
; 62   :     }
; 63   :     im->im_weakreflist = NULL;

  00073	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00078	33 ff		 xor	 edi, edi
  0007a	48 89 7b 70	 mov	 QWORD PTR [rbx+112], rdi

; 64   :     Py_INCREF(func);

  0007e	e8 00 00 00 00	 call	 _Py_PXCTX
  00083	85 c0		 test	 eax, eax
  00085	75 32		 jne	 SHORT $LN21@PyMethod_N
  00087	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00095	4c 8b cd	 mov	 r9, rbp
  00098	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0009e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ab	85 c0		 test	 eax, eax
  000ad	75 06		 jne	 SHORT $LN20@PyMethod_N
  000af	f6 45 20 20	 test	 BYTE PTR [rbp+32], 32	; 00000020H
  000b3	74 04		 je	 SHORT $LN21@PyMethod_N
$LN20@PyMethod_N:
  000b5	48 ff 45 50	 inc	 QWORD PTR [rbp+80]
$LN21@PyMethod_N:

; 65   :     im->im_func = func;

  000b9	48 89 6b 60	 mov	 QWORD PTR [rbx+96], rbp

; 66   :     Py_XINCREF(self);

  000bd	e8 00 00 00 00	 call	 _Py_PXCTX
  000c2	85 c0		 test	 eax, eax
  000c4	75 32		 jne	 SHORT $LN8@PyMethod_N
  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000d4	4c 8b ce	 mov	 r9, rsi
  000d7	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000dd	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000e5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ea	85 c0		 test	 eax, eax
  000ec	75 06		 jne	 SHORT $LN24@PyMethod_N
  000ee	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  000f2	74 04		 je	 SHORT $LN8@PyMethod_N
$LN24@PyMethod_N:
  000f4	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN8@PyMethod_N:

; 67   :     im->im_self = self;
; 68   :     _PyObject_GC_TRACK(im);

  000f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MFMAGHMM@PyMethod_New?$AA@
  00106	4c 8b cb	 mov	 r9, rbx
  00109	41 b8 44 00 00
	00		 mov	 r8d, 68			; 00000044H
  0010f	48 89 73 68	 mov	 QWORD PTR [rbx+104], rsi
  00113	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0011b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00120	85 c0		 test	 eax, eax
  00122	75 6c		 jne	 SHORT $LN2@PyMethod_N
  00124	44 8d 40 44	 lea	 r8d, QWORD PTR [rax+68]
  00128	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  0012f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MFMAGHMM@PyMethod_New?$AA@
  00136	4c 8b cb	 mov	 r9, rbx
  00139	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00141	e8 00 00 00 00	 call	 _PyParallel_Guard
  00146	85 c0		 test	 eax, eax
  00148	75 04		 jne	 SHORT $LN19@PyMethod_N
  0014a	48 8d 7b e8	 lea	 rdi, QWORD PTR [rbx-24]
$LN19@PyMethod_N:
  0014e	48 83 7f 10 fe	 cmp	 QWORD PTR [rdi+16], -2
  00153	74 0c		 je	 SHORT $LN1@PyMethod_N
  00155	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  0015c	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyMethod_N:
  00161	48 c7 47 10 fd
	ff ff ff	 mov	 QWORD PTR [rdi+16], -3
  00169	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00170	48 89 07	 mov	 QWORD PTR [rdi], rax
  00173	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0017a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0017e	48 89 4f 08	 mov	 QWORD PTR [rdi+8], rcx
  00182	48 89 39	 mov	 QWORD PTR [rcx], rdi
  00185	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0018c	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
$LN2@PyMethod_N:

; 69   :     return (PyObject *)im;

  00190	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00195	48 8b c3	 mov	 rax, rbx
  00198	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 70   : }

  0019d	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  001a2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001a6	5e		 pop	 rsi
  001a7	c3		 ret	 0
$LN12@PyMethod_N:

; 57   :     }
; 58   :     else {
; 59   :         im = PyObject_GC_New(PyMethodObject, &PyMethod_Type);

  001a8	e8 00 00 00 00	 call	 _Py_PXCTX
  001ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMethod_Type
  001b4	85 c0		 test	 eax, eax
  001b6	74 07		 je	 SHORT $LN16@PyMethod_N
  001b8	e8 00 00 00 00	 call	 _PxObject_New
  001bd	eb 05		 jmp	 SHORT $LN29@PyMethod_N
$LN16@PyMethod_N:
  001bf	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN29@PyMethod_N:
  001c4	48 8b d8	 mov	 rbx, rax

; 60   :         if (im == NULL)

  001c7	48 85 c0	 test	 rax, rax
  001ca	0f 85 a3 fe ff
	ff		 jne	 $LN10@PyMethod_N
  001d0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 70   : }

  001d5	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  001da	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001de	5e		 pop	 rsi
  001df	c3		 ret	 0
PyMethod_New ENDP
_TEXT	ENDS
EXTRN	PyObject_GetAttr:PROC
EXTRN	PyUnicode_InternFromString:PROC
_BSS	SEGMENT
?docstr@?1??method_get_doc@@9@9 DQ 01H DUP (?)		; `method_get_doc'::`2'::docstr
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_get_doc DD imagerel method_get_doc
	DD	imagerel method_get_doc+68
	DD	imagerel $unwind$method_get_doc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_get_doc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT method_get_doc
_TEXT	SEGMENT
im$ = 48
context$ = 56
method_get_doc PROC					; COMDAT

; 93   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 94   :     static PyObject *docstr;
; 95   :     if (docstr == NULL) {

  00006	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?docstr@?1??method_get_doc@@9@9
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 85 c0	 test	 rax, rax
  00013	75 1e		 jne	 SHORT $LN1@method_get

; 96   :         docstr= PyUnicode_InternFromString("__doc__");

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
  0001c	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00021	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?docstr@?1??method_get_doc@@9@9, rax

; 97   :         if (docstr == NULL)

  00028	48 85 c0	 test	 rax, rax
  0002b	75 06		 jne	 SHORT $LN1@method_get

; 101  : }

  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5b		 pop	 rbx
  00032	c3		 ret	 0
$LN1@method_get:

; 98   :             return NULL;
; 99   :     }
; 100  :     return PyObject_GetAttr(im->im_func, docstr);

  00033	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00037	48 8b d0	 mov	 rdx, rax

; 101  : }

  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5b		 pop	 rbx
  0003f	e9 00 00 00 00	 jmp	 PyObject_GetAttr
method_get_doc ENDP
_TEXT	ENDS
EXTRN	_PyType_Lookup:PROC
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_getattro DD imagerel method_getattro
	DD	imagerel method_getattro+179
	DD	imagerel $unwind$method_getattro
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_getattro DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT method_getattro
_TEXT	SEGMENT
obj$ = 48
name$ = 56
method_getattro PROC					; COMDAT

; 110  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 111  :     PyMethodObject *im = (PyMethodObject *)obj;
; 112  :     PyTypeObject *tp = obj->ob_type;

  0000f	48 8b 59 58	 mov	 rbx, QWORD PTR [rcx+88]
  00013	48 8b f2	 mov	 rsi, rdx
  00016	48 8b f9	 mov	 rdi, rcx

; 113  :     PyObject *descr = NULL;
; 114  : 
; 115  :     {
; 116  :         if (tp->tp_dict == NULL) {

  00019	48 83 bb 60 01
	00 00 00	 cmp	 QWORD PTR [rbx+352], 0
  00021	75 1e		 jne	 SHORT $LN4@method_get@2

; 117  :             if (PyType_Ready(tp) < 0)

  00023	48 8b cb	 mov	 rcx, rbx
  00026	e8 00 00 00 00	 call	 PyType_Ready
  0002b	85 c0		 test	 eax, eax
  0002d	79 12		 jns	 SHORT $LN4@method_get@2

; 118  :                 return NULL;

  0002f	33 c0		 xor	 eax, eax

; 134  : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
$LN4@method_get@2:

; 119  :         }
; 120  :         descr = _PyType_Lookup(tp, name);

  00041	48 8b d6	 mov	 rdx, rsi
  00044	48 8b cb	 mov	 rcx, rbx
  00047	e8 00 00 00 00	 call	 _PyType_Lookup
  0004c	48 8b d8	 mov	 rbx, rax

; 121  :     }
; 122  : 
; 123  :     if (descr != NULL) {

  0004f	48 85 c0	 test	 rax, rax
  00052	74 44		 je	 SHORT $LN1@method_get@2

; 124  :         descrgetfunc f = TP_DESCR_GET(descr->ob_type);

  00054	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00058	48 8b 81 68 01
	00 00		 mov	 rax, QWORD PTR [rcx+360]

; 125  :         if (f != NULL)
; 126  :             return f(descr, obj, (PyObject *)obj->ob_type);

  0005f	48 8b cb	 mov	 rcx, rbx
  00062	48 85 c0	 test	 rax, rax
  00065	74 19		 je	 SHORT $LN2@method_get@2
  00067	4c 8b 47 58	 mov	 r8, QWORD PTR [rdi+88]
  0006b	48 8b d7	 mov	 rdx, rdi

; 134  : }

  0006e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00073	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00078	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007c	5f		 pop	 rdi
  0007d	48 ff e0	 rex_jmp rax
$LN2@method_get@2:

; 127  :         else {
; 128  :             Py_INCREF(descr);

  00080	e8 00 00 00 00	 call	 _Py_IncRef

; 129  :             return descr;

  00085	48 8b c3	 mov	 rax, rbx

; 134  : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
$LN1@method_get@2:

; 130  :         }
; 131  :     }
; 132  : 
; 133  :     return PyObject_GetAttr(im->im_func, name);

  00098	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  0009c	48 8b d6	 mov	 rdx, rsi

; 134  : }

  0009f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a4	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ad	5f		 pop	 rdi
  000ae	e9 00 00 00 00	 jmp	 PyObject_GetAttr
method_getattro ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@ECOLINDM@self?5must?5not?5be?5None?$AA@ ; `string'
PUBLIC	??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyCallable_Check:PROC
EXTRN	PyArg_UnpackTuple:PROC
EXTRN	_PyArg_NoKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_new DD imagerel method_new
	DD	imagerel method_new+168
	DD	imagerel $unwind$method_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_new DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_0BG@ECOLINDM@self?5must?5not?5be?5None?$AA@
CONST	SEGMENT
??_C@_0BG@ECOLINDM@self?5must?5not?5be?5None?$AA@ DB 'self must not be No'
	DB	'ne', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@
CONST	SEGMENT
??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@ DB 'first arg'
	DB	'ument must be callable', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT method_new
_TEXT	SEGMENT
self$ = 48
type$ = 80
args$ = 88
kw$ = 96
func$ = 104
method_new PROC						; COMDAT

; 143  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b da	 mov	 rbx, rdx

; 144  :     PyObject *func;
; 145  :     PyObject *self;
; 146  : 
; 147  :     if (!_PyArg_NoKeywords("method", kw))

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06GABBCIBA@method?$AA@
  00010	49 8b d0	 mov	 rdx, r8
  00013	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00018	85 c0		 test	 eax, eax

; 148  :         return NULL;

  0001a	0f 84 80 00 00
	00		 je	 $LN8@method_new

; 149  :     if (!PyArg_UnpackTuple(args, "method", 2, 2,
; 150  :                           &func, &self))

  00020	48 8d 44 24 30	 lea	 rax, QWORD PTR self$[rsp]
  00025	41 b9 02 00 00
	00		 mov	 r9d, 2
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06GABBCIBA@method?$AA@
  00032	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00037	48 8d 44 24 68	 lea	 rax, QWORD PTR func$[rsp]
  0003c	45 8b c1	 mov	 r8d, r9d
  0003f	48 8b cb	 mov	 rcx, rbx
  00042	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00047	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0004c	85 c0		 test	 eax, eax

; 151  :         return NULL;

  0004e	74 50		 je	 SHORT $LN8@method_new

; 152  :     if (!PyCallable_Check(func)) {

  00050	48 8b 4c 24 68	 mov	 rcx, QWORD PTR func$[rsp]
  00055	e8 00 00 00 00	 call	 PyCallable_Check
  0005a	85 c0		 test	 eax, eax
  0005c	75 09		 jne	 SHORT $LN3@method_new

; 153  :         PyErr_SetString(PyExc_TypeError,
; 154  :                         "first argument must be callable");

  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@

; 155  :         return NULL;

  00065	eb 2d		 jmp	 SHORT $LN9@method_new
$LN3@method_new:

; 156  :     }
; 157  :     if (self == NULL || self == Py_None) {

  00067	48 8b 54 24 30	 mov	 rdx, QWORD PTR self$[rsp]
  0006c	48 85 d2	 test	 rdx, rdx
  0006f	74 1c		 je	 SHORT $LN1@method_new
  00071	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00078	48 3b d0	 cmp	 rdx, rax
  0007b	74 10		 je	 SHORT $LN1@method_new

; 161  :     }
; 162  : 
; 163  :     return PyMethod_New(func, self);

  0007d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR func$[rsp]
  00082	e8 00 00 00 00	 call	 PyMethod_New

; 164  : }

  00087	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0008b	5b		 pop	 rbx
  0008c	c3		 ret	 0
$LN1@method_new:

; 158  :         PyErr_SetString(PyExc_TypeError,
; 159  :             "self must not be None");

  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@ECOLINDM@self?5must?5not?5be?5None?$AA@
$LN9@method_new:
  00094	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0009b	e8 00 00 00 00	 call	 PyErr_SetString
$LN8@method_new:

; 160  :         return NULL;

  000a0	33 c0		 xor	 eax, eax

; 164  : }

  000a2	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000a6	5b		 pop	 rbx
  000a7	c3		 ret	 0
method_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@BCFEBJHG@method_dealloc?$AA@		; `string'
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyObject_ClearWeakRefs:PROC
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$method_dealloc DD imagerel method_dealloc
	DD	imagerel method_dealloc+377
	DD	imagerel $unwind$method_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0P@BCFEBJHG@method_dealloc?$AA@
CONST	SEGMENT
??_C@_0P@BCFEBJHG@method_dealloc?$AA@ DB 'method_dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\classobject.c
CONST	ENDS
;	COMDAT method_dealloc
_TEXT	SEGMENT
im$ = 64
method_dealloc PROC					; COMDAT

; 168  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b d9	 mov	 rbx, rcx

; 169  :     Py_GUARD

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	74 1c		 je	 SHORT $LN12@method_dea
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@BCFEBJHG@method_dealloc?$AA@
  00024	45 33 c9	 xor	 r9d, r9d
  00027	41 b8 a9 00 00
	00		 mov	 r8d, 169		; 000000a9H
  0002d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN12@method_dea:

; 170  :     _PyObject_GC_UNTRACK(im);

  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@BCFEBJHG@method_dealloc?$AA@
  00040	4c 8b cb	 mov	 r9, rbx
  00043	41 b8 aa 00 00
	00		 mov	 r8d, 170		; 000000aaH
  00049	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00051	e8 00 00 00 00	 call	 _PyParallel_Guard
  00056	85 c0		 test	 eax, eax
  00058	75 54		 jne	 SHORT $LN8@method_dea
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@BCFEBJHG@method_dealloc?$AA@
  00068	4c 8b cb	 mov	 r9, rbx
  0006b	41 b8 aa 00 00
	00		 mov	 r8d, 170		; 000000aaH
  00071	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00079	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007e	85 c0		 test	 eax, eax
  00080	74 04		 je	 SHORT $LN15@method_dea
  00082	33 d2		 xor	 edx, edx
  00084	eb 04		 jmp	 SHORT $LN16@method_dea
$LN15@method_dea:
  00086	48 8d 53 e8	 lea	 rdx, QWORD PTR [rbx-24]
$LN16@method_dea:
  0008a	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0008d	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  00091	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00099	48 89 01	 mov	 QWORD PTR [rcx], rax
  0009c	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0009f	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  000a3	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  000a7	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN8@method_dea:

; 171  :     if (im->im_weakreflist != NULL)

  000ae	48 83 7b 70 00	 cmp	 QWORD PTR [rbx+112], 0
  000b3	74 08		 je	 SHORT $LN7@method_dea

; 172  :         PyObject_ClearWeakRefs((PyObject *)im);

  000b5	48 8b cb	 mov	 rcx, rbx
  000b8	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN7@method_dea:

; 173  :     Py_DECREF(im->im_func);

  000bd	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000c1	e8 00 00 00 00	 call	 _Py_DecRef

; 174  :     Py_XDECREF(im->im_self);

  000c6	48 8b 7b 68	 mov	 rdi, QWORD PTR [rbx+104]
  000ca	48 85 ff	 test	 rdi, rdi
  000cd	74 65		 je	 SHORT $LN5@method_dea
  000cf	e8 00 00 00 00	 call	 _Py_PXCTX
  000d4	85 c0		 test	 eax, eax
  000d6	75 5c		 jne	 SHORT $LN5@method_dea
  000d8	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000dc	a8 20		 test	 al, 32			; 00000020H
  000de	75 4c		 jne	 SHORT $LN21@method_dea
  000e0	84 c0		 test	 al, al
  000e2	78 48		 js	 SHORT $LN21@method_dea
  000e4	a8 02		 test	 al, 2
  000e6	75 4c		 jne	 SHORT $LN5@method_dea
  000e8	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  000ec	75 46		 jne	 SHORT $LN5@method_dea
  000ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000fc	4c 8b cf	 mov	 r9, rdi
  000ff	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00105	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0010d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00112	48 8b cf	 mov	 rcx, rdi
  00115	85 c0		 test	 eax, eax
  00117	74 07		 je	 SHORT $LN26@method_dea
  00119	e8 00 00 00 00	 call	 _Px_Dealloc
  0011e	eb 14		 jmp	 SHORT $LN5@method_dea
$LN26@method_dea:
  00120	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00124	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0012a	eb 08		 jmp	 SHORT $LN5@method_dea
$LN21@method_dea:
  0012c	48 8b cf	 mov	 rcx, rdi
  0012f	e8 00 00 00 00	 call	 Px_DecRef
$LN5@method_dea:

; 175  :     if (numfree < PyMethod_MAXFREELIST) {

  00134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR numfree
  0013a	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00140	7d 25		 jge	 SHORT $LN2@method_dea

; 176  :         im->im_self = (PyObject *)free_list;

  00142	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR free_list

; 177  :         free_list = im;
; 178  :         numfree++;

  00149	ff c1		 inc	 ecx
  0014b	48 89 1d 00 00
	00 00		 mov	 QWORD PTR free_list, rbx
  00152	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax
  00156	89 0d 00 00 00
	00		 mov	 DWORD PTR numfree, ecx

; 182  :     }
; 183  : }

  0015c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00161	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00165	5f		 pop	 rdi
  00166	c3		 ret	 0
$LN2@method_dea:

; 179  :     }
; 180  :     else {
; 181  :         PyObject_GC_Del(im);

  00167	48 8b cb	 mov	 rcx, rbx

; 182  :     }
; 183  : }

  0016a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0016f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00173	5f		 pop	 rdi
  00174	e9 00 00 00 00	 jmp	 PyObject_GC_Del
method_dealloc ENDP
_TEXT	ENDS
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	PyObject_RichCompareBool:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$method_richcompare DD imagerel method_richcompare
	DD	imagerel method_richcompare+342
	DD	imagerel $unwind$method_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_richcompare DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\classobject.c
xdata	ENDS
;	COMDAT method_richcompare
_TEXT	SEGMENT
self$ = 64
other$ = 72
op$ = 80
method_richcompare PROC					; COMDAT

; 187  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	41 8b f8	 mov	 edi, r8d
  00012	48 8b da	 mov	 rbx, rdx
  00015	48 8b f1	 mov	 rsi, rcx

; 188  :     PyMethodObject *a, *b;
; 189  :     PyObject *res;
; 190  :     int eq;
; 191  : 
; 192  :     if ((op != Py_EQ && op != Py_NE) ||
; 193  :         !PyMethod_Check(self) ||
; 194  :         !PyMethod_Check(other))

  00018	41 83 f8 02	 cmp	 r8d, 2
  0001c	74 0a		 je	 SHORT $LN8@method_ric
  0001e	41 83 f8 03	 cmp	 r8d, 3
  00022	0f 85 d2 00 00
	00		 jne	 $LN9@method_ric
$LN8@method_ric:
  00028	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyMethod_Type
  0002f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00033	0f 85 c1 00 00
	00		 jne	 $LN9@method_ric
  00039	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  0003d	0f 85 b7 00 00
	00		 jne	 $LN9@method_ric

; 197  :     }
; 198  :     a = (PyMethodObject *)self;
; 199  :     b = (PyMethodObject *)other;
; 200  :     eq = PyObject_RichCompareBool(a->im_func, b->im_func, Py_EQ);

  00043	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00047	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0004b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00051	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 201  :     if (eq == 1) {

  00056	83 f8 01	 cmp	 eax, 1
  00059	75 26		 jne	 SHORT $LN4@method_ric

; 202  :         if (a->im_self == NULL || b->im_self == NULL)

  0005b	48 8b 4e 68	 mov	 rcx, QWORD PTR [rsi+104]
  0005f	48 85 c9	 test	 rcx, rcx
  00062	74 14		 je	 SHORT $LN5@method_ric
  00064	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  00068	48 85 d2	 test	 rdx, rdx
  0006b	74 0b		 je	 SHORT $LN5@method_ric

; 204  :         else
; 205  :             eq = PyObject_RichCompareBool(a->im_self, b->im_self,
; 206  :                                           Py_EQ);

  0006d	44 8d 40 01	 lea	 r8d, QWORD PTR [rax+1]
  00071	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00076	eb 09		 jmp	 SHORT $LN4@method_ric
$LN5@method_ric:

; 203  :             eq = a->im_self == b->im_self;

  00078	33 c0		 xor	 eax, eax
  0007a	48 3b 4b 68	 cmp	 rcx, QWORD PTR [rbx+104]
  0007e	0f 94 c0	 sete	 al
$LN4@method_ric:

; 207  :     }
; 208  :     if (eq < 0)

  00081	85 c0		 test	 eax, eax
  00083	79 12		 jns	 SHORT $LN3@method_ric

; 209  :         return NULL;

  00085	33 c0		 xor	 eax, eax

; 216  : }

  00087	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008c	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00091	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00095	5f		 pop	 rdi
  00096	c3		 ret	 0
$LN3@method_ric:

; 210  :     if (op == Py_EQ)

  00097	83 ff 02	 cmp	 edi, 2
  0009a	75 2f		 jne	 SHORT $LN2@method_ric

; 211  :         res = eq ? Py_True : Py_False;

  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  000a3	85 c0		 test	 eax, eax
  000a5	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  000ac	48 0f 45 da	 cmovne	 rbx, rdx

; 214  :     Py_INCREF(res);

  000b0	48 8b cb	 mov	 rcx, rbx
  000b3	e8 00 00 00 00	 call	 _Py_IncRef

; 215  :     return res;

  000b8	48 8b c3	 mov	 rax, rbx

; 216  : }

  000bb	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000c0	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000c5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c9	5f		 pop	 rdi
  000ca	c3		 ret	 0
$LN2@method_ric:

; 212  :     else
; 213  :         res = eq ? Py_False : Py_True;

  000cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  000d2	85 c0		 test	 eax, eax
  000d4	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_TrueStruct
  000db	48 0f 45 d9	 cmovne	 rbx, rcx

; 214  :     Py_INCREF(res);

  000df	48 8b cb	 mov	 rcx, rbx
  000e2	e8 00 00 00 00	 call	 _Py_IncRef

; 215  :     return res;

  000e7	48 8b c3	 mov	 rax, rbx

; 216  : }

  000ea	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ef	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000f4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f8	5f		 pop	 rdi
  000f9	c3		 ret	 0
$LN9@method_ric:

; 195  :     {
; 196  :         Py_RETURN_NOTIMPLEMENTED;

  000fa	e8 00 00 00 00	 call	 _Py_PXCTX
  000ff	85 c0		 test	 eax, eax
  00101	75 3c		 jne	 SHORT $LN14@method_ric
  00103	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NotImplementedStruct
  0010a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00118	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0011e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00126	e8 00 00 00 00	 call	 _PyParallel_Guard
  0012b	85 c0		 test	 eax, eax
  0012d	75 09		 jne	 SHORT $LN13@method_ric
  0012f	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NotImplementedStruct+32, 32 ; 00000020H
  00136	74 07		 je	 SHORT $LN14@method_ric
$LN13@method_ric:
  00138	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NotImplementedStruct+80
$LN14@method_ric:

; 216  : }

  0013f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00144	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00149	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  00150	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00154	5f		 pop	 rdi
  00155	c3		 ret	 0
method_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@DFLPBABB@?$DMbound?5method?5?$CFV?4?$CFV?5of?5?$CFR?$DO?$AA@ ; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_AttributeError:QWORD
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_repr DD imagerel method_repr
	DD	imagerel method_repr+334
	DD	imagerel $unwind$method_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_repr DD 085801H
	DD	0a7458H
	DD	095449H
	DD	083440H
	DD	060025206H
xdata	ENDS
;	COMDAT ??_C@_0BL@DFLPBABB@?$DMbound?5method?5?$CFV?4?$CFV?5of?5?$CFR?$DO?$AA@
CONST	SEGMENT
??_C@_0BL@DFLPBABB@?$DMbound?5method?5?$CFV?4?$CFV?5of?5?$CFR?$DO?$AA@ DB '<'
	DB	'bound method %V.%V of %R>', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT method_repr
_TEXT	SEGMENT
a$ = 64
method_repr PROC					; COMDAT

; 220  : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 221  :     PyObject *self = a->im_self;

  00006	48 8b 71 68	 mov	 rsi, QWORD PTR [rcx+104]

; 222  :     PyObject *func = a->im_func;

  0000a	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]

; 223  :     PyObject *klass;
; 224  :     PyObject *funcname = NULL ,*klassname = NULL, *result = NULL;
; 225  :     char *defname = "?";
; 226  : 
; 227  :     if (self == NULL) {

  0000e	48 85 f6	 test	 rsi, rsi
  00011	75 19		 jne	 SHORT $LN23@method_rep

; 228  :         PyErr_BadInternalCall();

  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  0001a	ba e4 00 00 00	 mov	 edx, 228		; 000000e4H
  0001f	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 229  :         return NULL;

  00024	33 c0		 xor	 eax, eax

; 269  : }

  00026	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002a	5e		 pop	 rsi
  0002b	c3		 ret	 0
$LN23@method_rep:

; 230  :     }
; 231  :     klass = (PyObject*)Py_TYPE(self);
; 232  : 
; 233  :     funcname = _PyObject_GetAttrId(func, &PyId___name__);

  0002c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  00032	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0003b	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00040	48 8b 5e 58	 mov	 rbx, QWORD PTR [rsi+88]
  00044	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00049	48 8b 2c d0	 mov	 rbp, QWORD PTR [rax+rdx*8]
  0004d	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:PyId___name__
  00053	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00058	49 03 e8	 add	 rbp, r8
  0005b	48 8b d5	 mov	 rdx, rbp
  0005e	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00063	48 8b f8	 mov	 rdi, rax

; 234  :     if (funcname == NULL) {

  00066	48 85 c0	 test	 rax, rax
  00069	75 17		 jne	 SHORT $LN22@method_rep

; 235  :         if (!PyErr_ExceptionMatches(PyExc_AttributeError))

  0006b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00072	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00077	85 c0		 test	 eax, eax

; 236  :             return NULL;

  00079	74 56		 je	 SHORT $LN13@method_rep

; 237  :         PyErr_Clear();

  0007b	e8 00 00 00 00	 call	 PyErr_Clear
  00080	eb 1a		 jmp	 SHORT $LN19@method_rep
$LN22@method_rep:

; 238  :     }
; 239  :     else if (!PyUnicode_Check(funcname)) {

  00082	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00086	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00090	75 0a		 jne	 SHORT $LN19@method_rep

; 240  :         Py_DECREF(funcname);

  00092	48 8b cf	 mov	 rcx, rdi
  00095	e8 00 00 00 00	 call	 _Py_DecRef

; 241  :         funcname = NULL;

  0009a	33 ff		 xor	 edi, edi
$LN19@method_rep:

; 242  :     }
; 243  : 
; 244  :     if (klass == NULL)

  0009c	48 85 db	 test	 rbx, rbx

; 245  :         klassname = NULL;
; 246  :     else {

  0009f	74 53		 je	 SHORT $LN29@method_rep

; 247  :         klassname = _PyObject_GetAttrId(klass, &PyId___name__);

  000a1	48 8b d5	 mov	 rdx, rbp
  000a4	48 8b cb	 mov	 rcx, rbx
  000a7	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000ac	48 8b d8	 mov	 rbx, rax

; 248  :         if (klassname == NULL) {

  000af	48 85 c0	 test	 rax, rax
  000b2	75 28		 jne	 SHORT $LN16@method_rep

; 249  :             if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {

  000b4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  000bb	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000c0	85 c0		 test	 eax, eax
  000c2	75 11		 jne	 SHORT $LN15@method_rep

; 250  :                 Py_XDECREF(funcname);

  000c4	48 85 ff	 test	 rdi, rdi
  000c7	74 08		 je	 SHORT $LN13@method_rep
  000c9	48 8b cf	 mov	 rcx, rdi
  000cc	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@method_rep:

; 251  :                 return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	eb 64		 jmp	 SHORT $LN28@method_rep
$LN15@method_rep:

; 252  :             }
; 253  :             PyErr_Clear();

  000d5	e8 00 00 00 00	 call	 PyErr_Clear
  000da	eb 1a		 jmp	 SHORT $LN9@method_rep
$LN16@method_rep:

; 254  :         }
; 255  :         else if (!PyUnicode_Check(klassname)) {

  000dc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e0	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  000ea	75 0a		 jne	 SHORT $LN9@method_rep

; 256  :             Py_DECREF(klassname);

  000ec	48 8b cb	 mov	 rcx, rbx
  000ef	e8 00 00 00 00	 call	 _Py_DecRef
$LN29@method_rep:

; 257  :             klassname = NULL;

  000f4	33 db		 xor	 ebx, ebx
$LN9@method_rep:

; 258  :         }
; 259  :     }
; 260  : 
; 261  :     /* XXX Shouldn't use repr()/%R here! */
; 262  :     result = PyUnicode_FromFormat("<bound method %V.%V of %R>",
; 263  :                                   klassname, defname,
; 264  :                                   funcname, defname, self);

  000f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@DFLPBABB@?$DMbound?5method?5?$CFV?4?$CFV?5of?5?$CFR?$DO?$AA@
  00104	4c 8b cf	 mov	 r9, rdi
  00107	48 8b d3	 mov	 rdx, rbx
  0010a	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  0010f	4c 89 44 24 20	 mov	 QWORD PTR [rsp+32], r8
  00114	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00119	48 8b f0	 mov	 rsi, rax

; 265  : 
; 266  :     Py_XDECREF(funcname);

  0011c	48 85 ff	 test	 rdi, rdi
  0011f	74 08		 je	 SHORT $LN7@method_rep
  00121	48 8b cf	 mov	 rcx, rdi
  00124	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@method_rep:

; 267  :     Py_XDECREF(klassname);

  00129	48 85 db	 test	 rbx, rbx
  0012c	74 08		 je	 SHORT $LN3@method_rep
  0012e	48 8b cb	 mov	 rcx, rbx
  00131	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@method_rep:

; 268  :     return result;

  00136	48 8b c6	 mov	 rax, rsi
$LN28@method_rep:
  00139	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0013e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00143	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 269  : }

  00148	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0014c	5e		 pop	 rsi
  0014d	c3		 ret	 0
method_repr ENDP
_TEXT	ENDS
EXTRN	PyObject_Hash:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_hash DD imagerel method_hash
	DD	imagerel method_hash+105
	DD	imagerel $unwind$method_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_hash DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT method_hash
_TEXT	SEGMENT
a$ = 48
method_hash PROC					; COMDAT

; 273  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 274  :     Py_hash_t x, y;
; 275  :     if (a->im_self == NULL)

  0000d	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00011	48 85 c9	 test	 rcx, rcx
  00014	75 07		 jne	 SHORT $LN5@method_has

; 276  :         x = PyObject_Hash(Py_None);

  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
$LN5@method_has:

; 277  :     else
; 278  :         x = PyObject_Hash(a->im_self);

  0001d	e8 00 00 00 00	 call	 PyObject_Hash
  00022	48 8b d8	 mov	 rbx, rax

; 279  :     if (x == -1)

  00025	48 83 f8 ff	 cmp	 rax, -1
  00029	75 0f		 jne	 SHORT $LN3@method_has
$LN8@method_has:

; 280  :         return -1;

  0002b	48 83 c8 ff	 or	 rax, -1

; 288  : }

  0002f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5f		 pop	 rdi
  00039	c3		 ret	 0
$LN3@method_has:

; 281  :     y = PyObject_Hash(a->im_func);

  0003a	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  0003e	e8 00 00 00 00	 call	 PyObject_Hash

; 282  :     if (y == -1)

  00043	48 83 f8 ff	 cmp	 rax, -1

; 283  :         return -1;

  00047	74 e2		 je	 SHORT $LN8@method_has

; 284  :     x = x ^ y;

  00049	48 33 d8	 xor	 rbx, rax

; 285  :     if (x == -1)

  0004c	48 c7 c0 fe ff
	ff ff		 mov	 rax, -2
  00053	48 83 fb ff	 cmp	 rbx, -1
  00057	48 0f 44 d8	 cmove	 rbx, rax

; 286  :         x = -2;
; 287  :     return x;

  0005b	48 8b c3	 mov	 rax, rbx

; 288  : }

  0005e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00063	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00067	5f		 pop	 rdi
  00068	c3		 ret	 0
method_hash ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@GKEIAKAP@method_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_traverse DD imagerel method_traverse
	DD	imagerel method_traverse+152
	DD	imagerel $unwind$method_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BA@GKEIAKAP@method_traverse?$AA@
CONST	SEGMENT
??_C@_0BA@GKEIAKAP@method_traverse?$AA@ DB 'method_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT method_traverse
_TEXT	SEGMENT
im$ = 48
visit$ = 56
arg$ = 64
method_traverse PROC					; COMDAT

; 292  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 293  :     Py_VISIT(im->im_func);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN9@method_tra
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@GKEIAKAP@method_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 25 01 00
	00		 mov	 r8d, 293		; 00000125H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@method_tra:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN11@method_tra
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 39		 jne	 SHORT $LN13@method_tra
$LN11@method_tra:

; 294  :     Py_VISIT(im->im_self);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN3@method_tra
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@GKEIAKAP@method_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@method_tra:
  00074	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN5@method_tra
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 02		 jne	 SHORT $LN13@method_tra
$LN5@method_tra:

; 295  :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN13@method_tra:

; 296  : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
method_traverse ENDP
_TEXT	ENDS
EXTRN	PyObject_Call:PROC
EXTRN	PyTuple_New:PROC
EXTRN	PyTuple_Size:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$method_call DD imagerel method_call
	DD	imagerel method_call+102
	DD	imagerel $unwind$method_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$method_call DD imagerel method_call+102
	DD	imagerel method_call+178
	DD	imagerel $chain$2$method_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$method_call DD imagerel method_call+178
	DD	imagerel method_call+283
	DD	imagerel $chain$3$method_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$method_call DD imagerel method_call+283
	DD	imagerel method_call+316
	DD	imagerel $chain$4$method_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$method_call DD imagerel method_call+316
	DD	imagerel method_call+337
	DD	imagerel $chain$5$method_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$method_call DD 021H
	DD	imagerel method_call
	DD	imagerel method_call+102
	DD	imagerel $unwind$method_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$method_call DD 021H
	DD	imagerel method_call+102
	DD	imagerel method_call+178
	DD	imagerel $chain$2$method_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$method_call DD 020521H
	DD	0d7405H
	DD	imagerel method_call+102
	DD	imagerel method_call+178
	DD	imagerel $chain$2$method_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$method_call DD 020521H
	DD	0c6405H
	DD	imagerel method_call
	DD	imagerel method_call+102
	DD	imagerel $unwind$method_call
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_call DD 094901H
	DD	06d449H
	DD	0ec444H
	DD	0f007620bH
	DD	05003e005H
	DD	03002H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\classobject.c
xdata	ENDS
;	COMDAT method_call
_TEXT	SEGMENT
func$ = 96
arg$ = 104
kw$ = 112
method_call PROC					; COMDAT

; 300  : {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	41 56		 push	 r14
  00005	41 57		 push	 r15
  00007	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 301  :     PyObject *self = PyMethod_GET_SELF(func);

  0000b	48 8b 59 68	 mov	 rbx, QWORD PTR [rcx+104]

; 302  :     PyObject *result;
; 303  : 
; 304  :     func = PyMethod_GET_FUNCTION(func);

  0000f	4c 8b 79 60	 mov	 r15, QWORD PTR [rcx+96]
  00013	4d 8b f0	 mov	 r14, r8
  00016	48 8b ea	 mov	 rbp, rdx

; 305  :     if (self == NULL) {

  00019	48 85 db	 test	 rbx, rbx
  0001c	75 1e		 jne	 SHORT $LN10@method_cal

; 306  :         PyErr_BadInternalCall();

  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00025	ba 32 01 00 00	 mov	 edx, 306		; 00000132H
  0002a	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 307  :         return NULL;

  0002f	33 c0		 xor	 eax, eax

; 327  : }

  00031	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00035	41 5f		 pop	 r15
  00037	41 5e		 pop	 r14
  00039	5d		 pop	 rbp
  0003a	5b		 pop	 rbx
  0003b	c3		 ret	 0
$LN10@method_cal:

; 308  :     }
; 309  :     else {
; 310  :         Py_ssize_t argcount = PyTuple_Size(arg);

  0003c	48 8b ca	 mov	 rcx, rdx
  0003f	4c 89 64 24 70	 mov	 QWORD PTR [rsp+112], r12
  00044	4c 89 6c 24 30	 mov	 QWORD PTR [rsp+48], r13
  00049	e8 00 00 00 00	 call	 PyTuple_Size
  0004e	4c 8b e8	 mov	 r13, rax

; 311  :         PyObject *newarg = PyTuple_New(argcount + 1);

  00051	48 8d 48 01	 lea	 rcx, QWORD PTR [rax+1]
  00055	e8 00 00 00 00	 call	 PyTuple_New
  0005a	4c 8b e0	 mov	 r12, rax

; 312  :         int i;
; 313  :         if (newarg == NULL)

  0005d	48 85 c0	 test	 rax, rax
  00060	0f 84 d6 00 00
	00		 je	 $LN24@method_cal
$LN8@method_cal:
  00066	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi

; 314  :             return NULL;
; 315  :         Py_INCREF(self);

  0006b	e8 00 00 00 00	 call	 _Py_PXCTX
  00070	85 c0		 test	 eax, eax
  00072	75 32		 jne	 SHORT $LN14@method_cal
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00082	4c 8b cb	 mov	 r9, rbx
  00085	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0008b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00093	e8 00 00 00 00	 call	 _PyParallel_Guard
  00098	85 c0		 test	 eax, eax
  0009a	75 06		 jne	 SHORT $LN13@method_cal
  0009c	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000a0	74 04		 je	 SHORT $LN14@method_cal
$LN13@method_cal:
  000a2	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN14@method_cal:

; 316  :         PyTuple_SET_ITEM(newarg, 0, self);
; 317  :         for (i = 0; i < argcount; i++) {

  000a6	33 f6		 xor	 esi, esi
  000a8	49 89 5c 24 70	 mov	 QWORD PTR [r12+112], rbx
  000ad	4d 85 ed	 test	 r13, r13
  000b0	7e 69		 jle	 SHORT $LN5@method_cal
  000b2	48 89 7c 24 68	 mov	 QWORD PTR [rsp+104], rdi
  000b7	49 2b ec	 sub	 rbp, r12
  000ba	49 8d 7c 24 78	 lea	 rdi, QWORD PTR [r12+120]
  000bf	90		 npad	 1
$LL7@method_cal:

; 318  :             PyObject *v = PyTuple_GET_ITEM(arg, i);

  000c0	48 8b 5c 2f f8	 mov	 rbx, QWORD PTR [rdi+rbp-8]

; 319  :             Py_XINCREF(v);

  000c5	48 85 db	 test	 rbx, rbx
  000c8	74 3b		 je	 SHORT $LN3@method_cal
  000ca	e8 00 00 00 00	 call	 _Py_PXCTX
  000cf	85 c0		 test	 eax, eax
  000d1	75 32		 jne	 SHORT $LN3@method_cal
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000e1	4c 8b cb	 mov	 r9, rbx
  000e4	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ea	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000f2	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f7	85 c0		 test	 eax, eax
  000f9	75 06		 jne	 SHORT $LN17@method_cal
  000fb	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000ff	74 04		 je	 SHORT $LN3@method_cal
$LN17@method_cal:
  00101	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN3@method_cal:

; 316  :         PyTuple_SET_ITEM(newarg, 0, self);
; 317  :         for (i = 0; i < argcount; i++) {

  00105	ff c6		 inc	 esi

; 320  :             PyTuple_SET_ITEM(newarg, i+1, v);

  00107	48 89 1f	 mov	 QWORD PTR [rdi], rbx
  0010a	48 83 c7 08	 add	 rdi, 8
  0010e	48 63 c6	 movsxd	 rax, esi
  00111	49 3b c5	 cmp	 rax, r13
  00114	7c aa		 jl	 SHORT $LL7@method_cal
  00116	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
$LN5@method_cal:

; 321  :         }
; 322  :         arg = newarg;
; 323  :     }
; 324  :     result = PyObject_Call((PyObject *)func, arg, kw);

  0011b	4d 8b c6	 mov	 r8, r14
  0011e	49 8b d4	 mov	 rdx, r12
  00121	49 8b cf	 mov	 rcx, r15
  00124	e8 00 00 00 00	 call	 PyObject_Call

; 325  :     Py_DECREF(arg);

  00129	49 8b cc	 mov	 rcx, r12
  0012c	48 8b d8	 mov	 rbx, rax
  0012f	e8 00 00 00 00	 call	 _Py_DecRef
  00134	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 326  :     return result;

  00139	48 8b c3	 mov	 rax, rbx
$LN24@method_cal:
  0013c	4c 8b 64 24 70	 mov	 r12, QWORD PTR [rsp+112]
  00141	4c 8b 6c 24 30	 mov	 r13, QWORD PTR [rsp+48]

; 327  : }

  00146	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0014a	41 5f		 pop	 r15
  0014c	41 5e		 pop	 r14
  0014e	5d		 pop	 rbp
  0014f	5b		 pop	 rbx
  00150	c3		 ret	 0
method_call ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$method_descr_get DD imagerel method_descr_get
	DD	imagerel method_descr_get+98
	DD	imagerel $unwind$method_descr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_descr_get DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\classobject.c
xdata	ENDS
;	COMDAT method_descr_get
_TEXT	SEGMENT
meth$ = 64
obj$ = 72
cls$ = 80
method_descr_get PROC					; COMDAT

; 331  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 332  :     /* Don't rebind an already bound method of a class that's not a base
; 333  :        class of cls. */
; 334  :     if (PyMethod_GET_SELF(meth) != NULL) {

  00006	48 83 79 68 00	 cmp	 QWORD PTR [rcx+104], 0
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	74 44		 je	 SHORT $LN1@method_des

; 335  :         /* Already bound */
; 336  :         Py_INCREF(meth);

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	75 32		 jne	 SHORT $LN5@method_des
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00027	4c 8b cb	 mov	 r9, rbx
  0002a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00030	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00038	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003d	85 c0		 test	 eax, eax
  0003f	75 06		 jne	 SHORT $LN4@method_des
  00041	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00045	74 04		 je	 SHORT $LN5@method_des
$LN4@method_des:
  00047	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN5@method_des:

; 337  :         return meth;

  0004b	48 8b c3	 mov	 rax, rbx

; 341  : }

  0004e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00052	5b		 pop	 rbx
  00053	c3		 ret	 0
$LN1@method_des:

; 338  :     }
; 339  :     /* Bind it to obj */
; 340  :     return PyMethod_New(PyMethod_GET_FUNCTION(meth), obj);

  00054	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]

; 341  : }

  00058	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005c	5b		 pop	 rbx
  0005d	e9 00 00 00 00	 jmp	 PyMethod_New
method_descr_get ENDP
_TEXT	ENDS
PUBLIC	PyMethod_ClearFreeList
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMethod_ClearFreeList DD imagerel $LN8
	DD	imagerel $LN8+90
	DD	imagerel $unwind$PyMethod_ClearFreeList
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMethod_ClearFreeList DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyMethod_ClearFreeList
_TEXT	SEGMENT
PyMethod_ClearFreeList PROC				; COMDAT

; 388  : {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 389  :     int freelist_size = numfree;

  00006	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR numfree

; 390  : 
; 391  :     if (Py_PXCTX)

  0000c	e8 00 00 00 00	 call	 _Py_PXCTX
  00011	85 c0		 test	 eax, eax
  00013	74 08		 je	 SHORT $LN6@PyMethod_C

; 392  :         return 0;

  00015	33 c0		 xor	 eax, eax

; 402  : }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5b		 pop	 rbx
  0001c	c3		 ret	 0
$LN6@PyMethod_C:

; 393  : 
; 394  :     while (free_list) {

  0001d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR free_list
  00024	48 85 c9	 test	 rcx, rcx
  00027	74 29		 je	 SHORT $LN1@PyMethod_C
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@PyMethod_C:

; 395  :         PyMethodObject *im = free_list;
; 396  :         free_list = (PyMethodObject *)(im->im_self);

  00030	48 8b 51 68	 mov	 rdx, QWORD PTR [rcx+104]
  00034	48 89 15 00 00
	00 00		 mov	 QWORD PTR free_list, rdx

; 397  :         PyObject_GC_Del(im);

  0003b	e8 00 00 00 00	 call	 PyObject_GC_Del
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR free_list

; 398  :         numfree--;

  00047	ff 0d 00 00 00
	00		 dec	 DWORD PTR numfree
  0004d	48 85 c9	 test	 rcx, rcx
  00050	75 de		 jne	 SHORT $LL2@PyMethod_C
$LN1@PyMethod_C:

; 399  :     }
; 400  :     assert(numfree == 0);
; 401  :     return freelist_size;

  00052	8b c3		 mov	 eax, ebx

; 402  : }

  00054	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00058	5b		 pop	 rbx
  00059	c3		 ret	 0
PyMethod_ClearFreeList ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@EPHJPCJE@PyMethod_Fini?$AA@		; `string'
PUBLIC	PyMethod_Fini
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMethod_Fini DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$PyMethod_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMethod_Fini DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0O@EPHJPCJE@PyMethod_Fini?$AA@
CONST	SEGMENT
??_C@_0O@EPHJPCJE@PyMethod_Fini?$AA@ DB 'PyMethod_Fini', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyMethod_Fini
_TEXT	SEGMENT
PyMethod_Fini PROC					; COMDAT

; 406  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 407  :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN1@PyMethod_F@2
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EPHJPCJE@PyMethod_Fini?$AA@
  0001b	45 33 c9	 xor	 r9d, r9d
  0001e	41 b8 97 01 00
	00		 mov	 r8d, 407		; 00000197H
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PyMethod_F@2:

; 408  :     (void)PyMethod_ClearFreeList();
; 409  : }

  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	e9 00 00 00 00	 jmp	 PyMethod_ClearFreeList
PyMethod_Fini ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@DGLFAKJJ@free?5PyMethodObject?$AA@	; `string'
PUBLIC	_PyMethod_DebugMallocStats
EXTRN	_PyDebugAllocatorStats:PROC
;	COMDAT ??_C@_0BE@DGLFAKJJ@free?5PyMethodObject?$AA@
CONST	SEGMENT
??_C@_0BE@DGLFAKJJ@free?5PyMethodObject?$AA@ DB 'free PyMethodObject', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyMethod_DebugMallocStats
_TEXT	SEGMENT
out$ = 8
_PyMethod_DebugMallocStats PROC				; COMDAT

; 415  :     _PyDebugAllocatorStats(out,
; 416  :                            "free PyMethodObject",
; 417  :                            numfree, sizeof(PyMethodObject));

  00000	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR numfree
  00007	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@DGLFAKJJ@free?5PyMethodObject?$AA@
  0000e	41 b9 80 00 00
	00		 mov	 r9d, 128		; 00000080H

; 418  : }

  00014	e9 00 00 00 00	 jmp	 _PyDebugAllocatorStats
_PyMethod_DebugMallocStats ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@FNDNKJGP@PyInstanceMethod_New?$AA@	; `string'
PUBLIC	PyInstanceMethod_New
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyInstanceMethod_New DD imagerel $LN18
	DD	imagerel $LN18+291
	DD	imagerel $unwind$PyInstanceMethod_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInstanceMethod_New DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BF@FNDNKJGP@PyInstanceMethod_New?$AA@
CONST	SEGMENT
??_C@_0BF@FNDNKJGP@PyInstanceMethod_New?$AA@ DB 'PyInstanceMethod_New', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\classobject.c
CONST	ENDS
;	COMDAT PyInstanceMethod_New
_TEXT	SEGMENT
func$ = 64
PyInstanceMethod_New PROC				; COMDAT

; 425  : PyInstanceMethod_New(PyObject *func) {

$LN18:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b d9	 mov	 rbx, rcx

; 426  :     PyInstanceMethodObject *method;
; 427  :     method = PyObject_GC_New(PyInstanceMethodObject,
; 428  :                              &PyInstanceMethod_Type);

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyInstanceMethod_Type
  00019	85 c0		 test	 eax, eax
  0001b	74 07		 je	 SHORT $LN9@PyInstance
  0001d	e8 00 00 00 00	 call	 _PxObject_New
  00022	eb 05		 jmp	 SHORT $LN17@PyInstance
$LN9@PyInstance:
  00024	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN17@PyInstance:
  00029	48 8b f8	 mov	 rdi, rax

; 429  :     if (method == NULL) return NULL;

  0002c	48 85 c0	 test	 rax, rax
  0002f	75 0b		 jne	 SHORT $LN6@PyInstance

; 434  : }

  00031	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00036	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
$LN6@PyInstance:

; 430  :     Py_INCREF(func);

  0003c	e8 00 00 00 00	 call	 _Py_PXCTX
  00041	85 c0		 test	 eax, eax
  00043	75 32		 jne	 SHORT $LN14@PyInstance
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00053	4c 8b cb	 mov	 r9, rbx
  00056	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00064	e8 00 00 00 00	 call	 _PyParallel_Guard
  00069	85 c0		 test	 eax, eax
  0006b	75 06		 jne	 SHORT $LN13@PyInstance
  0006d	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00071	74 04		 je	 SHORT $LN14@PyInstance
$LN13@PyInstance:
  00073	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN14@PyInstance:

; 431  :     method->func = func;
; 432  :     _PyObject_GC_TRACK(method);

  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@FNDNKJGP@PyInstanceMethod_New?$AA@
  00085	4c 8b cf	 mov	 r9, rdi
  00088	41 b8 b0 01 00
	00		 mov	 r8d, 432		; 000001b0H
  0008e	48 89 5f 60	 mov	 QWORD PTR [rdi+96], rbx
  00092	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0009a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009f	85 c0		 test	 eax, eax
  000a1	75 72		 jne	 SHORT $LN2@PyInstance
  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@FNDNKJGP@PyInstanceMethod_New?$AA@
  000b1	4c 8b cf	 mov	 r9, rdi
  000b4	41 b8 b0 01 00
	00		 mov	 r8d, 432		; 000001b0H
  000ba	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c2	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c7	85 c0		 test	 eax, eax
  000c9	74 04		 je	 SHORT $LN11@PyInstance
  000cb	33 db		 xor	 ebx, ebx
  000cd	eb 04		 jmp	 SHORT $LN12@PyInstance
$LN11@PyInstance:
  000cf	48 8d 5f e8	 lea	 rbx, QWORD PTR [rdi-24]
$LN12@PyInstance:
  000d3	48 83 7b 10 fe	 cmp	 QWORD PTR [rbx+16], -2
  000d8	74 0c		 je	 SHORT $LN1@PyInstance
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  000e1	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyInstance:
  000e6	48 c7 43 10 fd
	ff ff ff	 mov	 QWORD PTR [rbx+16], -3
  000ee	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  000f5	48 89 03	 mov	 QWORD PTR [rbx], rax
  000f8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  000ff	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00103	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  00107	48 89 19	 mov	 QWORD PTR [rcx], rbx
  0010a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00111	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
$LN2@PyInstance:

; 433  :     return (PyObject *)method;

  00115	48 8b c7	 mov	 rax, rdi

; 434  : }

  00118	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0011d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00121	5f		 pop	 rdi
  00122	c3		 ret	 0
PyInstanceMethod_New ENDP
_TEXT	ENDS
PUBLIC	PyInstanceMethod_Function
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInstanceMethod_Function DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$PyInstanceMethod_Function
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInstanceMethod_Function DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyInstanceMethod_Function
_TEXT	SEGMENT
im$ = 48
PyInstanceMethod_Function PROC				; COMDAT

; 438  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 439  :     if (!PyInstanceMethod_Check(im)) {

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyInstanceMethod_Type
  0000b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0000f	74 18		 je	 SHORT $LN1@PyInstance@2

; 440  :         PyErr_BadInternalCall();

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00018	ba b8 01 00 00	 mov	 edx, 440		; 000001b8H
  0001d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 441  :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 444  : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
$LN1@PyInstance@2:

; 442  :     }
; 443  :     return PyInstanceMethod_GET_FUNCTION(im);

  00029	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]

; 444  : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
PyInstanceMethod_Function ENDP
_TEXT	ENDS
_BSS	SEGMENT
?docstr@?1??instancemethod_get_doc@@9@9 DQ 01H DUP (?)	; `instancemethod_get_doc'::`2'::docstr
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$instancemethod_get_doc DD imagerel instancemethod_get_doc
	DD	imagerel instancemethod_get_doc+68
	DD	imagerel $unwind$instancemethod_get_doc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_get_doc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT instancemethod_get_doc
_TEXT	SEGMENT
self$ = 48
context$ = 56
instancemethod_get_doc PROC				; COMDAT

; 456  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 457  :     static PyObject *docstr;
; 458  :     if (docstr == NULL) {

  00006	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?docstr@?1??instancemethod_get_doc@@9@9
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 85 c0	 test	 rax, rax
  00013	75 1e		 jne	 SHORT $LN1@instanceme

; 459  :         docstr = PyUnicode_InternFromString("__doc__");

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
  0001c	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00021	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?docstr@?1??instancemethod_get_doc@@9@9, rax

; 460  :         if (docstr == NULL)

  00028	48 85 c0	 test	 rax, rax
  0002b	75 06		 jne	 SHORT $LN1@instanceme

; 464  : }

  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5b		 pop	 rbx
  00032	c3		 ret	 0
$LN1@instanceme:

; 461  :             return NULL;
; 462  :     }
; 463  :     return PyObject_GetAttr(PyInstanceMethod_GET_FUNCTION(self), docstr);

  00033	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00037	48 8b d0	 mov	 rdx, rax

; 464  : }

  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5b		 pop	 rbx
  0003f	e9 00 00 00 00	 jmp	 PyObject_GetAttr
instancemethod_get_doc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$instancemethod_getattro DD imagerel instancemethod_getattro
	DD	imagerel instancemethod_getattro+179
	DD	imagerel $unwind$instancemethod_getattro
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_getattro DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT instancemethod_getattro
_TEXT	SEGMENT
self$ = 48
name$ = 56
instancemethod_getattro PROC				; COMDAT

; 473  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 474  :     PyTypeObject *tp = self->ob_type;

  0000f	48 8b 59 58	 mov	 rbx, QWORD PTR [rcx+88]
  00013	48 8b f2	 mov	 rsi, rdx
  00016	48 8b f9	 mov	 rdi, rcx

; 475  :     PyObject *descr = NULL;
; 476  : 
; 477  :     if (tp->tp_dict == NULL) {

  00019	48 83 bb 60 01
	00 00 00	 cmp	 QWORD PTR [rbx+352], 0
  00021	75 1e		 jne	 SHORT $LN4@instanceme@2

; 478  :         if (PyType_Ready(tp) < 0)

  00023	48 8b cb	 mov	 rcx, rbx
  00026	e8 00 00 00 00	 call	 PyType_Ready
  0002b	85 c0		 test	 eax, eax
  0002d	79 12		 jns	 SHORT $LN4@instanceme@2

; 479  :             return NULL;

  0002f	33 c0		 xor	 eax, eax

; 494  : }

  00031	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00036	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
$LN4@instanceme@2:

; 480  :     }
; 481  :     descr = _PyType_Lookup(tp, name);

  00041	48 8b d6	 mov	 rdx, rsi
  00044	48 8b cb	 mov	 rcx, rbx
  00047	e8 00 00 00 00	 call	 _PyType_Lookup
  0004c	48 8b d8	 mov	 rbx, rax

; 482  : 
; 483  :     if (descr != NULL) {

  0004f	48 85 c0	 test	 rax, rax
  00052	74 44		 je	 SHORT $LN1@instanceme@2

; 484  :         descrgetfunc f = TP_DESCR_GET(descr->ob_type);

  00054	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00058	48 8b 81 68 01
	00 00		 mov	 rax, QWORD PTR [rcx+360]

; 485  :         if (f != NULL)
; 486  :             return f(descr, self, (PyObject *)self->ob_type);

  0005f	48 8b cb	 mov	 rcx, rbx
  00062	48 85 c0	 test	 rax, rax
  00065	74 19		 je	 SHORT $LN2@instanceme@2
  00067	4c 8b 47 58	 mov	 r8, QWORD PTR [rdi+88]
  0006b	48 8b d7	 mov	 rdx, rdi

; 494  : }

  0006e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00073	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00078	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007c	5f		 pop	 rdi
  0007d	48 ff e0	 rex_jmp rax
$LN2@instanceme@2:

; 487  :         else {
; 488  :             Py_INCREF(descr);

  00080	e8 00 00 00 00	 call	 _Py_IncRef

; 489  :             return descr;

  00085	48 8b c3	 mov	 rax, rbx

; 494  : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00092	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00096	5f		 pop	 rdi
  00097	c3		 ret	 0
$LN1@instanceme@2:

; 490  :         }
; 491  :     }
; 492  : 
; 493  :     return PyObject_GetAttr(PyInstanceMethod_GET_FUNCTION(self), name);

  00098	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  0009c	48 8b d6	 mov	 rdx, rsi

; 494  : }

  0009f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a4	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ad	5f		 pop	 rdi
  000ae	e9 00 00 00 00	 jmp	 PyObject_GetAttr
instancemethod_getattro ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@FBLCJLOK@instancemethod_dealloc?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$instancemethod_dealloc DD imagerel instancemethod_dealloc
	DD	imagerel instancemethod_dealloc+155
	DD	imagerel $unwind$instancemethod_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_dealloc DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BH@FBLCJLOK@instancemethod_dealloc?$AA@
CONST	SEGMENT
??_C@_0BH@FBLCJLOK@instancemethod_dealloc?$AA@ DB 'instancemethod_dealloc'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT instancemethod_dealloc
_TEXT	SEGMENT
self$ = 64
instancemethod_dealloc PROC				; COMDAT

; 497  : instancemethod_dealloc(PyObject *self) {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 498  :     _PyObject_GC_UNTRACK(self);

  00009	4c 8b c9	 mov	 r9, rcx
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@FBLCJLOK@instancemethod_dealloc?$AA@
  0001a	41 b8 f2 01 00
	00		 mov	 r8d, 498		; 000001f2H
  00020	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00028	e8 00 00 00 00	 call	 _PyParallel_Guard
  0002d	85 c0		 test	 eax, eax
  0002f	75 54		 jne	 SHORT $LN1@instanceme@3
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@FBLCJLOK@instancemethod_dealloc?$AA@
  0003f	4c 8b cb	 mov	 r9, rbx
  00042	41 b8 f2 01 00
	00		 mov	 r8d, 498		; 000001f2H
  00048	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00050	e8 00 00 00 00	 call	 _PyParallel_Guard
  00055	85 c0		 test	 eax, eax
  00057	74 04		 je	 SHORT $LN7@instanceme@3
  00059	33 d2		 xor	 edx, edx
  0005b	eb 04		 jmp	 SHORT $LN8@instanceme@3
$LN7@instanceme@3:
  0005d	48 8d 53 e8	 lea	 rdx, QWORD PTR [rbx-24]
$LN8@instanceme@3:
  00061	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00064	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  00068	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00070	48 89 01	 mov	 QWORD PTR [rcx], rax
  00073	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  00076	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0007a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0007e	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN1@instanceme@3:

; 499  :     Py_DECREF(PyInstanceMethod_GET_FUNCTION(self));

  00085	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00089	e8 00 00 00 00	 call	 _Py_DecRef

; 500  :     PyObject_GC_Del(self);

  0008e	48 8b cb	 mov	 rcx, rbx

; 501  : }

  00091	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00095	5b		 pop	 rbx
  00096	e9 00 00 00 00	 jmp	 PyObject_GC_Del
instancemethod_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@JDLCDDOC@instancemethod_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$instancemethod_traverse DD imagerel instancemethod_traverse
	DD	imagerel instancemethod_traverse+97
	DD	imagerel $unwind$instancemethod_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BI@JDLCDDOC@instancemethod_traverse?$AA@
CONST	SEGMENT
??_C@_0BI@JDLCDDOC@instancemethod_traverse?$AA@ DB 'instancemethod_traver'
	DB	'se', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT instancemethod_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
instancemethod_traverse PROC				; COMDAT

; 504  : instancemethod_traverse(PyObject *self, visitproc visit, void *arg) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 505  :     Py_VISIT(PyInstanceMethod_GET_FUNCTION(self));

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@instanceme@4
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@JDLCDDOC@instancemethod_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 f9 01 00
	00		 mov	 r8d, 505		; 000001f9H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@instanceme@4:
  0003d	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@instanceme@4
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@instanceme@4
$LN5@instanceme@4:

; 506  :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@instanceme@4:

; 507  : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
instancemethod_traverse ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT instancemethod_call
_TEXT	SEGMENT
self$ = 8
arg$ = 16
kw$ = 24
instancemethod_call PROC				; COMDAT

; 512  :     return PyObject_Call(PyMethod_GET_FUNCTION(self), arg, kw);

  00000	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]

; 513  : }

  00004	e9 00 00 00 00	 jmp	 PyObject_Call
instancemethod_call ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$instancemethod_descr_get DD imagerel instancemethod_descr_get
	DD	imagerel instancemethod_descr_get+96
	DD	imagerel $unwind$instancemethod_descr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_descr_get DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\classobject.c
xdata	ENDS
;	COMDAT instancemethod_descr_get
_TEXT	SEGMENT
descr$ = 64
obj$ = 72
type$ = 80
instancemethod_descr_get PROC				; COMDAT

; 516  : instancemethod_descr_get(PyObject *descr, PyObject *obj, PyObject *type) {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 517  :     register PyObject *func = PyInstanceMethod_GET_FUNCTION(descr);

  00006	48 8b 59 60	 mov	 rbx, QWORD PTR [rcx+96]

; 518  :     if (obj == NULL) {

  0000a	48 85 d2	 test	 rdx, rdx
  0000d	75 44		 jne	 SHORT $LN2@instanceme@5

; 519  :         Py_INCREF(func);

  0000f	e8 00 00 00 00	 call	 _Py_PXCTX
  00014	85 c0		 test	 eax, eax
  00016	75 32		 jne	 SHORT $LN6@instanceme@5
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00026	4c 8b cb	 mov	 r9, rbx
  00029	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00037	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003c	85 c0		 test	 eax, eax
  0003e	75 06		 jne	 SHORT $LN5@instanceme@5
  00040	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00044	74 04		 je	 SHORT $LN6@instanceme@5
$LN5@instanceme@5:
  00046	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN6@instanceme@5:

; 520  :         return func;

  0004a	48 8b c3	 mov	 rax, rbx

; 524  : }

  0004d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00051	5b		 pop	 rbx
  00052	c3		 ret	 0
$LN2@instanceme@5:

; 521  :     }
; 522  :     else
; 523  :         return PyMethod_New(func, obj);

  00053	48 8b cb	 mov	 rcx, rbx

; 524  : }

  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	5b		 pop	 rbx
  0005b	e9 00 00 00 00	 jmp	 PyMethod_New
instancemethod_descr_get ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$instancemethod_richcompare DD imagerel instancemethod_richcompare
	DD	imagerel instancemethod_richcompare+239
	DD	imagerel $unwind$instancemethod_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_richcompare DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\classobject.c
xdata	ENDS
;	COMDAT instancemethod_richcompare
_TEXT	SEGMENT
self$ = 64
other$ = 72
op$ = 80
instancemethod_richcompare PROC				; COMDAT

; 528  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	41 8b d8	 mov	 ebx, r8d

; 529  :     PyInstanceMethodObject *a, *b;
; 530  :     PyObject *res;
; 531  :     int eq;
; 532  : 
; 533  :     if ((op != Py_EQ && op != Py_NE) ||
; 534  :         !PyInstanceMethod_Check(self) ||
; 535  :         !PyInstanceMethod_Check(other))

  00009	41 83 f8 02	 cmp	 r8d, 2
  0000d	74 09		 je	 SHORT $LN4@instanceme@6
  0000f	83 fb 03	 cmp	 ebx, 3
  00012	0f 85 85 00 00
	00		 jne	 $LN5@instanceme@6
$LN4@instanceme@6:
  00018	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyInstanceMethod_Type
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	75 78		 jne	 SHORT $LN5@instanceme@6
  00025	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00029	75 72		 jne	 SHORT $LN5@instanceme@6

; 538  :     }
; 539  :     a = (PyInstanceMethodObject *)self;
; 540  :     b = (PyInstanceMethodObject *)other;
; 541  :     eq = PyObject_RichCompareBool(a->func, b->func, Py_EQ);

  0002b	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  0002f	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00033	41 b8 02 00 00
	00		 mov	 r8d, 2
  00039	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0003e	44 8b d8	 mov	 r11d, eax

; 542  :     if (eq < 0)

  00041	85 c0		 test	 eax, eax
  00043	79 08		 jns	 SHORT $LN3@instanceme@6

; 543  :         return NULL;

  00045	33 c0		 xor	 eax, eax

; 550  : }

  00047	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004b	5b		 pop	 rbx
  0004c	c3		 ret	 0
$LN3@instanceme@6:

; 544  :     if (op == Py_EQ)

  0004d	83 fb 02	 cmp	 ebx, 2
  00050	75 26		 jne	 SHORT $LN2@instanceme@6

; 545  :         res = eq ? Py_True : Py_False;

  00052	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00059	45 85 db	 test	 r11d, r11d
  0005c	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00063	48 0f 45 d8	 cmovne	 rbx, rax

; 548  :     Py_INCREF(res);

  00067	48 8b cb	 mov	 rcx, rbx
  0006a	e8 00 00 00 00	 call	 _Py_IncRef

; 549  :     return res;

  0006f	48 8b c3	 mov	 rax, rbx

; 550  : }

  00072	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00076	5b		 pop	 rbx
  00077	c3		 ret	 0
$LN2@instanceme@6:

; 546  :     else
; 547  :         res = eq ? Py_False : Py_True;

  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  0007f	85 c0		 test	 eax, eax
  00081	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_TrueStruct
  00088	48 0f 45 d9	 cmovne	 rbx, rcx

; 548  :     Py_INCREF(res);

  0008c	48 8b cb	 mov	 rcx, rbx
  0008f	e8 00 00 00 00	 call	 _Py_IncRef

; 549  :     return res;

  00094	48 8b c3	 mov	 rax, rbx

; 550  : }

  00097	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009b	5b		 pop	 rbx
  0009c	c3		 ret	 0
$LN5@instanceme@6:

; 536  :     {
; 537  :         Py_RETURN_NOTIMPLEMENTED;

  0009d	e8 00 00 00 00	 call	 _Py_PXCTX
  000a2	85 c0		 test	 eax, eax
  000a4	75 3c		 jne	 SHORT $LN10@instanceme@6
  000a6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NotImplementedStruct
  000ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000bb	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000c1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ce	85 c0		 test	 eax, eax
  000d0	75 09		 jne	 SHORT $LN9@instanceme@6
  000d2	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NotImplementedStruct+32, 32 ; 00000020H
  000d9	74 07		 je	 SHORT $LN10@instanceme@6
$LN9@instanceme@6:
  000db	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NotImplementedStruct+80
$LN10@instanceme@6:
  000e2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct

; 550  : }

  000e9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ed	5b		 pop	 rbx
  000ee	c3		 ret	 0
instancemethod_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@MOMGEOKD@?$DMinstancemethod?5?$CFV?5at?5?$CFp?$DO?$AA@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$instancemethod_repr DD imagerel instancemethod_repr
	DD	imagerel instancemethod_repr+74
	DD	imagerel $unwind$instancemethod_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$instancemethod_repr DD imagerel instancemethod_repr+74
	DD	imagerel instancemethod_repr+121
	DD	imagerel $chain$0$instancemethod_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$instancemethod_repr DD imagerel instancemethod_repr+121
	DD	imagerel instancemethod_repr+282
	DD	imagerel $chain$2$instancemethod_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$instancemethod_repr DD imagerel instancemethod_repr+282
	DD	imagerel instancemethod_repr+306
	DD	imagerel $chain$4$instancemethod_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$instancemethod_repr DD imagerel instancemethod_repr+306
	DD	imagerel instancemethod_repr+328
	DD	imagerel $chain$6$instancemethod_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$instancemethod_repr DD 020021H
	DD	083400H
	DD	imagerel instancemethod_repr
	DD	imagerel instancemethod_repr+74
	DD	imagerel $unwind$instancemethod_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$instancemethod_repr DD 020021H
	DD	083400H
	DD	imagerel instancemethod_repr
	DD	imagerel instancemethod_repr+74
	DD	imagerel $unwind$instancemethod_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$instancemethod_repr DD 020021H
	DD	083400H
	DD	imagerel instancemethod_repr
	DD	imagerel instancemethod_repr+74
	DD	imagerel $unwind$instancemethod_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$instancemethod_repr DD 020521H
	DD	083405H
	DD	imagerel instancemethod_repr
	DD	imagerel instancemethod_repr+74
	DD	imagerel $unwind$instancemethod_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_repr DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0BK@MOMGEOKD@?$DMinstancemethod?5?$CFV?5at?5?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0BK@MOMGEOKD@?$DMinstancemethod?5?$CFV?5at?5?$CFp?$DO?$AA@ DB '<ins'
	DB	'tancemethod %V at %p>', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\classobject.c
CONST	ENDS
;	COMDAT instancemethod_repr
_TEXT	SEGMENT
self$ = 64
instancemethod_repr PROC				; COMDAT

; 554  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f9	 mov	 rdi, rcx

; 555  :     PyObject *func = PyInstanceMethod_Function(self);

  00009	e8 00 00 00 00	 call	 PyInstanceMethod_Function
  0000e	4c 8b d8	 mov	 r11, rax

; 556  :     PyObject *funcname = NULL , *result = NULL;
; 557  :     char *defname = "?";
; 558  : 
; 559  :     if (func == NULL) {

  00011	48 85 c0	 test	 rax, rax
  00014	75 19		 jne	 SHORT $LN9@instanceme@7

; 560  :         PyErr_BadInternalCall();

  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  0001d	ba 30 02 00 00	 mov	 edx, 560		; 00000230H
  00022	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 561  :         return NULL;

  00027	33 c0		 xor	 eax, eax

; 580  : }

  00029	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
$LN9@instanceme@7:

; 562  :     }
; 563  : 
; 564  :     funcname = _PyObject_GetAttrId(func, &PyId___name__);

  0002f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00035	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0003e	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:PyId___name__
  00043	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00047	49 8b cb	 mov	 rcx, r11
  0004a	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0004f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00054	48 8b d8	 mov	 rbx, rax

; 565  :     if (funcname == NULL) {

  00057	48 85 c0	 test	 rax, rax
  0005a	75 24		 jne	 SHORT $LN8@instanceme@7

; 566  :         if (!PyErr_ExceptionMatches(PyExc_AttributeError))

  0005c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00063	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00068	85 c0		 test	 eax, eax
  0006a	75 0d		 jne	 SHORT $LN7@instanceme@7

; 567  :             return NULL;

  0006c	33 c0		 xor	 eax, eax
  0006e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 580  : }

  00073	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00077	5f		 pop	 rdi
  00078	c3		 ret	 0
$LN7@instanceme@7:

; 568  :         PyErr_Clear();

  00079	e8 00 00 00 00	 call	 PyErr_Clear
  0007e	eb 1a		 jmp	 SHORT $LN5@instanceme@7
$LN8@instanceme@7:

; 569  :     }
; 570  :     else if (!PyUnicode_Check(funcname)) {

  00080	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00084	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0008e	75 0a		 jne	 SHORT $LN5@instanceme@7

; 571  :         Py_DECREF(funcname);

  00090	48 8b cb	 mov	 rcx, rbx
  00093	e8 00 00 00 00	 call	 _Py_DecRef

; 572  :         funcname = NULL;

  00098	33 db		 xor	 ebx, ebx
$LN5@instanceme@7:

; 573  :     }
; 574  : 
; 575  :     result = PyUnicode_FromFormat("<instancemethod %V at %p>",
; 576  :                                   funcname, defname, self);

  0009a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@MOMGEOKD@?$DMinstancemethod?5?$CFV?5at?5?$CFp?$DO?$AA@
  000a8	4c 8b cf	 mov	 r9, rdi
  000ab	48 8b d3	 mov	 rdx, rbx
  000ae	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000b3	48 8b f8	 mov	 rdi, rax

; 577  : 
; 578  :     Py_XDECREF(funcname);

  000b6	48 85 db	 test	 rbx, rbx
  000b9	74 7f		 je	 SHORT $LN3@instanceme@7
  000bb	e8 00 00 00 00	 call	 _Py_PXCTX
  000c0	85 c0		 test	 eax, eax
  000c2	75 76		 jne	 SHORT $LN3@instanceme@7
  000c4	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  000c8	f6 c1 20	 test	 cl, 32			; 00000020H
  000cb	75 65		 jne	 SHORT $LN16@instanceme@7
  000cd	84 c9		 test	 cl, cl
  000cf	78 61		 js	 SHORT $LN16@instanceme@7
  000d1	f6 c1 02	 test	 cl, 2
  000d4	75 64		 jne	 SHORT $LN3@instanceme@7
  000d6	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000da	75 5e		 jne	 SHORT $LN3@instanceme@7
  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000ea	4c 8b cb	 mov	 r9, rbx
  000ed	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000f3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000fb	e8 00 00 00 00	 call	 _PyParallel_Guard
  00100	48 8b cb	 mov	 rcx, rbx
  00103	85 c0		 test	 eax, eax
  00105	74 13		 je	 SHORT $LN21@instanceme@7
  00107	e8 00 00 00 00	 call	 _Px_Dealloc
  0010c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 579  :     return result;

  00111	48 8b c7	 mov	 rax, rdi

; 580  : }

  00114	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00118	5f		 pop	 rdi
  00119	c3		 ret	 0

; 577  : 
; 578  :     Py_XDECREF(funcname);

$LN21@instanceme@7:
  0011a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0011e	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00124	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 579  :     return result;

  00129	48 8b c7	 mov	 rax, rdi

; 580  : }

  0012c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00130	5f		 pop	 rdi
  00131	c3		 ret	 0

; 577  : 
; 578  :     Py_XDECREF(funcname);

$LN16@instanceme@7:
  00132	48 8b cb	 mov	 rcx, rbx
  00135	e8 00 00 00 00	 call	 Px_DecRef
$LN3@instanceme@7:

; 579  :     return result;

  0013a	48 8b c7	 mov	 rax, rdi
  0013d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 580  : }

  00142	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00146	5f		 pop	 rdi
  00147	c3		 ret	 0
instancemethod_repr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$instancemethod_new DD imagerel instancemethod_new
	DD	imagerel instancemethod_new+123
	DD	imagerel $unwind$instancemethod_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_new DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT instancemethod_new
_TEXT	SEGMENT
type$ = 64
args$ = 72
kw$ = 80
func$ = 88
instancemethod_new PROC					; COMDAT

; 605  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 606  :     PyObject *func;
; 607  : 
; 608  :     if (!_PyArg_NoKeywords("instancemethod", kw))

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@NKEHLIOI@instancemethod?$AA@
  00010	49 8b d0	 mov	 rdx, r8
  00013	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00018	85 c0		 test	 eax, eax

; 609  :         return NULL;

  0001a	74 47		 je	 SHORT $LN6@instanceme@8

; 610  :     if (!PyArg_UnpackTuple(args, "instancemethod", 1, 1, &func))

  0001c	48 8d 44 24 58	 lea	 rax, QWORD PTR func$[rsp]
  00021	41 b9 01 00 00
	00		 mov	 r9d, 1
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@NKEHLIOI@instancemethod?$AA@
  0002e	45 8b c1	 mov	 r8d, r9d
  00031	48 8b cb	 mov	 rcx, rbx
  00034	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00039	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003e	85 c0		 test	 eax, eax

; 611  :         return NULL;

  00040	74 21		 je	 SHORT $LN6@instanceme@8

; 612  :     if (!PyCallable_Check(func)) {

  00042	48 8b 4c 24 58	 mov	 rcx, QWORD PTR func$[rsp]
  00047	e8 00 00 00 00	 call	 PyCallable_Check
  0004c	85 c0		 test	 eax, eax
  0004e	75 1b		 jne	 SHORT $LN1@instanceme@8

; 613  :         PyErr_SetString(PyExc_TypeError,
; 614  :                         "first argument must be callable");

  00050	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@
  0005e	e8 00 00 00 00	 call	 PyErr_SetString
$LN6@instanceme@8:

; 615  :         return NULL;

  00063	33 c0		 xor	 eax, eax

; 619  : }

  00065	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00069	5b		 pop	 rbx
  0006a	c3		 ret	 0
$LN1@instanceme@8:

; 616  :     }
; 617  : 
; 618  :     return PyInstanceMethod_New(func);

  0006b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR func$[rsp]
  00070	e8 00 00 00 00	 call	 PyInstanceMethod_New

; 619  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
instancemethod_new ENDP
_TEXT	ENDS
END
