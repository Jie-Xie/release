; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Py_PackageContext
_BSS	SEGMENT
_Py_PackageContext DQ 01H DUP (?)
_BSS	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@KGLNCEEN@unmatched?5paren?5in?5format?$AA@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\python\modsupport.c
pdata	SEGMENT
$pdata$countformat DD imagerel countformat
	DD	imagerel countformat+282
	DD	imagerel $unwind$countformat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$countformat DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BK@KGLNCEEN@unmatched?5paren?5in?5format?$AA@
CONST	SEGMENT
??_C@_0BK@KGLNCEEN@unmatched?5paren?5in?5format?$AA@ DB 'unmatched paren '
	DB	'in format', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT countformat
_TEXT	SEGMENT
format$ = 48
endchar$ = 56
countformat PROC					; COMDAT

; 18   : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 19   :     int count = 0;

  00004	45 33 d2	 xor	 r10d, r10d
  00007	4c 8b c1	 mov	 r8, rcx

; 20   :     int level = 0;

  0000a	4c 8d 1d 00 00
	00 00		 lea	 r11, OFFSET FLAT:__ImageBase
  00011	45 8b ca	 mov	 r9d, r10d
$LL12@countforma:

; 21   :     while (level > 0 || *format != endchar) {

  00014	45 85 c9	 test	 r9d, r9d
  00017	7f 08		 jg	 SHORT $LN10@countforma
  00019	41 0f be 00	 movsx	 eax, BYTE PTR [r8]
  0001d	3b c2		 cmp	 eax, edx
  0001f	74 44		 je	 SHORT $LN11@countforma
$LN10@countforma:

; 22   :         switch (*format) {

  00021	49 0f be 00	 movsx	 rax, BYTE PTR [r8]
  00025	83 f8 7d	 cmp	 eax, 125		; 0000007dH
  00028	77 2e		 ja	 SHORT $LN2@countforma
  0002a	41 0f b6 84 03
	00 00 00 00	 movzx	 eax, BYTE PTR $LN17@countforma[r11+rax]
  00033	41 8b 8c 83 00
	00 00 00	 mov	 ecx, DWORD PTR $LN18@countforma[r11+rax*4]
  0003b	49 03 cb	 add	 rcx, r11
  0003e	ff e1		 jmp	 rcx
$LN6@countforma:

; 28   :         case '(':
; 29   :         case '[':
; 30   :         case '{':
; 31   :             if (level == 0)

  00040	45 85 c9	 test	 r9d, r9d
  00043	75 03		 jne	 SHORT $LN5@countforma

; 32   :                 count++;

  00045	41 ff c2	 inc	 r10d
$LN5@countforma:

; 33   :             level++;

  00048	41 ff c1	 inc	 r9d

; 50   :         }
; 51   :         format++;

  0004b	49 ff c0	 inc	 r8

; 52   :     }

  0004e	eb c4		 jmp	 SHORT $LL12@countforma
$LN4@countforma:

; 34   :             break;
; 35   :         case ')':
; 36   :         case ']':
; 37   :         case '}':
; 38   :             level--;

  00050	41 ff c9	 dec	 r9d

; 50   :         }
; 51   :         format++;

  00053	49 ff c0	 inc	 r8

; 52   :     }

  00056	eb bc		 jmp	 SHORT $LL12@countforma
$LN2@countforma:

; 39   :             break;
; 40   :         case '#':
; 41   :         case '&':
; 42   :         case ',':
; 43   :         case ':':
; 44   :         case ' ':
; 45   :         case '\t':
; 46   :             break;
; 47   :         default:
; 48   :             if (level == 0)

  00058	45 85 c9	 test	 r9d, r9d
  0005b	75 03		 jne	 SHORT $LN1@countforma

; 49   :                 count++;

  0005d	41 ff c2	 inc	 r10d
$LN1@countforma:

; 50   :         }
; 51   :         format++;

  00060	49 ff c0	 inc	 r8

; 52   :     }

  00063	eb af		 jmp	 SHORT $LL12@countforma
$LN11@countforma:

; 53   :     return count;

  00065	41 8b c2	 mov	 eax, r10d

; 54   : }

  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	c3		 ret	 0
$LN7@countforma:

; 23   :         case '\0':
; 24   :             /* Premature end */
; 25   :             PyErr_SetString(PyExc_SystemError,
; 26   :                             "unmatched paren in format");

  0006d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@KGLNCEEN@unmatched?5paren?5in?5format?$AA@
  0007b	e8 00 00 00 00	 call	 PyErr_SetString

; 27   :             return -1;

  00080	83 c8 ff	 or	 eax, -1

; 54   : }

  00083	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00087	c3		 ret	 0
$LN18@countforma:
  00088	00 00 00 00	 DD	 $LN7@countforma
  0008c	00 00 00 00	 DD	 $LN1@countforma
  00090	00 00 00 00	 DD	 $LN6@countforma
  00094	00 00 00 00	 DD	 $LN4@countforma
  00098	00 00 00 00	 DD	 $LN2@countforma
$LN17@countforma:
  0009c	00		 DB	 0
  0009d	04		 DB	 4
  0009e	04		 DB	 4
  0009f	04		 DB	 4
  000a0	04		 DB	 4
  000a1	04		 DB	 4
  000a2	04		 DB	 4
  000a3	04		 DB	 4
  000a4	04		 DB	 4
  000a5	01		 DB	 1
  000a6	04		 DB	 4
  000a7	04		 DB	 4
  000a8	04		 DB	 4
  000a9	04		 DB	 4
  000aa	04		 DB	 4
  000ab	04		 DB	 4
  000ac	04		 DB	 4
  000ad	04		 DB	 4
  000ae	04		 DB	 4
  000af	04		 DB	 4
  000b0	04		 DB	 4
  000b1	04		 DB	 4
  000b2	04		 DB	 4
  000b3	04		 DB	 4
  000b4	04		 DB	 4
  000b5	04		 DB	 4
  000b6	04		 DB	 4
  000b7	04		 DB	 4
  000b8	04		 DB	 4
  000b9	04		 DB	 4
  000ba	04		 DB	 4
  000bb	04		 DB	 4
  000bc	01		 DB	 1
  000bd	04		 DB	 4
  000be	04		 DB	 4
  000bf	01		 DB	 1
  000c0	04		 DB	 4
  000c1	04		 DB	 4
  000c2	01		 DB	 1
  000c3	04		 DB	 4
  000c4	02		 DB	 2
  000c5	03		 DB	 3
  000c6	04		 DB	 4
  000c7	04		 DB	 4
  000c8	01		 DB	 1
  000c9	04		 DB	 4
  000ca	04		 DB	 4
  000cb	04		 DB	 4
  000cc	04		 DB	 4
  000cd	04		 DB	 4
  000ce	04		 DB	 4
  000cf	04		 DB	 4
  000d0	04		 DB	 4
  000d1	04		 DB	 4
  000d2	04		 DB	 4
  000d3	04		 DB	 4
  000d4	04		 DB	 4
  000d5	04		 DB	 4
  000d6	01		 DB	 1
  000d7	04		 DB	 4
  000d8	04		 DB	 4
  000d9	04		 DB	 4
  000da	04		 DB	 4
  000db	04		 DB	 4
  000dc	04		 DB	 4
  000dd	04		 DB	 4
  000de	04		 DB	 4
  000df	04		 DB	 4
  000e0	04		 DB	 4
  000e1	04		 DB	 4
  000e2	04		 DB	 4
  000e3	04		 DB	 4
  000e4	04		 DB	 4
  000e5	04		 DB	 4
  000e6	04		 DB	 4
  000e7	04		 DB	 4
  000e8	04		 DB	 4
  000e9	04		 DB	 4
  000ea	04		 DB	 4
  000eb	04		 DB	 4
  000ec	04		 DB	 4
  000ed	04		 DB	 4
  000ee	04		 DB	 4
  000ef	04		 DB	 4
  000f0	04		 DB	 4
  000f1	04		 DB	 4
  000f2	04		 DB	 4
  000f3	04		 DB	 4
  000f4	04		 DB	 4
  000f5	04		 DB	 4
  000f6	04		 DB	 4
  000f7	02		 DB	 2
  000f8	04		 DB	 4
  000f9	03		 DB	 3
  000fa	04		 DB	 4
  000fb	04		 DB	 4
  000fc	04		 DB	 4
  000fd	04		 DB	 4
  000fe	04		 DB	 4
  000ff	04		 DB	 4
  00100	04		 DB	 4
  00101	04		 DB	 4
  00102	04		 DB	 4
  00103	04		 DB	 4
  00104	04		 DB	 4
  00105	04		 DB	 4
  00106	04		 DB	 4
  00107	04		 DB	 4
  00108	04		 DB	 4
  00109	04		 DB	 4
  0010a	04		 DB	 4
  0010b	04		 DB	 4
  0010c	04		 DB	 4
  0010d	04		 DB	 4
  0010e	04		 DB	 4
  0010f	04		 DB	 4
  00110	04		 DB	 4
  00111	04		 DB	 4
  00112	04		 DB	 4
  00113	04		 DB	 4
  00114	04		 DB	 4
  00115	04		 DB	 4
  00116	04		 DB	 4
  00117	02		 DB	 2
  00118	04		 DB	 4
  00119	03		 DB	 3
countformat ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@CJGIJEPM@Unmatched?5paren?5in?5format?$AA@ ; `string'
EXTRN	PyDict_SetItem:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyDict_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$do_mkdict DD imagerel do_mkdict
	DD	imagerel do_mkdict+57
	DD	imagerel $unwind$do_mkdict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$do_mkdict DD imagerel do_mkdict+57
	DD	imagerel do_mkdict+93
	DD	imagerel $chain$0$do_mkdict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$do_mkdict DD imagerel do_mkdict+93
	DD	imagerel do_mkdict+500
	DD	imagerel $chain$4$do_mkdict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$do_mkdict DD 060c21H
	DD	07640cH
	DD	0e5405H
	DD	06d400H
	DD	imagerel do_mkdict
	DD	imagerel do_mkdict+57
	DD	imagerel $unwind$do_mkdict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$do_mkdict DD 020521H
	DD	06d405H
	DD	imagerel do_mkdict
	DD	imagerel do_mkdict+57
	DD	imagerel $unwind$do_mkdict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$do_mkdict DD 061601H
	DD	0f0127216H
	DD	0c00ee010H
	DD	0300b700cH
xdata	ENDS
;	COMDAT ??_C@_0BK@CJGIJEPM@Unmatched?5paren?5in?5format?$AA@
CONST	SEGMENT
??_C@_0BK@CJGIJEPM@Unmatched?5paren?5in?5format?$AA@ DB 'Unmatched paren '
	DB	'in format', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\modsupport.c
CONST	ENDS
;	COMDAT do_mkdict
_TEXT	SEGMENT
p_format$ = 112
p_va$ = 120
endchar$ = 128
n$ = 136
flags$ = 144
do_mkdict PROC						; COMDAT

; 68   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	53		 push	 rbx
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	41 56		 push	 r14
  00010	41 57		 push	 r15
  00012	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 69   :     PyObject *d;
; 70   :     int i;
; 71   :     int itemfailed = 0;

  00016	45 33 e4	 xor	 r12d, r12d
  00019	45 8b f9	 mov	 r15d, r9d
  0001c	41 8b f8	 mov	 edi, r8d
  0001f	48 8b da	 mov	 rbx, rdx
  00022	4c 8b f1	 mov	 r14, rcx

; 72   :     if (n < 0)

  00025	45 85 c9	 test	 r9d, r9d
  00028	79 0f		 jns	 SHORT $LN12@do_mkdict

; 73   :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 110  : }

  0002c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00030	41 5f		 pop	 r15
  00032	41 5e		 pop	 r14
  00034	41 5c		 pop	 r12
  00036	5f		 pop	 rdi
  00037	5b		 pop	 rbx
  00038	c3		 ret	 0
$LN12@do_mkdict:
  00039	4c 89 6c 24 30	 mov	 QWORD PTR [rsp+48], r13

; 74   :     if ((d = PyDict_New()) == NULL)

  0003e	e8 00 00 00 00	 call	 PyDict_New
  00043	4c 8b e8	 mov	 r13, rax
  00046	48 85 c0	 test	 rax, rax
  00049	75 12		 jne	 SHORT $LN11@do_mkdict
  0004b	4c 8b 6c 24 30	 mov	 r13, QWORD PTR [rsp+48]

; 110  : }

  00050	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00054	41 5f		 pop	 r15
  00056	41 5e		 pop	 r14
  00058	41 5c		 pop	 r12
  0005a	5f		 pop	 rdi
  0005b	5b		 pop	 rbx
  0005c	c3		 ret	 0
$LN11@do_mkdict:
  0005d	48 89 6c 24 70	 mov	 QWORD PTR [rsp+112], rbp

; 75   :         return NULL;
; 76   :     /* Note that we can't bail immediately on error as this will leak
; 77   :        refcounts on any 'N' arguments. */
; 78   :     for (i = 0; i < n; i+= 2) {

  00062	33 ed		 xor	 ebp, ebp
  00064	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  00069	45 85 ff	 test	 r15d, r15d
  0006c	0f 8e 22 01 00
	00		 jle	 $LN8@do_mkdict
  00072	8b bc 24 90 00
	00 00		 mov	 edi, DWORD PTR flags$[rsp]
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@do_mkdict:

; 79   :         PyObject *k, *v;
; 80   :         int err;
; 81   :         k = do_mkvalue(p_format, p_va, flags);

  00080	44 8b c7	 mov	 r8d, edi
  00083	48 8b d3	 mov	 rdx, rbx
  00086	49 8b ce	 mov	 rcx, r14
  00089	e8 00 00 00 00	 call	 do_mkvalue
  0008e	48 8b f0	 mov	 rsi, rax

; 82   :         if (k == NULL) {

  00091	48 85 c0	 test	 rax, rax
  00094	75 50		 jne	 SHORT $LN7@do_mkdict

; 83   :             itemfailed = 1;

  00096	44 8d 60 01	 lea	 r12d, QWORD PTR [rax+1]

; 84   :             Py_INCREF(Py_None);

  0009a	e8 00 00 00 00	 call	 _Py_PXCTX
  0009f	85 c0		 test	 eax, eax
  000a1	75 3c		 jne	 SHORT $LN16@do_mkdict
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000b8	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000be	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cb	85 c0		 test	 eax, eax
  000cd	75 09		 jne	 SHORT $LN15@do_mkdict
  000cf	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000d6	74 07		 je	 SHORT $LN16@do_mkdict
$LN15@do_mkdict:
  000d8	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN16@do_mkdict:

; 85   :             k = Py_None;

  000df	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
$LN7@do_mkdict:

; 86   :         }
; 87   :         v = do_mkvalue(p_format, p_va, flags);

  000e6	44 8b c7	 mov	 r8d, edi
  000e9	48 8b d3	 mov	 rdx, rbx
  000ec	49 8b ce	 mov	 rcx, r14
  000ef	e8 00 00 00 00	 call	 do_mkvalue
  000f4	48 8b f8	 mov	 rdi, rax

; 88   :         if (v == NULL) {

  000f7	48 85 c0	 test	 rax, rax
  000fa	75 50		 jne	 SHORT $LN6@do_mkdict

; 89   :             itemfailed = 1;

  000fc	44 8d 60 01	 lea	 r12d, QWORD PTR [rax+1]

; 90   :             Py_INCREF(Py_None);

  00100	e8 00 00 00 00	 call	 _Py_PXCTX
  00105	85 c0		 test	 eax, eax
  00107	75 3c		 jne	 SHORT $LN20@do_mkdict
  00109	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00110	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00117	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0011e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00124	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0012c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00131	85 c0		 test	 eax, eax
  00133	75 09		 jne	 SHORT $LN19@do_mkdict
  00135	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0013c	74 07		 je	 SHORT $LN20@do_mkdict
$LN19@do_mkdict:
  0013e	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN20@do_mkdict:

; 91   :             v = Py_None;

  00145	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
$LN6@do_mkdict:

; 92   :         }
; 93   :         err = PyDict_SetItem(d, k, v);

  0014c	4c 8b c7	 mov	 r8, rdi
  0014f	48 8b d6	 mov	 rdx, rsi
  00152	49 8b cd	 mov	 rcx, r13
  00155	e8 00 00 00 00	 call	 PyDict_SetItem

; 94   :         Py_DECREF(k);

  0015a	48 8b ce	 mov	 rcx, rsi
  0015d	8b d8		 mov	 ebx, eax
  0015f	e8 00 00 00 00	 call	 _Py_DecRef

; 95   :         Py_DECREF(v);

  00164	48 8b cf	 mov	 rcx, rdi
  00167	e8 00 00 00 00	 call	 _Py_DecRef

; 96   :         if (err < 0 || itemfailed) {

  0016c	85 db		 test	 ebx, ebx
  0016e	78 4e		 js	 SHORT $LN24@do_mkdict
  00170	45 85 e4	 test	 r12d, r12d
  00173	75 49		 jne	 SHORT $LN24@do_mkdict

; 75   :         return NULL;
; 76   :     /* Note that we can't bail immediately on error as this will leak
; 77   :        refcounts on any 'N' arguments. */
; 78   :     for (i = 0; i < n; i+= 2) {

  00175	48 8b 5c 24 78	 mov	 rbx, QWORD PTR p_va$[rsp]
  0017a	8b bc 24 90 00
	00 00		 mov	 edi, DWORD PTR flags$[rsp]
  00181	83 c5 02	 add	 ebp, 2
  00184	41 3b ef	 cmp	 ebp, r15d
  00187	0f 8c f3 fe ff
	ff		 jl	 $LL10@do_mkdict

; 96   :         if (err < 0 || itemfailed) {

  0018d	8b bc 24 80 00
	00 00		 mov	 edi, DWORD PTR endchar$[rsp]
$LN8@do_mkdict:

; 99   :         }
; 100  :     }
; 101  :     if (d != NULL && **p_format != endchar) {

  00194	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  00197	0f be 01	 movsx	 eax, BYTE PTR [rcx]
  0019a	3b c7		 cmp	 eax, edi
  0019c	74 2c		 je	 SHORT $LN3@do_mkdict

; 102  :         Py_DECREF(d);

  0019e	49 8b cd	 mov	 rcx, r13
  001a1	e8 00 00 00 00	 call	 _Py_DecRef

; 103  :         d = NULL;
; 104  :         PyErr_SetString(PyExc_SystemError,
; 105  :                         "Unmatched paren in format");

  001a6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@CJGIJEPM@Unmatched?5paren?5in?5format?$AA@
  001b4	45 33 ed	 xor	 r13d, r13d
  001b7	e8 00 00 00 00	 call	 PyErr_SetString
  001bc	eb 17		 jmp	 SHORT $LN1@do_mkdict
$LN24@do_mkdict:

; 97   :             Py_DECREF(d);

  001be	49 8b cd	 mov	 rcx, r13
  001c1	e8 00 00 00 00	 call	 _Py_DecRef

; 98   :             return NULL;

  001c6	33 c0		 xor	 eax, eax
  001c8	eb 0e		 jmp	 SHORT $LN28@do_mkdict
$LN3@do_mkdict:

; 106  :     }
; 107  :     else if (endchar)

  001ca	85 ff		 test	 edi, edi
  001cc	74 07		 je	 SHORT $LN1@do_mkdict

; 108  :         ++*p_format;

  001ce	48 8d 41 01	 lea	 rax, QWORD PTR [rcx+1]
  001d2	49 89 06	 mov	 QWORD PTR [r14], rax
$LN1@do_mkdict:

; 109  :     return d;

  001d5	49 8b c5	 mov	 rax, r13
$LN28@do_mkdict:
  001d8	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  001dd	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  001e2	4c 8b 6c 24 30	 mov	 r13, QWORD PTR [rsp+48]

; 110  : }

  001e7	48 83 c4 40	 add	 rsp, 64			; 00000040H
  001eb	41 5f		 pop	 r15
  001ed	41 5e		 pop	 r14
  001ef	41 5c		 pop	 r12
  001f1	5f		 pop	 rdi
  001f2	5b		 pop	 rbx
  001f3	c3		 ret	 0
do_mkdict ENDP
_TEXT	ENDS
EXTRN	PyList_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$do_mklist DD imagerel do_mklist
	DD	imagerel do_mklist+75
	DD	imagerel $unwind$do_mklist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$do_mklist DD imagerel do_mklist+75
	DD	imagerel do_mklist+92
	DD	imagerel $chain$2$do_mklist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$do_mklist DD imagerel do_mklist+92
	DD	imagerel do_mklist+239
	DD	imagerel $chain$3$do_mklist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$do_mklist DD imagerel do_mklist+239
	DD	imagerel do_mklist+315
	DD	imagerel $chain$4$do_mklist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$do_mklist DD imagerel do_mklist+315
	DD	imagerel do_mklist+337
	DD	imagerel $chain$5$do_mklist
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$do_mklist DD 021H
	DD	imagerel do_mklist
	DD	imagerel do_mklist+75
	DD	imagerel $unwind$do_mklist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$do_mklist DD 021H
	DD	imagerel do_mklist+75
	DD	imagerel do_mklist+92
	DD	imagerel $chain$2$do_mklist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$do_mklist DD 020521H
	DD	06f405H
	DD	imagerel do_mklist+75
	DD	imagerel do_mklist+92
	DD	imagerel $chain$2$do_mklist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$do_mklist DD 020521H
	DD	0e7405H
	DD	imagerel do_mklist
	DD	imagerel do_mklist+75
	DD	imagerel $unwind$do_mklist
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$do_mklist DD 093401H
	DD	0d5434H
	DD	0c342fH
	DD	0e008620cH
	DD	0c004d006H
	DD	06002H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\modsupport.c
xdata	ENDS
;	COMDAT do_mklist
_TEXT	SEGMENT
p_format$ = 96
p_va$ = 104
endchar$ = 112
n$ = 120
flags$ = 128
do_mklist PROC						; COMDAT

; 114  : {

  00000	40 56		 push	 rsi
  00002	41 54		 push	 r12
  00004	41 55		 push	 r13
  00006	41 56		 push	 r14
  00008	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 115  :     PyObject *v;
; 116  :     int i;
; 117  :     int itemfailed = 0;

  0000c	33 f6		 xor	 esi, esi
  0000e	45 8b e8	 mov	 r13d, r8d
  00011	4c 8b f2	 mov	 r14, rdx
  00014	4c 8b e1	 mov	 r12, rcx

; 118  :     if (n < 0)

  00017	45 85 c9	 test	 r9d, r9d
  0001a	79 0e		 jns	 SHORT $LN9@do_mklist

; 119  :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 149  : }

  0001e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00022	41 5e		 pop	 r14
  00024	41 5d		 pop	 r13
  00026	41 5c		 pop	 r12
  00028	5e		 pop	 rsi
  00029	c3		 ret	 0
$LN9@do_mklist:
  0002a	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  0002f	48 89 6c 24 68	 mov	 QWORD PTR [rsp+104], rbp

; 120  :     v = PyList_New(n);

  00034	49 63 e9	 movsxd	 rbp, r9d
  00037	48 8b cd	 mov	 rcx, rbp
  0003a	e8 00 00 00 00	 call	 PyList_New
  0003f	48 8b d8	 mov	 rbx, rax

; 121  :     if (v == NULL)

  00042	48 85 c0	 test	 rax, rax
  00045	0f 84 f0 00 00
	00		 je	 $LN19@do_mklist
$LN8@do_mklist:
  0004b	48 89 7c 24 70	 mov	 QWORD PTR [rsp+112], rdi

; 122  :         return NULL;
; 123  :     /* Note that we can't bail immediately on error as this will leak
; 124  :        refcounts on any 'N' arguments. */
; 125  :     for (i = 0; i < n; i++) {

  00050	48 8b fe	 mov	 rdi, rsi
  00053	48 85 ed	 test	 rbp, rbp
  00056	0f 8e 9f 00 00
	00		 jle	 $LN3@do_mklist
  0005c	4c 89 7c 24 30	 mov	 QWORD PTR [rsp+48], r15
  00061	44 8b bc 24 80
	00 00 00	 mov	 r15d, DWORD PTR flags$[rsp]
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@do_mklist:

; 126  :         PyObject *w = do_mkvalue(p_format, p_va, flags);

  00070	45 8b c7	 mov	 r8d, r15d
  00073	49 8b d6	 mov	 rdx, r14
  00076	49 8b cc	 mov	 rcx, r12
  00079	e8 00 00 00 00	 call	 do_mkvalue
  0007e	4c 8b d8	 mov	 r11, rax

; 127  :         if (w == NULL) {

  00081	48 85 c0	 test	 rax, rax
  00084	75 4f		 jne	 SHORT $LN4@do_mklist

; 128  :             itemfailed = 1;

  00086	8d 70 01	 lea	 esi, QWORD PTR [rax+1]

; 129  :             Py_INCREF(Py_None);

  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 3c		 jne	 SHORT $LN13@do_mklist
  00092	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a7	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ad	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ba	85 c0		 test	 eax, eax
  000bc	75 09		 jne	 SHORT $LN12@do_mklist
  000be	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000c5	74 07		 je	 SHORT $LN13@do_mklist
$LN12@do_mklist:
  000c7	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN13@do_mklist:

; 130  :             w = Py_None;

  000ce	4c 8d 1d 00 00
	00 00		 lea	 r11, OFFSET FLAT:_Py_NoneStruct
$LN4@do_mklist:

; 131  :         }
; 132  :         PyList_SET_ITEM(v, i, w);

  000d5	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  000d9	48 ff c7	 inc	 rdi
  000dc	4c 89 5c f8 f8	 mov	 QWORD PTR [rax+rdi*8-8], r11
  000e1	48 3b fd	 cmp	 rdi, rbp
  000e4	7c 8a		 jl	 SHORT $LL7@do_mklist

; 133  :     }
; 134  : 
; 135  :     if (itemfailed) {

  000e6	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]
  000eb	85 f6		 test	 esi, esi
  000ed	74 0c		 je	 SHORT $LN3@do_mklist

; 136  :         /* do_mkvalue() should have already set an error */
; 137  :         Py_DECREF(v);

  000ef	48 8b cb	 mov	 rcx, rbx
  000f2	e8 00 00 00 00	 call	 _Py_DecRef

; 138  :         return NULL;

  000f7	33 c0		 xor	 eax, eax
  000f9	eb 3b		 jmp	 SHORT $LN20@do_mklist
$LN3@do_mklist:

; 139  :     }
; 140  :     if (**p_format != endchar) {

  000fb	49 8b 0c 24	 mov	 rcx, QWORD PTR [r12]
  000ff	0f be 01	 movsx	 eax, BYTE PTR [rcx]
  00102	41 3b c5	 cmp	 eax, r13d
  00105	74 1f		 je	 SHORT $LN2@do_mklist

; 141  :         Py_DECREF(v);

  00107	48 8b cb	 mov	 rcx, rbx
  0010a	e8 00 00 00 00	 call	 _Py_DecRef

; 142  :         PyErr_SetString(PyExc_SystemError,
; 143  :                         "Unmatched paren in format");

  0010f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@CJGIJEPM@Unmatched?5paren?5in?5format?$AA@
  0011d	e8 00 00 00 00	 call	 PyErr_SetString

; 144  :         return NULL;

  00122	33 c0		 xor	 eax, eax
  00124	eb 10		 jmp	 SHORT $LN20@do_mklist
$LN2@do_mklist:

; 145  :     }
; 146  :     if (endchar)

  00126	45 85 ed	 test	 r13d, r13d
  00129	74 08		 je	 SHORT $LN1@do_mklist

; 147  :         ++*p_format;

  0012b	48 8d 41 01	 lea	 rax, QWORD PTR [rcx+1]
  0012f	49 89 04 24	 mov	 QWORD PTR [r12], rax
$LN1@do_mklist:

; 148  :     return v;

  00133	48 8b c3	 mov	 rax, rbx
$LN20@do_mklist:
  00136	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]
$LN19@do_mklist:
  0013b	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00140	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]

; 149  : }

  00145	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00149	41 5e		 pop	 r14
  0014b	41 5d		 pop	 r13
  0014d	41 5c		 pop	 r12
  0014f	5e		 pop	 rsi
  00150	c3		 ret	 0
do_mklist ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@OKDAJOM@NULL?5object?5passed?5to?5Py_BuildVa@ ; `string'
PUBLIC	??_C@_0CB@JEDFEEEP@string?5too?5long?5for?5Python?5bytes@ ; `string'
PUBLIC	??_C@_0CC@GABEGKLK@string?5too?5long?5for?5Python?5strin@ ; `string'
PUBLIC	$T21048
PUBLIC	??_C@_0CI@EEIIKDKA@bad?5format?5char?5passed?5to?5Py_Bui@ ; `string'
EXTRN	PyErr_Occurred:PROC
EXTRN	PyUnicode_FromStringAndSize:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyUnicode_FromOrdinal:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	PyComplex_FromCComplex:PROC
EXTRN	PyFloat_FromDouble:PROC
EXTRN	PyUnicode_FromUnicode:PROC
EXTRN	Py_UNICODE_strlen:PROC
EXTRN	PyLong_FromUnsignedLongLong:PROC
EXTRN	PyLong_FromLongLong:PROC
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyLong_FromUnsignedLong:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$do_mkvalue DD imagerel do_mkvalue
	DD	imagerel do_mkvalue+451
	DD	imagerel $unwind$do_mkvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$do_mkvalue DD imagerel do_mkvalue+451
	DD	imagerel do_mkvalue+547
	DD	imagerel $chain$0$do_mkvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$do_mkvalue DD imagerel do_mkvalue+547
	DD	imagerel do_mkvalue+598
	DD	imagerel $chain$2$do_mkvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$do_mkvalue DD imagerel do_mkvalue+598
	DD	imagerel do_mkvalue+1415
	DD	imagerel $chain$3$do_mkvalue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$do_mkvalue DD 021H
	DD	imagerel do_mkvalue
	DD	imagerel do_mkvalue+451
	DD	imagerel $unwind$do_mkvalue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$do_mkvalue DD 020021H
	DD	0b6400H
	DD	imagerel do_mkvalue
	DD	imagerel do_mkvalue+451
	DD	imagerel $unwind$do_mkvalue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$do_mkvalue DD 020521H
	DD	0b6405H
	DD	imagerel do_mkvalue
	DD	imagerel do_mkvalue+451
	DD	imagerel $unwind$do_mkvalue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$do_mkvalue DD 060f01H
	DD	0d540fH
	DD	0c340fH
	DD	0700b720fH
xdata	ENDS
;	COMDAT ??_C@_0CE@OKDAJOM@NULL?5object?5passed?5to?5Py_BuildVa@
CONST	SEGMENT
??_C@_0CE@OKDAJOM@NULL?5object?5passed?5to?5Py_BuildVa@ DB 'NULL object p'
	DB	'assed to Py_BuildValue', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JEDFEEEP@string?5too?5long?5for?5Python?5bytes@
CONST	SEGMENT
??_C@_0CB@JEDFEEEP@string?5too?5long?5for?5Python?5bytes@ DB 'string too '
	DB	'long for Python bytes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GABEGKLK@string?5too?5long?5for?5Python?5strin@
CONST	SEGMENT
??_C@_0CC@GABEGKLK@string?5too?5long?5for?5Python?5strin@ DB 'string too '
	DB	'long for Python string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EEIIKDKA@bad?5format?5char?5passed?5to?5Py_Bui@
CONST	SEGMENT
??_C@_0CI@EEIIKDKA@bad?5format?5char?5passed?5to?5Py_Bui@ DB 'bad format '
	DB	'char passed to Py_BuildValue', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT do_mkvalue
_TEXT	SEGMENT
$T21048 = 48
p$20522 = 80
p_format$ = 80
p_va$ = 88
flags$ = 96
do_mkvalue PROC						; COMDAT

; 190  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 191  :     for (;;) {
; 192  :         switch (*(*p_format)++) {

  0000f	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00012	48 8b d9	 mov	 rbx, rcx
  00015	41 8b e8	 mov	 ebp, r8d
  00018	0f be 08	 movsx	 ecx, BYTE PTR [rax]
  0001b	48 ff c0	 inc	 rax
  0001e	48 8b fa	 mov	 rdi, rdx
  00021	83 c1 f7	 add	 ecx, -9
  00024	48 89 03	 mov	 QWORD PTR [rbx], rax
  00027	83 f9 72	 cmp	 ecx, 114		; 00000072H
  0002a	77 33		 ja	 SHORT $LN1@do_mkvalue
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
$LL54@do_mkvalue:
  00033	48 63 c1	 movsxd	 rax, ecx
  00036	0f b6 84 02 00
	00 00 00	 movzx	 eax, BYTE PTR $LN58@do_mkvalue[rdx+rax]
  0003e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN59@do_mkvalue[rdx+rax*4]
  00045	48 03 ca	 add	 rcx, rdx
  00048	ff e1		 jmp	 rcx
$LN7@do_mkvalue:
  0004a	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0004d	48 ff c0	 inc	 rax
  00050	0f be 48 ff	 movsx	 ecx, BYTE PTR [rax-1]
  00054	48 89 03	 mov	 QWORD PTR [rbx], rax
  00057	83 c1 f7	 add	 ecx, -9
  0005a	83 f9 72	 cmp	 ecx, 114		; 00000072H
  0005d	76 d4		 jbe	 SHORT $LL54@do_mkvalue
$LN1@do_mkvalue:

; 386  :         }
; 387  : 
; 388  :         case ':':
; 389  :         case ',':
; 390  :         case ' ':
; 391  :         case '\t':
; 392  :             break;
; 393  : 
; 394  :         default:
; 395  :             PyErr_SetString(PyExc_SystemError,
; 396  :                 "bad format char passed to Py_BuildValue");

  0005f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00066	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@EEIIKDKA@bad?5format?5char?5passed?5to?5Py_Bui@
$LN60@do_mkvalue:
  0006d	e8 00 00 00 00	 call	 PyErr_SetString

; 397  :             return NULL;

  00072	33 c0		 xor	 eax, eax

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  00074	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00079	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0007e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00082	5f		 pop	 rdi
  00083	c3		 ret	 0
$LN50@do_mkvalue:

; 193  :         case '(':
; 194  :             return do_mktuple(p_format, p_va, ')',
; 195  :                               countformat(*p_format, ')'), flags);

  00084	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00087	ba 29 00 00 00	 mov	 edx, 41			; 00000029H
  0008c	e8 00 00 00 00	 call	 countformat
  00091	41 b8 29 00 00
	00		 mov	 r8d, 41			; 00000029H
  00097	48 8b d7	 mov	 rdx, rdi
  0009a	48 8b cb	 mov	 rcx, rbx
  0009d	44 8b c8	 mov	 r9d, eax
  000a0	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  000a4	e8 00 00 00 00	 call	 do_mktuple

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  000a9	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  000ae	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  000b3	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000b7	5f		 pop	 rdi
  000b8	c3		 ret	 0
$LN49@do_mkvalue:

; 196  : 
; 197  :         case '[':
; 198  :             return do_mklist(p_format, p_va, ']',
; 199  :                              countformat(*p_format, ']'), flags);

  000b9	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  000bc	ba 5d 00 00 00	 mov	 edx, 93			; 0000005dH
  000c1	e8 00 00 00 00	 call	 countformat
  000c6	41 b8 5d 00 00
	00		 mov	 r8d, 93			; 0000005dH
  000cc	48 8b d7	 mov	 rdx, rdi
  000cf	48 8b cb	 mov	 rcx, rbx
  000d2	44 8b c8	 mov	 r9d, eax
  000d5	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  000d9	e8 00 00 00 00	 call	 do_mklist

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  000de	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  000e3	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  000e8	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000ec	5f		 pop	 rdi
  000ed	c3		 ret	 0
$LN48@do_mkvalue:

; 200  : 
; 201  :         case '{':
; 202  :             return do_mkdict(p_format, p_va, '}',
; 203  :                              countformat(*p_format, '}'), flags);

  000ee	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  000f1	ba 7d 00 00 00	 mov	 edx, 125		; 0000007dH
  000f6	e8 00 00 00 00	 call	 countformat
  000fb	41 b8 7d 00 00
	00		 mov	 r8d, 125		; 0000007dH
  00101	48 8b d7	 mov	 rdx, rdi
  00104	48 8b cb	 mov	 rcx, rbx
  00107	44 8b c8	 mov	 r9d, eax
  0010a	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  0010e	e8 00 00 00 00	 call	 do_mkdict

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  00113	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00118	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0011d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00121	5f		 pop	 rdi
  00122	c3		 ret	 0
$LN47@do_mkvalue:

; 204  : 
; 205  :         case 'b':
; 206  :         case 'B':
; 207  :         case 'h':
; 208  :         case 'i':
; 209  :             return PyLong_FromLong((long)va_arg(*p_va, int));

  00123	48 83 07 08	 add	 QWORD PTR [rdi], 8
  00127	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0012a	8b 48 f8	 mov	 ecx, DWORD PTR [rax-8]

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  0012d	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00132	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00137	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0013b	5f		 pop	 rdi
  0013c	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN45@do_mkvalue:

; 210  : 
; 211  :         case 'H':
; 212  :             return PyLong_FromLong((long)va_arg(*p_va, unsigned int));
; 213  : 
; 214  :         case 'I':
; 215  :         {
; 216  :             unsigned int n;
; 217  :             n = va_arg(*p_va, unsigned int);

  00141	48 83 07 08	 add	 QWORD PTR [rdi], 8
  00145	48 8b 07	 mov	 rax, QWORD PTR [rdi]

; 218  :             return PyLong_FromUnsignedLong(n);

  00148	8b 48 f8	 mov	 ecx, DWORD PTR [rax-8]

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  0014b	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00150	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00155	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00159	5f		 pop	 rdi
  0015a	e9 00 00 00 00	 jmp	 PyLong_FromUnsignedLong
$LN44@do_mkvalue:

; 219  :         }
; 220  : 
; 221  :         case 'n':
; 222  : #if SIZEOF_SIZE_T!=SIZEOF_LONG
; 223  :             return PyLong_FromSsize_t(va_arg(*p_va, Py_ssize_t));

  0015f	48 83 07 08	 add	 QWORD PTR [rdi], 8
  00163	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00166	48 8b 49 f8	 mov	 rcx, QWORD PTR [rcx-8]

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  0016a	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0016f	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00174	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00178	5f		 pop	 rdi
  00179	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
$LN41@do_mkvalue:

; 224  : #endif
; 225  :             /* Fall through from 'n' to 'l' if Py_ssize_t is long */
; 226  :         case 'l':
; 227  :             return PyLong_FromLong(va_arg(*p_va, long));
; 228  : 
; 229  :         case 'k':
; 230  :         {
; 231  :             unsigned long n;
; 232  :             n = va_arg(*p_va, unsigned long);
; 233  :             return PyLong_FromUnsignedLong(n);
; 234  :         }
; 235  : 
; 236  : #ifdef HAVE_LONG_LONG
; 237  :         case 'L':
; 238  :             return PyLong_FromLongLong((PY_LONG_LONG)va_arg(*p_va, PY_LONG_LONG));

  0017e	48 83 07 08	 add	 QWORD PTR [rdi], 8
  00182	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00185	48 8b 49 f8	 mov	 rcx, QWORD PTR [rcx-8]

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  00189	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0018e	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00193	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00197	5f		 pop	 rdi
  00198	e9 00 00 00 00	 jmp	 PyLong_FromLongLong
$LN40@do_mkvalue:

; 239  : 
; 240  :         case 'K':
; 241  :             return PyLong_FromUnsignedLongLong((PY_LONG_LONG)va_arg(*p_va, unsigned PY_LONG_LONG));

  0019d	48 83 07 08	 add	 QWORD PTR [rdi], 8
  001a1	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  001a4	48 8b 49 f8	 mov	 rcx, QWORD PTR [rcx-8]

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  001a8	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  001ad	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  001b2	48 83 c4 40	 add	 rsp, 64			; 00000040H
  001b6	5f		 pop	 rdi
  001b7	e9 00 00 00 00	 jmp	 PyLong_FromUnsignedLongLong
$LN39@do_mkvalue:

; 242  : #endif
; 243  :         case 'u':
; 244  :         {
; 245  :             PyObject *v;
; 246  :             Py_UNICODE *u = va_arg(*p_va, Py_UNICODE *);

  001bc	48 83 07 08	 add	 QWORD PTR [rdi], 8
  001c0	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  001c3	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  001c8	48 8b 70 f8	 mov	 rsi, QWORD PTR [rax-8]

; 247  :             Py_ssize_t n;
; 248  :             if (**p_format == '#') {

  001cc	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  001cf	80 38 23	 cmp	 BYTE PTR [rax], 35	; 00000023H
  001d2	75 1f		 jne	 SHORT $LN38@do_mkvalue

; 249  :                 ++*p_format;

  001d4	48 ff c0	 inc	 rax
  001d7	48 89 03	 mov	 QWORD PTR [rbx], rax

; 250  :                 if (flags & FLAG_SIZE_T)
; 251  :                     n = va_arg(*p_va, Py_ssize_t);

  001da	48 83 07 08	 add	 QWORD PTR [rdi], 8
  001de	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  001e1	41 f6 c0 01	 test	 r8b, 1
  001e5	74 06		 je	 SHORT $LN37@do_mkvalue
  001e7	48 8b 48 f8	 mov	 rcx, QWORD PTR [rax-8]

; 252  :                 else

  001eb	eb 0a		 jmp	 SHORT $LN35@do_mkvalue
$LN37@do_mkvalue:

; 253  :                     n = va_arg(*p_va, int);

  001ed	48 63 48 f8	 movsxd	 rcx, DWORD PTR [rax-8]

; 254  :             }
; 255  :             else

  001f1	eb 04		 jmp	 SHORT $LN35@do_mkvalue
$LN38@do_mkvalue:

; 256  :                 n = -1;

  001f3	48 83 c9 ff	 or	 rcx, -1
$LN35@do_mkvalue:

; 257  :             if (u == NULL) {

  001f7	48 85 f6	 test	 rsi, rsi
  001fa	75 27		 jne	 SHORT $LN34@do_mkvalue

; 258  :                 v = Py_None;

  001fc	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct

; 259  :                 Py_INCREF(v);

  00203	48 8b cf	 mov	 rcx, rdi
  00206	e8 00 00 00 00	 call	 _Py_IncRef
  0020b	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]

; 265  :             }
; 266  :             return v;

  00210	48 8b c7	 mov	 rax, rdi

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  00213	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00218	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0021d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00221	5f		 pop	 rdi
  00222	c3		 ret	 0
$LN34@do_mkvalue:

; 260  :             }
; 261  :             else {
; 262  :                 if (n < 0)

  00223	48 85 c9	 test	 rcx, rcx
  00226	79 0b		 jns	 SHORT $LN32@do_mkvalue

; 263  :                     n = Py_UNICODE_strlen(u);

  00228	48 8b ce	 mov	 rcx, rsi
  0022b	e8 00 00 00 00	 call	 Py_UNICODE_strlen
  00230	48 8b c8	 mov	 rcx, rax
$LN32@do_mkvalue:

; 264  :                 v = PyUnicode_FromUnicode(u, n);

  00233	48 8b d1	 mov	 rdx, rcx
  00236	48 8b ce	 mov	 rcx, rsi
  00239	e8 00 00 00 00	 call	 PyUnicode_FromUnicode
  0023e	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00243	48 8b f8	 mov	 rdi, rax

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  00246	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0024b	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00250	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00254	5f		 pop	 rdi
  00255	c3		 ret	 0
$LN31@do_mkvalue:

; 267  :         }
; 268  :         case 'f':
; 269  :         case 'd':
; 270  :             return PyFloat_FromDouble(
; 271  :                 (double)va_arg(*p_va, va_double));

  00256	48 83 07 08	 add	 QWORD PTR [rdi], 8
  0025a	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0025d	f2 0f 10 40 f8	 movsdx	 xmm0, QWORD PTR [rax-8]

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  00262	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00267	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0026c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00270	5f		 pop	 rdi
  00271	e9 00 00 00 00	 jmp	 PyFloat_FromDouble
$LN30@do_mkvalue:

; 272  : 
; 273  :         case 'D':
; 274  :             return PyComplex_FromCComplex(
; 275  :                 *((Py_complex *)va_arg(*p_va, Py_complex *)));

  00276	48 83 07 08	 add	 QWORD PTR [rdi], 8
  0027a	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0027d	48 8b 48 f8	 mov	 rcx, QWORD PTR [rax-8]
  00281	0f 10 01	 movups	 xmm0, XMMWORD PTR [rcx]
  00284	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T21048[rsp]
  00289	0f 29 44 24 30	 movaps	 XMMWORD PTR $T21048[rsp], xmm0
  0028e	e8 00 00 00 00	 call	 PyComplex_FromCComplex

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  00293	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00298	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0029d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  002a1	5f		 pop	 rdi
  002a2	c3		 ret	 0
$LN29@do_mkvalue:

; 276  : 
; 277  :         case 'c':
; 278  :         {
; 279  :             char p[1];
; 280  :             p[0] = (char)va_arg(*p_va, int);

  002a3	48 83 07 08	 add	 QWORD PTR [rdi], 8
  002a7	48 8b 07	 mov	 rax, QWORD PTR [rdi]

; 281  :             return PyBytes_FromStringAndSize(p, 1);

  002aa	ba 01 00 00 00	 mov	 edx, 1
  002af	0f b6 48 f8	 movzx	 ecx, BYTE PTR [rax-8]
  002b3	88 4c 24 50	 mov	 BYTE PTR p$20522[rsp], cl
  002b7	48 8d 4c 24 50	 lea	 rcx, QWORD PTR p$20522[rsp]
  002bc	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  002c1	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  002c6	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  002cb	48 83 c4 40	 add	 rsp, 64			; 00000040H
  002cf	5f		 pop	 rdi
  002d0	c3		 ret	 0
$LN28@do_mkvalue:

; 282  :         }
; 283  :         case 'C':
; 284  :         {
; 285  :             int i = va_arg(*p_va, int);

  002d1	48 83 07 08	 add	 QWORD PTR [rdi], 8
  002d5	48 8b 07	 mov	 rax, QWORD PTR [rdi]

; 286  :             return PyUnicode_FromOrdinal(i);

  002d8	8b 48 f8	 mov	 ecx, DWORD PTR [rax-8]

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  002db	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  002e0	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  002e5	48 83 c4 40	 add	 rsp, 64			; 00000040H
  002e9	5f		 pop	 rdi
  002ea	e9 00 00 00 00	 jmp	 PyUnicode_FromOrdinal
$LN27@do_mkvalue:

; 287  :         }
; 288  : 
; 289  :         case 's':
; 290  :         case 'z':
; 291  :         case 'U':   /* XXX deprecated alias */
; 292  :         {
; 293  :             PyObject *v;
; 294  :             char *str = va_arg(*p_va, char *);

  002ef	48 83 07 08	 add	 QWORD PTR [rdi], 8
  002f3	48 8b 07	 mov	 rax, QWORD PTR [rdi]

; 295  :             Py_ssize_t n;
; 296  :             if (**p_format == '#') {

  002f6	48 83 c9 ff	 or	 rcx, -1
  002fa	4c 8b 40 f8	 mov	 r8, QWORD PTR [rax-8]
  002fe	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00301	80 38 23	 cmp	 BYTE PTR [rax], 35	; 00000023H
  00304	75 1f		 jne	 SHORT $LN26@do_mkvalue

; 297  :                 ++*p_format;

  00306	48 ff c0	 inc	 rax
  00309	48 89 03	 mov	 QWORD PTR [rbx], rax

; 298  :                 if (flags & FLAG_SIZE_T)
; 299  :                     n = va_arg(*p_va, Py_ssize_t);

  0030c	48 83 07 08	 add	 QWORD PTR [rdi], 8
  00310	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00313	40 f6 c5 01	 test	 bpl, 1
  00317	74 06		 je	 SHORT $LN25@do_mkvalue
  00319	48 8b 50 f8	 mov	 rdx, QWORD PTR [rax-8]

; 300  :                 else

  0031d	eb 09		 jmp	 SHORT $LN23@do_mkvalue
$LN25@do_mkvalue:

; 301  :                     n = va_arg(*p_va, int);

  0031f	48 63 50 f8	 movsxd	 rdx, DWORD PTR [rax-8]

; 302  :             }
; 303  :             else

  00323	eb 03		 jmp	 SHORT $LN23@do_mkvalue
$LN26@do_mkvalue:

; 304  :                 n = -1;

  00325	48 8b d1	 mov	 rdx, rcx
$LN23@do_mkvalue:

; 305  :             if (str == NULL) {

  00328	4d 85 c0	 test	 r8, r8
  0032b	75 22		 jne	 SHORT $LN22@do_mkvalue
$LN61@do_mkvalue:

; 306  :                 v = Py_None;

  0032d	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct

; 307  :                 Py_INCREF(v);

  00334	48 8b cf	 mov	 rcx, rdi
  00337	e8 00 00 00 00	 call	 _Py_IncRef

; 320  :             }
; 321  :             return v;

  0033c	48 8b c7	 mov	 rax, rdi

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  0033f	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00344	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00349	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0034d	5f		 pop	 rdi
  0034e	c3		 ret	 0
$LN22@do_mkvalue:

; 308  :             }
; 309  :             else {
; 310  :                 if (n < 0) {

  0034f	48 85 d2	 test	 rdx, rdx
  00352	79 32		 jns	 SHORT $LN19@do_mkvalue

; 311  :                     size_t m = strlen(str);

  00354	33 c0		 xor	 eax, eax
  00356	49 8b f8	 mov	 rdi, r8
  00359	f2 ae		 repne scasb

; 312  :                     if (m > PY_SSIZE_T_MAX) {

  0035b	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00365	48 f7 d1	 not	 rcx
  00368	48 ff c9	 dec	 rcx
  0036b	48 8b d1	 mov	 rdx, rcx
  0036e	48 3b c8	 cmp	 rcx, rax
  00371	76 13		 jbe	 SHORT $LN19@do_mkvalue

; 313  :                         PyErr_SetString(PyExc_OverflowError,
; 314  :                             "string too long for Python string");

  00373	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  0037a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@GABEGKLK@string?5too?5long?5for?5Python?5strin@

; 315  :                         return NULL;

  00381	e9 e7 fc ff ff	 jmp	 $LN60@do_mkvalue
$LN19@do_mkvalue:

; 316  :                     }
; 317  :                     n = (Py_ssize_t)m;
; 318  :                 }
; 319  :                 v = PyUnicode_FromStringAndSize(str, n);

  00386	49 8b c8	 mov	 rcx, r8
  00389	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  0038e	48 8b f8	 mov	 rdi, rax

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  00391	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00396	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0039b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0039f	5f		 pop	 rdi
  003a0	c3		 ret	 0
$LN18@do_mkvalue:

; 322  :         }
; 323  : 
; 324  :         case 'y':
; 325  :         {
; 326  :             PyObject *v;
; 327  :             char *str = va_arg(*p_va, char *);

  003a1	48 83 07 08	 add	 QWORD PTR [rdi], 8
  003a5	48 8b 07	 mov	 rax, QWORD PTR [rdi]

; 328  :             Py_ssize_t n;
; 329  :             if (**p_format == '#') {

  003a8	48 83 c9 ff	 or	 rcx, -1
  003ac	4c 8b 40 f8	 mov	 r8, QWORD PTR [rax-8]
  003b0	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  003b3	80 38 23	 cmp	 BYTE PTR [rax], 35	; 00000023H
  003b6	75 1f		 jne	 SHORT $LN17@do_mkvalue

; 330  :                 ++*p_format;

  003b8	48 ff c0	 inc	 rax
  003bb	48 89 03	 mov	 QWORD PTR [rbx], rax

; 331  :                 if (flags & FLAG_SIZE_T)
; 332  :                     n = va_arg(*p_va, Py_ssize_t);

  003be	48 83 07 08	 add	 QWORD PTR [rdi], 8
  003c2	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  003c5	40 f6 c5 01	 test	 bpl, 1
  003c9	74 06		 je	 SHORT $LN16@do_mkvalue
  003cb	48 8b 50 f8	 mov	 rdx, QWORD PTR [rax-8]

; 333  :                 else

  003cf	eb 09		 jmp	 SHORT $LN14@do_mkvalue
$LN16@do_mkvalue:

; 334  :                     n = va_arg(*p_va, int);

  003d1	48 63 50 f8	 movsxd	 rdx, DWORD PTR [rax-8]

; 335  :             }
; 336  :             else

  003d5	eb 03		 jmp	 SHORT $LN14@do_mkvalue
$LN17@do_mkvalue:

; 337  :                 n = -1;

  003d7	48 8b d1	 mov	 rdx, rcx
$LN14@do_mkvalue:

; 338  :             if (str == NULL) {

  003da	4d 85 c0	 test	 r8, r8

; 339  :                 v = Py_None;
; 340  :                 Py_INCREF(v);
; 341  :             }
; 342  :             else {

  003dd	0f 84 4a ff ff
	ff		 je	 $LN61@do_mkvalue

; 343  :                 if (n < 0) {

  003e3	48 85 d2	 test	 rdx, rdx
  003e6	79 32		 jns	 SHORT $LN10@do_mkvalue

; 344  :                     size_t m = strlen(str);

  003e8	33 c0		 xor	 eax, eax
  003ea	49 8b f8	 mov	 rdi, r8
  003ed	f2 ae		 repne scasb

; 345  :                     if (m > PY_SSIZE_T_MAX) {

  003ef	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  003f9	48 f7 d1	 not	 rcx
  003fc	48 ff c9	 dec	 rcx
  003ff	48 8b d1	 mov	 rdx, rcx
  00402	48 3b c8	 cmp	 rcx, rax
  00405	76 13		 jbe	 SHORT $LN10@do_mkvalue

; 346  :                         PyErr_SetString(PyExc_OverflowError,
; 347  :                             "string too long for Python bytes");

  00407	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  0040e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@JEDFEEEP@string?5too?5long?5for?5Python?5bytes@

; 348  :                         return NULL;

  00415	e9 53 fc ff ff	 jmp	 $LN60@do_mkvalue
$LN10@do_mkvalue:

; 349  :                     }
; 350  :                     n = (Py_ssize_t)m;
; 351  :                 }
; 352  :                 v = PyBytes_FromStringAndSize(str, n);

  0041a	49 8b c8	 mov	 rcx, r8
  0041d	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00422	48 8b f8	 mov	 rdi, rax

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  00425	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0042a	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0042f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00433	5f		 pop	 rdi
  00434	c3		 ret	 0
$LN9@do_mkvalue:

; 353  :             }
; 354  :             return v;
; 355  :         }
; 356  : 
; 357  :         case 'N':
; 358  :         case 'S':
; 359  :         case 'O':
; 360  :         if (**p_format == '&') {

  00435	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00438	80 38 26	 cmp	 BYTE PTR [rax], 38	; 00000026H
  0043b	75 2b		 jne	 SHORT $LN8@do_mkvalue

; 361  :             typedef PyObject *(*converter)(void *);
; 362  :             converter func = va_arg(*p_va, converter);

  0043d	48 83 07 08	 add	 QWORD PTR [rdi], 8
  00441	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00444	48 8b 50 f8	 mov	 rdx, QWORD PTR [rax-8]

; 363  :             void *arg = va_arg(*p_va, void *);

  00448	48 83 c0 08	 add	 rax, 8
  0044c	48 89 07	 mov	 QWORD PTR [rdi], rax
  0044f	48 8b 48 f8	 mov	 rcx, QWORD PTR [rax-8]

; 364  :             ++*p_format;

  00453	48 ff 03	 inc	 QWORD PTR [rbx]

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  00456	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0045b	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00460	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00464	5f		 pop	 rdi
  00465	48 ff e2	 rex_jmp rdx
$LN8@do_mkvalue:

; 365  :             return (*func)(arg);
; 366  :         }
; 367  :         else {
; 368  :             PyObject *v;
; 369  :             v = va_arg(*p_va, PyObject *);

  00468	48 83 07 08	 add	 QWORD PTR [rdi], 8
  0046c	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0046f	48 8b 78 f8	 mov	 rdi, QWORD PTR [rax-8]

; 370  :             if (v != NULL) {

  00473	48 85 ff	 test	 rdi, rdi
  00476	74 24		 je	 SHORT $LN6@do_mkvalue

; 371  :                 if (*(*p_format - 1) != 'N')

  00478	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0047b	80 78 ff 4e	 cmp	 BYTE PTR [rax-1], 78	; 0000004eH
  0047f	74 38		 je	 SHORT $LN3@do_mkvalue

; 372  :                     Py_INCREF(v);

  00481	48 8b cf	 mov	 rcx, rdi
  00484	e8 00 00 00 00	 call	 _Py_IncRef

; 385  :             return v;

  00489	48 8b c7	 mov	 rax, rdi

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  0048c	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00491	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00496	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0049a	5f		 pop	 rdi
  0049b	c3		 ret	 0
$LN6@do_mkvalue:

; 373  :             }
; 374  :             else if (!PyErr_Occurred())

  0049c	e8 00 00 00 00	 call	 PyErr_Occurred
  004a1	48 85 c0	 test	 rax, rax
  004a4	75 13		 jne	 SHORT $LN3@do_mkvalue

; 375  :                 /* If a NULL was passed
; 376  :                  * because a call that should
; 377  :                  * have constructed a value
; 378  :                  * failed, that's OK, and we
; 379  :                  * pass the error on; but if
; 380  :                  * no error occurred it's not
; 381  :                  * clear that the caller knew
; 382  :                  * what she was doing. */
; 383  :                 PyErr_SetString(PyExc_SystemError,
; 384  :                     "NULL object passed to Py_BuildValue");

  004a6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  004ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@OKDAJOM@NULL?5object?5passed?5to?5Py_BuildVa@
  004b4	e8 00 00 00 00	 call	 PyErr_SetString
$LN3@do_mkvalue:

; 398  : 
; 399  :         }
; 400  :     }
; 401  : }

  004b9	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  004be	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  004c3	48 8b c7	 mov	 rax, rdi
  004c6	48 83 c4 40	 add	 rsp, 64			; 00000040H
  004ca	5f		 pop	 rdi
  004cb	c3		 ret	 0
$LN59@do_mkvalue:
  004cc	00 00 00 00	 DD	 $LN7@do_mkvalue
  004d0	00 00 00 00	 DD	 $LN50@do_mkvalue
  004d4	00 00 00 00	 DD	 $LN47@do_mkvalue
  004d8	00 00 00 00	 DD	 $LN28@do_mkvalue
  004dc	00 00 00 00	 DD	 $LN30@do_mkvalue
  004e0	00 00 00 00	 DD	 $LN45@do_mkvalue
  004e4	00 00 00 00	 DD	 $LN40@do_mkvalue
  004e8	00 00 00 00	 DD	 $LN41@do_mkvalue
  004ec	00 00 00 00	 DD	 $LN9@do_mkvalue
  004f0	00 00 00 00	 DD	 $LN27@do_mkvalue
  004f4	00 00 00 00	 DD	 $LN49@do_mkvalue
  004f8	00 00 00 00	 DD	 $LN29@do_mkvalue
  004fc	00 00 00 00	 DD	 $LN31@do_mkvalue
  00500	00 00 00 00	 DD	 $LN44@do_mkvalue
  00504	00 00 00 00	 DD	 $LN39@do_mkvalue
  00508	00 00 00 00	 DD	 $LN18@do_mkvalue
  0050c	00 00 00 00	 DD	 $LN48@do_mkvalue
  00510	00 00 00 00	 DD	 $LN1@do_mkvalue
$LN58@do_mkvalue:
  00514	00		 DB	 0
  00515	11		 DB	 17
  00516	11		 DB	 17
  00517	11		 DB	 17
  00518	11		 DB	 17
  00519	11		 DB	 17
  0051a	11		 DB	 17
  0051b	11		 DB	 17
  0051c	11		 DB	 17
  0051d	11		 DB	 17
  0051e	11		 DB	 17
  0051f	11		 DB	 17
  00520	11		 DB	 17
  00521	11		 DB	 17
  00522	11		 DB	 17
  00523	11		 DB	 17
  00524	11		 DB	 17
  00525	11		 DB	 17
  00526	11		 DB	 17
  00527	11		 DB	 17
  00528	11		 DB	 17
  00529	11		 DB	 17
  0052a	11		 DB	 17
  0052b	00		 DB	 0
  0052c	11		 DB	 17
  0052d	11		 DB	 17
  0052e	11		 DB	 17
  0052f	11		 DB	 17
  00530	11		 DB	 17
  00531	11		 DB	 17
  00532	11		 DB	 17
  00533	01		 DB	 1
  00534	11		 DB	 17
  00535	11		 DB	 17
  00536	11		 DB	 17
  00537	00		 DB	 0
  00538	11		 DB	 17
  00539	11		 DB	 17
  0053a	11		 DB	 17
  0053b	11		 DB	 17
  0053c	11		 DB	 17
  0053d	11		 DB	 17
  0053e	11		 DB	 17
  0053f	11		 DB	 17
  00540	11		 DB	 17
  00541	11		 DB	 17
  00542	11		 DB	 17
  00543	11		 DB	 17
  00544	11		 DB	 17
  00545	00		 DB	 0
  00546	11		 DB	 17
  00547	11		 DB	 17
  00548	11		 DB	 17
  00549	11		 DB	 17
  0054a	11		 DB	 17
  0054b	11		 DB	 17
  0054c	11		 DB	 17
  0054d	02		 DB	 2
  0054e	03		 DB	 3
  0054f	04		 DB	 4
  00550	11		 DB	 17
  00551	11		 DB	 17
  00552	11		 DB	 17
  00553	02		 DB	 2
  00554	05		 DB	 5
  00555	11		 DB	 17
  00556	06		 DB	 6
  00557	07		 DB	 7
  00558	11		 DB	 17
  00559	08		 DB	 8
  0055a	08		 DB	 8
  0055b	11		 DB	 17
  0055c	11		 DB	 17
  0055d	11		 DB	 17
  0055e	08		 DB	 8
  0055f	11		 DB	 17
  00560	09		 DB	 9
  00561	11		 DB	 17
  00562	11		 DB	 17
  00563	11		 DB	 17
  00564	11		 DB	 17
  00565	11		 DB	 17
  00566	0a		 DB	 10
  00567	11		 DB	 17
  00568	11		 DB	 17
  00569	11		 DB	 17
  0056a	11		 DB	 17
  0056b	11		 DB	 17
  0056c	11		 DB	 17
  0056d	02		 DB	 2
  0056e	0b		 DB	 11
  0056f	0c		 DB	 12
  00570	11		 DB	 17
  00571	0c		 DB	 12
  00572	11		 DB	 17
  00573	02		 DB	 2
  00574	02		 DB	 2
  00575	11		 DB	 17
  00576	05		 DB	 5
  00577	02		 DB	 2
  00578	11		 DB	 17
  00579	0d		 DB	 13
  0057a	11		 DB	 17
  0057b	11		 DB	 17
  0057c	11		 DB	 17
  0057d	11		 DB	 17
  0057e	09		 DB	 9
  0057f	11		 DB	 17
  00580	0e		 DB	 14
  00581	11		 DB	 17
  00582	11		 DB	 17
  00583	11		 DB	 17
  00584	0f		 DB	 15
  00585	09		 DB	 9
  00586	10		 DB	 16
do_mkvalue ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@HFKEKDOI@module?5?8?$CFs?8?5has?5no?5__dict__?$AA@ ; `string'
PUBLIC	??_C@_0CK@NBCBIDGD@PyModule_AddObject?$CI?$CJ?5needs?5non?9N@ ; `string'
PUBLIC	??_C@_0CP@ENPEONHI@PyModule_AddObject?$CI?$CJ?5needs?5modul@ ; `string'
PUBLIC	PyModule_AddObject
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyModule_GetName:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyModule_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_AddObject DD imagerel $LN9
	DD	imagerel $LN9+250
	DD	imagerel $unwind$PyModule_AddObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_AddObject DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BM@HFKEKDOI@module?5?8?$CFs?8?5has?5no?5__dict__?$AA@
CONST	SEGMENT
??_C@_0BM@HFKEKDOI@module?5?8?$CFs?8?5has?5no?5__dict__?$AA@ DB 'module '''
	DB	'%s'' has no __dict__', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NBCBIDGD@PyModule_AddObject?$CI?$CJ?5needs?5non?9N@
CONST	SEGMENT
??_C@_0CK@NBCBIDGD@PyModule_AddObject?$CI?$CJ?5needs?5non?9N@ DB 'PyModul'
	DB	'e_AddObject() needs non-NULL value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@ENPEONHI@PyModule_AddObject?$CI?$CJ?5needs?5modul@
CONST	SEGMENT
??_C@_0CP@ENPEONHI@PyModule_AddObject?$CI?$CJ?5needs?5modul@ DB 'PyModule'
	DB	'_AddObject() needs module as first arg', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyModule_AddObject
_TEXT	SEGMENT
m$ = 48
name$ = 56
o$ = 64
PyModule_AddObject PROC					; COMDAT

; 512  : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f9	 mov	 rdi, rcx

; 513  :     PyObject *dict;
; 514  :     if (!PyModule_Check(m)) {

  00012	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00016	48 8b f2	 mov	 rsi, rdx
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00020	49 8b d8	 mov	 rbx, r8
  00023	48 3b ca	 cmp	 rcx, rdx
  00026	74 2f		 je	 SHORT $LN5@PyModule_A
  00028	e8 00 00 00 00	 call	 PyType_IsSubtype
  0002d	85 c0		 test	 eax, eax
  0002f	75 26		 jne	 SHORT $LN5@PyModule_A

; 515  :         PyErr_SetString(PyExc_TypeError,
; 516  :                     "PyModule_AddObject() needs module as first arg");

  00031	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@ENPEONHI@PyModule_AddObject?$CI?$CJ?5needs?5modul@
  0003f	e8 00 00 00 00	 call	 PyErr_SetString
$LN8@PyModule_A:

; 517  :         return -1;

  00044	83 c8 ff	 or	 eax, -1

; 536  :     return 0;
; 537  : }

  00047	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00051	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00055	5f		 pop	 rdi
  00056	c3		 ret	 0
$LN5@PyModule_A:

; 518  :     }
; 519  :     if (!o) {

  00057	48 85 db	 test	 rbx, rbx
  0005a	75 30		 jne	 SHORT $LN4@PyModule_A

; 520  :         if (!PyErr_Occurred())

  0005c	e8 00 00 00 00	 call	 PyErr_Occurred
  00061	48 85 c0	 test	 rax, rax
  00064	75 13		 jne	 SHORT $LN3@PyModule_A

; 521  :             PyErr_SetString(PyExc_TypeError,
; 522  :                             "PyModule_AddObject() needs non-NULL value");

  00066	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@NBCBIDGD@PyModule_AddObject?$CI?$CJ?5needs?5non?9N@
  00074	e8 00 00 00 00	 call	 PyErr_SetString
$LN3@PyModule_A:

; 523  :         return -1;

  00079	83 c8 ff	 or	 eax, -1

; 536  :     return 0;
; 537  : }

  0007c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00081	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00086	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008a	5f		 pop	 rdi
  0008b	c3		 ret	 0
$LN4@PyModule_A:

; 524  :     }
; 525  : 
; 526  :     dict = PyModule_GetDict(m);

  0008c	48 8b cf	 mov	 rcx, rdi
  0008f	e8 00 00 00 00	 call	 PyModule_GetDict

; 527  :     if (dict == NULL) {

  00094	48 85 c0	 test	 rax, rax
  00097	75 31		 jne	 SHORT $LN2@PyModule_A

; 528  :         /* Internal error -- modules must have a dict! */
; 529  :         PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
; 530  :                      PyModule_GetName(m));

  00099	48 8b cf	 mov	 rcx, rdi
  0009c	e8 00 00 00 00	 call	 PyModule_GetName
  000a1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@HFKEKDOI@module?5?8?$CFs?8?5has?5no?5__dict__?$AA@
  000af	4c 8b c0	 mov	 r8, rax
  000b2	e8 00 00 00 00	 call	 PyErr_Format

; 531  :         return -1;

  000b7	83 c8 ff	 or	 eax, -1

; 536  :     return 0;
; 537  : }

  000ba	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000bf	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000c4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c8	5f		 pop	 rdi
  000c9	c3		 ret	 0
$LN2@PyModule_A:

; 532  :     }
; 533  :     if (PyDict_SetItemString(dict, name, o))

  000ca	4c 8b c3	 mov	 r8, rbx
  000cd	48 8b d6	 mov	 rdx, rsi
  000d0	48 8b c8	 mov	 rcx, rax
  000d3	e8 00 00 00 00	 call	 PyDict_SetItemString
  000d8	85 c0		 test	 eax, eax

; 534  :         return -1;

  000da	0f 85 64 ff ff
	ff		 jne	 $LN8@PyModule_A

; 535  :     Py_DECREF(o);

  000e0	48 8b cb	 mov	 rcx, rbx
  000e3	e8 00 00 00 00	 call	 _Py_DecRef

; 536  :     return 0;
; 537  : }

  000e8	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ed	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000f2	33 c0		 xor	 eax, eax
  000f4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f8	5f		 pop	 rdi
  000f9	c3		 ret	 0
PyModule_AddObject ENDP
_TEXT	ENDS
PUBLIC	PyModule_AddIntConstant
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_AddIntConstant DD imagerel $LN6
	DD	imagerel $LN6+98
	DD	imagerel $unwind$PyModule_AddIntConstant
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_AddIntConstant DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyModule_AddIntConstant
_TEXT	SEGMENT
m$ = 48
name$ = 56
value$ = 64
PyModule_AddIntConstant PROC				; COMDAT

; 541  : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f1	 mov	 rsi, rcx

; 542  :     PyObject *o = PyLong_FromLong(value);

  00012	41 8b c8	 mov	 ecx, r8d
  00015	48 8b fa	 mov	 rdi, rdx
  00018	e8 00 00 00 00	 call	 PyLong_FromLong
  0001d	48 8b d8	 mov	 rbx, rax

; 543  :     if (!o)

  00020	48 85 c0	 test	 rax, rax

; 544  :         return -1;

  00023	74 2a		 je	 SHORT $LN5@PyModule_A@2

; 545  :     if (PyModule_AddObject(m, name, o) == 0)

  00025	4c 8b c0	 mov	 r8, rax
  00028	48 8b d7	 mov	 rdx, rdi
  0002b	48 8b ce	 mov	 rcx, rsi
  0002e	e8 00 00 00 00	 call	 PyModule_AddObject
  00033	85 c0		 test	 eax, eax
  00035	75 10		 jne	 SHORT $LN1@PyModule_A@2

; 548  :     return -1;
; 549  : }

  00037	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
$LN1@PyModule_A@2:

; 546  :         return 0;
; 547  :     Py_DECREF(o);

  00047	48 8b cb	 mov	 rcx, rbx
  0004a	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyModule_A@2:

; 548  :     return -1;
; 549  : }

  0004f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00054	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00059	83 c8 ff	 or	 eax, -1
  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5f		 pop	 rdi
  00061	c3		 ret	 0
PyModule_AddIntConstant ENDP
_TEXT	ENDS
PUBLIC	PyModule_AddStringConstant
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_AddStringConstant DD imagerel $LN6
	DD	imagerel $LN6+98
	DD	imagerel $unwind$PyModule_AddStringConstant
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_AddStringConstant DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyModule_AddStringConstant
_TEXT	SEGMENT
m$ = 48
name$ = 56
value$ = 64
PyModule_AddStringConstant PROC				; COMDAT

; 553  : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f1	 mov	 rsi, rcx

; 554  :     PyObject *o = PyUnicode_FromString(value);

  00012	49 8b c8	 mov	 rcx, r8
  00015	48 8b fa	 mov	 rdi, rdx
  00018	e8 00 00 00 00	 call	 PyUnicode_FromString
  0001d	48 8b d8	 mov	 rbx, rax

; 555  :     if (!o)

  00020	48 85 c0	 test	 rax, rax

; 556  :         return -1;

  00023	74 2a		 je	 SHORT $LN5@PyModule_A@3

; 557  :     if (PyModule_AddObject(m, name, o) == 0)

  00025	4c 8b c0	 mov	 r8, rax
  00028	48 8b d7	 mov	 rdx, rdi
  0002b	48 8b ce	 mov	 rcx, rsi
  0002e	e8 00 00 00 00	 call	 PyModule_AddObject
  00033	85 c0		 test	 eax, eax
  00035	75 10		 jne	 SHORT $LN1@PyModule_A@3

; 560  :     return -1;
; 561  : }

  00037	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
$LN1@PyModule_A@3:

; 558  :         return 0;
; 559  :     Py_DECREF(o);

  00047	48 8b cb	 mov	 rcx, rbx
  0004a	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyModule_A@3:

; 560  :     return -1;
; 561  : }

  0004f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00054	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00059	83 c8 ff	 or	 eax, -1
  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5f		 pop	 rdi
  00061	c3		 ret	 0
PyModule_AddStringConstant ENDP
_TEXT	ENDS
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$do_mktuple DD imagerel do_mktuple
	DD	imagerel do_mktuple+85
	DD	imagerel $unwind$do_mktuple
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$do_mktuple DD imagerel do_mktuple+85
	DD	imagerel do_mktuple+238
	DD	imagerel $chain$3$do_mktuple
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$do_mktuple DD imagerel do_mktuple+238
	DD	imagerel do_mktuple+331
	DD	imagerel $chain$4$do_mktuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$do_mktuple DD 021H
	DD	imagerel do_mktuple
	DD	imagerel do_mktuple+85
	DD	imagerel $unwind$do_mktuple
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$do_mktuple DD 040a21H
	DD	06f40aH
	DD	0e7405H
	DD	imagerel do_mktuple
	DD	imagerel do_mktuple+85
	DD	imagerel $unwind$do_mktuple
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$do_mktuple DD 093801H
	DD	0d6438H
	DD	0c3430H
	DD	0e008620cH
	DD	0c004d006H
	DD	05002H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\modsupport.c
xdata	ENDS
;	COMDAT do_mktuple
_TEXT	SEGMENT
p_format$ = 96
p_va$ = 104
endchar$ = 112
n$ = 120
flags$ = 128
do_mktuple PROC						; COMDAT

; 153  : {

  00000	40 55		 push	 rbp
  00002	41 54		 push	 r12
  00004	41 55		 push	 r13
  00006	41 56		 push	 r14
  00008	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 154  :     PyObject *v;
; 155  :     int i;
; 156  :     int itemfailed = 0;

  0000c	45 33 e4	 xor	 r12d, r12d
  0000f	45 8b e8	 mov	 r13d, r8d
  00012	4c 8b f2	 mov	 r14, rdx
  00015	48 8b e9	 mov	 rbp, rcx

; 157  :     if (n < 0)

  00018	45 85 c9	 test	 r9d, r9d
  0001b	79 0e		 jns	 SHORT $LN9@do_mktuple

; 158  :         return NULL;

  0001d	33 c0		 xor	 eax, eax

; 186  : }

  0001f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00023	41 5e		 pop	 r14
  00025	41 5d		 pop	 r13
  00027	41 5c		 pop	 r12
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
$LN9@do_mktuple:
  0002b	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx

; 159  :     if ((v = PyTuple_New(n)) == NULL)

  00030	49 63 d9	 movsxd	 rbx, r9d
  00033	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi
  00038	48 8b cb	 mov	 rcx, rbx
  0003b	e8 00 00 00 00	 call	 PyTuple_New
  00040	48 8b f0	 mov	 rsi, rax
  00043	48 85 c0	 test	 rax, rax

; 160  :         return NULL;

  00046	0f 84 d5 00 00
	00		 je	 $LN20@do_mktuple

; 161  :     /* Note that we can't bail immediately on error as this will leak
; 162  :        refcounts on any 'N' arguments. */
; 163  :     for (i = 0; i < n; i++) {

  0004c	48 85 db	 test	 rbx, rbx
  0004f	0f 8e a5 00 00
	00		 jle	 $LN3@do_mktuple
  00055	48 89 7c 24 70	 mov	 QWORD PTR [rsp+112], rdi
  0005a	4c 89 7c 24 30	 mov	 QWORD PTR [rsp+48], r15
  0005f	44 8b bc 24 80
	00 00 00	 mov	 r15d, DWORD PTR flags$[rsp]
  00067	48 8d 78 70	 lea	 rdi, QWORD PTR [rax+112]
  0006b	0f 1f 44 00 00	 npad	 5
$LL7@do_mktuple:

; 164  :         PyObject *w = do_mkvalue(p_format, p_va, flags);

  00070	45 8b c7	 mov	 r8d, r15d
  00073	49 8b d6	 mov	 rdx, r14
  00076	48 8b cd	 mov	 rcx, rbp
  00079	e8 00 00 00 00	 call	 do_mkvalue

; 165  :         if (w == NULL) {

  0007e	48 85 c0	 test	 rax, rax
  00081	75 50		 jne	 SHORT $LN4@do_mktuple

; 166  :             itemfailed = 1;

  00083	44 8d 60 01	 lea	 r12d, QWORD PTR [rax+1]

; 167  :             Py_INCREF(Py_None);

  00087	e8 00 00 00 00	 call	 _Py_PXCTX
  0008c	85 c0		 test	 eax, eax
  0008e	75 3c		 jne	 SHORT $LN13@do_mktuple
  00090	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a5	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ab	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b8	85 c0		 test	 eax, eax
  000ba	75 09		 jne	 SHORT $LN12@do_mktuple
  000bc	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000c3	74 07		 je	 SHORT $LN13@do_mktuple
$LN12@do_mktuple:
  000c5	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN13@do_mktuple:

; 168  :             w = Py_None;

  000cc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@do_mktuple:

; 169  :         }
; 170  :         PyTuple_SET_ITEM(v, i, w);

  000d3	48 89 07	 mov	 QWORD PTR [rdi], rax
  000d6	48 83 c7 08	 add	 rdi, 8
  000da	48 ff cb	 dec	 rbx
  000dd	75 91		 jne	 SHORT $LL7@do_mktuple

; 171  :     }
; 172  :     if (itemfailed) {

  000df	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]
  000e4	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]
  000e9	45 85 e4	 test	 r12d, r12d
  000ec	74 0c		 je	 SHORT $LN3@do_mktuple

; 173  :         /* do_mkvalue() should have already set an error */
; 174  :         Py_DECREF(v);

  000ee	48 8b ce	 mov	 rcx, rsi
  000f1	e8 00 00 00 00	 call	 _Py_DecRef

; 175  :         return NULL;

  000f6	33 c0		 xor	 eax, eax
  000f8	eb 3b		 jmp	 SHORT $LN19@do_mktuple
$LN3@do_mktuple:

; 176  :     }
; 177  :     if (**p_format != endchar) {

  000fa	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
  000fe	0f be 01	 movsx	 eax, BYTE PTR [rcx]
  00101	41 3b c5	 cmp	 eax, r13d
  00104	74 1f		 je	 SHORT $LN2@do_mktuple

; 178  :         Py_DECREF(v);

  00106	48 8b ce	 mov	 rcx, rsi
  00109	e8 00 00 00 00	 call	 _Py_DecRef

; 179  :         PyErr_SetString(PyExc_SystemError,
; 180  :                         "Unmatched paren in format");

  0010e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@CJGIJEPM@Unmatched?5paren?5in?5format?$AA@
  0011c	e8 00 00 00 00	 call	 PyErr_SetString
$LN20@do_mktuple:

; 181  :         return NULL;

  00121	33 c0		 xor	 eax, eax
  00123	eb 10		 jmp	 SHORT $LN19@do_mktuple
$LN2@do_mktuple:

; 182  :     }
; 183  :     if (endchar)

  00125	45 85 ed	 test	 r13d, r13d
  00128	74 08		 je	 SHORT $LN1@do_mktuple

; 184  :         ++*p_format;

  0012a	48 8d 41 01	 lea	 rax, QWORD PTR [rcx+1]
  0012e	48 89 45 00	 mov	 QWORD PTR [rbp], rax
$LN1@do_mktuple:

; 185  :     return v;

  00132	48 8b c6	 mov	 rax, rsi
$LN19@do_mktuple:
  00135	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0013a	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]

; 186  : }

  0013f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00143	41 5e		 pop	 r14
  00145	41 5d		 pop	 r13
  00147	41 5c		 pop	 r12
  00149	5d		 pop	 rbp
  0014a	c3		 ret	 0
do_mktuple ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$va_build_value DD imagerel va_build_value
	DD	imagerel va_build_value+199
	DD	imagerel $unwind$va_build_value
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$va_build_value DD 040a01H
	DD	0a340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\modsupport.c
xdata	ENDS
;	COMDAT va_build_value
_TEXT	SEGMENT
lva$ = 64
format$ = 64
f$ = 72
va$ = 72
flags$ = 80
va_build_value PROC					; COMDAT

; 440  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b da	 mov	 rbx, rdx

; 441  :     const char *f = format;
; 442  :     int n = countformat(f, '\0');

  0000d	33 d2		 xor	 edx, edx
  0000f	41 8b f8	 mov	 edi, r8d
  00012	48 89 4c 24 48	 mov	 QWORD PTR f$[rsp], rcx
  00017	e8 00 00 00 00	 call	 countformat

; 443  :     va_list lva;
; 444  : 
; 445  :         Py_VA_COPY(lva, va);

  0001c	48 89 5c 24 40	 mov	 QWORD PTR lva$[rsp], rbx

; 446  : 
; 447  :     if (n < 0)

  00021	85 c0		 test	 eax, eax
  00023	79 0d		 jns	 SHORT $LN10@va_build_v

; 448  :         return NULL;

  00025	33 c0		 xor	 eax, eax

; 456  : }

  00027	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0002c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00030	5f		 pop	 rdi
  00031	c3		 ret	 0
$LN10@va_build_v:

; 449  :     if (n == 0) {

  00032	75 57		 jne	 SHORT $LN2@va_build_v

; 450  :         Py_INCREF(Py_None);

  00034	e8 00 00 00 00	 call	 _Py_PXCTX
  00039	85 c0		 test	 eax, eax
  0003b	75 3c		 jne	 SHORT $LN7@va_build_v
  0003d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00052	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00058	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00060	e8 00 00 00 00	 call	 _PyParallel_Guard
  00065	85 c0		 test	 eax, eax
  00067	75 09		 jne	 SHORT $LN6@va_build_v
  00069	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00070	74 07		 je	 SHORT $LN7@va_build_v
$LN6@va_build_v:
  00072	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@va_build_v:

; 451  :         return Py_None;

  00079	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 456  : }

  00080	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00085	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00089	5f		 pop	 rdi
  0008a	c3		 ret	 0
$LN2@va_build_v:

; 452  :     }
; 453  :     if (n == 1)
; 454  :         return do_mkvalue(&f, &lva, flags);

  0008b	48 8d 54 24 40	 lea	 rdx, QWORD PTR lva$[rsp]
  00090	48 8d 4c 24 48	 lea	 rcx, QWORD PTR f$[rsp]
  00095	83 f8 01	 cmp	 eax, 1
  00098	75 13		 jne	 SHORT $LN1@va_build_v
  0009a	44 8b c7	 mov	 r8d, edi
  0009d	e8 00 00 00 00	 call	 do_mkvalue

; 456  : }

  000a2	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000a7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ab	5f		 pop	 rdi
  000ac	c3		 ret	 0
$LN1@va_build_v:

; 455  :     return do_mktuple(&f, &lva, '\0', n, flags);

  000ad	44 8b c8	 mov	 r9d, eax
  000b0	45 33 c0	 xor	 r8d, r8d
  000b3	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  000b7	e8 00 00 00 00	 call	 do_mktuple

; 456  : }

  000bc	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000c1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c5	5f		 pop	 rdi
  000c6	c3		 ret	 0
va_build_value ENDP
_TEXT	ENDS
PUBLIC	Py_BuildValue
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_BuildValue DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$Py_BuildValue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_BuildValue DD 011801H
	DD	04218H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT Py_BuildValue
_TEXT	SEGMENT
format$ = 48
Py_BuildValue PROC					; COMDAT

; 406  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 407  :     va_list va;
; 408  :     PyObject* retval;
; 409  :     va_start(va, format);

  00018	48 8d 54 24 38	 lea	 rdx, QWORD PTR format$[rsp+8]

; 410  :     retval = va_build_value(format, va, 0);

  0001d	45 33 c0	 xor	 r8d, r8d
  00020	e8 00 00 00 00	 call	 va_build_value

; 411  :     va_end(va);
; 412  :     return retval;
; 413  : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
Py_BuildValue ENDP
_TEXT	ENDS
PUBLIC	_Py_BuildValue_SizeT
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_BuildValue_SizeT DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$_Py_BuildValue_SizeT
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_BuildValue_SizeT DD 011801H
	DD	04218H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_BuildValue_SizeT
_TEXT	SEGMENT
format$ = 48
_Py_BuildValue_SizeT PROC				; COMDAT

; 417  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 418  :     va_list va;
; 419  :     PyObject* retval;
; 420  :     va_start(va, format);

  00018	48 8d 54 24 38	 lea	 rdx, QWORD PTR format$[rsp+8]

; 421  :     retval = va_build_value(format, va, FLAG_SIZE_T);

  0001d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00023	e8 00 00 00 00	 call	 va_build_value

; 422  :     va_end(va);
; 423  :     return retval;
; 424  : }

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
_Py_BuildValue_SizeT ENDP
_TEXT	ENDS
PUBLIC	Py_VaBuildValue
; Function compile flags: /Ogtpy
;	COMDAT Py_VaBuildValue
_TEXT	SEGMENT
format$ = 8
va$ = 16
Py_VaBuildValue PROC					; COMDAT

; 429  :     return va_build_value(format, va, 0);

  00000	45 33 c0	 xor	 r8d, r8d

; 430  : }

  00003	e9 00 00 00 00	 jmp	 va_build_value
Py_VaBuildValue ENDP
_TEXT	ENDS
PUBLIC	_Py_VaBuildValue_SizeT
; Function compile flags: /Ogtpy
;	COMDAT _Py_VaBuildValue_SizeT
_TEXT	SEGMENT
format$ = 8
va$ = 16
_Py_VaBuildValue_SizeT PROC				; COMDAT

; 435  :     return va_build_value(format, va, FLAG_SIZE_T);

  00000	41 b8 01 00 00
	00		 mov	 r8d, 1

; 436  : }

  00006	e9 00 00 00 00	 jmp	 va_build_value
_Py_VaBuildValue_SizeT ENDP
_TEXT	ENDS
PUBLIC	PyEval_CallFunction
EXTRN	PyEval_CallObjectWithKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyEval_CallFunction DD imagerel $LN4
	DD	imagerel $LN4+90
	DD	imagerel $unwind$PyEval_CallFunction
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyEval_CallFunction DD 031501H
	DD	070114215H
	DD	03010H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyEval_CallFunction
_TEXT	SEGMENT
obj$ = 64
format$ = 72
PyEval_CallFunction PROC				; COMDAT

; 461  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000f	53		 push	 rbx
  00010	57		 push	 rdi
  00011	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00015	48 8b c2	 mov	 rax, rdx
  00018	48 8b d9	 mov	 rbx, rcx

; 462  :     va_list vargs;
; 463  :     PyObject *args;
; 464  :     PyObject *res;
; 465  : 
; 466  :     va_start(vargs, format);

  0001b	48 8d 54 24 50	 lea	 rdx, QWORD PTR format$[rsp+8]

; 467  : 
; 468  :     args = Py_VaBuildValue(format, vargs);

  00020	48 8b c8	 mov	 rcx, rax
  00023	e8 00 00 00 00	 call	 Py_VaBuildValue
  00028	48 8b f8	 mov	 rdi, rax

; 469  :     va_end(vargs);
; 470  : 
; 471  :     if (args == NULL)

  0002b	48 85 c0	 test	 rax, rax
  0002e	75 07		 jne	 SHORT $LN1@PyEval_Cal

; 478  : }

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	5f		 pop	 rdi
  00035	5b		 pop	 rbx
  00036	c3		 ret	 0
$LN1@PyEval_Cal:

; 472  :         return NULL;
; 473  : 
; 474  :     res = PyEval_CallObject(obj, args);

  00037	45 33 c0	 xor	 r8d, r8d
  0003a	48 8b d0	 mov	 rdx, rax
  0003d	48 8b cb	 mov	 rcx, rbx
  00040	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords

; 475  :     Py_DECREF(args);

  00045	48 8b cf	 mov	 rcx, rdi
  00048	48 8b d8	 mov	 rbx, rax
  0004b	e8 00 00 00 00	 call	 _Py_DecRef

; 476  : 
; 477  :     return res;

  00050	48 8b c3	 mov	 rax, rbx

; 478  : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	5f		 pop	 rdi
  00058	5b		 pop	 rbx
  00059	c3		 ret	 0
PyEval_CallFunction ENDP
_TEXT	ENDS
PUBLIC	PyEval_CallMethod
EXTRN	PyObject_GetAttrString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyEval_CallMethod DD imagerel $LN6
	DD	imagerel $LN6+44
	DD	imagerel $unwind$PyEval_CallMethod
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyEval_CallMethod DD imagerel $LN6+44
	DD	imagerel $LN6+83
	DD	imagerel $chain$0$PyEval_CallMethod
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyEval_CallMethod DD imagerel $LN6+83
	DD	imagerel $LN6+137
	DD	imagerel $chain$3$PyEval_CallMethod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyEval_CallMethod DD 040b21H
	DD	05340bH
	DD	046400H
	DD	imagerel $LN6
	DD	imagerel $LN6+44
	DD	imagerel $unwind$PyEval_CallMethod
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyEval_CallMethod DD 020521H
	DD	046405H
	DD	imagerel $LN6
	DD	imagerel $LN6+44
	DD	imagerel $unwind$PyEval_CallMethod
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyEval_CallMethod DD 020f01H
	DD	0700b520fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyEval_CallMethod
_TEXT	SEGMENT
obj$ = 64
methodname$ = 72
format$ = 80
PyEval_CallMethod PROC					; COMDAT

; 483  : {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 484  :     va_list vargs;
; 485  :     PyObject *meth;
; 486  :     PyObject *args;
; 487  :     PyObject *res;
; 488  : 
; 489  :     meth = PyObject_GetAttrString(obj, methodname);

  0000f	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00014	48 8b f8	 mov	 rdi, rax

; 490  :     if (meth == NULL)

  00017	48 85 c0	 test	 rax, rax
  0001a	75 06		 jne	 SHORT $LN2@PyEval_Cal@2

; 508  : }

  0001c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00020	5f		 pop	 rdi
  00021	c3		 ret	 0
$LN2@PyEval_Cal@2:

; 491  :         return NULL;
; 492  : 
; 493  :     va_start(vargs, format);
; 494  : 
; 495  :     args = Py_VaBuildValue(format, vargs);

  00022	48 8b 4c 24 50	 mov	 rcx, QWORD PTR format$[rsp]
  00027	48 8d 54 24 58	 lea	 rdx, QWORD PTR format$[rsp+8]
  0002c	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  00031	e8 00 00 00 00	 call	 Py_VaBuildValue

; 496  :     va_end(vargs);
; 497  : 
; 498  :     if (args == NULL) {
; 499  :         Py_DECREF(meth);

  00036	48 8b cf	 mov	 rcx, rdi
  00039	48 8b f0	 mov	 rsi, rax
  0003c	48 85 c0	 test	 rax, rax
  0003f	75 12		 jne	 SHORT $LN1@PyEval_Cal@2
  00041	e8 00 00 00 00	 call	 _Py_DecRef
  00046	48 8b 74 24 20	 mov	 rsi, QWORD PTR [rsp+32]

; 500  :         return NULL;

  0004b	33 c0		 xor	 eax, eax

; 508  : }

  0004d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
$LN1@PyEval_Cal@2:

; 501  :     }
; 502  : 
; 503  :     res = PyEval_CallObject(meth, args);

  00053	45 33 c0	 xor	 r8d, r8d
  00056	48 8b d0	 mov	 rdx, rax
  00059	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  0005e	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords

; 504  :     Py_DECREF(meth);

  00063	48 8b cf	 mov	 rcx, rdi
  00066	48 8b d8	 mov	 rbx, rax
  00069	e8 00 00 00 00	 call	 _Py_DecRef

; 505  :     Py_DECREF(args);

  0006e	48 8b ce	 mov	 rcx, rsi
  00071	e8 00 00 00 00	 call	 _Py_DecRef
  00076	48 8b 74 24 20	 mov	 rsi, QWORD PTR [rsp+32]

; 506  : 
; 507  :     return res;

  0007b	48 8b c3	 mov	 rax, rbx
  0007e	48 8b 5c 24 28	 mov	 rbx, QWORD PTR [rsp+40]

; 508  : }

  00083	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00087	5f		 pop	 rdi
  00088	c3		 ret	 0
PyEval_CallMethod ENDP
_TEXT	ENDS
END
