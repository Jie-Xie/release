; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_03NIEPJMFE@?5?$HN?6?$AA@			; `string'
PUBLIC	??_C@_03EEBNCBOD@?5?$CFs?$AA@			; `string'
PUBLIC	??_C@_0BG@LKLMONNO@FIRST?5set?5for?5?8?$CFs?8?3?5?$HL?$AA@ ; `string'
PUBLIC	??_C@_0BL@CMDAFHFL@Left?9recursion?5below?5?8?$CFs?8?6?$AA@ ; `string'
PUBLIC	??_C@_0CF@BLEGJFFD@no?5mem?5to?5resize?5sym?5in?5calcfirs@ ; `string'
PUBLIC	??_C@_0CD@KCONAOJG@no?5mem?5for?5new?5sym?5in?5calcfirsts@ ; `string'
PUBLIC	??_C@_0CH@LGDMKLFL@Re?9calculating?5FIRST?5set?5for?5?8?$CFs@ ; `string'
PUBLIC	??_C@_0BJ@DFLADLKJ@Left?9recursion?5for?5?8?$CFs?8?6?$AA@ ; `string'
PUBLIC	??_C@_0BO@GFDICKIM@Calculate?5FIRST?5set?5for?5?8?$CFs?8?6?$AA@ ; `string'
EXTRN	PyObject_Free:PROC
EXTRN	PyGrammar_LabelRepr:PROC
EXTRN	_Py_addbit:PROC
EXTRN	_Py_mergebitset:PROC
EXTRN	PyGrammar_FindDFA:PROC
EXTRN	PyObject_Realloc:PROC
EXTRN	_Py_findlabel:PROC
EXTRN	Py_FatalError:PROC
EXTRN	PyObject_Malloc:PROC
EXTRN	__imp_fprintf:PROC
EXTRN	__imp___iob_func:PROC
EXTRN	_Py_newbitset:PROC
EXTRN	__imp_printf:PROC
EXTRN	Py_DebugFlag:DWORD
_BSS	SEGMENT
?dummy@?1??calcfirstset@@9@9 DQ 01H DUP (?)		; `calcfirstset'::`2'::dummy
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\parser\firstsets.c
pdata	SEGMENT
$pdata$calcfirstset DD imagerel calcfirstset
	DD	imagerel calcfirstset+820
	DD	imagerel $unwind$calcfirstset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$calcfirstset DD 078001H
	DD	0b6480H
	DD	0c547bH
	DD	0700cc210H
	DD	0300bH
xdata	ENDS
;	COMDAT ??_C@_03NIEPJMFE@?5?$HN?6?$AA@
CONST	SEGMENT
??_C@_03NIEPJMFE@?5?$HN?6?$AA@ DB ' }', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03EEBNCBOD@?5?$CFs?$AA@
CONST	SEGMENT
??_C@_03EEBNCBOD@?5?$CFs?$AA@ DB ' %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LKLMONNO@FIRST?5set?5for?5?8?$CFs?8?3?5?$HL?$AA@
CONST	SEGMENT
??_C@_0BG@LKLMONNO@FIRST?5set?5for?5?8?$CFs?8?3?5?$HL?$AA@ DB 'FIRST set '
	DB	'for ''%s'': {', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CMDAFHFL@Left?9recursion?5below?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BL@CMDAFHFL@Left?9recursion?5below?5?8?$CFs?8?6?$AA@ DB 'Left-recu'
	DB	'rsion below ''%s''', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BLEGJFFD@no?5mem?5to?5resize?5sym?5in?5calcfirs@
CONST	SEGMENT
??_C@_0CF@BLEGJFFD@no?5mem?5to?5resize?5sym?5in?5calcfirs@ DB 'no mem to '
	DB	'resize sym in calcfirstset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KCONAOJG@no?5mem?5for?5new?5sym?5in?5calcfirsts@
CONST	SEGMENT
??_C@_0CD@KCONAOJG@no?5mem?5for?5new?5sym?5in?5calcfirsts@ DB 'no mem for'
	DB	' new sym in calcfirstset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@LGDMKLFL@Re?9calculating?5FIRST?5set?5for?5?8?$CFs@
CONST	SEGMENT
??_C@_0CH@LGDMKLFL@Re?9calculating?5FIRST?5set?5for?5?8?$CFs@ DB 'Re-calc'
	DB	'ulating FIRST set for ''%s'' ???', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DFLADLKJ@Left?9recursion?5for?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BJ@DFLADLKJ@Left?9recursion?5for?5?8?$CFs?8?6?$AA@ DB 'Left-recurs'
	DB	'ion for ''%s''', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GFDICKIM@Calculate?5FIRST?5set?5for?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BO@GFDICKIM@Calculate?5FIRST?5set?5for?5?8?$CFs?8?6?$AA@ DB 'Calcu'
	DB	'late FIRST set for ''%s''', 0aH, 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT calcfirstset
_TEXT	SEGMENT
sym$1$ = 32
tv408 = 40
result$1$ = 48
tv488 = 56
tv457 = 56
tv496 = 64
tv487 = 72
g$ = 128
d$ = 136
i$1$ = 144
nbits$1$ = 152
calcfirstset PROC					; COMDAT

; 30   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	53		 push	 rbx
  0000b	57		 push	 rdi
  0000c	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 31   :     int i, j;
; 32   :     state *s;
; 33   :     arc *a;
; 34   :     int nsyms;
; 35   :     int *sym;
; 36   :     int nbits;
; 37   :     static bitset dummy;
; 38   :     bitset result;
; 39   :     int type;
; 40   :     dfa *d1;
; 41   :     label *l0;
; 42   : 
; 43   :     if (Py_DebugFlag)

  00010	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_DebugFlag, 0
  00017	48 8b fa	 mov	 rdi, rdx
  0001a	48 8b d9	 mov	 rbx, rcx
  0001d	74 11		 je	 SHORT $LN25@calcfirsts

; 44   :         printf("Calculate FIRST set for '%s'\n", d->d_name);

  0001f	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@GFDICKIM@Calculate?5FIRST?5set?5for?5?8?$CFs?8?6?$AA@
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN25@calcfirsts:

; 45   : 
; 46   :     if (dummy == NULL)

  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?dummy@?1??calcfirstset@@9@9
  00037	48 85 c0	 test	 rax, rax
  0003a	75 0f		 jne	 SHORT $LN24@calcfirsts

; 47   :         dummy = newbitset(1);

  0003c	8d 48 01	 lea	 ecx, QWORD PTR [rax+1]
  0003f	e8 00 00 00 00	 call	 _Py_newbitset
  00044	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?dummy@?1??calcfirstset@@9@9, rax
$LN24@calcfirsts:

; 48   :     if (d->d_first == dummy) {

  0004b	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0004f	48 3b c8	 cmp	 rcx, rax
  00052	75 22		 jne	 SHORT $LN23@calcfirsts

; 49   :         fprintf(stderr, "Left-recursion for '%s'\n", d->d_name);

  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0005a	4c 8b 47 08	 mov	 r8, QWORD PTR [rdi+8]
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@DFLADLKJ@Left?9recursion?5for?5?8?$CFs?8?6?$AA@
  00065	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]

; 113  : }

  00069	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0006d	5f		 pop	 rdi
  0006e	5b		 pop	 rbx
  0006f	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_fprintf
$LN23@calcfirsts:
  00076	48 89 6c 24 60	 mov	 QWORD PTR [rsp+96], rbp
  0007b	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi

; 50   :         return;
; 51   :     }
; 52   :     if (d->d_first != NULL) {

  00080	48 85 c9	 test	 rcx, rcx
  00083	74 22		 je	 SHORT $LN22@calcfirsts

; 53   :         fprintf(stderr, "Re-calculating FIRST set for '%s' ???\n",
; 54   :             d->d_name);

  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0008b	4c 8b 47 08	 mov	 r8, QWORD PTR [rdi+8]
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@LGDMKLFL@Re?9calculating?5FIRST?5set?5for?5?8?$CFs@
  00096	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  000a0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?dummy@?1??calcfirstset@@9@9
$LN22@calcfirsts:

; 55   :     }
; 56   :     d->d_first = dummy;

  000a7	48 89 47 20	 mov	 QWORD PTR [rdi+32], rax

; 57   : 
; 58   :     l0 = g->g_ll.ll_label;
; 59   :     nbits = g->g_ll.ll_nlabels;

  000ab	8b 43 10	 mov	 eax, DWORD PTR [rbx+16]
  000ae	48 8b 73 18	 mov	 rsi, QWORD PTR [rbx+24]

; 60   :     result = newbitset(nbits);

  000b2	8b c8		 mov	 ecx, eax
  000b4	89 84 24 98 00
	00 00		 mov	 DWORD PTR nbits$1$[rsp], eax
  000bb	e8 00 00 00 00	 call	 _Py_newbitset

; 61   : 
; 62   :     sym = (int *)PyObject_MALLOC(sizeof(int));

  000c0	b9 04 00 00 00	 mov	 ecx, 4
  000c5	48 89 44 24 30	 mov	 QWORD PTR result$1$[rsp], rax
  000ca	e8 00 00 00 00	 call	 PyObject_Malloc
  000cf	48 89 44 24 20	 mov	 QWORD PTR sym$1$[rsp], rax

; 63   :     if (sym == NULL)

  000d4	48 85 c0	 test	 rax, rax
  000d7	75 0c		 jne	 SHORT $LN21@calcfirsts

; 64   :         Py_FatalError("no mem for new sym in calcfirstset");

  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@KCONAOJG@no?5mem?5for?5new?5sym?5in?5calcfirsts@
  000e0	e8 00 00 00 00	 call	 Py_FatalError
$LN21@calcfirsts:

; 66   :     sym[0] = findlabel(&g->g_ll, d->d_type, (char *)NULL);

  000e5	8b 17		 mov	 edx, DWORD PTR [rdi]
  000e7	48 8d 4b 10	 lea	 rcx, QWORD PTR [rbx+16]
  000eb	45 33 c0	 xor	 r8d, r8d
  000ee	e8 00 00 00 00	 call	 _Py_findlabel
  000f3	4c 8b 44 24 20	 mov	 r8, QWORD PTR sym$1$[rsp]
  000f8	bb 01 00 00 00	 mov	 ebx, 1
  000fd	41 89 00	 mov	 DWORD PTR [r8], eax

; 67   : 
; 68   :     s = &d->d_state[d->d_initial];

  00100	48 8b 4f 18	 mov	 rcx, QWORD PTR [rdi+24]
  00104	48 63 47 10	 movsxd	 rax, DWORD PTR [rdi+16]
  00108	48 8d 04 80	 lea	 rax, QWORD PTR [rax+rax*4]

; 69   :     for (i = 0; i < s->s_narcs; i++) {

  0010c	33 ff		 xor	 edi, edi
  0010e	48 89 4c 24 48	 mov	 QWORD PTR tv487[rsp], rcx
  00113	48 89 44 24 40	 mov	 QWORD PTR tv496[rsp], rax
  00118	89 bc 24 90 00
	00 00		 mov	 DWORD PTR i$1$[rsp], edi
  0011f	8b eb		 mov	 ebp, ebx
  00121	39 3c c1	 cmp	 DWORD PTR [rcx+rax*8], edi
  00124	0f 8e 6a 01 00
	00		 jle	 $LN18@calcfirsts

; 65   :     nsyms = 1;

  0012a	44 8b cf	 mov	 r9d, edi
  0012d	48 89 7c 24 28	 mov	 QWORD PTR tv408[rsp], rdi
  00132	66 66 66 66 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL20@calcfirsts:

; 70   :         a = &s->s_arc[i];

  00140	48 8b 54 c1 08	 mov	 rdx, QWORD PTR [rcx+rax*8+8]

; 71   :         for (j = 0; j < nsyms; j++) {

  00145	8b cf		 mov	 ecx, edi
  00147	48 8b c7	 mov	 rax, rdi
  0014a	48 89 54 24 38	 mov	 QWORD PTR tv488[rsp], rdx
  0014f	48 85 ed	 test	 rbp, rbp
  00152	7e 1c		 jle	 SHORT $LN36@calcfirsts
  00154	41 0f bf 14 11	 movsx	 edx, WORD PTR [r9+rdx]
  00159	0f 1f 80 00 00
	00 00		 npad	 7
$LL17@calcfirsts:

; 72   :             if (sym[j] == a->a_lbl)

  00160	41 39 14 80	 cmp	 DWORD PTR [r8+rax*4], edx
  00164	74 0a		 je	 SHORT $LN36@calcfirsts

; 71   :         for (j = 0; j < nsyms; j++) {

  00166	48 ff c0	 inc	 rax
  00169	ff c1		 inc	 ecx
  0016b	48 3b c5	 cmp	 rax, rbp
  0016e	7c f0		 jl	 SHORT $LL17@calcfirsts
$LN36@calcfirsts:

; 73   :                 break;
; 74   :         }
; 75   :         if (j >= nsyms) { /* New label */

  00170	3b cb		 cmp	 ecx, ebx
  00172	0f 8c e8 00 00
	00		 jl	 $LN19@calcfirsts

; 76   :             sym = (int *)PyObject_REALLOC(sym,
; 77   :                                     sizeof(int) * (nsyms + 1));

  00178	ff c3		 inc	 ebx
  0017a	49 8b c8	 mov	 rcx, r8
  0017d	48 63 d3	 movsxd	 rdx, ebx
  00180	48 c1 e2 02	 shl	 rdx, 2
  00184	e8 00 00 00 00	 call	 PyObject_Realloc
  00189	48 89 44 24 20	 mov	 QWORD PTR sym$1$[rsp], rax

; 78   :             if (sym == NULL)

  0018e	48 85 c0	 test	 rax, rax
  00191	75 0c		 jne	 SHORT $LN12@calcfirsts

; 79   :                 Py_FatalError(
; 80   :                     "no mem to resize sym in calcfirstset");

  00193	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@BLEGJFFD@no?5mem?5to?5resize?5sym?5in?5calcfirs@
  0019a	e8 00 00 00 00	 call	 Py_FatalError
$LN12@calcfirsts:

; 81   :             sym[nsyms++] = a->a_lbl;

  0019f	48 8b 54 24 38	 mov	 rdx, QWORD PTR tv488[rsp]
  001a4	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv408[rsp]
  001a9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sym$1$[rsp]
  001ae	41 0f bf 04 10	 movsx	 eax, WORD PTR [r8+rdx]
  001b3	48 ff c5	 inc	 rbp
  001b6	48 89 5c 24 38	 mov	 QWORD PTR tv457[rsp], rbx
  001bb	89 44 a9 fc	 mov	 DWORD PTR [rcx+rbp*4-4], eax

; 82   :             type = l0[a->a_lbl].lb_type;

  001bf	49 0f bf 0c 10	 movsx	 rcx, WORD PTR [r8+rdx]
  001c4	48 8b c1	 mov	 rax, rcx
  001c7	48 03 c0	 add	 rax, rax
  001ca	8b 14 c6	 mov	 edx, DWORD PTR [rsi+rax*8]

; 83   :             if (ISNONTERMINAL(type)) {

  001cd	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  001d3	7c 79		 jl	 SHORT $LN35@calcfirsts

; 84   :                 d1 = PyGrammar_FindDFA(g, type);

  001d5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR g$[rsp]
  001dd	e8 00 00 00 00	 call	 PyGrammar_FindDFA
  001e2	48 8b d8	 mov	 rbx, rax

; 85   :                 if (d1->d_first == dummy) {

  001e5	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  001e9	48 3b 05 00 00
	00 00		 cmp	 rax, QWORD PTR ?dummy@?1??calcfirstset@@9@9
  001f0	75 2a		 jne	 SHORT $LN10@calcfirsts

; 86   :                     fprintf(stderr,
; 87   :                         "Left-recursion below '%s'\n",
; 88   :                         d->d_name);

  001f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  001f8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR d$[rsp]
  00200	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@CMDAFHFL@Left?9recursion?5below?5?8?$CFs?8?6?$AA@
  00207	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  0020b	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  0020f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 89   :                 }
; 90   :                 else {

  00215	48 8b 5c 24 38	 mov	 rbx, QWORD PTR tv457[rsp]
  0021a	eb 3f		 jmp	 SHORT $LN37@calcfirsts
$LN10@calcfirsts:

; 91   :                     if (d1->d_first == NULL)

  0021c	48 85 c0	 test	 rax, rax
  0021f	75 10		 jne	 SHORT $LN8@calcfirsts

; 92   :                         calcfirstset(g, d1);

  00221	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR g$[rsp]
  00229	48 8b d3	 mov	 rdx, rbx
  0022c	e8 00 00 00 00	 call	 calcfirstset
$LN8@calcfirsts:

; 93   :                     mergebitset(result,
; 94   :                                 d1->d_first, nbits);

  00231	44 8b 84 24 98
	00 00 00	 mov	 r8d, DWORD PTR nbits$1$[rsp]
  00239	48 8b 53 20	 mov	 rdx, QWORD PTR [rbx+32]
  0023d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$1$[rsp]
  00242	e8 00 00 00 00	 call	 _Py_mergebitset

; 95   :                 }

  00247	48 8b 5c 24 38	 mov	 rbx, QWORD PTR tv457[rsp]
  0024c	eb 0d		 jmp	 SHORT $LN37@calcfirsts
$LN35@calcfirsts:

; 96   :             }
; 97   :             else if (ISTERMINAL(type)) {
; 98   :                 addbit(result, a->a_lbl);

  0024e	0f bf d1	 movsx	 edx, cx
  00251	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$1$[rsp]
  00256	e8 00 00 00 00	 call	 _Py_addbit
$LN37@calcfirsts:
  0025b	4c 8b 44 24 20	 mov	 r8, QWORD PTR sym$1$[rsp]
$LN19@calcfirsts:

; 69   :     for (i = 0; i < s->s_narcs; i++) {

  00260	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$1$[rsp]
  00267	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv496[rsp]
  0026c	48 8b 54 24 48	 mov	 rdx, QWORD PTR tv487[rsp]
  00271	48 83 44 24 28
	04		 add	 QWORD PTR tv408[rsp], 4
  00277	ff c0		 inc	 eax
  00279	3b 04 ca	 cmp	 eax, DWORD PTR [rdx+rcx*8]
  0027c	4c 8b 4c 24 28	 mov	 r9, QWORD PTR tv408[rsp]
  00281	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$1$[rsp], eax
  00288	48 8b c1	 mov	 rax, rcx
  0028b	48 8b ca	 mov	 rcx, rdx
  0028e	0f 8c ac fe ff
	ff		 jl	 $LL20@calcfirsts
$LN18@calcfirsts:

; 99   :             }
; 100  :         }
; 101  :     }
; 102  :     d->d_first = result;

  00294	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR d$[rsp]
  0029c	48 8b 6c 24 30	 mov	 rbp, QWORD PTR result$1$[rsp]
  002a1	48 89 68 20	 mov	 QWORD PTR [rax+32], rbp

; 103  :     if (Py_DebugFlag) {

  002a5	39 3d 00 00 00
	00		 cmp	 DWORD PTR Py_DebugFlag, edi
  002ab	74 6d		 je	 SHORT $LN5@calcfirsts

; 104  :         printf("FIRST set for '%s': {", d->d_name);

  002ad	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  002b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@LKLMONNO@FIRST?5set?5for?5?8?$CFs?8?3?5?$HL?$AA@
  002b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf

; 105  :         for (i = 0; i < nbits; i++) {

  002be	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR nbits$1$[rsp]
  002c5	85 c0		 test	 eax, eax
  002c7	7e 44		 jle	 SHORT $LN2@calcfirsts

; 104  :         printf("FIRST set for '%s': {", d->d_name);

  002c9	8b d8		 mov	 ebx, eax
  002cb	0f 1f 44 00 00	 npad	 5
$LL4@calcfirsts:

; 106  :             if (testbit(result, i))

  002d0	40 0f b6 c7	 movzx	 eax, dil
  002d4	24 07		 and	 al, 7
  002d6	0f b6 c8	 movzx	 ecx, al
  002d9	48 8b c7	 mov	 rax, rdi
  002dc	48 c1 e8 03	 shr	 rax, 3
  002e0	0f be 04 28	 movsx	 eax, BYTE PTR [rax+rbp]
  002e4	0f a3 c8	 bt	 eax, ecx
  002e7	73 18		 jae	 SHORT $LN3@calcfirsts

; 107  :                 printf(" %s", PyGrammar_LabelRepr(&l0[i]));

  002e9	48 8b ce	 mov	 rcx, rsi
  002ec	e8 00 00 00 00	 call	 PyGrammar_LabelRepr
  002f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03EEBNCBOD@?5?$CFs?$AA@
  002f8	48 8b d0	 mov	 rdx, rax
  002fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN3@calcfirsts:

; 105  :         for (i = 0; i < nbits; i++) {

  00301	48 ff c7	 inc	 rdi
  00304	48 83 c6 10	 add	 rsi, 16
  00308	48 ff cb	 dec	 rbx
  0030b	75 c3		 jne	 SHORT $LL4@calcfirsts
$LN2@calcfirsts:

; 108  :         }
; 109  :         printf(" }\n");

  0030d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03NIEPJMFE@?5?$HN?6?$AA@
  00314	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN5@calcfirsts:

; 110  :     }
; 111  : 
; 112  :     PyObject_FREE(sym);

  0031a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sym$1$[rsp]
  0031f	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00324	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]

; 113  : }

  00329	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0032d	5f		 pop	 rdi
  0032e	5b		 pop	 rbx
  0032f	e9 00 00 00 00	 jmp	 PyObject_Free
calcfirstset ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@HJHHCOPB@Adding?5FIRST?5sets?5?4?4?4?6?$AA@ ; `string'
PUBLIC	_Py_addfirstsets
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_addfirstsets DD imagerel $LN10
	DD	imagerel $LN10+41
	DD	imagerel $unwind$_Py_addfirstsets
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_Py_addfirstsets DD imagerel $LN10+41
	DD	imagerel $LN10+87
	DD	imagerel $chain$0$_Py_addfirstsets
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_Py_addfirstsets DD imagerel $LN10+87
	DD	imagerel $LN10+98
	DD	imagerel $chain$1$_Py_addfirstsets
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_Py_addfirstsets DD 021H
	DD	imagerel $LN10
	DD	imagerel $LN10+41
	DD	imagerel $unwind$_Py_addfirstsets
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_Py_addfirstsets DD 020521H
	DD	067405H
	DD	imagerel $LN10
	DD	imagerel $LN10+41
	DD	imagerel $unwind$_Py_addfirstsets
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_addfirstsets DD 040a01H
	DD	07340aH
	DD	06006320aH
xdata	ENDS
;	COMDAT ??_C@_0BH@HJHHCOPB@Adding?5FIRST?5sets?5?4?4?4?6?$AA@
CONST	SEGMENT
??_C@_0BH@HJHHCOPB@Adding?5FIRST?5sets?5?4?4?4?6?$AA@ DB 'Adding FIRST se'
	DB	'ts ...', 0aH, 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_addfirstsets
_TEXT	SEGMENT
g$ = 48
_Py_addfirstsets PROC					; COMDAT

; 15   : {

$LN10:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 16   :     int i;
; 17   :     dfa *d;
; 18   : 
; 19   :     if (Py_DebugFlag)

  0000a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_DebugFlag, 0
  00011	48 8b f1	 mov	 rsi, rcx
  00014	74 0d		 je	 SHORT $LN5@Py_addfirs

; 20   :         printf("Adding FIRST sets ...\n");

  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@HJHHCOPB@Adding?5FIRST?5sets?5?4?4?4?6?$AA@
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN5@Py_addfirs:

; 21   :     for (i = 0; i < g->g_ndfas; i++) {

  00023	33 db		 xor	 ebx, ebx
  00025	39 1e		 cmp	 DWORD PTR [rsi], ebx
  00027	7e 2e		 jle	 SHORT $LN2@Py_addfirs
  00029	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0002e	8b fb		 mov	 edi, ebx
$LL4@Py_addfirs:

; 22   :         d = &g->g_dfa[i];

  00030	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]

; 23   :         if (d->d_first == NULL)

  00034	48 83 7c 07 20
	00		 cmp	 QWORD PTR [rdi+rax+32], 0
  0003a	48 8d 14 07	 lea	 rdx, QWORD PTR [rdi+rax]
  0003e	75 08		 jne	 SHORT $LN3@Py_addfirs

; 24   :             calcfirstset(g, d);

  00040	48 8b ce	 mov	 rcx, rsi
  00043	e8 00 00 00 00	 call	 calcfirstset
$LN3@Py_addfirs:

; 21   :     for (i = 0; i < g->g_ndfas; i++) {

  00048	ff c3		 inc	 ebx
  0004a	48 83 c7 28	 add	 rdi, 40			; 00000028H
  0004e	3b 1e		 cmp	 ebx, DWORD PTR [rsi]
  00050	7c de		 jl	 SHORT $LL4@Py_addfirs
  00052	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
$LN2@Py_addfirs:

; 25   :     }
; 26   : }

  00057	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5e		 pop	 rsi
  00061	c3		 ret	 0
_Py_addfirstsets ENDP
_TEXT	ENDS
END
