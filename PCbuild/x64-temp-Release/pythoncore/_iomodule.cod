; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_02KFNNKBCK@io?$AA@			; `string'
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	??_C@_04GMGOKAFF@mode?$AA@			; `string'
PUBLIC	??_C@_06FFBIALPD@fileno?$AA@			; `string'
PUBLIC	??_C@_06BMABDNNN@isatty?$AA@			; `string'
PUBLIC	_PyIO_Module
_DATA	SEGMENT
COMM	_PyIO_zero:QWORD
COMM	_PyIO_str_write:QWORD
COMM	_PyIO_empty_bytes:QWORD
COMM	_PyIO_str_reset:QWORD
COMM	_PyIO_str_readline:QWORD
COMM	_PyIO_str_readall:QWORD
COMM	_PyIO_str_encode:QWORD
COMM	_PyIO_str_readable:QWORD
COMM	_PyIO_str_close:QWORD
COMM	_PyIO_str_decode:QWORD
COMM	_PyIO_empty_str:QWORD
COMM	_PyIO_str_newlines:QWORD
COMM	_PyIO_str_seek:QWORD
COMM	_PyIO_str_writable:QWORD
COMM	_PyIO_str_seekable:QWORD
COMM	_PyIO_str_closed:QWORD
COMM	_PyIO_str_flush:QWORD
COMM	_PyIO_str_readinto:QWORD
COMM	_PyIO_str_fileno:QWORD
COMM	_PyIO_str_setstate:QWORD
COMM	_PyIO_str_truncate:QWORD
COMM	_PyIO_str_isatty:QWORD
COMM	_PyIO_str_read1:QWORD
COMM	_PyIO_str_tell:QWORD
COMM	_PyIO_str_getstate:QWORD
COMM	_PyIO_str_nl:QWORD
COMM	_PyIO_str_read:QWORD
_DATA	ENDS
;	COMDAT ??_C@_02KFNNKBCK@io?$AA@
CONST	SEGMENT
??_C@_02KFNNKBCK@io?$AA@ DB 'io', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMGOKAFF@mode?$AA@
CONST	SEGMENT
??_C@_04GMGOKAFF@mode?$AA@ DB 'mode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFBIALPD@fileno?$AA@
CONST	SEGMENT
??_C@_06FFBIALPD@fileno?$AA@ DB 'fileno', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_mode@?1??io_open@@9@9 DQ 0000000000000000H	; `io_open'::`2'::PyId_mode
	DQ	FLAT:??_C@_04GMGOKAFF@mode?$AA@
	DQ	0000000000000000H
?PyId_isatty@?1??io_open@@9@9 DQ 0000000000000000H	; `io_open'::`2'::PyId_isatty
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	0000000000000000H
?PyId_fileno@?1??io_open@@9@9 DQ 0000000000000000H	; `io_open'::`2'::PyId_fileno
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_06BMABDNNN@isatty?$AA@
CONST	SEGMENT
??_C@_06BMABDNNN@isatty?$AA@ DB 'isatty', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
module_doc DB	'The io module provides the Python interfaces to stream h'
	DB	'andling. The', 0aH, 'builtin open function is defined in this'
	DB	' module.', 0aH, 0aH, 'At the top of the I/O hierarchy is the '
	DB	'abstract base class IOBase. It', 0aH, 'defines the basic inte'
	DB	'rface to a stream. Note, however, that there is no', 0aH, 'se'
	DB	'paration between reading and writing to streams; implementati'
	DB	'ons are', 0aH, 'allowed to raise an IOError if they do not su'
	DB	'pport a given operation.', 0aH, 0aH, 'Extending IOBase is Raw'
	DB	'IOBase which deals simply with the reading and', 0aH, 'writin'
	DB	'g of raw bytes to a stream. FileIO subclasses RawIOBase to pr'
	DB	'ovide', 0aH, 'an interface to OS files.', 0aH, 0aH, 'Buffered'
	DB	'IOBase deals with buffering on a raw byte stream (RawIOBase).'
	DB	' Its', 0aH, 'subclasses, BufferedWriter, BufferedReader, and '
	DB	'BufferedRWPair buffer', 0aH, 'streams that are readable, writ'
	DB	'able, and both respectively.', 0aH, 'BufferedRandom provides '
	DB	'a buffered interface to random access', 0aH, 'streams. BytesI'
	DB	'O is a simple stream of in-memory bytes.', 0aH, 0aH, 'Another'
	DB	' IOBase subclass, TextIOBase, deals with the encoding and dec'
	DB	'oding', 0aH, 'of streams into text. TextIOWrapper, which exte'
	DB	'nds it, is a buffered text', 0aH, 'interface to a buffered ra'
	DB	'w stream (`BufferedIOBase`). Finally, StringIO', 0aH, 'is a i'
	DB	'n-memory stream for text.', 0aH, 0aH, 'Argument names are not'
	DB	' part of the specification, and only the arguments', 0aH, 'of'
	DB	' open() are intended to be used as keyword arguments.', 0aH, 0aH
	DB	'data:', 0aH, 0aH, 'DEFAULT_BUFFER_SIZE', 0aH, 0aH, '   An int'
	DB	' containing the default buffer size used by the module''s buf'
	DB	'fered', 0aH, '   I/O classes. open() uses the file''s blksize'
	DB	' (as obtained by os.stat) if', 0aH, '   possible.', 0aH, 00H
	ORG $+15
open_doc DB	'open(file, mode=''r'', buffering=-1, encoding=None,', 0aH
	DB	'     errors=None, newline=None, closefd=True, opener=None) ->'
	DB	' file object', 0aH, 0aH, 'Open file and return a stream.  Rai'
	DB	'se IOError upon failure.', 0aH, 0aH, 'file is either a text o'
	DB	'r byte string giving the name (and the path', 0aH, 'if the fi'
	DB	'le isn''t in the current working directory) of the file to', 0aH
	DB	'be opened or an integer file descriptor of the file to be', 0aH
	DB	'wrapped. (If a file descriptor is given, it is closed when th'
	DB	'e', 0aH, 'returned I/O object is closed, unless closefd is se'
	DB	't to False.)', 0aH, 0aH, 'mode is an optional string that spe'
	DB	'cifies the mode in which the file', 0aH, 'is opened. It defau'
	DB	'lts to ''r'' which means open for reading in text', 0aH, 'mod'
	DB	'e.  Other common values are ''w'' for writing (truncating the'
	DB	' file if', 0aH, 'it already exists), ''x'' for creating and w'
	DB	'riting to a new file, and', 0aH, '''a'' for appending (which '
	DB	'on some Unix systems, means that all writes', 0aH, 'append to'
	DB	' the end of the file regardless of the current seek position)'
	DB	'.', 0aH, 'In text mode, if encoding is not specified the enco'
	DB	'ding used is platform', 0aH, 'dependent: locale.getpreferrede'
	DB	'ncoding(False) is called to get the', 0aH, 'current locale en'
	DB	'coding. (For reading and writing raw bytes use binary', 0aH, 'm'
	DB	'ode and leave encoding unspecified.) The available modes are:'
	DB	0aH, 0aH, '========= ========================================='
	DB	'======================', 0aH, 'Character Meaning', 0aH, '----'
	DB	'----- -------------------------------------------------------'
	DB	'--------', 0aH, '''r''       open for reading (default)', 0aH
	DB	'''w''       open for writing, truncating the file first', 0aH
	DB	'''x''       create a new file and open it for writing', 0aH, ''''
	DB	'a''       open for writing, appending to the end of the file '
	DB	'if it exists', 0aH, '''b''       binary mode', 0aH, '''t''   '
	DB	'    text mode (default)', 0aH, '''+''       open a disk file '
	DB	'for updating (reading and writing)', 0aH, '''U''       univer'
	DB	'sal newline mode (for backwards compatibility; unneeded', 0aH
	DB	'          for new code)', 0aH, '========= ==================='
	DB	'============================================', 0aH, 0aH, 'The'
	DB	' default mode is ''rt'' (open for reading text). For binary r'
	DB	'andom', 0aH, 'access, the mode ''w+b'' opens and truncates th'
	DB	'e file to 0 bytes, while', 0aH, '''r+b'' opens the file witho'
	DB	'ut truncation. The ''x'' mode implies ''w'' and', 0aH, 'raise'
	DB	's an `FileExistsError` if the file already exists.', 0aH, 0aH
	DB	'Python distinguishes between files opened in binary and text '
	DB	'modes,', 0aH, 'even when the underlying operating system does'
	DB	'n''t. Files opened in', 0aH, 'binary mode (appending ''b'' to'
	DB	' the mode argument) return contents as', 0aH, 'bytes objects '
	DB	'without any decoding. In text mode (the default, or when', 0aH
	DB	'''t'' is appended to the mode argument), the contents of the '
	DB	'file are', 0aH, 'returned as strings, the bytes having been f'
	DB	'irst decoded using a', 0aH, 'platform-dependent encoding or u'
	DB	'sing the specified encoding if given.', 0aH, 0aH, 'buffering '
	DB	'is an optional integer used to set the buffering policy.', 0aH
	DB	'Pass 0 to switch buffering off (only allowed in binary mode),'
	DB	' 1 to select', 0aH, 'line buffering (only usable in text mode'
	DB	'), and an integer > 1 to indicate', 0aH, 'the size of a fixed'
	DB	'-size chunk buffer.  When no buffering argument is', 0aH, 'gi'
	DB	'ven, the default buffering policy works as follows:', 0aH, 0aH
	DB	'* Binary files are buffered in fixed-size chunks; the size of'
	DB	' the buffer', 0aH, '  is chosen using a heuristic trying to d'
	DB	'etermine the underlying device''s', 0aH, '  "block size" and '
	DB	'falling back on `io.DEFAULT_BUFFER_SIZE`.', 0aH, '  On many s'
	DB	'ystems, the buffer will typically be 4096 or 8192 bytes long.'
	DB	0aH, 0aH, '* "Interactive" text files (files for which isatty('
	DB	') returns True)', 0aH, '  use line buffering.  Other text fil'
	DB	'es use the policy described above', 0aH, '  for binary files.'
	DB	0aH, 0aH, 'encoding is the name of the encoding used to decode'
	DB	' or encode the', 0aH, 'file. This should only be used in text'
	DB	' mode. The default encoding is', 0aH, 'platform dependent, bu'
	DB	't any encoding supported by Python can be', 0aH, 'passed.  Se'
	DB	'e the codecs module for the list of supported encodings.', 0aH
	DB	0aH, 'errors is an optional string that specifies how encoding'
	DB	' errors are to', 0aH, 'be handled---this argument should not '
	DB	'be used in binary mode. Pass', 0aH, '''strict'' to raise a Va'
	DB	'lueError exception if there is an encoding error', 0aH, '(the'
	DB	' default of None has the same effect), or pass ''ignore'' to '
	DB	'ignore', 0aH, 'errors. (Note that ignoring encoding errors ca'
	DB	'n lead to data loss.)', 0aH, 'See the documentation for codec'
	DB	's.register or run ''help(codecs.Codec)''', 0aH, 'for a list o'
	DB	'f the permitted encoding error strings.', 0aH, 0aH, 'newline '
	DB	'controls how universal newlines works (it only applies to tex'
	DB	't', 0aH, 'mode). It can be None, '''', ''\n'', ''\r'', and '''
	DB	'\r\n''.  It works as', 0aH, 'follows:', 0aH, 0aH, '* On input'
	DB	', if newline is None, universal newlines mode is', 0aH, '  en'
	DB	'abled. Lines in the input can end in ''\n'', ''\r'', or ''\r\'
	DB	'n'', and', 0aH, '  these are translated into ''\n'' before be'
	DB	'ing returned to the', 0aH, '  caller. If it is '''', universa'
	DB	'l newline mode is enabled, but line', 0aH, '  endings are ret'
	DB	'urned to the caller untranslated. If it has any of', 0aH, '  '
	DB	'the other legal values, input lines are only terminated by th'
	DB	'e given', 0aH, '  string, and the line ending is returned to '
	DB	'the caller untranslated.', 0aH, 0aH, '* On output, if newline'
	DB	' is None, any ''\n'' characters written are', 0aH, '  transla'
	DB	'ted to the system default line separator, os.linesep. If', 0aH
	DB	'  newline is '''' or ''\n'', no translation takes place. If n'
	DB	'ewline is any', 0aH, '  of the other legal values, any ''\n'''
	DB	' characters written are translated', 0aH, '  to the given str'
	DB	'ing.', 0aH, 0aH, 'If closefd is False, the underlying file de'
	DB	'scriptor will be kept open', 0aH, 'when the file is closed. T'
	DB	'his does not work when a file name is given', 0aH, 'and must '
	DB	'be True in that case.', 0aH, 0aH, 'A custom opener can be use'
	DB	'd by passing a callable as *opener*. The', 0aH, 'underlying f'
	DB	'ile descriptor for the file object is then obtained by', 0aH, 'c'
	DB	'alling *opener* with (*file*, *flags*). *opener* must return '
	DB	'an open', 0aH, 'file descriptor (passing os.open as *opener* '
	DB	'results in functionality', 0aH, 'similar to passing None).', 0aH
	DB	0aH, 'open() returns a file object whose type depends on the m'
	DB	'ode, and', 0aH, 'through which the standard file operations s'
	DB	'uch as reading and writing', 0aH, 'are performed. When open()'
	DB	' is used to open a file in a text mode (''w'',', 0aH, '''r'','
	DB	' ''wt'', ''rt'', etc.), it returns a TextIOWrapper. When used'
	DB	' to open', 0aH, 'a file in a binary mode, the returned class '
	DB	'varies: in read binary', 0aH, 'mode, it returns a BufferedRea'
	DB	'der; in write binary and append binary', 0aH, 'modes, it retu'
	DB	'rns a BufferedWriter, and in read/write mode, it returns', 0aH
	DB	'a BufferedRandom.', 0aH, 0aH, 'It is also possible to use a s'
	DB	'tring or bytearray as a file for both', 0aH, 'reading and wri'
	DB	'ting. For strings StringIO can be used like a file', 0aH, 'op'
	DB	'ened in a text mode, and for bytes a BytesIO can be used like'
	DB	' a file', 0aH, 'opened in a binary mode.', 0aH, 00H
	ORG $+13
module_methods DQ FLAT:??_C@_04PMOCAHAA@open?$AA@
	DQ	FLAT:io_open
	DD	03H
	ORG $+4
	DQ	FLAT:open_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_PyIO_Module DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_02KFNNKBCK@io?$AA@
	DQ	FLAT:module_doc
	DQ	0000000000000018H
	DQ	FLAT:module_methods
	DQ	0000000000000000H
	DQ	FLAT:iomodule_traverse
	DQ	FLAT:iomodule_clear
	DQ	FLAT:iomodule_free
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_05JFEDHFGP@Osssi?$AA@			; `string'
PUBLIC	??_C@_07BAGABCMK@io_open?$AA@			; `string'
PUBLIC	??_C@_0BL@KHFLOKNA@?4?4?2Modules?2_io?2_iomodule?4c?$AA@ ; `string'
PUBLIC	??_C@_02MPEHDMPO@Oi?$AA@			; `string'
PUBLIC	??_C@_0BD@HGCBKHPL@unknown?5mode?3?5?8?$CFs?8?$AA@ ; `string'
PUBLIC	??_C@_0BP@PHGBMNHL@can?8t?5have?5unbuffered?5text?5I?1O?$AA@ ; `string'
PUBLIC	??_C@_04KKBDGLGN@OsiO?$AA@			; `string'
PUBLIC	??_C@_0CM@OMAPNBPG@binary?5mode?5doesn?8t?5take?5a?5newli@ ; `string'
PUBLIC	??_C@_0CM@CCNHIIDC@binary?5mode?5doesn?8t?5take?5an?5erro@ ; `string'
PUBLIC	??_C@_0CO@CAFNFBNN@binary?5mode?5doesn?8t?5take?5an?5enco@ ; `string'
PUBLIC	??_C@_0DH@EAEIFFCJ@must?5have?5exactly?5one?5of?5create?1@ ; `string'
PUBLIC	??_C@_0CF@EBAHAMKP@can?8t?5use?5U?5and?5writing?5mode?5at?5@ ; `string'
PUBLIC	??_C@_0BD@IIKELEHA@invalid?5mode?3?5?8?$CFs?8?$AA@ ; `string'
PUBLIC	??_C@_0CI@NLGHEIMK@can?8t?5have?5text?5and?5binary?5mode?5@ ; `string'
PUBLIC	??_C@_0BB@IPEMFKOI@invalid?5file?3?5?$CFR?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_06MNHBHLPO@opener?$AA@			; `string'
PUBLIC	??_C@_07IOEMJIMP@closefd?$AA@			; `string'
PUBLIC	??_C@_07NADKJHCJ@newline?$AA@			; `string'
PUBLIC	??_C@_06EOMHCNPI@errors?$AA@			; `string'
PUBLIC	??_C@_0P@EBFCODAH@O?$HMsizzziO?3open?$AA@	; `string'
PUBLIC	??_C@_08MLPGAEIK@encoding?$AA@			; `string'
PUBLIC	??_C@_09HIEBJLDI@buffering?$AA@			; `string'
PUBLIC	??_C@_04DAMGJPCA@file?$AA@			; `string'
EXTRN	_PyObject_SetAttrId:PROC
EXTRN	PyTextIOWrapper_Type:BYTE
EXTRN	PyBufferedWriter_Type:BYTE
EXTRN	PyBufferedReader_Type:BYTE
EXTRN	PyBufferedRandom_Type:BYTE
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsLong:PROC
EXTRN	_PyObject_CallMethodId_SizeT:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	_PyObject_CallFunction_SizeT:PROC
EXTRN	PyFileIO_Type:BYTE
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	__imp_strchr:PROC
EXTRN	__ImageBase:BYTE
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyNumber_Check:PROC
EXTRN	_PyArg_ParseTupleAndKeywords_SizeT:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\modules\_io\_iomodule.c
pdata	SEGMENT
$pdata$io_open DD imagerel io_open
	DD	imagerel io_open+405
	DD	imagerel $unwind$io_open
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$io_open DD imagerel io_open+405
	DD	imagerel io_open+1201
	DD	imagerel $chain$0$io_open
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$io_open DD imagerel io_open+1201
	DD	imagerel io_open+1229
	DD	imagerel $chain$1$io_open
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$io_open DD imagerel io_open+1229
	DD	imagerel io_open+1714
	DD	imagerel $chain$2$io_open
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$io_open DD 020021H
	DD	028d400H
	DD	imagerel io_open
	DD	imagerel io_open+405
	DD	imagerel $unwind$io_open
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$io_open DD 021H
	DD	imagerel io_open
	DD	imagerel io_open+405
	DD	imagerel $unwind$io_open
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$io_open DD 020821H
	DD	028d408H
	DD	imagerel io_open
	DD	imagerel io_open+405
	DD	imagerel $unwind$io_open
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$io_open DD 0b1e01H
	DD	02a641eH
	DD	029341eH
	DD	022011eH
	DD	0e010f012H
	DD	0700cc00eH
	DD	0500bH
xdata	ENDS
;	COMDAT ??_C@_05JFEDHFGP@Osssi?$AA@
CONST	SEGMENT
??_C@_05JFEDHFGP@Osssi?$AA@ DB 'Osssi', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BAGABCMK@io_open?$AA@
CONST	SEGMENT
??_C@_07BAGABCMK@io_open?$AA@ DB 'io_open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KHFLOKNA@?4?4?2Modules?2_io?2_iomodule?4c?$AA@
CONST	SEGMENT
??_C@_0BL@KHFLOKNA@?4?4?2Modules?2_io?2_iomodule?4c?$AA@ DB '..\Modules\_'
	DB	'io\_iomodule.c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MPEHDMPO@Oi?$AA@
CONST	SEGMENT
??_C@_02MPEHDMPO@Oi?$AA@ DB 'Oi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HGCBKHPL@unknown?5mode?3?5?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_0BD@HGCBKHPL@unknown?5mode?3?5?8?$CFs?8?$AA@ DB 'unknown mode: ''%s'
	DB	'''', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PHGBMNHL@can?8t?5have?5unbuffered?5text?5I?1O?$AA@
CONST	SEGMENT
??_C@_0BP@PHGBMNHL@can?8t?5have?5unbuffered?5text?5I?1O?$AA@ DB 'can''t h'
	DB	'ave unbuffered text I/O', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KKBDGLGN@OsiO?$AA@
CONST	SEGMENT
??_C@_04KKBDGLGN@OsiO?$AA@ DB 'OsiO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OMAPNBPG@binary?5mode?5doesn?8t?5take?5a?5newli@
CONST	SEGMENT
??_C@_0CM@OMAPNBPG@binary?5mode?5doesn?8t?5take?5a?5newli@ DB 'binary mod'
	DB	'e doesn''t take a newline argument', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CCNHIIDC@binary?5mode?5doesn?8t?5take?5an?5erro@
CONST	SEGMENT
??_C@_0CM@CCNHIIDC@binary?5mode?5doesn?8t?5take?5an?5erro@ DB 'binary mod'
	DB	'e doesn''t take an errors argument', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CAFNFBNN@binary?5mode?5doesn?8t?5take?5an?5enco@
CONST	SEGMENT
??_C@_0CO@CAFNFBNN@binary?5mode?5doesn?8t?5take?5an?5enco@ DB 'binary mod'
	DB	'e doesn''t take an encoding argument', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@EAEIFFCJ@must?5have?5exactly?5one?5of?5create?1@
CONST	SEGMENT
??_C@_0DH@EAEIFFCJ@must?5have?5exactly?5one?5of?5create?1@ DB 'must have '
	DB	'exactly one of create/read/write/append mode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@EBAHAMKP@can?8t?5use?5U?5and?5writing?5mode?5at?5@
CONST	SEGMENT
??_C@_0CF@EBAHAMKP@can?8t?5use?5U?5and?5writing?5mode?5at?5@ DB 'can''t u'
	DB	'se U and writing mode at once', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IIKELEHA@invalid?5mode?3?5?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_0BD@IIKELEHA@invalid?5mode?3?5?8?$CFs?8?$AA@ DB 'invalid mode: ''%s'
	DB	'''', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NLGHEIMK@can?8t?5have?5text?5and?5binary?5mode?5@
CONST	SEGMENT
??_C@_0CI@NLGHEIMK@can?8t?5have?5text?5and?5binary?5mode?5@ DB 'can''t ha'
	DB	've text and binary mode at once', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IPEMFKOI@invalid?5file?3?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0BB@IPEMFKOI@invalid?5file?3?5?$CFR?$AA@ DB 'invalid file: %R', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MNHBHLPO@opener?$AA@
CONST	SEGMENT
??_C@_06MNHBHLPO@opener?$AA@ DB 'opener', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IOEMJIMP@closefd?$AA@
CONST	SEGMENT
??_C@_07IOEMJIMP@closefd?$AA@ DB 'closefd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NADKJHCJ@newline?$AA@
CONST	SEGMENT
??_C@_07NADKJHCJ@newline?$AA@ DB 'newline', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOMHCNPI@errors?$AA@
CONST	SEGMENT
??_C@_06EOMHCNPI@errors?$AA@ DB 'errors', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EBFCODAH@O?$HMsizzziO?3open?$AA@
CONST	SEGMENT
??_C@_0P@EBFCODAH@O?$HMsizzziO?3open?$AA@ DB 'O|sizzziO:open', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLPGAEIK@encoding?$AA@
CONST	SEGMENT
??_C@_08MLPGAEIK@encoding?$AA@ DB 'encoding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HIEBJLDI@buffering?$AA@
CONST	SEGMENT
??_C@_09HIEBJLDI@buffering?$AA@ DB 'buffering', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DAMGJPCA@file?$AA@
CONST	SEGMENT
??_C@_04DAMGJPCA@file?$AA@ DB 'file', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT io_open
_TEXT	SEGMENT
reading$1$ = 96
creating$1$ = 100
writing$1$ = 104
updating$1$ = 108
appending$1$ = 112
buffering$ = 116
mode$ = 120
closefd$ = 128
universal$1$ = 132
rawmode$ = 136
text$1$ = 144
tv575 = 144
file$ = 152
newline$ = 160
encoding$ = 168
errors$ = 176
opener$ = 184
kwlist$ = 192
self$ = 320
args$ = 328
kwds$ = 336
binary$1$ = 344
io_open	PROC						; COMDAT

; 219  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	41 56		 push	 r14
  00010	41 57		 push	 r15
  00012	48 8d 6c 24 f0	 lea	 rbp, QWORD PTR [rsp-16]
  00017	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H

; 220  :     char *kwlist[] = {"file", "mode", "buffering",
; 221  :                       "encoding", "errors", "newline",
; 222  :                       "closefd", "opener", NULL};

  0001e	33 db		 xor	 ebx, ebx
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04DAMGJPCA@file?$AA@
  00027	49 8b c0	 mov	 rax, r8
  0002a	48 89 4d c0	 mov	 QWORD PTR kwlist$[rbp-256], rcx
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GMGOKAFF@mode?$AA@
  00035	48 8b fa	 mov	 rdi, rdx
  00038	48 89 4d c8	 mov	 QWORD PTR kwlist$[rbp-248], rcx
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09HIEBJLDI@buffering?$AA@

; 223  :     PyObject *file, *opener = Py_None;
; 224  :     char *mode = "r";
; 225  :     int buffering = -1, closefd = 1;
; 226  :     char *encoding = NULL, *errors = NULL, *newline = NULL;
; 227  :     unsigned i;
; 228  : 
; 229  :     int creating = 0, reading = 0, writing = 0, appending = 0, updating = 0;
; 230  :     int text = 0, binary = 0, universal = 0;
; 231  : 
; 232  :     char rawmode[6], *m;
; 233  :     int line_buffering, isatty;
; 234  : 
; 235  :     PyObject *raw, *modeobj = NULL, *buffer = NULL, *wrapper = NULL;
; 236  : 
; 237  :     _Py_IDENTIFIER(isatty);
; 238  :     _Py_IDENTIFIER(fileno);
; 239  :     _Py_IDENTIFIER(mode);
; 240  : 
; 241  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|sizzziO:open", kwlist,
; 242  :                                      &file, &mode, &buffering,
; 243  :                                      &encoding, &errors, &newline,
; 244  :                                      &closefd, &opener)) {

  00043	4c 8d 4d c0	 lea	 r9, QWORD PTR kwlist$[rbp-256]
  00047	48 89 4d d0	 mov	 QWORD PTR kwlist$[rbp-240], rcx
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08MLPGAEIK@encoding?$AA@
  00052	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@EBFCODAH@O?$HMsizzziO?3open?$AA@
  00059	48 89 4d d8	 mov	 QWORD PTR kwlist$[rbp-232], rcx
  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06EOMHCNPI@errors?$AA@
  00064	be 01 00 00 00	 mov	 esi, 1
  00069	48 89 4d e0	 mov	 QWORD PTR kwlist$[rbp-224], rcx
  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07NADKJHCJ@newline?$AA@
  00074	48 8b d0	 mov	 rdx, rax
  00077	48 89 4d e8	 mov	 QWORD PTR kwlist$[rbp-216], rcx
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07IOEMJIMP@closefd?$AA@
  00082	48 89 5d 00	 mov	 QWORD PTR kwlist$[rbp-192], rbx
  00086	48 89 4d f0	 mov	 QWORD PTR kwlist$[rbp-208], rcx
  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06MNHBHLPO@opener?$AA@
  00091	c7 44 24 74 ff
	ff ff ff	 mov	 DWORD PTR buffering$[rsp], -1
  00099	48 89 4d f8	 mov	 QWORD PTR kwlist$[rbp-200], rcx
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000a4	89 75 80	 mov	 DWORD PTR closefd$[rbp-256], esi
  000a7	48 89 4d b8	 mov	 QWORD PTR opener$[rbp-256], rcx
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01KDCPPGHE@r?$AA@
  000b2	48 89 5d a8	 mov	 QWORD PTR encoding$[rbp-256], rbx
  000b6	48 89 4c 24 78	 mov	 QWORD PTR mode$[rsp], rcx
  000bb	48 8d 4d b8	 lea	 rcx, QWORD PTR opener$[rbp-256]
  000bf	48 89 5d b0	 mov	 QWORD PTR errors$[rbp-256], rbx
  000c3	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  000c8	48 8d 4d 80	 lea	 rcx, QWORD PTR closefd$[rbp-256]
  000cc	48 89 5d a0	 mov	 QWORD PTR newline$[rbp-256], rbx
  000d0	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  000d5	48 8d 4d a0	 lea	 rcx, QWORD PTR newline$[rbp-256]
  000d9	89 5c 24 64	 mov	 DWORD PTR creating$1$[rsp], ebx
  000dd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000e2	48 8d 4d b0	 lea	 rcx, QWORD PTR errors$[rbp-256]
  000e6	44 8b fb	 mov	 r15d, ebx
  000e9	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000ee	48 8d 4d a8	 lea	 rcx, QWORD PTR encoding$[rbp-256]
  000f2	89 5c 24 60	 mov	 DWORD PTR reading$1$[rsp], ebx
  000f6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000fb	48 8d 4c 24 74	 lea	 rcx, QWORD PTR buffering$[rsp]
  00100	89 5c 24 68	 mov	 DWORD PTR writing$1$[rsp], ebx
  00104	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00109	48 8d 4c 24 78	 lea	 rcx, QWORD PTR mode$[rsp]
  0010e	89 5c 24 70	 mov	 DWORD PTR appending$1$[rsp], ebx
  00112	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00117	48 8d 4d 98	 lea	 rcx, QWORD PTR file$[rbp-256]
  0011b	89 5c 24 6c	 mov	 DWORD PTR updating$1$[rsp], ebx
  0011f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00124	48 8b cf	 mov	 rcx, rdi
  00127	89 5d 90	 mov	 DWORD PTR text$1$[rbp-256], ebx
  0012a	89 5d 58	 mov	 DWORD PTR binary$1$[rbp-256], ebx
  0012d	89 5d 84	 mov	 DWORD PTR universal$1$[rbp-256], ebx
  00130	44 8b e3	 mov	 r12d, ebx
  00133	44 8b f3	 mov	 r14d, ebx
  00136	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  0013b	85 c0		 test	 eax, eax

; 245  :         return NULL;

  0013d	74 3d		 je	 SHORT $LN89@io_open

; 246  :     }
; 247  : 
; 248  :     if (!PyUnicode_Check(file) &&
; 249  : 	!PyBytes_Check(file) &&
; 250  : 	!PyNumber_Check(file)) {

  0013f	48 8b 55 98	 mov	 rdx, QWORD PTR file$[rbp-256]
  00143	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00147	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [rax+256]
  0014d	0f ba e1 1c	 bt	 ecx, 28
  00151	72 34		 jb	 SHORT $LN75@io_open
  00153	0f ba e1 1b	 bt	 ecx, 27
  00157	72 2e		 jb	 SHORT $LN75@io_open
  00159	48 8b ca	 mov	 rcx, rdx
  0015c	e8 00 00 00 00	 call	 PyNumber_Check
  00161	85 c0		 test	 eax, eax
  00163	75 1e		 jne	 SHORT $LN85@io_open

; 251  :         PyErr_Format(PyExc_TypeError, "invalid file: %R", file);

  00165	4c 8b 45 98	 mov	 r8, QWORD PTR file$[rbp-256]
  00169	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00170	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@IPEMFKOI@invalid?5file?3?5?$CFR?$AA@
  00177	e8 00 00 00 00	 call	 PyErr_Format
$LN89@io_open:

; 252  :         return NULL;

  0017c	33 c0		 xor	 eax, eax
  0017e	e9 2e 03 00 00	 jmp	 $LN77@io_open
$LN85@io_open:
  00183	48 8b 55 98	 mov	 rdx, QWORD PTR file$[rbp-256]
$LN75@io_open:

; 253  :     }
; 254  : 
; 255  :     /* Decode mode */
; 256  :     for (i = 0; i < strlen(mode); i++) {

  00187	4c 8b 44 24 78	 mov	 r8, QWORD PTR mode$[rsp]
  0018c	48 83 c9 ff	 or	 rcx, -1
  00190	33 c0		 xor	 eax, eax
  00192	49 8b f8	 mov	 rdi, r8
  00195	4c 89 ac 24 40
	01 00 00	 mov	 QWORD PTR [rsp+320], r13
  0019d	44 8b eb	 mov	 r13d, ebx
  001a0	f2 ae		 repne scasb
  001a2	48 f7 d1	 not	 rcx
  001a5	48 ff c9	 dec	 rcx
  001a8	0f 84 a2 00 00
	00		 je	 $LN72@io_open
  001ae	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:__ImageBase
$LL74@io_open:

; 257  :         char c = mode[i];
; 258  : 
; 259  :         switch (c) {

  001b5	42 0f be 14 03	 movsx	 edx, BYTE PTR [rbx+r8]
  001ba	8d 42 d5	 lea	 eax, DWORD PTR [rdx-43]
  001bd	83 f8 4d	 cmp	 eax, 77			; 0000004dH
  001c0	0f 87 13 01 00
	00		 ja	 $invalid_mode$20422
  001c6	48 98		 cdqe
  001c8	0f b6 84 07 00
	00 00 00	 movzx	 eax, BYTE PTR $LN83@io_open[rdi+rax]
  001d0	8b 8c 87 00 00
	00 00		 mov	 ecx, DWORD PTR $LN84@io_open[rdi+rax*4]
  001d7	48 03 cf	 add	 rcx, rdi
  001da	ff e1		 jmp	 rcx
$LN69@io_open:

; 260  :         case 'x':
; 261  :             creating = 1;

  001dc	89 74 24 64	 mov	 DWORD PTR creating$1$[rsp], esi

; 262  :             break;

  001e0	eb 26		 jmp	 SHORT $LN70@io_open
$LN67@io_open:

; 263  :         case 'r':
; 264  :             reading = 1;
; 265  :             break;
; 266  :         case 'w':
; 267  :             writing = 1;

  001e2	89 74 24 68	 mov	 DWORD PTR writing$1$[rsp], esi

; 268  :             break;

  001e6	eb 20		 jmp	 SHORT $LN70@io_open
$LN66@io_open:

; 269  :         case 'a':
; 270  :             appending = 1;

  001e8	89 74 24 70	 mov	 DWORD PTR appending$1$[rsp], esi

; 271  :             break;

  001ec	eb 1a		 jmp	 SHORT $LN70@io_open
$LN65@io_open:

; 272  :         case '+':
; 273  :             updating = 1;

  001ee	89 74 24 6c	 mov	 DWORD PTR updating$1$[rsp], esi

; 274  :             break;

  001f2	eb 14		 jmp	 SHORT $LN70@io_open
$LN64@io_open:

; 275  :         case 't':
; 276  :             text = 1;

  001f4	89 75 90	 mov	 DWORD PTR text$1$[rbp-256], esi

; 277  :             break;

  001f7	eb 0f		 jmp	 SHORT $LN70@io_open
$LN63@io_open:

; 278  :         case 'b':
; 279  :             binary = 1;

  001f9	89 75 58	 mov	 DWORD PTR binary$1$[rbp-256], esi

; 280  :             break;

  001fc	eb 0a		 jmp	 SHORT $LN70@io_open
$LN62@io_open:

; 281  :         case 'U':
; 282  :             universal = 1;

  001fe	89 75 84	 mov	 DWORD PTR universal$1$[rbp-256], esi
$LN68@io_open:

; 283  :             reading = 1;

  00201	89 74 24 60	 mov	 DWORD PTR reading$1$[rsp], esi
  00205	44 8b fe	 mov	 r15d, esi
$LN70@io_open:

; 284  :             break;
; 285  :         default:
; 286  :             goto invalid_mode;
; 287  :         }
; 288  : 
; 289  :         /* c must not be duplicated */
; 290  :         if (strchr(mode+i+1, c)) {

  00208	41 8b c5	 mov	 eax, r13d
  0020b	4a 8d 4c 00 01	 lea	 rcx, QWORD PTR [rax+r8+1]
  00210	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  00216	4c 8b 44 24 78	 mov	 r8, QWORD PTR mode$[rsp]
  0021b	48 85 c0	 test	 rax, rax
  0021e	0f 85 b5 00 00
	00		 jne	 $invalid_mode$20422

; 253  :     }
; 254  : 
; 255  :     /* Decode mode */
; 256  :     for (i = 0; i < strlen(mode); i++) {

  00224	48 83 c9 ff	 or	 rcx, -1
  00228	41 ff c5	 inc	 r13d
  0022b	49 8b f8	 mov	 rdi, r8
  0022e	f2 ae		 repne scasb
  00230	41 8b c5	 mov	 eax, r13d
  00233	48 ff c3	 inc	 rbx
  00236	48 f7 d1	 not	 rcx
  00239	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:__ImageBase
  00240	48 ff c9	 dec	 rcx
  00243	48 3b c1	 cmp	 rax, rcx
  00246	0f 82 69 ff ff
	ff		 jb	 $LL74@io_open

; 284  :             break;
; 285  :         default:
; 286  :             goto invalid_mode;
; 287  :         }
; 288  : 
; 289  :         /* c must not be duplicated */
; 290  :         if (strchr(mode+i+1, c)) {

  0024c	48 8b 55 98	 mov	 rdx, QWORD PTR file$[rbp-256]
$LN72@io_open:

; 294  :         }
; 295  : 
; 296  :     }
; 297  : 
; 298  :     m = rawmode;
; 299  :     if (creating)  *(m++) = 'x';

  00250	44 8b 4c 24 64	 mov	 r9d, DWORD PTR creating$1$[rsp]
  00255	48 8d 45 88	 lea	 rax, QWORD PTR rawmode$[rbp-256]
  00259	45 85 c9	 test	 r9d, r9d
  0025c	74 08		 je	 SHORT $LN59@io_open
  0025e	c6 45 88 78	 mov	 BYTE PTR rawmode$[rbp-256], 120 ; 00000078H
  00262	48 8d 45 89	 lea	 rax, QWORD PTR rawmode$[rbp-255]
$LN59@io_open:

; 300  :     if (reading)   *(m++) = 'r';

  00266	45 85 ff	 test	 r15d, r15d
  00269	74 06		 je	 SHORT $LN58@io_open
  0026b	c6 00 72	 mov	 BYTE PTR [rax], 114	; 00000072H
  0026e	48 ff c0	 inc	 rax
$LN58@io_open:

; 301  :     if (writing)   *(m++) = 'w';

  00271	8b 4c 24 68	 mov	 ecx, DWORD PTR writing$1$[rsp]
  00275	85 c9		 test	 ecx, ecx
  00277	74 06		 je	 SHORT $LN57@io_open
  00279	c6 00 77	 mov	 BYTE PTR [rax], 119	; 00000077H
  0027c	48 ff c0	 inc	 rax
$LN57@io_open:

; 302  :     if (appending) *(m++) = 'a';

  0027f	8b 7c 24 70	 mov	 edi, DWORD PTR appending$1$[rsp]
  00283	85 ff		 test	 edi, edi
  00285	74 06		 je	 SHORT $LN56@io_open
  00287	c6 00 61	 mov	 BYTE PTR [rax], 97	; 00000061H
  0028a	48 ff c0	 inc	 rax
$LN56@io_open:

; 303  :     if (updating)  *(m++) = '+';

  0028d	44 39 64 24 6c	 cmp	 DWORD PTR updating$1$[rsp], r12d
  00292	74 06		 je	 SHORT $LN55@io_open
  00294	c6 00 2b	 mov	 BYTE PTR [rax], 43	; 0000002bH
  00297	48 ff c0	 inc	 rax
$LN55@io_open:

; 304  :     *m = '\0';

  0029a	44 88 20	 mov	 BYTE PTR [rax], r12b

; 305  : 
; 306  :     /* Parameters validation */
; 307  :     if (universal) {

  0029d	44 39 65 84	 cmp	 DWORD PTR universal$1$[rbp-256], r12d
  002a1	74 0f		 je	 SHORT $LN54@io_open

; 308  :         if (writing || appending) {

  002a3	85 c9		 test	 ecx, ecx
  002a5	75 4a		 jne	 SHORT $LN52@io_open
  002a7	85 ff		 test	 edi, edi
  002a9	75 46		 jne	 SHORT $LN52@io_open

; 312  :         }
; 313  :         reading = 1;

  002ab	44 8b fe	 mov	 r15d, esi
  002ae	89 74 24 60	 mov	 DWORD PTR reading$1$[rsp], esi
$LN54@io_open:

; 314  :     }
; 315  : 
; 316  :     if (text && binary) {

  002b2	44 8b 45 58	 mov	 r8d, DWORD PTR binary$1$[rbp-256]
  002b6	44 39 65 90	 cmp	 DWORD PTR text$1$[rbp-256], r12d
  002ba	74 4d		 je	 SHORT $LN51@io_open
  002bc	45 85 c0	 test	 r8d, r8d
  002bf	74 48		 je	 SHORT $LN51@io_open

; 317  :         PyErr_SetString(PyExc_ValueError,
; 318  :                         "can't have text and binary mode at once");

  002c1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  002c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@NLGHEIMK@can?8t?5have?5text?5and?5binary?5mode?5@
  002cf	e8 00 00 00 00	 call	 PyErr_SetString

; 319  :         return NULL;

  002d4	e9 ce 01 00 00	 jmp	 $LN3@io_open
$invalid_mode$20422:

; 291  :           invalid_mode:
; 292  :             PyErr_Format(PyExc_ValueError, "invalid mode: '%s'", mode);

  002d9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  002e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@IIKELEHA@invalid?5mode?3?5?8?$CFs?8?$AA@
  002e7	e8 00 00 00 00	 call	 PyErr_Format

; 293  :             return NULL;

  002ec	e9 b6 01 00 00	 jmp	 $LN3@io_open
$LN52@io_open:

; 309  :             PyErr_SetString(PyExc_ValueError,
; 310  :                             "can't use U and writing mode at once");

  002f1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  002f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@EBAHAMKP@can?8t?5use?5U?5and?5writing?5mode?5at?5@
  002ff	e8 00 00 00 00	 call	 PyErr_SetString

; 311  :             return NULL;

  00304	e9 9e 01 00 00	 jmp	 $LN3@io_open
$LN51@io_open:

; 320  :     }
; 321  : 
; 322  :     if (creating + reading + writing + appending > 1) {

  00309	8d 04 0f	 lea	 eax, DWORD PTR [rdi+rcx]
  0030c	41 03 c7	 add	 eax, r15d
  0030f	41 03 c1	 add	 eax, r9d
  00312	3b c6		 cmp	 eax, esi
  00314	7e 18		 jle	 SHORT $LN50@io_open

; 323  :         PyErr_SetString(PyExc_ValueError,
; 324  :                         "must have exactly one of create/read/write/append mode");

  00316	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0031d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@EAEIFFCJ@must?5have?5exactly?5one?5of?5create?1@
  00324	e8 00 00 00 00	 call	 PyErr_SetString

; 325  :         return NULL;

  00329	e9 79 01 00 00	 jmp	 $LN3@io_open
$LN50@io_open:

; 326  :     }
; 327  : 
; 328  :     if (binary && encoding != NULL) {

  0032e	45 85 c0	 test	 r8d, r8d
  00331	74 5a		 je	 SHORT $LN47@io_open
  00333	4c 39 65 a8	 cmp	 QWORD PTR encoding$[rbp-256], r12
  00337	74 18		 je	 SHORT $LN49@io_open

; 329  :         PyErr_SetString(PyExc_ValueError,
; 330  :                         "binary mode doesn't take an encoding argument");

  00339	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00340	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@CAFNFBNN@binary?5mode?5doesn?8t?5take?5an?5enco@
  00347	e8 00 00 00 00	 call	 PyErr_SetString

; 331  :         return NULL;

  0034c	e9 56 01 00 00	 jmp	 $LN3@io_open
$LN49@io_open:

; 332  :     }
; 333  : 
; 334  :     if (binary && errors != NULL) {

  00351	4c 39 65 b0	 cmp	 QWORD PTR errors$[rbp-256], r12
  00355	74 18		 je	 SHORT $LN48@io_open

; 335  :         PyErr_SetString(PyExc_ValueError,
; 336  :                         "binary mode doesn't take an errors argument");

  00357	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0035e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@CCNHIIDC@binary?5mode?5doesn?8t?5take?5an?5erro@
  00365	e8 00 00 00 00	 call	 PyErr_SetString

; 337  :         return NULL;

  0036a	e9 38 01 00 00	 jmp	 $LN3@io_open
$LN48@io_open:

; 338  :     }
; 339  : 
; 340  :     if (binary && newline != NULL) {

  0036f	4c 39 65 a0	 cmp	 QWORD PTR newline$[rbp-256], r12
  00373	74 18		 je	 SHORT $LN47@io_open

; 341  :         PyErr_SetString(PyExc_ValueError,
; 342  :                         "binary mode doesn't take a newline argument");

  00375	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0037c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@OMAPNBPG@binary?5mode?5doesn?8t?5take?5a?5newli@
  00383	e8 00 00 00 00	 call	 PyErr_SetString

; 343  :         return NULL;

  00388	e9 1a 01 00 00	 jmp	 $LN3@io_open
$LN47@io_open:

; 344  :     }
; 345  : 
; 346  :     /* Create the Raw file stream */
; 347  :     raw = PyObject_CallFunction((PyObject *)&PyFileIO_Type,
; 348  :                                 "OsiO", file, rawmode, closefd, opener);

  0038d	48 8b 45 b8	 mov	 rax, QWORD PTR opener$[rbp-256]
  00391	4c 8b c2	 mov	 r8, rdx
  00394	4c 8d 4d 88	 lea	 r9, QWORD PTR rawmode$[rbp-256]
  00398	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0039d	8b 45 80	 mov	 eax, DWORD PTR closefd$[rbp-256]
  003a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KKBDGLGN@OsiO?$AA@
  003a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFileIO_Type
  003ae	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  003b2	e8 00 00 00 00	 call	 _PyObject_CallFunction_SizeT
  003b7	48 8b d8	 mov	 rbx, rax

; 349  :     if (raw == NULL)

  003ba	48 85 c0	 test	 rax, rax

; 350  :         return NULL;

  003bd	0f 84 e4 00 00
	00		 je	 $LN3@io_open

; 351  : 
; 352  :     modeobj = PyUnicode_FromString(mode);

  003c3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR mode$[rsp]
  003c8	e8 00 00 00 00	 call	 PyUnicode_FromString
  003cd	48 8b f8	 mov	 rdi, rax

; 353  :     if (modeobj == NULL)

  003d0	48 85 c0	 test	 rax, rax
  003d3	0f 84 9a 00 00
	00		 je	 $error$20461

; 354  :         goto error;
; 355  : 
; 356  :     /* buffering */
; 357  :     {
; 358  :         PyObject *res = _PyObject_CallMethodId(raw, &PyId_isatty, NULL);

  003d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  003df	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  003e8	45 33 c0	 xor	 r8d, r8d
  003eb	48 8b 04 d1	 mov	 rax, QWORD PTR [rcx+rdx*8]
  003ef	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_isatty@?1??io_open@@9@9
  003f4	48 8b cb	 mov	 rcx, rbx
  003f7	48 03 d0	 add	 rdx, rax
  003fa	48 89 45 90	 mov	 QWORD PTR tv575[rbp-256], rax
  003fe	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00403	4c 8b e8	 mov	 r13, rax

; 359  :         if (res == NULL)

  00406	48 85 c0	 test	 rax, rax
  00409	74 68		 je	 SHORT $error$20461

; 360  :             goto error;
; 361  :         isatty = PyLong_AsLong(res);

  0040b	48 8b c8	 mov	 rcx, rax
  0040e	e8 00 00 00 00	 call	 PyLong_AsLong

; 362  :         Py_DECREF(res);

  00413	49 8b cd	 mov	 rcx, r13
  00416	44 8b f8	 mov	 r15d, eax
  00419	e8 00 00 00 00	 call	 _Py_DecRef

; 363  :         if (isatty == -1 && PyErr_Occurred())

  0041e	41 83 ff ff	 cmp	 r15d, -1
  00422	75 0a		 jne	 SHORT $LN43@io_open
  00424	e8 00 00 00 00	 call	 PyErr_Occurred
  00429	48 85 c0	 test	 rax, rax
  0042c	75 45		 jne	 SHORT $error$20461
$LN43@io_open:

; 364  :             goto error;
; 365  :     }
; 366  : 
; 367  :     if (buffering == 1 || (buffering < 0 && isatty)) {

  0042e	44 8b 4c 24 74	 mov	 r9d, DWORD PTR buffering$[rsp]
  00433	44 3b ce	 cmp	 r9d, esi
  00436	0f 84 9e 00 00
	00		 je	 $LN41@io_open
  0043c	45 85 c9	 test	 r9d, r9d
  0043f	79 09		 jns	 SHORT $LN42@io_open
  00441	45 85 ff	 test	 r15d, r15d
  00444	0f 85 90 00 00
	00		 jne	 $LN41@io_open
$LN42@io_open:

; 368  :         buffering = -1;
; 369  :         line_buffering = 1;
; 370  :     }
; 371  :     else
; 372  :         line_buffering = 0;

  0044a	33 f6		 xor	 esi, esi

; 373  : 
; 374  :     if (buffering < 0) {

  0044c	45 85 c9	 test	 r9d, r9d
  0044f	0f 88 85 00 00
	00		 js	 $LN41@io_open

; 376  : #ifdef HAVE_STRUCT_STAT_ST_BLKSIZE
; 377  :         {
; 378  :             struct stat st;
; 379  :             long fileno;
; 380  :             PyObject *res = _PyObject_CallMethodId(raw, &PyId_fileno, NULL);
; 381  :             if (res == NULL)
; 382  :                 goto error;
; 383  : 
; 384  :             fileno = PyLong_AsLong(res);
; 385  :             Py_DECREF(res);
; 386  :             if (fileno == -1 && PyErr_Occurred())
; 387  :                 goto error;
; 388  : 
; 389  :             if (fstat(fileno, &st) >= 0 && st.st_blksize > 1)
; 390  :                 buffering = st.st_blksize;
; 391  :         }
; 392  : #endif
; 393  :     }
; 394  :     if (buffering < 0) {
; 395  :         PyErr_SetString(PyExc_ValueError,
; 396  :                         "invalid buffering size");
; 397  :         goto error;
; 398  :     }
; 399  : 
; 400  :     /* if not buffering, returns the raw file object */
; 401  :     if (buffering == 0) {

  00455	0f 85 8a 00 00
	00		 jne	 $LN37@io_open

; 402  :         if (!binary) {

  0045b	39 75 58	 cmp	 DWORD PTR binary$1$[rbp-256], esi
  0045e	75 6d		 jne	 SHORT $LN36@io_open

; 403  :             PyErr_SetString(PyExc_ValueError,
; 404  :                             "can't have unbuffered text I/O");

  00460	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00467	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@PHGBMNHL@can?8t?5have?5unbuffered?5text?5I?1O?$AA@
  0046e	e8 00 00 00 00	 call	 PyErr_SetString
$error$20461:

; 455  : 
; 456  :   error:
; 457  :     Py_XDECREF(raw);

  00473	48 85 db	 test	 rbx, rbx
  00476	74 08		 je	 SHORT $LN15@io_open
  00478	48 8b cb	 mov	 rcx, rbx
  0047b	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@io_open:

; 458  :     Py_XDECREF(modeobj);

  00480	48 85 ff	 test	 rdi, rdi
  00483	74 08		 je	 SHORT $LN11@io_open
  00485	48 8b cf	 mov	 rcx, rdi
  00488	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@io_open:

; 459  :     Py_XDECREF(buffer);

  0048d	4d 85 e4	 test	 r12, r12
  00490	74 08		 je	 SHORT $LN7@io_open
  00492	49 8b cc	 mov	 rcx, r12
  00495	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@io_open:

; 460  :     Py_XDECREF(wrapper);

  0049a	4d 85 f6	 test	 r14, r14
  0049d	74 08		 je	 SHORT $LN3@io_open
  0049f	49 8b ce	 mov	 rcx, r14
  004a2	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@io_open:

; 461  :     return NULL;

  004a7	33 c0		 xor	 eax, eax
$LN88@io_open:
  004a9	4c 8b ac 24 40
	01 00 00	 mov	 r13, QWORD PTR [rsp+320]
$LN77@io_open:

; 462  : }

  004b1	4c 8d 9c 24 10
	01 00 00	 lea	 r11, QWORD PTR [rsp+272]
  004b9	49 8b 5b 38	 mov	 rbx, QWORD PTR [r11+56]
  004bd	49 8b 73 40	 mov	 rsi, QWORD PTR [r11+64]
  004c1	49 8b e3	 mov	 rsp, r11
  004c4	41 5f		 pop	 r15
  004c6	41 5e		 pop	 r14
  004c8	41 5c		 pop	 r12
  004ca	5f		 pop	 rdi
  004cb	5d		 pop	 rbp
  004cc	c3		 ret	 0
$LN36@io_open:

; 405  :             goto error;
; 406  :         }
; 407  : 
; 408  :         Py_DECREF(modeobj);

  004cd	48 8b cf	 mov	 rcx, rdi
  004d0	e8 00 00 00 00	 call	 _Py_DecRef

; 409  :         return raw;

  004d5	48 8b c3	 mov	 rax, rbx
  004d8	eb cf		 jmp	 SHORT $LN88@io_open
$LN41@io_open:

; 375  :         buffering = DEFAULT_BUFFER_SIZE;

  004da	41 b9 00 20 00
	00		 mov	 r9d, 8192		; 00002000H
  004e0	44 89 4c 24 74	 mov	 DWORD PTR buffering$[rsp], r9d
$LN37@io_open:

; 410  :     }
; 411  : 
; 412  :     /* wraps into a buffered file */
; 413  :     {
; 414  :         PyObject *Buffered_class;
; 415  : 
; 416  :         if (updating)

  004e5	44 39 64 24 6c	 cmp	 DWORD PTR updating$1$[rsp], r12d
  004ea	74 09		 je	 SHORT $LN35@io_open

; 417  :             Buffered_class = (PyObject *)&PyBufferedRandom_Type;

  004ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedRandom_Type
  004f3	eb 4d		 jmp	 SHORT $LN29@io_open
$LN35@io_open:

; 418  :         else if (creating || writing || appending)

  004f5	44 39 64 24 64	 cmp	 DWORD PTR creating$1$[rsp], r12d
  004fa	75 3f		 jne	 SHORT $LN32@io_open
  004fc	8b 4c 24 68	 mov	 ecx, DWORD PTR writing$1$[rsp]
  00500	85 c9		 test	 ecx, ecx
  00502	75 37		 jne	 SHORT $LN32@io_open
  00504	44 8b 54 24 70	 mov	 r10d, DWORD PTR appending$1$[rsp]
  00509	45 85 d2	 test	 r10d, r10d
  0050c	75 2d		 jne	 SHORT $LN32@io_open

; 420  :         else if (reading)

  0050e	44 39 64 24 60	 cmp	 DWORD PTR reading$1$[rsp], r12d
  00513	74 09		 je	 SHORT $LN30@io_open

; 421  :             Buffered_class = (PyObject *)&PyBufferedReader_Type;

  00515	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedReader_Type

; 422  :         else {

  0051c	eb 24		 jmp	 SHORT $LN29@io_open
$LN30@io_open:

; 423  :             PyErr_Format(PyExc_ValueError,
; 424  :                          "unknown mode: '%s'", mode);

  0051e	4c 8b 44 24 78	 mov	 r8, QWORD PTR mode$[rsp]
  00523	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0052a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@HGCBKHPL@unknown?5mode?3?5?8?$CFs?8?$AA@
  00531	e8 00 00 00 00	 call	 PyErr_Format

; 425  :             goto error;

  00536	e9 38 ff ff ff	 jmp	 $error$20461
$LN32@io_open:

; 419  :             Buffered_class = (PyObject *)&PyBufferedWriter_Type;

  0053b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedWriter_Type
$LN29@io_open:

; 426  :         }
; 427  : 
; 428  :         buffer = PyObject_CallFunction(Buffered_class, "Oi", raw, buffering);

  00542	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MPEHDMPO@Oi?$AA@
  00549	4c 8b c3	 mov	 r8, rbx
  0054c	e8 00 00 00 00	 call	 _PyObject_CallFunction_SizeT

; 429  :     }
; 430  :     Py_CLEAR(raw);

  00551	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@KHFLOKNA@?4?4?2Modules?2_io?2_iomodule?4c?$AA@
  00558	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07BAGABCMK@io_open?$AA@
  0055f	4c 8b cb	 mov	 r9, rbx
  00562	41 b8 ae 01 00
	00		 mov	 r8d, 430		; 000001aeH
  00568	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00570	4c 8b e0	 mov	 r12, rax
  00573	e8 00 00 00 00	 call	 _PyParallel_Guard
  00578	85 c0		 test	 eax, eax
  0057a	75 0a		 jne	 SHORT $LN27@io_open
  0057c	48 8b cb	 mov	 rcx, rbx
  0057f	33 db		 xor	 ebx, ebx
  00581	e8 00 00 00 00	 call	 _Py_DecRef
$LN27@io_open:

; 431  :     if (buffer == NULL)

  00586	4d 85 e4	 test	 r12, r12
  00589	0f 84 e4 fe ff
	ff		 je	 $error$20461

; 432  :         goto error;
; 433  : 
; 434  : 
; 435  :     /* if binary, returns the buffered file */
; 436  :     if (binary) {

  0058f	44 39 75 58	 cmp	 DWORD PTR binary$1$[rbp-256], r14d
  00593	74 10		 je	 SHORT $LN23@io_open

; 437  :         Py_DECREF(modeobj);

  00595	48 8b cf	 mov	 rcx, rdi
  00598	e8 00 00 00 00	 call	 _Py_DecRef

; 438  :         return buffer;

  0059d	49 8b c4	 mov	 rax, r12
  005a0	e9 04 ff ff ff	 jmp	 $LN88@io_open
$LN23@io_open:

; 439  :     }
; 440  : 
; 441  :     /* wraps into a TextIOWrapper */
; 442  :     wrapper = PyObject_CallFunction((PyObject *)&PyTextIOWrapper_Type,
; 443  : 				    "Osssi",
; 444  : 				    buffer,
; 445  : 				    encoding, errors, newline,
; 446  : 				    line_buffering);

  005a5	48 8b 45 a0	 mov	 rax, QWORD PTR newline$[rbp-256]
  005a9	4c 8b 4d a8	 mov	 r9, QWORD PTR encoding$[rbp-256]
  005ad	89 74 24 30	 mov	 DWORD PTR [rsp+48], esi
  005b1	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  005b6	48 8b 45 b0	 mov	 rax, QWORD PTR errors$[rbp-256]
  005ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05JFEDHFGP@Osssi?$AA@
  005c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTextIOWrapper_Type
  005c8	4d 8b c4	 mov	 r8, r12
  005cb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005d0	e8 00 00 00 00	 call	 _PyObject_CallFunction_SizeT

; 447  :     Py_CLEAR(buffer);

  005d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@KHFLOKNA@?4?4?2Modules?2_io?2_iomodule?4c?$AA@
  005dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07BAGABCMK@io_open?$AA@
  005e3	4d 8b cc	 mov	 r9, r12
  005e6	41 b8 bf 01 00
	00		 mov	 r8d, 447		; 000001bfH
  005ec	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  005f4	4c 8b f0	 mov	 r14, rax
  005f7	e8 00 00 00 00	 call	 _PyParallel_Guard
  005fc	85 c0		 test	 eax, eax
  005fe	75 0b		 jne	 SHORT $LN21@io_open
  00600	49 8b cc	 mov	 rcx, r12
  00603	45 33 e4	 xor	 r12d, r12d
  00606	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@io_open:

; 448  :     if (wrapper == NULL)

  0060b	4d 85 f6	 test	 r14, r14
  0060e	0f 84 5f fe ff
	ff		 je	 $error$20461

; 449  :         goto error;
; 450  : 
; 451  :     if (_PyObject_SetAttrId(wrapper, &PyId_mode, modeobj) < 0)

  00614	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_mode@?1??io_open@@9@9
  00619	4c 8b c7	 mov	 r8, rdi
  0061c	49 8b ce	 mov	 rcx, r14
  0061f	48 03 55 90	 add	 rdx, QWORD PTR tv575[rbp-256]
  00623	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00628	85 c0		 test	 eax, eax
  0062a	0f 88 43 fe ff
	ff		 js	 $error$20461

; 452  :         goto error;
; 453  :     Py_DECREF(modeobj);

  00630	48 8b cf	 mov	 rcx, rdi
  00633	e8 00 00 00 00	 call	 _Py_DecRef

; 454  :     return wrapper;

  00638	49 8b c6	 mov	 rax, r14
  0063b	e9 69 fe ff ff	 jmp	 $LN88@io_open
$LN84@io_open:

; 462  : }

  00640	00 00 00 00	 DD	 $LN65@io_open
  00644	00 00 00 00	 DD	 $LN62@io_open
  00648	00 00 00 00	 DD	 $LN66@io_open
  0064c	00 00 00 00	 DD	 $LN63@io_open
  00650	00 00 00 00	 DD	 $LN68@io_open
  00654	00 00 00 00	 DD	 $LN64@io_open
  00658	00 00 00 00	 DD	 $LN67@io_open
  0065c	00 00 00 00	 DD	 $LN69@io_open
  00660	00 00 00 00	 DD	 $invalid_mode$20422
$LN83@io_open:
  00664	00		 DB	 0
  00665	08		 DB	 8
  00666	08		 DB	 8
  00667	08		 DB	 8
  00668	08		 DB	 8
  00669	08		 DB	 8
  0066a	08		 DB	 8
  0066b	08		 DB	 8
  0066c	08		 DB	 8
  0066d	08		 DB	 8
  0066e	08		 DB	 8
  0066f	08		 DB	 8
  00670	08		 DB	 8
  00671	08		 DB	 8
  00672	08		 DB	 8
  00673	08		 DB	 8
  00674	08		 DB	 8
  00675	08		 DB	 8
  00676	08		 DB	 8
  00677	08		 DB	 8
  00678	08		 DB	 8
  00679	08		 DB	 8
  0067a	08		 DB	 8
  0067b	08		 DB	 8
  0067c	08		 DB	 8
  0067d	08		 DB	 8
  0067e	08		 DB	 8
  0067f	08		 DB	 8
  00680	08		 DB	 8
  00681	08		 DB	 8
  00682	08		 DB	 8
  00683	08		 DB	 8
  00684	08		 DB	 8
  00685	08		 DB	 8
  00686	08		 DB	 8
  00687	08		 DB	 8
  00688	08		 DB	 8
  00689	08		 DB	 8
  0068a	08		 DB	 8
  0068b	08		 DB	 8
  0068c	08		 DB	 8
  0068d	08		 DB	 8
  0068e	01		 DB	 1
  0068f	08		 DB	 8
  00690	08		 DB	 8
  00691	08		 DB	 8
  00692	08		 DB	 8
  00693	08		 DB	 8
  00694	08		 DB	 8
  00695	08		 DB	 8
  00696	08		 DB	 8
  00697	08		 DB	 8
  00698	08		 DB	 8
  00699	08		 DB	 8
  0069a	02		 DB	 2
  0069b	03		 DB	 3
  0069c	08		 DB	 8
  0069d	08		 DB	 8
  0069e	08		 DB	 8
  0069f	08		 DB	 8
  006a0	08		 DB	 8
  006a1	08		 DB	 8
  006a2	08		 DB	 8
  006a3	08		 DB	 8
  006a4	08		 DB	 8
  006a5	08		 DB	 8
  006a6	08		 DB	 8
  006a7	08		 DB	 8
  006a8	08		 DB	 8
  006a9	08		 DB	 8
  006aa	08		 DB	 8
  006ab	04		 DB	 4
  006ac	08		 DB	 8
  006ad	05		 DB	 5
  006ae	08		 DB	 8
  006af	08		 DB	 8
  006b0	06		 DB	 6
  006b1	07		 DB	 7
io_open	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@KDIDCMCC@cannot?5fit?5?8?$CF?4200s?8?5into?5an?5offs@ ; `string'
PUBLIC	PyNumber_AsOff_t
EXTRN	_PyLong_Sign:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_GivenExceptionMatches:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyLong_AsLongLong:PROC
EXTRN	PyNumber_Index:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyNumber_AsOff_t DD imagerel $LN11
	DD	imagerel $LN11+200
	DD	imagerel $unwind$PyNumber_AsOff_t
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyNumber_AsOff_t DD 083e01H
	DD	06343eH
	DD	08640fH
	DD	07540fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0DB@KDIDCMCC@cannot?5fit?5?8?$CF?4200s?8?5into?5an?5offs@
CONST	SEGMENT
??_C@_0DB@KDIDCMCC@cannot?5fit?5?8?$CF?4200s?8?5into?5an?5offs@ DB 'canno'
	DB	't fit ''%.200s'' into an offset-sized integer', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyNumber_AsOff_t
_TEXT	SEGMENT
item$ = 48
err$ = 56
PyNumber_AsOff_t PROC					; COMDAT

; 470  : {

$LN11:
  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f2	 mov	 rsi, rdx
  00012	48 8b e9	 mov	 rbp, rcx

; 471  :     Py_off_t result;
; 472  :     PyObject *runerr;
; 473  :     PyObject *value = PyNumber_Index(item);

  00015	e8 00 00 00 00	 call	 PyNumber_Index
  0001a	48 8b f8	 mov	 rdi, rax

; 474  :     if (value == NULL)

  0001d	48 85 c0	 test	 rax, rax
  00020	75 14		 jne	 SHORT $LN8@PyNumber_A

; 475  :         return -1;

  00022	48 83 c8 ff	 or	 rax, -1

; 509  :     return result;
; 510  : }

  00026	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0002b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5f		 pop	 rdi
  00035	c3		 ret	 0
$LN8@PyNumber_A:

; 476  : 
; 477  :     /* We're done if PyLong_AsSsize_t() returns without error. */
; 478  :     result = PyLong_AsOff_t(value);

  00036	48 8b c8	 mov	 rcx, rax
  00039	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0003e	e8 00 00 00 00	 call	 PyLong_AsLongLong
  00043	48 8b d8	 mov	 rbx, rax

; 479  :     if (result != -1 || !(runerr = PyErr_Occurred()))

  00046	48 83 f8 ff	 cmp	 rax, -1
  0004a	75 5c		 jne	 SHORT $finish$20552
  0004c	e8 00 00 00 00	 call	 PyErr_Occurred
  00051	48 85 c0	 test	 rax, rax
  00054	74 52		 je	 SHORT $finish$20552

; 480  :         goto finish;
; 481  : 
; 482  :     /* Error handling code -- only manage OverflowError differently */
; 483  :     if (!PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError))

  00056	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  0005d	48 8b c8	 mov	 rcx, rax
  00060	e8 00 00 00 00	 call	 PyErr_GivenExceptionMatches
  00065	85 c0		 test	 eax, eax
  00067	74 3f		 je	 SHORT $finish$20552

; 484  :         goto finish;
; 485  : 
; 486  :     PyErr_Clear();

  00069	e8 00 00 00 00	 call	 PyErr_Clear

; 487  :     /* If no error-handling desired then the default clipping
; 488  :        is sufficient.
; 489  :      */
; 490  :     if (!err) {

  0006e	48 85 f6	 test	 rsi, rsi
  00071	75 1e		 jne	 SHORT $LN4@PyNumber_A

; 491  :         assert(PyLong_Check(value));
; 492  :         /* Whether or not it is less than or equal to
; 493  :            zero is determined by the sign of ob_size
; 494  :         */
; 495  :         if (_PyLong_Sign(value) < 0)

  00073	48 8b cf	 mov	 rcx, rdi
  00076	e8 00 00 00 00	 call	 _PyLong_Sign
  0007b	33 db		 xor	 ebx, ebx
  0007d	85 c0		 test	 eax, eax
  0007f	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00089	0f 98 c3	 sets	 bl
  0008c	48 03 d8	 add	 rbx, rax

; 496  :             result = PY_OFF_T_MIN;
; 497  :         else
; 498  :             result = PY_OFF_T_MAX;
; 499  :     }
; 500  :     else {

  0008f	eb 17		 jmp	 SHORT $finish$20552
$LN4@PyNumber_A:

; 501  :         /* Otherwise replace the error with caller's error object. */
; 502  :         PyErr_Format(err,
; 503  :                      "cannot fit '%.200s' into an offset-sized integer",
; 504  :                      item->ob_type->tp_name);

  00091	4c 8b 45 58	 mov	 r8, QWORD PTR [rbp+88]
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@KDIDCMCC@cannot?5fit?5?8?$CF?4200s?8?5into?5an?5offs@
  0009c	48 8b ce	 mov	 rcx, rsi
  0009f	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  000a3	e8 00 00 00 00	 call	 PyErr_Format
$finish$20552:

; 505  :     }
; 506  : 
; 507  :  finish:
; 508  :     Py_DECREF(value);

  000a8	48 8b cf	 mov	 rcx, rdi
  000ab	e8 00 00 00 00	 call	 _Py_DecRef

; 509  :     return result;
; 510  : }

  000b0	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000b5	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ba	48 8b c3	 mov	 rax, rbx
  000bd	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c6	5f		 pop	 rdi
  000c7	c3		 ret	 0
PyNumber_AsOff_t ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@INOFDAGI@integer?5argument?5expected?0?5got?5?8@ ; `string'
PUBLIC	_PyIO_ConvertSsize_t
EXTRN	PyNumber_AsSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyIO_ConvertSsize_t DD imagerel $LN9
	DD	imagerel $LN9+151
	DD	imagerel $unwind$_PyIO_ConvertSsize_t
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyIO_ConvertSsize_t DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CI@INOFDAGI@integer?5argument?5expected?0?5got?5?8@
CONST	SEGMENT
??_C@_0CI@INOFDAGI@integer?5argument?5expected?0?5got?5?8@ DB 'integer ar'
	DB	'gument expected, got ''%.200s''', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyIO_ConvertSsize_t
_TEXT	SEGMENT
obj$ = 48
result$ = 56
_PyIO_ConvertSsize_t PROC				; COMDAT

; 515  : _PyIO_ConvertSsize_t(PyObject *obj, void *result) {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 516  :     Py_ssize_t limit;
; 517  :     if (obj == Py_None) {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00011	48 8b fa	 mov	 rdi, rdx
  00014	48 8b d9	 mov	 rbx, rcx
  00017	48 3b c8	 cmp	 rcx, rax
  0001a	75 15		 jne	 SHORT $LN5@PyIO_Conve

; 518  :         limit = -1;

  0001c	48 83 cb ff	 or	 rbx, -1

; 530  :     }
; 531  :     *((Py_ssize_t *)result) = limit;

  00020	48 89 1a	 mov	 QWORD PTR [rdx], rbx

; 532  :     return 1;

  00023	8d 43 02	 lea	 eax, QWORD PTR [rbx+2]

; 533  : }

  00026	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5f		 pop	 rdi
  00030	c3		 ret	 0
$LN5@PyIO_Conve:

; 519  :     }
; 520  :     else if (PyNumber_Check(obj)) {

  00031	e8 00 00 00 00	 call	 PyNumber_Check
  00036	85 c0		 test	 eax, eax
  00038	74 35		 je	 SHORT $LN3@PyIO_Conve

; 521  :         limit = PyNumber_AsSsize_t(obj, PyExc_OverflowError);

  0003a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  00041	48 8b cb	 mov	 rcx, rbx
  00044	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  00049	48 8b d8	 mov	 rbx, rax

; 522  :         if (limit == -1 && PyErr_Occurred())

  0004c	48 83 f8 ff	 cmp	 rax, -1
  00050	75 0a		 jne	 SHORT $LN2@PyIO_Conve
  00052	e8 00 00 00 00	 call	 PyErr_Occurred
  00057	48 85 c0	 test	 rax, rax

; 523  :             return 0;

  0005a	75 2e		 jne	 SHORT $LN8@PyIO_Conve
$LN2@PyIO_Conve:

; 530  :     }
; 531  :     *((Py_ssize_t *)result) = limit;

  0005c	48 89 1f	 mov	 QWORD PTR [rdi], rbx

; 532  :     return 1;

  0005f	b8 01 00 00 00	 mov	 eax, 1

; 533  : }

  00064	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00069	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006d	5f		 pop	 rdi
  0006e	c3		 ret	 0
$LN3@PyIO_Conve:

; 524  :     }
; 525  :     else {
; 526  :         PyErr_Format(PyExc_TypeError,
; 527  :                      "integer argument expected, got '%.200s'",
; 528  :                      Py_TYPE(obj)->tp_name);

  0006f	4c 8b 43 58	 mov	 r8, QWORD PTR [rbx+88]
  00073	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@INOFDAGI@integer?5argument?5expected?0?5got?5?8@
  00081	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00085	e8 00 00 00 00	 call	 PyErr_Format
$LN8@PyIO_Conve:

; 529  :         return 0;

  0008a	33 c0		 xor	 eax, eax

; 533  : }

  0008c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00091	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00095	5f		 pop	 rdi
  00096	c3		 ret	 0
_PyIO_ConvertSsize_t ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@PMBLAJP@iomodule_traverse?$AA@	; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
EXTRN	PyModule_GetState:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iomodule_traverse DD imagerel iomodule_traverse
	DD	imagerel iomodule_traverse+169
	DD	imagerel $unwind$iomodule_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iomodule_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BC@PMBLAJP@iomodule_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@PMBLAJP@iomodule_traverse?$AA@ DB 'iomodule_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT iomodule_traverse
_TEXT	SEGMENT
mod$ = 48
visit$ = 56
arg$ = 64
iomodule_traverse PROC					; COMDAT

; 537  : iomodule_traverse(PyObject *mod, visitproc visit, void *arg) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx

; 538  :     _PyIO_State *state = IO_MOD_STATE(mod);

  00015	e8 00 00 00 00	 call	 PyModule_GetState

; 539  :     if (!state->initialized)

  0001a	83 38 00	 cmp	 DWORD PTR [rax], 0
  0001d	48 8b d8	 mov	 rbx, rax

; 540  :         return 0;

  00020	74 75		 je	 SHORT $LN5@iomodule_t

; 541  :     if (state->locale_module != NULL) {

  00022	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00027	74 37		 je	 SHORT $LN10@iomodule_t

; 542  :         Py_VISIT(state->locale_module);

  00029	e8 00 00 00 00	 call	 _Py_PXCTX
  0002e	85 c0		 test	 eax, eax
  00030	74 1c		 je	 SHORT $LN9@iomodule_t
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@KHFLOKNA@?4?4?2Modules?2_io?2_iomodule?4c?$AA@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@PMBLAJP@iomodule_traverse?$AA@
  00040	45 33 c9	 xor	 r9d, r9d
  00043	41 b8 1e 02 00
	00		 mov	 r8d, 542		; 0000021eH
  00049	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@iomodule_t:
  0004e	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00052	48 85 c9	 test	 rcx, rcx
  00055	74 09		 je	 SHORT $LN10@iomodule_t
  00057	48 8b d7	 mov	 rdx, rdi
  0005a	ff d6		 call	 rsi
  0005c	85 c0		 test	 eax, eax
  0005e	75 39		 jne	 SHORT $LN15@iomodule_t
$LN10@iomodule_t:

; 543  :     }
; 544  :     Py_VISIT(state->unsupported_operation);

  00060	e8 00 00 00 00	 call	 _Py_PXCTX
  00065	85 c0		 test	 eax, eax
  00067	74 1c		 je	 SHORT $LN3@iomodule_t
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@KHFLOKNA@?4?4?2Modules?2_io?2_iomodule?4c?$AA@
  00070	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@PMBLAJP@iomodule_traverse?$AA@
  00077	45 33 c9	 xor	 r9d, r9d
  0007a	41 b8 20 02 00
	00		 mov	 r8d, 544		; 00000220H
  00080	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@iomodule_t:
  00085	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00089	48 85 c9	 test	 rcx, rcx
  0008c	74 09		 je	 SHORT $LN5@iomodule_t
  0008e	48 8b d7	 mov	 rdx, rdi
  00091	ff d6		 call	 rsi
  00093	85 c0		 test	 eax, eax
  00095	75 02		 jne	 SHORT $LN15@iomodule_t
$LN5@iomodule_t:

; 545  :     return 0;

  00097	33 c0		 xor	 eax, eax
$LN15@iomodule_t:

; 546  : }

  00099	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a7	5f		 pop	 rdi
  000a8	c3		 ret	 0
iomodule_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@FINKGIKP@iomodule_clear?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$iomodule_clear DD imagerel iomodule_clear
	DD	imagerel iomodule_clear+140
	DD	imagerel $unwind$iomodule_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$iomodule_clear DD imagerel iomodule_clear+140
	DD	imagerel iomodule_clear+249
	DD	imagerel $chain$0$iomodule_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$iomodule_clear DD imagerel iomodule_clear+249
	DD	imagerel iomodule_clear+272
	DD	imagerel $chain$2$iomodule_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$iomodule_clear DD imagerel iomodule_clear+272
	DD	imagerel iomodule_clear+285
	DD	imagerel $chain$4$iomodule_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$iomodule_clear DD imagerel iomodule_clear+285
	DD	imagerel iomodule_clear+293
	DD	imagerel $chain$5$iomodule_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$iomodule_clear DD 021H
	DD	imagerel iomodule_clear
	DD	imagerel iomodule_clear+140
	DD	imagerel $unwind$iomodule_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$iomodule_clear DD 020021H
	DD	083400H
	DD	imagerel iomodule_clear
	DD	imagerel iomodule_clear+140
	DD	imagerel $unwind$iomodule_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$iomodule_clear DD 020021H
	DD	083400H
	DD	imagerel iomodule_clear
	DD	imagerel iomodule_clear+140
	DD	imagerel $unwind$iomodule_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$iomodule_clear DD 020521H
	DD	083405H
	DD	imagerel iomodule_clear
	DD	imagerel iomodule_clear+140
	DD	imagerel $unwind$iomodule_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iomodule_clear DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0P@FINKGIKP@iomodule_clear?$AA@
CONST	SEGMENT
??_C@_0P@FINKGIKP@iomodule_clear?$AA@ DB 'iomodule_clear', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\_iomodule.c
CONST	ENDS
;	COMDAT iomodule_clear
_TEXT	SEGMENT
mod$ = 64
iomodule_clear PROC					; COMDAT

; 550  : iomodule_clear(PyObject *mod) {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 551  :     _PyIO_State *state = IO_MOD_STATE(mod);

  00006	e8 00 00 00 00	 call	 PyModule_GetState
  0000b	48 8b f8	 mov	 rdi, rax

; 552  :     if (!state->initialized)

  0000e	83 38 00	 cmp	 DWORD PTR [rax], 0

; 553  :         return 0;

  00011	0f 84 06 01 00
	00		 je	 $LN3@iomodule_c

; 554  :     if (state->locale_module != NULL)

  00017	4c 8b 48 08	 mov	 r9, QWORD PTR [rax+8]
  0001b	4d 85 c9	 test	 r9, r9
  0001e	74 36		 je	 SHORT $LN6@iomodule_c

; 555  :         Py_CLEAR(state->locale_module);

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@KHFLOKNA@?4?4?2Modules?2_io?2_iomodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@FINKGIKP@iomodule_clear?$AA@
  0002e	41 b8 2b 02 00
	00		 mov	 r8d, 555		; 0000022bH
  00034	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00041	85 c0		 test	 eax, eax
  00043	75 11		 jne	 SHORT $LN6@iomodule_c
  00045	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  00049	48 c7 47 08 00
	00 00 00	 mov	 QWORD PTR [rdi+8], 0
  00051	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@iomodule_c:

; 556  :     Py_CLEAR(state->unsupported_operation);

  00056	4c 8b 4f 10	 mov	 r9, QWORD PTR [rdi+16]
  0005a	4d 85 c9	 test	 r9, r9
  0005d	0f 84 ba 00 00
	00		 je	 $LN3@iomodule_c
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@KHFLOKNA@?4?4?2Modules?2_io?2_iomodule?4c?$AA@
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@FINKGIKP@iomodule_clear?$AA@
  00071	41 b8 2c 02 00
	00		 mov	 r8d, 556		; 0000022cH
  00077	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0007f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00084	85 c0		 test	 eax, eax
  00086	0f 85 91 00 00
	00		 jne	 $LN3@iomodule_c
  0008c	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00091	48 8b 5f 10	 mov	 rbx, QWORD PTR [rdi+16]
  00095	48 c7 47 10 00
	00 00 00	 mov	 QWORD PTR [rdi+16], 0
  0009d	e8 00 00 00 00	 call	 _Py_PXCTX
  000a2	85 c0		 test	 eax, eax
  000a4	75 72		 jne	 SHORT $LN24@iomodule_c
  000a6	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000aa	a8 20		 test	 al, 32			; 00000020H
  000ac	75 62		 jne	 SHORT $LN17@iomodule_c
  000ae	84 c0		 test	 al, al
  000b0	78 5e		 js	 SHORT $LN17@iomodule_c
  000b2	a8 02		 test	 al, 2
  000b4	75 62		 jne	 SHORT $LN24@iomodule_c
  000b6	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000ba	75 5c		 jne	 SHORT $LN24@iomodule_c
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000ca	4c 8b cb	 mov	 r9, rbx
  000cd	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000d3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000db	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e0	48 8b cb	 mov	 rcx, rbx
  000e3	85 c0		 test	 eax, eax
  000e5	74 12		 je	 SHORT $LN22@iomodule_c
  000e7	e8 00 00 00 00	 call	 _Px_Dealloc
  000ec	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 557  :     return 0;

  000f1	33 c0		 xor	 eax, eax

; 558  : }

  000f3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f7	5f		 pop	 rdi
  000f8	c3		 ret	 0

; 556  :     Py_CLEAR(state->unsupported_operation);

$LN22@iomodule_c:
  000f9	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000fd	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00103	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 557  :     return 0;

  00108	33 c0		 xor	 eax, eax

; 558  : }

  0010a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010e	5f		 pop	 rdi
  0010f	c3		 ret	 0

; 556  :     Py_CLEAR(state->unsupported_operation);

$LN17@iomodule_c:
  00110	48 8b cb	 mov	 rcx, rbx
  00113	e8 00 00 00 00	 call	 Px_DecRef
$LN24@iomodule_c:
  00118	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN3@iomodule_c:

; 557  :     return 0;

  0011d	33 c0		 xor	 eax, eax

; 558  : }

  0011f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00123	5f		 pop	 rdi
  00124	c3		 ret	 0
iomodule_clear ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT iomodule_free
_TEXT	SEGMENT
mod$ = 8
iomodule_free PROC					; COMDAT

; 562  :     iomodule_clear(mod);
; 563  : }

  00000	e9 00 00 00 00	 jmp	 iomodule_clear
iomodule_free ENDP
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_08IBOGFJJC@writable?$AA@			; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_08MABILMFG@truncate?$AA@			; `string'
PUBLIC	??_C@_04LBPCFPDD@tell?$AA@			; `string'
PUBLIC	??_C@_08BJPILIMO@setstate?$AA@			; `string'
PUBLIC	??_C@_08JPFEOKJG@seekable?$AA@			; `string'
PUBLIC	??_C@_04EDECCOGL@seek?$AA@			; `string'
PUBLIC	??_C@_05CFMALAOA@reset?$AA@			; `string'
PUBLIC	??_C@_08KBCDPPMN@readline?$AA@			; `string'
PUBLIC	??_C@_08BPEKIGCI@readinto?$AA@			; `string'
PUBLIC	??_C@_07JCDFOMC@readall?$AA@			; `string'
PUBLIC	??_C@_08INDGGIBD@readable?$AA@			; `string'
PUBLIC	??_C@_05FDBMPOID@read1?$AA@			; `string'
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
PUBLIC	??_C@_08EGHAIIMO@newlines?$AA@			; `string'
PUBLIC	??_C@_08OINEKLLD@getstate?$AA@			; `string'
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	??_C@_06GDGADLDP@encode?$AA@			; `string'
PUBLIC	??_C@_06KPNAMAEI@decode?$AA@			; `string'
PUBLIC	??_C@_06IKJOPBFO@closed?$AA@			; `string'
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	??_C@_0BK@KBKOCGBL@IncrementalNewlineDecoder?$AA@ ; `string'
PUBLIC	??_C@_0O@CKECCIPK@TextIOWrapper?$AA@		; `string'
PUBLIC	??_C@_0P@KKPCDGCM@BufferedRandom?$AA@		; `string'
PUBLIC	??_C@_0P@JIMJFGGF@BufferedRWPair?$AA@		; `string'
PUBLIC	??_C@_0P@FPHMGJHJ@BufferedWriter?$AA@		; `string'
PUBLIC	??_C@_0P@HDPOGIKD@BufferedReader?$AA@		; `string'
PUBLIC	??_C@_08KGGGHFAL@StringIO?$AA@			; `string'
PUBLIC	??_C@_07DINECNOD@BytesIO?$AA@			; `string'
PUBLIC	??_C@_06DCCDEGKI@FileIO?$AA@			; `string'
PUBLIC	??_C@_0M@JGAEDJGP@_TextIOBase?$AA@		; `string'
PUBLIC	??_C@_0BA@GBFMJPJJ@_BufferedIOBase?$AA@		; `string'
PUBLIC	??_C@_0L@OPFLGGFN@_RawIOBase?$AA@		; `string'
PUBLIC	??_C@_07NGNCJLEL@_IOBase?$AA@			; `string'
PUBLIC	??_C@_0BA@JGPGLFDG@BlockingIOError?$AA@		; `string'
PUBLIC	??_C@_07HPPCNGIB@s?$CIOO?$CJ?$HL?$HN?$AA@	; `string'
PUBLIC	??_C@_0BF@INDAPHCC@UnsupportedOperation?$AA@	; `string'
PUBLIC	??_C@_0BE@NAHCEAI@DEFAULT_BUFFER_SIZE?$AA@	; `string'
PUBLIC	PyInit__io
EXTRN	PyLong_FromLong:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	PyUnicode_FromStringAndSize:PROC
EXTRN	PyUnicode_InternFromString:PROC
EXTRN	PyIncrementalNewlineDecoder_Type:BYTE
EXTRN	PyBufferedRWPair_Type:BYTE
EXTRN	PyStringIO_Type:BYTE
EXTRN	_PyBytesIOBuffer_Type:BYTE
EXTRN	PyBytesIO_Type:BYTE
EXTRN	PyTextIOBase_Type:BYTE
EXTRN	PyBufferedIOBase_Type:BYTE
EXTRN	PyRawIOBase_Type:BYTE
EXTRN	PyType_Ready:PROC
EXTRN	PyIOBase_Type:BYTE
EXTRN	PyExc_BlockingIOError:QWORD
EXTRN	PyModule_AddObject:PROC
EXTRN	PyType_Type:BYTE
EXTRN	PyExc_IOError:QWORD
EXTRN	PyModule_AddIntConstant:PROC
EXTRN	PyModule_Create2:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyInit__io DD imagerel $LN82
	DD	imagerel $LN82+2392
	DD	imagerel $unwind$PyInit__io
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__io DD 0a3c01H
	DD	0bc43cH
	DD	0a6437H
	DD	09542fH
	DD	08342aH
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBOGFJJC@writable?$AA@
CONST	SEGMENT
??_C@_08IBOGFJJC@writable?$AA@ DB 'writable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MABILMFG@truncate?$AA@
CONST	SEGMENT
??_C@_08MABILMFG@truncate?$AA@ DB 'truncate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBPCFPDD@tell?$AA@
CONST	SEGMENT
??_C@_04LBPCFPDD@tell?$AA@ DB 'tell', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BJPILIMO@setstate?$AA@
CONST	SEGMENT
??_C@_08BJPILIMO@setstate?$AA@ DB 'setstate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPFEOKJG@seekable?$AA@
CONST	SEGMENT
??_C@_08JPFEOKJG@seekable?$AA@ DB 'seekable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EDECCOGL@seek?$AA@
CONST	SEGMENT
??_C@_04EDECCOGL@seek?$AA@ DB 'seek', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFMALAOA@reset?$AA@
CONST	SEGMENT
??_C@_05CFMALAOA@reset?$AA@ DB 'reset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBCDPPMN@readline?$AA@
CONST	SEGMENT
??_C@_08KBCDPPMN@readline?$AA@ DB 'readline', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BPEKIGCI@readinto?$AA@
CONST	SEGMENT
??_C@_08BPEKIGCI@readinto?$AA@ DB 'readinto', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JCDFOMC@readall?$AA@
CONST	SEGMENT
??_C@_07JCDFOMC@readall?$AA@ DB 'readall', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08INDGGIBD@readable?$AA@
CONST	SEGMENT
??_C@_08INDGGIBD@readable?$AA@ DB 'readable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FDBMPOID@read1?$AA@
CONST	SEGMENT
??_C@_05FDBMPOID@read1?$AA@ DB 'read1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EGHAIIMO@newlines?$AA@
CONST	SEGMENT
??_C@_08EGHAIIMO@newlines?$AA@ DB 'newlines', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OINEKLLD@getstate?$AA@
CONST	SEGMENT
??_C@_08OINEKLLD@getstate?$AA@ DB 'getstate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDGADLDP@encode?$AA@
CONST	SEGMENT
??_C@_06GDGADLDP@encode?$AA@ DB 'encode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KPNAMAEI@decode?$AA@
CONST	SEGMENT
??_C@_06KPNAMAEI@decode?$AA@ DB 'decode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKJOPBFO@closed?$AA@
CONST	SEGMENT
??_C@_06IKJOPBFO@closed?$AA@ DB 'closed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KBKOCGBL@IncrementalNewlineDecoder?$AA@
CONST	SEGMENT
??_C@_0BK@KBKOCGBL@IncrementalNewlineDecoder?$AA@ DB 'IncrementalNewlineD'
	DB	'ecoder', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CKECCIPK@TextIOWrapper?$AA@
CONST	SEGMENT
??_C@_0O@CKECCIPK@TextIOWrapper?$AA@ DB 'TextIOWrapper', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KKPCDGCM@BufferedRandom?$AA@
CONST	SEGMENT
??_C@_0P@KKPCDGCM@BufferedRandom?$AA@ DB 'BufferedRandom', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JIMJFGGF@BufferedRWPair?$AA@
CONST	SEGMENT
??_C@_0P@JIMJFGGF@BufferedRWPair?$AA@ DB 'BufferedRWPair', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FPHMGJHJ@BufferedWriter?$AA@
CONST	SEGMENT
??_C@_0P@FPHMGJHJ@BufferedWriter?$AA@ DB 'BufferedWriter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HDPOGIKD@BufferedReader?$AA@
CONST	SEGMENT
??_C@_0P@HDPOGIKD@BufferedReader?$AA@ DB 'BufferedReader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KGGGHFAL@StringIO?$AA@
CONST	SEGMENT
??_C@_08KGGGHFAL@StringIO?$AA@ DB 'StringIO', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DINECNOD@BytesIO?$AA@
CONST	SEGMENT
??_C@_07DINECNOD@BytesIO?$AA@ DB 'BytesIO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DCCDEGKI@FileIO?$AA@
CONST	SEGMENT
??_C@_06DCCDEGKI@FileIO?$AA@ DB 'FileIO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JGAEDJGP@_TextIOBase?$AA@
CONST	SEGMENT
??_C@_0M@JGAEDJGP@_TextIOBase?$AA@ DB '_TextIOBase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GBFMJPJJ@_BufferedIOBase?$AA@
CONST	SEGMENT
??_C@_0BA@GBFMJPJJ@_BufferedIOBase?$AA@ DB '_BufferedIOBase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OPFLGGFN@_RawIOBase?$AA@
CONST	SEGMENT
??_C@_0L@OPFLGGFN@_RawIOBase?$AA@ DB '_RawIOBase', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NGNCJLEL@_IOBase?$AA@
CONST	SEGMENT
??_C@_07NGNCJLEL@_IOBase?$AA@ DB '_IOBase', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JGPGLFDG@BlockingIOError?$AA@
CONST	SEGMENT
??_C@_0BA@JGPGLFDG@BlockingIOError?$AA@ DB 'BlockingIOError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07HPPCNGIB@s?$CIOO?$CJ?$HL?$HN?$AA@
CONST	SEGMENT
??_C@_07HPPCNGIB@s?$CIOO?$CJ?$HL?$HN?$AA@ DB 's(OO){}', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@INDAPHCC@UnsupportedOperation?$AA@
CONST	SEGMENT
??_C@_0BF@INDAPHCC@UnsupportedOperation?$AA@ DB 'UnsupportedOperation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NAHCEAI@DEFAULT_BUFFER_SIZE?$AA@
CONST	SEGMENT
??_C@_0BE@NAHCEAI@DEFAULT_BUFFER_SIZE?$AA@ DB 'DEFAULT_BUFFER_SIZE', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\_iomodule.c
CONST	ENDS
;	COMDAT PyInit__io
_TEXT	SEGMENT
PyInit__io PROC						; COMDAT

; 589  : {

$LN82:
  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 590  :     PyObject *m = PyModule_Create(&_PyIO_Module);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyIO_Module
  0000d	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00012	e8 00 00 00 00	 call	 PyModule_Create2
  00017	48 8b f8	 mov	 rdi, rax

; 591  :     _PyIO_State *state = NULL;
; 592  :     if (m == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	75 06		 jne	 SHORT $LN63@PyInit__io

; 725  : }

  0001f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00023	5f		 pop	 rdi
  00024	c3		 ret	 0
$LN63@PyInit__io:
  00025	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0002a	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp

; 593  :         return NULL;
; 594  :     state = IO_MOD_STATE(m);

  0002f	48 8b c8	 mov	 rcx, rax
  00032	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  00037	4c 89 64 24 58	 mov	 QWORD PTR [rsp+88], r12
  0003c	e8 00 00 00 00	 call	 PyModule_GetState

; 595  :     state->initialized = 0;
; 596  : 
; 597  : #define ADD_TYPE(type, name) \
; 598  :     if (PyType_Ready(type) < 0) \
; 599  :         goto fail; \
; 600  :     Py_INCREF(type); \
; 601  :     if (PyModule_AddObject(m, name, (PyObject *)type) < 0) {  \
; 602  :         Py_DECREF(type); \
; 603  :         goto fail; \
; 604  :     }
; 605  : 
; 606  :     /* DEFAULT_BUFFER_SIZE */
; 607  :     if (PyModule_AddIntMacro(m, DEFAULT_BUFFER_SIZE) < 0)

  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NAHCEAI@DEFAULT_BUFFER_SIZE?$AA@
  00048	41 b8 00 20 00
	00		 mov	 r8d, 8192		; 00002000H
  0004e	48 8b cf	 mov	 rcx, rdi
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00057	48 8b d8	 mov	 rbx, rax
  0005a	e8 00 00 00 00	 call	 PyModule_AddIntConstant
  0005f	85 c0		 test	 eax, eax
  00061	0f 88 c5 00 00
	00		 js	 $fail$20672

; 608  :         goto fail;
; 609  : 
; 610  :     /* UnsupportedOperation inherits from ValueError and IOError */
; 611  :     state->unsupported_operation = PyObject_CallFunction(
; 612  :         (PyObject *)&PyType_Type, "s(OO){}",
; 613  :         "UnsupportedOperation", PyExc_ValueError, PyExc_IOError);

  00067	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  0006e	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR PyExc_ValueError
  00075	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BF@INDAPHCC@UnsupportedOperation?$AA@
  0007c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07HPPCNGIB@s?$CIOO?$CJ?$HL?$HN?$AA@
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyType_Type
  0008f	e8 00 00 00 00	 call	 _PyObject_CallFunction_SizeT
  00094	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 614  :     if (state->unsupported_operation == NULL)

  00098	48 85 c0	 test	 rax, rax
  0009b	0f 84 8b 00 00
	00		 je	 $fail$20672

; 615  :         goto fail;
; 616  :     Py_INCREF(state->unsupported_operation);

  000a1	48 8b c8	 mov	 rcx, rax
  000a4	e8 00 00 00 00	 call	 _Py_IncRef

; 617  :     if (PyModule_AddObject(m, "UnsupportedOperation",
; 618  :                            state->unsupported_operation) < 0)

  000a9	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  000ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@INDAPHCC@UnsupportedOperation?$AA@
  000b4	48 8b cf	 mov	 rcx, rdi
  000b7	e8 00 00 00 00	 call	 PyModule_AddObject
  000bc	85 c0		 test	 eax, eax
  000be	78 6c		 js	 SHORT $fail$20672

; 619  :         goto fail;
; 620  : 
; 621  :     /* BlockingIOError, for compatibility */
; 622  :     Py_INCREF(PyExc_BlockingIOError);

  000c0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BlockingIOError
  000c7	e8 00 00 00 00	 call	 _Py_IncRef

; 623  :     if (PyModule_AddObject(m, "BlockingIOError",
; 624  :                            (PyObject *) PyExc_BlockingIOError) < 0)

  000cc	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_BlockingIOError
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@JGPGLFDG@BlockingIOError?$AA@
  000da	48 8b cf	 mov	 rcx, rdi
  000dd	e8 00 00 00 00	 call	 PyModule_AddObject
  000e2	85 c0		 test	 eax, eax
  000e4	78 46		 js	 SHORT $fail$20672

; 625  :         goto fail;
; 626  : 
; 627  :     /* Concrete base types of the IO ABCs.
; 628  :        (the ABCs themselves are declared through inheritance in io.py)
; 629  :     */
; 630  :     ADD_TYPE(&PyIOBase_Type, "_IOBase");

  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyIOBase_Type
  000ed	e8 00 00 00 00	 call	 PyType_Ready
  000f2	85 c0		 test	 eax, eax
  000f4	78 36		 js	 SHORT $fail$20672
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyIOBase_Type
  000fd	e8 00 00 00 00	 call	 _Py_IncRef
  00102	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyIOBase_Type
  00109	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07NGNCJLEL@_IOBase?$AA@
  00110	48 8b cf	 mov	 rcx, rdi
  00113	e8 00 00 00 00	 call	 PyModule_AddObject
  00118	85 c0		 test	 eax, eax
  0011a	0f 89 85 00 00
	00		 jns	 $LN57@PyInit__io
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyIOBase_Type
$LN81@PyInit__io:

; 631  :     ADD_TYPE(&PyRawIOBase_Type, "_RawIOBase");

  00127	e8 00 00 00 00	 call	 _Py_DecRef
$fail$20672:

; 720  : 
; 721  :   fail:
; 722  :     Py_XDECREF(state->unsupported_operation);

  0012c	48 8b 5b 10	 mov	 rbx, QWORD PTR [rbx+16]
  00130	48 85 db	 test	 rbx, rbx
  00133	0f 84 fb 07 00
	00		 je	 $LN3@PyInit__io
  00139	e8 00 00 00 00	 call	 _Py_PXCTX
  0013e	85 c0		 test	 eax, eax
  00140	0f 85 ee 07 00
	00		 jne	 $LN3@PyInit__io
  00146	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0014a	a8 20		 test	 al, 32			; 00000020H
  0014c	0f 85 da 07 00
	00		 jne	 $LN70@PyInit__io
  00152	84 c0		 test	 al, al
  00154	0f 88 d2 07 00
	00		 js	 $LN70@PyInit__io
  0015a	a8 02		 test	 al, 2
  0015c	0f 85 d2 07 00
	00		 jne	 $LN3@PyInit__io
  00162	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00166	0f 85 c8 07 00
	00		 jne	 $LN3@PyInit__io
  0016c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00173	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0017a	4c 8b cb	 mov	 r9, rbx
  0017d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00183	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0018b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00190	48 8b cb	 mov	 rcx, rbx
  00193	85 c0		 test	 eax, eax
  00195	0f 84 85 07 00
	00		 je	 $LN75@PyInit__io
  0019b	e8 00 00 00 00	 call	 _Px_Dealloc
  001a0	e9 8f 07 00 00	 jmp	 $LN3@PyInit__io
$LN57@PyInit__io:

; 631  :     ADD_TYPE(&PyRawIOBase_Type, "_RawIOBase");

  001a5	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:PyRawIOBase_Type
  001ac	48 8b cd	 mov	 rcx, rbp
  001af	e8 00 00 00 00	 call	 PyType_Ready
  001b4	85 c0		 test	 eax, eax
  001b6	0f 88 70 ff ff
	ff		 js	 $fail$20672
  001bc	48 8b cd	 mov	 rcx, rbp
  001bf	e8 00 00 00 00	 call	 _Py_IncRef
  001c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@OPFLGGFN@_RawIOBase?$AA@
  001cb	4c 8b c5	 mov	 r8, rbp
  001ce	48 8b cf	 mov	 rcx, rdi
  001d1	e8 00 00 00 00	 call	 PyModule_AddObject
  001d6	85 c0		 test	 eax, eax
  001d8	79 08		 jns	 SHORT $LN55@PyInit__io
  001da	48 8b cd	 mov	 rcx, rbp
  001dd	e9 45 ff ff ff	 jmp	 $LN81@PyInit__io
$LN55@PyInit__io:

; 632  :     ADD_TYPE(&PyBufferedIOBase_Type, "_BufferedIOBase");

  001e2	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:PyBufferedIOBase_Type
  001e9	48 8b ce	 mov	 rcx, rsi
  001ec	e8 00 00 00 00	 call	 PyType_Ready
  001f1	85 c0		 test	 eax, eax
  001f3	0f 88 33 ff ff
	ff		 js	 $fail$20672
  001f9	48 8b ce	 mov	 rcx, rsi
  001fc	e8 00 00 00 00	 call	 _Py_IncRef
  00201	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@GBFMJPJJ@_BufferedIOBase?$AA@
  00208	4c 8b c6	 mov	 r8, rsi
  0020b	48 8b cf	 mov	 rcx, rdi
  0020e	e8 00 00 00 00	 call	 PyModule_AddObject
  00213	85 c0		 test	 eax, eax
  00215	79 08		 jns	 SHORT $LN53@PyInit__io
  00217	48 8b ce	 mov	 rcx, rsi
  0021a	e9 08 ff ff ff	 jmp	 $LN81@PyInit__io
$LN53@PyInit__io:

; 633  :     ADD_TYPE(&PyTextIOBase_Type, "_TextIOBase");

  0021f	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:PyTextIOBase_Type
  00226	49 8b cc	 mov	 rcx, r12
  00229	e8 00 00 00 00	 call	 PyType_Ready
  0022e	85 c0		 test	 eax, eax
  00230	0f 88 f6 fe ff
	ff		 js	 $fail$20672
  00236	49 8b cc	 mov	 rcx, r12
  00239	e8 00 00 00 00	 call	 _Py_IncRef
  0023e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@JGAEDJGP@_TextIOBase?$AA@
  00245	4d 8b c4	 mov	 r8, r12
  00248	48 8b cf	 mov	 rcx, rdi
  0024b	e8 00 00 00 00	 call	 PyModule_AddObject
  00250	85 c0		 test	 eax, eax
  00252	79 08		 jns	 SHORT $LN51@PyInit__io
  00254	49 8b cc	 mov	 rcx, r12
  00257	e9 cb fe ff ff	 jmp	 $LN81@PyInit__io
$LN51@PyInit__io:

; 634  : 
; 635  :     /* Implementation of concrete IO objects. */
; 636  :     /* FileIO */
; 637  :     PyFileIO_Type.tp_base = &PyRawIOBase_Type;
; 638  :     ADD_TYPE(&PyFileIO_Type, "FileIO");

  0025c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFileIO_Type
  00263	48 89 2d 58 01
	00 00		 mov	 QWORD PTR PyFileIO_Type+344, rbp
  0026a	e8 00 00 00 00	 call	 PyType_Ready
  0026f	85 c0		 test	 eax, eax
  00271	0f 88 b5 fe ff
	ff		 js	 $fail$20672
  00277	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFileIO_Type
  0027e	e8 00 00 00 00	 call	 _Py_IncRef
  00283	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyFileIO_Type
  0028a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06DCCDEGKI@FileIO?$AA@
  00291	48 8b cf	 mov	 rcx, rdi
  00294	e8 00 00 00 00	 call	 PyModule_AddObject
  00299	85 c0		 test	 eax, eax
  0029b	79 0c		 jns	 SHORT $LN49@PyInit__io
  0029d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFileIO_Type
  002a4	e9 7e fe ff ff	 jmp	 $LN81@PyInit__io
$LN49@PyInit__io:

; 639  : 
; 640  :     /* BytesIO */
; 641  :     PyBytesIO_Type.tp_base = &PyBufferedIOBase_Type;
; 642  :     ADD_TYPE(&PyBytesIO_Type, "BytesIO");

  002a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBytesIO_Type
  002b0	48 89 35 58 01
	00 00		 mov	 QWORD PTR PyBytesIO_Type+344, rsi
  002b7	e8 00 00 00 00	 call	 PyType_Ready
  002bc	85 c0		 test	 eax, eax
  002be	0f 88 68 fe ff
	ff		 js	 $fail$20672
  002c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBytesIO_Type
  002cb	e8 00 00 00 00	 call	 _Py_IncRef
  002d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBytesIO_Type
  002d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DINECNOD@BytesIO?$AA@
  002de	48 8b cf	 mov	 rcx, rdi
  002e1	e8 00 00 00 00	 call	 PyModule_AddObject
  002e6	85 c0		 test	 eax, eax
  002e8	79 0c		 jns	 SHORT $LN47@PyInit__io
  002ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBytesIO_Type
  002f1	e9 31 fe ff ff	 jmp	 $LN81@PyInit__io
$LN47@PyInit__io:

; 643  :     if (PyType_Ready(&_PyBytesIOBuffer_Type) < 0)

  002f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyBytesIOBuffer_Type
  002fd	e8 00 00 00 00	 call	 PyType_Ready
  00302	85 c0		 test	 eax, eax
  00304	0f 88 22 fe ff
	ff		 js	 $fail$20672

; 644  :         goto fail;
; 645  : 
; 646  :     /* StringIO */
; 647  :     PyStringIO_Type.tp_base = &PyTextIOBase_Type;
; 648  :     ADD_TYPE(&PyStringIO_Type, "StringIO");

  0030a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyStringIO_Type
  00311	4c 89 25 58 01
	00 00		 mov	 QWORD PTR PyStringIO_Type+344, r12
  00318	e8 00 00 00 00	 call	 PyType_Ready
  0031d	85 c0		 test	 eax, eax
  0031f	0f 88 07 fe ff
	ff		 js	 $fail$20672
  00325	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyStringIO_Type
  0032c	e8 00 00 00 00	 call	 _Py_IncRef
  00331	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyStringIO_Type
  00338	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08KGGGHFAL@StringIO?$AA@
  0033f	48 8b cf	 mov	 rcx, rdi
  00342	e8 00 00 00 00	 call	 PyModule_AddObject
  00347	85 c0		 test	 eax, eax
  00349	79 0c		 jns	 SHORT $LN44@PyInit__io
  0034b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyStringIO_Type
  00352	e9 d0 fd ff ff	 jmp	 $LN81@PyInit__io
$LN44@PyInit__io:

; 649  : 
; 650  :     /* BufferedReader */
; 651  :     PyBufferedReader_Type.tp_base = &PyBufferedIOBase_Type;
; 652  :     ADD_TYPE(&PyBufferedReader_Type, "BufferedReader");

  00357	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedReader_Type
  0035e	48 89 35 58 01
	00 00		 mov	 QWORD PTR PyBufferedReader_Type+344, rsi
  00365	e8 00 00 00 00	 call	 PyType_Ready
  0036a	85 c0		 test	 eax, eax
  0036c	0f 88 ba fd ff
	ff		 js	 $fail$20672
  00372	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedReader_Type
  00379	e8 00 00 00 00	 call	 _Py_IncRef
  0037e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBufferedReader_Type
  00385	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@HDPOGIKD@BufferedReader?$AA@
  0038c	48 8b cf	 mov	 rcx, rdi
  0038f	e8 00 00 00 00	 call	 PyModule_AddObject
  00394	85 c0		 test	 eax, eax
  00396	79 0c		 jns	 SHORT $LN42@PyInit__io
  00398	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedReader_Type
  0039f	e9 83 fd ff ff	 jmp	 $LN81@PyInit__io
$LN42@PyInit__io:

; 653  : 
; 654  :     /* BufferedWriter */
; 655  :     PyBufferedWriter_Type.tp_base = &PyBufferedIOBase_Type;
; 656  :     ADD_TYPE(&PyBufferedWriter_Type, "BufferedWriter");

  003a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedWriter_Type
  003ab	48 89 35 58 01
	00 00		 mov	 QWORD PTR PyBufferedWriter_Type+344, rsi
  003b2	e8 00 00 00 00	 call	 PyType_Ready
  003b7	85 c0		 test	 eax, eax
  003b9	0f 88 6d fd ff
	ff		 js	 $fail$20672
  003bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedWriter_Type
  003c6	e8 00 00 00 00	 call	 _Py_IncRef
  003cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBufferedWriter_Type
  003d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@FPHMGJHJ@BufferedWriter?$AA@
  003d9	48 8b cf	 mov	 rcx, rdi
  003dc	e8 00 00 00 00	 call	 PyModule_AddObject
  003e1	85 c0		 test	 eax, eax
  003e3	79 0c		 jns	 SHORT $LN40@PyInit__io
  003e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedWriter_Type
  003ec	e9 36 fd ff ff	 jmp	 $LN81@PyInit__io
$LN40@PyInit__io:

; 657  : 
; 658  :     /* BufferedRWPair */
; 659  :     PyBufferedRWPair_Type.tp_base = &PyBufferedIOBase_Type;
; 660  :     ADD_TYPE(&PyBufferedRWPair_Type, "BufferedRWPair");

  003f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedRWPair_Type
  003f8	48 89 35 58 01
	00 00		 mov	 QWORD PTR PyBufferedRWPair_Type+344, rsi
  003ff	e8 00 00 00 00	 call	 PyType_Ready
  00404	85 c0		 test	 eax, eax
  00406	0f 88 20 fd ff
	ff		 js	 $fail$20672
  0040c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedRWPair_Type
  00413	e8 00 00 00 00	 call	 _Py_IncRef
  00418	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBufferedRWPair_Type
  0041f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@JIMJFGGF@BufferedRWPair?$AA@
  00426	48 8b cf	 mov	 rcx, rdi
  00429	e8 00 00 00 00	 call	 PyModule_AddObject
  0042e	85 c0		 test	 eax, eax
  00430	79 0c		 jns	 SHORT $LN38@PyInit__io
  00432	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedRWPair_Type
  00439	e9 e9 fc ff ff	 jmp	 $LN81@PyInit__io
$LN38@PyInit__io:

; 661  : 
; 662  :     /* BufferedRandom */
; 663  :     PyBufferedRandom_Type.tp_base = &PyBufferedIOBase_Type;
; 664  :     ADD_TYPE(&PyBufferedRandom_Type, "BufferedRandom");

  0043e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedRandom_Type
  00445	48 89 35 58 01
	00 00		 mov	 QWORD PTR PyBufferedRandom_Type+344, rsi
  0044c	e8 00 00 00 00	 call	 PyType_Ready
  00451	85 c0		 test	 eax, eax
  00453	0f 88 d3 fc ff
	ff		 js	 $fail$20672
  00459	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedRandom_Type
  00460	e8 00 00 00 00	 call	 _Py_IncRef
  00465	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBufferedRandom_Type
  0046c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@KKPCDGCM@BufferedRandom?$AA@
  00473	48 8b cf	 mov	 rcx, rdi
  00476	e8 00 00 00 00	 call	 PyModule_AddObject
  0047b	85 c0		 test	 eax, eax
  0047d	79 0c		 jns	 SHORT $LN36@PyInit__io
  0047f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedRandom_Type
  00486	e9 9c fc ff ff	 jmp	 $LN81@PyInit__io
$LN36@PyInit__io:

; 665  : 
; 666  :     /* TextIOWrapper */
; 667  :     PyTextIOWrapper_Type.tp_base = &PyTextIOBase_Type;
; 668  :     ADD_TYPE(&PyTextIOWrapper_Type, "TextIOWrapper");

  0048b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTextIOWrapper_Type
  00492	4c 89 25 58 01
	00 00		 mov	 QWORD PTR PyTextIOWrapper_Type+344, r12
  00499	e8 00 00 00 00	 call	 PyType_Ready
  0049e	85 c0		 test	 eax, eax
  004a0	0f 88 86 fc ff
	ff		 js	 $fail$20672
  004a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTextIOWrapper_Type
  004ad	e8 00 00 00 00	 call	 _Py_IncRef
  004b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyTextIOWrapper_Type
  004b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@CKECCIPK@TextIOWrapper?$AA@
  004c0	48 8b cf	 mov	 rcx, rdi
  004c3	e8 00 00 00 00	 call	 PyModule_AddObject
  004c8	85 c0		 test	 eax, eax
  004ca	79 0c		 jns	 SHORT $LN34@PyInit__io
  004cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTextIOWrapper_Type
  004d3	e9 4f fc ff ff	 jmp	 $LN81@PyInit__io
$LN34@PyInit__io:

; 669  : 
; 670  :     /* IncrementalNewlineDecoder */
; 671  :     ADD_TYPE(&PyIncrementalNewlineDecoder_Type, "IncrementalNewlineDecoder");

  004d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyIncrementalNewlineDecoder_Type
  004df	e8 00 00 00 00	 call	 PyType_Ready
  004e4	85 c0		 test	 eax, eax
  004e6	0f 88 40 fc ff
	ff		 js	 $fail$20672
  004ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyIncrementalNewlineDecoder_Type
  004f3	e8 00 00 00 00	 call	 _Py_IncRef
  004f8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyIncrementalNewlineDecoder_Type
  004ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@KBKOCGBL@IncrementalNewlineDecoder?$AA@
  00506	48 8b cf	 mov	 rcx, rdi
  00509	e8 00 00 00 00	 call	 PyModule_AddObject
  0050e	85 c0		 test	 eax, eax
  00510	79 0c		 jns	 SHORT $LN32@PyInit__io
  00512	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyIncrementalNewlineDecoder_Type
  00519	e9 09 fc ff ff	 jmp	 $LN81@PyInit__io
$LN32@PyInit__io:

; 672  : 
; 673  :     /* Interned strings */
; 674  : #define ADD_INTERNED(name) \
; 675  :     if (!_PyIO_str_ ## name && \
; 676  :         !(_PyIO_str_ ## name = PyUnicode_InternFromString(# name))) \
; 677  :         goto fail;
; 678  : 
; 679  :     ADD_INTERNED(close)

  0051e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_close, 0
  00526	75 1c		 jne	 SHORT $LN31@PyInit__io
  00528	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LBOHBHFK@close?$AA@
  0052f	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00534	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_close, rax
  0053b	48 85 c0	 test	 rax, rax
  0053e	0f 84 e8 fb ff
	ff		 je	 $fail$20672
$LN31@PyInit__io:

; 680  :     ADD_INTERNED(closed)

  00544	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_closed, 0
  0054c	75 1c		 jne	 SHORT $LN30@PyInit__io
  0054e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IKJOPBFO@closed?$AA@
  00555	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0055a	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_closed, rax
  00561	48 85 c0	 test	 rax, rax
  00564	0f 84 c2 fb ff
	ff		 je	 $fail$20672
$LN30@PyInit__io:

; 681  :     ADD_INTERNED(decode)

  0056a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_decode, 0
  00572	75 1c		 jne	 SHORT $LN29@PyInit__io
  00574	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KPNAMAEI@decode?$AA@
  0057b	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00580	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_decode, rax
  00587	48 85 c0	 test	 rax, rax
  0058a	0f 84 9c fb ff
	ff		 je	 $fail$20672
$LN29@PyInit__io:

; 682  :     ADD_INTERNED(encode)

  00590	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_encode, 0
  00598	75 1c		 jne	 SHORT $LN28@PyInit__io
  0059a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06GDGADLDP@encode?$AA@
  005a1	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  005a6	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_encode, rax
  005ad	48 85 c0	 test	 rax, rax
  005b0	0f 84 76 fb ff
	ff		 je	 $fail$20672
$LN28@PyInit__io:

; 683  :     ADD_INTERNED(fileno)

  005b6	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_fileno, 0
  005be	75 1c		 jne	 SHORT $LN27@PyInit__io
  005c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FFBIALPD@fileno?$AA@
  005c7	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  005cc	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_fileno, rax
  005d3	48 85 c0	 test	 rax, rax
  005d6	0f 84 50 fb ff
	ff		 je	 $fail$20672
$LN27@PyInit__io:

; 684  :     ADD_INTERNED(flush)

  005dc	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_flush, 0
  005e4	75 1c		 jne	 SHORT $LN26@PyInit__io
  005e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05GLCAEPFP@flush?$AA@
  005ed	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  005f2	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_flush, rax
  005f9	48 85 c0	 test	 rax, rax
  005fc	0f 84 2a fb ff
	ff		 je	 $fail$20672
$LN26@PyInit__io:

; 685  :     ADD_INTERNED(getstate)

  00602	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_getstate, 0
  0060a	75 1c		 jne	 SHORT $LN25@PyInit__io
  0060c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OINEKLLD@getstate?$AA@
  00613	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00618	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_getstate, rax
  0061f	48 85 c0	 test	 rax, rax
  00622	0f 84 04 fb ff
	ff		 je	 $fail$20672
$LN25@PyInit__io:

; 686  :     ADD_INTERNED(isatty)

  00628	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_isatty, 0
  00630	75 1c		 jne	 SHORT $LN24@PyInit__io
  00632	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06BMABDNNN@isatty?$AA@
  00639	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0063e	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_isatty, rax
  00645	48 85 c0	 test	 rax, rax
  00648	0f 84 de fa ff
	ff		 je	 $fail$20672
$LN24@PyInit__io:

; 687  :     ADD_INTERNED(newlines)

  0064e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_newlines, 0
  00656	75 1c		 jne	 SHORT $LN23@PyInit__io
  00658	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EGHAIIMO@newlines?$AA@
  0065f	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00664	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_newlines, rax
  0066b	48 85 c0	 test	 rax, rax
  0066e	0f 84 b8 fa ff
	ff		 je	 $fail$20672
$LN23@PyInit__io:

; 688  :     ADD_INTERNED(read)

  00674	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_read, 0
  0067c	75 1c		 jne	 SHORT $LN22@PyInit__io
  0067e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04POLDLDMI@read?$AA@
  00685	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0068a	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_read, rax
  00691	48 85 c0	 test	 rax, rax
  00694	0f 84 92 fa ff
	ff		 je	 $fail$20672
$LN22@PyInit__io:

; 689  :     ADD_INTERNED(read1)

  0069a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_read1, 0
  006a2	75 1c		 jne	 SHORT $LN21@PyInit__io
  006a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FDBMPOID@read1?$AA@
  006ab	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  006b0	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_read1, rax
  006b7	48 85 c0	 test	 rax, rax
  006ba	0f 84 6c fa ff
	ff		 je	 $fail$20672
$LN21@PyInit__io:

; 690  :     ADD_INTERNED(readable)

  006c0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_readable, 0
  006c8	75 1c		 jne	 SHORT $LN20@PyInit__io
  006ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08INDGGIBD@readable?$AA@
  006d1	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  006d6	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_readable, rax
  006dd	48 85 c0	 test	 rax, rax
  006e0	0f 84 46 fa ff
	ff		 je	 $fail$20672
$LN20@PyInit__io:

; 691  :     ADD_INTERNED(readall)

  006e6	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_readall, 0
  006ee	75 1c		 jne	 SHORT $LN19@PyInit__io
  006f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07JCDFOMC@readall?$AA@
  006f7	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  006fc	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_readall, rax
  00703	48 85 c0	 test	 rax, rax
  00706	0f 84 20 fa ff
	ff		 je	 $fail$20672
$LN19@PyInit__io:

; 692  :     ADD_INTERNED(readinto)

  0070c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_readinto, 0
  00714	75 1c		 jne	 SHORT $LN18@PyInit__io
  00716	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08BPEKIGCI@readinto?$AA@
  0071d	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00722	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_readinto, rax
  00729	48 85 c0	 test	 rax, rax
  0072c	0f 84 fa f9 ff
	ff		 je	 $fail$20672
$LN18@PyInit__io:

; 693  :     ADD_INTERNED(readline)

  00732	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_readline, 0
  0073a	75 1c		 jne	 SHORT $LN17@PyInit__io
  0073c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KBCDPPMN@readline?$AA@
  00743	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00748	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_readline, rax
  0074f	48 85 c0	 test	 rax, rax
  00752	0f 84 d4 f9 ff
	ff		 je	 $fail$20672
$LN17@PyInit__io:

; 694  :     ADD_INTERNED(reset)

  00758	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_reset, 0
  00760	75 1c		 jne	 SHORT $LN16@PyInit__io
  00762	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05CFMALAOA@reset?$AA@
  00769	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0076e	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_reset, rax
  00775	48 85 c0	 test	 rax, rax
  00778	0f 84 ae f9 ff
	ff		 je	 $fail$20672
$LN16@PyInit__io:

; 695  :     ADD_INTERNED(seek)

  0077e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_seek, 0
  00786	75 1c		 jne	 SHORT $LN15@PyInit__io
  00788	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04EDECCOGL@seek?$AA@
  0078f	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00794	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_seek, rax
  0079b	48 85 c0	 test	 rax, rax
  0079e	0f 84 88 f9 ff
	ff		 je	 $fail$20672
$LN15@PyInit__io:

; 696  :     ADD_INTERNED(seekable)

  007a4	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_seekable, 0
  007ac	75 1c		 jne	 SHORT $LN14@PyInit__io
  007ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08JPFEOKJG@seekable?$AA@
  007b5	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  007ba	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_seekable, rax
  007c1	48 85 c0	 test	 rax, rax
  007c4	0f 84 62 f9 ff
	ff		 je	 $fail$20672
$LN14@PyInit__io:

; 697  :     ADD_INTERNED(setstate)

  007ca	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_setstate, 0
  007d2	75 1c		 jne	 SHORT $LN13@PyInit__io
  007d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08BJPILIMO@setstate?$AA@
  007db	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  007e0	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_setstate, rax
  007e7	48 85 c0	 test	 rax, rax
  007ea	0f 84 3c f9 ff
	ff		 je	 $fail$20672
$LN13@PyInit__io:

; 698  :     ADD_INTERNED(tell)

  007f0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_tell, 0
  007f8	75 1c		 jne	 SHORT $LN12@PyInit__io
  007fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LBPCFPDD@tell?$AA@
  00801	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00806	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_tell, rax
  0080d	48 85 c0	 test	 rax, rax
  00810	0f 84 16 f9 ff
	ff		 je	 $fail$20672
$LN12@PyInit__io:

; 699  :     ADD_INTERNED(truncate)

  00816	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_truncate, 0
  0081e	75 1c		 jne	 SHORT $LN11@PyInit__io
  00820	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08MABILMFG@truncate?$AA@
  00827	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0082c	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_truncate, rax
  00833	48 85 c0	 test	 rax, rax
  00836	0f 84 f0 f8 ff
	ff		 je	 $fail$20672
$LN11@PyInit__io:

; 700  :     ADD_INTERNED(write)

  0083c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_write, 0
  00844	75 1c		 jne	 SHORT $LN10@PyInit__io
  00846	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NGFEDHGN@write?$AA@
  0084d	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00852	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_write, rax
  00859	48 85 c0	 test	 rax, rax
  0085c	0f 84 ca f8 ff
	ff		 je	 $fail$20672
$LN10@PyInit__io:

; 701  :     ADD_INTERNED(writable)

  00862	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_writable, 0
  0086a	75 1c		 jne	 SHORT $LN9@PyInit__io
  0086c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08IBOGFJJC@writable?$AA@
  00873	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00878	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_writable, rax
  0087f	48 85 c0	 test	 rax, rax
  00882	0f 84 a4 f8 ff
	ff		 je	 $fail$20672
$LN9@PyInit__io:

; 702  : 
; 703  :     if (!_PyIO_str_nl &&
; 704  :         !(_PyIO_str_nl = PyUnicode_InternFromString("\n")))

  00888	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_str_nl, 0
  00890	75 1c		 jne	 SHORT $LN8@PyInit__io
  00892	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00899	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0089e	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_str_nl, rax
  008a5	48 85 c0	 test	 rax, rax
  008a8	0f 84 7e f8 ff
	ff		 je	 $fail$20672
$LN8@PyInit__io:

; 705  :         goto fail;
; 706  : 
; 707  :     if (!_PyIO_empty_str &&
; 708  :         !(_PyIO_empty_str = PyUnicode_FromStringAndSize(NULL, 0)))

  008ae	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_empty_str, 0
  008b6	75 19		 jne	 SHORT $LN7@PyInit__io
  008b8	33 d2		 xor	 edx, edx
  008ba	33 c9		 xor	 ecx, ecx
  008bc	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  008c1	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_empty_str, rax
  008c8	48 85 c0	 test	 rax, rax
  008cb	0f 84 5b f8 ff
	ff		 je	 $fail$20672
$LN7@PyInit__io:

; 709  :         goto fail;
; 710  :     if (!_PyIO_empty_bytes &&
; 711  :         !(_PyIO_empty_bytes = PyBytes_FromStringAndSize(NULL, 0)))

  008d1	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_empty_bytes, 0
  008d9	75 19		 jne	 SHORT $LN6@PyInit__io
  008db	33 d2		 xor	 edx, edx
  008dd	33 c9		 xor	 ecx, ecx
  008df	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  008e4	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_empty_bytes, rax
  008eb	48 85 c0	 test	 rax, rax
  008ee	0f 84 38 f8 ff
	ff		 je	 $fail$20672
$LN6@PyInit__io:

; 712  :         goto fail;
; 713  :     if (!_PyIO_zero &&
; 714  :         !(_PyIO_zero = PyLong_FromLong(0L)))

  008f4	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyIO_zero, 0
  008fc	75 17		 jne	 SHORT $LN5@PyInit__io
  008fe	33 c9		 xor	 ecx, ecx
  00900	e8 00 00 00 00	 call	 PyLong_FromLong
  00905	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyIO_zero, rax
  0090c	48 85 c0	 test	 rax, rax
  0090f	0f 84 17 f8 ff
	ff		 je	 $fail$20672
$LN5@PyInit__io:

; 715  :         goto fail;
; 716  : 
; 717  :     state->initialized = 1;

  00915	c7 03 01 00 00
	00		 mov	 DWORD PTR [rbx], 1

; 718  : 
; 719  :     return m;

  0091b	48 8b c7	 mov	 rax, rdi
  0091e	eb 1e		 jmp	 SHORT $LN80@PyInit__io

; 720  : 
; 721  :   fail:
; 722  :     Py_XDECREF(state->unsupported_operation);

$LN75@PyInit__io:
  00920	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00924	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0092a	eb 08		 jmp	 SHORT $LN3@PyInit__io
$LN70@PyInit__io:
  0092c	48 8b cb	 mov	 rcx, rbx
  0092f	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyInit__io:

; 723  :     Py_DECREF(m);

  00934	48 8b cf	 mov	 rcx, rdi
  00937	e8 00 00 00 00	 call	 _Py_DecRef

; 724  :     return NULL;

  0093c	33 c0		 xor	 eax, eax
$LN80@PyInit__io:
  0093e	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00943	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00948	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0094d	4c 8b 64 24 58	 mov	 r12, QWORD PTR [rsp+88]

; 725  : }

  00952	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00956	5f		 pop	 rdi
  00957	c3		 ret	 0
PyInit__io ENDP
_TEXT	ENDS
END
