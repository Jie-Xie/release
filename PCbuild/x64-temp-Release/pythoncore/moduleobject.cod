; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06BIEEJMKO@module?$AA@			; `string'
PUBLIC	??_C@_0DD@FIMFNFNK@__dir__?$CI?$CJ?5?9?$DO?5list?6specialized?5di@ ; `string'
PUBLIC	??_C@_07FPPEEAND@__dir__?$AA@			; `string'
PUBLIC	??_C@_03GHKEPEMO@doc?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_09LGFMJFFD@moduledef?$AA@			; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
PUBLIC	PyModule_Type
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericNew:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericSetAttr:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_06BIEEJMKO@module?$AA@
CONST	SEGMENT
??_C@_06BIEEJMKO@module?$AA@ DB 'module', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@FIMFNFNK@__dir__?$CI?$CJ?5?9?$DO?5list?6specialized?5di@
CONST	SEGMENT
??_C@_0DD@FIMFNFNK@__dir__?$CI?$CJ?5?9?$DO?5list?6specialized?5di@ DB '__'
	DB	'dir__() -> list', 0aH, 'specialized dir() implementation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPPEEAND@__dir__?$AA@
CONST	SEGMENT
??_C@_07FPPEEAND@__dir__?$AA@ DB '__dir__', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___dict__@?1??module_dir@@9@9 DQ 0000000000000000H	; `module_dir'::`2'::PyId___dict__
	DQ	FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_03GHKEPEMO@doc?$AA@
CONST	SEGMENT
??_C@_03GHKEPEMO@doc?$AA@ DB 'doc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LGFMJFFD@moduledef?$AA@
CONST	SEGMENT
??_C@_09LGFMJFFD@moduledef?$AA@ DB 'moduledef', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
module_members DQ FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
moduledef_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09LGFMJFFD@moduledef?$AA@
	DQ	00000000000000c0H
	DQ	0000000000000000H
	ORG $+344
?kwlist@?1??module_init@@9@9 DQ FLAT:??_C@_04MEMAJGDJ@name?$AA@ ; `module_init'::`2'::kwlist
	DQ	FLAT:??_C@_03GHKEPEMO@doc?$AA@
	DQ	0000000000000000H
	ORG $+8
module_methods DQ FLAT:??_C@_07FPPEEAND@__dir__?$AA@
	DQ	FLAT:module_dir
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0DD@FIMFNFNK@__dir__?$CI?$CJ?5?9?$DO?5list?6specialized?5di@
	DQ	0000000000000000H
	ORG $+24
module_doc DB	'module(name[, doc])', 0aH, 0aH, 'Create a module object.'
	DB	0aH, 'The name must be a string; the optional doc argument can'
	DB	' have any type.', 00H
	ORG $+11
PyModule_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06BIEEJMKO@module?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:module_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:module_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:module_doc
	DQ	FLAT:module_traverse
	DQ	FLAT:module_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:module_methods
	DQ	FLAT:module_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000060H
	DQ	FLAT:module_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:PyType_GenericNew
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
_DATA	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@PFIGCCLC@__package__?$AA@		; `string'
PUBLIC	??_C@_07DIBBIFIJ@__doc__?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	PyModule_NewObject
EXTRN	PyObject_GC_Track:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyDict_New:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\moduleobject.c
pdata	SEGMENT
$pdata$PyModule_NewObject DD imagerel $LN11
	DD	imagerel $LN11+196
	DD	imagerel $unwind$PyModule_NewObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_NewObject DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0M@PFIGCCLC@__package__?$AA@
CONST	SEGMENT
??_C@_0M@PFIGCCLC@__package__?$AA@ DB '__package__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIBBIFIJ@__doc__?$AA@
CONST	SEGMENT
??_C@_07DIBBIFIJ@__doc__?$AA@ DB '__doc__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyModule_NewObject
_TEXT	SEGMENT
name$ = 48
PyModule_NewObject PROC					; COMDAT

; 31   : {

$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 32   :     PyModuleObject *m;
; 33   :     m = PyObject_GC_New(PyModuleObject, &PyModule_Type);

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyModule_Type
  00019	85 c0		 test	 eax, eax
  0001b	74 07		 je	 SHORT $LN8@PyModule_N
  0001d	e8 00 00 00 00	 call	 _PxObject_New
  00022	eb 05		 jmp	 SHORT $LN10@PyModule_N
$LN8@PyModule_N:
  00024	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN10@PyModule_N:
  00029	48 8b d8	 mov	 rbx, rax

; 34   :     if (m == NULL)
; 35   :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	48 85 db	 test	 rbx, rbx
  00031	0f 84 82 00 00
	00		 je	 $LN6@PyModule_N

; 36   :     m->md_def = NULL;

  00037	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 37   :     m->md_state = NULL;

  0003b	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 38   :     m->md_dict = PyDict_New();

  0003f	e8 00 00 00 00	 call	 PyDict_New
  00044	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 39   :     if (m->md_dict == NULL)

  00048	48 85 c0	 test	 rax, rax
  0004b	74 62		 je	 SHORT $fail$20257

; 40   :         goto fail;
; 41   :     if (PyDict_SetItemString(m->md_dict, "__name__", name) != 0)

  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BHKDPDAA@__name__?$AA@
  00054	4c 8b c7	 mov	 r8, rdi
  00057	48 8b c8	 mov	 rcx, rax
  0005a	e8 00 00 00 00	 call	 PyDict_SetItemString
  0005f	85 c0		 test	 eax, eax
  00061	75 4c		 jne	 SHORT $fail$20257

; 42   :         goto fail;
; 43   :     if (PyDict_SetItemString(m->md_dict, "__doc__", Py_None) != 0)

  00063	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00067	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
  00075	e8 00 00 00 00	 call	 PyDict_SetItemString
  0007a	85 c0		 test	 eax, eax
  0007c	75 31		 jne	 SHORT $fail$20257

; 44   :         goto fail;
; 45   :     if (PyDict_SetItemString(m->md_dict, "__package__", Py_None) != 0)

  0007e	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00082	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@PFIGCCLC@__package__?$AA@
  00090	e8 00 00 00 00	 call	 PyDict_SetItemString
  00095	85 c0		 test	 eax, eax
  00097	75 16		 jne	 SHORT $fail$20257

; 46   :         goto fail;
; 47   :     PyObject_GC_Track(m);

  00099	48 8b cb	 mov	 rcx, rbx
  0009c	e8 00 00 00 00	 call	 PyObject_GC_Track

; 48   :     return (PyObject *)m;

  000a1	48 8b c3	 mov	 rax, rbx

; 53   : }

  000a4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ad	5f		 pop	 rdi
  000ae	c3		 ret	 0
$fail$20257:

; 49   : 
; 50   :  fail:
; 51   :     Py_DECREF(m);

  000af	48 8b cb	 mov	 rcx, rbx
  000b2	e8 00 00 00 00	 call	 _Py_DecRef

; 52   :     return NULL;

  000b7	33 c0		 xor	 eax, eax
$LN6@PyModule_N:

; 53   : }

  000b9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000be	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c2	5f		 pop	 rdi
  000c3	c3		 ret	 0
PyModule_NewObject ENDP
_TEXT	ENDS
PUBLIC	PyModule_New
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_New DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$PyModule_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_New DD 042101H
	DD	063421H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyModule_New
_TEXT	SEGMENT
name$ = 48
PyModule_New PROC					; COMDAT

; 57   : {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 58   :     PyObject *nameobj, *module;
; 59   :     nameobj = PyUnicode_FromString(name);

  00006	e8 00 00 00 00	 call	 PyUnicode_FromString
  0000b	48 8b f8	 mov	 rdi, rax

; 60   :     if (nameobj == NULL)

  0000e	48 85 c0	 test	 rax, rax
  00011	75 06		 jne	 SHORT $LN1@PyModule_N@2

; 65   : }

  00013	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00017	5f		 pop	 rdi
  00018	c3		 ret	 0
$LN1@PyModule_N@2:

; 61   :         return NULL;
; 62   :     module = PyModule_NewObject(nameobj);

  00019	48 8b c8	 mov	 rcx, rax
  0001c	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00021	e8 00 00 00 00	 call	 PyModule_NewObject

; 63   :     Py_DECREF(nameobj);

  00026	48 8b cf	 mov	 rcx, rdi
  00029	48 8b d8	 mov	 rbx, rax
  0002c	e8 00 00 00 00	 call	 _Py_DecRef

; 64   :     return module;

  00031	48 8b c3	 mov	 rax, rbx
  00034	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 65   : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
PyModule_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BABLDALH@?4?4?2Objects?2moduleobject?4c?$AA@ ; `string'
PUBLIC	PyModule_GetDict
EXTRN	_PyErr_BadInternalCall:PROC
EXTRN	PyType_IsSubtype:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_GetDict DD imagerel $LN5
	DD	imagerel $LN5+83
	DD	imagerel $unwind$PyModule_GetDict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_GetDict DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BK@BABLDALH@?4?4?2Objects?2moduleobject?4c?$AA@
CONST	SEGMENT
??_C@_0BK@BABLDALH@?4?4?2Objects?2moduleobject?4c?$AA@ DB '..\Objects\mod'
	DB	'uleobject.c', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyModule_GetDict
_TEXT	SEGMENT
m$ = 48
PyModule_GetDict PROC					; COMDAT

; 175  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 176  :     PyObject *d;
; 177  :     if (!PyModule_Check(m)) {

  00009	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00014	48 3b ca	 cmp	 rcx, rdx
  00017	74 22		 je	 SHORT $LN2@PyModule_G
  00019	e8 00 00 00 00	 call	 PyType_IsSubtype
  0001e	85 c0		 test	 eax, eax
  00020	75 19		 jne	 SHORT $LN2@PyModule_G

; 178  :         PyErr_BadInternalCall();

  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BABLDALH@?4?4?2Objects?2moduleobject?4c?$AA@
  00029	ba b2 00 00 00	 mov	 edx, 178		; 000000b2H
  0002e	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 179  :         return NULL;

  00033	33 c0		 xor	 eax, eax

; 184  :     return d;
; 185  : }

  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5b		 pop	 rbx
  0003a	c3		 ret	 0
$LN2@PyModule_G:

; 180  :     }
; 181  :     d = ((PyModuleObject *)m) -> md_dict;

  0003b	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]

; 182  :     if (d == NULL)

  0003f	48 85 c0	 test	 rax, rax
  00042	75 09		 jne	 SHORT $LN1@PyModule_G

; 183  :         ((PyModuleObject *)m) -> md_dict = d = PyDict_New();

  00044	e8 00 00 00 00	 call	 PyDict_New
  00049	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax
$LN1@PyModule_G:

; 184  :     return d;
; 185  : }

  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5b		 pop	 rbx
  00052	c3		 ret	 0
PyModule_GetDict ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@ICJDMDLD@nameless?5module?$AA@	; `string'
PUBLIC	PyModule_GetNameObject
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyDict_GetItemString:PROC
EXTRN	PyErr_BadArgument:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_GetNameObject DD imagerel $LN7
	DD	imagerel $LN7+136
	DD	imagerel $unwind$PyModule_GetNameObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_GetNameObject DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BA@ICJDMDLD@nameless?5module?$AA@
CONST	SEGMENT
??_C@_0BA@ICJDMDLD@nameless?5module?$AA@ DB 'nameless module', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyModule_GetNameObject
_TEXT	SEGMENT
m$ = 48
PyModule_GetNameObject PROC				; COMDAT

; 189  : {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 190  :     PyObject *d;
; 191  :     PyObject *name;
; 192  :     if (!PyModule_Check(m)) {

  00009	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00014	48 3b ca	 cmp	 rcx, rdx
  00017	74 16		 je	 SHORT $LN3@PyModule_G@2
  00019	e8 00 00 00 00	 call	 PyType_IsSubtype
  0001e	85 c0		 test	 eax, eax
  00020	75 0d		 jne	 SHORT $LN3@PyModule_G@2

; 193  :         PyErr_BadArgument();

  00022	e8 00 00 00 00	 call	 PyErr_BadArgument

; 202  :         return NULL;

  00027	33 c0		 xor	 eax, eax

; 206  : }

  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5b		 pop	 rbx
  0002e	c3		 ret	 0
$LN3@PyModule_G@2:

; 194  :         return NULL;
; 195  :     }
; 196  :     d = ((PyModuleObject *)m)->md_dict;

  0002f	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]

; 197  :     if (d == NULL ||
; 198  :         (name = PyDict_GetItemString(d, "__name__")) == NULL ||
; 199  :         !PyUnicode_Check(name))

  00033	48 85 c9	 test	 rcx, rcx
  00036	74 35		 je	 SHORT $LN1@PyModule_G@2
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BHKDPDAA@__name__?$AA@
  0003f	e8 00 00 00 00	 call	 PyDict_GetItemString
  00044	48 8b d8	 mov	 rbx, rax
  00047	48 85 c0	 test	 rax, rax
  0004a	74 21		 je	 SHORT $LN1@PyModule_G@2
  0004c	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00050	f7 81 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rcx+256], 268435456 ; 10000000H
  0005a	74 11		 je	 SHORT $LN1@PyModule_G@2

; 203  :     }
; 204  :     Py_INCREF(name);

  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 _Py_IncRef

; 205  :     return name;

  00064	48 8b c3	 mov	 rax, rbx

; 206  : }

  00067	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006b	5b		 pop	 rbx
  0006c	c3		 ret	 0
$LN1@PyModule_G@2:

; 200  :     {
; 201  :         PyErr_SetString(PyExc_SystemError, "nameless module");

  0006d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@ICJDMDLD@nameless?5module?$AA@
  0007b	e8 00 00 00 00	 call	 PyErr_SetString

; 202  :         return NULL;

  00080	33 c0		 xor	 eax, eax

; 206  : }

  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	5b		 pop	 rbx
  00087	c3		 ret	 0
PyModule_GetNameObject ENDP
_TEXT	ENDS
PUBLIC	PyModule_GetName
EXTRN	PyUnicode_AsUTF8:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_GetName DD imagerel $LN4
	DD	imagerel $LN4+46
	DD	imagerel $unwind$PyModule_GetName
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_GetName DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyModule_GetName
_TEXT	SEGMENT
m$ = 48
PyModule_GetName PROC					; COMDAT

; 210  : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 211  :     PyObject *name = PyModule_GetNameObject(m);

  00006	e8 00 00 00 00	 call	 PyModule_GetNameObject
  0000b	48 8b d8	 mov	 rbx, rax

; 212  :     if (name == NULL)

  0000e	48 85 c0	 test	 rax, rax
  00011	75 06		 jne	 SHORT $LN1@PyModule_G@3

; 216  : }

  00013	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00017	5b		 pop	 rbx
  00018	c3		 ret	 0
$LN1@PyModule_G@3:

; 213  :         return NULL;
; 214  :     Py_DECREF(name);   /* module dict has still a reference */

  00019	48 8b c8	 mov	 rcx, rax
  0001c	e8 00 00 00 00	 call	 _Py_DecRef

; 215  :     return _PyUnicode_AsString(name);

  00021	48 8b cb	 mov	 rcx, rbx

; 216  : }

  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5b		 pop	 rbx
  00029	e9 00 00 00 00	 jmp	 PyUnicode_AsUTF8
PyModule_GetName ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@JOMFHBIA@module?5filename?5missing?$AA@ ; `string'
PUBLIC	??_C@_08PFHPBGLK@__file__?$AA@			; `string'
PUBLIC	PyModule_GetFilenameObject
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_GetFilenameObject DD imagerel $LN7
	DD	imagerel $LN7+136
	DD	imagerel $unwind$PyModule_GetFilenameObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_GetFilenameObject DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BI@JOMFHBIA@module?5filename?5missing?$AA@
CONST	SEGMENT
??_C@_0BI@JOMFHBIA@module?5filename?5missing?$AA@ DB 'module filename mis'
	DB	'sing', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08PFHPBGLK@__file__?$AA@
CONST	SEGMENT
??_C@_08PFHPBGLK@__file__?$AA@ DB '__file__', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyModule_GetFilenameObject
_TEXT	SEGMENT
m$ = 48
PyModule_GetFilenameObject PROC				; COMDAT

; 220  : {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 221  :     PyObject *d;
; 222  :     PyObject *fileobj;
; 223  :     if (!PyModule_Check(m)) {

  00009	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00014	48 3b ca	 cmp	 rcx, rdx
  00017	74 16		 je	 SHORT $LN3@PyModule_G@4
  00019	e8 00 00 00 00	 call	 PyType_IsSubtype
  0001e	85 c0		 test	 eax, eax
  00020	75 0d		 jne	 SHORT $LN3@PyModule_G@4

; 224  :         PyErr_BadArgument();

  00022	e8 00 00 00 00	 call	 PyErr_BadArgument

; 233  :         return NULL;

  00027	33 c0		 xor	 eax, eax

; 237  : }

  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5b		 pop	 rbx
  0002e	c3		 ret	 0
$LN3@PyModule_G@4:

; 225  :         return NULL;
; 226  :     }
; 227  :     d = ((PyModuleObject *)m)->md_dict;

  0002f	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]

; 228  :     if (d == NULL ||
; 229  :         (fileobj = PyDict_GetItemString(d, "__file__")) == NULL ||
; 230  :         !PyUnicode_Check(fileobj))

  00033	48 85 c9	 test	 rcx, rcx
  00036	74 35		 je	 SHORT $LN1@PyModule_G@4
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PFHPBGLK@__file__?$AA@
  0003f	e8 00 00 00 00	 call	 PyDict_GetItemString
  00044	48 8b d8	 mov	 rbx, rax
  00047	48 85 c0	 test	 rax, rax
  0004a	74 21		 je	 SHORT $LN1@PyModule_G@4
  0004c	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00050	f7 81 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rcx+256], 268435456 ; 10000000H
  0005a	74 11		 je	 SHORT $LN1@PyModule_G@4

; 234  :     }
; 235  :     Py_INCREF(fileobj);

  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 _Py_IncRef

; 236  :     return fileobj;

  00064	48 8b c3	 mov	 rax, rbx

; 237  : }

  00067	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006b	5b		 pop	 rbx
  0006c	c3		 ret	 0
$LN1@PyModule_G@4:

; 231  :     {
; 232  :         PyErr_SetString(PyExc_SystemError, "module filename missing");

  0006d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@JOMFHBIA@module?5filename?5missing?$AA@
  0007b	e8 00 00 00 00	 call	 PyErr_SetString

; 233  :         return NULL;

  00080	33 c0		 xor	 eax, eax

; 237  : }

  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	5b		 pop	 rbx
  00087	c3		 ret	 0
PyModule_GetFilenameObject ENDP
_TEXT	ENDS
PUBLIC	PyModule_GetFilename
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_GetFilename DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$PyModule_GetFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_GetFilename DD 042101H
	DD	063421H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyModule_GetFilename
_TEXT	SEGMENT
m$ = 48
PyModule_GetFilename PROC				; COMDAT

; 241  : {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 242  :     PyObject *fileobj;
; 243  :     char *utf8;
; 244  :     fileobj = PyModule_GetFilenameObject(m);

  00006	e8 00 00 00 00	 call	 PyModule_GetFilenameObject
  0000b	48 8b f8	 mov	 rdi, rax

; 245  :     if (fileobj == NULL)

  0000e	48 85 c0	 test	 rax, rax
  00011	75 06		 jne	 SHORT $LN1@PyModule_G@5

; 250  : }

  00013	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00017	5f		 pop	 rdi
  00018	c3		 ret	 0
$LN1@PyModule_G@5:

; 246  :         return NULL;
; 247  :     utf8 = _PyUnicode_AsString(fileobj);

  00019	48 8b c8	 mov	 rcx, rax
  0001c	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00021	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 248  :     Py_DECREF(fileobj);   /* module dict has still a reference */

  00026	48 8b cf	 mov	 rcx, rdi
  00029	48 8b d8	 mov	 rbx, rax
  0002c	e8 00 00 00 00	 call	 _Py_DecRef

; 249  :     return utf8;

  00031	48 8b c3	 mov	 rax, rbx
  00034	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 250  : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
PyModule_GetFilename ENDP
_TEXT	ENDS
PUBLIC	PyModule_GetDef
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_GetDef DD imagerel $LN4
	DD	imagerel $LN4+57
	DD	imagerel $unwind$PyModule_GetDef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_GetDef DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyModule_GetDef
_TEXT	SEGMENT
m$ = 48
PyModule_GetDef PROC					; COMDAT

; 254  : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 255  :     if (!PyModule_Check(m)) {

  00009	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00014	48 3b ca	 cmp	 rcx, rdx
  00017	74 16		 je	 SHORT $LN1@PyModule_G@6
  00019	e8 00 00 00 00	 call	 PyType_IsSubtype
  0001e	85 c0		 test	 eax, eax
  00020	75 0d		 jne	 SHORT $LN1@PyModule_G@6

; 256  :         PyErr_BadArgument();

  00022	e8 00 00 00 00	 call	 PyErr_BadArgument

; 257  :         return NULL;

  00027	33 c0		 xor	 eax, eax

; 260  : }

  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5b		 pop	 rbx
  0002e	c3		 ret	 0
$LN1@PyModule_G@6:

; 258  :     }
; 259  :     return ((PyModuleObject *)m)->md_def;

  0002f	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]

; 260  : }

  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
  00038	c3		 ret	 0
PyModule_GetDef ENDP
_TEXT	ENDS
PUBLIC	PyModule_GetState
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_GetState DD imagerel $LN4
	DD	imagerel $LN4+57
	DD	imagerel $unwind$PyModule_GetState
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_GetState DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyModule_GetState
_TEXT	SEGMENT
m$ = 48
PyModule_GetState PROC					; COMDAT

; 264  : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 265  :     if (!PyModule_Check(m)) {

  00009	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00014	48 3b ca	 cmp	 rcx, rdx
  00017	74 16		 je	 SHORT $LN1@PyModule_G@7
  00019	e8 00 00 00 00	 call	 PyType_IsSubtype
  0001e	85 c0		 test	 eax, eax
  00020	75 0d		 jne	 SHORT $LN1@PyModule_G@7

; 266  :         PyErr_BadArgument();

  00022	e8 00 00 00 00	 call	 PyErr_BadArgument

; 267  :         return NULL;

  00027	33 c0		 xor	 eax, eax

; 270  : }

  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5b		 pop	 rbx
  0002e	c3		 ret	 0
$LN1@PyModule_G@7:

; 268  :     }
; 269  :     return ((PyModuleObject *)m)->md_state;

  0002f	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]

; 270  : }

  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
  00038	c3		 ret	 0
PyModule_GetState ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@DLPAHNDA@?$CD?5?5?5clear?$FL2?$FN?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0N@MNFFDJII@__builtins__?$AA@		; `string'
PUBLIC	??_C@_0BB@KBIGHKN@?$CD?5?5?5clear?$FL1?$FN?5?$CFs?6?$AA@ ; `string'
PUBLIC	_PyModule_Clear
EXTRN	PyUnicode_CompareWithASCIIString:PROC
EXTRN	PyDict_SetItem:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PySys_WriteStderr:PROC
EXTRN	Py_VerboseFlag:DWORD
EXTRN	PyDict_Next:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyModule_Clear DD imagerel $LN74
	DD	imagerel $LN74+37
	DD	imagerel $unwind$_PyModule_Clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyModule_Clear DD imagerel $LN74+37
	DD	imagerel $LN74+903
	DD	imagerel $chain$0$_PyModule_Clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PyModule_Clear DD imagerel $LN74+903
	DD	imagerel $LN74+909
	DD	imagerel $chain$1$_PyModule_Clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PyModule_Clear DD 021H
	DD	imagerel $LN74
	DD	imagerel $LN74+37
	DD	imagerel $unwind$_PyModule_Clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyModule_Clear DD 020521H
	DD	096405H
	DD	imagerel $LN74
	DD	imagerel $LN74+37
	DD	imagerel $unwind$_PyModule_Clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyModule_Clear DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BB@DLPAHNDA@?$CD?5?5?5clear?$FL2?$FN?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BB@DLPAHNDA@?$CD?5?5?5clear?$FL2?$FN?5?$CFs?6?$AA@ DB '#   clear[2'
	DB	'] %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MNFFDJII@__builtins__?$AA@
CONST	SEGMENT
??_C@_0N@MNFFDJII@__builtins__?$AA@ DB '__builtins__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KBIGHKN@?$CD?5?5?5clear?$FL1?$FN?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BB@KBIGHKN@?$CD?5?5?5clear?$FL1?$FN?5?$CFs?6?$AA@ DB '#   clear[1]'
	DB	' %s', 0aH, 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyModule_Clear
_TEXT	SEGMENT
key$ = 48
m$ = 48
value$ = 56
pos$ = 64
_PyModule_Clear PROC					; COMDAT

; 274  : {

$LN74:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 275  :     /* To make the execution order of destructors for global
; 276  :        objects a bit more predictable, we first zap all objects
; 277  :        whose name starts with a single underscore, before we clear
; 278  :        the entire dictionary.  We zap them by replacing them with
; 279  :        None, rather than deleting them from the dictionary, to
; 280  :        avoid rehashing the dictionary (to some extent). */
; 281  : 
; 282  :     Py_ssize_t pos;
; 283  :     PyObject *key, *value;
; 284  :     PyObject *d;
; 285  : 
; 286  :     d = ((PyModuleObject *)m)->md_dict;

  00006	48 8b 59 60	 mov	 rbx, QWORD PTR [rcx+96]

; 287  :     if (d == NULL)

  0000a	48 85 db	 test	 rbx, rbx
  0000d	0f 84 74 03 00
	00		 je	 $LN8@PyModule_C

; 288  :         return;
; 289  : 
; 290  :     /* First, clear only names starting with a single underscore */
; 291  :     pos = 0;
; 292  :     while (PyDict_Next(d, &pos, &key, &value)) {

  00013	4c 8d 4c 24 38	 lea	 r9, QWORD PTR value$[rsp]
  00018	4c 8d 44 24 30	 lea	 r8, QWORD PTR key$[rsp]
  0001d	48 8d 54 24 40	 lea	 rdx, QWORD PTR pos$[rsp]
  00022	48 8b cb	 mov	 rcx, rbx
  00025	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  0002a	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR pos$[rsp], 0
  00033	e8 00 00 00 00	 call	 PyDict_Next
  00038	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 de 01 00
	00		 je	 $LN16@PyModule_C
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL17@PyModule_C:

; 293  :         if (value != Py_None && PyUnicode_Check(key)) {

  00050	48 39 74 24 38	 cmp	 QWORD PTR value$[rsp], rsi
  00055	0f 84 ab 01 00
	00		 je	 $LN10@PyModule_C
  0005b	48 8b 54 24 30	 mov	 rdx, QWORD PTR key$[rsp]
  00060	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00064	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0006e	0f 84 92 01 00
	00		 je	 $LN10@PyModule_C

; 294  :             if (PyUnicode_READ_CHAR(key, 0) == '_' &&
; 295  :                 PyUnicode_READ_CHAR(key, 1) != '_') {

  00074	44 8b 4a 70	 mov	 r9d, DWORD PTR [rdx+112]
  00078	45 8b d1	 mov	 r10d, r9d
  0007b	45 8b c1	 mov	 r8d, r9d
  0007e	41 c1 ea 02	 shr	 r10d, 2
  00082	41 c1 e8 05	 shr	 r8d, 5
  00086	41 83 e2 07	 and	 r10d, 7
  0008a	41 83 fa 01	 cmp	 r10d, 1
  0008e	75 2f		 jne	 SHORT $LN35@PyModule_C
  00090	45 23 c2	 and	 r8d, r10d
  00093	74 1e		 je	 SHORT $LN23@PyModule_C
  00095	41 f6 c1 40	 test	 r9b, 64			; 00000040H
  00099	74 0c		 je	 SHORT $LN21@PyModule_C
  0009b	48 8d 82 80 00
	00 00		 lea	 rax, QWORD PTR [rdx+128]
  000a2	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  000a5	eb 75		 jmp	 SHORT $LN34@PyModule_C
$LN21@PyModule_C:
  000a7	48 8d 82 a0 00
	00 00		 lea	 rax, QWORD PTR [rdx+160]
  000ae	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  000b1	eb 69		 jmp	 SHORT $LN34@PyModule_C
$LN23@PyModule_C:
  000b3	48 8b 82 a0 00
	00 00		 mov	 rax, QWORD PTR [rdx+160]
  000ba	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  000bd	eb 5d		 jmp	 SHORT $LN34@PyModule_C
$LN35@PyModule_C:
  000bf	41 83 fa 02	 cmp	 r10d, 2
  000c3	75 30		 jne	 SHORT $LN33@PyModule_C
  000c5	41 83 e0 01	 and	 r8d, 1
  000c9	74 1e		 je	 SHORT $LN27@PyModule_C
  000cb	41 f6 c1 40	 test	 r9b, 64			; 00000040H
  000cf	74 0c		 je	 SHORT $LN25@PyModule_C
  000d1	48 8d 82 80 00
	00 00		 lea	 rax, QWORD PTR [rdx+128]
  000d8	0f b7 08	 movzx	 ecx, WORD PTR [rax]
  000db	eb 3f		 jmp	 SHORT $LN34@PyModule_C
$LN25@PyModule_C:
  000dd	48 8d 82 a0 00
	00 00		 lea	 rax, QWORD PTR [rdx+160]
  000e4	0f b7 08	 movzx	 ecx, WORD PTR [rax]
  000e7	eb 33		 jmp	 SHORT $LN34@PyModule_C
$LN27@PyModule_C:
  000e9	48 8b 82 a0 00
	00 00		 mov	 rax, QWORD PTR [rdx+160]
  000f0	0f b7 08	 movzx	 ecx, WORD PTR [rax]
  000f3	eb 27		 jmp	 SHORT $LN34@PyModule_C
$LN33@PyModule_C:
  000f5	41 83 e0 01	 and	 r8d, 1
  000f9	74 18		 je	 SHORT $LN31@PyModule_C
  000fb	41 f6 c1 40	 test	 r9b, 64			; 00000040H
  000ff	74 09		 je	 SHORT $LN29@PyModule_C
  00101	48 8d 82 80 00
	00 00		 lea	 rax, QWORD PTR [rdx+128]
  00108	eb 10		 jmp	 SHORT $LN32@PyModule_C
$LN29@PyModule_C:
  0010a	48 8d 82 a0 00
	00 00		 lea	 rax, QWORD PTR [rdx+160]
  00111	eb 07		 jmp	 SHORT $LN32@PyModule_C
$LN31@PyModule_C:
  00113	48 8b 82 a0 00
	00 00		 mov	 rax, QWORD PTR [rdx+160]
$LN32@PyModule_C:
  0011a	8b 08		 mov	 ecx, DWORD PTR [rax]
$LN34@PyModule_C:
  0011c	83 f9 5f	 cmp	 ecx, 95			; 0000005fH
  0011f	0f 85 e1 00 00
	00		 jne	 $LN10@PyModule_C
  00125	41 83 fa 01	 cmp	 r10d, 1
  00129	75 32		 jne	 SHORT $LN51@PyModule_C
  0012b	45 85 c0	 test	 r8d, r8d
  0012e	74 20		 je	 SHORT $LN39@PyModule_C
  00130	41 f6 c1 40	 test	 r9b, 64			; 00000040H
  00134	74 0d		 je	 SHORT $LN37@PyModule_C
  00136	48 8d 82 80 00
	00 00		 lea	 rax, QWORD PTR [rdx+128]
  0013d	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00141	eb 79		 jmp	 SHORT $LN50@PyModule_C
$LN37@PyModule_C:
  00143	48 8d 82 a0 00
	00 00		 lea	 rax, QWORD PTR [rdx+160]
  0014a	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  0014e	eb 6c		 jmp	 SHORT $LN50@PyModule_C
$LN39@PyModule_C:
  00150	48 8b 82 a0 00
	00 00		 mov	 rax, QWORD PTR [rdx+160]
  00157	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  0015b	eb 5f		 jmp	 SHORT $LN50@PyModule_C
$LN51@PyModule_C:
  0015d	41 83 fa 02	 cmp	 r10d, 2
  00161	75 32		 jne	 SHORT $LN49@PyModule_C
  00163	45 85 c0	 test	 r8d, r8d
  00166	74 20		 je	 SHORT $LN43@PyModule_C
  00168	41 f6 c1 40	 test	 r9b, 64			; 00000040H
  0016c	74 0d		 je	 SHORT $LN41@PyModule_C
  0016e	48 8d 82 80 00
	00 00		 lea	 rax, QWORD PTR [rdx+128]
  00175	0f b7 48 02	 movzx	 ecx, WORD PTR [rax+2]
  00179	eb 41		 jmp	 SHORT $LN50@PyModule_C
$LN41@PyModule_C:
  0017b	48 8d 82 a0 00
	00 00		 lea	 rax, QWORD PTR [rdx+160]
  00182	0f b7 48 02	 movzx	 ecx, WORD PTR [rax+2]
  00186	eb 34		 jmp	 SHORT $LN50@PyModule_C
$LN43@PyModule_C:
  00188	48 8b 82 a0 00
	00 00		 mov	 rax, QWORD PTR [rdx+160]
  0018f	0f b7 48 02	 movzx	 ecx, WORD PTR [rax+2]
  00193	eb 27		 jmp	 SHORT $LN50@PyModule_C
$LN49@PyModule_C:
  00195	45 85 c0	 test	 r8d, r8d
  00198	74 18		 je	 SHORT $LN47@PyModule_C
  0019a	41 f6 c1 40	 test	 r9b, 64			; 00000040H
  0019e	74 09		 je	 SHORT $LN45@PyModule_C
  001a0	48 8d 82 80 00
	00 00		 lea	 rax, QWORD PTR [rdx+128]
  001a7	eb 10		 jmp	 SHORT $LN48@PyModule_C
$LN45@PyModule_C:
  001a9	48 8d 82 a0 00
	00 00		 lea	 rax, QWORD PTR [rdx+160]
  001b0	eb 07		 jmp	 SHORT $LN48@PyModule_C
$LN47@PyModule_C:
  001b2	48 8b 82 a0 00
	00 00		 mov	 rax, QWORD PTR [rdx+160]
$LN48@PyModule_C:
  001b9	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
$LN50@PyModule_C:
  001bc	83 f9 5f	 cmp	 ecx, 95			; 0000005fH
  001bf	74 45		 je	 SHORT $LN10@PyModule_C

; 296  :                 if (Py_VerboseFlag > 1) {

  001c1	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR Py_VerboseFlag, 1
  001c8	7e 28		 jle	 SHORT $LN11@PyModule_C

; 297  :                     const char *s = _PyUnicode_AsString(key);

  001ca	48 8b ca	 mov	 rcx, rdx
  001cd	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 298  :                     if (s != NULL)

  001d2	48 85 c0	 test	 rax, rax
  001d5	74 11		 je	 SHORT $LN12@PyModule_C

; 299  :                         PySys_WriteStderr("#   clear[1] %s\n", s);

  001d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@KBIGHKN@?$CD?5?5?5clear?$FL1?$FN?5?$CFs?6?$AA@
  001de	48 8b d0	 mov	 rdx, rax
  001e1	e8 00 00 00 00	 call	 PySys_WriteStderr

; 300  :                     else

  001e6	eb 05		 jmp	 SHORT $LN72@PyModule_C
$LN12@PyModule_C:

; 301  :                         PyErr_Clear();

  001e8	e8 00 00 00 00	 call	 PyErr_Clear
$LN72@PyModule_C:
  001ed	48 8b 54 24 30	 mov	 rdx, QWORD PTR key$[rsp]
$LN11@PyModule_C:

; 302  :                 }
; 303  :                 if (PyDict_SetItem(d, key, Py_None) != 0)

  001f2	4c 8b c6	 mov	 r8, rsi
  001f5	48 8b cb	 mov	 rcx, rbx
  001f8	e8 00 00 00 00	 call	 PyDict_SetItem
  001fd	85 c0		 test	 eax, eax
  001ff	74 05		 je	 SHORT $LN10@PyModule_C

; 304  :                     PyErr_Clear();

  00201	e8 00 00 00 00	 call	 PyErr_Clear
$LN10@PyModule_C:

; 288  :         return;
; 289  : 
; 290  :     /* First, clear only names starting with a single underscore */
; 291  :     pos = 0;
; 292  :     while (PyDict_Next(d, &pos, &key, &value)) {

  00206	4c 8d 4c 24 38	 lea	 r9, QWORD PTR value$[rsp]
  0020b	4c 8d 44 24 30	 lea	 r8, QWORD PTR key$[rsp]
  00210	48 8d 54 24 40	 lea	 rdx, QWORD PTR pos$[rsp]
  00215	48 8b cb	 mov	 rcx, rbx
  00218	e8 00 00 00 00	 call	 PyDict_Next
  0021d	85 c0		 test	 eax, eax
  0021f	0f 85 2b fe ff
	ff		 jne	 $LL17@PyModule_C
$LN16@PyModule_C:

; 305  :             }
; 306  :         }
; 307  :     }
; 308  : 
; 309  :     /* Next, clear all names except for __builtins__ */
; 310  :     pos = 0;
; 311  :     while (PyDict_Next(d, &pos, &key, &value)) {

  00225	4c 8d 4c 24 38	 lea	 r9, QWORD PTR value$[rsp]
  0022a	4c 8d 44 24 30	 lea	 r8, QWORD PTR key$[rsp]
  0022f	48 8d 54 24 40	 lea	 rdx, QWORD PTR pos$[rsp]
  00234	48 8b cb	 mov	 rcx, rbx
  00237	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR pos$[rsp], 0
  00240	e8 00 00 00 00	 call	 PyDict_Next
  00245	85 c0		 test	 eax, eax
  00247	0f 84 35 01 00
	00		 je	 $LN71@PyModule_C
  0024d	0f 1f 00	 npad	 3
$LL9@PyModule_C:

; 312  :         if (value != Py_None && PyUnicode_Check(key)) {

  00250	48 39 74 24 38	 cmp	 QWORD PTR value$[rsp], rsi
  00255	0f 84 08 01 00
	00		 je	 $LN1@PyModule_C
  0025b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR key$[rsp]
  00260	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00264	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0026e	0f 84 ef 00 00
	00		 je	 $LN1@PyModule_C

; 313  :             if (PyUnicode_READ_CHAR(key, 0) != '_' ||
; 314  :                 PyUnicode_CompareWithASCIIString(key, "__builtins__") != 0)

  00274	8b 41 70	 mov	 eax, DWORD PTR [rcx+112]
  00277	8b d0		 mov	 edx, eax
  00279	c1 ea 02	 shr	 edx, 2
  0027c	83 e2 07	 and	 edx, 7
  0027f	83 fa 01	 cmp	 edx, 1
  00282	75 2c		 jne	 SHORT $LN67@PyModule_C
  00284	a8 20		 test	 al, 32			; 00000020H
  00286	74 1c		 je	 SHORT $LN55@PyModule_C
  00288	a8 40		 test	 al, 64			; 00000040H
  0028a	74 0c		 je	 SHORT $LN53@PyModule_C
  0028c	48 8d 81 80 00
	00 00		 lea	 rax, QWORD PTR [rcx+128]
  00293	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00296	eb 6c		 jmp	 SHORT $LN66@PyModule_C
$LN53@PyModule_C:
  00298	48 8d 81 a0 00
	00 00		 lea	 rax, QWORD PTR [rcx+160]
  0029f	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  002a2	eb 60		 jmp	 SHORT $LN66@PyModule_C
$LN55@PyModule_C:
  002a4	48 8b 81 a0 00
	00 00		 mov	 rax, QWORD PTR [rcx+160]
  002ab	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  002ae	eb 54		 jmp	 SHORT $LN66@PyModule_C
$LN67@PyModule_C:
  002b0	83 fa 02	 cmp	 edx, 2
  002b3	75 2c		 jne	 SHORT $LN65@PyModule_C
  002b5	a8 20		 test	 al, 32			; 00000020H
  002b7	74 1c		 je	 SHORT $LN59@PyModule_C
  002b9	a8 40		 test	 al, 64			; 00000040H
  002bb	74 0c		 je	 SHORT $LN57@PyModule_C
  002bd	48 8d 81 80 00
	00 00		 lea	 rax, QWORD PTR [rcx+128]
  002c4	0f b7 10	 movzx	 edx, WORD PTR [rax]
  002c7	eb 3b		 jmp	 SHORT $LN66@PyModule_C
$LN57@PyModule_C:
  002c9	48 8d 81 a0 00
	00 00		 lea	 rax, QWORD PTR [rcx+160]
  002d0	0f b7 10	 movzx	 edx, WORD PTR [rax]
  002d3	eb 2f		 jmp	 SHORT $LN66@PyModule_C
$LN59@PyModule_C:
  002d5	48 8b 81 a0 00
	00 00		 mov	 rax, QWORD PTR [rcx+160]
  002dc	0f b7 10	 movzx	 edx, WORD PTR [rax]
  002df	eb 23		 jmp	 SHORT $LN66@PyModule_C
$LN65@PyModule_C:
  002e1	a8 20		 test	 al, 32			; 00000020H
  002e3	74 16		 je	 SHORT $LN63@PyModule_C
  002e5	a8 40		 test	 al, 64			; 00000040H
  002e7	74 09		 je	 SHORT $LN61@PyModule_C
  002e9	48 8d 81 80 00
	00 00		 lea	 rax, QWORD PTR [rcx+128]
  002f0	eb 10		 jmp	 SHORT $LN64@PyModule_C
$LN61@PyModule_C:
  002f2	48 8d 81 a0 00
	00 00		 lea	 rax, QWORD PTR [rcx+160]
  002f9	eb 07		 jmp	 SHORT $LN64@PyModule_C
$LN63@PyModule_C:
  002fb	48 8b 81 a0 00
	00 00		 mov	 rax, QWORD PTR [rcx+160]
$LN64@PyModule_C:
  00302	8b 10		 mov	 edx, DWORD PTR [rax]
$LN66@PyModule_C:
  00304	83 fa 5f	 cmp	 edx, 95			; 0000005fH
  00307	75 15		 jne	 SHORT $LN5@PyModule_C
  00309	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  00310	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00315	85 c0		 test	 eax, eax
  00317	74 4a		 je	 SHORT $LN1@PyModule_C
  00319	48 8b 4c 24 30	 mov	 rcx, QWORD PTR key$[rsp]
$LN5@PyModule_C:

; 315  :             {
; 316  :                 if (Py_VerboseFlag > 1) {

  0031e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR Py_VerboseFlag, 1
  00325	7e 25		 jle	 SHORT $LN2@PyModule_C

; 317  :                     const char *s = _PyUnicode_AsString(key);

  00327	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 318  :                     if (s != NULL)

  0032c	48 85 c0	 test	 rax, rax
  0032f	74 11		 je	 SHORT $LN3@PyModule_C

; 319  :                         PySys_WriteStderr("#   clear[2] %s\n", s);

  00331	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@DLPAHNDA@?$CD?5?5?5clear?$FL2?$FN?5?$CFs?6?$AA@
  00338	48 8b d0	 mov	 rdx, rax
  0033b	e8 00 00 00 00	 call	 PySys_WriteStderr

; 320  :                     else

  00340	eb 05		 jmp	 SHORT $LN73@PyModule_C
$LN3@PyModule_C:

; 321  :                         PyErr_Clear();

  00342	e8 00 00 00 00	 call	 PyErr_Clear
$LN73@PyModule_C:
  00347	48 8b 4c 24 30	 mov	 rcx, QWORD PTR key$[rsp]
$LN2@PyModule_C:

; 322  :                 }
; 323  :                 if (PyDict_SetItem(d, key, Py_None) != 0)

  0034c	48 8b d1	 mov	 rdx, rcx
  0034f	4c 8b c6	 mov	 r8, rsi
  00352	48 8b cb	 mov	 rcx, rbx
  00355	e8 00 00 00 00	 call	 PyDict_SetItem
  0035a	85 c0		 test	 eax, eax
  0035c	74 05		 je	 SHORT $LN1@PyModule_C

; 324  :                     PyErr_Clear();

  0035e	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@PyModule_C:

; 305  :             }
; 306  :         }
; 307  :     }
; 308  : 
; 309  :     /* Next, clear all names except for __builtins__ */
; 310  :     pos = 0;
; 311  :     while (PyDict_Next(d, &pos, &key, &value)) {

  00363	4c 8d 4c 24 38	 lea	 r9, QWORD PTR value$[rsp]
  00368	4c 8d 44 24 30	 lea	 r8, QWORD PTR key$[rsp]
  0036d	48 8d 54 24 40	 lea	 rdx, QWORD PTR pos$[rsp]
  00372	48 8b cb	 mov	 rcx, rbx
  00375	e8 00 00 00 00	 call	 PyDict_Next
  0037a	85 c0		 test	 eax, eax
  0037c	0f 85 ce fe ff
	ff		 jne	 $LL9@PyModule_C
$LN71@PyModule_C:
  00382	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
$LN8@PyModule_C:

; 325  :             }
; 326  :         }
; 327  :     }
; 328  : 
; 329  :     /* Note: we leave __builtins__ in place, so that destructors
; 330  :        of non-global objects defined in this module can still use
; 331  :        builtins, in particularly 'None'. */
; 332  : 
; 333  : }

  00387	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0038b	5b		 pop	 rbx
  0038c	c3		 ret	 0
_PyModule_Clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@LPGMACHM@U?$HMO?3module?4__init__?$AA@ ; `string'
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$module_init DD imagerel module_init
	DD	imagerel module_init+90
	DD	imagerel $unwind$module_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$module_init DD imagerel module_init+90
	DD	imagerel module_init+159
	DD	imagerel $chain$0$module_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$module_init DD imagerel module_init+159
	DD	imagerel module_init+200
	DD	imagerel $chain$2$module_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$module_init DD 020021H
	DD	0a3400H
	DD	imagerel module_init
	DD	imagerel module_init+90
	DD	imagerel $unwind$module_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$module_init DD 020521H
	DD	0a3405H
	DD	imagerel module_init
	DD	imagerel module_init+90
	DD	imagerel $unwind$module_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$module_init DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT ??_C@_0BE@LPGMACHM@U?$HMO?3module?4__init__?$AA@
CONST	SEGMENT
??_C@_0BE@LPGMACHM@U?$HMO?3module?4__init__?$AA@ DB 'U|O:module.__init__', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT module_init
_TEXT	SEGMENT
doc$ = 48
m$ = 80
args$ = 88
kwds$ = 96
name$ = 104
module_init PROC					; COMDAT

; 339  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b f9	 mov	 rdi, rcx

; 340  :     static char *kwlist[] = {"name", "doc", NULL};
; 341  :     PyObject *dict, *name = Py_None, *doc = Py_None;

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00010	49 8b c0	 mov	 rax, r8
  00013	48 89 4c 24 68	 mov	 QWORD PTR name$[rsp], rcx
  00018	48 89 4c 24 30	 mov	 QWORD PTR doc$[rsp], rcx
  0001d	4c 8b d2	 mov	 r10, rdx

; 342  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "U|O:module.__init__",
; 343  :                                      kwlist, &name, &doc))

  00020	48 8d 4c 24 30	 lea	 rcx, QWORD PTR doc$[rsp]
  00025	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??module_init@@9@9
  0002c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BE@LPGMACHM@U?$HMO?3module?4__init__?$AA@
  00033	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00038	48 8d 4c 24 68	 lea	 rcx, QWORD PTR name$[rsp]
  0003d	48 8b d0	 mov	 rdx, rax
  00040	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00045	49 8b ca	 mov	 rcx, r10
  00048	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0004d	85 c0		 test	 eax, eax
  0004f	75 09		 jne	 SHORT $LN5@module_ini

; 344  :         return -1;

  00051	83 c8 ff	 or	 eax, -1

; 355  :         return -1;
; 356  :     return 0;
; 357  : }

  00054	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
$LN5@module_ini:
  0005a	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx

; 345  :     dict = m->md_dict;

  0005f	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]

; 346  :     if (dict == NULL) {

  00063	48 85 db	 test	 rbx, rbx
  00066	75 11		 jne	 SHORT $LN4@module_ini

; 347  :         dict = PyDict_New();

  00068	e8 00 00 00 00	 call	 PyDict_New
  0006d	48 8b d8	 mov	 rbx, rax

; 348  :         if (dict == NULL)

  00070	48 85 c0	 test	 rax, rax

; 349  :             return -1;

  00073	74 1c		 je	 SHORT $LN9@module_ini

; 350  :         m->md_dict = dict;

  00075	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax
$LN4@module_ini:

; 351  :     }
; 352  :     if (PyDict_SetItemString(dict, "__name__", name) < 0)

  00079	4c 8b 44 24 68	 mov	 r8, QWORD PTR name$[rsp]
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BHKDPDAA@__name__?$AA@
  00085	48 8b cb	 mov	 rcx, rbx
  00088	e8 00 00 00 00	 call	 PyDict_SetItemString
  0008d	85 c0		 test	 eax, eax
  0008f	79 0e		 jns	 SHORT $LN2@module_ini
$LN9@module_ini:

; 353  :         return -1;

  00091	83 c8 ff	 or	 eax, -1
  00094	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 355  :         return -1;
; 356  :     return 0;
; 357  : }

  00099	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0009d	5f		 pop	 rdi
  0009e	c3		 ret	 0
$LN2@module_ini:

; 354  :     if (PyDict_SetItemString(dict, "__doc__", doc) < 0)

  0009f	4c 8b 44 24 30	 mov	 r8, QWORD PTR doc$[rsp]
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
  000ab	48 8b cb	 mov	 rcx, rbx
  000ae	e8 00 00 00 00	 call	 PyDict_SetItemString
  000b3	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000b8	33 c9		 xor	 ecx, ecx
  000ba	85 c0		 test	 eax, eax
  000bc	0f 99 c1	 setns	 cl
  000bf	8d 41 ff	 lea	 eax, DWORD PTR [rcx-1]

; 355  :         return -1;
; 356  :     return 0;
; 357  : }

  000c2	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000c6	5f		 pop	 rdi
  000c7	c3		 ret	 0
module_init ENDP
_TEXT	ENDS
EXTRN	__imp_free:PROC
EXTRN	_PxMem_Free:PROC
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$module_dealloc DD imagerel module_dealloc
	DD	imagerel module_dealloc+133
	DD	imagerel $unwind$module_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$module_dealloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT module_dealloc
_TEXT	SEGMENT
m$ = 48
module_dealloc PROC					; COMDAT

; 361  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 362  :     PyObject_GC_UnTrack(m);

  00009	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 363  :     if (m->md_def && m->md_def->m_free)

  0000e	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00012	48 85 c0	 test	 rax, rax
  00015	74 11		 je	 SHORT $LN3@module_dea
  00017	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0001e	48 85 c0	 test	 rax, rax
  00021	74 05		 je	 SHORT $LN3@module_dea

; 364  :         m->md_def->m_free(m);

  00023	48 8b cb	 mov	 rcx, rbx
  00026	ff d0		 call	 rax
$LN3@module_dea:

; 365  :     if (m->md_dict != NULL) {

  00028	48 83 7b 60 00	 cmp	 QWORD PTR [rbx+96], 0
  0002d	74 11		 je	 SHORT $LN2@module_dea

; 366  :         _PyModule_Clear((PyObject *)m);

  0002f	48 8b cb	 mov	 rcx, rbx
  00032	e8 00 00 00 00	 call	 _PyModule_Clear

; 367  :         Py_DECREF(m->md_dict);

  00037	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0003b	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@module_dea:

; 368  :     }
; 369  :     if (m->md_state != NULL)

  00040	48 83 7b 70 00	 cmp	 QWORD PTR [rbx+112], 0
  00045	74 2b		 je	 SHORT $LN7@module_dea

; 370  :         PyMem_FREE(m->md_state);

  00047	e8 00 00 00 00	 call	 _Py_PXCTX
  0004c	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00050	85 c0		 test	 eax, eax
  00052	74 18		 je	 SHORT $LN6@module_dea
  00054	e8 00 00 00 00	 call	 _PxMem_Free

; 371  :     Py_TYPE(m)->tp_free((PyObject *)m);

  00059	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0005d	48 8b cb	 mov	 rcx, rbx

; 372  : }

  00060	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00064	5b		 pop	 rbx
  00065	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
$LN6@module_dea:

; 370  :         PyMem_FREE(m->md_state);

  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@module_dea:

; 371  :     Py_TYPE(m)->tp_free((PyObject *)m);

  00072	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00076	48 8b cb	 mov	 rcx, rbx

; 372  : }

  00079	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007d	5b		 pop	 rbx
  0007e	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
module_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@BCHJIIMJ@?$DMmodule?5?$CFR?5from?5?$CFR?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BB@CIDANPGN@?$DMmodule?5?$CFR?5?$CI?$CFR?$CJ?$DO?$AA@ ; `string'
PUBLIC	??_C@_0M@KHGFKAFI@?$DMmodule?5?$CFR?$DO?$AA@	; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
PUBLIC	??_C@_0M@PGMDLPDG@module_repr?$AA@		; `string'
PUBLIC	??_C@_03IELNPCCE@?$CIO?$CJ?$AA@			; `string'
PUBLIC	??_C@_0L@PADOMILC@__loader__?$AA@		; `string'
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyUnicode_FromStringAndSize:PROC
EXTRN	PyObject_CallMethod:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$module_repr DD imagerel module_repr
	DD	imagerel module_repr+95
	DD	imagerel $unwind$module_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$module_repr DD imagerel module_repr+95
	DD	imagerel module_repr+157
	DD	imagerel $chain$0$module_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$module_repr DD imagerel module_repr+157
	DD	imagerel module_repr+268
	DD	imagerel $chain$2$module_repr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$module_repr DD imagerel module_repr+268
	DD	imagerel module_repr+279
	DD	imagerel $chain$3$module_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$module_repr DD 021H
	DD	imagerel module_repr
	DD	imagerel module_repr+95
	DD	imagerel $unwind$module_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$module_repr DD 020021H
	DD	083400H
	DD	imagerel module_repr
	DD	imagerel module_repr+95
	DD	imagerel $unwind$module_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$module_repr DD 020521H
	DD	083405H
	DD	imagerel module_repr
	DD	imagerel module_repr+95
	DD	imagerel $unwind$module_repr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$module_repr DD 040a01H
	DD	09640aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BE@BCHJIIMJ@?$DMmodule?5?$CFR?5from?5?$CFR?$DO?$AA@
CONST	SEGMENT
??_C@_0BE@BCHJIIMJ@?$DMmodule?5?$CFR?5from?5?$CFR?$DO?$AA@ DB '<module %R'
	DB	' from %R>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CIDANPGN@?$DMmodule?5?$CFR?5?$CI?$CFR?$CJ?$DO?$AA@
CONST	SEGMENT
??_C@_0BB@CIDANPGN@?$DMmodule?5?$CFR?5?$CI?$CFR?$CJ?$DO?$AA@ DB '<module '
	DB	'%R (%R)>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KHGFKAFI@?$DMmodule?5?$CFR?$DO?$AA@
CONST	SEGMENT
??_C@_0M@KHGFKAFI@?$DMmodule?5?$CFR?$DO?$AA@ DB '<module %R>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PGMDLPDG@module_repr?$AA@
CONST	SEGMENT
??_C@_0M@PGMDLPDG@module_repr?$AA@ DB 'module_repr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
CONST	SEGMENT
??_C@_03IELNPCCE@?$CIO?$CJ?$AA@ DB '(O)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PADOMILC@__loader__?$AA@
CONST	SEGMENT
??_C@_0L@PADOMILC@__loader__?$AA@ DB '__loader__', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT module_repr
_TEXT	SEGMENT
m$ = 64
module_repr PROC					; COMDAT

; 376  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f1	 mov	 rsi, rcx

; 377  :     PyObject *name, *filename, *repr, *loader = NULL;
; 378  : 
; 379  :     /* See if the module has an __loader__.  If it does, give the loader the
; 380  :      * first shot at producing a repr for the module.
; 381  :      */
; 382  :     if (m->md_dict != NULL) {

  0000d	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00011	33 ff		 xor	 edi, edi
  00013	48 85 c9	 test	 rcx, rcx
  00016	74 44		 je	 SHORT $LN7@module_rep

; 383  :         loader = PyDict_GetItemString(m->md_dict, "__loader__");

  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@PADOMILC@__loader__?$AA@
  0001f	e8 00 00 00 00	 call	 PyDict_GetItemString
  00024	48 8b f8	 mov	 rdi, rax

; 384  :     }
; 385  :     if (loader != NULL) {

  00027	48 85 c0	 test	 rax, rax
  0002a	74 30		 je	 SHORT $LN7@module_rep

; 386  :         repr = PyObject_CallMethod(loader, "module_repr", "(O)",
; 387  :                                    (PyObject *)m, NULL);

  0002c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@PGMDLPDG@module_repr?$AA@
  0003a	4c 8b ce	 mov	 r9, rsi
  0003d	48 8b c8	 mov	 rcx, rax
  00040	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00049	e8 00 00 00 00	 call	 PyObject_CallMethod

; 388  :         if (repr == NULL) {

  0004e	48 85 c0	 test	 rax, rax
  00051	0f 85 b5 00 00
	00		 jne	 $LN11@module_rep

; 389  :             PyErr_Clear();

  00057	e8 00 00 00 00	 call	 PyErr_Clear
$LN7@module_rep:

; 390  :         }
; 391  :         else {
; 392  :             return repr;
; 393  :         }
; 394  :     }
; 395  :     /* __loader__.module_repr(m) did not provide us with a repr.  Next, see if
; 396  :      * the module has an __file__.  If it doesn't then use repr(__loader__) if
; 397  :      * it exists, otherwise, just use module.__name__.
; 398  :      */
; 399  :     name = PyModule_GetNameObject((PyObject *)m);

  0005c	48 8b ce	 mov	 rcx, rsi
  0005f	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00064	e8 00 00 00 00	 call	 PyModule_GetNameObject
  00069	48 8b d8	 mov	 rbx, rax

; 400  :     if (name == NULL) {

  0006c	48 85 c0	 test	 rax, rax
  0006f	75 2c		 jne	 SHORT $LN5@module_rep

; 401  :         PyErr_Clear();

  00071	e8 00 00 00 00	 call	 PyErr_Clear

; 402  :         name = PyUnicode_FromStringAndSize("?", 1);

  00076	8d 53 01	 lea	 edx, QWORD PTR [rbx+1]
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00080	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  00085	48 8b d8	 mov	 rbx, rax

; 403  :         if (name == NULL)

  00088	48 85 c0	 test	 rax, rax
  0008b	75 10		 jne	 SHORT $LN5@module_rep
  0008d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 426  : }

  00092	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00097	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009b	5f		 pop	 rdi
  0009c	c3		 ret	 0
$LN5@module_rep:

; 404  :             return NULL;
; 405  :     }
; 406  :     filename = PyModule_GetFilenameObject((PyObject *)m);

  0009d	48 8b ce	 mov	 rcx, rsi
  000a0	e8 00 00 00 00	 call	 PyModule_GetFilenameObject
  000a5	48 8b f0	 mov	 rsi, rax

; 407  :     if (filename == NULL) {

  000a8	48 85 c0	 test	 rax, rax
  000ab	75 32		 jne	 SHORT $LN4@module_rep

; 408  :         PyErr_Clear();

  000ad	e8 00 00 00 00	 call	 PyErr_Clear

; 409  :         /* There's no m.__file__, so if there was an __loader__, use that in
; 410  :          * the repr, otherwise, the only thing you can use is m.__name__
; 411  :          */
; 412  :         if (loader == NULL) {
; 413  :             repr = PyUnicode_FromFormat("<module %R>", name);

  000b2	48 8b d3	 mov	 rdx, rbx
  000b5	48 85 ff	 test	 rdi, rdi
  000b8	75 11		 jne	 SHORT $LN3@module_rep
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@KHGFKAFI@?$DMmodule?5?$CFR?$DO?$AA@
  000c1	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000c6	48 8b f8	 mov	 rdi, rax

; 414  :         }
; 415  :         else {

  000c9	eb 31		 jmp	 SHORT $LN1@module_rep
$LN3@module_rep:

; 416  :             repr = PyUnicode_FromFormat("<module %R (%R)>", name, loader);

  000cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@CIDANPGN@?$DMmodule?5?$CFR?5?$CI?$CFR?$CJ?$DO?$AA@
  000d2	4c 8b c7	 mov	 r8, rdi
  000d5	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000da	48 8b f8	 mov	 rdi, rax

; 417  :         }
; 418  :     }
; 419  :     /* Finally, use m.__file__ */
; 420  :     else {

  000dd	eb 1d		 jmp	 SHORT $LN1@module_rep
$LN4@module_rep:

; 421  :         repr = PyUnicode_FromFormat("<module %R from %R>", name, filename);

  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@BCHJIIMJ@?$DMmodule?5?$CFR?5from?5?$CFR?$DO?$AA@
  000e6	4c 8b c0	 mov	 r8, rax
  000e9	48 8b d3	 mov	 rdx, rbx
  000ec	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 422  :         Py_DECREF(filename);

  000f1	48 8b ce	 mov	 rcx, rsi
  000f4	48 8b f8	 mov	 rdi, rax
  000f7	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@module_rep:

; 423  :     }
; 424  :     Py_DECREF(name);

  000fc	48 8b cb	 mov	 rcx, rbx
  000ff	e8 00 00 00 00	 call	 _Py_DecRef
  00104	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 425  :     return repr;

  00109	48 8b c7	 mov	 rax, rdi
$LN11@module_rep:

; 426  : }

  0010c	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00111	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00115	5f		 pop	 rdi
  00116	c3		 ret	 0
module_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@COMOIAOB@module_traverse?$AA@		; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$module_traverse DD imagerel module_traverse
	DD	imagerel module_traverse+125
	DD	imagerel $unwind$module_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$module_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BA@COMOIAOB@module_traverse?$AA@
CONST	SEGMENT
??_C@_0BA@COMOIAOB@module_traverse?$AA@ DB 'module_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT module_traverse
_TEXT	SEGMENT
m$ = 48
visit$ = 56
arg$ = 64
module_traverse PROC					; COMDAT

; 430  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 431  :     if (m->md_def && m->md_def->m_traverse) {

  0000f	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  00013	49 8b f8	 mov	 rdi, r8
  00016	48 8b f2	 mov	 rsi, rdx
  00019	48 8b d9	 mov	 rbx, rcx
  0001c	48 85 c0	 test	 rax, rax
  0001f	74 13		 je	 SHORT $LN6@module_tra
  00021	4c 8b 88 a8 00
	00 00		 mov	 r9, QWORD PTR [rax+168]
  00028	4d 85 c9	 test	 r9, r9
  0002b	74 07		 je	 SHORT $LN6@module_tra

; 432  :         int res = m->md_def->m_traverse((PyObject*)m, visit, arg);

  0002d	41 ff d1	 call	 r9

; 433  :         if (res)

  00030	85 c0		 test	 eax, eax

; 434  :             return res;

  00032	75 39		 jne	 SHORT $LN9@module_tra
$LN6@module_tra:

; 435  :     }
; 436  :     Py_VISIT(m->md_dict);

  00034	e8 00 00 00 00	 call	 _Py_PXCTX
  00039	85 c0		 test	 eax, eax
  0003b	74 1c		 je	 SHORT $LN3@module_tra
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@BABLDALH@?4?4?2Objects?2moduleobject?4c?$AA@
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@COMOIAOB@module_traverse?$AA@
  0004b	45 33 c9	 xor	 r9d, r9d
  0004e	41 b8 b4 01 00
	00		 mov	 r8d, 436		; 000001b4H
  00054	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@module_tra:
  00059	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0005d	48 85 c9	 test	 rcx, rcx
  00060	74 09		 je	 SHORT $LN5@module_tra
  00062	48 8b d7	 mov	 rdx, rdi
  00065	ff d6		 call	 rsi
  00067	85 c0		 test	 eax, eax
  00069	75 02		 jne	 SHORT $LN9@module_tra
$LN5@module_tra:

; 437  :     return 0;

  0006b	33 c0		 xor	 eax, eax
$LN9@module_tra:

; 438  : }

  0006d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00072	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00077	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007b	5f		 pop	 rdi
  0007c	c3		 ret	 0
module_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@GOHIEEJJ@module_clear?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$module_clear DD imagerel module_clear
	DD	imagerel module_clear+94
	DD	imagerel $unwind$module_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$module_clear DD imagerel module_clear+94
	DD	imagerel module_clear+203
	DD	imagerel $chain$0$module_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$module_clear DD imagerel module_clear+203
	DD	imagerel module_clear+226
	DD	imagerel $chain$2$module_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$module_clear DD imagerel module_clear+226
	DD	imagerel module_clear+239
	DD	imagerel $chain$4$module_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$module_clear DD imagerel module_clear+239
	DD	imagerel module_clear+247
	DD	imagerel $chain$5$module_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$module_clear DD 021H
	DD	imagerel module_clear
	DD	imagerel module_clear+94
	DD	imagerel $unwind$module_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$module_clear DD 020021H
	DD	083400H
	DD	imagerel module_clear
	DD	imagerel module_clear+94
	DD	imagerel $unwind$module_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$module_clear DD 020021H
	DD	083400H
	DD	imagerel module_clear
	DD	imagerel module_clear+94
	DD	imagerel $unwind$module_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$module_clear DD 020521H
	DD	083405H
	DD	imagerel module_clear
	DD	imagerel module_clear+94
	DD	imagerel $unwind$module_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$module_clear DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0N@GOHIEEJJ@module_clear?$AA@
CONST	SEGMENT
??_C@_0N@GOHIEEJJ@module_clear?$AA@ DB 'module_clear', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\moduleobject.c
CONST	ENDS
;	COMDAT module_clear
_TEXT	SEGMENT
m$ = 64
module_clear PROC					; COMDAT

; 442  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 443  :     if (m->md_def && m->md_def->m_clear) {

  00006	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	48 85 c0	 test	 rax, rax
  00010	74 16		 je	 SHORT $LN4@module_cle
  00012	48 8b 90 b0 00
	00 00		 mov	 rdx, QWORD PTR [rax+176]
  00019	48 85 d2	 test	 rdx, rdx
  0001c	74 0a		 je	 SHORT $LN4@module_cle

; 444  :         int res = m->md_def->m_clear((PyObject*)m);

  0001e	ff d2		 call	 rdx

; 445  :         if (res)

  00020	85 c0		 test	 eax, eax

; 446  :             return res;

  00022	0f 85 c9 00 00
	00		 jne	 $LN7@module_cle
$LN4@module_cle:

; 447  :     }
; 448  :     Py_CLEAR(m->md_dict);

  00028	4c 8b 4f 60	 mov	 r9, QWORD PTR [rdi+96]
  0002c	4d 85 c9	 test	 r9, r9
  0002f	0f 84 ba 00 00
	00		 je	 $LN3@module_cle
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@BABLDALH@?4?4?2Objects?2moduleobject?4c?$AA@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@GOHIEEJJ@module_clear?$AA@
  00043	41 b8 c0 01 00
	00		 mov	 r8d, 448		; 000001c0H
  00049	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00051	e8 00 00 00 00	 call	 _PyParallel_Guard
  00056	85 c0		 test	 eax, eax
  00058	0f 85 91 00 00
	00		 jne	 $LN3@module_cle
  0005e	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00063	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  00067	48 c7 47 60 00
	00 00 00	 mov	 QWORD PTR [rdi+96], 0
  0006f	e8 00 00 00 00	 call	 _Py_PXCTX
  00074	85 c0		 test	 eax, eax
  00076	75 72		 jne	 SHORT $LN20@module_cle
  00078	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0007c	a8 20		 test	 al, 32			; 00000020H
  0007e	75 62		 jne	 SHORT $LN13@module_cle
  00080	84 c0		 test	 al, al
  00082	78 5e		 js	 SHORT $LN13@module_cle
  00084	a8 02		 test	 al, 2
  00086	75 62		 jne	 SHORT $LN20@module_cle
  00088	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0008c	75 5c		 jne	 SHORT $LN20@module_cle
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0009c	4c 8b cb	 mov	 r9, rbx
  0009f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000a5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ad	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b2	48 8b cb	 mov	 rcx, rbx
  000b5	85 c0		 test	 eax, eax
  000b7	74 12		 je	 SHORT $LN18@module_cle
  000b9	e8 00 00 00 00	 call	 _Px_Dealloc
  000be	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 449  :     return 0;

  000c3	33 c0		 xor	 eax, eax

; 450  : }

  000c5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c9	5f		 pop	 rdi
  000ca	c3		 ret	 0

; 447  :     }
; 448  :     Py_CLEAR(m->md_dict);

$LN18@module_cle:
  000cb	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000cf	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000d5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 449  :     return 0;

  000da	33 c0		 xor	 eax, eax

; 450  : }

  000dc	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e0	5f		 pop	 rdi
  000e1	c3		 ret	 0

; 447  :     }
; 448  :     Py_CLEAR(m->md_dict);

$LN13@module_cle:
  000e2	48 8b cb	 mov	 rcx, rbx
  000e5	e8 00 00 00 00	 call	 Px_DecRef
$LN20@module_cle:
  000ea	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN3@module_cle:

; 449  :     return 0;

  000ef	33 c0		 xor	 eax, eax
$LN7@module_cle:

; 450  : }

  000f1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f5	5f		 pop	 rdi
  000f6	c3		 ret	 0
module_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@GGOPNIFL@?$CF?4200s?4__dict__?5is?5not?5a?5diction@ ; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyDict_Keys:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$module_dir DD imagerel module_dir
	DD	imagerel module_dir+280
	DD	imagerel $unwind$module_dir
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$module_dir DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0CE@GGOPNIFL@?$CF?4200s?4__dict__?5is?5not?5a?5diction@
CONST	SEGMENT
??_C@_0CE@GGOPNIFL@?$CF?4200s?4__dict__?5is?5not?5a?5diction@ DB '%.200s.'
	DB	'__dict__ is not a dictionary', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\moduleobject.c
CONST	ENDS
;	COMDAT module_dir
_TEXT	SEGMENT
self$ = 64
args$ = 72
module_dir PROC						; COMDAT

; 454  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 455  :     _Py_IDENTIFIER(__dict__);
; 456  :     PyObject *result = NULL;
; 457  :     PyObject *dict = _PyObject_GetAttrId(self, &PyId___dict__);

  0000f	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  00016	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0001f	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___dict__@?1??module_dir@@9@9
  00024	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  00028	48 8b f1	 mov	 rsi, rcx
  0002b	33 db		 xor	 ebx, ebx
  0002d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00032	48 8b f8	 mov	 rdi, rax

; 458  : 
; 459  :     if (dict != NULL) {

  00035	48 85 c0	 test	 rax, rax
  00038	0f 84 c7 00 00
	00		 je	 $LN25@module_dir

; 460  :         if (PyDict_Check(dict))

  0003e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00042	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  0004c	74 0d		 je	 SHORT $LN7@module_dir

; 461  :             result = PyDict_Keys(dict);

  0004e	48 8b cf	 mov	 rcx, rdi
  00051	e8 00 00 00 00	 call	 PyDict_Keys
  00056	48 8b d8	 mov	 rbx, rax

; 462  :         else {

  00059	eb 23		 jmp	 SHORT $LN4@module_dir
$LN7@module_dir:

; 463  :             const char *name = PyModule_GetName(self);

  0005b	48 8b ce	 mov	 rcx, rsi
  0005e	e8 00 00 00 00	 call	 PyModule_GetName

; 464  :             if (name)

  00063	48 85 c0	 test	 rax, rax
  00066	74 16		 je	 SHORT $LN4@module_dir

; 465  :                 PyErr_Format(PyExc_TypeError,
; 466  :                              "%.200s.__dict__ is not a dictionary",
; 467  :                              name);

  00068	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@GGOPNIFL@?$CF?4200s?4__dict__?5is?5not?5a?5diction@
  00076	4c 8b c0	 mov	 r8, rax
  00079	e8 00 00 00 00	 call	 PyErr_Format
$LN4@module_dir:

; 468  :         }
; 469  :     }
; 470  : 
; 471  :     Py_XDECREF(dict);

  0007e	e8 00 00 00 00	 call	 _Py_PXCTX
  00083	85 c0		 test	 eax, eax
  00085	75 7e		 jne	 SHORT $LN25@module_dir
  00087	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0008b	a8 20		 test	 al, 32			; 00000020H
  0008d	75 6e		 jne	 SHORT $LN15@module_dir
  0008f	84 c0		 test	 al, al
  00091	78 6a		 js	 SHORT $LN15@module_dir
  00093	a8 02		 test	 al, 2
  00095	75 6e		 jne	 SHORT $LN25@module_dir
  00097	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0009b	75 68		 jne	 SHORT $LN25@module_dir
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000ab	4c 8b cf	 mov	 r9, rdi
  000ae	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000b4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000bc	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c1	48 8b cf	 mov	 rcx, rdi
  000c4	85 c0		 test	 eax, eax
  000c6	74 18		 je	 SHORT $LN20@module_dir
  000c8	e8 00 00 00 00	 call	 _Px_Dealloc

; 472  :     return result;

  000cd	48 8b c3	 mov	 rax, rbx

; 473  : }

  000d0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d5	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000da	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000de	5f		 pop	 rdi
  000df	c3		 ret	 0

; 468  :         }
; 469  :     }
; 470  : 
; 471  :     Py_XDECREF(dict);

$LN20@module_dir:
  000e0	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000e4	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 472  :     return result;

  000ea	48 8b c3	 mov	 rax, rbx

; 473  : }

  000ed	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000f2	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000f7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fb	5f		 pop	 rdi
  000fc	c3		 ret	 0

; 468  :         }
; 469  :     }
; 470  : 
; 471  :     Py_XDECREF(dict);

$LN15@module_dir:
  000fd	48 8b cf	 mov	 rcx, rdi
  00100	e8 00 00 00 00	 call	 Px_DecRef
$LN25@module_dir:

; 473  : }

  00105	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0010a	48 8b c3	 mov	 rax, rbx
  0010d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00112	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00116	5f		 pop	 rdi
  00117	c3		 ret	 0
module_dir ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@BDKONPND@module?5functions?5cannot?5set?5METH@ ; `string'
PUBLIC	??_C@_0GP@JPBGHDL@Python?5C?5API?5version?5mismatch?5fo@ ; `string'
PUBLIC	??_C@_0CI@BIPFLKPK@Python?5import?5machinery?5not?5init@ ; `string'
PUBLIC	PyModule_Create2
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyCFunction_NewEx:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	__imp_malloc:PROC
EXTRN	_PxMem_Malloc:PROC
EXTRN	__imp_strrchr:PROC
EXTRN	_Py_PackageContext:QWORD
EXTRN	PyErr_WarnFormat:PROC
EXTRN	PyExc_RuntimeWarning:QWORD
EXTRN	PyType_Ready:PROC
EXTRN	Py_FatalError:PROC
EXTRN	PyThreadState_Get:PROC
EXTRN	memset:PROC
_BSS	SEGMENT
max_module_number DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_Create2 DD imagerel $LN47
	DD	imagerel $LN47+75
	DD	imagerel $unwind$PyModule_Create2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyModule_Create2 DD imagerel $LN47+75
	DD	imagerel $LN47+415
	DD	imagerel $chain$1$PyModule_Create2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyModule_Create2 DD imagerel $LN47+415
	DD	imagerel $LN47+636
	DD	imagerel $chain$2$PyModule_Create2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyModule_Create2 DD imagerel $LN47+636
	DD	imagerel $LN47+654
	DD	imagerel $chain$3$PyModule_Create2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyModule_Create2 DD imagerel $LN47+654
	DD	imagerel $LN47+700
	DD	imagerel $chain$5$PyModule_Create2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyModule_Create2 DD 060021H
	DD	0ed400H
	DD	0dc400H
	DD	0c6400H
	DD	imagerel $LN47
	DD	imagerel $LN47+75
	DD	imagerel $unwind$PyModule_Create2
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyModule_Create2 DD 021H
	DD	imagerel $LN47+75
	DD	imagerel $LN47+415
	DD	imagerel $chain$1$PyModule_Create2
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyModule_Create2 DD 020521H
	DD	0ed405H
	DD	imagerel $LN47+75
	DD	imagerel $LN47+415
	DD	imagerel $chain$1$PyModule_Create2
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyModule_Create2 DD 040a21H
	DD	0dc40aH
	DD	0c6405H
	DD	imagerel $LN47
	DD	imagerel $LN47+75
	DD	imagerel $unwind$PyModule_Create2
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_Create2 DD 040801H
	DD	070047208H
	DD	030025003H
xdata	ENDS
;	COMDAT ??_C@_0DG@BDKONPND@module?5functions?5cannot?5set?5METH@
CONST	SEGMENT
??_C@_0DG@BDKONPND@module?5functions?5cannot?5set?5METH@ DB 'module funct'
	DB	'ions cannot set METH_CLASS or METH_STATIC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GP@JPBGHDL@Python?5C?5API?5version?5mismatch?5fo@
CONST	SEGMENT
??_C@_0GP@JPBGHDL@Python?5C?5API?5version?5mismatch?5fo@ DB 'Python C API'
	DB	' version mismatch for module %.100s: This Python has API vers'
	DB	'ion %d, module %.100s has version %d.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BIPFLKPK@Python?5import?5machinery?5not?5init@
CONST	SEGMENT
??_C@_0CI@BIPFLKPK@Python?5import?5machinery?5not?5init@ DB 'Python impor'
	DB	't machinery not initialized', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyModule_Create2
_TEXT	SEGMENT
module$ = 96
module_api_version$ = 104
PyModule_Create2 PROC					; COMDAT

; 70   : {

$LN47:
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	57		 push	 rdi
  00004	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00008	8b da		 mov	 ebx, edx
  0000a	48 8b e9	 mov	 rbp, rcx

; 71   :     PyObject *d, *v, *n;
; 72   :     PyMethodDef *ml;
; 73   :     const char* name;
; 74   :     PyModuleObject *m;
; 75   :     PyInterpreterState *interp = PyThreadState_Get()->interp;

  0000d	e8 00 00 00 00	 call	 PyThreadState_Get
  00012	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]

; 76   :     if (interp->modules == NULL)

  00016	49 83 78 10 00	 cmp	 QWORD PTR [r8+16], 0
  0001b	75 0c		 jne	 SHORT $LN26@PyModule_C@2

; 77   :         Py_FatalError("Python import machinery not initialized");

  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@BIPFLKPK@Python?5import?5machinery?5not?5init@
  00024	e8 00 00 00 00	 call	 Py_FatalError
$LN26@PyModule_C@2:

; 78   :     if (PyType_Ready(&moduledef_type) < 0)

  00029	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:moduledef_type
  00030	48 8b cf	 mov	 rcx, rdi
  00033	e8 00 00 00 00	 call	 PyType_Ready
  00038	85 c0		 test	 eax, eax
  0003a	79 0a		 jns	 SHORT $LN25@PyModule_C@2

; 79   :         return NULL;

  0003c	33 c0		 xor	 eax, eax

; 170  : }

  0003e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00042	5f		 pop	 rdi
  00043	5d		 pop	 rbp
  00044	5b		 pop	 rbx
  00045	c3		 ret	 0
$LN25@PyModule_C@2:

; 80   :     if (module->m_base.m_index == 0) {

  00046	48 83 7d 68 00	 cmp	 QWORD PTR [rbp+104], 0
  0004b	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  00050	4c 89 64 24 68	 mov	 QWORD PTR [rsp+104], r12
  00055	41 bc 01 00 00
	00		 mov	 r12d, 1
  0005b	75 1d		 jne	 SHORT $LN24@PyModule_C@2

; 81   :         max_module_number++;

  0005d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR max_module_number

; 82   :         Py_REFCNT(module) = 1;

  00064	4c 89 65 50	 mov	 QWORD PTR [rbp+80], r12

; 83   :         Py_TYPE(module) = &moduledef_type;

  00068	48 89 7d 58	 mov	 QWORD PTR [rbp+88], rdi
  0006c	48 ff c0	 inc	 rax
  0006f	48 89 05 00 00
	00 00		 mov	 QWORD PTR max_module_number, rax

; 84   :         module->m_base.m_index = max_module_number;

  00076	48 89 45 68	 mov	 QWORD PTR [rbp+104], rax
$LN24@PyModule_C@2:

; 85   :     }
; 86   :     name = module->m_name;

  0007a	48 8b b5 80 00
	00 00		 mov	 rsi, QWORD PTR [rbp+128]

; 87   :     if (module_api_version != PYTHON_API_VERSION && module_api_version != PYTHON_ABI_VERSION) {

  00081	81 fb f5 03 00
	00		 cmp	 ebx, 1013		; 000003f5H
  00087	74 37		 je	 SHORT $LN22@PyModule_C@2
  00089	83 fb 03	 cmp	 ebx, 3
  0008c	74 32		 je	 SHORT $LN22@PyModule_C@2

; 88   :         int err;
; 89   :         err = PyErr_WarnFormat(PyExc_RuntimeWarning, 1,
; 90   :             "Python C API version mismatch for module %.100s: "
; 91   :             "This Python has API version %d, module %.100s has version %d.",
; 92   :              name,
; 93   :              PYTHON_API_VERSION, name, module_api_version);

  0008e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  00095	89 5c 24 30	 mov	 DWORD PTR [rsp+48], ebx
  00099	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0GP@JPBGHDL@Python?5C?5API?5version?5mismatch?5fo@
  000a0	4c 8b ce	 mov	 r9, rsi
  000a3	49 8b d4	 mov	 rdx, r12
  000a6	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  000ab	c7 44 24 20 f5
	03 00 00	 mov	 DWORD PTR [rsp+32], 1013 ; 000003f5H
  000b3	e8 00 00 00 00	 call	 PyErr_WarnFormat

; 94   :         if (err)

  000b8	85 c0		 test	 eax, eax

; 95   :             return NULL;

  000ba	0f 85 c4 00 00
	00		 jne	 $LN46@PyModule_C@2
$LN22@PyModule_C@2:

; 96   :     }
; 97   :     /* Make sure name is fully qualified.
; 98   : 
; 99   :        This is a bit of a hack: when the shared library is loaded,
; 100  :        the module name is "package.module", but the module calls
; 101  :        PyModule_Create*() with just "module" for the name.  The shared
; 102  :        library loader squirrels away the true name of the module in
; 103  :        _Py_PackageContext, and PyModule_Create*() will substitute this
; 104  :        (if the name actually matches).
; 105  :     */
; 106  :     if (_Py_PackageContext != NULL) {

  000c0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _Py_PackageContext
  000c7	33 db		 xor	 ebx, ebx
  000c9	48 85 c9	 test	 rcx, rcx
  000cc	74 47		 je	 SHORT $LN20@PyModule_C@2

; 107  :         char *p = strrchr(_Py_PackageContext, '.');

  000ce	8d 53 2e	 lea	 edx, QWORD PTR [rbx+46]
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strrchr

; 108  :         if (p != NULL && strcmp(module->m_name, p+1) == 0) {

  000d7	48 85 c0	 test	 rax, rax
  000da	74 39		 je	 SHORT $LN20@PyModule_C@2
  000dc	4c 8d 40 01	 lea	 r8, QWORD PTR [rax+1]
  000e0	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR [rbp+128]
  000e7	4c 2b c0	 sub	 r8, rax
  000ea	66 0f 1f 44 00
	00		 npad	 6
$LL40@PyModule_C@2:
  000f0	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  000f3	42 0f b6 0c 00	 movzx	 ecx, BYTE PTR [rax+r8]
  000f8	2b d1		 sub	 edx, ecx
  000fa	75 07		 jne	 SHORT $LN41@PyModule_C@2
  000fc	48 ff c0	 inc	 rax
  000ff	85 c9		 test	 ecx, ecx
  00101	75 ed		 jne	 SHORT $LL40@PyModule_C@2
$LN41@PyModule_C@2:
  00103	85 d2		 test	 edx, edx
  00105	75 0e		 jne	 SHORT $LN20@PyModule_C@2

; 109  :             name = _Py_PackageContext;

  00107	48 8b 35 00 00
	00 00		 mov	 rsi, QWORD PTR _Py_PackageContext

; 110  :             _Py_PackageContext = NULL;

  0010e	48 89 1d 00 00
	00 00		 mov	 QWORD PTR _Py_PackageContext, rbx
$LN20@PyModule_C@2:

; 111  :         }
; 112  :     }
; 113  :     if ((m = (PyModuleObject*)PyModule_New(name)) == NULL)

  00115	48 8b ce	 mov	 rcx, rsi
  00118	e8 00 00 00 00	 call	 PyModule_New
  0011d	48 8b f8	 mov	 rdi, rax
  00120	48 85 c0	 test	 rax, rax

; 114  :         return NULL;

  00123	74 5f		 je	 SHORT $LN46@PyModule_C@2

; 115  : 
; 116  :     if (module->m_size > 0) {

  00125	48 39 9d 90 00
	00 00		 cmp	 QWORD PTR [rbp+144], rbx
  0012c	7e 6e		 jle	 SHORT $LN18@PyModule_C@2

; 117  :         m->md_state = PyMem_MALLOC(module->m_size);

  0012e	e8 00 00 00 00	 call	 _Py_PXCTX
  00133	85 c0		 test	 eax, eax
  00135	74 0e		 je	 SHORT $LN33@PyModule_C@2
  00137	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR [rbp+144]
  0013e	e8 00 00 00 00	 call	 _PxMem_Malloc
  00143	eb 26		 jmp	 SHORT $LN45@PyModule_C@2
$LN33@PyModule_C@2:
  00145	48 8b 85 90 00
	00 00		 mov	 rax, QWORD PTR [rbp+144]
  0014c	48 b9 ff ff ff
	ff ff ff ff 7f	 mov	 rcx, 9223372036854775807 ; 7fffffffffffffffH
  00156	48 3b c1	 cmp	 rax, rcx
  00159	77 13		 ja	 SHORT $LN32@PyModule_C@2
  0015b	48 85 c0	 test	 rax, rax
  0015e	4c 0f 45 e0	 cmovne	 r12, rax
  00162	49 8b cc	 mov	 rcx, r12
  00165	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
$LN45@PyModule_C@2:
  0016b	48 8b d8	 mov	 rbx, rax
$LN32@PyModule_C@2:
  0016e	48 89 5f 70	 mov	 QWORD PTR [rdi+112], rbx

; 118  :         if (!m->md_state) {

  00172	48 85 db	 test	 rbx, rbx
  00175	75 14		 jne	 SHORT $LN17@PyModule_C@2

; 119  :             PyErr_NoMemory();

  00177	e8 00 00 00 00	 call	 PyErr_NoMemory

; 120  :             Py_DECREF(m);

  0017c	48 8b cf	 mov	 rcx, rdi
  0017f	e8 00 00 00 00	 call	 _Py_DecRef
$LN46@PyModule_C@2:

; 121  :             return NULL;

  00184	33 c0		 xor	 eax, eax
  00186	e9 f1 00 00 00	 jmp	 $LN43@PyModule_C@2
$LN17@PyModule_C@2:

; 122  :         }
; 123  :         memset(m->md_state, 0, module->m_size);

  0018b	4c 8b 85 90 00
	00 00		 mov	 r8, QWORD PTR [rbp+144]
  00192	33 d2		 xor	 edx, edx
  00194	48 8b cb	 mov	 rcx, rbx
  00197	e8 00 00 00 00	 call	 memset
$LN18@PyModule_C@2:

; 124  :     }
; 125  : 
; 126  :     d = PyModule_GetDict((PyObject*)m);

  0019c	48 8b cf	 mov	 rcx, rdi
  0019f	4c 89 6c 24 70	 mov	 QWORD PTR [rsp+112], r13
  001a4	e8 00 00 00 00	 call	 PyModule_GetDict

; 127  :     if (module->m_methods != NULL) {

  001a9	48 83 bd 98 00
	00 00 00	 cmp	 QWORD PTR [rbp+152], 0
  001b1	4c 8b e8	 mov	 r13, rax
  001b4	0f 84 7f 00 00
	00		 je	 $LN16@PyModule_C@2

; 128  :         n = PyUnicode_FromString(name);

  001ba	48 8b ce	 mov	 rcx, rsi
  001bd	e8 00 00 00 00	 call	 PyUnicode_FromString
  001c2	4c 8b e0	 mov	 r12, rax

; 129  :         if (n == NULL) {

  001c5	48 85 c0	 test	 rax, rax

; 130  :             Py_DECREF(m);
; 131  :             return NULL;

  001c8	0f 84 e2 00 00
	00		 je	 $LN3@PyModule_C@2

; 132  :         }
; 133  :         for (ml = module->m_methods; ml->ml_name != NULL; ml++) {

  001ce	48 8b 9d 98 00
	00 00		 mov	 rbx, QWORD PTR [rbp+152]
  001d5	48 83 3b 00	 cmp	 QWORD PTR [rbx], 0
  001d9	74 56		 je	 SHORT $LN12@PyModule_C@2
  001db	0f 1f 44 00 00	 npad	 5
$LL14@PyModule_C@2:

; 134  :             if ((ml->ml_flags & METH_CLASS) ||
; 135  :                 (ml->ml_flags & METH_STATIC)) {

  001e0	8b 43 10	 mov	 eax, DWORD PTR [rbx+16]
  001e3	a8 10		 test	 al, 16
  001e5	0f 85 aa 00 00
	00		 jne	 $LN10@PyModule_C@2
  001eb	a8 20		 test	 al, 32			; 00000020H
  001ed	0f 85 a2 00 00
	00		 jne	 $LN10@PyModule_C@2

; 142  :             }
; 143  :             v = PyCFunction_NewEx(ml, (PyObject*)m, n);

  001f3	4d 8b c4	 mov	 r8, r12
  001f6	48 8b d7	 mov	 rdx, rdi
  001f9	48 8b cb	 mov	 rcx, rbx
  001fc	e8 00 00 00 00	 call	 PyCFunction_NewEx
  00201	48 8b f0	 mov	 rsi, rax

; 144  :             if (v == NULL) {

  00204	48 85 c0	 test	 rax, rax
  00207	0f 84 9b 00 00
	00		 je	 $LN37@PyModule_C@2

; 145  :                 Py_DECREF(n);
; 146  :                 Py_DECREF(m);
; 147  :                 return NULL;
; 148  :             }
; 149  :             if (PyDict_SetItemString(d, ml->ml_name, v) != 0) {

  0020d	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00210	4c 8b c0	 mov	 r8, rax
  00213	49 8b cd	 mov	 rcx, r13
  00216	e8 00 00 00 00	 call	 PyDict_SetItemString

; 154  :             }
; 155  :             Py_DECREF(v);

  0021b	48 8b ce	 mov	 rcx, rsi
  0021e	85 c0		 test	 eax, eax
  00220	75 6c		 jne	 SHORT $LN38@PyModule_C@2
  00222	e8 00 00 00 00	 call	 _Py_DecRef
  00227	48 83 c3 20	 add	 rbx, 32			; 00000020H
  0022b	48 83 3b 00	 cmp	 QWORD PTR [rbx], 0
  0022f	75 af		 jne	 SHORT $LL14@PyModule_C@2
$LN12@PyModule_C@2:

; 156  :         }
; 157  :         Py_DECREF(n);

  00231	49 8b cc	 mov	 rcx, r12
  00234	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@PyModule_C@2:

; 158  :     }
; 159  :     if (module->m_doc != NULL) {

  00239	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR [rbp+136]
  00240	48 85 c9	 test	 rcx, rcx
  00243	74 2b		 je	 SHORT $LN7@PyModule_C@2

; 160  :         v = PyUnicode_FromString(module->m_doc);

  00245	e8 00 00 00 00	 call	 PyUnicode_FromString
  0024a	48 8b d8	 mov	 rbx, rax

; 161  :         if (v == NULL || PyDict_SetItemString(d, "__doc__", v) != 0) {

  0024d	48 85 c0	 test	 rax, rax
  00250	74 5e		 je	 SHORT $LN3@PyModule_C@2
  00252	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
  00259	4c 8b c0	 mov	 r8, rax
  0025c	49 8b cd	 mov	 rcx, r13
  0025f	e8 00 00 00 00	 call	 PyDict_SetItemString

; 162  :             Py_XDECREF(v);
; 163  :             Py_DECREF(m);
; 164  :             return NULL;
; 165  :         }
; 166  :         Py_DECREF(v);

  00264	48 8b cb	 mov	 rcx, rbx
  00267	85 c0		 test	 eax, eax
  00269	75 40		 jne	 SHORT $LN4@PyModule_C@2
  0026b	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@PyModule_C@2:

; 167  :     }
; 168  :     m->md_def = module;

  00270	48 89 6f 68	 mov	 QWORD PTR [rdi+104], rbp

; 169  :     return (PyObject*)m;

  00274	48 8b c7	 mov	 rax, rdi
$LN44@PyModule_C@2:
  00277	4c 8b 6c 24 70	 mov	 r13, QWORD PTR [rsp+112]
$LN43@PyModule_C@2:
  0027c	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00281	4c 8b 64 24 68	 mov	 r12, QWORD PTR [rsp+104]

; 170  : }

  00286	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0028a	5f		 pop	 rdi
  0028b	5d		 pop	 rbp
  0028c	5b		 pop	 rbx
  0028d	c3		 ret	 0
$LN38@PyModule_C@2:

; 150  :                 Py_DECREF(v);

  0028e	e8 00 00 00 00	 call	 _Py_DecRef

; 151  :                 Py_DECREF(n);
; 152  :                 Py_DECREF(m);
; 153  :                 return NULL;

  00293	eb 13		 jmp	 SHORT $LN37@PyModule_C@2
$LN10@PyModule_C@2:

; 136  :                 PyErr_SetString(PyExc_ValueError,
; 137  :                                 "module functions cannot set"
; 138  :                                 " METH_CLASS or METH_STATIC");

  00295	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0029c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@BDKONPND@module?5functions?5cannot?5set?5METH@
  002a3	e8 00 00 00 00	 call	 PyErr_SetString
$LN37@PyModule_C@2:

; 139  :                 Py_DECREF(n);

  002a8	49 8b cc	 mov	 rcx, r12
$LN4@PyModule_C@2:
  002ab	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyModule_C@2:

; 140  :                 Py_DECREF(m);

  002b0	48 8b cf	 mov	 rcx, rdi
  002b3	e8 00 00 00 00	 call	 _Py_DecRef

; 141  :                 return NULL;

  002b8	33 c0		 xor	 eax, eax
  002ba	eb bb		 jmp	 SHORT $LN44@PyModule_C@2
PyModule_Create2 ENDP
_TEXT	ENDS
END
