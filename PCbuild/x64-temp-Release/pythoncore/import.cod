; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04KKIAMJPE@_imp?$AA@			; `string'
PUBLIC	??_C@_0BB@MOMFFMBI@_fix_co_filename?$AA@	; `string'
PUBLIC	??_C@_0N@KBNOKGIP@load_dynamic?$AA@		; `string'
PUBLIC	??_C@_09HAKBJMNK@is_frozen?$AA@			; `string'
PUBLIC	??_C@_0L@IPGELEL@is_builtin?$AA@		; `string'
PUBLIC	??_C@_0M@DLMGLEKN@init_frozen?$AA@		; `string'
PUBLIC	??_C@_0N@MGNMMIPM@init_builtin?$AA@		; `string'
PUBLIC	??_C@_0BC@OFHOFPH@is_frozen_package?$AA@	; `string'
PUBLIC	??_C@_0BC@OJODCCAI@get_frozen_object?$AA@	; `string'
PUBLIC	??_C@_0N@EJFMMAJJ@release_lock?$AA@		; `string'
PUBLIC	??_C@_0N@JKBCAFMP@acquire_lock?$AA@		; `string'
PUBLIC	??_C@_09JLJPJPDN@lock_held?$AA@			; `string'
PUBLIC	??_C@_0BD@DBMAGBIO@extension_suffixes?$AA@	; `string'
PUBLIC	??_C@_06DGFOANMH@reload?$AA@			; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_0BE@DMBEMBOC@_lock_unlock_module?$AA@	; `string'
PUBLIC	??_C@_0BB@MJEKOHPP@_handle_fromlist?$AA@	; `string'
PUBLIC	??_C@_0P@BNGOMPOA@_find_and_load?$AA@		; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	??_C@_08LPNIDJLN@__path__?$AA@			; `string'
PUBLIC	??_C@_0M@PFIGCCLC@__package__?$AA@		; `string'
PUBLIC	??_C@_0BB@PMIKHNPM@__initializing__?$AA@	; `string'
PUBLIC	??_C@_0L@KEEJPJHH@__import__?$AA@		; `string'
PUBLIC	??_C@_0BA@EIAFEHAN@_get_sourcefile?$AA@		; `string'
PUBLIC	??_C@_0L@OJDCNPPP@__stderr__?$AA@		; `string'
PUBLIC	??_C@_06FJGNEBG@stderr?$AA@			; `string'
PUBLIC	??_C@_0L@NPOCHPFF@__stdout__?$AA@		; `string'
PUBLIC	??_C@_06DJDOIFHB@stdout?$AA@			; `string'
PUBLIC	??_C@_09EFAEFGPG@__stdin__?$AA@			; `string'
PUBLIC	??_C@_05MHOFLBOO@stdin?$AA@			; `string'
PUBLIC	??_C@_0L@HMECADCK@float_info?$AA@		; `string'
PUBLIC	??_C@_05GECEPKB@flags?$AA@			; `string'
PUBLIC	??_C@_09FCAPOPDB@meta_path?$AA@			; `string'
PUBLIC	??_C@_0BE@FEEGIILL@path_importer_cache?$AA@	; `string'
PUBLIC	??_C@_0L@PDLDEHCN@path_hooks?$AA@		; `string'
PUBLIC	??_C@_0P@IGCACIDI@last_traceback?$AA@		; `string'
PUBLIC	??_C@_0L@IGFDBBEF@last_value?$AA@		; `string'
PUBLIC	??_C@_09NIIGAFC@last_type?$AA@			; `string'
PUBLIC	??_C@_03OEDACAH@ps2?$AA@			; `string'
PUBLIC	??_C@_03CFGOFBME@ps1?$AA@			; `string'
PUBLIC	??_C@_04GIEEDNNN@argv?$AA@			; `string'
PUBLIC	??_C@_04LNEJFJGI@path?$AA@			; `string'
PUBLIC	??_C@_0M@NDJAEMK@zipimporter?$AA@		; `string'
PUBLIC	PyImport_Inittab
EXTRN	_PyImport_Inittab:BYTE
_BSS	SEGMENT
extensions DQ	01H DUP (?)
initstr	DQ	01H DUP (?)
import_lock DQ	01H DUP (?)
import_lock_level DD 01H DUP (?)
	ALIGN	8

?silly_list@?1??PyImport_Import@@9@9 DQ 01H DUP (?)	; `PyImport_Import'::`2'::silly_list
?builtins_str@?1??PyImport_Import@@9@9 DQ 01H DUP (?)	; `PyImport_Import'::`2'::builtins_str
?import_str@?1??PyImport_Import@@9@9 DQ 01H DUP (?)	; `PyImport_Import'::`2'::import_str
?our_copy@?1??PyImport_ExtendInittab@@9@9 DQ 01H DUP (?) ; `PyImport_ExtendInittab'::`2'::our_copy
_BSS	ENDS
;	COMDAT ??_C@_04KKIAMJPE@_imp?$AA@
CONST	SEGMENT
??_C@_04KKIAMJPE@_imp?$AA@ DB '_imp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MOMFFMBI@_fix_co_filename?$AA@
CONST	SEGMENT
??_C@_0BB@MOMFFMBI@_fix_co_filename?$AA@ DB '_fix_co_filename', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KBNOKGIP@load_dynamic?$AA@
CONST	SEGMENT
??_C@_0N@KBNOKGIP@load_dynamic?$AA@ DB 'load_dynamic', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HAKBJMNK@is_frozen?$AA@
CONST	SEGMENT
??_C@_09HAKBJMNK@is_frozen?$AA@ DB 'is_frozen', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IPGELEL@is_builtin?$AA@
CONST	SEGMENT
??_C@_0L@IPGELEL@is_builtin?$AA@ DB 'is_builtin', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DLMGLEKN@init_frozen?$AA@
CONST	SEGMENT
??_C@_0M@DLMGLEKN@init_frozen?$AA@ DB 'init_frozen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MGNMMIPM@init_builtin?$AA@
CONST	SEGMENT
??_C@_0N@MGNMMIPM@init_builtin?$AA@ DB 'init_builtin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OFHOFPH@is_frozen_package?$AA@
CONST	SEGMENT
??_C@_0BC@OFHOFPH@is_frozen_package?$AA@ DB 'is_frozen_package', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OJODCCAI@get_frozen_object?$AA@
CONST	SEGMENT
??_C@_0BC@OJODCCAI@get_frozen_object?$AA@ DB 'get_frozen_object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EJFMMAJJ@release_lock?$AA@
CONST	SEGMENT
??_C@_0N@EJFMMAJJ@release_lock?$AA@ DB 'release_lock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JKBCAFMP@acquire_lock?$AA@
CONST	SEGMENT
??_C@_0N@JKBCAFMP@acquire_lock?$AA@ DB 'acquire_lock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JLJPJPDN@lock_held?$AA@
CONST	SEGMENT
??_C@_09JLJPJPDN@lock_held?$AA@ DB 'lock_held', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DBMAGBIO@extension_suffixes?$AA@
CONST	SEGMENT
??_C@_0BD@DBMAGBIO@extension_suffixes?$AA@ DB 'extension_suffixes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DGFOANMH@reload?$AA@
CONST	SEGMENT
??_C@_06DGFOANMH@reload?$AA@ DB 'reload', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DMBEMBOC@_lock_unlock_module?$AA@
CONST	SEGMENT
??_C@_0BE@DMBEMBOC@_lock_unlock_module?$AA@ DB '_lock_unlock_module', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MJEKOHPP@_handle_fromlist?$AA@
CONST	SEGMENT
??_C@_0BB@MJEKOHPP@_handle_fromlist?$AA@ DB '_handle_fromlist', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BNGOMPOA@_find_and_load?$AA@
CONST	SEGMENT
??_C@_0P@BNGOMPOA@_find_and_load?$AA@ DB '_find_and_load', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LPNIDJLN@__path__?$AA@
CONST	SEGMENT
??_C@_08LPNIDJLN@__path__?$AA@ DB '__path__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PFIGCCLC@__package__?$AA@
CONST	SEGMENT
??_C@_0M@PFIGCCLC@__package__?$AA@ DB '__package__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PMIKHNPM@__initializing__?$AA@
CONST	SEGMENT
??_C@_0BB@PMIKHNPM@__initializing__?$AA@ DB '__initializing__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KEEJPJHH@__import__?$AA@
CONST	SEGMENT
??_C@_0L@KEEJPJHH@__import__?$AA@ DB '__import__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EIAFEHAN@_get_sourcefile?$AA@
CONST	SEGMENT
??_C@_0BA@EIAFEHAN@_get_sourcefile?$AA@ DB '_get_sourcefile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OJDCNPPP@__stderr__?$AA@
CONST	SEGMENT
??_C@_0L@OJDCNPPP@__stderr__?$AA@ DB '__stderr__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJGNEBG@stderr?$AA@
CONST	SEGMENT
??_C@_06FJGNEBG@stderr?$AA@ DB 'stderr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NPOCHPFF@__stdout__?$AA@
CONST	SEGMENT
??_C@_0L@NPOCHPFF@__stdout__?$AA@ DB '__stdout__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJDOIFHB@stdout?$AA@
CONST	SEGMENT
??_C@_06DJDOIFHB@stdout?$AA@ DB 'stdout', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EFAEFGPG@__stdin__?$AA@
CONST	SEGMENT
??_C@_09EFAEFGPG@__stdin__?$AA@ DB '__stdin__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHOFLBOO@stdin?$AA@
CONST	SEGMENT
??_C@_05MHOFLBOO@stdin?$AA@ DB 'stdin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HMECADCK@float_info?$AA@
CONST	SEGMENT
??_C@_0L@HMECADCK@float_info?$AA@ DB 'float_info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GECEPKB@flags?$AA@
CONST	SEGMENT
??_C@_05GECEPKB@flags?$AA@ DB 'flags', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FCAPOPDB@meta_path?$AA@
CONST	SEGMENT
??_C@_09FCAPOPDB@meta_path?$AA@ DB 'meta_path', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FEEGIILL@path_importer_cache?$AA@
CONST	SEGMENT
??_C@_0BE@FEEGIILL@path_importer_cache?$AA@ DB 'path_importer_cache', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PDLDEHCN@path_hooks?$AA@
CONST	SEGMENT
??_C@_0L@PDLDEHCN@path_hooks?$AA@ DB 'path_hooks', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IGCACIDI@last_traceback?$AA@
CONST	SEGMENT
??_C@_0P@IGCACIDI@last_traceback?$AA@ DB 'last_traceback', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IGFDBBEF@last_value?$AA@
CONST	SEGMENT
??_C@_0L@IGFDBBEF@last_value?$AA@ DB 'last_value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NIIGAFC@last_type?$AA@
CONST	SEGMENT
??_C@_09NIIGAFC@last_type?$AA@ DB 'last_type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03OEDACAH@ps2?$AA@
CONST	SEGMENT
??_C@_03OEDACAH@ps2?$AA@ DB 'ps2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CFGOFBME@ps1?$AA@
CONST	SEGMENT
??_C@_03CFGOFBME@ps1?$AA@ DB 'ps1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GIEEDNNN@argv?$AA@
CONST	SEGMENT
??_C@_04GIEEDNNN@argv?$AA@ DB 'argv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LNEJFJGI@path?$AA@
CONST	SEGMENT
??_C@_04LNEJFJGI@path?$AA@ DB 'path', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?single_dot@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::single_dot
	DQ	FLAT:??_C@_01LFCBOECM@?4?$AA@
	DQ	0000000000000000H
?PyId___import__@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::PyId___import__
	DQ	FLAT:??_C@_0L@KEEJPJHH@__import__?$AA@
	DQ	0000000000000000H
?PyId_reload@?1??PyImport_ReloadModule@@9@9 DQ 0000000000000000H ; `PyImport_ReloadModule'::`2'::PyId_reload
	DQ	FLAT:??_C@_06DGFOANMH@reload?$AA@
	DQ	0000000000000000H
?PyId__lock_unlock_module@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::PyId__lock_unlock_module
	DQ	FLAT:??_C@_0BE@DMBEMBOC@_lock_unlock_module?$AA@
	DQ	0000000000000000H
?PyId__handle_fromlist@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::PyId__handle_fromlist
	DQ	FLAT:??_C@_0BB@MJEKOHPP@_handle_fromlist?$AA@
	DQ	0000000000000000H
?PyId__find_and_load@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::PyId__find_and_load
	DQ	FLAT:??_C@_0P@BNGOMPOA@_find_and_load?$AA@
	DQ	0000000000000000H
?PyId___name__@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::PyId___name__
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	0000000000000000H
?PyId___path__@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::PyId___path__
	DQ	FLAT:??_C@_08LPNIDJLN@__path__?$AA@
	DQ	0000000000000000H
?PyId___package__@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::PyId___package__
	DQ	FLAT:??_C@_0M@PFIGCCLC@__package__?$AA@
	DQ	0000000000000000H
?PyId___initializing__@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::PyId___initializing__
	DQ	FLAT:??_C@_0BB@PMIKHNPM@__initializing__?$AA@
	DQ	0000000000000000H
?PyId__get_sourcefile@?4??PyImport_ExecCodeModuleWithPathnames@@9@9 DQ 0000000000000000H ; `PyImport_ExecCodeModuleWithPathnames'::`5'::PyId__get_sourcefile
	DQ	FLAT:??_C@_0BA@EIAFEHAN@_get_sourcefile?$AA@
	DQ	0000000000000000H
?PyId_zipimporter@?3??_PyImportZip_Init@@9@9 DQ 0000000000000000H ; `_PyImportZip_Init'::`4'::PyId_zipimporter
	DQ	FLAT:??_C@_0M@NDJAEMK@zipimporter?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0M@NDJAEMK@zipimporter?$AA@
CONST	SEGMENT
??_C@_0M@NDJAEMK@zipimporter?$AA@ DB 'zipimporter', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
PyImport_Inittab DQ FLAT:_PyImport_Inittab
import_lock_thread DD 0ffffffffH
	ORG $+4
sys_deletes DQ	FLAT:??_C@_04LNEJFJGI@path?$AA@
	DQ	FLAT:??_C@_04GIEEDNNN@argv?$AA@
	DQ	FLAT:??_C@_03CFGOFBME@ps1?$AA@
	DQ	FLAT:??_C@_03OEDACAH@ps2?$AA@
	DQ	FLAT:??_C@_09NIIGAFC@last_type?$AA@
	DQ	FLAT:??_C@_0L@IGFDBBEF@last_value?$AA@
	DQ	FLAT:??_C@_0P@IGCACIDI@last_traceback?$AA@
	DQ	FLAT:??_C@_0L@PDLDEHCN@path_hooks?$AA@
	DQ	FLAT:??_C@_0BE@FEEGIILL@path_importer_cache?$AA@
	DQ	FLAT:??_C@_09FCAPOPDB@meta_path?$AA@
	DQ	FLAT:??_C@_05GECEPKB@flags?$AA@
	DQ	FLAT:??_C@_0L@HMECADCK@float_info?$AA@
	DQ	0000000000000000H
sys_files DQ	FLAT:??_C@_05MHOFLBOO@stdin?$AA@
	DQ	FLAT:??_C@_09EFAEFGPG@__stdin__?$AA@
	DQ	FLAT:??_C@_06DJDOIFHB@stdout?$AA@
	DQ	FLAT:??_C@_0L@NPOCHPFF@__stdout__?$AA@
	DQ	FLAT:??_C@_06FJGNEBG@stderr?$AA@
	DQ	FLAT:??_C@_0L@OJDCNPPP@__stderr__?$AA@
	DQ	0000000000000000H
doc_imp	DB	'(Extremely) low-level import machinery bits as used by i'
	DB	'mportlib and imp.', 00H
	ORG $+6
doc_extension_suffixes DB 'extension_suffixes() -> list of strings', 0aH, 'R'
	DB	'eturns the list of file suffixes used to identify extension m'
	DB	'odules.', 00H
	ORG $+2
doc_lock_held DB 'lock_held() -> boolean', 0aH, 'Return True if the impor'
	DB	't lock is currently held, else False.', 0aH, 'On platforms wi'
	DB	'thout threads, return False.', 00H
	ORG $+15
doc_acquire_lock DB 'acquire_lock() -> None', 0aH, 'Acquires the interpre'
	DB	'ter''s import lock for the current thread.', 0aH, 'This lock '
	DB	'should be used by import hooks to ensure thread-safety', 0aH, 'w'
	DB	'hen importing modules.', 0aH, 'On platforms without threads, '
	DB	'this function does nothing.', 00H
	ORG $+7
doc_release_lock DB 'release_lock() -> None', 0aH, 'Release the interpret'
	DB	'er''s import lock.', 0aH, 'On platforms without threads, this'
	DB	' function does nothing.', 00H
	ORG $+8
imp_methods DQ	FLAT:??_C@_0BD@DBMAGBIO@extension_suffixes?$AA@
	DQ	FLAT:imp_extension_suffixes
	DD	04H
	ORG $+4
	DQ	FLAT:doc_extension_suffixes
	DQ	FLAT:??_C@_09JLJPJPDN@lock_held?$AA@
	DQ	FLAT:imp_lock_held
	DD	04H
	ORG $+4
	DQ	FLAT:doc_lock_held
	DQ	FLAT:??_C@_0N@JKBCAFMP@acquire_lock?$AA@
	DQ	FLAT:imp_acquire_lock
	DD	04H
	ORG $+4
	DQ	FLAT:doc_acquire_lock
	DQ	FLAT:??_C@_0N@EJFMMAJJ@release_lock?$AA@
	DQ	FLAT:imp_release_lock
	DD	04H
	ORG $+4
	DQ	FLAT:doc_release_lock
	DQ	FLAT:??_C@_0BC@OJODCCAI@get_frozen_object?$AA@
	DQ	FLAT:imp_get_frozen_object
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BC@OFHOFPH@is_frozen_package?$AA@
	DQ	FLAT:imp_is_frozen_package
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@MGNMMIPM@init_builtin?$AA@
	DQ	FLAT:imp_init_builtin
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@DLMGLEKN@init_frozen?$AA@
	DQ	FLAT:imp_init_frozen
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@IPGELEL@is_builtin?$AA@
	DQ	FLAT:imp_is_builtin
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_09HAKBJMNK@is_frozen?$AA@
	DQ	FLAT:imp_is_frozen
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@KBNOKGIP@load_dynamic?$AA@
	DQ	FLAT:imp_load_dynamic
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@MOMFFMBI@_fix_co_filename?$AA@
	DQ	FLAT:imp_fix_co_filename
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
impmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04KKIAMJPE@_imp?$AA@
	DQ	FLAT:doc_imp
	DQ	0000000000000000H
	DQ	FLAT:imp_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@OPKNGKNI@Can?8t?5initialize?5import?5variable@ ; `string'
PUBLIC	??_C@_08DOHHOJGB@__init__?$AA@			; `string'
PUBLIC	_PyImport_Init
EXTRN	Py_FatalError:PROC
EXTRN	PyUnicode_InternFromString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\import.c
pdata	SEGMENT
$pdata$_PyImport_Init DD imagerel $LN4
	DD	imagerel $LN4+45
	DD	imagerel $unwind$_PyImport_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_Init DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CC@OPKNGKNI@Can?8t?5initialize?5import?5variable@
CONST	SEGMENT
??_C@_0CC@OPKNGKNI@Can?8t?5initialize?5import?5variable@ DB 'Can''t initi'
	DB	'alize import variables', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DOHHOJGB@__init__?$AA@
CONST	SEGMENT
??_C@_08DOHHOJGB@__init__?$AA@ DB '__init__', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyImport_Init
_TEXT	SEGMENT
_PyImport_Init PROC					; COMDAT

; 49   : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 50   :     initstr = PyUnicode_InternFromString("__init__");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08DOHHOJGB@__init__?$AA@
  0000b	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00010	48 89 05 00 00
	00 00		 mov	 QWORD PTR initstr, rax

; 51   :     if (initstr == NULL)

  00017	48 85 c0	 test	 rax, rax
  0001a	75 0c		 jne	 SHORT $LN1@PyImport_I

; 52   :         Py_FatalError("Can't initialize import variables");

  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@OPKNGKNI@Can?8t?5initialize?5import?5variable@
  00023	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyImport_I:

; 53   : }

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
_PyImport_Init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EK@NMNNOLCG@initializing?5sys?4meta_path?0?5sys?4@ ; `string'
PUBLIC	_PyImportHooks_Init
EXTRN	PyErr_Print:PROC
EXTRN	PyDict_New:PROC
EXTRN	PySys_SetObject:PROC
EXTRN	PyList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImportHooks_Init DD imagerel $LN9
	DD	imagerel $LN9+177
	DD	imagerel $unwind$_PyImportHooks_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImportHooks_Init DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0EK@NMNNOLCG@initializing?5sys?4meta_path?0?5sys?4@
CONST	SEGMENT
??_C@_0EK@NMNNOLCG@initializing?5sys?4meta_path?0?5sys?4@ DB 'initializin'
	DB	'g sys.meta_path, sys.path_hooks, or path_importer_cache faile'
	DB	'd', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyImportHooks_Init
_TEXT	SEGMENT
_PyImportHooks_Init PROC				; COMDAT

; 57   : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 58   :     PyObject *v, *path_hooks = NULL;
; 59   :     int err = 0;
; 60   : 
; 61   :     /* adding sys.path_hooks and sys.path_importer_cache */
; 62   :     v = PyList_New(0);

  0000f	33 c9		 xor	 ecx, ecx
  00011	33 ff		 xor	 edi, edi
  00013	e8 00 00 00 00	 call	 PyList_New
  00018	48 8b f0	 mov	 rsi, rax

; 63   :     if (v == NULL)

  0001b	48 85 c0	 test	 rax, rax
  0001e	74 69		 je	 SHORT $error$121626

; 64   :         goto error;
; 65   :     err = PySys_SetObject("meta_path", v);

  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09FCAPOPDB@meta_path?$AA@
  00027	48 8b d0	 mov	 rdx, rax
  0002a	e8 00 00 00 00	 call	 PySys_SetObject

; 66   :     Py_DECREF(v);

  0002f	48 8b ce	 mov	 rcx, rsi
  00032	8b d8		 mov	 ebx, eax
  00034	e8 00 00 00 00	 call	 _Py_DecRef

; 67   :     if (err)

  00039	85 db		 test	 ebx, ebx
  0003b	75 4c		 jne	 SHORT $error$121626

; 68   :         goto error;
; 69   :     v = PyDict_New();

  0003d	e8 00 00 00 00	 call	 PyDict_New
  00042	48 8b f0	 mov	 rsi, rax

; 70   :     if (v == NULL)

  00045	48 85 c0	 test	 rax, rax
  00048	74 3f		 je	 SHORT $error$121626

; 71   :         goto error;
; 72   :     err = PySys_SetObject("path_importer_cache", v);

  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@FEEGIILL@path_importer_cache?$AA@
  00051	48 8b d0	 mov	 rdx, rax
  00054	e8 00 00 00 00	 call	 PySys_SetObject

; 73   :     Py_DECREF(v);

  00059	48 8b ce	 mov	 rcx, rsi
  0005c	8b d8		 mov	 ebx, eax
  0005e	e8 00 00 00 00	 call	 _Py_DecRef

; 74   :     if (err)

  00063	85 db		 test	 ebx, ebx
  00065	75 22		 jne	 SHORT $error$121626

; 75   :         goto error;
; 76   :     path_hooks = PyList_New(0);

  00067	33 c9		 xor	 ecx, ecx
  00069	e8 00 00 00 00	 call	 PyList_New
  0006e	48 8b f8	 mov	 rdi, rax

; 77   :     if (path_hooks == NULL)

  00071	48 85 c0	 test	 rax, rax
  00074	74 13		 je	 SHORT $error$121626

; 78   :         goto error;
; 79   :     err = PySys_SetObject("path_hooks", path_hooks);

  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PDLDEHCN@path_hooks?$AA@
  0007d	48 8b d0	 mov	 rdx, rax
  00080	e8 00 00 00 00	 call	 PySys_SetObject

; 80   :     if (err) {

  00085	85 c0		 test	 eax, eax
  00087	74 11		 je	 SHORT $LN1@PyImportHo
$error$121626:

; 81   :   error:
; 82   :     PyErr_Print();

  00089	e8 00 00 00 00	 call	 PyErr_Print

; 83   :     Py_FatalError("initializing sys.meta_path, sys.path_hooks, "
; 84   :                   "or path_importer_cache failed");

  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EK@NMNNOLCG@initializing?5sys?4meta_path?0?5sys?4@
  00095	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyImportHo:

; 85   :     }
; 86   :     Py_DECREF(path_hooks);

  0009a	48 8b cf	 mov	 rcx, rdi

; 87   : }

  0009d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a2	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ab	5f		 pop	 rdi
  000ac	e9 00 00 00 00	 jmp	 _Py_DecRef
_PyImportHooks_Init ENDP
_TEXT	ENDS
PUBLIC	_PyImport_AcquireLock
EXTRN	PyEval_RestoreThread:PROC
EXTRN	PyEval_SaveThread:PROC
EXTRN	PyThread_acquire_lock:PROC
EXTRN	PyThread_allocate_lock:PROC
EXTRN	PyThread_get_thread_ident:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImport_AcquireLock DD imagerel $LN9
	DD	imagerel $LN9+92
	DD	imagerel $unwind$_PyImport_AcquireLock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyImport_AcquireLock DD imagerel $LN9+92
	DD	imagerel $LN9+135
	DD	imagerel $chain$0$_PyImport_AcquireLock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PyImport_AcquireLock DD imagerel $LN9+135
	DD	imagerel $LN9+157
	DD	imagerel $chain$1$_PyImport_AcquireLock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PyImport_AcquireLock DD 021H
	DD	imagerel $LN9
	DD	imagerel $LN9+92
	DD	imagerel $unwind$_PyImport_AcquireLock
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyImport_AcquireLock DD 020521H
	DD	063405H
	DD	imagerel $LN9
	DD	imagerel $LN9+92
	DD	imagerel $unwind$_PyImport_AcquireLock
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_AcquireLock DD 020601H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyImport_AcquireLock
_TEXT	SEGMENT
_PyImport_AcquireLock PROC				; COMDAT

; 153  : {

$LN9:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 154  :     long me = PyThread_get_thread_ident();

  00006	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  0000b	8b f8		 mov	 edi, eax

; 155  :     if (me == -1)

  0000d	83 f8 ff	 cmp	 eax, -1
  00010	0f 84 81 00 00
	00		 je	 $LN7@PyImport_A

; 156  :         return; /* Too bad */
; 157  :     if (import_lock == NULL) {

  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR import_lock
  0001d	48 85 c0	 test	 rax, rax
  00020	75 11		 jne	 SHORT $LN4@PyImport_A

; 158  :         import_lock = PyThread_allocate_lock();

  00022	e8 00 00 00 00	 call	 PyThread_allocate_lock
  00027	48 89 05 00 00
	00 00		 mov	 QWORD PTR import_lock, rax

; 159  :         if (import_lock == NULL)

  0002e	48 85 c0	 test	 rax, rax
  00031	74 64		 je	 SHORT $LN7@PyImport_A
$LN4@PyImport_A:

; 160  :             return;  /* Nothing much we can do. */
; 161  :     }
; 162  :     if (import_lock_thread == me) {

  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR import_lock_thread
  00039	3b cf		 cmp	 ecx, edi
  0003b	75 0c		 jne	 SHORT $LN3@PyImport_A

; 163  :         import_lock_level++;

  0003d	ff 05 00 00 00
	00		 inc	 DWORD PTR import_lock_level

; 175  : }

  00043	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
$LN3@PyImport_A:

; 164  :         return;
; 165  :     }
; 166  :     if (import_lock_thread != -1 || !PyThread_acquire_lock(import_lock, 0))

  00049	83 f9 ff	 cmp	 ecx, -1
  0004c	75 0e		 jne	 SHORT $LN1@PyImport_A
  0004e	33 d2		 xor	 edx, edx
  00050	48 8b c8	 mov	 rcx, rax
  00053	e8 00 00 00 00	 call	 PyThread_acquire_lock
  00058	85 c0		 test	 eax, eax
  0005a	75 2b		 jne	 SHORT $LN2@PyImport_A
$LN1@PyImport_A:
  0005c	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 167  :     {
; 168  :         PyThreadState *tstate = PyEval_SaveThread();

  00061	e8 00 00 00 00	 call	 PyEval_SaveThread

; 169  :         PyThread_acquire_lock(import_lock, 1);

  00066	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR import_lock
  0006d	ba 01 00 00 00	 mov	 edx, 1
  00072	48 8b d8	 mov	 rbx, rax
  00075	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 170  :         PyEval_RestoreThread(tstate);

  0007a	48 8b cb	 mov	 rcx, rbx
  0007d	e8 00 00 00 00	 call	 PyEval_RestoreThread
  00082	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN2@PyImport_A:

; 171  :     }
; 172  :     assert(import_lock_level == 0);
; 173  :     import_lock_thread = me;

  00087	89 3d 00 00 00
	00		 mov	 DWORD PTR import_lock_thread, edi

; 174  :     import_lock_level = 1;

  0008d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR import_lock_level, 1
$LN7@PyImport_A:

; 175  : }

  00097	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009b	5f		 pop	 rdi
  0009c	c3		 ret	 0
_PyImport_AcquireLock ENDP
_TEXT	ENDS
PUBLIC	_PyImport_ReleaseLock
EXTRN	PyThread_release_lock:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImport_ReleaseLock DD imagerel $LN7
	DD	imagerel $LN7+82
	DD	imagerel $unwind$_PyImport_ReleaseLock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_ReleaseLock DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyImport_ReleaseLock
_TEXT	SEGMENT
_PyImport_ReleaseLock PROC				; COMDAT

; 179  : {

$LN7:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 180  :     long me = PyThread_get_thread_ident();

  00004	e8 00 00 00 00	 call	 PyThread_get_thread_ident

; 181  :     if (me == -1 || import_lock == NULL)

  00009	83 f8 ff	 cmp	 eax, -1
  0000c	74 3d		 je	 SHORT $LN3@PyImport_R
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR import_lock
  00015	48 85 c9	 test	 rcx, rcx
  00018	74 31		 je	 SHORT $LN3@PyImport_R

; 183  :     if (import_lock_thread != me)

  0001a	39 05 00 00 00
	00		 cmp	 DWORD PTR import_lock_thread, eax
  00020	74 08		 je	 SHORT $LN2@PyImport_R

; 184  :         return -1;

  00022	83 c8 ff	 or	 eax, -1

; 192  : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
$LN2@PyImport_R:

; 185  :     import_lock_level--;

  0002a	ff 0d 00 00 00
	00		 dec	 DWORD PTR import_lock_level

; 186  :     assert(import_lock_level >= 0);
; 187  :     if (import_lock_level == 0) {

  00030	75 0f		 jne	 SHORT $LN1@PyImport_R

; 188  :         import_lock_thread = -1;

  00032	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR import_lock_thread, -1

; 189  :         PyThread_release_lock(import_lock);

  0003c	e8 00 00 00 00	 call	 PyThread_release_lock
$LN1@PyImport_R:

; 190  :     }
; 191  :     return 1;

  00041	b8 01 00 00 00	 mov	 eax, 1

; 192  : }

  00046	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004a	c3		 ret	 0
$LN3@PyImport_R:

; 182  :         return 0; /* Too bad */

  0004b	33 c0		 xor	 eax, eax

; 192  : }

  0004d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00051	c3		 ret	 0
_PyImport_ReleaseLock ENDP
_TEXT	ENDS
PUBLIC	_PyImport_ReInitLock
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImport_ReInitLock DD imagerel $LN6
	DD	imagerel $LN6+35
	DD	imagerel $unwind$_PyImport_ReInitLock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyImport_ReInitLock DD imagerel $LN6+35
	DD	imagerel $LN6+83
	DD	imagerel $chain$0$_PyImport_ReInitLock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PyImport_ReInitLock DD imagerel $LN6+83
	DD	imagerel $LN6+108
	DD	imagerel $chain$1$_PyImport_ReInitLock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PyImport_ReInitLock DD 021H
	DD	imagerel $LN6
	DD	imagerel $LN6+35
	DD	imagerel $unwind$_PyImport_ReInitLock
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyImport_ReInitLock DD 020521H
	DD	043405H
	DD	imagerel $LN6
	DD	imagerel $LN6+35
	DD	imagerel $unwind$_PyImport_ReInitLock
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_ReInitLock DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyImport_ReInitLock
_TEXT	SEGMENT
_PyImport_ReInitLock PROC				; COMDAT

; 201  : {

$LN6:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 202  :     if (import_lock != NULL)

  00004	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR import_lock, 0
  0000c	74 0c		 je	 SHORT $LN3@PyImport_R@2

; 203  :         import_lock = PyThread_allocate_lock();

  0000e	e8 00 00 00 00	 call	 PyThread_allocate_lock
  00013	48 89 05 00 00
	00 00		 mov	 QWORD PTR import_lock, rax
$LN3@PyImport_R@2:

; 204  :     if (import_lock_level > 1) {

  0001a	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR import_lock_level, 1
  00021	7e 30		 jle	 SHORT $LN2@PyImport_R@2

; 205  :         /* Forked as a side effect of import */
; 206  :         long me = PyThread_get_thread_ident();

  00023	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00028	e8 00 00 00 00	 call	 PyThread_get_thread_ident

; 207  :         PyThread_acquire_lock(import_lock, 0);

  0002d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR import_lock
  00034	33 d2		 xor	 edx, edx
  00036	8b d8		 mov	 ebx, eax
  00038	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 208  :         /* XXX: can the previous line fail? */
; 209  :         import_lock_thread = me;
; 210  :         import_lock_level--;

  0003d	ff 0d 00 00 00
	00		 dec	 DWORD PTR import_lock_level
  00043	89 1d 00 00 00
	00		 mov	 DWORD PTR import_lock_thread, ebx
  00049	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 214  :     }
; 215  : }

  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	c3		 ret	 0
$LN2@PyImport_R@2:

; 211  :     } else {
; 212  :         import_lock_thread = -1;

  00053	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR import_lock_thread, -1

; 213  :         import_lock_level = 0;

  0005d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR import_lock_level, 0

; 214  :     }
; 215  : }

  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
_PyImport_ReInitLock ENDP
_TEXT	ENDS
EXTRN	PyBool_FromLong:PROC
; Function compile flags: /Ogtpy
;	COMDAT imp_lock_held
_TEXT	SEGMENT
self$ = 8
noargs$ = 16
imp_lock_held PROC					; COMDAT

; 222  : #ifdef WITH_THREAD
; 223  :     return PyBool_FromLong(import_lock_thread != -1);

  00000	33 c9		 xor	 ecx, ecx
  00002	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR import_lock_thread, -1
  00009	0f 95 c1	 setne	 cl

; 224  : #else
; 225  :     return PyBool_FromLong(0);
; 226  : #endif
; 227  : }

  0000c	e9 00 00 00 00	 jmp	 PyBool_FromLong
imp_lock_held ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$imp_acquire_lock DD imagerel imp_acquire_lock
	DD	imagerel imp_acquire_lock+105
	DD	imagerel $unwind$imp_acquire_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_acquire_lock DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
xdata	ENDS
;	COMDAT imp_acquire_lock
_TEXT	SEGMENT
self$ = 64
noargs$ = 72
imp_acquire_lock PROC					; COMDAT

; 231  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 232  : #ifdef WITH_THREAD
; 233  :     _PyImport_AcquireLock();

  00006	e8 00 00 00 00	 call	 _PyImport_AcquireLock

; 234  : #endif
; 235  :     Py_INCREF(Py_None);

  0000b	e8 00 00 00 00	 call	 _Py_PXCTX
  00010	85 c0		 test	 eax, eax
  00012	75 48		 jne	 SHORT $LN7@imp_acquir
  00014	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00029	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002f	4c 8b cb	 mov	 r9, rbx
  00032	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 09		 jne	 SHORT $LN3@imp_acquir
  00043	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0004a	74 07		 je	 SHORT $LN9@imp_acquir
$LN3@imp_acquir:
  0004c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@imp_acquir:

; 236  :     return Py_None;

  00053	48 8b c3	 mov	 rax, rbx

; 237  : }

  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	5b		 pop	 rbx
  0005b	c3		 ret	 0
$LN7@imp_acquir:

; 236  :     return Py_None;

  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 237  : }

  00063	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00067	5b		 pop	 rbx
  00068	c3		 ret	 0
imp_acquire_lock ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@JAELALKO@not?5holding?5the?5import?5lock?$AA@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_RuntimeError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$imp_release_lock DD imagerel imp_release_lock
	DD	imagerel imp_release_lock+120
	DD	imagerel $unwind$imp_release_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_release_lock DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BM@JAELALKO@not?5holding?5the?5import?5lock?$AA@
CONST	SEGMENT
??_C@_0BM@JAELALKO@not?5holding?5the?5import?5lock?$AA@ DB 'not holding t'
	DB	'he import lock', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
CONST	ENDS
;	COMDAT imp_release_lock
_TEXT	SEGMENT
self$ = 64
noargs$ = 72
imp_release_lock PROC					; COMDAT

; 241  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 242  : #ifdef WITH_THREAD
; 243  :     if (_PyImport_ReleaseLock() < 0) {

  00004	e8 00 00 00 00	 call	 _PyImport_ReleaseLock
  00009	85 c0		 test	 eax, eax
  0000b	79 1a		 jns	 SHORT $LN1@imp_releas

; 244  :         PyErr_SetString(PyExc_RuntimeError,
; 245  :                         "not holding the import lock");

  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@JAELALKO@not?5holding?5the?5import?5lock?$AA@
  0001b	e8 00 00 00 00	 call	 PyErr_SetString

; 246  :         return NULL;

  00020	33 c0		 xor	 eax, eax

; 251  : }

  00022	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00026	c3		 ret	 0
$LN1@imp_releas:

; 247  :     }
; 248  : #endif
; 249  :     Py_INCREF(Py_None);

  00027	e8 00 00 00 00	 call	 _Py_PXCTX
  0002c	85 c0		 test	 eax, eax
  0002e	75 3c		 jne	 SHORT $LN5@imp_releas
  00030	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00045	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0004b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00053	e8 00 00 00 00	 call	 _PyParallel_Guard
  00058	85 c0		 test	 eax, eax
  0005a	75 09		 jne	 SHORT $LN4@imp_releas
  0005c	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00063	74 07		 je	 SHORT $LN5@imp_releas
$LN4@imp_releas:
  00065	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@imp_releas:

; 250  :     return Py_None;

  0006c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 251  : }

  00073	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00077	c3		 ret	 0
imp_release_lock ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@MHCPAAKG@_PyImport_Fini?$AA@		; `string'
PUBLIC	??_C@_0BD@FNMKEIOD@?4?4?2Python?2import?4c?$AA@	; `string'
PUBLIC	_PyImport_Fini
EXTRN	PyThread_free_lock:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_PyImport_Fini DD imagerel $LN20
	DD	imagerel $LN20+61
	DD	imagerel $unwind$_PyImport_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyImport_Fini DD imagerel $LN20+61
	DD	imagerel $LN20+190
	DD	imagerel $chain$0$_PyImport_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PyImport_Fini DD imagerel $LN20+190
	DD	imagerel $LN20+223
	DD	imagerel $chain$1$_PyImport_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PyImport_Fini DD 021H
	DD	imagerel $LN20
	DD	imagerel $LN20+61
	DD	imagerel $unwind$_PyImport_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyImport_Fini DD 020521H
	DD	063405H
	DD	imagerel $LN20
	DD	imagerel $LN20+61
	DD	imagerel $unwind$_PyImport_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_Fini DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0P@MHCPAAKG@_PyImport_Fini?$AA@
CONST	SEGMENT
??_C@_0P@MHCPAAKG@_PyImport_Fini?$AA@ DB '_PyImport_Fini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FNMKEIOD@?4?4?2Python?2import?4c?$AA@
CONST	SEGMENT
??_C@_0BD@FNMKEIOD@?4?4?2Python?2import?4c?$AA@ DB '..\Python\import.c', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
CONST	ENDS
;	COMDAT _PyImport_Fini
_TEXT	SEGMENT
_PyImport_Fini PROC					; COMDAT

; 255  : {

$LN20:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 256  :     Py_CLEAR(extensions);

  00004	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR extensions
  0000b	4d 85 c9	 test	 r9, r9
  0000e	0f 84 aa 00 00
	00		 je	 $LN4@PyImport_F
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@FNMKEIOD@?4?4?2Python?2import?4c?$AA@
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@MHCPAAKG@_PyImport_Fini?$AA@
  00022	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  00028	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00030	e8 00 00 00 00	 call	 _PyParallel_Guard
  00035	85 c0		 test	 eax, eax
  00037	0f 85 81 00 00
	00		 jne	 $LN4@PyImport_F
  0003d	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00042	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR extensions
  00049	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR extensions, 0
  00054	e8 00 00 00 00	 call	 _Py_PXCTX
  00059	85 c0		 test	 eax, eax
  0005b	75 5c		 jne	 SHORT $LN19@PyImport_F
  0005d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00061	a8 20		 test	 al, 32			; 00000020H
  00063	75 4c		 jne	 SHORT $LN12@PyImport_F
  00065	84 c0		 test	 al, al
  00067	78 48		 js	 SHORT $LN12@PyImport_F
  00069	a8 02		 test	 al, 2
  0006b	75 4c		 jne	 SHORT $LN19@PyImport_F
  0006d	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00071	75 46		 jne	 SHORT $LN19@PyImport_F
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00081	4c 8b cb	 mov	 r9, rbx
  00084	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0008a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00092	e8 00 00 00 00	 call	 _PyParallel_Guard
  00097	48 8b cb	 mov	 rcx, rbx
  0009a	85 c0		 test	 eax, eax
  0009c	74 07		 je	 SHORT $LN17@PyImport_F
  0009e	e8 00 00 00 00	 call	 _Px_Dealloc
  000a3	eb 14		 jmp	 SHORT $LN19@PyImport_F
$LN17@PyImport_F:
  000a5	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000af	eb 08		 jmp	 SHORT $LN19@PyImport_F
$LN12@PyImport_F:
  000b1	48 8b cb	 mov	 rcx, rbx
  000b4	e8 00 00 00 00	 call	 Px_DecRef
$LN19@PyImport_F:
  000b9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN4@PyImport_F:

; 257  : #ifdef WITH_THREAD
; 258  :     if (import_lock != NULL) {

  000be	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR import_lock
  000c5	48 85 c9	 test	 rcx, rcx
  000c8	74 10		 je	 SHORT $LN1@PyImport_F

; 259  :         PyThread_free_lock(import_lock);

  000ca	e8 00 00 00 00	 call	 PyThread_free_lock

; 260  :         import_lock = NULL;

  000cf	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR import_lock, 0
$LN1@PyImport_F:

; 261  :     }
; 262  : #endif
; 263  : }

  000da	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000de	c3		 ret	 0
_PyImport_Fini ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@CGEEKKNL@PyImport_GetModuleDict?3?5no?5modul@ ; `string'
PUBLIC	PyImport_GetModuleDict
EXTRN	_PyThreadState_Current:QWORD
EXTRN	_PyParallel_GetThreadState:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_GetModuleDict DD imagerel $LN7
	DD	imagerel $LN7+62
	DD	imagerel $unwind$PyImport_GetModuleDict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_GetModuleDict DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CO@CGEEKKNL@PyImport_GetModuleDict?3?5no?5modul@
CONST	SEGMENT
??_C@_0CO@CGEEKKNL@PyImport_GetModuleDict?3?5no?5modul@ DB 'PyImport_GetM'
	DB	'oduleDict: no module dictionary!', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyImport_GetModuleDict
_TEXT	SEGMENT
PyImport_GetModuleDict PROC				; COMDAT

; 269  : {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 270  :     PyInterpreterState *interp = PyThreadState_GET()->interp;

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	74 07		 je	 SHORT $LN4@PyImport_G
  0000f	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00014	eb 07		 jmp	 SHORT $LN5@PyImport_G
$LN4@PyImport_G:
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN5@PyImport_G:
  0001d	48 8b 58 08	 mov	 rbx, QWORD PTR [rax+8]

; 271  :     if (interp->modules == NULL)

  00021	48 83 7b 10 00	 cmp	 QWORD PTR [rbx+16], 0
  00026	75 0c		 jne	 SHORT $LN6@PyImport_G

; 272  :         Py_FatalError("PyImport_GetModuleDict: no module dictionary!");

  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@CGEEKKNL@PyImport_GetModuleDict?3?5no?5modul@
  0002f	e8 00 00 00 00	 call	 Py_FatalError
$LN6@PyImport_G:

; 273  :     return interp->modules;

  00034	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]

; 274  : }

  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5b		 pop	 rbx
  0003d	c3		 ret	 0
PyImport_GetModuleDict ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@ONHJNLMD@?$CD?5cleanup?5builtins?6?$AA@ ; `string'
PUBLIC	??_C@_0P@GCPPEJFP@?$CD?5cleanup?5sys?6?$AA@	; `string'
PUBLIC	??_C@_0BB@KKCCGANJ@?$CD?5cleanup?$FL2?$FN?5?$CFU?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@JLMKHKEE@?$CD?5cleanup?$FL1?$FN?5?$CFU?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@PGJOFIFJ@?$CD?5cleanup?5__main__?6?$AA@ ; `string'
PUBLIC	??_C@_08EMKMIFM@__main__?$AA@			; `string'
PUBLIC	??_C@_0BC@BONAFDFG@?$CD?5restore?5sys?4?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@DLJIFAE@?$CD?5clear?5sys?4?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_03PIADFGHL@sys?$AA@			; `string'
PUBLIC	??_C@_01IDAFKMJL@_?$AA@				; `string'
PUBLIC	??_C@_0BE@DDAKLNAC@?$CD?5clear?5builtins?4_?6?$AA@ ; `string'
PUBLIC	??_C@_08OCOMCJAJ@builtins?$AA@			; `string'
PUBLIC	PyImport_Cleanup
EXTRN	PyDict_Clear:PROC
EXTRN	PyDict_SetItem:PROC
EXTRN	PySys_FormatStderr:PROC
EXTRN	PyUnicode_CompareWithASCIIString:PROC
EXTRN	PyDict_Next:PROC
EXTRN	_PyModule_Clear:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PySys_WriteStderr:PROC
EXTRN	Py_VerboseFlag:DWORD
EXTRN	PyModule_GetDict:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyModule_Type:BYTE
EXTRN	PyDict_GetItemString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyImport_Cleanup DD imagerel $LN77
	DD	imagerel $LN77+53
	DD	imagerel $unwind$PyImport_Cleanup
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyImport_Cleanup DD imagerel $LN77+53
	DD	imagerel $LN77+785
	DD	imagerel $chain$3$PyImport_Cleanup
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyImport_Cleanup DD imagerel $LN77+785
	DD	imagerel $LN77+1184
	DD	imagerel $chain$4$PyImport_Cleanup
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyImport_Cleanup DD imagerel $LN77+1184
	DD	imagerel $LN77+1299
	DD	imagerel $chain$5$PyImport_Cleanup
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyImport_Cleanup DD 021H
	DD	imagerel $LN77
	DD	imagerel $LN77+53
	DD	imagerel $unwind$PyImport_Cleanup
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyImport_Cleanup DD 060021H
	DD	06e400H
	DD	07d400H
	DD	086400H
	DD	imagerel $LN77
	DD	imagerel $LN77+53
	DD	imagerel $unwind$PyImport_Cleanup
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyImport_Cleanup DD 081e21H
	DD	06e41eH
	DD	07d419H
	DD	08640aH
	DD	093405H
	DD	imagerel $LN77
	DD	imagerel $LN77+53
	DD	imagerel $unwind$PyImport_Cleanup
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_Cleanup DD 040c01H
	DD	0c005920cH
	DD	050027003H
xdata	ENDS
;	COMDAT ??_C@_0BE@ONHJNLMD@?$CD?5cleanup?5builtins?6?$AA@
CONST	SEGMENT
??_C@_0BE@ONHJNLMD@?$CD?5cleanup?5builtins?6?$AA@ DB '# cleanup builtins', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GCPPEJFP@?$CD?5cleanup?5sys?6?$AA@
CONST	SEGMENT
??_C@_0P@GCPPEJFP@?$CD?5cleanup?5sys?6?$AA@ DB '# cleanup sys', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KKCCGANJ@?$CD?5cleanup?$FL2?$FN?5?$CFU?6?$AA@
CONST	SEGMENT
??_C@_0BB@KKCCGANJ@?$CD?5cleanup?$FL2?$FN?5?$CFU?6?$AA@ DB '# cleanup[2] '
	DB	'%U', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JLMKHKEE@?$CD?5cleanup?$FL1?$FN?5?$CFU?6?$AA@
CONST	SEGMENT
??_C@_0BB@JLMKHKEE@?$CD?5cleanup?$FL1?$FN?5?$CFU?6?$AA@ DB '# cleanup[1] '
	DB	'%U', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PGJOFIFJ@?$CD?5cleanup?5__main__?6?$AA@
CONST	SEGMENT
??_C@_0BE@PGJOFIFJ@?$CD?5cleanup?5__main__?6?$AA@ DB '# cleanup __main__', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMKMIFM@__main__?$AA@
CONST	SEGMENT
??_C@_08EMKMIFM@__main__?$AA@ DB '__main__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BONAFDFG@?$CD?5restore?5sys?4?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BC@BONAFDFG@?$CD?5restore?5sys?4?$CFs?6?$AA@ DB '# restore sys.%s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DLJIFAE@?$CD?5clear?5sys?4?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BA@DLJIFAE@?$CD?5clear?5sys?4?$CFs?6?$AA@ DB '# clear sys.%s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03PIADFGHL@sys?$AA@
CONST	SEGMENT
??_C@_03PIADFGHL@sys?$AA@ DB 'sys', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IDAFKMJL@_?$AA@
CONST	SEGMENT
??_C@_01IDAFKMJL@_?$AA@ DB '_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DDAKLNAC@?$CD?5clear?5builtins?4_?6?$AA@
CONST	SEGMENT
??_C@_0BE@DDAKLNAC@?$CD?5clear?5builtins?4_?6?$AA@ DB '# clear builtins._'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08OCOMCJAJ@builtins?$AA@
CONST	SEGMENT
??_C@_08OCOMCJAJ@builtins?$AA@ DB 'builtins', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
CONST	ENDS
;	COMDAT PyImport_Cleanup
_TEXT	SEGMENT
value$ = 112
key$ = 120
pos$ = 128
PyImport_Cleanup PROC					; COMDAT

; 299  : {

$LN77:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	41 54		 push	 r12
  00005	48 8b ec	 mov	 rbp, rsp
  00008	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 300  :     Py_ssize_t pos, ndone;
; 301  :     PyObject *key, *value, *dict;
; 302  :     PyInterpreterState *interp = PyThreadState_GET()->interp;

  0000c	e8 00 00 00 00	 call	 _Py_PXCTX
  00011	85 c0		 test	 eax, eax
  00013	74 07		 je	 SHORT $LN45@PyImport_C
  00015	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  0001a	eb 07		 jmp	 SHORT $LN46@PyImport_C
$LN45@PyImport_C:
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN46@PyImport_C:
  00023	4c 8b 60 08	 mov	 r12, QWORD PTR [rax+8]

; 303  :     PyObject *modules = interp->modules;

  00027	49 8b 7c 24 10	 mov	 rdi, QWORD PTR [r12+16]

; 304  : 
; 305  :     if (modules == NULL)

  0002c	48 85 ff	 test	 rdi, rdi
  0002f	0f 84 d5 04 00
	00		 je	 $LN57@PyImport_C

; 306  :         return; /* Already done */
; 307  : 
; 308  :     /* Delete some special variables first.  These are common
; 309  :        places where user values hide and people complain when their
; 310  :        destructors fail.  Since the modules containing them are
; 311  :        deleted *last* of all, they would come too late in the normal
; 312  :        destruction order.  Sigh. */
; 313  : 
; 314  :     value = PyDict_GetItemString(modules, "builtins");

  00035	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  0003a	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00046	48 8b cf	 mov	 rcx, rdi
  00049	4c 89 6c 24 38	 mov	 QWORD PTR [rsp+56], r13
  0004e	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  00053	e8 00 00 00 00	 call	 PyDict_GetItemString

; 315  :     if (value != NULL && PyModule_Check(value)) {

  00058	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:PyModule_Type
  0005f	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:_Py_NoneStruct
  00066	48 89 45 20	 mov	 QWORD PTR value$[rbp-80], rax
  0006a	48 85 c0	 test	 rax, rax
  0006d	74 4c		 je	 SHORT $LN41@PyImport_C
  0006f	4c 39 68 58	 cmp	 QWORD PTR [rax+88], r13
  00073	74 14		 je	 SHORT $LN40@PyImport_C
  00075	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00079	49 8b d5	 mov	 rdx, r13
  0007c	e8 00 00 00 00	 call	 PyType_IsSubtype
  00081	85 c0		 test	 eax, eax
  00083	74 36		 je	 SHORT $LN41@PyImport_C
  00085	48 8b 45 20	 mov	 rax, QWORD PTR value$[rbp-80]
$LN40@PyImport_C:

; 316  :         dict = PyModule_GetDict(value);

  00089	48 8b c8	 mov	 rcx, rax
  0008c	e8 00 00 00 00	 call	 PyModule_GetDict

; 317  :         if (Py_VerboseFlag)

  00091	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00098	48 8b d8	 mov	 rbx, rax
  0009b	74 0c		 je	 SHORT $LN39@PyImport_C

; 318  :             PySys_WriteStderr("# clear builtins._\n");

  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@DDAKLNAC@?$CD?5clear?5builtins?4_?6?$AA@
  000a4	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN39@PyImport_C:

; 319  :         PyDict_SetItemString(dict, "_", Py_None);

  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01IDAFKMJL@_?$AA@
  000b0	4d 8b c6	 mov	 r8, r14
  000b3	48 8b cb	 mov	 rcx, rbx
  000b6	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN41@PyImport_C:

; 320  :     }
; 321  :     value = PyDict_GetItemString(modules, "sys");

  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PIADFGHL@sys?$AA@
  000c2	48 8b cf	 mov	 rcx, rdi
  000c5	e8 00 00 00 00	 call	 PyDict_GetItemString
  000ca	48 89 45 20	 mov	 QWORD PTR value$[rbp-80], rax

; 322  :     if (value != NULL && PyModule_Check(value)) {

  000ce	48 85 c0	 test	 rax, rax
  000d1	0f 84 be 00 00
	00		 je	 $LN30@PyImport_C
  000d7	4c 39 68 58	 cmp	 QWORD PTR [rax+88], r13
  000db	74 18		 je	 SHORT $LN37@PyImport_C
  000dd	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000e1	49 8b d5	 mov	 rdx, r13
  000e4	e8 00 00 00 00	 call	 PyType_IsSubtype
  000e9	85 c0		 test	 eax, eax
  000eb	0f 84 a4 00 00
	00		 je	 $LN30@PyImport_C
  000f1	48 8b 45 20	 mov	 rax, QWORD PTR value$[rbp-80]
$LN37@PyImport_C:

; 323  :         char **p;
; 324  :         PyObject *v;
; 325  :         dict = PyModule_GetDict(value);

  000f5	48 8b c8	 mov	 rcx, rax
  000f8	e8 00 00 00 00	 call	 PyModule_GetDict

; 326  :         for (p = sys_deletes; *p != NULL; p++) {

  000fd	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR sys_deletes, 0
  00105	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:sys_deletes
  0010c	48 8b f0	 mov	 rsi, rax
  0010f	74 30		 je	 SHORT $LN34@PyImport_C
$LL36@PyImport_C:

; 327  :             if (Py_VerboseFlag)

  00111	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00118	74 0f		 je	 SHORT $LN33@PyImport_C

; 328  :                 PySys_WriteStderr("# clear sys.%s\n", *p);

  0011a	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@DLJIFAE@?$CD?5clear?5sys?4?$CFs?6?$AA@
  00124	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN33@PyImport_C:

; 329  :             PyDict_SetItemString(dict, *p, Py_None);

  00129	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  0012c	4d 8b c6	 mov	 r8, r14
  0012f	48 8b ce	 mov	 rcx, rsi
  00132	e8 00 00 00 00	 call	 PyDict_SetItemString
  00137	48 83 c3 08	 add	 rbx, 8
  0013b	48 83 3b 00	 cmp	 QWORD PTR [rbx], 0
  0013f	75 d0		 jne	 SHORT $LL36@PyImport_C
$LN34@PyImport_C:

; 330  :         }
; 331  :         for (p = sys_files; *p != NULL; p+=2) {

  00141	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR sys_files, 0
  00149	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:sys_files
  00150	74 43		 je	 SHORT $LN30@PyImport_C
$LL32@PyImport_C:

; 332  :             if (Py_VerboseFlag)

  00152	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00159	74 0f		 je	 SHORT $LN29@PyImport_C

; 333  :                 PySys_WriteStderr("# restore sys.%s\n", *p);

  0015b	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@BONAFDFG@?$CD?5restore?5sys?4?$CFs?6?$AA@
  00165	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN29@PyImport_C:

; 334  :             v = PyDict_GetItemString(dict, *(p+1));

  0016a	48 8b 53 08	 mov	 rdx, QWORD PTR [rbx+8]
  0016e	48 8b ce	 mov	 rcx, rsi
  00171	e8 00 00 00 00	 call	 PyDict_GetItemString

; 335  :             if (v == NULL)
; 336  :                 v = Py_None;
; 337  :             PyDict_SetItemString(dict, *p, v);

  00176	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00179	4d 8b c6	 mov	 r8, r14
  0017c	48 85 c0	 test	 rax, rax
  0017f	48 8b ce	 mov	 rcx, rsi
  00182	4c 0f 45 c0	 cmovne	 r8, rax
  00186	e8 00 00 00 00	 call	 PyDict_SetItemString
  0018b	48 83 c3 10	 add	 rbx, 16
  0018f	48 83 3b 00	 cmp	 QWORD PTR [rbx], 0
  00193	75 bd		 jne	 SHORT $LL32@PyImport_C
$LN30@PyImport_C:

; 338  :         }
; 339  :     }
; 340  : 
; 341  :     /* First, delete __main__ */
; 342  :     value = PyDict_GetItemString(modules, "__main__");

  00195	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  0019c	48 8b cf	 mov	 rcx, rdi
  0019f	e8 00 00 00 00	 call	 PyDict_GetItemString
  001a4	48 89 45 20	 mov	 QWORD PTR value$[rbp-80], rax

; 343  :     if (value != NULL && PyModule_Check(value)) {

  001a8	48 85 c0	 test	 rax, rax
  001ab	74 4d		 je	 SHORT $LN74@PyImport_C
  001ad	4c 39 68 58	 cmp	 QWORD PTR [rax+88], r13
  001b1	74 14		 je	 SHORT $LN26@PyImport_C
  001b3	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  001b7	49 8b d5	 mov	 rdx, r13
  001ba	e8 00 00 00 00	 call	 PyType_IsSubtype
  001bf	85 c0		 test	 eax, eax
  001c1	74 37		 je	 SHORT $LN74@PyImport_C
  001c3	48 8b 45 20	 mov	 rax, QWORD PTR value$[rbp-80]
$LN26@PyImport_C:

; 344  :         if (Py_VerboseFlag)

  001c7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  001ce	74 10		 je	 SHORT $LN25@PyImport_C

; 345  :             PySys_WriteStderr("# cleanup __main__\n");

  001d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@PGJOFIFJ@?$CD?5cleanup?5__main__?6?$AA@
  001d7	e8 00 00 00 00	 call	 PySys_WriteStderr
  001dc	48 8b 45 20	 mov	 rax, QWORD PTR value$[rbp-80]
$LN25@PyImport_C:

; 346  :         _PyModule_Clear(value);

  001e0	48 8b c8	 mov	 rcx, rax
  001e3	e8 00 00 00 00	 call	 _PyModule_Clear

; 347  :         PyDict_SetItemString(modules, "__main__", Py_None);

  001e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  001ef	4d 8b c6	 mov	 r8, r14
  001f2	48 8b cf	 mov	 rcx, rdi
  001f5	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN74@PyImport_C:
  001fa	33 f6		 xor	 esi, esi
  001fc	0f 1f 40 00	 npad	 4
$LL24@PyImport_C:

; 348  :     }
; 349  : 
; 350  :     /* The special treatment of "builtins" here is because even
; 351  :        when it's not referenced as a module, its dictionary is
; 352  :        referenced by almost every module's __builtins__.  Since
; 353  :        deleting a module clears its dictionary (even if there are
; 354  :        references left to it), we need to delete the "builtins"
; 355  :        module last.  Likewise, we don't delete sys until the very
; 356  :        end because it is implicitly referenced (e.g. by print).
; 357  : 
; 358  :        Also note that we 'delete' modules by replacing their entry
; 359  :        in the modules dict with None, rather than really deleting
; 360  :        them; this avoids a rehash of the modules dictionary and
; 361  :        also marks them as "non existent" so they won't be
; 362  :        re-imported. */
; 363  : 
; 364  :     /* Next, repeatedly delete modules with a reference count of
; 365  :        one (skipping builtins and sys) and delete them */
; 366  :     do {
; 367  :         ndone = 0;
; 368  :         pos = 0;
; 369  :         while (PyDict_Next(modules, &pos, &key, &value)) {

  00200	4c 8d 4d 20	 lea	 r9, QWORD PTR value$[rbp-80]
  00204	4c 8d 45 28	 lea	 r8, QWORD PTR key$[rbp-80]
  00208	48 8d 55 30	 lea	 rdx, QWORD PTR pos$[rbp-80]
  0020c	48 8b cf	 mov	 rcx, rdi
  0020f	48 8b de	 mov	 rbx, rsi
  00212	48 89 75 30	 mov	 QWORD PTR pos$[rbp-80], rsi
  00216	e8 00 00 00 00	 call	 PyDict_Next
  0021b	85 c0		 test	 eax, eax
  0021d	0f 84 c9 00 00
	00		 je	 $LN70@PyImport_C
  00223	66 66 66 66 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL21@PyImport_C:

; 370  :             if (value->ob_refcnt != 1)

  00230	48 8b 4d 20	 mov	 rcx, QWORD PTR value$[rbp-80]
  00234	48 83 79 50 01	 cmp	 QWORD PTR [rcx+80], 1
  00239	0f 85 88 00 00
	00		 jne	 $LN18@PyImport_C

; 371  :                 continue;
; 372  :             if (PyUnicode_Check(key) && PyModule_Check(value)) {

  0023f	4c 8b 45 28	 mov	 r8, QWORD PTR key$[rbp-80]
  00243	49 8b 40 58	 mov	 rax, QWORD PTR [r8+88]
  00247	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00251	74 74		 je	 SHORT $LN18@PyImport_C
  00253	4c 39 69 58	 cmp	 QWORD PTR [rcx+88], r13
  00257	74 14		 je	 SHORT $LN17@PyImport_C
  00259	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0025d	49 8b d5	 mov	 rdx, r13
  00260	e8 00 00 00 00	 call	 PyType_IsSubtype
  00265	85 c0		 test	 eax, eax
  00267	74 5e		 je	 SHORT $LN18@PyImport_C
  00269	4c 8b 45 28	 mov	 r8, QWORD PTR key$[rbp-80]
$LN17@PyImport_C:

; 373  :                 if (PyUnicode_CompareWithASCIIString(key, "builtins") == 0)

  0026d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00274	49 8b c8	 mov	 rcx, r8
  00277	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  0027c	85 c0		 test	 eax, eax
  0027e	74 47		 je	 SHORT $LN18@PyImport_C

; 374  :                     continue;
; 375  :                 if (PyUnicode_CompareWithASCIIString(key, "sys") == 0)

  00280	48 8b 4d 28	 mov	 rcx, QWORD PTR key$[rbp-80]
  00284	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PIADFGHL@sys?$AA@
  0028b	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00290	85 c0		 test	 eax, eax
  00292	74 33		 je	 SHORT $LN18@PyImport_C

; 376  :                     continue;
; 377  :                 if (Py_VerboseFlag)

  00294	39 35 00 00 00
	00		 cmp	 DWORD PTR Py_VerboseFlag, esi
  0029a	74 10		 je	 SHORT $LN14@PyImport_C

; 378  :                     PySys_FormatStderr(
; 379  :                         "# cleanup[1] %U\n", key);

  0029c	48 8b 55 28	 mov	 rdx, QWORD PTR key$[rbp-80]
  002a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JLMKHKEE@?$CD?5cleanup?$FL1?$FN?5?$CFU?6?$AA@
  002a7	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN14@PyImport_C:

; 380  :                 _PyModule_Clear(value);

  002ac	48 8b 4d 20	 mov	 rcx, QWORD PTR value$[rbp-80]
  002b0	e8 00 00 00 00	 call	 _PyModule_Clear

; 381  :                 PyDict_SetItem(modules, key, Py_None);

  002b5	48 8b 55 28	 mov	 rdx, QWORD PTR key$[rbp-80]
  002b9	4d 8b c6	 mov	 r8, r14
  002bc	48 8b cf	 mov	 rcx, rdi
  002bf	e8 00 00 00 00	 call	 PyDict_SetItem

; 382  :                 ndone++;

  002c4	48 ff c3	 inc	 rbx
$LN18@PyImport_C:

; 348  :     }
; 349  : 
; 350  :     /* The special treatment of "builtins" here is because even
; 351  :        when it's not referenced as a module, its dictionary is
; 352  :        referenced by almost every module's __builtins__.  Since
; 353  :        deleting a module clears its dictionary (even if there are
; 354  :        references left to it), we need to delete the "builtins"
; 355  :        module last.  Likewise, we don't delete sys until the very
; 356  :        end because it is implicitly referenced (e.g. by print).
; 357  : 
; 358  :        Also note that we 'delete' modules by replacing their entry
; 359  :        in the modules dict with None, rather than really deleting
; 360  :        them; this avoids a rehash of the modules dictionary and
; 361  :        also marks them as "non existent" so they won't be
; 362  :        re-imported. */
; 363  : 
; 364  :     /* Next, repeatedly delete modules with a reference count of
; 365  :        one (skipping builtins and sys) and delete them */
; 366  :     do {
; 367  :         ndone = 0;
; 368  :         pos = 0;
; 369  :         while (PyDict_Next(modules, &pos, &key, &value)) {

  002c7	4c 8d 4d 20	 lea	 r9, QWORD PTR value$[rbp-80]
  002cb	4c 8d 45 28	 lea	 r8, QWORD PTR key$[rbp-80]
  002cf	48 8d 55 30	 lea	 rdx, QWORD PTR pos$[rbp-80]
  002d3	48 8b cf	 mov	 rcx, rdi
  002d6	e8 00 00 00 00	 call	 PyDict_Next
  002db	85 c0		 test	 eax, eax
  002dd	0f 85 4d ff ff
	ff		 jne	 $LL21@PyImport_C

; 383  :             }
; 384  :         }
; 385  :     } while (ndone > 0);

  002e3	48 85 db	 test	 rbx, rbx
  002e6	0f 8f 14 ff ff
	ff		 jg	 $LL24@PyImport_C
$LN70@PyImport_C:

; 386  : 
; 387  :     /* Next, delete all modules (still skipping builtins and sys) */
; 388  :     pos = 0;
; 389  :     while (PyDict_Next(modules, &pos, &key, &value)) {

  002ec	4c 8d 4d 20	 lea	 r9, QWORD PTR value$[rbp-80]
  002f0	4c 8d 45 28	 lea	 r8, QWORD PTR key$[rbp-80]
  002f4	48 8d 55 30	 lea	 rdx, QWORD PTR pos$[rbp-80]
  002f8	48 8b cf	 mov	 rcx, rdi
  002fb	48 89 75 30	 mov	 QWORD PTR pos$[rbp-80], rsi
  002ff	e8 00 00 00 00	 call	 PyDict_Next
  00304	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00309	85 c0		 test	 eax, eax
  0030b	0f 84 a2 00 00
	00		 je	 $LN12@PyImport_C
$LL13@PyImport_C:

; 390  :         if (PyUnicode_Check(key) && PyModule_Check(value)) {

  00311	48 8b 4d 28	 mov	 rcx, QWORD PTR key$[rbp-80]
  00315	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00319	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00323	74 72		 je	 SHORT $LN11@PyImport_C
  00325	48 8b 45 20	 mov	 rax, QWORD PTR value$[rbp-80]
  00329	4c 39 68 58	 cmp	 QWORD PTR [rax+88], r13
  0032d	74 14		 je	 SHORT $LN10@PyImport_C
  0032f	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00333	49 8b d5	 mov	 rdx, r13
  00336	e8 00 00 00 00	 call	 PyType_IsSubtype
  0033b	85 c0		 test	 eax, eax
  0033d	74 58		 je	 SHORT $LN11@PyImport_C
  0033f	48 8b 4d 28	 mov	 rcx, QWORD PTR key$[rbp-80]
$LN10@PyImport_C:

; 391  :             if (PyUnicode_CompareWithASCIIString(key, "builtins") == 0)

  00343	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  0034a	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  0034f	85 c0		 test	 eax, eax
  00351	74 44		 je	 SHORT $LN11@PyImport_C

; 392  :                 continue;
; 393  :             if (PyUnicode_CompareWithASCIIString(key, "sys") == 0)

  00353	48 8b 4d 28	 mov	 rcx, QWORD PTR key$[rbp-80]
  00357	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PIADFGHL@sys?$AA@
  0035e	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00363	85 c0		 test	 eax, eax
  00365	74 30		 je	 SHORT $LN11@PyImport_C

; 394  :                 continue;
; 395  :             if (Py_VerboseFlag)

  00367	39 35 00 00 00
	00		 cmp	 DWORD PTR Py_VerboseFlag, esi
  0036d	74 10		 je	 SHORT $LN7@PyImport_C

; 396  :                 PySys_FormatStderr("# cleanup[2] %U\n", key);

  0036f	48 8b 55 28	 mov	 rdx, QWORD PTR key$[rbp-80]
  00373	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@KKCCGANJ@?$CD?5cleanup?$FL2?$FN?5?$CFU?6?$AA@
  0037a	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN7@PyImport_C:

; 397  :             _PyModule_Clear(value);

  0037f	48 8b 4d 20	 mov	 rcx, QWORD PTR value$[rbp-80]
  00383	e8 00 00 00 00	 call	 _PyModule_Clear

; 398  :             PyDict_SetItem(modules, key, Py_None);

  00388	48 8b 55 28	 mov	 rdx, QWORD PTR key$[rbp-80]
  0038c	4d 8b c6	 mov	 r8, r14
  0038f	48 8b cf	 mov	 rcx, rdi
  00392	e8 00 00 00 00	 call	 PyDict_SetItem
$LN11@PyImport_C:

; 386  : 
; 387  :     /* Next, delete all modules (still skipping builtins and sys) */
; 388  :     pos = 0;
; 389  :     while (PyDict_Next(modules, &pos, &key, &value)) {

  00397	4c 8d 4d 20	 lea	 r9, QWORD PTR value$[rbp-80]
  0039b	4c 8d 45 28	 lea	 r8, QWORD PTR key$[rbp-80]
  0039f	48 8d 55 30	 lea	 rdx, QWORD PTR pos$[rbp-80]
  003a3	48 8b cf	 mov	 rcx, rdi
  003a6	e8 00 00 00 00	 call	 PyDict_Next
  003ab	85 c0		 test	 eax, eax
  003ad	0f 85 5e ff ff
	ff		 jne	 $LL13@PyImport_C
$LN12@PyImport_C:

; 399  :         }
; 400  :     }
; 401  : 
; 402  :     /* Next, delete sys and builtins (in that order) */
; 403  :     value = PyDict_GetItemString(modules, "sys");

  003b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PIADFGHL@sys?$AA@
  003ba	48 8b cf	 mov	 rcx, rdi
  003bd	e8 00 00 00 00	 call	 PyDict_GetItemString
  003c2	48 89 45 20	 mov	 QWORD PTR value$[rbp-80], rax

; 404  :     if (value != NULL && PyModule_Check(value)) {

  003c6	48 85 c0	 test	 rax, rax
  003c9	74 4c		 je	 SHORT $LN6@PyImport_C
  003cb	4c 39 68 58	 cmp	 QWORD PTR [rax+88], r13
  003cf	74 14		 je	 SHORT $LN5@PyImport_C
  003d1	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  003d5	49 8b d5	 mov	 rdx, r13
  003d8	e8 00 00 00 00	 call	 PyType_IsSubtype
  003dd	85 c0		 test	 eax, eax
  003df	74 36		 je	 SHORT $LN6@PyImport_C
  003e1	48 8b 45 20	 mov	 rax, QWORD PTR value$[rbp-80]
$LN5@PyImport_C:

; 405  :         if (Py_VerboseFlag)

  003e5	39 35 00 00 00
	00		 cmp	 DWORD PTR Py_VerboseFlag, esi
  003eb	74 10		 je	 SHORT $LN4@PyImport_C

; 406  :             PySys_WriteStderr("# cleanup sys\n");

  003ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@GCPPEJFP@?$CD?5cleanup?5sys?6?$AA@
  003f4	e8 00 00 00 00	 call	 PySys_WriteStderr
  003f9	48 8b 45 20	 mov	 rax, QWORD PTR value$[rbp-80]
$LN4@PyImport_C:

; 407  :         _PyModule_Clear(value);

  003fd	48 8b c8	 mov	 rcx, rax
  00400	e8 00 00 00 00	 call	 _PyModule_Clear

; 408  :         PyDict_SetItemString(modules, "sys", Py_None);

  00405	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PIADFGHL@sys?$AA@
  0040c	4d 8b c6	 mov	 r8, r14
  0040f	48 8b cf	 mov	 rcx, rdi
  00412	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN6@PyImport_C:

; 409  :     }
; 410  :     value = PyDict_GetItemString(modules, "builtins");

  00417	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  0041e	48 8b cf	 mov	 rcx, rdi
  00421	e8 00 00 00 00	 call	 PyDict_GetItemString
  00426	48 89 45 20	 mov	 QWORD PTR value$[rbp-80], rax

; 411  :     if (value != NULL && PyModule_Check(value)) {

  0042a	48 85 c0	 test	 rax, rax
  0042d	74 4c		 je	 SHORT $LN3@PyImport_C
  0042f	4c 39 68 58	 cmp	 QWORD PTR [rax+88], r13
  00433	74 14		 je	 SHORT $LN2@PyImport_C
  00435	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00439	49 8b d5	 mov	 rdx, r13
  0043c	e8 00 00 00 00	 call	 PyType_IsSubtype
  00441	85 c0		 test	 eax, eax
  00443	74 36		 je	 SHORT $LN3@PyImport_C
  00445	48 8b 45 20	 mov	 rax, QWORD PTR value$[rbp-80]
$LN2@PyImport_C:

; 412  :         if (Py_VerboseFlag)

  00449	39 35 00 00 00
	00		 cmp	 DWORD PTR Py_VerboseFlag, esi
  0044f	74 10		 je	 SHORT $LN1@PyImport_C

; 413  :             PySys_WriteStderr("# cleanup builtins\n");

  00451	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@ONHJNLMD@?$CD?5cleanup?5builtins?6?$AA@
  00458	e8 00 00 00 00	 call	 PySys_WriteStderr
  0045d	48 8b 45 20	 mov	 rax, QWORD PTR value$[rbp-80]
$LN1@PyImport_C:

; 414  :         _PyModule_Clear(value);

  00461	48 8b c8	 mov	 rcx, rax
  00464	e8 00 00 00 00	 call	 _PyModule_Clear

; 415  :         PyDict_SetItemString(modules, "builtins", Py_None);

  00469	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00470	4d 8b c6	 mov	 r8, r14
  00473	48 8b cf	 mov	 rcx, rdi
  00476	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN3@PyImport_C:

; 416  :     }
; 417  : 
; 418  :     /* Finally, clear and delete the modules directory */
; 419  :     PyDict_Clear(modules);

  0047b	48 8b cf	 mov	 rcx, rdi
  0047e	e8 00 00 00 00	 call	 PyDict_Clear

; 420  :     interp->modules = NULL;

  00483	49 89 74 24 10	 mov	 QWORD PTR [r12+16], rsi

; 421  :     Py_DECREF(modules);

  00488	e8 00 00 00 00	 call	 _Py_PXCTX
  0048d	4c 8b 74 24 30	 mov	 r14, QWORD PTR [rsp+48]
  00492	4c 8b 6c 24 38	 mov	 r13, QWORD PTR [rsp+56]
  00497	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0049c	85 c0		 test	 eax, eax
  0049e	75 6a		 jne	 SHORT $LN57@PyImport_C
  004a0	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  004a4	a8 20		 test	 al, 32			; 00000020H
  004a6	75 5a		 jne	 SHORT $LN51@PyImport_C
  004a8	84 c0		 test	 al, al
  004aa	78 56		 js	 SHORT $LN51@PyImport_C
  004ac	a8 02		 test	 al, 2
  004ae	75 5a		 jne	 SHORT $LN57@PyImport_C
  004b0	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  004b4	75 54		 jne	 SHORT $LN57@PyImport_C
  004b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  004bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  004c4	4c 8b cf	 mov	 r9, rdi
  004c7	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  004cd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004d5	e8 00 00 00 00	 call	 _PyParallel_Guard
  004da	48 8b cf	 mov	 rcx, rdi
  004dd	85 c0		 test	 eax, eax
  004df	74 0e		 je	 SHORT $LN56@PyImport_C
  004e1	e8 00 00 00 00	 call	 _Px_Dealloc

; 422  : }

  004e6	48 83 c4 50	 add	 rsp, 80			; 00000050H
  004ea	41 5c		 pop	 r12
  004ec	5f		 pop	 rdi
  004ed	5d		 pop	 rbp
  004ee	c3		 ret	 0

; 421  :     Py_DECREF(modules);

$LN56@PyImport_C:
  004ef	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  004f3	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 422  : }

  004f9	48 83 c4 50	 add	 rsp, 80			; 00000050H
  004fd	41 5c		 pop	 r12
  004ff	5f		 pop	 rdi
  00500	5d		 pop	 rbp
  00501	c3		 ret	 0

; 421  :     Py_DECREF(modules);

$LN51@PyImport_C:
  00502	48 8b cf	 mov	 rcx, rdi
  00505	e8 00 00 00 00	 call	 Px_DecRef
$LN57@PyImport_C:

; 422  : }

  0050a	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0050e	41 5c		 pop	 r12
  00510	5f		 pop	 rdi
  00511	5d		 pop	 rbp
  00512	c3		 ret	 0
PyImport_Cleanup ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@PIDIPD@_RAW_MAGIC_NUMBER?$AA@		; `string'
PUBLIC	PyImport_GetMagicNumber
EXTRN	PyLong_AsLong:PROC
EXTRN	PyObject_GetAttrString:PROC
EXTRN	PyThreadState_Get:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_GetMagicNumber DD imagerel $LN4
	DD	imagerel $LN4+84
	DD	imagerel $unwind$PyImport_GetMagicNumber
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_GetMagicNumber DD 043801H
	DD	063438H
	DD	070023206H
xdata	ENDS
;	COMDAT ??_C@_0BC@PIDIPD@_RAW_MAGIC_NUMBER?$AA@
CONST	SEGMENT
??_C@_0BC@PIDIPD@_RAW_MAGIC_NUMBER?$AA@ DB '_RAW_MAGIC_NUMBER', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyImport_GetMagicNumber
_TEXT	SEGMENT
PyImport_GetMagicNumber PROC				; COMDAT

; 429  : {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 430  :     long res;
; 431  :     PyInterpreterState *interp = PyThreadState_Get()->interp;

  00006	e8 00 00 00 00	 call	 PyThreadState_Get

; 432  :     PyObject *pyc_magic = PyObject_GetAttrString(interp->importlib,
; 433  :                                                  "_RAW_MAGIC_NUMBER");

  0000b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@PIDIPD@_RAW_MAGIC_NUMBER?$AA@
  00012	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00016	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0001a	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0001f	48 8b f8	 mov	 rdi, rax

; 434  :     if (pyc_magic == NULL)

  00022	48 85 c0	 test	 rax, rax
  00025	75 09		 jne	 SHORT $LN1@PyImport_G@2

; 435  :         return -1;

  00027	83 c8 ff	 or	 eax, -1

; 439  : }

  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
$LN1@PyImport_G@2:

; 436  :     res = PyLong_AsLong(pyc_magic);

  00030	48 8b c8	 mov	 rcx, rax
  00033	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00038	e8 00 00 00 00	 call	 PyLong_AsLong

; 437  :     Py_DECREF(pyc_magic);

  0003d	48 8b cf	 mov	 rcx, rdi
  00040	8b d8		 mov	 ebx, eax
  00042	e8 00 00 00 00	 call	 _Py_DecRef

; 438  :     return res;

  00047	8b c3		 mov	 eax, ebx
  00049	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 439  : }

  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
PyImport_GetMagicNumber ENDP
_TEXT	ENDS
PUBLIC	PyImport_GetMagicTag
EXTRN	_PySys_ImplCacheTag:QWORD
; Function compile flags: /Ogtpy
;	COMDAT PyImport_GetMagicTag
_TEXT	SEGMENT
PyImport_GetMagicTag PROC				; COMDAT

; 447  :     return _PySys_ImplCacheTag;

  00000	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PySys_ImplCacheTag

; 448  : }

  00007	c3		 ret	 0
PyImport_GetMagicTag ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@KCIHGADO@_PyImport_FixupExtensionObject?$AA@ ; `string'
PUBLIC	_PyImport_FixupExtensionObject
EXTRN	PyDict_Copy:PROC
EXTRN	PyDict_DelItem:PROC
EXTRN	_PyState_AddModule:PROC
EXTRN	_PyErr_BadInternalCall:PROC
EXTRN	PyModule_GetDef:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImport_FixupExtensionObject DD imagerel $LN22
	DD	imagerel $LN22+97
	DD	imagerel $unwind$_PyImport_FixupExtensionObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyImport_FixupExtensionObject DD imagerel $LN22+97
	DD	imagerel $LN22+137
	DD	imagerel $chain$0$_PyImport_FixupExtensionObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PyImport_FixupExtensionObject DD imagerel $LN22+137
	DD	imagerel $LN22+202
	DD	imagerel $chain$1$_PyImport_FixupExtensionObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_PyImport_FixupExtensionObject DD imagerel $LN22+202
	DD	imagerel $LN22+224
	DD	imagerel $chain$2$_PyImport_FixupExtensionObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_PyImport_FixupExtensionObject DD imagerel $LN22+224
	DD	imagerel $LN22+356
	DD	imagerel $chain$4$_PyImport_FixupExtensionObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$_PyImport_FixupExtensionObject DD imagerel $LN22+356
	DD	imagerel $LN22+393
	DD	imagerel $chain$5$_PyImport_FixupExtensionObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$_PyImport_FixupExtensionObject DD 021H
	DD	imagerel $LN22
	DD	imagerel $LN22+97
	DD	imagerel $unwind$_PyImport_FixupExtensionObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_PyImport_FixupExtensionObject DD 040021H
	DD	095400H
	DD	083400H
	DD	imagerel $LN22
	DD	imagerel $LN22+97
	DD	imagerel $unwind$_PyImport_FixupExtensionObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_PyImport_FixupExtensionObject DD 021H
	DD	imagerel $LN22+97
	DD	imagerel $LN22+137
	DD	imagerel $chain$0$_PyImport_FixupExtensionObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PyImport_FixupExtensionObject DD 020521H
	DD	095405H
	DD	imagerel $LN22+97
	DD	imagerel $LN22+137
	DD	imagerel $chain$0$_PyImport_FixupExtensionObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyImport_FixupExtensionObject DD 020521H
	DD	083405H
	DD	imagerel $LN22
	DD	imagerel $LN22+97
	DD	imagerel $unwind$_PyImport_FixupExtensionObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_FixupExtensionObject DD 061001H
	DD	0b7410H
	DD	0a6410H
	DD	0c00c5210H
xdata	ENDS
;	COMDAT ??_C@_0BP@KCIHGADO@_PyImport_FixupExtensionObject?$AA@
CONST	SEGMENT
??_C@_0BP@KCIHGADO@_PyImport_FixupExtensionObject?$AA@ DB '_PyImport_Fixu'
	DB	'pExtensionObject', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyImport_FixupExtensionObject
_TEXT	SEGMENT
mod$ = 64
name$ = 72
filename$ = 80
_PyImport_FixupExtensionObject PROC			; COMDAT

; 470  : {

$LN22:
  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000a	41 54		 push	 r12
  0000c	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 471  :     PyObject *modules, *dict;
; 472  :     struct PyModuleDef *def;
; 473  :     if (extensions == NULL) {

  00010	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR extensions, 0
  00018	4d 8b e0	 mov	 r12, r8
  0001b	48 8b f2	 mov	 rsi, rdx
  0001e	48 8b f9	 mov	 rdi, rcx
  00021	75 15		 jne	 SHORT $LN14@PyImport_F@2

; 474  :         extensions = PyDict_New();

  00023	e8 00 00 00 00	 call	 PyDict_New
  00028	48 89 05 00 00
	00 00		 mov	 QWORD PTR extensions, rax

; 475  :         if (extensions == NULL)

  0002f	48 85 c0	 test	 rax, rax

; 476  :             return -1;

  00032	0f 84 3d 01 00
	00		 je	 $LN21@PyImport_F@2
$LN14@PyImport_F@2:

; 477  :     }
; 478  :     if (mod == NULL || !PyModule_Check(mod)) {

  00038	48 85 ff	 test	 rdi, rdi
  0003b	0f 84 23 01 00
	00		 je	 $LN12@PyImport_F@2
  00041	48 8b 4f 58	 mov	 rcx, QWORD PTR [rdi+88]
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  0004c	48 3b ca	 cmp	 rcx, rdx
  0004f	74 0d		 je	 SHORT $LN13@PyImport_F@2
  00051	e8 00 00 00 00	 call	 PyType_IsSubtype
  00056	85 c0		 test	 eax, eax
  00058	0f 84 06 01 00
	00		 je	 $LN12@PyImport_F@2
$LN13@PyImport_F@2:

; 480  :         return -1;
; 481  :     }
; 482  :     def = PyModule_GetDef(mod);

  0005e	48 8b cf	 mov	 rcx, rdi
  00061	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00066	e8 00 00 00 00	 call	 PyModule_GetDef
  0006b	48 8b d8	 mov	 rbx, rax

; 483  :     if (!def) {

  0006e	48 85 c0	 test	 rax, rax
  00071	75 16		 jne	 SHORT $LN11@PyImport_F@2

; 484  :         PyErr_BadInternalCall();

  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@FNMKEIOD@?4?4?2Python?2import?4c?$AA@
  0007a	ba e4 01 00 00	 mov	 edx, 484		; 000001e4H
  0007f	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 485  :         return -1;

  00084	83 c8 ff	 or	 eax, -1
  00087	eb 41		 jmp	 SHORT $LN18@PyImport_F@2
$LN11@PyImport_F@2:
  00089	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp

; 486  :     }
; 487  :     modules = PyImport_GetModuleDict();

  0008e	e8 00 00 00 00	 call	 PyImport_GetModuleDict

; 488  :     if (PyDict_SetItem(modules, name, mod) < 0)

  00093	4c 8b c7	 mov	 r8, rdi
  00096	48 8b c8	 mov	 rcx, rax
  00099	48 8b d6	 mov	 rdx, rsi
  0009c	48 8b e8	 mov	 rbp, rax
  0009f	e8 00 00 00 00	 call	 PyDict_SetItem
  000a4	85 c0		 test	 eax, eax

; 489  :         return -1;

  000a6	78 1a		 js	 SHORT $LN20@PyImport_F@2

; 490  :     if (_PyState_AddModule(mod, def) < 0) {

  000a8	48 8b d3	 mov	 rdx, rbx
  000ab	48 8b cf	 mov	 rcx, rdi
  000ae	e8 00 00 00 00	 call	 _PyState_AddModule
  000b3	85 c0		 test	 eax, eax
  000b5	79 29		 jns	 SHORT $LN9@PyImport_F@2

; 491  :         PyDict_DelItem(modules, name);

  000b7	48 8b d6	 mov	 rdx, rsi
  000ba	48 8b cd	 mov	 rcx, rbp
  000bd	e8 00 00 00 00	 call	 PyDict_DelItem
$LN20@PyImport_F@2:

; 492  :         return -1;

  000c2	83 c8 ff	 or	 eax, -1
$LN19@PyImport_F@2:
  000c5	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
$LN18@PyImport_F@2:
  000ca	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 510  : }

  000cf	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000d4	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  000d9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000dd	41 5c		 pop	 r12
  000df	c3		 ret	 0
$LN9@PyImport_F@2:

; 493  :     }
; 494  :     if (def->m_size == -1) {

  000e0	48 83 bb 90 00
	00 00 ff	 cmp	 QWORD PTR [rbx+144], -1
  000e8	75 61		 jne	 SHORT $LN1@PyImport_F@2

; 495  :         if (def->m_base.m_copy) {

  000ea	4c 8b 4b 70	 mov	 r9, QWORD PTR [rbx+112]
  000ee	4d 85 c9	 test	 r9, r9
  000f1	74 36		 je	 SHORT $LN4@PyImport_F@2

; 496  :             /* Somebody already imported the module,
; 497  :                likely under a different name.
; 498  :                XXX this should really not happen. */
; 499  :             Py_CLEAR(def->m_base.m_copy);

  000f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@FNMKEIOD@?4?4?2Python?2import?4c?$AA@
  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@KCIHGADO@_PyImport_FixupExtensionObject?$AA@
  00101	41 b8 f3 01 00
	00		 mov	 r8d, 499		; 000001f3H
  00107	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0010f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00114	85 c0		 test	 eax, eax
  00116	75 11		 jne	 SHORT $LN4@PyImport_F@2
  00118	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  0011c	48 c7 43 70 00
	00 00 00	 mov	 QWORD PTR [rbx+112], 0
  00124	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@PyImport_F@2:

; 500  :         }
; 501  :         dict = PyModule_GetDict(mod);

  00129	48 8b cf	 mov	 rcx, rdi
  0012c	e8 00 00 00 00	 call	 PyModule_GetDict

; 502  :         if (dict == NULL)

  00131	48 85 c0	 test	 rax, rax

; 503  :             return -1;

  00134	74 8c		 je	 SHORT $LN20@PyImport_F@2

; 504  :         def->m_base.m_copy = PyDict_Copy(dict);

  00136	48 8b c8	 mov	 rcx, rax
  00139	e8 00 00 00 00	 call	 PyDict_Copy
  0013e	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 505  :         if (def->m_base.m_copy == NULL)

  00142	48 85 c0	 test	 rax, rax

; 506  :             return -1;

  00145	0f 84 77 ff ff
	ff		 je	 $LN20@PyImport_F@2
$LN1@PyImport_F@2:

; 507  :     }
; 508  :     PyDict_SetItem(extensions, filename, (PyObject*)def);

  0014b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR extensions
  00152	4c 8b c3	 mov	 r8, rbx
  00155	49 8b d4	 mov	 rdx, r12
  00158	e8 00 00 00 00	 call	 PyDict_SetItem

; 509  :     return 0;

  0015d	33 c0		 xor	 eax, eax
  0015f	e9 61 ff ff ff	 jmp	 $LN19@PyImport_F@2
$LN12@PyImport_F@2:

; 479  :         PyErr_BadInternalCall();

  00164	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@FNMKEIOD@?4?4?2Python?2import?4c?$AA@
  0016b	ba df 01 00 00	 mov	 edx, 479		; 000001dfH
  00170	e8 00 00 00 00	 call	 _PyErr_BadInternalCall
$LN21@PyImport_F@2:

; 510  : }

  00175	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0017a	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0017f	83 c8 ff	 or	 eax, -1
  00182	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00186	41 5c		 pop	 r12
  00188	c3		 ret	 0
_PyImport_FixupExtensionObject ENDP
_TEXT	ENDS
PUBLIC	_PyImport_FixupBuiltin
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImport_FixupBuiltin DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$_PyImport_FixupBuiltin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_FixupBuiltin DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyImport_FixupBuiltin
_TEXT	SEGMENT
mod$ = 48
name$ = 56
_PyImport_FixupBuiltin PROC				; COMDAT

; 514  : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 515  :     int res;
; 516  :     PyObject *nameobj;
; 517  :     nameobj = PyUnicode_InternFromString(name);

  0000d	48 8b ca	 mov	 rcx, rdx
  00010	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00015	48 8b f8	 mov	 rdi, rax

; 518  :     if (nameobj == NULL)

  00018	48 85 c0	 test	 rax, rax
  0001b	75 0e		 jne	 SHORT $LN1@PyImport_F@3

; 519  :         return -1;

  0001d	83 c8 ff	 or	 eax, -1

; 523  : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN1@PyImport_F@3:

; 520  :     res = _PyImport_FixupExtensionObject(mod, nameobj, nameobj);

  0002b	4c 8b c0	 mov	 r8, rax
  0002e	48 8b d0	 mov	 rdx, rax
  00031	48 8b cb	 mov	 rcx, rbx
  00034	e8 00 00 00 00	 call	 _PyImport_FixupExtensionObject

; 521  :     Py_DECREF(nameobj);

  00039	48 8b cf	 mov	 rcx, rdi
  0003c	8b d8		 mov	 ebx, eax
  0003e	e8 00 00 00 00	 call	 _Py_DecRef

; 522  :     return res;

  00043	8b c3		 mov	 eax, ebx

; 523  : }

  00045	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5f		 pop	 rdi
  0004f	c3		 ret	 0
_PyImport_FixupBuiltin ENDP
_TEXT	ENDS
PUBLIC	PyImport_AddModuleObject
EXTRN	PyModule_NewObject:PROC
EXTRN	PyDict_GetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_AddModuleObject DD imagerel $LN8
	DD	imagerel $LN8+154
	DD	imagerel $unwind$PyImport_AddModuleObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_AddModuleObject DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyImport_AddModuleObject
_TEXT	SEGMENT
name$ = 48
PyImport_AddModuleObject PROC				; COMDAT

; 592  : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f9	 mov	 rdi, rcx

; 593  :     PyObject *modules = PyImport_GetModuleDict();

  00012	e8 00 00 00 00	 call	 PyImport_GetModuleDict

; 594  :     PyObject *m;
; 595  : 
; 596  :     if ((m = PyDict_GetItem(modules, name)) != NULL &&
; 597  :         PyModule_Check(m))

  00017	48 8b d7	 mov	 rdx, rdi
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	48 8b f0	 mov	 rsi, rax
  00020	e8 00 00 00 00	 call	 PyDict_GetItem
  00025	48 8b d8	 mov	 rbx, rax
  00028	48 85 c0	 test	 rax, rax
  0002b	74 19		 je	 SHORT $LN4@PyImport_A@2
  0002d	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00038	48 3b ca	 cmp	 rcx, rdx
  0003b	74 4a		 je	 SHORT $LN3@PyImport_A@2
  0003d	e8 00 00 00 00	 call	 PyType_IsSubtype
  00042	85 c0		 test	 eax, eax

; 598  :         return m;

  00044	75 41		 jne	 SHORT $LN3@PyImport_A@2
$LN4@PyImport_A@2:

; 599  :     m = PyModule_NewObject(name);

  00046	48 8b cf	 mov	 rcx, rdi
  00049	e8 00 00 00 00	 call	 PyModule_NewObject
  0004e	48 8b d8	 mov	 rbx, rax

; 600  :     if (m == NULL)

  00051	48 85 c0	 test	 rax, rax

; 601  :         return NULL;

  00054	74 1a		 je	 SHORT $LN7@PyImport_A@2

; 602  :     if (PyDict_SetItem(modules, name, m) != 0) {

  00056	4c 8b c0	 mov	 r8, rax
  00059	48 8b d7	 mov	 rdx, rdi
  0005c	48 8b ce	 mov	 rcx, rsi
  0005f	e8 00 00 00 00	 call	 PyDict_SetItem

; 603  :         Py_DECREF(m);

  00064	48 8b cb	 mov	 rcx, rbx
  00067	85 c0		 test	 eax, eax
  00069	74 17		 je	 SHORT $LN1@PyImport_A@2
  0006b	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@PyImport_A@2:

; 604  :         return NULL;

  00070	33 c0		 xor	 eax, eax

; 607  : 
; 608  :     return m;
; 609  : }

  00072	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00077	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0007c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00080	5f		 pop	 rdi
  00081	c3		 ret	 0
$LN1@PyImport_A@2:

; 605  :     }
; 606  :     Py_DECREF(m); /* Yes, it still exists, in modules! */

  00082	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyImport_A@2:

; 607  : 
; 608  :     return m;
; 609  : }

  00087	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0008c	48 8b c3	 mov	 rax, rbx
  0008f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00094	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00098	5f		 pop	 rdi
  00099	c3		 ret	 0
PyImport_AddModuleObject ENDP
_TEXT	ENDS
PUBLIC	PyImport_AddModule
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_AddModule DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$PyImport_AddModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_AddModule DD 042101H
	DD	063421H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyImport_AddModule
_TEXT	SEGMENT
name$ = 48
PyImport_AddModule PROC					; COMDAT

; 613  : {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 614  :     PyObject *nameobj, *module;
; 615  :     nameobj = PyUnicode_FromString(name);

  00006	e8 00 00 00 00	 call	 PyUnicode_FromString
  0000b	48 8b f8	 mov	 rdi, rax

; 616  :     if (nameobj == NULL)

  0000e	48 85 c0	 test	 rax, rax
  00011	75 06		 jne	 SHORT $LN1@PyImport_A@3

; 621  : }

  00013	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00017	5f		 pop	 rdi
  00018	c3		 ret	 0
$LN1@PyImport_A@3:

; 617  :         return NULL;
; 618  :     module = PyImport_AddModuleObject(nameobj);

  00019	48 8b c8	 mov	 rcx, rax
  0001c	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00021	e8 00 00 00 00	 call	 PyImport_AddModuleObject

; 619  :     Py_DECREF(nameobj);

  00026	48 8b cf	 mov	 rcx, rdi
  00029	48 8b d8	 mov	 rbx, rax
  0002c	e8 00 00 00 00	 call	 _Py_DecRef

; 620  :     return module;

  00031	48 8b c3	 mov	 rax, rbx
  00034	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 621  : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
PyImport_AddModule ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@CAIFCDP@import?3?5?5deleting?5existing?5key?5i@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$remove_module DD imagerel remove_module
	DD	imagerel remove_module+75
	DD	imagerel $unwind$remove_module
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$remove_module DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0DE@CAIFCDP@import?3?5?5deleting?5existing?5key?5i@
CONST	SEGMENT
??_C@_0DE@CAIFCDP@import?3?5?5deleting?5existing?5key?5i@ DB 'import:  de'
	DB	'leting existing key insys.modules failed', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT remove_module
_TEXT	SEGMENT
name$ = 48
remove_module PROC					; COMDAT

; 627  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 628  :     PyObject *modules = PyImport_GetModuleDict();

  0000d	e8 00 00 00 00	 call	 PyImport_GetModuleDict

; 629  :     if (PyDict_GetItem(modules, name) == NULL)

  00012	48 8b d3	 mov	 rdx, rbx
  00015	48 8b c8	 mov	 rcx, rax
  00018	48 8b f8	 mov	 rdi, rax
  0001b	e8 00 00 00 00	 call	 PyDict_GetItem
  00020	48 85 c0	 test	 rax, rax
  00023	74 1b		 je	 SHORT $LN1@remove_mod

; 630  :         return;
; 631  :     if (PyDict_DelItem(modules, name) < 0)

  00025	48 8b d3	 mov	 rdx, rbx
  00028	48 8b cf	 mov	 rcx, rdi
  0002b	e8 00 00 00 00	 call	 PyDict_DelItem
  00030	85 c0		 test	 eax, eax
  00032	79 0c		 jns	 SHORT $LN1@remove_mod

; 632  :         Py_FatalError("import:  deleting existing key in"
; 633  :                       "sys.modules failed");

  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DE@CAIFCDP@import?3?5?5deleting?5existing?5key?5i@
  0003b	e8 00 00 00 00	 call	 Py_FatalError
$LN1@remove_mod:

; 634  : }

  00040	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00045	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00049	5f		 pop	 rdi
  0004a	c3		 ret	 0
remove_module ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@DLABBGBK@Loaded?5module?5?$CFR?5not?5found?5in?5sy@ ; `string'
PUBLIC	??_C@_0L@KPCCMMEA@__cached__?$AA@		; `string'
PUBLIC	??_C@_08PFHPBGLK@__file__?$AA@			; `string'
PUBLIC	??_C@_0N@MNFFDJII@__builtins__?$AA@		; `string'
PUBLIC	PyImport_ExecCodeModuleObject
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_ImportError:QWORD
EXTRN	PyEval_EvalCode:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyEval_GetBuiltins:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyImport_ExecCodeModuleObject DD imagerel $LN19
	DD	imagerel $LN19+59
	DD	imagerel $unwind$PyImport_ExecCodeModuleObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyImport_ExecCodeModuleObject DD imagerel $LN19+59
	DD	imagerel $LN19+367
	DD	imagerel $chain$0$PyImport_ExecCodeModuleObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyImport_ExecCodeModuleObject DD imagerel $LN19+367
	DD	imagerel $LN19+387
	DD	imagerel $chain$1$PyImport_ExecCodeModuleObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyImport_ExecCodeModuleObject DD 021H
	DD	imagerel $LN19
	DD	imagerel $LN19+59
	DD	imagerel $unwind$PyImport_ExecCodeModuleObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyImport_ExecCodeModuleObject DD 020521H
	DD	0a6405H
	DD	imagerel $LN19
	DD	imagerel $LN19+59
	DD	imagerel $unwind$PyImport_ExecCodeModuleObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ExecCodeModuleObject DD 081301H
	DD	0c5413H
	DD	0b3413H
	DD	0d00f5213H
	DD	0700bc00dH
xdata	ENDS
;	COMDAT ??_C@_0CK@DLABBGBK@Loaded?5module?5?$CFR?5not?5found?5in?5sy@
CONST	SEGMENT
??_C@_0CK@DLABBGBK@Loaded?5module?5?$CFR?5not?5found?5in?5sy@ DB 'Loaded '
	DB	'module %R not found in sys.modules', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KPCCMMEA@__cached__?$AA@
CONST	SEGMENT
??_C@_0L@KPCCMMEA@__cached__?$AA@ DB '__cached__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PFHPBGLK@__file__?$AA@
CONST	SEGMENT
??_C@_08PFHPBGLK@__file__?$AA@ DB '__file__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MNFFDJII@__builtins__?$AA@
CONST	SEGMENT
??_C@_0N@MNFFDJII@__builtins__?$AA@ DB '__builtins__', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
CONST	ENDS
;	COMDAT PyImport_ExecCodeModuleObject
_TEXT	SEGMENT
name$ = 80
co$ = 88
pathname$ = 96
cpathname$ = 104
PyImport_ExecCodeModuleObject PROC			; COMDAT

; 714  : {

$LN19:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	57		 push	 rdi
  0000b	41 54		 push	 r12
  0000d	41 55		 push	 r13
  0000f	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00013	4d 8b e9	 mov	 r13, r9
  00016	49 8b d8	 mov	 rbx, r8
  00019	48 8b ea	 mov	 rbp, rdx
  0001c	48 8b f9	 mov	 rdi, rcx

; 715  :     PyObject *modules = PyImport_GetModuleDict();

  0001f	e8 00 00 00 00	 call	 PyImport_GetModuleDict

; 716  :     PyObject *m, *d, *v;
; 717  : 
; 718  :     m = PyImport_AddModuleObject(name);

  00024	48 8b cf	 mov	 rcx, rdi
  00027	4c 8b e0	 mov	 r12, rax
  0002a	e8 00 00 00 00	 call	 PyImport_AddModuleObject

; 719  :     if (m == NULL)

  0002f	48 85 c0	 test	 rax, rax
  00032	0f 84 37 01 00
	00		 je	 $LN12@PyImport_E
$LN11@PyImport_E:

; 720  :         return NULL;
; 721  :     /* If the module is being reloaded, we get the old module back
; 722  :        and re-use its dict to exec the new code. */
; 723  :     d = PyModule_GetDict(m);

  00038	48 8b c8	 mov	 rcx, rax
  0003b	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  00040	e8 00 00 00 00	 call	 PyModule_GetDict

; 724  :     if (PyDict_GetItemString(d, "__builtins__") == NULL) {

  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	48 8b f0	 mov	 rsi, rax
  00052	e8 00 00 00 00	 call	 PyDict_GetItemString
  00057	48 85 c0	 test	 rax, rax
  0005a	75 1f		 jne	 SHORT $LN9@PyImport_E

; 725  :         if (PyDict_SetItemString(d, "__builtins__",
; 726  :                                  PyEval_GetBuiltins()) != 0)

  0005c	e8 00 00 00 00	 call	 PyEval_GetBuiltins
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  00068	48 8b ce	 mov	 rcx, rsi
  0006b	4c 8b c0	 mov	 r8, rax
  0006e	e8 00 00 00 00	 call	 PyDict_SetItemString
  00073	85 c0		 test	 eax, eax
  00075	0f 85 a3 00 00
	00		 jne	 $error$122164
$LN9@PyImport_E:

; 727  :             goto error;
; 728  :     }
; 729  :     if (pathname != NULL) {

  0007b	48 85 db	 test	 rbx, rbx
  0007e	75 07		 jne	 SHORT $LN7@PyImport_E

; 730  :         v = pathname;
; 731  :     }
; 732  :     else {
; 733  :         v = ((PyCodeObject *)co)->co_filename;

  00080	48 8b 9d b0 00
	00 00		 mov	 rbx, QWORD PTR [rbp+176]
$LN7@PyImport_E:

; 734  :     }
; 735  :     Py_INCREF(v);

  00087	e8 00 00 00 00	 call	 _Py_PXCTX
  0008c	85 c0		 test	 eax, eax
  0008e	75 32		 jne	 SHORT $LN15@PyImport_E
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0009e	4c 8b cb	 mov	 r9, rbx
  000a1	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a7	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000af	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b4	85 c0		 test	 eax, eax
  000b6	75 06		 jne	 SHORT $LN14@PyImport_E
  000b8	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000bc	74 04		 je	 SHORT $LN15@PyImport_E
$LN14@PyImport_E:
  000be	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN15@PyImport_E:

; 736  :     if (PyDict_SetItemString(d, "__file__", v) != 0)

  000c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PFHPBGLK@__file__?$AA@
  000c9	4c 8b c3	 mov	 r8, rbx
  000cc	48 8b ce	 mov	 rcx, rsi
  000cf	e8 00 00 00 00	 call	 PyDict_SetItemString
  000d4	85 c0		 test	 eax, eax
  000d6	74 05		 je	 SHORT $LN6@PyImport_E

; 737  :         PyErr_Clear(); /* Not important enough to report */

  000d8	e8 00 00 00 00	 call	 PyErr_Clear
$LN6@PyImport_E:

; 738  :     Py_DECREF(v);

  000dd	48 8b cb	 mov	 rcx, rbx
  000e0	e8 00 00 00 00	 call	 _Py_DecRef

; 739  : 
; 740  :     /* Remember the pyc path name as the __cached__ attribute. */
; 741  :     if (cpathname != NULL)

  000e5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  000ec	4d 85 ed	 test	 r13, r13

; 742  :         v = cpathname;
; 743  :     else
; 744  :         v = Py_None;
; 745  :     if (PyDict_SetItemString(d, "__cached__", v) != 0)

  000ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@KPCCMMEA@__cached__?$AA@
  000f6	48 8b ce	 mov	 rcx, rsi
  000f9	4d 0f 45 c5	 cmovne	 r8, r13
  000fd	e8 00 00 00 00	 call	 PyDict_SetItemString
  00102	85 c0		 test	 eax, eax
  00104	74 05		 je	 SHORT $LN3@PyImport_E

; 746  :         PyErr_Clear(); /* Not important enough to report */

  00106	e8 00 00 00 00	 call	 PyErr_Clear
$LN3@PyImport_E:

; 747  : 
; 748  :     v = PyEval_EvalCode(co, d, d);

  0010b	4c 8b c6	 mov	 r8, rsi
  0010e	48 8b d6	 mov	 rdx, rsi
  00111	48 8b cd	 mov	 rcx, rbp
  00114	e8 00 00 00 00	 call	 PyEval_EvalCode

; 749  :     if (v == NULL)

  00119	48 85 c0	 test	 rax, rax
  0011c	75 0c		 jne	 SHORT $LN2@PyImport_E
$error$122164:

; 763  : 
; 764  :   error:
; 765  :     remove_module(name);

  0011e	48 8b cf	 mov	 rcx, rdi
  00121	e8 00 00 00 00	 call	 remove_module

; 766  :     return NULL;

  00126	33 c0		 xor	 eax, eax
  00128	eb 40		 jmp	 SHORT $LN18@PyImport_E
$LN2@PyImport_E:

; 750  :         goto error;
; 751  :     Py_DECREF(v);

  0012a	48 8b c8	 mov	 rcx, rax
  0012d	e8 00 00 00 00	 call	 _Py_DecRef

; 752  : 
; 753  :     if ((m = PyDict_GetItem(modules, name)) == NULL) {

  00132	48 8b d7	 mov	 rdx, rdi
  00135	49 8b cc	 mov	 rcx, r12
  00138	e8 00 00 00 00	 call	 PyDict_GetItem
  0013d	48 8b d8	 mov	 rbx, rax
  00140	48 85 c0	 test	 rax, rax
  00143	75 1a		 jne	 SHORT $LN1@PyImport_E

; 754  :         PyErr_Format(PyExc_ImportError,
; 755  :                      "Loaded module %R not found in sys.modules",
; 756  :                      name);

  00145	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  0014c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@DLABBGBK@Loaded?5module?5?$CFR?5not?5found?5in?5sy@
  00153	4c 8b c7	 mov	 r8, rdi
  00156	e8 00 00 00 00	 call	 PyErr_Format

; 757  :         return NULL;

  0015b	33 c0		 xor	 eax, eax
  0015d	eb 0b		 jmp	 SHORT $LN18@PyImport_E
$LN1@PyImport_E:

; 758  :     }
; 759  : 
; 760  :     Py_INCREF(m);

  0015f	48 8b c8	 mov	 rcx, rax
  00162	e8 00 00 00 00	 call	 _Py_IncRef

; 761  : 
; 762  :     return m;

  00167	48 8b c3	 mov	 rax, rbx
$LN18@PyImport_E:
  0016a	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
$LN12@PyImport_E:

; 767  : }

  0016f	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00174	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  00179	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0017d	41 5d		 pop	 r13
  0017f	41 5c		 pop	 r12
  00181	5f		 pop	 rdi
  00182	c3		 ret	 0
PyImport_ExecCodeModuleObject ENDP
_TEXT	ENDS
EXTRN	PyCode_Type:BYTE
EXTRN	PyUnicode_Compare:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$update_code_filenames DD imagerel update_code_filenames
	DD	imagerel update_code_filenames+44
	DD	imagerel $unwind$update_code_filenames
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$update_code_filenames DD imagerel update_code_filenames+44
	DD	imagerel update_code_filenames+201
	DD	imagerel $chain$0$update_code_filenames
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$update_code_filenames DD imagerel update_code_filenames+201
	DD	imagerel update_code_filenames+217
	DD	imagerel $chain$1$update_code_filenames
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$update_code_filenames DD 021H
	DD	imagerel update_code_filenames
	DD	imagerel update_code_filenames+44
	DD	imagerel $unwind$update_code_filenames
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$update_code_filenames DD 020521H
	DD	087405H
	DD	imagerel update_code_filenames
	DD	imagerel update_code_filenames+44
	DD	imagerel $unwind$update_code_filenames
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_code_filenames DD 060f01H
	DD	0a540fH
	DD	09340fH
	DD	0600b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
xdata	ENDS
;	COMDAT update_code_filenames
_TEXT	SEGMENT
co$ = 64
oldname$ = 72
newname$ = 80
update_code_filenames PROC				; COMDAT

; 772  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b d9	 mov	 rbx, rcx

; 773  :     PyObject *constants, *tmp;
; 774  :     Py_ssize_t i, n;
; 775  : 
; 776  :     if (PyUnicode_Compare(co->co_filename, oldname))

  00012	48 8b 89 b0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+176]
  00019	49 8b f0	 mov	 rsi, r8
  0001c	48 8b ea	 mov	 rbp, rdx
  0001f	e8 00 00 00 00	 call	 PyUnicode_Compare
  00024	85 c0		 test	 eax, eax
  00026	0f 85 9d 00 00
	00		 jne	 $LN2@update_cod

; 777  :         return;
; 778  : 
; 779  :     tmp = co->co_filename;

  0002c	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00031	48 8b bb b0 00
	00 00		 mov	 rdi, QWORD PTR [rbx+176]

; 780  :     co->co_filename = newname;

  00038	48 89 b3 b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rsi

; 781  :     Py_INCREF(co->co_filename);

  0003f	e8 00 00 00 00	 call	 _Py_PXCTX
  00044	85 c0		 test	 eax, eax
  00046	75 32		 jne	 SHORT $LN9@update_cod
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00056	4c 8b ce	 mov	 r9, rsi
  00059	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00067	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006c	85 c0		 test	 eax, eax
  0006e	75 06		 jne	 SHORT $LN8@update_cod
  00070	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  00074	74 04		 je	 SHORT $LN9@update_cod
$LN8@update_cod:
  00076	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN9@update_cod:

; 782  :     Py_DECREF(tmp);

  0007a	48 8b cf	 mov	 rcx, rdi
  0007d	e8 00 00 00 00	 call	 _Py_DecRef

; 783  : 
; 784  :     constants = co->co_consts;

  00082	48 8b 9b 80 00
	00 00		 mov	 rbx, QWORD PTR [rbx+128]

; 785  :     n = PyTuple_GET_SIZE(constants);

  00089	48 8b 7b 60	 mov	 rdi, QWORD PTR [rbx+96]

; 786  :     for (i = 0; i < n; i++) {

  0008d	48 85 ff	 test	 rdi, rdi
  00090	7e 32		 jle	 SHORT $LN14@update_cod

; 782  :     Py_DECREF(tmp);

  00092	48 83 c3 70	 add	 rbx, 112		; 00000070H
  00096	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  0009d	0f 1f 00	 npad	 3
$LL4@update_cod:

; 787  :         tmp = PyTuple_GET_ITEM(constants, i);

  000a0	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]

; 788  :         if (PyCode_Check(tmp))

  000a3	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000a7	75 12		 jne	 SHORT $LN3@update_cod

; 789  :             update_code_filenames((PyCodeObject *)tmp,
; 790  :                                   oldname, newname);

  000a9	4c 8b c6	 mov	 r8, rsi
  000ac	48 8b d5	 mov	 rdx, rbp
  000af	e8 00 00 00 00	 call	 update_code_filenames
  000b4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
$LN3@update_cod:

; 786  :     for (i = 0; i < n; i++) {

  000bb	48 83 c3 08	 add	 rbx, 8
  000bf	48 ff cf	 dec	 rdi
  000c2	75 dc		 jne	 SHORT $LL4@update_cod
$LN14@update_cod:
  000c4	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN2@update_cod:

; 791  :     }
; 792  : }

  000c9	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000ce	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000d3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d7	5e		 pop	 rsi
  000d8	c3		 ret	 0
update_code_filenames ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$update_compiled_module DD imagerel update_compiled_module
	DD	imagerel update_compiled_module+32
	DD	imagerel $unwind$update_compiled_module
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$update_compiled_module DD imagerel update_compiled_module+32
	DD	imagerel update_compiled_module+130
	DD	imagerel $chain$0$update_compiled_module
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$update_compiled_module DD imagerel update_compiled_module+130
	DD	imagerel update_compiled_module+141
	DD	imagerel $chain$1$update_compiled_module
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$update_compiled_module DD 021H
	DD	imagerel update_compiled_module
	DD	imagerel update_compiled_module+32
	DD	imagerel $unwind$update_compiled_module
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$update_compiled_module DD 020521H
	DD	083405H
	DD	imagerel update_compiled_module
	DD	imagerel update_compiled_module+32
	DD	imagerel $unwind$update_compiled_module
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_compiled_module DD 040a01H
	DD	09640aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
xdata	ENDS
;	COMDAT update_compiled_module
_TEXT	SEGMENT
co$ = 64
newname$ = 72
update_compiled_module PROC				; COMDAT

; 796  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 797  :     PyObject *oldname;
; 798  : 
; 799  :     if (PyUnicode_Compare(co->co_filename, newname) == 0)

  0000d	48 8b 89 b0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+176]
  00014	48 8b f2	 mov	 rsi, rdx
  00017	e8 00 00 00 00	 call	 PyUnicode_Compare
  0001c	85 c0		 test	 eax, eax
  0001e	74 62		 je	 SHORT $LN2@update_com

; 800  :         return;
; 801  : 
; 802  :     oldname = co->co_filename;

  00020	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00025	48 8b 9f b0 00
	00 00		 mov	 rbx, QWORD PTR [rdi+176]

; 803  :     Py_INCREF(oldname);

  0002c	e8 00 00 00 00	 call	 _Py_PXCTX
  00031	85 c0		 test	 eax, eax
  00033	75 32		 jne	 SHORT $LN5@update_com
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00043	4c 8b cb	 mov	 r9, rbx
  00046	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0004c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	75 06		 jne	 SHORT $LN4@update_com
  0005d	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00061	74 04		 je	 SHORT $LN5@update_com
$LN4@update_com:
  00063	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN5@update_com:

; 804  :     update_code_filenames(co, oldname, newname);

  00067	4c 8b c6	 mov	 r8, rsi
  0006a	48 8b d3	 mov	 rdx, rbx
  0006d	48 8b cf	 mov	 rcx, rdi
  00070	e8 00 00 00 00	 call	 update_code_filenames

; 805  :     Py_DECREF(oldname);

  00075	48 8b cb	 mov	 rcx, rbx
  00078	e8 00 00 00 00	 call	 _Py_DecRef
  0007d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN2@update_com:

; 806  : }

  00082	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00087	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008b	5f		 pop	 rdi
  0008c	c3		 ret	 0
update_compiled_module ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@LEMEMCMD@second?5argument?5must?5be?5a?5string@ ; `string'
PUBLIC	??_C@_0CF@FOIIOMOP@first?5argument?5must?5be?5a?5code?5ob@ ; `string'
PUBLIC	??_C@_0BE@COGPLNFO@OO?3_fix_co_filename?$AA@	; `string'
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$imp_fix_co_filename DD imagerel imp_fix_co_filename
	DD	imagerel imp_fix_co_filename+210
	DD	imagerel $unwind$imp_fix_co_filename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_fix_co_filename DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0CB@LEMEMCMD@second?5argument?5must?5be?5a?5string@
CONST	SEGMENT
??_C@_0CB@LEMEMCMD@second?5argument?5must?5be?5a?5string@ DB 'second argu'
	DB	'ment must be a string', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FOIIOMOP@first?5argument?5must?5be?5a?5code?5ob@
CONST	SEGMENT
??_C@_0CF@FOIIOMOP@first?5argument?5must?5be?5a?5code?5ob@ DB 'first argu'
	DB	'ment must be a code object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@COGPLNFO@OO?3_fix_co_filename?$AA@
CONST	SEGMENT
??_C@_0BE@COGPLNFO@OO?3_fix_co_filename?$AA@ DB 'OO:_fix_co_filename', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
CONST	ENDS
;	COMDAT imp_fix_co_filename
_TEXT	SEGMENT
self$ = 64
args$ = 72
co$ = 80
file_path$ = 88
imp_fix_co_filename PROC				; COMDAT

; 810  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 811  :     PyObject *co;
; 812  :     PyObject *file_path;
; 813  : 
; 814  :     if (!PyArg_ParseTuple(args, "OO:_fix_co_filename", &co, &file_path))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 58	 lea	 r9, QWORD PTR file_path$[rsp]
  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR co$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@COGPLNFO@OO?3_fix_co_filename?$AA@
  00018	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001d	85 c0		 test	 eax, eax

; 815  :         return NULL;

  0001f	74 25		 je	 SHORT $LN10@imp_fix_co

; 816  : 
; 817  :     if (!PyCode_Check(co)) {

  00021	48 8b 4c 24 50	 mov	 rcx, QWORD PTR co$[rsp]
  00026	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  0002d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00031	74 1a		 je	 SHORT $LN2@imp_fix_co

; 818  :         PyErr_SetString(PyExc_TypeError,
; 819  :                         "first argument must be a code object");

  00033	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@FOIIOMOP@first?5argument?5must?5be?5a?5code?5ob@
  00041	e8 00 00 00 00	 call	 PyErr_SetString
$LN10@imp_fix_co:

; 820  :         return NULL;

  00046	33 c0		 xor	 eax, eax

; 832  : }

  00048	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004c	c3		 ret	 0
$LN2@imp_fix_co:

; 821  :     }
; 822  : 
; 823  :     if (!PyUnicode_Check(file_path)) {

  0004d	48 8b 54 24 58	 mov	 rdx, QWORD PTR file_path$[rsp]
  00052	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00056	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00060	75 1a		 jne	 SHORT $LN1@imp_fix_co

; 824  :         PyErr_SetString(PyExc_TypeError,
; 825  :                         "second argument must be a string");

  00062	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@LEMEMCMD@second?5argument?5must?5be?5a?5string@
  00070	e8 00 00 00 00	 call	 PyErr_SetString

; 826  :         return NULL;

  00075	33 c0		 xor	 eax, eax

; 832  : }

  00077	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007b	c3		 ret	 0
$LN1@imp_fix_co:

; 827  :     }
; 828  : 
; 829  :     update_compiled_module((PyCodeObject*)co, file_path);

  0007c	e8 00 00 00 00	 call	 update_compiled_module

; 830  : 
; 831  :     Py_RETURN_NONE;

  00081	e8 00 00 00 00	 call	 _Py_PXCTX
  00086	85 c0		 test	 eax, eax
  00088	75 3c		 jne	 SHORT $LN7@imp_fix_co
  0008a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0009f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a5	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000ad	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b2	85 c0		 test	 eax, eax
  000b4	75 09		 jne	 SHORT $LN6@imp_fix_co
  000b6	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000bd	74 07		 je	 SHORT $LN7@imp_fix_co
$LN6@imp_fix_co:
  000bf	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@imp_fix_co:
  000c6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 832  : }

  000cd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d1	c3		 ret	 0
imp_fix_co_filename ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$is_builtin DD imagerel is_builtin
	DD	imagerel is_builtin+144
	DD	imagerel $unwind$is_builtin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$is_builtin DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT is_builtin
_TEXT	SEGMENT
name$ = 48
is_builtin PROC						; COMDAT

; 843  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 844  :     int i, cmp;
; 845  :     for (i = 0; PyImport_Inittab[i].name != NULL; i++) {

  0000f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyImport_Inittab
  00016	33 ff		 xor	 edi, edi
  00018	48 8b f1	 mov	 rsi, rcx
  0001b	8b df		 mov	 ebx, edi
  0001d	48 39 1a	 cmp	 QWORD PTR [rdx], rbx
  00020	74 2c		 je	 SHORT $LN4@is_builtin
  00022	8b c7		 mov	 eax, edi
$LL6@is_builtin:

; 846  :         cmp = PyUnicode_CompareWithASCIIString(name, PyImport_Inittab[i].name);

  00024	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00028	48 8b ce	 mov	 rcx, rsi
  0002b	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString

; 847  :         if (cmp == 0) {

  00030	85 c0		 test	 eax, eax
  00032	74 2c		 je	 SHORT $LN10@is_builtin

; 844  :     int i, cmp;
; 845  :     for (i = 0; PyImport_Inittab[i].name != NULL; i++) {

  00034	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyImport_Inittab
  0003b	48 ff c3	 inc	 rbx
  0003e	ff c7		 inc	 edi
  00040	48 8b c3	 mov	 rax, rbx
  00043	48 c1 e0 04	 shl	 rax, 4
  00047	48 83 3c 10 00	 cmp	 QWORD PTR [rax+rdx], 0
  0004c	75 d6		 jne	 SHORT $LL6@is_builtin
$LN4@is_builtin:

; 849  :                 return -1;
; 850  :             else
; 851  :                 return 1;
; 852  :         }
; 853  :     }
; 854  :     return 0;

  0004e	33 c0		 xor	 eax, eax

; 855  : }

  00050	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00055	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005e	5f		 pop	 rdi
  0005f	c3		 ret	 0
$LN10@is_builtin:

; 848  :             if (PyImport_Inittab[i].initfunc == NULL)

  00060	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyImport_Inittab

; 855  : }

  00067	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00071	41 83 c8 ff	 or	 r8d, -1
  00075	48 63 d7	 movsxd	 rdx, edi
  00078	b8 01 00 00 00	 mov	 eax, 1
  0007d	48 03 d2	 add	 rdx, rdx
  00080	48 83 7c d1 08
	00		 cmp	 QWORD PTR [rcx+rdx*8+8], 0
  00086	41 0f 44 c0	 cmove	 eax, r8d
  0008a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008e	5f		 pop	 rdi
  0008f	c3		 ret	 0
is_builtin ENDP
_TEXT	ENDS
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	PyList_GetItem:PROC
EXTRN	PyList_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_path_importer DD imagerel get_path_importer
	DD	imagerel get_path_importer+98
	DD	imagerel $unwind$get_path_importer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$get_path_importer DD imagerel get_path_importer+98
	DD	imagerel get_path_importer+217
	DD	imagerel $chain$2$get_path_importer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$get_path_importer DD imagerel get_path_importer+217
	DD	imagerel get_path_importer+232
	DD	imagerel $chain$3$get_path_importer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$get_path_importer DD imagerel get_path_importer+232
	DD	imagerel get_path_importer+271
	DD	imagerel $chain$4$get_path_importer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$get_path_importer DD 060021H
	DD	0ae400H
	DD	096400H
	DD	083400H
	DD	imagerel get_path_importer
	DD	imagerel get_path_importer+98
	DD	imagerel $unwind$get_path_importer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$get_path_importer DD 021H
	DD	imagerel get_path_importer
	DD	imagerel get_path_importer+98
	DD	imagerel $unwind$get_path_importer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$get_path_importer DD 060f21H
	DD	0ae40fH
	DD	09640aH
	DD	083405H
	DD	imagerel get_path_importer
	DD	imagerel get_path_importer+98
	DD	imagerel $unwind$get_path_importer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_path_importer DD 060e01H
	DD	0b540eH
	DD	0d00a320eH
	DD	07006c008H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT get_path_importer
_TEXT	SEGMENT
path_importer_cache$ = 64
path_hooks$ = 72
p$ = 80
get_path_importer PROC					; COMDAT

; 869  : {

  00000	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00005	57		 push	 rdi
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	4c 8b e9	 mov	 r13, rcx

; 870  :     PyObject *importer;
; 871  :     Py_ssize_t j, nhooks;
; 872  : 
; 873  :     /* These conditions are the caller's responsibility: */
; 874  :     assert(PyList_Check(path_hooks));
; 875  :     assert(PyDict_Check(path_importer_cache));
; 876  : 
; 877  :     nhooks = PyList_Size(path_hooks);

  00011	48 8b ca	 mov	 rcx, rdx
  00014	49 8b e8	 mov	 rbp, r8
  00017	4c 8b e2	 mov	 r12, rdx
  0001a	e8 00 00 00 00	 call	 PyList_Size
  0001f	48 8b f8	 mov	 rdi, rax

; 878  :     if (nhooks < 0)

  00022	48 85 c0	 test	 rax, rax
  00025	79 11		 jns	 SHORT $LN12@get_path_i
$LN25@get_path_i:

; 879  :         return NULL; /* Shouldn't happen */

  00027	33 c0		 xor	 eax, eax

; 909  :             return NULL;
; 910  :     }
; 911  :     return importer;
; 912  : }

  00029	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	41 5d		 pop	 r13
  00034	41 5c		 pop	 r12
  00036	5f		 pop	 rdi
  00037	c3		 ret	 0
$LN12@get_path_i:

; 880  : 
; 881  :     importer = PyDict_GetItem(path_importer_cache, p);

  00038	48 8b d5	 mov	 rdx, rbp
  0003b	49 8b cd	 mov	 rcx, r13
  0003e	e8 00 00 00 00	 call	 PyDict_GetItem

; 882  :     if (importer != NULL)

  00043	48 85 c0	 test	 rax, rax

; 883  :         return importer;

  00046	0f 85 8d 00 00
	00		 jne	 $LN1@get_path_i

; 884  : 
; 885  :     /* set path_importer_cache[p] to None to avoid recursion */
; 886  :     if (PyDict_SetItem(path_importer_cache, p, Py_None) != 0)

  0004c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  00053	48 8b d5	 mov	 rdx, rbp
  00056	49 8b cd	 mov	 rcx, r13
  00059	e8 00 00 00 00	 call	 PyDict_SetItem
  0005e	85 c0		 test	 eax, eax

; 887  :         return NULL;

  00060	75 c5		 jne	 SHORT $LN25@get_path_i

; 888  : 
; 889  :     for (j = 0; j < nhooks; j++) {

  00062	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00067	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  0006c	4c 89 74 24 50	 mov	 QWORD PTR [rsp+80], r14
  00071	45 33 f6	 xor	 r14d, r14d
  00074	41 8b de	 mov	 ebx, r14d
  00077	48 85 ff	 test	 rdi, rdi
  0007a	7e 47		 jle	 SHORT $LN21@get_path_i
  0007c	0f 1f 40 00	 npad	 4
$LL9@get_path_i:

; 890  :         PyObject *hook = PyList_GetItem(path_hooks, j);

  00080	48 8b d3	 mov	 rdx, rbx
  00083	49 8b cc	 mov	 rcx, r12
  00086	e8 00 00 00 00	 call	 PyList_GetItem

; 891  :         if (hook == NULL)

  0008b	48 85 c0	 test	 rax, rax
  0008e	74 7b		 je	 SHORT $LN16@get_path_i

; 893  :         importer = PyObject_CallFunctionObjArgs(hook, p, NULL);

  00090	45 33 c0	 xor	 r8d, r8d
  00093	48 8b d5	 mov	 rdx, rbp
  00096	48 8b c8	 mov	 rcx, rax
  00099	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  0009e	48 8b f0	 mov	 rsi, rax

; 894  :         if (importer != NULL)

  000a1	48 85 c0	 test	 rax, rax
  000a4	75 42		 jne	 SHORT $LN20@get_path_i

; 895  :             break;
; 896  : 
; 897  :         if (!PyErr_ExceptionMatches(PyExc_ImportError)) {

  000a6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  000ad	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000b2	85 c0		 test	 eax, eax
  000b4	74 55		 je	 SHORT $LN16@get_path_i

; 898  :             return NULL;
; 899  :         }
; 900  :         PyErr_Clear();

  000b6	e8 00 00 00 00	 call	 PyErr_Clear
  000bb	48 ff c3	 inc	 rbx
  000be	48 3b df	 cmp	 rbx, rdi
  000c1	7c bd		 jl	 SHORT $LL9@get_path_i
$LN21@get_path_i:

; 901  :     }
; 902  :     if (importer == NULL) {
; 903  :         return Py_None;

  000c3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN24@get_path_i:
  000ca	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000cf	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d4	4c 8b 74 24 50	 mov	 r14, QWORD PTR [rsp+80]
$LN1@get_path_i:

; 909  :             return NULL;
; 910  :     }
; 911  :     return importer;
; 912  : }

  000d9	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  000de	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e2	41 5d		 pop	 r13
  000e4	41 5c		 pop	 r12
  000e6	5f		 pop	 rdi
  000e7	c3		 ret	 0
$LN20@get_path_i:

; 904  :     }
; 905  :     if (importer != NULL) {
; 906  :         int err = PyDict_SetItem(path_importer_cache, p, importer);

  000e8	4c 8b c0	 mov	 r8, rax
  000eb	48 8b d5	 mov	 rdx, rbp
  000ee	49 8b cd	 mov	 rcx, r13
  000f1	e8 00 00 00 00	 call	 PyDict_SetItem

; 907  :         Py_DECREF(importer);

  000f6	48 8b ce	 mov	 rcx, rsi
  000f9	8b d8		 mov	 ebx, eax
  000fb	e8 00 00 00 00	 call	 _Py_DecRef

; 908  :         if (err != 0)

  00100	85 db		 test	 ebx, ebx
  00102	49 0f 45 f6	 cmovne	 rsi, r14
  00106	48 8b c6	 mov	 rax, rsi
  00109	eb bf		 jmp	 SHORT $LN24@get_path_i
$LN16@get_path_i:

; 892  :             return NULL;

  0010b	33 c0		 xor	 eax, eax
  0010d	eb bb		 jmp	 SHORT $LN24@get_path_i
get_path_importer ENDP
_TEXT	ENDS
PUBLIC	PyImport_GetImporter
EXTRN	PySys_GetObject:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyImport_GetImporter DD imagerel $LN18
	DD	imagerel $LN18+158
	DD	imagerel $unwind$PyImport_GetImporter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_GetImporter DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
xdata	ENDS
;	COMDAT PyImport_GetImporter
_TEXT	SEGMENT
path$ = 64
PyImport_GetImporter PROC				; COMDAT

; 915  : PyImport_GetImporter(PyObject *path) {

$LN18:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 916  :     PyObject *importer=NULL, *path_importer_cache=NULL, *path_hooks=NULL;
; 917  : 
; 918  :     if ((path_importer_cache = PySys_GetObject("path_importer_cache"))) {

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@FEEGIILL@path_importer_cache?$AA@
  00014	e8 00 00 00 00	 call	 PySys_GetObject
  00019	48 8b d8	 mov	 rbx, rax
  0001c	48 85 c0	 test	 rax, rax
  0001f	74 70		 je	 SHORT $LN16@PyImport_G@3

; 919  :         if ((path_hooks = PySys_GetObject("path_hooks"))) {

  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PDLDEHCN@path_hooks?$AA@
  00028	e8 00 00 00 00	 call	 PySys_GetObject
  0002d	48 85 c0	 test	 rax, rax
  00030	74 5f		 je	 SHORT $LN16@PyImport_G@3

; 920  :             importer = get_path_importer(path_importer_cache,
; 921  :                                          path_hooks, path);

  00032	4c 8b c7	 mov	 r8, rdi
  00035	48 8b d0	 mov	 rdx, rax
  00038	48 8b cb	 mov	 rcx, rbx
  0003b	e8 00 00 00 00	 call	 get_path_importer
  00040	48 8b d8	 mov	 rbx, rax

; 922  :         }
; 923  :     }
; 924  :     Py_XINCREF(importer); /* get_path_importer returns a borrowed reference */

  00043	48 85 c0	 test	 rax, rax
  00046	74 4b		 je	 SHORT $LN3@PyImport_G@3
  00048	e8 00 00 00 00	 call	 _Py_PXCTX
  0004d	85 c0		 test	 eax, eax
  0004f	75 32		 jne	 SHORT $LN13@PyImport_G@3
  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0005f	4c 8b cb	 mov	 r9, rbx
  00062	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00068	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00070	e8 00 00 00 00	 call	 _PyParallel_Guard
  00075	85 c0		 test	 eax, eax
  00077	75 06		 jne	 SHORT $LN9@PyImport_G@3
  00079	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0007d	74 04		 je	 SHORT $LN13@PyImport_G@3
$LN9@PyImport_G@3:
  0007f	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN13@PyImport_G@3:

; 925  :     return importer;

  00083	48 8b c3	 mov	 rax, rbx

; 926  : }

  00086	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008f	5f		 pop	 rdi
  00090	c3		 ret	 0
$LN16@PyImport_G@3:

; 925  :     return importer;

  00091	33 c0		 xor	 eax, eax
$LN3@PyImport_G@3:

; 926  : }

  00093	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00098	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009c	5f		 pop	 rdi
  0009d	c3		 ret	 0
PyImport_GetImporter ENDP
_TEXT	ENDS
EXTRN	PyImport_FrozenModules:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$find_frozen DD imagerel find_frozen
	DD	imagerel find_frozen+22
	DD	imagerel $unwind$find_frozen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$find_frozen DD imagerel find_frozen+22
	DD	imagerel find_frozen+89
	DD	imagerel $chain$0$find_frozen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$find_frozen DD imagerel find_frozen+89
	DD	imagerel find_frozen+103
	DD	imagerel $chain$2$find_frozen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$find_frozen DD 020021H
	DD	063400H
	DD	imagerel find_frozen
	DD	imagerel find_frozen+22
	DD	imagerel $unwind$find_frozen
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$find_frozen DD 020521H
	DD	063405H
	DD	imagerel find_frozen
	DD	imagerel find_frozen+22
	DD	imagerel $unwind$find_frozen
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$find_frozen DD 020601H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT find_frozen
_TEXT	SEGMENT
name$ = 48
find_frozen PROC					; COMDAT

; 975  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b f9	 mov	 rdi, rcx

; 976  :     struct _frozen *p;
; 977  : 
; 978  :     if (name == NULL)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 08		 jne	 SHORT $LN6@find_froze

; 979  :         return NULL;

  0000e	33 c0		 xor	 eax, eax

; 988  : }

  00010	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00014	5f		 pop	 rdi
  00015	c3		 ret	 0
$LN6@find_froze:
  00016	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 980  : 
; 981  :     for (p = PyImport_FrozenModules; ; p++) {

  0001b	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR PyImport_FrozenModules

; 982  :         if (p->name == NULL)

  00022	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00025	48 85 c0	 test	 rax, rax
  00028	74 22		 je	 SHORT $LN11@find_froze
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL5@find_froze:

; 984  :         if (PyUnicode_CompareWithASCIIString(name, p->name) == 0)

  00030	48 8b d0	 mov	 rdx, rax
  00033	48 8b cf	 mov	 rcx, rdi
  00036	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  0003b	85 c0		 test	 eax, eax
  0003d	74 1a		 je	 SHORT $LN12@find_froze

; 980  : 
; 981  :     for (p = PyImport_FrozenModules; ; p++) {

  0003f	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00043	48 83 c3 18	 add	 rbx, 24

; 982  :         if (p->name == NULL)

  00047	48 85 c0	 test	 rax, rax
  0004a	75 e4		 jne	 SHORT $LL5@find_froze
$LN11@find_froze:

; 983  :             return NULL;

  0004c	33 c0		 xor	 eax, eax
  0004e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 988  : }

  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
$LN12@find_froze:

; 985  :             break;
; 986  :     }
; 987  :     return p;

  00059	48 8b c3	 mov	 rax, rbx
  0005c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 988  : }

  00061	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00065	5f		 pop	 rdi
  00066	c3		 ret	 0
find_frozen ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@MFBBGHEA@Excluded?5frozen?5object?5named?5?$CFR?$AA@ ; `string'
PUBLIC	??_C@_0BP@BEFPGIMM@No?5such?5frozen?5object?5named?5?$CFR?$AA@ ; `string'
EXTRN	PyMarshal_ReadObjectFromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_frozen_object DD imagerel get_frozen_object
	DD	imagerel get_frozen_object+110
	DD	imagerel $unwind$get_frozen_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_frozen_object DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CA@MFBBGHEA@Excluded?5frozen?5object?5named?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0CA@MFBBGHEA@Excluded?5frozen?5object?5named?5?$CFR?$AA@ DB 'Exclud'
	DB	'ed frozen object named %R', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BEFPGIMM@No?5such?5frozen?5object?5named?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0BP@BEFPGIMM@No?5such?5frozen?5object?5named?5?$CFR?$AA@ DB 'No suc'
	DB	'h frozen object named %R', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT get_frozen_object
_TEXT	SEGMENT
name$ = 48
get_frozen_object PROC					; COMDAT

; 992  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 993  :     struct _frozen *p = find_frozen(name);

  00009	e8 00 00 00 00	 call	 find_frozen

; 994  :     int size;
; 995  : 
; 996  :     if (p == NULL) {

  0000e	48 85 c0	 test	 rax, rax
  00011	75 1e		 jne	 SHORT $LN3@get_frozen

; 997  :         PyErr_Format(PyExc_ImportError,
; 998  :                      "No such frozen object named %R",
; 999  :                      name);

  00013	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@BEFPGIMM@No?5such?5frozen?5object?5named?5?$CFR?$AA@
  00021	4c 8b c3	 mov	 r8, rbx
  00024	e8 00 00 00 00	 call	 PyErr_Format

; 1000 :         return NULL;

  00029	33 c0		 xor	 eax, eax

; 1012 : }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
$LN3@get_frozen:

; 1001 :     }
; 1002 :     if (p->code == NULL) {

  00031	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00035	48 85 c9	 test	 rcx, rcx
  00038	75 1e		 jne	 SHORT $LN2@get_frozen

; 1003 :         PyErr_Format(PyExc_ImportError,
; 1004 :                      "Excluded frozen object named %R",
; 1005 :                      name);

  0003a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@MFBBGHEA@Excluded?5frozen?5object?5named?5?$CFR?$AA@
  00048	4c 8b c3	 mov	 r8, rbx
  0004b	e8 00 00 00 00	 call	 PyErr_Format

; 1006 :         return NULL;

  00050	33 c0		 xor	 eax, eax

; 1012 : }

  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5b		 pop	 rbx
  00057	c3		 ret	 0
$LN2@get_frozen:

; 1007 :     }
; 1008 :     size = p->size;

  00058	8b 40 10	 mov	 eax, DWORD PTR [rax+16]

; 1009 :     if (size < 0)

  0005b	85 c0		 test	 eax, eax
  0005d	79 02		 jns	 SHORT $LN1@get_frozen

; 1010 :         size = -size;

  0005f	f7 d8		 neg	 eax
$LN1@get_frozen:

; 1011 :     return PyMarshal_ReadObjectFromString((char *)p->code, size);

  00061	48 63 d0	 movsxd	 rdx, eax

; 1012 : }

  00064	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00068	5b		 pop	 rbx
  00069	e9 00 00 00 00	 jmp	 PyMarshal_ReadObjectFromString
get_frozen_object ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$is_frozen_package DD imagerel is_frozen_package
	DD	imagerel is_frozen_package+219
	DD	imagerel $unwind$is_frozen_package
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$is_frozen_package DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
xdata	ENDS
;	COMDAT is_frozen_package
_TEXT	SEGMENT
name$ = 64
is_frozen_package PROC					; COMDAT

; 1016 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 1017 :     struct _frozen *p = find_frozen(name);

  00009	e8 00 00 00 00	 call	 find_frozen

; 1018 :     int size;
; 1019 : 
; 1020 :     if (p == NULL) {

  0000e	48 85 c0	 test	 rax, rax
  00011	75 1e		 jne	 SHORT $LN3@is_frozen_

; 1021 :         PyErr_Format(PyExc_ImportError,
; 1022 :                      "No such frozen object named %R",
; 1023 :                      name);

  00013	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@BEFPGIMM@No?5such?5frozen?5object?5named?5?$CFR?$AA@
  00021	4c 8b c3	 mov	 r8, rbx
  00024	e8 00 00 00 00	 call	 PyErr_Format

; 1024 :         return NULL;

  00029	33 c0		 xor	 eax, eax

; 1033 : }

  0002b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
$LN3@is_frozen_:

; 1025 :     }
; 1026 : 
; 1027 :     size = p->size;
; 1028 : 
; 1029 :     if (size < 0)

  00031	83 78 10 00	 cmp	 DWORD PTR [rax+16], 0
  00035	7d 52		 jge	 SHORT $LN2@is_frozen_

; 1030 :         Py_RETURN_TRUE;

  00037	e8 00 00 00 00	 call	 _Py_PXCTX
  0003c	85 c0		 test	 eax, eax
  0003e	75 3c		 jne	 SHORT $LN7@is_frozen_
  00040	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00055	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00063	e8 00 00 00 00	 call	 _PyParallel_Guard
  00068	85 c0		 test	 eax, eax
  0006a	75 09		 jne	 SHORT $LN6@is_frozen_
  0006c	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  00073	74 07		 je	 SHORT $LN7@is_frozen_
$LN6@is_frozen_:
  00075	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN7@is_frozen_:
  0007c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 1033 : }

  00083	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00087	5b		 pop	 rbx
  00088	c3		 ret	 0
$LN2@is_frozen_:

; 1031 :     else
; 1032 :         Py_RETURN_FALSE;

  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	75 3c		 jne	 SHORT $LN11@is_frozen_
  00092	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a7	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ad	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ba	85 c0		 test	 eax, eax
  000bc	75 09		 jne	 SHORT $LN10@is_frozen_
  000be	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  000c5	74 07		 je	 SHORT $LN11@is_frozen_
$LN10@is_frozen_:
  000c7	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN11@is_frozen_:
  000ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 1033 : }

  000d5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d9	5b		 pop	 rbx
  000da	c3		 ret	 0
is_frozen_package ENDP
_TEXT	ENDS
PUBLIC	??_C@_08PJDEAPCO@?$DMfrozen?$DO?$AA@		; `string'
PUBLIC	??_C@_0CG@NOHGDGK@frozen?5object?5?$CFR?5is?5not?5a?5code?5o@ ; `string'
PUBLIC	PyImport_ImportFrozenModuleObject
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ImportFrozenModuleObject DD imagerel $LN17
	DD	imagerel $LN17+68
	DD	imagerel $unwind$PyImport_ImportFrozenModuleObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyImport_ImportFrozenModuleObject DD imagerel $LN17+68
	DD	imagerel $LN17+126
	DD	imagerel $chain$1$PyImport_ImportFrozenModuleObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyImport_ImportFrozenModuleObject DD imagerel $LN17+126
	DD	imagerel $LN17+198
	DD	imagerel $chain$4$PyImport_ImportFrozenModuleObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyImport_ImportFrozenModuleObject DD imagerel $LN17+198
	DD	imagerel $LN17+378
	DD	imagerel $chain$6$PyImport_ImportFrozenModuleObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyImport_ImportFrozenModuleObject DD 060021H
	DD	086400H
	DD	075400H
	DD	063400H
	DD	imagerel $LN17
	DD	imagerel $LN17+68
	DD	imagerel $unwind$PyImport_ImportFrozenModuleObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyImport_ImportFrozenModuleObject DD 060c21H
	DD	07540cH
	DD	086400H
	DD	063400H
	DD	imagerel $LN17
	DD	imagerel $LN17+68
	DD	imagerel $unwind$PyImport_ImportFrozenModuleObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyImport_ImportFrozenModuleObject DD 040e21H
	DD	08640eH
	DD	063405H
	DD	imagerel $LN17
	DD	imagerel $LN17+68
	DD	imagerel $unwind$PyImport_ImportFrozenModuleObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ImportFrozenModuleObject DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT ??_C@_08PJDEAPCO@?$DMfrozen?$DO?$AA@
CONST	SEGMENT
??_C@_08PJDEAPCO@?$DMfrozen?$DO?$AA@ DB '<frozen>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NOHGDGK@frozen?5object?5?$CFR?5is?5not?5a?5code?5o@
CONST	SEGMENT
??_C@_0CG@NOHGDGK@frozen?5object?5?$CFR?5is?5not?5a?5code?5o@ DB 'frozen '
	DB	'object %R is not a code object', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyImport_ImportFrozenModuleObject
_TEXT	SEGMENT
name$ = 48
PyImport_ImportFrozenModuleObject PROC			; COMDAT

; 1043 : {

$LN17:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b f9	 mov	 rdi, rcx

; 1044 :     struct _frozen *p;
; 1045 :     PyObject *co, *m, *path;
; 1046 :     int ispackage;
; 1047 :     int size;
; 1048 : 
; 1049 :     p = find_frozen(name);

  00009	e8 00 00 00 00	 call	 find_frozen

; 1050 : 
; 1051 :     if (p == NULL)

  0000e	48 85 c0	 test	 rax, rax
  00011	75 06		 jne	 SHORT $LN11@PyImport_I@2

; 1104 : }

  00013	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00017	5f		 pop	 rdi
  00018	c3		 ret	 0
$LN11@PyImport_I@2:

; 1052 :         return 0;
; 1053 :     if (p->code == NULL) {

  00019	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0001d	48 85 c9	 test	 rcx, rcx
  00020	75 1f		 jne	 SHORT $LN10@PyImport_I@2

; 1054 :         PyErr_Format(PyExc_ImportError,
; 1055 :                      "Excluded frozen object named %R",
; 1056 :                      name);

  00022	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@MFBBGHEA@Excluded?5frozen?5object?5named?5?$CFR?$AA@
  00030	4c 8b c7	 mov	 r8, rdi
  00033	e8 00 00 00 00	 call	 PyErr_Format

; 1057 :         return -1;

  00038	83 c8 ff	 or	 eax, -1

; 1104 : }

  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
$LN10@PyImport_I@2:

; 1058 :     }
; 1059 :     size = p->size;

  00041	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00044	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 1060 :     ispackage = (size < 0);

  00049	33 db		 xor	 ebx, ebx
  0004b	85 c0		 test	 eax, eax
  0004d	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00052	0f 98 c3	 sets	 bl

; 1061 :     if (ispackage)

  00055	85 db		 test	 ebx, ebx
  00057	74 02		 je	 SHORT $LN9@PyImport_I@2

; 1062 :         size = -size;

  00059	f7 d8		 neg	 eax
$LN9@PyImport_I@2:

; 1063 :     co = PyMarshal_ReadObjectFromString((char *)p->code, size);

  0005b	48 63 d0	 movsxd	 rdx, eax
  0005e	e8 00 00 00 00	 call	 PyMarshal_ReadObjectFromString
  00063	48 8b f0	 mov	 rsi, rax

; 1064 :     if (co == NULL)

  00066	48 85 c0	 test	 rax, rax
  00069	75 13		 jne	 SHORT $LN8@PyImport_I@2

; 1065 :         return -1;

  0006b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00070	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00075	83 c8 ff	 or	 eax, -1

; 1104 : }

  00078	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007c	5f		 pop	 rdi
  0007d	c3		 ret	 0
$LN8@PyImport_I@2:

; 1066 :     if (!PyCode_Check(co)) {

  0007e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  00085	48 89 6c 24 38	 mov	 QWORD PTR [rsp+56], rbp
  0008a	48 39 46 58	 cmp	 QWORD PTR [rsi+88], rax
  0008e	74 36		 je	 SHORT $LN7@PyImport_I@2

; 1067 :         PyErr_Format(PyExc_TypeError,
; 1068 :                      "frozen object %R is not a code object",
; 1069 :                      name);

  00090	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@NOHGDGK@frozen?5object?5?$CFR?5is?5not?5a?5code?5o@
  0009e	4c 8b c7	 mov	 r8, rdi
  000a1	e8 00 00 00 00	 call	 PyErr_Format
$err_return$122400:

; 1101 : err_return:
; 1102 :     Py_DECREF(co);

  000a6	48 8b ce	 mov	 rcx, rsi
  000a9	e8 00 00 00 00	 call	 _Py_DecRef

; 1103 :     return -1;

  000ae	83 c8 ff	 or	 eax, -1
$LN16@PyImport_I@2:
  000b1	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000b6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000bb	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 1104 : }

  000c0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c4	5f		 pop	 rdi
  000c5	c3		 ret	 0
$LN7@PyImport_I@2:

; 1070 :         goto err_return;
; 1071 :     }
; 1072 :     if (ispackage) {

  000c6	85 db		 test	 ebx, ebx
  000c8	74 59		 je	 SHORT $LN3@PyImport_I@2

; 1073 :         /* Set __path__ to the package name */
; 1074 :         PyObject *d, *l;
; 1075 :         int err;
; 1076 :         m = PyImport_AddModuleObject(name);

  000ca	48 8b cf	 mov	 rcx, rdi
  000cd	e8 00 00 00 00	 call	 PyImport_AddModuleObject

; 1077 :         if (m == NULL)

  000d2	48 85 c0	 test	 rax, rax
  000d5	74 cf		 je	 SHORT $err_return$122400

; 1078 :             goto err_return;
; 1079 :         d = PyModule_GetDict(m);

  000d7	48 8b c8	 mov	 rcx, rax
  000da	e8 00 00 00 00	 call	 PyModule_GetDict

; 1080 :         l = PyList_New(1);

  000df	b9 01 00 00 00	 mov	 ecx, 1
  000e4	48 8b d8	 mov	 rbx, rax
  000e7	e8 00 00 00 00	 call	 PyList_New
  000ec	48 8b e8	 mov	 rbp, rax

; 1081 :         if (l == NULL) {

  000ef	48 85 c0	 test	 rax, rax
  000f2	74 b2		 je	 SHORT $err_return$122400

; 1082 :             goto err_return;
; 1083 :         }
; 1084 :         Py_INCREF(name);

  000f4	48 8b cf	 mov	 rcx, rdi
  000f7	e8 00 00 00 00	 call	 _Py_IncRef

; 1085 :         PyList_SET_ITEM(l, 0, name);

  000fc	4c 8b 5d 70	 mov	 r11, QWORD PTR [rbp+112]

; 1086 :         err = PyDict_SetItemString(d, "__path__", l);

  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LPNIDJLN@__path__?$AA@
  00107	4c 8b c5	 mov	 r8, rbp
  0010a	48 8b cb	 mov	 rcx, rbx
  0010d	49 89 3b	 mov	 QWORD PTR [r11], rdi
  00110	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1087 :         Py_DECREF(l);

  00115	48 8b cd	 mov	 rcx, rbp
  00118	8b d8		 mov	 ebx, eax
  0011a	e8 00 00 00 00	 call	 _Py_DecRef

; 1088 :         if (err != 0)

  0011f	85 db		 test	 ebx, ebx
  00121	75 83		 jne	 SHORT $err_return$122400
$LN3@PyImport_I@2:

; 1089 :             goto err_return;
; 1090 :     }
; 1091 :     path = PyUnicode_FromString("<frozen>");

  00123	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08PJDEAPCO@?$DMfrozen?$DO?$AA@
  0012a	e8 00 00 00 00	 call	 PyUnicode_FromString
  0012f	48 8b d8	 mov	 rbx, rax

; 1092 :     if (path == NULL)

  00132	48 85 c0	 test	 rax, rax
  00135	0f 84 6b ff ff
	ff		 je	 $err_return$122400

; 1093 :         goto err_return;
; 1094 :     m = PyImport_ExecCodeModuleObject(name, co, path, NULL);

  0013b	45 33 c9	 xor	 r9d, r9d
  0013e	4c 8b c0	 mov	 r8, rax
  00141	48 8b d6	 mov	 rdx, rsi
  00144	48 8b cf	 mov	 rcx, rdi
  00147	e8 00 00 00 00	 call	 PyImport_ExecCodeModuleObject

; 1095 :     Py_DECREF(path);

  0014c	48 8b cb	 mov	 rcx, rbx
  0014f	48 8b f8	 mov	 rdi, rax
  00152	e8 00 00 00 00	 call	 _Py_DecRef

; 1096 :     if (m == NULL)

  00157	48 85 ff	 test	 rdi, rdi
  0015a	0f 84 46 ff ff
	ff		 je	 $err_return$122400

; 1097 :         goto err_return;
; 1098 :     Py_DECREF(co);

  00160	48 8b ce	 mov	 rcx, rsi
  00163	e8 00 00 00 00	 call	 _Py_DecRef

; 1099 :     Py_DECREF(m);

  00168	48 8b cf	 mov	 rcx, rdi
  0016b	e8 00 00 00 00	 call	 _Py_DecRef

; 1100 :     return 1;

  00170	b8 01 00 00 00	 mov	 eax, 1
  00175	e9 37 ff ff ff	 jmp	 $LN16@PyImport_I@2
PyImport_ImportFrozenModuleObject ENDP
_TEXT	ENDS
PUBLIC	PyImport_ImportFrozenModule
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ImportFrozenModule DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$PyImport_ImportFrozenModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ImportFrozenModule DD 042401H
	DD	063424H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyImport_ImportFrozenModule
_TEXT	SEGMENT
name$ = 48
PyImport_ImportFrozenModule PROC			; COMDAT

; 1108 : {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1109 :     PyObject *nameobj;
; 1110 :     int ret;
; 1111 :     nameobj = PyUnicode_InternFromString(name);

  00006	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0000b	48 8b f8	 mov	 rdi, rax

; 1112 :     if (nameobj == NULL)

  0000e	48 85 c0	 test	 rax, rax
  00011	75 09		 jne	 SHORT $LN1@PyImport_I@3

; 1113 :         return -1;

  00013	83 c8 ff	 or	 eax, -1

; 1117 : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5f		 pop	 rdi
  0001b	c3		 ret	 0
$LN1@PyImport_I@3:

; 1114 :     ret = PyImport_ImportFrozenModuleObject(nameobj);

  0001c	48 8b c8	 mov	 rcx, rax
  0001f	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00024	e8 00 00 00 00	 call	 PyImport_ImportFrozenModuleObject

; 1115 :     Py_DECREF(nameobj);

  00029	48 8b cf	 mov	 rcx, rdi
  0002c	8b d8		 mov	 ebx, eax
  0002e	e8 00 00 00 00	 call	 _Py_DecRef

; 1116 :     return ret;

  00033	8b c3		 mov	 eax, ebx
  00035	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1117 : }

  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5f		 pop	 rdi
  0003f	c3		 ret	 0
PyImport_ImportFrozenModule ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@LPHFHGP@_call_with_frames_removed?$AA@ ; `string'
PUBLIC	??_C@_0BO@JHFECBGD@?$DMfrozen?5importlib?4_bootstrap?$DO?$AA@ ; `string'
EXTRN	PyErr_Restore:PROC
EXTRN	PyErr_Fetch:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$remove_importlib_frames DD imagerel remove_importlib_frames
	DD	imagerel remove_importlib_frames+111
	DD	imagerel $unwind$remove_importlib_frames
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$remove_importlib_frames DD imagerel remove_importlib_frames+111
	DD	imagerel remove_importlib_frames+336
	DD	imagerel $chain$2$remove_importlib_frames
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$remove_importlib_frames DD imagerel remove_importlib_frames+336
	DD	imagerel remove_importlib_frames+372
	DD	imagerel $chain$3$remove_importlib_frames
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$remove_importlib_frames DD 021H
	DD	imagerel remove_importlib_frames
	DD	imagerel remove_importlib_frames+111
	DD	imagerel $unwind$remove_importlib_frames
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$remove_importlib_frames DD 060f21H
	DD	06c40fH
	DD	07540aH
	DD	083405H
	DD	imagerel remove_importlib_frames
	DD	imagerel remove_importlib_frames+111
	DD	imagerel $unwind$remove_importlib_frames
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$remove_importlib_frames DD 050b01H
	DD	0e007820bH
	DD	07003d005H
	DD	06002H
xdata	ENDS
;	COMDAT ??_C@_0BK@LPHFHGP@_call_with_frames_removed?$AA@
CONST	SEGMENT
??_C@_0BK@LPHFHGP@_call_with_frames_removed?$AA@ DB '_call_with_frames_re'
	DB	'moved', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JHFECBGD@?$DMfrozen?5importlib?4_bootstrap?$DO?$AA@
CONST	SEGMENT
??_C@_0BO@JHFECBGD@?$DMfrozen?5importlib?4_bootstrap?$DO?$AA@ DB '<frozen'
	DB	' importlib._bootstrap>', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
CONST	ENDS
;	COMDAT remove_importlib_frames
_TEXT	SEGMENT
base_tb$ = 112
exception$ = 120
value$ = 128
remove_importlib_frames PROC				; COMDAT

; 1157 : {

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	41 55		 push	 r13
  00005	41 56		 push	 r14
  00007	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1158 :     const char *importlib_filename = "<frozen importlib._bootstrap>";
; 1159 :     const char *remove_frames = "_call_with_frames_removed";
; 1160 :     int always_trim = 0;
; 1161 :     int in_importlib = 0;
; 1162 :     PyObject *exception, *value, *base_tb, *tb;
; 1163 :     PyObject **prev_link, **outer_link = NULL;
; 1164 : 
; 1165 :     /* Synopsis: if it's an ImportError, we trim all importlib chunks
; 1166 :        from the traceback. We always trim chunks
; 1167 :        which end with a call to "_call_with_frames_removed". */
; 1168 : 
; 1169 :     PyErr_Fetch(&exception, &value, &base_tb);

  0000b	4c 8d 44 24 70	 lea	 r8, QWORD PTR base_tb$[rsp]
  00010	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR value$[rsp]
  00018	48 8d 4c 24 78	 lea	 rcx, QWORD PTR exception$[rsp]
  0001d	45 33 ed	 xor	 r13d, r13d
  00020	33 ff		 xor	 edi, edi
  00022	e8 00 00 00 00	 call	 PyErr_Fetch

; 1170 :     if (!exception || Py_VerboseFlag)

  00027	48 8b 4c 24 78	 mov	 rcx, QWORD PTR exception$[rsp]
  0002c	48 85 c9	 test	 rcx, rcx
  0002f	0f 84 1b 01 00
	00		 je	 $LN23@remove_imp
  00035	39 3d 00 00 00
	00		 cmp	 DWORD PTR Py_VerboseFlag, edi
  0003b	0f 85 0f 01 00
	00		 jne	 $LN23@remove_imp

; 1171 :         goto done;
; 1172 :     if (PyType_IsSubtype((PyTypeObject *) exception,
; 1173 :                          (PyTypeObject *) PyExc_ImportError))

  00041	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ImportError
  00048	e8 00 00 00 00	 call	 PyType_IsSubtype

; 1174 :         always_trim = 1;
; 1175 : 
; 1176 :     prev_link = &base_tb;
; 1177 :     tb = base_tb;

  0004d	4c 8b 44 24 70	 mov	 r8, QWORD PTR base_tb$[rsp]
  00052	33 c9		 xor	 ecx, ecx
  00054	85 c0		 test	 eax, eax
  00056	ba 01 00 00 00	 mov	 edx, 1
  0005b	48 8d 74 24 70	 lea	 rsi, QWORD PTR base_tb$[rsp]
  00060	0f 45 ca	 cmovne	 ecx, edx

; 1194 : 
; 1195 :         if (in_importlib &&
; 1196 :             (always_trim ||
; 1197 :              PyUnicode_CompareWithASCIIString(code->co_name,
; 1198 :                                               remove_frames) == 0)) {

  00063	4c 63 f1	 movsxd	 r14, ecx
  00066	4d 85 c0	 test	 r8, r8
  00069	0f 84 fe 00 00
	00		 je	 $LN22@remove_imp
  0006f	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00074	48 89 6c 24 38	 mov	 QWORD PTR [rsp+56], rbp
  00079	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  0007e	66 90		 npad	 2
$LL10@remove_imp:

; 1179 :         PyTracebackObject *traceback = (PyTracebackObject *)tb;
; 1180 :         PyObject *next = (PyObject *) traceback->tb_next;
; 1181 :         PyFrameObject *frame = traceback->tb_frame;
; 1182 :         PyCodeObject *code = frame->f_code;

  00080	49 8b 40 68	 mov	 rax, QWORD PTR [r8+104]
  00084	49 8b 58 60	 mov	 rbx, QWORD PTR [r8+96]
  00088	49 8d 68 60	 lea	 rbp, QWORD PTR [r8+96]
  0008c	4c 8b 60 78	 mov	 r12, QWORD PTR [rax+120]

; 1183 :         int now_in_importlib;
; 1184 : 
; 1185 :         assert(PyTraceBack_Check(tb));
; 1186 :         now_in_importlib = (PyUnicode_CompareWithASCIIString(
; 1187 :                                 code->co_filename,
; 1188 :                                 importlib_filename) == 0);

  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@JHFECBGD@?$DMfrozen?5importlib?4_bootstrap?$DO?$AA@
  00097	49 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [r12+176]
  0009f	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  000a4	33 d2		 xor	 edx, edx
  000a6	85 c0		 test	 eax, eax
  000a8	0f 94 c2	 sete	 dl

; 1189 :         if (now_in_importlib && !in_importlib) {

  000ab	85 d2		 test	 edx, edx
  000ad	74 07		 je	 SHORT $LN8@remove_imp
  000af	45 85 ed	 test	 r13d, r13d
  000b2	48 0f 44 fe	 cmove	 rdi, rsi
$LN8@remove_imp:

; 1190 :             /* This is the link to this chunk of importlib tracebacks */
; 1191 :             outer_link = prev_link;
; 1192 :         }
; 1193 :         in_importlib = now_in_importlib;

  000b6	44 8b ea	 mov	 r13d, edx

; 1194 : 
; 1195 :         if (in_importlib &&
; 1196 :             (always_trim ||
; 1197 :              PyUnicode_CompareWithASCIIString(code->co_name,
; 1198 :                                               remove_frames) == 0)) {

  000b9	85 d2		 test	 edx, edx
  000bb	74 70		 je	 SHORT $LN7@remove_imp
  000bd	4d 85 f6	 test	 r14, r14
  000c0	75 18		 jne	 SHORT $LN6@remove_imp
  000c2	49 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR [r12+184]
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@LPHFHGP@_call_with_frames_removed?$AA@
  000d1	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  000d6	85 c0		 test	 eax, eax
  000d8	75 53		 jne	 SHORT $LN7@remove_imp
$LN6@remove_imp:

; 1199 :             PyObject *tmp = *outer_link;

  000da	48 8b 37	 mov	 rsi, QWORD PTR [rdi]

; 1200 :             *outer_link = next;

  000dd	48 89 1f	 mov	 QWORD PTR [rdi], rbx

; 1201 :             Py_XINCREF(next);

  000e0	48 85 db	 test	 rbx, rbx
  000e3	74 3b		 je	 SHORT $LN4@remove_imp
  000e5	e8 00 00 00 00	 call	 _Py_PXCTX
  000ea	85 c0		 test	 eax, eax
  000ec	75 32		 jne	 SHORT $LN4@remove_imp
  000ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000fc	4c 8b cb	 mov	 r9, rbx
  000ff	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00105	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0010d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00112	85 c0		 test	 eax, eax
  00114	75 06		 jne	 SHORT $LN16@remove_imp
  00116	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0011a	74 04		 je	 SHORT $LN4@remove_imp
$LN16@remove_imp:
  0011c	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN4@remove_imp:

; 1202 :             Py_DECREF(tmp);

  00120	48 8b ce	 mov	 rcx, rsi
  00123	e8 00 00 00 00	 call	 _Py_DecRef

; 1203 :             prev_link = outer_link;

  00128	48 8b f7	 mov	 rsi, rdi

; 1204 :         }
; 1205 :         else {

  0012b	eb 03		 jmp	 SHORT $LN1@remove_imp
$LN7@remove_imp:

; 1206 :             prev_link = (PyObject **) &traceback->tb_next;

  0012d	48 8b f5	 mov	 rsi, rbp
$LN1@remove_imp:

; 1207 :         }
; 1208 :         tb = next;

  00130	4c 8b c3	 mov	 r8, rbx
  00133	48 85 db	 test	 rbx, rbx
  00136	0f 85 44 ff ff
	ff		 jne	 $LL10@remove_imp

; 1178 :     while (tb != NULL) {

  0013c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR exception$[rsp]
  00141	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]
  00146	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0014b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN23@remove_imp:
  00150	4c 8b 44 24 70	 mov	 r8, QWORD PTR base_tb$[rsp]
$done$122462:

; 1209 :     }
; 1210 : done:
; 1211 :     PyErr_Restore(exception, value, base_tb);

  00155	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR value$[rsp]
  0015d	e8 00 00 00 00	 call	 PyErr_Restore

; 1212 : }

  00162	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00166	41 5e		 pop	 r14
  00168	41 5d		 pop	 r13
  0016a	5f		 pop	 rdi
  0016b	5e		 pop	 rsi
  0016c	c3		 ret	 0
$LN22@remove_imp:

; 1178 :     while (tb != NULL) {

  0016d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR exception$[rsp]
  00172	eb e1		 jmp	 SHORT $done$122462
remove_importlib_frames ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@JFELPEKG@?$CFR?5not?5in?5sys?4modules?5as?5expecte@ ; `string'
PUBLIC	??_C@_0CJ@FDDAKFLB@import?5of?5?$CFR?5halted?$DL?5None?5in?5sys@ ; `string'
PUBLIC	??_C@_0BF@FMMPICPA@__import__?5not?5found?$AA@	; `string'
PUBLIC	??_C@_0DD@GKODJAFA@attempted?5relative?5import?5beyond@ ; `string'
PUBLIC	??_C@_0DM@IPEKCNMG@Parent?5module?5?$CFR?5not?5loaded?0?5can@ ; `string'
PUBLIC	??_C@_0BK@EIIOJEDD@__name__?5must?5be?5a?5string?$AA@ ; `string'
PUBLIC	??_C@_0BK@JBIMDHBD@?8__name__?8?5not?5in?5globals?$AA@ ; `string'
PUBLIC	??_C@_0BJ@POADJCGB@package?5must?5be?5a?5string?$AA@ ; `string'
PUBLIC	??_C@_0BD@LPKGOAAE@level?5must?5be?5?$DO?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_0BN@KONBMHIP@module?5name?5must?5be?5a?5string?$AA@ ; `string'
PUBLIC	??_C@_0BC@LAFLLONM@Empty?5module?5name?$AA@	; `string'
PUBLIC	??_C@_0BH@LLPACJFC@globals?5must?5be?5a?5dict?$AA@ ; `string'
PUBLIC	PyImport_ImportModuleLevelObject
EXTRN	PyUnicode_Partition:PROC
EXTRN	PyObject_Not:PROC
EXTRN	_PyObject_CallMethodObjIdArgs:PROC
EXTRN	PyObject_IsTrue:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	PyErr_SetImportError:PROC
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyUnicode_Join:PROC
EXTRN	PyTuple_Pack:PROC
EXTRN	PyUnicode_Substring:PROC
EXTRN	PyUnicode_FindChar:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyUnicode_RPartition:PROC
EXTRN	_PyUnicode_FromId:PROC
EXTRN	PyExc_KeyError:QWORD
EXTRN	_PyDict_GetItemId:PROC
EXTRN	_PyUnicode_Ready:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyImport_ImportModuleLevelObject DD imagerel $LN199
	DD	imagerel $LN199+410
	DD	imagerel $unwind$PyImport_ImportModuleLevelObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyImport_ImportModuleLevelObject DD imagerel $LN199+410
	DD	imagerel $LN199+2449
	DD	imagerel $chain$1$PyImport_ImportModuleLevelObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyImport_ImportModuleLevelObject DD imagerel $LN199+2449
	DD	imagerel $LN199+2692
	DD	imagerel $chain$2$PyImport_ImportModuleLevelObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyImport_ImportModuleLevelObject DD 021H
	DD	imagerel $LN199
	DD	imagerel $LN199+410
	DD	imagerel $unwind$PyImport_ImportModuleLevelObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyImport_ImportModuleLevelObject DD 040d21H
	DD	08740dH
	DD	0123408H
	DD	imagerel $LN199
	DD	imagerel $LN199+410
	DD	imagerel $unwind$PyImport_ImportModuleLevelObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ImportModuleLevelObject DD 071301H
	DD	0f00f8213H
	DD	0d00be00dH
	DD	06007c009H
	DD	05006H
xdata	ENDS
;	COMDAT ??_C@_0CC@JFELPEKG@?$CFR?5not?5in?5sys?4modules?5as?5expecte@
CONST	SEGMENT
??_C@_0CC@JFELPEKG@?$CFR?5not?5in?5sys?4modules?5as?5expecte@ DB '%R not '
	DB	'in sys.modules as expected', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FDDAKFLB@import?5of?5?$CFR?5halted?$DL?5None?5in?5sys@
CONST	SEGMENT
??_C@_0CJ@FDDAKFLB@import?5of?5?$CFR?5halted?$DL?5None?5in?5sys@ DB 'impo'
	DB	'rt of %R halted; None in sys.modules', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FMMPICPA@__import__?5not?5found?$AA@
CONST	SEGMENT
??_C@_0BF@FMMPICPA@__import__?5not?5found?$AA@ DB '__import__ not found', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GKODJAFA@attempted?5relative?5import?5beyond@
CONST	SEGMENT
??_C@_0DD@GKODJAFA@attempted?5relative?5import?5beyond@ DB 'attempted rel'
	DB	'ative import beyond top-level package', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@IPEKCNMG@Parent?5module?5?$CFR?5not?5loaded?0?5can@
CONST	SEGMENT
??_C@_0DM@IPEKCNMG@Parent?5module?5?$CFR?5not?5loaded?0?5can@ DB 'Parent '
	DB	'module %R not loaded, cannot perform relative import', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EIIOJEDD@__name__?5must?5be?5a?5string?$AA@
CONST	SEGMENT
??_C@_0BK@EIIOJEDD@__name__?5must?5be?5a?5string?$AA@ DB '__name__ must b'
	DB	'e a string', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JBIMDHBD@?8__name__?8?5not?5in?5globals?$AA@
CONST	SEGMENT
??_C@_0BK@JBIMDHBD@?8__name__?8?5not?5in?5globals?$AA@ DB '''__name__'' n'
	DB	'ot in globals', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@POADJCGB@package?5must?5be?5a?5string?$AA@
CONST	SEGMENT
??_C@_0BJ@POADJCGB@package?5must?5be?5a?5string?$AA@ DB 'package must be '
	DB	'a string', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LPKGOAAE@level?5must?5be?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BD@LPKGOAAE@level?5must?5be?5?$DO?$DN?50?$AA@ DB 'level must be >='
	DB	' 0', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KONBMHIP@module?5name?5must?5be?5a?5string?$AA@
CONST	SEGMENT
??_C@_0BN@KONBMHIP@module?5name?5must?5be?5a?5string?$AA@ DB 'module name'
	DB	' must be a string', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LAFLLONM@Empty?5module?5name?$AA@
CONST	SEGMENT
??_C@_0BC@LAFLLONM@Empty?5module?5name?$AA@ DB 'Empty module name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LLPACJFC@globals?5must?5be?5a?5dict?$AA@
CONST	SEGMENT
??_C@_0BH@LLPACJFC@globals?5must?5be?5a?5dict?$AA@ DB 'globals must be a '
	DB	'dict', 00H					; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
CONST	ENDS
;	COMDAT PyImport_ImportModuleLevelObject
_TEXT	SEGMENT
interp$1$ = 48
name$ = 128
initializing$1$ = 136
final_mod$1$ = 136
given_globals$ = 136
locals$ = 144
given_fromlist$ = 152
level$ = 160
PyImport_ImportModuleLevelObject PROC			; COMDAT

; 1219 : {

$LN199:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	41 54		 push	 r12
  00009	41 55		 push	 r13
  0000b	41 56		 push	 r14
  0000d	41 57		 push	 r15
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1220 :     _Py_IDENTIFIER(__import__);
; 1221 :     _Py_IDENTIFIER(__initializing__);
; 1222 :     _Py_IDENTIFIER(__package__);
; 1223 :     _Py_IDENTIFIER(__path__);
; 1224 :     _Py_IDENTIFIER(__name__);
; 1225 :     _Py_IDENTIFIER(_find_and_load);
; 1226 :     _Py_IDENTIFIER(_handle_fromlist);
; 1227 :     _Py_IDENTIFIER(_lock_unlock_module);
; 1228 :     _Py_static_string(single_dot, ".");
; 1229 :     PyObject *abs_name = NULL;
; 1230 :     PyObject *builtins_import = NULL;
; 1231 :     PyObject *final_mod = NULL;

  00013	45 33 ed	 xor	 r13d, r13d
  00016	4d 8b f1	 mov	 r14, r9
  00019	4c 8b e2	 mov	 r12, rdx

; 1232 :     PyObject *mod = NULL;

  0001c	41 8b ed	 mov	 ebp, r13d
  0001f	4c 8b f9	 mov	 r15, rcx

; 1233 :     PyObject *package = NULL;
; 1234 :     PyObject *globals = NULL;
; 1235 :     PyObject *fromlist = NULL;
; 1236 :     PyInterpreterState *interp = PyThreadState_GET()->interp;

  00022	e8 00 00 00 00	 call	 _Py_PXCTX
  00027	85 c0		 test	 eax, eax
  00029	74 07		 je	 SHORT $LN97@PyImport_I@4
  0002b	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00030	eb 07		 jmp	 SHORT $LN98@PyImport_I@4
$LN97@PyImport_I@4:
  00032	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN98@PyImport_I@4:
  00039	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 1237 : 
; 1238 :     /* Make sure to use default values so as to not have
; 1239 :        PyObject_CallMethodObjArgs() truncate the parameter list because of a
; 1240 :        NULL argument. */
; 1241 :     if (given_globals == NULL) {

  0003d	8b b4 24 a0 00
	00 00		 mov	 esi, DWORD PTR level$[rsp]
  00044	48 89 44 24 30	 mov	 QWORD PTR interp$1$[rsp], rax
  00049	4d 85 e4	 test	 r12, r12
  0004c	75 13		 jne	 SHORT $LN94@PyImport_I@4

; 1242 :         globals = PyDict_New();

  0004e	e8 00 00 00 00	 call	 PyDict_New
  00053	4c 8b e0	 mov	 r12, rax

; 1243 :         if (globals == NULL) {

  00056	48 85 c0	 test	 rax, rax
  00059	0f 84 0e 0a 00
	00		 je	 $LN179@PyImport_I@4

; 1244 :             goto error;
; 1245 :         }
; 1246 :     }
; 1247 :     else {

  0005f	eb 6b		 jmp	 SHORT $LN102@PyImport_I@4
$LN94@PyImport_I@4:

; 1248 :         /* Only have to care what given_globals is if it will be used
; 1249 :            for something. */
; 1250 :         if (level > 0 && !PyDict_Check(given_globals)) {

  00061	85 f6		 test	 esi, esi
  00063	7e 29		 jle	 SHORT $LN91@PyImport_I@4
  00065	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]
  0006a	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00074	75 18		 jne	 SHORT $LN91@PyImport_I@4

; 1251 :             PyErr_SetString(PyExc_TypeError, "globals must be a dict");

  00076	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@LLPACJFC@globals?5must?5be?5a?5dict?$AA@
  00084	e8 00 00 00 00	 call	 PyErr_SetString

; 1252 :             goto error;

  00089	e9 df 09 00 00	 jmp	 $LN179@PyImport_I@4
$LN91@PyImport_I@4:

; 1253 :         }
; 1254 :         globals = given_globals;
; 1255 :         Py_INCREF(globals);

  0008e	e8 00 00 00 00	 call	 _Py_PXCTX
  00093	85 c0		 test	 eax, eax
  00095	75 35		 jne	 SHORT $LN102@PyImport_I@4
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a5	4d 8b cc	 mov	 r9, r12
  000a8	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ae	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000bb	85 c0		 test	 eax, eax
  000bd	75 08		 jne	 SHORT $LN101@PyImport_I@4
  000bf	41 f6 44 24 20
	20		 test	 BYTE PTR [r12+32], 32	; 00000020H
  000c5	74 05		 je	 SHORT $LN102@PyImport_I@4
$LN101@PyImport_I@4:
  000c7	49 ff 44 24 50	 inc	 QWORD PTR [r12+80]
$LN102@PyImport_I@4:

; 1256 :     }
; 1257 : 
; 1258 :     if (given_fromlist == NULL) {

  000cc	4d 85 f6	 test	 r14, r14
  000cf	75 15		 jne	 SHORT $LN90@PyImport_I@4

; 1259 :         fromlist = PyList_New(0);

  000d1	33 c9		 xor	 ecx, ecx
  000d3	e8 00 00 00 00	 call	 PyList_New
  000d8	4c 8b f0	 mov	 r14, rax

; 1260 :         if (fromlist == NULL) {

  000db	48 85 c0	 test	 rax, rax
  000de	0f 84 ad 08 00
	00		 je	 $LN12@PyImport_I@4

; 1261 :             goto error;
; 1262 :         }
; 1263 :     }
; 1264 :     else {

  000e4	eb 3c		 jmp	 SHORT $LN106@PyImport_I@4
$LN90@PyImport_I@4:

; 1265 :         fromlist = given_fromlist;
; 1266 :         Py_INCREF(fromlist);

  000e6	e8 00 00 00 00	 call	 _Py_PXCTX
  000eb	85 c0		 test	 eax, eax
  000ed	75 33		 jne	 SHORT $LN106@PyImport_I@4
  000ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000fd	4d 8b ce	 mov	 r9, r14
  00100	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00106	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0010e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00113	85 c0		 test	 eax, eax
  00115	75 07		 jne	 SHORT $LN105@PyImport_I@4
  00117	41 f6 46 20 20	 test	 BYTE PTR [r14+32], 32	; 00000020H
  0011c	74 04		 je	 SHORT $LN106@PyImport_I@4
$LN105@PyImport_I@4:
  0011e	49 ff 46 50	 inc	 QWORD PTR [r14+80]
$LN106@PyImport_I@4:

; 1267 :     }
; 1268 :     if (name == NULL) {

  00122	4d 85 ff	 test	 r15, r15
  00125	75 18		 jne	 SHORT $LN87@PyImport_I@4

; 1269 :         PyErr_SetString(PyExc_ValueError, "Empty module name");

  00127	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0012e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LAFLLONM@Empty?5module?5name?$AA@
  00135	e8 00 00 00 00	 call	 PyErr_SetString

; 1270 :         goto error;

  0013a	e9 52 08 00 00	 jmp	 $LN12@PyImport_I@4
$LN87@PyImport_I@4:

; 1271 :     }
; 1272 : 
; 1273 :     /* The below code is importlib.__import__() & _gcd_import(), ported to C
; 1274 :        for added performance. */
; 1275 : 
; 1276 :     if (!PyUnicode_Check(name)) {

  0013f	49 8b 47 58	 mov	 rax, QWORD PTR [r15+88]
  00143	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0014d	75 18		 jne	 SHORT $LN86@PyImport_I@4

; 1277 :         PyErr_SetString(PyExc_TypeError, "module name must be a string");

  0014f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00156	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@KONBMHIP@module?5name?5must?5be?5a?5string?$AA@
  0015d	e8 00 00 00 00	 call	 PyErr_SetString

; 1278 :         goto error;

  00162	e9 2a 08 00 00	 jmp	 $LN12@PyImport_I@4
$LN86@PyImport_I@4:

; 1279 :     }
; 1280 :     else if (PyUnicode_READY(name) < 0) {

  00167	41 f6 47 70 80	 test	 BYTE PTR [r15+112], 128	; 00000080H
  0016c	75 10		 jne	 SHORT $LN180@PyImport_I@4
  0016e	49 8b cf	 mov	 rcx, r15
  00171	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00176	85 c0		 test	 eax, eax
  00178	0f 88 13 08 00
	00		 js	 $LN12@PyImport_I@4
$LN180@PyImport_I@4:

; 1281 :         goto error;
; 1282 :     }
; 1283 :     if (level < 0) {

  0017e	85 f6		 test	 esi, esi
  00180	79 18		 jns	 SHORT $LN83@PyImport_I@4

; 1284 :         PyErr_SetString(PyExc_ValueError, "level must be >= 0");

  00182	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00189	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@LPKGOAAE@level?5must?5be?5?$DO?$DN?50?$AA@
  00190	e8 00 00 00 00	 call	 PyErr_SetString

; 1285 :         goto error;

  00195	e9 f7 07 00 00	 jmp	 $LN12@PyImport_I@4
$LN83@PyImport_I@4:
  0019a	48 89 9c 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rbx
  001a2	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 1286 :     }
; 1287 :     else if (level > 0) {

  001a7	85 f6		 test	 esi, esi
  001a9	0f 8e 56 01 00
	00		 jle	 $LN81@PyImport_I@4

; 1288 :         package = _PyDict_GetItemId(globals, &PyId___package__);

  001af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001b5	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  001be	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___package__@?1??PyImport_ImportModuleLevelObject@@9@9
  001c3	48 8b 3c c8	 mov	 rdi, QWORD PTR [rax+rcx*8]
  001c7	49 8b cc	 mov	 rcx, r12
  001ca	48 03 d7	 add	 rdx, rdi
  001cd	e8 00 00 00 00	 call	 _PyDict_GetItemId
  001d2	48 8b d8	 mov	 rbx, rax

; 1289 :         if (package != NULL && package != Py_None) {

  001d5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001dc	48 85 db	 test	 rbx, rbx
  001df	74 3a		 je	 SHORT $LN80@PyImport_I@4
  001e1	48 3b d8	 cmp	 rbx, rax
  001e4	74 35		 je	 SHORT $LN80@PyImport_I@4

; 1290 :             Py_INCREF(package);

  001e6	48 8b cb	 mov	 rcx, rbx
  001e9	e8 00 00 00 00	 call	 _Py_IncRef

; 1291 :             if (!PyUnicode_Check(package)) {

  001ee	4c 8b 5b 58	 mov	 r11, QWORD PTR [rbx+88]
  001f2	41 f7 83 00 01
	00 00 00 00 00
	10		 test	 DWORD PTR [r11+256], 268435456 ; 10000000H
  001fd	0f 85 d1 00 00
	00		 jne	 $LN74@PyImport_I@4

; 1292 :                 PyErr_SetString(PyExc_TypeError, "package must be a string");

  00203	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0020a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@POADJCGB@package?5must?5be?5a?5string?$AA@
  00211	e8 00 00 00 00	 call	 PyErr_SetString

; 1293 :                 goto error;

  00216	e9 ea 01 00 00	 jmp	 $LN16@PyImport_I@4
$LN80@PyImport_I@4:

; 1294 :             }
; 1295 :         }
; 1296 :         else {
; 1297 :             package = _PyDict_GetItemId(globals, &PyId___name__);

  0021b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___name__@?1??PyImport_ImportModuleLevelObject@@9@9
  00220	49 8b cc	 mov	 rcx, r12
  00223	48 03 d7	 add	 rdx, rdi
  00226	e8 00 00 00 00	 call	 _PyDict_GetItemId
  0022b	48 8b d8	 mov	 rbx, rax

; 1298 :             if (package == NULL) {

  0022e	48 85 c0	 test	 rax, rax
  00231	75 18		 jne	 SHORT $LN77@PyImport_I@4

; 1299 :                 PyErr_SetString(PyExc_KeyError, "'__name__' not in globals");

  00233	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  0023a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JBIMDHBD@?8__name__?8?5not?5in?5globals?$AA@
  00241	e8 00 00 00 00	 call	 PyErr_SetString

; 1300 :                 goto error;

  00246	e9 39 07 00 00	 jmp	 $LN194@PyImport_I@4
$LN77@PyImport_I@4:

; 1301 :             }
; 1302 :             else if (!PyUnicode_Check(package)) {

  0024b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0024f	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00259	75 13		 jne	 SHORT $LN75@PyImport_I@4

; 1303 :                 PyErr_SetString(PyExc_TypeError, "__name__ must be a string");

  0025b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00262	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@EIIOJEDD@__name__?5must?5be?5a?5string?$AA@
  00269	e8 00 00 00 00	 call	 PyErr_SetString
$LN75@PyImport_I@4:

; 1304 :             }
; 1305 :             Py_INCREF(package);

  0026e	48 8b cb	 mov	 rcx, rbx
  00271	e8 00 00 00 00	 call	 _Py_IncRef

; 1306 : 
; 1307 :             if (_PyDict_GetItemId(globals, &PyId___path__) == NULL) {

  00276	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___path__@?1??PyImport_ImportModuleLevelObject@@9@9
  0027b	49 8b cc	 mov	 rcx, r12
  0027e	48 03 d7	 add	 rdx, rdi
  00281	e8 00 00 00 00	 call	 _PyDict_GetItemId
  00286	48 85 c0	 test	 rax, rax
  00289	75 49		 jne	 SHORT $LN74@PyImport_I@4

; 1308 :                 PyObject *partition = NULL;
; 1309 :                 PyObject *borrowed_dot = _PyUnicode_FromId(&single_dot);

  0028b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?single_dot@?1??PyImport_ImportModuleLevelObject@@9@9
  00290	48 03 cf	 add	 rcx, rdi
  00293	e8 00 00 00 00	 call	 _PyUnicode_FromId

; 1310 :                 if (borrowed_dot == NULL) {

  00298	48 85 c0	 test	 rax, rax
  0029b	0f 84 64 01 00
	00		 je	 $LN16@PyImport_I@4

; 1311 :                     goto error;
; 1312 :                 }
; 1313 :                 partition = PyUnicode_RPartition(package, borrowed_dot);

  002a1	48 8b d0	 mov	 rdx, rax
  002a4	48 8b cb	 mov	 rcx, rbx
  002a7	e8 00 00 00 00	 call	 PyUnicode_RPartition

; 1314 :                 Py_DECREF(package);

  002ac	48 8b cb	 mov	 rcx, rbx
  002af	48 8b f8	 mov	 rdi, rax
  002b2	e8 00 00 00 00	 call	 _Py_DecRef

; 1315 :                 if (partition == NULL) {

  002b7	48 85 ff	 test	 rdi, rdi
  002ba	0f 84 45 01 00
	00		 je	 $LN16@PyImport_I@4

; 1316 :                     goto error;
; 1317 :                 }
; 1318 :                 package = PyTuple_GET_ITEM(partition, 0);

  002c0	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]

; 1319 :                 Py_INCREF(package);

  002c4	48 8b cb	 mov	 rcx, rbx
  002c7	e8 00 00 00 00	 call	 _Py_IncRef

; 1320 :                 Py_DECREF(partition);

  002cc	48 8b cf	 mov	 rcx, rdi
  002cf	e8 00 00 00 00	 call	 _Py_DecRef
$LN74@PyImport_I@4:

; 1321 :             }
; 1322 :         }
; 1323 : 
; 1324 :         if (PyDict_GetItem(interp->modules, package) == NULL) {

  002d4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR interp$1$[rsp]
  002d9	48 8b d3	 mov	 rdx, rbx
  002dc	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  002e0	e8 00 00 00 00	 call	 PyDict_GetItem
  002e5	48 85 c0	 test	 rax, rax
  002e8	75 4b		 jne	 SHORT $LN70@PyImport_I@4

; 1325 :             PyErr_Format(PyExc_SystemError,
; 1326 :                     "Parent module %R not loaded, cannot perform relative "
; 1327 :                     "import", package);

  002ea	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  002f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@IPEKCNMG@Parent?5module?5?$CFR?5not?5loaded?0?5can@
  002f8	4c 8b c3	 mov	 r8, rbx
  002fb	e8 00 00 00 00	 call	 PyErr_Format

; 1328 :             goto error;

  00300	e9 00 01 00 00	 jmp	 $LN16@PyImport_I@4
$LN81@PyImport_I@4:

; 1329 :         }
; 1330 :     }
; 1331 :     else {  /* level == 0 */
; 1332 :         if (PyUnicode_GET_LENGTH(name) == 0) {

  00305	49 39 6f 60	 cmp	 QWORD PTR [r15+96], rbp
  00309	75 18		 jne	 SHORT $LN69@PyImport_I@4

; 1333 :             PyErr_SetString(PyExc_ValueError, "Empty module name");

  0030b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00312	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LAFLLONM@Empty?5module?5name?$AA@
  00319	e8 00 00 00 00	 call	 PyErr_SetString

; 1334 :             goto error;

  0031e	e9 61 06 00 00	 jmp	 $LN194@PyImport_I@4
$LN69@PyImport_I@4:

; 1335 :         }
; 1336 :         package = Py_None;

  00323	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1337 :         Py_INCREF(package);

  0032a	48 8b c8	 mov	 rcx, rax
  0032d	48 8b d8	 mov	 rbx, rax
  00330	e8 00 00 00 00	 call	 _Py_IncRef
$LN70@PyImport_I@4:

; 1338 :     }
; 1339 : 
; 1340 :     if (level > 0) {

  00335	85 f6		 test	 esi, esi
  00337	0f 8e 55 01 00
	00		 jle	 $LN68@PyImport_I@4

; 1341 :         Py_ssize_t last_dot = PyUnicode_GET_LENGTH(package);

  0033d	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]

; 1342 :         PyObject *base = NULL;
; 1343 :         int level_up = 1;
; 1344 : 
; 1345 :         for (level_up = 1; level_up < level; level_up += 1) {

  00341	bf 01 00 00 00	 mov	 edi, 1
  00346	3b f7		 cmp	 esi, edi
  00348	7e 3a		 jle	 SHORT $LN65@PyImport_I@4
  0034a	66 0f 1f 44 00
	00		 npad	 6
$LL67@PyImport_I@4:

; 1346 :             last_dot = PyUnicode_FindChar(package, '.', 0, last_dot, -1);

  00350	45 33 c0	 xor	 r8d, r8d
  00353	4c 8b c8	 mov	 r9, rax
  00356	48 8b cb	 mov	 rcx, rbx
  00359	41 8d 50 2e	 lea	 edx, QWORD PTR [r8+46]
  0035d	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  00365	e8 00 00 00 00	 call	 PyUnicode_FindChar

; 1347 :             if (last_dot == -2) {

  0036a	48 83 f8 fe	 cmp	 rax, -2
  0036e	0f 84 91 00 00
	00		 je	 $LN16@PyImport_I@4

; 1348 :                 goto error;
; 1349 :             }
; 1350 :             else if (last_dot == -1) {

  00374	48 83 f8 ff	 cmp	 rax, -1
  00378	0f 84 fc 00 00
	00		 je	 $LN177@PyImport_I@4

; 1342 :         PyObject *base = NULL;
; 1343 :         int level_up = 1;
; 1344 : 
; 1345 :         for (level_up = 1; level_up < level; level_up += 1) {

  0037e	ff c7		 inc	 edi
  00380	3b fe		 cmp	 edi, esi
  00382	7c cc		 jl	 SHORT $LL67@PyImport_I@4
$LN65@PyImport_I@4:

; 1355 :             }
; 1356 :         }
; 1357 :         base = PyUnicode_Substring(package, 0, last_dot);

  00384	4c 8b c0	 mov	 r8, rax
  00387	33 d2		 xor	 edx, edx
  00389	48 8b cb	 mov	 rcx, rbx
  0038c	e8 00 00 00 00	 call	 PyUnicode_Substring
  00391	48 8b f8	 mov	 rdi, rax

; 1358 :         if (PyUnicode_GET_LENGTH(name) > 0) {

  00394	49 39 6f 60	 cmp	 QWORD PTR [r15+96], rbp
  00398	0f 8e ff 00 00
	00		 jle	 $LN56@PyImport_I@4

; 1359 :             PyObject *borrowed_dot, *seq = NULL;
; 1360 : 
; 1361 :             borrowed_dot = _PyUnicode_FromId(&single_dot);

  0039e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  003a4	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  003ad	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?single_dot@?1??PyImport_ImportModuleLevelObject@@9@9
  003b2	48 03 0c d0	 add	 rcx, QWORD PTR [rax+rdx*8]
  003b6	e8 00 00 00 00	 call	 _PyUnicode_FromId

; 1362 :             seq = PyTuple_Pack(2, base, name);

  003bb	4d 8b c7	 mov	 r8, r15
  003be	48 8b d7	 mov	 rdx, rdi
  003c1	b9 02 00 00 00	 mov	 ecx, 2
  003c6	4c 8b e8	 mov	 r13, rax
  003c9	e8 00 00 00 00	 call	 PyTuple_Pack

; 1363 :             Py_DECREF(base);

  003ce	48 8b cf	 mov	 rcx, rdi
  003d1	48 8b f0	 mov	 rsi, rax
  003d4	e8 00 00 00 00	 call	 _Py_DecRef

; 1364 :             if (borrowed_dot == NULL || seq == NULL) {

  003d9	4d 85 ed	 test	 r13, r13
  003dc	74 24		 je	 SHORT $LN186@PyImport_I@4
  003de	48 85 f6	 test	 rsi, rsi
  003e1	74 1f		 je	 SHORT $LN186@PyImport_I@4

; 1365 :                 goto error;
; 1366 :             }
; 1367 : 
; 1368 :             abs_name = PyUnicode_Join(borrowed_dot, seq);

  003e3	48 8b d6	 mov	 rdx, rsi
  003e6	49 8b cd	 mov	 rcx, r13
  003e9	e8 00 00 00 00	 call	 PyUnicode_Join

; 1369 :             Py_DECREF(seq);

  003ee	48 8b ce	 mov	 rcx, rsi
  003f1	48 8b f8	 mov	 rdi, rax
  003f4	e8 00 00 00 00	 call	 _Py_DecRef

; 1370 :             if (abs_name == NULL) {

  003f9	48 85 ff	 test	 rdi, rdi
  003fc	0f 85 9b 00 00
	00		 jne	 $LN56@PyImport_I@4
$LN186@PyImport_I@4:

; 1534 :     Py_XDECREF(mod);

  00402	45 33 ed	 xor	 r13d, r13d
$LN16@PyImport_I@4:

; 1535 :     Py_XDECREF(package);

  00405	48 85 db	 test	 rbx, rbx
  00408	0f 84 76 05 00
	00		 je	 $LN194@PyImport_I@4
  0040e	e8 00 00 00 00	 call	 _Py_PXCTX
  00413	85 c0		 test	 eax, eax
  00415	0f 85 69 05 00
	00		 jne	 $LN194@PyImport_I@4
  0041b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0041f	a8 20		 test	 al, 32			; 00000020H
  00421	0f 85 55 05 00
	00		 jne	 $LN146@PyImport_I@4
  00427	84 c0		 test	 al, al
  00429	0f 88 4d 05 00
	00		 js	 $LN146@PyImport_I@4
  0042f	a8 02		 test	 al, 2
  00431	0f 85 4d 05 00
	00		 jne	 $LN194@PyImport_I@4
  00437	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0043b	0f 85 43 05 00
	00		 jne	 $LN194@PyImport_I@4
  00441	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00448	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0044f	4c 8b cb	 mov	 r9, rbx
  00452	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00458	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00460	e8 00 00 00 00	 call	 _PyParallel_Guard
  00465	48 8b cb	 mov	 rcx, rbx
  00468	85 c0		 test	 eax, eax
  0046a	0f 84 00 05 00
	00		 je	 $LN151@PyImport_I@4
  00470	e8 00 00 00 00	 call	 _Px_Dealloc
  00475	e9 0a 05 00 00	 jmp	 $LN194@PyImport_I@4
$LN177@PyImport_I@4:

; 1351 :                 PyErr_SetString(PyExc_ValueError,
; 1352 :                                 "attempted relative import beyond top-level "
; 1353 :                                 "package");

  0047a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00481	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@GKODJAFA@attempted?5relative?5import?5beyond@
  00488	e8 00 00 00 00	 call	 PyErr_SetString

; 1354 :                 goto error;

  0048d	e9 73 ff ff ff	 jmp	 $LN16@PyImport_I@4
$LN68@PyImport_I@4:

; 1371 :                 goto error;
; 1372 :             }
; 1373 :         }
; 1374 :         else {
; 1375 :             abs_name = base;
; 1376 :         }
; 1377 :     }
; 1378 :     else {
; 1379 :         abs_name = name;
; 1380 :         Py_INCREF(abs_name);

  00492	49 8b cf	 mov	 rcx, r15
  00495	49 8b ff	 mov	 rdi, r15
  00498	e8 00 00 00 00	 call	 _Py_IncRef
$LN56@PyImport_I@4:

; 1381 :     }
; 1382 : 
; 1383 : #ifdef WITH_THREAD
; 1384 :     _PyImport_AcquireLock();

  0049d	e8 00 00 00 00	 call	 _PyImport_AcquireLock

; 1385 : #endif
; 1386 :    /* From this point forward, goto error_with_unlock! */
; 1387 :     if (PyDict_Check(globals)) {

  004a2	4d 8b 5c 24 58	 mov	 r11, QWORD PTR [r12+88]
  004a7	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___import__@?1??PyImport_ImportModuleLevelObject@@9@9
  004ac	41 f7 83 00 01
	00 00 00 00 00
	20		 test	 DWORD PTR [r11+256], 536870912 ; 20000000H
  004b7	74 2b		 je	 SHORT $LN181@PyImport_I@4

; 1388 :         builtins_import = _PyDict_GetItemId(globals, &PyId___import__);

  004b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  004bf	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  004c8	4c 8b 2c c8	 mov	 r13, QWORD PTR [rax+rcx*8]
  004cc	49 8b cc	 mov	 rcx, r12
  004cf	49 03 d5	 add	 rdx, r13
  004d2	e8 00 00 00 00	 call	 _PyDict_GetItemId
  004d7	48 8b f0	 mov	 rsi, rax

; 1389 :     }
; 1390 :     if (builtins_import == NULL) {

  004da	48 85 c0	 test	 rax, rax
  004dd	75 46		 jne	 SHORT $LN53@PyImport_I@4
  004df	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___import__@?1??PyImport_ImportModuleLevelObject@@9@9
$LN181@PyImport_I@4:

; 1391 :         builtins_import = _PyDict_GetItemId(interp->builtins, &PyId___import__);

  004e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  004ea	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  004f3	4c 8b 2c c8	 mov	 r13, QWORD PTR [rax+rcx*8]
  004f7	48 8b 44 24 30	 mov	 rax, QWORD PTR interp$1$[rsp]
  004fc	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00500	49 03 d5	 add	 rdx, r13
  00503	e8 00 00 00 00	 call	 _PyDict_GetItemId
  00508	48 8b f0	 mov	 rsi, rax

; 1392 :         if (builtins_import == NULL) {

  0050b	48 85 c0	 test	 rax, rax
  0050e	75 15		 jne	 SHORT $LN53@PyImport_I@4

; 1393 :             PyErr_SetString(PyExc_ImportError, "__import__ not found");

  00510	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  00517	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@FMMPICPA@__import__?5not?5found?$AA@
  0051e	e8 00 00 00 00	 call	 PyErr_SetString

; 1394 :             goto error_with_unlock;

  00523	eb 5b		 jmp	 SHORT $error_with_unlock$122651
$LN53@PyImport_I@4:

; 1395 :         }
; 1396 :     }
; 1397 :     Py_INCREF(builtins_import);

  00525	48 8b ce	 mov	 rcx, rsi
  00528	e8 00 00 00 00	 call	 _Py_IncRef

; 1398 : 
; 1399 :     mod = PyDict_GetItem(interp->modules, abs_name);

  0052d	48 8b 44 24 30	 mov	 rax, QWORD PTR interp$1$[rsp]
  00532	48 8b d7	 mov	 rdx, rdi
  00535	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00539	e8 00 00 00 00	 call	 PyDict_GetItem
  0053e	48 8b e8	 mov	 rbp, rax

; 1400 :     if (mod == Py_None) {

  00541	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00548	48 3b e8	 cmp	 rbp, rax
  0054b	0f 85 c3 00 00
	00		 jne	 $LN52@PyImport_I@4

; 1401 :         PyObject *msg = PyUnicode_FromFormat("import of %R halted; "
; 1402 :                                              "None in sys.modules", abs_name);

  00551	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@FDDAKFLB@import?5of?5?$CFR?5halted?$DL?5None?5in?5sys@
  00558	48 8b d7	 mov	 rdx, rdi
  0055b	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00560	48 8b e8	 mov	 rbp, rax

; 1403 :         if (msg != NULL) {

  00563	48 85 c0	 test	 rax, rax
  00566	74 16		 je	 SHORT $LN51@PyImport_I@4

; 1404 :             PyErr_SetImportError(msg, abs_name, NULL);

  00568	45 33 c0	 xor	 r8d, r8d
  0056b	48 8b d7	 mov	 rdx, rdi
  0056e	48 8b c8	 mov	 rcx, rax
  00571	e8 00 00 00 00	 call	 PyErr_SetImportError

; 1405 :             Py_DECREF(msg);

  00576	48 8b cd	 mov	 rcx, rbp
  00579	e8 00 00 00 00	 call	 _Py_DecRef
$LN51@PyImport_I@4:

; 1406 :         }
; 1407 :         mod = NULL;

  0057e	33 ed		 xor	 ebp, ebp
$error_with_unlock$122651:

; 1522 :     }
; 1523 :     goto error;
; 1524 : 
; 1525 :   error_with_unlock:
; 1526 : #ifdef WITH_THREAD
; 1527 :     if (_PyImport_ReleaseLock() < 0) {

  00580	e8 00 00 00 00	 call	 _PyImport_ReleaseLock
  00585	85 c0		 test	 eax, eax
  00587	79 13		 jns	 SHORT $LN192@PyImport_I@4
$LN197@PyImport_I@4:

; 1528 :         PyErr_SetString(PyExc_RuntimeError, "not holding the import lock");

  00589	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00590	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@JAELALKO@not?5holding?5the?5import?5lock?$AA@
  00597	e8 00 00 00 00	 call	 PyErr_SetString
$LN192@PyImport_I@4:

; 1518 :         final_mod = _PyObject_CallMethodObjIdArgs(interp->importlib,
; 1519 :                                                   &PyId__handle_fromlist, mod,
; 1520 :                                                   fromlist, builtins_import,
; 1521 :                                                   NULL);

  0059c	45 33 ed	 xor	 r13d, r13d
$error$122547:

; 1529 :     }
; 1530 : #endif
; 1531 :   error:
; 1532 :     Py_XDECREF(abs_name);

  0059f	48 85 ff	 test	 rdi, rdi
  005a2	0f 84 d9 02 00
	00		 je	 $LN24@PyImport_I@4
  005a8	e8 00 00 00 00	 call	 _Py_PXCTX
  005ad	85 c0		 test	 eax, eax
  005af	0f 85 cc 02 00
	00		 jne	 $LN24@PyImport_I@4
  005b5	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  005b9	a8 20		 test	 al, 32			; 00000020H
  005bb	0f 85 b8 02 00
	00		 jne	 $LN113@PyImport_I@4
  005c1	84 c0		 test	 al, al
  005c3	0f 88 b0 02 00
	00		 js	 $LN113@PyImport_I@4
  005c9	a8 02		 test	 al, 2
  005cb	0f 85 b0 02 00
	00		 jne	 $LN24@PyImport_I@4
  005d1	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  005d5	0f 85 a6 02 00
	00		 jne	 $LN24@PyImport_I@4
  005db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  005e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  005e9	4c 8b cf	 mov	 r9, rdi
  005ec	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  005f2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  005fa	e8 00 00 00 00	 call	 _PyParallel_Guard
  005ff	48 8b cf	 mov	 rcx, rdi
  00602	85 c0		 test	 eax, eax
  00604	0f 84 63 02 00
	00		 je	 $LN118@PyImport_I@4
  0060a	e8 00 00 00 00	 call	 _Px_Dealloc
  0060f	e9 6d 02 00 00	 jmp	 $LN24@PyImport_I@4
$LN52@PyImport_I@4:

; 1408 :         goto error_with_unlock;
; 1409 :     }
; 1410 :     else if (mod != NULL) {

  00614	48 85 ed	 test	 rbp, rbp
  00617	0f 84 c4 00 00
	00		 je	 $LN49@PyImport_I@4

; 1411 :         PyObject *value;
; 1412 :         int initializing = 0;
; 1413 : 
; 1414 :         Py_INCREF(mod);

  0061d	48 8b cd	 mov	 rcx, rbp
  00620	e8 00 00 00 00	 call	 _Py_IncRef

; 1415 :         /* Optimization: only call _bootstrap._lock_unlock_module() if
; 1416 :            __initializing__ is true.
; 1417 :            NOTE: because of this, __initializing__ must be set *before*
; 1418 :            stuffing the new module in sys.modules.
; 1419 :          */
; 1420 :         value = _PyObject_GetAttrId(mod, &PyId___initializing__);

  00625	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___initializing__@?1??PyImport_ImportModuleLevelObject@@9@9
  0062a	48 8b cd	 mov	 rcx, rbp
  0062d	49 03 d5	 add	 rdx, r13
  00630	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00635	4c 8b f8	 mov	 r15, rax

; 1421 :         if (value == NULL)

  00638	48 85 c0	 test	 rax, rax

; 1422 :             PyErr_Clear();
; 1423 :         else {

  0063b	0f 84 8d 00 00
	00		 je	 $LN195@PyImport_I@4

; 1424 :             initializing = PyObject_IsTrue(value);

  00641	48 8b c8	 mov	 rcx, rax
  00644	e8 00 00 00 00	 call	 PyObject_IsTrue

; 1425 :             Py_DECREF(value);

  00649	49 8b cf	 mov	 rcx, r15
  0064c	89 84 24 88 00
	00 00		 mov	 DWORD PTR initializing$1$[rsp], eax
  00653	e8 00 00 00 00	 call	 _Py_DecRef

; 1426 :             if (initializing == -1)

  00658	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR initializing$1$[rsp]
  0065f	83 f8 ff	 cmp	 eax, -1

; 1428 :         }
; 1429 :         if (initializing > 0) {

  00662	74 6a		 je	 SHORT $LN195@PyImport_I@4
  00664	85 c0		 test	 eax, eax
  00666	7e 6b		 jle	 SHORT $LN45@PyImport_I@4

; 1430 :             /* _bootstrap._lock_unlock_module() releases the import lock */
; 1431 :             value = _PyObject_CallMethodObjIdArgs(interp->importlib,
; 1432 :                                             &PyId__lock_unlock_module, abs_name,
; 1433 :                                             NULL);

  00668	48 8b 44 24 30	 mov	 rax, QWORD PTR interp$1$[rsp]
  0066d	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId__lock_unlock_module@?1??PyImport_ImportModuleLevelObject@@9@9
  00672	45 33 c9	 xor	 r9d, r9d
  00675	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00679	49 03 d5	 add	 rdx, r13
  0067c	4c 8b c7	 mov	 r8, rdi
  0067f	e8 00 00 00 00	 call	 _PyObject_CallMethodObjIdArgs

; 1434 :             if (value == NULL)

  00684	48 85 c0	 test	 rax, rax
  00687	0f 84 0f ff ff
	ff		 je	 $LN192@PyImport_I@4

; 1435 :                 goto error;
; 1436 :             Py_DECREF(value);

  0068d	48 8b c8	 mov	 rcx, rax
  00690	e8 00 00 00 00	 call	 _Py_DecRef
$LN183@PyImport_I@4:

; 1437 :         }
; 1438 :         else {

  00695	4c 8b bc 24 80
	00 00 00	 mov	 r15, QWORD PTR name$[rsp]
$LN40@PyImport_I@4:

; 1453 :             goto error;
; 1454 :         }
; 1455 :     }
; 1456 :     /* From now on we don't hold the import lock anymore. */
; 1457 : 
; 1458 :     if (PyObject_Not(fromlist)) {

  0069d	49 8b ce	 mov	 rcx, r14
  006a0	e8 00 00 00 00	 call	 PyObject_Not
  006a5	85 c0		 test	 eax, eax
  006a7	0f 84 8e 01 00
	00		 je	 $LN39@PyImport_I@4

; 1459 :         if (level == 0 || PyUnicode_GET_LENGTH(name) > 0) {

  006ad	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR level$[rsp], 0
  006b5	74 5d		 je	 SHORT $LN37@PyImport_I@4
  006b7	49 83 7f 60 00	 cmp	 QWORD PTR [r15+96], 0
  006bc	7f 56		 jg	 SHORT $LN37@PyImport_I@4

; 1510 :             }
; 1511 :         }
; 1512 :         else {
; 1513 :             final_mod = mod;
; 1514 :             Py_INCREF(mod);

  006be	48 8b cd	 mov	 rcx, rbp
  006c1	4c 8b ed	 mov	 r13, rbp
  006c4	e8 00 00 00 00	 call	 _Py_IncRef
  006c9	e9 d1 fe ff ff	 jmp	 $error$122547
$LN195@PyImport_I@4:

; 1427 :                 PyErr_Clear();

  006ce	e8 00 00 00 00	 call	 PyErr_Clear
$LN45@PyImport_I@4:

; 1439 : #ifdef WITH_THREAD
; 1440 :             if (_PyImport_ReleaseLock() < 0) {

  006d3	e8 00 00 00 00	 call	 _PyImport_ReleaseLock
  006d8	85 c0		 test	 eax, eax
  006da	79 b9		 jns	 SHORT $LN183@PyImport_I@4

; 1441 :                 PyErr_SetString(PyExc_RuntimeError, "not holding the import lock");
; 1442 :                 goto error;

  006dc	e9 a8 fe ff ff	 jmp	 $LN197@PyImport_I@4
$LN49@PyImport_I@4:

; 1443 :             }
; 1444 : #endif
; 1445 :         }
; 1446 :     }
; 1447 :     else {
; 1448 :         /* _bootstrap._find_and_load() releases the import lock */
; 1449 :         mod = _PyObject_CallMethodObjIdArgs(interp->importlib,
; 1450 :                                             &PyId__find_and_load, abs_name,
; 1451 :                                             builtins_import, NULL);

  006e1	48 8b 44 24 30	 mov	 rax, QWORD PTR interp$1$[rsp]
  006e6	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId__find_and_load@?1??PyImport_ImportModuleLevelObject@@9@9
  006eb	4c 8b ce	 mov	 r9, rsi
  006ee	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  006f2	4c 8b c7	 mov	 r8, rdi
  006f5	49 03 d5	 add	 rdx, r13
  006f8	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00701	e8 00 00 00 00	 call	 _PyObject_CallMethodObjIdArgs
  00706	48 8b e8	 mov	 rbp, rax

; 1452 :         if (mod == NULL) {

  00709	48 85 c0	 test	 rax, rax
  0070c	0f 84 8a fe ff
	ff		 je	 $LN192@PyImport_I@4
  00712	eb 89		 jmp	 SHORT $LN40@PyImport_I@4
$LN37@PyImport_I@4:

; 1460 :             PyObject *front = NULL;
; 1461 :             PyObject *partition = NULL;
; 1462 :             PyObject *borrowed_dot = _PyUnicode_FromId(&single_dot);

  00714	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?single_dot@?1??PyImport_ImportModuleLevelObject@@9@9
  00719	49 03 cd	 add	 rcx, r13
  0071c	e8 00 00 00 00	 call	 _PyUnicode_FromId

; 1463 : 
; 1464 :             if (borrowed_dot == NULL) {

  00721	48 85 c0	 test	 rax, rax
  00724	0f 84 72 fe ff
	ff		 je	 $LN192@PyImport_I@4

; 1465 :                 goto error;
; 1466 :             }
; 1467 : 
; 1468 :             partition = PyUnicode_Partition(name, borrowed_dot);

  0072a	48 8b d0	 mov	 rdx, rax
  0072d	49 8b cf	 mov	 rcx, r15
  00730	e8 00 00 00 00	 call	 PyUnicode_Partition
  00735	4c 8b e8	 mov	 r13, rax

; 1469 :             if (partition == NULL) {

  00738	48 85 c0	 test	 rax, rax
  0073b	0f 84 5b fe ff
	ff		 je	 $LN192@PyImport_I@4

; 1470 :                 goto error;
; 1471 :             }
; 1472 : 
; 1473 :             if (PyUnicode_GET_LENGTH(PyTuple_GET_ITEM(partition, 1)) == 0) {

  00741	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00745	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0074a	75 18		 jne	 SHORT $LN34@PyImport_I@4

; 1474 :                 /* No dot in module name, simple exit */
; 1475 :                 Py_DECREF(partition);

  0074c	49 8b cd	 mov	 rcx, r13
  0074f	e8 00 00 00 00	 call	 _Py_DecRef

; 1476 :                 final_mod = mod;
; 1477 :                 Py_INCREF(mod);

  00754	48 8b cd	 mov	 rcx, rbp
  00757	4c 8b ed	 mov	 r13, rbp
  0075a	e8 00 00 00 00	 call	 _Py_IncRef

; 1478 :                 goto error;

  0075f	e9 3b fe ff ff	 jmp	 $error$122547
$LN34@PyImport_I@4:

; 1479 :             }
; 1480 : 
; 1481 :             front = PyTuple_GET_ITEM(partition, 0);

  00764	4d 8b 7d 70	 mov	 r15, QWORD PTR [r13+112]

; 1482 :             Py_INCREF(front);

  00768	49 8b cf	 mov	 rcx, r15
  0076b	e8 00 00 00 00	 call	 _Py_IncRef

; 1483 :             Py_DECREF(partition);

  00770	49 8b cd	 mov	 rcx, r13
  00773	e8 00 00 00 00	 call	 _Py_DecRef

; 1484 : 
; 1485 :             if (level == 0) {

  00778	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR level$[rsp], 0
  00780	75 1e		 jne	 SHORT $LN33@PyImport_I@4

; 1486 :                 final_mod = PyObject_CallFunctionObjArgs(builtins_import, front, NULL);

  00782	45 33 c0	 xor	 r8d, r8d
  00785	49 8b d7	 mov	 rdx, r15
  00788	48 8b ce	 mov	 rcx, rsi
  0078b	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs

; 1487 :                 Py_DECREF(front);

  00790	49 8b cf	 mov	 rcx, r15
  00793	4c 8b e8	 mov	 r13, rax
  00796	e8 00 00 00 00	 call	 _Py_DecRef

; 1488 :             }
; 1489 :             else {

  0079b	e9 ff fd ff ff	 jmp	 $error$122547
$LN33@PyImport_I@4:

; 1490 :                 Py_ssize_t cut_off = PyUnicode_GET_LENGTH(name) -
; 1491 :                                         PyUnicode_GET_LENGTH(front);
; 1492 :                 Py_ssize_t abs_name_len = PyUnicode_GET_LENGTH(abs_name);

  007a0	4c 8b 47 60	 mov	 r8, QWORD PTR [rdi+96]
  007a4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR name$[rsp]

; 1493 :                 PyObject *to_return = PyUnicode_Substring(abs_name, 0,
; 1494 :                                                         abs_name_len - cut_off);

  007ac	33 d2		 xor	 edx, edx
  007ae	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  007b2	48 8b cf	 mov	 rcx, rdi
  007b5	49 2b 47 60	 sub	 rax, QWORD PTR [r15+96]
  007b9	4c 2b c0	 sub	 r8, rax
  007bc	e8 00 00 00 00	 call	 PyUnicode_Substring

; 1495 :                 Py_DECREF(front);

  007c1	49 8b cf	 mov	 rcx, r15
  007c4	4c 8b e8	 mov	 r13, rax
  007c7	e8 00 00 00 00	 call	 _Py_DecRef

; 1496 :                 if (to_return == NULL) {

  007cc	4d 85 ed	 test	 r13, r13
  007cf	0f 84 c7 fd ff
	ff		 je	 $LN192@PyImport_I@4

; 1497 :                     goto error;
; 1498 :                 }
; 1499 : 
; 1500 :                 final_mod = PyDict_GetItem(interp->modules, to_return);

  007d5	48 8b 44 24 30	 mov	 rax, QWORD PTR interp$1$[rsp]
  007da	49 8b d5	 mov	 rdx, r13
  007dd	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  007e1	e8 00 00 00 00	 call	 PyDict_GetItem
  007e6	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR final_mod$1$[rsp], rax

; 1501 :                 if (final_mod == NULL) {

  007ee	48 85 c0	 test	 rax, rax
  007f1	75 2b		 jne	 SHORT $LN30@PyImport_I@4

; 1502 :                     PyErr_Format(PyExc_KeyError,
; 1503 :                                  "%R not in sys.modules as expected",
; 1504 :                                  to_return);

  007f3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  007fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@JFELPEKG@?$CFR?5not?5in?5sys?4modules?5as?5expecte@
  00801	4d 8b c5	 mov	 r8, r13
  00804	e8 00 00 00 00	 call	 PyErr_Format

; 1508 :                 }
; 1509 :                 Py_DECREF(to_return);

  00809	49 8b cd	 mov	 rcx, r13
  0080c	e8 00 00 00 00	 call	 _Py_DecRef

; 1515 :         }
; 1516 :     }
; 1517 :     else {

  00811	4c 8b ac 24 88
	00 00 00	 mov	 r13, QWORD PTR final_mod$1$[rsp]
  00819	e9 81 fd ff ff	 jmp	 $error$122547
$LN30@PyImport_I@4:

; 1505 :                 }
; 1506 :                 else {
; 1507 :                     Py_INCREF(final_mod);

  0081e	48 8b c8	 mov	 rcx, rax
  00821	e8 00 00 00 00	 call	 _Py_IncRef

; 1508 :                 }
; 1509 :                 Py_DECREF(to_return);

  00826	49 8b cd	 mov	 rcx, r13
  00829	e8 00 00 00 00	 call	 _Py_DecRef

; 1515 :         }
; 1516 :     }
; 1517 :     else {

  0082e	4c 8b ac 24 88
	00 00 00	 mov	 r13, QWORD PTR final_mod$1$[rsp]
  00836	e9 64 fd ff ff	 jmp	 $error$122547
$LN39@PyImport_I@4:

; 1518 :         final_mod = _PyObject_CallMethodObjIdArgs(interp->importlib,
; 1519 :                                                   &PyId__handle_fromlist, mod,
; 1520 :                                                   fromlist, builtins_import,
; 1521 :                                                   NULL);

  0083b	48 8b 44 24 30	 mov	 rax, QWORD PTR interp$1$[rsp]
  00840	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId__handle_fromlist@?1??PyImport_ImportModuleLevelObject@@9@9
  00845	4d 8b ce	 mov	 r9, r14
  00848	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0084c	4c 8b c5	 mov	 r8, rbp
  0084f	49 03 d5	 add	 rdx, r13
  00852	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0085b	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  00860	e8 00 00 00 00	 call	 _PyObject_CallMethodObjIdArgs
  00865	4c 8b e8	 mov	 r13, rax
  00868	e9 32 fd ff ff	 jmp	 $error$122547

; 1529 :     }
; 1530 : #endif
; 1531 :   error:
; 1532 :     Py_XDECREF(abs_name);

$LN118@PyImport_I@4:
  0086d	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00871	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00877	eb 08		 jmp	 SHORT $LN24@PyImport_I@4
$LN113@PyImport_I@4:
  00879	48 8b cf	 mov	 rcx, rdi
  0087c	e8 00 00 00 00	 call	 Px_DecRef
$LN24@PyImport_I@4:

; 1533 :     Py_XDECREF(builtins_import);

  00881	48 85 f6	 test	 rsi, rsi
  00884	74 65		 je	 SHORT $LN20@PyImport_I@4
  00886	e8 00 00 00 00	 call	 _Py_PXCTX
  0088b	85 c0		 test	 eax, eax
  0088d	75 5c		 jne	 SHORT $LN20@PyImport_I@4
  0088f	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00893	a8 20		 test	 al, 32			; 00000020H
  00895	75 4c		 jne	 SHORT $LN124@PyImport_I@4
  00897	84 c0		 test	 al, al
  00899	78 48		 js	 SHORT $LN124@PyImport_I@4
  0089b	a8 02		 test	 al, 2
  0089d	75 4c		 jne	 SHORT $LN20@PyImport_I@4
  0089f	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  008a3	75 46		 jne	 SHORT $LN20@PyImport_I@4
  008a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  008ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  008b3	4c 8b ce	 mov	 r9, rsi
  008b6	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  008bc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  008c4	e8 00 00 00 00	 call	 _PyParallel_Guard
  008c9	48 8b ce	 mov	 rcx, rsi
  008cc	85 c0		 test	 eax, eax
  008ce	74 07		 je	 SHORT $LN129@PyImport_I@4
  008d0	e8 00 00 00 00	 call	 _Px_Dealloc
  008d5	eb 14		 jmp	 SHORT $LN20@PyImport_I@4
$LN129@PyImport_I@4:
  008d7	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  008db	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  008e1	eb 08		 jmp	 SHORT $LN20@PyImport_I@4
$LN124@PyImport_I@4:
  008e3	48 8b ce	 mov	 rcx, rsi
  008e6	e8 00 00 00 00	 call	 Px_DecRef
$LN20@PyImport_I@4:

; 1534 :     Py_XDECREF(mod);

  008eb	48 85 ed	 test	 rbp, rbp
  008ee	0f 84 11 fb ff
	ff		 je	 $LN16@PyImport_I@4
  008f4	e8 00 00 00 00	 call	 _Py_PXCTX
  008f9	85 c0		 test	 eax, eax
  008fb	0f 85 04 fb ff
	ff		 jne	 $LN16@PyImport_I@4
  00901	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  00905	a8 20		 test	 al, 32			; 00000020H
  00907	75 5a		 jne	 SHORT $LN135@PyImport_I@4
  00909	84 c0		 test	 al, al
  0090b	78 56		 js	 SHORT $LN135@PyImport_I@4
  0090d	a8 02		 test	 al, 2
  0090f	0f 85 f0 fa ff
	ff		 jne	 $LN16@PyImport_I@4
  00915	48 ff 4d 50	 dec	 QWORD PTR [rbp+80]
  00919	0f 85 e6 fa ff
	ff		 jne	 $LN16@PyImport_I@4
  0091f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00926	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0092d	4c 8b cd	 mov	 r9, rbp
  00930	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00936	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0093e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00943	48 8b cd	 mov	 rcx, rbp
  00946	85 c0		 test	 eax, eax
  00948	74 0a		 je	 SHORT $LN140@PyImport_I@4
  0094a	e8 00 00 00 00	 call	 _Px_Dealloc
  0094f	e9 b1 fa ff ff	 jmp	 $LN16@PyImport_I@4
$LN140@PyImport_I@4:
  00954	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  00958	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0095e	e9 a2 fa ff ff	 jmp	 $LN16@PyImport_I@4
$LN135@PyImport_I@4:
  00963	48 8b cd	 mov	 rcx, rbp
  00966	e8 00 00 00 00	 call	 Px_DecRef
  0096b	e9 95 fa ff ff	 jmp	 $LN16@PyImport_I@4

; 1535 :     Py_XDECREF(package);

$LN151@PyImport_I@4:
  00970	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00974	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0097a	eb 08		 jmp	 SHORT $LN194@PyImport_I@4
$LN146@PyImport_I@4:
  0097c	48 8b cb	 mov	 rcx, rbx
  0097f	e8 00 00 00 00	 call	 Px_DecRef
$LN194@PyImport_I@4:
  00984	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR [rsp+144]
  0098c	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN12@PyImport_I@4:

; 1536 :     Py_XDECREF(globals);

  00991	4d 85 e4	 test	 r12, r12
  00994	74 68		 je	 SHORT $LN8@PyImport_I@4
  00996	e8 00 00 00 00	 call	 _Py_PXCTX
  0099b	85 c0		 test	 eax, eax
  0099d	75 5f		 jne	 SHORT $LN8@PyImport_I@4
  0099f	49 8b 44 24 20	 mov	 rax, QWORD PTR [r12+32]
  009a4	a8 20		 test	 al, 32			; 00000020H
  009a6	75 4e		 jne	 SHORT $LN157@PyImport_I@4
  009a8	84 c0		 test	 al, al
  009aa	78 4a		 js	 SHORT $LN157@PyImport_I@4
  009ac	a8 02		 test	 al, 2
  009ae	75 4e		 jne	 SHORT $LN8@PyImport_I@4
  009b0	49 ff 4c 24 50	 dec	 QWORD PTR [r12+80]
  009b5	75 47		 jne	 SHORT $LN8@PyImport_I@4
  009b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  009be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  009c5	4d 8b cc	 mov	 r9, r12
  009c8	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  009ce	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  009d6	e8 00 00 00 00	 call	 _PyParallel_Guard
  009db	49 8b cc	 mov	 rcx, r12
  009de	85 c0		 test	 eax, eax
  009e0	74 07		 je	 SHORT $LN162@PyImport_I@4
  009e2	e8 00 00 00 00	 call	 _Px_Dealloc
  009e7	eb 15		 jmp	 SHORT $LN8@PyImport_I@4
$LN162@PyImport_I@4:
  009e9	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]
  009ee	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  009f4	eb 08		 jmp	 SHORT $LN8@PyImport_I@4
$LN157@PyImport_I@4:
  009f6	49 8b cc	 mov	 rcx, r12
  009f9	e8 00 00 00 00	 call	 Px_DecRef
$LN8@PyImport_I@4:

; 1537 :     Py_XDECREF(fromlist);

  009fe	4d 85 f6	 test	 r14, r14
  00a01	74 65		 je	 SHORT $LN4@PyImport_I@4
  00a03	e8 00 00 00 00	 call	 _Py_PXCTX
  00a08	85 c0		 test	 eax, eax
  00a0a	75 5c		 jne	 SHORT $LN4@PyImport_I@4
  00a0c	49 8b 46 20	 mov	 rax, QWORD PTR [r14+32]
  00a10	a8 20		 test	 al, 32			; 00000020H
  00a12	75 4c		 jne	 SHORT $LN168@PyImport_I@4
  00a14	84 c0		 test	 al, al
  00a16	78 48		 js	 SHORT $LN168@PyImport_I@4
  00a18	a8 02		 test	 al, 2
  00a1a	75 4c		 jne	 SHORT $LN4@PyImport_I@4
  00a1c	49 ff 4e 50	 dec	 QWORD PTR [r14+80]
  00a20	75 46		 jne	 SHORT $LN4@PyImport_I@4
  00a22	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00a29	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00a30	4d 8b ce	 mov	 r9, r14
  00a33	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00a39	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00a41	e8 00 00 00 00	 call	 _PyParallel_Guard
  00a46	49 8b ce	 mov	 rcx, r14
  00a49	85 c0		 test	 eax, eax
  00a4b	74 07		 je	 SHORT $LN173@PyImport_I@4
  00a4d	e8 00 00 00 00	 call	 _Px_Dealloc
  00a52	eb 14		 jmp	 SHORT $LN4@PyImport_I@4
$LN173@PyImport_I@4:
  00a54	49 8b 46 58	 mov	 rax, QWORD PTR [r14+88]
  00a58	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00a5e	eb 08		 jmp	 SHORT $LN4@PyImport_I@4
$LN168@PyImport_I@4:
  00a60	49 8b ce	 mov	 rcx, r14
  00a63	e8 00 00 00 00	 call	 Px_DecRef
$LN4@PyImport_I@4:

; 1538 :     if (final_mod == NULL)

  00a68	4d 85 ed	 test	 r13, r13
  00a6b	75 05		 jne	 SHORT $LN182@PyImport_I@4
$LN179@PyImport_I@4:

; 1539 :         remove_importlib_frames();

  00a6d	e8 00 00 00 00	 call	 remove_importlib_frames
$LN182@PyImport_I@4:

; 1540 :     return final_mod;

  00a72	49 8b c5	 mov	 rax, r13

; 1541 : }

  00a75	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00a79	41 5f		 pop	 r15
  00a7b	41 5e		 pop	 r14
  00a7d	41 5d		 pop	 r13
  00a7f	41 5c		 pop	 r12
  00a81	5e		 pop	 rsi
  00a82	5d		 pop	 rbp
  00a83	c3		 ret	 0
PyImport_ImportModuleLevelObject ENDP
_TEXT	ENDS
PUBLIC	PyImport_ImportModuleLevel
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ImportModuleLevel DD imagerel $LN4
	DD	imagerel $LN4+102
	DD	imagerel $unwind$PyImport_ImportModuleLevel
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ImportModuleLevel DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyImport_ImportModuleLevel
_TEXT	SEGMENT
name$ = 64
globals$ = 72
locals$ = 80
fromlist$ = 88
level$ = 96
PyImport_ImportModuleLevel PROC				; COMDAT

; 1546 : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	49 8b d9	 mov	 rbx, r9
  00017	49 8b f0	 mov	 rsi, r8
  0001a	48 8b ea	 mov	 rbp, rdx

; 1547 :     PyObject *nameobj, *mod;
; 1548 :     nameobj = PyUnicode_FromString(name);

  0001d	e8 00 00 00 00	 call	 PyUnicode_FromString
  00022	48 8b f8	 mov	 rdi, rax

; 1549 :     if (nameobj == NULL)

  00025	48 85 c0	 test	 rax, rax
  00028	74 27		 je	 SHORT $LN2@PyImport_I@5
$LN1@PyImport_I@5:

; 1550 :         return NULL;
; 1551 :     mod = PyImport_ImportModuleLevelObject(nameobj, globals, locals,
; 1552 :                                            fromlist, level);

  0002a	8b 44 24 60	 mov	 eax, DWORD PTR level$[rsp]
  0002e	4c 8b cb	 mov	 r9, rbx
  00031	4c 8b c6	 mov	 r8, rsi
  00034	48 8b d5	 mov	 rdx, rbp
  00037	48 8b cf	 mov	 rcx, rdi
  0003a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0003e	e8 00 00 00 00	 call	 PyImport_ImportModuleLevelObject

; 1553 :     Py_DECREF(nameobj);

  00043	48 8b cf	 mov	 rcx, rdi
  00046	48 8b d8	 mov	 rbx, rax
  00049	e8 00 00 00 00	 call	 _Py_DecRef

; 1554 :     return mod;

  0004e	48 8b c3	 mov	 rax, rbx
$LN2@PyImport_I@5:

; 1555 : }

  00051	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00056	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0005b	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00060	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00064	5f		 pop	 rdi
  00065	c3		 ret	 0
PyImport_ImportModuleLevel ENDP
_TEXT	ENDS
PUBLIC	??_C@_05GGBOHLAF@OOOOi?$AA@			; `string'
PUBLIC	??_C@_04JFPPFMBB@?$HLOO?$HN?$AA@		; `string'
PUBLIC	PyImport_Import
EXTRN	PyObject_CallFunction:PROC
EXTRN	PyObject_GetAttr:PROC
EXTRN	PyErr_SetObject:PROC
EXTRN	Py_BuildValue:PROC
EXTRN	PyObject_GetItem:PROC
EXTRN	PyEval_GetGlobals:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyImport_Import DD imagerel $LN38
	DD	imagerel $LN38+537
	DD	imagerel $unwind$PyImport_Import
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_Import DD 0a8001H
	DD	0b7480H
	DD	0a347bH
	DD	0d6410H
	DD	0c5410H
	DD	0c00c7210H
xdata	ENDS
;	COMDAT ??_C@_05GGBOHLAF@OOOOi?$AA@
CONST	SEGMENT
??_C@_05GGBOHLAF@OOOOi?$AA@ DB 'OOOOi', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JFPPFMBB@?$HLOO?$HN?$AA@
CONST	SEGMENT
??_C@_04JFPPFMBB@?$HLOO?$HN?$AA@ DB '{OO}', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
CONST	ENDS
;	COMDAT PyImport_Import
_TEXT	SEGMENT
module_name$ = 80
PyImport_Import PROC					; COMDAT

; 1595 : {

$LN38:
  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	41 54		 push	 r12
  0000c	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 1596 :     static PyObject *silly_list = NULL;
; 1597 :     static PyObject *builtins_str = NULL;
; 1598 :     static PyObject *import_str = NULL;
; 1599 :     PyObject *globals = NULL;
; 1600 :     PyObject *import = NULL;

  00010	33 ed		 xor	 ebp, ebp
  00012	4c 8b e1	 mov	 r12, rcx

; 1601 :     PyObject *builtins = NULL;
; 1602 :     PyObject *modules = NULL;
; 1603 :     PyObject *r = NULL;
; 1604 : 
; 1605 :     /* Initialize constant string objects */
; 1606 :     if (silly_list == NULL) {

  00015	48 39 2d 00 00
	00 00		 cmp	 QWORD PTR ?silly_list@?1??PyImport_Import@@9@9, rbp
  0001c	8b f5		 mov	 esi, ebp
  0001e	75 56		 jne	 SHORT $LN24@PyImport_I@6

; 1607 :         import_str = PyUnicode_InternFromString("__import__");

  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@KEEJPJHH@__import__?$AA@
  00027	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0002c	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?import_str@?1??PyImport_Import@@9@9, rax

; 1608 :         if (import_str == NULL)

  00033	48 85 c0	 test	 rax, rax
  00036	75 13		 jne	 SHORT $LN26@PyImport_I@6
$LN37@PyImport_I@6:

; 1609 :             return NULL;

  00038	33 c0		 xor	 eax, eax

; 1668 : }

  0003a	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  0003f	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  00044	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00048	41 5c		 pop	 r12
  0004a	c3		 ret	 0
$LN26@PyImport_I@6:

; 1610 :         builtins_str = PyUnicode_InternFromString("__builtins__");

  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  00052	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00057	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?builtins_str@?1??PyImport_Import@@9@9, rax

; 1611 :         if (builtins_str == NULL)

  0005e	48 85 c0	 test	 rax, rax

; 1612 :             return NULL;

  00061	74 d5		 je	 SHORT $LN37@PyImport_I@6

; 1613 :         silly_list = PyList_New(0);

  00063	33 c9		 xor	 ecx, ecx
  00065	e8 00 00 00 00	 call	 PyList_New
  0006a	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?silly_list@?1??PyImport_Import@@9@9, rax

; 1614 :         if (silly_list == NULL)

  00071	48 85 c0	 test	 rax, rax

; 1615 :             return NULL;

  00074	74 c2		 je	 SHORT $LN37@PyImport_I@6
$LN24@PyImport_I@6:
  00076	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0007b	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi

; 1616 :     }
; 1617 : 
; 1618 :     /* Get the builtins from current globals */
; 1619 :     globals = PyEval_GetGlobals();

  00080	e8 00 00 00 00	 call	 PyEval_GetGlobals
  00085	48 8b d8	 mov	 rbx, rax

; 1620 :     if (globals != NULL) {

  00088	48 85 c0	 test	 rax, rax
  0008b	74 58		 je	 SHORT $LN23@PyImport_I@6

; 1621 :         Py_INCREF(globals);

  0008d	e8 00 00 00 00	 call	 _Py_PXCTX
  00092	85 c0		 test	 eax, eax
  00094	75 32		 jne	 SHORT $LN31@PyImport_I@6
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a4	4c 8b cb	 mov	 r9, rbx
  000a7	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ad	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ba	85 c0		 test	 eax, eax
  000bc	75 06		 jne	 SHORT $LN30@PyImport_I@6
  000be	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000c2	74 04		 je	 SHORT $LN31@PyImport_I@6
$LN30@PyImport_I@6:
  000c4	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN31@PyImport_I@6:

; 1622 :         builtins = PyObject_GetItem(globals, builtins_str);

  000c8	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?builtins_str@?1??PyImport_Import@@9@9
  000cf	48 8b cb	 mov	 rcx, rbx
  000d2	e8 00 00 00 00	 call	 PyObject_GetItem
  000d7	48 8b f8	 mov	 rdi, rax

; 1623 :         if (builtins == NULL)

  000da	48 85 c0	 test	 rax, rax
  000dd	0f 84 f1 00 00
	00		 je	 $err$122845

; 1624 :             goto err;
; 1625 :     }
; 1626 :     else {

  000e3	eb 46		 jmp	 SHORT $LN19@PyImport_I@6
$LN23@PyImport_I@6:

; 1627 :         /* No globals -- use standard builtins, and fake globals */
; 1628 :         builtins = PyImport_ImportModuleLevel("builtins",
; 1629 :                                               NULL, NULL, NULL, 0);

  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  000ec	45 33 c9	 xor	 r9d, r9d
  000ef	45 33 c0	 xor	 r8d, r8d
  000f2	33 d2		 xor	 edx, edx
  000f4	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  000f8	e8 00 00 00 00	 call	 PyImport_ImportModuleLevel
  000fd	48 8b f8	 mov	 rdi, rax

; 1630 :         if (builtins == NULL)

  00100	48 85 c0	 test	 rax, rax
  00103	0f 84 f5 00 00
	00		 je	 $LN36@PyImport_I@6
$LN20@PyImport_I@6:

; 1631 :             return NULL;
; 1632 :         globals = Py_BuildValue("{OO}", builtins_str, builtins);

  00109	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?builtins_str@?1??PyImport_Import@@9@9
  00110	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04JFPPFMBB@?$HLOO?$HN?$AA@
  00117	4c 8b c0	 mov	 r8, rax
  0011a	e8 00 00 00 00	 call	 Py_BuildValue
  0011f	48 8b d8	 mov	 rbx, rax

; 1633 :         if (globals == NULL)

  00122	48 85 c0	 test	 rax, rax
  00125	0f 84 b6 00 00
	00		 je	 $LN11@PyImport_I@6
$LN19@PyImport_I@6:

; 1634 :             goto err;
; 1635 :     }
; 1636 : 
; 1637 :     /* Get the __import__ function from the builtins */
; 1638 :     if (PyDict_Check(builtins)) {

  0012b	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]

; 1639 :         import = PyObject_GetItem(builtins, import_str);

  0012f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?import_str@?1??PyImport_Import@@9@9
  00136	48 8b cf	 mov	 rcx, rdi
  00139	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  00143	74 22		 je	 SHORT $LN18@PyImport_I@6
  00145	e8 00 00 00 00	 call	 PyObject_GetItem
  0014a	48 8b f0	 mov	 rsi, rax

; 1640 :         if (import == NULL)

  0014d	48 85 c0	 test	 rax, rax
  00150	75 22		 jne	 SHORT $LN34@PyImport_I@6

; 1641 :             PyErr_SetObject(PyExc_KeyError, import_str);

  00152	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?import_str@?1??PyImport_Import@@9@9
  00159	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  00160	e8 00 00 00 00	 call	 PyErr_SetObject

; 1642 :     }
; 1643 :     else

  00165	eb 6d		 jmp	 SHORT $err$122845
$LN18@PyImport_I@6:

; 1644 :         import = PyObject_GetAttr(builtins, import_str);

  00167	e8 00 00 00 00	 call	 PyObject_GetAttr
  0016c	48 8b f0	 mov	 rsi, rax

; 1645 :     if (import == NULL)

  0016f	48 85 c0	 test	 rax, rax
  00172	74 60		 je	 SHORT $err$122845
$LN34@PyImport_I@6:

; 1646 :         goto err;
; 1647 : 
; 1648 :     /* Call the __import__ function with the proper argument list
; 1649 :        Always use absolute import here.
; 1650 :        Calling for side-effect of import. */
; 1651 :     r = PyObject_CallFunction(import, "OOOOi", module_name, globals,
; 1652 :                               globals, silly_list, 0, NULL);

  00174	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?silly_list@?1??PyImport_Import@@9@9
  0017b	48 89 6c 24 38	 mov	 QWORD PTR [rsp+56], rbp
  00180	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  00185	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0018a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GGBOHLAF@OOOOi?$AA@
  00191	4c 8b cb	 mov	 r9, rbx
  00194	4d 8b c4	 mov	 r8, r12
  00197	48 8b ce	 mov	 rcx, rsi
  0019a	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0019f	e8 00 00 00 00	 call	 PyObject_CallFunction
  001a4	48 8b e8	 mov	 rbp, rax

; 1653 :     if (r == NULL)

  001a7	48 85 c0	 test	 rax, rax
  001aa	74 28		 je	 SHORT $err$122845

; 1654 :         goto err;
; 1655 :     Py_DECREF(r);

  001ac	48 8b c8	 mov	 rcx, rax
  001af	e8 00 00 00 00	 call	 _Py_DecRef

; 1656 : 
; 1657 :     modules = PyImport_GetModuleDict();

  001b4	e8 00 00 00 00	 call	 PyImport_GetModuleDict

; 1658 :     r = PyDict_GetItem(modules, module_name);

  001b9	49 8b d4	 mov	 rdx, r12
  001bc	48 8b c8	 mov	 rcx, rax
  001bf	e8 00 00 00 00	 call	 PyDict_GetItem
  001c4	48 8b e8	 mov	 rbp, rax

; 1659 :     if (r != NULL)

  001c7	48 85 c0	 test	 rax, rax
  001ca	74 08		 je	 SHORT $err$122845

; 1660 :         Py_INCREF(r);

  001cc	48 8b c8	 mov	 rcx, rax
  001cf	e8 00 00 00 00	 call	 _Py_IncRef
$err$122845:

; 1661 : 
; 1662 :   err:
; 1663 :     Py_XDECREF(globals);

  001d4	48 85 db	 test	 rbx, rbx
  001d7	74 08		 je	 SHORT $LN11@PyImport_I@6
  001d9	48 8b cb	 mov	 rcx, rbx
  001dc	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@PyImport_I@6:

; 1664 :     Py_XDECREF(builtins);

  001e1	48 85 ff	 test	 rdi, rdi
  001e4	74 08		 je	 SHORT $LN7@PyImport_I@6
  001e6	48 8b cf	 mov	 rcx, rdi
  001e9	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@PyImport_I@6:

; 1665 :     Py_XDECREF(import);

  001ee	48 85 f6	 test	 rsi, rsi
  001f1	74 08		 je	 SHORT $LN3@PyImport_I@6
  001f3	48 8b ce	 mov	 rcx, rsi
  001f6	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyImport_I@6:

; 1666 : 
; 1667 :     return r;

  001fb	48 8b c5	 mov	 rax, rbp
$LN36@PyImport_I@6:
  001fe	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00203	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 1668 : }

  00208	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  0020d	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  00212	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00216	41 5c		 pop	 r12
  00218	c3		 ret	 0
PyImport_Import ENDP
_TEXT	ENDS
EXTRN	PyList_Append:PROC
EXTRN	_PyImport_DynLoadFiletab:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$imp_extension_suffixes DD imagerel imp_extension_suffixes
	DD	imagerel imp_extension_suffixes+34
	DD	imagerel $unwind$imp_extension_suffixes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$imp_extension_suffixes DD imagerel imp_extension_suffixes+34
	DD	imagerel imp_extension_suffixes+240
	DD	imagerel $chain$1$imp_extension_suffixes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$imp_extension_suffixes DD imagerel imp_extension_suffixes+240
	DD	imagerel imp_extension_suffixes+274
	DD	imagerel $chain$3$imp_extension_suffixes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$imp_extension_suffixes DD 040021H
	DD	097400H
	DD	083400H
	DD	imagerel imp_extension_suffixes
	DD	imagerel imp_extension_suffixes+34
	DD	imagerel $unwind$imp_extension_suffixes
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$imp_extension_suffixes DD 040a21H
	DD	09740aH
	DD	083405H
	DD	imagerel imp_extension_suffixes
	DD	imagerel imp_extension_suffixes+34
	DD	imagerel $unwind$imp_extension_suffixes
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_extension_suffixes DD 020601H
	DD	060025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
xdata	ENDS
;	COMDAT imp_extension_suffixes
_TEXT	SEGMENT
self$ = 64
noargs$ = 72
imp_extension_suffixes PROC				; COMDAT

; 1672 : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1673 :     PyObject *list;
; 1674 :     const char *suffix;
; 1675 :     unsigned int index = 0;
; 1676 : 
; 1677 :     list = PyList_New(0);

  00006	33 c9		 xor	 ecx, ecx
  00008	e8 00 00 00 00	 call	 PyList_New
  0000d	48 8b f0	 mov	 rsi, rax

; 1678 :     if (list == NULL)

  00010	48 85 c0	 test	 rax, rax
  00013	75 06		 jne	 SHORT $LN19@imp_extens

; 1697 : }

  00015	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00019	5e		 pop	 rsi
  0001a	c3		 ret	 0
$LN19@imp_extens:

; 1679 :         return NULL;
; 1680 : #ifdef HAVE_DYNAMIC_LOADING
; 1681 :     while ((suffix = _PyImport_DynLoadFiletab[index])) {

  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyImport_DynLoadFiletab
  00022	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00027	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  0002c	48 85 c0	 test	 rax, rax
  0002f	0f 84 a8 00 00
	00		 je	 $LN3@imp_extens
  00035	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_PyImport_DynLoadFiletab
  0003c	0f 1f 40 00	 npad	 4
$LL4@imp_extens:

; 1682 :         PyObject *item = PyUnicode_FromString(suffix);

  00040	48 8b c8	 mov	 rcx, rax
  00043	e8 00 00 00 00	 call	 PyUnicode_FromString

; 1683 :         if (item == NULL) {
; 1684 :             Py_DECREF(list);
; 1685 :             return NULL;
; 1686 :         }
; 1687 :         if (PyList_Append(list, item) < 0) {

  00048	48 8b ce	 mov	 rcx, rsi
  0004b	48 8b d8	 mov	 rbx, rax
  0004e	48 85 c0	 test	 rax, rax
  00051	0f 84 a4 00 00
	00		 je	 $LN20@imp_extens
  00057	48 8b d0	 mov	 rdx, rax
  0005a	e8 00 00 00 00	 call	 PyList_Append
  0005f	85 c0		 test	 eax, eax
  00061	0f 88 89 00 00
	00		 js	 $LN21@imp_extens

; 1691 :         }
; 1692 :         Py_DECREF(item);

  00067	e8 00 00 00 00	 call	 _Py_PXCTX
  0006c	85 c0		 test	 eax, eax
  0006e	75 5c		 jne	 SHORT $LN18@imp_extens
  00070	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00074	a8 20		 test	 al, 32			; 00000020H
  00076	75 4c		 jne	 SHORT $LN12@imp_extens
  00078	84 c0		 test	 al, al
  0007a	78 48		 js	 SHORT $LN12@imp_extens
  0007c	a8 02		 test	 al, 2
  0007e	75 4c		 jne	 SHORT $LN18@imp_extens
  00080	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00084	75 46		 jne	 SHORT $LN18@imp_extens
  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00094	4c 8b cb	 mov	 r9, rbx
  00097	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0009d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000aa	48 8b cb	 mov	 rcx, rbx
  000ad	85 c0		 test	 eax, eax
  000af	74 07		 je	 SHORT $LN17@imp_extens
  000b1	e8 00 00 00 00	 call	 _Px_Dealloc
  000b6	eb 14		 jmp	 SHORT $LN18@imp_extens
$LN17@imp_extens:
  000b8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000bc	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000c2	eb 08		 jmp	 SHORT $LN18@imp_extens
$LN12@imp_extens:
  000c4	48 8b cb	 mov	 rcx, rbx
  000c7	e8 00 00 00 00	 call	 Px_DecRef
$LN18@imp_extens:

; 1693 :         index += 1;

  000cc	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  000d0	48 83 c7 08	 add	 rdi, 8
  000d4	48 85 c0	 test	 rax, rax
  000d7	0f 85 63 ff ff
	ff		 jne	 $LL4@imp_extens
$LN3@imp_extens:
  000dd	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000e2	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 1694 :     }
; 1695 : #endif
; 1696 :     return list;

  000e7	48 8b c6	 mov	 rax, rsi

; 1697 : }

  000ea	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ee	5e		 pop	 rsi
  000ef	c3		 ret	 0
$LN21@imp_extens:

; 1688 :             Py_DECREF(list);

  000f0	48 8b ce	 mov	 rcx, rsi
  000f3	e8 00 00 00 00	 call	 _Py_DecRef

; 1689 :             Py_DECREF(item);

  000f8	48 8b cb	 mov	 rcx, rbx
$LN20@imp_extens:
  000fb	e8 00 00 00 00	 call	 _Py_DecRef
  00100	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00105	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 1690 :             return NULL;

  0010a	33 c0		 xor	 eax, eax

; 1697 : }

  0010c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00110	5e		 pop	 rsi
  00111	c3		 ret	 0
imp_extension_suffixes ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@PCGCFPM@U?3init_frozen?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$imp_init_frozen DD imagerel imp_init_frozen
	DD	imagerel imp_init_frozen+227
	DD	imagerel $unwind$imp_init_frozen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_init_frozen DD 038e01H
	DD	06348eH
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0O@PCGCFPM@U?3init_frozen?$AA@
CONST	SEGMENT
??_C@_0O@PCGCFPM@U?3init_frozen?$AA@ DB 'U:init_frozen', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
CONST	ENDS
;	COMDAT imp_init_frozen
_TEXT	SEGMENT
self$ = 64
args$ = 72
name$ = 80
imp_init_frozen PROC					; COMDAT

; 1721 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1722 :     PyObject *name;
; 1723 :     int ret;
; 1724 :     PyObject *m;
; 1725 :     if (!PyArg_ParseTuple(args, "U:init_frozen", &name))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 50	 lea	 r8, QWORD PTR name$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@PCGCFPM@U?3init_frozen?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN7@imp_init_f
$LN19@imp_init_f:

; 1726 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1737 : }

  0001e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00022	c3		 ret	 0
$LN7@imp_init_f:

; 1727 :     ret = PyImport_ImportFrozenModuleObject(name);

  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR name$[rsp]
  00028	e8 00 00 00 00	 call	 PyImport_ImportFrozenModuleObject

; 1728 :     if (ret < 0)

  0002d	85 c0		 test	 eax, eax

; 1729 :         return NULL;

  0002f	78 eb		 js	 SHORT $LN19@imp_init_f

; 1730 :     if (ret == 0) {

  00031	75 51		 jne	 SHORT $LN5@imp_init_f

; 1731 :         Py_INCREF(Py_None);

  00033	e8 00 00 00 00	 call	 _Py_PXCTX
  00038	85 c0		 test	 eax, eax
  0003a	75 3c		 jne	 SHORT $LN11@imp_init_f
  0003c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00051	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00057	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0005f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00064	85 c0		 test	 eax, eax
  00066	75 09		 jne	 SHORT $LN10@imp_init_f
  00068	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0006f	74 07		 je	 SHORT $LN11@imp_init_f
$LN10@imp_init_f:
  00071	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN11@imp_init_f:

; 1732 :         return Py_None;

  00078	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1737 : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
$LN5@imp_init_f:

; 1733 :     }
; 1734 :     m = PyImport_AddModuleObject(name);

  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR name$[rsp]
  00089	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0008e	e8 00 00 00 00	 call	 PyImport_AddModuleObject
  00093	48 8b d8	 mov	 rbx, rax

; 1735 :     Py_XINCREF(m);

  00096	48 85 c0	 test	 rax, rax
  00099	74 3b		 je	 SHORT $LN3@imp_init_f
  0009b	e8 00 00 00 00	 call	 _Py_PXCTX
  000a0	85 c0		 test	 eax, eax
  000a2	75 32		 jne	 SHORT $LN3@imp_init_f
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000b2	4c 8b cb	 mov	 r9, rbx
  000b5	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000bb	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c8	85 c0		 test	 eax, eax
  000ca	75 06		 jne	 SHORT $LN14@imp_init_f
  000cc	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000d0	74 04		 je	 SHORT $LN3@imp_init_f
$LN14@imp_init_f:
  000d2	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN3@imp_init_f:

; 1736 :     return m;

  000d6	48 8b c3	 mov	 rax, rbx
  000d9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1737 : }

  000de	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e2	c3		 ret	 0
imp_init_frozen ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@DHEKPLIO@U?3get_frozen_object?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$imp_get_frozen_object DD imagerel imp_get_frozen_object
	DD	imagerel imp_get_frozen_object+50
	DD	imagerel $unwind$imp_get_frozen_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_get_frozen_object DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BE@DHEKPLIO@U?3get_frozen_object?$AA@
CONST	SEGMENT
??_C@_0BE@DHEKPLIO@U?3get_frozen_object?$AA@ DB 'U:get_frozen_object', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT imp_get_frozen_object
_TEXT	SEGMENT
self$ = 48
args$ = 56
name$ = 64
imp_get_frozen_object PROC				; COMDAT

; 1741 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1742 :     PyObject *name;
; 1743 : 
; 1744 :     if (!PyArg_ParseTuple(args, "U:get_frozen_object", &name))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 40	 lea	 r8, QWORD PTR name$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@DHEKPLIO@U?3get_frozen_object?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN1@imp_get_fr

; 1745 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1747 : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
$LN1@imp_get_fr:

; 1746 :     return get_frozen_object(name);

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  00028	e8 00 00 00 00	 call	 get_frozen_object

; 1747 : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
imp_get_frozen_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@NAPODMHB@U?3is_frozen_package?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$imp_is_frozen_package DD imagerel imp_is_frozen_package
	DD	imagerel imp_is_frozen_package+50
	DD	imagerel $unwind$imp_is_frozen_package
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_is_frozen_package DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BE@NAPODMHB@U?3is_frozen_package?$AA@
CONST	SEGMENT
??_C@_0BE@NAPODMHB@U?3is_frozen_package?$AA@ DB 'U:is_frozen_package', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT imp_is_frozen_package
_TEXT	SEGMENT
self$ = 48
args$ = 56
name$ = 64
imp_is_frozen_package PROC				; COMDAT

; 1751 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1752 :     PyObject *name;
; 1753 : 
; 1754 :     if (!PyArg_ParseTuple(args, "U:is_frozen_package", &name))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 40	 lea	 r8, QWORD PTR name$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NAPODMHB@U?3is_frozen_package?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN1@imp_is_fro

; 1755 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1757 : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
$LN1@imp_is_fro:

; 1756 :     return is_frozen_package(name);

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  00028	e8 00 00 00 00	 call	 is_frozen_package

; 1757 : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
imp_is_frozen_package ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@IGLOOGCC@U?3is_builtin?$AA@		; `string'
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$imp_is_builtin DD imagerel imp_is_builtin
	DD	imagerel imp_is_builtin+57
	DD	imagerel $unwind$imp_is_builtin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_is_builtin DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0N@IGLOOGCC@U?3is_builtin?$AA@
CONST	SEGMENT
??_C@_0N@IGLOOGCC@U?3is_builtin?$AA@ DB 'U:is_builtin', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT imp_is_builtin
_TEXT	SEGMENT
self$ = 48
args$ = 56
name$ = 64
imp_is_builtin PROC					; COMDAT

; 1761 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1762 :     PyObject *name;
; 1763 :     if (!PyArg_ParseTuple(args, "U:is_builtin", &name))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 40	 lea	 r8, QWORD PTR name$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@IGLOOGCC@U?3is_builtin?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN1@imp_is_bui

; 1764 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1766 : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
$LN1@imp_is_bui:

; 1765 :     return PyLong_FromLong(is_builtin(name));

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  00028	e8 00 00 00 00	 call	 is_builtin
  0002d	8b c8		 mov	 ecx, eax
  0002f	e8 00 00 00 00	 call	 PyLong_FromLong

; 1766 : }

  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	c3		 ret	 0
imp_is_builtin ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@IGODAMEH@U?3is_frozen?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$imp_is_frozen DD imagerel imp_is_frozen
	DD	imagerel imp_is_frozen+75
	DD	imagerel $unwind$imp_is_frozen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_is_frozen DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0M@IGODAMEH@U?3is_frozen?$AA@
CONST	SEGMENT
??_C@_0M@IGODAMEH@U?3is_frozen?$AA@ DB 'U:is_frozen', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT imp_is_frozen
_TEXT	SEGMENT
self$ = 48
args$ = 56
name$ = 64
imp_is_frozen PROC					; COMDAT

; 1770 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1771 :     PyObject *name;
; 1772 :     struct _frozen *p;
; 1773 :     if (!PyArg_ParseTuple(args, "U:is_frozen", &name))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 40	 lea	 r8, QWORD PTR name$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IGODAMEH@U?3is_frozen?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN1@imp_is_fro@2

; 1774 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1777 : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
$LN1@imp_is_fro@2:

; 1775 :     p = find_frozen(name);

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  00028	e8 00 00 00 00	 call	 find_frozen

; 1776 :     return PyBool_FromLong((long) (p == NULL ? 0 : p->size));

  0002d	48 85 c0	 test	 rax, rax
  00030	75 0c		 jne	 SHORT $LN4@imp_is_fro@2
  00032	33 c9		 xor	 ecx, ecx
  00034	e8 00 00 00 00	 call	 PyBool_FromLong

; 1777 : }

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
$LN4@imp_is_fro@2:

; 1776 :     return PyBool_FromLong((long) (p == NULL ? 0 : p->size));

  0003e	8b 48 10	 mov	 ecx, DWORD PTR [rax+16]
  00041	e8 00 00 00 00	 call	 PyBool_FromLong

; 1777 : }

  00046	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004a	c3		 ret	 0
imp_is_frozen ENDP
_TEXT	ENDS
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0BD@EONBGEBO@UO?$CG?$HMO?3load_dynamic?$AA@ ; `string'
EXTRN	__imp_fclose:PROC
EXTRN	_PyImport_LoadDynamicModule:PROC
EXTRN	PyErr_SetFromErrno:PROC
EXTRN	PyExc_IOError:QWORD
EXTRN	PyErr_Occurred:PROC
EXTRN	_Py_fopen:PROC
EXTRN	PyUnicode_FSDecoder:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$imp_load_dynamic DD imagerel imp_load_dynamic
	DD	imagerel imp_load_dynamic+203
	DD	imagerel $unwind$imp_load_dynamic
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_load_dynamic DD 049d01H
	DD	0a749dH
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EONBGEBO@UO?$CG?$HMO?3load_dynamic?$AA@
CONST	SEGMENT
??_C@_0BD@EONBGEBO@UO?$CG?$HMO?3load_dynamic?$AA@ DB 'UO&|O:load_dynamic', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT imp_load_dynamic
_TEXT	SEGMENT
name$ = 48
self$ = 80
args$ = 88
pathname$ = 96
fob$ = 104
imp_load_dynamic PROC					; COMDAT

; 1783 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b c2	 mov	 rax, rdx

; 1784 :     PyObject *name, *pathname, *fob = NULL, *mod;
; 1785 :     FILE *fp;
; 1786 : 
; 1787 :     if (!PyArg_ParseTuple(args, "UO&|O:load_dynamic",
; 1788 :                           &name, PyUnicode_FSDecoder, &pathname, &fob))

  00009	48 8d 4c 24 68	 lea	 rcx, QWORD PTR fob$[rsp]
  0000e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:PyUnicode_FSDecoder
  00015	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0001a	48 8d 4c 24 60	 lea	 rcx, QWORD PTR pathname$[rsp]
  0001f	4c 8d 44 24 30	 lea	 r8, QWORD PTR name$[rsp]
  00024	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@EONBGEBO@UO?$CG?$HMO?3load_dynamic?$AA@
  00030	33 db		 xor	 ebx, ebx
  00032	48 8b c8	 mov	 rcx, rax
  00035	48 89 5c 24 68	 mov	 QWORD PTR fob$[rsp], rbx
  0003a	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0003f	85 c0		 test	 eax, eax

; 1789 :         return NULL;

  00041	74 40		 je	 SHORT $LN3@imp_load_d

; 1790 :     if (fob != NULL) {

  00043	48 39 5c 24 68	 cmp	 QWORD PTR fob$[rsp], rbx
  00048	74 41		 je	 SHORT $LN5@imp_load_d

; 1791 :         fp = _Py_fopen(pathname, "r");

  0004a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pathname$[rsp]
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01KDCPPGHE@r?$AA@
  00056	e8 00 00 00 00	 call	 _Py_fopen
  0005b	48 8b d8	 mov	 rbx, rax

; 1792 :         if (fp == NULL) {

  0005e	48 85 c0	 test	 rax, rax
  00061	75 28		 jne	 SHORT $LN5@imp_load_d

; 1793 :             Py_DECREF(pathname);

  00063	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pathname$[rsp]
  00068	e8 00 00 00 00	 call	 _Py_DecRef

; 1794 :             if (!PyErr_Occurred())

  0006d	e8 00 00 00 00	 call	 PyErr_Occurred
  00072	48 85 c0	 test	 rax, rax
  00075	75 0c		 jne	 SHORT $LN3@imp_load_d

; 1795 :                 PyErr_SetFromErrno(PyExc_IOError);

  00077	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  0007e	e8 00 00 00 00	 call	 PyErr_SetFromErrno
$LN3@imp_load_d:

; 1796 :             return NULL;

  00083	33 c0		 xor	 eax, eax

; 1806 : }

  00085	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00089	5b		 pop	 rbx
  0008a	c3		 ret	 0
$LN5@imp_load_d:

; 1797 :         }
; 1798 :     }
; 1799 :     else
; 1800 :         fp = NULL;
; 1801 :     mod = _PyImport_LoadDynamicModule(name, pathname, fp);

  0008b	48 8b 54 24 60	 mov	 rdx, QWORD PTR pathname$[rsp]
  00090	48 8b 4c 24 30	 mov	 rcx, QWORD PTR name$[rsp]
  00095	4c 8b c3	 mov	 r8, rbx
  00098	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  0009d	e8 00 00 00 00	 call	 _PyImport_LoadDynamicModule

; 1802 :     Py_DECREF(pathname);

  000a2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pathname$[rsp]
  000a7	48 8b f8	 mov	 rdi, rax
  000aa	e8 00 00 00 00	 call	 _Py_DecRef

; 1803 :     if (fp)

  000af	48 85 db	 test	 rbx, rbx
  000b2	74 09		 je	 SHORT $LN1@imp_load_d

; 1804 :         fclose(fp);

  000b4	48 8b cb	 mov	 rcx, rbx
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
$LN1@imp_load_d:

; 1805 :     return mod;

  000bd	48 8b c7	 mov	 rax, rdi
  000c0	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 1806 : }

  000c5	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000c9	5b		 pop	 rbx
  000ca	c3		 ret	 0
imp_load_dynamic ENDP
_TEXT	ENDS
PUBLIC	PyInit_imp
EXTRN	PyModule_Create2:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyInit_imp DD imagerel $LN20
	DD	imagerel $LN20+174
	DD	imagerel $unwind$PyInit_imp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_imp DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
xdata	ENDS
;	COMDAT PyInit_imp
_TEXT	SEGMENT
PyInit_imp PROC						; COMDAT

; 1871 : {

$LN20:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1872 :     PyObject *m, *d;
; 1873 : 
; 1874 :     m = PyModule_Create(&impmodule);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:impmodule
  0000d	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00012	e8 00 00 00 00	 call	 PyModule_Create2
  00017	48 8b d8	 mov	 rbx, rax

; 1875 :     if (m == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	74 5c		 je	 SHORT $LN3@PyInit_imp

; 1876 :         goto failure;
; 1877 :     d = PyModule_GetDict(m);

  0001f	48 8b c8	 mov	 rcx, rax
  00022	e8 00 00 00 00	 call	 PyModule_GetDict

; 1878 :     if (d == NULL)

  00027	48 85 c0	 test	 rax, rax
  0002a	75 79		 jne	 SHORT $LN5@PyInit_imp
$failure$123070:

; 1882 :   failure:
; 1883 :     Py_XDECREF(m);

  0002c	e8 00 00 00 00	 call	 _Py_PXCTX
  00031	85 c0		 test	 eax, eax
  00033	75 46		 jne	 SHORT $LN3@PyInit_imp
  00035	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00039	a8 20		 test	 al, 32			; 00000020H
  0003b	75 58		 jne	 SHORT $LN13@PyInit_imp
  0003d	84 c0		 test	 al, al
  0003f	78 54		 js	 SHORT $LN13@PyInit_imp
  00041	a8 02		 test	 al, 2
  00043	75 36		 jne	 SHORT $LN3@PyInit_imp
  00045	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00049	75 30		 jne	 SHORT $LN3@PyInit_imp
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00059	4c 8b cb	 mov	 r9, rbx
  0005c	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00062	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0006a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006f	48 8b cb	 mov	 rcx, rbx
  00072	85 c0		 test	 eax, eax
  00074	74 0d		 je	 SHORT $LN18@PyInit_imp
  00076	e8 00 00 00 00	 call	 _Px_Dealloc
$LN3@PyInit_imp:

; 1884 :     return NULL;

  0007b	33 c0		 xor	 eax, eax

; 1885 : }

  0007d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00081	5b		 pop	 rbx
  00082	c3		 ret	 0

; 1882 :   failure:
; 1883 :     Py_XDECREF(m);

$LN18@PyInit_imp:
  00083	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00087	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 1884 :     return NULL;

  0008d	33 c0		 xor	 eax, eax

; 1885 : }

  0008f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00093	5b		 pop	 rbx
  00094	c3		 ret	 0

; 1882 :   failure:
; 1883 :     Py_XDECREF(m);

$LN13@PyInit_imp:
  00095	48 8b cb	 mov	 rcx, rbx
  00098	e8 00 00 00 00	 call	 Px_DecRef

; 1884 :     return NULL;

  0009d	33 c0		 xor	 eax, eax

; 1885 : }

  0009f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a3	5b		 pop	 rbx
  000a4	c3		 ret	 0
$LN5@PyInit_imp:

; 1879 :         goto failure;
; 1880 : 
; 1881 :     return m;

  000a5	48 8b c3	 mov	 rax, rbx

; 1885 : }

  000a8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ac	5b		 pop	 rbx
  000ad	c3		 ret	 0
PyInit_imp ENDP
_TEXT	ENDS
PUBLIC	PyImport_ExtendInittab
EXTRN	__imp_realloc:PROC
EXTRN	_PxMem_Realloc:PROC
EXTRN	memcpy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ExtendInittab DD imagerel $LN29
	DD	imagerel $LN29+60
	DD	imagerel $unwind$PyImport_ExtendInittab
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyImport_ExtendInittab DD imagerel $LN29+60
	DD	imagerel $LN29+303
	DD	imagerel $chain$1$PyImport_ExtendInittab
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyImport_ExtendInittab DD imagerel $LN29+303
	DD	imagerel $LN29+308
	DD	imagerel $chain$3$PyImport_ExtendInittab
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyImport_ExtendInittab DD imagerel $LN29+308
	DD	imagerel $LN29+326
	DD	imagerel $chain$4$PyImport_ExtendInittab
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyImport_ExtendInittab DD 021H
	DD	imagerel $LN29
	DD	imagerel $LN29+60
	DD	imagerel $unwind$PyImport_ExtendInittab
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyImport_ExtendInittab DD 040021H
	DD	07c400H
	DD	066400H
	DD	imagerel $LN29
	DD	imagerel $LN29+60
	DD	imagerel $unwind$PyImport_ExtendInittab
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyImport_ExtendInittab DD 040a21H
	DD	07c40aH
	DD	066405H
	DD	imagerel $LN29
	DD	imagerel $LN29+60
	DD	imagerel $unwind$PyImport_ExtendInittab
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ExtendInittab DD 060f01H
	DD	09540fH
	DD	08340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyImport_ExtendInittab
_TEXT	SEGMENT
newtab$ = 48
PyImport_ExtendInittab PROC				; COMDAT

; 1897 : {

$LN29:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1898 :     static struct _inittab *our_copy = NULL;
; 1899 :     struct _inittab *p;
; 1900 :     int i, n;
; 1901 : 
; 1902 :     /* Count the number of entries in both tables */
; 1903 :     for (n = 0; newtab[n].name != NULL; n++)

  0000f	33 db		 xor	 ebx, ebx
  00011	48 8b e9	 mov	 rbp, rcx
  00014	8b fb		 mov	 edi, ebx
  00016	48 39 19	 cmp	 QWORD PTR [rcx], rbx
  00019	0f 84 15 01 00
	00		 je	 $LN24@PyImport_E@2
  0001f	48 8b c1	 mov	 rax, rcx
$LL9@PyImport_E@2:
  00022	48 83 c0 10	 add	 rax, 16
  00026	ff c7		 inc	 edi
  00028	48 39 18	 cmp	 QWORD PTR [rax], rbx
  0002b	75 f5		 jne	 SHORT $LL9@PyImport_E@2

; 1904 :         ;
; 1905 :     if (n == 0)

  0002d	85 ff		 test	 edi, edi
  0002f	0f 84 ff 00 00
	00		 je	 $LN24@PyImport_E@2

; 1906 :         return 0; /* Nothing to do */
; 1907 :     for (i = 0; PyImport_Inittab[i].name != NULL; i++)

  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyImport_Inittab
  0003c	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00041	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12
  00046	48 39 18	 cmp	 QWORD PTR [rax], rbx
  00049	74 11		 je	 SHORT $LN3@PyImport_E@2
  0004b	0f 1f 44 00 00	 npad	 5
$LL5@PyImport_E@2:
  00050	48 83 c0 10	 add	 rax, 16
  00054	ff c3		 inc	 ebx
  00056	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0005a	75 f4		 jne	 SHORT $LL5@PyImport_E@2
$LN3@PyImport_E@2:

; 1908 :         ;
; 1909 : 
; 1910 :     /* Allocate new memory for the combined table */
; 1911 :     p = our_copy;

  0005c	4c 8b 25 00 00
	00 00		 mov	 r12, QWORD PTR ?our_copy@?1??PyImport_ExtendInittab@@9@9

; 1912 :     PyMem_RESIZE(p, struct _inittab, i+n+1);

  00063	8d 44 3b 01	 lea	 eax, DWORD PTR [rbx+rdi+1]
  00067	48 63 f0	 movsxd	 rsi, eax
  0006a	48 b8 ff ff ff
	ff ff ff ff 07	 mov	 rax, 576460752303423487	; 07ffffffffffffffH
  00074	48 3b f0	 cmp	 rsi, rax
  00077	0f 87 b2 00 00
	00		 ja	 $LN25@PyImport_E@2
  0007d	e8 00 00 00 00	 call	 _Py_PXCTX
  00082	48 c1 e6 04	 shl	 rsi, 4
  00086	85 c0		 test	 eax, eax
  00088	74 0d		 je	 SHORT $LN16@PyImport_E@2
  0008a	48 8b d6	 mov	 rdx, rsi
  0008d	49 8b cc	 mov	 rcx, r12
  00090	e8 00 00 00 00	 call	 _PxMem_Realloc
  00095	eb 28		 jmp	 SHORT $LN28@PyImport_E@2
$LN16@PyImport_E@2:
  00097	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  000a1	48 3b f0	 cmp	 rsi, rax
  000a4	0f 87 85 00 00
	00		 ja	 $LN25@PyImport_E@2
  000aa	48 85 f6	 test	 rsi, rsi
  000ad	ba 01 00 00 00	 mov	 edx, 1
  000b2	49 8b cc	 mov	 rcx, r12
  000b5	48 0f 45 d6	 cmovne	 rdx, rsi
  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
$LN28@PyImport_E@2:
  000bf	48 8b f0	 mov	 rsi, rax

; 1913 :     if (p == NULL)

  000c2	48 85 c0	 test	 rax, rax
  000c5	74 68		 je	 SHORT $LN25@PyImport_E@2

; 1915 : 
; 1916 :     /* Copy the tables into the new memory */
; 1917 :     if (our_copy != PyImport_Inittab)

  000c7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyImport_Inittab
  000ce	48 39 15 00 00
	00 00		 cmp	 QWORD PTR ?our_copy@?1??PyImport_ExtendInittab@@9@9, rdx
  000d5	74 12		 je	 SHORT $LN1@PyImport_E@2

; 1918 :         memcpy(p, PyImport_Inittab, (i+1) * sizeof(struct _inittab));

  000d7	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  000da	48 8b ce	 mov	 rcx, rsi
  000dd	4c 63 c0	 movsxd	 r8, eax
  000e0	49 c1 e0 04	 shl	 r8, 4
  000e4	e8 00 00 00 00	 call	 memcpy
$LN1@PyImport_E@2:

; 1919 :     PyImport_Inittab = our_copy = p;
; 1920 :     memcpy(p+i, newtab, (n+1) * sizeof(struct _inittab));

  000e9	8d 47 01	 lea	 eax, DWORD PTR [rdi+1]
  000ec	48 63 cb	 movsxd	 rcx, ebx
  000ef	48 8b d5	 mov	 rdx, rbp
  000f2	4c 63 c0	 movsxd	 r8, eax
  000f5	48 c1 e1 04	 shl	 rcx, 4
  000f9	48 89 35 00 00
	00 00		 mov	 QWORD PTR ?our_copy@?1??PyImport_ExtendInittab@@9@9, rsi
  00100	49 c1 e0 04	 shl	 r8, 4
  00104	48 03 ce	 add	 rcx, rsi
  00107	48 89 35 00 00
	00 00		 mov	 QWORD PTR PyImport_Inittab, rsi
  0010e	e8 00 00 00 00	 call	 memcpy

; 1921 : 
; 1922 :     return 0;

  00113	33 c0		 xor	 eax, eax
$LN27@PyImport_E@2:
  00115	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  0011a	4c 8b 64 24 38	 mov	 r12, QWORD PTR [rsp+56]

; 1923 : }

  0011f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00124	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00129	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0012d	5f		 pop	 rdi
  0012e	c3		 ret	 0
$LN25@PyImport_E@2:

; 1914 :         return -1;

  0012f	83 c8 ff	 or	 eax, -1
  00132	eb e1		 jmp	 SHORT $LN27@PyImport_E@2
$LN24@PyImport_E@2:

; 1923 : }

  00134	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00139	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0013e	33 c0		 xor	 eax, eax
  00140	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00144	5f		 pop	 rdi
  00145	c3		 ret	 0
PyImport_ExtendInittab ENDP
_TEXT	ENDS
PUBLIC	PyImport_AppendInittab
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_AppendInittab DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$PyImport_AppendInittab
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_AppendInittab DD 010701H
	DD	08207H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyImport_AppendInittab
_TEXT	SEGMENT
name$ = 80
initfunc$ = 88
PyImport_AppendInittab PROC				; COMDAT

; 1929 : {

$LN3:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1930 :     struct _inittab newtab[2];
; 1931 : 
; 1932 :     memset(newtab, '\0', sizeof newtab);

  00007	33 c0		 xor	 eax, eax
  00009	49 89 43 d8	 mov	 QWORD PTR [r11-40], rax

; 1933 : 
; 1934 :     newtab[0].name = (char *)name;

  0000d	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00011	49 89 43 e0	 mov	 QWORD PTR [r11-32], rax

; 1935 :     newtab[0].initfunc = initfunc;
; 1936 : 
; 1937 :     return PyImport_ExtendInittab(newtab);

  00015	49 8d 4b d8	 lea	 rcx, QWORD PTR [r11-40]
  00019	49 89 43 e8	 mov	 QWORD PTR [r11-24], rax
  0001d	49 89 43 f0	 mov	 QWORD PTR [r11-16], rax
  00021	49 89 53 e0	 mov	 QWORD PTR [r11-32], rdx
  00025	e8 00 00 00 00	 call	 PyImport_ExtendInittab

; 1938 : }

  0002a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0002e	c3		 ret	 0
PyImport_AppendInittab ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@KMHPOANN@import?5?$CFU?5?$CD?5previously?5loaded?5?$CI?$CF@ ; `string'
PUBLIC	_PyImport_FindExtensionObject
EXTRN	PyDict_Update:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImport_FindExtensionObject DD imagerel $LN20
	DD	imagerel $LN20+41
	DD	imagerel $unwind$_PyImport_FindExtensionObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyImport_FindExtensionObject DD imagerel $LN20+41
	DD	imagerel $LN20+75
	DD	imagerel $chain$0$_PyImport_FindExtensionObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_PyImport_FindExtensionObject DD imagerel $LN20+75
	DD	imagerel $LN20+295
	DD	imagerel $chain$3$_PyImport_FindExtensionObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_PyImport_FindExtensionObject DD 040d21H
	DD	06340dH
	DD	077400H
	DD	imagerel $LN20
	DD	imagerel $LN20+41
	DD	imagerel $unwind$_PyImport_FindExtensionObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyImport_FindExtensionObject DD 020521H
	DD	077405H
	DD	imagerel $LN20
	DD	imagerel $LN20+41
	DD	imagerel $unwind$_PyImport_FindExtensionObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_FindExtensionObject DD 040a01H
	DD	08540aH
	DD	06006320aH
xdata	ENDS
;	COMDAT ??_C@_0CE@KMHPOANN@import?5?$CFU?5?$CD?5previously?5loaded?5?$CI?$CF@
CONST	SEGMENT
??_C@_0CE@KMHPOANN@import?5?$CFU?5?$CD?5previously?5loaded?5?$CI?$CF@ DB 'i'
	DB	'mport %U # previously loaded (%R)', 0aH, 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyImport_FindExtensionObject
_TEXT	SEGMENT
name$ = 48
filename$ = 56
_PyImport_FindExtensionObject PROC			; COMDAT

; 527  : {

$LN20:
  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f1	 mov	 rsi, rcx

; 528  :     PyObject *mod, *mdict;
; 529  :     PyModuleDef* def;
; 530  :     if (extensions == NULL)

  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR extensions
  00014	48 8b ea	 mov	 rbp, rdx
  00017	48 85 c9	 test	 rcx, rcx
  0001a	75 0d		 jne	 SHORT $LN13@PyImport_F@4

; 531  :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 569  : 
; 570  : }

  0001e	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00023	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00027	5e		 pop	 rsi
  00028	c3		 ret	 0
$LN13@PyImport_F@4:
  00029	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi

; 532  :     def = (PyModuleDef*)PyDict_GetItem(extensions, filename);

  0002e	e8 00 00 00 00	 call	 PyDict_GetItem
  00033	48 8b f8	 mov	 rdi, rax

; 533  :     if (def == NULL)

  00036	48 85 c0	 test	 rax, rax
  00039	75 10		 jne	 SHORT $LN12@PyImport_F@4
  0003b	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 569  : 
; 570  : }

  00040	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00045	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00049	5e		 pop	 rsi
  0004a	c3		 ret	 0
$LN12@PyImport_F@4:

; 534  :         return NULL;
; 535  :     if (def->m_size == -1) {

  0004b	48 83 b8 90 00
	00 00 ff	 cmp	 QWORD PTR [rax+144], -1
  00053	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00058	75 3c		 jne	 SHORT $LN11@PyImport_F@4

; 536  :         /* Module does not support repeated initialization */
; 537  :         if (def->m_base.m_copy == NULL)

  0005a	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0

; 538  :             return NULL;

  0005f	0f 84 8b 00 00
	00		 je	 $LN19@PyImport_F@4

; 539  :         mod = PyImport_AddModuleObject(name);

  00065	48 8b ce	 mov	 rcx, rsi
  00068	e8 00 00 00 00	 call	 PyImport_AddModuleObject
  0006d	48 8b d8	 mov	 rbx, rax

; 540  :         if (mod == NULL)

  00070	48 85 c0	 test	 rax, rax

; 541  :             return NULL;

  00073	74 7b		 je	 SHORT $LN19@PyImport_F@4

; 542  :         mdict = PyModule_GetDict(mod);

  00075	48 8b c8	 mov	 rcx, rax
  00078	e8 00 00 00 00	 call	 PyModule_GetDict

; 543  :         if (mdict == NULL)

  0007d	48 85 c0	 test	 rax, rax

; 544  :             return NULL;

  00080	74 6e		 je	 SHORT $LN19@PyImport_F@4

; 545  :         if (PyDict_Update(mdict, def->m_base.m_copy))

  00082	48 8b 57 70	 mov	 rdx, QWORD PTR [rdi+112]
  00086	48 8b c8	 mov	 rcx, rax
  00089	e8 00 00 00 00	 call	 PyDict_Update
  0008e	85 c0		 test	 eax, eax
  00090	74 37		 je	 SHORT $LN6@PyImport_F@4

; 546  :             return NULL;

  00092	33 c0		 xor	 eax, eax
  00094	eb 7c		 jmp	 SHORT $LN17@PyImport_F@4
$LN11@PyImport_F@4:

; 547  :     }
; 548  :     else {
; 549  :         if (def->m_base.m_init == NULL)

  00096	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0009a	48 85 c0	 test	 rax, rax

; 550  :             return NULL;

  0009d	74 51		 je	 SHORT $LN19@PyImport_F@4

; 551  :         mod = def->m_base.m_init();

  0009f	ff d0		 call	 rax
  000a1	48 8b d8	 mov	 rbx, rax

; 552  :         if (mod == NULL)

  000a4	48 85 c0	 test	 rax, rax

; 553  :             return NULL;

  000a7	74 47		 je	 SHORT $LN19@PyImport_F@4

; 554  :         if (PyDict_SetItem(PyImport_GetModuleDict(), name, mod) == -1) {

  000a9	e8 00 00 00 00	 call	 PyImport_GetModuleDict
  000ae	4c 8b c3	 mov	 r8, rbx
  000b1	48 8b d6	 mov	 rdx, rsi
  000b4	48 8b c8	 mov	 rcx, rax
  000b7	e8 00 00 00 00	 call	 PyDict_SetItem

; 555  :             Py_DECREF(mod);

  000bc	48 8b cb	 mov	 rcx, rbx
  000bf	83 f8 ff	 cmp	 eax, -1

; 556  :             return NULL;

  000c2	74 27		 je	 SHORT $LN18@PyImport_F@4

; 557  :         }
; 558  :         Py_DECREF(mod);

  000c4	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@PyImport_F@4:

; 559  :     }
; 560  :     if (_PyState_AddModule(mod, def) < 0) {

  000c9	48 8b d7	 mov	 rdx, rdi
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	e8 00 00 00 00	 call	 _PyState_AddModule
  000d4	85 c0		 test	 eax, eax
  000d6	79 1c		 jns	 SHORT $LN2@PyImport_F@4

; 561  :         PyDict_DelItem(PyImport_GetModuleDict(), name);

  000d8	e8 00 00 00 00	 call	 PyImport_GetModuleDict
  000dd	48 8b d6	 mov	 rdx, rsi
  000e0	48 8b c8	 mov	 rcx, rax
  000e3	e8 00 00 00 00	 call	 PyDict_DelItem

; 562  :         Py_DECREF(mod);

  000e8	48 8b cb	 mov	 rcx, rbx
$LN18@PyImport_F@4:
  000eb	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@PyImport_F@4:

; 563  :         return NULL;

  000f0	33 c0		 xor	 eax, eax
  000f2	eb 1e		 jmp	 SHORT $LN17@PyImport_F@4
$LN2@PyImport_F@4:

; 564  :     }
; 565  :     if (Py_VerboseFlag)

  000f4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  000fb	74 12		 je	 SHORT $LN1@PyImport_F@4

; 566  :         PySys_FormatStderr("import %U # previously loaded (%R)\n",
; 567  :                           name, filename);

  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@KMHPOANN@import?5?$CFU?5?$CD?5previously?5loaded?5?$CI?$CF@
  00104	4c 8b c5	 mov	 r8, rbp
  00107	48 8b d6	 mov	 rdx, rsi
  0010a	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN1@PyImport_F@4:

; 568  :     return mod;

  0010f	48 8b c3	 mov	 rax, rbx
$LN17@PyImport_F@4:
  00112	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00117	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 569  : 
; 570  : }

  0011c	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00121	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00125	5e		 pop	 rsi
  00126	c3		 ret	 0
_PyImport_FindExtensionObject ENDP
_TEXT	ENDS
PUBLIC	_PyImport_FindBuiltin
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImport_FindBuiltin DD imagerel $LN4
	DD	imagerel $LN4+66
	DD	imagerel $unwind$_PyImport_FindBuiltin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_FindBuiltin DD 042401H
	DD	063424H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyImport_FindBuiltin
_TEXT	SEGMENT
name$ = 48
_PyImport_FindBuiltin PROC				; COMDAT

; 574  : {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 575  :     PyObject *res, *nameobj;
; 576  :     nameobj = PyUnicode_InternFromString(name);

  00006	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0000b	48 8b f8	 mov	 rdi, rax

; 577  :     if (nameobj == NULL)

  0000e	48 85 c0	 test	 rax, rax
  00011	75 06		 jne	 SHORT $LN1@PyImport_F@5

; 582  : }

  00013	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00017	5f		 pop	 rdi
  00018	c3		 ret	 0
$LN1@PyImport_F@5:

; 578  :         return NULL;
; 579  :     res = _PyImport_FindExtensionObject(nameobj, nameobj);

  00019	48 8b d0	 mov	 rdx, rax
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00024	e8 00 00 00 00	 call	 _PyImport_FindExtensionObject

; 580  :     Py_DECREF(nameobj);

  00029	48 8b cf	 mov	 rcx, rdi
  0002c	48 8b d8	 mov	 rbx, rax
  0002f	e8 00 00 00 00	 call	 _Py_DecRef

; 581  :     return res;

  00034	48 8b c3	 mov	 rax, rbx
  00037	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 582  : }

  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
_PyImport_FindBuiltin ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@HNOFNCNF@PyImport_ExecCodeModuleWithPathn@ ; `string'
PUBLIC	PyImport_ExecCodeModuleWithPathnames
EXTRN	PyUnicode_DecodeFSDefault:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyImport_ExecCodeModuleWithPathnames DD imagerel $LN46
	DD	imagerel $LN46+477
	DD	imagerel $unwind$PyImport_ExecCodeModuleWithPathnames
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ExecCodeModuleWithPathnames DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0d0145218H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_0DG@HNOFNCNF@PyImport_ExecCodeModuleWithPathn@
CONST	SEGMENT
??_C@_0DG@HNOFNCNF@PyImport_ExecCodeModuleWithPathn@ DB 'PyImport_ExecCod'
	DB	'eModuleWithPathnames: no interpreter!', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
CONST	ENDS
;	COMDAT PyImport_ExecCodeModuleWithPathnames
_TEXT	SEGMENT
name$ = 80
co$ = 88
pathname$ = 96
cpathname$ = 104
PyImport_ExecCodeModuleWithPathnames PROC		; COMDAT

; 664  : {

$LN46:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 665  :     PyObject *m = NULL;

  00018	33 f6		 xor	 esi, esi
  0001a	49 8b d9	 mov	 rbx, r9
  0001d	49 8b e8	 mov	 rbp, r8

; 666  :     PyObject *nameobj, *pathobj = NULL, *cpathobj = NULL;

  00020	8b fe		 mov	 edi, esi
  00022	4c 8b ea	 mov	 r13, rdx

; 667  : 
; 668  :     nameobj = PyUnicode_FromString(name);

  00025	e8 00 00 00 00	 call	 PyUnicode_FromString
  0002a	4c 8b e0	 mov	 r12, rax

; 669  :     if (nameobj == NULL)

  0002d	48 85 c0	 test	 rax, rax
  00030	0f 84 8e 01 00
	00		 je	 $LN20@PyImport_E@3
$LN19@PyImport_E@3:

; 670  :         return NULL;
; 671  : 
; 672  :     if (cpathname != NULL) {

  00036	48 85 db	 test	 rbx, rbx
  00039	74 16		 je	 SHORT $LN18@PyImport_E@3

; 673  :         cpathobj = PyUnicode_DecodeFSDefault(cpathname);

  0003b	48 8b cb	 mov	 rcx, rbx
  0003e	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  00043	48 8b d8	 mov	 rbx, rax

; 674  :         if (cpathobj == NULL)

  00046	48 85 c0	 test	 rax, rax
  00049	0f 84 96 00 00
	00		 je	 $error$122110

; 675  :             goto error;
; 676  :     }
; 677  :     else

  0004f	eb 03		 jmp	 SHORT $LN16@PyImport_E@3
$LN18@PyImport_E@3:

; 678  :         cpathobj = NULL;

  00051	48 8b de	 mov	 rbx, rsi
$LN16@PyImport_E@3:

; 679  : 
; 680  :     if (pathname != NULL) {

  00054	48 85 ed	 test	 rbp, rbp
  00057	74 12		 je	 SHORT $LN15@PyImport_E@3

; 681  :         pathobj = PyUnicode_DecodeFSDefault(pathname);

  00059	48 8b cd	 mov	 rcx, rbp
  0005c	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  00061	48 8b f8	 mov	 rdi, rax

; 682  :         if (pathobj == NULL)

  00064	48 85 c0	 test	 rax, rax
  00067	74 7c		 je	 SHORT $error$122110

; 683  :             goto error;
; 684  :     }
; 685  :     else if (cpathobj != NULL) {

  00069	eb 66		 jmp	 SHORT $LN9@PyImport_E@3
$LN15@PyImport_E@3:
  0006b	48 85 db	 test	 rbx, rbx
  0006e	74 61		 je	 SHORT $LN9@PyImport_E@3

; 686  :         PyInterpreterState *interp = PyThreadState_GET()->interp;

  00070	e8 00 00 00 00	 call	 _Py_PXCTX
  00075	85 c0		 test	 eax, eax
  00077	74 07		 je	 SHORT $LN22@PyImport_E@3
  00079	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  0007e	eb 07		 jmp	 SHORT $LN23@PyImport_E@3
$LN22@PyImport_E@3:
  00080	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN23@PyImport_E@3:
  00087	48 8b 78 08	 mov	 rdi, QWORD PTR [rax+8]

; 687  :         _Py_IDENTIFIER(_get_sourcefile);
; 688  : 
; 689  :         if (interp == NULL) {

  0008b	48 85 ff	 test	 rdi, rdi
  0008e	75 0c		 jne	 SHORT $LN11@PyImport_E@3

; 690  :             Py_FatalError("PyImport_ExecCodeModuleWithPathnames: "
; 691  :                           "no interpreter!");

  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DG@HNOFNCNF@PyImport_ExecCodeModuleWithPathn@
  00097	e8 00 00 00 00	 call	 Py_FatalError
$LN11@PyImport_E@3:

; 692  :         }
; 693  : 
; 694  :         pathobj = _PyObject_CallMethodObjIdArgs(interp->importlib,
; 695  :                                                 &PyId__get_sourcefile, cpathobj,
; 696  :                                                 NULL);

  0009c	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR _tls_index
  000a3	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  000ac	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  000b0	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId__get_sourcefile@?4??PyImport_ExecCodeModuleWithPathnames@@9@9
  000b5	45 33 c9	 xor	 r9d, r9d
  000b8	4a 03 14 c0	 add	 rdx, QWORD PTR [rax+r8*8]
  000bc	4c 8b c3	 mov	 r8, rbx
  000bf	e8 00 00 00 00	 call	 _PyObject_CallMethodObjIdArgs
  000c4	48 8b f8	 mov	 rdi, rax

; 697  :         if (pathobj == NULL)

  000c7	48 85 c0	 test	 rax, rax
  000ca	75 05		 jne	 SHORT $LN9@PyImport_E@3

; 698  :             PyErr_Clear();

  000cc	e8 00 00 00 00	 call	 PyErr_Clear
$LN9@PyImport_E@3:

; 699  :     }
; 700  :     else
; 701  :         pathobj = NULL;
; 702  : 
; 703  :     m = PyImport_ExecCodeModuleObject(nameobj, co, pathobj, cpathobj);

  000d1	4c 8b cb	 mov	 r9, rbx
  000d4	4c 8b c7	 mov	 r8, rdi
  000d7	49 8b d5	 mov	 rdx, r13
  000da	49 8b cc	 mov	 rcx, r12
  000dd	e8 00 00 00 00	 call	 PyImport_ExecCodeModuleObject
  000e2	48 8b f0	 mov	 rsi, rax
$error$122110:

; 704  : error:
; 705  :     Py_DECREF(nameobj);

  000e5	49 8b cc	 mov	 rcx, r12
  000e8	e8 00 00 00 00	 call	 _Py_DecRef

; 706  :     Py_XDECREF(pathobj);

  000ed	48 85 ff	 test	 rdi, rdi
  000f0	74 65		 je	 SHORT $LN7@PyImport_E@3
  000f2	e8 00 00 00 00	 call	 _Py_PXCTX
  000f7	85 c0		 test	 eax, eax
  000f9	75 5c		 jne	 SHORT $LN7@PyImport_E@3
  000fb	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000ff	a8 20		 test	 al, 32			; 00000020H
  00101	75 4c		 jne	 SHORT $LN28@PyImport_E@3
  00103	84 c0		 test	 al, al
  00105	78 48		 js	 SHORT $LN28@PyImport_E@3
  00107	a8 02		 test	 al, 2
  00109	75 4c		 jne	 SHORT $LN7@PyImport_E@3
  0010b	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0010f	75 46		 jne	 SHORT $LN7@PyImport_E@3
  00111	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00118	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0011f	4c 8b cf	 mov	 r9, rdi
  00122	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00128	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00130	e8 00 00 00 00	 call	 _PyParallel_Guard
  00135	48 8b cf	 mov	 rcx, rdi
  00138	85 c0		 test	 eax, eax
  0013a	74 07		 je	 SHORT $LN33@PyImport_E@3
  0013c	e8 00 00 00 00	 call	 _Px_Dealloc
  00141	eb 14		 jmp	 SHORT $LN7@PyImport_E@3
$LN33@PyImport_E@3:
  00143	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00147	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0014d	eb 08		 jmp	 SHORT $LN7@PyImport_E@3
$LN28@PyImport_E@3:
  0014f	48 8b cf	 mov	 rcx, rdi
  00152	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyImport_E@3:

; 707  :     Py_XDECREF(cpathobj);

  00157	48 85 db	 test	 rbx, rbx
  0015a	74 65		 je	 SHORT $LN3@PyImport_E@3
  0015c	e8 00 00 00 00	 call	 _Py_PXCTX
  00161	85 c0		 test	 eax, eax
  00163	75 5c		 jne	 SHORT $LN3@PyImport_E@3
  00165	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00169	a8 20		 test	 al, 32			; 00000020H
  0016b	75 4c		 jne	 SHORT $LN39@PyImport_E@3
  0016d	84 c0		 test	 al, al
  0016f	78 48		 js	 SHORT $LN39@PyImport_E@3
  00171	a8 02		 test	 al, 2
  00173	75 4c		 jne	 SHORT $LN3@PyImport_E@3
  00175	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00179	75 46		 jne	 SHORT $LN3@PyImport_E@3
  0017b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00189	4c 8b cb	 mov	 r9, rbx
  0018c	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00192	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0019a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0019f	48 8b cb	 mov	 rcx, rbx
  001a2	85 c0		 test	 eax, eax
  001a4	74 07		 je	 SHORT $LN44@PyImport_E@3
  001a6	e8 00 00 00 00	 call	 _Px_Dealloc
  001ab	eb 14		 jmp	 SHORT $LN3@PyImport_E@3
$LN44@PyImport_E@3:
  001ad	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001b1	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001b7	eb 08		 jmp	 SHORT $LN3@PyImport_E@3
$LN39@PyImport_E@3:
  001b9	48 8b cb	 mov	 rcx, rbx
  001bc	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyImport_E@3:

; 708  :     return m;

  001c1	48 8b c6	 mov	 rax, rsi
$LN20@PyImport_E@3:

; 709  : }

  001c4	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  001c9	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  001ce	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  001d3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001d7	41 5d		 pop	 r13
  001d9	41 5c		 pop	 r12
  001db	5f		 pop	 rdi
  001dc	c3		 ret	 0
PyImport_ExecCodeModuleWithPathnames ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@MKJJHIGO@Cannot?5re?9init?5internal?5module?5?$CF@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_builtin DD imagerel init_builtin
	DD	imagerel init_builtin+33
	DD	imagerel $unwind$init_builtin
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$init_builtin DD imagerel init_builtin+33
	DD	imagerel init_builtin+94
	DD	imagerel $chain$0$init_builtin
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$init_builtin DD imagerel init_builtin+94
	DD	imagerel init_builtin+139
	DD	imagerel $chain$2$init_builtin
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$init_builtin DD imagerel init_builtin+139
	DD	imagerel init_builtin+207
	DD	imagerel $chain$5$init_builtin
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$init_builtin DD imagerel init_builtin+207
	DD	imagerel init_builtin+236
	DD	imagerel $chain$7$init_builtin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$init_builtin DD 040021H
	DD	076400H
	DD	063400H
	DD	imagerel init_builtin
	DD	imagerel init_builtin+33
	DD	imagerel $unwind$init_builtin
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$init_builtin DD 040521H
	DD	076405H
	DD	063400H
	DD	imagerel init_builtin
	DD	imagerel init_builtin+33
	DD	imagerel $unwind$init_builtin
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$init_builtin DD 020021H
	DD	063400H
	DD	imagerel init_builtin
	DD	imagerel init_builtin+33
	DD	imagerel $unwind$init_builtin
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$init_builtin DD 020521H
	DD	063405H
	DD	imagerel init_builtin
	DD	imagerel init_builtin+33
	DD	imagerel $unwind$init_builtin
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_builtin DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT ??_C@_0CC@MKJJHIGO@Cannot?5re?9init?5internal?5module?5?$CF@
CONST	SEGMENT
??_C@_0CC@MKJJHIGO@Cannot?5re?9init?5internal?5module?5?$CF@ DB 'Cannot r'
	DB	'e-init internal module %R', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT init_builtin
_TEXT	SEGMENT
name$ = 48
init_builtin PROC					; COMDAT

; 937  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 938  :     struct _inittab *p;
; 939  : 
; 940  :     if (_PyImport_FindExtensionObject(name, name) != NULL)

  00006	48 8b d1	 mov	 rdx, rcx
  00009	48 8b f9	 mov	 rdi, rcx
  0000c	e8 00 00 00 00	 call	 _PyImport_FindExtensionObject
  00011	48 85 c0	 test	 rax, rax
  00014	74 0b		 je	 SHORT $LN8@init_built

; 941  :         return 1;

  00016	b8 01 00 00 00	 mov	 eax, 1

; 968  : }

  0001b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001f	5f		 pop	 rdi
  00020	c3		 ret	 0
$LN8@init_built:
  00021	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 942  : 
; 943  :     for (p = PyImport_Inittab; p->name != NULL; p++) {

  00026	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR PyImport_Inittab
  0002d	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00030	48 85 c0	 test	 rax, rax
  00033	74 1c		 je	 SHORT $LN5@init_built
$LL7@init_built:

; 944  :         PyObject *mod;
; 945  :         PyModuleDef *def;
; 946  :         if (PyUnicode_CompareWithASCIIString(name, p->name) == 0) {

  00035	48 8b d0	 mov	 rdx, rax
  00038	48 8b cf	 mov	 rcx, rdi
  0003b	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00040	85 c0		 test	 eax, eax
  00042	74 1a		 je	 SHORT $LN12@init_built

; 942  : 
; 943  :     for (p = PyImport_Inittab; p->name != NULL; p++) {

  00044	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00048	48 83 c3 10	 add	 rbx, 16
  0004c	48 85 c0	 test	 rax, rax
  0004f	75 e4		 jne	 SHORT $LL7@init_built
$LN5@init_built:

; 965  :         }
; 966  :     }
; 967  :     return 0;

  00051	33 c0		 xor	 eax, eax
  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 968  : }

  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
$LN12@init_built:

; 947  :             if (p->initfunc == NULL) {

  0005e	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00062	48 85 c0	 test	 rax, rax
  00065	75 24		 jne	 SHORT $LN3@init_built

; 948  :                 PyErr_Format(PyExc_ImportError,
; 949  :                     "Cannot re-init internal module %R",
; 950  :                     name);

  00067	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@MKJJHIGO@Cannot?5re?9init?5internal?5module?5?$CF@
  00075	4c 8b c7	 mov	 r8, rdi
  00078	e8 00 00 00 00	 call	 PyErr_Format
  0007d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 951  :                 return -1;

  00082	83 c8 ff	 or	 eax, -1

; 968  : }

  00085	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00089	5f		 pop	 rdi
  0008a	c3		 ret	 0
$LN3@init_built:
  0008b	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi

; 952  :             }
; 953  :             mod = (*p->initfunc)();

  00090	ff d0		 call	 rax
  00092	48 8b f0	 mov	 rsi, rax

; 954  :             if (mod == 0)

  00095	48 85 c0	 test	 rax, rax

; 955  :                 return -1;

  00098	74 22		 je	 SHORT $LN16@init_built

; 956  :             /* Remember pointer to module init function. */
; 957  :             def = PyModule_GetDef(mod);

  0009a	48 8b c8	 mov	 rcx, rax
  0009d	e8 00 00 00 00	 call	 PyModule_GetDef

; 958  :             def->m_base.m_init = p->initfunc;

  000a2	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]

; 959  :             if (_PyImport_FixupExtensionObject(mod, name, name) < 0)

  000a6	4c 8b c7	 mov	 r8, rdi
  000a9	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx
  000ad	48 8b ce	 mov	 rcx, rsi
  000b0	48 8b d7	 mov	 rdx, rdi
  000b3	e8 00 00 00 00	 call	 _PyImport_FixupExtensionObject
  000b8	85 c0		 test	 eax, eax
  000ba	79 13		 jns	 SHORT $LN1@init_built
$LN16@init_built:
  000bc	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000c1	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 960  :                 return -1;

  000c6	83 c8 ff	 or	 eax, -1

; 968  : }

  000c9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cd	5f		 pop	 rdi
  000ce	c3		 ret	 0
$LN1@init_built:

; 961  :             /* FixupExtension has put the module into sys.modules,
; 962  :                so we can release our own reference. */
; 963  :             Py_DECREF(mod);

  000cf	48 8b ce	 mov	 rcx, rsi
  000d2	e8 00 00 00 00	 call	 _Py_DecRef
  000d7	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000dc	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 964  :             return 1;

  000e1	b8 01 00 00 00	 mov	 eax, 1

; 968  : }

  000e6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ea	5f		 pop	 rdi
  000eb	c3		 ret	 0
init_builtin ENDP
_TEXT	ENDS
PUBLIC	PyImport_ImportModule
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ImportModule DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$PyImport_ImportModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ImportModule DD 042101H
	DD	063421H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyImport_ImportModule
_TEXT	SEGMENT
name$ = 48
PyImport_ImportModule PROC				; COMDAT

; 1125 : {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1126 :     PyObject *pname;
; 1127 :     PyObject *result;
; 1128 : 
; 1129 :     pname = PyUnicode_FromString(name);

  00006	e8 00 00 00 00	 call	 PyUnicode_FromString
  0000b	48 8b f8	 mov	 rdi, rax

; 1130 :     if (pname == NULL)

  0000e	48 85 c0	 test	 rax, rax
  00011	75 06		 jne	 SHORT $LN1@PyImport_I@7

; 1135 : }

  00013	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00017	5f		 pop	 rdi
  00018	c3		 ret	 0
$LN1@PyImport_I@7:

; 1131 :         return NULL;
; 1132 :     result = PyImport_Import(pname);

  00019	48 8b c8	 mov	 rcx, rax
  0001c	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00021	e8 00 00 00 00	 call	 PyImport_Import

; 1133 :     Py_DECREF(pname);

  00026	48 8b cf	 mov	 rcx, rdi
  00029	48 8b d8	 mov	 rbx, rax
  0002c	e8 00 00 00 00	 call	 _Py_DecRef

; 1134 :     return result;

  00031	48 8b c3	 mov	 rax, rbx
  00034	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1135 : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
PyImport_ImportModule ENDP
_TEXT	ENDS
PUBLIC	PyImport_ImportModuleNoBlock
; Function compile flags: /Ogtpy
;	COMDAT PyImport_ImportModuleNoBlock
_TEXT	SEGMENT
name$ = 8
PyImport_ImportModuleNoBlock PROC			; COMDAT

; 1149 :     return PyImport_ImportModule(name);
; 1150 : }

  00000	e9 00 00 00 00	 jmp	 PyImport_ImportModule
PyImport_ImportModuleNoBlock ENDP
_TEXT	ENDS
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_03PHKFLJOP@imp?$AA@			; `string'
PUBLIC	PyImport_ReloadModule
EXTRN	_PyObject_CallMethodId:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyImport_ReloadModule DD imagerel $LN10
	DD	imagerel $LN10+198
	DD	imagerel $unwind$PyImport_ReloadModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ReloadModule DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PHKFLJOP@imp?$AA@
CONST	SEGMENT
??_C@_03PHKFLJOP@imp?$AA@ DB 'imp', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
CONST	ENDS
;	COMDAT PyImport_ReloadModule
_TEXT	SEGMENT
m$ = 64
PyImport_ReloadModule PROC				; COMDAT

; 1563 : {

$LN10:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b d9	 mov	 rbx, rcx

; 1564 :     _Py_IDENTIFIER(reload);
; 1565 :     PyObject *reloaded_module = NULL;
; 1566 :     PyObject *modules = PyImport_GetModuleDict();

  0000d	e8 00 00 00 00	 call	 PyImport_GetModuleDict

; 1567 :     PyObject *imp = PyDict_GetItemString(modules, "imp");

  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PHKFLJOP@imp?$AA@
  00019	48 8b c8	 mov	 rcx, rax
  0001c	e8 00 00 00 00	 call	 PyDict_GetItemString
  00021	48 8b f8	 mov	 rdi, rax

; 1568 :     if (imp == NULL) {

  00024	48 85 c0	 test	 rax, rax
  00027	75 1f		 jne	 SHORT $LN3@PyImport_R@3

; 1569 :         imp = PyImport_ImportModule("imp");

  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03PHKFLJOP@imp?$AA@
  00030	e8 00 00 00 00	 call	 PyImport_ImportModule
  00035	48 8b f8	 mov	 rdi, rax

; 1570 :         if (imp == NULL) {

  00038	48 85 c0	 test	 rax, rax
  0003b	75 46		 jne	 SHORT $LN7@PyImport_R@3

; 1581 : }

  0003d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00042	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
$LN3@PyImport_R@3:

; 1571 :             return NULL;
; 1572 :         }
; 1573 :     }
; 1574 :     else {
; 1575 :         Py_INCREF(imp);

  00048	e8 00 00 00 00	 call	 _Py_PXCTX
  0004d	85 c0		 test	 eax, eax
  0004f	75 32		 jne	 SHORT $LN7@PyImport_R@3
  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0005f	4c 8b cf	 mov	 r9, rdi
  00062	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00068	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00070	e8 00 00 00 00	 call	 _PyParallel_Guard
  00075	85 c0		 test	 eax, eax
  00077	75 06		 jne	 SHORT $LN6@PyImport_R@3
  00079	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0007d	74 04		 je	 SHORT $LN7@PyImport_R@3
$LN6@PyImport_R@3:
  0007f	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN7@PyImport_R@3:

; 1576 :     }
; 1577 : 
; 1578 :     reloaded_module = _PyObject_CallMethodId(imp, &PyId_reload, "O", m);

  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00089	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00092	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_reload@?1??PyImport_ReloadModule@@9@9
  00097	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  0009b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  000a2	4c 8b cb	 mov	 r9, rbx
  000a5	48 8b cf	 mov	 rcx, rdi
  000a8	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 1579 :     Py_DECREF(imp);

  000ad	48 8b cf	 mov	 rcx, rdi
  000b0	48 8b d8	 mov	 rbx, rax
  000b3	e8 00 00 00 00	 call	 _Py_DecRef

; 1580 :     return reloaded_module;

  000b8	48 8b c3	 mov	 rax, rbx

; 1581 : }

  000bb	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000c0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c4	5f		 pop	 rdi
  000c5	c3		 ret	 0
PyImport_ReloadModule ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@NKIEEJAP@U?3init_builtin?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$imp_init_builtin DD imagerel imp_init_builtin
	DD	imagerel imp_init_builtin+227
	DD	imagerel $unwind$imp_init_builtin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_init_builtin DD 038e01H
	DD	06348eH
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0P@NKIEEJAP@U?3init_builtin?$AA@
CONST	SEGMENT
??_C@_0P@NKIEEJAP@U?3init_builtin?$AA@ DB 'U:init_builtin', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\import.c
CONST	ENDS
;	COMDAT imp_init_builtin
_TEXT	SEGMENT
self$ = 64
args$ = 72
name$ = 80
imp_init_builtin PROC					; COMDAT

; 1701 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1702 :     PyObject *name;
; 1703 :     int ret;
; 1704 :     PyObject *m;
; 1705 :     if (!PyArg_ParseTuple(args, "U:init_builtin", &name))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 50	 lea	 r8, QWORD PTR name$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@NKIEEJAP@U?3init_builtin?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN7@imp_init_b
$LN19@imp_init_b:

; 1706 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1717 : }

  0001e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00022	c3		 ret	 0
$LN7@imp_init_b:

; 1707 :     ret = init_builtin(name);

  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR name$[rsp]
  00028	e8 00 00 00 00	 call	 init_builtin

; 1708 :     if (ret < 0)

  0002d	85 c0		 test	 eax, eax

; 1709 :         return NULL;

  0002f	78 eb		 js	 SHORT $LN19@imp_init_b

; 1710 :     if (ret == 0) {

  00031	75 51		 jne	 SHORT $LN5@imp_init_b

; 1711 :         Py_INCREF(Py_None);

  00033	e8 00 00 00 00	 call	 _Py_PXCTX
  00038	85 c0		 test	 eax, eax
  0003a	75 3c		 jne	 SHORT $LN11@imp_init_b
  0003c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00051	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00057	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0005f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00064	85 c0		 test	 eax, eax
  00066	75 09		 jne	 SHORT $LN10@imp_init_b
  00068	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0006f	74 07		 je	 SHORT $LN11@imp_init_b
$LN10@imp_init_b:
  00071	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN11@imp_init_b:

; 1712 :         return Py_None;

  00078	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1717 : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
$LN5@imp_init_b:

; 1713 :     }
; 1714 :     m = PyImport_AddModuleObject(name);

  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR name$[rsp]
  00089	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0008e	e8 00 00 00 00	 call	 PyImport_AddModuleObject
  00093	48 8b d8	 mov	 rbx, rax

; 1715 :     Py_XINCREF(m);

  00096	48 85 c0	 test	 rax, rax
  00099	74 3b		 je	 SHORT $LN3@imp_init_b
  0009b	e8 00 00 00 00	 call	 _Py_PXCTX
  000a0	85 c0		 test	 eax, eax
  000a2	75 32		 jne	 SHORT $LN3@imp_init_b
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000b2	4c 8b cb	 mov	 r9, rbx
  000b5	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000bb	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c8	85 c0		 test	 eax, eax
  000ca	75 06		 jne	 SHORT $LN14@imp_init_b
  000cc	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000d0	74 04		 je	 SHORT $LN3@imp_init_b
$LN14@imp_init_b:
  000d2	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN3@imp_init_b:

; 1716 :     return m;

  000d6	48 8b c3	 mov	 rax, rbx
  000d9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1717 : }

  000de	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e2	c3		 ret	 0
imp_init_builtin ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@LDAODFLF@initializing?5zipimport?5failed?$AA@ ; `string'
PUBLIC	??_C@_0BM@NOACPIFF@?$CD?5installed?5zipimport?5hook?6?$AA@ ; `string'
PUBLIC	??_C@_0CG@MBDJJEAL@?$CD?5can?8t?5import?5zipimport?4zipimpo@ ; `string'
PUBLIC	??_C@_0BK@BDFGNOJH@?$CD?5can?8t?5import?5zipimport?6?$AA@ ; `string'
PUBLIC	??_C@_09INHLDGFD@zipimport?$AA@			; `string'
PUBLIC	??_C@_0BN@OKCAPEKD@?$CD?5installing?5zipimport?5hook?6?$AA@ ; `string'
PUBLIC	_PyImportZip_Init
EXTRN	PyList_Insert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImportZip_Init DD imagerel $LN13
	DD	imagerel $LN13+308
	DD	imagerel $unwind$_PyImportZip_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImportZip_Init DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BO@LDAODFLF@initializing?5zipimport?5failed?$AA@
CONST	SEGMENT
??_C@_0BO@LDAODFLF@initializing?5zipimport?5failed?$AA@ DB 'initializing '
	DB	'zipimport failed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NOACPIFF@?$CD?5installed?5zipimport?5hook?6?$AA@
CONST	SEGMENT
??_C@_0BM@NOACPIFF@?$CD?5installed?5zipimport?5hook?6?$AA@ DB '# installe'
	DB	'd zipimport hook', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MBDJJEAL@?$CD?5can?8t?5import?5zipimport?4zipimpo@
CONST	SEGMENT
??_C@_0CG@MBDJJEAL@?$CD?5can?8t?5import?5zipimport?4zipimpo@ DB '# can''t'
	DB	' import zipimport.zipimporter', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BDFGNOJH@?$CD?5can?8t?5import?5zipimport?6?$AA@
CONST	SEGMENT
??_C@_0BK@BDFGNOJH@?$CD?5can?8t?5import?5zipimport?6?$AA@ DB '# can''t im'
	DB	'port zipimport', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09INHLDGFD@zipimport?$AA@
CONST	SEGMENT
??_C@_09INHLDGFD@zipimport?$AA@ DB 'zipimport', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OKCAPEKD@?$CD?5installing?5zipimport?5hook?6?$AA@
CONST	SEGMENT
??_C@_0BN@OKCAPEKD@?$CD?5installing?5zipimport?5hook?6?$AA@ DB '# install'
	DB	'ing zipimport hook', 0aH, 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyImportZip_Init
_TEXT	SEGMENT
_PyImportZip_Init PROC					; COMDAT

; 91   : {

$LN13:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 92   :     PyObject *path_hooks, *zimpimport;
; 93   :     int err = 0;
; 94   : 
; 95   :     path_hooks = PySys_GetObject("path_hooks");

  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PDLDEHCN@path_hooks?$AA@
  00016	e8 00 00 00 00	 call	 PySys_GetObject
  0001b	48 8b d8	 mov	 rbx, rax

; 96   :     if (path_hooks == NULL)

  0001e	48 85 c0	 test	 rax, rax
  00021	0f 84 ec 00 00
	00		 je	 $error$121648

; 97   :         goto error;
; 98   : 
; 99   :     if (Py_VerboseFlag)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  0002e	74 0c		 je	 SHORT $LN9@PyImportZi

; 100  :         PySys_WriteStderr("# installing zipimport hook\n");

  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@OKCAPEKD@?$CD?5installing?5zipimport?5hook?6?$AA@
  00037	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN9@PyImportZi:

; 101  : 
; 102  :     zimpimport = PyImport_ImportModule("zipimport");

  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09INHLDGFD@zipimport?$AA@
  00043	e8 00 00 00 00	 call	 PyImport_ImportModule
  00048	48 8b f8	 mov	 rdi, rax

; 103  :     if (zimpimport == NULL) {

  0004b	48 85 c0	 test	 rax, rax
  0004e	75 2c		 jne	 SHORT $LN8@PyImportZi

; 104  :         PyErr_Clear(); /* No zip import module -- okay */

  00050	e8 00 00 00 00	 call	 PyErr_Clear

; 105  :         if (Py_VerboseFlag)

  00055	39 3d 00 00 00
	00		 cmp	 DWORD PTR Py_VerboseFlag, edi
  0005b	0f 84 c3 00 00
	00		 je	 $LN1@PyImportZi

; 106  :             PySys_WriteStderr("# can't import zipimport\n");

  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BDFGNOJH@?$CD?5can?8t?5import?5zipimport?6?$AA@

; 137  : }

  00068	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00072	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00076	5f		 pop	 rdi
  00077	e9 00 00 00 00	 jmp	 PySys_WriteStderr
$LN8@PyImportZi:

; 107  :     }
; 108  :     else {
; 109  :         _Py_IDENTIFIER(zipimporter);
; 110  :         PyObject *zipimporter = _PyObject_GetAttrId(zimpimport,
; 111  :                                                     &PyId_zipimporter);

  0007c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00082	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0008b	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_zipimporter@?3??_PyImportZip_Init@@9@9
  00090	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00094	48 8b cf	 mov	 rcx, rdi
  00097	e8 00 00 00 00	 call	 _PyObject_GetAttrId

; 112  :         Py_DECREF(zimpimport);

  0009c	48 8b cf	 mov	 rcx, rdi
  0009f	48 8b f0	 mov	 rsi, rax
  000a2	e8 00 00 00 00	 call	 _Py_DecRef

; 113  :         if (zipimporter == NULL) {

  000a7	48 85 f6	 test	 rsi, rsi
  000aa	75 28		 jne	 SHORT $LN5@PyImportZi

; 114  :             PyErr_Clear(); /* No zipimporter object -- okay */

  000ac	e8 00 00 00 00	 call	 PyErr_Clear

; 115  :             if (Py_VerboseFlag)

  000b1	39 35 00 00 00
	00		 cmp	 DWORD PTR Py_VerboseFlag, esi
  000b7	74 6b		 je	 SHORT $LN1@PyImportZi

; 116  :                 PySys_WriteStderr(
; 117  :                     "# can't import zipimport.zipimporter\n");

  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@MBDJJEAL@?$CD?5can?8t?5import?5zipimport?4zipimpo@

; 137  : }

  000c0	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c5	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000ca	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ce	5f		 pop	 rdi
  000cf	e9 00 00 00 00	 jmp	 PySys_WriteStderr
$LN5@PyImportZi:

; 118  :         }
; 119  :         else {
; 120  :             /* sys.path_hooks.insert(0, zipimporter) */
; 121  :             err = PyList_Insert(path_hooks, 0, zipimporter);

  000d4	4c 8b c6	 mov	 r8, rsi
  000d7	33 d2		 xor	 edx, edx
  000d9	48 8b cb	 mov	 rcx, rbx
  000dc	e8 00 00 00 00	 call	 PyList_Insert

; 122  :             Py_DECREF(zipimporter);

  000e1	48 8b ce	 mov	 rcx, rsi
  000e4	8b d8		 mov	 ebx, eax
  000e6	e8 00 00 00 00	 call	 _Py_DecRef

; 123  :             if (err < 0) {

  000eb	85 db		 test	 ebx, ebx
  000ed	78 24		 js	 SHORT $error$121648

; 124  :                 goto error;
; 125  :             }
; 126  :             if (Py_VerboseFlag)

  000ef	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  000f6	74 2c		 je	 SHORT $LN1@PyImportZi

; 127  :                 PySys_WriteStderr(
; 128  :                     "# installed zipimport hook\n");

  000f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@NOACPIFF@?$CD?5installed?5zipimport?5hook?6?$AA@

; 137  : }

  000ff	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00104	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00109	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0010d	5f		 pop	 rdi
  0010e	e9 00 00 00 00	 jmp	 PySys_WriteStderr
$error$121648:

; 129  :         }
; 130  :     }
; 131  : 
; 132  :     return;
; 133  : 
; 134  :   error:
; 135  :     PyErr_Print();

  00113	e8 00 00 00 00	 call	 PyErr_Print

; 136  :     Py_FatalError("initializing zipimport failed");

  00118	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@LDAODFLF@initializing?5zipimport?5failed?$AA@
  0011f	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyImportZi:

; 137  : }

  00124	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00129	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0012e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00132	5f		 pop	 rdi
  00133	c3		 ret	 0
_PyImportZip_Init ENDP
_TEXT	ENDS
PUBLIC	PyImport_ExecCodeModule
; Function compile flags: /Ogtpy
;	COMDAT PyImport_ExecCodeModule
_TEXT	SEGMENT
name$ = 8
co$ = 16
PyImport_ExecCodeModule PROC				; COMDAT

; 650  :     return PyImport_ExecCodeModuleWithPathnames(
; 651  :         name, co, (char *)NULL, (char *)NULL);

  00000	45 33 c9	 xor	 r9d, r9d
  00003	45 33 c0	 xor	 r8d, r8d

; 652  : }

  00006	e9 00 00 00 00	 jmp	 PyImport_ExecCodeModuleWithPathnames
PyImport_ExecCodeModule ENDP
_TEXT	ENDS
PUBLIC	PyImport_ExecCodeModuleEx
; Function compile flags: /Ogtpy
;	COMDAT PyImport_ExecCodeModuleEx
_TEXT	SEGMENT
name$ = 8
co$ = 16
pathname$ = 24
PyImport_ExecCodeModuleEx PROC				; COMDAT

; 657  :     return PyImport_ExecCodeModuleWithPathnames(
; 658  :         name, co, pathname, (char *)NULL);

  00000	45 33 c9	 xor	 r9d, r9d

; 659  : }

  00003	e9 00 00 00 00	 jmp	 PyImport_ExecCodeModuleWithPathnames
PyImport_ExecCodeModuleEx ENDP
_TEXT	ENDS
END
