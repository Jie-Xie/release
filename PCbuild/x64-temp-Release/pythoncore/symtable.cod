; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@IPOAGGKK@symtable?5entry?$AA@		; `string'
PUBLIC	??_C@_06ILKIAHNN@lineno?$AA@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	??_C@_06PEIBIDGM@nested?$AA@			; `string'
PUBLIC	??_C@_09JBEJHDNF@optimized?$AA@			; `string'
PUBLIC	??_C@_08GOINNFB@children?$AA@			; `string'
PUBLIC	??_C@_08OIBHAMNO@varnames?$AA@			; `string'
PUBLIC	??_C@_07LAPAOEJA@symbols?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_02EGCJHIOB@id?$AA@			; `string'
PUBLIC	PySTEntry_Type
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
top	DQ	01H DUP (?)
lambda	DQ	01H DUP (?)
genexpr	DQ	01H DUP (?)
listcomp DQ	01H DUP (?)
setcomp	DQ	01H DUP (?)
dictcomp DQ	01H DUP (?)
__class__ DQ	01H DUP (?)
__locals__ DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0P@IPOAGGKK@symtable?5entry?$AA@
CONST	SEGMENT
??_C@_0P@IPOAGGKK@symtable?5entry?$AA@ DB 'symtable entry', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
ste_memberlist DQ FLAT:??_C@_02EGCJHIOB@id?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07LAPAOEJA@symbols?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08OIBHAMNO@varnames?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000078H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08GOINNFB@children?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000080H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_09JBEJHDNF@optimized?$AA@
	DD	01H
	ORG $+4
	DQ	000000000000008cH
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06PEIBIDGM@nested?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000090H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04GPMDFGEJ@type?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000088H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06ILKIAHNN@lineno?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000098H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PySTEntry_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@IPOAGGKK@symtable?5entry?$AA@
	DQ	00000000000000c0H
	DQ	0000000000000000H
	DQ	FLAT:ste_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:ste_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:ste_memberlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+72
_DATA	ENDS
;	COMDAT ??_C@_06ILKIAHNN@lineno?$AA@
CONST	SEGMENT
??_C@_06ILKIAHNN@lineno?$AA@ DB 'lineno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PEIBIDGM@nested?$AA@
CONST	SEGMENT
??_C@_06PEIBIDGM@nested?$AA@ DB 'nested', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JBEJHDNF@optimized?$AA@
CONST	SEGMENT
??_C@_09JBEJHDNF@optimized?$AA@ DB 'optimized', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GOINNFB@children?$AA@
CONST	SEGMENT
??_C@_08GOINNFB@children?$AA@ DB 'children', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OIBHAMNO@varnames?$AA@
CONST	SEGMENT
??_C@_08OIBHAMNO@varnames?$AA@ DB 'varnames', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LAPAOEJA@symbols?$AA@
CONST	SEGMENT
??_C@_07LAPAOEJA@symbols?$AA@ DB 'symbols', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id?$AA@
CONST	SEGMENT
??_C@_02EGCJHIOB@id?$AA@ DB 'id', 00H			; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyDict_SetItem:PROC
EXTRN	PyList_New:PROC
EXTRN	PyDict_New:PROC
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	PyLong_FromVoidPtr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$ste_new DD imagerel ste_new
	DD	imagerel ste_new+515
	DD	imagerel $unwind$ste_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ste_new DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0c016521aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\symtable.c
xdata	ENDS
;	COMDAT ste_new
_TEXT	SEGMENT
st$ = 64
name$ = 72
block$ = 80
key$ = 88
lineno$ = 96
col_offset$ = 104
ste_new	PROC						; COMDAT

; 25   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0001a	48 8b e9	 mov	 rbp, rcx

; 26   :     PySTEntryObject *ste = NULL;
; 27   :     PyObject *k = NULL;
; 28   : 
; 29   :     k = PyLong_FromVoidPtr(key);

  0001d	49 8b c9	 mov	 rcx, r9
  00020	45 8b e0	 mov	 r12d, r8d
  00023	48 8b fa	 mov	 rdi, rdx
  00026	e8 00 00 00 00	 call	 PyLong_FromVoidPtr
  0002b	48 8b f0	 mov	 rsi, rax

; 30   :     if (k == NULL)

  0002e	48 85 c0	 test	 rax, rax
  00031	0f 84 af 01 00
	00		 je	 $LN3@ste_new

; 31   :         goto fail;
; 32   :     ste = PyObject_New(PySTEntryObject, &PySTEntry_Type);

  00037	e8 00 00 00 00	 call	 _Py_PXCTX
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySTEntry_Type
  00043	85 c0		 test	 eax, eax
  00045	74 07		 je	 SHORT $LN15@ste_new
  00047	e8 00 00 00 00	 call	 _PxObject_New
  0004c	eb 05		 jmp	 SHORT $LN32@ste_new
$LN15@ste_new:
  0004e	e8 00 00 00 00	 call	 _PyObject_New
$LN32@ste_new:
  00053	48 8b d8	 mov	 rbx, rax

; 33   :     if (ste == NULL) {

  00056	48 85 c0	 test	 rax, rax
  00059	75 0d		 jne	 SHORT $LN11@ste_new

; 34   :         Py_DECREF(k);

  0005b	48 8b ce	 mov	 rcx, rsi
  0005e	e8 00 00 00 00	 call	 _Py_DecRef

; 35   :         goto fail;

  00063	e9 7e 01 00 00	 jmp	 $LN3@ste_new
$LN11@ste_new:

; 36   :     }
; 37   :     ste->ste_table = st;

  00068	48 89 ab b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rbp

; 38   :     ste->ste_id = k; /* ste owns reference to k */

  0006f	48 89 73 60	 mov	 QWORD PTR [rbx+96], rsi

; 39   : 
; 40   :     ste->ste_name = name;

  00073	48 89 7b 70	 mov	 QWORD PTR [rbx+112], rdi

; 41   :     Py_INCREF(name);

  00077	e8 00 00 00 00	 call	 _Py_PXCTX
  0007c	85 c0		 test	 eax, eax
  0007e	75 32		 jne	 SHORT $LN18@ste_new
  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0008e	4c 8b cf	 mov	 r9, rdi
  00091	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00097	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0009f	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a4	85 c0		 test	 eax, eax
  000a6	75 06		 jne	 SHORT $LN17@ste_new
  000a8	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000ac	74 04		 je	 SHORT $LN18@ste_new
$LN17@ste_new:
  000ae	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN18@ste_new:

; 42   : 
; 43   :     ste->ste_symbols = NULL;

  000b2	33 ff		 xor	 edi, edi
  000b4	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi

; 44   :     ste->ste_varnames = NULL;

  000b8	48 89 7b 78	 mov	 QWORD PTR [rbx+120], rdi

; 45   :     ste->ste_children = NULL;

  000bc	48 89 bb 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rdi

; 46   : 
; 47   :     ste->ste_symbols = PyDict_New();

  000c3	e8 00 00 00 00	 call	 PyDict_New
  000c8	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 48   :     if (ste->ste_symbols == NULL)

  000cc	48 85 c0	 test	 rax, rax
  000cf	0f 84 ac 00 00
	00		 je	 $fail$21418

; 49   :         goto fail;
; 50   : 
; 51   :     ste->ste_varnames = PyList_New(0);

  000d5	33 c9		 xor	 ecx, ecx
  000d7	e8 00 00 00 00	 call	 PyList_New
  000dc	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax

; 52   :     if (ste->ste_varnames == NULL)

  000e0	48 85 c0	 test	 rax, rax
  000e3	0f 84 98 00 00
	00		 je	 $fail$21418

; 53   :         goto fail;
; 54   : 
; 55   :     ste->ste_children = PyList_New(0);

  000e9	33 c9		 xor	 ecx, ecx
  000eb	e8 00 00 00 00	 call	 PyList_New
  000f0	48 89 83 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rax

; 56   :     if (ste->ste_children == NULL)

  000f7	48 85 c0	 test	 rax, rax
  000fa	0f 84 81 00 00
	00		 je	 $fail$21418

; 57   :         goto fail;
; 58   : 
; 59   :     ste->ste_type = block;
; 60   :     ste->ste_unoptimized = 0;
; 61   :     ste->ste_nested = 0;
; 62   :     ste->ste_free = 0;
; 63   :     ste->ste_varargs = 0;
; 64   :     ste->ste_varkeywords = 0;
; 65   :     ste->ste_opt_lineno = 0;
; 66   :     ste->ste_opt_col_offset = 0;
; 67   :     ste->ste_tmpname = 0;
; 68   :     ste->ste_lineno = lineno;

  00100	8b 44 24 60	 mov	 eax, DWORD PTR lineno$[rsp]
  00104	83 a3 94 00 00
	00 e6		 and	 DWORD PTR [rbx+148], -26 ; ffffffe6H
  0010b	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  00111	89 83 98 00 00
	00		 mov	 DWORD PTR [rbx+152], eax

; 69   :     ste->ste_col_offset = col_offset;

  00117	8b 44 24 68	 mov	 eax, DWORD PTR col_offset$[rsp]
  0011b	44 89 a3 88 00
	00 00		 mov	 DWORD PTR [rbx+136], r12d
  00122	48 89 bb 8c 00
	00 00		 mov	 QWORD PTR [rbx+140], rdi
  00129	48 89 bb a0 00
	00 00		 mov	 QWORD PTR [rbx+160], rdi
  00130	89 bb a8 00 00
	00		 mov	 DWORD PTR [rbx+168], edi
  00136	89 83 9c 00 00
	00		 mov	 DWORD PTR [rbx+156], eax

; 70   : 
; 71   :     if (st->st_cur != NULL &&
; 72   :         (st->st_cur->ste_nested ||
; 73   :          st->st_cur->ste_type == FunctionBlock))

  0013c	48 8b 45 08	 mov	 rax, QWORD PTR [rbp+8]
  00140	48 85 c0	 test	 rax, rax
  00143	74 1a		 je	 SHORT $LN7@ste_new
  00145	39 b8 90 00 00
	00		 cmp	 DWORD PTR [rax+144], edi
  0014b	75 08		 jne	 SHORT $LN6@ste_new
  0014d	39 b8 88 00 00
	00		 cmp	 DWORD PTR [rax+136], edi
  00153	75 0a		 jne	 SHORT $LN7@ste_new
$LN6@ste_new:

; 74   :         ste->ste_nested = 1;

  00155	c7 83 90 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rbx+144], 1
$LN7@ste_new:

; 75   :     ste->ste_child_free = 0;
; 76   :     ste->ste_generator = 0;
; 77   :     ste->ste_returns_value = 0;
; 78   : 
; 79   :     if (PyDict_SetItem(st->st_blocks, ste->ste_id, (PyObject *)ste) < 0)

  0015f	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  00163	83 e1 d9	 and	 ecx, -39		; ffffffd9H
  00166	4c 8b c3	 mov	 r8, rbx
  00169	89 8b 94 00 00
	00		 mov	 DWORD PTR [rbx+148], ecx
  0016f	48 8b 4d 18	 mov	 rcx, QWORD PTR [rbp+24]
  00173	e8 00 00 00 00	 call	 PyDict_SetItem
  00178	85 c0		 test	 eax, eax
  0017a	78 05		 js	 SHORT $fail$21418

; 80   :         goto fail;
; 81   : 
; 82   :     return ste;

  0017c	48 8b c3	 mov	 rax, rbx
  0017f	eb 67		 jmp	 SHORT $LN13@ste_new
$fail$21418:

; 83   :  fail:
; 84   :     Py_XDECREF(ste);

  00181	e8 00 00 00 00	 call	 _Py_PXCTX
  00186	85 c0		 test	 eax, eax
  00188	75 5c		 jne	 SHORT $LN3@ste_new
  0018a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0018e	a8 20		 test	 al, 32			; 00000020H
  00190	75 4c		 jne	 SHORT $LN25@ste_new
  00192	84 c0		 test	 al, al
  00194	78 48		 js	 SHORT $LN25@ste_new
  00196	a8 02		 test	 al, 2
  00198	75 4c		 jne	 SHORT $LN3@ste_new
  0019a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0019e	75 46		 jne	 SHORT $LN3@ste_new
  001a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001ae	4c 8b cb	 mov	 r9, rbx
  001b1	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001b7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001bf	e8 00 00 00 00	 call	 _PyParallel_Guard
  001c4	48 8b cb	 mov	 rcx, rbx
  001c7	85 c0		 test	 eax, eax
  001c9	74 07		 je	 SHORT $LN30@ste_new
  001cb	e8 00 00 00 00	 call	 _Px_Dealloc
  001d0	eb 14		 jmp	 SHORT $LN3@ste_new
$LN30@ste_new:
  001d2	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001d6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001dc	eb 08		 jmp	 SHORT $LN3@ste_new
$LN25@ste_new:
  001de	48 8b cb	 mov	 rcx, rbx
  001e1	e8 00 00 00 00	 call	 Px_DecRef
$LN3@ste_new:

; 85   :     return NULL;

  001e6	33 c0		 xor	 eax, eax
$LN13@ste_new:

; 86   : }

  001e8	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001ed	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  001f2	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  001f7	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  001fc	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00200	41 5c		 pop	 r12
  00202	c3		 ret	 0
ste_new	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@MMMHNHK@?$DMsymtable?5entry?5?$CFU?$CI?$CFld?$CJ?0?5line?5?$CFd@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyLong_AsLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$ste_repr DD imagerel ste_repr
	DD	imagerel ste_repr+49
	DD	imagerel $unwind$ste_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ste_repr DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CC@MMMHNHK@?$DMsymtable?5entry?5?$CFU?$CI?$CFld?$CJ?0?5line?5?$CFd@
CONST	SEGMENT
??_C@_0CC@MMMHNHK@?$DMsymtable?5entry?5?$CFU?$CI?$CFld?$CJ?0?5line?5?$CFd@ DB '<'
	DB	'symtable entry %U(%ld), line %d>', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ste_repr
_TEXT	SEGMENT
ste$ = 48
ste_repr PROC						; COMDAT

; 90   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 91   :     return PyUnicode_FromFormat("<symtable entry %U(%ld), line %d>",
; 92   :                                 ste->ste_name,
; 93   :                                 PyLong_AS_LONG(ste->ste_id), ste->ste_lineno);

  00009	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0000d	e8 00 00 00 00	 call	 PyLong_AsLong
  00012	44 8b 8b 98 00
	00 00		 mov	 r9d, DWORD PTR [rbx+152]
  00019	48 8b 53 70	 mov	 rdx, QWORD PTR [rbx+112]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@MMMHNHK@?$DMsymtable?5entry?5?$CFU?$CI?$CFld?$CJ?0?5line?5?$CFd@
  00024	44 8b c0	 mov	 r8d, eax

; 94   : }

  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5b		 pop	 rbx
  0002c	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
ste_repr ENDP
_TEXT	ENDS
EXTRN	PyObject_Free:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$ste_dealloc DD imagerel ste_dealloc
	DD	imagerel ste_dealloc+631
	DD	imagerel $unwind$ste_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ste_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\symtable.c
xdata	ENDS
;	COMDAT ste_dealloc
_TEXT	SEGMENT
ste$ = 64
ste_dealloc PROC					; COMDAT

; 98   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 99   :     ste->ste_table = NULL;
; 100  :     Py_XDECREF(ste->ste_id);

  0000a	48 8b 59 60	 mov	 rbx, QWORD PTR [rcx+96]
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	48 c7 81 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rcx+176], 0
  0001c	48 85 db	 test	 rbx, rbx
  0001f	74 65		 je	 SHORT $LN19@ste_deallo
  00021	e8 00 00 00 00	 call	 _Py_PXCTX
  00026	85 c0		 test	 eax, eax
  00028	75 5c		 jne	 SHORT $LN19@ste_deallo
  0002a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0002e	a8 20		 test	 al, 32			; 00000020H
  00030	75 4c		 jne	 SHORT $LN27@ste_deallo
  00032	84 c0		 test	 al, al
  00034	78 48		 js	 SHORT $LN27@ste_deallo
  00036	a8 02		 test	 al, 2
  00038	75 4c		 jne	 SHORT $LN19@ste_deallo
  0003a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0003e	75 46		 jne	 SHORT $LN19@ste_deallo
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0004e	4c 8b cb	 mov	 r9, rbx
  00051	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00057	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0005f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00064	48 8b cb	 mov	 rcx, rbx
  00067	85 c0		 test	 eax, eax
  00069	74 07		 je	 SHORT $LN32@ste_deallo
  0006b	e8 00 00 00 00	 call	 _Px_Dealloc
  00070	eb 14		 jmp	 SHORT $LN19@ste_deallo
$LN32@ste_deallo:
  00072	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00076	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0007c	eb 08		 jmp	 SHORT $LN19@ste_deallo
$LN27@ste_deallo:
  0007e	48 8b cb	 mov	 rcx, rbx
  00081	e8 00 00 00 00	 call	 Px_DecRef
$LN19@ste_deallo:

; 101  :     Py_XDECREF(ste->ste_name);

  00086	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  0008a	48 85 db	 test	 rbx, rbx
  0008d	74 65		 je	 SHORT $LN15@ste_deallo
  0008f	e8 00 00 00 00	 call	 _Py_PXCTX
  00094	85 c0		 test	 eax, eax
  00096	75 5c		 jne	 SHORT $LN15@ste_deallo
  00098	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0009c	a8 20		 test	 al, 32			; 00000020H
  0009e	75 4c		 jne	 SHORT $LN38@ste_deallo
  000a0	84 c0		 test	 al, al
  000a2	78 48		 js	 SHORT $LN38@ste_deallo
  000a4	a8 02		 test	 al, 2
  000a6	75 4c		 jne	 SHORT $LN15@ste_deallo
  000a8	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000ac	75 46		 jne	 SHORT $LN15@ste_deallo
  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000bc	4c 8b cb	 mov	 r9, rbx
  000bf	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000c5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000cd	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d2	48 8b cb	 mov	 rcx, rbx
  000d5	85 c0		 test	 eax, eax
  000d7	74 07		 je	 SHORT $LN43@ste_deallo
  000d9	e8 00 00 00 00	 call	 _Px_Dealloc
  000de	eb 14		 jmp	 SHORT $LN15@ste_deallo
$LN43@ste_deallo:
  000e0	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000e4	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000ea	eb 08		 jmp	 SHORT $LN15@ste_deallo
$LN38@ste_deallo:
  000ec	48 8b cb	 mov	 rcx, rbx
  000ef	e8 00 00 00 00	 call	 Px_DecRef
$LN15@ste_deallo:

; 102  :     Py_XDECREF(ste->ste_symbols);

  000f4	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  000f8	48 85 db	 test	 rbx, rbx
  000fb	74 65		 je	 SHORT $LN11@ste_deallo
  000fd	e8 00 00 00 00	 call	 _Py_PXCTX
  00102	85 c0		 test	 eax, eax
  00104	75 5c		 jne	 SHORT $LN11@ste_deallo
  00106	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0010a	a8 20		 test	 al, 32			; 00000020H
  0010c	75 4c		 jne	 SHORT $LN49@ste_deallo
  0010e	84 c0		 test	 al, al
  00110	78 48		 js	 SHORT $LN49@ste_deallo
  00112	a8 02		 test	 al, 2
  00114	75 4c		 jne	 SHORT $LN11@ste_deallo
  00116	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0011a	75 46		 jne	 SHORT $LN11@ste_deallo
  0011c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00123	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0012a	4c 8b cb	 mov	 r9, rbx
  0012d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00133	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0013b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00140	48 8b cb	 mov	 rcx, rbx
  00143	85 c0		 test	 eax, eax
  00145	74 07		 je	 SHORT $LN54@ste_deallo
  00147	e8 00 00 00 00	 call	 _Px_Dealloc
  0014c	eb 14		 jmp	 SHORT $LN11@ste_deallo
$LN54@ste_deallo:
  0014e	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00152	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00158	eb 08		 jmp	 SHORT $LN11@ste_deallo
$LN49@ste_deallo:
  0015a	48 8b cb	 mov	 rcx, rbx
  0015d	e8 00 00 00 00	 call	 Px_DecRef
$LN11@ste_deallo:

; 103  :     Py_XDECREF(ste->ste_varnames);

  00162	48 8b 5f 78	 mov	 rbx, QWORD PTR [rdi+120]
  00166	48 85 db	 test	 rbx, rbx
  00169	74 65		 je	 SHORT $LN7@ste_deallo
  0016b	e8 00 00 00 00	 call	 _Py_PXCTX
  00170	85 c0		 test	 eax, eax
  00172	75 5c		 jne	 SHORT $LN7@ste_deallo
  00174	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00178	a8 20		 test	 al, 32			; 00000020H
  0017a	75 4c		 jne	 SHORT $LN60@ste_deallo
  0017c	84 c0		 test	 al, al
  0017e	78 48		 js	 SHORT $LN60@ste_deallo
  00180	a8 02		 test	 al, 2
  00182	75 4c		 jne	 SHORT $LN7@ste_deallo
  00184	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00188	75 46		 jne	 SHORT $LN7@ste_deallo
  0018a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00191	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00198	4c 8b cb	 mov	 r9, rbx
  0019b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001a1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001a9	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ae	48 8b cb	 mov	 rcx, rbx
  001b1	85 c0		 test	 eax, eax
  001b3	74 07		 je	 SHORT $LN65@ste_deallo
  001b5	e8 00 00 00 00	 call	 _Px_Dealloc
  001ba	eb 14		 jmp	 SHORT $LN7@ste_deallo
$LN65@ste_deallo:
  001bc	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001c0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001c6	eb 08		 jmp	 SHORT $LN7@ste_deallo
$LN60@ste_deallo:
  001c8	48 8b cb	 mov	 rcx, rbx
  001cb	e8 00 00 00 00	 call	 Px_DecRef
$LN7@ste_deallo:

; 104  :     Py_XDECREF(ste->ste_children);

  001d0	48 8b 9f 80 00
	00 00		 mov	 rbx, QWORD PTR [rdi+128]
  001d7	48 85 db	 test	 rbx, rbx
  001da	0f 84 85 00 00
	00		 je	 $LN3@ste_deallo
  001e0	e8 00 00 00 00	 call	 _Py_PXCTX
  001e5	85 c0		 test	 eax, eax
  001e7	75 7c		 jne	 SHORT $LN3@ste_deallo
  001e9	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001ed	a8 20		 test	 al, 32			; 00000020H
  001ef	75 6c		 jne	 SHORT $LN71@ste_deallo
  001f1	84 c0		 test	 al, al
  001f3	78 68		 js	 SHORT $LN71@ste_deallo
  001f5	a8 02		 test	 al, 2
  001f7	75 6c		 jne	 SHORT $LN3@ste_deallo
  001f9	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001fd	75 66		 jne	 SHORT $LN3@ste_deallo
  001ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00206	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0020d	4c 8b cb	 mov	 r9, rbx
  00210	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00216	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0021e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00223	48 8b cb	 mov	 rcx, rbx
  00226	85 c0		 test	 eax, eax
  00228	74 17		 je	 SHORT $LN76@ste_deallo
  0022a	e8 00 00 00 00	 call	 _Px_Dealloc

; 105  :     PyObject_Del(ste);

  0022f	48 8b cf	 mov	 rcx, rdi

; 106  : }

  00232	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00237	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0023b	5f		 pop	 rdi
  0023c	e9 00 00 00 00	 jmp	 PyObject_Free

; 104  :     Py_XDECREF(ste->ste_children);

$LN76@ste_deallo:
  00241	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00245	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 105  :     PyObject_Del(ste);

  0024b	48 8b cf	 mov	 rcx, rdi

; 106  : }

  0024e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00253	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00257	5f		 pop	 rdi
  00258	e9 00 00 00 00	 jmp	 PyObject_Free

; 104  :     Py_XDECREF(ste->ste_children);

$LN71@ste_deallo:
  0025d	48 8b cb	 mov	 rcx, rbx
  00260	e8 00 00 00 00	 call	 Px_DecRef
$LN3@ste_deallo:

; 105  :     PyObject_Del(ste);

  00265	48 8b cf	 mov	 rcx, rdi

; 106  : }

  00268	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0026d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00271	5f		 pop	 rdi
  00272	e9 00 00 00 00	 jmp	 PyObject_Free
ste_dealloc ENDP
_TEXT	ENDS
PUBLIC	PySymtable_Free
EXTRN	PyMem_Free:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PySymtable_Free DD imagerel $LN33
	DD	imagerel $LN33+287
	DD	imagerel $unwind$PySymtable_Free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySymtable_Free DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\symtable.c
xdata	ENDS
;	COMDAT PySymtable_Free
_TEXT	SEGMENT
st$ = 64
PySymtable_Free PROC					; COMDAT

; 311  : {

$LN33:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 312  :     Py_XDECREF(st->st_blocks);

  0000a	48 8b 59 18	 mov	 rbx, QWORD PTR [rcx+24]
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	48 85 db	 test	 rbx, rbx
  00014	74 65		 je	 SHORT $LN7@PySymtable
  00016	e8 00 00 00 00	 call	 _Py_PXCTX
  0001b	85 c0		 test	 eax, eax
  0001d	75 5c		 jne	 SHORT $LN7@PySymtable
  0001f	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00023	a8 20		 test	 al, 32			; 00000020H
  00025	75 4c		 jne	 SHORT $LN15@PySymtable
  00027	84 c0		 test	 al, al
  00029	78 48		 js	 SHORT $LN15@PySymtable
  0002b	a8 02		 test	 al, 2
  0002d	75 4c		 jne	 SHORT $LN7@PySymtable
  0002f	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00033	75 46		 jne	 SHORT $LN7@PySymtable
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00043	4c 8b cb	 mov	 r9, rbx
  00046	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	48 8b cb	 mov	 rcx, rbx
  0005c	85 c0		 test	 eax, eax
  0005e	74 07		 je	 SHORT $LN20@PySymtable
  00060	e8 00 00 00 00	 call	 _Px_Dealloc
  00065	eb 14		 jmp	 SHORT $LN7@PySymtable
$LN20@PySymtable:
  00067	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0006b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00071	eb 08		 jmp	 SHORT $LN7@PySymtable
$LN15@PySymtable:
  00073	48 8b cb	 mov	 rcx, rbx
  00076	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PySymtable:

; 313  :     Py_XDECREF(st->st_stack);

  0007b	48 8b 5f 20	 mov	 rbx, QWORD PTR [rdi+32]
  0007f	48 85 db	 test	 rbx, rbx
  00082	0f 84 85 00 00
	00		 je	 $LN3@PySymtable
  00088	e8 00 00 00 00	 call	 _Py_PXCTX
  0008d	85 c0		 test	 eax, eax
  0008f	75 7c		 jne	 SHORT $LN3@PySymtable
  00091	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00095	a8 20		 test	 al, 32			; 00000020H
  00097	75 6c		 jne	 SHORT $LN26@PySymtable
  00099	84 c0		 test	 al, al
  0009b	78 68		 js	 SHORT $LN26@PySymtable
  0009d	a8 02		 test	 al, 2
  0009f	75 6c		 jne	 SHORT $LN3@PySymtable
  000a1	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a5	75 66		 jne	 SHORT $LN3@PySymtable
  000a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b5	4c 8b cb	 mov	 r9, rbx
  000b8	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000be	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cb	48 8b cb	 mov	 rcx, rbx
  000ce	85 c0		 test	 eax, eax
  000d0	74 17		 je	 SHORT $LN31@PySymtable
  000d2	e8 00 00 00 00	 call	 _Px_Dealloc

; 314  :     PyMem_Free((void *)st);

  000d7	48 8b cf	 mov	 rcx, rdi

; 315  : }

  000da	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000df	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e3	5f		 pop	 rdi
  000e4	e9 00 00 00 00	 jmp	 PyMem_Free

; 313  :     Py_XDECREF(st->st_stack);

$LN31@PySymtable:
  000e9	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000ed	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 314  :     PyMem_Free((void *)st);

  000f3	48 8b cf	 mov	 rcx, rdi

; 315  : }

  000f6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ff	5f		 pop	 rdi
  00100	e9 00 00 00 00	 jmp	 PyMem_Free

; 313  :     Py_XDECREF(st->st_stack);

$LN26@PySymtable:
  00105	48 8b cb	 mov	 rcx, rbx
  00108	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PySymtable:

; 314  :     PyMem_Free((void *)st);

  0010d	48 8b cf	 mov	 rcx, rdi

; 315  : }

  00110	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00115	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00119	5f		 pop	 rdi
  0011a	e9 00 00 00 00	 jmp	 PyMem_Free
PySymtable_Free ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@PNDJPBGF@unknown?5symbol?5table?5entry?$AA@ ; `string'
PUBLIC	PySymtable_Lookup
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_KeyError:QWORD
EXTRN	PyDict_GetItem:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PySymtable_Lookup DD imagerel $LN10
	DD	imagerel $LN10+162
	DD	imagerel $unwind$PySymtable_Lookup
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySymtable_Lookup DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BL@PNDJPBGF@unknown?5symbol?5table?5entry?$AA@
CONST	SEGMENT
??_C@_0BL@PNDJPBGF@unknown?5symbol?5table?5entry?$AA@ DB 'unknown symbol '
	DB	'table entry', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\symtable.c
CONST	ENDS
;	COMDAT PySymtable_Lookup
_TEXT	SEGMENT
st$ = 64
key$ = 72
PySymtable_Lookup PROC					; COMDAT

; 319  : {

$LN10:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b d9	 mov	 rbx, rcx

; 320  :     PyObject *k, *v;
; 321  : 
; 322  :     k = PyLong_FromVoidPtr(key);

  0000d	48 8b ca	 mov	 rcx, rdx
  00010	e8 00 00 00 00	 call	 PyLong_FromVoidPtr
  00015	48 8b f8	 mov	 rdi, rax

; 323  :     if (k == NULL)

  00018	48 85 c0	 test	 rax, rax
  0001b	75 0b		 jne	 SHORT $LN3@PySymtable@2

; 337  : }

  0001d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00022	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00026	5f		 pop	 rdi
  00027	c3		 ret	 0
$LN3@PySymtable@2:

; 324  :         return NULL;
; 325  :     v = PyDict_GetItem(st->st_blocks, k);

  00028	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	e8 00 00 00 00	 call	 PyDict_GetItem
  00034	48 8b d8	 mov	 rbx, rax

; 326  :     if (v) {

  00037	48 85 c0	 test	 rax, rax
  0003a	74 3d		 je	 SHORT $LN2@PySymtable@2

; 327  :         assert(PySTEntry_Check(v));
; 328  :         Py_INCREF(v);

  0003c	e8 00 00 00 00	 call	 _Py_PXCTX
  00041	85 c0		 test	 eax, eax
  00043	75 47		 jne	 SHORT $LN1@PySymtable@2
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00053	4c 8b cb	 mov	 r9, rbx
  00056	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00064	e8 00 00 00 00	 call	 _PyParallel_Guard
  00069	85 c0		 test	 eax, eax
  0006b	75 06		 jne	 SHORT $LN6@PySymtable@2
  0006d	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00071	74 19		 je	 SHORT $LN1@PySymtable@2
$LN6@PySymtable@2:
  00073	48 ff 43 50	 inc	 QWORD PTR [rbx+80]

; 329  :     }
; 330  :     else {

  00077	eb 13		 jmp	 SHORT $LN1@PySymtable@2
$LN2@PySymtable@2:

; 331  :         PyErr_SetString(PyExc_KeyError,
; 332  :                         "unknown symbol table entry");

  00079	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@PNDJPBGF@unknown?5symbol?5table?5entry?$AA@
  00087	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@PySymtable@2:

; 333  :     }
; 334  : 
; 335  :     Py_DECREF(k);

  0008c	48 8b cf	 mov	 rcx, rdi
  0008f	e8 00 00 00 00	 call	 _Py_DecRef

; 336  :     return (PySTEntryObject *)v;

  00094	48 8b c3	 mov	 rax, rbx

; 337  : }

  00097	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0009c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a0	5f		 pop	 rdi
  000a1	c3		 ret	 0
PySymtable_Lookup ENDP
_TEXT	ENDS
PUBLIC	PyST_GetScope
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyST_GetScope DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$PyST_GetScope
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyST_GetScope DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyST_GetScope
_TEXT	SEGMENT
ste$ = 48
name$ = 56
PyST_GetScope PROC					; COMDAT

; 341  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 342  :     PyObject *v = PyDict_GetItem(ste->ste_symbols, name);

  00004	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00008	e8 00 00 00 00	 call	 PyDict_GetItem

; 343  :     if (!v)

  0000d	48 85 c0	 test	 rax, rax
  00010	75 05		 jne	 SHORT $LN1@PyST_GetSc

; 347  : }

  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
$LN1@PyST_GetSc:

; 344  :         return 0;
; 345  :     assert(PyLong_Check(v));
; 346  :     return (PyLong_AS_LONG(v) >> SCOPE_OFFSET) & SCOPE_MASK;

  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 PyLong_AsLong
  0001f	c1 f8 0b	 sar	 eax, 11
  00022	83 e0 0f	 and	 eax, 15

; 347  : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
PyST_GetScope ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@HPFNEAKB@no?5binding?5for?5nonlocal?5?8?$CFU?8?5fou@ ; `string'
PUBLIC	??_C@_0DB@DNKFLDHO@nonlocal?5declaration?5not?5allowed@ ; `string'
PUBLIC	??_C@_0CE@OLAGPHCF@name?5?8?$CFU?8?5is?5parameter?5and?5nonlo@ ; `string'
PUBLIC	??_C@_0CB@GJOAACGI@name?5?8?$CFU?8?5is?5nonlocal?5and?5global@ ; `string'
PUBLIC	??_C@_0CC@NFCHOBNE@name?5?8?$CFU?8?5is?5parameter?5and?5globa@ ; `string'
EXTRN	PySet_Contains:PROC
EXTRN	PySet_Discard:PROC
EXTRN	PySet_Add:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	PyErr_SyntaxLocationEx:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_SyntaxError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$analyze_name DD imagerel analyze_name
	DD	imagerel analyze_name+283
	DD	imagerel $unwind$analyze_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$analyze_name DD imagerel analyze_name+283
	DD	imagerel analyze_name+814
	DD	imagerel $chain$0$analyze_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$analyze_name DD 020521H
	DD	066405H
	DD	imagerel analyze_name
	DD	imagerel analyze_name+283
	DD	imagerel $unwind$analyze_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$analyze_name DD 060f01H
	DD	08540fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0CD@HPFNEAKB@no?5binding?5for?5nonlocal?5?8?$CFU?8?5fou@
CONST	SEGMENT
??_C@_0CD@HPFNEAKB@no?5binding?5for?5nonlocal?5?8?$CFU?8?5fou@ DB 'no bin'
	DB	'ding for nonlocal ''%U'' found', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DNKFLDHO@nonlocal?5declaration?5not?5allowed@
CONST	SEGMENT
??_C@_0DB@DNKFLDHO@nonlocal?5declaration?5not?5allowed@ DB 'nonlocal decl'
	DB	'aration not allowed at module level', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OLAGPHCF@name?5?8?$CFU?8?5is?5parameter?5and?5nonlo@
CONST	SEGMENT
??_C@_0CE@OLAGPHCF@name?5?8?$CFU?8?5is?5parameter?5and?5nonlo@ DB 'name '''
	DB	'%U'' is parameter and nonlocal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GJOAACGI@name?5?8?$CFU?8?5is?5nonlocal?5and?5global@
CONST	SEGMENT
??_C@_0CB@GJOAACGI@name?5?8?$CFU?8?5is?5nonlocal?5and?5global@ DB 'name '''
	DB	'%U'' is nonlocal and global', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NFCHOBNE@name?5?8?$CFU?8?5is?5parameter?5and?5globa@
CONST	SEGMENT
??_C@_0CC@NFCHOBNE@name?5?8?$CFU?8?5is?5parameter?5and?5globa@ DB 'name '''
	DB	'%U'' is parameter and global', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT analyze_name
_TEXT	SEGMENT
ste$ = 48
scopes$ = 56
name$ = 64
flags$ = 72
bound$ = 80
local$ = 88
free$ = 96
global$ = 104
analyze_name PROC					; COMDAT

; 417  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b d8	 mov	 rbx, r8
  00012	48 8b ea	 mov	 rbp, rdx
  00015	48 8b f9	 mov	 rdi, rcx

; 418  :     if (flags & DEF_GLOBAL) {

  00018	41 f6 c1 01	 test	 r9b, 1
  0001c	0f 84 f9 00 00
	00		 je	 $LN27@analyze_na

; 419  :         if (flags & DEF_PARAM) {

  00022	41 f6 c1 04	 test	 r9b, 4
  00026	74 41		 je	 SHORT $LN26@analyze_na

; 420  :             PyErr_Format(PyExc_SyntaxError,
; 421  :                         "name '%U' is parameter and global",
; 422  :                         name);

  00028	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@NFCHOBNE@name?5?8?$CFU?8?5is?5parameter?5and?5globa@
  00036	e8 00 00 00 00	 call	 PyErr_Format

; 423  :             PyErr_SyntaxLocationEx(ste->ste_table->st_filename,
; 424  :                                    ste->ste_lineno, ste->ste_col_offset);

  0003b	48 8b 8f b0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+176]
  00042	44 8b 87 9c 00
	00 00		 mov	 r8d, DWORD PTR [rdi+156]
  00049	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0004c	8b 97 98 00 00
	00		 mov	 edx, DWORD PTR [rdi+152]
  00052	e8 00 00 00 00	 call	 PyErr_SyntaxLocationEx
$LN33@analyze_na:

; 425  : 
; 426  :             return 0;

  00057	33 c0		 xor	 eax, eax

; 493  : }

  00059	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0005e	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00063	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00067	5f		 pop	 rdi
  00068	c3		 ret	 0
$LN26@analyze_na:

; 427  :         }
; 428  :         if (flags & DEF_NONLOCAL) {

  00069	41 f6 c1 08	 test	 r9b, 8
  0006d	74 25		 je	 SHORT $LN25@analyze_na

; 429  :             PyErr_Format(PyExc_SyntaxError,
; 430  :                          "name '%U' is nonlocal and global",
; 431  :                          name);

  0006f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@GJOAACGI@name?5?8?$CFU?8?5is?5nonlocal?5and?5global@
  0007d	e8 00 00 00 00	 call	 PyErr_Format

; 432  :             return 0;

  00082	33 c0		 xor	 eax, eax

; 493  : }

  00084	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00089	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0008e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00092	5f		 pop	 rdi
  00093	c3		 ret	 0
$LN25@analyze_na:

; 433  :         }
; 434  :         SET_SCOPE(scopes, name, GLOBAL_EXPLICIT);

  00094	b9 02 00 00 00	 mov	 ecx, 2
  00099	e8 00 00 00 00	 call	 PyLong_FromLong
  0009e	48 8b f8	 mov	 rdi, rax
  000a1	48 85 c0	 test	 rax, rax
  000a4	74 b1		 je	 SHORT $LN33@analyze_na
  000a6	4c 8b c0	 mov	 r8, rax
  000a9	48 8b d3	 mov	 rdx, rbx
  000ac	48 8b cd	 mov	 rcx, rbp
  000af	e8 00 00 00 00	 call	 PyDict_SetItem
  000b4	48 8b cf	 mov	 rcx, rdi
  000b7	85 c0		 test	 eax, eax
  000b9	79 17		 jns	 SHORT $LN23@analyze_na
  000bb	e8 00 00 00 00	 call	 _Py_DecRef
  000c0	33 c0		 xor	 eax, eax

; 493  : }

  000c2	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000c7	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000cc	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d0	5f		 pop	 rdi
  000d1	c3		 ret	 0
$LN23@analyze_na:

; 433  :         }
; 434  :         SET_SCOPE(scopes, name, GLOBAL_EXPLICIT);

  000d2	e8 00 00 00 00	 call	 _Py_DecRef

; 435  :         if (PySet_Add(global, name) < 0)

  000d7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR global$[rsp]
  000dc	48 8b d3	 mov	 rdx, rbx
  000df	e8 00 00 00 00	 call	 PySet_Add
  000e4	85 c0		 test	 eax, eax

; 436  :             return 0;

  000e6	0f 88 6b ff ff
	ff		 js	 $LN33@analyze_na

; 437  :         if (bound && (PySet_Discard(bound, name) < 0))

  000ec	48 8b 4c 24 50	 mov	 rcx, QWORD PTR bound$[rsp]
  000f1	48 85 c9	 test	 rcx, rcx
  000f4	74 10		 je	 SHORT $LN21@analyze_na
  000f6	48 8b d3	 mov	 rdx, rbx
  000f9	e8 00 00 00 00	 call	 PySet_Discard
  000fe	85 c0		 test	 eax, eax

; 438  :             return 0;

  00100	0f 88 51 ff ff
	ff		 js	 $LN33@analyze_na
$LN21@analyze_na:

; 439  :         return 1;

  00106	b8 01 00 00 00	 mov	 eax, 1

; 493  : }

  0010b	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00110	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00115	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00119	5f		 pop	 rdi
  0011a	c3		 ret	 0
$LN27@analyze_na:
  0011b	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi

; 440  :     }
; 441  :     if (flags & DEF_NONLOCAL) {

  00120	41 f6 c1 08	 test	 r9b, 8
  00124	0f 84 a8 00 00
	00		 je	 $LN20@analyze_na

; 442  :         if (flags & DEF_PARAM) {

  0012a	41 f6 c1 04	 test	 r9b, 4
  0012e	74 1a		 je	 SHORT $LN19@analyze_na

; 443  :             PyErr_Format(PyExc_SyntaxError,
; 444  :                          "name '%U' is parameter and nonlocal",
; 445  :                          name);

  00130	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  00137	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@OLAGPHCF@name?5?8?$CFU?8?5is?5parameter?5and?5nonlo@
  0013e	e8 00 00 00 00	 call	 PyErr_Format

; 446  :             return 0;

  00143	33 c0		 xor	 eax, eax
  00145	e9 cf 01 00 00	 jmp	 $LN30@analyze_na
$LN19@analyze_na:

; 447  :         }
; 448  :         if (!bound) {

  0014a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR bound$[rsp]
  0014f	48 85 c9	 test	 rcx, rcx
  00152	75 1a		 jne	 SHORT $LN18@analyze_na

; 449  :             PyErr_Format(PyExc_SyntaxError,
; 450  :                          "nonlocal declaration not allowed at module level");

  00154	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  0015b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@DNKFLDHO@nonlocal?5declaration?5not?5allowed@
  00162	e8 00 00 00 00	 call	 PyErr_Format

; 451  :             return 0;

  00167	33 c0		 xor	 eax, eax
  00169	e9 ab 01 00 00	 jmp	 $LN30@analyze_na
$LN18@analyze_na:

; 452  :         }
; 453  :         if (!PySet_Contains(bound, name)) {

  0016e	48 8b d3	 mov	 rdx, rbx
  00171	e8 00 00 00 00	 call	 PySet_Contains
  00176	85 c0		 test	 eax, eax
  00178	75 1d		 jne	 SHORT $LN17@analyze_na

; 454  :             PyErr_Format(PyExc_SyntaxError,
; 455  :                          "no binding for nonlocal '%U' found",
; 456  :                          name);

  0017a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  00181	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HPFNEAKB@no?5binding?5for?5nonlocal?5?8?$CFU?8?5fou@
  00188	4c 8b c3	 mov	 r8, rbx
  0018b	e8 00 00 00 00	 call	 PyErr_Format

; 457  : 
; 458  :             return 0;

  00190	33 c0		 xor	 eax, eax
  00192	e9 82 01 00 00	 jmp	 $LN30@analyze_na
$LN17@analyze_na:

; 459  :         }
; 460  :         SET_SCOPE(scopes, name, FREE);

  00197	b9 04 00 00 00	 mov	 ecx, 4
  0019c	e8 00 00 00 00	 call	 PyLong_FromLong
  001a1	48 8b f0	 mov	 rsi, rax
  001a4	48 85 c0	 test	 rax, rax
  001a7	0f 84 5e 01 00
	00		 je	 $LN31@analyze_na
  001ad	4c 8b c0	 mov	 r8, rax
  001b0	48 8b d3	 mov	 rdx, rbx
  001b3	48 8b cd	 mov	 rcx, rbp
  001b6	e8 00 00 00 00	 call	 PyDict_SetItem
  001bb	48 8b ce	 mov	 rcx, rsi
  001be	85 c0		 test	 eax, eax
  001c0	0f 89 bb 00 00
	00		 jns	 $LN7@analyze_na

; 491  :     SET_SCOPE(scopes, name, GLOBAL_IMPLICIT);

  001c6	e8 00 00 00 00	 call	 _Py_DecRef
  001cb	33 c0		 xor	 eax, eax
  001cd	e9 47 01 00 00	 jmp	 $LN30@analyze_na
$LN20@analyze_na:

; 461  :         ste->ste_free = 1;
; 462  :         return PySet_Add(free, name) >= 0;
; 463  :     }
; 464  :     if (flags & DEF_BOUND) {

  001d2	41 f6 c1 86	 test	 r9b, -122		; ffffffffffffff86H
  001d6	74 64		 je	 SHORT $LN14@analyze_na

; 465  :         SET_SCOPE(scopes, name, LOCAL);

  001d8	b9 01 00 00 00	 mov	 ecx, 1
  001dd	e8 00 00 00 00	 call	 PyLong_FromLong
  001e2	48 8b f8	 mov	 rdi, rax
  001e5	48 85 c0	 test	 rax, rax
  001e8	0f 84 1d 01 00
	00		 je	 $LN31@analyze_na
  001ee	4c 8b c0	 mov	 r8, rax
  001f1	48 8b d3	 mov	 rdx, rbx
  001f4	48 8b cd	 mov	 rcx, rbp
  001f7	e8 00 00 00 00	 call	 PyDict_SetItem
  001fc	48 8b cf	 mov	 rcx, rdi
  001ff	85 c0		 test	 eax, eax
  00201	0f 88 ff 00 00
	00		 js	 $LN32@analyze_na
  00207	e8 00 00 00 00	 call	 _Py_DecRef

; 466  :         if (PySet_Add(local, name) < 0)

  0020c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR local$[rsp]
  00211	48 8b d3	 mov	 rdx, rbx
  00214	e8 00 00 00 00	 call	 PySet_Add
  00219	85 c0		 test	 eax, eax

; 467  :             return 0;

  0021b	0f 88 ea 00 00
	00		 js	 $LN31@analyze_na

; 468  :         if (PySet_Discard(global, name) < 0)

  00221	48 8b 4c 24 68	 mov	 rcx, QWORD PTR global$[rsp]
  00226	48 8b d3	 mov	 rdx, rbx
  00229	e8 00 00 00 00	 call	 PySet_Discard
  0022e	33 c9		 xor	 ecx, ecx
  00230	85 c0		 test	 eax, eax
  00232	0f 99 c1	 setns	 cl
  00235	8b c1		 mov	 eax, ecx

; 469  :             return 0;
; 470  :         return 1;

  00237	e9 dd 00 00 00	 jmp	 $LN30@analyze_na
$LN14@analyze_na:

; 471  :     }
; 472  :     /* If an enclosing block has a binding for this name, it
; 473  :        is a free variable rather than a global variable.
; 474  :        Note that having a non-NULL bound implies that the block
; 475  :        is nested.
; 476  :     */
; 477  :     if (bound && PySet_Contains(bound, name)) {

  0023c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR bound$[rsp]
  00241	48 85 c9	 test	 rcx, rcx
  00244	74 5f		 je	 SHORT $LN9@analyze_na
  00246	48 8b d3	 mov	 rdx, rbx
  00249	e8 00 00 00 00	 call	 PySet_Contains
  0024e	85 c0		 test	 eax, eax
  00250	74 53		 je	 SHORT $LN9@analyze_na

; 478  :         SET_SCOPE(scopes, name, FREE);

  00252	b9 04 00 00 00	 mov	 ecx, 4
  00257	e8 00 00 00 00	 call	 PyLong_FromLong
  0025c	48 8b f0	 mov	 rsi, rax
  0025f	48 85 c0	 test	 rax, rax
  00262	0f 84 a3 00 00
	00		 je	 $LN31@analyze_na
  00268	4c 8b c0	 mov	 r8, rax
  0026b	48 8b d3	 mov	 rdx, rbx
  0026e	48 8b cd	 mov	 rcx, rbp
  00271	e8 00 00 00 00	 call	 PyDict_SetItem
  00276	48 8b ce	 mov	 rcx, rsi
  00279	85 c0		 test	 eax, eax
  0027b	0f 88 85 00 00
	00		 js	 $LN32@analyze_na
$LN7@analyze_na:
  00281	e8 00 00 00 00	 call	 _Py_DecRef

; 479  :         ste->ste_free = 1;
; 480  :         return PySet_Add(free, name) >= 0;

  00286	48 8b 4c 24 60	 mov	 rcx, QWORD PTR free$[rsp]
  0028b	83 8f 94 00 00
	00 01		 or	 DWORD PTR [rdi+148], 1
  00292	48 8b d3	 mov	 rdx, rbx
  00295	e8 00 00 00 00	 call	 PySet_Add
  0029a	33 c9		 xor	 ecx, ecx
  0029c	85 c0		 test	 eax, eax
  0029e	0f 99 c1	 setns	 cl
  002a1	8b c1		 mov	 eax, ecx
  002a3	eb 74		 jmp	 SHORT $LN30@analyze_na
$LN9@analyze_na:

; 481  :     }
; 482  :     /* If a parent has a global statement, then call it global
; 483  :        explicit?  It could also be global implicit.
; 484  :      */
; 485  :     if (global && PySet_Contains(global, name)) {

  002a5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR global$[rsp]
  002aa	48 85 c9	 test	 rcx, rcx
  002ad	74 20		 je	 SHORT $LN6@analyze_na
  002af	48 8b d3	 mov	 rdx, rbx
  002b2	e8 00 00 00 00	 call	 PySet_Contains
  002b7	85 c0		 test	 eax, eax
  002b9	74 14		 je	 SHORT $LN6@analyze_na

; 486  :         SET_SCOPE(scopes, name, GLOBAL_IMPLICIT);

  002bb	b9 03 00 00 00	 mov	 ecx, 3
  002c0	e8 00 00 00 00	 call	 PyLong_FromLong
  002c5	48 8b f8	 mov	 rdi, rax
  002c8	48 85 c0	 test	 rax, rax
  002cb	75 24		 jne	 SHORT $LN2@analyze_na
  002cd	eb 4a		 jmp	 SHORT $LN30@analyze_na
$LN6@analyze_na:

; 487  :         return 1;
; 488  :     }
; 489  :     if (ste->ste_nested)

  002cf	83 bf 90 00 00
	00 00		 cmp	 DWORD PTR [rdi+144], 0
  002d6	74 07		 je	 SHORT $LN3@analyze_na

; 490  :         ste->ste_free = 1;

  002d8	83 8f 94 00 00
	00 01		 or	 DWORD PTR [rdi+148], 1
$LN3@analyze_na:

; 491  :     SET_SCOPE(scopes, name, GLOBAL_IMPLICIT);

  002df	b9 03 00 00 00	 mov	 ecx, 3
  002e4	e8 00 00 00 00	 call	 PyLong_FromLong
  002e9	48 8b f8	 mov	 rdi, rax
  002ec	48 85 c0	 test	 rax, rax
  002ef	74 1a		 je	 SHORT $LN31@analyze_na
$LN2@analyze_na:
  002f1	4c 8b c0	 mov	 r8, rax
  002f4	48 8b d3	 mov	 rdx, rbx
  002f7	48 8b cd	 mov	 rcx, rbp
  002fa	e8 00 00 00 00	 call	 PyDict_SetItem
  002ff	48 8b cf	 mov	 rcx, rdi
  00302	85 c0		 test	 eax, eax
  00304	79 09		 jns	 SHORT $LN4@analyze_na
$LN32@analyze_na:
  00306	e8 00 00 00 00	 call	 _Py_DecRef
$LN31@analyze_na:
  0030b	33 c0		 xor	 eax, eax
  0030d	eb 0a		 jmp	 SHORT $LN30@analyze_na
$LN4@analyze_na:
  0030f	e8 00 00 00 00	 call	 _Py_DecRef

; 492  :     return 1;

  00314	b8 01 00 00 00	 mov	 eax, 1
$LN30@analyze_na:

; 493  : }

  00319	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  0031e	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00323	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00328	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0032c	5f		 pop	 rdi
  0032d	c3		 ret	 0
analyze_name ENDP
_TEXT	ENDS
EXTRN	PyUnicode_CompareWithASCIIString:PROC
EXTRN	PyDict_Next:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$analyze_cells DD imagerel analyze_cells
	DD	imagerel analyze_cells+238
	DD	imagerel $unwind$analyze_cells
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$analyze_cells DD 081201H
	DD	0b5412H
	DD	0a3412H
	DD	0c00e5212H
	DD	0600b700cH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT analyze_cells
_TEXT	SEGMENT
v$ = 32
pos$ = 40
scopes$ = 80
free$ = 88
restricted$ = 96
name$ = 104
analyze_cells PROC					; COMDAT

; 510  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 511  :     PyObject *name, *v, *v_cell;
; 512  :     int success = 0;

  00012	45 33 e4	 xor	 r12d, r12d
  00015	48 8b f1	 mov	 rsi, rcx
  00018	49 8b d8	 mov	 rbx, r8

; 513  :     Py_ssize_t pos = 0;
; 514  : 
; 515  :     v_cell = PyLong_FromLong(CELL);

  0001b	41 8d 4c 24 05	 lea	 ecx, QWORD PTR [r12+5]
  00020	48 8b fa	 mov	 rdi, rdx
  00023	4c 89 64 24 28	 mov	 QWORD PTR pos$[rsp], r12
  00028	e8 00 00 00 00	 call	 PyLong_FromLong
  0002d	48 8b e8	 mov	 rbp, rax

; 516  :     if (!v_cell)

  00030	48 85 c0	 test	 rax, rax
  00033	0f 84 a2 00 00
	00		 je	 $LN9@analyze_ce
$LN14@analyze_ce:

; 517  :         return 0;
; 518  :     while (PyDict_Next(scopes, &pos, &name, &v)) {

  00039	4c 8d 4c 24 20	 lea	 r9, QWORD PTR v$[rsp]
  0003e	4c 8d 44 24 68	 lea	 r8, QWORD PTR name$[rsp]
  00043	48 8d 54 24 28	 lea	 rdx, QWORD PTR pos$[rsp]
  00048	48 8b ce	 mov	 rcx, rsi
  0004b	e8 00 00 00 00	 call	 PyDict_Next
  00050	85 c0		 test	 eax, eax
  00052	74 76		 je	 SHORT $LN6@analyze_ce
$LL7@analyze_ce:

; 519  :         long scope;
; 520  :         assert(PyLong_Check(v));
; 521  :         scope = PyLong_AS_LONG(v);

  00054	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00059	e8 00 00 00 00	 call	 PyLong_AsLong

; 522  :         if (scope != LOCAL)

  0005e	83 f8 01	 cmp	 eax, 1
  00061	75 4c		 jne	 SHORT $LN1@analyze_ce

; 523  :             continue;
; 524  :         if (!PySet_Contains(free, name))

  00063	48 8b 54 24 68	 mov	 rdx, QWORD PTR name$[rsp]
  00068	48 8b cf	 mov	 rcx, rdi
  0006b	e8 00 00 00 00	 call	 PySet_Contains
  00070	85 c0		 test	 eax, eax
  00072	74 3b		 je	 SHORT $LN1@analyze_ce

; 525  :             continue;
; 526  :         if (restricted != NULL &&
; 527  :             PyUnicode_CompareWithASCIIString(name, restricted))

  00074	48 85 db	 test	 rbx, rbx
  00077	74 11		 je	 SHORT $LN3@analyze_ce
  00079	48 8b 4c 24 68	 mov	 rcx, QWORD PTR name$[rsp]
  0007e	48 8b d3	 mov	 rdx, rbx
  00081	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00086	85 c0		 test	 eax, eax
  00088	75 25		 jne	 SHORT $LN1@analyze_ce
$LN3@analyze_ce:

; 528  :             continue;
; 529  :         /* Replace LOCAL with CELL for this name, and remove
; 530  :            from free. It is safe to replace the value of name
; 531  :            in the dict, because it will not cause a resize.
; 532  :          */
; 533  :         if (PyDict_SetItem(scopes, name, v_cell) < 0)

  0008a	48 8b 54 24 68	 mov	 rdx, QWORD PTR name$[rsp]
  0008f	4c 8b c5	 mov	 r8, rbp
  00092	48 8b ce	 mov	 rcx, rsi
  00095	e8 00 00 00 00	 call	 PyDict_SetItem
  0009a	85 c0		 test	 eax, eax
  0009c	78 32		 js	 SHORT $error$21865

; 534  :             goto error;
; 535  :         if (PySet_Discard(free, name) < 0)

  0009e	48 8b 54 24 68	 mov	 rdx, QWORD PTR name$[rsp]
  000a3	48 8b cf	 mov	 rcx, rdi
  000a6	e8 00 00 00 00	 call	 PySet_Discard
  000ab	85 c0		 test	 eax, eax
  000ad	78 21		 js	 SHORT $error$21865
$LN1@analyze_ce:

; 517  :         return 0;
; 518  :     while (PyDict_Next(scopes, &pos, &name, &v)) {

  000af	4c 8d 4c 24 20	 lea	 r9, QWORD PTR v$[rsp]
  000b4	4c 8d 44 24 68	 lea	 r8, QWORD PTR name$[rsp]
  000b9	48 8d 54 24 28	 lea	 rdx, QWORD PTR pos$[rsp]
  000be	48 8b ce	 mov	 rcx, rsi
  000c1	e8 00 00 00 00	 call	 PyDict_Next
  000c6	85 c0		 test	 eax, eax
  000c8	75 8a		 jne	 SHORT $LL7@analyze_ce
$LN6@analyze_ce:

; 536  :             goto error;
; 537  :     }
; 538  :     success = 1;

  000ca	41 bc 01 00 00
	00		 mov	 r12d, 1
$error$21865:

; 539  :  error:
; 540  :     Py_DECREF(v_cell);

  000d0	48 8b cd	 mov	 rcx, rbp
  000d3	e8 00 00 00 00	 call	 _Py_DecRef

; 541  :     return success;

  000d8	41 8b c4	 mov	 eax, r12d
$LN9@analyze_ce:

; 542  : }

  000db	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000e0	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  000e5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e9	41 5c		 pop	 r12
  000eb	5f		 pop	 rdi
  000ec	5e		 pop	 rsi
  000ed	c3		 ret	 0
analyze_cells ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DH@PNKKFHBN@import?5?$CK?5is?5not?5allowed?5in?5funct@ ; `string'
PUBLIC	??_C@_0BF@PABOBAIG@is?5a?5nested?5function?$AA@	; `string'
PUBLIC	??_C@_0CP@OCDIMPMO@contains?5a?5nested?5function?5with?5@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$check_unoptimized DD imagerel check_unoptimized
	DD	imagerel check_unoptimized+143
	DD	imagerel $unwind$check_unoptimized
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check_unoptimized DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0DH@PNKKFHBN@import?5?$CK?5is?5not?5allowed?5in?5funct@
CONST	SEGMENT
??_C@_0DH@PNKKFHBN@import?5?$CK?5is?5not?5allowed?5in?5funct@ DB 'import '
	DB	'* is not allowed in function ''%U'' because it %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PABOBAIG@is?5a?5nested?5function?$AA@
CONST	SEGMENT
??_C@_0BF@PABOBAIG@is?5a?5nested?5function?$AA@ DB 'is a nested function', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@OCDIMPMO@contains?5a?5nested?5function?5with?5@
CONST	SEGMENT
??_C@_0CP@OCDIMPMO@contains?5a?5nested?5function?5with?5@ DB 'contains a '
	DB	'nested function with free variables', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT check_unoptimized
_TEXT	SEGMENT
ste$ = 48
check_unoptimized PROC					; COMDAT

; 546  : check_unoptimized(const PySTEntryObject* ste) {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 547  :     const char* trailer;
; 548  : 
; 549  :     if (ste->ste_type != FunctionBlock || !ste->ste_unoptimized
; 550  :         || !(ste->ste_free || ste->ste_child_free))

  00006	83 b9 88 00 00
	00 00		 cmp	 DWORD PTR [rcx+136], 0
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	75 22		 jne	 SHORT $LN5@check_unop
  00012	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [rcx+140]
  00018	85 d2		 test	 edx, edx
  0001a	74 18		 je	 SHORT $LN5@check_unop
  0001c	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [rcx+148]
  00022	f6 c1 01	 test	 cl, 1
  00025	75 05		 jne	 SHORT $LN6@check_unop
  00027	f6 c1 02	 test	 cl, 2
  0002a	74 08		 je	 SHORT $LN5@check_unop
$LN6@check_unop:

; 552  : 
; 553  :     trailer = (ste->ste_child_free ?
; 554  :                    "contains a nested function with free variables" :
; 555  :                    "is a nested function");
; 556  : 
; 557  :     switch (ste->ste_unoptimized) {

  0002c	ff ca		 dec	 edx
  0002e	74 0f		 je	 SHORT $LN1@check_unop
  00030	ff ca		 dec	 edx
  00032	75 37		 jne	 SHORT $LN3@check_unop
$LN5@check_unop:

; 551  :         return 1;

  00034	b8 01 00 00 00	 mov	 eax, 1

; 570  : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5b		 pop	 rbx
  0003e	c3		 ret	 0
$LN1@check_unop:

; 558  :     case OPT_TOPLEVEL: /* import * at top-level is fine */
; 559  :         return 1;
; 560  :     case OPT_IMPORT_STAR:
; 561  :         PyErr_Format(PyExc_SyntaxError,
; 562  :                      "import * is not allowed in function '%U' because it %s",
; 563  :                      ste->ste_name, trailer);

  0003f	4c 8b 43 70	 mov	 r8, QWORD PTR [rbx+112]
  00043	f6 c1 02	 test	 cl, 2
  00046	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  0004d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CP@OCDIMPMO@contains?5a?5nested?5function?5with?5@
  00054	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0BF@PABOBAIG@is?5a?5nested?5function?$AA@
  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@PNKKFHBN@import?5?$CK?5is?5not?5allowed?5in?5funct@
  00062	4c 0f 45 c8	 cmovne	 r9, rax
  00066	e8 00 00 00 00	 call	 PyErr_Format
$LN3@check_unop:

; 564  :         break;
; 565  :     }
; 566  : 
; 567  :     PyErr_SyntaxLocationEx(ste->ste_table->st_filename, ste->ste_opt_lineno,
; 568  :                            ste->ste_opt_col_offset);

  0006b	48 8b 8b b0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+176]
  00072	44 8b 83 a4 00
	00 00		 mov	 r8d, DWORD PTR [rbx+164]
  00079	8b 93 a0 00 00
	00		 mov	 edx, DWORD PTR [rbx+160]
  0007f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00082	e8 00 00 00 00	 call	 PyErr_SyntaxLocationEx

; 569  :     return 0;

  00087	33 c0		 xor	 eax, eax

; 570  : }

  00089	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008d	5b		 pop	 rbx
  0008e	c3		 ret	 0
check_unoptimized ENDP
_TEXT	ENDS
EXTRN	PyIter_Next:PROC
EXTRN	PyObject_GetIter:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$update_symbols DD imagerel update_symbols
	DD	imagerel update_symbols+308
	DD	imagerel $unwind$update_symbols
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$update_symbols DD imagerel update_symbols+308
	DD	imagerel update_symbols+468
	DD	imagerel $chain$0$update_symbols
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$update_symbols DD imagerel update_symbols+468
	DD	imagerel update_symbols+483
	DD	imagerel $chain$1$update_symbols
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$update_symbols DD imagerel update_symbols+483
	DD	imagerel update_symbols+623
	DD	imagerel $chain$2$update_symbols
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$update_symbols DD imagerel update_symbols+623
	DD	imagerel update_symbols+645
	DD	imagerel $chain$3$update_symbols
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$update_symbols DD 021H
	DD	imagerel update_symbols
	DD	imagerel update_symbols+308
	DD	imagerel $unwind$update_symbols
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$update_symbols DD 020021H
	DD	0ec400H
	DD	imagerel update_symbols
	DD	imagerel update_symbols+308
	DD	imagerel $unwind$update_symbols
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$update_symbols DD 021H
	DD	imagerel update_symbols
	DD	imagerel update_symbols+308
	DD	imagerel $unwind$update_symbols
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$update_symbols DD 020521H
	DD	0ec405H
	DD	imagerel update_symbols
	DD	imagerel update_symbols+308
	DD	imagerel $unwind$update_symbols
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_symbols DD 081301H
	DD	0105413H
	DD	0f3413H
	DD	0d00f9213H
	DD	0600c700dH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\symtable.c
xdata	ENDS
;	COMDAT update_symbols
_TEXT	SEGMENT
name$ = 48
v$ = 56
pos$ = 64
symbols$ = 112
scopes$ = 120
bound$ = 128
free$ = 136
classflag$ = 144
update_symbols PROC					; COMDAT

; 579  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 10	 mov	 QWORD PTR [r11+16], rbx
  00007	49 89 6b 18	 mov	 QWORD PTR [r11+24], rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	41 55		 push	 r13
  0000f	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 580  :     PyObject *name = NULL, *itr = NULL;

  00013	33 c0		 xor	 eax, eax
  00015	49 8b f1	 mov	 rsi, r9
  00018	4d 8b e8	 mov	 r13, r8
  0001b	48 8b ea	 mov	 rbp, rdx

; 581  :     PyObject *v = NULL, *v_scope = NULL, *v_new = NULL, *v_free = NULL;
; 582  :     Py_ssize_t pos = 0;
; 583  : 
; 584  :     /* Update scope information for all symbols in this scope */
; 585  :     while (PyDict_Next(symbols, &pos, &name, &v)) {

  0001e	4d 8d 4b d0	 lea	 r9, QWORD PTR [r11-48]
  00022	4d 8d 43 c8	 lea	 r8, QWORD PTR [r11-56]
  00026	49 8d 53 d8	 lea	 rdx, QWORD PTR [r11-40]
  0002a	48 8b f9	 mov	 rdi, rcx
  0002d	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00031	49 89 43 d0	 mov	 QWORD PTR [r11-48], rax
  00035	49 89 43 d8	 mov	 QWORD PTR [r11-40], rax
  00039	e8 00 00 00 00	 call	 PyDict_Next
  0003e	85 c0		 test	 eax, eax
  00040	0f 84 d5 00 00
	00		 je	 $LN25@update_sym
$LL26@update_sym:

; 586  :         long scope, flags;
; 587  :         assert(PyLong_Check(v));
; 588  :         flags = PyLong_AS_LONG(v);

  00046	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  0004b	e8 00 00 00 00	 call	 PyLong_AsLong

; 589  :         v_scope = PyDict_GetItem(scopes, name);

  00050	48 8b 54 24 30	 mov	 rdx, QWORD PTR name$[rsp]
  00055	48 8b cd	 mov	 rcx, rbp
  00058	8b d8		 mov	 ebx, eax
  0005a	e8 00 00 00 00	 call	 PyDict_GetItem

; 590  :         assert(v_scope && PyLong_Check(v_scope));
; 591  :         scope = PyLong_AS_LONG(v_scope);

  0005f	48 8b c8	 mov	 rcx, rax
  00062	e8 00 00 00 00	 call	 PyLong_AsLong

; 592  :         flags |= (scope << SCOPE_OFFSET);

  00067	c1 e0 0b	 shl	 eax, 11
  0006a	0b c3		 or	 eax, ebx

; 593  :         v_new = PyLong_FromLong(flags);

  0006c	8b c8		 mov	 ecx, eax
  0006e	e8 00 00 00 00	 call	 PyLong_FromLong
  00073	48 8b d8	 mov	 rbx, rax

; 594  :         if (!v_new)

  00076	48 85 c0	 test	 rax, rax
  00079	0f 84 5d 01 00
	00		 je	 $LN44@update_sym

; 595  :             return 0;
; 596  :         if (PyDict_SetItem(symbols, name, v_new) < 0) {

  0007f	48 8b 54 24 30	 mov	 rdx, QWORD PTR name$[rsp]
  00084	4c 8b c0	 mov	 r8, rax
  00087	48 8b cf	 mov	 rcx, rdi
  0008a	e8 00 00 00 00	 call	 PyDict_SetItem
  0008f	85 c0		 test	 eax, eax
  00091	0f 88 3d 01 00
	00		 js	 $LN45@update_sym

; 599  :         }
; 600  :         Py_DECREF(v_new);

  00097	e8 00 00 00 00	 call	 _Py_PXCTX
  0009c	85 c0		 test	 eax, eax
  0009e	75 5c		 jne	 SHORT $LN39@update_sym
  000a0	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000a4	a8 20		 test	 al, 32			; 00000020H
  000a6	75 4c		 jne	 SHORT $LN33@update_sym
  000a8	84 c0		 test	 al, al
  000aa	78 48		 js	 SHORT $LN33@update_sym
  000ac	a8 02		 test	 al, 2
  000ae	75 4c		 jne	 SHORT $LN39@update_sym
  000b0	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000b4	75 46		 jne	 SHORT $LN39@update_sym
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c4	4c 8b cb	 mov	 r9, rbx
  000c7	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000cd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000da	48 8b cb	 mov	 rcx, rbx
  000dd	85 c0		 test	 eax, eax
  000df	74 07		 je	 SHORT $LN38@update_sym
  000e1	e8 00 00 00 00	 call	 _Px_Dealloc
  000e6	eb 14		 jmp	 SHORT $LN39@update_sym
$LN38@update_sym:
  000e8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000ec	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000f2	eb 08		 jmp	 SHORT $LN39@update_sym
$LN33@update_sym:
  000f4	48 8b cb	 mov	 rcx, rbx
  000f7	e8 00 00 00 00	 call	 Px_DecRef
$LN39@update_sym:

; 581  :     PyObject *v = NULL, *v_scope = NULL, *v_new = NULL, *v_free = NULL;
; 582  :     Py_ssize_t pos = 0;
; 583  : 
; 584  :     /* Update scope information for all symbols in this scope */
; 585  :     while (PyDict_Next(symbols, &pos, &name, &v)) {

  000fc	4c 8d 4c 24 38	 lea	 r9, QWORD PTR v$[rsp]
  00101	4c 8d 44 24 30	 lea	 r8, QWORD PTR name$[rsp]
  00106	48 8d 54 24 40	 lea	 rdx, QWORD PTR pos$[rsp]
  0010b	48 8b cf	 mov	 rcx, rdi
  0010e	e8 00 00 00 00	 call	 PyDict_Next
  00113	85 c0		 test	 eax, eax
  00115	0f 85 2b ff ff
	ff		 jne	 $LL26@update_sym
$LN25@update_sym:

; 601  :     }
; 602  : 
; 603  :     /* Record not yet resolved free variables from children (if any) */
; 604  :     v_free = PyLong_FromLong(FREE << SCOPE_OFFSET);

  0011b	b9 00 20 00 00	 mov	 ecx, 8192		; 00002000H
  00120	e8 00 00 00 00	 call	 PyLong_FromLong
  00125	48 8b e8	 mov	 rbp, rax

; 605  :     if (!v_free)

  00128	48 85 c0	 test	 rax, rax

; 606  :         return 0;

  0012b	0f 84 ab 00 00
	00		 je	 $LN44@update_sym

; 607  : 
; 608  :     itr = PyObject_GetIter(free);

  00131	48 8b ce	 mov	 rcx, rsi
  00134	4c 89 64 24 70	 mov	 QWORD PTR [rsp+112], r12
  00139	e8 00 00 00 00	 call	 PyObject_GetIter
  0013e	48 8b f0	 mov	 rsi, rax

; 609  :     if (!itr)

  00141	48 85 c0	 test	 rax, rax
  00144	0f 84 fa 00 00
	00		 je	 $error$21922

; 610  :         goto error;
; 611  : 
; 612  :     while ((name = PyIter_Next(itr))) {

  0014a	48 8b c8	 mov	 rcx, rax
  0014d	e8 00 00 00 00	 call	 PyIter_Next
  00152	48 89 44 24 30	 mov	 QWORD PTR name$[rsp], rax
  00157	48 85 c0	 test	 rax, rax
  0015a	0f 84 c8 00 00
	00		 je	 $LN50@update_sym
  00160	44 8b a4 24 90
	00 00 00	 mov	 r12d, DWORD PTR classflag$[rsp]
  00168	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL20@update_sym:

; 613  :         v = PyDict_GetItem(symbols, name);

  00170	48 8b d0	 mov	 rdx, rax
  00173	48 8b cf	 mov	 rcx, rdi
  00176	e8 00 00 00 00	 call	 PyDict_GetItem
  0017b	48 89 44 24 38	 mov	 QWORD PTR v$[rsp], rax

; 614  : 
; 615  :         /* Handle symbol that already exists in this scope */
; 616  :         if (v) {

  00180	48 85 c0	 test	 rax, rax
  00183	74 5e		 je	 SHORT $LN18@update_sym

; 617  :             /* Handle a free variable in a method of
; 618  :                the class that has the same name as a local
; 619  :                or global in the class scope.
; 620  :             */
; 621  :             if  (classflag &&
; 622  :                  PyLong_AS_LONG(v) & (DEF_BOUND | DEF_GLOBAL)) {

  00185	45 85 e4	 test	 r12d, r12d
  00188	74 7e		 je	 SHORT $LN17@update_sym
  0018a	48 8b c8	 mov	 rcx, rax
  0018d	e8 00 00 00 00	 call	 PyLong_AsLong
  00192	a8 87		 test	 al, -121		; ffffffffffffff87H
  00194	74 72		 je	 SHORT $LN17@update_sym

; 623  :                 long flags = PyLong_AS_LONG(v) | DEF_FREE_CLASS;

  00196	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  0019b	e8 00 00 00 00	 call	 PyLong_AsLong
  001a0	83 c8 40	 or	 eax, 64			; 00000040H

; 624  :                 v_new = PyLong_FromLong(flags);

  001a3	8b c8		 mov	 ecx, eax
  001a5	e8 00 00 00 00	 call	 PyLong_FromLong
  001aa	48 8b d8	 mov	 rbx, rax

; 625  :                 if (!v_new) {

  001ad	48 85 c0	 test	 rax, rax
  001b0	0f 84 8e 00 00
	00		 je	 $error$21922

; 626  :                     goto error;
; 627  :                 }
; 628  :                 if (PyDict_SetItem(symbols, name, v_new) < 0) {

  001b6	48 8b 54 24 30	 mov	 rdx, QWORD PTR name$[rsp]
  001bb	4c 8b c0	 mov	 r8, rax
  001be	48 8b cf	 mov	 rcx, rdi
  001c1	e8 00 00 00 00	 call	 PyDict_SetItem

; 630  :                     goto error;
; 631  :                 }
; 632  :                 Py_DECREF(v_new);

  001c6	48 8b cb	 mov	 rcx, rbx
  001c9	85 c0		 test	 eax, eax
  001cb	78 72		 js	 SHORT $LN47@update_sym
  001cd	e8 00 00 00 00	 call	 _Py_DecRef

; 633  :             }
; 634  :             /* It's a cell, or already free in this scope */
; 635  :             Py_DECREF(name);
; 636  :             continue;

  001d2	eb 34		 jmp	 SHORT $LN17@update_sym
$LN45@update_sym:

; 597  :             Py_DECREF(v_new);

  001d4	48 8b cb	 mov	 rcx, rbx
  001d7	e8 00 00 00 00	 call	 _Py_DecRef
$LN44@update_sym:

; 598  :             return 0;

  001dc	33 c0		 xor	 eax, eax
  001de	e9 8c 00 00 00	 jmp	 $LN27@update_sym
$LN18@update_sym:

; 637  :         }
; 638  :         /* Handle global symbol */
; 639  :         if (!PySet_Contains(bound, name)) {

  001e3	48 8b 54 24 30	 mov	 rdx, QWORD PTR name$[rsp]
  001e8	49 8b cd	 mov	 rcx, r13
  001eb	e8 00 00 00 00	 call	 PySet_Contains
  001f0	85 c0		 test	 eax, eax

; 640  :             Py_DECREF(name);
; 641  :             continue;       /* it's a global */

  001f2	74 14		 je	 SHORT $LN17@update_sym

; 642  :         }
; 643  :         /* Propagate new free symbol up the lexical stack */
; 644  :         if (PyDict_SetItem(symbols, name, v_free) < 0) {

  001f4	48 8b 54 24 30	 mov	 rdx, QWORD PTR name$[rsp]
  001f9	4c 8b c5	 mov	 r8, rbp
  001fc	48 8b cf	 mov	 rcx, rdi
  001ff	e8 00 00 00 00	 call	 PyDict_SetItem
  00204	85 c0		 test	 eax, eax
  00206	78 3c		 js	 SHORT $error$21922
$LN17@update_sym:

; 645  :             goto error;
; 646  :         }
; 647  :         Py_DECREF(name);

  00208	48 8b 4c 24 30	 mov	 rcx, QWORD PTR name$[rsp]
  0020d	e8 00 00 00 00	 call	 _Py_DecRef
  00212	48 8b ce	 mov	 rcx, rsi
  00215	e8 00 00 00 00	 call	 PyIter_Next
  0021a	48 89 44 24 30	 mov	 QWORD PTR name$[rsp], rax
  0021f	48 85 c0	 test	 rax, rax
  00222	0f 85 48 ff ff
	ff		 jne	 $LL20@update_sym
$LN50@update_sym:

; 648  :     }
; 649  :     Py_DECREF(itr);

  00228	48 8b ce	 mov	 rcx, rsi
  0022b	e8 00 00 00 00	 call	 _Py_DecRef

; 650  :     Py_DECREF(v_free);

  00230	48 8b cd	 mov	 rcx, rbp
  00233	e8 00 00 00 00	 call	 _Py_DecRef

; 651  :     return 1;

  00238	b8 01 00 00 00	 mov	 eax, 1
  0023d	eb 2b		 jmp	 SHORT $LN51@update_sym
$LN47@update_sym:

; 629  :                     Py_DECREF(v_new);

  0023f	e8 00 00 00 00	 call	 _Py_DecRef
$error$21922:

; 652  : error:
; 653  :     Py_XDECREF(v_free);

  00244	48 8b cd	 mov	 rcx, rbp
  00247	e8 00 00 00 00	 call	 _Py_DecRef

; 654  :     Py_XDECREF(itr);

  0024c	48 85 f6	 test	 rsi, rsi
  0024f	74 08		 je	 SHORT $LN7@update_sym
  00251	48 8b ce	 mov	 rcx, rsi
  00254	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@update_sym:

; 655  :     Py_XDECREF(name);

  00259	48 8b 4c 24 30	 mov	 rcx, QWORD PTR name$[rsp]
  0025e	48 85 c9	 test	 rcx, rcx
  00261	74 05		 je	 SHORT $LN3@update_sym
  00263	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@update_sym:

; 656  :     return 0;

  00268	33 c0		 xor	 eax, eax
$LN51@update_sym:
  0026a	4c 8b 64 24 70	 mov	 r12, QWORD PTR [rsp+112]
$LN27@update_sym:

; 657  : }

  0026f	48 8b 5c 24 78	 mov	 rbx, QWORD PTR [rsp+120]
  00274	48 8b ac 24 80
	00 00 00	 mov	 rbp, QWORD PTR [rsp+128]
  0027c	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00280	41 5d		 pop	 r13
  00282	5f		 pop	 rdi
  00283	5e		 pop	 rsi
  00284	c3		 ret	 0
update_symbols ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceOr:PROC
EXTRN	PySet_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$analyze_child_block DD imagerel analyze_child_block
	DD	imagerel analyze_child_block+512
	DD	imagerel $unwind$analyze_child_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$analyze_child_block DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0c016521aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\symtable.c
xdata	ENDS
;	COMDAT analyze_child_block
_TEXT	SEGMENT
entry$ = 64
bound$ = 72
free$ = 80
global$ = 88
child_free$ = 96
analyze_child_block PROC				; COMDAT

; 840  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0001a	4c 8b e1	 mov	 r12, rcx

; 841  :     PyObject *temp_bound = NULL, *temp_global = NULL, *temp_free = NULL;
; 842  :     PyObject *temp;
; 843  : 
; 844  :     /* Copy the bound and global dictionaries.
; 845  : 
; 846  :        These dictionary are used by all blocks enclosed by the
; 847  :        current block.  The analyze_block() call modifies these
; 848  :        dictionaries.
; 849  : 
; 850  :     */
; 851  :     temp_bound = PySet_New(bound);

  0001d	48 8b ca	 mov	 rcx, rdx
  00020	49 8b e9	 mov	 rbp, r9
  00023	49 8b f8	 mov	 rdi, r8
  00026	33 db		 xor	 ebx, ebx
  00028	e8 00 00 00 00	 call	 PySet_New
  0002d	48 8b f0	 mov	 rsi, rax

; 852  :     if (!temp_bound)

  00030	48 85 c0	 test	 rax, rax
  00033	0f 84 aa 01 00
	00		 je	 $LN3@analyze_ch

; 853  :         goto error;
; 854  :     temp_free = PySet_New(free);

  00039	48 8b cf	 mov	 rcx, rdi
  0003c	e8 00 00 00 00	 call	 PySet_New
  00041	48 8b f8	 mov	 rdi, rax

; 855  :     if (!temp_free)

  00044	48 85 c0	 test	 rax, rax
  00047	74 61		 je	 SHORT $error$22104

; 856  :         goto error;
; 857  :     temp_global = PySet_New(global);

  00049	48 8b cd	 mov	 rcx, rbp
  0004c	e8 00 00 00 00	 call	 PySet_New
  00051	48 8b d8	 mov	 rbx, rax

; 858  :     if (!temp_global)

  00054	48 85 c0	 test	 rax, rax
  00057	74 51		 je	 SHORT $error$22104

; 859  :         goto error;
; 860  : 
; 861  :     if (!analyze_block(entry, temp_bound, temp_free, temp_global))

  00059	4c 8b c8	 mov	 r9, rax
  0005c	4c 8b c7	 mov	 r8, rdi
  0005f	48 8b d6	 mov	 rdx, rsi
  00062	49 8b cc	 mov	 rcx, r12
  00065	e8 00 00 00 00	 call	 analyze_block
  0006a	85 c0		 test	 eax, eax
  0006c	74 3c		 je	 SHORT $error$22104

; 862  :         goto error;
; 863  :     temp = PyNumber_InPlaceOr(child_free, temp_free);

  0006e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR child_free$[rsp]
  00073	48 8b d7	 mov	 rdx, rdi
  00076	e8 00 00 00 00	 call	 PyNumber_InPlaceOr

; 864  :     if (!temp)

  0007b	48 85 c0	 test	 rax, rax
  0007e	74 2a		 je	 SHORT $error$22104

; 865  :         goto error;
; 866  :     Py_DECREF(temp);

  00080	48 8b c8	 mov	 rcx, rax
  00083	e8 00 00 00 00	 call	 _Py_DecRef

; 867  :     Py_DECREF(temp_bound);

  00088	48 8b ce	 mov	 rcx, rsi
  0008b	e8 00 00 00 00	 call	 _Py_DecRef

; 868  :     Py_DECREF(temp_free);

  00090	48 8b cf	 mov	 rcx, rdi
  00093	e8 00 00 00 00	 call	 _Py_DecRef

; 869  :     Py_DECREF(temp_global);

  00098	48 8b cb	 mov	 rcx, rbx
  0009b	e8 00 00 00 00	 call	 _Py_DecRef

; 870  :     return 1;

  000a0	b8 01 00 00 00	 mov	 eax, 1
  000a5	e9 3b 01 00 00	 jmp	 $LN18@analyze_ch
$error$22104:

; 871  :  error:
; 872  :     Py_XDECREF(temp_bound);

  000aa	e8 00 00 00 00	 call	 _Py_PXCTX
  000af	85 c0		 test	 eax, eax
  000b1	75 5c		 jne	 SHORT $LN11@analyze_ch
  000b3	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  000b7	a8 20		 test	 al, 32			; 00000020H
  000b9	75 4c		 jne	 SHORT $LN24@analyze_ch
  000bb	84 c0		 test	 al, al
  000bd	78 48		 js	 SHORT $LN24@analyze_ch
  000bf	a8 02		 test	 al, 2
  000c1	75 4c		 jne	 SHORT $LN11@analyze_ch
  000c3	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  000c7	75 46		 jne	 SHORT $LN11@analyze_ch
  000c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000d7	4c 8b ce	 mov	 r9, rsi
  000da	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000e0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ed	48 8b ce	 mov	 rcx, rsi
  000f0	85 c0		 test	 eax, eax
  000f2	74 07		 je	 SHORT $LN29@analyze_ch
  000f4	e8 00 00 00 00	 call	 _Px_Dealloc
  000f9	eb 14		 jmp	 SHORT $LN11@analyze_ch
$LN29@analyze_ch:
  000fb	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  000ff	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00105	eb 08		 jmp	 SHORT $LN11@analyze_ch
$LN24@analyze_ch:
  00107	48 8b ce	 mov	 rcx, rsi
  0010a	e8 00 00 00 00	 call	 Px_DecRef
$LN11@analyze_ch:

; 873  :     Py_XDECREF(temp_free);

  0010f	48 85 ff	 test	 rdi, rdi
  00112	74 65		 je	 SHORT $LN7@analyze_ch
  00114	e8 00 00 00 00	 call	 _Py_PXCTX
  00119	85 c0		 test	 eax, eax
  0011b	75 5c		 jne	 SHORT $LN7@analyze_ch
  0011d	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00121	a8 20		 test	 al, 32			; 00000020H
  00123	75 4c		 jne	 SHORT $LN35@analyze_ch
  00125	84 c0		 test	 al, al
  00127	78 48		 js	 SHORT $LN35@analyze_ch
  00129	a8 02		 test	 al, 2
  0012b	75 4c		 jne	 SHORT $LN7@analyze_ch
  0012d	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00131	75 46		 jne	 SHORT $LN7@analyze_ch
  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00141	4c 8b cf	 mov	 r9, rdi
  00144	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0014a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00152	e8 00 00 00 00	 call	 _PyParallel_Guard
  00157	48 8b cf	 mov	 rcx, rdi
  0015a	85 c0		 test	 eax, eax
  0015c	74 07		 je	 SHORT $LN40@analyze_ch
  0015e	e8 00 00 00 00	 call	 _Px_Dealloc
  00163	eb 14		 jmp	 SHORT $LN7@analyze_ch
$LN40@analyze_ch:
  00165	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00169	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0016f	eb 08		 jmp	 SHORT $LN7@analyze_ch
$LN35@analyze_ch:
  00171	48 8b cf	 mov	 rcx, rdi
  00174	e8 00 00 00 00	 call	 Px_DecRef
$LN7@analyze_ch:

; 874  :     Py_XDECREF(temp_global);

  00179	48 85 db	 test	 rbx, rbx
  0017c	74 65		 je	 SHORT $LN3@analyze_ch
  0017e	e8 00 00 00 00	 call	 _Py_PXCTX
  00183	85 c0		 test	 eax, eax
  00185	75 5c		 jne	 SHORT $LN3@analyze_ch
  00187	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0018b	a8 20		 test	 al, 32			; 00000020H
  0018d	75 4c		 jne	 SHORT $LN46@analyze_ch
  0018f	84 c0		 test	 al, al
  00191	78 48		 js	 SHORT $LN46@analyze_ch
  00193	a8 02		 test	 al, 2
  00195	75 4c		 jne	 SHORT $LN3@analyze_ch
  00197	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0019b	75 46		 jne	 SHORT $LN3@analyze_ch
  0019d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001ab	4c 8b cb	 mov	 r9, rbx
  001ae	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001b4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001bc	e8 00 00 00 00	 call	 _PyParallel_Guard
  001c1	48 8b cb	 mov	 rcx, rbx
  001c4	85 c0		 test	 eax, eax
  001c6	74 07		 je	 SHORT $LN51@analyze_ch
  001c8	e8 00 00 00 00	 call	 _Px_Dealloc
  001cd	eb 14		 jmp	 SHORT $LN3@analyze_ch
$LN51@analyze_ch:
  001cf	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001d3	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001d9	eb 08		 jmp	 SHORT $LN3@analyze_ch
$LN46@analyze_ch:
  001db	48 8b cb	 mov	 rcx, rbx
  001de	e8 00 00 00 00	 call	 Px_DecRef
$LN3@analyze_ch:

; 875  :     return 0;

  001e3	33 c0		 xor	 eax, eax
$LN18@analyze_ch:

; 876  : }

  001e5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001ea	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  001ef	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  001f4	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  001f9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001fd	41 5c		 pop	 r12
  001ff	c3		 ret	 0
analyze_child_block ENDP
_TEXT	ENDS
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyErr_WarnExplicit:PROC
EXTRN	PyExc_SyntaxWarning:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_warn DD imagerel symtable_warn
	DD	imagerel symtable_warn+136
	DD	imagerel $unwind$symtable_warn
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_warn DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT symtable_warn
_TEXT	SEGMENT
st$ = 64
msg$ = 72
lineno$ = 80
symtable_warn PROC					; COMDAT

; 901  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 902  :     if (PyErr_WarnExplicit(PyExc_SyntaxWarning, msg, st->st_filename,
; 903  :                            lineno, NULL, NULL) < 0)     {

  0000a	33 c0		 xor	 eax, eax
  0000c	45 8b c8	 mov	 r9d, r8d
  0000f	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  00012	48 8b d9	 mov	 rbx, rcx
  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxWarning
  0001c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00021	48 8b fa	 mov	 rdi, rdx
  00024	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00029	e8 00 00 00 00	 call	 PyErr_WarnExplicit
  0002e	85 c0		 test	 eax, eax
  00030	79 46		 jns	 SHORT $LN2@symtable_w

; 904  :         if (PyErr_ExceptionMatches(PyExc_SyntaxWarning)) {

  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxWarning
  00039	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0003e	85 c0		 test	 eax, eax
  00040	74 29		 je	 SHORT $LN1@symtable_w

; 905  :             PyErr_SetString(PyExc_SyntaxError, msg);

  00042	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  00049	48 8b d7	 mov	 rdx, rdi
  0004c	e8 00 00 00 00	 call	 PyErr_SetString

; 906  :             PyErr_SyntaxLocationEx(st->st_filename, st->st_cur->ste_lineno,
; 907  :                                    st->st_cur->ste_col_offset);

  00051	4c 8b 5b 08	 mov	 r11, QWORD PTR [rbx+8]
  00055	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00058	45 8b 83 9c 00
	00 00		 mov	 r8d, DWORD PTR [r11+156]
  0005f	41 8b 93 98 00
	00 00		 mov	 edx, DWORD PTR [r11+152]
  00066	e8 00 00 00 00	 call	 PyErr_SyntaxLocationEx
$LN1@symtable_w:

; 908  :         }
; 909  :         return 0;

  0006b	33 c0		 xor	 eax, eax

; 912  : }

  0006d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00072	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00076	5f		 pop	 rdi
  00077	c3		 ret	 0
$LN2@symtable_w:

; 910  :     }
; 911  :     return 1;

  00078	b8 01 00 00 00	 mov	 eax, 1

; 912  : }

  0007d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00082	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00086	5f		 pop	 rdi
  00087	c3		 ret	 0
symtable_warn ENDP
_TEXT	ENDS
EXTRN	PyList_SetSlice:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_exit_block DD imagerel symtable_exit_block
	DD	imagerel symtable_exit_block+104
	DD	imagerel $unwind$symtable_exit_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_exit_block DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT symtable_exit_block
_TEXT	SEGMENT
st$ = 48
symtable_exit_block PROC				; COMDAT

; 921  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 922  :     Py_ssize_t size;
; 923  : 
; 924  :     st->st_cur = NULL;

  0000a	48 c7 41 08 00
	00 00 00	 mov	 QWORD PTR [rcx+8], 0
  00012	48 8b d9	 mov	 rbx, rcx

; 925  :     size = PyList_GET_SIZE(st->st_stack);

  00015	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00019	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]

; 926  :     if (size) {

  0001d	4d 85 c0	 test	 r8, r8
  00020	74 36		 je	 SHORT $LN1@symtable_e

; 927  :         if (PyList_SetSlice(st->st_stack, size - 1, size, NULL) < 0)

  00022	49 8d 78 ff	 lea	 rdi, QWORD PTR [r8-1]
  00026	45 33 c9	 xor	 r9d, r9d
  00029	48 8b d7	 mov	 rdx, rdi
  0002c	e8 00 00 00 00	 call	 PyList_SetSlice
  00031	85 c0		 test	 eax, eax
  00033	79 0d		 jns	 SHORT $LN2@symtable_e

; 928  :             return 0;

  00035	33 c0		 xor	 eax, eax

; 933  : }

  00037	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
$LN2@symtable_e:

; 929  :         if (--size)

  00042	48 85 ff	 test	 rdi, rdi
  00045	74 11		 je	 SHORT $LN1@symtable_e

; 930  :             st->st_cur = (PySTEntryObject *)PyList_GET_ITEM(st->st_stack, size - 1);

  00047	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0004b	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0004f	48 8b 44 f9 f8	 mov	 rax, QWORD PTR [rcx+rdi*8-8]
  00054	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
$LN1@symtable_e:

; 931  :     }
; 932  :     return 1;

  00058	b8 01 00 00 00	 mov	 eax, 1

; 933  : }

  0005d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00062	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00066	5f		 pop	 rdi
  00067	c3		 ret	 0
symtable_exit_block ENDP
_TEXT	ENDS
EXTRN	PyList_Append:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_enter_block DD imagerel symtable_enter_block
	DD	imagerel symtable_enter_block+177
	DD	imagerel $unwind$symtable_enter_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_enter_block DD 086101H
	DD	086461H
	DD	0a540fH
	DD	09340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT symtable_enter_block
_TEXT	SEGMENT
st$ = 64
name$ = 72
block$ = 80
ast$ = 88
lineno$ = 96
col_offset$ = 104
symtable_enter_block PROC				; COMDAT

; 938  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 939  :     PySTEntryObject *prev = NULL, *ste;
; 940  : 
; 941  :     ste = ste_new(st, name, block, ast, lineno, col_offset);

  0000f	8b 44 24 68	 mov	 eax, DWORD PTR col_offset$[rsp]
  00013	41 8b e8	 mov	 ebp, r8d
  00016	48 8b f9	 mov	 rdi, rcx
  00019	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0001d	8b 44 24 60	 mov	 eax, DWORD PTR lineno$[rsp]
  00021	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00025	e8 00 00 00 00	 call	 ste_new
  0002a	48 8b d8	 mov	 rbx, rax

; 942  :     if (ste == NULL)

  0002d	48 85 c0	 test	 rax, rax

; 943  :         return 0;

  00030	74 18		 je	 SHORT $LN9@symtable_e@2

; 944  :     if (PyList_Append(st->st_stack, (PyObject *)ste) < 0) {

  00032	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  00036	48 8b d0	 mov	 rdx, rax
  00039	e8 00 00 00 00	 call	 PyList_Append

; 945  :         Py_DECREF(ste);

  0003e	48 8b cb	 mov	 rcx, rbx
  00041	85 c0		 test	 eax, eax
  00043	79 17		 jns	 SHORT $LN4@symtable_e@2
  00045	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@symtable_e@2:

; 946  :         return 0;

  0004a	33 c0		 xor	 eax, eax

; 960  : }

  0004c	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00051	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
$LN4@symtable_e@2:
  0005c	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi

; 947  :     }
; 948  :     prev = st->st_cur;

  00061	48 8b 77 08	 mov	 rsi, QWORD PTR [rdi+8]

; 949  :     /* The entry is owned by the stack. Borrow it for st_cur. */
; 950  :     Py_DECREF(ste);

  00065	e8 00 00 00 00	 call	 _Py_DecRef

; 951  :     st->st_cur = ste;

  0006a	48 89 5f 08	 mov	 QWORD PTR [rdi+8], rbx

; 952  :     if (block == ModuleBlock)

  0006e	83 fd 02	 cmp	 ebp, 2
  00071	75 08		 jne	 SHORT $LN3@symtable_e@2

; 953  :         st->st_global = st->st_cur->ste_symbols;

  00073	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00077	48 89 47 28	 mov	 QWORD PTR [rdi+40], rax
$LN3@symtable_e@2:

; 954  :     if (prev) {

  0007b	48 85 f6	 test	 rsi, rsi
  0007e	74 17		 je	 SHORT $LN1@symtable_e@2

; 955  :         if (PyList_Append(prev->ste_children, (PyObject *)ste) < 0) {

  00080	48 8b 8e 80 00
	00 00		 mov	 rcx, QWORD PTR [rsi+128]
  00087	48 8b d3	 mov	 rdx, rbx
  0008a	e8 00 00 00 00	 call	 PyList_Append
  0008f	85 c0		 test	 eax, eax
  00091	79 04		 jns	 SHORT $LN1@symtable_e@2

; 956  :             return 0;

  00093	33 c0		 xor	 eax, eax
  00095	eb 05		 jmp	 SHORT $LN8@symtable_e@2
$LN1@symtable_e@2:

; 957  :         }
; 958  :     }
; 959  :     return 1;

  00097	b8 01 00 00 00	 mov	 eax, 1
$LN8@symtable_e@2:
  0009c	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 960  : }

  000a1	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000a6	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000ab	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000af	5f		 pop	 rdi
  000b0	c3		 ret	 0
symtable_enter_block ENDP
_TEXT	ENDS
EXTRN	_Py_Mangle:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_lookup DD imagerel symtable_lookup
	DD	imagerel symtable_lookup+93
	DD	imagerel $unwind$symtable_lookup
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_lookup DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT symtable_lookup
_TEXT	SEGMENT
st$ = 48
name$ = 56
symtable_lookup PROC					; COMDAT

; 964  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 965  :     PyObject *o;
; 966  :     PyObject *mangled = _Py_Mangle(st->st_private, name);

  0000d	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00011	e8 00 00 00 00	 call	 _Py_Mangle
  00016	48 8b f8	 mov	 rdi, rax

; 967  :     if (!mangled)

  00019	48 85 c0	 test	 rax, rax
  0001c	75 0d		 jne	 SHORT $LN2@symtable_l
$LN5@symtable_l:

; 968  :         return 0;

  0001e	33 c0		 xor	 eax, eax

; 974  : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN2@symtable_l:

; 969  :     o = PyDict_GetItem(st->st_cur->ste_symbols, mangled);

  0002b	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  0002f	48 8b d0	 mov	 rdx, rax
  00032	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00036	e8 00 00 00 00	 call	 PyDict_GetItem

; 970  :     Py_DECREF(mangled);

  0003b	48 8b cf	 mov	 rcx, rdi
  0003e	48 8b d8	 mov	 rbx, rax
  00041	e8 00 00 00 00	 call	 _Py_DecRef

; 971  :     if (!o)

  00046	48 85 db	 test	 rbx, rbx

; 972  :         return 0;

  00049	74 d3		 je	 SHORT $LN5@symtable_l

; 973  :     return PyLong_AsLong(o);

  0004b	48 8b cb	 mov	 rcx, rbx

; 974  : }

  0004e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	e9 00 00 00 00	 jmp	 PyLong_AsLong
symtable_lookup ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@OLFKADKB@duplicate?5argument?5?8?$CFU?8?5in?5funct@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_add_def DD imagerel symtable_add_def
	DD	imagerel symtable_add_def+50
	DD	imagerel $unwind$symtable_add_def
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$symtable_add_def DD imagerel symtable_add_def+50
	DD	imagerel symtable_add_def+156
	DD	imagerel $chain$0$symtable_add_def
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$symtable_add_def DD imagerel symtable_add_def+156
	DD	imagerel symtable_add_def+177
	DD	imagerel $chain$1$symtable_add_def
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$symtable_add_def DD imagerel symtable_add_def+177
	DD	imagerel symtable_add_def+367
	DD	imagerel $chain$2$symtable_add_def
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$symtable_add_def DD 020021H
	DD	06c400H
	DD	imagerel symtable_add_def
	DD	imagerel symtable_add_def+50
	DD	imagerel $unwind$symtable_add_def
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$symtable_add_def DD 021H
	DD	imagerel symtable_add_def
	DD	imagerel symtable_add_def+50
	DD	imagerel $unwind$symtable_add_def
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$symtable_add_def DD 020521H
	DD	06c405H
	DD	imagerel symtable_add_def
	DD	imagerel symtable_add_def+50
	DD	imagerel $unwind$symtable_add_def
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_add_def DD 081401H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CP@OLFKADKB@duplicate?5argument?5?8?$CFU?8?5in?5funct@
CONST	SEGMENT
??_C@_0CP@OLFKADKB@duplicate?5argument?5?8?$CFU?8?5in?5funct@ DB 'duplica'
	DB	'te argument ''%U'' in function definition', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT symtable_add_def
_TEXT	SEGMENT
st$ = 48
name$ = 56
flag$ = 64
symtable_add_def PROC					; COMDAT

; 978  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b e9	 mov	 rbp, rcx

; 979  :     PyObject *o;
; 980  :     PyObject *dict;
; 981  :     long val;
; 982  :     PyObject *mangled = _Py_Mangle(st->st_private, name);

  00017	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0001b	41 8b d8	 mov	 ebx, r8d
  0001e	48 8b f2	 mov	 rsi, rdx
  00021	e8 00 00 00 00	 call	 _Py_Mangle
  00026	48 8b f8	 mov	 rdi, rax

; 983  : 
; 984  : 
; 985  :     if (!mangled)

  00029	48 85 c0	 test	 rax, rax
  0002c	74 6e		 je	 SHORT $LN14@symtable_a
$LN13@symtable_a:

; 986  :         return 0;
; 987  :     dict = st->st_cur->ste_symbols;

  0002e	48 8b 45 08	 mov	 rax, QWORD PTR [rbp+8]
  00032	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12

; 988  :     if ((o = PyDict_GetItem(dict, mangled))) {

  00037	48 8b d7	 mov	 rdx, rdi
  0003a	4c 8b 60 68	 mov	 r12, QWORD PTR [rax+104]
  0003e	49 8b cc	 mov	 rcx, r12
  00041	e8 00 00 00 00	 call	 PyDict_GetItem
  00046	48 85 c0	 test	 rax, rax
  00049	74 6a		 je	 SHORT $LN12@symtable_a

; 989  :         val = PyLong_AS_LONG(o);

  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 PyLong_AsLong

; 990  :         if ((flag & DEF_PARAM) && (val & DEF_PARAM)) {

  00053	f6 c3 04	 test	 bl, 4
  00056	74 59		 je	 SHORT $LN11@symtable_a
  00058	a8 04		 test	 al, 4
  0005a	74 55		 je	 SHORT $LN11@symtable_a

; 991  :             /* Is it better to use 'mangled' or 'name' here? */
; 992  :             PyErr_Format(PyExc_SyntaxError, DUPLICATE_ARGUMENT, name);

  0005c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@OLFKADKB@duplicate?5argument?5?8?$CFU?8?5in?5funct@
  0006a	4c 8b c6	 mov	 r8, rsi
  0006d	e8 00 00 00 00	 call	 PyErr_Format

; 993  :             PyErr_SyntaxLocationEx(st->st_filename,
; 994  :                                    st->st_cur->ste_lineno,
; 995  :                                    st->st_cur->ste_col_offset);

  00072	4c 8b 5d 08	 mov	 r11, QWORD PTR [rbp+8]
  00076	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
  0007a	45 8b 83 9c 00
	00 00		 mov	 r8d, DWORD PTR [r11+156]
  00081	41 8b 93 98 00
	00 00		 mov	 edx, DWORD PTR [r11+152]
  00088	e8 00 00 00 00	 call	 PyErr_SyntaxLocationEx
$error$22220:

; 1031 : 
; 1032 : error:
; 1033 :     Py_DECREF(mangled);

  0008d	48 8b cf	 mov	 rcx, rdi
  00090	e8 00 00 00 00	 call	 _Py_DecRef

; 1034 :     return 0;

  00095	33 c0		 xor	 eax, eax
$LN16@symtable_a:
  00097	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]
$LN14@symtable_a:

; 1035 : }

  0009c	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000a1	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000a6	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000ab	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000af	5f		 pop	 rdi
  000b0	c3		 ret	 0
$LN11@symtable_a:

; 996  :             goto error;
; 997  :         }
; 998  :         val |= flag;

  000b1	0b c3		 or	 eax, ebx

; 999  :     } else

  000b3	eb 02		 jmp	 SHORT $LN10@symtable_a
$LN12@symtable_a:

; 1000 :         val = flag;

  000b5	8b c3		 mov	 eax, ebx
$LN10@symtable_a:

; 1001 :     o = PyLong_FromLong(val);

  000b7	8b c8		 mov	 ecx, eax
  000b9	e8 00 00 00 00	 call	 PyLong_FromLong
  000be	48 8b f0	 mov	 rsi, rax

; 1002 :     if (o == NULL)

  000c1	48 85 c0	 test	 rax, rax
  000c4	74 c7		 je	 SHORT $error$22220

; 1003 :         goto error;
; 1004 :     if (PyDict_SetItem(dict, mangled, o) < 0) {

  000c6	4c 8b c0	 mov	 r8, rax
  000c9	48 8b d7	 mov	 rdx, rdi
  000cc	49 8b cc	 mov	 rcx, r12
  000cf	e8 00 00 00 00	 call	 PyDict_SetItem

; 1005 :         Py_DECREF(o);

  000d4	48 8b ce	 mov	 rcx, rsi
  000d7	85 c0		 test	 eax, eax
  000d9	79 07		 jns	 SHORT $LN8@symtable_a
$LN17@symtable_a:
  000db	e8 00 00 00 00	 call	 _Py_DecRef

; 1006 :         goto error;

  000e0	eb ab		 jmp	 SHORT $error$22220
$LN8@symtable_a:

; 1007 :     }
; 1008 :     Py_DECREF(o);

  000e2	e8 00 00 00 00	 call	 _Py_DecRef

; 1009 : 
; 1010 :     if (flag & DEF_PARAM) {

  000e7	f6 c3 04	 test	 bl, 4
  000ea	74 23		 je	 SHORT $LN7@symtable_a

; 1011 :         if (PyList_Append(st->st_cur->ste_varnames, mangled) < 0)

  000ec	48 8b 4d 08	 mov	 rcx, QWORD PTR [rbp+8]
  000f0	48 8b d7	 mov	 rdx, rdi
  000f3	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  000f7	e8 00 00 00 00	 call	 PyList_Append
  000fc	85 c0		 test	 eax, eax
  000fe	78 8d		 js	 SHORT $error$22220

; 1028 :     }
; 1029 :     Py_DECREF(mangled);

  00100	48 8b cf	 mov	 rcx, rdi
  00103	e8 00 00 00 00	 call	 _Py_DecRef

; 1030 :     return 1;

  00108	b8 01 00 00 00	 mov	 eax, 1
  0010d	eb 88		 jmp	 SHORT $LN16@symtable_a
$LN7@symtable_a:

; 1012 :             goto error;
; 1013 :     } else      if (flag & DEF_GLOBAL) {

  0010f	f6 c3 01	 test	 bl, 1
  00112	74 49		 je	 SHORT $LN4@symtable_a

; 1014 :         /* XXX need to update DEF_GLOBAL for other flags too;
; 1015 :            perhaps only DEF_FREE_GLOBAL */
; 1016 :         val = flag;
; 1017 :         if ((o = PyDict_GetItem(st->st_global, mangled))) {

  00114	48 8b 4d 28	 mov	 rcx, QWORD PTR [rbp+40]
  00118	48 8b d7	 mov	 rdx, rdi
  0011b	e8 00 00 00 00	 call	 PyDict_GetItem
  00120	48 85 c0	 test	 rax, rax
  00123	74 0a		 je	 SHORT $LN3@symtable_a

; 1018 :             val |= PyLong_AS_LONG(o);

  00125	48 8b c8	 mov	 rcx, rax
  00128	e8 00 00 00 00	 call	 PyLong_AsLong
  0012d	0b d8		 or	 ebx, eax
$LN3@symtable_a:

; 1019 :         }
; 1020 :         o = PyLong_FromLong(val);

  0012f	8b cb		 mov	 ecx, ebx
  00131	e8 00 00 00 00	 call	 PyLong_FromLong
  00136	48 8b d8	 mov	 rbx, rax

; 1021 :         if (o == NULL)

  00139	48 85 c0	 test	 rax, rax
  0013c	0f 84 4b ff ff
	ff		 je	 $error$22220

; 1022 :             goto error;
; 1023 :         if (PyDict_SetItem(st->st_global, mangled, o) < 0) {

  00142	48 8b 4d 28	 mov	 rcx, QWORD PTR [rbp+40]
  00146	4c 8b c0	 mov	 r8, rax
  00149	48 8b d7	 mov	 rdx, rdi
  0014c	e8 00 00 00 00	 call	 PyDict_SetItem

; 1024 :             Py_DECREF(o);

  00151	48 8b cb	 mov	 rcx, rbx
  00154	85 c0		 test	 eax, eax
  00156	78 83		 js	 SHORT $LN17@symtable_a

; 1025 :             goto error;
; 1026 :         }
; 1027 :         Py_DECREF(o);

  00158	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@symtable_a:

; 1028 :     }
; 1029 :     Py_DECREF(mangled);

  0015d	48 8b cf	 mov	 rcx, rdi
  00160	e8 00 00 00 00	 call	 _Py_DecRef

; 1030 :     return 1;

  00165	b8 01 00 00 00	 mov	 eax, 1
  0016a	e9 28 ff ff ff	 jmp	 $LN16@symtable_a
symtable_add_def ENDP
_TEXT	ENDS
PUBLIC	??_C@_05CLABAFEN@_?$FL?$CFd?$FN?$AA@		; `string'
EXTRN	PyUnicode_InternFromString:PROC
EXTRN	PyOS_snprintf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_new_tmpname DD imagerel symtable_new_tmpname
	DD	imagerel symtable_new_tmpname+143
	DD	imagerel $unwind$symtable_new_tmpname
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_new_tmpname DD 050d01H
	DD	026340dH
	DD	024010dH
	DD	07006H
xdata	ENDS
;	COMDAT ??_C@_05CLABAFEN@_?$FL?$CFd?$FN?$AA@
CONST	SEGMENT
??_C@_05CLABAFEN@_?$FL?$CFd?$FN?$AA@ DB '_[%d]', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT symtable_new_tmpname
_TEXT	SEGMENT
tmpname$ = 32
st$ = 304
symtable_new_tmpname PROC				; COMDAT

; 1088 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 81 ec 20 01
	00 00		 sub	 rsp, 288		; 00000120H

; 1089 :     char tmpname[256];
; 1090 :     identifier tmp;
; 1091 : 
; 1092 :     PyOS_snprintf(tmpname, sizeof(tmpname), "_[%d]",
; 1093 :                   ++st->st_cur->ste_tmpname);

  0000d	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00011	48 8b f9	 mov	 rdi, rcx
  00014	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05CLABAFEN@_?$FL?$CFd?$FN?$AA@
  0001b	ff 80 a8 00 00
	00		 inc	 DWORD PTR [rax+168]
  00021	44 8b 88 a8 00
	00 00		 mov	 r9d, DWORD PTR [rax+168]
  00028	48 8d 4c 24 20	 lea	 rcx, QWORD PTR tmpname$[rsp]
  0002d	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00032	e8 00 00 00 00	 call	 PyOS_snprintf

; 1094 :     tmp = PyUnicode_InternFromString(tmpname);

  00037	48 8d 4c 24 20	 lea	 rcx, QWORD PTR tmpname$[rsp]
  0003c	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00041	48 8b d8	 mov	 rbx, rax

; 1095 :     if (!tmp)

  00044	48 85 c0	 test	 rax, rax
  00047	75 13		 jne	 SHORT $LN2@symtable_n
$LN5@symtable_n:

; 1096 :         return 0;

  00049	33 c0		 xor	 eax, eax

; 1100 :     return 1;
; 1101 : }

  0004b	48 8b 9c 24 30
	01 00 00	 mov	 rbx, QWORD PTR [rsp+304]
  00053	48 81 c4 20 01
	00 00		 add	 rsp, 288		; 00000120H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
$LN2@symtable_n:

; 1097 :     if (!symtable_add_def(st, tmp, DEF_LOCAL))

  0005c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00062	48 8b d0	 mov	 rdx, rax
  00065	48 8b cf	 mov	 rcx, rdi
  00068	e8 00 00 00 00	 call	 symtable_add_def
  0006d	85 c0		 test	 eax, eax

; 1098 :         return 0;

  0006f	74 d8		 je	 SHORT $LN5@symtable_n

; 1099 :     Py_DECREF(tmp);

  00071	48 8b cb	 mov	 rcx, rbx
  00074	e8 00 00 00 00	 call	 _Py_DecRef

; 1100 :     return 1;
; 1101 : }

  00079	48 8b 9c 24 30
	01 00 00	 mov	 rbx, QWORD PTR [rsp+304]
  00081	b8 01 00 00 00	 mov	 eax, 1
  00086	48 81 c4 20 01
	00 00		 add	 rsp, 288		; 00000120H
  0008d	5f		 pop	 rdi
  0008e	c3		 ret	 0
symtable_new_tmpname ENDP
_TEXT	ENDS
PUBLIC	??_C@_03KBEBNCEG@?4?$CFd?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_implicit_arg DD imagerel symtable_implicit_arg
	DD	imagerel symtable_implicit_arg+96
	DD	imagerel $unwind$symtable_implicit_arg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_implicit_arg DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_03KBEBNCEG@?4?$CFd?$AA@
CONST	SEGMENT
??_C@_03KBEBNCEG@?4?$CFd?$AA@ DB '.%d', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT symtable_implicit_arg
_TEXT	SEGMENT
st$ = 48
pos$ = 56
symtable_implicit_arg PROC				; COMDAT

; 1449 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 1450 :     PyObject *id = PyUnicode_FromFormat(".%d", pos);

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03KBEBNCEG@?4?$CFd?$AA@
  00014	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00019	48 8b d8	 mov	 rbx, rax

; 1451 :     if (id == NULL)

  0001c	48 85 c0	 test	 rax, rax

; 1452 :         return 0;

  0001f	74 1d		 je	 SHORT $LN5@symtable_i

; 1453 :     if (!symtable_add_def(st, id, DEF_PARAM)) {

  00021	41 b8 04 00 00
	00		 mov	 r8d, 4
  00027	48 8b d0	 mov	 rdx, rax
  0002a	48 8b cf	 mov	 rcx, rdi
  0002d	e8 00 00 00 00	 call	 symtable_add_def

; 1454 :         Py_DECREF(id);

  00032	48 8b cb	 mov	 rcx, rbx
  00035	85 c0		 test	 eax, eax
  00037	75 12		 jne	 SHORT $LN1@symtable_i
  00039	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@symtable_i:

; 1455 :         return 0;

  0003e	33 c0		 xor	 eax, eax

; 1458 :     return 1;
; 1459 : }

  00040	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00045	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00049	5f		 pop	 rdi
  0004a	c3		 ret	 0
$LN1@symtable_i:

; 1456 :     }
; 1457 :     Py_DECREF(id);

  0004b	e8 00 00 00 00	 call	 _Py_DecRef

; 1458 :     return 1;
; 1459 : }

  00050	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00055	b8 01 00 00 00	 mov	 eax, 1
  0005a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005e	5f		 pop	 rdi
  0005f	c3		 ret	 0
symtable_implicit_arg ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_params DD imagerel symtable_visit_params
	DD	imagerel symtable_visit_params+121
	DD	imagerel $unwind$symtable_visit_params
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_params DD 082d01H
	DD	07742dH
	DD	063428H
	DD	08540aH
	DD	06006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT symtable_visit_params
_TEXT	SEGMENT
st$ = 48
args$ = 56
symtable_visit_params PROC				; COMDAT

; 1463 : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f2	 mov	 rsi, rdx
  0000d	48 8b e9	 mov	 rbp, rcx

; 1464 :     int i;
; 1465 : 
; 1466 :     if (!args)

  00010	48 85 d2	 test	 rdx, rdx
  00013	75 0e		 jne	 SHORT $LN5@symtable_v

; 1467 :         return -1;

  00015	83 c8 ff	 or	 eax, -1

; 1476 : }

  00018	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0001d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00021	5e		 pop	 rsi
  00022	c3		 ret	 0
$LN5@symtable_v:
  00023	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00028	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi

; 1468 : 
; 1469 :     for (i = 0; i < asdl_seq_LEN(args); i++) {

  0002d	48 8d 7a 08	 lea	 rdi, QWORD PTR [rdx+8]
  00031	33 db		 xor	 ebx, ebx
$LL4@symtable_v:
  00033	48 63 c3	 movsxd	 rax, ebx
  00036	48 3b 06	 cmp	 rax, QWORD PTR [rsi]
  00039	7d 24		 jge	 SHORT $LN2@symtable_v

; 1470 :         arg_ty arg = (arg_ty)asdl_seq_GET(args, i);

  0003b	48 8b 17	 mov	 rdx, QWORD PTR [rdi]

; 1471 :         if (!symtable_add_def(st, arg->arg, DEF_PARAM))

  0003e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00044	48 8b cd	 mov	 rcx, rbp
  00047	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0004a	e8 00 00 00 00	 call	 symtable_add_def
  0004f	85 c0		 test	 eax, eax
  00051	74 08		 je	 SHORT $LN11@symtable_v

; 1468 : 
; 1469 :     for (i = 0; i < asdl_seq_LEN(args); i++) {

  00053	ff c3		 inc	 ebx
  00055	48 83 c7 08	 add	 rdi, 8
  00059	eb d8		 jmp	 SHORT $LL4@symtable_v
$LN11@symtable_v:

; 1472 :             return 0;

  0005b	33 c0		 xor	 eax, eax
  0005d	eb 05		 jmp	 SHORT $LN13@symtable_v
$LN2@symtable_v:

; 1473 :     }
; 1474 : 
; 1475 :     return 1;

  0005f	b8 01 00 00 00	 mov	 eax, 1
$LN13@symtable_v:
  00064	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00069	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 1476 : }

  0006e	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00073	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00077	5e		 pop	 rsi
  00078	c3		 ret	 0
symtable_visit_params ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_arguments DD imagerel symtable_visit_arguments
	DD	imagerel symtable_visit_arguments+159
	DD	imagerel $unwind$symtable_visit_arguments
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_arguments DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT symtable_visit_arguments
_TEXT	SEGMENT
st$ = 48
a$ = 56
symtable_visit_arguments PROC				; COMDAT

; 1515 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx

; 1516 :     /* skip default arguments inside function block
; 1517 :        XXX should ast be different?
; 1518 :     */
; 1519 :     if (a->args && !symtable_visit_params(st, a->args))

  0000d	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00010	48 8b f9	 mov	 rdi, rcx
  00013	48 85 d2	 test	 rdx, rdx
  00016	74 16		 je	 SHORT $LN6@symtable_v@2
  00018	e8 00 00 00 00	 call	 symtable_visit_params
  0001d	85 c0		 test	 eax, eax
  0001f	75 0d		 jne	 SHORT $LN6@symtable_v@2
$LN9@symtable_v@2:

; 1520 :         return 0;

  00021	33 c0		 xor	 eax, eax

; 1534 : }

  00023	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
$LN6@symtable_v@2:

; 1521 :     if (a->kwonlyargs && !symtable_visit_params(st, a->kwonlyargs))

  0002e	48 8b 53 18	 mov	 rdx, QWORD PTR [rbx+24]
  00032	48 85 d2	 test	 rdx, rdx
  00035	74 0c		 je	 SHORT $LN5@symtable_v@2
  00037	48 8b cf	 mov	 rcx, rdi
  0003a	e8 00 00 00 00	 call	 symtable_visit_params
  0003f	85 c0		 test	 eax, eax

; 1522 :         return 0;

  00041	74 de		 je	 SHORT $LN9@symtable_v@2
$LN5@symtable_v@2:

; 1523 :     if (a->vararg) {

  00043	48 8b 53 08	 mov	 rdx, QWORD PTR [rbx+8]
  00047	48 85 d2	 test	 rdx, rdx
  0004a	74 1d		 je	 SHORT $LN4@symtable_v@2

; 1524 :         if (!symtable_add_def(st, a->vararg, DEF_PARAM))

  0004c	41 b8 04 00 00
	00		 mov	 r8d, 4
  00052	48 8b cf	 mov	 rcx, rdi
  00055	e8 00 00 00 00	 call	 symtable_add_def
  0005a	85 c0		 test	 eax, eax

; 1525 :             return 0;

  0005c	74 c3		 je	 SHORT $LN9@symtable_v@2

; 1526 :         st->st_cur->ste_varargs = 1;

  0005e	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  00062	83 88 94 00 00
	00 08		 or	 DWORD PTR [rax+148], 8
$LN4@symtable_v@2:

; 1527 :     }
; 1528 :     if (a->kwarg) {

  00069	48 8b 53 20	 mov	 rdx, QWORD PTR [rbx+32]
  0006d	48 85 d2	 test	 rdx, rdx
  00070	74 1d		 je	 SHORT $LN2@symtable_v@2

; 1529 :         if (!symtable_add_def(st, a->kwarg, DEF_PARAM))

  00072	41 b8 04 00 00
	00		 mov	 r8d, 4
  00078	48 8b cf	 mov	 rcx, rdi
  0007b	e8 00 00 00 00	 call	 symtable_add_def
  00080	85 c0		 test	 eax, eax

; 1530 :             return 0;

  00082	74 9d		 je	 SHORT $LN9@symtable_v@2

; 1531 :         st->st_cur->ste_varkeywords = 1;

  00084	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  00088	83 88 94 00 00
	00 10		 or	 DWORD PTR [rax+148], 16
$LN2@symtable_v@2:

; 1532 :     }
; 1533 :     return 1;

  0008f	b8 01 00 00 00	 mov	 eax, 1

; 1534 : }

  00094	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00099	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009d	5f		 pop	 rdi
  0009e	c3		 ret	 0
symtable_visit_arguments ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@JHBDPOHA@import?5?$CK?5only?5allowed?5at?5module?5@ ; `string'
PUBLIC	??_C@_01NBENCBCI@?$CK?$AA@			; `string'
EXTRN	PyUnicode_Substring:PROC
EXTRN	PyUnicode_FindChar:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$symtable_visit_alias DD imagerel symtable_visit_alias
	DD	imagerel symtable_visit_alias+259
	DD	imagerel $unwind$symtable_visit_alias
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$symtable_visit_alias DD imagerel symtable_visit_alias+259
	DD	imagerel symtable_visit_alias+320
	DD	imagerel $chain$1$symtable_visit_alias
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$symtable_visit_alias DD imagerel symtable_visit_alias+320
	DD	imagerel symtable_visit_alias+356
	DD	imagerel $chain$2$symtable_visit_alias
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$symtable_visit_alias DD 021H
	DD	imagerel symtable_visit_alias
	DD	imagerel symtable_visit_alias+259
	DD	imagerel $unwind$symtable_visit_alias
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$symtable_visit_alias DD 020521H
	DD	097405H
	DD	imagerel symtable_visit_alias
	DD	imagerel symtable_visit_alias+259
	DD	imagerel $unwind$symtable_visit_alias
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_alias DD 062c01H
	DD	08642cH
	DD	0a340aH
	DD	05006520aH
xdata	ENDS
;	COMDAT ??_C@_0CG@JHBDPOHA@import?5?$CK?5only?5allowed?5at?5module?5@
CONST	SEGMENT
??_C@_0CG@JHBDPOHA@import?5?$CK?5only?5allowed?5at?5module?5@ DB 'import '
	DB	'* only allowed at module level', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01NBENCBCI@?$CK?$AA@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK?$AA@ DB '*', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\symtable.c
CONST	ENDS
;	COMDAT symtable_visit_alias
_TEXT	SEGMENT
st$ = 64
a$ = 72
symtable_visit_alias PROC				; COMDAT

; 1562 : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1563 :     /* Compute store_name, the name actually bound by the import
; 1564 :        operation.  It is different than a->name when a->name is a
; 1565 :        dotted package name (e.g. spam.eggs)
; 1566 :     */
; 1567 :     PyObject *store_name;
; 1568 :     PyObject *name = (a->asname == NULL) ? a->name : a->asname;

  0000a	48 8b 5a 08	 mov	 rbx, QWORD PTR [rdx+8]
  0000e	48 8b e9	 mov	 rbp, rcx
  00011	48 85 db	 test	 rbx, rbx
  00014	75 03		 jne	 SHORT $LN9@symtable_v@3
  00016	48 8b 1a	 mov	 rbx, QWORD PTR [rdx]
$LN9@symtable_v@3:

; 1569 :     Py_ssize_t dot = PyUnicode_FindChar(name, '.', 0,
; 1570 :                                         PyUnicode_GET_LENGTH(name), 1);

  00019	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  0001d	45 33 c0	 xor	 r8d, r8d
  00020	48 8b cb	 mov	 rcx, rbx
  00023	41 8d 50 2e	 lea	 edx, QWORD PTR [r8+46]
  00027	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0002c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00034	e8 00 00 00 00	 call	 PyUnicode_FindChar

; 1571 :     if (dot != -1) {

  00039	48 83 f8 ff	 cmp	 rax, -1
  0003d	74 25		 je	 SHORT $LN6@symtable_v@3

; 1572 :         store_name = PyUnicode_Substring(name, 0, dot);

  0003f	4c 8b c0	 mov	 r8, rax
  00042	33 d2		 xor	 edx, edx
  00044	48 8b cb	 mov	 rcx, rbx
  00047	e8 00 00 00 00	 call	 PyUnicode_Substring
  0004c	48 8b f0	 mov	 rsi, rax

; 1573 :         if (!store_name)

  0004f	48 85 c0	 test	 rax, rax
  00052	75 4e		 jne	 SHORT $LN12@symtable_v@3
  00054	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 1596 :         return 1;
; 1597 :     }
; 1598 : }

  00059	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
$LN6@symtable_v@3:

; 1574 :             return 0;
; 1575 :     }
; 1576 :     else {
; 1577 :         store_name = name;

  00064	48 8b f3	 mov	 rsi, rbx

; 1578 :         Py_INCREF(store_name);

  00067	e8 00 00 00 00	 call	 _Py_PXCTX
  0006c	85 c0		 test	 eax, eax
  0006e	75 32		 jne	 SHORT $LN12@symtable_v@3
  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0007e	4c 8b cb	 mov	 r9, rbx
  00081	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00087	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0008f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00094	85 c0		 test	 eax, eax
  00096	75 06		 jne	 SHORT $LN11@symtable_v@3
  00098	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0009c	74 04		 je	 SHORT $LN12@symtable_v@3
$LN11@symtable_v@3:
  0009e	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN12@symtable_v@3:

; 1579 :     }
; 1580 :     if (PyUnicode_CompareWithASCIIString(name, "*")) {

  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01NBENCBCI@?$CK?$AA@
  000a9	48 8b cb	 mov	 rcx, rbx
  000ac	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  000b1	85 c0		 test	 eax, eax
  000b3	74 2d		 je	 SHORT $LN3@symtable_v@3

; 1581 :         int r = symtable_add_def(st, store_name, DEF_IMPORT);

  000b5	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  000bb	48 8b d6	 mov	 rdx, rsi
  000be	48 8b cd	 mov	 rcx, rbp
  000c1	e8 00 00 00 00	 call	 symtable_add_def

; 1582 :         Py_DECREF(store_name);

  000c6	48 8b ce	 mov	 rcx, rsi
  000c9	8b d8		 mov	 ebx, eax
  000cb	e8 00 00 00 00	 call	 _Py_DecRef

; 1583 :         return r;

  000d0	8b c3		 mov	 eax, ebx
  000d2	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 1596 :         return 1;
; 1597 :     }
; 1598 : }

  000d7	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000dc	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e0	5d		 pop	 rbp
  000e1	c3		 ret	 0
$LN3@symtable_v@3:

; 1584 :     }
; 1585 :     else {
; 1586 :         if (st->st_cur->ste_type != ModuleBlock) {

  000e2	48 8b 45 08	 mov	 rax, QWORD PTR [rbp+8]
  000e6	83 b8 88 00 00
	00 02		 cmp	 DWORD PTR [rax+136], 2
  000ed	74 51		 je	 SHORT $LN1@symtable_v@3

; 1587 :             int lineno = st->st_cur->ste_lineno;
; 1588 :             int col_offset = st->st_cur->ste_col_offset;
; 1589 :             PyErr_SetString(PyExc_SyntaxError, IMPORT_STAR_WARNING);

  000ef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  000f6	8b 98 9c 00 00
	00		 mov	 ebx, DWORD PTR [rax+156]
  000fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@JHBDPOHA@import?5?$CK?5only?5allowed?5at?5module?5@
  00103	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00108	8b b8 98 00 00
	00		 mov	 edi, DWORD PTR [rax+152]
  0010e	e8 00 00 00 00	 call	 PyErr_SetString

; 1590 :             PyErr_SyntaxLocationEx(st->st_filename, lineno, col_offset);

  00113	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
  00117	44 8b c3	 mov	 r8d, ebx
  0011a	8b d7		 mov	 edx, edi
  0011c	e8 00 00 00 00	 call	 PyErr_SyntaxLocationEx

; 1591 :             Py_DECREF(store_name);

  00121	48 8b ce	 mov	 rcx, rsi
  00124	e8 00 00 00 00	 call	 _Py_DecRef
  00129	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 1592 :             return 0;

  0012e	33 c0		 xor	 eax, eax
  00130	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 1596 :         return 1;
; 1597 :     }
; 1598 : }

  00135	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0013a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0013e	5d		 pop	 rbp
  0013f	c3		 ret	 0
$LN1@symtable_v@3:

; 1593 :         }
; 1594 :         st->st_cur->ste_unoptimized |= OPT_IMPORT_STAR;

  00140	83 88 8c 00 00
	00 01		 or	 DWORD PTR [rax+140], 1

; 1595 :         Py_DECREF(store_name);

  00147	48 8b ce	 mov	 rcx, rsi
  0014a	e8 00 00 00 00	 call	 _Py_DecRef
  0014f	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 1596 :         return 1;
; 1597 :     }
; 1598 : }

  00154	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00159	b8 01 00 00 00	 mov	 eax, 1
  0015e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00162	5d		 pop	 rbp
  00163	c3		 ret	 0
symtable_visit_alias ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_keyword DD imagerel symtable_visit_keyword
	DD	imagerel symtable_visit_keyword+42
	DD	imagerel $unwind$symtable_visit_keyword
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_keyword DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT symtable_visit_keyword
_TEXT	SEGMENT
st$ = 48
k$ = 56
symtable_visit_keyword PROC				; COMDAT

; 1613 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1614 :     VISIT(st, expr, k->value);

  00006	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	e8 00 00 00 00	 call	 symtable_visit_expr
  00012	85 c0		 test	 eax, eax
  00014	75 09		 jne	 SHORT $LN1@symtable_v@4
  00016	ff 4b 48	 dec	 DWORD PTR [rbx+72]

; 1616 : }

  00019	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001d	5b		 pop	 rbx
  0001e	c3		 ret	 0
$LN1@symtable_v@4:

; 1615 :     return 1;

  0001f	b8 01 00 00 00	 mov	 eax, 1

; 1616 : }

  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5b		 pop	 rbx
  00029	c3		 ret	 0
symtable_visit_keyword ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_slice DD imagerel symtable_visit_slice
	DD	imagerel symtable_visit_slice+217
	DD	imagerel $unwind$symtable_visit_slice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_slice DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT symtable_visit_slice
_TEXT	SEGMENT
st$ = 48
s$ = 56
symtable_visit_slice PROC				; COMDAT

; 1621 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b d9	 mov	 rbx, rcx

; 1622 :     switch (s->kind) {

  00017	8b 0a		 mov	 ecx, DWORD PTR [rdx]
  00019	48 8b fa	 mov	 rdi, rdx
  0001c	ff c9		 dec	 ecx
  0001e	74 60		 je	 SHORT $LN14@symtable_v@5
  00020	ff c9		 dec	 ecx
  00022	74 26		 je	 SHORT $LN7@symtable_v@5
  00024	ff c9		 dec	 ecx
  00026	0f 85 93 00 00
	00		 jne	 $LN8@symtable_v@5

; 1633 :         break;
; 1634 :     case Index_kind:
; 1635 :         VISIT(st, expr, s->v.Index.value)

  0002c	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  00030	48 8b cb	 mov	 rcx, rbx
  00033	e8 00 00 00 00	 call	 symtable_visit_expr
  00038	85 c0		 test	 eax, eax
  0003a	0f 85 7f 00 00
	00		 jne	 $LN8@symtable_v@5
$LN23@symtable_v@5:
  00040	ff 4b 48	 dec	 DWORD PTR [rbx+72]
  00043	33 c0		 xor	 eax, eax
  00045	e9 7a 00 00 00	 jmp	 $LN17@symtable_v@5
$LN7@symtable_v@5:

; 1630 :         break;
; 1631 :     case ExtSlice_kind:
; 1632 :         VISIT_SEQ(st, slice, s->v.ExtSlice.dims)

  0004a	48 8b 6a 08	 mov	 rbp, QWORD PTR [rdx+8]
  0004e	33 ff		 xor	 edi, edi
  00050	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
$LL6@symtable_v@5:
  00054	48 85 ed	 test	 rbp, rbp
  00057	75 04		 jne	 SHORT $LN19@symtable_v@5
  00059	33 c9		 xor	 ecx, ecx
  0005b	eb 04		 jmp	 SHORT $LN20@symtable_v@5
$LN19@symtable_v@5:
  0005d	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN20@symtable_v@5:
  00061	48 63 c7	 movsxd	 rax, edi
  00064	48 3b c1	 cmp	 rax, rcx
  00067	7d 56		 jge	 SHORT $LN8@symtable_v@5
  00069	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  0006c	48 8b cb	 mov	 rcx, rbx
  0006f	e8 00 00 00 00	 call	 symtable_visit_slice
  00074	85 c0		 test	 eax, eax
  00076	74 c8		 je	 SHORT $LN23@symtable_v@5
  00078	ff c7		 inc	 edi
  0007a	48 83 c6 08	 add	 rsi, 8
  0007e	eb d4		 jmp	 SHORT $LL6@symtable_v@5
$LN14@symtable_v@5:

; 1623 :     case Slice_kind:
; 1624 :         if (s->v.Slice.lower)

  00080	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  00084	48 85 d2	 test	 rdx, rdx
  00087	74 0c		 je	 SHORT $LN12@symtable_v@5

; 1625 :             VISIT(st, expr, s->v.Slice.lower)

  00089	48 8b cb	 mov	 rcx, rbx
  0008c	e8 00 00 00 00	 call	 symtable_visit_expr
  00091	85 c0		 test	 eax, eax
  00093	74 ab		 je	 SHORT $LN23@symtable_v@5
$LN12@symtable_v@5:

; 1626 :         if (s->v.Slice.upper)

  00095	48 8b 57 10	 mov	 rdx, QWORD PTR [rdi+16]
  00099	48 85 d2	 test	 rdx, rdx
  0009c	74 0c		 je	 SHORT $LN10@symtable_v@5

; 1627 :             VISIT(st, expr, s->v.Slice.upper)

  0009e	48 8b cb	 mov	 rcx, rbx
  000a1	e8 00 00 00 00	 call	 symtable_visit_expr
  000a6	85 c0		 test	 eax, eax
  000a8	74 96		 je	 SHORT $LN23@symtable_v@5
$LN10@symtable_v@5:

; 1628 :         if (s->v.Slice.step)

  000aa	48 8b 57 18	 mov	 rdx, QWORD PTR [rdi+24]
  000ae	48 85 d2	 test	 rdx, rdx
  000b1	74 0c		 je	 SHORT $LN8@symtable_v@5

; 1629 :             VISIT(st, expr, s->v.Slice.step)

  000b3	48 8b cb	 mov	 rcx, rbx
  000b6	e8 00 00 00 00	 call	 symtable_visit_expr
  000bb	85 c0		 test	 eax, eax
  000bd	74 81		 je	 SHORT $LN23@symtable_v@5
$LN8@symtable_v@5:

; 1636 :         break;
; 1637 :     }
; 1638 :     return 1;

  000bf	b8 01 00 00 00	 mov	 eax, 1
$LN17@symtable_v@5:

; 1639 : }

  000c4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c9	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000ce	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000d3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d7	5f		 pop	 rdi
  000d8	c3		 ret	 0
symtable_visit_slice ENDP
_TEXT	ENDS
PUBLIC	??_C@_07BNCCIHDG@genexpr?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_genexp DD imagerel symtable_visit_genexp
	DD	imagerel symtable_visit_genexp+94
	DD	imagerel $unwind$symtable_visit_genexp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_genexp DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_07BNCCIHDG@genexpr?$AA@
CONST	SEGMENT
??_C@_07BNCCIHDG@genexpr?$AA@ DB 'genexpr', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT symtable_visit_genexp
_TEXT	SEGMENT
st$ = 64
e$ = 72
symtable_visit_genexp PROC				; COMDAT

; 1680 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1681 :     return symtable_handle_comprehension(st, e, GET_IDENTIFIER(genexpr),
; 1682 :                                          e->v.GeneratorExp.generators,
; 1683 :                                          e->v.GeneratorExp.elt, NULL);

  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR genexpr
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f9	 mov	 rdi, rcx
  00017	48 85 c0	 test	 rax, rax
  0001a	75 13		 jne	 SHORT $LN4@symtable_v@6
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07BNCCIHDG@genexpr?$AA@
  00023	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00028	48 89 05 00 00
	00 00		 mov	 QWORD PTR genexpr, rax
$LN4@symtable_v@6:
  0002f	4c 8b 43 08	 mov	 r8, QWORD PTR [rbx+8]
  00033	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  00037	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00040	4c 89 44 24 20	 mov	 QWORD PTR [rsp+32], r8
  00045	48 8b d3	 mov	 rdx, rbx
  00048	48 8b cf	 mov	 rcx, rdi
  0004b	4c 8b c0	 mov	 r8, rax
  0004e	e8 00 00 00 00	 call	 symtable_handle_comprehension

; 1684 : }

  00053	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00058	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
symtable_visit_genexp ENDP
_TEXT	ENDS
PUBLIC	??_C@_08PDNBGMFN@listcomp?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_listcomp DD imagerel symtable_visit_listcomp
	DD	imagerel symtable_visit_listcomp+94
	DD	imagerel $unwind$symtable_visit_listcomp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_listcomp DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_08PDNBGMFN@listcomp?$AA@
CONST	SEGMENT
??_C@_08PDNBGMFN@listcomp?$AA@ DB 'listcomp', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT symtable_visit_listcomp
_TEXT	SEGMENT
st$ = 64
e$ = 72
symtable_visit_listcomp PROC				; COMDAT

; 1688 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1689 :     return symtable_handle_comprehension(st, e, GET_IDENTIFIER(listcomp),
; 1690 :                                          e->v.ListComp.generators,
; 1691 :                                          e->v.ListComp.elt, NULL);

  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR listcomp
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f9	 mov	 rdi, rcx
  00017	48 85 c0	 test	 rax, rax
  0001a	75 13		 jne	 SHORT $LN4@symtable_v@7
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08PDNBGMFN@listcomp?$AA@
  00023	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00028	48 89 05 00 00
	00 00		 mov	 QWORD PTR listcomp, rax
$LN4@symtable_v@7:
  0002f	4c 8b 43 08	 mov	 r8, QWORD PTR [rbx+8]
  00033	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  00037	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00040	4c 89 44 24 20	 mov	 QWORD PTR [rsp+32], r8
  00045	48 8b d3	 mov	 rdx, rbx
  00048	48 8b cf	 mov	 rcx, rdi
  0004b	4c 8b c0	 mov	 r8, rax
  0004e	e8 00 00 00 00	 call	 symtable_handle_comprehension

; 1692 : }

  00053	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00058	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
symtable_visit_listcomp ENDP
_TEXT	ENDS
PUBLIC	??_C@_07CDNIFBDN@setcomp?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_setcomp DD imagerel symtable_visit_setcomp
	DD	imagerel symtable_visit_setcomp+94
	DD	imagerel $unwind$symtable_visit_setcomp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_setcomp DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_07CDNIFBDN@setcomp?$AA@
CONST	SEGMENT
??_C@_07CDNIFBDN@setcomp?$AA@ DB 'setcomp', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT symtable_visit_setcomp
_TEXT	SEGMENT
st$ = 64
e$ = 72
symtable_visit_setcomp PROC				; COMDAT

; 1696 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1697 :     return symtable_handle_comprehension(st, e, GET_IDENTIFIER(setcomp),
; 1698 :                                          e->v.SetComp.generators,
; 1699 :                                          e->v.SetComp.elt, NULL);

  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR setcomp
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f9	 mov	 rdi, rcx
  00017	48 85 c0	 test	 rax, rax
  0001a	75 13		 jne	 SHORT $LN4@symtable_v@8
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07CDNIFBDN@setcomp?$AA@
  00023	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00028	48 89 05 00 00
	00 00		 mov	 QWORD PTR setcomp, rax
$LN4@symtable_v@8:
  0002f	4c 8b 43 08	 mov	 r8, QWORD PTR [rbx+8]
  00033	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  00037	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00040	4c 89 44 24 20	 mov	 QWORD PTR [rsp+32], r8
  00045	48 8b d3	 mov	 rdx, rbx
  00048	48 8b cf	 mov	 rcx, rdi
  0004b	4c 8b c0	 mov	 r8, rax
  0004e	e8 00 00 00 00	 call	 symtable_handle_comprehension

; 1700 : }

  00053	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00058	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
symtable_visit_setcomp ENDP
_TEXT	ENDS
EXTRN	PyMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_new DD imagerel symtable_new
	DD	imagerel symtable_new+30
	DD	imagerel $unwind$symtable_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$symtable_new DD imagerel symtable_new+30
	DD	imagerel symtable_new+96
	DD	imagerel $chain$0$symtable_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$symtable_new DD imagerel symtable_new+96
	DD	imagerel symtable_new+117
	DD	imagerel $chain$2$symtable_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$symtable_new DD 020021H
	DD	067400H
	DD	imagerel symtable_new
	DD	imagerel symtable_new+30
	DD	imagerel $unwind$symtable_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$symtable_new DD 020521H
	DD	067405H
	DD	imagerel symtable_new
	DD	imagerel symtable_new+30
	DD	imagerel $unwind$symtable_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_new DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT symtable_new
_TEXT	SEGMENT
symtable_new PROC					; COMDAT

; 201  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 202  :     struct symtable *st;
; 203  : 
; 204  :     st = (struct symtable *)PyMem_Malloc(sizeof(struct symtable));

  00006	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  0000b	e8 00 00 00 00	 call	 PyMem_Malloc
  00010	48 8b d8	 mov	 rbx, rax

; 205  :     if (st == NULL)

  00013	48 85 c0	 test	 rax, rax
  00016	75 06		 jne	 SHORT $LN3@symtable_n@2

; 221  : }

  00018	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001c	5b		 pop	 rbx
  0001d	c3		 ret	 0
$LN3@symtable_n@2:
  0001e	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi

; 206  :         return NULL;
; 207  : 
; 208  :     st->st_filename = NULL;

  00023	33 ff		 xor	 edi, edi

; 209  :     st->st_blocks = NULL;
; 210  : 
; 211  :     if ((st->st_stack = PyList_New(0)) == NULL)

  00025	33 c9		 xor	 ecx, ecx
  00027	48 89 38	 mov	 QWORD PTR [rax], rdi
  0002a	48 89 78 18	 mov	 QWORD PTR [rax+24], rdi
  0002e	e8 00 00 00 00	 call	 PyList_New
  00033	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax
  00037	48 85 c0	 test	 rax, rax
  0003a	74 24		 je	 SHORT $fail$21673

; 212  :         goto fail;
; 213  :     if ((st->st_blocks = PyDict_New()) == NULL)

  0003c	e8 00 00 00 00	 call	 PyDict_New
  00041	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax
  00045	48 85 c0	 test	 rax, rax
  00048	74 16		 je	 SHORT $fail$21673

; 214  :         goto fail;
; 215  :     st->st_cur = NULL;

  0004a	48 89 7b 08	 mov	 QWORD PTR [rbx+8], rdi

; 216  :     st->st_private = NULL;

  0004e	48 89 7b 38	 mov	 QWORD PTR [rbx+56], rdi
  00052	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 217  :     return st;

  00057	48 8b c3	 mov	 rax, rbx

; 221  : }

  0005a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005e	5b		 pop	 rbx
  0005f	c3		 ret	 0
$fail$21673:

; 218  :  fail:
; 219  :     PySymtable_Free(st);

  00060	48 8b cb	 mov	 rcx, rbx
  00063	e8 00 00 00 00	 call	 PySymtable_Free
  00068	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 220  :     return NULL;

  0006d	33 c0		 xor	 eax, eax

; 221  : }

  0006f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00073	5b		 pop	 rbx
  00074	c3		 ret	 0
symtable_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_09LFGACEKG@__class__?$AA@			; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$analyze_block DD imagerel analyze_block
	DD	imagerel analyze_block+73
	DD	imagerel $unwind$analyze_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$analyze_block DD imagerel analyze_block+73
	DD	imagerel analyze_block+1017
	DD	imagerel $chain$0$analyze_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$analyze_block DD imagerel analyze_block+1017
	DD	imagerel analyze_block+1550
	DD	imagerel $chain$1$analyze_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$analyze_block DD 021H
	DD	imagerel analyze_block
	DD	imagerel analyze_block+73
	DD	imagerel $unwind$analyze_block
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$analyze_block DD 020821H
	DD	016c408H
	DD	imagerel analyze_block
	DD	imagerel analyze_block+73
	DD	imagerel $unwind$analyze_block
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$analyze_block DD 081d01H
	DD	0f019d21dH
	DD	0d015e017H
	DD	060127013H
	DD	030105011H
xdata	ENDS
;	COMDAT ??_C@_09LFGACEKG@__class__?$AA@
CONST	SEGMENT
??_C@_09LFGACEKG@__class__?$AA@ DB '__class__', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\symtable.c
CONST	ENDS
;	COMDAT analyze_block
_TEXT	SEGMENT
local$1$ = 64
v$ = 72
name$ = 80
pos$ = 88
tv704 = 96
entry$1$ = 104
ste$ = 176
bound$ = 184
free$ = 192
global$ = 200
analyze_block PROC					; COMDAT

; 686  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	53		 push	 rbx
  00010	55		 push	 rbp
  00011	56		 push	 rsi
  00012	57		 push	 rdi
  00013	41 55		 push	 r13
  00015	41 56		 push	 r14
  00017	41 57		 push	 r15
  00019	48 83 ec 70	 sub	 rsp, 112		; 00000070H

; 687  :     PyObject *name, *v, *local = NULL, *scopes = NULL, *newbound = NULL;

  0001d	33 ff		 xor	 edi, edi
  0001f	48 8b d9	 mov	 rbx, rcx

; 688  :     PyObject *newglobal = NULL, *newfree = NULL, *allfree = NULL;
; 689  :     PyObject *temp;
; 690  :     int i, success = 0;
; 691  :     Py_ssize_t pos = 0;
; 692  : 
; 693  :     local = PySet_New(NULL);  /* collect new names bound in block */

  00022	33 c9		 xor	 ecx, ecx
  00024	8b ef		 mov	 ebp, edi
  00026	44 8b ef	 mov	 r13d, edi
  00029	8b f7		 mov	 esi, edi
  0002b	44 8b f7	 mov	 r14d, edi
  0002e	48 89 7c 24 58	 mov	 QWORD PTR pos$[rsp], rdi
  00033	e8 00 00 00 00	 call	 PySet_New
  00038	4c 8b f8	 mov	 r15, rax
  0003b	48 89 44 24 40	 mov	 QWORD PTR local$1$[rsp], rax

; 694  :     if (!local)

  00040	48 85 c0	 test	 rax, rax
  00043	0f 84 b4 05 00
	00		 je	 $LN141@analyze_bl

; 695  :         goto error;
; 696  :     scopes = PyDict_New();  /* collect scopes defined for each name */

  00049	4c 89 a4 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], r12
  00051	e8 00 00 00 00	 call	 PyDict_New
  00056	4c 8b e0	 mov	 r12, rax

; 697  :     if (!scopes)

  00059	48 85 c0	 test	 rax, rax
  0005c	0f 84 86 03 00
	00		 je	 $LN24@analyze_bl

; 698  :         goto error;
; 699  : 
; 700  :     /* Allocate new global and bound variable dictionaries.  These
; 701  :        dictionaries hold the names visible in nested blocks.  For
; 702  :        ClassBlocks, the bound and global names are initialized
; 703  :        before analyzing names, because class bindings aren't
; 704  :        visible in methods.  For other blocks, they are initialized
; 705  :        after names are analyzed.
; 706  :      */
; 707  : 
; 708  :     /* TODO(jhylton): Package these dicts in a struct so that we
; 709  :        can write reasonable helper functions?
; 710  :     */
; 711  :     newglobal = PySet_New(NULL);

  00062	33 c9		 xor	 ecx, ecx
  00064	e8 00 00 00 00	 call	 PySet_New
  00069	4c 8b e8	 mov	 r13, rax

; 712  :     if (!newglobal)

  0006c	48 85 c0	 test	 rax, rax
  0006f	0f 84 0b 03 00
	00		 je	 $error$21996

; 713  :         goto error;
; 714  :     newfree = PySet_New(NULL);

  00075	33 c9		 xor	 ecx, ecx
  00077	e8 00 00 00 00	 call	 PySet_New
  0007c	48 8b f0	 mov	 rsi, rax

; 715  :     if (!newfree)

  0007f	48 85 c0	 test	 rax, rax
  00082	0f 84 f8 02 00
	00		 je	 $error$21996

; 716  :         goto error;
; 717  :     newbound = PySet_New(NULL);

  00088	33 c9		 xor	 ecx, ecx
  0008a	e8 00 00 00 00	 call	 PySet_New
  0008f	48 8b e8	 mov	 rbp, rax

; 718  :     if (!newbound)

  00092	48 85 c0	 test	 rax, rax
  00095	0f 84 e5 02 00
	00		 je	 $error$21996

; 719  :         goto error;
; 720  : 
; 721  :     /* Class namespace has no effect on names visible in
; 722  :        nested functions, so populate the global and bound
; 723  :        sets to be passed to child blocks before analyzing
; 724  :        this one.
; 725  :      */
; 726  :     if (ste->ste_type == ClassBlock) {

  0009b	83 bb 88 00 00
	00 01		 cmp	 DWORD PTR [rbx+136], 1
  000a2	75 4a		 jne	 SHORT $LN131@analyze_bl

; 727  :         /* Pass down known globals */
; 728  :         temp = PyNumber_InPlaceOr(newglobal, global);

  000a4	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR global$[rsp]
  000ac	49 8b cd	 mov	 rcx, r13
  000af	e8 00 00 00 00	 call	 PyNumber_InPlaceOr

; 729  :         if (!temp)

  000b4	48 85 c0	 test	 rax, rax
  000b7	0f 84 c3 02 00
	00		 je	 $error$21996

; 730  :             goto error;
; 731  :         Py_DECREF(temp);

  000bd	48 8b c8	 mov	 rcx, rax
  000c0	e8 00 00 00 00	 call	 _Py_DecRef

; 732  :         /* Pass down previously bound symbols */
; 733  :         if (bound) {

  000c5	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR bound$[rsp]
  000cd	48 85 c0	 test	 rax, rax
  000d0	74 1c		 je	 SHORT $LN131@analyze_bl

; 734  :             temp = PyNumber_InPlaceOr(newbound, bound);

  000d2	48 8b d0	 mov	 rdx, rax
  000d5	48 8b cd	 mov	 rcx, rbp
  000d8	e8 00 00 00 00	 call	 PyNumber_InPlaceOr

; 735  :             if (!temp)

  000dd	48 85 c0	 test	 rax, rax
  000e0	0f 84 9a 02 00
	00		 je	 $error$21996

; 736  :                 goto error;
; 737  :             Py_DECREF(temp);

  000e6	48 8b c8	 mov	 rcx, rax
  000e9	e8 00 00 00 00	 call	 _Py_DecRef
$LN131@analyze_bl:

; 738  :         }
; 739  :     }
; 740  : 
; 741  :     while (PyDict_Next(ste->ste_symbols, &pos, &name, &v)) {

  000ee	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  000f2	4c 8d 4c 24 48	 lea	 r9, QWORD PTR v$[rsp]
  000f7	4c 8d 44 24 50	 lea	 r8, QWORD PTR name$[rsp]
  000fc	48 8d 54 24 58	 lea	 rdx, QWORD PTR pos$[rsp]
  00101	e8 00 00 00 00	 call	 PyDict_Next
  00106	85 c0		 test	 eax, eax
  00108	74 73		 je	 SHORT $LN50@analyze_bl
  0010a	66 0f 1f 44 00
	00		 npad	 6
$LL51@analyze_bl:

; 742  :         long flags = PyLong_AS_LONG(v);

  00110	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$[rsp]
  00115	e8 00 00 00 00	 call	 PyLong_AsLong

; 743  :         if (!analyze_name(ste, scopes, name, flags,
; 744  :                           bound, local, free, global))

  0011a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR global$[rsp]
  00122	4c 8b 44 24 50	 mov	 r8, QWORD PTR name$[rsp]
  00127	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0012c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR free$[rsp]
  00134	44 8b c8	 mov	 r9d, eax
  00137	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0013c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR bound$[rsp]
  00144	4c 89 7c 24 28	 mov	 QWORD PTR [rsp+40], r15
  00149	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0014e	48 8b cb	 mov	 rcx, rbx
  00151	49 8b d4	 mov	 rdx, r12
  00154	e8 00 00 00 00	 call	 analyze_name
  00159	85 c0		 test	 eax, eax
  0015b	0f 84 1f 02 00
	00		 je	 $error$21996

; 738  :         }
; 739  :     }
; 740  : 
; 741  :     while (PyDict_Next(ste->ste_symbols, &pos, &name, &v)) {

  00161	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00165	4c 8d 4c 24 48	 lea	 r9, QWORD PTR v$[rsp]
  0016a	4c 8d 44 24 50	 lea	 r8, QWORD PTR name$[rsp]
  0016f	48 8d 54 24 58	 lea	 rdx, QWORD PTR pos$[rsp]
  00174	e8 00 00 00 00	 call	 PyDict_Next
  00179	85 c0		 test	 eax, eax
  0017b	75 93		 jne	 SHORT $LL51@analyze_bl
$LN50@analyze_bl:

; 745  :             goto error;
; 746  :     }
; 747  : 
; 748  :     /* Populate global and bound sets to be passed to children. */
; 749  :     if (ste->ste_type != ClassBlock) {

  0017d	8b 83 88 00 00
	00		 mov	 eax, DWORD PTR [rbx+136]
  00183	83 f8 01	 cmp	 eax, 1
  00186	74 6c		 je	 SHORT $LN48@analyze_bl

; 750  :         /* Add function locals to bound set */
; 751  :         if (ste->ste_type == FunctionBlock) {

  00188	85 c0		 test	 eax, eax
  0018a	75 1c		 jne	 SHORT $LN47@analyze_bl

; 752  :             temp = PyNumber_InPlaceOr(newbound, local);

  0018c	49 8b d7	 mov	 rdx, r15
  0018f	48 8b cd	 mov	 rcx, rbp
  00192	e8 00 00 00 00	 call	 PyNumber_InPlaceOr

; 753  :             if (!temp)

  00197	48 85 c0	 test	 rax, rax
  0019a	0f 84 e0 01 00
	00		 je	 $error$21996

; 754  :                 goto error;
; 755  :             Py_DECREF(temp);

  001a0	48 8b c8	 mov	 rcx, rax
  001a3	e8 00 00 00 00	 call	 _Py_DecRef
$LN47@analyze_bl:

; 756  :         }
; 757  :         /* Pass down previously bound symbols */
; 758  :         if (bound) {

  001a8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR bound$[rsp]
  001b0	48 85 c0	 test	 rax, rax
  001b3	74 1c		 je	 SHORT $LN45@analyze_bl

; 759  :             temp = PyNumber_InPlaceOr(newbound, bound);

  001b5	48 8b d0	 mov	 rdx, rax
  001b8	48 8b cd	 mov	 rcx, rbp
  001bb	e8 00 00 00 00	 call	 PyNumber_InPlaceOr

; 760  :             if (!temp)

  001c0	48 85 c0	 test	 rax, rax
  001c3	0f 84 b7 01 00
	00		 je	 $error$21996

; 761  :                 goto error;
; 762  :             Py_DECREF(temp);

  001c9	48 8b c8	 mov	 rcx, rax
  001cc	e8 00 00 00 00	 call	 _Py_DecRef
$LN45@analyze_bl:

; 763  :         }
; 764  :         /* Pass down known globals */
; 765  :         temp = PyNumber_InPlaceOr(newglobal, global);

  001d1	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR global$[rsp]
  001d9	49 8b cd	 mov	 rcx, r13
  001dc	e8 00 00 00 00	 call	 PyNumber_InPlaceOr

; 766  :         if (!temp)

  001e1	48 85 c0	 test	 rax, rax
  001e4	0f 84 96 01 00
	00		 je	 $error$21996

; 767  :             goto error;
; 768  :         Py_DECREF(temp);

  001ea	48 8b c8	 mov	 rcx, rax
  001ed	e8 00 00 00 00	 call	 _Py_DecRef

; 769  :     }
; 770  :     else {

  001f2	eb 3b		 jmp	 SHORT $LN40@analyze_bl
$LN48@analyze_bl:

; 771  :         /* Special-case __class__ */
; 772  :         if (!GET_IDENTIFIER(__class__))

  001f4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __class__
  001fb	48 85 c0	 test	 rax, rax
  001fe	75 1c		 jne	 SHORT $LN136@analyze_bl
  00200	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09LFGACEKG@__class__?$AA@
  00207	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0020c	48 89 05 00 00
	00 00		 mov	 QWORD PTR __class__, rax
  00213	48 85 c0	 test	 rax, rax
  00216	0f 84 64 01 00
	00		 je	 $error$21996
$LN136@analyze_bl:

; 773  :             goto error;
; 774  :         assert(PySet_Contains(local, __class__) == 1);
; 775  :         if (PySet_Add(newbound, __class__) < 0)

  0021c	48 8b d0	 mov	 rdx, rax
  0021f	48 8b cd	 mov	 rcx, rbp
  00222	e8 00 00 00 00	 call	 PySet_Add
  00227	85 c0		 test	 eax, eax
  00229	0f 88 51 01 00
	00		 js	 $error$21996
$LN40@analyze_bl:

; 776  :             goto error;
; 777  :     }
; 778  : 
; 779  :     /* Recursively call analyze_child_block() on each child block.
; 780  : 
; 781  :        newbound, newglobal now contain the names visible in
; 782  :        nested blocks.  The free variables in the children will
; 783  :        be collected in allfree.
; 784  :     */
; 785  :     allfree = PySet_New(NULL);

  0022f	33 c9		 xor	 ecx, ecx
  00231	e8 00 00 00 00	 call	 PySet_New
  00236	4c 8b f0	 mov	 r14, rax

; 786  :     if (!allfree)

  00239	48 85 c0	 test	 rax, rax
  0023c	0f 84 3e 01 00
	00		 je	 $error$21996

; 787  :         goto error;
; 788  :     for (i = 0; i < PyList_GET_SIZE(ste->ste_children); ++i) {

  00242	48 8b 83 80 00
	00 00		 mov	 rax, QWORD PTR [rbx+128]
  00249	44 8b ff	 mov	 r15d, edi
  0024c	48 39 78 60	 cmp	 QWORD PTR [rax+96], rdi
  00250	7e 7b		 jle	 SHORT $LN36@analyze_bl
  00252	48 8b d7	 mov	 rdx, rdi
  00255	48 89 54 24 60	 mov	 QWORD PTR tv704[rsp], rdx
  0025a	66 0f 1f 44 00
	00		 npad	 6
$LL38@analyze_bl:

; 789  :         PyObject *c = PyList_GET_ITEM(ste->ste_children, i);
; 790  :         PySTEntryObject* entry;
; 791  :         assert(c && PySTEntry_Check(c));
; 792  :         entry = (PySTEntryObject*)c;

  00260	48 8b 83 80 00
	00 00		 mov	 rax, QWORD PTR [rbx+128]

; 793  :         if (!analyze_child_block(entry, newbound, newfree, newglobal,
; 794  :                                  allfree))

  00267	4d 8b cd	 mov	 r9, r13
  0026a	4c 8b c6	 mov	 r8, rsi
  0026d	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00271	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  00276	48 8b 04 0a	 mov	 rax, QWORD PTR [rdx+rcx]
  0027a	48 8b d5	 mov	 rdx, rbp
  0027d	48 8b c8	 mov	 rcx, rax
  00280	48 89 44 24 68	 mov	 QWORD PTR entry$1$[rsp], rax
  00285	e8 00 00 00 00	 call	 analyze_child_block
  0028a	85 c0		 test	 eax, eax
  0028c	0f 84 e9 00 00
	00		 je	 $LN148@analyze_bl

; 795  :             goto error;
; 796  :         /* Check if any children have free variables */
; 797  :         if (entry->ste_free || entry->ste_child_free)

  00292	48 8b 44 24 68	 mov	 rax, QWORD PTR entry$1$[rsp]
  00297	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0029d	a8 01		 test	 al, 1
  0029f	75 04		 jne	 SHORT $LN33@analyze_bl
  002a1	a8 02		 test	 al, 2
  002a3	74 07		 je	 SHORT $LN37@analyze_bl
$LN33@analyze_bl:

; 798  :             ste->ste_child_free = 1;

  002a5	83 8b 94 00 00
	00 02		 or	 DWORD PTR [rbx+148], 2
$LN37@analyze_bl:

; 787  :         goto error;
; 788  :     for (i = 0; i < PyList_GET_SIZE(ste->ste_children); ++i) {

  002ac	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv704[rsp]
  002b1	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  002b8	41 ff c7	 inc	 r15d
  002bb	48 83 c2 08	 add	 rdx, 8
  002bf	49 63 c7	 movsxd	 rax, r15d
  002c2	48 89 54 24 60	 mov	 QWORD PTR tv704[rsp], rdx
  002c7	48 3b 41 60	 cmp	 rax, QWORD PTR [rcx+96]
  002cb	7c 93		 jl	 SHORT $LL38@analyze_bl
$LN36@analyze_bl:

; 799  :     }
; 800  : 
; 801  :     temp = PyNumber_InPlaceOr(newfree, allfree);

  002cd	49 8b d6	 mov	 rdx, r14
  002d0	48 8b ce	 mov	 rcx, rsi
  002d3	e8 00 00 00 00	 call	 PyNumber_InPlaceOr

; 802  :     if (!temp)

  002d8	48 85 c0	 test	 rax, rax
  002db	0f 84 9a 00 00
	00		 je	 $LN148@analyze_bl

; 803  :         goto error;
; 804  :     Py_DECREF(temp);

  002e1	48 8b c8	 mov	 rcx, rax
  002e4	e8 00 00 00 00	 call	 _Py_DecRef

; 805  : 
; 806  :     /* Check if any local variables must be converted to cell variables */
; 807  :     if (ste->ste_type == FunctionBlock && !analyze_cells(scopes, newfree,
; 808  :                                                          NULL))

  002e9	39 bb 88 00 00
	00		 cmp	 DWORD PTR [rbx+136], edi
  002ef	75 12		 jne	 SHORT $LN31@analyze_bl
  002f1	45 33 c0	 xor	 r8d, r8d
  002f4	48 8b d6	 mov	 rdx, rsi
  002f7	49 8b cc	 mov	 rcx, r12
  002fa	e8 00 00 00 00	 call	 analyze_cells
  002ff	85 c0		 test	 eax, eax
  00301	74 78		 je	 SHORT $LN148@analyze_bl
$LN31@analyze_bl:

; 809  :         goto error;
; 810  :     else if (ste->ste_type == ClassBlock && !analyze_cells(scopes, newfree,
; 811  :                                                            "__class__"))

  00303	83 bb 88 00 00
	00 01		 cmp	 DWORD PTR [rbx+136], 1
  0030a	75 16		 jne	 SHORT $LN29@analyze_bl
  0030c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09LFGACEKG@__class__?$AA@
  00313	48 8b d6	 mov	 rdx, rsi
  00316	49 8b cc	 mov	 rcx, r12
  00319	e8 00 00 00 00	 call	 analyze_cells
  0031e	85 c0		 test	 eax, eax
  00320	74 59		 je	 SHORT $LN148@analyze_bl
$LN29@analyze_bl:

; 812  :         goto error;
; 813  :     /* Records the results of the analysis in the symbol table entry */
; 814  :     if (!update_symbols(ste->ste_symbols, scopes, bound, newfree,
; 815  :                         ste->ste_type == ClassBlock))

  00322	83 bb 88 00 00
	00 01		 cmp	 DWORD PTR [rbx+136], 1
  00329	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR bound$[rsp]
  00331	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00335	8b c7		 mov	 eax, edi
  00337	0f 94 c0	 sete	 al
  0033a	4c 8b ce	 mov	 r9, rsi
  0033d	49 8b d4	 mov	 rdx, r12
  00340	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00344	e8 00 00 00 00	 call	 update_symbols
  00349	85 c0		 test	 eax, eax
  0034b	74 2e		 je	 SHORT $LN148@analyze_bl

; 816  :         goto error;
; 817  :     if (!check_unoptimized(ste))

  0034d	48 8b cb	 mov	 rcx, rbx
  00350	e8 00 00 00 00	 call	 check_unoptimized
  00355	85 c0		 test	 eax, eax
  00357	74 22		 je	 SHORT $LN148@analyze_bl

; 818  :         goto error;
; 819  : 
; 820  :     temp = PyNumber_InPlaceOr(free, newfree);

  00359	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR free$[rsp]
  00361	48 8b d6	 mov	 rdx, rsi
  00364	e8 00 00 00 00	 call	 PyNumber_InPlaceOr

; 821  :     if (!temp)

  00369	48 85 c0	 test	 rax, rax
  0036c	74 0d		 je	 SHORT $LN148@analyze_bl

; 822  :         goto error;
; 823  :     Py_DECREF(temp);

  0036e	48 8b c8	 mov	 rcx, rax
  00371	e8 00 00 00 00	 call	 _Py_DecRef

; 824  :     success = 1;

  00376	bf 01 00 00 00	 mov	 edi, 1
$LN148@analyze_bl:

; 688  :     PyObject *newglobal = NULL, *newfree = NULL, *allfree = NULL;
; 689  :     PyObject *temp;
; 690  :     int i, success = 0;
; 691  :     Py_ssize_t pos = 0;
; 692  : 
; 693  :     local = PySet_New(NULL);  /* collect new names bound in block */

  0037b	4c 8b 7c 24 40	 mov	 r15, QWORD PTR local$1$[rsp]
$error$21996:

; 825  :  error:
; 826  :     Py_XDECREF(scopes);

  00380	e8 00 00 00 00	 call	 _Py_PXCTX
  00385	85 c0		 test	 eax, eax
  00387	75 5f		 jne	 SHORT $LN24@analyze_bl
  00389	49 8b 44 24 20	 mov	 rax, QWORD PTR [r12+32]
  0038e	a8 20		 test	 al, 32			; 00000020H
  00390	75 4e		 jne	 SHORT $LN69@analyze_bl
  00392	84 c0		 test	 al, al
  00394	78 4a		 js	 SHORT $LN69@analyze_bl
  00396	a8 02		 test	 al, 2
  00398	75 4e		 jne	 SHORT $LN24@analyze_bl
  0039a	49 ff 4c 24 50	 dec	 QWORD PTR [r12+80]
  0039f	75 47		 jne	 SHORT $LN24@analyze_bl
  003a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  003af	4d 8b cc	 mov	 r9, r12
  003b2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  003b8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003c0	e8 00 00 00 00	 call	 _PyParallel_Guard
  003c5	49 8b cc	 mov	 rcx, r12
  003c8	85 c0		 test	 eax, eax
  003ca	74 07		 je	 SHORT $LN74@analyze_bl
  003cc	e8 00 00 00 00	 call	 _Px_Dealloc
  003d1	eb 15		 jmp	 SHORT $LN24@analyze_bl
$LN74@analyze_bl:
  003d3	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]
  003d8	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003de	eb 08		 jmp	 SHORT $LN24@analyze_bl
$LN69@analyze_bl:
  003e0	49 8b cc	 mov	 rcx, r12
  003e3	e8 00 00 00 00	 call	 Px_DecRef
$LN24@analyze_bl:

; 827  :     Py_XDECREF(local);

  003e8	e8 00 00 00 00	 call	 _Py_PXCTX
  003ed	4c 8b a4 24 b0
	00 00 00	 mov	 r12, QWORD PTR [rsp+176]
  003f5	85 c0		 test	 eax, eax
  003f7	75 5c		 jne	 SHORT $LN20@analyze_bl
  003f9	49 8b 47 20	 mov	 rax, QWORD PTR [r15+32]
  003fd	a8 20		 test	 al, 32			; 00000020H
  003ff	75 4c		 jne	 SHORT $LN80@analyze_bl
  00401	84 c0		 test	 al, al
  00403	78 48		 js	 SHORT $LN80@analyze_bl
  00405	a8 02		 test	 al, 2
  00407	75 4c		 jne	 SHORT $LN20@analyze_bl
  00409	49 ff 4f 50	 dec	 QWORD PTR [r15+80]
  0040d	75 46		 jne	 SHORT $LN20@analyze_bl
  0040f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00416	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0041d	4d 8b cf	 mov	 r9, r15
  00420	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00426	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0042e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00433	49 8b cf	 mov	 rcx, r15
  00436	85 c0		 test	 eax, eax
  00438	74 07		 je	 SHORT $LN85@analyze_bl
  0043a	e8 00 00 00 00	 call	 _Px_Dealloc
  0043f	eb 14		 jmp	 SHORT $LN20@analyze_bl
$LN85@analyze_bl:
  00441	49 8b 47 58	 mov	 rax, QWORD PTR [r15+88]
  00445	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0044b	eb 08		 jmp	 SHORT $LN20@analyze_bl
$LN80@analyze_bl:
  0044d	49 8b cf	 mov	 rcx, r15
  00450	e8 00 00 00 00	 call	 Px_DecRef
$LN20@analyze_bl:

; 828  :     Py_XDECREF(newbound);

  00455	48 85 ed	 test	 rbp, rbp
  00458	74 65		 je	 SHORT $LN16@analyze_bl
  0045a	e8 00 00 00 00	 call	 _Py_PXCTX
  0045f	85 c0		 test	 eax, eax
  00461	75 5c		 jne	 SHORT $LN16@analyze_bl
  00463	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  00467	a8 20		 test	 al, 32			; 00000020H
  00469	75 4c		 jne	 SHORT $LN91@analyze_bl
  0046b	84 c0		 test	 al, al
  0046d	78 48		 js	 SHORT $LN91@analyze_bl
  0046f	a8 02		 test	 al, 2
  00471	75 4c		 jne	 SHORT $LN16@analyze_bl
  00473	48 ff 4d 50	 dec	 QWORD PTR [rbp+80]
  00477	75 46		 jne	 SHORT $LN16@analyze_bl
  00479	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00480	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00487	4c 8b cd	 mov	 r9, rbp
  0048a	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00490	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00498	e8 00 00 00 00	 call	 _PyParallel_Guard
  0049d	48 8b cd	 mov	 rcx, rbp
  004a0	85 c0		 test	 eax, eax
  004a2	74 07		 je	 SHORT $LN96@analyze_bl
  004a4	e8 00 00 00 00	 call	 _Px_Dealloc
  004a9	eb 14		 jmp	 SHORT $LN16@analyze_bl
$LN96@analyze_bl:
  004ab	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  004af	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  004b5	eb 08		 jmp	 SHORT $LN16@analyze_bl
$LN91@analyze_bl:
  004b7	48 8b cd	 mov	 rcx, rbp
  004ba	e8 00 00 00 00	 call	 Px_DecRef
$LN16@analyze_bl:

; 829  :     Py_XDECREF(newglobal);

  004bf	4d 85 ed	 test	 r13, r13
  004c2	74 65		 je	 SHORT $LN12@analyze_bl
  004c4	e8 00 00 00 00	 call	 _Py_PXCTX
  004c9	85 c0		 test	 eax, eax
  004cb	75 5c		 jne	 SHORT $LN12@analyze_bl
  004cd	49 8b 45 20	 mov	 rax, QWORD PTR [r13+32]
  004d1	a8 20		 test	 al, 32			; 00000020H
  004d3	75 4c		 jne	 SHORT $LN102@analyze_bl
  004d5	84 c0		 test	 al, al
  004d7	78 48		 js	 SHORT $LN102@analyze_bl
  004d9	a8 02		 test	 al, 2
  004db	75 4c		 jne	 SHORT $LN12@analyze_bl
  004dd	49 ff 4d 50	 dec	 QWORD PTR [r13+80]
  004e1	75 46		 jne	 SHORT $LN12@analyze_bl
  004e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  004ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  004f1	4d 8b cd	 mov	 r9, r13
  004f4	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  004fa	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00502	e8 00 00 00 00	 call	 _PyParallel_Guard
  00507	49 8b cd	 mov	 rcx, r13
  0050a	85 c0		 test	 eax, eax
  0050c	74 07		 je	 SHORT $LN107@analyze_bl
  0050e	e8 00 00 00 00	 call	 _Px_Dealloc
  00513	eb 14		 jmp	 SHORT $LN12@analyze_bl
$LN107@analyze_bl:
  00515	49 8b 45 58	 mov	 rax, QWORD PTR [r13+88]
  00519	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0051f	eb 08		 jmp	 SHORT $LN12@analyze_bl
$LN102@analyze_bl:
  00521	49 8b cd	 mov	 rcx, r13
  00524	e8 00 00 00 00	 call	 Px_DecRef
$LN12@analyze_bl:

; 830  :     Py_XDECREF(newfree);

  00529	48 85 f6	 test	 rsi, rsi
  0052c	74 65		 je	 SHORT $LN8@analyze_bl
  0052e	e8 00 00 00 00	 call	 _Py_PXCTX
  00533	85 c0		 test	 eax, eax
  00535	75 5c		 jne	 SHORT $LN8@analyze_bl
  00537	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0053b	a8 20		 test	 al, 32			; 00000020H
  0053d	75 4c		 jne	 SHORT $LN113@analyze_bl
  0053f	84 c0		 test	 al, al
  00541	78 48		 js	 SHORT $LN113@analyze_bl
  00543	a8 02		 test	 al, 2
  00545	75 4c		 jne	 SHORT $LN8@analyze_bl
  00547	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  0054b	75 46		 jne	 SHORT $LN8@analyze_bl
  0054d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00554	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0055b	4c 8b ce	 mov	 r9, rsi
  0055e	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00564	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0056c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00571	48 8b ce	 mov	 rcx, rsi
  00574	85 c0		 test	 eax, eax
  00576	74 07		 je	 SHORT $LN118@analyze_bl
  00578	e8 00 00 00 00	 call	 _Px_Dealloc
  0057d	eb 14		 jmp	 SHORT $LN8@analyze_bl
$LN118@analyze_bl:
  0057f	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  00583	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00589	eb 08		 jmp	 SHORT $LN8@analyze_bl
$LN113@analyze_bl:
  0058b	48 8b ce	 mov	 rcx, rsi
  0058e	e8 00 00 00 00	 call	 Px_DecRef
$LN8@analyze_bl:

; 831  :     Py_XDECREF(allfree);

  00593	4d 85 f6	 test	 r14, r14
  00596	74 65		 je	 SHORT $LN141@analyze_bl
  00598	e8 00 00 00 00	 call	 _Py_PXCTX
  0059d	85 c0		 test	 eax, eax
  0059f	75 5c		 jne	 SHORT $LN141@analyze_bl
  005a1	49 8b 46 20	 mov	 rax, QWORD PTR [r14+32]
  005a5	a8 20		 test	 al, 32			; 00000020H
  005a7	75 4c		 jne	 SHORT $LN124@analyze_bl
  005a9	84 c0		 test	 al, al
  005ab	78 48		 js	 SHORT $LN124@analyze_bl
  005ad	a8 02		 test	 al, 2
  005af	75 4c		 jne	 SHORT $LN141@analyze_bl
  005b1	49 ff 4e 50	 dec	 QWORD PTR [r14+80]
  005b5	75 46		 jne	 SHORT $LN141@analyze_bl
  005b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  005be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  005c5	4d 8b ce	 mov	 r9, r14
  005c8	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  005ce	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  005d6	e8 00 00 00 00	 call	 _PyParallel_Guard
  005db	49 8b ce	 mov	 rcx, r14
  005de	85 c0		 test	 eax, eax
  005e0	74 07		 je	 SHORT $LN129@analyze_bl
  005e2	e8 00 00 00 00	 call	 _Px_Dealloc
  005e7	eb 14		 jmp	 SHORT $LN141@analyze_bl
$LN129@analyze_bl:
  005e9	49 8b 46 58	 mov	 rax, QWORD PTR [r14+88]
  005ed	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  005f3	eb 08		 jmp	 SHORT $LN141@analyze_bl
$LN124@analyze_bl:
  005f5	49 8b ce	 mov	 rcx, r14
  005f8	e8 00 00 00 00	 call	 Px_DecRef
$LN141@analyze_bl:

; 832  :     if (!success)
; 833  :         assert(PyErr_Occurred());
; 834  :     return success;

  005fd	8b c7		 mov	 eax, edi

; 835  : }

  005ff	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00603	41 5f		 pop	 r15
  00605	41 5e		 pop	 r14
  00607	41 5d		 pop	 r13
  00609	5f		 pop	 rdi
  0060a	5e		 pop	 rsi
  0060b	5d		 pop	 rbp
  0060c	5b		 pop	 rbx
  0060d	c3		 ret	 0
analyze_block ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_analyze DD imagerel symtable_analyze
	DD	imagerel symtable_analyze+41
	DD	imagerel $unwind$symtable_analyze
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$symtable_analyze DD imagerel symtable_analyze+41
	DD	imagerel symtable_analyze+85
	DD	imagerel $chain$0$symtable_analyze
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$symtable_analyze DD imagerel symtable_analyze+85
	DD	imagerel symtable_analyze+138
	DD	imagerel $chain$2$symtable_analyze
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$symtable_analyze DD 020021H
	DD	066400H
	DD	imagerel symtable_analyze
	DD	imagerel symtable_analyze+41
	DD	imagerel $unwind$symtable_analyze
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$symtable_analyze DD 020521H
	DD	066405H
	DD	imagerel symtable_analyze
	DD	imagerel symtable_analyze+41
	DD	imagerel $unwind$symtable_analyze
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_analyze DD 040a01H
	DD	07340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT symtable_analyze
_TEXT	SEGMENT
st$ = 48
symtable_analyze PROC					; COMDAT

; 880  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 881  :     PyObject *free, *global;
; 882  :     int r;
; 883  : 
; 884  :     free = PySet_New(NULL);

  0000d	33 c9		 xor	 ecx, ecx
  0000f	e8 00 00 00 00	 call	 PySet_New
  00014	48 8b f8	 mov	 rdi, rax

; 885  :     if (!free)

  00017	48 85 c0	 test	 rax, rax
  0001a	75 0b		 jne	 SHORT $LN2@symtable_a@2

; 896  : }

  0001c	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5f		 pop	 rdi
  00026	c3		 ret	 0
$LN2@symtable_a@2:

; 886  :         return 0;
; 887  :     global = PySet_New(NULL);

  00027	33 c9		 xor	 ecx, ecx
  00029	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  0002e	e8 00 00 00 00	 call	 PySet_New
  00033	48 8b f0	 mov	 rsi, rax

; 888  :     if (!global) {

  00036	48 85 c0	 test	 rax, rax
  00039	75 1a		 jne	 SHORT $LN1@symtable_a@2

; 889  :         Py_DECREF(free);

  0003b	48 8b cf	 mov	 rcx, rdi
  0003e	e8 00 00 00 00	 call	 _Py_DecRef
  00043	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 890  :         return 0;

  00048	33 c0		 xor	 eax, eax

; 896  : }

  0004a	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
$LN1@symtable_a@2:

; 891  :     }
; 892  :     r = analyze_block(st->st_top, NULL, free, global);

  00055	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00059	4c 8b c8	 mov	 r9, rax
  0005c	4c 8b c7	 mov	 r8, rdi
  0005f	33 d2		 xor	 edx, edx
  00061	e8 00 00 00 00	 call	 analyze_block

; 893  :     Py_DECREF(free);

  00066	48 8b cf	 mov	 rcx, rdi
  00069	8b d8		 mov	 ebx, eax
  0006b	e8 00 00 00 00	 call	 _Py_DecRef

; 894  :     Py_DECREF(global);

  00070	48 8b ce	 mov	 rcx, rsi
  00073	e8 00 00 00 00	 call	 _Py_DecRef
  00078	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 895  :     return r;

  0007d	8b c3		 mov	 eax, ebx

; 896  : }

  0007f	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00084	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00088	5f		 pop	 rdi
  00089	c3		 ret	 0
symtable_analyze ENDP
_TEXT	ENDS
PUBLIC	??_C@_05MKJDPMKP@super?$AA@			; `string'
PUBLIC	??_C@_06COJIGPIB@lambda?$AA@			; `string'
PUBLIC	??_C@_0DE@DFBPPMEI@maximum?5recursion?5depth?5exceeded@ ; `string'
EXTRN	__ImageBase:BYTE
EXTRN	PyExc_RuntimeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_expr DD imagerel symtable_visit_expr
	DD	imagerel symtable_visit_expr+64
	DD	imagerel $unwind$symtable_visit_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$symtable_visit_expr DD imagerel symtable_visit_expr+64
	DD	imagerel symtable_visit_expr+881
	DD	imagerel $chain$1$symtable_visit_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$symtable_visit_expr DD imagerel symtable_visit_expr+881
	DD	imagerel symtable_visit_expr+1636
	DD	imagerel $chain$3$symtable_visit_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$symtable_visit_expr DD 040021H
	DD	0a6400H
	DD	095400H
	DD	imagerel symtable_visit_expr
	DD	imagerel symtable_visit_expr+64
	DD	imagerel $unwind$symtable_visit_expr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$symtable_visit_expr DD 040a21H
	DD	0a640aH
	DD	095405H
	DD	imagerel symtable_visit_expr
	DD	imagerel symtable_visit_expr+64
	DD	imagerel $unwind$symtable_visit_expr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_expr DD 040a01H
	DD	0b340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_05MKJDPMKP@super?$AA@
CONST	SEGMENT
??_C@_05MKJDPMKP@super?$AA@ DB 'super', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06COJIGPIB@lambda?$AA@
CONST	SEGMENT
??_C@_06COJIGPIB@lambda?$AA@ DB 'lambda', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@DFBPPMEI@maximum?5recursion?5depth?5exceeded@
CONST	SEGMENT
??_C@_0DE@DFBPPMEI@maximum?5recursion?5depth?5exceeded@ DB 'maximum recur'
	DB	'sion depth exceeded during compilation', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT symtable_visit_expr
_TEXT	SEGMENT
tv1360 = 64
seq$1$ = 64
seq$1$ = 64
seq$1$ = 64
seq$1$ = 64
st$ = 64
e$ = 72
symtable_visit_expr PROC				; COMDAT

; 1321 : {

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1322 :     if (++st->recursion_depth > st->recursion_limit) {

  0000a	ff 41 48	 inc	 DWORD PTR [rcx+72]
  0000d	8b 41 48	 mov	 eax, DWORD PTR [rcx+72]
  00010	48 8b fa	 mov	 rdi, rdx
  00013	48 8b d9	 mov	 rbx, rcx
  00016	3b 41 4c	 cmp	 eax, DWORD PTR [rcx+76]
  00019	7e 23		 jle	 SHORT $LN104@symtable_v@9

; 1323 :         PyErr_SetString(PyExc_RuntimeError,
; 1324 :                         "maximum recursion depth exceeded during compilation");

  0001b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@DFBPPMEI@maximum?5recursion?5depth?5exceeded@
  00029	e8 00 00 00 00	 call	 PyErr_SetString

; 1325 :         VISIT_QUIT(st, 0);

  0002e	ff 4b 48	 dec	 DWORD PTR [rbx+72]
  00031	33 c0		 xor	 eax, eax

; 1445 : }

  00033	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00038	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
$LN104@symtable_v@9:

; 1326 :     }
; 1327 :     switch (e->kind) {

  0003e	8b 02		 mov	 eax, DWORD PTR [rdx]
  00040	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00045	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  0004a	ff c8		 dec	 eax
  0004c	83 f8 18	 cmp	 eax, 24
  0004f	0f 87 ff 02 00
	00		 ja	 $LN2@symtable_v@9
  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  0005c	48 98		 cdqe
  0005e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN156@symtable_v@9[rdx+rax*4]
  00065	48 03 ca	 add	 rcx, rdx
  00068	ff e1		 jmp	 rcx
$LN101@symtable_v@9:

; 1328 :     case BoolOp_kind:
; 1329 :         VISIT_SEQ(st, expr, e->v.BoolOp.values);

  0006a	48 8b 6f 10	 mov	 rbp, QWORD PTR [rdi+16]
  0006e	33 ff		 xor	 edi, edi
  00070	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
$LL100@symtable_v@9:
  00074	48 85 ed	 test	 rbp, rbp
  00077	75 04		 jne	 SHORT $LN107@symtable_v@9
  00079	33 c9		 xor	 ecx, ecx
  0007b	eb 04		 jmp	 SHORT $LN108@symtable_v@9
$LN107@symtable_v@9:
  0007d	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN108@symtable_v@9:
  00081	48 63 c7	 movsxd	 rax, edi
  00084	48 3b c1	 cmp	 rax, rcx
  00087	0f 8d c7 02 00
	00		 jge	 $LN2@symtable_v@9
  0008d	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  00090	48 8b cb	 mov	 rcx, rbx
  00093	e8 00 00 00 00	 call	 symtable_visit_expr
  00098	85 c0		 test	 eax, eax
  0009a	0f 84 d9 04 00
	00		 je	 $LN11@symtable_v@9
  000a0	ff c7		 inc	 edi
  000a2	48 83 c6 08	 add	 rsi, 8
  000a6	eb cc		 jmp	 SHORT $LL100@symtable_v@9
$LN96@symtable_v@9:

; 1330 :         break;
; 1331 :     case BinOp_kind:
; 1332 :         VISIT(st, expr, e->v.BinOp.left);

  000a8	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  000ac	48 8b cb	 mov	 rcx, rbx
  000af	e8 00 00 00 00	 call	 symtable_visit_expr
  000b4	85 c0		 test	 eax, eax
  000b6	0f 84 bd 04 00
	00		 je	 $LN11@symtable_v@9

; 1333 :         VISIT(st, expr, e->v.BinOp.right);

  000bc	48 8b 57 18	 mov	 rdx, QWORD PTR [rdi+24]
  000c0	e9 0c 04 00 00	 jmp	 $LN162@symtable_v@9
$LN93@symtable_v@9:

; 1334 :         break;
; 1335 :     case UnaryOp_kind:
; 1336 :         VISIT(st, expr, e->v.UnaryOp.operand);

  000c5	48 8b 57 10	 mov	 rdx, QWORD PTR [rdi+16]
  000c9	e9 03 04 00 00	 jmp	 $LN162@symtable_v@9
$LN91@symtable_v@9:

; 1337 :         break;
; 1338 :     case Lambda_kind: {
; 1339 :         if (!GET_IDENTIFIER(lambda))

  000ce	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR lambda
  000d5	48 85 d2	 test	 rdx, rdx
  000d8	75 1f		 jne	 SHORT $LN90@symtable_v@9
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06COJIGPIB@lambda?$AA@
  000e1	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  000e6	48 8b d0	 mov	 rdx, rax
  000e9	48 89 05 00 00
	00 00		 mov	 QWORD PTR lambda, rax
  000f0	48 85 c0	 test	 rax, rax

; 1340 :             VISIT_QUIT(st, 0);

  000f3	0f 84 80 04 00
	00		 je	 $LN11@symtable_v@9
$LN90@symtable_v@9:

; 1341 :         if (e->v.Lambda.args->defaults)

  000f9	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  000fd	48 8b 68 30	 mov	 rbp, QWORD PTR [rax+48]
  00101	48 85 ed	 test	 rbp, rbp
  00104	74 47		 je	 SHORT $LN86@symtable_v@9

; 1342 :             VISIT_SEQ(st, expr, e->v.Lambda.args->defaults);

  00106	33 f6		 xor	 esi, esi
  00108	48 8d 55 08	 lea	 rdx, QWORD PTR [rbp+8]
$LN161@symtable_v@9:
  0010c	48 89 54 24 40	 mov	 QWORD PTR tv1360[rsp], rdx
  00111	48 85 ed	 test	 rbp, rbp
  00114	75 04		 jne	 SHORT $LN111@symtable_v@9
  00116	33 c9		 xor	 ecx, ecx
  00118	eb 04		 jmp	 SHORT $LN112@symtable_v@9
$LN111@symtable_v@9:
  0011a	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN112@symtable_v@9:
  0011e	48 63 c6	 movsxd	 rax, esi
  00121	48 3b c1	 cmp	 rax, rcx
  00124	7d 20		 jge	 SHORT $LN157@symtable_v@9
  00126	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00129	48 8b cb	 mov	 rcx, rbx
  0012c	e8 00 00 00 00	 call	 symtable_visit_expr
  00131	85 c0		 test	 eax, eax
  00133	0f 84 40 04 00
	00		 je	 $LN11@symtable_v@9
  00139	48 8b 54 24 40	 mov	 rdx, QWORD PTR tv1360[rsp]
  0013e	ff c6		 inc	 esi
  00140	48 83 c2 08	 add	 rdx, 8
  00144	eb c6		 jmp	 SHORT $LN161@symtable_v@9
$LN157@symtable_v@9:
  00146	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR lambda
$LN86@symtable_v@9:

; 1343 :         if (e->v.Lambda.args->kw_defaults)

  0014d	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  00151	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00155	48 89 44 24 40	 mov	 QWORD PTR seq$1$[rsp], rax
  0015a	48 85 c0	 test	 rax, rax
  0015d	74 46		 je	 SHORT $LN81@symtable_v@9

; 1344 :             VISIT_KWONLYDEFAULTS(st,
; 1345 :                                  e->v.Lambda.args->kw_defaults);

  0015f	33 ed		 xor	 ebp, ebp
  00161	48 8d 70 08	 lea	 rsi, QWORD PTR [rax+8]
$LL83@symtable_v@9:
  00165	48 85 c0	 test	 rax, rax
  00168	75 04		 jne	 SHORT $LN113@symtable_v@9
  0016a	33 c9		 xor	 ecx, ecx
  0016c	eb 03		 jmp	 SHORT $LN114@symtable_v@9
$LN113@symtable_v@9:
  0016e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
$LN114@symtable_v@9:
  00171	48 63 c5	 movsxd	 rax, ebp
  00174	48 3b c1	 cmp	 rax, rcx
  00177	7d 25		 jge	 SHORT $LN158@symtable_v@9
  00179	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  0017c	48 85 d2	 test	 rdx, rdx
  0017f	74 10		 je	 SHORT $LN82@symtable_v@9
  00181	48 8b cb	 mov	 rcx, rbx
  00184	e8 00 00 00 00	 call	 symtable_visit_expr
  00189	85 c0		 test	 eax, eax
  0018b	0f 84 e8 03 00
	00		 je	 $LN11@symtable_v@9
$LN82@symtable_v@9:
  00191	48 8b 44 24 40	 mov	 rax, QWORD PTR seq$1$[rsp]
  00196	ff c5		 inc	 ebp
  00198	48 83 c6 08	 add	 rsi, 8
  0019c	eb c7		 jmp	 SHORT $LL83@symtable_v@9
$LN158@symtable_v@9:
  0019e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR lambda
$LN81@symtable_v@9:

; 1346 :         if (!symtable_enter_block(st, lambda,
; 1347 :                                   FunctionBlock, (void *)e, e->lineno,
; 1348 :                                   e->col_offset))

  001a5	8b 47 34	 mov	 eax, DWORD PTR [rdi+52]
  001a8	4c 8b cf	 mov	 r9, rdi
  001ab	45 33 c0	 xor	 r8d, r8d
  001ae	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  001b2	8b 47 30	 mov	 eax, DWORD PTR [rdi+48]
  001b5	48 8b cb	 mov	 rcx, rbx
  001b8	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  001bc	e8 00 00 00 00	 call	 symtable_enter_block
  001c1	85 c0		 test	 eax, eax

; 1349 :             VISIT_QUIT(st, 0);

  001c3	0f 84 b0 03 00
	00		 je	 $LN11@symtable_v@9

; 1350 :         VISIT(st, arguments, e->v.Lambda.args);

  001c9	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  001cd	48 8b cb	 mov	 rcx, rbx
  001d0	e8 00 00 00 00	 call	 symtable_visit_arguments
  001d5	85 c0		 test	 eax, eax
  001d7	0f 84 9c 03 00
	00		 je	 $LN11@symtable_v@9

; 1351 :         VISIT(st, expr, e->v.Lambda.body);

  001dd	48 8b 57 10	 mov	 rdx, QWORD PTR [rdi+16]
  001e1	48 8b cb	 mov	 rcx, rbx
  001e4	e8 00 00 00 00	 call	 symtable_visit_expr
  001e9	85 c0		 test	 eax, eax
  001eb	0f 84 88 03 00
	00		 je	 $LN11@symtable_v@9

; 1352 :         if (!symtable_exit_block(st, (void *)e))

  001f1	48 8b cb	 mov	 rcx, rbx
  001f4	e8 00 00 00 00	 call	 symtable_exit_block

; 1353 :             VISIT_QUIT(st, 0);

  001f9	e9 db 02 00 00	 jmp	 $LN164@symtable_v@9
$LN74@symtable_v@9:

; 1354 :         break;
; 1355 :     }
; 1356 :     case IfExp_kind:
; 1357 :         VISIT(st, expr, e->v.IfExp.test);

  001fe	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  00202	48 8b cb	 mov	 rcx, rbx
  00205	e8 00 00 00 00	 call	 symtable_visit_expr
  0020a	85 c0		 test	 eax, eax
  0020c	0f 84 67 03 00
	00		 je	 $LN11@symtable_v@9

; 1358 :         VISIT(st, expr, e->v.IfExp.body);

  00212	48 8b 57 10	 mov	 rdx, QWORD PTR [rdi+16]
  00216	48 8b cb	 mov	 rcx, rbx
  00219	e8 00 00 00 00	 call	 symtable_visit_expr
  0021e	85 c0		 test	 eax, eax
  00220	0f 84 53 03 00
	00		 je	 $LN11@symtable_v@9

; 1359 :         VISIT(st, expr, e->v.IfExp.orelse);

  00226	48 8b 57 18	 mov	 rdx, QWORD PTR [rdi+24]
  0022a	e9 a2 02 00 00	 jmp	 $LN162@symtable_v@9
$LN70@symtable_v@9:

; 1360 :         break;
; 1361 :     case Dict_kind:
; 1362 :         VISIT_SEQ(st, expr, e->v.Dict.keys);

  0022f	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  00233	33 f6		 xor	 esi, esi
  00235	48 8d 68 08	 lea	 rbp, QWORD PTR [rax+8]
  00239	48 89 44 24 40	 mov	 QWORD PTR seq$1$[rsp], rax
  0023e	66 90		 npad	 2
$LL69@symtable_v@9:
  00240	48 85 c0	 test	 rax, rax
  00243	75 04		 jne	 SHORT $LN115@symtable_v@9
  00245	33 c9		 xor	 ecx, ecx
  00247	eb 03		 jmp	 SHORT $LN116@symtable_v@9
$LN115@symtable_v@9:
  00249	48 8b 08	 mov	 rcx, QWORD PTR [rax]
$LN116@symtable_v@9:
  0024c	48 63 c6	 movsxd	 rax, esi
  0024f	48 3b c1	 cmp	 rax, rcx
  00252	7d 21		 jge	 SHORT $LN67@symtable_v@9
  00254	48 8b 55 00	 mov	 rdx, QWORD PTR [rbp]
  00258	48 8b cb	 mov	 rcx, rbx
  0025b	e8 00 00 00 00	 call	 symtable_visit_expr
  00260	85 c0		 test	 eax, eax
  00262	0f 84 11 03 00
	00		 je	 $LN11@symtable_v@9
  00268	48 8b 44 24 40	 mov	 rax, QWORD PTR seq$1$[rsp]
  0026d	ff c6		 inc	 esi
  0026f	48 83 c5 08	 add	 rbp, 8
  00273	eb cb		 jmp	 SHORT $LL69@symtable_v@9
$LN67@symtable_v@9:

; 1363 :         VISIT_SEQ(st, expr, e->v.Dict.values);

  00275	48 8b 6f 10	 mov	 rbp, QWORD PTR [rdi+16]
  00279	33 ff		 xor	 edi, edi
  0027b	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  0027f	90		 npad	 1
$LL65@symtable_v@9:
  00280	48 85 ed	 test	 rbp, rbp
  00283	75 04		 jne	 SHORT $LN117@symtable_v@9
  00285	33 c9		 xor	 ecx, ecx
  00287	eb 04		 jmp	 SHORT $LN118@symtable_v@9
$LN117@symtable_v@9:
  00289	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN118@symtable_v@9:
  0028d	48 63 c7	 movsxd	 rax, edi
  00290	48 3b c1	 cmp	 rax, rcx
  00293	0f 8d bb 00 00
	00		 jge	 $LN2@symtable_v@9
  00299	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  0029c	48 8b cb	 mov	 rcx, rbx
  0029f	e8 00 00 00 00	 call	 symtable_visit_expr
  002a4	85 c0		 test	 eax, eax
  002a6	0f 84 cd 02 00
	00		 je	 $LN11@symtable_v@9
  002ac	ff c7		 inc	 edi
  002ae	48 83 c6 08	 add	 rsi, 8
  002b2	eb cc		 jmp	 SHORT $LL65@symtable_v@9
$LN61@symtable_v@9:

; 1364 :         break;
; 1365 :     case Set_kind:
; 1366 :         VISIT_SEQ(st, expr, e->v.Set.elts);

  002b4	48 8b 6f 08	 mov	 rbp, QWORD PTR [rdi+8]
  002b8	33 ff		 xor	 edi, edi
  002ba	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  002be	66 90		 npad	 2
$LL60@symtable_v@9:
  002c0	48 85 ed	 test	 rbp, rbp
  002c3	75 04		 jne	 SHORT $LN119@symtable_v@9
  002c5	33 c9		 xor	 ecx, ecx
  002c7	eb 04		 jmp	 SHORT $LN120@symtable_v@9
$LN119@symtable_v@9:
  002c9	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN120@symtable_v@9:
  002cd	48 63 c7	 movsxd	 rax, edi
  002d0	48 3b c1	 cmp	 rax, rcx
  002d3	7d 7f		 jge	 SHORT $LN2@symtable_v@9
  002d5	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  002d8	48 8b cb	 mov	 rcx, rbx
  002db	e8 00 00 00 00	 call	 symtable_visit_expr
  002e0	85 c0		 test	 eax, eax
  002e2	0f 84 91 02 00
	00		 je	 $LN11@symtable_v@9
  002e8	ff c7		 inc	 edi
  002ea	48 83 c6 08	 add	 rsi, 8
  002ee	eb d0		 jmp	 SHORT $LL60@symtable_v@9
$LN56@symtable_v@9:

; 1367 :         break;
; 1368 :     case GeneratorExp_kind:
; 1369 :         if (!symtable_visit_genexp(st, e))

  002f0	48 8b d7	 mov	 rdx, rdi
  002f3	48 8b cb	 mov	 rcx, rbx
  002f6	e8 00 00 00 00	 call	 symtable_visit_genexp

; 1370 :             VISIT_QUIT(st, 0);

  002fb	e9 d9 01 00 00	 jmp	 $LN164@symtable_v@9
$LN54@symtable_v@9:

; 1371 :         break;
; 1372 :     case ListComp_kind:
; 1373 :         if (!symtable_visit_listcomp(st, e))

  00300	48 8b d7	 mov	 rdx, rdi
  00303	48 8b cb	 mov	 rcx, rbx
  00306	e8 00 00 00 00	 call	 symtable_visit_listcomp

; 1374 :             VISIT_QUIT(st, 0);

  0030b	e9 c9 01 00 00	 jmp	 $LN164@symtable_v@9
$LN52@symtable_v@9:

; 1375 :         break;
; 1376 :     case SetComp_kind:
; 1377 :         if (!symtable_visit_setcomp(st, e))

  00310	48 8b d7	 mov	 rdx, rdi
  00313	48 8b cb	 mov	 rcx, rbx
  00316	e8 00 00 00 00	 call	 symtable_visit_setcomp

; 1378 :             VISIT_QUIT(st, 0);

  0031b	e9 b9 01 00 00	 jmp	 $LN164@symtable_v@9
$LN50@symtable_v@9:

; 1379 :         break;
; 1380 :     case DictComp_kind:
; 1381 :         if (!symtable_visit_dictcomp(st, e))

  00320	48 8b d7	 mov	 rdx, rdi
  00323	48 8b cb	 mov	 rcx, rbx
  00326	e8 00 00 00 00	 call	 symtable_visit_dictcomp

; 1382 :             VISIT_QUIT(st, 0);

  0032b	e9 a9 01 00 00	 jmp	 $LN164@symtable_v@9
$LN48@symtable_v@9:

; 1383 :         break;
; 1384 :     case Yield_kind:
; 1385 :         if (e->v.Yield.value)

  00330	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  00334	48 85 d2	 test	 rdx, rdx
  00337	74 10		 je	 SHORT $LN46@symtable_v@9

; 1386 :             VISIT(st, expr, e->v.Yield.value);

  00339	48 8b cb	 mov	 rcx, rbx
  0033c	e8 00 00 00 00	 call	 symtable_visit_expr
  00341	85 c0		 test	 eax, eax
  00343	0f 84 30 02 00
	00		 je	 $LN11@symtable_v@9
$LN46@symtable_v@9:

; 1387 :         st->st_cur->ste_generator = 1;

  00349	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0034d	83 88 94 00 00
	00 04		 or	 DWORD PTR [rax+148], 4
$LN2@symtable_v@9:

; 1442 :         break;
; 1443 :     }
; 1444 :     VISIT_QUIT(st, 1);

  00354	ff 4b 48	 dec	 DWORD PTR [rbx+72]
  00357	b8 01 00 00 00	 mov	 eax, 1
$LN160@symtable_v@9:

; 1445 : }

  0035c	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00361	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00366	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  0036b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0036f	5f		 pop	 rdi
  00370	c3		 ret	 0
$LN45@symtable_v@9:

; 1388 :         break;
; 1389 :     case YieldFrom_kind:
; 1390 :         VISIT(st, expr, e->v.YieldFrom.value);

  00371	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  00375	48 8b cb	 mov	 rcx, rbx
  00378	e8 00 00 00 00	 call	 symtable_visit_expr
  0037d	85 c0		 test	 eax, eax
  0037f	75 c8		 jne	 SHORT $LN46@symtable_v@9

; 1419 :         break;
; 1420 :     case Starred_kind:
; 1421 :         VISIT(st, expr, e->v.Starred.value);

  00381	ff 4b 48	 dec	 DWORD PTR [rbx+72]
  00384	eb d6		 jmp	 SHORT $LN160@symtable_v@9
$LN43@symtable_v@9:

; 1391 :         st->st_cur->ste_generator = 1;
; 1392 :         break;
; 1393 :     case Compare_kind:
; 1394 :         VISIT(st, expr, e->v.Compare.left);

  00386	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  0038a	48 8b cb	 mov	 rcx, rbx
  0038d	e8 00 00 00 00	 call	 symtable_visit_expr
  00392	85 c0		 test	 eax, eax
  00394	0f 84 df 01 00
	00		 je	 $LN11@symtable_v@9

; 1395 :         VISIT_SEQ(st, expr, e->v.Compare.comparators);

  0039a	48 8b 6f 18	 mov	 rbp, QWORD PTR [rdi+24]
  0039e	33 ff		 xor	 edi, edi
  003a0	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
$LL41@symtable_v@9:
  003a4	48 85 ed	 test	 rbp, rbp
  003a7	75 04		 jne	 SHORT $LN121@symtable_v@9
  003a9	33 c9		 xor	 ecx, ecx
  003ab	eb 04		 jmp	 SHORT $LN122@symtable_v@9
$LN121@symtable_v@9:
  003ad	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN122@symtable_v@9:
  003b1	48 63 c7	 movsxd	 rax, edi
  003b4	48 3b c1	 cmp	 rax, rcx
  003b7	7d 9b		 jge	 SHORT $LN2@symtable_v@9
  003b9	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  003bc	48 8b cb	 mov	 rcx, rbx
  003bf	e8 00 00 00 00	 call	 symtable_visit_expr
  003c4	85 c0		 test	 eax, eax
  003c6	0f 84 ad 01 00
	00		 je	 $LN11@symtable_v@9
  003cc	ff c7		 inc	 edi
  003ce	48 83 c6 08	 add	 rsi, 8
  003d2	eb d0		 jmp	 SHORT $LL41@symtable_v@9
$LN37@symtable_v@9:

; 1396 :         break;
; 1397 :     case Call_kind:
; 1398 :         VISIT(st, expr, e->v.Call.func);

  003d4	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  003d8	48 8b cb	 mov	 rcx, rbx
  003db	e8 00 00 00 00	 call	 symtable_visit_expr
  003e0	85 c0		 test	 eax, eax
  003e2	0f 84 91 01 00
	00		 je	 $LN11@symtable_v@9

; 1399 :         VISIT_SEQ(st, expr, e->v.Call.args);

  003e8	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  003ec	33 f6		 xor	 esi, esi
  003ee	48 8d 68 08	 lea	 rbp, QWORD PTR [rax+8]
  003f2	48 89 44 24 40	 mov	 QWORD PTR seq$1$[rsp], rax
$LL35@symtable_v@9:
  003f7	48 85 c0	 test	 rax, rax
  003fa	75 04		 jne	 SHORT $LN123@symtable_v@9
  003fc	33 c9		 xor	 ecx, ecx
  003fe	eb 03		 jmp	 SHORT $LN124@symtable_v@9
$LN123@symtable_v@9:
  00400	48 8b 08	 mov	 rcx, QWORD PTR [rax]
$LN124@symtable_v@9:
  00403	48 63 c6	 movsxd	 rax, esi
  00406	48 3b c1	 cmp	 rax, rcx
  00409	7d 21		 jge	 SHORT $LN33@symtable_v@9
  0040b	48 8b 55 00	 mov	 rdx, QWORD PTR [rbp]
  0040f	48 8b cb	 mov	 rcx, rbx
  00412	e8 00 00 00 00	 call	 symtable_visit_expr
  00417	85 c0		 test	 eax, eax
  00419	0f 84 5a 01 00
	00		 je	 $LN11@symtable_v@9
  0041f	48 8b 44 24 40	 mov	 rax, QWORD PTR seq$1$[rsp]
  00424	ff c6		 inc	 esi
  00426	48 83 c5 08	 add	 rbp, 8
  0042a	eb cb		 jmp	 SHORT $LL35@symtable_v@9
$LN33@symtable_v@9:

; 1400 :         VISIT_SEQ(st, keyword, e->v.Call.keywords);

  0042c	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
  00430	33 f6		 xor	 esi, esi
  00432	48 8d 68 08	 lea	 rbp, QWORD PTR [rax+8]
  00436	48 89 44 24 40	 mov	 QWORD PTR seq$1$[rsp], rax
  0043b	0f 1f 44 00 00	 npad	 5
$LL31@symtable_v@9:
  00440	48 85 c0	 test	 rax, rax
  00443	75 04		 jne	 SHORT $LN125@symtable_v@9
  00445	33 c9		 xor	 ecx, ecx
  00447	eb 03		 jmp	 SHORT $LN126@symtable_v@9
$LN125@symtable_v@9:
  00449	48 8b 08	 mov	 rcx, QWORD PTR [rax]
$LN126@symtable_v@9:
  0044c	48 63 c6	 movsxd	 rax, esi
  0044f	48 3b c1	 cmp	 rax, rcx
  00452	7d 21		 jge	 SHORT $LN29@symtable_v@9
  00454	48 8b 55 00	 mov	 rdx, QWORD PTR [rbp]
  00458	48 8b cb	 mov	 rcx, rbx
  0045b	e8 00 00 00 00	 call	 symtable_visit_keyword
  00460	85 c0		 test	 eax, eax
  00462	0f 84 11 01 00
	00		 je	 $LN11@symtable_v@9
  00468	48 8b 44 24 40	 mov	 rax, QWORD PTR seq$1$[rsp]
  0046d	ff c6		 inc	 esi
  0046f	48 83 c5 08	 add	 rbp, 8
  00473	eb cb		 jmp	 SHORT $LL31@symtable_v@9
$LN29@symtable_v@9:

; 1401 :         if (e->v.Call.starargs)

  00475	48 8b 57 20	 mov	 rdx, QWORD PTR [rdi+32]
  00479	48 85 d2	 test	 rdx, rdx
  0047c	74 10		 je	 SHORT $LN26@symtable_v@9

; 1402 :             VISIT(st, expr, e->v.Call.starargs);

  0047e	48 8b cb	 mov	 rcx, rbx
  00481	e8 00 00 00 00	 call	 symtable_visit_expr
  00486	85 c0		 test	 eax, eax
  00488	0f 84 eb 00 00
	00		 je	 $LN11@symtable_v@9
$LN26@symtable_v@9:

; 1403 :         if (e->v.Call.kwargs)

  0048e	48 8b 57 28	 mov	 rdx, QWORD PTR [rdi+40]
  00492	48 85 d2	 test	 rdx, rdx
  00495	0f 84 b9 fe ff
	ff		 je	 $LN2@symtable_v@9

; 1404 :             VISIT(st, expr, e->v.Call.kwargs);

  0049b	eb 34		 jmp	 SHORT $LN162@symtable_v@9
$LN20@symtable_v@9:

; 1405 :         break;
; 1406 :     case Num_kind:
; 1407 :     case Str_kind:
; 1408 :     case Bytes_kind:
; 1409 :     case Ellipsis_kind:
; 1410 :         /* Nothing to do here. */
; 1411 :         break;
; 1412 :     /* The following exprs can be assignment targets. */
; 1413 :     case Attribute_kind:
; 1414 :         VISIT(st, expr, e->v.Attribute.value);
; 1415 :         break;
; 1416 :     case Subscript_kind:
; 1417 :         VISIT(st, expr, e->v.Subscript.value);

  0049d	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  004a1	48 8b cb	 mov	 rcx, rbx
  004a4	e8 00 00 00 00	 call	 symtable_visit_expr
  004a9	85 c0		 test	 eax, eax
  004ab	0f 84 c8 00 00
	00		 je	 $LN11@symtable_v@9

; 1418 :         VISIT(st, slice, e->v.Subscript.slice);

  004b1	48 8b 57 10	 mov	 rdx, QWORD PTR [rdi+16]
  004b5	48 8b cb	 mov	 rcx, rbx
  004b8	e8 00 00 00 00	 call	 symtable_visit_slice
  004bd	85 c0		 test	 eax, eax
  004bf	0f 85 8f fe ff
	ff		 jne	 $LN2@symtable_v@9
  004c5	ff 4b 48	 dec	 DWORD PTR [rbx+72]
  004c8	e9 8f fe ff ff	 jmp	 $LN160@symtable_v@9
$LN17@symtable_v@9:

; 1419 :         break;
; 1420 :     case Starred_kind:
; 1421 :         VISIT(st, expr, e->v.Starred.value);

  004cd	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
$LN162@symtable_v@9:
  004d1	48 8b cb	 mov	 rcx, rbx
  004d4	e8 00 00 00 00	 call	 symtable_visit_expr
$LN164@symtable_v@9:
  004d9	85 c0		 test	 eax, eax
  004db	0f 85 73 fe ff
	ff		 jne	 $LN2@symtable_v@9
  004e1	ff 4b 48	 dec	 DWORD PTR [rbx+72]
  004e4	e9 73 fe ff ff	 jmp	 $LN160@symtable_v@9
$LN15@symtable_v@9:

; 1422 :         break;
; 1423 :     case Name_kind:
; 1424 :         if (!symtable_add_def(st, e->v.Name.id,
; 1425 :                               e->v.Name.ctx == Load ? USE : DEF_LOCAL))

  004e9	83 7f 10 01	 cmp	 DWORD PTR [rdi+16], 1
  004ed	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  004f1	41 b8 02 00 00
	00		 mov	 r8d, 2
  004f7	be 10 00 00 00	 mov	 esi, 16
  004fc	48 8b cb	 mov	 rcx, rbx
  004ff	44 0f 44 c6	 cmove	 r8d, esi
  00503	e8 00 00 00 00	 call	 symtable_add_def
  00508	85 c0		 test	 eax, eax

; 1426 :             VISIT_QUIT(st, 0);

  0050a	74 6d		 je	 SHORT $LN11@symtable_v@9

; 1427 :         /* Special-case super: it counts as a use of __class__ */
; 1428 :         if (e->v.Name.ctx == Load &&
; 1429 :             st->st_cur->ste_type == FunctionBlock &&
; 1430 :             !PyUnicode_CompareWithASCIIString(e->v.Name.id, "super")) {

  0050c	83 7f 10 01	 cmp	 DWORD PTR [rdi+16], 1
  00510	0f 85 3e fe ff
	ff		 jne	 $LN2@symtable_v@9
  00516	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0051a	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  00521	0f 85 2d fe ff
	ff		 jne	 $LN2@symtable_v@9
  00527	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  0052b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05MKJDPMKP@super?$AA@
  00532	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00537	85 c0		 test	 eax, eax
  00539	0f 85 15 fe ff
	ff		 jne	 $LN2@symtable_v@9

; 1431 :             if (!GET_IDENTIFIER(__class__) ||
; 1432 :                 !symtable_add_def(st, __class__, USE))

  0053f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __class__
  00546	48 85 c0	 test	 rax, rax
  00549	75 18		 jne	 SHORT $LN155@symtable_v@9
  0054b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09LFGACEKG@__class__?$AA@
  00552	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00557	48 89 05 00 00
	00 00		 mov	 QWORD PTR __class__, rax
  0055e	48 85 c0	 test	 rax, rax
  00561	74 16		 je	 SHORT $LN11@symtable_v@9
$LN155@symtable_v@9:
  00563	44 8b c6	 mov	 r8d, esi
  00566	48 8b d0	 mov	 rdx, rax
  00569	48 8b cb	 mov	 rcx, rbx
  0056c	e8 00 00 00 00	 call	 symtable_add_def
  00571	85 c0		 test	 eax, eax
  00573	0f 85 db fd ff
	ff		 jne	 $LN2@symtable_v@9
$LN11@symtable_v@9:

; 1433 :                 VISIT_QUIT(st, 0);

  00579	ff 4b 48	 dec	 DWORD PTR [rbx+72]
  0057c	33 c0		 xor	 eax, eax
  0057e	e9 d9 fd ff ff	 jmp	 $LN160@symtable_v@9
$LN10@symtable_v@9:

; 1434 :         }
; 1435 :         break;
; 1436 :     /* child nodes of List and Tuple will have expr_context set */
; 1437 :     case List_kind:
; 1438 :         VISIT_SEQ(st, expr, e->v.List.elts);

  00583	48 8b 6f 08	 mov	 rbp, QWORD PTR [rdi+8]
  00587	33 ff		 xor	 edi, edi
  00589	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  0058d	0f 1f 00	 npad	 3
$LL9@symtable_v@9:
  00590	48 85 ed	 test	 rbp, rbp
  00593	75 04		 jne	 SHORT $LN129@symtable_v@9
  00595	33 c9		 xor	 ecx, ecx
  00597	eb 04		 jmp	 SHORT $LN130@symtable_v@9
$LN129@symtable_v@9:
  00599	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN130@symtable_v@9:
  0059d	48 63 c7	 movsxd	 rax, edi
  005a0	48 3b c1	 cmp	 rax, rcx
  005a3	0f 8d ab fd ff
	ff		 jge	 $LN2@symtable_v@9
  005a9	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  005ac	48 8b cb	 mov	 rcx, rbx
  005af	e8 00 00 00 00	 call	 symtable_visit_expr
  005b4	85 c0		 test	 eax, eax
  005b6	74 c1		 je	 SHORT $LN11@symtable_v@9
  005b8	ff c7		 inc	 edi
  005ba	48 83 c6 08	 add	 rsi, 8
  005be	eb d0		 jmp	 SHORT $LL9@symtable_v@9
$LN5@symtable_v@9:

; 1439 :         break;
; 1440 :     case Tuple_kind:
; 1441 :         VISIT_SEQ(st, expr, e->v.Tuple.elts);

  005c0	48 8b 6f 08	 mov	 rbp, QWORD PTR [rdi+8]
  005c4	33 ff		 xor	 edi, edi
  005c6	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  005ca	66 0f 1f 44 00
	00		 npad	 6
$LL4@symtable_v@9:
  005d0	48 85 ed	 test	 rbp, rbp
  005d3	75 04		 jne	 SHORT $LN131@symtable_v@9
  005d5	33 c9		 xor	 ecx, ecx
  005d7	eb 04		 jmp	 SHORT $LN132@symtable_v@9
$LN131@symtable_v@9:
  005d9	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN132@symtable_v@9:
  005dd	48 63 c7	 movsxd	 rax, edi
  005e0	48 3b c1	 cmp	 rax, rcx
  005e3	0f 8d 6b fd ff
	ff		 jge	 $LN2@symtable_v@9
  005e9	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  005ec	48 8b cb	 mov	 rcx, rbx
  005ef	e8 00 00 00 00	 call	 symtable_visit_expr
  005f4	85 c0		 test	 eax, eax
  005f6	74 81		 je	 SHORT $LN11@symtable_v@9
  005f8	ff c7		 inc	 edi
  005fa	48 83 c6 08	 add	 rsi, 8
  005fe	eb d0		 jmp	 SHORT $LL4@symtable_v@9
$LN156@symtable_v@9:

; 1445 : }

  00600	00 00 00 00	 DD	 $LN101@symtable_v@9
  00604	00 00 00 00	 DD	 $LN96@symtable_v@9
  00608	00 00 00 00	 DD	 $LN93@symtable_v@9
  0060c	00 00 00 00	 DD	 $LN91@symtable_v@9
  00610	00 00 00 00	 DD	 $LN74@symtable_v@9
  00614	00 00 00 00	 DD	 $LN70@symtable_v@9
  00618	00 00 00 00	 DD	 $LN61@symtable_v@9
  0061c	00 00 00 00	 DD	 $LN54@symtable_v@9
  00620	00 00 00 00	 DD	 $LN52@symtable_v@9
  00624	00 00 00 00	 DD	 $LN50@symtable_v@9
  00628	00 00 00 00	 DD	 $LN56@symtable_v@9
  0062c	00 00 00 00	 DD	 $LN48@symtable_v@9
  00630	00 00 00 00	 DD	 $LN45@symtable_v@9
  00634	00 00 00 00	 DD	 $LN43@symtable_v@9
  00638	00 00 00 00	 DD	 $LN37@symtable_v@9
  0063c	00 00 00 00	 DD	 $LN2@symtable_v@9
  00640	00 00 00 00	 DD	 $LN2@symtable_v@9
  00644	00 00 00 00	 DD	 $LN2@symtable_v@9
  00648	00 00 00 00	 DD	 $LN2@symtable_v@9
  0064c	00 00 00 00	 DD	 $LN17@symtable_v@9
  00650	00 00 00 00	 DD	 $LN20@symtable_v@9
  00654	00 00 00 00	 DD	 $LN17@symtable_v@9
  00658	00 00 00 00	 DD	 $LN15@symtable_v@9
  0065c	00 00 00 00	 DD	 $LN10@symtable_v@9
  00660	00 00 00 00	 DD	 $LN5@symtable_v@9
symtable_visit_expr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_argannotations DD imagerel symtable_visit_argannotations
	DD	imagerel symtable_visit_argannotations+124
	DD	imagerel $unwind$symtable_visit_argannotations
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_argannotations DD 082d01H
	DD	07742dH
	DD	063428H
	DD	08540aH
	DD	06006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT symtable_visit_argannotations
_TEXT	SEGMENT
st$ = 48
args$ = 56
symtable_visit_argannotations PROC			; COMDAT

; 1480 : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f2	 mov	 rsi, rdx
  0000d	48 8b e9	 mov	 rbp, rcx

; 1481 :     int i;
; 1482 : 
; 1483 :     if (!args)

  00010	48 85 d2	 test	 rdx, rdx
  00013	75 0e		 jne	 SHORT $LN6@symtable_v@10

; 1484 :         return -1;

  00015	83 c8 ff	 or	 eax, -1

; 1493 : }

  00018	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0001d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00021	5e		 pop	 rsi
  00022	c3		 ret	 0
$LN6@symtable_v@10:
  00023	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00028	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi

; 1485 : 
; 1486 :     for (i = 0; i < asdl_seq_LEN(args); i++) {

  0002d	48 8d 7a 08	 lea	 rdi, QWORD PTR [rdx+8]
  00031	33 db		 xor	 ebx, ebx
$LL5@symtable_v@10:
  00033	48 63 c3	 movsxd	 rax, ebx
  00036	48 3b 06	 cmp	 rax, QWORD PTR [rsi]
  00039	7d 27		 jge	 SHORT $LN3@symtable_v@10

; 1487 :         arg_ty arg = (arg_ty)asdl_seq_GET(args, i);

  0003b	48 8b 07	 mov	 rax, QWORD PTR [rdi]

; 1488 :         if (arg->annotation)

  0003e	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00042	48 85 d2	 test	 rdx, rdx
  00045	74 0c		 je	 SHORT $LN4@symtable_v@10

; 1489 :             VISIT(st, expr, arg->annotation);

  00047	48 8b cd	 mov	 rcx, rbp
  0004a	e8 00 00 00 00	 call	 symtable_visit_expr
  0004f	85 c0		 test	 eax, eax
  00051	74 08		 je	 SHORT $LN12@symtable_v@10
$LN4@symtable_v@10:

; 1485 : 
; 1486 :     for (i = 0; i < asdl_seq_LEN(args); i++) {

  00053	ff c3		 inc	 ebx
  00055	48 83 c7 08	 add	 rdi, 8
  00059	eb d8		 jmp	 SHORT $LL5@symtable_v@10
$LN12@symtable_v@10:

; 1489 :             VISIT(st, expr, arg->annotation);

  0005b	ff 4d 48	 dec	 DWORD PTR [rbp+72]
  0005e	33 c0		 xor	 eax, eax
  00060	eb 05		 jmp	 SHORT $LN14@symtable_v@10
$LN3@symtable_v@10:

; 1490 :     }
; 1491 : 
; 1492 :     return 1;

  00062	b8 01 00 00 00	 mov	 eax, 1
$LN14@symtable_v@10:
  00067	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006c	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 1493 : }

  00071	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00076	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007a	5e		 pop	 rsi
  0007b	c3		 ret	 0
symtable_visit_argannotations ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_annotations DD imagerel symtable_visit_annotations
	DD	imagerel symtable_visit_annotations+168
	DD	imagerel $unwind$symtable_visit_annotations
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_annotations DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT symtable_visit_annotations
_TEXT	SEGMENT
st$ = 48
s$ = 56
symtable_visit_annotations PROC				; COMDAT

; 1497 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1498 :     arguments_ty a = s->v.FunctionDef.args;

  0000f	48 8b 7a 10	 mov	 rdi, QWORD PTR [rdx+16]
  00013	48 8b f2	 mov	 rsi, rdx
  00016	48 8b d9	 mov	 rbx, rcx

; 1499 : 
; 1500 :     if (a->args && !symtable_visit_argannotations(st, a->args))

  00019	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  0001c	48 85 d2	 test	 rdx, rdx
  0001f	74 09		 je	 SHORT $LN8@symtable_v@11
  00021	e8 00 00 00 00	 call	 symtable_visit_argannotations
  00026	85 c0		 test	 eax, eax

; 1501 :         return 0;

  00028	74 18		 je	 SHORT $LN11@symtable_v@11
$LN8@symtable_v@11:

; 1502 :     if (a->varargannotation)

  0002a	48 8b 57 10	 mov	 rdx, QWORD PTR [rdi+16]
  0002e	48 85 d2	 test	 rdx, rdx
  00031	74 21		 je	 SHORT $LN6@symtable_v@11

; 1503 :         VISIT(st, expr, a->varargannotation);

  00033	48 8b cb	 mov	 rcx, rbx
  00036	e8 00 00 00 00	 call	 symtable_visit_expr
  0003b	85 c0		 test	 eax, eax
  0003d	75 15		 jne	 SHORT $LN6@symtable_v@11
$LN12@symtable_v@11:
  0003f	ff 4b 48	 dec	 DWORD PTR [rbx+72]
$LN11@symtable_v@11:
  00042	33 c0		 xor	 eax, eax

; 1510 :     return 1;
; 1511 : }

  00044	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00049	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
$LN6@symtable_v@11:

; 1504 :     if (a->kwargannotation)

  00054	48 8b 57 28	 mov	 rdx, QWORD PTR [rdi+40]
  00058	48 85 d2	 test	 rdx, rdx
  0005b	74 0c		 je	 SHORT $LN4@symtable_v@11

; 1505 :         VISIT(st, expr, a->kwargannotation);

  0005d	48 8b cb	 mov	 rcx, rbx
  00060	e8 00 00 00 00	 call	 symtable_visit_expr
  00065	85 c0		 test	 eax, eax
  00067	74 d6		 je	 SHORT $LN12@symtable_v@11
$LN4@symtable_v@11:

; 1506 :     if (a->kwonlyargs && !symtable_visit_argannotations(st, a->kwonlyargs))

  00069	48 8b 57 18	 mov	 rdx, QWORD PTR [rdi+24]
  0006d	48 85 d2	 test	 rdx, rdx
  00070	74 0c		 je	 SHORT $LN3@symtable_v@11
  00072	48 8b cb	 mov	 rcx, rbx
  00075	e8 00 00 00 00	 call	 symtable_visit_argannotations
  0007a	85 c0		 test	 eax, eax

; 1507 :         return 0;

  0007c	74 c4		 je	 SHORT $LN11@symtable_v@11
$LN3@symtable_v@11:

; 1508 :     if (s->v.FunctionDef.returns)

  0007e	48 8b 56 28	 mov	 rdx, QWORD PTR [rsi+40]
  00082	48 85 d2	 test	 rdx, rdx
  00085	74 0c		 je	 SHORT $LN1@symtable_v@11

; 1509 :         VISIT(st, expr, s->v.FunctionDef.returns);

  00087	48 8b cb	 mov	 rcx, rbx
  0008a	e8 00 00 00 00	 call	 symtable_visit_expr
  0008f	85 c0		 test	 eax, eax
  00091	74 ac		 je	 SHORT $LN12@symtable_v@11
$LN1@symtable_v@11:

; 1510 :     return 1;
; 1511 : }

  00093	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00098	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0009d	b8 01 00 00 00	 mov	 eax, 1
  000a2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a6	5f		 pop	 rdi
  000a7	c3		 ret	 0
symtable_visit_annotations ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_withitem DD imagerel symtable_visit_withitem
	DD	imagerel symtable_visit_withitem+81
	DD	imagerel $unwind$symtable_visit_withitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_withitem DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT symtable_visit_withitem
_TEXT	SEGMENT
st$ = 48
item$ = 56
symtable_visit_withitem PROC				; COMDAT

; 1551 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx

; 1552 :     VISIT(st, expr, item->context_expr);

  0000d	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00010	48 8b d9	 mov	 rbx, rcx
  00013	e8 00 00 00 00	 call	 symtable_visit_expr
  00018	85 c0		 test	 eax, eax
  0001a	75 10		 jne	 SHORT $LN3@symtable_v@12
$LN6@symtable_v@12:
  0001c	ff 4b 48	 dec	 DWORD PTR [rbx+72]
  0001f	33 c0		 xor	 eax, eax

; 1557 : }

  00021	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5f		 pop	 rdi
  0002b	c3		 ret	 0
$LN3@symtable_v@12:

; 1553 :     if (item->optional_vars) {

  0002c	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  00030	48 85 d2	 test	 rdx, rdx
  00033	74 0c		 je	 SHORT $LN1@symtable_v@12

; 1554 :         VISIT(st, expr, item->optional_vars);

  00035	48 8b cb	 mov	 rcx, rbx
  00038	e8 00 00 00 00	 call	 symtable_visit_expr
  0003d	85 c0		 test	 eax, eax
  0003f	74 db		 je	 SHORT $LN6@symtable_v@12
$LN1@symtable_v@12:

; 1555 :     }
; 1556 :     return 1;

  00041	b8 01 00 00 00	 mov	 eax, 1

; 1557 : }

  00046	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
symtable_visit_withitem ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_comprehension DD imagerel symtable_visit_comprehension
	DD	imagerel symtable_visit_comprehension+157
	DD	imagerel $unwind$symtable_visit_comprehension
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_comprehension DD 084a01H
	DD	07644aH
	DD	063445H
	DD	08540aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT symtable_visit_comprehension
_TEXT	SEGMENT
st$ = 48
lc$ = 56
symtable_visit_comprehension PROC			; COMDAT

; 1603 : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx

; 1604 :     VISIT(st, expr, lc->target);

  0000d	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00010	48 8b f9	 mov	 rdi, rcx
  00013	e8 00 00 00 00	 call	 symtable_visit_expr
  00018	85 c0		 test	 eax, eax
  0001a	75 10		 jne	 SHORT $LN6@symtable_v@13
$LN15@symtable_v@13:
  0001c	ff 4f 48	 dec	 DWORD PTR [rdi+72]
  0001f	33 c0		 xor	 eax, eax

; 1608 : }

  00021	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5f		 pop	 rdi
  0002b	c3		 ret	 0
$LN6@symtable_v@13:

; 1605 :     VISIT(st, expr, lc->iter);

  0002c	48 8b 55 08	 mov	 rdx, QWORD PTR [rbp+8]
  00030	48 8b cf	 mov	 rcx, rdi
  00033	e8 00 00 00 00	 call	 symtable_visit_expr
  00038	85 c0		 test	 eax, eax
  0003a	74 e0		 je	 SHORT $LN15@symtable_v@13

; 1606 :     VISIT_SEQ(st, expr, lc->ifs);

  0003c	48 8b 6d 10	 mov	 rbp, QWORD PTR [rbp+16]
  00040	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00045	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  0004a	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  0004e	33 db		 xor	 ebx, ebx
$LL4@symtable_v@13:
  00050	48 85 ed	 test	 rbp, rbp
  00053	75 04		 jne	 SHORT $LN9@symtable_v@13
  00055	33 c9		 xor	 ecx, ecx
  00057	eb 04		 jmp	 SHORT $LN10@symtable_v@13
$LN9@symtable_v@13:
  00059	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN10@symtable_v@13:
  0005d	48 63 c3	 movsxd	 rax, ebx
  00060	48 3b c1	 cmp	 rax, rcx
  00063	7d 1e		 jge	 SHORT $LN2@symtable_v@13
  00065	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  00068	48 8b cf	 mov	 rcx, rdi
  0006b	e8 00 00 00 00	 call	 symtable_visit_expr
  00070	85 c0		 test	 eax, eax
  00072	74 08		 je	 SHORT $LN12@symtable_v@13
  00074	ff c3		 inc	 ebx
  00076	48 83 c6 08	 add	 rsi, 8
  0007a	eb d4		 jmp	 SHORT $LL4@symtable_v@13
$LN12@symtable_v@13:
  0007c	ff 4f 48	 dec	 DWORD PTR [rdi+72]
  0007f	33 c0		 xor	 eax, eax
  00081	eb 05		 jmp	 SHORT $LN14@symtable_v@13
$LN2@symtable_v@13:

; 1607 :     return 1;

  00083	b8 01 00 00 00	 mov	 eax, 1
$LN14@symtable_v@13:
  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]

; 1608 : }

  00092	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00097	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009b	5f		 pop	 rdi
  0009c	c3		 ret	 0
symtable_visit_comprehension ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_handle_comprehension DD imagerel symtable_handle_comprehension
	DD	imagerel symtable_handle_comprehension+384
	DD	imagerel $unwind$symtable_handle_comprehension
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_handle_comprehension DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0d0145218H
	DD	07010c012H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT symtable_handle_comprehension
_TEXT	SEGMENT
st$ = 80
e$ = 88
scope_name$ = 96
generators$ = 104
elt$ = 112
value$ = 120
symtable_handle_comprehension PROC			; COMDAT

; 1645 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1648 :     comprehension_ty outermost = ((comprehension_ty)
; 1649 :                                     asdl_seq_GET(generators, 0));

  00018	49 8b 69 08	 mov	 rbp, QWORD PTR [r9+8]
  0001c	33 ff		 xor	 edi, edi
  0001e	83 3a 0b	 cmp	 DWORD PTR [rdx], 11
  00021	4c 8b ea	 mov	 r13, rdx

; 1650 :     /* Outermost iterator is evaluated in current scope */
; 1651 :     VISIT(st, expr, outermost->iter);

  00024	48 8b 55 08	 mov	 rdx, QWORD PTR [rbp+8]
  00028	4d 8b e1	 mov	 r12, r9
  0002b	49 8b f0	 mov	 rsi, r8
  0002e	48 8b d9	 mov	 rbx, rcx
  00031	40 0f 94 c7	 sete	 dil
  00035	e8 00 00 00 00	 call	 symtable_visit_expr
  0003a	85 c0		 test	 eax, eax
  0003c	75 1e		 jne	 SHORT $LN17@symtable_h
$LN28@symtable_h:
  0003e	ff 4b 48	 dec	 DWORD PTR [rbx+72]
$LN15@symtable_h:

; 1656 :         return 0;

  00041	33 c0		 xor	 eax, eax
$LN18@symtable_h:

; 1676 : }

  00043	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00048	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0004d	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00052	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00056	41 5d		 pop	 r13
  00058	41 5c		 pop	 r12
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
$LN17@symtable_h:

; 1652 :     /* Create comprehension scope for the rest */
; 1653 :     if (!scope_name ||
; 1654 :         !symtable_enter_block(st, scope_name, FunctionBlock, (void *)e,
; 1655 :                               e->lineno, e->col_offset)) {

  0005c	48 85 f6	 test	 rsi, rsi
  0005f	74 e0		 je	 SHORT $LN15@symtable_h
  00061	41 8b 45 34	 mov	 eax, DWORD PTR [r13+52]
  00065	4d 8b cd	 mov	 r9, r13
  00068	45 33 c0	 xor	 r8d, r8d
  0006b	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0006f	41 8b 45 30	 mov	 eax, DWORD PTR [r13+48]
  00073	48 8b d6	 mov	 rdx, rsi
  00076	48 8b cb	 mov	 rcx, rbx
  00079	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007d	e8 00 00 00 00	 call	 symtable_enter_block
  00082	85 c0		 test	 eax, eax
  00084	74 bb		 je	 SHORT $LN15@symtable_h

; 1657 :     }
; 1658 :     st->st_cur->ste_generator = is_generator;

  00086	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  0008a	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [rdi*4]

; 1659 :     /* Outermost iter is received as an argument */
; 1660 :     if (!symtable_implicit_arg(st, 0)) {

  00091	33 d2		 xor	 edx, edx
  00093	33 81 94 00 00
	00		 xor	 eax, DWORD PTR [rcx+148]
  00099	83 e0 04	 and	 eax, 4
  0009c	31 81 94 00 00
	00		 xor	 DWORD PTR [rcx+148], eax
  000a2	48 8b cb	 mov	 rcx, rbx
  000a5	e8 00 00 00 00	 call	 symtable_implicit_arg
  000aa	85 c0		 test	 eax, eax
  000ac	75 0a		 jne	 SHORT $LN14@symtable_h
$LN29@symtable_h:

; 1661 :         symtable_exit_block(st, (void *)e);

  000ae	48 8b cb	 mov	 rcx, rbx
  000b1	e8 00 00 00 00	 call	 symtable_exit_block

; 1662 :         return 0;

  000b6	eb 89		 jmp	 SHORT $LN15@symtable_h
$LN14@symtable_h:

; 1646 :     int is_generator = (e->kind == GeneratorExp_kind);
; 1647 :     int needs_tmp = !is_generator;

  000b8	85 ff		 test	 edi, edi

; 1663 :     }
; 1664 :     /* Allocate temporary name if needed */
; 1665 :     if (needs_tmp && !symtable_new_tmpname(st)) {

  000ba	75 0c		 jne	 SHORT $LN13@symtable_h
  000bc	48 8b cb	 mov	 rcx, rbx
  000bf	e8 00 00 00 00	 call	 symtable_new_tmpname
  000c4	85 c0		 test	 eax, eax

; 1666 :         symtable_exit_block(st, (void *)e);
; 1667 :         return 0;

  000c6	74 e6		 je	 SHORT $LN29@symtable_h
$LN13@symtable_h:

; 1668 :     }
; 1669 :     VISIT(st, expr, outermost->target);

  000c8	48 8b 55 00	 mov	 rdx, QWORD PTR [rbp]
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	e8 00 00 00 00	 call	 symtable_visit_expr
  000d4	85 c0		 test	 eax, eax
  000d6	0f 84 62 ff ff
	ff		 je	 $LN28@symtable_h

; 1670 :     VISIT_SEQ(st, expr, outermost->ifs);

  000dc	48 8b 6d 10	 mov	 rbp, QWORD PTR [rbp+16]
  000e0	33 ff		 xor	 edi, edi
  000e2	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
$LL11@symtable_h:
  000e6	48 85 ed	 test	 rbp, rbp
  000e9	75 04		 jne	 SHORT $LN20@symtable_h
  000eb	33 c9		 xor	 ecx, ecx
  000ed	eb 04		 jmp	 SHORT $LN21@symtable_h
$LN20@symtable_h:
  000ef	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN21@symtable_h:
  000f3	48 63 c7	 movsxd	 rax, edi
  000f6	48 3b c1	 cmp	 rax, rcx
  000f9	7d 1b		 jge	 SHORT $LN9@symtable_h
  000fb	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  000fe	48 8b cb	 mov	 rcx, rbx
  00101	e8 00 00 00 00	 call	 symtable_visit_expr
  00106	85 c0		 test	 eax, eax
  00108	0f 84 30 ff ff
	ff		 je	 $LN28@symtable_h
  0010e	ff c7		 inc	 edi
  00110	48 83 c6 08	 add	 rsi, 8
  00114	eb d0		 jmp	 SHORT $LL11@symtable_h
$LN9@symtable_h:

; 1671 :     VISIT_SEQ_TAIL(st, comprehension, generators, 1);

  00116	bf 01 00 00 00	 mov	 edi, 1
  0011b	49 8d 74 24 10	 lea	 rsi, QWORD PTR [r12+16]
$LL7@symtable_h:
  00120	48 63 c7	 movsxd	 rax, edi
  00123	49 3b 04 24	 cmp	 rax, QWORD PTR [r12]
  00127	7d 1b		 jge	 SHORT $LN5@symtable_h
  00129	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  0012c	48 8b cb	 mov	 rcx, rbx
  0012f	e8 00 00 00 00	 call	 symtable_visit_comprehension
  00134	85 c0		 test	 eax, eax
  00136	0f 84 02 ff ff
	ff		 je	 $LN28@symtable_h
  0013c	ff c7		 inc	 edi
  0013e	48 83 c6 08	 add	 rsi, 8
  00142	eb dc		 jmp	 SHORT $LL7@symtable_h
$LN5@symtable_h:

; 1672 :     if (value)

  00144	48 8b 54 24 78	 mov	 rdx, QWORD PTR value$[rsp]
  00149	48 85 d2	 test	 rdx, rdx
  0014c	74 10		 je	 SHORT $LN2@symtable_h

; 1673 :         VISIT(st, expr, value);

  0014e	48 8b cb	 mov	 rcx, rbx
  00151	e8 00 00 00 00	 call	 symtable_visit_expr
  00156	85 c0		 test	 eax, eax
  00158	0f 84 e0 fe ff
	ff		 je	 $LN28@symtable_h
$LN2@symtable_h:

; 1674 :     VISIT(st, expr, elt);

  0015e	48 8b 54 24 70	 mov	 rdx, QWORD PTR elt$[rsp]
  00163	48 8b cb	 mov	 rcx, rbx
  00166	e8 00 00 00 00	 call	 symtable_visit_expr
  0016b	85 c0		 test	 eax, eax
  0016d	0f 84 cb fe ff
	ff		 je	 $LN28@symtable_h

; 1675 :     return symtable_exit_block(st, (void *)e);

  00173	48 8b cb	 mov	 rcx, rbx
  00176	e8 00 00 00 00	 call	 symtable_exit_block
  0017b	e9 c3 fe ff ff	 jmp	 $LN18@symtable_h
symtable_handle_comprehension ENDP
_TEXT	ENDS
PUBLIC	??_C@_08CPNHFCIL@dictcomp?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_dictcomp DD imagerel symtable_visit_dictcomp
	DD	imagerel symtable_visit_dictcomp+94
	DD	imagerel $unwind$symtable_visit_dictcomp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_dictcomp DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_08CPNHFCIL@dictcomp?$AA@
CONST	SEGMENT
??_C@_08CPNHFCIL@dictcomp?$AA@ DB 'dictcomp', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT symtable_visit_dictcomp
_TEXT	SEGMENT
st$ = 64
e$ = 72
symtable_visit_dictcomp PROC				; COMDAT

; 1704 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1705 :     return symtable_handle_comprehension(st, e, GET_IDENTIFIER(dictcomp),
; 1706 :                                          e->v.DictComp.generators,
; 1707 :                                          e->v.DictComp.key,
; 1708 :                                          e->v.DictComp.value);

  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR dictcomp
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f9	 mov	 rdi, rcx
  00017	48 85 c0	 test	 rax, rax
  0001a	75 13		 jne	 SHORT $LN4@symtable_v@14
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08CPNHFCIL@dictcomp?$AA@
  00023	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00028	48 89 05 00 00
	00 00		 mov	 QWORD PTR dictcomp, rax
$LN4@symtable_v@14:
  0002f	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  00033	48 8b 53 08	 mov	 rdx, QWORD PTR [rbx+8]
  00037	4c 8b 4b 18	 mov	 r9, QWORD PTR [rbx+24]
  0003b	4c 89 44 24 28	 mov	 QWORD PTR [rsp+40], r8
  00040	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00045	48 8b cf	 mov	 rcx, rdi
  00048	48 8b d3	 mov	 rdx, rbx
  0004b	4c 8b c0	 mov	 r8, rax
  0004e	e8 00 00 00 00	 call	 symtable_handle_comprehension

; 1709 : }

  00053	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00058	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
symtable_visit_dictcomp ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@COCIPDM@name?5?8?$CF?4400s?8?5is?5used?5prior?5to?5n@ ; `string'
PUBLIC	??_C@_0DJ@JIAAIOIF@name?5?8?$CF?4400s?8?5is?5assigned?5to?5bef@ ; `string'
PUBLIC	??_C@_0BN@GJGDMEHB@cannot?5make?5__class__?5global?$AA@ ; `string'
PUBLIC	??_C@_0DC@GDNGFAAH@name?5?8?$CF?4400s?8?5is?5used?5prior?5to?5g@ ; `string'
PUBLIC	??_C@_0DH@LJMCNDPN@name?5?8?$CF?4400s?8?5is?5assigned?5to?5bef@ ; `string'
PUBLIC	??_C@_0L@ICMAENDM@__locals__?$AA@		; `string'
EXTRN	PyUnicode_AsUTF8:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_stmt DD imagerel symtable_visit_stmt
	DD	imagerel symtable_visit_stmt+67
	DD	imagerel $unwind$symtable_visit_stmt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$symtable_visit_stmt DD imagerel symtable_visit_stmt+67
	DD	imagerel symtable_visit_stmt+1163
	DD	imagerel $chain$1$symtable_visit_stmt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$symtable_visit_stmt DD imagerel symtable_visit_stmt+1163
	DD	imagerel symtable_visit_stmt+3116
	DD	imagerel $chain$3$symtable_visit_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$symtable_visit_stmt DD 040021H
	DD	0266400H
	DD	02d5400H
	DD	imagerel symtable_visit_stmt
	DD	imagerel symtable_visit_stmt+67
	DD	imagerel $unwind$symtable_visit_stmt
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$symtable_visit_stmt DD 041021H
	DD	0266410H
	DD	02d5408H
	DD	imagerel symtable_visit_stmt
	DD	imagerel symtable_visit_stmt+67
	DD	imagerel $unwind$symtable_visit_stmt
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_stmt DD 040e01H
	DD	027010eH
	DD	030067007H
xdata	ENDS
;	COMDAT ??_C@_0DE@COCIPDM@name?5?8?$CF?4400s?8?5is?5used?5prior?5to?5n@
CONST	SEGMENT
??_C@_0DE@COCIPDM@name?5?8?$CF?4400s?8?5is?5used?5prior?5to?5n@ DB 'name '
	DB	'''%.400s'' is used prior to nonlocal declaration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@JIAAIOIF@name?5?8?$CF?4400s?8?5is?5assigned?5to?5bef@
CONST	SEGMENT
??_C@_0DJ@JIAAIOIF@name?5?8?$CF?4400s?8?5is?5assigned?5to?5bef@ DB 'name '
	DB	'''%.400s'' is assigned to before nonlocal declaration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GJGDMEHB@cannot?5make?5__class__?5global?$AA@
CONST	SEGMENT
??_C@_0BN@GJGDMEHB@cannot?5make?5__class__?5global?$AA@ DB 'cannot make _'
	DB	'_class__ global', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@GDNGFAAH@name?5?8?$CF?4400s?8?5is?5used?5prior?5to?5g@
CONST	SEGMENT
??_C@_0DC@GDNGFAAH@name?5?8?$CF?4400s?8?5is?5used?5prior?5to?5g@ DB 'name'
	DB	' ''%.400s'' is used prior to global declaration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@LJMCNDPN@name?5?8?$CF?4400s?8?5is?5assigned?5to?5bef@
CONST	SEGMENT
??_C@_0DH@LJMCNDPN@name?5?8?$CF?4400s?8?5is?5assigned?5to?5bef@ DB 'name '
	DB	'''%.400s'' is assigned to before global declaration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ICMAENDM@__locals__?$AA@
CONST	SEGMENT
??_C@_0L@ICMAENDM@__locals__?$AA@ DB '__locals__', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT symtable_visit_stmt
_TEXT	SEGMENT
buf$22556 = 48
buf$22535 = 48
tmp$1$ = 336
tv2605 = 336
tv2604 = 336
st$ = 336
s$ = 344
seq$1$ = 352
seq$1$ = 352
symtable_visit_stmt PROC				; COMDAT

; 1106 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	53		 push	 rbx
  00006	57		 push	 rdi
  00007	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H

; 1107 :     if (++st->recursion_depth > st->recursion_limit) {

  0000e	ff 41 48	 inc	 DWORD PTR [rcx+72]
  00011	8b 41 48	 mov	 eax, DWORD PTR [rcx+72]
  00014	48 8b fa	 mov	 rdi, rdx
  00017	48 8b d9	 mov	 rbx, rcx
  0001a	3b 41 4c	 cmp	 eax, DWORD PTR [rcx+76]
  0001d	7e 22		 jle	 SHORT $LN180@symtable_v@15

; 1108 :         PyErr_SetString(PyExc_RuntimeError,
; 1109 :                         "maximum recursion depth exceeded during compilation");

  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@DFBPPMEI@maximum?5recursion?5depth?5exceeded@
  0002d	e8 00 00 00 00	 call	 PyErr_SetString

; 1110 :         VISIT_QUIT(st, 0);

  00032	ff 4b 48	 dec	 DWORD PTR [rbx+72]
  00035	33 c0		 xor	 eax, eax

; 1317 : }

  00037	48 81 c4 38 01
	00 00		 add	 rsp, 312		; 00000138H
  0003e	5f		 pop	 rdi
  0003f	5b		 pop	 rbx
  00040	c3		 ret	 0
$LN180@symtable_v@15:

; 1111 :     }
; 1112 :     switch (s->kind) {

  00041	8b 02		 mov	 eax, DWORD PTR [rdx]
  00043	48 89 ac 24 68
	01 00 00	 mov	 QWORD PTR [rsp+360], rbp
  0004b	48 89 b4 24 30
	01 00 00	 mov	 QWORD PTR [rsp+304], rsi
  00053	ff c8		 dec	 eax
  00055	83 f8 11	 cmp	 eax, 17
  00058	0f 87 0b 04 00
	00		 ja	 $LN2@symtable_v@15
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
  00065	48 98		 cdqe
  00067	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN300@symtable_v@15[rdx+rax*4]
  0006e	48 03 ca	 add	 rcx, rdx
  00071	ff e1		 jmp	 rcx
$LN177@symtable_v@15:

; 1113 :     case FunctionDef_kind:
; 1114 :         if (!symtable_add_def(st, s->v.FunctionDef.name, DEF_LOCAL))

  00073	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  00077	41 b8 02 00 00
	00		 mov	 r8d, 2
  0007d	48 8b cb	 mov	 rcx, rbx
  00080	e8 00 00 00 00	 call	 symtable_add_def
  00085	85 c0		 test	 eax, eax

; 1115 :             VISIT_QUIT(st, 0);

  00087	0f 84 ca 0a 00
	00		 je	 $LN297@symtable_v@15

; 1116 :         if (s->v.FunctionDef.args->defaults)

  0008d	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  00091	48 8b 68 30	 mov	 rbp, QWORD PTR [rax+48]
  00095	48 85 ed	 test	 rbp, rbp
  00098	74 3e		 je	 SHORT $LN172@symtable_v@15

; 1117 :             VISIT_SEQ(st, expr, s->v.FunctionDef.args->defaults);

  0009a	33 ff		 xor	 edi, edi
  0009c	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
$LL174@symtable_v@15:
  000a0	48 85 ed	 test	 rbp, rbp
  000a3	75 04		 jne	 SHORT $LN183@symtable_v@15
  000a5	33 c9		 xor	 ecx, ecx
  000a7	eb 04		 jmp	 SHORT $LN184@symtable_v@15
$LN183@symtable_v@15:
  000a9	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN184@symtable_v@15:
  000ad	48 63 c7	 movsxd	 rax, edi
  000b0	48 3b c1	 cmp	 rax, rcx
  000b3	7d 1b		 jge	 SHORT $LN305@symtable_v@15
  000b5	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  000b8	48 8b cb	 mov	 rcx, rbx
  000bb	e8 00 00 00 00	 call	 symtable_visit_expr
  000c0	85 c0		 test	 eax, eax
  000c2	0f 84 8f 0a 00
	00		 je	 $LN297@symtable_v@15
  000c8	ff c7		 inc	 edi
  000ca	48 83 c6 08	 add	 rsi, 8
  000ce	eb d0		 jmp	 SHORT $LL174@symtable_v@15
$LN305@symtable_v@15:

; 1266 :                 if (!symtable_warn(st, buf, s->lineno))

  000d0	48 8b bc 24 58
	01 00 00	 mov	 rdi, QWORD PTR s$[rsp]
$LN172@symtable_v@15:

; 1118 :         if (s->v.FunctionDef.args->kw_defaults)

  000d8	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  000dc	48 8b 68 38	 mov	 rbp, QWORD PTR [rax+56]
  000e0	48 85 ed	 test	 rbp, rbp
  000e3	74 48		 je	 SHORT $LN167@symtable_v@15

; 1119 :             VISIT_KWONLYDEFAULTS(st,
; 1120 :                                s->v.FunctionDef.args->kw_defaults);

  000e5	33 f6		 xor	 esi, esi
  000e7	48 8d 7d 08	 lea	 rdi, QWORD PTR [rbp+8]
  000eb	0f 1f 44 00 00	 npad	 5
$LL169@symtable_v@15:
  000f0	48 85 ed	 test	 rbp, rbp
  000f3	75 04		 jne	 SHORT $LN185@symtable_v@15
  000f5	33 c9		 xor	 ecx, ecx
  000f7	eb 04		 jmp	 SHORT $LN186@symtable_v@15
$LN185@symtable_v@15:
  000f9	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN186@symtable_v@15:
  000fd	48 63 c6	 movsxd	 rax, esi
  00100	48 3b c1	 cmp	 rax, rcx
  00103	7d 20		 jge	 SHORT $LN304@symtable_v@15
  00105	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  00108	48 85 d2	 test	 rdx, rdx
  0010b	74 10		 je	 SHORT $LN168@symtable_v@15
  0010d	48 8b cb	 mov	 rcx, rbx
  00110	e8 00 00 00 00	 call	 symtable_visit_expr
  00115	85 c0		 test	 eax, eax
  00117	0f 84 3a 0a 00
	00		 je	 $LN297@symtable_v@15
$LN168@symtable_v@15:
  0011d	ff c6		 inc	 esi
  0011f	48 83 c7 08	 add	 rdi, 8
  00123	eb cb		 jmp	 SHORT $LL169@symtable_v@15
$LN304@symtable_v@15:

; 1266 :                 if (!symtable_warn(st, buf, s->lineno))

  00125	48 8b bc 24 58
	01 00 00	 mov	 rdi, QWORD PTR s$[rsp]
$LN167@symtable_v@15:

; 1121 :         if (!symtable_visit_annotations(st, s))

  0012d	48 8b d7	 mov	 rdx, rdi
  00130	48 8b cb	 mov	 rcx, rbx
  00133	e8 00 00 00 00	 call	 symtable_visit_annotations
  00138	85 c0		 test	 eax, eax

; 1122 :             VISIT_QUIT(st, 0);

  0013a	0f 84 17 0a 00
	00		 je	 $LN297@symtable_v@15

; 1123 :         if (s->v.FunctionDef.decorator_list)

  00140	48 8b 77 20	 mov	 rsi, QWORD PTR [rdi+32]
  00144	48 85 f6	 test	 rsi, rsi
  00147	74 3f		 je	 SHORT $LN160@symtable_v@15

; 1124 :             VISIT_SEQ(st, expr, s->v.FunctionDef.decorator_list);

  00149	33 ff		 xor	 edi, edi
  0014b	48 8d 6e 08	 lea	 rbp, QWORD PTR [rsi+8]
  0014f	90		 npad	 1
$LL162@symtable_v@15:
  00150	48 85 f6	 test	 rsi, rsi
  00153	75 04		 jne	 SHORT $LN187@symtable_v@15
  00155	33 c9		 xor	 ecx, ecx
  00157	eb 03		 jmp	 SHORT $LN188@symtable_v@15
$LN187@symtable_v@15:
  00159	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
$LN188@symtable_v@15:
  0015c	48 63 c7	 movsxd	 rax, edi
  0015f	48 3b c1	 cmp	 rax, rcx
  00162	7d 1c		 jge	 SHORT $LN303@symtable_v@15
  00164	48 8b 55 00	 mov	 rdx, QWORD PTR [rbp]
  00168	48 8b cb	 mov	 rcx, rbx
  0016b	e8 00 00 00 00	 call	 symtable_visit_expr
  00170	85 c0		 test	 eax, eax
  00172	0f 84 df 09 00
	00		 je	 $LN297@symtable_v@15
  00178	ff c7		 inc	 edi
  0017a	48 83 c5 08	 add	 rbp, 8
  0017e	eb d0		 jmp	 SHORT $LL162@symtable_v@15
$LN303@symtable_v@15:

; 1266 :                 if (!symtable_warn(st, buf, s->lineno))

  00180	48 8b bc 24 58
	01 00 00	 mov	 rdi, QWORD PTR s$[rsp]
$LN160@symtable_v@15:

; 1125 :         if (!symtable_enter_block(st, s->v.FunctionDef.name,
; 1126 :                                   FunctionBlock, (void *)s, s->lineno,
; 1127 :                                   s->col_offset))

  00188	8b 47 44	 mov	 eax, DWORD PTR [rdi+68]
  0018b	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  0018f	4c 8b cf	 mov	 r9, rdi
  00192	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00196	8b 47 40	 mov	 eax, DWORD PTR [rdi+64]
  00199	45 33 c0	 xor	 r8d, r8d
  0019c	48 8b cb	 mov	 rcx, rbx
  0019f	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  001a3	e8 00 00 00 00	 call	 symtable_enter_block
  001a8	85 c0		 test	 eax, eax

; 1128 :             VISIT_QUIT(st, 0);

  001aa	0f 84 a7 09 00
	00		 je	 $LN297@symtable_v@15

; 1129 :         VISIT(st, arguments, s->v.FunctionDef.args);

  001b0	48 8b 57 10	 mov	 rdx, QWORD PTR [rdi+16]
  001b4	48 8b cb	 mov	 rcx, rbx
  001b7	e8 00 00 00 00	 call	 symtable_visit_arguments
  001bc	85 c0		 test	 eax, eax
  001be	0f 84 93 09 00
	00		 je	 $LN297@symtable_v@15

; 1130 :         VISIT_SEQ(st, stmt, s->v.FunctionDef.body);

  001c4	48 8b 6f 18	 mov	 rbp, QWORD PTR [rdi+24]
  001c8	33 ff		 xor	 edi, edi
  001ca	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  001ce	66 90		 npad	 2
$LL156@symtable_v@15:
  001d0	48 85 ed	 test	 rbp, rbp
  001d3	75 04		 jne	 SHORT $LN189@symtable_v@15
  001d5	33 c9		 xor	 ecx, ecx
  001d7	eb 04		 jmp	 SHORT $LN190@symtable_v@15
$LN189@symtable_v@15:
  001d9	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN190@symtable_v@15:
  001dd	48 63 c7	 movsxd	 rax, edi
  001e0	48 3b c1	 cmp	 rax, rcx
  001e3	48 8b cb	 mov	 rcx, rbx
  001e6	0f 8d 40 02 00
	00		 jge	 $LN154@symtable_v@15
  001ec	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  001ef	e8 00 00 00 00	 call	 symtable_visit_stmt
  001f4	85 c0		 test	 eax, eax
  001f6	0f 84 5b 09 00
	00		 je	 $LN297@symtable_v@15
  001fc	ff c7		 inc	 edi
  001fe	48 83 c6 08	 add	 rsi, 8
  00202	eb cc		 jmp	 SHORT $LL156@symtable_v@15
$LN151@symtable_v@15:

; 1131 :         if (!symtable_exit_block(st, s))
; 1132 :             VISIT_QUIT(st, 0);
; 1133 :         break;
; 1134 :     case ClassDef_kind: {
; 1135 :         PyObject *tmp;
; 1136 :         if (!symtable_add_def(st, s->v.ClassDef.name, DEF_LOCAL))

  00204	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  00208	41 b8 02 00 00
	00		 mov	 r8d, 2
  0020e	48 8b cb	 mov	 rcx, rbx
  00211	e8 00 00 00 00	 call	 symtable_add_def
  00216	85 c0		 test	 eax, eax

; 1137 :             VISIT_QUIT(st, 0);

  00218	0f 84 39 09 00
	00		 je	 $LN297@symtable_v@15

; 1138 :         VISIT_SEQ(st, expr, s->v.ClassDef.bases);

  0021e	48 8b 6f 10	 mov	 rbp, QWORD PTR [rdi+16]
  00222	33 ff		 xor	 edi, edi
  00224	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
$LL149@symtable_v@15:
  00228	48 85 ed	 test	 rbp, rbp
  0022b	75 04		 jne	 SHORT $LN191@symtable_v@15
  0022d	33 c9		 xor	 ecx, ecx
  0022f	eb 04		 jmp	 SHORT $LN192@symtable_v@15
$LN191@symtable_v@15:
  00231	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN192@symtable_v@15:
  00235	48 63 c7	 movsxd	 rax, edi
  00238	48 3b c1	 cmp	 rax, rcx
  0023b	7d 1b		 jge	 SHORT $LN147@symtable_v@15
  0023d	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  00240	48 8b cb	 mov	 rcx, rbx
  00243	e8 00 00 00 00	 call	 symtable_visit_expr
  00248	85 c0		 test	 eax, eax
  0024a	0f 84 07 09 00
	00		 je	 $LN297@symtable_v@15
  00250	ff c7		 inc	 edi
  00252	48 83 c6 08	 add	 rsi, 8
  00256	eb d0		 jmp	 SHORT $LL149@symtable_v@15
$LN147@symtable_v@15:

; 1139 :         VISIT_SEQ(st, keyword, s->v.ClassDef.keywords);

  00258	48 8b ac 24 58
	01 00 00	 mov	 rbp, QWORD PTR s$[rsp]
  00260	33 ff		 xor	 edi, edi
  00262	48 8b 6d 18	 mov	 rbp, QWORD PTR [rbp+24]
  00266	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  0026a	66 0f 1f 44 00
	00		 npad	 6
$LL145@symtable_v@15:
  00270	48 85 ed	 test	 rbp, rbp
  00273	75 04		 jne	 SHORT $LN193@symtable_v@15
  00275	33 c9		 xor	 ecx, ecx
  00277	eb 04		 jmp	 SHORT $LN194@symtable_v@15
$LN193@symtable_v@15:
  00279	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN194@symtable_v@15:
  0027d	48 63 c7	 movsxd	 rax, edi
  00280	48 3b c1	 cmp	 rax, rcx
  00283	7d 1b		 jge	 SHORT $LN143@symtable_v@15
  00285	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  00288	48 8b cb	 mov	 rcx, rbx
  0028b	e8 00 00 00 00	 call	 symtable_visit_keyword
  00290	85 c0		 test	 eax, eax
  00292	0f 84 bf 08 00
	00		 je	 $LN297@symtable_v@15
  00298	ff c7		 inc	 edi
  0029a	48 83 c6 08	 add	 rsi, 8
  0029e	eb d0		 jmp	 SHORT $LL145@symtable_v@15
$LN143@symtable_v@15:

; 1140 :         if (s->v.ClassDef.starargs)

  002a0	48 8b bc 24 58
	01 00 00	 mov	 rdi, QWORD PTR s$[rsp]
  002a8	48 8b 57 20	 mov	 rdx, QWORD PTR [rdi+32]
  002ac	48 85 d2	 test	 rdx, rdx
  002af	74 10		 je	 SHORT $LN140@symtable_v@15

; 1141 :             VISIT(st, expr, s->v.ClassDef.starargs);

  002b1	48 8b cb	 mov	 rcx, rbx
  002b4	e8 00 00 00 00	 call	 symtable_visit_expr
  002b9	85 c0		 test	 eax, eax
  002bb	0f 84 96 08 00
	00		 je	 $LN297@symtable_v@15
$LN140@symtable_v@15:

; 1142 :         if (s->v.ClassDef.kwargs)

  002c1	48 8b 57 28	 mov	 rdx, QWORD PTR [rdi+40]
  002c5	48 85 d2	 test	 rdx, rdx
  002c8	74 10		 je	 SHORT $LN138@symtable_v@15

; 1143 :             VISIT(st, expr, s->v.ClassDef.kwargs);

  002ca	48 8b cb	 mov	 rcx, rbx
  002cd	e8 00 00 00 00	 call	 symtable_visit_expr
  002d2	85 c0		 test	 eax, eax
  002d4	0f 84 7d 08 00
	00		 je	 $LN297@symtable_v@15
$LN138@symtable_v@15:

; 1144 :         if (s->v.ClassDef.decorator_list)

  002da	48 8b 77 38	 mov	 rsi, QWORD PTR [rdi+56]
  002de	48 85 f6	 test	 rsi, rsi
  002e1	74 45		 je	 SHORT $LN134@symtable_v@15

; 1145 :             VISIT_SEQ(st, expr, s->v.ClassDef.decorator_list);

  002e3	33 ff		 xor	 edi, edi
  002e5	48 8d 6e 08	 lea	 rbp, QWORD PTR [rsi+8]
  002e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL136@symtable_v@15:
  002f0	48 85 f6	 test	 rsi, rsi
  002f3	75 04		 jne	 SHORT $LN195@symtable_v@15
  002f5	33 c9		 xor	 ecx, ecx
  002f7	eb 03		 jmp	 SHORT $LN196@symtable_v@15
$LN195@symtable_v@15:
  002f9	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
$LN196@symtable_v@15:
  002fc	48 63 c7	 movsxd	 rax, edi
  002ff	48 3b c1	 cmp	 rax, rcx
  00302	7d 1c		 jge	 SHORT $LN301@symtable_v@15
  00304	48 8b 55 00	 mov	 rdx, QWORD PTR [rbp]
  00308	48 8b cb	 mov	 rcx, rbx
  0030b	e8 00 00 00 00	 call	 symtable_visit_expr
  00310	85 c0		 test	 eax, eax
  00312	0f 84 3f 08 00
	00		 je	 $LN297@symtable_v@15
  00318	ff c7		 inc	 edi
  0031a	48 83 c5 08	 add	 rbp, 8
  0031e	eb d0		 jmp	 SHORT $LL136@symtable_v@15
$LN301@symtable_v@15:

; 1211 :         VISIT_SEQ(st, stmt, s->v.Try.orelse);

  00320	48 8b bc 24 58
	01 00 00	 mov	 rdi, QWORD PTR s$[rsp]
$LN134@symtable_v@15:

; 1146 :         if (!symtable_enter_block(st, s->v.ClassDef.name, ClassBlock,
; 1147 :                                   (void *)s, s->lineno, s->col_offset))

  00328	8b 47 44	 mov	 eax, DWORD PTR [rdi+68]
  0032b	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  0032f	4c 8b cf	 mov	 r9, rdi
  00332	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00336	8b 47 40	 mov	 eax, DWORD PTR [rdi+64]
  00339	41 b8 01 00 00
	00		 mov	 r8d, 1
  0033f	48 8b cb	 mov	 rcx, rbx
  00342	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00346	e8 00 00 00 00	 call	 symtable_enter_block
  0034b	85 c0		 test	 eax, eax

; 1148 :             VISIT_QUIT(st, 0);

  0034d	0f 84 04 08 00
	00		 je	 $LN297@symtable_v@15

; 1149 :         if (!GET_IDENTIFIER(__class__) ||
; 1150 :             !symtable_add_def(st, __class__, DEF_LOCAL) ||
; 1151 :             !GET_IDENTIFIER(__locals__) ||
; 1152 :             !symtable_add_def(st, __locals__, DEF_PARAM)) {

  00353	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __class__
  0035a	48 85 c0	 test	 rax, rax
  0035d	75 1c		 jne	 SHORT $LN298@symtable_v@15
  0035f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09LFGACEKG@__class__?$AA@
  00366	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0036b	48 89 05 00 00
	00 00		 mov	 QWORD PTR __class__, rax
  00372	48 85 c0	 test	 rax, rax
  00375	0f 84 bb 00 00
	00		 je	 $LN130@symtable_v@15
$LN298@symtable_v@15:
  0037b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00381	48 8b d0	 mov	 rdx, rax
  00384	48 8b cb	 mov	 rcx, rbx
  00387	e8 00 00 00 00	 call	 symtable_add_def
  0038c	85 c0		 test	 eax, eax
  0038e	0f 84 a2 00 00
	00		 je	 $LN130@symtable_v@15
  00394	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __locals__
  0039b	48 85 c0	 test	 rax, rax
  0039e	75 18		 jne	 SHORT $LN299@symtable_v@15
  003a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@ICMAENDM@__locals__?$AA@
  003a7	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  003ac	48 89 05 00 00
	00 00		 mov	 QWORD PTR __locals__, rax
  003b3	48 85 c0	 test	 rax, rax
  003b6	74 7e		 je	 SHORT $LN130@symtable_v@15
$LN299@symtable_v@15:
  003b8	41 b8 04 00 00
	00		 mov	 r8d, 4
  003be	48 8b d0	 mov	 rdx, rax
  003c1	48 8b cb	 mov	 rcx, rbx
  003c4	e8 00 00 00 00	 call	 symtable_add_def
  003c9	85 c0		 test	 eax, eax
  003cb	74 69		 je	 SHORT $LN130@symtable_v@15

; 1154 :             VISIT_QUIT(st, 0);
; 1155 :         }
; 1156 :         tmp = st->st_private;
; 1157 :         st->st_private = s->v.ClassDef.name;

  003cd	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  003d1	48 8b 53 38	 mov	 rdx, QWORD PTR [rbx+56]
  003d5	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax

; 1158 :         VISIT_SEQ(st, stmt, s->v.ClassDef.body);

  003d9	48 8b 6f 30	 mov	 rbp, QWORD PTR [rdi+48]
  003dd	48 89 94 24 50
	01 00 00	 mov	 QWORD PTR tmp$1$[rsp], rdx
  003e5	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  003e9	33 ff		 xor	 edi, edi
  003eb	0f 1f 44 00 00	 npad	 5
$LL129@symtable_v@15:
  003f0	48 85 ed	 test	 rbp, rbp
  003f3	75 04		 jne	 SHORT $LN201@symtable_v@15
  003f5	33 c9		 xor	 ecx, ecx
  003f7	eb 04		 jmp	 SHORT $LN202@symtable_v@15
$LN201@symtable_v@15:
  003f9	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN202@symtable_v@15:
  003fd	48 63 c7	 movsxd	 rax, edi
  00400	48 3b c1	 cmp	 rax, rcx
  00403	48 8b cb	 mov	 rcx, rbx
  00406	7d 18		 jge	 SHORT $LN127@symtable_v@15
  00408	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  0040b	e8 00 00 00 00	 call	 symtable_visit_stmt
  00410	85 c0		 test	 eax, eax
  00412	0f 84 3f 07 00
	00		 je	 $LN297@symtable_v@15
  00418	ff c7		 inc	 edi
  0041a	48 83 c6 08	 add	 rsi, 8
  0041e	eb d0		 jmp	 SHORT $LL129@symtable_v@15
$LN127@symtable_v@15:

; 1159 :         st->st_private = tmp;

  00420	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR tmp$1$[rsp]
  00428	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax
$LN154@symtable_v@15:

; 1160 :         if (!symtable_exit_block(st, s))

  0042c	e8 00 00 00 00	 call	 symtable_exit_block

; 1161 :             VISIT_QUIT(st, 0);

  00431	e9 19 07 00 00	 jmp	 $LN314@symtable_v@15
$LN130@symtable_v@15:

; 1153 :             symtable_exit_block(st, s);

  00436	48 8b cb	 mov	 rcx, rbx
  00439	e8 00 00 00 00	 call	 symtable_exit_block

; 1299 :                 VISIT_QUIT(st, 0);
; 1300 :         }
; 1301 :         break;
; 1302 :     }
; 1303 :     case Expr_kind:
; 1304 :         VISIT(st, expr, s->v.Expr.value);

  0043e	ff 4b 48	 dec	 DWORD PTR [rbx+72]
  00441	33 c0		 xor	 eax, eax
  00443	eb 2c		 jmp	 SHORT $LN307@symtable_v@15
$LN124@symtable_v@15:

; 1162 :         break;
; 1163 :     }
; 1164 :     case Return_kind:
; 1165 :         if (s->v.Return.value) {

  00445	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  00449	48 85 d2	 test	 rdx, rdx
  0044c	74 1b		 je	 SHORT $LN2@symtable_v@15

; 1166 :             VISIT(st, expr, s->v.Return.value);

  0044e	48 8b cb	 mov	 rcx, rbx
  00451	e8 00 00 00 00	 call	 symtable_visit_expr
  00456	85 c0		 test	 eax, eax
  00458	0f 84 f9 06 00
	00		 je	 $LN297@symtable_v@15

; 1167 :             st->st_cur->ste_returns_value = 1;

  0045e	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00462	83 88 94 00 00
	00 20		 or	 DWORD PTR [rax+148], 32	; 00000020H
$LN2@symtable_v@15:

; 1314 :         break;
; 1315 :     }
; 1316 :     VISIT_QUIT(st, 1);

  00469	ff 4b 48	 dec	 DWORD PTR [rbx+72]
  0046c	b8 01 00 00 00	 mov	 eax, 1
$LN307@symtable_v@15:
  00471	48 8b ac 24 68
	01 00 00	 mov	 rbp, QWORD PTR [rsp+360]
  00479	48 8b b4 24 30
	01 00 00	 mov	 rsi, QWORD PTR [rsp+304]

; 1317 : }

  00481	48 81 c4 38 01
	00 00		 add	 rsp, 312		; 00000138H
  00488	5f		 pop	 rdi
  00489	5b		 pop	 rbx
  0048a	c3		 ret	 0
$LN121@symtable_v@15:

; 1168 :         }
; 1169 :         break;
; 1170 :     case Delete_kind:
; 1171 :         VISIT_SEQ(st, expr, s->v.Delete.targets);

  0048b	48 8b 6f 08	 mov	 rbp, QWORD PTR [rdi+8]
  0048f	33 ff		 xor	 edi, edi
  00491	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
$LL120@symtable_v@15:
  00495	48 85 ed	 test	 rbp, rbp
  00498	75 04		 jne	 SHORT $LN203@symtable_v@15
  0049a	33 c9		 xor	 ecx, ecx
  0049c	eb 04		 jmp	 SHORT $LN204@symtable_v@15
$LN203@symtable_v@15:
  0049e	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN204@symtable_v@15:
  004a2	48 63 c7	 movsxd	 rax, edi
  004a5	48 3b c1	 cmp	 rax, rcx
  004a8	7d bf		 jge	 SHORT $LN2@symtable_v@15
  004aa	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  004ad	48 8b cb	 mov	 rcx, rbx
  004b0	e8 00 00 00 00	 call	 symtable_visit_expr
  004b5	85 c0		 test	 eax, eax
  004b7	0f 84 9a 06 00
	00		 je	 $LN297@symtable_v@15
  004bd	ff c7		 inc	 edi
  004bf	48 83 c6 08	 add	 rsi, 8
  004c3	eb d0		 jmp	 SHORT $LL120@symtable_v@15
$LN116@symtable_v@15:

; 1172 :         break;
; 1173 :     case Assign_kind:
; 1174 :         VISIT_SEQ(st, expr, s->v.Assign.targets);

  004c5	48 8b 6f 08	 mov	 rbp, QWORD PTR [rdi+8]
  004c9	33 ff		 xor	 edi, edi
  004cb	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  004cf	90		 npad	 1
$LL115@symtable_v@15:
  004d0	48 85 ed	 test	 rbp, rbp
  004d3	75 04		 jne	 SHORT $LN205@symtable_v@15
  004d5	33 c9		 xor	 ecx, ecx
  004d7	eb 04		 jmp	 SHORT $LN206@symtable_v@15
$LN205@symtable_v@15:
  004d9	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN206@symtable_v@15:
  004dd	48 63 c7	 movsxd	 rax, edi
  004e0	48 3b c1	 cmp	 rax, rcx
  004e3	48 8b cb	 mov	 rcx, rbx
  004e6	7d 18		 jge	 SHORT $LN113@symtable_v@15
  004e8	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  004eb	e8 00 00 00 00	 call	 symtable_visit_expr
  004f0	85 c0		 test	 eax, eax
  004f2	0f 84 5f 06 00
	00		 je	 $LN297@symtable_v@15
  004f8	ff c7		 inc	 edi
  004fa	48 83 c6 08	 add	 rsi, 8
  004fe	eb d0		 jmp	 SHORT $LL115@symtable_v@15
$LN113@symtable_v@15:

; 1175 :         VISIT(st, expr, s->v.Assign.value);

  00500	48 8b ac 24 58
	01 00 00	 mov	 rbp, QWORD PTR s$[rsp]
  00508	48 8b 55 10	 mov	 rdx, QWORD PTR [rbp+16]
  0050c	e9 39 06 00 00	 jmp	 $LN313@symtable_v@15
$LN110@symtable_v@15:

; 1176 :         break;
; 1177 :     case AugAssign_kind:
; 1178 :         VISIT(st, expr, s->v.AugAssign.target);

  00511	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  00515	48 8b cb	 mov	 rcx, rbx
  00518	e8 00 00 00 00	 call	 symtable_visit_expr
  0051d	85 c0		 test	 eax, eax
  0051f	0f 84 32 06 00
	00		 je	 $LN297@symtable_v@15

; 1179 :         VISIT(st, expr, s->v.AugAssign.value);

  00525	48 8b 57 18	 mov	 rdx, QWORD PTR [rdi+24]
  00529	e9 19 06 00 00	 jmp	 $LN312@symtable_v@15
$LN107@symtable_v@15:

; 1180 :         break;
; 1181 :     case For_kind:
; 1182 :         VISIT(st, expr, s->v.For.target);

  0052e	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  00532	48 8b cb	 mov	 rcx, rbx
  00535	e8 00 00 00 00	 call	 symtable_visit_expr
  0053a	85 c0		 test	 eax, eax
  0053c	0f 84 15 06 00
	00		 je	 $LN297@symtable_v@15

; 1183 :         VISIT(st, expr, s->v.For.iter);

  00542	48 8b 57 10	 mov	 rdx, QWORD PTR [rdi+16]
  00546	48 8b cb	 mov	 rcx, rbx
  00549	e8 00 00 00 00	 call	 symtable_visit_expr
  0054e	85 c0		 test	 eax, eax
  00550	0f 84 01 06 00
	00		 je	 $LN297@symtable_v@15

; 1184 :         VISIT_SEQ(st, stmt, s->v.For.body);

  00556	48 8b 6f 18	 mov	 rbp, QWORD PTR [rdi+24]
  0055a	33 ff		 xor	 edi, edi
  0055c	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
$LL104@symtable_v@15:
  00560	48 85 ed	 test	 rbp, rbp
  00563	75 04		 jne	 SHORT $LN207@symtable_v@15
  00565	33 c9		 xor	 ecx, ecx
  00567	eb 04		 jmp	 SHORT $LN208@symtable_v@15
$LN207@symtable_v@15:
  00569	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN208@symtable_v@15:
  0056d	48 63 c7	 movsxd	 rax, edi
  00570	48 3b c1	 cmp	 rax, rcx
  00573	7d 1b		 jge	 SHORT $LN102@symtable_v@15
  00575	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  00578	48 8b cb	 mov	 rcx, rbx
  0057b	e8 00 00 00 00	 call	 symtable_visit_stmt
  00580	85 c0		 test	 eax, eax
  00582	0f 84 cf 05 00
	00		 je	 $LN297@symtable_v@15
  00588	ff c7		 inc	 edi
  0058a	48 83 c6 08	 add	 rsi, 8
  0058e	eb d0		 jmp	 SHORT $LL104@symtable_v@15
$LN102@symtable_v@15:

; 1185 :         if (s->v.For.orelse)

  00590	48 8b ac 24 58
	01 00 00	 mov	 rbp, QWORD PTR s$[rsp]
  00598	48 8b 6d 20	 mov	 rbp, QWORD PTR [rbp+32]
  0059c	48 85 ed	 test	 rbp, rbp
  0059f	0f 84 c4 fe ff
	ff		 je	 $LN2@symtable_v@15

; 1186 :             VISIT_SEQ(st, stmt, s->v.For.orelse);

  005a5	33 ff		 xor	 edi, edi
  005a7	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  005ab	0f 1f 44 00 00	 npad	 5
$LL99@symtable_v@15:
  005b0	48 85 ed	 test	 rbp, rbp
  005b3	75 04		 jne	 SHORT $LN209@symtable_v@15
  005b5	33 c9		 xor	 ecx, ecx
  005b7	eb 04		 jmp	 SHORT $LN210@symtable_v@15
$LN209@symtable_v@15:
  005b9	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN210@symtable_v@15:
  005bd	48 63 c7	 movsxd	 rax, edi
  005c0	48 3b c1	 cmp	 rax, rcx
  005c3	0f 8d a0 fe ff
	ff		 jge	 $LN2@symtable_v@15
  005c9	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  005cc	48 8b cb	 mov	 rcx, rbx
  005cf	e8 00 00 00 00	 call	 symtable_visit_stmt
  005d4	85 c0		 test	 eax, eax
  005d6	0f 84 7b 05 00
	00		 je	 $LN297@symtable_v@15
  005dc	ff c7		 inc	 edi
  005de	48 83 c6 08	 add	 rsi, 8
  005e2	eb cc		 jmp	 SHORT $LL99@symtable_v@15
$LN95@symtable_v@15:

; 1187 :         break;
; 1188 :     case While_kind:
; 1189 :         VISIT(st, expr, s->v.While.test);

  005e4	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  005e8	48 8b cb	 mov	 rcx, rbx
  005eb	e8 00 00 00 00	 call	 symtable_visit_expr
  005f0	85 c0		 test	 eax, eax
  005f2	0f 84 5f 05 00
	00		 je	 $LN297@symtable_v@15

; 1190 :         VISIT_SEQ(st, stmt, s->v.While.body);

  005f8	48 8b 6f 10	 mov	 rbp, QWORD PTR [rdi+16]
  005fc	33 ff		 xor	 edi, edi
  005fe	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
$LL93@symtable_v@15:
  00602	48 85 ed	 test	 rbp, rbp
  00605	75 04		 jne	 SHORT $LN211@symtable_v@15
  00607	33 c9		 xor	 ecx, ecx
  00609	eb 04		 jmp	 SHORT $LN212@symtable_v@15
$LN211@symtable_v@15:
  0060b	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN212@symtable_v@15:
  0060f	48 63 c7	 movsxd	 rax, edi
  00612	48 3b c1	 cmp	 rax, rcx
  00615	7d 1b		 jge	 SHORT $LN91@symtable_v@15
  00617	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  0061a	48 8b cb	 mov	 rcx, rbx
  0061d	e8 00 00 00 00	 call	 symtable_visit_stmt
  00622	85 c0		 test	 eax, eax
  00624	0f 84 2d 05 00
	00		 je	 $LN297@symtable_v@15
  0062a	ff c7		 inc	 edi
  0062c	48 83 c6 08	 add	 rsi, 8
  00630	eb d0		 jmp	 SHORT $LL93@symtable_v@15
$LN91@symtable_v@15:

; 1191 :         if (s->v.While.orelse)

  00632	48 8b ac 24 58
	01 00 00	 mov	 rbp, QWORD PTR s$[rsp]
  0063a	48 8b 6d 18	 mov	 rbp, QWORD PTR [rbp+24]
  0063e	48 85 ed	 test	 rbp, rbp
  00641	0f 84 22 fe ff
	ff		 je	 $LN2@symtable_v@15

; 1192 :             VISIT_SEQ(st, stmt, s->v.While.orelse);

  00647	33 ff		 xor	 edi, edi
  00649	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  0064d	0f 1f 00	 npad	 3
$LL88@symtable_v@15:
  00650	48 85 ed	 test	 rbp, rbp
  00653	75 04		 jne	 SHORT $LN213@symtable_v@15
  00655	33 c9		 xor	 ecx, ecx
  00657	eb 04		 jmp	 SHORT $LN214@symtable_v@15
$LN213@symtable_v@15:
  00659	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN214@symtable_v@15:
  0065d	48 63 c7	 movsxd	 rax, edi
  00660	48 3b c1	 cmp	 rax, rcx
  00663	0f 8d 00 fe ff
	ff		 jge	 $LN2@symtable_v@15
  00669	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  0066c	48 8b cb	 mov	 rcx, rbx
  0066f	e8 00 00 00 00	 call	 symtable_visit_stmt
  00674	85 c0		 test	 eax, eax
  00676	0f 84 db 04 00
	00		 je	 $LN297@symtable_v@15
  0067c	ff c7		 inc	 edi
  0067e	48 83 c6 08	 add	 rsi, 8
  00682	eb cc		 jmp	 SHORT $LL88@symtable_v@15
$LN84@symtable_v@15:

; 1193 :         break;
; 1194 :     case If_kind:
; 1195 :         /* XXX if 0: and lookup_yield() hacks */
; 1196 :         VISIT(st, expr, s->v.If.test);

  00684	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  00688	48 8b cb	 mov	 rcx, rbx
  0068b	e8 00 00 00 00	 call	 symtable_visit_expr
  00690	85 c0		 test	 eax, eax
  00692	0f 84 bf 04 00
	00		 je	 $LN297@symtable_v@15

; 1197 :         VISIT_SEQ(st, stmt, s->v.If.body);

  00698	48 8b 6f 10	 mov	 rbp, QWORD PTR [rdi+16]
  0069c	33 ff		 xor	 edi, edi
  0069e	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
$LL82@symtable_v@15:
  006a2	48 85 ed	 test	 rbp, rbp
  006a5	75 04		 jne	 SHORT $LN215@symtable_v@15
  006a7	33 c9		 xor	 ecx, ecx
  006a9	eb 04		 jmp	 SHORT $LN216@symtable_v@15
$LN215@symtable_v@15:
  006ab	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN216@symtable_v@15:
  006af	48 63 c7	 movsxd	 rax, edi
  006b2	48 3b c1	 cmp	 rax, rcx
  006b5	7d 1b		 jge	 SHORT $LN80@symtable_v@15
  006b7	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  006ba	48 8b cb	 mov	 rcx, rbx
  006bd	e8 00 00 00 00	 call	 symtable_visit_stmt
  006c2	85 c0		 test	 eax, eax
  006c4	0f 84 8d 04 00
	00		 je	 $LN297@symtable_v@15
  006ca	ff c7		 inc	 edi
  006cc	48 83 c6 08	 add	 rsi, 8
  006d0	eb d0		 jmp	 SHORT $LL82@symtable_v@15
$LN80@symtable_v@15:

; 1198 :         if (s->v.If.orelse)

  006d2	48 8b ac 24 58
	01 00 00	 mov	 rbp, QWORD PTR s$[rsp]
  006da	48 8b 6d 18	 mov	 rbp, QWORD PTR [rbp+24]
  006de	48 85 ed	 test	 rbp, rbp
  006e1	0f 84 82 fd ff
	ff		 je	 $LN2@symtable_v@15

; 1199 :             VISIT_SEQ(st, stmt, s->v.If.orelse);

  006e7	33 ff		 xor	 edi, edi
  006e9	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  006ed	0f 1f 00	 npad	 3
$LL77@symtable_v@15:
  006f0	48 85 ed	 test	 rbp, rbp
  006f3	75 04		 jne	 SHORT $LN217@symtable_v@15
  006f5	33 c9		 xor	 ecx, ecx
  006f7	eb 04		 jmp	 SHORT $LN218@symtable_v@15
$LN217@symtable_v@15:
  006f9	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN218@symtable_v@15:
  006fd	48 63 c7	 movsxd	 rax, edi
  00700	48 3b c1	 cmp	 rax, rcx
  00703	0f 8d 60 fd ff
	ff		 jge	 $LN2@symtable_v@15
  00709	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  0070c	48 8b cb	 mov	 rcx, rbx
  0070f	e8 00 00 00 00	 call	 symtable_visit_stmt
  00714	85 c0		 test	 eax, eax
  00716	0f 84 3b 04 00
	00		 je	 $LN297@symtable_v@15
  0071c	ff c7		 inc	 edi
  0071e	48 83 c6 08	 add	 rsi, 8
  00722	eb cc		 jmp	 SHORT $LL77@symtable_v@15
$LN73@symtable_v@15:

; 1200 :         break;
; 1201 :     case Raise_kind:
; 1202 :         if (s->v.Raise.exc) {

  00724	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  00728	48 85 d2	 test	 rdx, rdx
  0072b	0f 84 38 fd ff
	ff		 je	 $LN2@symtable_v@15

; 1203 :             VISIT(st, expr, s->v.Raise.exc);

  00731	48 8b cb	 mov	 rcx, rbx
  00734	e8 00 00 00 00	 call	 symtable_visit_expr
  00739	85 c0		 test	 eax, eax
  0073b	0f 84 16 04 00
	00		 je	 $LN297@symtable_v@15

; 1204 :             if (s->v.Raise.cause) {

  00741	48 8b 57 10	 mov	 rdx, QWORD PTR [rdi+16]
  00745	48 85 d2	 test	 rdx, rdx
  00748	0f 84 1b fd ff
	ff		 je	 $LN2@symtable_v@15

; 1205 :                 VISIT(st, expr, s->v.Raise.cause);

  0074e	e9 f4 03 00 00	 jmp	 $LN312@symtable_v@15
$LN68@symtable_v@15:

; 1206 :             }
; 1207 :         }
; 1208 :         break;
; 1209 :     case Try_kind:
; 1210 :         VISIT_SEQ(st, stmt, s->v.Try.body);

  00753	48 8b 6f 08	 mov	 rbp, QWORD PTR [rdi+8]
  00757	33 ff		 xor	 edi, edi
  00759	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  0075d	0f 1f 00	 npad	 3
$LL67@symtable_v@15:
  00760	48 85 ed	 test	 rbp, rbp
  00763	75 04		 jne	 SHORT $LN219@symtable_v@15
  00765	33 c9		 xor	 ecx, ecx
  00767	eb 04		 jmp	 SHORT $LN220@symtable_v@15
$LN219@symtable_v@15:
  00769	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN220@symtable_v@15:
  0076d	48 63 c7	 movsxd	 rax, edi
  00770	48 3b c1	 cmp	 rax, rcx
  00773	7d 1b		 jge	 SHORT $LN65@symtable_v@15
  00775	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  00778	48 8b cb	 mov	 rcx, rbx
  0077b	e8 00 00 00 00	 call	 symtable_visit_stmt
  00780	85 c0		 test	 eax, eax
  00782	0f 84 cf 03 00
	00		 je	 $LN297@symtable_v@15
  00788	ff c7		 inc	 edi
  0078a	48 83 c6 08	 add	 rsi, 8
  0078e	eb d0		 jmp	 SHORT $LL67@symtable_v@15
$LN65@symtable_v@15:

; 1211 :         VISIT_SEQ(st, stmt, s->v.Try.orelse);

  00790	48 8b 94 24 58
	01 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  00798	33 ff		 xor	 edi, edi
  0079a	48 8b 6a 18	 mov	 rbp, QWORD PTR [rdx+24]
  0079e	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
$LL63@symtable_v@15:
  007a2	48 85 ed	 test	 rbp, rbp
  007a5	75 04		 jne	 SHORT $LN221@symtable_v@15
  007a7	33 c9		 xor	 ecx, ecx
  007a9	eb 04		 jmp	 SHORT $LN222@symtable_v@15
$LN221@symtable_v@15:
  007ab	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN222@symtable_v@15:
  007af	48 63 c7	 movsxd	 rax, edi
  007b2	48 3b c1	 cmp	 rax, rcx
  007b5	7d 1b		 jge	 SHORT $LN61@symtable_v@15
  007b7	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  007ba	48 8b cb	 mov	 rcx, rbx
  007bd	e8 00 00 00 00	 call	 symtable_visit_stmt
  007c2	85 c0		 test	 eax, eax
  007c4	0f 84 8d 03 00
	00		 je	 $LN297@symtable_v@15
  007ca	ff c7		 inc	 edi
  007cc	48 83 c6 08	 add	 rsi, 8
  007d0	eb d0		 jmp	 SHORT $LL63@symtable_v@15
$LN61@symtable_v@15:

; 1212 :         VISIT_SEQ(st, excepthandler, s->v.Try.handlers);

  007d2	48 8b 94 24 58
	01 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  007da	33 ff		 xor	 edi, edi
  007dc	48 8b 6a 10	 mov	 rbp, QWORD PTR [rdx+16]
  007e0	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
$LL59@symtable_v@15:
  007e4	48 85 ed	 test	 rbp, rbp
  007e7	75 04		 jne	 SHORT $LN223@symtable_v@15
  007e9	33 c9		 xor	 ecx, ecx
  007eb	eb 04		 jmp	 SHORT $LN224@symtable_v@15
$LN223@symtable_v@15:
  007ed	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN224@symtable_v@15:
  007f1	48 63 c7	 movsxd	 rax, edi
  007f4	48 3b c1	 cmp	 rax, rcx
  007f7	7d 1b		 jge	 SHORT $LN57@symtable_v@15
  007f9	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  007fc	48 8b cb	 mov	 rcx, rbx
  007ff	e8 00 00 00 00	 call	 symtable_visit_excepthandler
  00804	85 c0		 test	 eax, eax
  00806	0f 84 4b 03 00
	00		 je	 $LN297@symtable_v@15
  0080c	ff c7		 inc	 edi
  0080e	48 83 c6 08	 add	 rsi, 8
  00812	eb d0		 jmp	 SHORT $LL59@symtable_v@15
$LN57@symtable_v@15:

; 1213 :         VISIT_SEQ(st, stmt, s->v.Try.finalbody);

  00814	48 8b ac 24 58
	01 00 00	 mov	 rbp, QWORD PTR s$[rsp]
  0081c	33 ff		 xor	 edi, edi
  0081e	48 8b 6d 20	 mov	 rbp, QWORD PTR [rbp+32]
  00822	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
$LL55@symtable_v@15:
  00826	48 85 ed	 test	 rbp, rbp
  00829	75 04		 jne	 SHORT $LN225@symtable_v@15
  0082b	33 c9		 xor	 ecx, ecx
  0082d	eb 04		 jmp	 SHORT $LN226@symtable_v@15
$LN225@symtable_v@15:
  0082f	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN226@symtable_v@15:
  00833	48 63 c7	 movsxd	 rax, edi
  00836	48 3b c1	 cmp	 rax, rcx
  00839	0f 8d 2a fc ff
	ff		 jge	 $LN2@symtable_v@15
  0083f	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  00842	48 8b cb	 mov	 rcx, rbx
  00845	e8 00 00 00 00	 call	 symtable_visit_stmt
  0084a	85 c0		 test	 eax, eax
  0084c	0f 84 05 03 00
	00		 je	 $LN297@symtable_v@15
  00852	ff c7		 inc	 edi
  00854	48 83 c6 08	 add	 rsi, 8
  00858	eb cc		 jmp	 SHORT $LL55@symtable_v@15
$LN51@symtable_v@15:

; 1214 :         break;
; 1215 :     case Assert_kind:
; 1216 :         VISIT(st, expr, s->v.Assert.test);

  0085a	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  0085e	48 8b cb	 mov	 rcx, rbx
  00861	e8 00 00 00 00	 call	 symtable_visit_expr
  00866	85 c0		 test	 eax, eax
  00868	0f 84 e9 02 00
	00		 je	 $LN297@symtable_v@15

; 1217 :         if (s->v.Assert.msg)

  0086e	48 8b 57 10	 mov	 rdx, QWORD PTR [rdi+16]
  00872	48 85 d2	 test	 rdx, rdx
  00875	0f 84 ee fb ff
	ff		 je	 $LN2@symtable_v@15

; 1218 :             VISIT(st, expr, s->v.Assert.msg);

  0087b	e9 c7 02 00 00	 jmp	 $LN312@symtable_v@15
$LN47@symtable_v@15:

; 1219 :         break;
; 1220 :     case Import_kind:
; 1221 :         VISIT_SEQ(st, alias, s->v.Import.names);

  00880	48 8b 6f 08	 mov	 rbp, QWORD PTR [rdi+8]
  00884	33 ff		 xor	 edi, edi
  00886	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  0088a	66 0f 1f 44 00
	00		 npad	 6
$LL46@symtable_v@15:
  00890	48 85 ed	 test	 rbp, rbp
  00893	75 04		 jne	 SHORT $LN227@symtable_v@15
  00895	33 c9		 xor	 ecx, ecx
  00897	eb 04		 jmp	 SHORT $LN228@symtable_v@15
$LN227@symtable_v@15:
  00899	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN228@symtable_v@15:
  0089d	48 63 c7	 movsxd	 rax, edi
  008a0	48 3b c1	 cmp	 rax, rcx
  008a3	7d 1b		 jge	 SHORT $LN44@symtable_v@15
  008a5	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  008a8	48 8b cb	 mov	 rcx, rbx
  008ab	e8 00 00 00 00	 call	 symtable_visit_alias
  008b0	85 c0		 test	 eax, eax
  008b2	0f 84 9f 02 00
	00		 je	 $LN297@symtable_v@15
  008b8	ff c7		 inc	 edi
  008ba	48 83 c6 08	 add	 rsi, 8
  008be	eb d0		 jmp	 SHORT $LL46@symtable_v@15
$LN44@symtable_v@15:

; 1222 :         /* XXX Don't have the lineno available inside
; 1223 :            visit_alias */
; 1224 :         if (st->st_cur->ste_unoptimized && !st->st_cur->ste_opt_lineno) {

  008c0	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  008c4	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [rcx+140], 0
  008cb	0f 84 98 fb ff
	ff		 je	 $LN2@symtable_v@15
  008d1	83 b9 a0 00 00
	00 00		 cmp	 DWORD PTR [rcx+160], 0
  008d8	0f 85 8b fb ff
	ff		 jne	 $LN2@symtable_v@15

; 1225 :             st->st_cur->ste_opt_lineno = s->lineno;

  008de	48 8b 94 24 58
	01 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  008e6	8b 42 40	 mov	 eax, DWORD PTR [rdx+64]
  008e9	89 81 a0 00 00
	00		 mov	 DWORD PTR [rcx+160], eax

; 1226 :             st->st_cur->ste_opt_col_offset = s->col_offset;

  008ef	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  008f3	8b 42 44	 mov	 eax, DWORD PTR [rdx+68]
  008f6	89 81 a4 00 00
	00		 mov	 DWORD PTR [rcx+164], eax

; 1227 :         }
; 1228 :         break;

  008fc	e9 68 fb ff ff	 jmp	 $LN2@symtable_v@15
$LN41@symtable_v@15:

; 1229 :     case ImportFrom_kind:
; 1230 :         VISIT_SEQ(st, alias, s->v.ImportFrom.names);

  00901	48 8b 6f 10	 mov	 rbp, QWORD PTR [rdi+16]
  00905	33 ff		 xor	 edi, edi
  00907	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  0090b	0f 1f 44 00 00	 npad	 5
$LL40@symtable_v@15:
  00910	48 85 ed	 test	 rbp, rbp
  00913	75 04		 jne	 SHORT $LN229@symtable_v@15
  00915	33 c9		 xor	 ecx, ecx
  00917	eb 04		 jmp	 SHORT $LN230@symtable_v@15
$LN229@symtable_v@15:
  00919	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN230@symtable_v@15:
  0091d	48 63 c7	 movsxd	 rax, edi
  00920	48 3b c1	 cmp	 rax, rcx
  00923	7d 9b		 jge	 SHORT $LN44@symtable_v@15
  00925	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  00928	48 8b cb	 mov	 rcx, rbx
  0092b	e8 00 00 00 00	 call	 symtable_visit_alias
  00930	85 c0		 test	 eax, eax
  00932	0f 84 1f 02 00
	00		 je	 $LN297@symtable_v@15
  00938	ff c7		 inc	 edi
  0093a	48 83 c6 08	 add	 rsi, 8
  0093e	eb d0		 jmp	 SHORT $LL40@symtable_v@15
$LN35@symtable_v@15:

; 1231 :         /* XXX Don't have the lineno available inside
; 1232 :            visit_alias */
; 1233 :         if (st->st_cur->ste_unoptimized && !st->st_cur->ste_opt_lineno) {
; 1234 :             st->st_cur->ste_opt_lineno = s->lineno;
; 1235 :             st->st_cur->ste_opt_col_offset = s->col_offset;
; 1236 :         }
; 1237 :         break;
; 1238 :     case Global_kind: {
; 1239 :         int i;
; 1240 :         asdl_seq *seq = s->v.Global.names;

  00940	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]

; 1241 :         for (i = 0; i < asdl_seq_LEN(seq); i++) {

  00944	33 ed		 xor	 ebp, ebp
  00946	48 8d 50 08	 lea	 rdx, QWORD PTR [rax+8]
  0094a	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR seq$1$[rsp], rax
$LN309@symtable_v@15:
  00952	48 89 94 24 50
	01 00 00	 mov	 QWORD PTR tv2605[rsp], rdx
  0095a	48 85 c0	 test	 rax, rax
  0095d	75 04		 jne	 SHORT $LN231@symtable_v@15
  0095f	33 c9		 xor	 ecx, ecx
  00961	eb 03		 jmp	 SHORT $LN232@symtable_v@15
$LN231@symtable_v@15:
  00963	48 8b 08	 mov	 rcx, QWORD PTR [rax]
$LN232@symtable_v@15:
  00966	48 63 c5	 movsxd	 rax, ebp
  00969	48 3b c1	 cmp	 rax, rcx
  0096c	0f 8d f7 fa ff
	ff		 jge	 $LN2@symtable_v@15

; 1242 :             identifier name = (identifier)asdl_seq_GET(seq, i);
; 1243 :             long cur;
; 1244 :             if (st->st_cur->ste_type == ClassBlock &&
; 1245 :                 !PyUnicode_CompareWithASCIIString(name, "__class__")) {

  00972	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00976	48 8b 32	 mov	 rsi, QWORD PTR [rdx]
  00979	83 b8 88 00 00
	00 01		 cmp	 DWORD PTR [rax+136], 1
  00980	75 17		 jne	 SHORT $LN31@symtable_v@15
  00982	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09LFGACEKG@__class__?$AA@
  00989	48 8b ce	 mov	 rcx, rsi
  0098c	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00991	85 c0		 test	 eax, eax
  00993	0f 84 af 00 00
	00		 je	 $LN287@symtable_v@15
$LN31@symtable_v@15:

; 1249 :             }
; 1250 :             cur = symtable_lookup(st, name);

  00999	48 8b d6	 mov	 rdx, rsi
  0099c	48 8b cb	 mov	 rcx, rbx
  0099f	e8 00 00 00 00	 call	 symtable_lookup
  009a4	8b f8		 mov	 edi, eax

; 1251 :             if (cur < 0)

  009a6	85 c0		 test	 eax, eax
  009a8	0f 88 a9 01 00
	00		 js	 $LN297@symtable_v@15

; 1252 :                 VISIT_QUIT(st, 0);
; 1253 :             if (cur & (DEF_LOCAL | USE)) {

  009ae	a8 12		 test	 al, 18
  009b0	74 5a		 je	 SHORT $LN302@symtable_v@15

; 1254 :                 char buf[256];
; 1255 :                 char *c_name = _PyUnicode_AsString(name);

  009b2	48 8b ce	 mov	 rcx, rsi
  009b5	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 1256 :                 if (!c_name)

  009ba	48 85 c0	 test	 rax, rax
  009bd	0f 84 97 01 00
	00		 je	 $LN293@symtable_v@15

; 1257 :                     return 0;
; 1258 :                 if (cur & DEF_LOCAL)
; 1259 :                     PyOS_snprintf(buf, sizeof(buf),
; 1260 :                                   GLOBAL_AFTER_ASSIGN,
; 1261 :                                   c_name);

  009c3	4c 8b c8	 mov	 r9, rax
  009c6	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  009cb	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$22535[rsp]
  009d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DH@LJMCNDPN@name?5?8?$CF?4400s?8?5is?5assigned?5to?5bef@
  009d7	40 f6 c7 02	 test	 dil, 2
  009db	75 07		 jne	 SHORT $LN308@symtable_v@15

; 1262 :                 else
; 1263 :                     PyOS_snprintf(buf, sizeof(buf),
; 1264 :                                   GLOBAL_AFTER_USE,
; 1265 :                                   c_name);

  009dd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DC@GDNGFAAH@name?5?8?$CF?4400s?8?5is?5used?5prior?5to?5g@
$LN308@symtable_v@15:
  009e4	e8 00 00 00 00	 call	 PyOS_snprintf

; 1266 :                 if (!symtable_warn(st, buf, s->lineno))

  009e9	48 8b bc 24 58
	01 00 00	 mov	 rdi, QWORD PTR s$[rsp]
  009f1	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$22535[rsp]
  009f6	44 8b 47 40	 mov	 r8d, DWORD PTR [rdi+64]
  009fa	48 8b cb	 mov	 rcx, rbx
  009fd	e8 00 00 00 00	 call	 symtable_warn
  00a02	85 c0		 test	 eax, eax
  00a04	0f 84 4d 01 00
	00		 je	 $LN297@symtable_v@15
  00a0a	eb 08		 jmp	 SHORT $LN25@symtable_v@15
$LN302@symtable_v@15:

; 1106 : {

  00a0c	48 8b bc 24 58
	01 00 00	 mov	 rdi, QWORD PTR s$[rsp]
$LN25@symtable_v@15:

; 1267 :                     VISIT_QUIT(st, 0);
; 1268 :             }
; 1269 :             if (!symtable_add_def(st, name, DEF_GLOBAL))

  00a14	41 b8 01 00 00
	00		 mov	 r8d, 1
  00a1a	48 8b d6	 mov	 rdx, rsi
  00a1d	48 8b cb	 mov	 rcx, rbx
  00a20	e8 00 00 00 00	 call	 symtable_add_def
  00a25	85 c0		 test	 eax, eax
  00a27	0f 84 2a 01 00
	00		 je	 $LN297@symtable_v@15

; 1241 :         for (i = 0; i < asdl_seq_LEN(seq); i++) {

  00a2d	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR tv2605[rsp]
  00a35	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR seq$1$[rsp]
  00a3d	ff c5		 inc	 ebp
  00a3f	48 83 c2 08	 add	 rdx, 8
  00a43	e9 0a ff ff ff	 jmp	 $LN309@symtable_v@15
$LN287@symtable_v@15:

; 1246 :                 PyErr_SetString(PyExc_SyntaxError, "cannot make __class__ global");

  00a48	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  00a4f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@GJGDMEHB@cannot?5make?5__class__?5global?$AA@
  00a56	e8 00 00 00 00	 call	 PyErr_SetString

; 1247 :                 PyErr_SyntaxLocationEx(st->st_filename, s->lineno, s->col_offset);

  00a5b	44 8b 47 44	 mov	 r8d, DWORD PTR [rdi+68]
  00a5f	8b 57 40	 mov	 edx, DWORD PTR [rdi+64]
  00a62	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00a65	e8 00 00 00 00	 call	 PyErr_SyntaxLocationEx

; 1248 :                 return 0;

  00a6a	33 c0		 xor	 eax, eax
  00a6c	e9 00 fa ff ff	 jmp	 $LN307@symtable_v@15
$LN23@symtable_v@15:

; 1270 :                 VISIT_QUIT(st, 0);
; 1271 :         }
; 1272 :         break;
; 1273 :     }
; 1274 :     case Nonlocal_kind: {
; 1275 :         int i;
; 1276 :         asdl_seq *seq = s->v.Nonlocal.names;

  00a71	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]

; 1277 :         for (i = 0; i < asdl_seq_LEN(seq); i++) {

  00a75	33 f6		 xor	 esi, esi
  00a77	48 8d 50 08	 lea	 rdx, QWORD PTR [rax+8]
  00a7b	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR seq$1$[rsp], rax
$LN311@symtable_v@15:
  00a83	48 89 94 24 50
	01 00 00	 mov	 QWORD PTR tv2604[rsp], rdx
  00a8b	48 85 c0	 test	 rax, rax
  00a8e	75 04		 jne	 SHORT $LN233@symtable_v@15
  00a90	33 c9		 xor	 ecx, ecx
  00a92	eb 03		 jmp	 SHORT $LN234@symtable_v@15
$LN233@symtable_v@15:
  00a94	48 8b 08	 mov	 rcx, QWORD PTR [rax]
$LN234@symtable_v@15:
  00a97	48 63 c6	 movsxd	 rax, esi
  00a9a	48 3b c1	 cmp	 rax, rcx
  00a9d	0f 8d c6 f9 ff
	ff		 jge	 $LN2@symtable_v@15

; 1278 :             identifier name = (identifier)asdl_seq_GET(seq, i);

  00aa3	48 8b 2a	 mov	 rbp, QWORD PTR [rdx]

; 1279 :             long cur = symtable_lookup(st, name);

  00aa6	48 8b cb	 mov	 rcx, rbx
  00aa9	48 8b d5	 mov	 rdx, rbp
  00aac	e8 00 00 00 00	 call	 symtable_lookup
  00ab1	8b f8		 mov	 edi, eax

; 1280 :             if (cur < 0)

  00ab3	85 c0		 test	 eax, eax
  00ab5	0f 88 9c 00 00
	00		 js	 $LN297@symtable_v@15

; 1281 :                 VISIT_QUIT(st, 0);
; 1282 :             if (cur & (DEF_LOCAL | USE)) {

  00abb	a8 12		 test	 al, 18
  00abd	74 54		 je	 SHORT $LN14@symtable_v@15

; 1283 :                 char buf[256];
; 1284 :                 char *c_name = _PyUnicode_AsString(name);

  00abf	48 8b cd	 mov	 rcx, rbp
  00ac2	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 1285 :                 if (!c_name)

  00ac7	48 85 c0	 test	 rax, rax
  00aca	0f 84 8a 00 00
	00		 je	 $LN293@symtable_v@15

; 1286 :                     return 0;
; 1287 :                 if (cur & DEF_LOCAL)
; 1288 :                     PyOS_snprintf(buf, sizeof(buf),
; 1289 :                                   NONLOCAL_AFTER_ASSIGN,
; 1290 :                                   c_name);

  00ad0	4c 8b c8	 mov	 r9, rax
  00ad3	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00ad8	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$22556[rsp]
  00add	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DJ@JIAAIOIF@name?5?8?$CF?4400s?8?5is?5assigned?5to?5bef@
  00ae4	40 f6 c7 02	 test	 dil, 2
  00ae8	75 07		 jne	 SHORT $LN310@symtable_v@15

; 1291 :                 else
; 1292 :                     PyOS_snprintf(buf, sizeof(buf),
; 1293 :                                   NONLOCAL_AFTER_USE,
; 1294 :                                   c_name);

  00aea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DE@COCIPDM@name?5?8?$CF?4400s?8?5is?5used?5prior?5to?5n@
$LN310@symtable_v@15:
  00af1	e8 00 00 00 00	 call	 PyOS_snprintf

; 1295 :                 if (!symtable_warn(st, buf, s->lineno))

  00af6	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00afe	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$22556[rsp]
  00b03	44 8b 40 40	 mov	 r8d, DWORD PTR [rax+64]
  00b07	48 8b cb	 mov	 rcx, rbx
  00b0a	e8 00 00 00 00	 call	 symtable_warn
  00b0f	85 c0		 test	 eax, eax
  00b11	74 44		 je	 SHORT $LN297@symtable_v@15
$LN14@symtable_v@15:

; 1296 :                     VISIT_QUIT(st, 0);
; 1297 :             }
; 1298 :             if (!symtable_add_def(st, name, DEF_NONLOCAL))

  00b13	41 b8 08 00 00
	00		 mov	 r8d, 8
  00b19	48 8b d5	 mov	 rdx, rbp
  00b1c	48 8b cb	 mov	 rcx, rbx
  00b1f	e8 00 00 00 00	 call	 symtable_add_def
  00b24	85 c0		 test	 eax, eax
  00b26	74 2f		 je	 SHORT $LN297@symtable_v@15

; 1277 :         for (i = 0; i < asdl_seq_LEN(seq); i++) {

  00b28	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR tv2604[rsp]
  00b30	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR seq$1$[rsp]
  00b38	ff c6		 inc	 esi
  00b3a	48 83 c2 08	 add	 rdx, 8
  00b3e	e9 40 ff ff ff	 jmp	 $LN311@symtable_v@15
$LN12@symtable_v@15:

; 1299 :                 VISIT_QUIT(st, 0);
; 1300 :         }
; 1301 :         break;
; 1302 :     }
; 1303 :     case Expr_kind:
; 1304 :         VISIT(st, expr, s->v.Expr.value);

  00b43	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
$LN312@symtable_v@15:
  00b47	48 8b cb	 mov	 rcx, rbx
$LN313@symtable_v@15:
  00b4a	e8 00 00 00 00	 call	 symtable_visit_expr
$LN314@symtable_v@15:
  00b4f	85 c0		 test	 eax, eax
  00b51	0f 85 12 f9 ff
	ff		 jne	 $LN2@symtable_v@15
$LN297@symtable_v@15:
  00b57	ff 4b 48	 dec	 DWORD PTR [rbx+72]
$LN293@symtable_v@15:
  00b5a	33 c0		 xor	 eax, eax
  00b5c	e9 10 f9 ff ff	 jmp	 $LN307@symtable_v@15
$LN9@symtable_v@15:

; 1305 :         break;
; 1306 :     case Pass_kind:
; 1307 :     case Break_kind:
; 1308 :     case Continue_kind:
; 1309 :         /* nothing to do here */
; 1310 :         break;
; 1311 :     case With_kind:
; 1312 :         VISIT_SEQ(st, withitem, s->v.With.items);

  00b61	48 8b 6f 08	 mov	 rbp, QWORD PTR [rdi+8]
  00b65	33 ff		 xor	 edi, edi
  00b67	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  00b6b	0f 1f 44 00 00	 npad	 5
$LL8@symtable_v@15:
  00b70	48 85 ed	 test	 rbp, rbp
  00b73	75 04		 jne	 SHORT $LN235@symtable_v@15
  00b75	33 c9		 xor	 ecx, ecx
  00b77	eb 04		 jmp	 SHORT $LN236@symtable_v@15
$LN235@symtable_v@15:
  00b79	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN236@symtable_v@15:
  00b7d	48 63 c7	 movsxd	 rax, edi
  00b80	48 3b c1	 cmp	 rax, rcx
  00b83	7d 17		 jge	 SHORT $LN6@symtable_v@15
  00b85	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  00b88	48 8b cb	 mov	 rcx, rbx
  00b8b	e8 00 00 00 00	 call	 symtable_visit_withitem
  00b90	85 c0		 test	 eax, eax
  00b92	74 c3		 je	 SHORT $LN297@symtable_v@15
  00b94	ff c7		 inc	 edi
  00b96	48 83 c6 08	 add	 rsi, 8
  00b9a	eb d4		 jmp	 SHORT $LL8@symtable_v@15
$LN6@symtable_v@15:

; 1313 :         VISIT_SEQ(st, stmt, s->v.With.body);

  00b9c	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00ba4	33 ff		 xor	 edi, edi
  00ba6	48 8b 68 10	 mov	 rbp, QWORD PTR [rax+16]
  00baa	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  00bae	66 90		 npad	 2
$LL4@symtable_v@15:
  00bb0	48 85 ed	 test	 rbp, rbp
  00bb3	75 04		 jne	 SHORT $LN237@symtable_v@15
  00bb5	33 c9		 xor	 ecx, ecx
  00bb7	eb 04		 jmp	 SHORT $LN238@symtable_v@15
$LN237@symtable_v@15:
  00bb9	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN238@symtable_v@15:
  00bbd	48 63 c7	 movsxd	 rax, edi
  00bc0	48 3b c1	 cmp	 rax, rcx
  00bc3	0f 8d a0 f8 ff
	ff		 jge	 $LN2@symtable_v@15
  00bc9	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  00bcc	48 8b cb	 mov	 rcx, rbx
  00bcf	e8 00 00 00 00	 call	 symtable_visit_stmt
  00bd4	85 c0		 test	 eax, eax
  00bd6	0f 84 7b ff ff
	ff		 je	 $LN297@symtable_v@15
  00bdc	ff c7		 inc	 edi
  00bde	48 83 c6 08	 add	 rsi, 8
  00be2	eb cc		 jmp	 SHORT $LL4@symtable_v@15
$LN300@symtable_v@15:

; 1317 : }

  00be4	00 00 00 00	 DD	 $LN177@symtable_v@15
  00be8	00 00 00 00	 DD	 $LN151@symtable_v@15
  00bec	00 00 00 00	 DD	 $LN124@symtable_v@15
  00bf0	00 00 00 00	 DD	 $LN121@symtable_v@15
  00bf4	00 00 00 00	 DD	 $LN116@symtable_v@15
  00bf8	00 00 00 00	 DD	 $LN110@symtable_v@15
  00bfc	00 00 00 00	 DD	 $LN107@symtable_v@15
  00c00	00 00 00 00	 DD	 $LN95@symtable_v@15
  00c04	00 00 00 00	 DD	 $LN84@symtable_v@15
  00c08	00 00 00 00	 DD	 $LN9@symtable_v@15
  00c0c	00 00 00 00	 DD	 $LN73@symtable_v@15
  00c10	00 00 00 00	 DD	 $LN68@symtable_v@15
  00c14	00 00 00 00	 DD	 $LN51@symtable_v@15
  00c18	00 00 00 00	 DD	 $LN47@symtable_v@15
  00c1c	00 00 00 00	 DD	 $LN41@symtable_v@15
  00c20	00 00 00 00	 DD	 $LN35@symtable_v@15
  00c24	00 00 00 00	 DD	 $LN23@symtable_v@15
  00c28	00 00 00 00	 DD	 $LN12@symtable_v@15
symtable_visit_stmt ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_excepthandler DD imagerel symtable_visit_excepthandler
	DD	imagerel symtable_visit_excepthandler+173
	DD	imagerel $unwind$symtable_visit_excepthandler
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_excepthandler DD 085b01H
	DD	07745bH
	DD	063456H
	DD	08540aH
	DD	06006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT symtable_visit_excepthandler
_TEXT	SEGMENT
st$ = 48
eh$ = 56
symtable_visit_excepthandler PROC			; COMDAT

; 1539 : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f2	 mov	 rsi, rdx

; 1540 :     if (eh->v.ExceptHandler.type)

  0000d	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  00011	48 8b e9	 mov	 rbp, rcx
  00014	48 85 d2	 test	 rdx, rdx
  00017	74 19		 je	 SHORT $LN7@symtable_v@16

; 1541 :         VISIT(st, expr, eh->v.ExceptHandler.type);

  00019	e8 00 00 00 00	 call	 symtable_visit_expr
  0001e	85 c0		 test	 eax, eax
  00020	75 10		 jne	 SHORT $LN7@symtable_v@16
  00022	ff 4d 48	 dec	 DWORD PTR [rbp+72]
$LN17@symtable_v@16:
  00025	33 c0		 xor	 eax, eax

; 1547 : }

  00027	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5e		 pop	 rsi
  00031	c3		 ret	 0
$LN7@symtable_v@16:

; 1542 :     if (eh->v.ExceptHandler.name)

  00032	48 8b 56 10	 mov	 rdx, QWORD PTR [rsi+16]
  00036	48 85 d2	 test	 rdx, rdx
  00039	74 12		 je	 SHORT $LN5@symtable_v@16

; 1543 :         if (!symtable_add_def(st, eh->v.ExceptHandler.name, DEF_LOCAL))

  0003b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00041	48 8b cd	 mov	 rcx, rbp
  00044	e8 00 00 00 00	 call	 symtable_add_def
  00049	85 c0		 test	 eax, eax

; 1544 :             return 0;

  0004b	74 d8		 je	 SHORT $LN17@symtable_v@16
$LN5@symtable_v@16:

; 1545 :     VISIT_SEQ(st, stmt, eh->v.ExceptHandler.body);

  0004d	48 8b 76 18	 mov	 rsi, QWORD PTR [rsi+24]
  00051	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00056	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  0005b	48 8d 7e 08	 lea	 rdi, QWORD PTR [rsi+8]
  0005f	33 db		 xor	 ebx, ebx
$LL4@symtable_v@16:
  00061	48 85 f6	 test	 rsi, rsi
  00064	75 04		 jne	 SHORT $LN11@symtable_v@16
  00066	33 c9		 xor	 ecx, ecx
  00068	eb 03		 jmp	 SHORT $LN12@symtable_v@16
$LN11@symtable_v@16:
  0006a	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
$LN12@symtable_v@16:
  0006d	48 63 c3	 movsxd	 rax, ebx
  00070	48 3b c1	 cmp	 rax, rcx
  00073	7d 1e		 jge	 SHORT $LN2@symtable_v@16
  00075	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  00078	48 8b cd	 mov	 rcx, rbp
  0007b	e8 00 00 00 00	 call	 symtable_visit_stmt
  00080	85 c0		 test	 eax, eax
  00082	74 08		 je	 SHORT $LN14@symtable_v@16
  00084	ff c3		 inc	 ebx
  00086	48 83 c7 08	 add	 rdi, 8
  0008a	eb d5		 jmp	 SHORT $LL4@symtable_v@16
$LN14@symtable_v@16:
  0008c	ff 4d 48	 dec	 DWORD PTR [rbp+72]
  0008f	33 c0		 xor	 eax, eax
  00091	eb 05		 jmp	 SHORT $LN16@symtable_v@16
$LN2@symtable_v@16:

; 1546 :     return 1;

  00093	b8 01 00 00 00	 mov	 eax, 1
$LN16@symtable_v@16:
  00098	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009d	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 1547 : }

  000a2	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000a7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ab	5e		 pop	 rsi
  000ac	c3		 ret	 0
symtable_visit_excepthandler ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@NANCJFEE@this?5compiler?5does?5not?5handle?5Su@ ; `string'
PUBLIC	??_C@_03FGFCOCMD@top?$AA@			; `string'
PUBLIC	PySymtable_Build
EXTRN	_PyThreadState_Current:QWORD
EXTRN	_PyParallel_GetThreadState:PROC
EXTRN	Py_GetRecursionLimit:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySymtable_Build DD imagerel $LN43
	DD	imagerel $LN43+483
	DD	imagerel $unwind$PySymtable_Build
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySymtable_Build DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0c016521aH
xdata	ENDS
;	COMDAT ??_C@_0CF@NANCJFEE@this?5compiler?5does?5not?5handle?5Su@
CONST	SEGMENT
??_C@_0CF@NANCJFEE@this?5compiler?5does?5not?5handle?5Su@ DB 'this compil'
	DB	'er does not handle Suites', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FGFCOCMD@top?$AA@
CONST	SEGMENT
??_C@_03FGFCOCMD@top?$AA@ DB 'top', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PySymtable_Build
_TEXT	SEGMENT
mod$ = 64
filename$ = 72
future$ = 80
PySymtable_Build PROC					; COMDAT

; 237  : {

$LN43:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0001a	49 8b f0	 mov	 rsi, r8
  0001d	4c 8b e2	 mov	 r12, rdx
  00020	48 8b e9	 mov	 rbp, rcx

; 238  :     struct symtable *st = symtable_new();

  00023	e8 00 00 00 00	 call	 symtable_new
  00028	48 8b d8	 mov	 rbx, rax

; 239  :     asdl_seq *seq;
; 240  :     int i;
; 241  :     PyThreadState *tstate;
; 242  :     int recursion_limit = Py_GetRecursionLimit();

  0002b	e8 00 00 00 00	 call	 Py_GetRecursionLimit
  00030	8b f8		 mov	 edi, eax

; 243  : 
; 244  :     if (st == NULL)

  00032	48 85 db	 test	 rbx, rbx

; 245  :         return st;

  00035	0f 84 d9 00 00
	00		 je	 $LN41@PySymtable@3

; 246  :     st->st_filename = filename;

  0003b	4c 89 23	 mov	 QWORD PTR [rbx], r12

; 247  :     st->st_future = future;

  0003e	48 89 73 40	 mov	 QWORD PTR [rbx+64], rsi

; 248  : 
; 249  :     /* Setup recursion depth check counters */
; 250  :     tstate = PyThreadState_GET();

  00042	e8 00 00 00 00	 call	 _Py_PXCTX
  00047	85 c0		 test	 eax, eax
  00049	74 07		 je	 SHORT $LN24@PySymtable@3
  0004b	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00050	eb 07		 jmp	 SHORT $LN25@PySymtable@3
$LN24@PySymtable@3:
  00052	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN25@PySymtable@3:

; 251  :     if (!tstate) {

  00059	48 85 c0	 test	 rax, rax

; 252  :         PySymtable_Free(st);
; 253  :         return NULL;

  0005c	0f 84 aa 00 00
	00		 je	 $LN18@PySymtable@3

; 254  :     }
; 255  :     /* Be careful here to prevent overflow. */
; 256  :     st->recursion_depth = (tstate->recursion_depth < INT_MAX / COMPILER_STACK_FRAME_SCALE) ?
; 257  :         tstate->recursion_depth * COMPILER_STACK_FRAME_SCALE : tstate->recursion_depth;

  00062	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00065	3d aa aa aa 2a	 cmp	 eax, 715827882		; 2aaaaaaaH
  0006a	7d 03		 jge	 SHORT $LN26@PySymtable@3
  0006c	8d 04 40	 lea	 eax, DWORD PTR [rax+rax*2]
$LN26@PySymtable@3:
  0006f	89 43 48	 mov	 DWORD PTR [rbx+72], eax

; 258  :     st->recursion_limit = (recursion_limit < INT_MAX / COMPILER_STACK_FRAME_SCALE) ?
; 259  :         recursion_limit * COMPILER_STACK_FRAME_SCALE : recursion_limit;

  00072	81 ff aa aa aa
	2a		 cmp	 edi, 715827882		; 2aaaaaaaH
  00078	7d 03		 jge	 SHORT $LN28@PySymtable@3
  0007a	8d 3c 7f	 lea	 edi, DWORD PTR [rdi+rdi*2]
$LN28@PySymtable@3:

; 260  : 
; 261  :     /* Make the initial symbol information gathering pass */
; 262  :     if (!GET_IDENTIFIER(top) ||
; 263  :         !symtable_enter_block(st, top, ModuleBlock, (void *)mod, 0, 0)) {

  0007d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR top
  00084	89 7b 4c	 mov	 DWORD PTR [rbx+76], edi
  00087	48 85 c0	 test	 rax, rax
  0008a	75 18		 jne	 SHORT $LN40@PySymtable@3
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03FGFCOCMD@top?$AA@
  00093	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00098	48 89 05 00 00
	00 00		 mov	 QWORD PTR top, rax
  0009f	48 85 c0	 test	 rax, rax
  000a2	74 68		 je	 SHORT $LN18@PySymtable@3
$LN40@PySymtable@3:
  000a4	45 33 e4	 xor	 r12d, r12d
  000a7	4c 8b cd	 mov	 r9, rbp
  000aa	48 8b d0	 mov	 rdx, rax
  000ad	45 8d 44 24 02	 lea	 r8d, QWORD PTR [r12+2]
  000b2	48 8b cb	 mov	 rcx, rbx
  000b5	44 89 64 24 28	 mov	 DWORD PTR [rsp+40], r12d
  000ba	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  000bf	e8 00 00 00 00	 call	 symtable_enter_block
  000c4	85 c0		 test	 eax, eax
  000c6	74 44		 je	 SHORT $LN18@PySymtable@3

; 266  :     }
; 267  : 
; 268  :     st->st_top = st->st_cur;

  000c8	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  000cc	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 269  :     st->st_cur->ste_unoptimized = OPT_TOPLEVEL;

  000d0	c7 80 8c 00 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+140], 2

; 270  :     switch (mod->kind) {

  000da	8b 4d 00	 mov	 ecx, DWORD PTR [rbp]
  000dd	ff c9		 dec	 ecx
  000df	0f 84 ba 00 00
	00		 je	 $LN15@PySymtable@3
  000e5	ff c9		 dec	 ecx
  000e7	74 75		 je	 SHORT $LN8@PySymtable@3
  000e9	ff c9		 dec	 ecx
  000eb	74 44		 je	 SHORT $LN10@PySymtable@3
  000ed	ff c9		 dec	 ecx
  000ef	75 50		 jne	 SHORT $LN12@PySymtable@3

; 287  :                 goto error;
; 288  :         break;
; 289  :     case Suite_kind:
; 290  :         PyErr_SetString(PyExc_RuntimeError,
; 291  :                         "this compiler does not handle Suites");

  000f1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  000f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@NANCJFEE@this?5compiler?5does?5not?5handle?5Su@
  000ff	e8 00 00 00 00	 call	 PyErr_SetString
$error$21713:

; 301  :     PySymtable_Free(st);
; 302  :     return NULL;
; 303  :  error:
; 304  :     (void) symtable_exit_block(st, (void *)mod);

  00104	48 8b cb	 mov	 rcx, rbx
  00107	e8 00 00 00 00	 call	 symtable_exit_block
$LN18@PySymtable@3:

; 264  :         PySymtable_Free(st);

  0010c	48 8b cb	 mov	 rcx, rbx
$LN42@PySymtable@3:
  0010f	e8 00 00 00 00	 call	 PySymtable_Free
$LN41@PySymtable@3:

; 265  :         return NULL;

  00114	33 c0		 xor	 eax, eax
$LN22@PySymtable@3:

; 305  :     PySymtable_Free(st);
; 306  :     return NULL;
; 307  : }

  00116	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0011b	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00120	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00125	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0012a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0012e	41 5c		 pop	 r12
  00130	c3		 ret	 0
$LN10@PySymtable@3:

; 276  :                 goto error;
; 277  :         break;
; 278  :     case Expression_kind:
; 279  :         if (!symtable_visit_expr(st, mod->v.Expression.body))

  00131	48 8b 55 08	 mov	 rdx, QWORD PTR [rbp+8]
  00135	48 8b cb	 mov	 rcx, rbx
  00138	e8 00 00 00 00	 call	 symtable_visit_expr
  0013d	85 c0		 test	 eax, eax
  0013f	74 c3		 je	 SHORT $error$21713
$LN12@PySymtable@3:

; 292  :         goto error;
; 293  :     }
; 294  :     if (!symtable_exit_block(st, (void *)mod)) {

  00141	48 8b cb	 mov	 rcx, rbx
  00144	e8 00 00 00 00	 call	 symtable_exit_block

; 295  :         PySymtable_Free(st);

  00149	48 8b cb	 mov	 rcx, rbx
  0014c	85 c0		 test	 eax, eax

; 296  :         return NULL;

  0014e	74 bf		 je	 SHORT $LN42@PySymtable@3

; 297  :     }
; 298  :     /* Make the second symbol analysis pass */
; 299  :     if (symtable_analyze(st))

  00150	e8 00 00 00 00	 call	 symtable_analyze
  00155	85 c0		 test	 eax, eax
  00157	74 b3		 je	 SHORT $LN18@PySymtable@3

; 300  :         return st;

  00159	48 8b c3	 mov	 rax, rbx
  0015c	eb b8		 jmp	 SHORT $LN22@PySymtable@3
$LN8@PySymtable@3:

; 280  :             goto error;
; 281  :         break;
; 282  :     case Interactive_kind:
; 283  :         seq = mod->v.Interactive.body;

  0015e	48 8b 6d 08	 mov	 rbp, QWORD PTR [rbp+8]

; 284  :         for (i = 0; i < asdl_seq_LEN(seq); i++)

  00162	41 8b fc	 mov	 edi, r12d
  00165	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  00169	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@PySymtable@3:
  00170	49 8b cc	 mov	 rcx, r12
  00173	48 85 ed	 test	 rbp, rbp
  00176	74 04		 je	 SHORT $LN35@PySymtable@3
  00178	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN35@PySymtable@3:
  0017c	48 63 c7	 movsxd	 rax, edi
  0017f	48 3b c1	 cmp	 rax, rcx
  00182	7d bd		 jge	 SHORT $LN12@PySymtable@3

; 285  :             if (!symtable_visit_stmt(st,
; 286  :                         (stmt_ty)asdl_seq_GET(seq, i)))

  00184	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  00187	48 8b cb	 mov	 rcx, rbx
  0018a	e8 00 00 00 00	 call	 symtable_visit_stmt
  0018f	85 c0		 test	 eax, eax
  00191	0f 84 6d ff ff
	ff		 je	 $error$21713

; 284  :         for (i = 0; i < asdl_seq_LEN(seq); i++)

  00197	ff c7		 inc	 edi
  00199	48 83 c6 08	 add	 rsi, 8
  0019d	eb d1		 jmp	 SHORT $LL7@PySymtable@3
$LN15@PySymtable@3:

; 271  :     case Module_kind:
; 272  :         seq = mod->v.Module.body;

  0019f	48 8b 6d 08	 mov	 rbp, QWORD PTR [rbp+8]

; 273  :         for (i = 0; i < asdl_seq_LEN(seq); i++)

  001a3	41 8b fc	 mov	 edi, r12d
  001a6	48 8d 75 08	 lea	 rsi, QWORD PTR [rbp+8]
  001aa	66 0f 1f 44 00
	00		 npad	 6
$LL14@PySymtable@3:
  001b0	49 8b cc	 mov	 rcx, r12
  001b3	48 85 ed	 test	 rbp, rbp
  001b6	74 04		 je	 SHORT $LN33@PySymtable@3
  001b8	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
$LN33@PySymtable@3:
  001bc	48 63 c7	 movsxd	 rax, edi
  001bf	48 3b c1	 cmp	 rax, rcx
  001c2	0f 8d 79 ff ff
	ff		 jge	 $LN12@PySymtable@3

; 274  :             if (!symtable_visit_stmt(st,
; 275  :                         (stmt_ty)asdl_seq_GET(seq, i)))

  001c8	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  001cb	48 8b cb	 mov	 rcx, rbx
  001ce	e8 00 00 00 00	 call	 symtable_visit_stmt
  001d3	85 c0		 test	 eax, eax
  001d5	0f 84 29 ff ff
	ff		 je	 $error$21713

; 273  :         for (i = 0; i < asdl_seq_LEN(seq); i++)

  001db	ff c7		 inc	 edi
  001dd	48 83 c6 08	 add	 rsi, 8
  001e1	eb cd		 jmp	 SHORT $LL14@PySymtable@3
PySymtable_Build ENDP
_TEXT	ENDS
END
