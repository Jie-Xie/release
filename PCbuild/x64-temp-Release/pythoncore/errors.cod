; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04CIMGMMMG@text?$AA@			; `string'
PUBLIC	??_C@_0BE@DKBHEDDB@print_file_and_line?$AA@	; `string'
PUBLIC	??_C@_06KLHHMIGM@offset?$AA@			; `string'
PUBLIC	??_C@_03GLPMCEFE@msg?$AA@			; `string'
PUBLIC	??_C@_06ILKIAHNN@lineno?$AA@			; `string'
PUBLIC	??_C@_08BABJIOEM@filename?$AA@			; `string'
PUBLIC	??_C@_0L@LNCJCPDP@__module__?$AA@		; `string'
;	COMDAT ??_C@_04CIMGMMMG@text?$AA@
CONST	SEGMENT
??_C@_04CIMGMMMG@text?$AA@ DB 'text', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DKBHEDDB@print_file_and_line?$AA@
CONST	SEGMENT
??_C@_0BE@DKBHEDDB@print_file_and_line?$AA@ DB 'print_file_and_line', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KLHHMIGM@offset?$AA@
CONST	SEGMENT
??_C@_06KLHHMIGM@offset?$AA@ DB 'offset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLPMCEFE@msg?$AA@
CONST	SEGMENT
??_C@_03GLPMCEFE@msg?$AA@ DB 'msg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06ILKIAHNN@lineno?$AA@
CONST	SEGMENT
??_C@_06ILKIAHNN@lineno?$AA@ DB 'lineno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BABJIOEM@filename?$AA@
CONST	SEGMENT
??_C@_08BABJIOEM@filename?$AA@ DB 'filename', 00H	; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_print_file_and_line@?1??PyErr_SyntaxLocationEx@@9@9 DQ 0000000000000000H ; `PyErr_SyntaxLocationEx'::`2'::PyId_print_file_and_line
	DQ	FLAT:??_C@_0BE@DKBHEDDB@print_file_and_line?$AA@
	DQ	0000000000000000H
?PyId_offset@?1??PyErr_SyntaxLocationEx@@9@9 DQ 0000000000000000H ; `PyErr_SyntaxLocationEx'::`2'::PyId_offset
	DQ	FLAT:??_C@_06KLHHMIGM@offset?$AA@
	DQ	0000000000000000H
?PyId_msg@?1??PyErr_SyntaxLocationEx@@9@9 DQ 0000000000000000H ; `PyErr_SyntaxLocationEx'::`2'::PyId_msg
	DQ	FLAT:??_C@_03GLPMCEFE@msg?$AA@
	DQ	0000000000000000H
?PyId_text@?1??PyErr_SyntaxLocationEx@@9@9 DQ 0000000000000000H ; `PyErr_SyntaxLocationEx'::`2'::PyId_text
	DQ	FLAT:??_C@_04CIMGMMMG@text?$AA@
	DQ	0000000000000000H
?PyId_lineno@?1??PyErr_SyntaxLocationEx@@9@9 DQ 0000000000000000H ; `PyErr_SyntaxLocationEx'::`2'::PyId_lineno
	DQ	FLAT:??_C@_06ILKIAHNN@lineno?$AA@
	DQ	0000000000000000H
?PyId_filename@?1??PyErr_SyntaxLocationEx@@9@9 DQ 0000000000000000H ; `PyErr_SyntaxLocationEx'::`2'::PyId_filename
	DQ	FLAT:??_C@_08BABJIOEM@filename?$AA@
	DQ	0000000000000000H
?PyId___module__@?1??PyErr_WriteUnraisable@@9@9 DQ 0000000000000000H ; `PyErr_WriteUnraisable'::`2'::PyId___module__
	DQ	FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0L@LNCJCPDP@__module__?$AA@
CONST	SEGMENT
??_C@_0L@LNCJCPDP@__module__?$AA@ DB '__module__', 00H	; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	PyErr_Restore
EXTRN	PyTraceBack_Type:BYTE
EXTRN	_PyThreadState_Current:QWORD
EXTRN	_PyParallel_GetThreadState:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_Restore DD imagerel $LN51
	DD	imagerel $LN51+472
	DD	imagerel $unwind$PyErr_Restore
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_Restore DD 0c1e01H
	DD	0d741eH
	DD	0c641eH
	DD	0b541eH
	DD	0a341eH
	DD	0e01a521eH
	DD	0c016d018H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\errors.c
xdata	ENDS
;	COMDAT PyErr_Restore
_TEXT	SEGMENT
type$ = 80
value$ = 88
traceback$ = 96
PyErr_Restore PROC					; COMDAT

; 26   : {

$LN51:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	41 55		 push	 r13
  00018	41 56		 push	 r14
  0001a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0001e	49 8b e8	 mov	 rbp, r8
  00021	4c 8b ea	 mov	 r13, rdx
  00024	4c 8b f1	 mov	 r14, rcx

; 27   :     PyThreadState *tstate = PyThreadState_GET();

  00027	e8 00 00 00 00	 call	 _Py_PXCTX
  0002c	85 c0		 test	 eax, eax
  0002e	74 0a		 je	 SHORT $LN16@PyErr_Rest
  00030	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00035	4c 8b e0	 mov	 r12, rax
  00038	eb 07		 jmp	 SHORT $LN17@PyErr_Rest
$LN16@PyErr_Rest:
  0003a	4c 8b 25 00 00
	00 00		 mov	 r12, QWORD PTR _PyThreadState_Current
$LN17@PyErr_Rest:

; 28   :     PyObject *oldtype, *oldvalue, *oldtraceback;
; 29   : 
; 30   :     if (traceback != NULL && !PyTraceBack_Check(traceback)) {

  00041	48 85 ed	 test	 rbp, rbp
  00044	74 17		 je	 SHORT $LN13@PyErr_Rest
  00046	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTraceBack_Type
  0004d	48 39 45 58	 cmp	 QWORD PTR [rbp+88], rax
  00051	74 0a		 je	 SHORT $LN13@PyErr_Rest

; 31   :         /* XXX Should never happen -- fatal error instead? */
; 32   :         /* Well, it could be None. */
; 33   :         Py_DECREF(traceback);

  00053	48 8b cd	 mov	 rcx, rbp
  00056	e8 00 00 00 00	 call	 _Py_DecRef

; 34   :         traceback = NULL;

  0005b	33 ed		 xor	 ebp, ebp
$LN13@PyErr_Rest:

; 35   :     }
; 36   : 
; 37   :     /* Save these in locals to safeguard against recursive
; 38   :        invocation through Py_XDECREF */
; 39   :     oldtype = tstate->curexc_type;

  0005d	49 8b 74 24 48	 mov	 rsi, QWORD PTR [r12+72]

; 40   :     oldvalue = tstate->curexc_value;

  00062	49 8b 7c 24 50	 mov	 rdi, QWORD PTR [r12+80]

; 41   :     oldtraceback = tstate->curexc_traceback;

  00067	49 8b 5c 24 58	 mov	 rbx, QWORD PTR [r12+88]

; 42   : 
; 43   :     tstate->curexc_type = type;

  0006c	4d 89 74 24 48	 mov	 QWORD PTR [r12+72], r14

; 44   :     tstate->curexc_value = value;

  00071	4d 89 6c 24 50	 mov	 QWORD PTR [r12+80], r13

; 45   :     tstate->curexc_traceback = traceback;

  00076	49 89 6c 24 58	 mov	 QWORD PTR [r12+88], rbp

; 46   : 
; 47   :     Py_XDECREF(oldtype);

  0007b	48 85 f6	 test	 rsi, rsi
  0007e	74 65		 je	 SHORT $LN11@PyErr_Rest
  00080	e8 00 00 00 00	 call	 _Py_PXCTX
  00085	85 c0		 test	 eax, eax
  00087	75 5c		 jne	 SHORT $LN11@PyErr_Rest
  00089	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0008d	a8 20		 test	 al, 32			; 00000020H
  0008f	75 4c		 jne	 SHORT $LN22@PyErr_Rest
  00091	84 c0		 test	 al, al
  00093	78 48		 js	 SHORT $LN22@PyErr_Rest
  00095	a8 02		 test	 al, 2
  00097	75 4c		 jne	 SHORT $LN11@PyErr_Rest
  00099	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  0009d	75 46		 jne	 SHORT $LN11@PyErr_Rest
  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000ad	4c 8b ce	 mov	 r9, rsi
  000b0	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000b6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000be	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c3	48 8b ce	 mov	 rcx, rsi
  000c6	85 c0		 test	 eax, eax
  000c8	74 07		 je	 SHORT $LN27@PyErr_Rest
  000ca	e8 00 00 00 00	 call	 _Px_Dealloc
  000cf	eb 14		 jmp	 SHORT $LN11@PyErr_Rest
$LN27@PyErr_Rest:
  000d1	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  000d5	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000db	eb 08		 jmp	 SHORT $LN11@PyErr_Rest
$LN22@PyErr_Rest:
  000dd	48 8b ce	 mov	 rcx, rsi
  000e0	e8 00 00 00 00	 call	 Px_DecRef
$LN11@PyErr_Rest:

; 48   :     Py_XDECREF(oldvalue);

  000e5	48 85 ff	 test	 rdi, rdi
  000e8	74 65		 je	 SHORT $LN7@PyErr_Rest
  000ea	e8 00 00 00 00	 call	 _Py_PXCTX
  000ef	85 c0		 test	 eax, eax
  000f1	75 5c		 jne	 SHORT $LN7@PyErr_Rest
  000f3	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000f7	a8 20		 test	 al, 32			; 00000020H
  000f9	75 4c		 jne	 SHORT $LN33@PyErr_Rest
  000fb	84 c0		 test	 al, al
  000fd	78 48		 js	 SHORT $LN33@PyErr_Rest
  000ff	a8 02		 test	 al, 2
  00101	75 4c		 jne	 SHORT $LN7@PyErr_Rest
  00103	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00107	75 46		 jne	 SHORT $LN7@PyErr_Rest
  00109	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00110	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00117	4c 8b cf	 mov	 r9, rdi
  0011a	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00120	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00128	e8 00 00 00 00	 call	 _PyParallel_Guard
  0012d	48 8b cf	 mov	 rcx, rdi
  00130	85 c0		 test	 eax, eax
  00132	74 07		 je	 SHORT $LN38@PyErr_Rest
  00134	e8 00 00 00 00	 call	 _Px_Dealloc
  00139	eb 14		 jmp	 SHORT $LN7@PyErr_Rest
$LN38@PyErr_Rest:
  0013b	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0013f	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00145	eb 08		 jmp	 SHORT $LN7@PyErr_Rest
$LN33@PyErr_Rest:
  00147	48 8b cf	 mov	 rcx, rdi
  0014a	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyErr_Rest:

; 49   :     Py_XDECREF(oldtraceback);

  0014f	48 85 db	 test	 rbx, rbx
  00152	74 65		 je	 SHORT $LN3@PyErr_Rest
  00154	e8 00 00 00 00	 call	 _Py_PXCTX
  00159	85 c0		 test	 eax, eax
  0015b	75 5c		 jne	 SHORT $LN3@PyErr_Rest
  0015d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00161	a8 20		 test	 al, 32			; 00000020H
  00163	75 4c		 jne	 SHORT $LN44@PyErr_Rest
  00165	84 c0		 test	 al, al
  00167	78 48		 js	 SHORT $LN44@PyErr_Rest
  00169	a8 02		 test	 al, 2
  0016b	75 4c		 jne	 SHORT $LN3@PyErr_Rest
  0016d	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00171	75 46		 jne	 SHORT $LN3@PyErr_Rest
  00173	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00181	4c 8b cb	 mov	 r9, rbx
  00184	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0018a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00192	e8 00 00 00 00	 call	 _PyParallel_Guard
  00197	48 8b cb	 mov	 rcx, rbx
  0019a	85 c0		 test	 eax, eax
  0019c	74 07		 je	 SHORT $LN49@PyErr_Rest
  0019e	e8 00 00 00 00	 call	 _Px_Dealloc
  001a3	eb 14		 jmp	 SHORT $LN3@PyErr_Rest
$LN49@PyErr_Rest:
  001a5	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001a9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001af	eb 08		 jmp	 SHORT $LN3@PyErr_Rest
$LN44@PyErr_Rest:
  001b1	48 8b cb	 mov	 rcx, rbx
  001b4	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyErr_Rest:

; 50   : }

  001b9	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  001be	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  001c3	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  001c8	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  001cd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001d1	41 5e		 pop	 r14
  001d3	41 5d		 pop	 r13
  001d5	41 5c		 pop	 r12
  001d7	c3		 ret	 0
PyErr_Restore ENDP
_TEXT	ENDS
PUBLIC	PyErr_Occurred
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_Occurred DD imagerel $LN7
	DD	imagerel $LN7+46
	DD	imagerel $unwind$PyErr_Occurred
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_Occurred DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyErr_Occurred
_TEXT	SEGMENT
PyErr_Occurred PROC					; COMDAT

; 132  : {

$LN7:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 133  :     PyThreadState *tstate = PyThreadState_XGET();

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 07		 je	 SHORT $LN3@PyErr_Occu
  0000d	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00012	eb 07		 jmp	 SHORT $LN4@PyErr_Occu
$LN3@PyErr_Occu:
  00014	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN4@PyErr_Occu:

; 134  : 
; 135  :     return tstate == NULL ? NULL : tstate->curexc_type;

  0001b	48 85 c0	 test	 rax, rax
  0001e	75 05		 jne	 SHORT $LN5@PyErr_Occu

; 136  : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
$LN5@PyErr_Occu:

; 134  : 
; 135  :     return tstate == NULL ? NULL : tstate->curexc_type;

  00025	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]

; 136  : }

  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
PyErr_Occurred ENDP
_TEXT	ENDS
PUBLIC	PyErr_Fetch
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_Fetch DD imagerel $LN5
	DD	imagerel $LN5+101
	DD	imagerel $unwind$PyErr_Fetch
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_Fetch DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyErr_Fetch
_TEXT	SEGMENT
p_type$ = 48
p_value$ = 56
p_traceback$ = 64
PyErr_Fetch PROC					; COMDAT

; 300  : {

$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b d8	 mov	 rbx, r8
  00012	48 8b fa	 mov	 rdi, rdx
  00015	48 8b f1	 mov	 rsi, rcx

; 301  :     PyThreadState *tstate = PyThreadState_GET();

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 0a		 je	 SHORT $LN3@PyErr_Fetc
  00021	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00026	4c 8b d8	 mov	 r11, rax
  00029	eb 07		 jmp	 SHORT $LN4@PyErr_Fetc
$LN3@PyErr_Fetc:
  0002b	4c 8b 1d 00 00
	00 00		 mov	 r11, QWORD PTR _PyThreadState_Current
$LN4@PyErr_Fetc:

; 302  : 
; 303  :     *p_type = tstate->curexc_type;

  00032	49 8b 43 48	 mov	 rax, QWORD PTR [r11+72]
  00036	48 89 06	 mov	 QWORD PTR [rsi], rax

; 304  :     *p_value = tstate->curexc_value;

  00039	49 8b 43 50	 mov	 rax, QWORD PTR [r11+80]

; 305  :     *p_traceback = tstate->curexc_traceback;
; 306  : 
; 307  :     tstate->curexc_type = NULL;
; 308  :     tstate->curexc_value = NULL;
; 309  :     tstate->curexc_traceback = NULL;
; 310  : }

  0003d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00042	48 89 07	 mov	 QWORD PTR [rdi], rax
  00045	49 8b 43 58	 mov	 rax, QWORD PTR [r11+88]
  00049	48 89 03	 mov	 QWORD PTR [rbx], rax
  0004c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00051	33 c0		 xor	 eax, eax
  00053	49 89 43 48	 mov	 QWORD PTR [r11+72], rax
  00057	49 89 43 50	 mov	 QWORD PTR [r11+80], rax
  0005b	49 89 43 58	 mov	 QWORD PTR [r11+88], rax
  0005f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00063	5f		 pop	 rdi
  00064	c3		 ret	 0
PyErr_Fetch ENDP
_TEXT	ENDS
PUBLIC	PyErr_Clear
; Function compile flags: /Ogtpy
;	COMDAT PyErr_Clear
_TEXT	SEGMENT
PyErr_Clear PROC					; COMDAT

; 315  :     PyErr_Restore(NULL, NULL, NULL);

  00000	45 33 c0	 xor	 r8d, r8d
  00003	33 d2		 xor	 edx, edx
  00005	33 c9		 xor	 ecx, ecx

; 316  : }

  00007	e9 00 00 00 00	 jmp	 PyErr_Restore
PyErr_Clear ENDP
_TEXT	ENDS
PUBLIC	PyErr_GetExcInfo
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_GetExcInfo DD imagerel $LN29
	DD	imagerel $LN29+288
	DD	imagerel $unwind$PyErr_GetExcInfo
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_GetExcInfo DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\errors.c
xdata	ENDS
;	COMDAT PyErr_GetExcInfo
_TEXT	SEGMENT
p_type$ = 64
p_value$ = 72
p_traceback$ = 80
PyErr_GetExcInfo PROC					; COMDAT

; 320  : {

$LN29:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	49 8b f0	 mov	 rsi, r8
  00012	48 8b fa	 mov	 rdi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 321  :     PyThreadState *tstate = PyThreadState_GET();

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 0a		 je	 SHORT $LN15@PyErr_GetE
  00021	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00026	4c 8b d8	 mov	 r11, rax
  00029	eb 07		 jmp	 SHORT $LN16@PyErr_GetE
$LN15@PyErr_GetE:
  0002b	4c 8b 1d 00 00
	00 00		 mov	 r11, QWORD PTR _PyThreadState_Current
$LN16@PyErr_GetE:

; 322  : 
; 323  :     *p_type = tstate->exc_type;

  00032	49 8b 43 60	 mov	 rax, QWORD PTR [r11+96]
  00036	48 89 03	 mov	 QWORD PTR [rbx], rax

; 324  :     *p_value = tstate->exc_value;

  00039	49 8b 43 68	 mov	 rax, QWORD PTR [r11+104]
  0003d	48 89 07	 mov	 QWORD PTR [rdi], rax

; 325  :     *p_traceback = tstate->exc_traceback;

  00040	49 8b 43 70	 mov	 rax, QWORD PTR [r11+112]
  00044	48 89 06	 mov	 QWORD PTR [rsi], rax

; 326  : 
; 327  :     Py_XINCREF(*p_type);

  00047	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  0004a	48 85 db	 test	 rbx, rbx
  0004d	74 3b		 je	 SHORT $LN11@PyErr_GetE
  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	75 32		 jne	 SHORT $LN11@PyErr_GetE
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00066	4c 8b cb	 mov	 r9, rbx
  00069	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00077	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007c	85 c0		 test	 eax, eax
  0007e	75 06		 jne	 SHORT $LN17@PyErr_GetE
  00080	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00084	74 04		 je	 SHORT $LN11@PyErr_GetE
$LN17@PyErr_GetE:
  00086	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN11@PyErr_GetE:

; 328  :     Py_XINCREF(*p_value);

  0008a	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
  0008d	48 85 db	 test	 rbx, rbx
  00090	74 3b		 je	 SHORT $LN7@PyErr_GetE
  00092	e8 00 00 00 00	 call	 _Py_PXCTX
  00097	85 c0		 test	 eax, eax
  00099	75 32		 jne	 SHORT $LN7@PyErr_GetE
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a9	4c 8b cb	 mov	 r9, rbx
  000ac	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000b2	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000ba	e8 00 00 00 00	 call	 _PyParallel_Guard
  000bf	85 c0		 test	 eax, eax
  000c1	75 06		 jne	 SHORT $LN21@PyErr_GetE
  000c3	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000c7	74 04		 je	 SHORT $LN7@PyErr_GetE
$LN21@PyErr_GetE:
  000c9	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@PyErr_GetE:

; 329  :     Py_XINCREF(*p_traceback);

  000cd	48 8b 1e	 mov	 rbx, QWORD PTR [rsi]
  000d0	48 85 db	 test	 rbx, rbx
  000d3	74 3b		 je	 SHORT $LN3@PyErr_GetE
  000d5	e8 00 00 00 00	 call	 _Py_PXCTX
  000da	85 c0		 test	 eax, eax
  000dc	75 32		 jne	 SHORT $LN3@PyErr_GetE
  000de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000ec	4c 8b cb	 mov	 r9, rbx
  000ef	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000f5	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000fd	e8 00 00 00 00	 call	 _PyParallel_Guard
  00102	85 c0		 test	 eax, eax
  00104	75 06		 jne	 SHORT $LN25@PyErr_GetE
  00106	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0010a	74 04		 je	 SHORT $LN3@PyErr_GetE
$LN25@PyErr_GetE:
  0010c	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN3@PyErr_GetE:

; 330  : }

  00110	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00115	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0011a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0011e	5f		 pop	 rdi
  0011f	c3		 ret	 0
PyErr_GetExcInfo ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetExcInfo
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_SetExcInfo DD imagerel $LN50
	DD	imagerel $LN50+423
	DD	imagerel $unwind$PyErr_SetExcInfo
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetExcInfo DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0d0145218H
	DD	07010c012H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\errors.c
xdata	ENDS
;	COMDAT PyErr_SetExcInfo
_TEXT	SEGMENT
p_type$ = 80
p_value$ = 88
p_traceback$ = 96
PyErr_SetExcInfo PROC					; COMDAT

; 334  : {

$LN50:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00018	49 8b e8	 mov	 rbp, r8
  0001b	4c 8b e2	 mov	 r12, rdx
  0001e	4c 8b e9	 mov	 r13, rcx

; 335  :     PyObject *oldtype, *oldvalue, *oldtraceback;
; 336  :     PyThreadState *tstate = PyThreadState_GET();

  00021	e8 00 00 00 00	 call	 _Py_PXCTX
  00026	85 c0		 test	 eax, eax
  00028	74 07		 je	 SHORT $LN15@PyErr_SetE
  0002a	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  0002f	eb 07		 jmp	 SHORT $LN16@PyErr_SetE
$LN15@PyErr_SetE:
  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN16@PyErr_SetE:

; 337  : 
; 338  :     oldtype = tstate->exc_type;

  00038	48 8b 70 60	 mov	 rsi, QWORD PTR [rax+96]

; 339  :     oldvalue = tstate->exc_value;

  0003c	48 8b 78 68	 mov	 rdi, QWORD PTR [rax+104]

; 340  :     oldtraceback = tstate->exc_traceback;

  00040	48 8b 58 70	 mov	 rbx, QWORD PTR [rax+112]

; 341  : 
; 342  :     tstate->exc_type = p_type;

  00044	4c 89 68 60	 mov	 QWORD PTR [rax+96], r13

; 343  :     tstate->exc_value = p_value;

  00048	4c 89 60 68	 mov	 QWORD PTR [rax+104], r12

; 344  :     tstate->exc_traceback = p_traceback;

  0004c	48 89 68 70	 mov	 QWORD PTR [rax+112], rbp

; 345  : 
; 346  :     Py_XDECREF(oldtype);

  00050	48 85 f6	 test	 rsi, rsi
  00053	74 65		 je	 SHORT $LN11@PyErr_SetE
  00055	e8 00 00 00 00	 call	 _Py_PXCTX
  0005a	85 c0		 test	 eax, eax
  0005c	75 5c		 jne	 SHORT $LN11@PyErr_SetE
  0005e	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00062	a8 20		 test	 al, 32			; 00000020H
  00064	75 4c		 jne	 SHORT $LN21@PyErr_SetE
  00066	84 c0		 test	 al, al
  00068	78 48		 js	 SHORT $LN21@PyErr_SetE
  0006a	a8 02		 test	 al, 2
  0006c	75 4c		 jne	 SHORT $LN11@PyErr_SetE
  0006e	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  00072	75 46		 jne	 SHORT $LN11@PyErr_SetE
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00082	4c 8b ce	 mov	 r9, rsi
  00085	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0008b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00093	e8 00 00 00 00	 call	 _PyParallel_Guard
  00098	48 8b ce	 mov	 rcx, rsi
  0009b	85 c0		 test	 eax, eax
  0009d	74 07		 je	 SHORT $LN26@PyErr_SetE
  0009f	e8 00 00 00 00	 call	 _Px_Dealloc
  000a4	eb 14		 jmp	 SHORT $LN11@PyErr_SetE
$LN26@PyErr_SetE:
  000a6	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  000aa	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000b0	eb 08		 jmp	 SHORT $LN11@PyErr_SetE
$LN21@PyErr_SetE:
  000b2	48 8b ce	 mov	 rcx, rsi
  000b5	e8 00 00 00 00	 call	 Px_DecRef
$LN11@PyErr_SetE:

; 347  :     Py_XDECREF(oldvalue);

  000ba	48 85 ff	 test	 rdi, rdi
  000bd	74 65		 je	 SHORT $LN7@PyErr_SetE
  000bf	e8 00 00 00 00	 call	 _Py_PXCTX
  000c4	85 c0		 test	 eax, eax
  000c6	75 5c		 jne	 SHORT $LN7@PyErr_SetE
  000c8	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000cc	a8 20		 test	 al, 32			; 00000020H
  000ce	75 4c		 jne	 SHORT $LN32@PyErr_SetE
  000d0	84 c0		 test	 al, al
  000d2	78 48		 js	 SHORT $LN32@PyErr_SetE
  000d4	a8 02		 test	 al, 2
  000d6	75 4c		 jne	 SHORT $LN7@PyErr_SetE
  000d8	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  000dc	75 46		 jne	 SHORT $LN7@PyErr_SetE
  000de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000ec	4c 8b cf	 mov	 r9, rdi
  000ef	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000f5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000fd	e8 00 00 00 00	 call	 _PyParallel_Guard
  00102	48 8b cf	 mov	 rcx, rdi
  00105	85 c0		 test	 eax, eax
  00107	74 07		 je	 SHORT $LN37@PyErr_SetE
  00109	e8 00 00 00 00	 call	 _Px_Dealloc
  0010e	eb 14		 jmp	 SHORT $LN7@PyErr_SetE
$LN37@PyErr_SetE:
  00110	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00114	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0011a	eb 08		 jmp	 SHORT $LN7@PyErr_SetE
$LN32@PyErr_SetE:
  0011c	48 8b cf	 mov	 rcx, rdi
  0011f	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyErr_SetE:

; 348  :     Py_XDECREF(oldtraceback);

  00124	48 85 db	 test	 rbx, rbx
  00127	74 65		 je	 SHORT $LN3@PyErr_SetE
  00129	e8 00 00 00 00	 call	 _Py_PXCTX
  0012e	85 c0		 test	 eax, eax
  00130	75 5c		 jne	 SHORT $LN3@PyErr_SetE
  00132	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00136	a8 20		 test	 al, 32			; 00000020H
  00138	75 4c		 jne	 SHORT $LN43@PyErr_SetE
  0013a	84 c0		 test	 al, al
  0013c	78 48		 js	 SHORT $LN43@PyErr_SetE
  0013e	a8 02		 test	 al, 2
  00140	75 4c		 jne	 SHORT $LN3@PyErr_SetE
  00142	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00146	75 46		 jne	 SHORT $LN3@PyErr_SetE
  00148	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0014f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00156	4c 8b cb	 mov	 r9, rbx
  00159	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0015f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00167	e8 00 00 00 00	 call	 _PyParallel_Guard
  0016c	48 8b cb	 mov	 rcx, rbx
  0016f	85 c0		 test	 eax, eax
  00171	74 07		 je	 SHORT $LN48@PyErr_SetE
  00173	e8 00 00 00 00	 call	 _Px_Dealloc
  00178	eb 14		 jmp	 SHORT $LN3@PyErr_SetE
$LN48@PyErr_SetE:
  0017a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0017e	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00184	eb 08		 jmp	 SHORT $LN3@PyErr_SetE
$LN43@PyErr_SetE:
  00186	48 8b cb	 mov	 rcx, rbx
  00189	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyErr_SetE:

; 349  : }

  0018e	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00193	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00198	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  0019d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001a1	41 5d		 pop	 r13
  001a3	41 5c		 pop	 r12
  001a5	5f		 pop	 rdi
  001a6	c3		 ret	 0
PyErr_SetExcInfo ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetObject
PUBLIC	PyErr_Format
EXTRN	PyUnicode_FromFormatV:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_Format DD imagerel $LN22
	DD	imagerel $LN22+183
	DD	imagerel $unwind$PyErr_Format
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_Format DD 031501H
	DD	070116215H
	DD	03010H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\errors.c
xdata	ENDS
;	COMDAT PyErr_Format
_TEXT	SEGMENT
exception$ = 80
format$ = 88
PyErr_Format PROC					; COMDAT

; 682  : {

$LN22:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000f	53		 push	 rbx
  00010	57		 push	 rdi
  00011	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00015	48 8b c2	 mov	 rax, rdx
  00018	48 8b d9	 mov	 rbx, rcx

; 683  :     va_list vargs;
; 684  :     PyObject* string;
; 685  : 
; 686  : #ifdef HAVE_STDARG_PROTOTYPES
; 687  :     va_start(vargs, format);

  0001b	48 8d 54 24 60	 lea	 rdx, QWORD PTR format$[rsp+8]

; 688  : #else
; 689  :     va_start(vargs);
; 690  : #endif
; 691  : 
; 692  :     string = PyUnicode_FromFormatV(format, vargs);

  00020	48 8b c8	 mov	 rcx, rax
  00023	e8 00 00 00 00	 call	 PyUnicode_FromFormatV

; 693  :     PyErr_SetObject(exception, string);

  00028	48 8b cb	 mov	 rcx, rbx
  0002b	48 8b d0	 mov	 rdx, rax
  0002e	48 8b f8	 mov	 rdi, rax
  00031	e8 00 00 00 00	 call	 PyErr_SetObject

; 694  :     Py_XDECREF(string);

  00036	48 85 ff	 test	 rdi, rdi
  00039	74 73		 je	 SHORT $LN20@PyErr_Form
  0003b	e8 00 00 00 00	 call	 _Py_PXCTX
  00040	85 c0		 test	 eax, eax
  00042	75 6a		 jne	 SHORT $LN20@PyErr_Form
  00044	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00048	a8 20		 test	 al, 32			; 00000020H
  0004a	75 5a		 jne	 SHORT $LN11@PyErr_Form
  0004c	84 c0		 test	 al, al
  0004e	78 56		 js	 SHORT $LN11@PyErr_Form
  00050	a8 02		 test	 al, 2
  00052	75 5a		 jne	 SHORT $LN20@PyErr_Form
  00054	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00058	75 54		 jne	 SHORT $LN20@PyErr_Form
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00068	4c 8b cf	 mov	 r9, rdi
  0006b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00071	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00079	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007e	48 8b cf	 mov	 rcx, rdi
  00081	85 c0		 test	 eax, eax
  00083	74 0e		 je	 SHORT $LN16@PyErr_Form
  00085	e8 00 00 00 00	 call	 _Px_Dealloc

; 695  :     va_end(vargs);
; 696  :     return NULL;

  0008a	33 c0		 xor	 eax, eax

; 697  : }

  0008c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00090	5f		 pop	 rdi
  00091	5b		 pop	 rbx
  00092	c3		 ret	 0

; 694  :     Py_XDECREF(string);

$LN16@PyErr_Form:
  00093	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00097	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 695  :     va_end(vargs);
; 696  :     return NULL;

  0009d	33 c0		 xor	 eax, eax

; 697  : }

  0009f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a3	5f		 pop	 rdi
  000a4	5b		 pop	 rbx
  000a5	c3		 ret	 0

; 694  :     Py_XDECREF(string);

$LN11@PyErr_Form:
  000a6	48 8b cf	 mov	 rcx, rdi
  000a9	e8 00 00 00 00	 call	 Px_DecRef
$LN20@PyErr_Form:

; 695  :     va_end(vargs);
; 696  :     return NULL;

  000ae	33 c0		 xor	 eax, eax

; 697  : }

  000b0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b4	5f		 pop	 rdi
  000b5	5b		 pop	 rbx
  000b6	c3		 ret	 0
PyErr_Format ENDP
_TEXT	ENDS
PUBLIC	??_C@_09GBDGLPNL@?5ignored?6?$AA@		; `string'
PUBLIC	??_C@_04GJPPFNOH@?5in?5?$AA@			; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_08OCOMCJAJ@builtins?$AA@			; `string'
PUBLIC	??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@		; `string'
PUBLIC	??_C@_0L@HHGNICHB@Exception?5?$AA@		; `string'
PUBLIC	??_C@_06FJGNEBG@stderr?$AA@			; `string'
PUBLIC	PyErr_WriteUnraisable
EXTRN	PyFile_WriteObject:PROC
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	__imp_strrchr:PROC
EXTRN	PyFile_WriteString:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PySys_GetObject:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_WriteUnraisable DD imagerel $LN65
	DD	imagerel $LN65+8
	DD	imagerel $unwind$PyErr_WriteUnraisable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyErr_WriteUnraisable DD imagerel $LN65+8
	DD	imagerel $LN65+12
	DD	imagerel $chain$0$PyErr_WriteUnraisable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyErr_WriteUnraisable DD imagerel $LN65+12
	DD	imagerel $LN65+121
	DD	imagerel $chain$3$PyErr_WriteUnraisable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyErr_WriteUnraisable DD imagerel $LN65+121
	DD	imagerel $LN65+234
	DD	imagerel $chain$5$PyErr_WriteUnraisable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyErr_WriteUnraisable DD imagerel $LN65+234
	DD	imagerel $LN65+263
	DD	imagerel $chain$6$PyErr_WriteUnraisable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$PyErr_WriteUnraisable DD imagerel $LN65+263
	DD	imagerel $LN65+329
	DD	imagerel $chain$7$PyErr_WriteUnraisable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$PyErr_WriteUnraisable DD imagerel $LN65+329
	DD	imagerel $LN65+381
	DD	imagerel $chain$8$PyErr_WriteUnraisable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$PyErr_WriteUnraisable DD imagerel $LN65+381
	DD	imagerel $LN65+450
	DD	imagerel $chain$9$PyErr_WriteUnraisable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$PyErr_WriteUnraisable DD imagerel $LN65+450
	DD	imagerel $LN65+564
	DD	imagerel $chain$10$PyErr_WriteUnraisable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$PyErr_WriteUnraisable DD imagerel $LN65+564
	DD	imagerel $LN65+683
	DD	imagerel $chain$11$PyErr_WriteUnraisable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$12$PyErr_WriteUnraisable DD imagerel $LN65+683
	DD	imagerel $LN65+797
	DD	imagerel $chain$12$PyErr_WriteUnraisable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$12$PyErr_WriteUnraisable DD 021H
	DD	imagerel $LN65
	DD	imagerel $LN65+8
	DD	imagerel $unwind$PyErr_WriteUnraisable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$PyErr_WriteUnraisable DD 021H
	DD	imagerel $LN65+8
	DD	imagerel $LN65+12
	DD	imagerel $chain$0$PyErr_WriteUnraisable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$PyErr_WriteUnraisable DD 020021H
	DD	09c400H
	DD	imagerel $LN65+8
	DD	imagerel $LN65+12
	DD	imagerel $chain$0$PyErr_WriteUnraisable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$PyErr_WriteUnraisable DD 021H
	DD	imagerel $LN65+12
	DD	imagerel $LN65+121
	DD	imagerel $chain$3$PyErr_WriteUnraisable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$PyErr_WriteUnraisable DD 020021H
	DD	07e400H
	DD	imagerel $LN65+12
	DD	imagerel $LN65+121
	DD	imagerel $chain$3$PyErr_WriteUnraisable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$PyErr_WriteUnraisable DD 021H
	DD	imagerel $LN65+121
	DD	imagerel $LN65+234
	DD	imagerel $chain$5$PyErr_WriteUnraisable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyErr_WriteUnraisable DD 020521H
	DD	0a6405H
	DD	imagerel $LN65+121
	DD	imagerel $LN65+234
	DD	imagerel $chain$5$PyErr_WriteUnraisable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyErr_WriteUnraisable DD 040f21H
	DD	07e40fH
	DD	08d405H
	DD	imagerel $LN65+12
	DD	imagerel $LN65+121
	DD	imagerel $chain$3$PyErr_WriteUnraisable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyErr_WriteUnraisable DD 060c21H
	DD	06f40cH
	DD	09c408H
	DD	0b5404H
	DD	imagerel $LN65+8
	DD	imagerel $LN65+12
	DD	imagerel $chain$0$PyErr_WriteUnraisable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyErr_WriteUnraisable DD 020421H
	DD	0e3404H
	DD	imagerel $LN65
	DD	imagerel $LN65+8
	DD	imagerel $unwind$PyErr_WriteUnraisable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_WriteUnraisable DD 020801H
	DD	07004b208H
xdata	ENDS
;	COMDAT ??_C@_09GBDGLPNL@?5ignored?6?$AA@
CONST	SEGMENT
??_C@_09GBDGLPNL@?5ignored?6?$AA@ DB ' ignored', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GJPPFNOH@?5in?5?$AA@
CONST	SEGMENT
??_C@_04GJPPFNOH@?5in?5?$AA@ DB ' in ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08OCOMCJAJ@builtins?$AA@
CONST	SEGMENT
??_C@_08OCOMCJAJ@builtins?$AA@ DB 'builtins', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
CONST	SEGMENT
??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@ DB '<unknown>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HHGNICHB@Exception?5?$AA@
CONST	SEGMENT
??_C@_0L@HHGNICHB@Exception?5?$AA@ DB 'Exception ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJGNEBG@stderr?$AA@
CONST	SEGMENT
??_C@_06FJGNEBG@stderr?$AA@ DB 'stderr', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\errors.c
CONST	ENDS
;	COMDAT PyErr_WriteUnraisable
_TEXT	SEGMENT
obj$ = 112
v$ = 120
t$ = 128
tb$ = 136
PyErr_WriteUnraisable PROC				; COMDAT

; 790  : {

$LN65:
  00000	48 8b c4	 mov	 rax, rsp
  00003	57		 push	 rdi
  00004	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00008	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  0000c	48 89 68 f0	 mov	 QWORD PTR [rax-16], rbp
  00010	4c 89 60 e0	 mov	 QWORD PTR [rax-32], r12
  00014	4c 89 78 c8	 mov	 QWORD PTR [rax-56], r15
  00018	4c 8b f9	 mov	 r15, rcx

; 791  :     _Py_IDENTIFIER(__module__);
; 792  :     PyObject *f, *t, *v, *tb;
; 793  :     PyErr_Fetch(&t, &v, &tb);

  0001b	4c 8d 40 20	 lea	 r8, QWORD PTR [rax+32]
  0001f	48 8d 48 18	 lea	 rcx, QWORD PTR [rax+24]
  00023	48 8d 50 10	 lea	 rdx, QWORD PTR [rax+16]
  00027	e8 00 00 00 00	 call	 PyErr_Fetch

; 794  :     f = PySys_GetObject("stderr");

  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00033	e8 00 00 00 00	 call	 PySys_GetObject

; 795  :     if (f != NULL && f != Py_None) {

  00038	48 8b 5c 24 78	 mov	 rbx, QWORD PTR v$[rsp]
  0003d	4c 8b a4 24 80
	00 00 00	 mov	 r12, QWORD PTR t$[rsp]
  00045	48 8b e8	 mov	 rbp, rax
  00048	48 85 c0	 test	 rax, rax
  0004b	0f 84 62 01 00
	00		 je	 $LN12@PyErr_Writ
  00051	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  00058	48 3b c7	 cmp	 rax, rdi
  0005b	0f 84 52 01 00
	00		 je	 $LN12@PyErr_Writ

; 796  :         PyFile_WriteString("Exception ", f);

  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@HHGNICHB@Exception?5?$AA@
  00068	48 8b d0	 mov	 rdx, rax
  0006b	e8 00 00 00 00	 call	 PyFile_WriteString

; 797  :         if (t) {

  00070	4d 85 e4	 test	 r12, r12
  00073	0f 84 04 01 00
	00		 je	 $LN15@PyErr_Writ

; 798  :             PyObject* moduleName;
; 799  :             char* className;
; 800  :             assert(PyExceptionClass_Check(t));
; 801  :             className = PyExceptionClass_Name(t);

  00079	4c 89 6c 24 40	 mov	 QWORD PTR [rsp+64], r13
  0007e	4d 8b 6c 24 70	 mov	 r13, QWORD PTR [r12+112]
  00083	4c 89 74 24 38	 mov	 QWORD PTR [rsp+56], r14

; 802  :             if (className != NULL) {

  00088	4d 85 ed	 test	 r13, r13
  0008b	74 17		 je	 SHORT $LN24@PyErr_Writ

; 803  :                 char *dot = strrchr(className, '.');

  0008d	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00092	49 8b cd	 mov	 rcx, r13
  00095	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strrchr

; 804  :                 if (dot != NULL)

  0009b	48 85 c0	 test	 rax, rax
  0009e	74 04		 je	 SHORT $LN24@PyErr_Writ

; 805  :                     className = dot+1;

  000a0	4c 8d 68 01	 lea	 r13, QWORD PTR [rax+1]
$LN24@PyErr_Writ:

; 806  :             }
; 807  : 
; 808  :             moduleName = _PyObject_GetAttrId(t, &PyId___module__);

  000a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000aa	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  000b3	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___module__@?1??PyErr_WriteUnraisable@@9@9
  000b8	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  000bc	49 8b cc	 mov	 rcx, r12
  000bf	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000c4	4c 8b f0	 mov	 r14, rax

; 809  :             if (moduleName == NULL)

  000c7	48 85 c0	 test	 rax, rax
  000ca	75 11		 jne	 SHORT $LN23@PyErr_Writ

; 810  :                 PyFile_WriteString("<unknown>", f);

  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
  000d3	48 8b d5	 mov	 rdx, rbp
  000d6	e8 00 00 00 00	 call	 PyFile_WriteString

; 811  :             else {

  000db	eb 4b		 jmp	 SHORT $LN21@PyErr_Writ
$LN23@PyErr_Writ:

; 812  :                 char* modstr = _PyUnicode_AsString(moduleName);

  000dd	48 8b c8	 mov	 rcx, rax
  000e0	e8 00 00 00 00	 call	 PyUnicode_AsUTF8

; 813  :                 if (modstr &&
; 814  :                     strcmp(modstr, "builtins") != 0)

  000e5	48 85 c0	 test	 rax, rax
  000e8	74 3e		 je	 SHORT $LN21@PyErr_Writ
  000ea	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  000ef	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  000f6	b9 09 00 00 00	 mov	 ecx, 9
  000fb	48 8b f0	 mov	 rsi, rax
  000fe	f3 a6		 repe cmpsb
  00100	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00105	74 1a		 je	 SHORT $LN63@PyErr_Writ

; 815  :                 {
; 816  :                     PyFile_WriteString(modstr, f);

  00107	48 8b d5	 mov	 rdx, rbp
  0010a	48 8b c8	 mov	 rcx, rax
  0010d	e8 00 00 00 00	 call	 PyFile_WriteString

; 817  :                     PyFile_WriteString(".", f);

  00112	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  00119	48 8b d5	 mov	 rdx, rbp
  0011c	e8 00 00 00 00	 call	 PyFile_WriteString
$LN63@PyErr_Writ:

; 795  :     if (f != NULL && f != Py_None) {

  00121	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
$LN21@PyErr_Writ:

; 818  :                 }
; 819  :             }
; 820  :             if (className == NULL)
; 821  :                 PyFile_WriteString("<unknown>", f);

  00128	48 8b d5	 mov	 rdx, rbp
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
  00132	4d 85 ed	 test	 r13, r13
  00135	74 03		 je	 SHORT $LN64@PyErr_Writ

; 822  :             else
; 823  :                 PyFile_WriteString(className, f);

  00137	49 8b cd	 mov	 rcx, r13
$LN64@PyErr_Writ:
  0013a	e8 00 00 00 00	 call	 PyFile_WriteString
  0013f	4c 8b 6c 24 40	 mov	 r13, QWORD PTR [rsp+64]

; 824  :             if (v && v != Py_None) {

  00144	48 85 db	 test	 rbx, rbx
  00147	74 22		 je	 SHORT $LN17@PyErr_Writ
  00149	48 3b df	 cmp	 rbx, rdi
  0014c	74 1d		 je	 SHORT $LN17@PyErr_Writ

; 825  :                 PyFile_WriteString(": ", f);

  0014e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02LMMGGCAJ@?3?5?$AA@
  00155	48 8b d5	 mov	 rdx, rbp
  00158	e8 00 00 00 00	 call	 PyFile_WriteString

; 826  :                 PyFile_WriteObject(v, f, 0);

  0015d	45 33 c0	 xor	 r8d, r8d
  00160	48 8b d5	 mov	 rdx, rbp
  00163	48 8b cb	 mov	 rcx, rbx
  00166	e8 00 00 00 00	 call	 PyFile_WriteObject
$LN17@PyErr_Writ:

; 827  :             }
; 828  :             Py_XDECREF(moduleName);

  0016b	4d 85 f6	 test	 r14, r14
  0016e	74 08		 je	 SHORT $LN16@PyErr_Writ
  00170	49 8b ce	 mov	 rcx, r14
  00173	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@PyErr_Writ:
  00178	4c 8b 74 24 38	 mov	 r14, QWORD PTR [rsp+56]
$LN15@PyErr_Writ:

; 829  :         }
; 830  :         if (obj) {

  0017d	4d 85 ff	 test	 r15, r15
  00180	74 1d		 je	 SHORT $LN13@PyErr_Writ

; 831  :             PyFile_WriteString(" in ", f);

  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GJPPFNOH@?5in?5?$AA@
  00189	48 8b d5	 mov	 rdx, rbp
  0018c	e8 00 00 00 00	 call	 PyFile_WriteString

; 832  :             PyFile_WriteObject(obj, f, 0);

  00191	45 33 c0	 xor	 r8d, r8d
  00194	48 8b d5	 mov	 rdx, rbp
  00197	49 8b cf	 mov	 rcx, r15
  0019a	e8 00 00 00 00	 call	 PyFile_WriteObject
$LN13@PyErr_Writ:

; 833  :         }
; 834  :         PyFile_WriteString(" ignored\n", f);

  0019f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09GBDGLPNL@?5ignored?6?$AA@
  001a6	48 8b d5	 mov	 rdx, rbp
  001a9	e8 00 00 00 00	 call	 PyFile_WriteString

; 835  :         PyErr_Clear(); /* Just in case */

  001ae	e8 00 00 00 00	 call	 PyErr_Clear
$LN12@PyErr_Writ:

; 836  :     }
; 837  :     Py_XDECREF(t);

  001b3	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]
  001b8	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  001bd	4d 85 e4	 test	 r12, r12
  001c0	74 68		 je	 SHORT $LN11@PyErr_Writ
  001c2	e8 00 00 00 00	 call	 _Py_PXCTX
  001c7	85 c0		 test	 eax, eax
  001c9	75 5f		 jne	 SHORT $LN11@PyErr_Writ
  001cb	49 8b 44 24 20	 mov	 rax, QWORD PTR [r12+32]
  001d0	a8 20		 test	 al, 32			; 00000020H
  001d2	75 4e		 jne	 SHORT $LN34@PyErr_Writ
  001d4	84 c0		 test	 al, al
  001d6	78 4a		 js	 SHORT $LN34@PyErr_Writ
  001d8	a8 02		 test	 al, 2
  001da	75 4e		 jne	 SHORT $LN11@PyErr_Writ
  001dc	49 ff 4c 24 50	 dec	 QWORD PTR [r12+80]
  001e1	75 47		 jne	 SHORT $LN11@PyErr_Writ
  001e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001f1	4d 8b cc	 mov	 r9, r12
  001f4	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001fa	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00202	e8 00 00 00 00	 call	 _PyParallel_Guard
  00207	49 8b cc	 mov	 rcx, r12
  0020a	85 c0		 test	 eax, eax
  0020c	74 07		 je	 SHORT $LN39@PyErr_Writ
  0020e	e8 00 00 00 00	 call	 _Px_Dealloc
  00213	eb 15		 jmp	 SHORT $LN11@PyErr_Writ
$LN39@PyErr_Writ:
  00215	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]
  0021a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00220	eb 08		 jmp	 SHORT $LN11@PyErr_Writ
$LN34@PyErr_Writ:
  00222	49 8b cc	 mov	 rcx, r12
  00225	e8 00 00 00 00	 call	 Px_DecRef
$LN11@PyErr_Writ:

; 838  :     Py_XDECREF(v);

  0022a	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]
  0022f	48 85 db	 test	 rbx, rbx
  00232	74 65		 je	 SHORT $LN7@PyErr_Writ
  00234	e8 00 00 00 00	 call	 _Py_PXCTX
  00239	85 c0		 test	 eax, eax
  0023b	75 5c		 jne	 SHORT $LN7@PyErr_Writ
  0023d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00241	a8 20		 test	 al, 32			; 00000020H
  00243	75 4c		 jne	 SHORT $LN45@PyErr_Writ
  00245	84 c0		 test	 al, al
  00247	78 48		 js	 SHORT $LN45@PyErr_Writ
  00249	a8 02		 test	 al, 2
  0024b	75 4c		 jne	 SHORT $LN7@PyErr_Writ
  0024d	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00251	75 46		 jne	 SHORT $LN7@PyErr_Writ
  00253	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0025a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00261	4c 8b cb	 mov	 r9, rbx
  00264	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0026a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00272	e8 00 00 00 00	 call	 _PyParallel_Guard
  00277	48 8b cb	 mov	 rcx, rbx
  0027a	85 c0		 test	 eax, eax
  0027c	74 07		 je	 SHORT $LN50@PyErr_Writ
  0027e	e8 00 00 00 00	 call	 _Px_Dealloc
  00283	eb 14		 jmp	 SHORT $LN7@PyErr_Writ
$LN50@PyErr_Writ:
  00285	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00289	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0028f	eb 08		 jmp	 SHORT $LN7@PyErr_Writ
$LN45@PyErr_Writ:
  00291	48 8b cb	 mov	 rcx, rbx
  00294	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyErr_Writ:

; 839  :     Py_XDECREF(tb);

  00299	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR tb$[rsp]
  002a1	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  002a6	48 85 ff	 test	 rdi, rdi
  002a9	74 6c		 je	 SHORT $LN3@PyErr_Writ
  002ab	e8 00 00 00 00	 call	 _Py_PXCTX
  002b0	85 c0		 test	 eax, eax
  002b2	75 63		 jne	 SHORT $LN3@PyErr_Writ
  002b4	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  002b8	a8 20		 test	 al, 32			; 00000020H
  002ba	75 53		 jne	 SHORT $LN56@PyErr_Writ
  002bc	84 c0		 test	 al, al
  002be	78 4f		 js	 SHORT $LN56@PyErr_Writ
  002c0	a8 02		 test	 al, 2
  002c2	75 53		 jne	 SHORT $LN3@PyErr_Writ
  002c4	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  002c8	75 4d		 jne	 SHORT $LN3@PyErr_Writ
  002ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  002d8	4c 8b cf	 mov	 r9, rdi
  002db	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002e1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002e9	e8 00 00 00 00	 call	 _PyParallel_Guard
  002ee	48 8b cf	 mov	 rcx, rdi
  002f1	85 c0		 test	 eax, eax
  002f3	74 0a		 je	 SHORT $LN61@PyErr_Writ

; 840  : }

  002f5	48 83 c4 60	 add	 rsp, 96			; 00000060H
  002f9	5f		 pop	 rdi
  002fa	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 839  :     Py_XDECREF(tb);

$LN61@PyErr_Writ:
  002ff	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]

; 840  : }

  00303	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00307	5f		 pop	 rdi
  00308	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 839  :     Py_XDECREF(tb);

$LN56@PyErr_Writ:
  0030f	48 8b cf	 mov	 rcx, rdi
  00312	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyErr_Writ:

; 840  : }

  00317	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0031b	5f		 pop	 rdi
  0031c	c3		 ret	 0
PyErr_WriteUnraisable ENDP
_TEXT	ENDS
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	PyErr_ProgramText
EXTRN	PyUnicode_FromString:PROC
EXTRN	__imp_fclose:PROC
EXTRN	Py_UniversalNewlineFgets:PROC
EXTRN	__imp_fopen:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_ProgramText DD imagerel $LN26
	DD	imagerel $LN26+44
	DD	imagerel $unwind$PyErr_ProgramText
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyErr_ProgramText DD imagerel $LN26+44
	DD	imagerel $LN26+83
	DD	imagerel $chain$0$PyErr_ProgramText
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyErr_ProgramText DD imagerel $LN26+83
	DD	imagerel $LN26+91
	DD	imagerel $chain$3$PyErr_ProgramText
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyErr_ProgramText DD imagerel $LN26+91
	DD	imagerel $LN26+188
	DD	imagerel $chain$4$PyErr_ProgramText
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyErr_ProgramText DD imagerel $LN26+188
	DD	imagerel $LN26+259
	DD	imagerel $chain$5$PyErr_ProgramText
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$PyErr_ProgramText DD imagerel $LN26+259
	DD	imagerel $LN26+263
	DD	imagerel $chain$7$PyErr_ProgramText
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$PyErr_ProgramText DD imagerel $LN26+263
	DD	imagerel $LN26+274
	DD	imagerel $chain$8$PyErr_ProgramText
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$PyErr_ProgramText DD 021H
	DD	imagerel $LN26
	DD	imagerel $LN26+44
	DD	imagerel $unwind$PyErr_ProgramText
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$PyErr_ProgramText DD 040021H
	DD	0855400H
	DD	0843400H
	DD	imagerel $LN26
	DD	imagerel $LN26+44
	DD	imagerel $unwind$PyErr_ProgramText
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyErr_ProgramText DD 021H
	DD	imagerel $LN26+83
	DD	imagerel $LN26+91
	DD	imagerel $chain$3$PyErr_ProgramText
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyErr_ProgramText DD 020821H
	DD	0866408H
	DD	imagerel $LN26+83
	DD	imagerel $LN26+91
	DD	imagerel $chain$3$PyErr_ProgramText
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyErr_ProgramText DD 040821H
	DD	0843408H
	DD	0855400H
	DD	imagerel $LN26
	DD	imagerel $LN26+44
	DD	imagerel $unwind$PyErr_ProgramText
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyErr_ProgramText DD 020821H
	DD	0855408H
	DD	imagerel $LN26
	DD	imagerel $LN26+44
	DD	imagerel $unwind$PyErr_ProgramText
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_ProgramText DD 030901H
	DD	0820109H
	DD	07002H
xdata	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyErr_ProgramText
_TEXT	SEGMENT
linebuf$ = 32
filename$ = 1056
lineno$ = 1064
PyErr_ProgramText PROC					; COMDAT

; 937  : {

$LN26:
  00000	40 57		 push	 rdi
  00002	48 81 ec 10 04
	00 00		 sub	 rsp, 1040		; 00000410H
  00009	8b fa		 mov	 edi, edx

; 938  :     FILE *fp;
; 939  :     int i;
; 940  :     char linebuf[1000];
; 941  : 
; 942  :     if (filename == NULL || *filename == '\0' || lineno <= 0)

  0000b	48 85 c9	 test	 rcx, rcx
  0000e	0f 84 f3 00 00
	00		 je	 $LN15@PyErr_Prog
  00014	80 39 00	 cmp	 BYTE PTR [rcx], 0
  00017	0f 84 ea 00 00
	00		 je	 $LN15@PyErr_Prog
  0001d	85 ff		 test	 edi, edi
  0001f	0f 8e e2 00 00
	00		 jle	 $LN15@PyErr_Prog

; 944  :     fp = fopen(filename, "r" PY_STDIOTEXTMODE);

  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  0002c	48 89 ac 24 28
	04 00 00	 mov	 QWORD PTR [rsp+1064], rbp
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  0003a	48 8b e8	 mov	 rbp, rax

; 945  :     if (fp == NULL)

  0003d	48 85 c0	 test	 rax, rax
  00040	75 11		 jne	 SHORT $LN14@PyErr_Prog
  00042	48 8b ac 24 28
	04 00 00	 mov	 rbp, QWORD PTR [rsp+1064]

; 973  : }

  0004a	48 81 c4 10 04
	00 00		 add	 rsp, 1040		; 00000410H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
$LN14@PyErr_Prog:
  00053	48 89 9c 24 20
	04 00 00	 mov	 QWORD PTR [rsp+1056], rbx
  0005b	48 89 b4 24 30
	04 00 00	 mov	 QWORD PTR [rsp+1072], rsi

; 946  :         return NULL;
; 947  :     for (i = 0; i < lineno; i++) {

  00063	33 f6		 xor	 esi, esi
  00065	85 ff		 test	 edi, edi
  00067	7e 3e		 jle	 SHORT $LN11@PyErr_Prog
  00069	48 8b f7	 mov	 rsi, rdi
  0006c	48 8b df	 mov	 rbx, rdi
  0006f	90		 npad	 1
$LL10@PyErr_Prog:

; 948  :         char *pLastChar = &linebuf[sizeof(linebuf) - 2];
; 949  :         do {
; 950  :             *pLastChar = '\0';
; 951  :             if (Py_UniversalNewlineFgets(linebuf, sizeof linebuf,
; 952  :                                          fp, NULL) == NULL)

  00070	48 8d 4c 24 20	 lea	 rcx, QWORD PTR linebuf$[rsp]
  00075	45 33 c9	 xor	 r9d, r9d
  00078	4c 8b c5	 mov	 r8, rbp
  0007b	ba e8 03 00 00	 mov	 edx, 1000		; 000003e8H
  00080	c6 84 24 06 04
	00 00 00	 mov	 BYTE PTR linebuf$[rsp+998], 0
  00088	e8 00 00 00 00	 call	 Py_UniversalNewlineFgets
  0008d	48 85 c0	 test	 rax, rax
  00090	74 10		 je	 SHORT $LN8@PyErr_Prog

; 953  :                 break;
; 954  :             /* fgets read *something*; if it didn't get as
; 955  :                far as pLastChar, it must have found a newline
; 956  :                or hit the end of the file; if pLastChar is \n,
; 957  :                it obviously found a newline; else we haven't
; 958  :                yet seen a newline, so must continue */
; 959  :         } while (*pLastChar != '\0' && *pLastChar != '\n');

  00092	0f b6 84 24 06
	04 00 00	 movzx	 eax, BYTE PTR linebuf$[rsp+998]
  0009a	84 c0		 test	 al, al
  0009c	74 04		 je	 SHORT $LN8@PyErr_Prog
  0009e	3c 0a		 cmp	 al, 10
  000a0	75 ce		 jne	 SHORT $LL10@PyErr_Prog
$LN8@PyErr_Prog:

; 946  :         return NULL;
; 947  :     for (i = 0; i < lineno; i++) {

  000a2	48 ff cb	 dec	 rbx
  000a5	75 c9		 jne	 SHORT $LL10@PyErr_Prog
$LN11@PyErr_Prog:

; 960  :     }
; 961  :     fclose(fp);

  000a7	48 8b cd	 mov	 rcx, rbp
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 962  :     if (i == lineno) {

  000b0	3b f7		 cmp	 esi, edi
  000b2	48 8b b4 24 30
	04 00 00	 mov	 rsi, QWORD PTR [rsp+1072]
  000ba	75 47		 jne	 SHORT $LN5@PyErr_Prog

; 963  :         char *p = linebuf;

  000bc	48 8d 4c 24 20	 lea	 rcx, QWORD PTR linebuf$[rsp]
$LL4@PyErr_Prog:

; 964  :         PyObject *res;
; 965  :         while (*p == ' ' || *p == '\t' || *p == '\014')

  000c1	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  000c4	3c 20		 cmp	 al, 32			; 00000020H
  000c6	74 08		 je	 SHORT $LN2@PyErr_Prog
  000c8	3c 09		 cmp	 al, 9
  000ca	74 04		 je	 SHORT $LN2@PyErr_Prog
  000cc	3c 0c		 cmp	 al, 12
  000ce	75 05		 jne	 SHORT $LN3@PyErr_Prog
$LN2@PyErr_Prog:

; 966  :             p++;

  000d0	48 ff c1	 inc	 rcx
  000d3	eb ec		 jmp	 SHORT $LL4@PyErr_Prog
$LN3@PyErr_Prog:

; 967  :         res = PyUnicode_FromString(p);

  000d5	e8 00 00 00 00	 call	 PyUnicode_FromString
  000da	48 8b d8	 mov	 rbx, rax

; 968  :         if (res == NULL)

  000dd	48 85 c0	 test	 rax, rax
  000e0	75 05		 jne	 SHORT $LN1@PyErr_Prog

; 969  :             PyErr_Clear();

  000e2	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@PyErr_Prog:

; 970  :         return res;

  000e7	48 8b c3	 mov	 rax, rbx
$LN25@PyErr_Prog:
  000ea	48 8b 9c 24 20
	04 00 00	 mov	 rbx, QWORD PTR [rsp+1056]
  000f2	48 8b ac 24 28
	04 00 00	 mov	 rbp, QWORD PTR [rsp+1064]

; 973  : }

  000fa	48 81 c4 10 04
	00 00		 add	 rsp, 1040		; 00000410H
  00101	5f		 pop	 rdi
  00102	c3		 ret	 0
$LN5@PyErr_Prog:

; 971  :     }
; 972  :     return NULL;

  00103	33 c0		 xor	 eax, eax
  00105	eb e3		 jmp	 SHORT $LN25@PyErr_Prog
$LN15@PyErr_Prog:

; 943  :         return NULL;

  00107	33 c0		 xor	 eax, eax

; 973  : }

  00109	48 81 c4 10 04
	00 00		 add	 rsp, 1040		; 00000410H
  00110	5f		 pop	 rdi
  00111	c3		 ret	 0
PyErr_ProgramText ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@BAHCAOOM@exception?5?$CFR?5not?5a?5BaseException@ ; `string'
EXTRN	PyException_GetTraceback:PROC
EXTRN	PyException_SetContext:PROC
EXTRN	PyException_GetContext:PROC
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	PyTuple_New:PROC
EXTRN	PyTuple_Pack:PROC
EXTRN	PyExc_SystemError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_SetObject DD imagerel $LN54
	DD	imagerel $LN54+591
	DD	imagerel $unwind$PyErr_SetObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetObject DD 0ac201H
	DD	0a54c2H
	DD	0bc479H
	DD	0c340dH
	DD	0d009520dH
	DD	060067007H
xdata	ENDS
;	COMDAT ??_C@_0CK@BAHCAOOM@exception?5?$CFR?5not?5a?5BaseException@
CONST	SEGMENT
??_C@_0CK@BAHCAOOM@exception?5?$CFR?5not?5a?5BaseException@ DB 'exception'
	DB	' %R not a BaseException subclass', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\errors.c
CONST	ENDS
;	COMDAT PyErr_SetObject
_TEXT	SEGMENT
exception$ = 80
value$ = 88
PyErr_SetObject PROC					; COMDAT

; 54   : {

$LN54:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	41 55		 push	 r13
  00009	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000d	48 8b da	 mov	 rbx, rdx
  00010	48 8b f1	 mov	 rsi, rcx

; 55   :     PyThreadState *tstate = PyThreadState_GET();

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 0a		 je	 SHORT $LN36@PyErr_SetO
  0001c	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00021	48 8b f8	 mov	 rdi, rax
  00024	eb 07		 jmp	 SHORT $LN37@PyErr_SetO
$LN36@PyErr_SetO:
  00026	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR _PyThreadState_Current
$LN37@PyErr_SetO:

; 56   :     PyObject *exc_value;
; 57   :     PyObject *tb = NULL;

  0002d	45 33 ed	 xor	 r13d, r13d

; 58   : 
; 59   :     if (exception != NULL &&
; 60   :         !PyExceptionClass_Check(exception)) {

  00030	48 85 f6	 test	 rsi, rsi
  00033	74 3f		 je	 SHORT $LN31@PyErr_SetO
  00035	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  00039	f7 80 00 01 00
	00 00 00 00 80	 test	 DWORD PTR [rax+256], -2147483648 ; ffffffff80000000H
  00043	74 0c		 je	 SHORT $LN32@PyErr_SetO
  00045	f7 86 00 01 00
	00 00 00 00 40	 test	 DWORD PTR [rsi+256], 1073741824 ; 40000000H
  0004f	75 23		 jne	 SHORT $LN31@PyErr_SetO
$LN32@PyErr_SetO:

; 61   :         PyErr_Format(PyExc_SystemError,
; 62   :                      "exception %R not a BaseException subclass",
; 63   :                      exception);

  00051	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@BAHCAOOM@exception?5?$CFR?5not?5a?5BaseException@
  0005f	4c 8b c6	 mov	 r8, rsi

; 113  : }

  00062	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00067	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006b	41 5d		 pop	 r13
  0006d	5f		 pop	 rdi
  0006e	5e		 pop	 rsi
  0006f	e9 00 00 00 00	 jmp	 PyErr_Format
$LN31@PyErr_SetO:
  00074	4c 89 64 24 58	 mov	 QWORD PTR [rsp+88], r12

; 64   :         return;
; 65   :     }
; 66   :     Py_XINCREF(value);

  00079	48 85 db	 test	 rbx, rbx
  0007c	74 3b		 je	 SHORT $LN30@PyErr_SetO
  0007e	e8 00 00 00 00	 call	 _Py_PXCTX
  00083	85 c0		 test	 eax, eax
  00085	75 32		 jne	 SHORT $LN30@PyErr_SetO
  00087	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00095	4c 8b cb	 mov	 r9, rbx
  00098	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0009e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ab	85 c0		 test	 eax, eax
  000ad	75 06		 jne	 SHORT $LN40@PyErr_SetO
  000af	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000b3	74 04		 je	 SHORT $LN30@PyErr_SetO
$LN40@PyErr_SetO:
  000b5	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN30@PyErr_SetO:

; 67   :     exc_value = tstate->exc_value;

  000b9	4c 8b 67 68	 mov	 r12, QWORD PTR [rdi+104]
  000bd	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp

; 68   :     if (exc_value != NULL && exc_value != Py_None) {

  000c2	4d 85 e4	 test	 r12, r12
  000c5	0f 84 fe 00 00
	00		 je	 $LN6@PyErr_SetO
  000cb	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  000d2	4c 3b e7	 cmp	 r12, rdi
  000d5	0f 84 ee 00 00
	00		 je	 $LN6@PyErr_SetO

; 69   :         /* Implicit exception chaining */
; 70   :         Py_INCREF(exc_value);

  000db	49 8b cc	 mov	 rcx, r12
  000de	e8 00 00 00 00	 call	 _Py_IncRef

; 71   :         if (value == NULL || !PyExceptionInstance_Check(value)) {

  000e3	48 85 db	 test	 rbx, rbx
  000e6	74 37		 je	 SHORT $LN23@PyErr_SetO
  000e8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000ec	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [rax+256]
  000f2	0f ba e1 1e	 bt	 ecx, 30
  000f6	72 6d		 jb	 SHORT $LN26@PyErr_SetO

; 72   :             /* We must normalize the value right now */
; 73   :             PyObject *args, *fixed_value;
; 74   :             if (value == NULL || value == Py_None)

  000f8	48 3b df	 cmp	 rbx, rdi
  000fb	74 22		 je	 SHORT $LN23@PyErr_SetO

; 76   :             else if (PyTuple_Check(value)) {

  000fd	0f ba e1 1a	 bt	 ecx, 26
  00101	73 0d		 jae	 SHORT $LN21@PyErr_SetO

; 77   :                 Py_INCREF(value);

  00103	48 8b cb	 mov	 rcx, rbx
  00106	e8 00 00 00 00	 call	 _Py_IncRef

; 78   :                 args = value;

  0010b	48 8b fb	 mov	 rdi, rbx

; 79   :             }
; 80   :             else

  0010e	eb 19		 jmp	 SHORT $LN20@PyErr_SetO
$LN21@PyErr_SetO:

; 81   :                 args = PyTuple_Pack(1, value);

  00110	48 8b d3	 mov	 rdx, rbx
  00113	b9 01 00 00 00	 mov	 ecx, 1
  00118	e8 00 00 00 00	 call	 PyTuple_Pack
  0011d	eb 07		 jmp	 SHORT $LN53@PyErr_SetO
$LN23@PyErr_SetO:

; 75   :                 args = PyTuple_New(0);

  0011f	33 c9		 xor	 ecx, ecx
  00121	e8 00 00 00 00	 call	 PyTuple_New
$LN53@PyErr_SetO:
  00126	48 8b f8	 mov	 rdi, rax
$LN20@PyErr_SetO:

; 82   :             fixed_value = args ?
; 83   :                 PyEval_CallObject(exception, args) : NULL;

  00129	48 85 ff	 test	 rdi, rdi
  0012c	74 1b		 je	 SHORT $LN38@PyErr_SetO
  0012e	45 33 c0	 xor	 r8d, r8d
  00131	48 8b d7	 mov	 rdx, rdi
  00134	48 8b ce	 mov	 rcx, rsi
  00137	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords

; 84   :             Py_XDECREF(args);

  0013c	48 8b cf	 mov	 rcx, rdi
  0013f	48 8b e8	 mov	 rbp, rax
  00142	e8 00 00 00 00	 call	 _Py_DecRef
  00147	eb 03		 jmp	 SHORT $LN18@PyErr_SetO
$LN38@PyErr_SetO:

; 82   :             fixed_value = args ?
; 83   :                 PyEval_CallObject(exception, args) : NULL;

  00149	49 8b ed	 mov	 rbp, r13
$LN18@PyErr_SetO:

; 85   :             Py_XDECREF(value);

  0014c	48 85 db	 test	 rbx, rbx
  0014f	74 08		 je	 SHORT $LN14@PyErr_SetO
  00151	48 8b cb	 mov	 rcx, rbx
  00154	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@PyErr_SetO:

; 86   :             if (fixed_value == NULL)

  00159	48 85 ed	 test	 rbp, rbp
  0015c	0f 84 d5 00 00
	00		 je	 $LN52@PyErr_SetO

; 87   :                 return;
; 88   :             value = fixed_value;

  00162	48 8b dd	 mov	 rbx, rbp
$LN26@PyErr_SetO:

; 89   :         }
; 90   :         /* Avoid reference cycles through the context chain.
; 91   :            This is O(chain length) but context chains are
; 92   :            usually very short. Sensitive readers may try
; 93   :            to inline the call to PyException_GetContext. */
; 94   :         if (exc_value != value) {
; 95   :             PyObject *o = exc_value, *context;
; 96   :             while ((context = PyException_GetContext(o))) {

  00165	49 8b cc	 mov	 rcx, r12
  00168	4c 3b e3	 cmp	 r12, rbx
  0016b	74 57		 je	 SHORT $LN10@PyErr_SetO
  0016d	49 8b ec	 mov	 rbp, r12
  00170	e8 00 00 00 00	 call	 PyException_GetContext
  00175	48 8b f8	 mov	 rdi, rax
  00178	48 85 c0	 test	 rax, rax
  0017b	74 3a		 je	 SHORT $LN8@PyErr_SetO
  0017d	0f 1f 00	 npad	 3
$LL9@PyErr_SetO:

; 97   :                 Py_DECREF(context);

  00180	48 8b cf	 mov	 rcx, rdi
  00183	e8 00 00 00 00	 call	 _Py_DecRef

; 98   :                 if (context == value) {

  00188	48 3b fb	 cmp	 rdi, rbx
  0018b	74 20		 je	 SHORT $LN49@PyErr_SetO

; 100  :                     break;
; 101  :                 }
; 102  :                 o = context;

  0018d	48 8b cf	 mov	 rcx, rdi
  00190	48 8b ef	 mov	 rbp, rdi
  00193	e8 00 00 00 00	 call	 PyException_GetContext
  00198	48 8b f8	 mov	 rdi, rax
  0019b	48 85 c0	 test	 rax, rax
  0019e	75 e0		 jne	 SHORT $LL9@PyErr_SetO

; 103  :             }
; 104  :             PyException_SetContext(value, exc_value);

  001a0	49 8b d4	 mov	 rdx, r12
  001a3	48 8b cb	 mov	 rcx, rbx
  001a6	e8 00 00 00 00	 call	 PyException_SetContext

; 105  :         } else {

  001ab	eb 1c		 jmp	 SHORT $LN6@PyErr_SetO
$LN49@PyErr_SetO:

; 99   :                     PyException_SetContext(o, NULL);

  001ad	33 d2		 xor	 edx, edx
  001af	48 8b cd	 mov	 rcx, rbp
  001b2	e8 00 00 00 00	 call	 PyException_SetContext
$LN8@PyErr_SetO:

; 103  :             }
; 104  :             PyException_SetContext(value, exc_value);

  001b7	49 8b d4	 mov	 rdx, r12
  001ba	48 8b cb	 mov	 rcx, rbx
  001bd	e8 00 00 00 00	 call	 PyException_SetContext

; 105  :         } else {

  001c2	eb 05		 jmp	 SHORT $LN6@PyErr_SetO
$LN10@PyErr_SetO:

; 106  :             Py_DECREF(exc_value);

  001c4	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@PyErr_SetO:

; 107  :         }
; 108  :     }
; 109  :     if (value != NULL && PyExceptionInstance_Check(value))

  001c9	48 85 db	 test	 rbx, rbx
  001cc	74 1b		 je	 SHORT $LN4@PyErr_SetO
  001ce	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001d2	f7 80 00 01 00
	00 00 00 00 40	 test	 DWORD PTR [rax+256], 1073741824 ; 40000000H
  001dc	74 0b		 je	 SHORT $LN4@PyErr_SetO

; 110  :         tb = PyException_GetTraceback(value);

  001de	48 8b cb	 mov	 rcx, rbx
  001e1	e8 00 00 00 00	 call	 PyException_GetTraceback
  001e6	4c 8b e8	 mov	 r13, rax
$LN4@PyErr_SetO:

; 111  :     Py_XINCREF(exception);

  001e9	48 85 f6	 test	 rsi, rsi
  001ec	74 3b		 je	 SHORT $LN3@PyErr_SetO
  001ee	e8 00 00 00 00	 call	 _Py_PXCTX
  001f3	85 c0		 test	 eax, eax
  001f5	75 32		 jne	 SHORT $LN3@PyErr_SetO
  001f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00205	4c 8b ce	 mov	 r9, rsi
  00208	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0020e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00216	e8 00 00 00 00	 call	 _PyParallel_Guard
  0021b	85 c0		 test	 eax, eax
  0021d	75 06		 jne	 SHORT $LN44@PyErr_SetO
  0021f	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  00223	74 04		 je	 SHORT $LN3@PyErr_SetO
$LN44@PyErr_SetO:
  00225	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN3@PyErr_SetO:

; 112  :     PyErr_Restore(exception, value, tb);

  00229	4d 8b c5	 mov	 r8, r13
  0022c	48 8b d3	 mov	 rdx, rbx
  0022f	48 8b ce	 mov	 rcx, rsi
  00232	e8 00 00 00 00	 call	 PyErr_Restore
$LN52@PyErr_SetO:

; 113  : }

  00237	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  0023c	4c 8b 64 24 58	 mov	 r12, QWORD PTR [rsp+88]
  00241	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00246	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0024a	41 5d		 pop	 r13
  0024c	5f		 pop	 rdi
  0024d	5e		 pop	 rsi
  0024e	c3		 ret	 0
PyErr_SetObject ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetNone
; Function compile flags: /Ogtpy
;	COMDAT PyErr_SetNone
_TEXT	SEGMENT
exception$ = 8
PyErr_SetNone PROC					; COMDAT

; 118  :     PyErr_SetObject(exception, (PyObject *)NULL);

  00000	33 d2		 xor	 edx, edx

; 119  : }

  00002	e9 00 00 00 00	 jmp	 PyErr_SetObject
PyErr_SetNone ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetString
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_SetString DD imagerel $LN18
	DD	imagerel $LN18+169
	DD	imagerel $unwind$PyErr_SetString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetString DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\errors.c
xdata	ENDS
;	COMDAT PyErr_SetString
_TEXT	SEGMENT
exception$ = 64
string$ = 72
PyErr_SetString PROC					; COMDAT

; 123  : {

$LN18:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b d9	 mov	 rbx, rcx

; 124  :     PyObject *value = PyUnicode_FromString(string);

  0000d	48 8b ca	 mov	 rcx, rdx
  00010	e8 00 00 00 00	 call	 PyUnicode_FromString

; 125  :     PyErr_SetObject(exception, value);

  00015	48 8b cb	 mov	 rcx, rbx
  00018	48 8b d0	 mov	 rdx, rax
  0001b	48 8b f8	 mov	 rdi, rax
  0001e	e8 00 00 00 00	 call	 PyErr_SetObject

; 126  :     Py_XDECREF(value);

  00023	48 85 ff	 test	 rdi, rdi
  00026	74 76		 je	 SHORT $LN3@PyErr_SetS
  00028	e8 00 00 00 00	 call	 _Py_PXCTX
  0002d	85 c0		 test	 eax, eax
  0002f	75 6d		 jne	 SHORT $LN3@PyErr_SetS
  00031	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00035	a8 20		 test	 al, 32			; 00000020H
  00037	75 5d		 jne	 SHORT $LN11@PyErr_SetS
  00039	84 c0		 test	 al, al
  0003b	78 59		 js	 SHORT $LN11@PyErr_SetS
  0003d	a8 02		 test	 al, 2
  0003f	75 5d		 jne	 SHORT $LN3@PyErr_SetS
  00041	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00045	75 57		 jne	 SHORT $LN3@PyErr_SetS
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00055	4c 8b cf	 mov	 r9, rdi
  00058	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0005e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00066	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006b	48 8b cf	 mov	 rcx, rdi
  0006e	85 c0		 test	 eax, eax
  00070	74 0f		 je	 SHORT $LN16@PyErr_SetS

; 127  : }

  00072	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00077	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007b	5f		 pop	 rdi
  0007c	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 126  :     Py_XDECREF(value);

$LN16@PyErr_SetS:
  00081	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]

; 127  : }

  00085	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008e	5f		 pop	 rdi
  0008f	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 126  :     Py_XDECREF(value);

$LN11@PyErr_SetS:
  00096	48 8b cf	 mov	 rcx, rdi
  00099	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyErr_SetS:

; 127  : }

  0009e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a7	5f		 pop	 rdi
  000a8	c3		 ret	 0
PyErr_SetString ENDP
_TEXT	ENDS
PUBLIC	PyErr_GivenExceptionMatches
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyTuple_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_GivenExceptionMatches DD imagerel $LN18
	DD	imagerel $LN18+35
	DD	imagerel $unwind$PyErr_GivenExceptionMatches
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyErr_GivenExceptionMatches DD imagerel $LN18+35
	DD	imagerel $LN18+126
	DD	imagerel $chain$1$PyErr_GivenExceptionMatches
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyErr_GivenExceptionMatches DD imagerel $LN18+126
	DD	imagerel $LN18+148
	DD	imagerel $chain$3$PyErr_GivenExceptionMatches
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyErr_GivenExceptionMatches DD imagerel $LN18+148
	DD	imagerel $LN18+292
	DD	imagerel $chain$5$PyErr_GivenExceptionMatches
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$PyErr_GivenExceptionMatches DD imagerel $LN18+292
	DD	imagerel $LN18+314
	DD	imagerel $chain$7$PyErr_GivenExceptionMatches
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$PyErr_GivenExceptionMatches DD imagerel $LN18+314
	DD	imagerel $LN18+323
	DD	imagerel $chain$8$PyErr_GivenExceptionMatches
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$PyErr_GivenExceptionMatches DD 021H
	DD	imagerel $LN18
	DD	imagerel $LN18+35
	DD	imagerel $unwind$PyErr_GivenExceptionMatches
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$PyErr_GivenExceptionMatches DD 020021H
	DD	093400H
	DD	imagerel $LN18
	DD	imagerel $LN18+35
	DD	imagerel $unwind$PyErr_GivenExceptionMatches
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyErr_GivenExceptionMatches DD 020021H
	DD	093400H
	DD	imagerel $LN18
	DD	imagerel $LN18+35
	DD	imagerel $unwind$PyErr_GivenExceptionMatches
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyErr_GivenExceptionMatches DD 040021H
	DD	045400H
	DD	093400H
	DD	imagerel $LN18
	DD	imagerel $LN18+35
	DD	imagerel $unwind$PyErr_GivenExceptionMatches
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyErr_GivenExceptionMatches DD 041921H
	DD	045419H
	DD	093405H
	DD	imagerel $LN18
	DD	imagerel $LN18+35
	DD	imagerel $unwind$PyErr_GivenExceptionMatches
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_GivenExceptionMatches DD 030701H
	DD	070034207H
	DD	06002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyErr_GivenExceptionMatches
_TEXT	SEGMENT
tb$120440 = 64
err$ = 64
exc$ = 72
value$120439 = 80
exception$120438 = 88
PyErr_GivenExceptionMatches PROC			; COMDAT

; 141  : {

$LN18:
  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00007	48 8b fa	 mov	 rdi, rdx
  0000a	48 8b f1	 mov	 rsi, rcx

; 142  :     if (err == NULL || exc == NULL) {

  0000d	48 85 c9	 test	 rcx, rcx
  00010	0f 84 24 01 00
	00		 je	 $LN9@PyErr_Give
  00016	48 85 d2	 test	 rdx, rdx
  00019	0f 84 1b 01 00
	00		 je	 $LN9@PyErr_Give

; 145  :     }
; 146  :     if (PyTuple_Check(exc)) {

  0001f	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00023	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  00028	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [rax+256]
  0002e	0f ba e1 1a	 bt	 ecx, 26
  00032	73 60		 jae	 SHORT $LN8@PyErr_Give

; 147  :         Py_ssize_t i, n;
; 148  :         n = PyTuple_Size(exc);

  00034	48 8b ca	 mov	 rcx, rdx
  00037	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0003c	e8 00 00 00 00	 call	 PyTuple_Size

; 149  :         for (i = 0; i < n; i++) {

  00041	33 db		 xor	 ebx, ebx
  00043	48 8b e8	 mov	 rbp, rax
  00046	48 85 c0	 test	 rax, rax
  00049	7e 20		 jle	 SHORT $LN5@PyErr_Give

; 147  :         Py_ssize_t i, n;
; 148  :         n = PyTuple_Size(exc);

  0004b	48 83 c7 70	 add	 rdi, 112		; 00000070H
  0004f	90		 npad	 1
$LL7@PyErr_Give:

; 150  :             /* Test recursively */
; 151  :              if (PyErr_GivenExceptionMatches(
; 152  :                  err, PyTuple_GET_ITEM(exc, i)))

  00050	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  00053	48 8b ce	 mov	 rcx, rsi
  00056	e8 00 00 00 00	 call	 PyErr_GivenExceptionMatches
  0005b	85 c0		 test	 eax, eax
  0005d	75 1f		 jne	 SHORT $LN14@PyErr_Give

; 149  :         for (i = 0; i < n; i++) {

  0005f	48 ff c3	 inc	 rbx
  00062	48 83 c7 08	 add	 rdi, 8
  00066	48 3b dd	 cmp	 rbx, rbp
  00069	7c e5		 jl	 SHORT $LL7@PyErr_Give
$LN5@PyErr_Give:
  0006b	48 8b 6c 24 20	 mov	 rbp, QWORD PTR [rsp+32]
  00070	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]

; 155  :              }
; 156  :         }
; 157  :         return 0;

  00075	33 c0		 xor	 eax, eax

; 180  : }

  00077	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007b	5f		 pop	 rdi
  0007c	5e		 pop	 rsi
  0007d	c3		 ret	 0
$LN14@PyErr_Give:
  0007e	48 8b 6c 24 20	 mov	 rbp, QWORD PTR [rsp+32]
  00083	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]

; 153  :              {
; 154  :                  return 1;

  00088	b8 01 00 00 00	 mov	 eax, 1

; 180  : }

  0008d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00091	5f		 pop	 rdi
  00092	5e		 pop	 rsi
  00093	c3		 ret	 0
$LN8@PyErr_Give:

; 158  :     }
; 159  :     /* err might be an instance, so check its class. */
; 160  :     if (PyExceptionInstance_Check(err))

  00094	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  00098	f7 80 00 01 00
	00 00 00 00 40	 test	 DWORD PTR [rax+256], 1073741824 ; 40000000H
  000a2	48 0f 45 f0	 cmovne	 rsi, rax

; 161  :         err = PyExceptionInstance_Class(err);
; 162  : 
; 163  :     if (PyExceptionClass_Check(err) && PyExceptionClass_Check(exc)) {

  000a6	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  000aa	f7 80 00 01 00
	00 00 00 00 80	 test	 DWORD PTR [rax+256], -2147483648 ; ffffffff80000000H
  000b4	74 6e		 je	 SHORT $LN2@PyErr_Give
  000b6	f7 86 00 01 00
	00 00 00 00 40	 test	 DWORD PTR [rsi+256], 1073741824 ; 40000000H
  000c0	74 62		 je	 SHORT $LN2@PyErr_Give
  000c2	85 c9		 test	 ecx, ecx
  000c4	79 5e		 jns	 SHORT $LN2@PyErr_Give
  000c6	f7 82 00 01 00
	00 00 00 00 40	 test	 DWORD PTR [rdx+256], 1073741824 ; 40000000H
  000d0	74 52		 je	 SHORT $LN2@PyErr_Give

; 164  :         int res = 0;
; 165  :         PyObject *exception, *value, *tb;
; 166  :         PyErr_Fetch(&exception, &value, &tb);

  000d2	4c 8d 44 24 40	 lea	 r8, QWORD PTR tb$120440[rsp]
  000d7	48 8d 54 24 50	 lea	 rdx, QWORD PTR value$120439[rsp]
  000dc	48 8d 4c 24 58	 lea	 rcx, QWORD PTR exception$120438[rsp]
  000e1	e8 00 00 00 00	 call	 PyErr_Fetch

; 167  :         /* PyObject_IsSubclass() can recurse and therefore is
; 168  :            not safe (see test_bad_getattr in test.pickletester). */
; 169  :         res = PyType_IsSubtype((PyTypeObject *)err, (PyTypeObject *)exc);

  000e6	48 8b d7	 mov	 rdx, rdi
  000e9	48 8b ce	 mov	 rcx, rsi
  000ec	e8 00 00 00 00	 call	 PyType_IsSubtype
  000f1	8b d8		 mov	 ebx, eax

; 170  :         /* This function must not fail, so print the error here */
; 171  :         if (res == -1) {

  000f3	83 f8 ff	 cmp	 eax, -1
  000f6	75 0a		 jne	 SHORT $LN1@PyErr_Give

; 172  :             PyErr_WriteUnraisable(err);

  000f8	48 8b ce	 mov	 rcx, rsi
  000fb	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 173  :             res = 0;

  00100	33 db		 xor	 ebx, ebx
$LN1@PyErr_Give:

; 174  :         }
; 175  :         PyErr_Restore(exception, value, tb);

  00102	4c 8b 44 24 40	 mov	 r8, QWORD PTR tb$120440[rsp]
  00107	48 8b 54 24 50	 mov	 rdx, QWORD PTR value$120439[rsp]
  0010c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR exception$120438[rsp]
  00111	e8 00 00 00 00	 call	 PyErr_Restore

; 176  :         return res;

  00116	8b c3		 mov	 eax, ebx
  00118	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]

; 180  : }

  0011d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00121	5f		 pop	 rdi
  00122	5e		 pop	 rsi
  00123	c3		 ret	 0
$LN2@PyErr_Give:

; 177  :     }
; 178  : 
; 179  :     return err == exc;

  00124	33 db		 xor	 ebx, ebx
  00126	48 3b f2	 cmp	 rsi, rdx
  00129	0f 94 c3	 sete	 bl
  0012c	8b c3		 mov	 eax, ebx
  0012e	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]

; 180  : }

  00133	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00137	5f		 pop	 rdi
  00138	5e		 pop	 rsi
  00139	c3		 ret	 0
$LN9@PyErr_Give:

; 143  :         /* maybe caused by "import exceptions" that failed early on */
; 144  :         return 0;

  0013a	33 c0		 xor	 eax, eax

; 180  : }

  0013c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00140	5f		 pop	 rdi
  00141	5e		 pop	 rsi
  00142	c3		 ret	 0
PyErr_GivenExceptionMatches ENDP
_TEXT	ENDS
PUBLIC	PyErr_ExceptionMatches
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_ExceptionMatches DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$PyErr_ExceptionMatches
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_ExceptionMatches DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyErr_ExceptionMatches
_TEXT	SEGMENT
exc$ = 48
PyErr_ExceptionMatches PROC				; COMDAT

; 185  : {

$LN3:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 186  :     return PyErr_GivenExceptionMatches(PyErr_Occurred(), exc);

  00009	e8 00 00 00 00	 call	 PyErr_Occurred
  0000e	48 8b d3	 mov	 rdx, rbx
  00011	48 8b c8	 mov	 rcx, rax

; 187  : }

  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5b		 pop	 rbx
  00019	e9 00 00 00 00	 jmp	 PyErr_GivenExceptionMatches
PyErr_ExceptionMatches ENDP
_TEXT	ENDS
PUBLIC	PyErr_NormalizeException
EXTRN	PyExc_RecursionErrorInst:QWORD
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	Py_GetRecursionLimit:PROC
EXTRN	PyObject_IsSubclass:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_NormalizeException DD imagerel $LN28
	DD	imagerel $LN28+575
	DD	imagerel $unwind$PyErr_NormalizeException
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_NormalizeException DD 061601H
	DD	0d3416H
	DD	070125216H
	DD	050106011H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\errors.c
xdata	ENDS
;	COMDAT PyErr_NormalizeException
_TEXT	SEGMENT
exc$ = 80
res$1$ = 88
val$ = 88
tb$ = 96
PyErr_NormalizeException PROC				; COMDAT

; 198  : {

$LN28:
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 199  :     PyObject *type = *exc;

  00016	48 8b 39	 mov	 rdi, QWORD PTR [rcx]

; 200  :     PyObject *value = *val;

  00019	48 8b 1a	 mov	 rbx, QWORD PTR [rdx]

; 201  :     PyObject *inclass = NULL;

  0001c	33 f6		 xor	 esi, esi
  0001e	48 8b ea	 mov	 rbp, rdx

; 202  :     PyObject *initial_tb = NULL;
; 203  :     PyThreadState *tstate = NULL;
; 204  : 
; 205  :     if (type == NULL) {

  00021	48 85 ff	 test	 rdi, rdi
  00024	0f 84 ba 00 00
	00		 je	 $LN19@PyErr_Norm

; 206  :         /* There was no exception, so nothing to do. */
; 207  :         return;
; 208  :     }
; 209  : 
; 210  :     /* If PyErr_SetNone() was used, the value will have been actually
; 211  :        set to NULL.
; 212  :     */
; 213  :     if (!value) {

  0002a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00031	48 85 db	 test	 rbx, rbx
  00034	75 48		 jne	 SHORT $LN24@PyErr_Norm

; 214  :         value = Py_None;

  00036	48 8b d8	 mov	 rbx, rax

; 215  :         Py_INCREF(value);

  00039	e8 00 00 00 00	 call	 _Py_PXCTX
  0003e	85 c0		 test	 eax, eax
  00040	75 3c		 jne	 SHORT $LN24@PyErr_Norm
  00042	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00057	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00065	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006a	85 c0		 test	 eax, eax
  0006c	75 09		 jne	 SHORT $LN23@PyErr_Norm
  0006e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00075	74 07		 je	 SHORT $LN24@PyErr_Norm
$LN23@PyErr_Norm:
  00077	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN24@PyErr_Norm:

; 216  :     }
; 217  : 
; 218  :     if (PyExceptionInstance_Check(value))

  0007e	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00082	f7 80 00 01 00
	00 00 00 00 40	 test	 DWORD PTR [rax+256], 1073741824 ; 40000000H
  0008c	48 0f 45 f0	 cmovne	 rsi, rax

; 219  :         inclass = PyExceptionInstance_Class(value);
; 220  : 
; 221  :     /* Normalize the exception so that if the type is a class, the
; 222  :        value will be an instance.
; 223  :     */
; 224  :     if (PyExceptionClass_Check(type)) {

  00090	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00094	f7 80 00 01 00
	00 00 00 00 80	 test	 DWORD PTR [rax+256], -2147483648 ; ffffffff80000000H
  0009e	74 38		 je	 SHORT $LN5@PyErr_Norm
  000a0	f7 87 00 01 00
	00 00 00 00 40	 test	 DWORD PTR [rdi+256], 1073741824 ; 40000000H
  000aa	74 2c		 je	 SHORT $LN5@PyErr_Norm

; 225  :         /* if the value was not an instance, or is not an instance
; 226  :            whose class is (or is derived from) type, then use the
; 227  :            value as an argument to instantiation of the type
; 228  :            class.
; 229  :         */
; 230  :         if (!inclass || !PyObject_IsSubclass(inclass, type)) {

  000ac	48 85 f6	 test	 rsi, rsi
  000af	74 40		 je	 SHORT $LN13@PyErr_Norm
  000b1	48 8b d7	 mov	 rdx, rdi
  000b4	48 8b ce	 mov	 rcx, rsi
  000b7	e8 00 00 00 00	 call	 PyObject_IsSubclass
  000bc	85 c0		 test	 eax, eax
  000be	74 31		 je	 SHORT $LN13@PyErr_Norm

; 250  :         }
; 251  :         /* if the class of the instance doesn't exactly match the
; 252  :            class of the type, believe the instance
; 253  :         */
; 254  :         else if (inclass != type) {

  000c0	48 3b f7	 cmp	 rsi, rdi
  000c3	74 13		 je	 SHORT $LN5@PyErr_Norm

; 255  :             Py_DECREF(type);

  000c5	48 8b cf	 mov	 rcx, rdi
  000c8	e8 00 00 00 00	 call	 _Py_DecRef

; 256  :             type = inclass;
; 257  :             Py_INCREF(type);

  000cd	48 8b ce	 mov	 rcx, rsi
  000d0	48 8b fe	 mov	 rdi, rsi
  000d3	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@PyErr_Norm:

; 258  :         }
; 259  :     }
; 260  :     *exc = type;

  000d8	48 8b 44 24 50	 mov	 rax, QWORD PTR exc$[rsp]
  000dd	48 89 38	 mov	 QWORD PTR [rax], rdi

; 261  :     *val = value;

  000e0	48 89 5d 00	 mov	 QWORD PTR [rbp], rbx
$LN19@PyErr_Norm:

; 295  : }

  000e4	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  000e9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ed	5f		 pop	 rdi
  000ee	5e		 pop	 rsi
  000ef	5d		 pop	 rbp
  000f0	c3		 ret	 0
$LN13@PyErr_Norm:

; 231  :             PyObject *args, *res;
; 232  : 
; 233  :             if (value == Py_None)

  000f1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000f8	48 3b d8	 cmp	 rbx, rax
  000fb	75 09		 jne	 SHORT $LN12@PyErr_Norm

; 234  :                 args = PyTuple_New(0);

  000fd	33 c9		 xor	 ecx, ecx
  000ff	e8 00 00 00 00	 call	 PyTuple_New
  00104	eb 2a		 jmp	 SHORT $LN27@PyErr_Norm
$LN12@PyErr_Norm:

; 235  :             else if (PyTuple_Check(value)) {

  00106	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0010a	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00114	74 0d		 je	 SHORT $LN10@PyErr_Norm

; 236  :                 Py_INCREF(value);

  00116	48 8b cb	 mov	 rcx, rbx
  00119	e8 00 00 00 00	 call	 _Py_IncRef

; 237  :                 args = value;

  0011e	48 8b f3	 mov	 rsi, rbx

; 238  :             }
; 239  :             else

  00121	eb 10		 jmp	 SHORT $LN9@PyErr_Norm
$LN10@PyErr_Norm:

; 240  :                 args = PyTuple_Pack(1, value);

  00123	48 8b d3	 mov	 rdx, rbx
  00126	b9 01 00 00 00	 mov	 ecx, 1
  0012b	e8 00 00 00 00	 call	 PyTuple_Pack
$LN27@PyErr_Norm:
  00130	48 8b f0	 mov	 rsi, rax
$LN9@PyErr_Norm:

; 241  : 
; 242  :             if (args == NULL)

  00133	48 85 f6	 test	 rsi, rsi
  00136	74 35		 je	 SHORT $finally$120483

; 243  :                 goto finally;
; 244  :             res = PyEval_CallObject(type, args);

  00138	45 33 c0	 xor	 r8d, r8d
  0013b	48 8b d6	 mov	 rdx, rsi
  0013e	48 8b cf	 mov	 rcx, rdi
  00141	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords

; 245  :             Py_DECREF(args);

  00146	48 8b ce	 mov	 rcx, rsi
  00149	48 89 44 24 58	 mov	 QWORD PTR res$1$[rsp], rax
  0014e	e8 00 00 00 00	 call	 _Py_DecRef

; 246  :             if (res == NULL)

  00153	48 8b 74 24 58	 mov	 rsi, QWORD PTR res$1$[rsp]
  00158	48 85 f6	 test	 rsi, rsi
  0015b	74 10		 je	 SHORT $finally$120483

; 247  :                 goto finally;
; 248  :             Py_DECREF(value);

  0015d	48 8b cb	 mov	 rcx, rbx
  00160	e8 00 00 00 00	 call	 _Py_DecRef

; 249  :             value = res;

  00165	48 8b de	 mov	 rbx, rsi
  00168	e9 6b ff ff ff	 jmp	 $LN5@PyErr_Norm
$finally$120483:

; 262  :     return;
; 263  : finally:
; 264  :     Py_DECREF(type);

  0016d	48 8b cf	 mov	 rcx, rdi
  00170	e8 00 00 00 00	 call	 _Py_DecRef

; 265  :     Py_DECREF(value);

  00175	48 8b cb	 mov	 rcx, rbx
  00178	e8 00 00 00 00	 call	 _Py_DecRef

; 266  :     /* If the new exception doesn't set a traceback and the old
; 267  :        exception had a traceback, use the old traceback for the
; 268  :        new exception.  It's better than nothing.
; 269  :     */
; 270  :     initial_tb = *tb;

  0017d	48 8b 7c 24 60	 mov	 rdi, QWORD PTR tb$[rsp]

; 271  :     PyErr_Fetch(exc, val, tb);

  00182	48 8b 74 24 50	 mov	 rsi, QWORD PTR exc$[rsp]
  00187	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
  0018a	4c 8b c7	 mov	 r8, rdi
  0018d	48 8b ce	 mov	 rcx, rsi
  00190	48 8b d5	 mov	 rdx, rbp
  00193	e8 00 00 00 00	 call	 PyErr_Fetch

; 272  :     if (initial_tb != NULL) {

  00198	48 85 db	 test	 rbx, rbx
  0019b	74 13		 je	 SHORT $LN2@PyErr_Norm

; 273  :         if (*tb == NULL)

  0019d	48 83 3f 00	 cmp	 QWORD PTR [rdi], 0
  001a1	75 05		 jne	 SHORT $LN3@PyErr_Norm

; 274  :             *tb = initial_tb;

  001a3	48 89 1f	 mov	 QWORD PTR [rdi], rbx

; 275  :         else

  001a6	eb 08		 jmp	 SHORT $LN2@PyErr_Norm
$LN3@PyErr_Norm:

; 276  :             Py_DECREF(initial_tb);

  001a8	48 8b cb	 mov	 rcx, rbx
  001ab	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@PyErr_Norm:

; 277  :     }
; 278  :     /* normalize recursively */
; 279  :     tstate = PyThreadState_GET();

  001b0	e8 00 00 00 00	 call	 _Py_PXCTX
  001b5	85 c0		 test	 eax, eax
  001b7	74 0a		 je	 SHORT $LN21@PyErr_Norm
  001b9	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  001be	48 8b f8	 mov	 rdi, rax
  001c1	eb 07		 jmp	 SHORT $LN22@PyErr_Norm
$LN21@PyErr_Norm:
  001c3	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR _PyThreadState_Current
$LN22@PyErr_Norm:

; 280  :     if (++tstate->recursion_depth > Py_GetRecursionLimit()) {

  001ca	ff 47 18	 inc	 DWORD PTR [rdi+24]
  001cd	8b 5f 18	 mov	 ebx, DWORD PTR [rdi+24]
  001d0	e8 00 00 00 00	 call	 Py_GetRecursionLimit
  001d5	3b d8		 cmp	 ebx, eax
  001d7	7e 46		 jle	 SHORT $LN1@PyErr_Norm

; 281  :         --tstate->recursion_depth;

  001d9	ff 4f 18	 dec	 DWORD PTR [rdi+24]

; 282  :         /* throw away the old exception... */
; 283  :         Py_DECREF(*exc);

  001dc	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  001df	e8 00 00 00 00	 call	 _Py_DecRef

; 284  :         Py_DECREF(*val);

  001e4	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]
  001e8	e8 00 00 00 00	 call	 _Py_DecRef

; 285  :         /* ... and use the recursion error instead */
; 286  :         *exc = PyExc_RuntimeError;

  001ed	4c 8b 1d 00 00
	00 00		 mov	 r11, QWORD PTR PyExc_RuntimeError
  001f4	4c 89 1e	 mov	 QWORD PTR [rsi], r11

; 287  :         *val = PyExc_RecursionErrorInst;

  001f7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyExc_RecursionErrorInst
  001fe	48 89 45 00	 mov	 QWORD PTR [rbp], rax

; 288  :         Py_INCREF(*exc);

  00202	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  00205	e8 00 00 00 00	 call	 _Py_IncRef

; 289  :         Py_INCREF(*val);

  0020a	48 8b 4d 00	 mov	 rcx, QWORD PTR [rbp]

; 295  : }

  0020e	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00213	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00217	5f		 pop	 rdi
  00218	5e		 pop	 rsi
  00219	5d		 pop	 rbp
  0021a	e9 00 00 00 00	 jmp	 _Py_IncRef
$LN1@PyErr_Norm:

; 290  :         /* just keeping the old traceback */
; 291  :         return;
; 292  :     }
; 293  :     PyErr_NormalizeException(exc, val, tb);

  0021f	4c 8b 44 24 60	 mov	 r8, QWORD PTR tb$[rsp]
  00224	48 8b d5	 mov	 rdx, rbp
  00227	48 8b ce	 mov	 rcx, rsi
  0022a	e8 00 00 00 00	 call	 PyErr_NormalizeException

; 294  :     --tstate->recursion_depth;

  0022f	ff 4f 18	 dec	 DWORD PTR [rdi+24]

; 295  : }

  00232	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00237	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0023b	5f		 pop	 rdi
  0023c	5e		 pop	 rsi
  0023d	5d		 pop	 rbp
  0023e	c3		 ret	 0
PyErr_NormalizeException ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@ECMFPPAN@bad?5argument?5type?5for?5built?9in?5o@ ; `string'
PUBLIC	PyErr_BadArgument
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_BadArgument DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$PyErr_BadArgument
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_BadArgument DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CJ@ECMFPPAN@bad?5argument?5type?5for?5built?9in?5o@
CONST	SEGMENT
??_C@_0CJ@ECMFPPAN@bad?5argument?5type?5for?5built?9in?5o@ DB 'bad argume'
	DB	'nt type for built-in operation', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyErr_BadArgument
_TEXT	SEGMENT
PyErr_BadArgument PROC					; COMDAT

; 355  : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 356  :     PyErr_SetString(PyExc_TypeError,
; 357  :                     "bad argument type for built-in operation");

  00004	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0000b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@ECMFPPAN@bad?5argument?5type?5for?5built?9in?5o@
  00012	e8 00 00 00 00	 call	 PyErr_SetString

; 358  :     return 0;

  00017	33 c0		 xor	 eax, eax

; 359  : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
PyErr_BadArgument ENDP
_TEXT	ENDS
PUBLIC	PyErr_NoMemory
EXTRN	PyExc_MemoryError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_NoMemory DD imagerel $LN3
	DD	imagerel $LN3+23
	DD	imagerel $unwind$PyErr_NoMemory
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_NoMemory DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyErr_NoMemory
_TEXT	SEGMENT
PyErr_NoMemory PROC					; COMDAT

; 363  : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 364  :     PyErr_SetNone(PyExc_MemoryError);

  00004	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  0000b	e8 00 00 00 00	 call	 PyErr_SetNone

; 365  :     return NULL;

  00010	33 c0		 xor	 eax, eax

; 366  : }

  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
PyErr_NoMemory ENDP
_TEXT	ENDS
PUBLIC	??_C@_04LBMCIBLI@?$CIiO?$CJ?$AA@		; `string'
PUBLIC	??_C@_05MNBHNBEG@?$CIiOO?$CJ?$AA@		; `string'
PUBLIC	??_C@_0BD@MKMJJOEP@Windows?5Error?50x?$CFX?$AA@	; `string'
PUBLIC	??_C@_05NAOIJFC@Error?$AA@			; `string'
PUBLIC	PyErr_SetFromErrnoWithFilenameObject
EXTRN	__imp_LocalFree:PROC
EXTRN	PyObject_Call:PROC
EXTRN	Py_BuildValue:PROC
EXTRN	PyUnicode_FromWideChar:PROC
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	__imp_FormatMessageW:PROC
EXTRN	__imp___sys_errlist:PROC
EXTRN	__imp___sys_nerr:PROC
EXTRN	PyErr_CheckSignals:PROC
EXTRN	__imp__errno:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetFromErrnoWithFilenameObject DD imagerel $LN26
	DD	imagerel $LN26+389
	DD	imagerel $unwind$PyErr_SetFromErrnoWithFilenameObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetFromErrnoWithFilenameObject DD 081401H
	DD	0d6414H
	DD	0b5414H
	DD	0a3414H
	DD	070107214H
xdata	ENDS
;	COMDAT ??_C@_04LBMCIBLI@?$CIiO?$CJ?$AA@
CONST	SEGMENT
??_C@_04LBMCIBLI@?$CIiO?$CJ?$AA@ DB '(iO)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MNBHNBEG@?$CIiOO?$CJ?$AA@
CONST	SEGMENT
??_C@_05MNBHNBEG@?$CIiOO?$CJ?$AA@ DB '(iOO)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MKMJJOEP@Windows?5Error?50x?$CFX?$AA@
CONST	SEGMENT
??_C@_0BD@MKMJJOEP@Windows?5Error?50x?$CFX?$AA@ DB 'Windows Error 0x%X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NAOIJFC@Error?$AA@
CONST	SEGMENT
??_C@_05NAOIJFC@Error?$AA@ DB 'Error', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyErr_SetFromErrnoWithFilenameObject
_TEXT	SEGMENT
exc$ = 80
filenameObject$ = 88
s_buf$ = 96
PyErr_SetFromErrnoWithFilenameObject PROC		; COMDAT

; 370  : {

$LN26:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8b f2	 mov	 rsi, rdx
  00017	48 8b e9	 mov	 rbp, rcx

; 371  :     PyObject *message;
; 372  :     PyObject *v, *args;
; 373  :     int i = errno;

  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00020	48 63 38	 movsxd	 rdi, DWORD PTR [rax]

; 374  : #ifdef MS_WINDOWS
; 375  :     WCHAR *s_buf = NULL;

  00023	33 db		 xor	 ebx, ebx
  00025	48 89 5c 24 60	 mov	 QWORD PTR s_buf$[rsp], rbx

; 376  : #endif /* Unix/Windows */
; 377  : 
; 378  : #ifdef EINTR
; 379  :     if (i == EINTR && PyErr_CheckSignals())

  0002a	83 ff 04	 cmp	 edi, 4
  0002d	75 0e		 jne	 SHORT $LN15@PyErr_SetF
  0002f	e8 00 00 00 00	 call	 PyErr_CheckSignals
  00034	85 c0		 test	 eax, eax
  00036	74 1c		 je	 SHORT $LN20@PyErr_SetF

; 380  :         return NULL;

  00038	e9 31 01 00 00	 jmp	 $LN22@PyErr_SetF
$LN15@PyErr_SetF:

; 381  : #endif
; 382  : 
; 383  : #ifndef MS_WINDOWS
; 384  :     if (i != 0) {
; 385  :         char *s = strerror(i);
; 386  :         message = PyUnicode_DecodeLocale(s, "surrogateescape");
; 387  :     }
; 388  :     else {
; 389  :         /* Sometimes errno didn't get set */
; 390  :         message = PyUnicode_FromString("Error");
; 391  :     }
; 392  : #else
; 393  :     if (i == 0)

  0003d	85 ff		 test	 edi, edi
  0003f	75 11		 jne	 SHORT $LN23@PyErr_SetF

; 394  :         message = PyUnicode_FromString("Error"); /* Sometimes errno didn't get set */

  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NAOIJFC@Error?$AA@
  00048	e8 00 00 00 00	 call	 PyUnicode_FromString

; 395  :     else

  0004d	e9 a0 00 00 00	 jmp	 $LN24@PyErr_SetF
$LN23@PyErr_SetF:

; 396  :     {
; 397  :         /* Note that the Win32 errors do not lineup with the
; 398  :            errno error.  So if the error is in the MSVC error
; 399  :            table, we use it, otherwise we assume it really _is_
; 400  :            a Win32 error code
; 401  :         */
; 402  :         if (i > 0 && i < _sys_nerr) {

  00052	7e 1e		 jle	 SHORT $LN12@PyErr_SetF
$LN20@PyErr_SetF:
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___sys_nerr
  0005a	3b 38		 cmp	 edi, DWORD PTR [rax]
  0005c	7d 14		 jge	 SHORT $LN12@PyErr_SetF

; 403  :             message = PyUnicode_FromString(_sys_errlist[i]);

  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___sys_errlist
  00064	48 8b 0c f8	 mov	 rcx, QWORD PTR [rax+rdi*8]
  00068	e8 00 00 00 00	 call	 PyUnicode_FromString

; 404  :         }
; 405  :         else {

  0006d	e9 80 00 00 00	 jmp	 $LN24@PyErr_SetF
$LN12@PyErr_SetF:

; 406  :             int len = FormatMessageW(
; 407  :                 FORMAT_MESSAGE_ALLOCATE_BUFFER |
; 408  :                 FORMAT_MESSAGE_FROM_SYSTEM |
; 409  :                 FORMAT_MESSAGE_IGNORE_INSERTS,
; 410  :                 NULL,                   /* no message source */
; 411  :                 i,
; 412  :                 MAKELANGID(LANG_NEUTRAL,
; 413  :                            SUBLANG_DEFAULT),
; 414  :                            /* Default language */
; 415  :                 (LPWSTR) &s_buf,
; 416  :                 0,                      /* size not used */
; 417  :                 NULL);                  /* no args */

  00072	48 8d 44 24 60	 lea	 rax, QWORD PTR s_buf$[rsp]
  00077	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0007c	41 b9 00 04 00
	00		 mov	 r9d, 1024		; 00000400H
  00082	44 8b c7	 mov	 r8d, edi
  00085	33 d2		 xor	 edx, edx
  00087	b9 00 13 00 00	 mov	 ecx, 4864		; 00001300H
  0008c	89 5c 24 28	 mov	 DWORD PTR [rsp+40], ebx
  00090	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00095	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatMessageW
  0009b	4c 63 d8	 movsxd	 r11, eax

; 418  :             if (len==0) {

  0009e	85 c0		 test	 eax, eax
  000a0	75 15		 jne	 SHORT $LN18@PyErr_SetF

; 419  :                 /* Only ever seen this in out-of-mem
; 420  :                    situations */
; 421  :                 s_buf = NULL;
; 422  :                 message = PyUnicode_FromFormat("Windows Error 0x%X", i);

  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@MKMJJOEP@Windows?5Error?50x?$CFX?$AA@
  000a9	8b d7		 mov	 edx, edi
  000ab	48 89 5c 24 60	 mov	 QWORD PTR s_buf$[rsp], rbx
  000b0	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 423  :             } else {

  000b5	eb 3b		 jmp	 SHORT $LN24@PyErr_SetF
$LN18@PyErr_SetF:

; 406  :             int len = FormatMessageW(
; 407  :                 FORMAT_MESSAGE_ALLOCATE_BUFFER |
; 408  :                 FORMAT_MESSAGE_FROM_SYSTEM |
; 409  :                 FORMAT_MESSAGE_IGNORE_INSERTS,
; 410  :                 NULL,                   /* no message source */
; 411  :                 i,
; 412  :                 MAKELANGID(LANG_NEUTRAL,
; 413  :                            SUBLANG_DEFAULT),
; 414  :                            /* Default language */
; 415  :                 (LPWSTR) &s_buf,
; 416  :                 0,                      /* size not used */
; 417  :                 NULL);                  /* no args */

  000b7	49 8b c3	 mov	 rax, r11

; 424  :                 /* remove trailing cr/lf and dots */
; 425  :                 while (len > 0 && (s_buf[len-1] <= L' ' || s_buf[len-1] == L'.'))

  000ba	45 85 db	 test	 r11d, r11d
  000bd	7e 26		 jle	 SHORT $LN21@PyErr_SetF
  000bf	90		 npad	 1
$LL8@PyErr_SetF:
  000c0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s_buf$[rsp]
  000c5	0f b7 54 41 fe	 movzx	 edx, WORD PTR [rcx+rax*2-2]
  000ca	66 83 fa 20	 cmp	 dx, 32			; 00000020H
  000ce	76 06		 jbe	 SHORT $LN6@PyErr_SetF
  000d0	66 83 fa 2e	 cmp	 dx, 46			; 0000002eH
  000d4	75 14		 jne	 SHORT $LN7@PyErr_SetF
$LN6@PyErr_SetF:

; 426  :                     s_buf[--len] = L'\0';

  000d6	48 ff c8	 dec	 rax
  000d9	41 ff cb	 dec	 r11d
  000dc	66 89 1c 41	 mov	 WORD PTR [rcx+rax*2], bx
  000e0	48 85 c0	 test	 rax, rax
  000e3	7f db		 jg	 SHORT $LL8@PyErr_SetF
$LN21@PyErr_SetF:

; 424  :                 /* remove trailing cr/lf and dots */
; 425  :                 while (len > 0 && (s_buf[len-1] <= L' ' || s_buf[len-1] == L'.'))

  000e5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s_buf$[rsp]
$LN7@PyErr_SetF:

; 427  :                 message = PyUnicode_FromWideChar(s_buf, len);

  000ea	49 63 d3	 movsxd	 rdx, r11d
  000ed	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
$LN24@PyErr_SetF:
  000f2	48 8b d8	 mov	 rbx, rax

; 428  :             }
; 429  :         }
; 430  :     }
; 431  : #endif /* Unix/Windows */
; 432  : 
; 433  :     if (message == NULL)

  000f5	48 85 c0	 test	 rax, rax

; 434  :     {
; 435  : #ifdef MS_WINDOWS
; 436  :         LocalFree(s_buf);
; 437  : #endif
; 438  :         return NULL;

  000f8	74 69		 je	 SHORT $LN1@PyErr_SetF

; 439  :     }
; 440  : 
; 441  :     if (filenameObject != NULL)
; 442  :         args = Py_BuildValue("(iOO)", i, message, filenameObject);

  000fa	4c 8b c0	 mov	 r8, rax
  000fd	8b d7		 mov	 edx, edi
  000ff	48 85 f6	 test	 rsi, rsi
  00102	74 11		 je	 SHORT $LN4@PyErr_SetF
  00104	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MNBHNBEG@?$CIiOO?$CJ?$AA@
  0010b	4c 8b ce	 mov	 r9, rsi
  0010e	e8 00 00 00 00	 call	 Py_BuildValue

; 443  :     else

  00113	eb 0c		 jmp	 SHORT $LN25@PyErr_SetF
$LN4@PyErr_SetF:

; 444  :         args = Py_BuildValue("(iO)", i, message);

  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LBMCIBLI@?$CIiO?$CJ?$AA@
  0011c	e8 00 00 00 00	 call	 Py_BuildValue
$LN25@PyErr_SetF:

; 445  :     Py_DECREF(message);

  00121	48 8b cb	 mov	 rcx, rbx
  00124	48 8b f8	 mov	 rdi, rax
  00127	e8 00 00 00 00	 call	 _Py_DecRef

; 446  : 
; 447  :     if (args != NULL) {

  0012c	48 85 ff	 test	 rdi, rdi
  0012f	74 32		 je	 SHORT $LN1@PyErr_SetF

; 448  :         v = PyObject_Call(exc, args, NULL);

  00131	45 33 c0	 xor	 r8d, r8d
  00134	48 8b d7	 mov	 rdx, rdi
  00137	48 8b cd	 mov	 rcx, rbp
  0013a	e8 00 00 00 00	 call	 PyObject_Call

; 449  :         Py_DECREF(args);

  0013f	48 8b cf	 mov	 rcx, rdi
  00142	48 8b d8	 mov	 rbx, rax
  00145	e8 00 00 00 00	 call	 _Py_DecRef

; 450  :         if (v != NULL) {

  0014a	48 85 db	 test	 rbx, rbx
  0014d	74 14		 je	 SHORT $LN1@PyErr_SetF

; 451  :             PyErr_SetObject((PyObject *) Py_TYPE(v), v);

  0014f	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  00153	48 8b d3	 mov	 rdx, rbx
  00156	e8 00 00 00 00	 call	 PyErr_SetObject

; 452  :             Py_DECREF(v);

  0015b	48 8b cb	 mov	 rcx, rbx
  0015e	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_SetF:

; 453  :         }
; 454  :     }
; 455  : #ifdef MS_WINDOWS
; 456  :     LocalFree(s_buf);

  00163	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s_buf$[rsp]
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LocalFree
$LN22@PyErr_SetF:

; 457  : #endif
; 458  :     return NULL;
; 459  : }

  0016e	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00173	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00178	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  0017d	33 c0		 xor	 eax, eax
  0017f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00183	5f		 pop	 rdi
  00184	c3		 ret	 0
PyErr_SetFromErrnoWithFilenameObject ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetFromErrnoWithFilename
EXTRN	PyUnicode_DecodeFSDefault:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_SetFromErrnoWithFilename DD imagerel $LN24
	DD	imagerel $LN24+195
	DD	imagerel $unwind$PyErr_SetFromErrnoWithFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetFromErrnoWithFilename DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\errors.c
xdata	ENDS
;	COMDAT PyErr_SetFromErrnoWithFilename
_TEXT	SEGMENT
exc$ = 64
filename$ = 72
PyErr_SetFromErrnoWithFilename PROC			; COMDAT

; 464  : {

$LN24:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 465  :     PyObject *name = filename ? PyUnicode_DecodeFSDefault(filename) : NULL;

  0000d	48 85 d2	 test	 rdx, rdx
  00010	74 0d		 je	 SHORT $LN7@PyErr_SetF@2
  00012	48 8b ca	 mov	 rcx, rdx
  00015	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  0001a	48 8b d8	 mov	 rbx, rax
  0001d	eb 02		 jmp	 SHORT $LN8@PyErr_SetF@2
$LN7@PyErr_SetF@2:
  0001f	33 db		 xor	 ebx, ebx
$LN8@PyErr_SetF@2:

; 466  :     PyObject *result = PyErr_SetFromErrnoWithFilenameObject(exc, name);

  00021	48 8b d3	 mov	 rdx, rbx
  00024	48 8b cf	 mov	 rcx, rdi
  00027	e8 00 00 00 00	 call	 PyErr_SetFromErrnoWithFilenameObject
  0002c	48 8b f8	 mov	 rdi, rax

; 467  :     Py_XDECREF(name);

  0002f	48 85 db	 test	 rbx, rbx
  00032	0f 84 80 00 00
	00		 je	 $LN3@PyErr_SetF@2
  00038	e8 00 00 00 00	 call	 _Py_PXCTX
  0003d	85 c0		 test	 eax, eax
  0003f	75 74		 jne	 SHORT $LN21@PyErr_SetF@2
  00041	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00045	a8 20		 test	 al, 32			; 00000020H
  00047	75 64		 jne	 SHORT $LN13@PyErr_SetF@2
  00049	84 c0		 test	 al, al
  0004b	78 60		 js	 SHORT $LN13@PyErr_SetF@2
  0004d	a8 02		 test	 al, 2
  0004f	75 64		 jne	 SHORT $LN21@PyErr_SetF@2
  00051	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00055	75 5e		 jne	 SHORT $LN21@PyErr_SetF@2
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00065	4c 8b cb	 mov	 r9, rbx
  00068	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0006e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00076	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007b	48 8b cb	 mov	 rcx, rbx
  0007e	85 c0		 test	 eax, eax
  00080	74 13		 je	 SHORT $LN18@PyErr_SetF@2
  00082	e8 00 00 00 00	 call	 _Px_Dealloc

; 468  :     return result;

  00087	48 8b c7	 mov	 rax, rdi

; 469  : }

  0008a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0008f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00093	5f		 pop	 rdi
  00094	c3		 ret	 0

; 467  :     Py_XDECREF(name);

$LN18@PyErr_SetF@2:
  00095	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00099	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 468  :     return result;

  0009f	48 8b c7	 mov	 rax, rdi

; 469  : }

  000a2	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ab	5f		 pop	 rdi
  000ac	c3		 ret	 0

; 467  :     Py_XDECREF(name);

$LN13@PyErr_SetF@2:
  000ad	48 8b cb	 mov	 rcx, rbx
  000b0	e8 00 00 00 00	 call	 Px_DecRef
$LN21@PyErr_SetF@2:

; 468  :     return result;

  000b5	48 8b c7	 mov	 rax, rdi
$LN3@PyErr_SetF@2:

; 469  : }

  000b8	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000bd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c1	5f		 pop	 rdi
  000c2	c3		 ret	 0
PyErr_SetFromErrnoWithFilename ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetFromErrnoWithUnicodeFilename
EXTRN	PyUnicode_FromUnicode:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_SetFromErrnoWithUnicodeFilename DD imagerel $LN24
	DD	imagerel $LN24+217
	DD	imagerel $unwind$PyErr_SetFromErrnoWithUnicodeFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetFromErrnoWithUnicodeFilename DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\errors.c
xdata	ENDS
;	COMDAT PyErr_SetFromErrnoWithUnicodeFilename
_TEXT	SEGMENT
exc$ = 64
filename$ = 72
PyErr_SetFromErrnoWithUnicodeFilename PROC		; COMDAT

; 474  : {

$LN24:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	4c 8b c2	 mov	 r8, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 475  :     PyObject *name = filename ?
; 476  :                      PyUnicode_FromUnicode(filename, wcslen(filename)) :
; 477  :              NULL;

  00010	48 85 d2	 test	 rdx, rdx
  00013	74 20		 je	 SHORT $LN7@PyErr_SetF@3
  00015	48 83 c9 ff	 or	 rcx, -1
  00019	48 8b fa	 mov	 rdi, rdx
  0001c	33 c0		 xor	 eax, eax
  0001e	66 f2 af	 repne scasw
  00021	48 f7 d1	 not	 rcx
  00024	48 8d 51 ff	 lea	 rdx, QWORD PTR [rcx-1]
  00028	49 8b c8	 mov	 rcx, r8
  0002b	e8 00 00 00 00	 call	 PyUnicode_FromUnicode
  00030	48 8b f8	 mov	 rdi, rax
  00033	eb 02		 jmp	 SHORT $LN8@PyErr_SetF@3
$LN7@PyErr_SetF@3:
  00035	33 ff		 xor	 edi, edi
$LN8@PyErr_SetF@3:

; 478  :     PyObject *result = PyErr_SetFromErrnoWithFilenameObject(exc, name);

  00037	48 8b d7	 mov	 rdx, rdi
  0003a	48 8b cb	 mov	 rcx, rbx
  0003d	e8 00 00 00 00	 call	 PyErr_SetFromErrnoWithFilenameObject
  00042	48 8b d8	 mov	 rbx, rax

; 479  :     Py_XDECREF(name);

  00045	48 85 ff	 test	 rdi, rdi
  00048	0f 84 80 00 00
	00		 je	 $LN3@PyErr_SetF@3
  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	75 74		 jne	 SHORT $LN21@PyErr_SetF@3
  00057	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0005b	a8 20		 test	 al, 32			; 00000020H
  0005d	75 64		 jne	 SHORT $LN13@PyErr_SetF@3
  0005f	84 c0		 test	 al, al
  00061	78 60		 js	 SHORT $LN13@PyErr_SetF@3
  00063	a8 02		 test	 al, 2
  00065	75 64		 jne	 SHORT $LN21@PyErr_SetF@3
  00067	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0006b	75 5e		 jne	 SHORT $LN21@PyErr_SetF@3
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00074	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0007b	4c 8b cf	 mov	 r9, rdi
  0007e	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00084	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00091	48 8b cf	 mov	 rcx, rdi
  00094	85 c0		 test	 eax, eax
  00096	74 13		 je	 SHORT $LN18@PyErr_SetF@3
  00098	e8 00 00 00 00	 call	 _Px_Dealloc

; 480  :     return result;

  0009d	48 8b c3	 mov	 rax, rbx

; 481  : }

  000a0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a9	5f		 pop	 rdi
  000aa	c3		 ret	 0

; 479  :     Py_XDECREF(name);

$LN18@PyErr_SetF@3:
  000ab	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000af	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 480  :     return result;

  000b5	48 8b c3	 mov	 rax, rbx

; 481  : }

  000b8	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000bd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c1	5f		 pop	 rdi
  000c2	c3		 ret	 0

; 479  :     Py_XDECREF(name);

$LN13@PyErr_SetF@3:
  000c3	48 8b cf	 mov	 rcx, rdi
  000c6	e8 00 00 00 00	 call	 Px_DecRef
$LN21@PyErr_SetF@3:

; 480  :     return result;

  000cb	48 8b c3	 mov	 rax, rbx
$LN3@PyErr_SetF@3:

; 481  : }

  000ce	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d7	5f		 pop	 rdi
  000d8	c3		 ret	 0
PyErr_SetFromErrnoWithUnicodeFilename ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetFromErrno
; Function compile flags: /Ogtpy
;	COMDAT PyErr_SetFromErrno
_TEXT	SEGMENT
exc$ = 8
PyErr_SetFromErrno PROC					; COMDAT

; 487  :     return PyErr_SetFromErrnoWithFilenameObject(exc, NULL);

  00000	33 d2		 xor	 edx, edx

; 488  : }

  00002	e9 00 00 00 00	 jmp	 PyErr_SetFromErrnoWithFilenameObject
PyErr_SetFromErrno ENDP
_TEXT	ENDS
PUBLIC	??_C@_06KLKOOBFP@?$CIiOOi?$CJ?$AA@		; `string'
PUBLIC	PyErr_SetExcFromWindowsErrWithFilenameObject
EXTRN	__imp_GetLastError:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetExcFromWindowsErrWithFilenameObject DD imagerel $LN18
	DD	imagerel $LN18+329
	DD	imagerel $unwind$PyErr_SetExcFromWindowsErrWithFilenameObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetExcFromWindowsErrWithFilenameObject DD 081201H
	DD	0d5412H
	DD	0c3412H
	DD	0c00e7212H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_06KLKOOBFP@?$CIiOOi?$CJ?$AA@
CONST	SEGMENT
??_C@_06KLKOOBFP@?$CIiOOi?$CJ?$AA@ DB '(iOOi)', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyErr_SetExcFromWindowsErrWithFilenameObject
_TEXT	SEGMENT
exc$ = 96
ierr$ = 104
filenameObject$ = 112
s_buf$ = 120
PyErr_SetExcFromWindowsErrWithFilenameObject PROC	; COMDAT

; 496  : {

$LN18:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 497  :     int len;
; 498  :     WCHAR *s_buf = NULL; /* Free via LocalFree */

  00012	33 db		 xor	 ebx, ebx
  00014	4d 8b e0	 mov	 r12, r8
  00017	8b f2		 mov	 esi, edx
  00019	48 8b e9	 mov	 rbp, rcx
  0001c	48 89 5c 24 78	 mov	 QWORD PTR s_buf$[rsp], rbx

; 499  :     PyObject *message;
; 500  :     PyObject *args, *v;
; 501  :     DWORD err = (DWORD)ierr;
; 502  :     if (err==0) err = GetLastError();

  00021	85 d2		 test	 edx, edx
  00023	75 08		 jne	 SHORT $LN10@PyErr_SetE@2
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0002b	8b f0		 mov	 esi, eax
$LN10@PyErr_SetE@2:

; 503  :     len = FormatMessageW(
; 504  :         /* Error API error */
; 505  :         FORMAT_MESSAGE_ALLOCATE_BUFFER |
; 506  :         FORMAT_MESSAGE_FROM_SYSTEM |
; 507  :         FORMAT_MESSAGE_IGNORE_INSERTS,
; 508  :         NULL,           /* no message source */
; 509  :         err,
; 510  :         MAKELANGID(LANG_NEUTRAL,
; 511  :         SUBLANG_DEFAULT), /* Default language */
; 512  :         (LPWSTR) &s_buf,
; 513  :         0,              /* size not used */
; 514  :         NULL);          /* no args */

  0002d	48 8d 44 24 78	 lea	 rax, QWORD PTR s_buf$[rsp]
  00032	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00037	41 b9 00 04 00
	00		 mov	 r9d, 1024		; 00000400H
  0003d	44 8b c6	 mov	 r8d, esi
  00040	33 d2		 xor	 edx, edx
  00042	b9 00 13 00 00	 mov	 ecx, 4864		; 00001300H
  00047	89 5c 24 28	 mov	 DWORD PTR [rsp+40], ebx
  0004b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatMessageW
  00056	4c 63 d8	 movsxd	 r11, eax

; 515  :     if (len==0) {

  00059	85 c0		 test	 eax, eax
  0005b	75 15		 jne	 SHORT $LN13@PyErr_SetE@2

; 516  :         /* Only seen this in out of mem situations */
; 517  :         message = PyUnicode_FromFormat("Windows Error 0x%X", err);

  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@MKMJJOEP@Windows?5Error?50x?$CFX?$AA@
  00064	8b d6		 mov	 edx, esi
  00066	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 518  :         s_buf = NULL;

  0006b	48 89 5c 24 78	 mov	 QWORD PTR s_buf$[rsp], rbx

; 519  :     } else {

  00070	eb 45		 jmp	 SHORT $LN16@PyErr_SetE@2
$LN13@PyErr_SetE@2:

; 503  :     len = FormatMessageW(
; 504  :         /* Error API error */
; 505  :         FORMAT_MESSAGE_ALLOCATE_BUFFER |
; 506  :         FORMAT_MESSAGE_FROM_SYSTEM |
; 507  :         FORMAT_MESSAGE_IGNORE_INSERTS,
; 508  :         NULL,           /* no message source */
; 509  :         err,
; 510  :         MAKELANGID(LANG_NEUTRAL,
; 511  :         SUBLANG_DEFAULT), /* Default language */
; 512  :         (LPWSTR) &s_buf,
; 513  :         0,              /* size not used */
; 514  :         NULL);          /* no args */

  00072	49 8b c3	 mov	 rax, r11

; 520  :         /* remove trailing cr/lf and dots */
; 521  :         while (len > 0 && (s_buf[len-1] <= L' ' || s_buf[len-1] == L'.'))

  00075	45 85 db	 test	 r11d, r11d
  00078	7e 2b		 jle	 SHORT $LN15@PyErr_SetE@2
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL7@PyErr_SetE@2:
  00080	48 8b 4c 24 78	 mov	 rcx, QWORD PTR s_buf$[rsp]
  00085	0f b7 54 41 fe	 movzx	 edx, WORD PTR [rcx+rax*2-2]
  0008a	66 83 fa 20	 cmp	 dx, 32			; 00000020H
  0008e	76 06		 jbe	 SHORT $LN5@PyErr_SetE@2
  00090	66 83 fa 2e	 cmp	 dx, 46			; 0000002eH
  00094	75 14		 jne	 SHORT $LN6@PyErr_SetE@2
$LN5@PyErr_SetE@2:

; 522  :             s_buf[--len] = L'\0';

  00096	48 ff c8	 dec	 rax
  00099	41 ff cb	 dec	 r11d
  0009c	66 89 1c 41	 mov	 WORD PTR [rcx+rax*2], bx
  000a0	48 85 c0	 test	 rax, rax
  000a3	7f db		 jg	 SHORT $LL7@PyErr_SetE@2
$LN15@PyErr_SetE@2:

; 520  :         /* remove trailing cr/lf and dots */
; 521  :         while (len > 0 && (s_buf[len-1] <= L' ' || s_buf[len-1] == L'.'))

  000a5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR s_buf$[rsp]
$LN6@PyErr_SetE@2:

; 523  :         message = PyUnicode_FromWideChar(s_buf, len);

  000aa	49 63 d3	 movsxd	 rdx, r11d
  000ad	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  000b2	48 8b 5c 24 78	 mov	 rbx, QWORD PTR s_buf$[rsp]
$LN16@PyErr_SetE@2:
  000b7	48 8b f8	 mov	 rdi, rax

; 524  :     }
; 525  : 
; 526  :     if (message == NULL)

  000ba	48 85 c0	 test	 rax, rax
  000bd	75 05		 jne	 SHORT $LN4@PyErr_SetE@2

; 527  :     {
; 528  :         LocalFree(s_buf);

  000bf	48 8b cb	 mov	 rcx, rbx

; 529  :         return NULL;

  000c2	eb 6a		 jmp	 SHORT $LN17@PyErr_SetE@2
$LN4@PyErr_SetE@2:

; 530  :     }
; 531  : 
; 532  :     if (filenameObject == NULL)

  000c4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000cb	4d 85 e4	 test	 r12, r12

; 533  :         filenameObject = Py_None;
; 534  :     /* This is the constructor signature for passing a Windows error code.
; 535  :        The POSIX translation will be figured out by the constructor. */
; 536  :     args = Py_BuildValue("(iOOi)", 0, message, filenameObject, err);

  000ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KLKOOBFP@?$CIiOOi?$CJ?$AA@
  000d5	4d 0f 45 cc	 cmovne	 r9, r12
  000d9	4c 8b c7	 mov	 r8, rdi
  000dc	33 d2		 xor	 edx, edx
  000de	89 74 24 20	 mov	 DWORD PTR [rsp+32], esi
  000e2	e8 00 00 00 00	 call	 Py_BuildValue

; 537  :     Py_DECREF(message);

  000e7	48 8b cf	 mov	 rcx, rdi
  000ea	48 8b f0	 mov	 rsi, rax
  000ed	e8 00 00 00 00	 call	 _Py_DecRef

; 538  : 
; 539  :     if (args != NULL) {

  000f2	48 85 f6	 test	 rsi, rsi
  000f5	74 32		 je	 SHORT $LN1@PyErr_SetE@2

; 540  :         v = PyObject_Call(exc, args, NULL);

  000f7	45 33 c0	 xor	 r8d, r8d
  000fa	48 8b d6	 mov	 rdx, rsi
  000fd	48 8b cd	 mov	 rcx, rbp
  00100	e8 00 00 00 00	 call	 PyObject_Call

; 541  :         Py_DECREF(args);

  00105	48 8b ce	 mov	 rcx, rsi
  00108	48 8b d8	 mov	 rbx, rax
  0010b	e8 00 00 00 00	 call	 _Py_DecRef

; 542  :         if (v != NULL) {

  00110	48 85 db	 test	 rbx, rbx
  00113	74 14		 je	 SHORT $LN1@PyErr_SetE@2

; 543  :             PyErr_SetObject((PyObject *) Py_TYPE(v), v);

  00115	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  00119	48 8b d3	 mov	 rdx, rbx
  0011c	e8 00 00 00 00	 call	 PyErr_SetObject

; 544  :             Py_DECREF(v);

  00121	48 8b cb	 mov	 rcx, rbx
  00124	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_SetE@2:

; 545  :         }
; 546  :     }
; 547  :     LocalFree(s_buf);

  00129	48 8b 4c 24 78	 mov	 rcx, QWORD PTR s_buf$[rsp]
$LN17@PyErr_SetE@2:
  0012e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LocalFree

; 548  :     return NULL;
; 549  : }

  00134	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00139	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0013e	33 c0		 xor	 eax, eax
  00140	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00144	41 5c		 pop	 r12
  00146	5f		 pop	 rdi
  00147	5e		 pop	 rsi
  00148	c3		 ret	 0
PyErr_SetExcFromWindowsErrWithFilenameObject ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetExcFromWindowsErrWithFilename
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_SetExcFromWindowsErrWithFilename DD imagerel $LN24
	DD	imagerel $LN24+219
	DD	imagerel $unwind$PyErr_SetExcFromWindowsErrWithFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetExcFromWindowsErrWithFilename DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\errors.c
xdata	ENDS
;	COMDAT PyErr_SetExcFromWindowsErrWithFilename
_TEXT	SEGMENT
exc$ = 64
ierr$ = 72
filename$ = 80
PyErr_SetExcFromWindowsErrWithFilename PROC		; COMDAT

; 555  : {

$LN24:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	8b fa		 mov	 edi, edx
  00011	48 8b f1	 mov	 rsi, rcx

; 556  :     PyObject *name = filename ? PyUnicode_DecodeFSDefault(filename) : NULL;

  00014	4d 85 c0	 test	 r8, r8
  00017	74 0d		 je	 SHORT $LN7@PyErr_SetE@3
  00019	49 8b c8	 mov	 rcx, r8
  0001c	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  00021	48 8b d8	 mov	 rbx, rax
  00024	eb 02		 jmp	 SHORT $LN8@PyErr_SetE@3
$LN7@PyErr_SetE@3:
  00026	33 db		 xor	 ebx, ebx
$LN8@PyErr_SetE@3:

; 557  :     PyObject *ret = PyErr_SetExcFromWindowsErrWithFilenameObject(exc,
; 558  :                                                                  ierr,
; 559  :                                                                  name);

  00028	4c 8b c3	 mov	 r8, rbx
  0002b	8b d7		 mov	 edx, edi
  0002d	48 8b ce	 mov	 rcx, rsi
  00030	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErrWithFilenameObject
  00035	48 8b f8	 mov	 rdi, rax

; 560  :     Py_XDECREF(name);

  00038	48 85 db	 test	 rbx, rbx
  0003b	0f 84 8a 00 00
	00		 je	 $LN3@PyErr_SetE@3
  00041	e8 00 00 00 00	 call	 _Py_PXCTX
  00046	85 c0		 test	 eax, eax
  00048	75 7e		 jne	 SHORT $LN21@PyErr_SetE@3
  0004a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0004e	a8 20		 test	 al, 32			; 00000020H
  00050	75 6e		 jne	 SHORT $LN13@PyErr_SetE@3
  00052	84 c0		 test	 al, al
  00054	78 6a		 js	 SHORT $LN13@PyErr_SetE@3
  00056	a8 02		 test	 al, 2
  00058	75 6e		 jne	 SHORT $LN21@PyErr_SetE@3
  0005a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0005e	75 68		 jne	 SHORT $LN21@PyErr_SetE@3
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0006e	4c 8b cb	 mov	 r9, rbx
  00071	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00077	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0007f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00084	48 8b cb	 mov	 rcx, rbx
  00087	85 c0		 test	 eax, eax
  00089	74 18		 je	 SHORT $LN18@PyErr_SetE@3
  0008b	e8 00 00 00 00	 call	 _Px_Dealloc

; 561  :     return ret;

  00090	48 8b c7	 mov	 rax, rdi

; 562  : }

  00093	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00098	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0009d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a1	5f		 pop	 rdi
  000a2	c3		 ret	 0

; 560  :     Py_XDECREF(name);

$LN18@PyErr_SetE@3:
  000a3	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a7	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 561  :     return ret;

  000ad	48 8b c7	 mov	 rax, rdi

; 562  : }

  000b0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b5	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000ba	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000be	5f		 pop	 rdi
  000bf	c3		 ret	 0

; 560  :     Py_XDECREF(name);

$LN13@PyErr_SetE@3:
  000c0	48 8b cb	 mov	 rcx, rbx
  000c3	e8 00 00 00 00	 call	 Px_DecRef
$LN21@PyErr_SetE@3:

; 561  :     return ret;

  000c8	48 8b c7	 mov	 rax, rdi
$LN3@PyErr_SetE@3:

; 562  : }

  000cb	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d0	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000d5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d9	5f		 pop	 rdi
  000da	c3		 ret	 0
PyErr_SetExcFromWindowsErrWithFilename ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetExcFromWindowsErrWithUnicodeFilename
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_SetExcFromWindowsErrWithUnicodeFilename DD imagerel $LN24
	DD	imagerel $LN24+238
	DD	imagerel $unwind$PyErr_SetExcFromWindowsErrWithUnicodeFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetExcFromWindowsErrWithUnicodeFilename DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\errors.c
xdata	ENDS
;	COMDAT PyErr_SetExcFromWindowsErrWithUnicodeFilename
_TEXT	SEGMENT
exc$ = 64
ierr$ = 72
filename$ = 80
PyErr_SetExcFromWindowsErrWithUnicodeFilename PROC	; COMDAT

; 568  : {

$LN24:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	8b da		 mov	 ebx, edx
  00011	48 8b f1	 mov	 rsi, rcx

; 569  :     PyObject *name = filename ?
; 570  :                      PyUnicode_FromUnicode(filename, wcslen(filename)) :
; 571  :              NULL;

  00014	4d 85 c0	 test	 r8, r8
  00017	74 20		 je	 SHORT $LN7@PyErr_SetE@4
  00019	48 83 c9 ff	 or	 rcx, -1
  0001d	33 c0		 xor	 eax, eax
  0001f	49 8b f8	 mov	 rdi, r8
  00022	66 f2 af	 repne scasw
  00025	48 f7 d1	 not	 rcx
  00028	48 8d 51 ff	 lea	 rdx, QWORD PTR [rcx-1]
  0002c	49 8b c8	 mov	 rcx, r8
  0002f	e8 00 00 00 00	 call	 PyUnicode_FromUnicode
  00034	48 8b f8	 mov	 rdi, rax
  00037	eb 02		 jmp	 SHORT $LN8@PyErr_SetE@4
$LN7@PyErr_SetE@4:
  00039	33 ff		 xor	 edi, edi
$LN8@PyErr_SetE@4:

; 572  :     PyObject *ret = PyErr_SetExcFromWindowsErrWithFilenameObject(exc,
; 573  :                                                                  ierr,
; 574  :                                                                  name);

  0003b	4c 8b c7	 mov	 r8, rdi
  0003e	8b d3		 mov	 edx, ebx
  00040	48 8b ce	 mov	 rcx, rsi
  00043	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErrWithFilenameObject
  00048	48 8b d8	 mov	 rbx, rax

; 575  :     Py_XDECREF(name);

  0004b	48 85 ff	 test	 rdi, rdi
  0004e	0f 84 8a 00 00
	00		 je	 $LN3@PyErr_SetE@4
  00054	e8 00 00 00 00	 call	 _Py_PXCTX
  00059	85 c0		 test	 eax, eax
  0005b	75 7e		 jne	 SHORT $LN21@PyErr_SetE@4
  0005d	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00061	a8 20		 test	 al, 32			; 00000020H
  00063	75 6e		 jne	 SHORT $LN13@PyErr_SetE@4
  00065	84 c0		 test	 al, al
  00067	78 6a		 js	 SHORT $LN13@PyErr_SetE@4
  00069	a8 02		 test	 al, 2
  0006b	75 6e		 jne	 SHORT $LN21@PyErr_SetE@4
  0006d	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00071	75 68		 jne	 SHORT $LN21@PyErr_SetE@4
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00081	4c 8b cf	 mov	 r9, rdi
  00084	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0008a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00092	e8 00 00 00 00	 call	 _PyParallel_Guard
  00097	48 8b cf	 mov	 rcx, rdi
  0009a	85 c0		 test	 eax, eax
  0009c	74 18		 je	 SHORT $LN18@PyErr_SetE@4
  0009e	e8 00 00 00 00	 call	 _Px_Dealloc

; 576  :     return ret;

  000a3	48 8b c3	 mov	 rax, rbx

; 577  : }

  000a6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ab	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000b0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b4	5f		 pop	 rdi
  000b5	c3		 ret	 0

; 575  :     Py_XDECREF(name);

$LN18@PyErr_SetE@4:
  000b6	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000ba	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 576  :     return ret;

  000c0	48 8b c3	 mov	 rax, rbx

; 577  : }

  000c3	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000c8	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000cd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d1	5f		 pop	 rdi
  000d2	c3		 ret	 0

; 575  :     Py_XDECREF(name);

$LN13@PyErr_SetE@4:
  000d3	48 8b cf	 mov	 rcx, rdi
  000d6	e8 00 00 00 00	 call	 Px_DecRef
$LN21@PyErr_SetE@4:

; 576  :     return ret;

  000db	48 8b c3	 mov	 rax, rbx
$LN3@PyErr_SetE@4:

; 577  : }

  000de	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000e3	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000e8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ec	5f		 pop	 rdi
  000ed	c3		 ret	 0
PyErr_SetExcFromWindowsErrWithUnicodeFilename ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetExcFromWindowsErr
; Function compile flags: /Ogtpy
;	COMDAT PyErr_SetExcFromWindowsErr
_TEXT	SEGMENT
exc$ = 8
ierr$ = 16
PyErr_SetExcFromWindowsErr PROC				; COMDAT

; 581  :     return PyErr_SetExcFromWindowsErrWithFilename(exc, ierr, NULL);

  00000	45 33 c0	 xor	 r8d, r8d

; 582  : }

  00003	e9 00 00 00 00	 jmp	 PyErr_SetExcFromWindowsErrWithFilename
PyErr_SetExcFromWindowsErr ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetFromWindowsErr
EXTRN	PyExc_WindowsError:QWORD
; Function compile flags: /Ogtpy
;	COMDAT PyErr_SetFromWindowsErr
_TEXT	SEGMENT
ierr$ = 8
PyErr_SetFromWindowsErr PROC				; COMDAT

; 586  :     return PyErr_SetExcFromWindowsErrWithFilename(PyExc_WindowsError,
; 587  :                                                   ierr, NULL);

  00000	8b d1		 mov	 edx, ecx
  00002	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WindowsError
  00009	45 33 c0	 xor	 r8d, r8d

; 588  : }

  0000c	e9 00 00 00 00	 jmp	 PyErr_SetExcFromWindowsErrWithFilename
PyErr_SetFromWindowsErr ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetFromWindowsErrWithFilename
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_SetFromWindowsErrWithFilename DD imagerel $LN24
	DD	imagerel $LN24+200
	DD	imagerel $unwind$PyErr_SetFromWindowsErrWithFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetFromWindowsErrWithFilename DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\errors.c
xdata	ENDS
;	COMDAT PyErr_SetFromWindowsErrWithFilename
_TEXT	SEGMENT
ierr$ = 64
filename$ = 72
PyErr_SetFromWindowsErrWithFilename PROC		; COMDAT

; 592  : {

$LN24:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	8b f9		 mov	 edi, ecx

; 593  :     PyObject *name = filename ? PyUnicode_DecodeFSDefault(filename) : NULL;

  0000c	48 85 d2	 test	 rdx, rdx
  0000f	74 0d		 je	 SHORT $LN7@PyErr_SetF@4
  00011	48 8b ca	 mov	 rcx, rdx
  00014	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  00019	48 8b d8	 mov	 rbx, rax
  0001c	eb 02		 jmp	 SHORT $LN8@PyErr_SetF@4
$LN7@PyErr_SetF@4:
  0001e	33 db		 xor	 ebx, ebx
$LN8@PyErr_SetF@4:

; 594  :     PyObject *result = PyErr_SetExcFromWindowsErrWithFilenameObject(
; 595  :                                                   PyExc_WindowsError,
; 596  :                                                   ierr, name);

  00020	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WindowsError
  00027	4c 8b c3	 mov	 r8, rbx
  0002a	8b d7		 mov	 edx, edi
  0002c	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErrWithFilenameObject
  00031	48 8b f8	 mov	 rdi, rax

; 597  :     Py_XDECREF(name);

  00034	48 85 db	 test	 rbx, rbx
  00037	0f 84 80 00 00
	00		 je	 $LN3@PyErr_SetF@4
  0003d	e8 00 00 00 00	 call	 _Py_PXCTX
  00042	85 c0		 test	 eax, eax
  00044	75 74		 jne	 SHORT $LN21@PyErr_SetF@4
  00046	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0004a	a8 20		 test	 al, 32			; 00000020H
  0004c	75 64		 jne	 SHORT $LN13@PyErr_SetF@4
  0004e	84 c0		 test	 al, al
  00050	78 60		 js	 SHORT $LN13@PyErr_SetF@4
  00052	a8 02		 test	 al, 2
  00054	75 64		 jne	 SHORT $LN21@PyErr_SetF@4
  00056	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0005a	75 5e		 jne	 SHORT $LN21@PyErr_SetF@4
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0006a	4c 8b cb	 mov	 r9, rbx
  0006d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00073	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0007b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00080	48 8b cb	 mov	 rcx, rbx
  00083	85 c0		 test	 eax, eax
  00085	74 13		 je	 SHORT $LN18@PyErr_SetF@4
  00087	e8 00 00 00 00	 call	 _Px_Dealloc

; 598  :     return result;

  0008c	48 8b c7	 mov	 rax, rdi

; 599  : }

  0008f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00094	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00098	5f		 pop	 rdi
  00099	c3		 ret	 0

; 597  :     Py_XDECREF(name);

$LN18@PyErr_SetF@4:
  0009a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0009e	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 598  :     return result;

  000a4	48 8b c7	 mov	 rax, rdi

; 599  : }

  000a7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ac	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b0	5f		 pop	 rdi
  000b1	c3		 ret	 0

; 597  :     Py_XDECREF(name);

$LN13@PyErr_SetF@4:
  000b2	48 8b cb	 mov	 rcx, rbx
  000b5	e8 00 00 00 00	 call	 Px_DecRef
$LN21@PyErr_SetF@4:

; 598  :     return result;

  000ba	48 8b c7	 mov	 rax, rdi
$LN3@PyErr_SetF@4:

; 599  : }

  000bd	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000c2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c6	5f		 pop	 rdi
  000c7	c3		 ret	 0
PyErr_SetFromWindowsErrWithFilename ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetFromWindowsErrWithUnicodeFilename
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_SetFromWindowsErrWithUnicodeFilename DD imagerel $LN24
	DD	imagerel $LN24+222
	DD	imagerel $unwind$PyErr_SetFromWindowsErrWithUnicodeFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetFromWindowsErrWithUnicodeFilename DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\errors.c
xdata	ENDS
;	COMDAT PyErr_SetFromWindowsErrWithUnicodeFilename
_TEXT	SEGMENT
ierr$ = 64
filename$ = 72
PyErr_SetFromWindowsErrWithUnicodeFilename PROC		; COMDAT

; 604  : {

$LN24:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	4c 8b c2	 mov	 r8, rdx
  0000d	8b d9		 mov	 ebx, ecx

; 605  :     PyObject *name = filename ?
; 606  :                      PyUnicode_FromUnicode(filename, wcslen(filename)) :
; 607  :              NULL;

  0000f	48 85 d2	 test	 rdx, rdx
  00012	74 20		 je	 SHORT $LN7@PyErr_SetF@5
  00014	48 83 c9 ff	 or	 rcx, -1
  00018	48 8b fa	 mov	 rdi, rdx
  0001b	33 c0		 xor	 eax, eax
  0001d	66 f2 af	 repne scasw
  00020	48 f7 d1	 not	 rcx
  00023	48 8d 51 ff	 lea	 rdx, QWORD PTR [rcx-1]
  00027	49 8b c8	 mov	 rcx, r8
  0002a	e8 00 00 00 00	 call	 PyUnicode_FromUnicode
  0002f	48 8b f8	 mov	 rdi, rax
  00032	eb 02		 jmp	 SHORT $LN8@PyErr_SetF@5
$LN7@PyErr_SetF@5:
  00034	33 ff		 xor	 edi, edi
$LN8@PyErr_SetF@5:

; 608  :     PyObject *result = PyErr_SetExcFromWindowsErrWithFilenameObject(
; 609  :                                                   PyExc_WindowsError,
; 610  :                                                   ierr, name);

  00036	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WindowsError
  0003d	4c 8b c7	 mov	 r8, rdi
  00040	8b d3		 mov	 edx, ebx
  00042	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErrWithFilenameObject
  00047	48 8b d8	 mov	 rbx, rax

; 611  :     Py_XDECREF(name);

  0004a	48 85 ff	 test	 rdi, rdi
  0004d	0f 84 80 00 00
	00		 je	 $LN3@PyErr_SetF@5
  00053	e8 00 00 00 00	 call	 _Py_PXCTX
  00058	85 c0		 test	 eax, eax
  0005a	75 74		 jne	 SHORT $LN21@PyErr_SetF@5
  0005c	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00060	a8 20		 test	 al, 32			; 00000020H
  00062	75 64		 jne	 SHORT $LN13@PyErr_SetF@5
  00064	84 c0		 test	 al, al
  00066	78 60		 js	 SHORT $LN13@PyErr_SetF@5
  00068	a8 02		 test	 al, 2
  0006a	75 64		 jne	 SHORT $LN21@PyErr_SetF@5
  0006c	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00070	75 5e		 jne	 SHORT $LN21@PyErr_SetF@5
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00080	4c 8b cf	 mov	 r9, rdi
  00083	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00089	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00091	e8 00 00 00 00	 call	 _PyParallel_Guard
  00096	48 8b cf	 mov	 rcx, rdi
  00099	85 c0		 test	 eax, eax
  0009b	74 13		 je	 SHORT $LN18@PyErr_SetF@5
  0009d	e8 00 00 00 00	 call	 _Px_Dealloc

; 612  :     return result;

  000a2	48 8b c3	 mov	 rax, rbx

; 613  : }

  000a5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000aa	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ae	5f		 pop	 rdi
  000af	c3		 ret	 0

; 611  :     Py_XDECREF(name);

$LN18@PyErr_SetF@5:
  000b0	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000b4	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 612  :     return result;

  000ba	48 8b c3	 mov	 rax, rbx

; 613  : }

  000bd	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000c2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c6	5f		 pop	 rdi
  000c7	c3		 ret	 0

; 611  :     Py_XDECREF(name);

$LN13@PyErr_SetF@5:
  000c8	48 8b cf	 mov	 rcx, rdi
  000cb	e8 00 00 00 00	 call	 Px_DecRef
$LN21@PyErr_SetF@5:

; 612  :     return result;

  000d0	48 8b c3	 mov	 rax, rbx
$LN3@PyErr_SetF@5:

; 613  : }

  000d3	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000dc	5f		 pop	 rdi
  000dd	c3		 ret	 0
PyErr_SetFromWindowsErrWithUnicodeFilename ENDP
_TEXT	ENDS
PUBLIC	??_C@_04LNEJFJGI@path?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	PyErr_SetImportError
EXTRN	PyExc_ImportError:QWORD
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyDict_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetImportError DD imagerel $LN14
	DD	imagerel $LN14+33
	DD	imagerel $unwind$PyErr_SetImportError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyErr_SetImportError DD imagerel $LN14+33
	DD	imagerel $LN14+55
	DD	imagerel $chain$0$PyErr_SetImportError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyErr_SetImportError DD imagerel $LN14+55
	DD	imagerel $LN14+86
	DD	imagerel $chain$1$PyErr_SetImportError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyErr_SetImportError DD imagerel $LN14+86
	DD	imagerel $LN14+91
	DD	imagerel $chain$2$PyErr_SetImportError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyErr_SetImportError DD imagerel $LN14+91
	DD	imagerel $LN14+199
	DD	imagerel $chain$3$PyErr_SetImportError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyErr_SetImportError DD imagerel $LN14+199
	DD	imagerel $LN14+240
	DD	imagerel $chain$4$PyErr_SetImportError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyErr_SetImportError DD imagerel $LN14+240
	DD	imagerel $LN14+245
	DD	imagerel $chain$5$PyErr_SetImportError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyErr_SetImportError DD imagerel $LN14+245
	DD	imagerel $LN14+250
	DD	imagerel $chain$6$PyErr_SetImportError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$PyErr_SetImportError DD imagerel $LN14+250
	DD	imagerel $LN14+263
	DD	imagerel $chain$7$PyErr_SetImportError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$PyErr_SetImportError DD 021H
	DD	imagerel $LN14
	DD	imagerel $LN14+33
	DD	imagerel $unwind$PyErr_SetImportError
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyErr_SetImportError DD 021H
	DD	imagerel $LN14+33
	DD	imagerel $LN14+55
	DD	imagerel $chain$0$PyErr_SetImportError
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyErr_SetImportError DD 021H
	DD	imagerel $LN14+55
	DD	imagerel $LN14+86
	DD	imagerel $chain$1$PyErr_SetImportError
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyErr_SetImportError DD 021H
	DD	imagerel $LN14+86
	DD	imagerel $LN14+91
	DD	imagerel $chain$2$PyErr_SetImportError
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyErr_SetImportError DD 020521H
	DD	0b7405H
	DD	imagerel $LN14+86
	DD	imagerel $LN14+91
	DD	imagerel $chain$2$PyErr_SetImportError
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyErr_SetImportError DD 020521H
	DD	083405H
	DD	imagerel $LN14+55
	DD	imagerel $LN14+86
	DD	imagerel $chain$1$PyErr_SetImportError
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyErr_SetImportError DD 020521H
	DD	095405H
	DD	imagerel $LN14+33
	DD	imagerel $LN14+55
	DD	imagerel $chain$0$PyErr_SetImportError
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyErr_SetImportError DD 020521H
	DD	0a6405H
	DD	imagerel $LN14
	DD	imagerel $LN14+33
	DD	imagerel $unwind$PyErr_SetImportError
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetImportError DD 040a01H
	DD	0e006320aH
	DD	0c002d004H
xdata	ENDS
;	COMDAT ??_C@_04LNEJFJGI@path?$AA@
CONST	SEGMENT
??_C@_04LNEJFJGI@path?$AA@ DB 'path', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyErr_SetImportError
_TEXT	SEGMENT
msg$ = 64
name$ = 72
path$ = 80
PyErr_SetImportError PROC				; COMDAT

; 618  : {

$LN14:
  00000	41 54		 push	 r12
  00002	41 55		 push	 r13
  00004	41 56		 push	 r14
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	4d 8b e8	 mov	 r13, r8
  0000d	4c 8b f2	 mov	 r14, rdx
  00010	4c 8b e1	 mov	 r12, rcx

; 619  :     PyObject *args, *kwargs, *error;
; 620  : 
; 621  :     if (msg == NULL)

  00013	48 85 c9	 test	 rcx, rcx

; 622  :         return NULL;

  00016	0f 84 de 00 00
	00		 je	 $LN13@PyErr_SetI

; 623  : 
; 624  :     args = PyTuple_New(1);

  0001c	b9 01 00 00 00	 mov	 ecx, 1
  00021	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  00026	e8 00 00 00 00	 call	 PyTuple_New
  0002b	48 8b f0	 mov	 rsi, rax

; 625  :     if (args == NULL)

  0002e	48 85 c0	 test	 rax, rax

; 626  :         return NULL;

  00031	0f 84 be 00 00
	00		 je	 $LN12@PyErr_SetI

; 627  : 
; 628  :     kwargs = PyDict_New();

  00037	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  0003c	e8 00 00 00 00	 call	 PyDict_New
  00041	48 8b e8	 mov	 rbp, rax

; 629  :     if (kwargs == NULL) {

  00044	48 85 c0	 test	 rax, rax
  00047	75 0d		 jne	 SHORT $LN4@PyErr_SetI

; 630  :         Py_DECREF(args);

  00049	48 8b ce	 mov	 rcx, rsi
  0004c	e8 00 00 00 00	 call	 _Py_DecRef

; 631  :         return NULL;

  00051	e9 9a 00 00 00	 jmp	 $LN11@PyErr_SetI
$LN4@PyErr_SetI:
  00056	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0005b	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi

; 632  :     }
; 633  : 
; 634  :     if (name == NULL) {

  00060	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  00067	4d 85 f6	 test	 r14, r14
  0006a	48 8b df	 mov	 rbx, rdi

; 635  :         name = Py_None;
; 636  :     }
; 637  : 
; 638  :     if (path == NULL) {
; 639  :         path = Py_None;
; 640  :     }
; 641  : 
; 642  :     Py_INCREF(msg);

  0006d	49 8b cc	 mov	 rcx, r12
  00070	49 0f 45 de	 cmovne	 rbx, r14
  00074	4d 85 ed	 test	 r13, r13
  00077	49 0f 45 fd	 cmovne	 rdi, r13
  0007b	e8 00 00 00 00	 call	 _Py_IncRef

; 643  :     PyTuple_SET_ITEM(args, 0, msg);
; 644  :     PyDict_SetItemString(kwargs, "name", name);

  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MEMAJGDJ@name?$AA@
  00087	4c 8b c3	 mov	 r8, rbx
  0008a	48 8b cd	 mov	 rcx, rbp
  0008d	4c 89 66 70	 mov	 QWORD PTR [rsi+112], r12
  00091	e8 00 00 00 00	 call	 PyDict_SetItemString

; 645  :     PyDict_SetItemString(kwargs, "path", path);

  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LNEJFJGI@path?$AA@
  0009d	4c 8b c7	 mov	 r8, rdi
  000a0	48 8b cd	 mov	 rcx, rbp
  000a3	e8 00 00 00 00	 call	 PyDict_SetItemString

; 646  : 
; 647  :     error = PyObject_Call(PyExc_ImportError, args, kwargs);

  000a8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  000af	4c 8b c5	 mov	 r8, rbp
  000b2	48 8b d6	 mov	 rdx, rsi
  000b5	e8 00 00 00 00	 call	 PyObject_Call
  000ba	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  000bf	48 8b d8	 mov	 rbx, rax

; 648  :     if (error != NULL) {

  000c2	48 85 c0	 test	 rax, rax
  000c5	74 14		 je	 SHORT $LN1@PyErr_SetI

; 649  :         PyErr_SetObject((PyObject *)Py_TYPE(error), error);

  000c7	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000cb	48 8b d0	 mov	 rdx, rax
  000ce	e8 00 00 00 00	 call	 PyErr_SetObject

; 650  :         Py_DECREF(error);

  000d3	48 8b cb	 mov	 rcx, rbx
  000d6	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_SetI:

; 651  :     }
; 652  : 
; 653  :     Py_DECREF(args);

  000db	48 8b ce	 mov	 rcx, rsi
  000de	e8 00 00 00 00	 call	 _Py_DecRef

; 654  :     Py_DECREF(kwargs);

  000e3	48 8b cd	 mov	 rcx, rbp
  000e6	e8 00 00 00 00	 call	 _Py_DecRef
  000eb	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN11@PyErr_SetI:
  000f0	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
$LN12@PyErr_SetI:
  000f5	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
$LN13@PyErr_SetI:

; 655  : 
; 656  :     return NULL;

  000fa	33 c0		 xor	 eax, eax

; 657  : }

  000fc	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00100	41 5e		 pop	 r14
  00102	41 5d		 pop	 r13
  00104	41 5c		 pop	 r12
  00106	c3		 ret	 0
PyErr_SetImportError ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@HCAGLKKH@?$CFs?3?$CFd?3?5bad?5argument?5to?5internal?5@ ; `string'
PUBLIC	_PyErr_BadInternalCall
;	COMDAT ??_C@_0CJ@HCAGLKKH@?$CFs?3?$CFd?3?5bad?5argument?5to?5internal?5@
CONST	SEGMENT
??_C@_0CJ@HCAGLKKH@?$CFs?3?$CFd?3?5bad?5argument?5to?5internal?5@ DB '%s:'
	DB	'%d: bad argument to internal function', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyErr_BadInternalCall
_TEXT	SEGMENT
filename$ = 8
lineno$ = 16
_PyErr_BadInternalCall PROC				; COMDAT

; 662  :     PyErr_Format(PyExc_SystemError,
; 663  :                  "%s:%d: bad argument to internal function",
; 664  :                  filename, lineno);

  00000	4c 8b c1	 mov	 r8, rcx
  00003	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0000a	44 8b ca	 mov	 r9d, edx
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@HCAGLKKH@?$CFs?3?$CFd?3?5bad?5argument?5to?5internal?5@

; 665  : }

  00014	e9 00 00 00 00	 jmp	 PyErr_Format
_PyErr_BadInternalCall ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@DGMKLFNG@bad?5argument?5to?5internal?5functio@ ; `string'
PUBLIC	PyErr_BadInternalCall
;	COMDAT ??_C@_0CC@DGMKLFNG@bad?5argument?5to?5internal?5functio@
CONST	SEGMENT
??_C@_0CC@DGMKLFNG@bad?5argument?5to?5internal?5functio@ DB 'bad argument'
	DB	' to internal function', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyErr_BadInternalCall
_TEXT	SEGMENT
PyErr_BadInternalCall PROC				; COMDAT

; 673  :     PyErr_Format(PyExc_SystemError,
; 674  :                  "bad argument to internal function");

  00000	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00007	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@DGMKLFNG@bad?5argument?5to?5internal?5functio@

; 675  : }

  0000e	e9 00 00 00 00	 jmp	 PyErr_Format
PyErr_BadInternalCall ENDP
_TEXT	ENDS
PUBLIC	??_C@_03KLBGLGKG@sOO?$AA@			; `string'
PUBLIC	??_C@_0CO@OCGGGGAF@PyErr_NewException?3?5name?5must?5be@ ; `string'
PUBLIC	PyErr_NewException
EXTRN	PyObject_CallFunction:PROC
EXTRN	PyType_Type:BYTE
EXTRN	PyUnicode_FromStringAndSize:PROC
EXTRN	PyDict_GetItemString:PROC
EXTRN	PyExc_Exception:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_NewException DD imagerel $LN73
	DD	imagerel $LN73+636
	DD	imagerel $unwind$PyErr_NewException
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_NewException DD 0c1e01H
	DD	0d741eH
	DD	0c641eH
	DD	0b541eH
	DD	0a341eH
	DD	0e01a521eH
	DD	0c016d018H
xdata	ENDS
;	COMDAT ??_C@_03KLBGLGKG@sOO?$AA@
CONST	SEGMENT
??_C@_03KLBGLGKG@sOO?$AA@ DB 'sOO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@OCGGGGAF@PyErr_NewException?3?5name?5must?5be@
CONST	SEGMENT
??_C@_0CO@OCGGGGAF@PyErr_NewException?3?5name?5must?5be@ DB 'PyErr_NewExc'
	DB	'eption: name must be module.class', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\errors.c
CONST	ENDS
;	COMDAT PyErr_NewException
_TEXT	SEGMENT
name$ = 80
base$ = 88
dict$ = 96
PyErr_NewException PROC					; COMDAT

; 703  : {

$LN73:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	41 55		 push	 r13
  00018	41 56		 push	 r14
  0001a	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 704  :     const char *dot;
; 705  :     PyObject *modulename = NULL;

  0001e	33 f6		 xor	 esi, esi
  00020	48 8b da	 mov	 rbx, rdx
  00023	49 8b e8	 mov	 rbp, r8

; 706  :     PyObject *classname = NULL;
; 707  :     PyObject *mydict = NULL;
; 708  :     PyObject *bases = NULL;
; 709  :     PyObject *result = NULL;
; 710  :     dot = strrchr(name, '.');

  00026	8d 56 2e	 lea	 edx, QWORD PTR [rsi+46]
  00029	4c 8b e1	 mov	 r12, rcx
  0002c	8b fe		 mov	 edi, esi
  0002e	44 8b f6	 mov	 r14d, esi
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strrchr
  00037	4c 8b e8	 mov	 r13, rax

; 711  :     if (dot == NULL) {

  0003a	48 85 c0	 test	 rax, rax
  0003d	75 1a		 jne	 SHORT $LN26@PyErr_NewE

; 712  :         PyErr_SetString(PyExc_SystemError,
; 713  :             "PyErr_NewException: name must be module.class");

  0003f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@OCGGGGAF@PyErr_NewException?3?5name?5must?5be@
  0004d	e8 00 00 00 00	 call	 PyErr_SetString

; 714  :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	e9 04 02 00 00	 jmp	 $LN27@PyErr_NewE
$LN26@PyErr_NewE:

; 715  :     }
; 716  :     if (base == NULL)

  00059	48 85 db	 test	 rbx, rbx
  0005c	48 0f 44 1d 00
	00 00 00	 cmove	 rbx, QWORD PTR PyExc_Exception

; 717  :         base = PyExc_Exception;
; 718  :     if (dict == NULL) {

  00064	48 85 ed	 test	 rbp, rbp
  00067	75 14		 jne	 SHORT $LN23@PyErr_NewE

; 719  :         dict = mydict = PyDict_New();

  00069	e8 00 00 00 00	 call	 PyDict_New
  0006e	48 8b f8	 mov	 rdi, rax
  00071	48 8b e8	 mov	 rbp, rax

; 720  :         if (dict == NULL)

  00074	48 85 c0	 test	 rax, rax
  00077	0f 84 dd 01 00
	00		 je	 $LN3@PyErr_NewE
$LN23@PyErr_NewE:

; 721  :             goto failure;
; 722  :     }
; 723  :     if (PyDict_GetItemString(dict, "__module__") == NULL) {

  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
  00084	48 8b cd	 mov	 rcx, rbp
  00087	e8 00 00 00 00	 call	 PyDict_GetItemString
  0008c	48 85 c0	 test	 rax, rax
  0008f	75 34		 jne	 SHORT $LN20@PyErr_NewE

; 724  :         modulename = PyUnicode_FromStringAndSize(name,
; 725  :                                              (Py_ssize_t)(dot-name));

  00091	49 8b d5	 mov	 rdx, r13
  00094	49 8b cc	 mov	 rcx, r12
  00097	49 2b d4	 sub	 rdx, r12
  0009a	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  0009f	48 8b f0	 mov	 rsi, rax

; 726  :         if (modulename == NULL)

  000a2	48 85 c0	 test	 rax, rax
  000a5	0f 84 db 00 00
	00		 je	 $LN15@PyErr_NewE

; 727  :             goto failure;
; 728  :         if (PyDict_SetItemString(dict, "__module__", modulename) != 0)

  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
  000b2	4c 8b c0	 mov	 r8, rax
  000b5	48 8b cd	 mov	 rcx, rbp
  000b8	e8 00 00 00 00	 call	 PyDict_SetItemString
  000bd	85 c0		 test	 eax, eax
  000bf	0f 85 c1 00 00
	00		 jne	 $LN15@PyErr_NewE
$LN20@PyErr_NewE:

; 729  :             goto failure;
; 730  :     }
; 731  :     if (PyTuple_Check(base)) {

  000c5	48 8b 4b 58	 mov	 rcx, QWORD PTR [rbx+88]
  000c9	f7 81 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rcx+256], 67108864 ; 04000000H
  000d3	74 0a		 je	 SHORT $LN19@PyErr_NewE

; 732  :         bases = base;
; 733  :         /* INCREF as we create a new ref in the else branch */
; 734  :         Py_INCREF(bases);

  000d5	48 8b cb	 mov	 rcx, rbx
  000d8	e8 00 00 00 00	 call	 _Py_IncRef

; 735  :     } else {

  000dd	eb 19		 jmp	 SHORT $LN17@PyErr_NewE
$LN19@PyErr_NewE:

; 736  :         bases = PyTuple_Pack(1, base);

  000df	48 8b d3	 mov	 rdx, rbx
  000e2	b9 01 00 00 00	 mov	 ecx, 1
  000e7	e8 00 00 00 00	 call	 PyTuple_Pack
  000ec	48 8b d8	 mov	 rbx, rax

; 737  :         if (bases == NULL)

  000ef	48 85 c0	 test	 rax, rax
  000f2	0f 84 8e 00 00
	00		 je	 $LN15@PyErr_NewE
$LN17@PyErr_NewE:

; 738  :             goto failure;
; 739  :     }
; 740  :     /* Create a real class. */
; 741  :     result = PyObject_CallFunction((PyObject *)&PyType_Type, "sOO",
; 742  :                                    dot+1, bases, dict);

  000f8	4d 8d 45 01	 lea	 r8, QWORD PTR [r13+1]
  000fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03KLBGLGKG@sOO?$AA@
  00103	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyType_Type
  0010a	4c 8b cb	 mov	 r9, rbx
  0010d	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00112	e8 00 00 00 00	 call	 PyObject_CallFunction
$failure$120863:
  00117	4c 8b f0	 mov	 r14, rax

; 743  :   failure:
; 744  :     Py_XDECREF(bases);

  0011a	48 85 db	 test	 rbx, rbx
  0011d	74 67		 je	 SHORT $LN15@PyErr_NewE
  0011f	e8 00 00 00 00	 call	 _Py_PXCTX
  00124	85 c0		 test	 eax, eax
  00126	75 5e		 jne	 SHORT $LN15@PyErr_NewE
  00128	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0012c	f6 c1 20	 test	 cl, 32			; 00000020H
  0012f	75 4d		 jne	 SHORT $LN33@PyErr_NewE
  00131	84 c9		 test	 cl, cl
  00133	78 49		 js	 SHORT $LN33@PyErr_NewE
  00135	f6 c1 02	 test	 cl, 2
  00138	75 4c		 jne	 SHORT $LN15@PyErr_NewE
  0013a	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0013e	75 46		 jne	 SHORT $LN15@PyErr_NewE
  00140	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00147	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0014e	4c 8b cb	 mov	 r9, rbx
  00151	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00157	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0015f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00164	48 8b cb	 mov	 rcx, rbx
  00167	85 c0		 test	 eax, eax
  00169	74 07		 je	 SHORT $LN38@PyErr_NewE
  0016b	e8 00 00 00 00	 call	 _Px_Dealloc
  00170	eb 14		 jmp	 SHORT $LN15@PyErr_NewE
$LN38@PyErr_NewE:
  00172	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00176	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0017c	eb 08		 jmp	 SHORT $LN15@PyErr_NewE
$LN33@PyErr_NewE:
  0017e	48 8b cb	 mov	 rcx, rbx
  00181	e8 00 00 00 00	 call	 Px_DecRef
$LN15@PyErr_NewE:

; 745  :     Py_XDECREF(mydict);

  00186	48 85 ff	 test	 rdi, rdi
  00189	74 65		 je	 SHORT $LN7@PyErr_NewE
  0018b	e8 00 00 00 00	 call	 _Py_PXCTX
  00190	85 c0		 test	 eax, eax
  00192	75 5c		 jne	 SHORT $LN7@PyErr_NewE
  00194	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00198	a8 20		 test	 al, 32			; 00000020H
  0019a	75 4c		 jne	 SHORT $LN44@PyErr_NewE
  0019c	84 c0		 test	 al, al
  0019e	78 48		 js	 SHORT $LN44@PyErr_NewE
  001a0	a8 02		 test	 al, 2
  001a2	75 4c		 jne	 SHORT $LN7@PyErr_NewE
  001a4	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  001a8	75 46		 jne	 SHORT $LN7@PyErr_NewE
  001aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001b8	4c 8b cf	 mov	 r9, rdi
  001bb	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001c1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001c9	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ce	48 8b cf	 mov	 rcx, rdi
  001d1	85 c0		 test	 eax, eax
  001d3	74 07		 je	 SHORT $LN49@PyErr_NewE
  001d5	e8 00 00 00 00	 call	 _Px_Dealloc
  001da	eb 14		 jmp	 SHORT $LN7@PyErr_NewE
$LN49@PyErr_NewE:
  001dc	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  001e0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001e6	eb 08		 jmp	 SHORT $LN7@PyErr_NewE
$LN44@PyErr_NewE:
  001e8	48 8b cf	 mov	 rcx, rdi
  001eb	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyErr_NewE:

; 746  :     Py_XDECREF(classname);
; 747  :     Py_XDECREF(modulename);

  001f0	48 85 f6	 test	 rsi, rsi
  001f3	74 65		 je	 SHORT $LN3@PyErr_NewE
  001f5	e8 00 00 00 00	 call	 _Py_PXCTX
  001fa	85 c0		 test	 eax, eax
  001fc	75 5c		 jne	 SHORT $LN3@PyErr_NewE
  001fe	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00202	a8 20		 test	 al, 32			; 00000020H
  00204	75 4c		 jne	 SHORT $LN66@PyErr_NewE
  00206	84 c0		 test	 al, al
  00208	78 48		 js	 SHORT $LN66@PyErr_NewE
  0020a	a8 02		 test	 al, 2
  0020c	75 4c		 jne	 SHORT $LN3@PyErr_NewE
  0020e	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  00212	75 46		 jne	 SHORT $LN3@PyErr_NewE
  00214	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0021b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00222	4c 8b ce	 mov	 r9, rsi
  00225	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0022b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00233	e8 00 00 00 00	 call	 _PyParallel_Guard
  00238	48 8b ce	 mov	 rcx, rsi
  0023b	85 c0		 test	 eax, eax
  0023d	74 07		 je	 SHORT $LN71@PyErr_NewE
  0023f	e8 00 00 00 00	 call	 _Px_Dealloc
  00244	eb 14		 jmp	 SHORT $LN3@PyErr_NewE
$LN71@PyErr_NewE:
  00246	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  0024a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00250	eb 08		 jmp	 SHORT $LN3@PyErr_NewE
$LN66@PyErr_NewE:
  00252	48 8b ce	 mov	 rcx, rsi
  00255	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyErr_NewE:

; 748  :     return result;

  0025a	49 8b c6	 mov	 rax, r14
$LN27@PyErr_NewE:

; 749  : }

  0025d	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00262	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00267	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  0026c	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  00271	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00275	41 5e		 pop	 r14
  00277	41 5d		 pop	 r13
  00279	41 5c		 pop	 r12
  0027b	c3		 ret	 0
PyErr_NewException ENDP
_TEXT	ENDS
PUBLIC	??_C@_07DIBBIFIJ@__doc__?$AA@			; `string'
PUBLIC	PyErr_NewExceptionWithDoc
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyErr_NewExceptionWithDoc DD imagerel $LN23
	DD	imagerel $LN23+65
	DD	imagerel $unwind$PyErr_NewExceptionWithDoc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyErr_NewExceptionWithDoc DD imagerel $LN23+65
	DD	imagerel $LN23+150
	DD	imagerel $chain$0$PyErr_NewExceptionWithDoc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyErr_NewExceptionWithDoc DD imagerel $LN23+150
	DD	imagerel $LN23+281
	DD	imagerel $chain$1$PyErr_NewExceptionWithDoc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyErr_NewExceptionWithDoc DD 021H
	DD	imagerel $LN23
	DD	imagerel $LN23+65
	DD	imagerel $unwind$PyErr_NewExceptionWithDoc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyErr_NewExceptionWithDoc DD 020521H
	DD	0ac405H
	DD	imagerel $LN23
	DD	imagerel $LN23+65
	DD	imagerel $unwind$PyErr_NewExceptionWithDoc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_NewExceptionWithDoc DD 0a1801H
	DD	0d6418H
	DD	0c5418H
	DD	0b3418H
	DD	0e0145218H
	DD	07010d012H
xdata	ENDS
;	COMDAT ??_C@_07DIBBIFIJ@__doc__?$AA@
CONST	SEGMENT
??_C@_07DIBBIFIJ@__doc__?$AA@ DB '__doc__', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\errors.c
CONST	ENDS
;	COMDAT PyErr_NewExceptionWithDoc
_TEXT	SEGMENT
name$ = 80
doc$ = 88
base$ = 96
dict$ = 104
PyErr_NewExceptionWithDoc PROC				; COMDAT

; 756  : {

$LN23:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	41 55		 push	 r13
  00012	41 56		 push	 r14
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 757  :     int result;
; 758  :     PyObject *ret = NULL;

  00018	33 ed		 xor	 ebp, ebp
  0001a	49 8b f1	 mov	 rsi, r9
  0001d	4d 8b e8	 mov	 r13, r8
  00020	48 8b da	 mov	 rbx, rdx
  00023	4c 8b f1	 mov	 r14, rcx

; 759  :     PyObject *mydict = NULL; /* points to the dict only if we create it */

  00026	8b fd		 mov	 edi, ebp

; 760  :     PyObject *docobj;
; 761  : 
; 762  :     if (dict == NULL) {

  00028	4d 85 c9	 test	 r9, r9
  0002b	75 14		 jne	 SHORT $LN8@PyErr_NewE@2

; 763  :         dict = mydict = PyDict_New();

  0002d	e8 00 00 00 00	 call	 PyDict_New
  00032	48 8b f8	 mov	 rdi, rax
  00035	48 8b f0	 mov	 rsi, rax

; 764  :         if (dict == NULL) {

  00038	48 85 c0	 test	 rax, rax
  0003b	0f 84 bf 00 00
	00		 je	 $LN10@PyErr_NewE@2
$LN8@PyErr_NewE@2:
  00041	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12

; 765  :             return NULL;
; 766  :         }
; 767  :     }
; 768  : 
; 769  :     if (doc != NULL) {

  00046	48 85 db	 test	 rbx, rbx
  00049	74 30		 je	 SHORT $LN5@PyErr_NewE@2

; 770  :         docobj = PyUnicode_FromString(doc);

  0004b	48 8b cb	 mov	 rcx, rbx
  0004e	e8 00 00 00 00	 call	 PyUnicode_FromString
  00053	4c 8b e0	 mov	 r12, rax

; 771  :         if (docobj == NULL)

  00056	48 85 c0	 test	 rax, rax
  00059	74 31		 je	 SHORT $failure$120923

; 772  :             goto failure;
; 773  :         result = PyDict_SetItemString(dict, "__doc__", docobj);

  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
  00062	4c 8b c0	 mov	 r8, rax
  00065	48 8b ce	 mov	 rcx, rsi
  00068	e8 00 00 00 00	 call	 PyDict_SetItemString

; 774  :         Py_DECREF(docobj);

  0006d	49 8b cc	 mov	 rcx, r12
  00070	8b d8		 mov	 ebx, eax
  00072	e8 00 00 00 00	 call	 _Py_DecRef

; 775  :         if (result < 0)

  00077	85 db		 test	 ebx, ebx
  00079	78 11		 js	 SHORT $failure$120923
$LN5@PyErr_NewE@2:

; 776  :             goto failure;
; 777  :     }
; 778  : 
; 779  :     ret = PyErr_NewException(name, base, dict);

  0007b	4c 8b c6	 mov	 r8, rsi
  0007e	49 8b d5	 mov	 rdx, r13
  00081	49 8b ce	 mov	 rcx, r14
  00084	e8 00 00 00 00	 call	 PyErr_NewException
  00089	48 8b e8	 mov	 rbp, rax
$failure$120923:

; 780  :   failure:
; 781  :     Py_XDECREF(mydict);

  0008c	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]
  00091	48 85 ff	 test	 rdi, rdi
  00094	74 67		 je	 SHORT $LN3@PyErr_NewE@2
  00096	e8 00 00 00 00	 call	 _Py_PXCTX
  0009b	85 c0		 test	 eax, eax
  0009d	75 5e		 jne	 SHORT $LN3@PyErr_NewE@2
  0009f	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  000a3	f6 c1 20	 test	 cl, 32			; 00000020H
  000a6	75 4d		 jne	 SHORT $LN16@PyErr_NewE@2
  000a8	84 c9		 test	 cl, cl
  000aa	78 49		 js	 SHORT $LN16@PyErr_NewE@2
  000ac	f6 c1 02	 test	 cl, 2
  000af	75 4c		 jne	 SHORT $LN3@PyErr_NewE@2
  000b1	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  000b5	75 46		 jne	 SHORT $LN3@PyErr_NewE@2
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	4c 8b cf	 mov	 r9, rdi
  000c8	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000ce	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000db	48 8b cf	 mov	 rcx, rdi
  000de	85 c0		 test	 eax, eax
  000e0	74 07		 je	 SHORT $LN21@PyErr_NewE@2
  000e2	e8 00 00 00 00	 call	 _Px_Dealloc
  000e7	eb 14		 jmp	 SHORT $LN3@PyErr_NewE@2
$LN21@PyErr_NewE@2:
  000e9	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000ed	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000f3	eb 08		 jmp	 SHORT $LN3@PyErr_NewE@2
$LN16@PyErr_NewE@2:
  000f5	48 8b cf	 mov	 rcx, rdi
  000f8	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyErr_NewE@2:

; 782  :     return ret;

  000fd	48 8b c5	 mov	 rax, rbp
$LN10@PyErr_NewE@2:

; 783  : }

  00100	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00105	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  0010a	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  0010f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00113	41 5e		 pop	 r14
  00115	41 5d		 pop	 r13
  00117	5f		 pop	 rdi
  00118	c3		 ret	 0
PyErr_NewExceptionWithDoc ENDP
_TEXT	ENDS
PUBLIC	PyErr_SyntaxLocationEx
EXTRN	PyObject_Str:PROC
EXTRN	_PyObject_HasAttrId:PROC
EXTRN	PyExc_SyntaxError:QWORD
EXTRN	_PyObject_SetAttrId:PROC
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SyntaxLocationEx DD imagerel $LN25
	DD	imagerel $LN25+604
	DD	imagerel $unwind$PyErr_SyntaxLocationEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SyntaxLocationEx DD 081001H
	DD	0d3410H
	DD	0d00c5210H
	DD	07008c00aH
	DD	050066007H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyErr_SyntaxLocationEx
_TEXT	SEGMENT
tb$ = 32
v$ = 96
filename$ = 96
lineno$ = 104
col_offset$ = 112
exc$ = 120
PyErr_SyntaxLocationEx PROC				; COMDAT

; 857  : {

$LN25:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 55		 push	 r13
  0000c	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00010	41 8b d8	 mov	 ebx, r8d
  00013	44 8b e2	 mov	 r12d, edx
  00016	48 8b f9	 mov	 rdi, rcx

; 858  :     PyObject *exc, *v, *tb, *tmp;
; 859  :     _Py_IDENTIFIER(filename);
; 860  :     _Py_IDENTIFIER(lineno);
; 861  :     _Py_IDENTIFIER(msg);
; 862  :     _Py_IDENTIFIER(offset);
; 863  :     _Py_IDENTIFIER(print_file_and_line);
; 864  :     _Py_IDENTIFIER(text);
; 865  : 
; 866  :     /* add attributes for the line number and filename for the error */
; 867  :     PyErr_Fetch(&exc, &v, &tb);

  00019	4c 8d 44 24 20	 lea	 r8, QWORD PTR tb$[rsp]
  0001e	48 8d 54 24 60	 lea	 rdx, QWORD PTR v$[rsp]
  00023	48 8d 4c 24 78	 lea	 rcx, QWORD PTR exc$[rsp]
  00028	e8 00 00 00 00	 call	 PyErr_Fetch

; 868  :     PyErr_NormalizeException(&exc, &v, &tb);

  0002d	4c 8d 44 24 20	 lea	 r8, QWORD PTR tb$[rsp]
  00032	48 8d 54 24 60	 lea	 rdx, QWORD PTR v$[rsp]
  00037	48 8d 4c 24 78	 lea	 rcx, QWORD PTR exc$[rsp]
  0003c	e8 00 00 00 00	 call	 PyErr_NormalizeException

; 869  :     /* XXX check that it is, indeed, a syntax error. It might not
; 870  :      * be, though. */
; 871  :     tmp = PyLong_FromLong(lineno);

  00041	41 8b cc	 mov	 ecx, r12d
  00044	e8 00 00 00 00	 call	 PyLong_FromLong

; 872  :     if (tmp == NULL)

  00049	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR _tls_index
  0004f	48 8b f0	 mov	 rsi, rax
  00052	48 85 c0	 test	 rax, rax
  00055	75 07		 jne	 SHORT $LN21@PyErr_Synt

; 873  :         PyErr_Clear();

  00057	e8 00 00 00 00	 call	 PyErr_Clear

; 874  :     else {

  0005c	eb 30		 jmp	 SHORT $LN20@PyErr_Synt
$LN21@PyErr_Synt:

; 875  :         if (_PyObject_SetAttrId(v, &PyId_lineno, tmp))

  0005e	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00067	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  0006c	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_lineno@?1??PyErr_SyntaxLocationEx@@9@9
  00071	48 03 14 e8	 add	 rdx, QWORD PTR [rax+rbp*8]
  00075	4c 8b c6	 mov	 r8, rsi
  00078	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0007d	85 c0		 test	 eax, eax
  0007f	74 05		 je	 SHORT $LN19@PyErr_Synt

; 876  :             PyErr_Clear();

  00081	e8 00 00 00 00	 call	 PyErr_Clear
$LN19@PyErr_Synt:

; 877  :         Py_DECREF(tmp);

  00086	48 8b ce	 mov	 rcx, rsi
  00089	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@PyErr_Synt:

; 878  :     }
; 879  :     if (col_offset >= 0) {

  0008e	41 bd 00 00 00
	00		 mov	 r13d, OFFSET FLAT:?PyId_offset@?1??PyErr_SyntaxLocationEx@@9@9
  00094	85 db		 test	 ebx, ebx
  00096	78 44		 js	 SHORT $LN16@PyErr_Synt

; 880  :         tmp = PyLong_FromLong(col_offset);

  00098	8b cb		 mov	 ecx, ebx
  0009a	e8 00 00 00 00	 call	 PyLong_FromLong
  0009f	48 8b d8	 mov	 rbx, rax

; 881  :         if (tmp == NULL)

  000a2	48 85 c0	 test	 rax, rax
  000a5	75 07		 jne	 SHORT $LN17@PyErr_Synt

; 882  :             PyErr_Clear();

  000a7	e8 00 00 00 00	 call	 PyErr_Clear

; 883  :         else {

  000ac	eb 2e		 jmp	 SHORT $LN16@PyErr_Synt
$LN17@PyErr_Synt:

; 884  :             if (_PyObject_SetAttrId(v, &PyId_offset, tmp))

  000ae	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  000b7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  000bc	41 8b d5	 mov	 edx, r13d
  000bf	48 03 14 e8	 add	 rdx, QWORD PTR [rax+rbp*8]
  000c3	4c 8b c3	 mov	 r8, rbx
  000c6	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000cb	85 c0		 test	 eax, eax
  000cd	74 05		 je	 SHORT $LN15@PyErr_Synt

; 885  :                 PyErr_Clear();

  000cf	e8 00 00 00 00	 call	 PyErr_Clear
$LN15@PyErr_Synt:

; 886  :             Py_DECREF(tmp);

  000d4	48 8b cb	 mov	 rcx, rbx
  000d7	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@PyErr_Synt:

; 887  :         }
; 888  :     }
; 889  :     if (filename != NULL) {

  000dc	48 85 ff	 test	 rdi, rdi
  000df	0f 84 8a 00 00
	00		 je	 $LN10@PyErr_Synt

; 890  :         tmp = PyUnicode_DecodeFSDefault(filename);

  000e5	48 8b cf	 mov	 rcx, rdi
  000e8	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  000ed	48 8b d8	 mov	 rbx, rax

; 891  :         if (tmp == NULL)

  000f0	48 85 c0	 test	 rax, rax
  000f3	75 07		 jne	 SHORT $LN13@PyErr_Synt

; 892  :             PyErr_Clear();

  000f5	e8 00 00 00 00	 call	 PyErr_Clear

; 893  :         else {

  000fa	eb 30		 jmp	 SHORT $LN12@PyErr_Synt
$LN13@PyErr_Synt:

; 894  :             if (_PyObject_SetAttrId(v, &PyId_filename, tmp))

  000fc	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00105	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  0010a	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_filename@?1??PyErr_SyntaxLocationEx@@9@9
  0010f	48 03 14 e8	 add	 rdx, QWORD PTR [rax+rbp*8]
  00113	4c 8b c3	 mov	 r8, rbx
  00116	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0011b	85 c0		 test	 eax, eax
  0011d	74 05		 je	 SHORT $LN11@PyErr_Synt

; 895  :                 PyErr_Clear();

  0011f	e8 00 00 00 00	 call	 PyErr_Clear
$LN11@PyErr_Synt:

; 896  :             Py_DECREF(tmp);

  00124	48 8b cb	 mov	 rcx, rbx
  00127	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@PyErr_Synt:

; 897  :         }
; 898  : 
; 899  :         tmp = PyErr_ProgramText(filename, lineno);

  0012c	41 8b d4	 mov	 edx, r12d
  0012f	48 8b cf	 mov	 rcx, rdi
  00132	e8 00 00 00 00	 call	 PyErr_ProgramText
  00137	48 8b d8	 mov	 rbx, rax

; 900  :         if (tmp) {

  0013a	48 85 c0	 test	 rax, rax
  0013d	74 30		 je	 SHORT $LN10@PyErr_Synt

; 901  :             if (_PyObject_SetAttrId(v, &PyId_text, tmp))

  0013f	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  00148	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_text@?1??PyErr_SyntaxLocationEx@@9@9
  0014d	4c 8b c0	 mov	 r8, rax
  00150	48 03 14 e9	 add	 rdx, QWORD PTR [rcx+rbp*8]
  00154	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  00159	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0015e	85 c0		 test	 eax, eax
  00160	74 05		 je	 SHORT $LN9@PyErr_Synt

; 902  :                 PyErr_Clear();

  00162	e8 00 00 00 00	 call	 PyErr_Clear
$LN9@PyErr_Synt:

; 903  :             Py_DECREF(tmp);

  00167	48 8b cb	 mov	 rcx, rbx
  0016a	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@PyErr_Synt:

; 904  :         }
; 905  :     }
; 906  :     if (_PyObject_SetAttrId(v, &PyId_offset, Py_None)) {

  0016f	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00178	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  0017d	41 8b d5	 mov	 edx, r13d
  00180	48 8b 34 e8	 mov	 rsi, QWORD PTR [rax+rbp*8]
  00184	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  0018b	48 03 d6	 add	 rdx, rsi
  0018e	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00193	85 c0		 test	 eax, eax
  00195	74 05		 je	 SHORT $LN8@PyErr_Synt

; 907  :         PyErr_Clear();

  00197	e8 00 00 00 00	 call	 PyErr_Clear
$LN8@PyErr_Synt:

; 908  :     }
; 909  :     if (exc != PyExc_SyntaxError) {

  0019c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyExc_SyntaxError
  001a3	48 39 44 24 78	 cmp	 QWORD PTR exc$[rsp], rax
  001a8	0f 84 89 00 00
	00		 je	 $LN24@PyErr_Synt

; 910  :         if (!_PyObject_HasAttrId(v, &PyId_msg)) {

  001ae	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  001b3	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:?PyId_msg@?1??PyErr_SyntaxLocationEx@@9@9
  001b8	48 03 fe	 add	 rdi, rsi
  001bb	48 8b d7	 mov	 rdx, rdi
  001be	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  001c3	85 c0		 test	 eax, eax
  001c5	75 3a		 jne	 SHORT $LN3@PyErr_Synt

; 911  :             tmp = PyObject_Str(v);

  001c7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  001cc	e8 00 00 00 00	 call	 PyObject_Str
  001d1	48 8b d8	 mov	 rbx, rax

; 912  :             if (tmp) {

  001d4	48 85 c0	 test	 rax, rax
  001d7	74 23		 je	 SHORT $LN5@PyErr_Synt

; 913  :                 if (_PyObject_SetAttrId(v, &PyId_msg, tmp))

  001d9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  001de	4c 8b c0	 mov	 r8, rax
  001e1	48 8b d7	 mov	 rdx, rdi
  001e4	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001e9	85 c0		 test	 eax, eax
  001eb	74 05		 je	 SHORT $LN4@PyErr_Synt

; 914  :                     PyErr_Clear();

  001ed	e8 00 00 00 00	 call	 PyErr_Clear
$LN4@PyErr_Synt:

; 915  :                 Py_DECREF(tmp);

  001f2	48 8b cb	 mov	 rcx, rbx
  001f5	e8 00 00 00 00	 call	 _Py_DecRef

; 916  :             } else {

  001fa	eb 05		 jmp	 SHORT $LN3@PyErr_Synt
$LN5@PyErr_Synt:

; 917  :                 PyErr_Clear();

  001fc	e8 00 00 00 00	 call	 PyErr_Clear
$LN3@PyErr_Synt:

; 918  :             }
; 919  :         }
; 920  :         if (!_PyObject_HasAttrId(v, &PyId_print_file_and_line)) {

  00201	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  00206	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:?PyId_print_file_and_line@?1??PyErr_SyntaxLocationEx@@9@9
  0020b	48 03 de	 add	 rbx, rsi
  0020e	48 8b d3	 mov	 rdx, rbx
  00211	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00216	85 c0		 test	 eax, eax
  00218	75 1d		 jne	 SHORT $LN24@PyErr_Synt

; 921  :             if (_PyObject_SetAttrId(v, &PyId_print_file_and_line,
; 922  :                                     Py_None))

  0021a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  0021f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  00226	48 8b d3	 mov	 rdx, rbx
  00229	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0022e	85 c0		 test	 eax, eax
  00230	74 05		 je	 SHORT $LN24@PyErr_Synt

; 923  :                 PyErr_Clear();

  00232	e8 00 00 00 00	 call	 PyErr_Clear
$LN24@PyErr_Synt:

; 924  :         }
; 925  :     }
; 926  :     PyErr_Restore(exc, v, tb);

  00237	4c 8b 44 24 20	 mov	 r8, QWORD PTR tb$[rsp]
  0023c	48 8b 54 24 60	 mov	 rdx, QWORD PTR v$[rsp]
  00241	48 8b 4c 24 78	 mov	 rcx, QWORD PTR exc$[rsp]
  00246	e8 00 00 00 00	 call	 PyErr_Restore

; 927  : }

  0024b	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00250	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00254	41 5d		 pop	 r13
  00256	41 5c		 pop	 r12
  00258	5f		 pop	 rdi
  00259	5e		 pop	 rsi
  0025a	5d		 pop	 rbp
  0025b	c3		 ret	 0
PyErr_SyntaxLocationEx ENDP
_TEXT	ENDS
PUBLIC	PyErr_SyntaxLocation
; Function compile flags: /Ogtpy
;	COMDAT PyErr_SyntaxLocation
_TEXT	SEGMENT
filename$ = 8
lineno$ = 16
PyErr_SyntaxLocation PROC				; COMDAT

; 847  :     PyErr_SyntaxLocationEx(filename, lineno, -1);

  00000	41 83 c8 ff	 or	 r8d, -1

; 848  : }

  00004	e9 00 00 00 00	 jmp	 PyErr_SyntaxLocationEx
PyErr_SyntaxLocation ENDP
_TEXT	ENDS
END
