; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05NMLJCBBB@cmath?$AA@			; `string'
PUBLIC	??_C@_04FJHINJAO@tanh?$AA@			; `string'
PUBLIC	??_C@_03IIINPABG@tan?$AA@			; `string'
PUBLIC	??_C@_04EIAKFFMI@sqrt?$AA@			; `string'
PUBLIC	??_C@_04COOMCNPB@sinh?$AA@			; `string'
PUBLIC	??_C@_03BLEJJJBH@sin?$AA@			; `string'
PUBLIC	??_C@_04LHPFHFPH@rect?$AA@			; `string'
PUBLIC	??_C@_05HLJBEBNJ@polar?$AA@			; `string'
PUBLIC	??_C@_05CBPKLGJM@phase?$AA@			; `string'
PUBLIC	??_C@_05HGHHAHAP@log10?$AA@			; `string'
PUBLIC	??_C@_03MGHMBJCF@log?$AA@			; `string'
PUBLIC	??_C@_05LGCGPNNP@isnan?$AA@			; `string'
PUBLIC	??_C@_05OIHEAIFD@isinf?$AA@			; `string'
PUBLIC	??_C@_08CHCKEDFL@isfinite?$AA@			; `string'
PUBLIC	??_C@_03KHJOGHMM@exp?$AA@			; `string'
PUBLIC	??_C@_04HPJJNFIM@cosh?$AA@			; `string'
PUBLIC	??_C@_03LALBNOCG@cos?$AA@			; `string'
PUBLIC	??_C@_05ONDAFDEP@atanh?$AA@			; `string'
PUBLIC	??_C@_04MLLJIGOK@atan?$AA@			; `string'
PUBLIC	??_C@_05JKKEKHLA@asinh?$AA@			; `string'
PUBLIC	??_C@_04FIHNOPOL@asin?$AA@			; `string'
PUBLIC	??_C@_05MLNBFPMN@acosh?$AA@			; `string'
PUBLIC	??_C@_04PDIFKINK@acos?$AA@			; `string'
;	COMDAT ??_C@_05NMLJCBBB@cmath?$AA@
CONST	SEGMENT
??_C@_05NMLJCBBB@cmath?$AA@ DB 'cmath', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FJHINJAO@tanh?$AA@
CONST	SEGMENT
??_C@_04FJHINJAO@tanh?$AA@ DB 'tanh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IIINPABG@tan?$AA@
CONST	SEGMENT
??_C@_03IIINPABG@tan?$AA@ DB 'tan', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EIAKFFMI@sqrt?$AA@
CONST	SEGMENT
??_C@_04EIAKFFMI@sqrt?$AA@ DB 'sqrt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04COOMCNPB@sinh?$AA@
CONST	SEGMENT
??_C@_04COOMCNPB@sinh?$AA@ DB 'sinh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BLEJJJBH@sin?$AA@
CONST	SEGMENT
??_C@_03BLEJJJBH@sin?$AA@ DB 'sin', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LHPFHFPH@rect?$AA@
CONST	SEGMENT
??_C@_04LHPFHFPH@rect?$AA@ DB 'rect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HLJBEBNJ@polar?$AA@
CONST	SEGMENT
??_C@_05HLJBEBNJ@polar?$AA@ DB 'polar', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CBPKLGJM@phase?$AA@
CONST	SEGMENT
??_C@_05CBPKLGJM@phase?$AA@ DB 'phase', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HGHHAHAP@log10?$AA@
CONST	SEGMENT
??_C@_05HGHHAHAP@log10?$AA@ DB 'log10', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGHMBJCF@log?$AA@
CONST	SEGMENT
??_C@_03MGHMBJCF@log?$AA@ DB 'log', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LGCGPNNP@isnan?$AA@
CONST	SEGMENT
??_C@_05LGCGPNNP@isnan?$AA@ DB 'isnan', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OIHEAIFD@isinf?$AA@
CONST	SEGMENT
??_C@_05OIHEAIFD@isinf?$AA@ DB 'isinf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CHCKEDFL@isfinite?$AA@
CONST	SEGMENT
??_C@_08CHCKEDFL@isfinite?$AA@ DB 'isfinite', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHJOGHMM@exp?$AA@
CONST	SEGMENT
??_C@_03KHJOGHMM@exp?$AA@ DB 'exp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPJJNFIM@cosh?$AA@
CONST	SEGMENT
??_C@_04HPJJNFIM@cosh?$AA@ DB 'cosh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LALBNOCG@cos?$AA@
CONST	SEGMENT
??_C@_03LALBNOCG@cos?$AA@ DB 'cos', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05ONDAFDEP@atanh?$AA@
CONST	SEGMENT
??_C@_05ONDAFDEP@atanh?$AA@ DB 'atanh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLLJIGOK@atan?$AA@
CONST	SEGMENT
??_C@_04MLLJIGOK@atan?$AA@ DB 'atan', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JKKEKHLA@asinh?$AA@
CONST	SEGMENT
??_C@_05JKKEKHLA@asinh?$AA@ DB 'asinh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FIHNOPOL@asin?$AA@
CONST	SEGMENT
??_C@_04FIHNOPOL@asin?$AA@ DB 'asin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLNBFPMN@acosh?$AA@
CONST	SEGMENT
??_C@_05MLNBFPMN@acosh?$AA@ DB 'acosh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PDIFKINK@acos?$AA@
CONST	SEGMENT
??_C@_04PDIFKINK@acos?$AA@ DB 'acos', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
c_acos_doc DB	'acos(x)', 0aH, 0aH, 'Return the arc cosine of x.', 00H
	ORG $+3
c_acosh_doc DB	'acosh(x)', 0aH, 0aH, 'Return the hyperbolic arccosine of'
	DB	' x.', 00H
c_asin_doc DB	'asin(x)', 0aH, 0aH, 'Return the arc sine of x.', 00H
	ORG $+5
c_asinh_doc DB	'asinh(x)', 0aH, 0aH, 'Return the hyperbolic arc sine of '
	DB	'x.', 00H
	ORG $+1
c_atan_doc DB	'atan(x)', 0aH, 0aH, 'Return the arc tangent of x.', 00H
	ORG $+2
c_atanh_doc DB	'atanh(x)', 0aH, 0aH, 'Return the hyperbolic arc tangent '
	DB	'of x.', 00H
	ORG $+6
c_cos_doc DB	'cos(x)', 0aH, 0aH, 'Return the cosine of x.', 00H
c_cosh_doc DB	'cosh(x)', 0aH, 0aH, 'Return the hyperbolic cosine of x.', 00H
	ORG $+4
c_exp_doc DB	'exp(x)', 0aH, 0aH, 'Return the exponential value e**x.', 00H
	ORG $+5
c_log10_doc DB	'log10(x)', 0aH, 0aH, 'Return the base-10 logarithm of x.'
	DB	00H
	ORG $+3
c_sin_doc DB	'sin(x)', 0aH, 0aH, 'Return the sine of x.', 00H
	ORG $+2
c_sinh_doc DB	'sinh(x)', 0aH, 0aH, 'Return the hyperbolic sine of x.', 00H
	ORG $+6
c_sqrt_doc DB	'sqrt(x)', 0aH, 0aH, 'Return the square root of x.', 00H
	ORG $+2
c_tan_doc DB	'tan(x)', 0aH, 0aH, 'Return the tangent of x.', 00H
	ORG $+7
c_tanh_doc DB	'tanh(x)', 0aH, 0aH, 'Return the hyperbolic tangent of x.'
	DB	00H
	ORG $+3
cmath_log_doc DB 'log(x[, base]) -> the logarithm of x to the given base.'
	DB	0aH, 'If the base not specified, returns the natural logarithm'
	DB	' (base e) of x.', 00H
cmath_phase_doc DB 'phase(z) -> float', 0aH, 0aH, 'Return argument, also '
	DB	'known as the phase angle, of a complex.', 00H
	ORG $+15
cmath_polar_doc DB 'polar(z) -> r: float, phi: float', 0aH, 0aH, 'Convert'
	DB	' a complex from rectangular coordinates to polar coordinates.'
	DB	' r is', 0aH, 'the distance from 0 and phi the phase angle.', 00H
	ORG $+7
cmath_rect_doc DB 'rect(r, phi) -> z: complex', 0aH, 0aH, 'Convert from p'
	DB	'olar coordinates to rectangular coordinates.', 00H
	ORG $+9
cmath_isfinite_doc DB 'isfinite(z) -> bool', 0aH, 'Return True if both th'
	DB	'e real and imaginary parts of z are finite, else False.', 00H
	ORG $+14
cmath_isnan_doc DB 'isnan(z) -> bool', 0aH, 'Checks if the real or imagin'
	DB	'ary part of z not a number (NaN)', 00H
	ORG $+2
cmath_isinf_doc DB 'isinf(z) -> bool', 0aH, 'Checks if the real or imagin'
	DB	'ary part of z is infinite.', 00H
	ORG $+8
module_doc DB	'This module is always available. It provides access to m'
	DB	'athematical', 0aH, 'functions for complex numbers.', 00H
	ORG $+13
cmath_methods DQ FLAT:??_C@_04PDIFKINK@acos?$AA@
	DQ	FLAT:cmath_acos
	DD	01H
	ORG $+4
	DQ	FLAT:c_acos_doc
	DQ	FLAT:??_C@_05MLNBFPMN@acosh?$AA@
	DQ	FLAT:cmath_acosh
	DD	01H
	ORG $+4
	DQ	FLAT:c_acosh_doc
	DQ	FLAT:??_C@_04FIHNOPOL@asin?$AA@
	DQ	FLAT:cmath_asin
	DD	01H
	ORG $+4
	DQ	FLAT:c_asin_doc
	DQ	FLAT:??_C@_05JKKEKHLA@asinh?$AA@
	DQ	FLAT:cmath_asinh
	DD	01H
	ORG $+4
	DQ	FLAT:c_asinh_doc
	DQ	FLAT:??_C@_04MLLJIGOK@atan?$AA@
	DQ	FLAT:cmath_atan
	DD	01H
	ORG $+4
	DQ	FLAT:c_atan_doc
	DQ	FLAT:??_C@_05ONDAFDEP@atanh?$AA@
	DQ	FLAT:cmath_atanh
	DD	01H
	ORG $+4
	DQ	FLAT:c_atanh_doc
	DQ	FLAT:??_C@_03LALBNOCG@cos?$AA@
	DQ	FLAT:cmath_cos
	DD	01H
	ORG $+4
	DQ	FLAT:c_cos_doc
	DQ	FLAT:??_C@_04HPJJNFIM@cosh?$AA@
	DQ	FLAT:cmath_cosh
	DD	01H
	ORG $+4
	DQ	FLAT:c_cosh_doc
	DQ	FLAT:??_C@_03KHJOGHMM@exp?$AA@
	DQ	FLAT:cmath_exp
	DD	01H
	ORG $+4
	DQ	FLAT:c_exp_doc
	DQ	FLAT:??_C@_08CHCKEDFL@isfinite?$AA@
	DQ	FLAT:cmath_isfinite
	DD	01H
	ORG $+4
	DQ	FLAT:cmath_isfinite_doc
	DQ	FLAT:??_C@_05OIHEAIFD@isinf?$AA@
	DQ	FLAT:cmath_isinf
	DD	01H
	ORG $+4
	DQ	FLAT:cmath_isinf_doc
	DQ	FLAT:??_C@_05LGCGPNNP@isnan?$AA@
	DQ	FLAT:cmath_isnan
	DD	01H
	ORG $+4
	DQ	FLAT:cmath_isnan_doc
	DQ	FLAT:??_C@_03MGHMBJCF@log?$AA@
	DQ	FLAT:cmath_log
	DD	01H
	ORG $+4
	DQ	FLAT:cmath_log_doc
	DQ	FLAT:??_C@_05HGHHAHAP@log10?$AA@
	DQ	FLAT:cmath_log10
	DD	01H
	ORG $+4
	DQ	FLAT:c_log10_doc
	DQ	FLAT:??_C@_05CBPKLGJM@phase?$AA@
	DQ	FLAT:cmath_phase
	DD	01H
	ORG $+4
	DQ	FLAT:cmath_phase_doc
	DQ	FLAT:??_C@_05HLJBEBNJ@polar?$AA@
	DQ	FLAT:cmath_polar
	DD	01H
	ORG $+4
	DQ	FLAT:cmath_polar_doc
	DQ	FLAT:??_C@_04LHPFHFPH@rect?$AA@
	DQ	FLAT:cmath_rect
	DD	01H
	ORG $+4
	DQ	FLAT:cmath_rect_doc
	DQ	FLAT:??_C@_03BLEJJJBH@sin?$AA@
	DQ	FLAT:cmath_sin
	DD	01H
	ORG $+4
	DQ	FLAT:c_sin_doc
	DQ	FLAT:??_C@_04COOMCNPB@sinh?$AA@
	DQ	FLAT:cmath_sinh
	DD	01H
	ORG $+4
	DQ	FLAT:c_sinh_doc
	DQ	FLAT:??_C@_04EIAKFFMI@sqrt?$AA@
	DQ	FLAT:cmath_sqrt
	DD	01H
	ORG $+4
	DQ	FLAT:c_sqrt_doc
	DQ	FLAT:??_C@_03IIINPABG@tan?$AA@
	DQ	FLAT:cmath_tan
	DD	01H
	ORG $+4
	DQ	FLAT:c_tan_doc
	DQ	FLAT:??_C@_04FJHINJAO@tanh?$AA@
	DQ	FLAT:cmath_tanh
	DD	01H
	ORG $+4
	DQ	FLAT:c_tanh_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
cmathmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_05NMLJCBBB@cmath?$AA@
	DQ	FLAT:module_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:cmath_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
EXTRN	__imp__hypot:PROC
EXTRN	_fltused:DWORD
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT hypot
_TEXT	SEGMENT
_X$ = 8
_Y$ = 16
hypot	PROC						; COMDAT

; 163  :     return _hypot(_X, _Y);
; 164  : }

  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__hypot
hypot	ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@0000000000000000
EXTRN	__imp__isnan:PROC
EXTRN	__imp__copysign:PROC
EXTRN	__imp__finite:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\cmathmodule.c
pdata	SEGMENT
$pdata$special_type DD imagerel special_type
	DD	imagerel special_type+245
	DD	imagerel $unwind$special_type
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$special_type DD 030901H
	DD	026809H
	DD	06204H
xdata	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT special_type
_TEXT	SEGMENT
d$ = 64
special_type PROC					; COMDAT

; 77   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	0f 29 74 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm6
  00009	66 0f 28 f0	 movapd	 xmm6, xmm0

; 78   :     if (Py_IS_FINITE(d)) {

  0000d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00013	85 c0		 test	 eax, eax
  00015	0f 84 84 00 00
	00		 je	 $LN4@special_ty

; 79   :         if (d != 0) {

  0001b	66 0f 2e 35 00
	00 00 00	 ucomisd xmm6, QWORD PTR __real@0000000000000000
  00023	7a 3e		 jp	 SHORT $LN13@special_ty
  00025	75 3c		 jne	 SHORT $LN13@special_ty

; 84   :         }
; 85   :         else {
; 86   :             if (copysign(1., d) == 1.)

  00027	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  0002f	66 0f 28 ce	 movapd	 xmm1, xmm6
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  00039	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@3ff0000000000000
  00041	7a 11		 jp	 SHORT $LN5@special_ty
  00043	75 0f		 jne	 SHORT $LN5@special_ty

; 87   :                 return ST_PZERO;

  00045	b8 03 00 00 00	 mov	 eax, 3

; 98   : }

  0004a	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  0004f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00053	c3		 ret	 0
$LN5@special_ty:

; 88   :             else
; 89   :                 return ST_NZERO;

  00054	b8 02 00 00 00	 mov	 eax, 2

; 98   : }

  00059	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  0005e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00062	c3		 ret	 0
$LN13@special_ty:

; 80   :             if (copysign(1., d) == 1.)

  00063	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  0006b	66 0f 28 ce	 movapd	 xmm1, xmm6
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  00075	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@3ff0000000000000
  0007d	7a 11		 jp	 SHORT $LN8@special_ty
  0007f	75 0f		 jne	 SHORT $LN8@special_ty

; 81   :                 return ST_POS;

  00081	b8 04 00 00 00	 mov	 eax, 4

; 98   : }

  00086	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  0008b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008f	c3		 ret	 0
$LN8@special_ty:

; 82   :             else
; 83   :                 return ST_NEG;

  00090	b8 01 00 00 00	 mov	 eax, 1

; 98   : }

  00095	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
$LN4@special_ty:

; 90   :         }
; 91   :     }
; 92   :     if (Py_IS_NAN(d))

  0009f	66 0f 28 c6	 movapd	 xmm0, xmm6
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  000a9	85 c0		 test	 eax, eax
  000ab	74 0f		 je	 SHORT $LN3@special_ty

; 93   :         return ST_NAN;

  000ad	b8 06 00 00 00	 mov	 eax, 6

; 98   : }

  000b2	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  000b7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bb	c3		 ret	 0
$LN3@special_ty:

; 94   :     if (copysign(1., d) == 1.)

  000bc	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  000c4	66 0f 28 ce	 movapd	 xmm1, xmm6
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  000ce	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@3ff0000000000000
  000d6	7a 11		 jp	 SHORT $LN2@special_ty
  000d8	75 0f		 jne	 SHORT $LN2@special_ty

; 95   :         return ST_PINF;

  000da	b8 05 00 00 00	 mov	 eax, 5

; 98   : }

  000df	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  000e4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e8	c3		 ret	 0
$LN2@special_ty:

; 96   :     else
; 97   :         return ST_NINF;

  000e9	33 c0		 xor	 eax, eax

; 98   : }

  000eb	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  000f0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f4	c3		 ret	 0
special_type ENDP
_TEXT	ENDS
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@4002d97c7f3321d2
PUBLIC	__real@3fe921fb54442d18
EXTRN	__imp__HUGE:QWORD
EXTRN	atan2:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$c_atan2 DD imagerel c_atan2
	DD	imagerel c_atan2+377
	DD	imagerel $unwind$c_atan2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_atan2 DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@4002d97c7f3321d2
CONST	SEGMENT
__real@4002d97c7f3321d2 DQ 04002d97c7f3321d2r	; 2.35619
CONST	ENDS
;	COMDAT __real@3fe921fb54442d18
CONST	SEGMENT
__real@3fe921fb54442d18 DQ 03fe921fb54442d18r	; 0.785398
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT c_atan2
_TEXT	SEGMENT
z$ = 48
c_atan2	PROC						; COMDAT

; 272  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 273  :     if (Py_IS_NAN(z.real) || Py_IS_NAN(z.imag))

  00006	f2 0f 10 01	 movsdx	 xmm0, QWORD PTR [rcx]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00013	85 c0		 test	 eax, eax
  00015	0f 85 45 01 00
	00		 jne	 $LN10@c_atan2
  0001b	f2 0f 10 43 08	 movsdx	 xmm0, QWORD PTR [rbx+8]
  00020	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00026	85 c0		 test	 eax, eax
  00028	0f 85 32 01 00
	00		 jne	 $LN10@c_atan2

; 275  :     if (Py_IS_INFINITY(z.imag)) {

  0002e	f2 0f 10 43 08	 movsdx	 xmm0, QWORD PTR [rbx+8]
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00039	85 c0		 test	 eax, eax
  0003b	0f 85 98 00 00
	00		 jne	 $LN9@c_atan2
  00041	f2 0f 10 43 08	 movsdx	 xmm0, QWORD PTR [rbx+8]
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  0004c	85 c0		 test	 eax, eax
  0004e	0f 85 85 00 00
	00		 jne	 $LN9@c_atan2

; 276  :         if (Py_IS_INFINITY(z.real)) {

  00054	f2 0f 10 03	 movsdx	 xmm0, QWORD PTR [rbx]
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0005e	85 c0		 test	 eax, eax
  00060	75 5e		 jne	 SHORT $LN6@c_atan2
  00062	f2 0f 10 03	 movsdx	 xmm0, QWORD PTR [rbx]
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  0006c	85 c0		 test	 eax, eax
  0006e	75 50		 jne	 SHORT $LN6@c_atan2

; 277  :             if (copysign(1., z.real) == 1.)

  00070	f2 0f 10 0b	 movsdx	 xmm1, QWORD PTR [rbx]
  00074	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  00082	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@3ff0000000000000
  0008a	7a 1b		 jp	 SHORT $LN7@c_atan2
  0008c	75 19		 jne	 SHORT $LN7@c_atan2

; 278  :                 /* atan2(+-inf, +inf) == +-pi/4 */
; 279  :                 return copysign(0.25*Py_MATH_PI, z.imag);

  0008e	f2 0f 10 4b 08	 movsdx	 xmm1, QWORD PTR [rbx+8]
  00093	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3fe921fb54442d18

; 296  : }

  0009b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009f	5b		 pop	 rbx
  000a0	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__copysign
$LN7@c_atan2:

; 280  :             else
; 281  :                 /* atan2(+-inf, -inf) == +-pi*3/4 */
; 282  :                 return copysign(0.75*Py_MATH_PI, z.imag);

  000a7	f2 0f 10 4b 08	 movsdx	 xmm1, QWORD PTR [rbx+8]
  000ac	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@4002d97c7f3321d2

; 296  : }

  000b4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b8	5b		 pop	 rbx
  000b9	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__copysign
$LN6@c_atan2:

; 283  :         }
; 284  :         /* atan2(+-inf, x) == +-pi/2 for finite x */
; 285  :         return copysign(0.5*Py_MATH_PI, z.imag);

  000c0	f2 0f 10 4b 08	 movsdx	 xmm1, QWORD PTR [rbx+8]
  000c5	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff921fb54442d18

; 296  : }

  000cd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d1	5b		 pop	 rbx
  000d2	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__copysign
$LN9@c_atan2:

; 286  :     }
; 287  :     if (Py_IS_INFINITY(z.real) || z.imag == 0.) {

  000d9	f2 0f 10 03	 movsdx	 xmm0, QWORD PTR [rbx]
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  000e3	85 c0		 test	 eax, eax
  000e5	75 0e		 jne	 SHORT $LN3@c_atan2
  000e7	f2 0f 10 03	 movsdx	 xmm0, QWORD PTR [rbx]
  000eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  000f1	85 c0		 test	 eax, eax
  000f3	74 11		 je	 SHORT $LN4@c_atan2
$LN3@c_atan2:
  000f5	f2 0f 10 43 08	 movsdx	 xmm0, QWORD PTR [rbx+8]
  000fa	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00102	7a 4e		 jp	 SHORT $LN1@c_atan2
  00104	75 4c		 jne	 SHORT $LN1@c_atan2
$LN4@c_atan2:

; 288  :         if (copysign(1., z.real) == 1.)

  00106	f2 0f 10 0b	 movsdx	 xmm1, QWORD PTR [rbx]
  0010a	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  00112	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  00118	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@3ff0000000000000
  00120	7a 17		 jp	 SHORT $LN2@c_atan2
  00122	75 15		 jne	 SHORT $LN2@c_atan2

; 289  :             /* atan2(+-y, +inf) = atan2(+-0, +x) = +-0. */
; 290  :             return copysign(0., z.imag);

  00124	f2 0f 10 4b 08	 movsdx	 xmm1, QWORD PTR [rbx+8]
  00129	66 0f 57 c0	 xorpd	 xmm0, xmm0

; 296  : }

  0012d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00131	5b		 pop	 rbx
  00132	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__copysign
$LN2@c_atan2:

; 291  :         else
; 292  :             /* atan2(+-y, -inf) = atan2(+-0., -x) = +-pi. */
; 293  :             return copysign(Py_MATH_PI, z.imag);

  00139	f2 0f 10 4b 08	 movsdx	 xmm1, QWORD PTR [rbx+8]
  0013e	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@400921fb54442d18

; 296  : }

  00146	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0014a	5b		 pop	 rbx
  0014b	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__copysign
$LN1@c_atan2:

; 294  :     }
; 295  :     return atan2(z.imag, z.real);

  00152	f2 0f 10 0b	 movsdx	 xmm1, QWORD PTR [rbx]

; 296  : }

  00156	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0015a	5b		 pop	 rbx
  0015b	e9 00 00 00 00	 jmp	 atan2
$LN10@c_atan2:

; 274  :         return Py_NAN;

  00160	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  00167	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0016b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@0000000000000000

; 296  : }

  00173	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00177	5b		 pop	 rbx
  00178	c3		 ret	 0
c_atan2	ENDP
_TEXT	ENDS
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@c000000000000000
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__mask@@NegDouble@
PUBLIC	__real@4000000000000000
PUBLIC	__real@0010000000000000
PUBLIC	__mask@@AbsDouble@
PUBLIC	__real@7fcfffffffffffff
PUBLIC	$T21071
PUBLIC	$T21070
PUBLIC	$T21069
EXTRN	_Py_log1p:PROC
EXTRN	__imp__errno:PROC
EXTRN	_Py_c_neg:PROC
EXTRN	sqrt:PROC
EXTRN	log:PROC
_BSS	SEGMENT
atanh_special_values DB 0310H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
pdata	SEGMENT
$pdata$c_atanh DD imagerel c_atanh
	DD	imagerel c_atanh+56
	DD	imagerel $unwind$c_atanh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$c_atanh DD imagerel c_atanh+56
	DD	imagerel c_atanh+203
	DD	imagerel $chain$1$c_atanh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$c_atanh DD imagerel c_atanh+203
	DD	imagerel c_atanh+211
	DD	imagerel $chain$3$c_atanh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$c_atanh DD imagerel c_atanh+211
	DD	imagerel c_atanh+764
	DD	imagerel $chain$6$c_atanh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$c_atanh DD imagerel c_atanh+764
	DD	imagerel c_atanh+870
	DD	imagerel $chain$9$c_atanh
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$c_atanh DD 020821H
	DD	0183408H
	DD	imagerel c_atanh
	DD	imagerel c_atanh+56
	DD	imagerel $unwind$c_atanh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$c_atanh DD 061c21H
	DD	06a81cH
	DD	088816H
	DD	097808H
	DD	imagerel c_atanh+203
	DD	imagerel c_atanh+211
	DD	imagerel $chain$3$c_atanh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$c_atanh DD 040021H
	DD	079800H
	DD	0a6800H
	DD	imagerel c_atanh
	DD	imagerel c_atanh+56
	DD	imagerel $unwind$c_atanh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$c_atanh DD 041221H
	DD	079812H
	DD	0a6808H
	DD	imagerel c_atanh
	DD	imagerel c_atanh+56
	DD	imagerel $unwind$c_atanh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_atanh DD 050d01H
	DD	019640dH
	DD	016010dH
	DD	07006H
xdata	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __mask@@NegDouble@
CONST	SEGMENT
__mask@@NegDouble@ DB 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@0010000000000000
CONST	SEGMENT
__real@0010000000000000 DQ 00010000000000000r	; 2.22507e-308
CONST	ENDS
;	COMDAT __mask@@AbsDouble@
CONST	SEGMENT
__mask@@AbsDouble@ DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@7fcfffffffffffff
CONST	SEGMENT
__real@7fcfffffffffffff DQ 07fcfffffffffffffr	; 4.49423e+307
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cmathmodule.c
CONST	ENDS
;	COMDAT c_atanh
_TEXT	SEGMENT
$T21071 = 32
$T21070 = 32
$T21069 = 32
r$ = 32
$T21066 = 48
$T21067 = 64
$T21068 = 80
$T21065 = 192
z$ = 200
c_atanh	PROC						; COMDAT

; 308  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H

; 309  :     Py_complex r;
; 310  :     double ay, h;
; 311  : 
; 312  :     SPECIAL_VALUE(z, atanh_special_values);

  0000d	f2 0f 10 02	 movsdx	 xmm0, QWORD PTR [rdx]
  00011	48 8b fa	 mov	 rdi, rdx
  00014	48 8b f1	 mov	 rsi, rcx
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 d7 02 00
	00		 je	 $LN9@c_atanh
  00025	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00030	85 c0		 test	 eax, eax
  00032	0f 84 c4 02 00
	00		 je	 $LN9@c_atanh

; 313  : 
; 314  :     /* Reduce to case where z.real >= 0., using atanh(z) = -atanh(-z). */
; 315  :     if (z.real < 0.) {

  00038	0f 29 b4 24 a0
	00 00 00	 movaps	 XMMWORD PTR [rsp+160], xmm6
  00040	f2 0f 10 37	 movsdx	 xmm6, QWORD PTR [rdi]
  00044	44 0f 29 4c 24
	70		 movaps	 XMMWORD PTR [rsp+112], xmm9
  0004a	66 45 0f 57 c9	 xorpd	 xmm9, xmm9
  0004f	66 44 0f 2f ce	 comisd	 xmm9, xmm6
  00054	76 75		 jbe	 SHORT $LN8@c_atanh

; 316  :         return c_neg(c_atanh(c_neg(z)));

  00056	0f 10 07	 movups	 xmm0, XMMWORD PTR [rdi]
  00059	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T21069[rsp]
  0005e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T21066[rsp]
  00063	0f 29 44 24 20	 movaps	 XMMWORD PTR $T21069[rsp], xmm0
  00068	e8 00 00 00 00	 call	 _Py_c_neg
  0006d	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T21070[rsp]
  00072	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T21067[rsp]
  00077	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0007a	0f 29 44 24 20	 movaps	 XMMWORD PTR $T21070[rsp], xmm0
  0007f	e8 00 00 00 00	 call	 c_atanh
  00084	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T21071[rsp]
  00089	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T21068[rsp]
  0008e	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00091	0f 29 44 24 20	 movaps	 XMMWORD PTR $T21071[rsp], xmm0
  00096	e8 00 00 00 00	 call	 _Py_c_neg
  0009b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0009e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000a2	48 89 0e	 mov	 QWORD PTR [rsi], rcx
  000a5	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
  000a9	48 8b c6	 mov	 rax, rsi
$LN18@c_atanh:
  000ac	0f 28 b4 24 a0
	00 00 00	 movaps	 xmm6, XMMWORD PTR [rsp+160]
  000b4	44 0f 28 4c 24
	70		 movaps	 xmm9, XMMWORD PTR [rsp+112]

; 351  : }

  000ba	48 8b b4 24 c8
	00 00 00	 mov	 rsi, QWORD PTR [rsp+200]
  000c2	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000c9	5f		 pop	 rdi
  000ca	c3		 ret	 0
$LN8@c_atanh:

; 317  :     }
; 318  : 
; 319  :     ay = fabs(z.imag);
; 320  :     if (z.real > CM_SQRT_LARGE_DOUBLE || ay > CM_SQRT_LARGE_DOUBLE) {

  000cb	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@7fcfffffffffffff
  000d3	0f 29 bc 24 90
	00 00 00	 movaps	 XMMWORD PTR [rsp+144], xmm7
  000db	f2 0f 10 7f 08	 movsdx	 xmm7, QWORD PTR [rdi+8]
  000e0	44 0f 29 84 24
	80 00 00 00	 movaps	 XMMWORD PTR [rsp+128], xmm8
  000e9	44 0f 29 54 24
	60		 movaps	 XMMWORD PTR [rsp+96], xmm10
  000ef	66 44 0f 28 c7	 movapd	 xmm8, xmm7
  000f4	66 44 0f 54 05
	00 00 00 00	 andpd	 xmm8, QWORD PTR __mask@@AbsDouble@
  000fd	e8 00 00 00 00	 call	 sqrt
  00102	66 0f 2f f0	 comisd	 xmm6, xmm0
  00106	0f 87 53 01 00
	00		 ja	 $LN6@c_atanh
  0010c	66 44 0f 2f c0	 comisd	 xmm8, xmm0
  00111	0f 87 48 01 00
	00		 ja	 $LN6@c_atanh

; 334  :     } else if (z.real == 1. && ay < CM_SQRT_DBL_MIN) {

  00117	f2 44 0f 10 15
	00 00 00 00	 movsdx	 xmm10, QWORD PTR __real@3ff0000000000000
  00120	66 41 0f 2e f2	 ucomisd xmm6, xmm10
  00125	0f 8a c3 00 00
	00		 jp	 $LN4@c_atanh
  0012b	0f 85 bd 00 00
	00		 jne	 $LN4@c_atanh
  00131	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@0010000000000000
  00139	e8 00 00 00 00	 call	 sqrt
  0013e	66 41 0f 2f c0	 comisd	 xmm0, xmm8
  00143	0f 86 a5 00 00
	00		 jbe	 $LN4@c_atanh

; 335  :         /* C99 standard says:  atanh(1+/-0.) should be inf +/- 0i */
; 336  :         if (ay == 0.) {

  00149	66 45 0f 2e c1	 ucomisd xmm8, xmm9
  0014e	7a 2a		 jp	 SHORT $LN3@c_atanh
  00150	75 28		 jne	 SHORT $LN3@c_atanh

; 337  :             r.real = INF;

  00152	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE

; 338  :             r.imag = z.imag;

  00159	f2 0f 11 7c 24
	28		 movsdx	 QWORD PTR r$[rsp+8], xmm7
  0015f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00163	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR r$[rsp], xmm0

; 339  :             errno = EDOM;

  00169	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0016f	c7 00 21 00 00
	00		 mov	 DWORD PTR [rax], 33	; 00000021H

; 340  :         } else {

  00175	e9 52 01 00 00	 jmp	 $LN1@c_atanh
$LN3@c_atanh:

; 341  :             r.real = -log(sqrt(ay)/sqrt(hypot(ay, 2.)));

  0017a	66 41 0f 28 c0	 movapd	 xmm0, xmm8
  0017f	e8 00 00 00 00	 call	 sqrt
  00184	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@4000000000000000
  0018c	66 0f 28 f0	 movapd	 xmm6, xmm0
  00190	66 41 0f 28 c0	 movapd	 xmm0, xmm8
  00195	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__hypot
  0019b	e8 00 00 00 00	 call	 sqrt
  001a0	f2 0f 5e f0	 divsd	 xmm6, xmm0
  001a4	66 0f 28 c6	 movapd	 xmm0, xmm6
  001a8	e8 00 00 00 00	 call	 log

; 342  :             r.imag = copysign(atan2(2., -ay)/2, z.imag);

  001ad	66 44 0f 57 05
	00 00 00 00	 xorpd	 xmm8, QWORD PTR __mask@@NegDouble@
  001b6	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@
  001be	66 41 0f 28 c8	 movapd	 xmm1, xmm8
  001c3	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR r$[rsp], xmm0
  001c9	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@4000000000000000
  001d1	e8 00 00 00 00	 call	 atan2
  001d6	f2 0f 10 4f 08	 movsdx	 xmm1, QWORD PTR [rdi+8]
  001db	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  001e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign

; 343  :             errno = 0;
; 344  :         }
; 345  :     } else {

  001e9	e9 cc 00 00 00	 jmp	 $LN19@c_atanh
$LN4@c_atanh:

; 346  :         r.real = m_log1p(4.*z.real/((1-z.real)*(1-z.real) + ay*ay))/4.;

  001ee	66 41 0f 28 c2	 movapd	 xmm0, xmm10
  001f3	f2 45 0f 59 c0	 mulsd	 xmm8, xmm8
  001f8	f2 0f 5c c6	 subsd	 xmm0, xmm6
  001fc	f2 0f 59 35 00
	00 00 00	 mulsd	 xmm6, QWORD PTR __real@4010000000000000
  00204	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  00208	f2 41 0f 58 c0	 addsd	 xmm0, xmm8
  0020d	f2 0f 5e f0	 divsd	 xmm6, xmm0
  00211	66 0f 28 c6	 movapd	 xmm0, xmm6
  00215	e8 00 00 00 00	 call	 _Py_log1p

; 347  :         r.imag = -atan2(-2.*z.imag, (1-z.real)*(1+z.real) - ay*ay)/2.;

  0021a	f2 0f 10 17	 movsdx	 xmm2, QWORD PTR [rdi]
  0021e	66 41 0f 28 ca	 movapd	 xmm1, xmm10
  00223	f2 0f 5c ca	 subsd	 xmm1, xmm2
  00227	f2 41 0f 58 d2	 addsd	 xmm2, xmm10
  0022c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00234	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00238	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR r$[rsp], xmm0
  0023e	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00243	f2 41 0f 5c c8	 subsd	 xmm1, xmm8
  00248	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c000000000000000
  00250	e8 00 00 00 00	 call	 atan2
  00255	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000

; 348  :         errno = 0;

  0025d	eb 5b		 jmp	 SHORT $LN19@c_atanh
$LN6@c_atanh:

; 321  :         /*
; 322  :            if abs(z) is large then we use the approximation
; 323  :            atanh(z) ~ 1/z +/- i*pi/2 (+/- depending on the sign
; 324  :            of z.imag)
; 325  :         */
; 326  :         h = hypot(z.real/2., z.imag/2.);  /* safe from overflow */

  0025f	f2 0f 59 3d 00
	00 00 00	 mulsd	 xmm7, QWORD PTR __real@3fe0000000000000
  00267	f2 0f 59 35 00
	00 00 00	 mulsd	 xmm6, QWORD PTR __real@3fe0000000000000
  0026f	66 0f 28 cf	 movapd	 xmm1, xmm7
  00273	66 0f 28 c6	 movapd	 xmm0, xmm6
  00277	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__hypot

; 327  :         r.real = z.real/4./h/h;

  0027d	f2 0f 10 0f	 movsdx	 xmm1, QWORD PTR [rdi]

; 328  :         /* the two negations in the next line cancel each other out
; 329  :            except when working with unsigned zeros: they're there to
; 330  :            ensure that the branch cut has the correct continuity on
; 331  :            systems that don't support signed zeros */
; 332  :         r.imag = -copysign(Py_MATH_PI/2., -z.imag);

  00281	f2 0f 10 35 00
	00 00 00	 movsdx	 xmm6, QWORD PTR __mask@@NegDouble@
  00289	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd0000000000000
  00291	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00295	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00299	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff921fb54442d18
  002a1	f2 0f 11 4c 24
	20		 movsdx	 QWORD PTR r$[rsp], xmm1
  002a7	f2 0f 10 4f 08	 movsdx	 xmm1, QWORD PTR [rdi+8]
  002ac	66 0f 57 ce	 xorpd	 xmm1, xmm6
  002b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  002b6	66 0f 57 c6	 xorpd	 xmm0, xmm6
$LN19@c_atanh:
  002ba	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR r$[rsp+8], xmm0

; 333  :         errno = 0;

  002c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002c6	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN1@c_atanh:

; 349  :     }
; 350  :     return r;

  002cc	48 8b 44 24 20	 mov	 rax, QWORD PTR r$[rsp]
  002d1	44 0f 28 54 24
	60		 movaps	 xmm10, XMMWORD PTR [rsp+96]
  002d7	44 0f 28 84 24
	80 00 00 00	 movaps	 xmm8, XMMWORD PTR [rsp+128]
  002e0	48 89 06	 mov	 QWORD PTR [rsi], rax
  002e3	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp+8]
  002e8	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
  002ec	48 8b c6	 mov	 rax, rsi
  002ef	0f 28 bc 24 90
	00 00 00	 movaps	 xmm7, XMMWORD PTR [rsp+144]
  002f7	e9 b0 fd ff ff	 jmp	 $LN18@c_atanh
$LN9@c_atanh:
  002fc	48 89 9c 24 c0
	00 00 00	 mov	 QWORD PTR [rsp+192], rbx

; 309  :     Py_complex r;
; 310  :     double ay, h;
; 311  : 
; 312  :     SPECIAL_VALUE(z, atanh_special_values);

  00304	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0030a	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00310	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00315	e8 00 00 00 00	 call	 special_type
  0031a	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  0031e	48 63 d8	 movsxd	 rbx, eax
  00321	e8 00 00 00 00	 call	 special_type
  00326	48 63 c8	 movsxd	 rcx, eax
  00329	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:atanh_special_values
  00330	48 6b c9 07	 imul	 rcx, 7
  00334	48 03 cb	 add	 rcx, rbx
  00337	48 8b 9c 24 c0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+192]
  0033f	48 03 c9	 add	 rcx, rcx
  00342	48 8b 04 ca	 mov	 rax, QWORD PTR [rdx+rcx*8]
  00346	48 89 06	 mov	 QWORD PTR [rsi], rax
  00349	48 8b 44 ca 08	 mov	 rax, QWORD PTR [rdx+rcx*8+8]
  0034e	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
  00352	48 8b c6	 mov	 rax, rsi

; 351  : }

  00355	48 8b b4 24 c8
	00 00 00	 mov	 rsi, QWORD PTR [rsp+200]
  0035d	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  00364	5f		 pop	 rdi
  00365	c3		 ret	 0
c_atanh	ENDP
_TEXT	ENDS
PUBLIC	__real@4005bf0a8b145769
EXTRN	cosh:PROC
EXTRN	sinh:PROC
EXTRN	cos:PROC
EXTRN	sin:PROC
_BSS	SEGMENT
cosh_special_values DB 0310H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$c_cosh DD imagerel c_cosh
	DD	imagerel c_cosh+61
	DD	imagerel $unwind$c_cosh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$c_cosh DD imagerel c_cosh+61
	DD	imagerel c_cosh+114
	DD	imagerel $chain$1$c_cosh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$c_cosh DD imagerel c_cosh+114
	DD	imagerel c_cosh+220
	DD	imagerel $chain$2$c_cosh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$c_cosh DD imagerel c_cosh+220
	DD	imagerel c_cosh+310
	DD	imagerel $chain$3$c_cosh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$c_cosh DD imagerel c_cosh+310
	DD	imagerel c_cosh+626
	DD	imagerel $chain$4$c_cosh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$c_cosh DD imagerel c_cosh+626
	DD	imagerel c_cosh+689
	DD	imagerel $chain$5$c_cosh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$c_cosh DD imagerel c_cosh+689
	DD	imagerel c_cosh+785
	DD	imagerel $chain$6$c_cosh
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$c_cosh DD 021H
	DD	imagerel c_cosh+310
	DD	imagerel c_cosh+626
	DD	imagerel $chain$4$c_cosh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$c_cosh DD 020521H
	DD	0c3405H
	DD	imagerel c_cosh+310
	DD	imagerel c_cosh+626
	DD	imagerel $chain$4$c_cosh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$c_cosh DD 021H
	DD	imagerel c_cosh
	DD	imagerel c_cosh+61
	DD	imagerel $unwind$c_cosh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$c_cosh DD 021H
	DD	imagerel c_cosh+61
	DD	imagerel c_cosh+114
	DD	imagerel $chain$1$c_cosh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$c_cosh DD 020621H
	DD	029806H
	DD	imagerel c_cosh+61
	DD	imagerel c_cosh+114
	DD	imagerel $chain$1$c_cosh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$c_cosh DD 040b21H
	DD	03880bH
	DD	046805H
	DD	imagerel c_cosh
	DD	imagerel c_cosh+61
	DD	imagerel $unwind$c_cosh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_cosh DD 040a01H
	DD	0d640aH
	DD	07006920aH
xdata	ENDS
;	COMDAT __real@4005bf0a8b145769
CONST	SEGMENT
__real@4005bf0a8b145769 DQ 04005bf0a8b145769r	; 2.71828
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT c_cosh
_TEXT	SEGMENT
$T21144 = 96
z$ = 104
c_cosh	PROC						; COMDAT

; 381  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 382  :     Py_complex r;
; 383  :     double x_minus_one;
; 384  : 
; 385  :     /* special treatment for cosh(+/-inf + iy) if y is not a NaN */
; 386  :     if (!Py_IS_FINITE(z.real) || !Py_IS_FINITE(z.imag)) {

  0000a	f2 0f 10 02	 movsdx	 xmm0, QWORD PTR [rdx]
  0000e	48 8b fa	 mov	 rdi, rdx
  00011	48 8b f1	 mov	 rsi, rcx
  00014	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 62 01 00
	00		 je	 $LN13@c_cosh
  00022	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 4f 01 00
	00		 je	 $LN13@c_cosh

; 409  :     }
; 410  : 
; 411  :     if (fabs(z.real) > CM_LOG_LARGE_DOUBLE) {

  00035	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@7fcfffffffffffff
  0003d	0f 29 74 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm6
  00042	44 0f 29 44 24
	30		 movaps	 XMMWORD PTR [rsp+48], xmm8
  00048	f2 44 0f 10 07	 movsdx	 xmm8, QWORD PTR [rdi]
  0004d	66 41 0f 28 f0	 movapd	 xmm6, xmm8
  00052	66 0f 54 35 00
	00 00 00	 andpd	 xmm6, QWORD PTR __mask@@AbsDouble@
  0005a	e8 00 00 00 00	 call	 log
  0005f	66 0f 2f f0	 comisd	 xmm6, xmm0
  00063	76 77		 jbe	 SHORT $LN6@c_cosh

; 412  :         /* deal correctly with cases where cosh(z.real) overflows but
; 413  :            cosh(z) does not. */
; 414  :         x_minus_one = z.real - copysign(1., z.real);

  00065	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  0006d	66 41 0f 28 c8	 movapd	 xmm1, xmm8
  00072	44 0f 29 4c 24
	20		 movaps	 XMMWORD PTR [rsp+32], xmm9
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  0007e	f2 44 0f 10 0f	 movsdx	 xmm9, QWORD PTR [rdi]
  00083	f2 44 0f 5c c8	 subsd	 xmm9, xmm0

; 415  :         r.real = cos(z.imag) * cosh(x_minus_one) * Py_MATH_E;

  00088	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  0008d	e8 00 00 00 00	 call	 cos
  00092	66 0f 28 f0	 movapd	 xmm6, xmm0
  00096	66 41 0f 28 c1	 movapd	 xmm0, xmm9
  0009b	e8 00 00 00 00	 call	 cosh
  000a0	f2 0f 59 f0	 mulsd	 xmm6, xmm0

; 416  :         r.imag = sin(z.imag) * sinh(x_minus_one) * Py_MATH_E;

  000a4	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  000a9	f2 0f 59 35 00
	00 00 00	 mulsd	 xmm6, QWORD PTR __real@4005bf0a8b145769
  000b1	f2 0f 11 36	 movsdx	 QWORD PTR [rsi], xmm6
  000b5	e8 00 00 00 00	 call	 sin
  000ba	66 0f 28 f0	 movapd	 xmm6, xmm0
  000be	66 41 0f 28 c1	 movapd	 xmm0, xmm9
  000c3	e8 00 00 00 00	 call	 sinh
  000c8	44 0f 28 4c 24
	20		 movaps	 xmm9, XMMWORD PTR [rsp+32]
  000ce	f2 0f 59 f0	 mulsd	 xmm6, xmm0
  000d2	f2 0f 59 35 00
	00 00 00	 mulsd	 xmm6, QWORD PTR __real@4005bf0a8b145769

; 417  :     } else {

  000da	eb 3c		 jmp	 SHORT $LN18@c_cosh
$LN6@c_cosh:

; 418  :         r.real = cos(z.imag) * cosh(z.real);

  000dc	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  000e1	e8 00 00 00 00	 call	 cos
  000e6	66 0f 28 f0	 movapd	 xmm6, xmm0
  000ea	66 41 0f 28 c0	 movapd	 xmm0, xmm8
  000ef	e8 00 00 00 00	 call	 cosh
  000f4	f2 0f 59 f0	 mulsd	 xmm6, xmm0

; 419  :         r.imag = sin(z.imag) * sinh(z.real);

  000f8	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  000fd	f2 0f 11 36	 movsdx	 QWORD PTR [rsi], xmm6
  00101	e8 00 00 00 00	 call	 sin
  00106	66 0f 28 f0	 movapd	 xmm6, xmm0
  0010a	66 41 0f 28 c0	 movapd	 xmm0, xmm8
  0010f	e8 00 00 00 00	 call	 sinh
  00114	f2 0f 59 f0	 mulsd	 xmm6, xmm0
$LN18@c_cosh:

; 420  :     }
; 421  :     /* detect overflow, and set errno accordingly */
; 422  :     if (Py_IS_INFINITY(r.real) || Py_IS_INFINITY(r.imag))

  00118	f2 0f 10 06	 movsdx	 xmm0, QWORD PTR [rsi]
  0011c	f2 0f 11 76 08	 movsdx	 QWORD PTR [rsi+8], xmm6
  00121	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00127	44 0f 28 44 24
	30		 movaps	 xmm8, XMMWORD PTR [rsp+48]
  0012d	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]
  00132	85 c0		 test	 eax, eax
  00134	75 0e		 jne	 SHORT $LN2@c_cosh
  00136	f2 0f 10 06	 movsdx	 xmm0, QWORD PTR [rsi]
  0013a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00140	85 c0		 test	 eax, eax
  00142	74 26		 je	 SHORT $LN3@c_cosh
$LN2@c_cosh:
  00144	f2 0f 10 46 08	 movsdx	 xmm0, QWORD PTR [rsi+8]
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0014f	85 c0		 test	 eax, eax
  00151	0f 85 a0 01 00
	00		 jne	 $LN8@c_cosh
  00157	f2 0f 10 46 08	 movsdx	 xmm0, QWORD PTR [rsi+8]
  0015c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00162	85 c0		 test	 eax, eax
  00164	0f 85 8d 01 00
	00		 jne	 $LN8@c_cosh
$LN3@c_cosh:

; 423  :         errno = ERANGE;

  0016a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00170	c7 00 22 00 00
	00		 mov	 DWORD PTR [rax], 34	; 00000022H
  00176	48 8b c6	 mov	 rax, rsi

; 424  :     else
; 425  :         errno = 0;
; 426  :     return r;
; 427  : }

  00179	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  0017e	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00182	5f		 pop	 rdi
  00183	c3		 ret	 0
$LN13@c_cosh:

; 387  :         if (Py_IS_INFINITY(z.real) && Py_IS_FINITE(z.imag) &&
; 388  :             (z.imag != 0.)) {

  00184	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00188	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0018e	85 c0		 test	 eax, eax
  00190	0f 85 d7 00 00
	00		 jne	 $LN12@c_cosh
  00196	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  001a0	85 c0		 test	 eax, eax
  001a2	0f 85 c5 00 00
	00		 jne	 $LN12@c_cosh
  001a8	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  001ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  001b3	85 c0		 test	 eax, eax
  001b5	0f 84 b2 00 00
	00		 je	 $LN12@c_cosh
  001bb	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  001c0	66 0f 57 d2	 xorpd	 xmm2, xmm2
  001c4	66 0f 2e c2	 ucomisd xmm0, xmm2
  001c8	7a 06		 jp	 SHORT $LN17@c_cosh
  001ca	0f 84 9d 00 00
	00		 je	 $LN12@c_cosh
$LN17@c_cosh:

; 389  :             if (z.real > 0) {

  001d0	f2 0f 10 0f	 movsdx	 xmm1, QWORD PTR [rdi]
  001d4	66 0f 2f ca	 comisd	 xmm1, xmm2
  001d8	76 47		 jbe	 SHORT $LN11@c_cosh

; 390  :                 r.real = copysign(INF, cos(z.imag));

  001da	e8 00 00 00 00	 call	 cos
  001df	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  001e6	66 0f 28 c8	 movapd	 xmm1, xmm0
  001ea	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  001ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  001f4	f2 0f 11 06	 movsdx	 QWORD PTR [rsi], xmm0

; 391  :                 r.imag = copysign(INF, sin(z.imag));

  001f8	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  001fd	e8 00 00 00 00	 call	 sin
  00202	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  00209	66 0f 28 c8	 movapd	 xmm1, xmm0
  0020d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00211	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  00217	f2 0f 11 46 08	 movsdx	 QWORD PTR [rsi+8], xmm0

; 392  :             }
; 393  :             else {

  0021c	e9 90 00 00 00	 jmp	 $LN9@c_cosh
$LN11@c_cosh:

; 394  :                 r.real = copysign(INF, cos(z.imag));

  00221	e8 00 00 00 00	 call	 cos
  00226	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  0022d	66 0f 28 c8	 movapd	 xmm1, xmm0
  00231	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00235	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  0023b	f2 0f 11 06	 movsdx	 QWORD PTR [rsi], xmm0

; 395  :                 r.imag = -copysign(INF, sin(z.imag));

  0023f	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00244	e8 00 00 00 00	 call	 sin
  00249	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  00250	66 0f 28 c8	 movapd	 xmm1, xmm0
  00254	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00258	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  0025e	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@
  00266	f2 0f 11 46 08	 movsdx	 QWORD PTR [rsi+8], xmm0

; 396  :             }
; 397  :         }
; 398  :         else {

  0026b	eb 44		 jmp	 SHORT $LN9@c_cosh
$LN12@c_cosh:

; 399  :             r = cosh_special_values[special_type(z.real)]
; 400  :                                    [special_type(z.imag)];

  0026d	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00272	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  00277	e8 00 00 00 00	 call	 special_type
  0027c	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00280	48 63 d8	 movsxd	 rbx, eax
  00283	e8 00 00 00 00	 call	 special_type
  00288	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:cosh_special_values
  0028f	48 63 c8	 movsxd	 rcx, eax
  00292	48 6b c9 07	 imul	 rcx, 7
  00296	48 03 cb	 add	 rcx, rbx
  00299	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0029e	48 03 c9	 add	 rcx, rcx
  002a1	48 8b 04 ca	 mov	 rax, QWORD PTR [rdx+rcx*8]
  002a5	48 89 06	 mov	 QWORD PTR [rsi], rax
  002a8	48 8b 44 ca 08	 mov	 rax, QWORD PTR [rdx+rcx*8+8]
  002ad	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
$LN9@c_cosh:

; 401  :         }
; 402  :         /* need to set errno = EDOM if y is +/- infinity and x is not
; 403  :            a NaN */
; 404  :         if (Py_IS_INFINITY(z.imag) && !Py_IS_NAN(z.real))

  002b1	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  002b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  002bc	85 c0		 test	 eax, eax
  002be	75 37		 jne	 SHORT $LN8@c_cosh
  002c0	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  002c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  002cb	85 c0		 test	 eax, eax
  002cd	75 28		 jne	 SHORT $LN8@c_cosh
  002cf	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  002d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  002d9	85 c0		 test	 eax, eax
  002db	75 1a		 jne	 SHORT $LN8@c_cosh

; 405  :             errno = EDOM;

  002dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002e3	c7 00 21 00 00
	00		 mov	 DWORD PTR [rax], 33	; 00000021H

; 408  :         return r;

  002e9	48 8b c6	 mov	 rax, rsi

; 424  :     else
; 425  :         errno = 0;
; 426  :     return r;
; 427  : }

  002ec	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  002f1	48 83 c4 50	 add	 rsp, 80			; 00000050H
  002f5	5f		 pop	 rdi
  002f6	c3		 ret	 0
$LN8@c_cosh:

; 406  :         else
; 407  :             errno = 0;

  002f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002fd	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 408  :         return r;

  00303	48 8b c6	 mov	 rax, rsi

; 424  :     else
; 425  :         errno = 0;
; 426  :     return r;
; 427  : }

  00306	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  0030b	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0030f	5f		 pop	 rdi
  00310	c3		 ret	 0
c_cosh	ENDP
_TEXT	ENDS
EXTRN	exp:PROC
_BSS	SEGMENT
exp_special_values DB 0310H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$c_exp DD	imagerel c_exp
	DD	imagerel c_exp+70
	DD	imagerel $unwind$c_exp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$c_exp DD imagerel c_exp+70
	DD	imagerel c_exp+94
	DD	imagerel $chain$0$c_exp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$c_exp DD imagerel c_exp+94
	DD	imagerel c_exp+172
	DD	imagerel $chain$1$c_exp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$c_exp DD imagerel c_exp+172
	DD	imagerel c_exp+241
	DD	imagerel $chain$2$c_exp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$c_exp DD imagerel c_exp+241
	DD	imagerel c_exp+537
	DD	imagerel $chain$3$c_exp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$c_exp DD imagerel c_exp+537
	DD	imagerel c_exp+600
	DD	imagerel $chain$4$c_exp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$c_exp DD imagerel c_exp+600
	DD	imagerel c_exp+744
	DD	imagerel $chain$5$c_exp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$c_exp DD 021H
	DD	imagerel c_exp+241
	DD	imagerel c_exp+537
	DD	imagerel $chain$3$c_exp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$c_exp DD 020521H
	DD	0c3405H
	DD	imagerel c_exp+241
	DD	imagerel c_exp+537
	DD	imagerel $chain$3$c_exp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$c_exp DD 021H
	DD	imagerel c_exp
	DD	imagerel c_exp+70
	DD	imagerel $unwind$c_exp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$c_exp DD 021H
	DD	imagerel c_exp+70
	DD	imagerel c_exp+94
	DD	imagerel $chain$0$c_exp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$c_exp DD 020621H
	DD	028806H
	DD	imagerel c_exp+70
	DD	imagerel c_exp+94
	DD	imagerel $chain$0$c_exp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$c_exp DD 020521H
	DD	037805H
	DD	imagerel c_exp
	DD	imagerel c_exp+70
	DD	imagerel $unwind$c_exp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_exp DD 061301H
	DD	046813H
	DD	0d640aH
	DD	07006920aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT c_exp
_TEXT	SEGMENT
$T21190 = 96
z$ = 104
c_exp	PROC						; COMDAT

; 441  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 442  :     Py_complex r;
; 443  :     double l;
; 444  : 
; 445  :     if (!Py_IS_FINITE(z.real) || !Py_IS_FINITE(z.imag)) {

  0000a	f2 0f 10 02	 movsdx	 xmm0, QWORD PTR [rdx]
  0000e	0f 29 74 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm6
  00013	48 8b fa	 mov	 rdi, rdx
  00016	48 8b f1	 mov	 rsi, rcx
  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0001f	85 c0		 test	 eax, eax
  00021	0f 84 1d 01 00
	00		 je	 $LN14@c_exp
  00027	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00032	85 c0		 test	 eax, eax
  00034	0f 84 0a 01 00
	00		 je	 $LN14@c_exp

; 470  :     }
; 471  : 
; 472  :     if (z.real > CM_LOG_LARGE_DOUBLE) {

  0003a	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@7fcfffffffffffff
  00042	f2 0f 10 37	 movsdx	 xmm6, QWORD PTR [rdi]
  00046	0f 29 7c 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm7
  0004b	e8 00 00 00 00	 call	 log
  00050	66 0f 2f f0	 comisd	 xmm6, xmm0
  00054	76 56		 jbe	 SHORT $LN6@c_exp

; 473  :         l = exp(z.real-1.);

  00056	f2 0f 5c 35 00
	00 00 00	 subsd	 xmm6, QWORD PTR __real@3ff0000000000000
  0005e	44 0f 29 44 24
	20		 movaps	 XMMWORD PTR [rsp+32], xmm8
  00064	66 0f 28 c6	 movapd	 xmm0, xmm6
  00068	e8 00 00 00 00	 call	 exp
  0006d	66 44 0f 28 c0	 movapd	 xmm8, xmm0

; 474  :         r.real = l*cos(z.imag)*Py_MATH_E;

  00072	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00077	e8 00 00 00 00	 call	 cos
  0007c	f2 41 0f 59 c0	 mulsd	 xmm0, xmm8
  00081	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4005bf0a8b145769
  00089	f2 0f 11 06	 movsdx	 QWORD PTR [rsi], xmm0

; 475  :         r.imag = l*sin(z.imag)*Py_MATH_E;

  0008d	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00092	e8 00 00 00 00	 call	 sin
  00097	f2 41 0f 59 c0	 mulsd	 xmm0, xmm8
  0009c	44 0f 28 44 24
	20		 movaps	 xmm8, XMMWORD PTR [rsp+32]
  000a2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4005bf0a8b145769

; 476  :     } else {

  000aa	eb 2d		 jmp	 SHORT $LN19@c_exp
$LN6@c_exp:

; 477  :         l = exp(z.real);

  000ac	66 0f 28 c6	 movapd	 xmm0, xmm6
  000b0	e8 00 00 00 00	 call	 exp
  000b5	66 0f 28 f8	 movapd	 xmm7, xmm0

; 478  :         r.real = l*cos(z.imag);

  000b9	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  000be	e8 00 00 00 00	 call	 cos
  000c3	f2 0f 59 c7	 mulsd	 xmm0, xmm7
  000c7	f2 0f 11 06	 movsdx	 QWORD PTR [rsi], xmm0

; 479  :         r.imag = l*sin(z.imag);

  000cb	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  000d0	e8 00 00 00 00	 call	 sin
  000d5	f2 0f 59 c7	 mulsd	 xmm0, xmm7
$LN19@c_exp:
  000d9	f2 0f 11 46 08	 movsdx	 QWORD PTR [rsi+8], xmm0

; 480  :     }
; 481  :     /* detect overflow, and set errno accordingly */
; 482  :     if (Py_IS_INFINITY(r.real) || Py_IS_INFINITY(r.imag))

  000de	f2 0f 10 06	 movsdx	 xmm0, QWORD PTR [rsi]
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  000e8	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  000ed	85 c0		 test	 eax, eax
  000ef	75 0e		 jne	 SHORT $LN2@c_exp
  000f1	f2 0f 10 06	 movsdx	 xmm0, QWORD PTR [rsi]
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  000fb	85 c0		 test	 eax, eax
  000fd	74 26		 je	 SHORT $LN3@c_exp
$LN2@c_exp:
  000ff	f2 0f 10 46 08	 movsdx	 xmm0, QWORD PTR [rsi+8]
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0010a	85 c0		 test	 eax, eax
  0010c	0f 85 b7 01 00
	00		 jne	 $LN9@c_exp
  00112	f2 0f 10 46 08	 movsdx	 xmm0, QWORD PTR [rsi+8]
  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  0011d	85 c0		 test	 eax, eax
  0011f	0f 85 a4 01 00
	00		 jne	 $LN9@c_exp
$LN3@c_exp:

; 483  :         errno = ERANGE;

  00125	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0012b	c7 00 22 00 00
	00		 mov	 DWORD PTR [rax], 34	; 00000022H
  00131	48 8b c6	 mov	 rax, rsi

; 484  :     else
; 485  :         errno = 0;
; 486  :     return r;
; 487  : }

  00134	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  00139	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]
  0013e	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00142	5f		 pop	 rdi
  00143	c3		 ret	 0
$LN14@c_exp:

; 446  :         if (Py_IS_INFINITY(z.real) && Py_IS_FINITE(z.imag)
; 447  :             && (z.imag != 0.)) {

  00144	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00148	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0014e	66 0f 57 f6	 xorpd	 xmm6, xmm6
  00152	85 c0		 test	 eax, eax
  00154	0f 85 ba 00 00
	00		 jne	 $LN13@c_exp
  0015a	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  0015e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00164	85 c0		 test	 eax, eax
  00166	0f 85 a8 00 00
	00		 jne	 $LN13@c_exp
  0016c	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00177	85 c0		 test	 eax, eax
  00179	0f 84 95 00 00
	00		 je	 $LN13@c_exp
  0017f	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00184	66 0f 2e c6	 ucomisd xmm0, xmm6
  00188	7a 06		 jp	 SHORT $LN18@c_exp
  0018a	0f 84 84 00 00
	00		 je	 $LN13@c_exp
$LN18@c_exp:

; 448  :             if (z.real > 0) {

  00190	f2 0f 10 0f	 movsdx	 xmm1, QWORD PTR [rdi]
  00194	66 0f 2f ce	 comisd	 xmm1, xmm6
  00198	76 44		 jbe	 SHORT $LN12@c_exp

; 449  :                 r.real = copysign(INF, cos(z.imag));

  0019a	e8 00 00 00 00	 call	 cos
  0019f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  001a6	66 0f 28 c8	 movapd	 xmm1, xmm0
  001aa	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  001ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  001b4	f2 0f 11 06	 movsdx	 QWORD PTR [rsi], xmm0

; 450  :                 r.imag = copysign(INF, sin(z.imag));

  001b8	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  001bd	e8 00 00 00 00	 call	 sin
  001c2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  001c9	66 0f 28 c8	 movapd	 xmm1, xmm0
  001cd	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  001d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  001d7	f2 0f 11 46 08	 movsdx	 QWORD PTR [rsi+8], xmm0

; 451  :             }
; 452  :             else {

  001dc	eb 7a		 jmp	 SHORT $LN10@c_exp
$LN12@c_exp:

; 453  :                 r.real = copysign(0., cos(z.imag));

  001de	e8 00 00 00 00	 call	 cos
  001e3	66 0f 28 c8	 movapd	 xmm1, xmm0
  001e7	66 0f 28 c6	 movapd	 xmm0, xmm6
  001eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  001f1	f2 0f 11 06	 movsdx	 QWORD PTR [rsi], xmm0

; 454  :                 r.imag = copysign(0., sin(z.imag));

  001f5	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  001fa	e8 00 00 00 00	 call	 sin
  001ff	66 0f 28 c8	 movapd	 xmm1, xmm0
  00203	66 0f 28 c6	 movapd	 xmm0, xmm6
  00207	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  0020d	f2 0f 11 46 08	 movsdx	 QWORD PTR [rsi+8], xmm0

; 455  :             }
; 456  :         }
; 457  :         else {

  00212	eb 44		 jmp	 SHORT $LN10@c_exp
$LN13@c_exp:

; 458  :             r = exp_special_values[special_type(z.real)]
; 459  :                                   [special_type(z.imag)];

  00214	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00219	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  0021e	e8 00 00 00 00	 call	 special_type
  00223	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00227	48 63 d8	 movsxd	 rbx, eax
  0022a	e8 00 00 00 00	 call	 special_type
  0022f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:exp_special_values
  00236	48 63 c8	 movsxd	 rcx, eax
  00239	48 6b c9 07	 imul	 rcx, 7
  0023d	48 03 cb	 add	 rcx, rbx
  00240	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00245	48 03 c9	 add	 rcx, rcx
  00248	48 8b 04 ca	 mov	 rax, QWORD PTR [rdx+rcx*8]
  0024c	48 89 06	 mov	 QWORD PTR [rsi], rax
  0024f	48 8b 44 ca 08	 mov	 rax, QWORD PTR [rdx+rcx*8+8]
  00254	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
$LN10@c_exp:

; 460  :         }
; 461  :         /* need to set errno = EDOM if y is +/- infinity and x is not
; 462  :            a NaN and not -infinity */
; 463  :         if (Py_IS_INFINITY(z.imag) &&
; 464  :             (Py_IS_FINITE(z.real) ||
; 465  :              (Py_IS_INFINITY(z.real) && z.real > 0)))

  00258	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  0025d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00263	85 c0		 test	 eax, eax
  00265	75 62		 jne	 SHORT $LN9@c_exp
  00267	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  0026c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00272	85 c0		 test	 eax, eax
  00274	75 53		 jne	 SHORT $LN9@c_exp
  00276	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  0027a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00280	85 c0		 test	 eax, eax
  00282	75 26		 jne	 SHORT $LN8@c_exp
  00284	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00288	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0028e	85 c0		 test	 eax, eax
  00290	75 37		 jne	 SHORT $LN9@c_exp
  00292	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00296	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  0029c	85 c0		 test	 eax, eax
  0029e	75 29		 jne	 SHORT $LN9@c_exp
  002a0	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  002a4	66 0f 2f c6	 comisd	 xmm0, xmm6
  002a8	76 1f		 jbe	 SHORT $LN9@c_exp
$LN8@c_exp:

; 466  :             errno = EDOM;

  002aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002b0	c7 00 21 00 00
	00		 mov	 DWORD PTR [rax], 33	; 00000021H

; 469  :         return r;

  002b6	48 8b c6	 mov	 rax, rsi

; 484  :     else
; 485  :         errno = 0;
; 486  :     return r;
; 487  : }

  002b9	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  002be	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]
  002c3	48 83 c4 50	 add	 rsp, 80			; 00000050H
  002c7	5f		 pop	 rdi
  002c8	c3		 ret	 0
$LN9@c_exp:

; 467  :         else
; 468  :             errno = 0;

  002c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno

; 484  :     else
; 485  :         errno = 0;
; 486  :     return r;
; 487  : }

  002cf	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]
  002d4	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  002da	48 8b c6	 mov	 rax, rsi
  002dd	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  002e2	48 83 c4 50	 add	 rsp, 80			; 00000050H
  002e6	5f		 pop	 rdi
  002e7	c3		 ret	 0
c_exp	ENDP
_TEXT	ENDS
PUBLIC	__real@3fe62e42fefa39ef
PUBLIC	__real@3ffbae147ae147ae
PUBLIC	__real@3fe6b851eb851eb8
PUBLIC	__real@40425e4f7b2737fa
EXTRN	__imp_ldexp:PROC
_BSS	SEGMENT
log_special_values DB 0310H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
pdata	SEGMENT
$pdata$c_log DD	imagerel c_log
	DD	imagerel c_log+70
	DD	imagerel $unwind$c_log
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$c_log DD imagerel c_log+70
	DD	imagerel c_log+531
	DD	imagerel $chain$1$c_log
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$c_log DD imagerel c_log+531
	DD	imagerel c_log+625
	DD	imagerel $chain$3$c_log
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$c_log DD 020521H
	DD	0c3405H
	DD	imagerel c_log
	DD	imagerel c_log+70
	DD	imagerel $unwind$c_log
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$c_log DD 040a21H
	DD	03780aH
	DD	046805H
	DD	imagerel c_log
	DD	imagerel c_log+70
	DD	imagerel $unwind$c_log
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_log DD 040a01H
	DD	0d640aH
	DD	07006920aH
xdata	ENDS
;	COMDAT __real@3fe62e42fefa39ef
CONST	SEGMENT
__real@3fe62e42fefa39ef DQ 03fe62e42fefa39efr	; 0.693147
CONST	ENDS
;	COMDAT __real@3ffbae147ae147ae
CONST	SEGMENT
__real@3ffbae147ae147ae DQ 03ffbae147ae147aer	; 1.73
CONST	ENDS
;	COMDAT __real@3fe6b851eb851eb8
CONST	SEGMENT
__real@3fe6b851eb851eb8 DQ 03fe6b851eb851eb8r	; 0.71
CONST	ENDS
;	COMDAT __real@40425e4f7b2737fa
CONST	SEGMENT
__real@40425e4f7b2737fa DQ 040425e4f7b2737far	; 36.7368
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cmathmodule.c
CONST	ENDS
;	COMDAT c_log
_TEXT	SEGMENT
r$ = 32
$T21232 = 96
z$ = 104
c_log	PROC						; COMDAT

; 499  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 500  :     /*
; 501  :        The usual formula for the real part is log(hypot(z.real, z.imag)).
; 502  :        There are four situations where this formula is potentially
; 503  :        problematic:
; 504  : 
; 505  :        (1) the absolute value of z is subnormal.  Then hypot is subnormal,
; 506  :        so has fewer than the usual number of bits of accuracy, hence may
; 507  :        have large relative error.  This then gives a large absolute error
; 508  :        in the log.  This can be solved by rescaling z by a suitable power
; 509  :        of 2.
; 510  : 
; 511  :        (2) the absolute value of z is greater than DBL_MAX (e.g. when both
; 512  :        z.real and z.imag are within a factor of 1/sqrt(2) of DBL_MAX)
; 513  :        Again, rescaling solves this.
; 514  : 
; 515  :        (3) the absolute value of z is close to 1.  In this case it's
; 516  :        difficult to achieve good accuracy, at least in part because a
; 517  :        change of 1ulp in the real or imaginary part of z can result in a
; 518  :        change of billions of ulps in the correctly rounded answer.
; 519  : 
; 520  :        (4) z = 0.  The simplest thing to do here is to call the
; 521  :        floating-point log with an argument of 0, and let its behaviour
; 522  :        (returning -infinity, signaling a floating-point exception, setting
; 523  :        errno, or whatever) determine that of c_log.  So the usual formula
; 524  :        is fine here.
; 525  : 
; 526  :      */
; 527  : 
; 528  :     Py_complex r;
; 529  :     double ax, ay, am, an, h;
; 530  : 
; 531  :     SPECIAL_VALUE(z, log_special_values);

  0000a	f2 0f 10 02	 movsdx	 xmm0, QWORD PTR [rdx]
  0000e	48 8b fa	 mov	 rdi, rdx
  00011	48 8b f1	 mov	 rsi, rcx
  00014	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 f1 01 00
	00		 je	 $LN11@c_log
  00022	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 de 01 00
	00		 je	 $LN11@c_log

; 532  : 
; 533  :     ax = fabs(z.real);

  00035	f2 0f 10 17	 movsdx	 xmm2, QWORD PTR [rdi]

; 534  :     ay = fabs(z.imag);

  00039	f2 0f 10 5f 08	 movsdx	 xmm3, QWORD PTR [rdi+8]

; 535  : 
; 536  :     if (ax > CM_LARGE_DOUBLE || ay > CM_LARGE_DOUBLE) {

  0003e	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@7fcfffffffffffff
  00046	0f 29 74 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm6
  0004b	0f 29 7c 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm7
  00050	66 0f 28 fa	 movapd	 xmm7, xmm2
  00054	66 0f 28 f3	 movapd	 xmm6, xmm3
  00058	66 0f 54 3d 00
	00 00 00	 andpd	 xmm7, QWORD PTR __mask@@AbsDouble@
  00060	66 0f 54 35 00
	00 00 00	 andpd	 xmm6, QWORD PTR __mask@@AbsDouble@
  00068	66 0f 2f f9	 comisd	 xmm7, xmm1
  0006c	0f 87 27 01 00
	00		 ja	 $LN9@c_log
  00072	66 0f 2f f1	 comisd	 xmm6, xmm1
  00076	0f 87 1d 01 00
	00		 ja	 $LN9@c_log

; 538  :     } else if (ax < DBL_MIN && ay < DBL_MIN) {

  0007c	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@0010000000000000
  00084	66 0f 2f c7	 comisd	 xmm0, xmm7
  00088	0f 86 95 00 00
	00		 jbe	 $LN7@c_log
  0008e	66 0f 2f c6	 comisd	 xmm0, xmm6
  00092	0f 86 8b 00 00
	00		 jbe	 $LN7@c_log

; 539  :         if (ax > 0. || ay > 0.) {

  00098	66 0f 57 c0	 xorpd	 xmm0, xmm0
  0009c	66 0f 2f f8	 comisd	 xmm7, xmm0
  000a0	77 43		 ja	 SHORT $LN5@c_log
  000a2	66 0f 2f f0	 comisd	 xmm6, xmm0
  000a6	77 3d		 ja	 SHORT $LN5@c_log

; 543  :         }
; 544  :         else {
; 545  :             /* log(+/-0. +/- 0i) */
; 546  :             r.real = -INF;

  000a8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE

; 547  :             r.imag = atan2(z.imag, z.real);

  000af	66 0f 28 ca	 movapd	 xmm1, xmm2
  000b3	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  000b7	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@
  000bf	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR r$[rsp], xmm0
  000c5	66 0f 28 c3	 movapd	 xmm0, xmm3
  000c9	e8 00 00 00 00	 call	 atan2
  000ce	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR r$[rsp+8], xmm0

; 548  :             errno = EDOM;

  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000da	c7 00 21 00 00
	00		 mov	 DWORD PTR [rax], 33	; 00000021H

; 549  :             return r;

  000e0	e9 05 01 00 00	 jmp	 $LN28@c_log
$LN5@c_log:

; 540  :             /* catch cases where hypot(ax, ay) is subnormal */
; 541  :             r.real = log(hypot(ldexp(ax, DBL_MANT_DIG),
; 542  :                      ldexp(ay, DBL_MANT_DIG))) - DBL_MANT_DIG*M_LN2;

  000e5	66 0f 28 c6	 movapd	 xmm0, xmm6
  000e9	ba 35 00 00 00	 mov	 edx, 53			; 00000035H
  000ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ldexp
  000f4	ba 35 00 00 00	 mov	 edx, 53			; 00000035H
  000f9	66 0f 28 f0	 movapd	 xmm6, xmm0
  000fd	66 0f 28 c7	 movapd	 xmm0, xmm7
  00101	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ldexp
  00107	66 0f 28 ce	 movapd	 xmm1, xmm6
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__hypot
  00111	e8 00 00 00 00	 call	 log
  00116	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@40425e4f7b2737fa

; 550  :         }
; 551  :     } else {

  0011e	e9 a1 00 00 00	 jmp	 $LN27@c_log
$LN7@c_log:

; 552  :         h = hypot(ax, ay);

  00123	66 0f 28 ce	 movapd	 xmm1, xmm6
  00127	66 0f 28 c7	 movapd	 xmm0, xmm7
  0012b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__hypot

; 553  :         if (0.71 <= h && h <= 1.73) {

  00131	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fe6b851eb851eb8
  00139	72 57		 jb	 SHORT $LN2@c_log
  0013b	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3ffbae147ae147ae
  00143	66 0f 2f c8	 comisd	 xmm1, xmm0
  00147	72 49		 jb	 SHORT $LN2@c_log

; 554  :             am = ax > ay ? ax : ay;  /* max(ax, ay) */

  00149	66 0f 2f fe	 comisd	 xmm7, xmm6
  0014d	76 06		 jbe	 SHORT $LN15@c_log
  0014f	66 0f 28 d7	 movapd	 xmm2, xmm7
  00153	eb 04		 jmp	 SHORT $LN16@c_log
$LN15@c_log:
  00155	66 0f 28 d6	 movapd	 xmm2, xmm6
$LN16@c_log:

; 555  :             an = ax > ay ? ay : ax;  /* min(ax, ay) */

  00159	66 0f 2f fe	 comisd	 xmm7, xmm6
  0015d	77 04		 ja	 SHORT $LN18@c_log
  0015f	66 0f 28 f7	 movapd	 xmm6, xmm7
$LN18@c_log:

; 556  :             r.real = m_log1p((am-1)*(am+1)+an*an)/2.;

  00163	66 0f 28 c2	 movapd	 xmm0, xmm2
  00167	f2 0f 58 15 00
	00 00 00	 addsd	 xmm2, QWORD PTR __real@3ff0000000000000
  0016f	f2 0f 59 f6	 mulsd	 xmm6, xmm6
  00173	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0017b	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  0017f	f2 0f 58 c6	 addsd	 xmm0, xmm6
  00183	e8 00 00 00 00	 call	 _Py_log1p
  00188	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000

; 557  :         } else {

  00190	eb 32		 jmp	 SHORT $LN27@c_log
$LN2@c_log:

; 558  :             r.real = log(h);

  00192	e8 00 00 00 00	 call	 log
  00197	eb 2b		 jmp	 SHORT $LN27@c_log
$LN9@c_log:

; 537  :         r.real = log(hypot(ax/2., ay/2.)) + M_LN2;

  00199	f2 0f 59 35 00
	00 00 00	 mulsd	 xmm6, QWORD PTR __real@3fe0000000000000
  001a1	f2 0f 59 3d 00
	00 00 00	 mulsd	 xmm7, QWORD PTR __real@3fe0000000000000
  001a9	66 0f 28 ce	 movapd	 xmm1, xmm6
  001ad	66 0f 28 c7	 movapd	 xmm0, xmm7
  001b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__hypot
  001b7	e8 00 00 00 00	 call	 log
  001bc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe62e42fefa39ef
$LN27@c_log:

; 559  :         }
; 560  :     }
; 561  :     r.imag = atan2(z.imag, z.real);

  001c4	f2 0f 10 0f	 movsdx	 xmm1, QWORD PTR [rdi]
  001c8	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR r$[rsp], xmm0
  001ce	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  001d3	e8 00 00 00 00	 call	 atan2
  001d8	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR r$[rsp+8], xmm0

; 562  :     errno = 0;

  001de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  001e4	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN28@c_log:

; 563  :     return r;

  001ea	48 8b 44 24 20	 mov	 rax, QWORD PTR r$[rsp]
  001ef	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]
  001f4	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  001f9	48 89 06	 mov	 QWORD PTR [rsi], rax
  001fc	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp+8]
  00201	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
  00205	48 8b c6	 mov	 rax, rsi

; 564  : }

  00208	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  0020d	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00211	5f		 pop	 rdi
  00212	c3		 ret	 0
$LN11@c_log:
  00213	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx

; 500  :     /*
; 501  :        The usual formula for the real part is log(hypot(z.real, z.imag)).
; 502  :        There are four situations where this formula is potentially
; 503  :        problematic:
; 504  : 
; 505  :        (1) the absolute value of z is subnormal.  Then hypot is subnormal,
; 506  :        so has fewer than the usual number of bits of accuracy, hence may
; 507  :        have large relative error.  This then gives a large absolute error
; 508  :        in the log.  This can be solved by rescaling z by a suitable power
; 509  :        of 2.
; 510  : 
; 511  :        (2) the absolute value of z is greater than DBL_MAX (e.g. when both
; 512  :        z.real and z.imag are within a factor of 1/sqrt(2) of DBL_MAX)
; 513  :        Again, rescaling solves this.
; 514  : 
; 515  :        (3) the absolute value of z is close to 1.  In this case it's
; 516  :        difficult to achieve good accuracy, at least in part because a
; 517  :        change of 1ulp in the real or imaginary part of z can result in a
; 518  :        change of billions of ulps in the correctly rounded answer.
; 519  : 
; 520  :        (4) z = 0.  The simplest thing to do here is to call the
; 521  :        floating-point log with an argument of 0, and let its behaviour
; 522  :        (returning -infinity, signaling a floating-point exception, setting
; 523  :        errno, or whatever) determine that of c_log.  So the usual formula
; 524  :        is fine here.
; 525  : 
; 526  :      */
; 527  : 
; 528  :     Py_complex r;
; 529  :     double ax, ay, am, an, h;
; 530  : 
; 531  :     SPECIAL_VALUE(z, log_special_values);

  00218	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0021e	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00224	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00229	e8 00 00 00 00	 call	 special_type
  0022e	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00232	48 63 d8	 movsxd	 rbx, eax
  00235	e8 00 00 00 00	 call	 special_type
  0023a	48 63 c8	 movsxd	 rcx, eax
  0023d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:log_special_values
  00244	48 6b c9 07	 imul	 rcx, 7
  00248	48 03 cb	 add	 rcx, rbx
  0024b	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00250	48 03 c9	 add	 rcx, rcx
  00253	48 8b 04 ca	 mov	 rax, QWORD PTR [rdx+rcx*8]
  00257	48 89 06	 mov	 QWORD PTR [rsi], rax
  0025a	48 8b 44 ca 08	 mov	 rax, QWORD PTR [rdx+rcx*8+8]
  0025f	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
  00263	48 8b c6	 mov	 rax, rsi

; 564  : }

  00266	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  0026b	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0026f	5f		 pop	 rdi
  00270	c3		 ret	 0
c_log	ENDP
_TEXT	ENDS
PUBLIC	__real@40026bb1bbb55516
PUBLIC	$T21295
;	COMDAT pdata
pdata	SEGMENT
$pdata$c_log10 DD imagerel c_log10
	DD	imagerel c_log10+114
	DD	imagerel $unwind$c_log10
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_log10 DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT __real@40026bb1bbb55516
CONST	SEGMENT
__real@40026bb1bbb55516 DQ 040026bb1bbb55516r	; 2.30259
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT c_log10
_TEXT	SEGMENT
$T21295 = 32
$T21294 = 48
$T21293 = 80
z$ = 88
c_log10	PROC						; COMDAT

; 569  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 570  :     Py_complex r;
; 571  :     int errno_save;
; 572  : 
; 573  :     r = c_log(z);

  0000a	0f 10 02	 movups	 xmm0, XMMWORD PTR [rdx]
  0000d	48 8b f9	 mov	 rdi, rcx
  00010	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T21295[rsp]
  00015	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T21294[rsp]
  0001a	0f 29 44 24 20	 movaps	 XMMWORD PTR $T21295[rsp], xmm0
  0001f	e8 00 00 00 00	 call	 c_log
  00024	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00027	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002b	48 89 17	 mov	 QWORD PTR [rdi], rdx
  0002e	48 89 47 08	 mov	 QWORD PTR [rdi+8], rax

; 574  :     errno_save = errno; /* just in case the divisions affect errno */

  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno

; 575  :     r.real = r.real / M_LN10;

  00038	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  0003c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40026bb1bbb55516
  00044	8b 18		 mov	 ebx, DWORD PTR [rax]
  00046	f2 0f 11 07	 movsdx	 QWORD PTR [rdi], xmm0

; 576  :     r.imag = r.imag / M_LN10;

  0004a	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  0004f	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40026bb1bbb55516
  00057	f2 0f 11 47 08	 movsdx	 QWORD PTR [rdi+8], xmm0

; 577  :     errno = errno_save;

  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00062	89 18		 mov	 DWORD PTR [rax], ebx

; 578  :     return r;
; 579  : }

  00064	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00069	48 8b c7	 mov	 rax, rdi
  0006c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00070	5f		 pop	 rdi
  00071	c3		 ret	 0
c_log10	ENDP
_TEXT	ENDS
_BSS	SEGMENT
sinh_special_values DB 0310H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$c_sinh DD imagerel c_sinh
	DD	imagerel c_sinh+61
	DD	imagerel $unwind$c_sinh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$c_sinh DD imagerel c_sinh+61
	DD	imagerel c_sinh+114
	DD	imagerel $chain$1$c_sinh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$c_sinh DD imagerel c_sinh+114
	DD	imagerel c_sinh+220
	DD	imagerel $chain$2$c_sinh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$c_sinh DD imagerel c_sinh+220
	DD	imagerel c_sinh+310
	DD	imagerel $chain$3$c_sinh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$c_sinh DD imagerel c_sinh+310
	DD	imagerel c_sinh+579
	DD	imagerel $chain$4$c_sinh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$c_sinh DD imagerel c_sinh+579
	DD	imagerel c_sinh+642
	DD	imagerel $chain$5$c_sinh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$c_sinh DD imagerel c_sinh+642
	DD	imagerel c_sinh+738
	DD	imagerel $chain$6$c_sinh
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$c_sinh DD 021H
	DD	imagerel c_sinh+310
	DD	imagerel c_sinh+579
	DD	imagerel $chain$4$c_sinh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$c_sinh DD 020521H
	DD	0c3405H
	DD	imagerel c_sinh+310
	DD	imagerel c_sinh+579
	DD	imagerel $chain$4$c_sinh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$c_sinh DD 021H
	DD	imagerel c_sinh
	DD	imagerel c_sinh+61
	DD	imagerel $unwind$c_sinh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$c_sinh DD 021H
	DD	imagerel c_sinh+61
	DD	imagerel c_sinh+114
	DD	imagerel $chain$1$c_sinh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$c_sinh DD 020621H
	DD	029806H
	DD	imagerel c_sinh+61
	DD	imagerel c_sinh+114
	DD	imagerel $chain$1$c_sinh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$c_sinh DD 040b21H
	DD	03880bH
	DD	046805H
	DD	imagerel c_sinh
	DD	imagerel c_sinh+61
	DD	imagerel $unwind$c_sinh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_sinh DD 040a01H
	DD	0d640aH
	DD	07006920aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT c_sinh
_TEXT	SEGMENT
$T21310 = 96
z$ = 104
c_sinh	PROC						; COMDAT

; 611  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 612  :     Py_complex r;
; 613  :     double x_minus_one;
; 614  : 
; 615  :     /* special treatment for sinh(+/-inf + iy) if y is finite and
; 616  :        nonzero */
; 617  :     if (!Py_IS_FINITE(z.real) || !Py_IS_FINITE(z.imag)) {

  0000a	f2 0f 10 02	 movsdx	 xmm0, QWORD PTR [rdx]
  0000e	48 8b fa	 mov	 rdi, rdx
  00011	48 8b f1	 mov	 rsi, rcx
  00014	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 62 01 00
	00		 je	 $LN13@c_sinh
  00022	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 4f 01 00
	00		 je	 $LN13@c_sinh

; 640  :     }
; 641  : 
; 642  :     if (fabs(z.real) > CM_LOG_LARGE_DOUBLE) {

  00035	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@7fcfffffffffffff
  0003d	0f 29 74 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm6
  00042	44 0f 29 44 24
	30		 movaps	 XMMWORD PTR [rsp+48], xmm8
  00048	f2 44 0f 10 07	 movsdx	 xmm8, QWORD PTR [rdi]
  0004d	66 41 0f 28 f0	 movapd	 xmm6, xmm8
  00052	66 0f 54 35 00
	00 00 00	 andpd	 xmm6, QWORD PTR __mask@@AbsDouble@
  0005a	e8 00 00 00 00	 call	 log
  0005f	66 0f 2f f0	 comisd	 xmm6, xmm0
  00063	76 77		 jbe	 SHORT $LN6@c_sinh

; 643  :         x_minus_one = z.real - copysign(1., z.real);

  00065	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  0006d	66 41 0f 28 c8	 movapd	 xmm1, xmm8
  00072	44 0f 29 4c 24
	20		 movaps	 XMMWORD PTR [rsp+32], xmm9
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  0007e	f2 44 0f 10 0f	 movsdx	 xmm9, QWORD PTR [rdi]
  00083	f2 44 0f 5c c8	 subsd	 xmm9, xmm0

; 644  :         r.real = cos(z.imag) * sinh(x_minus_one) * Py_MATH_E;

  00088	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  0008d	e8 00 00 00 00	 call	 cos
  00092	66 0f 28 f0	 movapd	 xmm6, xmm0
  00096	66 41 0f 28 c1	 movapd	 xmm0, xmm9
  0009b	e8 00 00 00 00	 call	 sinh
  000a0	f2 0f 59 f0	 mulsd	 xmm6, xmm0

; 645  :         r.imag = sin(z.imag) * cosh(x_minus_one) * Py_MATH_E;

  000a4	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  000a9	f2 0f 59 35 00
	00 00 00	 mulsd	 xmm6, QWORD PTR __real@4005bf0a8b145769
  000b1	f2 0f 11 36	 movsdx	 QWORD PTR [rsi], xmm6
  000b5	e8 00 00 00 00	 call	 sin
  000ba	66 0f 28 f0	 movapd	 xmm6, xmm0
  000be	66 41 0f 28 c1	 movapd	 xmm0, xmm9
  000c3	e8 00 00 00 00	 call	 cosh
  000c8	44 0f 28 4c 24
	20		 movaps	 xmm9, XMMWORD PTR [rsp+32]
  000ce	f2 0f 59 f0	 mulsd	 xmm6, xmm0
  000d2	f2 0f 59 35 00
	00 00 00	 mulsd	 xmm6, QWORD PTR __real@4005bf0a8b145769

; 646  :     } else {

  000da	eb 3c		 jmp	 SHORT $LN18@c_sinh
$LN6@c_sinh:

; 647  :         r.real = cos(z.imag) * sinh(z.real);

  000dc	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  000e1	e8 00 00 00 00	 call	 cos
  000e6	66 0f 28 f0	 movapd	 xmm6, xmm0
  000ea	66 41 0f 28 c0	 movapd	 xmm0, xmm8
  000ef	e8 00 00 00 00	 call	 sinh
  000f4	f2 0f 59 f0	 mulsd	 xmm6, xmm0

; 648  :         r.imag = sin(z.imag) * cosh(z.real);

  000f8	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  000fd	f2 0f 11 36	 movsdx	 QWORD PTR [rsi], xmm6
  00101	e8 00 00 00 00	 call	 sin
  00106	66 0f 28 f0	 movapd	 xmm6, xmm0
  0010a	66 41 0f 28 c0	 movapd	 xmm0, xmm8
  0010f	e8 00 00 00 00	 call	 cosh
  00114	f2 0f 59 f0	 mulsd	 xmm6, xmm0
$LN18@c_sinh:

; 649  :     }
; 650  :     /* detect overflow, and set errno accordingly */
; 651  :     if (Py_IS_INFINITY(r.real) || Py_IS_INFINITY(r.imag))

  00118	f2 0f 10 06	 movsdx	 xmm0, QWORD PTR [rsi]
  0011c	f2 0f 11 76 08	 movsdx	 QWORD PTR [rsi+8], xmm6
  00121	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00127	44 0f 28 44 24
	30		 movaps	 xmm8, XMMWORD PTR [rsp+48]
  0012d	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]
  00132	85 c0		 test	 eax, eax
  00134	75 0e		 jne	 SHORT $LN2@c_sinh
  00136	f2 0f 10 06	 movsdx	 xmm0, QWORD PTR [rsi]
  0013a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00140	85 c0		 test	 eax, eax
  00142	74 26		 je	 SHORT $LN3@c_sinh
$LN2@c_sinh:
  00144	f2 0f 10 46 08	 movsdx	 xmm0, QWORD PTR [rsi+8]
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0014f	85 c0		 test	 eax, eax
  00151	0f 85 71 01 00
	00		 jne	 $LN8@c_sinh
  00157	f2 0f 10 46 08	 movsdx	 xmm0, QWORD PTR [rsi+8]
  0015c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00162	85 c0		 test	 eax, eax
  00164	0f 85 5e 01 00
	00		 jne	 $LN8@c_sinh
$LN3@c_sinh:

; 652  :         errno = ERANGE;

  0016a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00170	c7 00 22 00 00
	00		 mov	 DWORD PTR [rax], 34	; 00000022H
  00176	48 8b c6	 mov	 rax, rsi

; 653  :     else
; 654  :         errno = 0;
; 655  :     return r;
; 656  : }

  00179	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  0017e	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00182	5f		 pop	 rdi
  00183	c3		 ret	 0
$LN13@c_sinh:

; 618  :         if (Py_IS_INFINITY(z.real) && Py_IS_FINITE(z.imag)
; 619  :             && (z.imag != 0.)) {

  00184	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00188	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0018e	85 c0		 test	 eax, eax
  00190	0f 85 a8 00 00
	00		 jne	 $LN12@c_sinh
  00196	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  001a0	85 c0		 test	 eax, eax
  001a2	0f 85 96 00 00
	00		 jne	 $LN12@c_sinh
  001a8	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  001ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  001b3	85 c0		 test	 eax, eax
  001b5	0f 84 83 00 00
	00		 je	 $LN12@c_sinh
  001bb	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  001c0	66 0f 57 d2	 xorpd	 xmm2, xmm2
  001c4	66 0f 2e c2	 ucomisd xmm0, xmm2
  001c8	7a 02		 jp	 SHORT $LN17@c_sinh
  001ca	74 72		 je	 SHORT $LN12@c_sinh
$LN17@c_sinh:

; 620  :             if (z.real > 0) {

  001cc	f2 0f 10 0f	 movsdx	 xmm1, QWORD PTR [rdi]
  001d0	66 0f 2f ca	 comisd	 xmm1, xmm2
  001d4	76 1c		 jbe	 SHORT $LN11@c_sinh

; 621  :                 r.real = copysign(INF, cos(z.imag));

  001d6	e8 00 00 00 00	 call	 cos
  001db	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  001e2	66 0f 28 c8	 movapd	 xmm1, xmm0
  001e6	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  001ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign

; 622  :                 r.imag = copysign(INF, sin(z.imag));
; 623  :             }
; 624  :             else {

  001f0	eb 22		 jmp	 SHORT $LN19@c_sinh
$LN11@c_sinh:

; 625  :                 r.real = -copysign(INF, cos(z.imag));

  001f2	e8 00 00 00 00	 call	 cos
  001f7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  001fe	66 0f 28 c8	 movapd	 xmm1, xmm0
  00202	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00206	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  0020c	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@
$LN19@c_sinh:
  00214	f2 0f 11 06	 movsdx	 QWORD PTR [rsi], xmm0

; 626  :                 r.imag = copysign(INF, sin(z.imag));

  00218	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  0021d	e8 00 00 00 00	 call	 sin
  00222	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  00229	66 0f 28 c8	 movapd	 xmm1, xmm0
  0022d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00231	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  00237	f2 0f 11 46 08	 movsdx	 QWORD PTR [rsi+8], xmm0

; 627  :             }
; 628  :         }
; 629  :         else {

  0023c	eb 44		 jmp	 SHORT $LN9@c_sinh
$LN12@c_sinh:

; 630  :             r = sinh_special_values[special_type(z.real)]
; 631  :                                    [special_type(z.imag)];

  0023e	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00243	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  00248	e8 00 00 00 00	 call	 special_type
  0024d	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00251	48 63 d8	 movsxd	 rbx, eax
  00254	e8 00 00 00 00	 call	 special_type
  00259	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:sinh_special_values
  00260	48 63 c8	 movsxd	 rcx, eax
  00263	48 6b c9 07	 imul	 rcx, 7
  00267	48 03 cb	 add	 rcx, rbx
  0026a	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0026f	48 03 c9	 add	 rcx, rcx
  00272	48 8b 04 ca	 mov	 rax, QWORD PTR [rdx+rcx*8]
  00276	48 89 06	 mov	 QWORD PTR [rsi], rax
  00279	48 8b 44 ca 08	 mov	 rax, QWORD PTR [rdx+rcx*8+8]
  0027e	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
$LN9@c_sinh:

; 632  :         }
; 633  :         /* need to set errno = EDOM if y is +/- infinity and x is not
; 634  :            a NaN */
; 635  :         if (Py_IS_INFINITY(z.imag) && !Py_IS_NAN(z.real))

  00282	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00287	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0028d	85 c0		 test	 eax, eax
  0028f	75 37		 jne	 SHORT $LN8@c_sinh
  00291	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00296	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  0029c	85 c0		 test	 eax, eax
  0029e	75 28		 jne	 SHORT $LN8@c_sinh
  002a0	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  002a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  002aa	85 c0		 test	 eax, eax
  002ac	75 1a		 jne	 SHORT $LN8@c_sinh

; 636  :             errno = EDOM;

  002ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002b4	c7 00 21 00 00
	00		 mov	 DWORD PTR [rax], 33	; 00000021H

; 639  :         return r;

  002ba	48 8b c6	 mov	 rax, rsi

; 653  :     else
; 654  :         errno = 0;
; 655  :     return r;
; 656  : }

  002bd	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  002c2	48 83 c4 50	 add	 rsp, 80			; 00000050H
  002c6	5f		 pop	 rdi
  002c7	c3		 ret	 0
$LN8@c_sinh:

; 637  :         else
; 638  :             errno = 0;

  002c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002ce	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 639  :         return r;

  002d4	48 8b c6	 mov	 rax, rsi

; 653  :     else
; 654  :         errno = 0;
; 655  :     return r;
; 656  : }

  002d7	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  002dc	48 83 c4 50	 add	 rsp, 80			; 00000050H
  002e0	5f		 pop	 rdi
  002e1	c3		 ret	 0
c_sinh	ENDP
_TEXT	ENDS
PUBLIC	__real@3fc0000000000000
_BSS	SEGMENT
sqrt_special_values DB 0310H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
pdata	SEGMENT
$pdata$c_sqrt DD imagerel c_sqrt
	DD	imagerel c_sqrt+53
	DD	imagerel $unwind$c_sqrt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$c_sqrt DD imagerel c_sqrt+53
	DD	imagerel c_sqrt+151
	DD	imagerel $chain$1$c_sqrt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$c_sqrt DD imagerel c_sqrt+151
	DD	imagerel c_sqrt+167
	DD	imagerel $chain$3$c_sqrt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$c_sqrt DD imagerel c_sqrt+167
	DD	imagerel c_sqrt+432
	DD	imagerel $chain$4$c_sqrt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$c_sqrt DD imagerel c_sqrt+432
	DD	imagerel c_sqrt+526
	DD	imagerel $chain$7$c_sqrt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$c_sqrt DD 020521H
	DD	0e3405H
	DD	imagerel c_sqrt
	DD	imagerel c_sqrt+53
	DD	imagerel $unwind$c_sqrt
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$c_sqrt DD 020521H
	DD	047805H
	DD	imagerel c_sqrt+151
	DD	imagerel c_sqrt+167
	DD	imagerel $chain$3$c_sqrt
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$c_sqrt DD 040021H
	DD	038800H
	DD	056800H
	DD	imagerel c_sqrt
	DD	imagerel c_sqrt+53
	DD	imagerel $unwind$c_sqrt
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$c_sqrt DD 040f21H
	DD	03880fH
	DD	056805H
	DD	imagerel c_sqrt
	DD	imagerel c_sqrt+53
	DD	imagerel $unwind$c_sqrt
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_sqrt DD 040a01H
	DD	0f640aH
	DD	07006b20aH
xdata	ENDS
;	COMDAT __real@3fc0000000000000
CONST	SEGMENT
__real@3fc0000000000000 DQ 03fc0000000000000r	; 0.125
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cmathmodule.c
CONST	ENDS
;	COMDAT c_sqrt
_TEXT	SEGMENT
r$ = 32
$T21351 = 112
z$ = 120
c_sqrt	PROC						; COMDAT

; 668  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 669  :     /*
; 670  :        Method: use symmetries to reduce to the case when x = z.real and y
; 671  :        = z.imag are nonnegative.  Then the real part of the result is
; 672  :        given by
; 673  : 
; 674  :          s = sqrt((x + hypot(x, y))/2)
; 675  : 
; 676  :        and the imaginary part is
; 677  : 
; 678  :          d = (y/2)/s
; 679  : 
; 680  :        If either x or y is very large then there's a risk of overflow in
; 681  :        computation of the expression x + hypot(x, y).  We can avoid this
; 682  :        by rewriting the formula for s as:
; 683  : 
; 684  :          s = 2*sqrt(x/8 + hypot(x/8, y/8))
; 685  : 
; 686  :        This costs us two extra multiplications/divisions, but avoids the
; 687  :        overhead of checking for x and y large.
; 688  : 
; 689  :        If both x and y are subnormal then hypot(x, y) may also be
; 690  :        subnormal, so will lack full precision.  We solve this by rescaling
; 691  :        x and y by a sufficiently large power of 2 to ensure that x and y
; 692  :        are normal.
; 693  :     */
; 694  : 
; 695  : 
; 696  :     Py_complex r;
; 697  :     double s,d;
; 698  :     double ax, ay;
; 699  : 
; 700  :     SPECIAL_VALUE(z, sqrt_special_values);

  0000a	f2 0f 10 02	 movsdx	 xmm0, QWORD PTR [rdx]
  0000e	48 8b fa	 mov	 rdi, rdx
  00011	48 8b f1	 mov	 rsi, rcx
  00014	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 8e 01 00
	00		 je	 $LN7@c_sqrt
  00022	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 7b 01 00
	00		 je	 $LN7@c_sqrt

; 701  : 
; 702  :     if (z.real == 0. && z.imag == 0.) {

  00035	0f 29 74 24 50	 movaps	 XMMWORD PTR [rsp+80], xmm6
  0003a	f2 0f 10 37	 movsdx	 xmm6, QWORD PTR [rdi]
  0003e	44 0f 29 44 24
	30		 movaps	 XMMWORD PTR [rsp+48], xmm8
  00044	66 45 0f 57 c0	 xorpd	 xmm8, xmm8
  00049	66 41 0f 2e f0	 ucomisd xmm6, xmm8
  0004e	7a 47		 jp	 SHORT $LN6@c_sqrt
  00050	75 45		 jne	 SHORT $LN6@c_sqrt
  00052	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00057	66 41 0f 2e c0	 ucomisd xmm0, xmm8
  0005c	7a 39		 jp	 SHORT $LN6@c_sqrt
  0005e	75 37		 jne	 SHORT $LN6@c_sqrt

; 703  :         r.real = 0.;

  00060	f2 44 0f 11 44
	24 20		 movsdx	 QWORD PTR r$[rsp], xmm8

; 704  :         r.imag = z.imag;
; 705  :         return r;

  00067	48 8b 44 24 20	 mov	 rax, QWORD PTR r$[rsp]
  0006c	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR r$[rsp+8], xmm0
  00072	48 89 06	 mov	 QWORD PTR [rsi], rax
  00075	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp+8]
  0007a	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
  0007e	48 8b c6	 mov	 rax, rsi
$LN16@c_sqrt:
  00081	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]
  00086	44 0f 28 44 24
	30		 movaps	 xmm8, XMMWORD PTR [rsp+48]

; 731  : }

  0008c	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  00091	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00095	5f		 pop	 rdi
  00096	c3		 ret	 0
$LN6@c_sqrt:

; 706  :     }
; 707  : 
; 708  :     ax = fabs(z.real);

  00097	66 0f 54 35 00
	00 00 00	 andpd	 xmm6, QWORD PTR __mask@@AbsDouble@

; 709  :     ay = fabs(z.imag);
; 710  : 
; 711  :     if (ax < DBL_MIN && ay < DBL_MIN && (ax > 0. || ay > 0.)) {

  0009f	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@0010000000000000
  000a7	0f 29 7c 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm7
  000ac	f2 0f 10 7f 08	 movsdx	 xmm7, QWORD PTR [rdi+8]
  000b1	66 0f 54 3d 00
	00 00 00	 andpd	 xmm7, QWORD PTR __mask@@AbsDouble@
  000b9	66 0f 2f ce	 comisd	 xmm1, xmm6
  000bd	76 5a		 jbe	 SHORT $LN5@c_sqrt
  000bf	66 0f 2f cf	 comisd	 xmm1, xmm7
  000c3	76 54		 jbe	 SHORT $LN5@c_sqrt
  000c5	66 41 0f 2f f0	 comisd	 xmm6, xmm8
  000ca	77 07		 ja	 SHORT $LN4@c_sqrt
  000cc	66 41 0f 2f f8	 comisd	 xmm7, xmm8
  000d1	76 46		 jbe	 SHORT $LN5@c_sqrt
$LN4@c_sqrt:

; 712  :         /* here we catch cases where hypot(ax, ay) is subnormal */
; 713  :         ax = ldexp(ax, CM_SCALE_UP);

  000d3	66 0f 28 c6	 movapd	 xmm0, xmm6
  000d7	ba 35 00 00 00	 mov	 edx, 53			; 00000035H
  000dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ldexp

; 714  :         s = ldexp(sqrt(ax + hypot(ax, ldexp(ay, CM_SCALE_UP))),
; 715  :                   CM_SCALE_DOWN);

  000e2	ba 35 00 00 00	 mov	 edx, 53			; 00000035H
  000e7	66 0f 28 f0	 movapd	 xmm6, xmm0
  000eb	66 0f 28 c7	 movapd	 xmm0, xmm7
  000ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ldexp
  000f5	66 0f 28 c8	 movapd	 xmm1, xmm0
  000f9	66 0f 28 c6	 movapd	 xmm0, xmm6
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__hypot
  00103	f2 0f 58 c6	 addsd	 xmm0, xmm6
  00107	e8 00 00 00 00	 call	 sqrt
  0010c	ba e5 ff ff ff	 mov	 edx, -27
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ldexp

; 716  :     } else {

  00117	eb 2f		 jmp	 SHORT $LN3@c_sqrt
$LN5@c_sqrt:

; 717  :         ax /= 8.;

  00119	f2 0f 59 35 00
	00 00 00	 mulsd	 xmm6, QWORD PTR __real@3fc0000000000000

; 718  :         s = 2.*sqrt(ax + hypot(ax, ay/8.));

  00121	66 0f 28 cf	 movapd	 xmm1, xmm7
  00125	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fc0000000000000
  0012d	66 0f 28 c6	 movapd	 xmm0, xmm6
  00131	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__hypot
  00137	f2 0f 58 c6	 addsd	 xmm0, xmm6
  0013b	e8 00 00 00 00	 call	 sqrt
  00140	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
$LN3@c_sqrt:

; 719  :     }
; 720  :     d = ay/(2.*s);

  00148	66 0f 28 c8	 movapd	 xmm1, xmm0
  0014c	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4000000000000000
  00154	f2 0f 5e f9	 divsd	 xmm7, xmm1

; 721  : 
; 722  :     if (z.real >= 0.) {

  00158	f2 0f 10 0f	 movsdx	 xmm1, QWORD PTR [rdi]
  0015c	66 41 0f 2f c8	 comisd	 xmm1, xmm8

; 723  :         r.real = s;
; 724  :         r.imag = copysign(d, z.imag);

  00161	f2 0f 10 4f 08	 movsdx	 xmm1, QWORD PTR [rdi+8]
  00166	72 0c		 jb	 SHORT $LN2@c_sqrt
  00168	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR r$[rsp], xmm0
  0016e	66 0f 28 c7	 movapd	 xmm0, xmm7

; 725  :     } else {

  00172	eb 06		 jmp	 SHORT $LN17@c_sqrt
$LN2@c_sqrt:

; 726  :         r.real = d;

  00174	f2 0f 11 7c 24
	20		 movsdx	 QWORD PTR r$[rsp], xmm7
$LN17@c_sqrt:

; 727  :         r.imag = copysign(s, z.imag);

  0017a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  00180	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR r$[rsp+8], xmm0

; 728  :     }
; 729  :     errno = 0;

  00186	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0018c	0f 28 7c 24 40	 movaps	 xmm7, XMMWORD PTR [rsp+64]
  00191	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 730  :     return r;

  00197	48 8b 44 24 20	 mov	 rax, QWORD PTR r$[rsp]
  0019c	48 89 06	 mov	 QWORD PTR [rsi], rax
  0019f	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp+8]
  001a4	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
  001a8	48 8b c6	 mov	 rax, rsi
  001ab	e9 d1 fe ff ff	 jmp	 $LN16@c_sqrt
$LN7@c_sqrt:
  001b0	48 89 5c 24 70	 mov	 QWORD PTR [rsp+112], rbx

; 669  :     /*
; 670  :        Method: use symmetries to reduce to the case when x = z.real and y
; 671  :        = z.imag are nonnegative.  Then the real part of the result is
; 672  :        given by
; 673  : 
; 674  :          s = sqrt((x + hypot(x, y))/2)
; 675  : 
; 676  :        and the imaginary part is
; 677  : 
; 678  :          d = (y/2)/s
; 679  : 
; 680  :        If either x or y is very large then there's a risk of overflow in
; 681  :        computation of the expression x + hypot(x, y).  We can avoid this
; 682  :        by rewriting the formula for s as:
; 683  : 
; 684  :          s = 2*sqrt(x/8 + hypot(x/8, y/8))
; 685  : 
; 686  :        This costs us two extra multiplications/divisions, but avoids the
; 687  :        overhead of checking for x and y large.
; 688  : 
; 689  :        If both x and y are subnormal then hypot(x, y) may also be
; 690  :        subnormal, so will lack full precision.  We solve this by rescaling
; 691  :        x and y by a sufficiently large power of 2 to ensure that x and y
; 692  :        are normal.
; 693  :     */
; 694  : 
; 695  : 
; 696  :     Py_complex r;
; 697  :     double s,d;
; 698  :     double ax, ay;
; 699  : 
; 700  :     SPECIAL_VALUE(z, sqrt_special_values);

  001b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  001bb	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  001c1	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  001c6	e8 00 00 00 00	 call	 special_type
  001cb	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  001cf	48 63 d8	 movsxd	 rbx, eax
  001d2	e8 00 00 00 00	 call	 special_type
  001d7	48 63 c8	 movsxd	 rcx, eax
  001da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:sqrt_special_values
  001e1	48 6b c9 07	 imul	 rcx, 7
  001e5	48 03 cb	 add	 rcx, rbx
  001e8	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  001ed	48 03 c9	 add	 rcx, rcx
  001f0	48 8b 04 ca	 mov	 rax, QWORD PTR [rdx+rcx*8]
  001f4	48 89 06	 mov	 QWORD PTR [rsi], rax
  001f7	48 8b 44 ca 08	 mov	 rax, QWORD PTR [rdx+rcx*8+8]
  001fc	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
  00200	48 8b c6	 mov	 rax, rsi

; 731  : }

  00203	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  00208	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0020c	5f		 pop	 rdi
  0020d	c3		 ret	 0
c_sqrt	ENDP
_TEXT	ENDS
EXTRN	tanh:PROC
EXTRN	tan:PROC
_BSS	SEGMENT
tanh_special_values DB 0310H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$c_tanh DD imagerel c_tanh
	DD	imagerel c_tanh+584
	DD	imagerel $unwind$c_tanh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$c_tanh DD imagerel c_tanh+584
	DD	imagerel c_tanh+647
	DD	imagerel $chain$0$c_tanh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$c_tanh DD imagerel c_tanh+647
	DD	imagerel c_tanh+720
	DD	imagerel $chain$1$c_tanh
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$c_tanh DD 021H
	DD	imagerel c_tanh
	DD	imagerel c_tanh+584
	DD	imagerel $unwind$c_tanh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$c_tanh DD 020521H
	DD	0c3405H
	DD	imagerel c_tanh
	DD	imagerel c_tanh+584
	DD	imagerel $unwind$c_tanh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_tanh DD 0a2401H
	DD	028824H
	DD	037818H
	DD	046813H
	DD	0d640aH
	DD	07006920aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT c_tanh
_TEXT	SEGMENT
$T21404 = 96
z$ = 104
c_tanh	PROC						; COMDAT

; 763  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 764  :     /* Formula:
; 765  : 
; 766  :        tanh(x+iy) = (tanh(x)(1+tan(y)^2) + i tan(y)(1-tanh(x))^2) /
; 767  :        (1+tan(y)^2 tanh(x)^2)
; 768  : 
; 769  :        To avoid excessive roundoff error, 1-tanh(x)^2 is better computed
; 770  :        as 1/cosh(x)^2.  When abs(x) is large, we approximate 1-tanh(x)^2
; 771  :        by 4 exp(-2*x) instead, to avoid possible overflow in the
; 772  :        computation of cosh(x).
; 773  : 
; 774  :     */
; 775  : 
; 776  :     Py_complex r;
; 777  :     double tx, ty, cx, txty, denom;
; 778  : 
; 779  :     /* special treatment for tanh(+/-inf + iy) if y is finite and
; 780  :        nonzero */
; 781  :     if (!Py_IS_FINITE(z.real) || !Py_IS_FINITE(z.imag)) {

  0000a	f2 0f 10 02	 movsdx	 xmm0, QWORD PTR [rdx]
  0000e	0f 29 74 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm6
  00013	0f 29 7c 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm7
  00018	48 8b fa	 mov	 rdi, rdx
  0001b	48 8b f1	 mov	 rsi, rcx
  0001e	44 0f 29 44 24
	20		 movaps	 XMMWORD PTR [rsp+32], xmm8
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0002a	85 c0		 test	 eax, eax
  0002c	0f 84 2f 01 00
	00		 je	 $LN9@c_tanh
  00032	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0003d	85 c0		 test	 eax, eax
  0003f	0f 84 1c 01 00
	00		 je	 $LN9@c_tanh

; 805  :         return r;
; 806  :     }
; 807  : 
; 808  :     /* danger of overflow in 2.*z.imag !*/
; 809  :     if (fabs(z.real) > CM_LOG_LARGE_DOUBLE) {

  00045	f2 44 0f 10 07	 movsdx	 xmm8, QWORD PTR [rdi]
  0004a	f2 0f 10 3d 00
	00 00 00	 movsdx	 xmm7, QWORD PTR __mask@@AbsDouble@
  00052	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@7fcfffffffffffff
  0005a	66 41 0f 28 f0	 movapd	 xmm6, xmm8
  0005f	66 0f 54 f7	 andpd	 xmm6, xmm7
  00063	e8 00 00 00 00	 call	 log
  00068	66 0f 2f f0	 comisd	 xmm6, xmm0
  0006c	76 5a		 jbe	 SHORT $LN2@c_tanh

; 810  :         r.real = copysign(1., z.real);

  0006e	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  00076	66 41 0f 28 c8	 movapd	 xmm1, xmm8
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  00081	f2 0f 11 06	 movsdx	 QWORD PTR [rsi], xmm0

; 811  :         r.imag = 4.*sin(z.imag)*cos(z.imag)*exp(-2.*fabs(z.real));

  00085	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00089	66 0f 54 c7	 andpd	 xmm0, xmm7
  0008d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c000000000000000
  00095	e8 00 00 00 00	 call	 exp
  0009a	66 0f 28 f8	 movapd	 xmm7, xmm0
  0009e	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  000a3	e8 00 00 00 00	 call	 sin
  000a8	66 0f 28 f0	 movapd	 xmm6, xmm0
  000ac	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  000b1	f2 0f 59 35 00
	00 00 00	 mulsd	 xmm6, QWORD PTR __real@4010000000000000
  000b9	e8 00 00 00 00	 call	 cos
  000be	f2 0f 59 f0	 mulsd	 xmm6, xmm0
  000c2	f2 0f 59 fe	 mulsd	 xmm7, xmm6

; 812  :     } else {

  000c6	eb 6a		 jmp	 SHORT $LN14@c_tanh
$LN2@c_tanh:

; 813  :         tx = tanh(z.real);

  000c8	66 41 0f 28 c0	 movapd	 xmm0, xmm8
  000cd	e8 00 00 00 00	 call	 tanh
  000d2	66 0f 28 f0	 movapd	 xmm6, xmm0

; 814  :         ty = tan(z.imag);

  000d6	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  000db	e8 00 00 00 00	 call	 tan
  000e0	66 0f 28 f8	 movapd	 xmm7, xmm0

; 815  :         cx = 1./cosh(z.real);

  000e4	66 41 0f 28 c0	 movapd	 xmm0, xmm8
  000e9	e8 00 00 00 00	 call	 cosh
  000ee	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3ff0000000000000

; 816  :         txty = tx*ty;

  000f6	66 0f 28 d7	 movapd	 xmm2, xmm7
  000fa	f2 0f 59 d6	 mulsd	 xmm2, xmm6
  000fe	66 0f 28 d9	 movapd	 xmm3, xmm1

; 817  :         denom = 1. + txty*txty;

  00102	f2 0f 59 d2	 mulsd	 xmm2, xmm2
  00106	f2 0f 5e d8	 divsd	 xmm3, xmm0

; 818  :         r.real = tx*(1.+ty*ty)/denom;

  0010a	66 0f 28 c7	 movapd	 xmm0, xmm7
  0010e	f2 0f 58 d1	 addsd	 xmm2, xmm1
  00112	f2 0f 59 c7	 mulsd	 xmm0, xmm7

; 819  :         r.imag = ((ty/denom)*cx)*cx;

  00116	f2 0f 5e fa	 divsd	 xmm7, xmm2
  0011a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0011e	f2 0f 59 c6	 mulsd	 xmm0, xmm6
  00122	f2 0f 59 fb	 mulsd	 xmm7, xmm3
  00126	f2 0f 5e c2	 divsd	 xmm0, xmm2
  0012a	f2 0f 59 fb	 mulsd	 xmm7, xmm3
  0012e	f2 0f 11 06	 movsdx	 QWORD PTR [rsi], xmm0
$LN14@c_tanh:
  00132	f2 0f 11 7e 08	 movsdx	 QWORD PTR [rsi+8], xmm7
$LN4@c_tanh:

; 804  :             errno = 0;

  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0013d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN3@c_tanh:

; 820  :     }
; 821  :     errno = 0;
; 822  :     return r;
; 823  : }

  00143	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]
  00148	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  0014d	44 0f 28 44 24
	20		 movaps	 xmm8, XMMWORD PTR [rsp+32]
  00153	48 8b c6	 mov	 rax, rsi
  00156	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  0015b	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0015f	5f		 pop	 rdi
  00160	c3		 ret	 0
$LN9@c_tanh:

; 782  :         if (Py_IS_INFINITY(z.real) && Py_IS_FINITE(z.imag)
; 783  :             && (z.imag != 0.)) {

  00161	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00165	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0016b	85 c0		 test	 eax, eax
  0016d	0f 85 d0 00 00
	00		 jne	 $LN8@c_tanh
  00173	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  0017d	85 c0		 test	 eax, eax
  0017f	0f 85 be 00 00
	00		 jne	 $LN8@c_tanh
  00185	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  0018a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00190	85 c0		 test	 eax, eax
  00192	0f 84 ab 00 00
	00		 je	 $LN8@c_tanh
  00198	f2 44 0f 10 47
	08		 movsdx	 xmm8, QWORD PTR [rdi+8]
  0019e	66 0f 57 ff	 xorpd	 xmm7, xmm7
  001a2	66 44 0f 2e c7	 ucomisd xmm8, xmm7
  001a7	7a 06		 jp	 SHORT $LN13@c_tanh
  001a9	0f 84 94 00 00
	00		 je	 $LN8@c_tanh
$LN13@c_tanh:

; 784  :             if (z.real > 0) {

  001af	f2 0f 10 0f	 movsdx	 xmm1, QWORD PTR [rdi]

; 786  :                 r.imag = copysign(0.,
; 787  :                                   2.*sin(z.imag)*cos(z.imag));

  001b3	66 41 0f 28 c0	 movapd	 xmm0, xmm8
  001b8	66 0f 2f cf	 comisd	 xmm1, xmm7
  001bc	76 44		 jbe	 SHORT $LN7@c_tanh

; 785  :                 r.real = 1.0;

  001be	48 b8 00 00 00
	00 00 00 f0 3f	 mov	 rax, 4607182418800017408 ; 3ff0000000000000H
  001c8	48 89 06	 mov	 QWORD PTR [rsi], rax

; 786  :                 r.imag = copysign(0.,
; 787  :                                   2.*sin(z.imag)*cos(z.imag));

  001cb	e8 00 00 00 00	 call	 sin
  001d0	66 0f 28 f0	 movapd	 xmm6, xmm0
  001d4	66 41 0f 28 c0	 movapd	 xmm0, xmm8
  001d9	f2 0f 59 35 00
	00 00 00	 mulsd	 xmm6, QWORD PTR __real@4000000000000000
  001e1	e8 00 00 00 00	 call	 cos
  001e6	f2 0f 59 f0	 mulsd	 xmm6, xmm0
  001ea	66 0f 28 c7	 movapd	 xmm0, xmm7
  001ee	66 0f 28 ce	 movapd	 xmm1, xmm6
  001f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  001f8	f2 0f 11 46 08	 movsdx	 QWORD PTR [rsi+8], xmm0

; 788  :             }
; 789  :             else {

  001fd	e9 85 00 00 00	 jmp	 $LN5@c_tanh
$LN7@c_tanh:

; 790  :                 r.real = -1.0;

  00202	48 b8 00 00 00
	00 00 00 f0 bf	 mov	 rax, -4616189618054758400 ; bff0000000000000H
  0020c	48 89 06	 mov	 QWORD PTR [rsi], rax

; 791  :                 r.imag = copysign(0.,
; 792  :                                   2.*sin(z.imag)*cos(z.imag));

  0020f	e8 00 00 00 00	 call	 sin
  00214	66 0f 28 f0	 movapd	 xmm6, xmm0
  00218	66 41 0f 28 c0	 movapd	 xmm0, xmm8
  0021d	f2 0f 59 35 00
	00 00 00	 mulsd	 xmm6, QWORD PTR __real@4000000000000000
  00225	e8 00 00 00 00	 call	 cos
  0022a	f2 0f 59 f0	 mulsd	 xmm6, xmm0
  0022e	66 0f 28 c7	 movapd	 xmm0, xmm7
  00232	66 0f 28 ce	 movapd	 xmm1, xmm6
  00236	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  0023c	f2 0f 11 46 08	 movsdx	 QWORD PTR [rsi+8], xmm0

; 793  :             }
; 794  :         }
; 795  :         else {

  00241	eb 44		 jmp	 SHORT $LN5@c_tanh
$LN8@c_tanh:

; 796  :             r = tanh_special_values[special_type(z.real)]
; 797  :                                    [special_type(z.imag)];

  00243	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00248	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  0024d	e8 00 00 00 00	 call	 special_type
  00252	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00256	48 63 d8	 movsxd	 rbx, eax
  00259	e8 00 00 00 00	 call	 special_type
  0025e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:tanh_special_values
  00265	48 63 c8	 movsxd	 rcx, eax
  00268	48 6b c9 07	 imul	 rcx, 7
  0026c	48 03 cb	 add	 rcx, rbx
  0026f	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00274	48 03 c9	 add	 rcx, rcx
  00277	48 8b 04 ca	 mov	 rax, QWORD PTR [rdx+rcx*8]
  0027b	48 89 06	 mov	 QWORD PTR [rsi], rax
  0027e	48 8b 44 ca 08	 mov	 rax, QWORD PTR [rdx+rcx*8+8]
  00283	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
$LN5@c_tanh:

; 798  :         }
; 799  :         /* need to set errno = EDOM if z.imag is +/-infinity and
; 800  :            z.real is finite */
; 801  :         if (Py_IS_INFINITY(z.imag) && Py_IS_FINITE(z.real))

  00287	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  0028c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00292	85 c0		 test	 eax, eax
  00294	0f 85 9d fe ff
	ff		 jne	 $LN4@c_tanh
  0029a	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  0029f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  002a5	85 c0		 test	 eax, eax
  002a7	0f 85 8a fe ff
	ff		 jne	 $LN4@c_tanh
  002ad	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  002b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  002b7	85 c0		 test	 eax, eax
  002b9	0f 84 78 fe ff
	ff		 je	 $LN4@c_tanh

; 802  :             errno = EDOM;

  002bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002c5	c7 00 21 00 00
	00		 mov	 DWORD PTR [rax], 33	; 00000021H

; 803  :         else

  002cb	e9 73 fe ff ff	 jmp	 $LN3@c_tanh
c_tanh	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@PNJGEICL@math?5range?5error?$AA@	; `string'
PUBLIC	??_C@_0BC@LMCJDMHE@math?5domain?5error?$AA@	; `string'
EXTRN	PyErr_SetFromErrno:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_error DD imagerel math_error
	DD	imagerel math_error+97
	DD	imagerel $unwind$math_error
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_error DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BB@PNJGEICL@math?5range?5error?$AA@
CONST	SEGMENT
??_C@_0BB@PNJGEICL@math?5range?5error?$AA@ DB 'math range error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LMCJDMHE@math?5domain?5error?$AA@
CONST	SEGMENT
??_C@_0BC@LMCJDMHE@math?5domain?5error?$AA@ DB 'math domain error', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT math_error
_TEXT	SEGMENT
math_error PROC						; COMDAT

; 862  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 863  :     if (errno == EDOM)

  00004	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0000a	83 38 21	 cmp	 DWORD PTR [rax], 33	; 00000021H
  0000d	75 1a		 jne	 SHORT $LN4@math_error

; 864  :         PyErr_SetString(PyExc_ValueError, "math domain error");

  0000f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LMCJDMHE@math?5domain?5error?$AA@
  0001d	e8 00 00 00 00	 call	 PyErr_SetString

; 869  :     return NULL;

  00022	33 c0		 xor	 eax, eax

; 870  : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
$LN4@math_error:

; 865  :     else if (errno == ERANGE)

  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0002f	83 38 22	 cmp	 DWORD PTR [rax], 34	; 00000022H
  00032	75 1a		 jne	 SHORT $LN2@math_error

; 866  :         PyErr_SetString(PyExc_OverflowError, "math range error");

  00034	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@PNJGEICL@math?5range?5error?$AA@
  00042	e8 00 00 00 00	 call	 PyErr_SetString

; 869  :     return NULL;

  00047	33 c0		 xor	 eax, eax

; 870  : }

  00049	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004d	c3		 ret	 0
$LN2@math_error:

; 867  :     else    /* Unexpected math error */
; 868  :         PyErr_SetFromErrno(PyExc_ValueError);

  0004e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00055	e8 00 00 00 00	 call	 PyErr_SetFromErrno

; 869  :     return NULL;

  0005a	33 c0		 xor	 eax, eax

; 870  : }

  0005c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00060	c3		 ret	 0
math_error ENDP
_TEXT	ENDS
PUBLIC	$T21448
PUBLIC	$T21447
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
EXTRN	PyComplex_FromCComplex:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$math_1 DD imagerel math_1
	DD	imagerel math_1+38
	DD	imagerel $unwind$math_1
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$math_1 DD imagerel math_1+38
	DD	imagerel math_1+124
	DD	imagerel $chain$0$math_1
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$math_1 DD imagerel math_1+124
	DD	imagerel math_1+167
	DD	imagerel $chain$2$math_1
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$math_1 DD imagerel math_1+167
	DD	imagerel math_1+194
	DD	imagerel $chain$4$math_1
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$math_1 DD 020021H
	DD	056800H
	DD	imagerel math_1
	DD	imagerel math_1+38
	DD	imagerel $unwind$math_1
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$math_1 DD 020021H
	DD	056800H
	DD	imagerel math_1
	DD	imagerel math_1+38
	DD	imagerel $unwind$math_1
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$math_1 DD 020521H
	DD	056805H
	DD	imagerel math_1
	DD	imagerel math_1+38
	DD	imagerel $unwind$math_1
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$math_1 DD 020601H
	DD	03002b206H
xdata	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT math_1
_TEXT	SEGMENT
x$ = 32
$T21448 = 48
$T21447 = 48
$T21446 = 64
args$ = 112
func$ = 120
math_1	PROC						; COMDAT

; 874  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00006	48 8b da	 mov	 rbx, rdx

; 875  :     Py_complex x,r ;
; 876  :     if (!PyArg_ParseTuple(args, "D", &x))

  00009	4c 8d 44 24 20	 lea	 r8, QWORD PTR x$[rsp]
  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01CKDDGHAB@D?$AA@
  00015	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001a	85 c0		 test	 eax, eax
  0001c	75 08		 jne	 SHORT $LN5@math_1

; 877  :         return NULL;

  0001e	33 c0		 xor	 eax, eax

; 892  :     }
; 893  : }

  00020	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00024	5b		 pop	 rbx
  00025	c3		 ret	 0
$LN5@math_1:
  00026	0f 29 74 24 50	 movaps	 XMMWORD PTR [rsp+80], xmm6

; 878  :     errno = 0;

  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno

; 879  :     PyFPE_START_PROTECT("complex function", return 0);
; 880  :     r = (*func)(x);

  00031	48 8d 54 24 30	 lea	 rdx, QWORD PTR $T21447[rsp]
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  0003c	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T21446[rsp]
  00041	0f 28 44 24 20	 movaps	 xmm0, XMMWORD PTR x$[rsp]
  00046	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T21447[rsp], xmm0
  0004c	ff d3		 call	 rbx
  0004e	0f 10 30	 movups	 xmm6, XMMWORD PTR [rax]

; 881  :     PyFPE_END_PROTECT(r);
; 882  :     if (errno == EDOM) {

  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00057	83 38 21	 cmp	 DWORD PTR [rax], 33	; 00000021H
  0005a	75 20		 jne	 SHORT $LN4@math_1

; 883  :         PyErr_SetString(PyExc_ValueError, "math domain error");

  0005c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LMCJDMHE@math?5domain?5error?$AA@
  0006a	e8 00 00 00 00	 call	 PyErr_SetString

; 884  :         return NULL;

  0006f	33 c0		 xor	 eax, eax
  00071	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]

; 892  :     }
; 893  : }

  00076	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0007a	5b		 pop	 rbx
  0007b	c3		 ret	 0
$LN4@math_1:

; 885  :     }
; 886  :     else if (errno == ERANGE) {

  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00082	83 38 22	 cmp	 DWORD PTR [rax], 34	; 00000022H
  00085	75 20		 jne	 SHORT $LN2@math_1

; 887  :         PyErr_SetString(PyExc_OverflowError, "math range error");

  00087	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@PNJGEICL@math?5range?5error?$AA@
  00095	e8 00 00 00 00	 call	 PyErr_SetString

; 888  :         return NULL;

  0009a	33 c0		 xor	 eax, eax
  0009c	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]

; 892  :     }
; 893  : }

  000a1	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000a5	5b		 pop	 rbx
  000a6	c3		 ret	 0
$LN2@math_1:

; 889  :     }
; 890  :     else {
; 891  :         return PyComplex_FromCComplex(r);

  000a7	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T21448[rsp]
  000ac	66 0f 7f 74 24
	30		 movdqa	 XMMWORD PTR $T21448[rsp], xmm6
  000b2	e8 00 00 00 00	 call	 PyComplex_FromCComplex
  000b7	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]

; 892  :     }
; 893  : }

  000bc	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000c0	5b		 pop	 rbx
  000c1	c3		 ret	 0
math_1	ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT cmath_atanh
_TEXT	SEGMENT
self$ = 8
args$ = 16
cmath_atanh PROC					; COMDAT

; 905  : FUNC1(cmath_atanh, c_atanh)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:c_atanh
  0000a	e9 00 00 00 00	 jmp	 math_1
cmath_atanh ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT cmath_cosh
_TEXT	SEGMENT
self$ = 8
args$ = 16
cmath_cosh PROC						; COMDAT

; 907  : FUNC1(cmath_cosh, c_cosh)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:c_cosh
  0000a	e9 00 00 00 00	 jmp	 math_1
cmath_cosh ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT cmath_exp
_TEXT	SEGMENT
self$ = 8
args$ = 16
cmath_exp PROC						; COMDAT

; 908  : FUNC1(cmath_exp, c_exp)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:c_exp
  0000a	e9 00 00 00 00	 jmp	 math_1
cmath_exp ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT cmath_log10
_TEXT	SEGMENT
self$ = 8
args$ = 16
cmath_log10 PROC					; COMDAT

; 909  : FUNC1(cmath_log10, c_log10)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:c_log10
  0000a	e9 00 00 00 00	 jmp	 math_1
cmath_log10 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT cmath_sinh
_TEXT	SEGMENT
self$ = 8
args$ = 16
cmath_sinh PROC						; COMDAT

; 911  : FUNC1(cmath_sinh, c_sinh)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:c_sinh
  0000a	e9 00 00 00 00	 jmp	 math_1
cmath_sinh ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT cmath_sqrt
_TEXT	SEGMENT
self$ = 8
args$ = 16
cmath_sqrt PROC						; COMDAT

; 912  : FUNC1(cmath_sqrt, c_sqrt)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:c_sqrt
  0000a	e9 00 00 00 00	 jmp	 math_1
cmath_sqrt ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT cmath_tanh
_TEXT	SEGMENT
self$ = 8
args$ = 16
cmath_tanh PROC						; COMDAT

; 914  : FUNC1(cmath_tanh, c_tanh)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:c_tanh
  0000a	e9 00 00 00 00	 jmp	 math_1
cmath_tanh ENDP
_TEXT	ENDS
PUBLIC	$T21508
PUBLIC	??_C@_07FENOPOFN@D?3phase?$AA@			; `string'
EXTRN	PyFloat_FromDouble:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$cmath_phase DD imagerel cmath_phase
	DD	imagerel cmath_phase+35
	DD	imagerel $unwind$cmath_phase
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$cmath_phase DD imagerel cmath_phase+35
	DD	imagerel cmath_phase+103
	DD	imagerel $chain$0$cmath_phase
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$cmath_phase DD imagerel cmath_phase+103
	DD	imagerel cmath_phase+122
	DD	imagerel $chain$2$cmath_phase
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$cmath_phase DD 020021H
	DD	046800H
	DD	imagerel cmath_phase
	DD	imagerel cmath_phase+35
	DD	imagerel $unwind$cmath_phase
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$cmath_phase DD 020521H
	DD	046805H
	DD	imagerel cmath_phase
	DD	imagerel cmath_phase+35
	DD	imagerel $unwind$cmath_phase
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cmath_phase DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT ??_C@_07FENOPOFN@D?3phase?$AA@
CONST	SEGMENT
??_C@_07FENOPOFN@D?3phase?$AA@ DB 'D:phase', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT cmath_phase
_TEXT	SEGMENT
z$ = 32
$T21508 = 48
self$ = 96
args$ = 104
cmath_phase PROC					; COMDAT

; 918  : {

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 919  :     Py_complex z;
; 920  :     double phi;
; 921  :     if (!PyArg_ParseTuple(args, "D:phase", &z))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 20	 lea	 r8, QWORD PTR z$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07FENOPOFN@D?3phase?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN3@cmath_phas

; 922  :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 931  : }

  0001e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00022	c3		 ret	 0
$LN3@cmath_phas:
  00023	0f 29 74 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm6

; 923  :     errno = 0;

  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno

; 924  :     PyFPE_START_PROTECT("arg function", return 0)
; 925  :     phi = c_atan2(z);

  0002e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T21508[rsp]
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00039	0f 28 44 24 20	 movaps	 xmm0, XMMWORD PTR z$[rsp]
  0003e	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T21508[rsp], xmm0
  00044	e8 00 00 00 00	 call	 c_atan2
  00049	66 0f 28 f0	 movapd	 xmm6, xmm0

; 926  :     PyFPE_END_PROTECT(phi)
; 927  :     if (errno != 0)

  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00053	83 38 00	 cmp	 DWORD PTR [rax], 0
  00056	74 0f		 je	 SHORT $LN2@cmath_phas

; 928  :         return math_error();

  00058	e8 00 00 00 00	 call	 math_error
  0005d	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]

; 931  : }

  00062	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00066	c3		 ret	 0
$LN2@cmath_phas:

; 929  :     else
; 930  :         return PyFloat_FromDouble(phi);

  00067	66 0f 28 c6	 movapd	 xmm0, xmm6
  0006b	e8 00 00 00 00	 call	 PyFloat_FromDouble
  00070	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]

; 931  : }

  00075	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00079	c3		 ret	 0
cmath_phase ENDP
_TEXT	ENDS
PUBLIC	??_C@_02EOPBOLLC@dd?$AA@			; `string'
PUBLIC	$T21529
PUBLIC	$T21528
PUBLIC	??_C@_07OLFAJBI@D?3polar?$AA@			; `string'
EXTRN	Py_BuildValue:PROC
EXTRN	_Py_c_abs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$cmath_polar DD imagerel cmath_polar
	DD	imagerel cmath_polar+45
	DD	imagerel $unwind$cmath_polar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$cmath_polar DD imagerel cmath_polar+45
	DD	imagerel cmath_polar+126
	DD	imagerel $chain$1$cmath_polar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$cmath_polar DD imagerel cmath_polar+126
	DD	imagerel cmath_polar+171
	DD	imagerel $chain$3$cmath_polar
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$cmath_polar DD 040021H
	DD	047800H
	DD	056800H
	DD	imagerel cmath_polar
	DD	imagerel cmath_polar+45
	DD	imagerel $unwind$cmath_polar
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$cmath_polar DD 041021H
	DD	047810H
	DD	056805H
	DD	imagerel cmath_polar
	DD	imagerel cmath_polar+45
	DD	imagerel $unwind$cmath_polar
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cmath_polar DD 010401H
	DD	0c204H
xdata	ENDS
;	COMDAT ??_C@_02EOPBOLLC@dd?$AA@
CONST	SEGMENT
??_C@_02EOPBOLLC@dd?$AA@ DB 'dd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07OLFAJBI@D?3polar?$AA@
CONST	SEGMENT
??_C@_07OLFAJBI@D?3polar?$AA@ DB 'D:polar', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT cmath_polar
_TEXT	SEGMENT
z$ = 32
$T21529 = 48
$T21528 = 48
self$ = 112
args$ = 120
cmath_polar PROC					; COMDAT

; 939  : {

  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 940  :     Py_complex z;
; 941  :     double r, phi;
; 942  :     if (!PyArg_ParseTuple(args, "D:polar", &z))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 20	 lea	 r8, QWORD PTR z$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07OLFAJBI@D?3polar?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN3@cmath_pola

; 943  :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 952  : }

  0001e	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00022	c3		 ret	 0
$LN3@cmath_pola:

; 944  :     PyFPE_START_PROTECT("polar function", return 0)
; 945  :     phi = c_atan2(z); /* should not cause any exception */

  00023	0f 28 44 24 20	 movaps	 xmm0, XMMWORD PTR z$[rsp]
  00028	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T21528[rsp]
  0002d	0f 29 74 24 50	 movaps	 XMMWORD PTR [rsp+80], xmm6
  00032	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T21528[rsp], xmm0
  00038	0f 29 7c 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm7
  0003d	e8 00 00 00 00	 call	 c_atan2

; 946  :     r = c_abs(z); /* sets errno to ERANGE on overflow;  otherwise 0 */

  00042	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T21529[rsp]
  00047	0f 28 4c 24 20	 movaps	 xmm1, XMMWORD PTR z$[rsp]
  0004c	66 0f 28 f0	 movapd	 xmm6, xmm0
  00050	66 0f 7f 4c 24
	30		 movdqa	 XMMWORD PTR $T21529[rsp], xmm1
  00056	e8 00 00 00 00	 call	 _Py_c_abs
  0005b	66 0f 28 f8	 movapd	 xmm7, xmm0

; 947  :     PyFPE_END_PROTECT(r)
; 948  :     if (errno != 0)

  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00065	83 38 00	 cmp	 DWORD PTR [rax], 0
  00068	74 14		 je	 SHORT $LN2@cmath_pola

; 949  :         return math_error();

  0006a	e8 00 00 00 00	 call	 math_error
  0006f	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]
  00074	0f 28 7c 24 40	 movaps	 xmm7, XMMWORD PTR [rsp+64]

; 952  : }

  00079	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0007d	c3		 ret	 0
$LN2@cmath_pola:

; 950  :     else
; 951  :         return Py_BuildValue("dd", r, phi);

  0007e	66 0f 28 d6	 movapd	 xmm2, xmm6
  00082	66 0f 28 cf	 movapd	 xmm1, xmm7
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02EOPBOLLC@dd?$AA@
  0008d	66 49 0f 7e d0	 movd	 r8, xmm2
  00092	66 48 0f 7e ca	 movd	 rdx, xmm1
  00097	e8 00 00 00 00	 call	 Py_BuildValue
  0009c	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]
  000a1	0f 28 7c 24 40	 movaps	 xmm7, XMMWORD PTR [rsp+64]

; 952  : }

  000a6	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000aa	c3		 ret	 0
cmath_polar ENDP
_TEXT	ENDS
PUBLIC	$T21551
PUBLIC	??_C@_07JKEMLPPP@dd?3rect?$AA@			; `string'
_BSS	SEGMENT
rect_special_values DB 0310H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cmath_rect DD imagerel cmath_rect
	DD	imagerel cmath_rect+44
	DD	imagerel $unwind$cmath_rect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$cmath_rect DD imagerel cmath_rect+44
	DD	imagerel cmath_rect+177
	DD	imagerel $chain$2$cmath_rect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$cmath_rect DD imagerel cmath_rect+177
	DD	imagerel cmath_rect+188
	DD	imagerel $chain$3$cmath_rect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$cmath_rect DD imagerel cmath_rect+188
	DD	imagerel cmath_rect+474
	DD	imagerel $chain$4$cmath_rect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$cmath_rect DD imagerel cmath_rect+474
	DD	imagerel cmath_rect+530
	DD	imagerel $chain$5$cmath_rect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$cmath_rect DD imagerel cmath_rect+530
	DD	imagerel cmath_rect+616
	DD	imagerel $chain$6$cmath_rect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$cmath_rect DD imagerel cmath_rect+616
	DD	imagerel cmath_rect+640
	DD	imagerel $chain$7$cmath_rect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$cmath_rect DD 021H
	DD	imagerel cmath_rect
	DD	imagerel cmath_rect+44
	DD	imagerel $unwind$cmath_rect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$cmath_rect DD 021H
	DD	imagerel cmath_rect+188
	DD	imagerel cmath_rect+474
	DD	imagerel $chain$4$cmath_rect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$cmath_rect DD 020521H
	DD	0c3405H
	DD	imagerel cmath_rect+188
	DD	imagerel cmath_rect+474
	DD	imagerel $chain$4$cmath_rect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$cmath_rect DD 060021H
	DD	037800H
	DD	046800H
	DD	0d7400H
	DD	imagerel cmath_rect
	DD	imagerel cmath_rect+44
	DD	imagerel $unwind$cmath_rect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$cmath_rect DD 021H
	DD	imagerel cmath_rect
	DD	imagerel cmath_rect+44
	DD	imagerel $unwind$cmath_rect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$cmath_rect DD 060f21H
	DD	03780fH
	DD	04680aH
	DD	0d7405H
	DD	imagerel cmath_rect
	DD	imagerel cmath_rect+44
	DD	imagerel $unwind$cmath_rect
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cmath_rect DD 020901H
	DD	050029209H
xdata	ENDS
;	COMDAT ??_C@_07JKEMLPPP@dd?3rect?$AA@
CONST	SEGMENT
??_C@_07JKEMLPPP@dd?3rect?$AA@ DB 'dd:rect', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT cmath_rect
_TEXT	SEGMENT
$T21551 = 32
z$ = 32
self$ = 96
args$ = 104
phi$ = 112
r$ = 120
cmath_rect PROC						; COMDAT

; 974  : {

  00000	40 55		 push	 rbp
  00002	48 8b ec	 mov	 rbp, rsp
  00005	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 975  :     Py_complex z;
; 976  :     double r, phi;
; 977  :     if (!PyArg_ParseTuple(args, "dd:rect", &r, &phi))

  00009	48 8b ca	 mov	 rcx, rdx
  0000c	4c 8d 4d 20	 lea	 r9, QWORD PTR phi$[rbp-80]
  00010	4c 8d 45 28	 lea	 r8, QWORD PTR r$[rbp-80]
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07JKEMLPPP@dd?3rect?$AA@
  0001b	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00020	85 c0		 test	 eax, eax
  00022	75 08		 jne	 SHORT $LN14@cmath_rect

; 978  :         return NULL;

  00024	33 c0		 xor	 eax, eax

; 1027 : }

  00026	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
$LN14@cmath_rect:
  0002c	48 89 7c 24 68	 mov	 QWORD PTR [rsp+104], rdi
  00031	0f 29 74 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm6
  00036	0f 29 7c 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm7

; 979  :     errno = 0;

  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00041	33 ff		 xor	 edi, edi
  00043	89 38		 mov	 DWORD PTR [rax], edi

; 980  :     PyFPE_START_PROTECT("rect function", return 0)
; 981  : 
; 982  :     /* deal with special values */
; 983  :     if (!Py_IS_FINITE(r) || !Py_IS_FINITE(phi)) {

  00045	f2 0f 10 45 28	 movsdx	 xmm0, QWORD PTR r$[rbp-80]
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00050	85 c0		 test	 eax, eax
  00052	0f 84 87 00 00
	00		 je	 $LN12@cmath_rect
  00058	f2 0f 10 45 20	 movsdx	 xmm0, QWORD PTR phi$[rbp-80]
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00063	85 c0		 test	 eax, eax
  00065	74 78		 je	 SHORT $LN12@cmath_rect

; 1008 :     }
; 1009 :     else if (phi == 0.0) {

  00067	f2 0f 10 7d 20	 movsdx	 xmm7, QWORD PTR phi$[rbp-80]
  0006c	66 0f 2e 3d 00
	00 00 00	 ucomisd xmm7, QWORD PTR __real@0000000000000000
  00074	7a 46		 jp	 SHORT $LN4@cmath_rect
  00076	75 44		 jne	 SHORT $LN4@cmath_rect

; 1010 :         /* Workaround for buggy results with phi=-0.0 on OS X 10.8.  See
; 1011 :            bugs.python.org/issue18513. */
; 1012 :         z.real = r;

  00078	f2 0f 10 45 28	 movsdx	 xmm0, QWORD PTR r$[rbp-80]
  0007d	f2 0f 11 45 d0	 movsdx	 QWORD PTR z$[rbp-80], xmm0

; 1013 :         z.imag = r * phi;

  00082	f2 0f 59 c7	 mulsd	 xmm0, xmm7
$LN19@cmath_rect:

; 1018 :         z.imag = r * sin(phi);

  00086	f2 0f 11 45 d8	 movsdx	 QWORD PTR z$[rbp-72], xmm0
$LN7@cmath_rect:

; 1007 :             errno = 0;

  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00091	89 38		 mov	 DWORD PTR [rax], edi
$LN6@cmath_rect:

; 1020 :     }
; 1021 : 
; 1022 :     PyFPE_END_PROTECT(z)
; 1023 :     if (errno != 0)

  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00099	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  0009e	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]
  000a3	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  000a8	83 38 00	 cmp	 DWORD PTR [rax], 0
  000ab	0f 84 b7 01 00
	00		 je	 $LN2@cmath_rect

; 1024 :         return math_error();

  000b1	e8 00 00 00 00	 call	 math_error

; 1027 : }

  000b6	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000ba	5d		 pop	 rbp
  000bb	c3		 ret	 0
$LN4@cmath_rect:

; 1014 :         errno = 0;
; 1015 :     }
; 1016 :     else {
; 1017 :         z.real = r * cos(phi);

  000bc	66 0f 28 c7	 movapd	 xmm0, xmm7
  000c0	e8 00 00 00 00	 call	 cos
  000c5	f2 0f 59 45 28	 mulsd	 xmm0, QWORD PTR r$[rbp-80]
  000ca	f2 0f 11 45 d0	 movsdx	 QWORD PTR z$[rbp-80], xmm0

; 1018 :         z.imag = r * sin(phi);

  000cf	66 0f 28 c7	 movapd	 xmm0, xmm7
  000d3	e8 00 00 00 00	 call	 sin
  000d8	f2 0f 59 45 28	 mulsd	 xmm0, QWORD PTR r$[rbp-80]

; 1019 :         errno = 0;

  000dd	eb a7		 jmp	 SHORT $LN19@cmath_rect
$LN12@cmath_rect:

; 984  :         /* if r is +/-infinity and phi is finite but nonzero then
; 985  :            result is (+-INF +-INF i), but we need to compute cos(phi)
; 986  :            and sin(phi) to figure out the signs. */
; 987  :         if (Py_IS_INFINITY(r) && (Py_IS_FINITE(phi)
; 988  :                                   && (phi != 0.))) {

  000df	f2 0f 10 45 28	 movsdx	 xmm0, QWORD PTR r$[rbp-80]
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  000ea	66 0f 57 ff	 xorpd	 xmm7, xmm7
  000ee	85 c0		 test	 eax, eax
  000f0	0f 85 df 00 00
	00		 jne	 $LN11@cmath_rect
  000f6	f2 0f 10 45 28	 movsdx	 xmm0, QWORD PTR r$[rbp-80]
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00101	85 c0		 test	 eax, eax
  00103	0f 85 cc 00 00
	00		 jne	 $LN11@cmath_rect
  00109	f2 0f 10 45 20	 movsdx	 xmm0, QWORD PTR phi$[rbp-80]
  0010e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00114	85 c0		 test	 eax, eax
  00116	0f 84 b9 00 00
	00		 je	 $LN11@cmath_rect
  0011c	f2 0f 10 45 20	 movsdx	 xmm0, QWORD PTR phi$[rbp-80]
  00121	66 0f 2e c7	 ucomisd xmm0, xmm7
  00125	7a 06		 jp	 SHORT $LN18@cmath_rect
  00127	0f 84 a8 00 00
	00		 je	 $LN11@cmath_rect
$LN18@cmath_rect:

; 989  :             if (r > 0) {

  0012d	f2 0f 10 4d 28	 movsdx	 xmm1, QWORD PTR r$[rbp-80]
  00132	66 0f 2f cf	 comisd	 xmm1, xmm7
  00136	76 48		 jbe	 SHORT $LN10@cmath_rect

; 990  :                 z.real = copysign(INF, cos(phi));

  00138	e8 00 00 00 00	 call	 cos
  0013d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  00144	66 0f 28 c8	 movapd	 xmm1, xmm0
  00148	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0014c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  00152	f2 0f 11 45 d0	 movsdx	 QWORD PTR z$[rbp-80], xmm0

; 991  :                 z.imag = copysign(INF, sin(phi));

  00157	f2 0f 10 45 20	 movsdx	 xmm0, QWORD PTR phi$[rbp-80]
  0015c	e8 00 00 00 00	 call	 sin
  00161	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  00168	66 0f 28 c8	 movapd	 xmm1, xmm0
  0016c	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00170	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  00176	f2 0f 11 45 d8	 movsdx	 QWORD PTR z$[rbp-72], xmm0

; 992  :             }
; 993  :             else {

  0017b	e9 92 00 00 00	 jmp	 $LN8@cmath_rect
$LN10@cmath_rect:

; 994  :                 z.real = -copysign(INF, cos(phi));

  00180	e8 00 00 00 00	 call	 cos
  00185	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  0018c	66 0f 28 c8	 movapd	 xmm1, xmm0
  00190	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00194	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  0019a	f2 0f 10 35 00
	00 00 00	 movsdx	 xmm6, QWORD PTR __mask@@NegDouble@
  001a2	66 0f 57 c6	 xorpd	 xmm0, xmm6
  001a6	f2 0f 11 45 d0	 movsdx	 QWORD PTR z$[rbp-80], xmm0

; 995  :                 z.imag = -copysign(INF, sin(phi));

  001ab	f2 0f 10 45 20	 movsdx	 xmm0, QWORD PTR phi$[rbp-80]
  001b0	e8 00 00 00 00	 call	 sin
  001b5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  001bc	66 0f 28 c8	 movapd	 xmm1, xmm0
  001c0	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  001c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  001ca	66 0f 57 c6	 xorpd	 xmm0, xmm6
  001ce	f2 0f 11 45 d8	 movsdx	 QWORD PTR z$[rbp-72], xmm0

; 996  :             }
; 997  :         }
; 998  :         else {

  001d3	eb 3d		 jmp	 SHORT $LN8@cmath_rect
$LN11@cmath_rect:

; 999  :             z = rect_special_values[special_type(r)]
; 1000 :                                    [special_type(phi)];

  001d5	f2 0f 10 45 28	 movsdx	 xmm0, QWORD PTR r$[rbp-80]
  001da	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  001df	e8 00 00 00 00	 call	 special_type
  001e4	f2 0f 10 45 20	 movsdx	 xmm0, QWORD PTR phi$[rbp-80]
  001e9	48 63 d8	 movsxd	 rbx, eax
  001ec	48 6b db 07	 imul	 rbx, 7
  001f0	e8 00 00 00 00	 call	 special_type
  001f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:rect_special_values
  001fc	48 63 c8	 movsxd	 rcx, eax
  001ff	48 03 cb	 add	 rcx, rbx
  00202	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00207	48 03 c9	 add	 rcx, rcx
  0020a	0f 10 04 ca	 movups	 xmm0, XMMWORD PTR [rdx+rcx*8]
  0020e	0f 29 45 d0	 movaps	 XMMWORD PTR z$[rbp-80], xmm0
$LN8@cmath_rect:

; 1001 :         }
; 1002 :         /* need to set errno = EDOM if r is a nonzero number and phi
; 1003 :            is infinite */
; 1004 :         if (r != 0. && !Py_IS_NAN(r) && Py_IS_INFINITY(phi))

  00212	f2 0f 10 45 28	 movsdx	 xmm0, QWORD PTR r$[rbp-80]
  00217	66 0f 2e c7	 ucomisd xmm0, xmm7
  0021b	7a 06		 jp	 SHORT $LN17@cmath_rect
  0021d	0f 84 68 fe ff
	ff		 je	 $LN7@cmath_rect
$LN17@cmath_rect:
  00223	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00229	85 c0		 test	 eax, eax
  0022b	0f 85 5a fe ff
	ff		 jne	 $LN7@cmath_rect
  00231	f2 0f 10 45 20	 movsdx	 xmm0, QWORD PTR phi$[rbp-80]
  00236	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0023c	85 c0		 test	 eax, eax
  0023e	0f 85 47 fe ff
	ff		 jne	 $LN7@cmath_rect
  00244	f2 0f 10 45 20	 movsdx	 xmm0, QWORD PTR phi$[rbp-80]
  00249	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  0024f	85 c0		 test	 eax, eax
  00251	0f 85 34 fe ff
	ff		 jne	 $LN7@cmath_rect

; 1005 :             errno = EDOM;

  00257	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0025d	c7 00 21 00 00
	00		 mov	 DWORD PTR [rax], 33	; 00000021H

; 1006 :         else

  00263	e9 2b fe ff ff	 jmp	 $LN6@cmath_rect
$LN2@cmath_rect:

; 1025 :     else
; 1026 :         return PyComplex_FromCComplex(z);

  00268	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR z$[rbp-80]
  0026c	48 8d 4d d0	 lea	 rcx, QWORD PTR $T21551[rbp-80]
  00270	66 0f 7f 45 d0	 movdqa	 XMMWORD PTR $T21551[rbp-80], xmm0
  00275	e8 00 00 00 00	 call	 PyComplex_FromCComplex

; 1027 : }

  0027a	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0027e	5d		 pop	 rbp
  0027f	c3		 ret	 0
cmath_rect ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@LDOEJOIF@D?3isfinite?$AA@		; `string'
EXTRN	PyBool_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$cmath_isfinite DD imagerel cmath_isfinite
	DD	imagerel cmath_isfinite+94
	DD	imagerel $unwind$cmath_isfinite
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cmath_isfinite DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0L@LDOEJOIF@D?3isfinite?$AA@
CONST	SEGMENT
??_C@_0L@LDOEJOIF@D?3isfinite?$AA@ DB 'D:isfinite', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT cmath_isfinite
_TEXT	SEGMENT
z$ = 32
self$ = 64
args$ = 72
cmath_isfinite PROC					; COMDAT

; 1035 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1036 :     Py_complex z;
; 1037 :     if (!PyArg_ParseTuple(args, "D:isfinite", &z))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 20	 lea	 r8, QWORD PTR z$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LDOEJOIF@D?3isfinite?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN1@cmath_isfi

; 1038 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1040 : }

  0001e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00022	c3		 ret	 0
$LN1@cmath_isfi:

; 1039 :     return PyBool_FromLong(Py_IS_FINITE(z.real) && Py_IS_FINITE(z.imag));

  00023	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR z$[rsp]
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0002f	85 c0		 test	 eax, eax
  00031	74 1f		 je	 SHORT $LN4@cmath_isfi
  00033	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR z$[rsp+8]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0003f	85 c0		 test	 eax, eax
  00041	74 0f		 je	 SHORT $LN4@cmath_isfi
  00043	b9 01 00 00 00	 mov	 ecx, 1
  00048	e8 00 00 00 00	 call	 PyBool_FromLong

; 1040 : }

  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
$LN4@cmath_isfi:

; 1039 :     return PyBool_FromLong(Py_IS_FINITE(z.real) && Py_IS_FINITE(z.imag));

  00052	33 c9		 xor	 ecx, ecx
  00054	e8 00 00 00 00	 call	 PyBool_FromLong

; 1040 : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
cmath_isfinite ENDP
_TEXT	ENDS
PUBLIC	??_C@_07MDACLFBO@D?3isnan?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$cmath_isnan DD imagerel cmath_isnan
	DD	imagerel cmath_isnan+94
	DD	imagerel $unwind$cmath_isnan
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cmath_isnan DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_07MDACLFBO@D?3isnan?$AA@
CONST	SEGMENT
??_C@_07MDACLFBO@D?3isnan?$AA@ DB 'D:isnan', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT cmath_isnan
_TEXT	SEGMENT
z$ = 32
self$ = 64
args$ = 72
cmath_isnan PROC					; COMDAT

; 1048 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1049 :     Py_complex z;
; 1050 :     if (!PyArg_ParseTuple(args, "D:isnan", &z))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 20	 lea	 r8, QWORD PTR z$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07MDACLFBO@D?3isnan?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN1@cmath_isna

; 1051 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1053 : }

  0001e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00022	c3		 ret	 0
$LN1@cmath_isna:

; 1052 :     return PyBool_FromLong(Py_IS_NAN(z.real) || Py_IS_NAN(z.imag));

  00023	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR z$[rsp]
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  0002f	85 c0		 test	 eax, eax
  00031	75 1c		 jne	 SHORT $LN4@cmath_isna
  00033	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR z$[rsp+8]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  0003f	85 c0		 test	 eax, eax
  00041	75 0c		 jne	 SHORT $LN4@cmath_isna
  00043	33 c9		 xor	 ecx, ecx
  00045	e8 00 00 00 00	 call	 PyBool_FromLong

; 1053 : }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
$LN4@cmath_isna:

; 1052 :     return PyBool_FromLong(Py_IS_NAN(z.real) || Py_IS_NAN(z.imag));

  0004f	b9 01 00 00 00	 mov	 ecx, 1
  00054	e8 00 00 00 00	 call	 PyBool_FromLong

; 1053 : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
cmath_isnan ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cmath_isinf DD imagerel cmath_isinf
	DD	imagerel cmath_isinf+126
	DD	imagerel $unwind$cmath_isinf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cmath_isinf DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT cmath_isinf
_TEXT	SEGMENT
z$ = 32
self$ = 64
args$ = 72
cmath_isinf PROC					; COMDAT

; 1061 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1062 :     Py_complex z;
; 1063 :     if (!PyArg_ParseTuple(args, "D:isnan", &z))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 20	 lea	 r8, QWORD PTR z$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07MDACLFBO@D?3isnan?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN1@cmath_isin

; 1064 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1067 : }

  0001e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00022	c3		 ret	 0
$LN1@cmath_isin:

; 1065 :     return PyBool_FromLong(Py_IS_INFINITY(z.real) ||
; 1066 :                            Py_IS_INFINITY(z.imag));

  00023	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR z$[rsp]
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0002f	85 c0		 test	 eax, eax
  00031	75 10		 jne	 SHORT $LN4@cmath_isin
  00033	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR z$[rsp]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  0003f	85 c0		 test	 eax, eax
  00041	74 20		 je	 SHORT $LN6@cmath_isin
$LN4@cmath_isin:
  00043	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR z$[rsp+8]
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0004f	85 c0		 test	 eax, eax
  00051	75 1f		 jne	 SHORT $LN5@cmath_isin
  00053	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR z$[rsp+8]
  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  0005f	85 c0		 test	 eax, eax
  00061	75 0f		 jne	 SHORT $LN5@cmath_isin
$LN6@cmath_isin:
  00063	b9 01 00 00 00	 mov	 ecx, 1
  00068	e8 00 00 00 00	 call	 PyBool_FromLong

; 1067 : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
$LN5@cmath_isin:

; 1065 :     return PyBool_FromLong(Py_IS_INFINITY(z.real) ||
; 1066 :                            Py_IS_INFINITY(z.imag));

  00072	33 c9		 xor	 ecx, ecx
  00074	e8 00 00 00 00	 call	 PyBool_FromLong

; 1067 : }

  00079	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007d	c3		 ret	 0
cmath_isinf ENDP
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	__real@bfe921fb54442d18
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@c002d97c7f3321d2
PUBLIC	__real@c00921fb54442d18
PUBLIC	__real@8000000000000000
PUBLIC	__real@c6fd67cf2c62297c
PUBLIC	??_C@_01KGKMHCOC@e?$AA@				; `string'
PUBLIC	??_C@_02OAHAJOFD@pi?$AA@			; `string'
PUBLIC	PyInit_cmath
EXTRN	PyModule_AddObject:PROC
EXTRN	PyModule_Create2:PROC
_BSS	SEGMENT
asinh_special_values DB 0310H DUP (?)
acosh_special_values DB 0310H DUP (?)
acos_special_values DB 0310H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit_cmath DD imagerel $LN4
	DD	imagerel $LN4+13106
	DD	imagerel $unwind$PyInit_cmath
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_cmath DD 0157601H
	DD	02e876H
	DD	03d870H
	DD	04c86aH
	DD	05b856H
	DD	06a850H
	DD	07984aH
	DD	088844H
	DD	09783bH
	DD	0a6833H
	DD	0160109H
	DD	03002H
xdata	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfe921fb54442d18
CONST	SEGMENT
__real@bfe921fb54442d18 DQ 0bfe921fb54442d18r	; -0.785398
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@c002d97c7f3321d2
CONST	SEGMENT
__real@c002d97c7f3321d2 DQ 0c002d97c7f3321d2r	; -2.35619
CONST	ENDS
;	COMDAT __real@c00921fb54442d18
CONST	SEGMENT
__real@c00921fb54442d18 DQ 0c00921fb54442d18r	; -3.14159
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@c6fd67cf2c62297c
CONST	SEGMENT
__real@c6fd67cf2c62297c DQ 0c6fd67cf2c62297cr	; -9.54263e+033
CONST	ENDS
;	COMDAT ??_C@_01KGKMHCOC@e?$AA@
CONST	SEGMENT
??_C@_01KGKMHCOC@e?$AA@ DB 'e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OAHAJOFD@pi?$AA@
CONST	SEGMENT
??_C@_02OAHAJOFD@pi?$AA@ DB 'pi', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyInit_cmath
_TEXT	SEGMENT
PyInit_cmath PROC					; COMDAT

; 1119 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H

; 1120 :     PyObject *m;
; 1121 : 
; 1122 :     m = PyModule_Create(&cmathmodule);

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cmathmodule
  00010	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00015	e8 00 00 00 00	 call	 PyModule_Create2
  0001a	48 8b d8	 mov	 rbx, rax

; 1123 :     if (m == NULL)

  0001d	48 85 c0	 test	 rax, rax
  00020	75 09		 jne	 SHORT $LN1@PyInit_cma

; 1245 : }

  00022	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  00029	5b		 pop	 rbx
  0002a	c3		 ret	 0
$LN1@PyInit_cma:
  0002b	0f 29 b4 24 a0
	00 00 00	 movaps	 XMMWORD PTR [rsp+160], xmm6
  00033	0f 29 bc 24 90
	00 00 00	 movaps	 XMMWORD PTR [rsp+144], xmm7
  0003b	44 0f 29 84 24
	80 00 00 00	 movaps	 XMMWORD PTR [rsp+128], xmm8
  00044	44 0f 29 4c 24
	70		 movaps	 XMMWORD PTR [rsp+112], xmm9
  0004a	44 0f 29 54 24
	60		 movaps	 XMMWORD PTR [rsp+96], xmm10
  00050	44 0f 29 5c 24
	50		 movaps	 XMMWORD PTR [rsp+80], xmm11

; 1124 :         return NULL;
; 1125 : 
; 1126 :     PyModule_AddObject(m, "pi",
; 1127 :                        PyFloat_FromDouble(Py_MATH_PI));

  00056	f2 44 0f 10 0d
	00 00 00 00	 movsdx	 xmm9, QWORD PTR __real@400921fb54442d18
  0005f	66 41 0f 28 c1	 movapd	 xmm0, xmm9
  00064	44 0f 29 64 24
	40		 movaps	 XMMWORD PTR [rsp+64], xmm12
  0006a	44 0f 29 6c 24
	30		 movaps	 XMMWORD PTR [rsp+48], xmm13
  00070	44 0f 29 74 24
	20		 movaps	 XMMWORD PTR [rsp+32], xmm14
  00076	e8 00 00 00 00	 call	 PyFloat_FromDouble
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02OAHAJOFD@pi?$AA@
  00082	48 8b cb	 mov	 rcx, rbx
  00085	4c 8b c0	 mov	 r8, rax
  00088	e8 00 00 00 00	 call	 PyModule_AddObject

; 1128 :     PyModule_AddObject(m, "e", PyFloat_FromDouble(Py_MATH_E));

  0008d	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@4005bf0a8b145769
  00095	e8 00 00 00 00	 call	 PyFloat_FromDouble
  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01KGKMHCOC@e?$AA@
  000a1	4c 8b c0	 mov	 r8, rax
  000a4	48 8b cb	 mov	 rcx, rbx
  000a7	e8 00 00 00 00	 call	 PyModule_AddObject

; 1129 : 
; 1130 :     /* initialize special value tables */
; 1131 : 
; 1132 : #define INIT_SPECIAL_VALUES(NAME, BODY) { Py_complex* p = (Py_complex*)NAME; BODY }
; 1133 : #define C(REAL, IMAG) p->real = REAL; p->imag = IMAG; ++p;
; 1134 : 
; 1135 :     INIT_SPECIAL_VALUES(acos_special_values, {
; 1136 :       C(P34,INF) C(P,INF)  C(P,INF)  C(P,-INF)  C(P,-INF)  C(P34,-INF) C(N,INF)
; 1137 :       C(P12,INF) C(U,U)    C(U,U)    C(U,U)     C(U,U)     C(P12,-INF) C(N,N)
; 1138 :       C(P12,INF) C(U,U)    C(P12,0.) C(P12,-0.) C(U,U)     C(P12,-INF) C(P12,N)
; 1139 :       C(P12,INF) C(U,U)    C(P12,0.) C(P12,-0.) C(U,U)     C(P12,-INF) C(P12,N)
; 1140 :       C(P12,INF) C(U,U)    C(U,U)    C(U,U)     C(U,U)     C(P12,-INF) C(N,N)
; 1141 :       C(P14,INF) C(0.,INF) C(0.,INF) C(0.,-INF) C(0.,-INF) C(P14,-INF) C(N,INF)
; 1142 :       C(N,INF)   C(N,N)    C(N,N)    C(N,N)     C(N,N)     C(N,-INF)   C(N,N)
; 1143 :     })

  000ac	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  000b3	f2 44 0f 10 2d
	00 00 00 00	 movsdx	 xmm13, QWORD PTR __real@c6fd67cf2c62297c
  000bc	f2 44 0f 10 1d
	00 00 00 00	 movsdx	 xmm11, QWORD PTR __mask@@NegDouble@
  000c5	f2 44 0f 10 05
	00 00 00 00	 movsdx	 xmm8, QWORD PTR __real@4002d97c7f3321d2
  000ce	f2 44 0f 10 15
	00 00 00 00	 movsdx	 xmm10, QWORD PTR __real@3ff921fb54442d18
  000d7	66 45 0f 57 f6	 xorpd	 xmm14, xmm14
  000dc	f2 44 0f 11 05
	00 00 00 00	 movsdx	 QWORD PTR acos_special_values, xmm8
  000e5	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  000e9	f2 44 0f 11 0d
	10 00 00 00	 movsdx	 QWORD PTR acos_special_values+16, xmm9
  000f2	f2 0f 11 05 08
	00 00 00	 movsdx	 QWORD PTR acos_special_values+8, xmm0
  000fa	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  000fe	f2 44 0f 11 0d
	20 00 00 00	 movsdx	 QWORD PTR acos_special_values+32, xmm9
  00107	f2 0f 11 0d 18
	00 00 00	 movsdx	 QWORD PTR acos_special_values+24, xmm1
  0010f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00113	f2 44 0f 11 0d
	30 00 00 00	 movsdx	 QWORD PTR acos_special_values+48, xmm9
  0011c	f2 0f 11 05 28
	00 00 00	 movsdx	 QWORD PTR acos_special_values+40, xmm0
  00124	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00128	f2 44 0f 11 0d
	40 00 00 00	 movsdx	 QWORD PTR acos_special_values+64, xmm9
  00131	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  00136	f2 0f 11 0d 38
	00 00 00	 movsdx	 QWORD PTR acos_special_values+56, xmm1
  0013e	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00142	f2 44 0f 11 05
	50 00 00 00	 movsdx	 QWORD PTR acos_special_values+80, xmm8
  0014b	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  00150	f2 0f 11 05 48
	00 00 00	 movsdx	 QWORD PTR acos_special_values+72, xmm0
  00158	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0015c	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  00161	f2 0f 11 0d 58
	00 00 00	 movsdx	 QWORD PTR acos_special_values+88, xmm1
  00169	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0016d	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00172	f2 0f 11 05 60
	00 00 00	 movsdx	 QWORD PTR acos_special_values+96, xmm0
  0017a	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0017e	f2 44 0f 11 15
	70 00 00 00	 movsdx	 QWORD PTR acos_special_values+112, xmm10
  00187	f2 0f 11 05 68
	00 00 00	 movsdx	 QWORD PTR acos_special_values+104, xmm0
  0018f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00193	f2 44 0f 11 2d
	80 00 00 00	 movsdx	 QWORD PTR acos_special_values+128, xmm13
  0019c	f2 0f 11 05 78
	00 00 00	 movsdx	 QWORD PTR acos_special_values+120, xmm0
  001a4	f2 44 0f 11 2d
	88 00 00 00	 movsdx	 QWORD PTR acos_special_values+136, xmm13
  001ad	f2 44 0f 11 2d
	90 00 00 00	 movsdx	 QWORD PTR acos_special_values+144, xmm13
  001b6	f2 44 0f 11 2d
	98 00 00 00	 movsdx	 QWORD PTR acos_special_values+152, xmm13
  001bf	f2 44 0f 11 2d
	a0 00 00 00	 movsdx	 QWORD PTR acos_special_values+160, xmm13
  001c8	f2 44 0f 11 2d
	a8 00 00 00	 movsdx	 QWORD PTR acos_special_values+168, xmm13
  001d1	f2 44 0f 11 2d
	b0 00 00 00	 movsdx	 QWORD PTR acos_special_values+176, xmm13
  001da	f2 44 0f 11 2d
	b8 00 00 00	 movsdx	 QWORD PTR acos_special_values+184, xmm13
  001e3	f2 44 0f 11 15
	c0 00 00 00	 movsdx	 QWORD PTR acos_special_values+192, xmm10
  001ec	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  001f0	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  001f5	f2 0f 11 05 c8
	00 00 00	 movsdx	 QWORD PTR acos_special_values+200, xmm0
  001fd	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00201	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00206	f2 0f 11 0d d0
	00 00 00	 movsdx	 QWORD PTR acos_special_values+208, xmm1
  0020e	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00212	f2 44 0f 11 15
	e0 00 00 00	 movsdx	 QWORD PTR acos_special_values+224, xmm10
  0021b	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00220	f2 0f 11 05 d8
	00 00 00	 movsdx	 QWORD PTR acos_special_values+216, xmm0
  00228	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0022c	f2 44 0f 11 2d
	f0 00 00 00	 movsdx	 QWORD PTR acos_special_values+240, xmm13
  00235	f2 0f 11 05 e8
	00 00 00	 movsdx	 QWORD PTR acos_special_values+232, xmm0
  0023d	f2 44 0f 11 2d
	f8 00 00 00	 movsdx	 QWORD PTR acos_special_values+248, xmm13
  00246	f2 44 0f 11 15
	00 01 00 00	 movsdx	 QWORD PTR acos_special_values+256, xmm10
  0024f	f2 44 0f 10 25
	00 00 00 00	 movsdx	 xmm12, QWORD PTR __real@8000000000000000
  00258	f2 0f 10 3d 00
	00 00 00	 movsdx	 xmm7, QWORD PTR __real@3fe921fb54442d18
  00260	f2 44 0f 11 35
	08 01 00 00	 movsdx	 QWORD PTR acos_special_values+264, xmm14
  00269	f2 44 0f 11 25
	18 01 00 00	 movsdx	 QWORD PTR acos_special_values+280, xmm12
  00272	f2 44 0f 11 15
	10 01 00 00	 movsdx	 QWORD PTR acos_special_values+272, xmm10
  0027b	f2 44 0f 11 2d
	20 01 00 00	 movsdx	 QWORD PTR acos_special_values+288, xmm13
  00284	f2 44 0f 11 2d
	28 01 00 00	 movsdx	 QWORD PTR acos_special_values+296, xmm13
  0028d	f2 44 0f 11 15
	30 01 00 00	 movsdx	 QWORD PTR acos_special_values+304, xmm10
  00296	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0029a	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  0029f	f2 0f 11 05 38
	01 00 00	 movsdx	 QWORD PTR acos_special_values+312, xmm0
  002a7	f2 44 0f 11 15
	40 01 00 00	 movsdx	 QWORD PTR acos_special_values+320, xmm10
  002b0	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  002b4	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  002b9	f2 0f 11 0d 48
	01 00 00	 movsdx	 QWORD PTR acos_special_values+328, xmm1
  002c1	f2 44 0f 11 15
	50 01 00 00	 movsdx	 QWORD PTR acos_special_values+336, xmm10
  002ca	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  002ce	f2 0f 11 05 58
	01 00 00	 movsdx	 QWORD PTR acos_special_values+344, xmm0
  002d6	f2 44 0f 11 2d
	60 01 00 00	 movsdx	 QWORD PTR acos_special_values+352, xmm13
  002df	f2 44 0f 11 2d
	68 01 00 00	 movsdx	 QWORD PTR acos_special_values+360, xmm13
  002e8	f2 44 0f 11 15
	70 01 00 00	 movsdx	 QWORD PTR acos_special_values+368, xmm10
  002f1	f2 44 0f 11 35
	78 01 00 00	 movsdx	 QWORD PTR acos_special_values+376, xmm14
  002fa	f2 44 0f 11 15
	80 01 00 00	 movsdx	 QWORD PTR acos_special_values+384, xmm10
  00303	f2 44 0f 11 25
	88 01 00 00	 movsdx	 QWORD PTR acos_special_values+392, xmm12
  0030c	f2 44 0f 11 2d
	90 01 00 00	 movsdx	 QWORD PTR acos_special_values+400, xmm13
  00315	f2 44 0f 11 2d
	98 01 00 00	 movsdx	 QWORD PTR acos_special_values+408, xmm13
  0031e	f2 44 0f 11 15
	a0 01 00 00	 movsdx	 QWORD PTR acos_special_values+416, xmm10
  00327	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0032b	f2 44 0f 11 15
	b0 01 00 00	 movsdx	 QWORD PTR acos_special_values+432, xmm10
  00334	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  00339	f2 0f 11 05 a8
	01 00 00	 movsdx	 QWORD PTR acos_special_values+424, xmm0
  00341	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00345	f2 44 0f 11 15
	c0 01 00 00	 movsdx	 QWORD PTR acos_special_values+448, xmm10
  0034e	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00353	f2 0f 11 0d b8
	01 00 00	 movsdx	 QWORD PTR acos_special_values+440, xmm1
  0035b	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0035f	f2 44 0f 11 2d
	d0 01 00 00	 movsdx	 QWORD PTR acos_special_values+464, xmm13
  00368	f2 0f 11 05 c8
	01 00 00	 movsdx	 QWORD PTR acos_special_values+456, xmm0
  00370	f2 44 0f 11 2d
	d8 01 00 00	 movsdx	 QWORD PTR acos_special_values+472, xmm13
  00379	f2 44 0f 11 2d
	e0 01 00 00	 movsdx	 QWORD PTR acos_special_values+480, xmm13
  00382	f2 44 0f 11 2d
	e8 01 00 00	 movsdx	 QWORD PTR acos_special_values+488, xmm13
  0038b	f2 44 0f 11 2d
	f0 01 00 00	 movsdx	 QWORD PTR acos_special_values+496, xmm13
  00394	f2 44 0f 11 2d
	f8 01 00 00	 movsdx	 QWORD PTR acos_special_values+504, xmm13
  0039d	f2 44 0f 11 2d
	00 02 00 00	 movsdx	 QWORD PTR acos_special_values+512, xmm13
  003a6	f2 44 0f 11 2d
	08 02 00 00	 movsdx	 QWORD PTR acos_special_values+520, xmm13
  003af	f2 44 0f 11 15
	10 02 00 00	 movsdx	 QWORD PTR acos_special_values+528, xmm10
  003b8	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  003bc	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  003c1	f2 0f 11 05 18
	02 00 00	 movsdx	 QWORD PTR acos_special_values+536, xmm0
  003c9	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  003cd	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  003d2	f2 0f 11 0d 20
	02 00 00	 movsdx	 QWORD PTR acos_special_values+544, xmm1
  003da	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  003de	f2 0f 11 3d 30
	02 00 00	 movsdx	 QWORD PTR acos_special_values+560, xmm7
  003e6	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  003eb	f2 0f 11 05 28
	02 00 00	 movsdx	 QWORD PTR acos_special_values+552, xmm0
  003f3	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  003f7	f2 44 0f 11 35
	40 02 00 00	 movsdx	 QWORD PTR acos_special_values+576, xmm14
  00400	f2 0f 11 05 38
	02 00 00	 movsdx	 QWORD PTR acos_special_values+568, xmm0
  00408	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0040c	f2 44 0f 11 35
	50 02 00 00	 movsdx	 QWORD PTR acos_special_values+592, xmm14
  00415	f2 0f 11 0d 48
	02 00 00	 movsdx	 QWORD PTR acos_special_values+584, xmm1
  0041d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00421	f2 44 0f 11 35
	60 02 00 00	 movsdx	 QWORD PTR acos_special_values+608, xmm14
  0042a	f2 0f 11 05 58
	02 00 00	 movsdx	 QWORD PTR acos_special_values+600, xmm0
  00432	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00436	f2 44 0f 11 35
	70 02 00 00	 movsdx	 QWORD PTR acos_special_values+624, xmm14
  0043f	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  00444	f2 0f 11 0d 68
	02 00 00	 movsdx	 QWORD PTR acos_special_values+616, xmm1
  0044c	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00450	f2 0f 11 3d 80
	02 00 00	 movsdx	 QWORD PTR acos_special_values+640, xmm7
  00458	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  0045d	f2 0f 11 05 78
	02 00 00	 movsdx	 QWORD PTR acos_special_values+632, xmm0
  00465	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00469	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  0046e	f2 0f 11 0d 88
	02 00 00	 movsdx	 QWORD PTR acos_special_values+648, xmm1
  00476	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0047a	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0047f	f2 0f 11 05 90
	02 00 00	 movsdx	 QWORD PTR acos_special_values+656, xmm0
  00487	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0048b	f2 0f 11 05 98
	02 00 00	 movsdx	 QWORD PTR acos_special_values+664, xmm0
  00493	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]

; 1144 : 
; 1145 :     INIT_SPECIAL_VALUES(acosh_special_values, {
; 1146 :       C(INF,-P34) C(INF,-P)  C(INF,-P)  C(INF,P)  C(INF,P)  C(INF,P34) C(INF,N)
; 1147 :       C(INF,-P12) C(U,U)     C(U,U)     C(U,U)    C(U,U)    C(INF,P12) C(N,N)
; 1148 :       C(INF,-P12) C(U,U)     C(0.,-P12) C(0.,P12) C(U,U)    C(INF,P12) C(N,N)
; 1149 :       C(INF,-P12) C(U,U)     C(0.,-P12) C(0.,P12) C(U,U)    C(INF,P12) C(N,N)
; 1150 :       C(INF,-P12) C(U,U)     C(U,U)     C(U,U)    C(U,U)    C(INF,P12) C(N,N)
; 1151 :       C(INF,-P14) C(INF,-0.) C(INF,-0.) C(INF,0.) C(INF,0.) C(INF,P14) C(INF,N)
; 1152 :       C(INF,N)    C(N,N)     C(N,N)     C(N,N)    C(N,N)    C(INF,N)   C(N,N)
; 1153 :     })

  00497	f2 0f 10 25 00
	00 00 00	 movsdx	 xmm4, QWORD PTR __real@c00921fb54442d18
  0049f	f2 0f 10 15 00
	00 00 00	 movsdx	 xmm2, QWORD PTR __real@c002d97c7f3321d2
  004a7	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  004ac	f2 0f 11 0d a0
	02 00 00	 movsdx	 QWORD PTR acos_special_values+672, xmm1
  004b4	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  004b8	f2 0f 10 2d 00
	00 00 00	 movsdx	 xmm5, QWORD PTR __real@bff921fb54442d18
  004c0	f2 0f 11 05 a8
	02 00 00	 movsdx	 QWORD PTR acos_special_values+680, xmm0
  004c8	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  004cc	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  004d1	f2 0f 11 0d b0
	02 00 00	 movsdx	 QWORD PTR acos_special_values+688, xmm1
  004d9	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  004dd	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  004e2	f2 0f 11 05 b8
	02 00 00	 movsdx	 QWORD PTR acos_special_values+696, xmm0
  004ea	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  004ee	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  004f3	f2 0f 11 0d c0
	02 00 00	 movsdx	 QWORD PTR acos_special_values+704, xmm1
  004fb	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  004ff	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00504	f2 0f 11 05 c8
	02 00 00	 movsdx	 QWORD PTR acos_special_values+712, xmm0
  0050c	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00510	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00515	f2 0f 11 0d d0
	02 00 00	 movsdx	 QWORD PTR acos_special_values+720, xmm1
  0051d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00521	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00526	f2 0f 11 05 d8
	02 00 00	 movsdx	 QWORD PTR acos_special_values+728, xmm0
  0052e	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00532	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00537	f2 0f 11 0d e0
	02 00 00	 movsdx	 QWORD PTR acos_special_values+736, xmm1
  0053f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00543	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00548	f2 0f 11 05 e8
	02 00 00	 movsdx	 QWORD PTR acos_special_values+744, xmm0
  00550	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00554	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00559	f2 0f 11 0d f0
	02 00 00	 movsdx	 QWORD PTR acos_special_values+752, xmm1
  00561	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00565	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  0056a	f2 0f 11 05 f8
	02 00 00	 movsdx	 QWORD PTR acos_special_values+760, xmm0
  00572	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00576	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0057b	f2 0f 11 0d 00
	03 00 00	 movsdx	 QWORD PTR acos_special_values+768, xmm1
  00583	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00587	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0058c	f2 0f 11 05 08
	03 00 00	 movsdx	 QWORD PTR acos_special_values+776, xmm0
  00594	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00598	f2 0f 11 15 08
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+8, xmm2
  005a0	f2 0f 11 05 00
	00 00 00	 movsdx	 QWORD PTR acosh_special_values, xmm0
  005a8	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  005ac	f2 0f 11 25 18
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+24, xmm4
  005b4	f2 0f 11 05 10
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+16, xmm0
  005bc	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  005c0	f2 0f 11 25 28
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+40, xmm4
  005c8	f2 0f 11 05 20
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+32, xmm0
  005d0	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  005d4	f2 44 0f 11 0d
	38 00 00 00	 movsdx	 QWORD PTR acosh_special_values+56, xmm9
  005dd	f2 0f 11 0d 30
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+48, xmm1
  005e5	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  005e9	f2 44 0f 11 0d
	48 00 00 00	 movsdx	 QWORD PTR acosh_special_values+72, xmm9
  005f2	f2 0f 11 05 40
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+64, xmm0
  005fa	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  005fe	f2 44 0f 11 05
	58 00 00 00	 movsdx	 QWORD PTR acosh_special_values+88, xmm8
  00607	f2 0f 11 0d 50
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+80, xmm1
  0060f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00613	f2 0f 11 05 60
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+96, xmm0
  0061b	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0061f	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00624	f2 0f 11 0d 68
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+104, xmm1
  0062c	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00630	f2 0f 11 2d 78
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+120, xmm5
  00638	f2 0f 11 05 70
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+112, xmm0
  00640	f2 44 0f 11 2d
	80 00 00 00	 movsdx	 QWORD PTR acosh_special_values+128, xmm13
  00649	f2 44 0f 11 2d
	88 00 00 00	 movsdx	 QWORD PTR acosh_special_values+136, xmm13
  00652	f2 44 0f 11 2d
	90 00 00 00	 movsdx	 QWORD PTR acosh_special_values+144, xmm13
  0065b	f2 44 0f 11 2d
	98 00 00 00	 movsdx	 QWORD PTR acosh_special_values+152, xmm13
  00664	f2 44 0f 11 2d
	a0 00 00 00	 movsdx	 QWORD PTR acosh_special_values+160, xmm13
  0066d	f2 44 0f 11 2d
	a8 00 00 00	 movsdx	 QWORD PTR acosh_special_values+168, xmm13
  00676	f2 44 0f 11 2d
	b0 00 00 00	 movsdx	 QWORD PTR acosh_special_values+176, xmm13
  0067f	f2 44 0f 11 2d
	b8 00 00 00	 movsdx	 QWORD PTR acosh_special_values+184, xmm13
  00688	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0068c	f2 44 0f 11 15
	c8 00 00 00	 movsdx	 QWORD PTR acosh_special_values+200, xmm10
  00695	f2 0f 11 05 c0
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+192, xmm0
  0069d	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  006a1	f2 0f 10 1d 00
	00 00 00	 movsdx	 xmm3, QWORD PTR __real@bfe921fb54442d18
  006a9	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  006ae	f2 0f 11 0d d0
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+208, xmm1
  006b6	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  006ba	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  006bf	f2 0f 11 05 d8
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+216, xmm0
  006c7	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  006cb	f2 0f 11 2d e8
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+232, xmm5
  006d3	f2 0f 11 05 e0
	00 00 00	 movsdx	 QWORD PTR acosh_special_values+224, xmm0
  006db	f2 44 0f 11 2d
	f0 00 00 00	 movsdx	 QWORD PTR acosh_special_values+240, xmm13
  006e4	f2 44 0f 11 2d
	f8 00 00 00	 movsdx	 QWORD PTR acosh_special_values+248, xmm13
  006ed	f2 44 0f 11 35
	00 01 00 00	 movsdx	 QWORD PTR acosh_special_values+256, xmm14
  006f6	f2 0f 11 2d 08
	01 00 00	 movsdx	 QWORD PTR acosh_special_values+264, xmm5
  006fe	f2 44 0f 11 35
	10 01 00 00	 movsdx	 QWORD PTR acosh_special_values+272, xmm14
  00707	f2 44 0f 11 15
	18 01 00 00	 movsdx	 QWORD PTR acosh_special_values+280, xmm10
  00710	f2 44 0f 11 2d
	20 01 00 00	 movsdx	 QWORD PTR acosh_special_values+288, xmm13
  00719	f2 44 0f 11 2d
	28 01 00 00	 movsdx	 QWORD PTR acosh_special_values+296, xmm13
  00722	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00726	f2 44 0f 11 15
	38 01 00 00	 movsdx	 QWORD PTR acosh_special_values+312, xmm10
  0072f	f2 0f 11 05 30
	01 00 00	 movsdx	 QWORD PTR acosh_special_values+304, xmm0
  00737	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0073b	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00740	f2 0f 11 0d 40
	01 00 00	 movsdx	 QWORD PTR acosh_special_values+320, xmm1
  00748	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0074c	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00751	f2 0f 11 05 48
	01 00 00	 movsdx	 QWORD PTR acosh_special_values+328, xmm0
  00759	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0075d	f2 0f 11 2d 58
	01 00 00	 movsdx	 QWORD PTR acosh_special_values+344, xmm5
  00765	f2 0f 11 05 50
	01 00 00	 movsdx	 QWORD PTR acosh_special_values+336, xmm0
  0076d	f2 44 0f 11 2d
	60 01 00 00	 movsdx	 QWORD PTR acosh_special_values+352, xmm13
  00776	f2 44 0f 11 2d
	68 01 00 00	 movsdx	 QWORD PTR acosh_special_values+360, xmm13
  0077f	f2 44 0f 11 35
	70 01 00 00	 movsdx	 QWORD PTR acosh_special_values+368, xmm14
  00788	f2 0f 11 2d 78
	01 00 00	 movsdx	 QWORD PTR acosh_special_values+376, xmm5
  00790	f2 44 0f 11 35
	80 01 00 00	 movsdx	 QWORD PTR acosh_special_values+384, xmm14
  00799	f2 44 0f 11 15
	88 01 00 00	 movsdx	 QWORD PTR acosh_special_values+392, xmm10
  007a2	f2 44 0f 11 2d
	90 01 00 00	 movsdx	 QWORD PTR acosh_special_values+400, xmm13
  007ab	f2 44 0f 11 2d
	98 01 00 00	 movsdx	 QWORD PTR acosh_special_values+408, xmm13
  007b4	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  007b8	f2 44 0f 11 15
	a8 01 00 00	 movsdx	 QWORD PTR acosh_special_values+424, xmm10
  007c1	f2 0f 11 05 a0
	01 00 00	 movsdx	 QWORD PTR acosh_special_values+416, xmm0
  007c9	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  007cd	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  007d2	f2 0f 11 0d b0
	01 00 00	 movsdx	 QWORD PTR acosh_special_values+432, xmm1
  007da	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  007de	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  007e3	f2 0f 11 05 b8
	01 00 00	 movsdx	 QWORD PTR acosh_special_values+440, xmm0
  007eb	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  007ef	f2 0f 11 2d c8
	01 00 00	 movsdx	 QWORD PTR acosh_special_values+456, xmm5
  007f7	f2 0f 11 05 c0
	01 00 00	 movsdx	 QWORD PTR acosh_special_values+448, xmm0
  007ff	f2 44 0f 11 2d
	d0 01 00 00	 movsdx	 QWORD PTR acosh_special_values+464, xmm13
  00808	f2 44 0f 11 2d
	d8 01 00 00	 movsdx	 QWORD PTR acosh_special_values+472, xmm13
  00811	f2 44 0f 11 2d
	e0 01 00 00	 movsdx	 QWORD PTR acosh_special_values+480, xmm13
  0081a	f2 44 0f 11 2d
	e8 01 00 00	 movsdx	 QWORD PTR acosh_special_values+488, xmm13
  00823	f2 44 0f 11 2d
	f0 01 00 00	 movsdx	 QWORD PTR acosh_special_values+496, xmm13
  0082c	f2 44 0f 11 2d
	f8 01 00 00	 movsdx	 QWORD PTR acosh_special_values+504, xmm13
  00835	f2 44 0f 11 2d
	00 02 00 00	 movsdx	 QWORD PTR acosh_special_values+512, xmm13
  0083e	f2 44 0f 11 2d
	08 02 00 00	 movsdx	 QWORD PTR acosh_special_values+520, xmm13
  00847	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0084b	f2 44 0f 11 15
	18 02 00 00	 movsdx	 QWORD PTR acosh_special_values+536, xmm10
  00854	f2 0f 11 05 10
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+528, xmm0
  0085c	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00860	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00865	f2 0f 11 0d 20
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+544, xmm1
  0086d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00871	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00876	f2 0f 11 05 28
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+552, xmm0
  0087e	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00882	f2 0f 11 1d 38
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+568, xmm3
  0088a	f2 0f 11 05 30
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+560, xmm0
  00892	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00896	f2 44 0f 11 25
	48 02 00 00	 movsdx	 QWORD PTR acosh_special_values+584, xmm12
  0089f	f2 0f 11 05 40
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+576, xmm0
  008a7	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  008ab	f2 44 0f 11 25
	58 02 00 00	 movsdx	 QWORD PTR acosh_special_values+600, xmm12
  008b4	f2 0f 11 0d 50
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+592, xmm1
  008bc	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  008c0	f2 44 0f 11 35
	68 02 00 00	 movsdx	 QWORD PTR acosh_special_values+616, xmm14
  008c9	f2 0f 11 05 60
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+608, xmm0
  008d1	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  008d5	f2 0f 11 0d 70
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+624, xmm1
  008dd	f2 44 0f 11 35
	78 02 00 00	 movsdx	 QWORD PTR acosh_special_values+632, xmm14
  008e6	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  008ea	f2 0f 11 3d 88
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+648, xmm7
  008f2	f2 0f 11 05 80
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+640, xmm0
  008fa	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  008fe	f2 0f 11 0d 90
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+656, xmm1
  00906	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0090a	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0090f	f2 0f 11 05 98
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+664, xmm0
  00917	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0091b	f2 0f 11 05 a0
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+672, xmm0
  00923	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00927	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0092c	f2 0f 11 0d a8
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+680, xmm1
  00934	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00938	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0093d	f2 0f 11 05 b0
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+688, xmm0
  00945	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00949	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0094e	f2 0f 11 0d b8
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+696, xmm1
  00956	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0095a	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0095f	f2 0f 11 05 c0
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+704, xmm0
  00967	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0096b	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00970	f2 0f 11 0d c8
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+712, xmm1
  00978	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0097c	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00981	f2 0f 11 05 d0
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+720, xmm0
  00989	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0098d	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00992	f2 0f 11 0d d8
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+728, xmm1
  0099a	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0099e	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  009a3	f2 0f 11 05 e0
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+736, xmm0
  009ab	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  009af	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  009b4	f2 0f 11 0d e8
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+744, xmm1
  009bc	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  009c0	f2 0f 11 05 f0
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+752, xmm0
  009c8	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  009cc	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  009d1	f2 0f 11 0d f8
	02 00 00	 movsdx	 QWORD PTR acosh_special_values+760, xmm1
  009d9	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  009dd	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  009e2	f2 0f 11 05 00
	03 00 00	 movsdx	 QWORD PTR acosh_special_values+768, xmm0
  009ea	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  009ee	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  009f3	f2 0f 11 0d 08
	03 00 00	 movsdx	 QWORD PTR acosh_special_values+776, xmm1

; 1154 : 
; 1155 :     INIT_SPECIAL_VALUES(asinh_special_values, {
; 1156 :       C(-INF,-P14) C(-INF,-0.) C(-INF,-0.) C(-INF,0.) C(-INF,0.) C(-INF,P14) C(-INF,N)
; 1157 :       C(-INF,-P12) C(U,U)      C(U,U)      C(U,U)     C(U,U)     C(-INF,P12) C(N,N)
; 1158 :       C(-INF,-P12) C(U,U)      C(-0.,-0.)  C(-0.,0.)  C(U,U)     C(-INF,P12) C(N,N)
; 1159 :       C(INF,-P12)  C(U,U)      C(0.,-0.)   C(0.,0.)   C(U,U)     C(INF,P12)  C(N,N)
; 1160 :       C(INF,-P12)  C(U,U)      C(U,U)      C(U,U)     C(U,U)     C(INF,P12)  C(N,N)
; 1161 :       C(INF,-P14)  C(INF,-0.)  C(INF,-0.)  C(INF,0.)  C(INF,0.)  C(INF,P14)  C(INF,N)
; 1162 :       C(INF,N)     C(N,N)      C(N,-0.)    C(N,0.)    C(N,N)     C(INF,N)    C(N,N)
; 1163 :     })

  009fb	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  009ff	f2 0f 11 1d 08
	00 00 00	 movsdx	 QWORD PTR asinh_special_values+8, xmm3
  00a07	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  00a0c	f2 0f 11 05 00
	00 00 00	 movsdx	 QWORD PTR asinh_special_values, xmm0
  00a14	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00a18	f2 44 0f 11 25
	18 00 00 00	 movsdx	 QWORD PTR asinh_special_values+24, xmm12
  00a21	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  00a26	f2 0f 11 0d 10
	00 00 00	 movsdx	 QWORD PTR asinh_special_values+16, xmm1
  00a2e	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00a32	f2 44 0f 11 25
	28 00 00 00	 movsdx	 QWORD PTR asinh_special_values+40, xmm12
  00a3b	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  00a40	f2 0f 11 05 20
	00 00 00	 movsdx	 QWORD PTR asinh_special_values+32, xmm0
  00a48	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00a4c	f2 44 0f 11 35
	38 00 00 00	 movsdx	 QWORD PTR asinh_special_values+56, xmm14
  00a55	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  00a5a	f2 0f 11 0d 30
	00 00 00	 movsdx	 QWORD PTR asinh_special_values+48, xmm1
  00a62	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00a66	f2 44 0f 11 35
	48 00 00 00	 movsdx	 QWORD PTR asinh_special_values+72, xmm14
  00a6f	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  00a74	f2 0f 11 05 40
	00 00 00	 movsdx	 QWORD PTR asinh_special_values+64, xmm0
  00a7c	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00a80	f2 0f 11 3d 58
	00 00 00	 movsdx	 QWORD PTR asinh_special_values+88, xmm7
  00a88	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  00a8d	f2 0f 11 0d 50
	00 00 00	 movsdx	 QWORD PTR asinh_special_values+80, xmm1
  00a95	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00a99	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  00a9e	f2 0f 11 05 60
	00 00 00	 movsdx	 QWORD PTR asinh_special_values+96, xmm0
  00aa6	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00aaa	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00aaf	f2 0f 11 0d 68
	00 00 00	 movsdx	 QWORD PTR asinh_special_values+104, xmm1
  00ab7	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00abb	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  00ac0	f2 0f 11 05 70
	00 00 00	 movsdx	 QWORD PTR asinh_special_values+112, xmm0
  00ac8	f2 0f 11 2d 78
	00 00 00	 movsdx	 QWORD PTR asinh_special_values+120, xmm5
  00ad0	f2 44 0f 11 2d
	80 00 00 00	 movsdx	 QWORD PTR asinh_special_values+128, xmm13
  00ad9	f2 44 0f 11 2d
	88 00 00 00	 movsdx	 QWORD PTR asinh_special_values+136, xmm13
  00ae2	f2 44 0f 11 2d
	90 00 00 00	 movsdx	 QWORD PTR asinh_special_values+144, xmm13
  00aeb	f2 44 0f 11 2d
	98 00 00 00	 movsdx	 QWORD PTR asinh_special_values+152, xmm13
  00af4	f2 44 0f 11 2d
	a0 00 00 00	 movsdx	 QWORD PTR asinh_special_values+160, xmm13
  00afd	f2 44 0f 11 2d
	a8 00 00 00	 movsdx	 QWORD PTR asinh_special_values+168, xmm13
  00b06	f2 44 0f 11 2d
	b0 00 00 00	 movsdx	 QWORD PTR asinh_special_values+176, xmm13
  00b0f	f2 44 0f 11 2d
	b8 00 00 00	 movsdx	 QWORD PTR asinh_special_values+184, xmm13
  00b18	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00b1c	f2 44 0f 11 15
	c8 00 00 00	 movsdx	 QWORD PTR asinh_special_values+200, xmm10
  00b25	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  00b2a	f2 0f 11 05 c0
	00 00 00	 movsdx	 QWORD PTR asinh_special_values+192, xmm0
  00b32	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00b36	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00b3b	f2 0f 11 0d d0
	00 00 00	 movsdx	 QWORD PTR asinh_special_values+208, xmm1
  00b43	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00b47	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00b4c	f2 0f 11 05 d8
	00 00 00	 movsdx	 QWORD PTR asinh_special_values+216, xmm0
  00b54	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00b58	f2 0f 11 2d e8
	00 00 00	 movsdx	 QWORD PTR asinh_special_values+232, xmm5
  00b60	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  00b65	f2 0f 11 0d e0
	00 00 00	 movsdx	 QWORD PTR asinh_special_values+224, xmm1
  00b6d	f2 44 0f 11 2d
	f0 00 00 00	 movsdx	 QWORD PTR asinh_special_values+240, xmm13
  00b76	f2 44 0f 11 2d
	f8 00 00 00	 movsdx	 QWORD PTR asinh_special_values+248, xmm13
  00b7f	f2 44 0f 11 25
	00 01 00 00	 movsdx	 QWORD PTR asinh_special_values+256, xmm12
  00b88	f2 44 0f 11 25
	08 01 00 00	 movsdx	 QWORD PTR asinh_special_values+264, xmm12
  00b91	f2 44 0f 11 25
	10 01 00 00	 movsdx	 QWORD PTR asinh_special_values+272, xmm12
  00b9a	f2 44 0f 11 35
	18 01 00 00	 movsdx	 QWORD PTR asinh_special_values+280, xmm14
  00ba3	f2 44 0f 11 2d
	20 01 00 00	 movsdx	 QWORD PTR asinh_special_values+288, xmm13
  00bac	f2 44 0f 11 2d
	28 01 00 00	 movsdx	 QWORD PTR asinh_special_values+296, xmm13
  00bb5	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00bb9	f2 44 0f 11 15
	38 01 00 00	 movsdx	 QWORD PTR asinh_special_values+312, xmm10
  00bc2	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  00bc7	f2 0f 11 05 30
	01 00 00	 movsdx	 QWORD PTR asinh_special_values+304, xmm0
  00bcf	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00bd3	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00bd8	f2 0f 11 0d 40
	01 00 00	 movsdx	 QWORD PTR asinh_special_values+320, xmm1
  00be0	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00be4	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00be9	f2 0f 11 05 48
	01 00 00	 movsdx	 QWORD PTR asinh_special_values+328, xmm0
  00bf1	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00bf5	f2 0f 11 2d 58
	01 00 00	 movsdx	 QWORD PTR asinh_special_values+344, xmm5
  00bfd	f2 0f 11 05 50
	01 00 00	 movsdx	 QWORD PTR asinh_special_values+336, xmm0
  00c05	f2 44 0f 11 2d
	60 01 00 00	 movsdx	 QWORD PTR asinh_special_values+352, xmm13
  00c0e	f2 44 0f 11 2d
	68 01 00 00	 movsdx	 QWORD PTR asinh_special_values+360, xmm13
  00c17	f2 44 0f 11 35
	70 01 00 00	 movsdx	 QWORD PTR asinh_special_values+368, xmm14
  00c20	f2 44 0f 11 25
	78 01 00 00	 movsdx	 QWORD PTR asinh_special_values+376, xmm12
  00c29	f2 44 0f 11 35
	80 01 00 00	 movsdx	 QWORD PTR asinh_special_values+384, xmm14
  00c32	f2 44 0f 11 35
	88 01 00 00	 movsdx	 QWORD PTR asinh_special_values+392, xmm14
  00c3b	f2 44 0f 11 2d
	90 01 00 00	 movsdx	 QWORD PTR asinh_special_values+400, xmm13
  00c44	f2 44 0f 11 2d
	98 01 00 00	 movsdx	 QWORD PTR asinh_special_values+408, xmm13
  00c4d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00c51	f2 44 0f 11 15
	a8 01 00 00	 movsdx	 QWORD PTR asinh_special_values+424, xmm10
  00c5a	f2 0f 11 05 a0
	01 00 00	 movsdx	 QWORD PTR asinh_special_values+416, xmm0
  00c62	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00c66	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00c6b	f2 0f 11 0d b0
	01 00 00	 movsdx	 QWORD PTR asinh_special_values+432, xmm1
  00c73	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00c77	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00c7c	f2 0f 11 05 b8
	01 00 00	 movsdx	 QWORD PTR asinh_special_values+440, xmm0
  00c84	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00c88	f2 0f 11 2d c8
	01 00 00	 movsdx	 QWORD PTR asinh_special_values+456, xmm5
  00c90	f2 0f 11 05 c0
	01 00 00	 movsdx	 QWORD PTR asinh_special_values+448, xmm0
  00c98	f2 44 0f 11 2d
	d0 01 00 00	 movsdx	 QWORD PTR asinh_special_values+464, xmm13
  00ca1	f2 44 0f 11 2d
	d8 01 00 00	 movsdx	 QWORD PTR asinh_special_values+472, xmm13
  00caa	f2 44 0f 11 2d
	e0 01 00 00	 movsdx	 QWORD PTR asinh_special_values+480, xmm13
  00cb3	f2 44 0f 11 2d
	e8 01 00 00	 movsdx	 QWORD PTR asinh_special_values+488, xmm13
  00cbc	f2 44 0f 11 2d
	f0 01 00 00	 movsdx	 QWORD PTR asinh_special_values+496, xmm13
  00cc5	f2 44 0f 11 2d
	f8 01 00 00	 movsdx	 QWORD PTR asinh_special_values+504, xmm13
  00cce	f2 44 0f 11 2d
	00 02 00 00	 movsdx	 QWORD PTR asinh_special_values+512, xmm13
  00cd7	f2 44 0f 11 2d
	08 02 00 00	 movsdx	 QWORD PTR asinh_special_values+520, xmm13
  00ce0	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00ce4	f2 44 0f 11 15
	18 02 00 00	 movsdx	 QWORD PTR asinh_special_values+536, xmm10
  00ced	f2 0f 11 05 10
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+528, xmm0
  00cf5	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00cf9	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00cfe	f2 0f 11 0d 20
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+544, xmm1
  00d06	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00d0a	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00d0f	f2 0f 11 05 28
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+552, xmm0
  00d17	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00d1b	f2 0f 11 1d 38
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+568, xmm3
  00d23	f2 0f 11 05 30
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+560, xmm0
  00d2b	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00d2f	f2 44 0f 11 25
	48 02 00 00	 movsdx	 QWORD PTR asinh_special_values+584, xmm12
  00d38	f2 0f 11 0d 40
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+576, xmm1
  00d40	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00d44	f2 44 0f 11 25
	58 02 00 00	 movsdx	 QWORD PTR asinh_special_values+600, xmm12
  00d4d	f2 0f 11 05 50
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+592, xmm0
  00d55	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00d59	f2 44 0f 11 35
	68 02 00 00	 movsdx	 QWORD PTR asinh_special_values+616, xmm14
  00d62	f2 0f 11 0d 60
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+608, xmm1
  00d6a	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00d6e	f2 44 0f 11 35
	78 02 00 00	 movsdx	 QWORD PTR asinh_special_values+632, xmm14
  00d77	f2 0f 11 05 70
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+624, xmm0
  00d7f	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00d83	f2 0f 11 3d 88
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+648, xmm7
  00d8b	f2 0f 11 0d 80
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+640, xmm1
  00d93	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00d97	f2 0f 11 05 90
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+656, xmm0
  00d9f	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00da3	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00da8	f2 0f 11 0d 98
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+664, xmm1
  00db0	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00db4	f2 0f 11 05 a0
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+672, xmm0
  00dbc	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00dc0	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00dc5	f2 0f 11 0d a8
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+680, xmm1
  00dcd	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00dd1	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00dd6	f2 0f 11 05 b0
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+688, xmm0
  00dde	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00de2	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00de7	f2 0f 11 0d b8
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+696, xmm1
  00def	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00df3	f2 44 0f 11 25
	c8 02 00 00	 movsdx	 QWORD PTR asinh_special_values+712, xmm12
  00dfc	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00e01	f2 0f 11 05 c0
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+704, xmm0
  00e09	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00e0d	f2 44 0f 11 35
	d8 02 00 00	 movsdx	 QWORD PTR asinh_special_values+728, xmm14
  00e16	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00e1b	f2 0f 11 0d d0
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+720, xmm1
  00e23	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00e27	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00e2c	f2 0f 11 05 e0
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+736, xmm0
  00e34	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00e38	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00e3d	f2 0f 11 0d e8
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+744, xmm1
  00e45	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00e49	f2 0f 11 05 f0
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+752, xmm0
  00e51	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00e55	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00e5a	f2 0f 11 0d f8
	02 00 00	 movsdx	 QWORD PTR asinh_special_values+760, xmm1
  00e62	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00e66	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00e6b	f2 0f 11 05 00
	03 00 00	 movsdx	 QWORD PTR asinh_special_values+768, xmm0
  00e73	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]

; 1164 : 
; 1165 :     INIT_SPECIAL_VALUES(atanh_special_values, {
; 1166 :       C(-0.,-P12) C(-0.,-P12) C(-0.,-P12) C(-0.,P12) C(-0.,P12) C(-0.,P12) C(-0.,N)
; 1167 :       C(-0.,-P12) C(U,U)      C(U,U)      C(U,U)     C(U,U)     C(-0.,P12) C(N,N)
; 1168 :       C(-0.,-P12) C(U,U)      C(-0.,-0.)  C(-0.,0.)  C(U,U)     C(-0.,P12) C(-0.,N)
; 1169 :       C(0.,-P12)  C(U,U)      C(0.,-0.)   C(0.,0.)   C(U,U)     C(0.,P12)  C(0.,N)
; 1170 :       C(0.,-P12)  C(U,U)      C(U,U)      C(U,U)     C(U,U)     C(0.,P12)  C(N,N)
; 1171 :       C(0.,-P12)  C(0.,-P12)  C(0.,-P12)  C(0.,P12)  C(0.,P12)  C(0.,P12)  C(0.,N)
; 1172 :       C(0.,-P12)  C(N,N)      C(N,N)      C(N,N)     C(N,N)     C(0.,P12)  C(N,N)
; 1173 :     })

  00e77	f2 44 0f 11 25
	00 00 00 00	 movsdx	 QWORD PTR atanh_special_values, xmm12
  00e80	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00e85	f2 0f 11 2d 08
	00 00 00	 movsdx	 QWORD PTR atanh_special_values+8, xmm5
  00e8d	f2 44 0f 11 25
	10 00 00 00	 movsdx	 QWORD PTR atanh_special_values+16, xmm12
  00e96	f2 0f 11 2d 18
	00 00 00	 movsdx	 QWORD PTR atanh_special_values+24, xmm5
  00e9e	f2 0f 11 0d 08
	03 00 00	 movsdx	 QWORD PTR asinh_special_values+776, xmm1
  00ea6	f2 44 0f 11 25
	20 00 00 00	 movsdx	 QWORD PTR atanh_special_values+32, xmm12
  00eaf	f2 0f 11 2d 28
	00 00 00	 movsdx	 QWORD PTR atanh_special_values+40, xmm5
  00eb7	f2 44 0f 11 25
	30 00 00 00	 movsdx	 QWORD PTR atanh_special_values+48, xmm12
  00ec0	f2 44 0f 11 15
	38 00 00 00	 movsdx	 QWORD PTR atanh_special_values+56, xmm10
  00ec9	f2 44 0f 11 25
	40 00 00 00	 movsdx	 QWORD PTR atanh_special_values+64, xmm12
  00ed2	f2 44 0f 11 15
	48 00 00 00	 movsdx	 QWORD PTR atanh_special_values+72, xmm10
  00edb	f2 44 0f 11 25
	50 00 00 00	 movsdx	 QWORD PTR atanh_special_values+80, xmm12
  00ee4	f2 44 0f 11 15
	58 00 00 00	 movsdx	 QWORD PTR atanh_special_values+88, xmm10
  00eed	f2 44 0f 11 25
	60 00 00 00	 movsdx	 QWORD PTR atanh_special_values+96, xmm12
  00ef6	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00efa	f2 44 0f 11 25
	70 00 00 00	 movsdx	 QWORD PTR atanh_special_values+112, xmm12
  00f03	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00f08	f2 0f 11 2d 78
	00 00 00	 movsdx	 QWORD PTR atanh_special_values+120, xmm5
  00f10	f2 44 0f 11 2d
	80 00 00 00	 movsdx	 QWORD PTR atanh_special_values+128, xmm13
  00f19	f2 44 0f 11 2d
	88 00 00 00	 movsdx	 QWORD PTR atanh_special_values+136, xmm13
  00f22	f2 0f 11 05 68
	00 00 00	 movsdx	 QWORD PTR atanh_special_values+104, xmm0
  00f2a	f2 44 0f 11 2d
	90 00 00 00	 movsdx	 QWORD PTR atanh_special_values+144, xmm13
  00f33	f2 44 0f 11 2d
	98 00 00 00	 movsdx	 QWORD PTR atanh_special_values+152, xmm13
  00f3c	f2 44 0f 11 2d
	a0 00 00 00	 movsdx	 QWORD PTR atanh_special_values+160, xmm13
  00f45	f2 44 0f 11 2d
	a8 00 00 00	 movsdx	 QWORD PTR atanh_special_values+168, xmm13
  00f4e	f2 44 0f 11 2d
	b0 00 00 00	 movsdx	 QWORD PTR atanh_special_values+176, xmm13
  00f57	f2 44 0f 11 2d
	b8 00 00 00	 movsdx	 QWORD PTR atanh_special_values+184, xmm13
  00f60	f2 44 0f 11 25
	c0 00 00 00	 movsdx	 QWORD PTR atanh_special_values+192, xmm12
  00f69	f2 44 0f 11 15
	c8 00 00 00	 movsdx	 QWORD PTR atanh_special_values+200, xmm10
  00f72	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00f76	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  00f7b	f2 0f 11 05 d0
	00 00 00	 movsdx	 QWORD PTR atanh_special_values+208, xmm0
  00f83	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00f87	f2 44 0f 11 25
	e0 00 00 00	 movsdx	 QWORD PTR atanh_special_values+224, xmm12
  00f90	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  00f95	f2 0f 11 0d d8
	00 00 00	 movsdx	 QWORD PTR atanh_special_values+216, xmm1
  00f9d	f2 0f 11 2d e8
	00 00 00	 movsdx	 QWORD PTR atanh_special_values+232, xmm5
  00fa5	f2 44 0f 11 2d
	f0 00 00 00	 movsdx	 QWORD PTR atanh_special_values+240, xmm13
  00fae	f2 44 0f 11 2d
	f8 00 00 00	 movsdx	 QWORD PTR atanh_special_values+248, xmm13
  00fb7	f2 44 0f 11 25
	00 01 00 00	 movsdx	 QWORD PTR atanh_special_values+256, xmm12
  00fc0	f2 44 0f 11 25
	08 01 00 00	 movsdx	 QWORD PTR atanh_special_values+264, xmm12
  00fc9	f2 44 0f 11 25
	10 01 00 00	 movsdx	 QWORD PTR atanh_special_values+272, xmm12
  00fd2	f2 44 0f 11 35
	18 01 00 00	 movsdx	 QWORD PTR atanh_special_values+280, xmm14
  00fdb	f2 44 0f 11 2d
	20 01 00 00	 movsdx	 QWORD PTR atanh_special_values+288, xmm13
  00fe4	f2 44 0f 11 2d
	28 01 00 00	 movsdx	 QWORD PTR atanh_special_values+296, xmm13
  00fed	f2 44 0f 11 25
	30 01 00 00	 movsdx	 QWORD PTR atanh_special_values+304, xmm12
  00ff6	f2 44 0f 11 15
	38 01 00 00	 movsdx	 QWORD PTR atanh_special_values+312, xmm10
  00fff	f2 44 0f 11 25
	40 01 00 00	 movsdx	 QWORD PTR atanh_special_values+320, xmm12
  01008	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0100c	f2 44 0f 11 35
	50 01 00 00	 movsdx	 QWORD PTR atanh_special_values+336, xmm14
  01015	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0101a	f2 0f 11 05 48
	01 00 00	 movsdx	 QWORD PTR atanh_special_values+328, xmm0
  01022	f2 0f 11 2d 58
	01 00 00	 movsdx	 QWORD PTR atanh_special_values+344, xmm5
  0102a	f2 44 0f 11 2d
	60 01 00 00	 movsdx	 QWORD PTR atanh_special_values+352, xmm13
  01033	f2 44 0f 11 2d
	68 01 00 00	 movsdx	 QWORD PTR atanh_special_values+360, xmm13
  0103c	f2 44 0f 11 35
	70 01 00 00	 movsdx	 QWORD PTR atanh_special_values+368, xmm14
  01045	f2 44 0f 11 25
	78 01 00 00	 movsdx	 QWORD PTR atanh_special_values+376, xmm12
  0104e	f2 44 0f 11 35
	80 01 00 00	 movsdx	 QWORD PTR atanh_special_values+384, xmm14
  01057	f2 44 0f 11 35
	88 01 00 00	 movsdx	 QWORD PTR atanh_special_values+392, xmm14
  01060	f2 44 0f 11 2d
	90 01 00 00	 movsdx	 QWORD PTR atanh_special_values+400, xmm13
  01069	f2 44 0f 11 2d
	98 01 00 00	 movsdx	 QWORD PTR atanh_special_values+408, xmm13
  01072	f2 44 0f 11 35
	a0 01 00 00	 movsdx	 QWORD PTR atanh_special_values+416, xmm14
  0107b	f2 44 0f 11 15
	a8 01 00 00	 movsdx	 QWORD PTR atanh_special_values+424, xmm10
  01084	f2 44 0f 11 35
	b0 01 00 00	 movsdx	 QWORD PTR atanh_special_values+432, xmm14
  0108d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01091	f2 44 0f 11 35
	c0 01 00 00	 movsdx	 QWORD PTR atanh_special_values+448, xmm14
  0109a	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0109f	f2 0f 11 05 b8
	01 00 00	 movsdx	 QWORD PTR atanh_special_values+440, xmm0
  010a7	f2 0f 11 2d c8
	01 00 00	 movsdx	 QWORD PTR atanh_special_values+456, xmm5
  010af	f2 44 0f 11 2d
	d0 01 00 00	 movsdx	 QWORD PTR atanh_special_values+464, xmm13
  010b8	f2 44 0f 11 2d
	d8 01 00 00	 movsdx	 QWORD PTR atanh_special_values+472, xmm13
  010c1	f2 44 0f 11 2d
	e0 01 00 00	 movsdx	 QWORD PTR atanh_special_values+480, xmm13
  010ca	f2 44 0f 11 2d
	e8 01 00 00	 movsdx	 QWORD PTR atanh_special_values+488, xmm13
  010d3	f2 44 0f 11 2d
	f0 01 00 00	 movsdx	 QWORD PTR atanh_special_values+496, xmm13
  010dc	f2 44 0f 11 2d
	f8 01 00 00	 movsdx	 QWORD PTR atanh_special_values+504, xmm13
  010e5	f2 44 0f 11 2d
	00 02 00 00	 movsdx	 QWORD PTR atanh_special_values+512, xmm13
  010ee	f2 44 0f 11 2d
	08 02 00 00	 movsdx	 QWORD PTR atanh_special_values+520, xmm13
  010f7	f2 44 0f 11 35
	10 02 00 00	 movsdx	 QWORD PTR atanh_special_values+528, xmm14
  01100	f2 44 0f 11 15
	18 02 00 00	 movsdx	 QWORD PTR atanh_special_values+536, xmm10
  01109	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0110d	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01112	f2 0f 11 05 20
	02 00 00	 movsdx	 QWORD PTR atanh_special_values+544, xmm0
  0111a	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0111e	f2 44 0f 11 35
	30 02 00 00	 movsdx	 QWORD PTR atanh_special_values+560, xmm14
  01127	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0112c	f2 0f 11 2d 38
	02 00 00	 movsdx	 QWORD PTR atanh_special_values+568, xmm5
  01134	f2 44 0f 11 35
	40 02 00 00	 movsdx	 QWORD PTR atanh_special_values+576, xmm14
  0113d	f2 0f 11 2d 48
	02 00 00	 movsdx	 QWORD PTR atanh_special_values+584, xmm5
  01145	f2 0f 11 0d 28
	02 00 00	 movsdx	 QWORD PTR atanh_special_values+552, xmm1
  0114d	f2 44 0f 11 35
	50 02 00 00	 movsdx	 QWORD PTR atanh_special_values+592, xmm14
  01156	f2 0f 11 2d 58
	02 00 00	 movsdx	 QWORD PTR atanh_special_values+600, xmm5
  0115e	f2 44 0f 11 35
	60 02 00 00	 movsdx	 QWORD PTR atanh_special_values+608, xmm14
  01167	f2 44 0f 11 15
	68 02 00 00	 movsdx	 QWORD PTR atanh_special_values+616, xmm10
  01170	f2 44 0f 11 35
	70 02 00 00	 movsdx	 QWORD PTR atanh_special_values+624, xmm14
  01179	f2 44 0f 11 15
	78 02 00 00	 movsdx	 QWORD PTR atanh_special_values+632, xmm10
  01182	f2 44 0f 11 35
	80 02 00 00	 movsdx	 QWORD PTR atanh_special_values+640, xmm14
  0118b	f2 44 0f 11 15
	88 02 00 00	 movsdx	 QWORD PTR atanh_special_values+648, xmm10
  01194	f2 44 0f 11 35
	90 02 00 00	 movsdx	 QWORD PTR atanh_special_values+656, xmm14
  0119d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  011a1	f2 44 0f 11 35
	a0 02 00 00	 movsdx	 QWORD PTR atanh_special_values+672, xmm14
  011aa	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  011af	f2 0f 11 05 98
	02 00 00	 movsdx	 QWORD PTR atanh_special_values+664, xmm0
  011b7	f2 0f 11 2d a8
	02 00 00	 movsdx	 QWORD PTR atanh_special_values+680, xmm5
  011bf	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  011c3	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  011c8	f2 0f 11 05 b0
	02 00 00	 movsdx	 QWORD PTR atanh_special_values+688, xmm0
  011d0	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  011d4	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  011d9	f2 0f 11 0d b8
	02 00 00	 movsdx	 QWORD PTR atanh_special_values+696, xmm1
  011e1	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  011e5	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  011ea	f2 0f 11 05 c0
	02 00 00	 movsdx	 QWORD PTR atanh_special_values+704, xmm0
  011f2	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  011f6	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  011fb	f2 0f 11 0d c8
	02 00 00	 movsdx	 QWORD PTR atanh_special_values+712, xmm1
  01203	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01207	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0120c	f2 0f 11 05 d0
	02 00 00	 movsdx	 QWORD PTR atanh_special_values+720, xmm0
  01214	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01218	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0121d	f2 0f 11 0d d8
	02 00 00	 movsdx	 QWORD PTR atanh_special_values+728, xmm1
  01225	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01229	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0122e	f2 0f 11 05 e0
	02 00 00	 movsdx	 QWORD PTR atanh_special_values+736, xmm0
  01236	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0123a	f2 44 0f 11 35
	f0 02 00 00	 movsdx	 QWORD PTR atanh_special_values+752, xmm14
  01243	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01248	f2 0f 11 0d e8
	02 00 00	 movsdx	 QWORD PTR atanh_special_values+744, xmm1
  01250	f2 44 0f 11 15
	f8 02 00 00	 movsdx	 QWORD PTR atanh_special_values+760, xmm10
  01259	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0125d	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01262	f2 0f 11 05 00
	03 00 00	 movsdx	 QWORD PTR atanh_special_values+768, xmm0
  0126a	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0126e	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01273	f2 0f 11 0d 08
	03 00 00	 movsdx	 QWORD PTR atanh_special_values+776, xmm1

; 1174 : 
; 1175 :     INIT_SPECIAL_VALUES(cosh_special_values, {
; 1176 :       C(INF,N) C(U,U) C(INF,0.)  C(INF,-0.) C(U,U) C(INF,N) C(INF,N)
; 1177 :       C(N,N)   C(U,U) C(U,U)     C(U,U)     C(U,U) C(N,N)   C(N,N)
; 1178 :       C(N,0.)  C(U,U) C(1.,0.)   C(1.,-0.)  C(U,U) C(N,0.)  C(N,0.)
; 1179 :       C(N,0.)  C(U,U) C(1.,-0.)  C(1.,0.)   C(U,U) C(N,0.)  C(N,0.)
; 1180 :       C(N,N)   C(U,U) C(U,U)     C(U,U)     C(U,U) C(N,N)   C(N,N)
; 1181 :       C(INF,N) C(U,U) C(INF,-0.) C(INF,0.)  C(U,U) C(INF,N) C(INF,N)
; 1182 :       C(N,N)   C(N,N) C(N,0.)    C(N,0.)    C(N,N) C(N,N)   C(N,N)
; 1183 :     })

  0127b	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0127f	f2 0f 11 05 00
	00 00 00	 movsdx	 QWORD PTR cosh_special_values, xmm0
  01287	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0128b	f2 44 0f 11 2d
	10 00 00 00	 movsdx	 QWORD PTR cosh_special_values+16, xmm13
  01294	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01299	f2 0f 11 0d 08
	00 00 00	 movsdx	 QWORD PTR cosh_special_values+8, xmm1
  012a1	f2 44 0f 11 2d
	18 00 00 00	 movsdx	 QWORD PTR cosh_special_values+24, xmm13
  012aa	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  012ae	f2 0f 11 05 20
	00 00 00	 movsdx	 QWORD PTR cosh_special_values+32, xmm0
  012b6	f2 44 0f 11 35
	28 00 00 00	 movsdx	 QWORD PTR cosh_special_values+40, xmm14
  012bf	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  012c3	f2 0f 11 0d 30
	00 00 00	 movsdx	 QWORD PTR cosh_special_values+48, xmm1
  012cb	f2 44 0f 11 25
	38 00 00 00	 movsdx	 QWORD PTR cosh_special_values+56, xmm12
  012d4	f2 44 0f 11 2d
	40 00 00 00	 movsdx	 QWORD PTR cosh_special_values+64, xmm13
  012dd	f2 44 0f 11 2d
	48 00 00 00	 movsdx	 QWORD PTR cosh_special_values+72, xmm13
  012e6	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  012ea	f2 0f 11 05 50
	00 00 00	 movsdx	 QWORD PTR cosh_special_values+80, xmm0
  012f2	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  012f6	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  012fb	f2 0f 11 0d 58
	00 00 00	 movsdx	 QWORD PTR cosh_special_values+88, xmm1
  01303	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01307	f2 0f 11 05 60
	00 00 00	 movsdx	 QWORD PTR cosh_special_values+96, xmm0
  0130f	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01313	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01318	f2 0f 11 0d 68
	00 00 00	 movsdx	 QWORD PTR cosh_special_values+104, xmm1
  01320	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01324	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01329	f2 0f 11 05 70
	00 00 00	 movsdx	 QWORD PTR cosh_special_values+112, xmm0
  01331	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01335	f2 44 0f 11 2d
	80 00 00 00	 movsdx	 QWORD PTR cosh_special_values+128, xmm13
  0133e	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01343	f2 0f 11 0d 78
	00 00 00	 movsdx	 QWORD PTR cosh_special_values+120, xmm1
  0134b	f2 44 0f 11 2d
	88 00 00 00	 movsdx	 QWORD PTR cosh_special_values+136, xmm13
  01354	f2 44 0f 11 2d
	90 00 00 00	 movsdx	 QWORD PTR cosh_special_values+144, xmm13
  0135d	f2 44 0f 11 2d
	98 00 00 00	 movsdx	 QWORD PTR cosh_special_values+152, xmm13
  01366	f2 44 0f 11 2d
	a0 00 00 00	 movsdx	 QWORD PTR cosh_special_values+160, xmm13
  0136f	f2 44 0f 11 2d
	a8 00 00 00	 movsdx	 QWORD PTR cosh_special_values+168, xmm13
  01378	f2 44 0f 11 2d
	b0 00 00 00	 movsdx	 QWORD PTR cosh_special_values+176, xmm13
  01381	f2 44 0f 11 2d
	b8 00 00 00	 movsdx	 QWORD PTR cosh_special_values+184, xmm13
  0138a	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0138e	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01393	f2 0f 11 05 c0
	00 00 00	 movsdx	 QWORD PTR cosh_special_values+192, xmm0
  0139b	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0139f	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  013a4	f2 0f 11 0d c8
	00 00 00	 movsdx	 QWORD PTR cosh_special_values+200, xmm1
  013ac	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  013b0	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  013b5	f2 0f 11 05 d0
	00 00 00	 movsdx	 QWORD PTR cosh_special_values+208, xmm0
  013bd	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  013c1	f2 0f 10 35 00
	00 00 00	 movsdx	 xmm6, QWORD PTR __real@3ff0000000000000
  013c9	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  013ce	f2 0f 11 0d d8
	00 00 00	 movsdx	 QWORD PTR cosh_special_values+216, xmm1
  013d6	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  013da	f2 44 0f 11 35
	e8 00 00 00	 movsdx	 QWORD PTR cosh_special_values+232, xmm14
  013e3	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  013e8	f2 0f 11 05 e0
	00 00 00	 movsdx	 QWORD PTR cosh_special_values+224, xmm0
  013f0	f2 44 0f 11 2d
	f0 00 00 00	 movsdx	 QWORD PTR cosh_special_values+240, xmm13
  013f9	f2 44 0f 11 2d
	f8 00 00 00	 movsdx	 QWORD PTR cosh_special_values+248, xmm13
  01402	f2 0f 11 35 00
	01 00 00	 movsdx	 QWORD PTR cosh_special_values+256, xmm6
  0140a	f2 44 0f 11 35
	08 01 00 00	 movsdx	 QWORD PTR cosh_special_values+264, xmm14
  01413	f2 0f 11 35 10
	01 00 00	 movsdx	 QWORD PTR cosh_special_values+272, xmm6
  0141b	f2 44 0f 11 25
	18 01 00 00	 movsdx	 QWORD PTR cosh_special_values+280, xmm12
  01424	f2 44 0f 11 2d
	20 01 00 00	 movsdx	 QWORD PTR cosh_special_values+288, xmm13
  0142d	f2 44 0f 11 2d
	28 01 00 00	 movsdx	 QWORD PTR cosh_special_values+296, xmm13
  01436	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0143a	f2 44 0f 11 35
	38 01 00 00	 movsdx	 QWORD PTR cosh_special_values+312, xmm14
  01443	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01448	f2 0f 11 05 30
	01 00 00	 movsdx	 QWORD PTR cosh_special_values+304, xmm0
  01450	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01454	f2 44 0f 11 35
	48 01 00 00	 movsdx	 QWORD PTR cosh_special_values+328, xmm14
  0145d	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01462	f2 0f 11 0d 40
	01 00 00	 movsdx	 QWORD PTR cosh_special_values+320, xmm1
  0146a	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0146e	f2 44 0f 11 35
	58 01 00 00	 movsdx	 QWORD PTR cosh_special_values+344, xmm14
  01477	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0147c	f2 0f 11 05 50
	01 00 00	 movsdx	 QWORD PTR cosh_special_values+336, xmm0
  01484	f2 44 0f 11 2d
	60 01 00 00	 movsdx	 QWORD PTR cosh_special_values+352, xmm13
  0148d	f2 44 0f 11 2d
	68 01 00 00	 movsdx	 QWORD PTR cosh_special_values+360, xmm13
  01496	f2 0f 11 35 70
	01 00 00	 movsdx	 QWORD PTR cosh_special_values+368, xmm6
  0149e	f2 44 0f 11 25
	78 01 00 00	 movsdx	 QWORD PTR cosh_special_values+376, xmm12
  014a7	f2 0f 11 35 80
	01 00 00	 movsdx	 QWORD PTR cosh_special_values+384, xmm6
  014af	f2 44 0f 11 35
	88 01 00 00	 movsdx	 QWORD PTR cosh_special_values+392, xmm14
  014b8	f2 44 0f 11 2d
	90 01 00 00	 movsdx	 QWORD PTR cosh_special_values+400, xmm13
  014c1	f2 44 0f 11 2d
	98 01 00 00	 movsdx	 QWORD PTR cosh_special_values+408, xmm13
  014ca	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  014ce	f2 44 0f 11 35
	a8 01 00 00	 movsdx	 QWORD PTR cosh_special_values+424, xmm14
  014d7	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  014dc	f2 0f 11 05 a0
	01 00 00	 movsdx	 QWORD PTR cosh_special_values+416, xmm0
  014e4	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  014e8	f2 44 0f 11 35
	b8 01 00 00	 movsdx	 QWORD PTR cosh_special_values+440, xmm14
  014f1	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  014f6	f2 0f 11 0d b0
	01 00 00	 movsdx	 QWORD PTR cosh_special_values+432, xmm1
  014fe	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01502	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01507	f2 0f 11 05 c0
	01 00 00	 movsdx	 QWORD PTR cosh_special_values+448, xmm0
  0150f	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01513	f2 44 0f 11 2d
	d0 01 00 00	 movsdx	 QWORD PTR cosh_special_values+464, xmm13
  0151c	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01521	f2 0f 11 0d c8
	01 00 00	 movsdx	 QWORD PTR cosh_special_values+456, xmm1
  01529	f2 44 0f 11 2d
	d8 01 00 00	 movsdx	 QWORD PTR cosh_special_values+472, xmm13
  01532	f2 44 0f 11 2d
	e0 01 00 00	 movsdx	 QWORD PTR cosh_special_values+480, xmm13
  0153b	f2 44 0f 11 2d
	e8 01 00 00	 movsdx	 QWORD PTR cosh_special_values+488, xmm13
  01544	f2 44 0f 11 2d
	f0 01 00 00	 movsdx	 QWORD PTR cosh_special_values+496, xmm13
  0154d	f2 44 0f 11 2d
	f8 01 00 00	 movsdx	 QWORD PTR cosh_special_values+504, xmm13
  01556	f2 44 0f 11 2d
	00 02 00 00	 movsdx	 QWORD PTR cosh_special_values+512, xmm13
  0155f	f2 44 0f 11 2d
	08 02 00 00	 movsdx	 QWORD PTR cosh_special_values+520, xmm13
  01568	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0156c	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01571	f2 0f 11 05 10
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+528, xmm0
  01579	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0157d	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01582	f2 0f 11 0d 18
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+536, xmm1
  0158a	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0158e	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01593	f2 0f 11 05 20
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+544, xmm0
  0159b	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0159f	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  015a4	f2 0f 11 0d 28
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+552, xmm1
  015ac	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  015b0	f2 0f 11 05 30
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+560, xmm0
  015b8	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  015bc	f2 44 0f 11 2d
	40 02 00 00	 movsdx	 QWORD PTR cosh_special_values+576, xmm13
  015c5	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  015ca	f2 0f 11 0d 38
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+568, xmm1
  015d2	f2 44 0f 11 2d
	48 02 00 00	 movsdx	 QWORD PTR cosh_special_values+584, xmm13
  015db	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  015df	f2 0f 11 05 50
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+592, xmm0
  015e7	f2 44 0f 11 25
	58 02 00 00	 movsdx	 QWORD PTR cosh_special_values+600, xmm12
  015f0	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  015f4	f2 0f 11 0d 60
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+608, xmm1
  015fc	f2 44 0f 11 35
	68 02 00 00	 movsdx	 QWORD PTR cosh_special_values+616, xmm14
  01605	f2 44 0f 11 2d
	70 02 00 00	 movsdx	 QWORD PTR cosh_special_values+624, xmm13
  0160e	f2 44 0f 11 2d
	78 02 00 00	 movsdx	 QWORD PTR cosh_special_values+632, xmm13
  01617	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0161b	f2 0f 11 05 80
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+640, xmm0
  01623	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01627	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0162c	f2 0f 11 0d 88
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+648, xmm1
  01634	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01638	f2 0f 11 05 90
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+656, xmm0
  01640	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01644	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01649	f2 0f 11 0d 98
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+664, xmm1
  01651	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01655	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0165a	f2 0f 11 05 a0
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+672, xmm0
  01662	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01666	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0166b	f2 0f 11 0d a8
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+680, xmm1
  01673	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01677	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0167c	f2 0f 11 05 b0
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+688, xmm0
  01684	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01688	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0168d	f2 0f 11 0d b8
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+696, xmm1
  01695	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01699	f2 44 0f 11 35
	c8 02 00 00	 movsdx	 QWORD PTR cosh_special_values+712, xmm14
  016a2	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  016a7	f2 0f 11 05 c0
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+704, xmm0
  016af	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  016b3	f2 44 0f 11 35
	d8 02 00 00	 movsdx	 QWORD PTR cosh_special_values+728, xmm14
  016bc	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  016c1	f2 0f 11 0d d0
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+720, xmm1
  016c9	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  016cd	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  016d2	f2 0f 11 05 e0
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+736, xmm0
  016da	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  016de	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  016e3	f2 0f 11 0d e8
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+744, xmm1
  016eb	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  016ef	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  016f4	f2 0f 11 05 f0
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+752, xmm0
  016fc	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01700	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01705	f2 0f 11 0d f8
	02 00 00	 movsdx	 QWORD PTR cosh_special_values+760, xmm1
  0170d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01711	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01716	f2 0f 11 05 00
	03 00 00	 movsdx	 QWORD PTR cosh_special_values+768, xmm0
  0171e	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]

; 1184 : 
; 1185 :     INIT_SPECIAL_VALUES(exp_special_values, {
; 1186 :       C(0.,0.) C(U,U) C(0.,-0.)  C(0.,0.)  C(U,U) C(0.,0.) C(0.,0.)
; 1187 :       C(N,N)   C(U,U) C(U,U)     C(U,U)    C(U,U) C(N,N)   C(N,N)
; 1188 :       C(N,N)   C(U,U) C(1.,-0.)  C(1.,0.)  C(U,U) C(N,N)   C(N,N)
; 1189 :       C(N,N)   C(U,U) C(1.,-0.)  C(1.,0.)  C(U,U) C(N,N)   C(N,N)
; 1190 :       C(N,N)   C(U,U) C(U,U)     C(U,U)    C(U,U) C(N,N)   C(N,N)
; 1191 :       C(INF,N) C(U,U) C(INF,-0.) C(INF,0.) C(U,U) C(INF,N) C(INF,N)
; 1192 :       C(N,N)   C(N,N) C(N,-0.)   C(N,0.)   C(N,N) C(N,N)   C(N,N)
; 1193 :     })

  01722	f2 44 0f 11 35
	00 00 00 00	 movsdx	 QWORD PTR exp_special_values, xmm14
  0172b	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01730	f2 0f 11 0d 08
	03 00 00	 movsdx	 QWORD PTR cosh_special_values+776, xmm1
  01738	f2 44 0f 11 35
	08 00 00 00	 movsdx	 QWORD PTR exp_special_values+8, xmm14
  01741	f2 44 0f 11 2d
	10 00 00 00	 movsdx	 QWORD PTR exp_special_values+16, xmm13
  0174a	f2 44 0f 11 2d
	18 00 00 00	 movsdx	 QWORD PTR exp_special_values+24, xmm13
  01753	f2 44 0f 11 35
	20 00 00 00	 movsdx	 QWORD PTR exp_special_values+32, xmm14
  0175c	f2 44 0f 11 25
	28 00 00 00	 movsdx	 QWORD PTR exp_special_values+40, xmm12
  01765	f2 44 0f 11 35
	30 00 00 00	 movsdx	 QWORD PTR exp_special_values+48, xmm14
  0176e	f2 44 0f 11 35
	38 00 00 00	 movsdx	 QWORD PTR exp_special_values+56, xmm14
  01777	f2 44 0f 11 2d
	40 00 00 00	 movsdx	 QWORD PTR exp_special_values+64, xmm13
  01780	f2 44 0f 11 2d
	48 00 00 00	 movsdx	 QWORD PTR exp_special_values+72, xmm13
  01789	f2 44 0f 11 35
	50 00 00 00	 movsdx	 QWORD PTR exp_special_values+80, xmm14
  01792	f2 44 0f 11 35
	58 00 00 00	 movsdx	 QWORD PTR exp_special_values+88, xmm14
  0179b	f2 44 0f 11 35
	60 00 00 00	 movsdx	 QWORD PTR exp_special_values+96, xmm14
  017a4	f2 44 0f 11 35
	68 00 00 00	 movsdx	 QWORD PTR exp_special_values+104, xmm14
  017ad	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  017b1	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  017b6	f2 0f 11 05 70
	00 00 00	 movsdx	 QWORD PTR exp_special_values+112, xmm0
  017be	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  017c2	f2 44 0f 11 2d
	80 00 00 00	 movsdx	 QWORD PTR exp_special_values+128, xmm13
  017cb	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  017d0	f2 44 0f 11 2d
	88 00 00 00	 movsdx	 QWORD PTR exp_special_values+136, xmm13
  017d9	f2 44 0f 11 2d
	90 00 00 00	 movsdx	 QWORD PTR exp_special_values+144, xmm13
  017e2	f2 44 0f 11 2d
	98 00 00 00	 movsdx	 QWORD PTR exp_special_values+152, xmm13
  017eb	f2 0f 11 0d 78
	00 00 00	 movsdx	 QWORD PTR exp_special_values+120, xmm1
  017f3	f2 44 0f 11 2d
	a0 00 00 00	 movsdx	 QWORD PTR exp_special_values+160, xmm13
  017fc	f2 44 0f 11 2d
	a8 00 00 00	 movsdx	 QWORD PTR exp_special_values+168, xmm13
  01805	f2 44 0f 11 2d
	b0 00 00 00	 movsdx	 QWORD PTR exp_special_values+176, xmm13
  0180e	f2 44 0f 11 2d
	b8 00 00 00	 movsdx	 QWORD PTR exp_special_values+184, xmm13
  01817	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0181b	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01820	f2 0f 11 05 c0
	00 00 00	 movsdx	 QWORD PTR exp_special_values+192, xmm0
  01828	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0182c	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01831	f2 0f 11 0d c8
	00 00 00	 movsdx	 QWORD PTR exp_special_values+200, xmm1
  01839	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0183d	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01842	f2 0f 11 05 d0
	00 00 00	 movsdx	 QWORD PTR exp_special_values+208, xmm0
  0184a	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0184e	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01853	f2 0f 11 0d d8
	00 00 00	 movsdx	 QWORD PTR exp_special_values+216, xmm1
  0185b	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0185f	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01864	f2 0f 11 05 e0
	00 00 00	 movsdx	 QWORD PTR exp_special_values+224, xmm0
  0186c	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01870	f2 44 0f 11 2d
	f0 00 00 00	 movsdx	 QWORD PTR exp_special_values+240, xmm13
  01879	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0187e	f2 0f 11 0d e8
	00 00 00	 movsdx	 QWORD PTR exp_special_values+232, xmm1
  01886	f2 44 0f 11 2d
	f8 00 00 00	 movsdx	 QWORD PTR exp_special_values+248, xmm13
  0188f	f2 0f 11 35 00
	01 00 00	 movsdx	 QWORD PTR exp_special_values+256, xmm6
  01897	f2 44 0f 11 25
	08 01 00 00	 movsdx	 QWORD PTR exp_special_values+264, xmm12
  018a0	f2 0f 11 35 10
	01 00 00	 movsdx	 QWORD PTR exp_special_values+272, xmm6
  018a8	f2 44 0f 11 35
	18 01 00 00	 movsdx	 QWORD PTR exp_special_values+280, xmm14
  018b1	f2 44 0f 11 2d
	20 01 00 00	 movsdx	 QWORD PTR exp_special_values+288, xmm13
  018ba	f2 44 0f 11 2d
	28 01 00 00	 movsdx	 QWORD PTR exp_special_values+296, xmm13
  018c3	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  018c7	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  018cc	f2 0f 11 05 30
	01 00 00	 movsdx	 QWORD PTR exp_special_values+304, xmm0
  018d4	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  018d8	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  018dd	f2 0f 11 0d 38
	01 00 00	 movsdx	 QWORD PTR exp_special_values+312, xmm1
  018e5	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  018e9	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  018ee	f2 0f 11 05 40
	01 00 00	 movsdx	 QWORD PTR exp_special_values+320, xmm0
  018f6	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  018fa	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  018ff	f2 0f 11 0d 48
	01 00 00	 movsdx	 QWORD PTR exp_special_values+328, xmm1
  01907	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0190b	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01910	f2 0f 11 05 50
	01 00 00	 movsdx	 QWORD PTR exp_special_values+336, xmm0
  01918	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0191c	f2 44 0f 11 2d
	60 01 00 00	 movsdx	 QWORD PTR exp_special_values+352, xmm13
  01925	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0192a	f2 0f 11 0d 58
	01 00 00	 movsdx	 QWORD PTR exp_special_values+344, xmm1
  01932	f2 44 0f 11 2d
	68 01 00 00	 movsdx	 QWORD PTR exp_special_values+360, xmm13
  0193b	f2 0f 11 35 70
	01 00 00	 movsdx	 QWORD PTR exp_special_values+368, xmm6
  01943	f2 44 0f 11 25
	78 01 00 00	 movsdx	 QWORD PTR exp_special_values+376, xmm12
  0194c	f2 0f 11 35 80
	01 00 00	 movsdx	 QWORD PTR exp_special_values+384, xmm6
  01954	f2 44 0f 11 35
	88 01 00 00	 movsdx	 QWORD PTR exp_special_values+392, xmm14
  0195d	f2 44 0f 11 2d
	90 01 00 00	 movsdx	 QWORD PTR exp_special_values+400, xmm13
  01966	f2 44 0f 11 2d
	98 01 00 00	 movsdx	 QWORD PTR exp_special_values+408, xmm13
  0196f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01973	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01978	f2 0f 11 05 a0
	01 00 00	 movsdx	 QWORD PTR exp_special_values+416, xmm0
  01980	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01984	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01989	f2 0f 11 0d a8
	01 00 00	 movsdx	 QWORD PTR exp_special_values+424, xmm1
  01991	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01995	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0199a	f2 0f 11 05 b0
	01 00 00	 movsdx	 QWORD PTR exp_special_values+432, xmm0
  019a2	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  019a6	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  019ab	f2 0f 11 0d b8
	01 00 00	 movsdx	 QWORD PTR exp_special_values+440, xmm1
  019b3	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  019b7	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  019bc	f2 0f 11 05 c0
	01 00 00	 movsdx	 QWORD PTR exp_special_values+448, xmm0
  019c4	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  019c8	f2 44 0f 11 2d
	d0 01 00 00	 movsdx	 QWORD PTR exp_special_values+464, xmm13
  019d1	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  019d6	f2 0f 11 0d c8
	01 00 00	 movsdx	 QWORD PTR exp_special_values+456, xmm1
  019de	f2 44 0f 11 2d
	d8 01 00 00	 movsdx	 QWORD PTR exp_special_values+472, xmm13
  019e7	f2 44 0f 11 2d
	e0 01 00 00	 movsdx	 QWORD PTR exp_special_values+480, xmm13
  019f0	f2 44 0f 11 2d
	e8 01 00 00	 movsdx	 QWORD PTR exp_special_values+488, xmm13
  019f9	f2 44 0f 11 2d
	f0 01 00 00	 movsdx	 QWORD PTR exp_special_values+496, xmm13
  01a02	f2 44 0f 11 2d
	f8 01 00 00	 movsdx	 QWORD PTR exp_special_values+504, xmm13
  01a0b	f2 44 0f 11 2d
	00 02 00 00	 movsdx	 QWORD PTR exp_special_values+512, xmm13
  01a14	f2 44 0f 11 2d
	08 02 00 00	 movsdx	 QWORD PTR exp_special_values+520, xmm13
  01a1d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01a21	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01a26	f2 0f 11 05 10
	02 00 00	 movsdx	 QWORD PTR exp_special_values+528, xmm0
  01a2e	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01a32	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01a37	f2 0f 11 0d 18
	02 00 00	 movsdx	 QWORD PTR exp_special_values+536, xmm1
  01a3f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01a43	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01a48	f2 0f 11 05 20
	02 00 00	 movsdx	 QWORD PTR exp_special_values+544, xmm0
  01a50	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01a54	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01a59	f2 0f 11 0d 28
	02 00 00	 movsdx	 QWORD PTR exp_special_values+552, xmm1
  01a61	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01a65	f2 0f 11 05 30
	02 00 00	 movsdx	 QWORD PTR exp_special_values+560, xmm0
  01a6d	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01a71	f2 44 0f 11 2d
	40 02 00 00	 movsdx	 QWORD PTR exp_special_values+576, xmm13
  01a7a	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01a7f	f2 0f 11 0d 38
	02 00 00	 movsdx	 QWORD PTR exp_special_values+568, xmm1
  01a87	f2 44 0f 11 2d
	48 02 00 00	 movsdx	 QWORD PTR exp_special_values+584, xmm13
  01a90	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01a94	f2 0f 11 05 50
	02 00 00	 movsdx	 QWORD PTR exp_special_values+592, xmm0
  01a9c	f2 44 0f 11 25
	58 02 00 00	 movsdx	 QWORD PTR exp_special_values+600, xmm12
  01aa5	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01aa9	f2 0f 11 0d 60
	02 00 00	 movsdx	 QWORD PTR exp_special_values+608, xmm1
  01ab1	f2 44 0f 11 35
	68 02 00 00	 movsdx	 QWORD PTR exp_special_values+616, xmm14
  01aba	f2 44 0f 11 2d
	70 02 00 00	 movsdx	 QWORD PTR exp_special_values+624, xmm13
  01ac3	f2 44 0f 11 2d
	78 02 00 00	 movsdx	 QWORD PTR exp_special_values+632, xmm13
  01acc	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01ad0	f2 0f 11 05 80
	02 00 00	 movsdx	 QWORD PTR exp_special_values+640, xmm0
  01ad8	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01adc	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01ae1	f2 0f 11 0d 88
	02 00 00	 movsdx	 QWORD PTR exp_special_values+648, xmm1
  01ae9	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01aed	f2 0f 11 05 90
	02 00 00	 movsdx	 QWORD PTR exp_special_values+656, xmm0
  01af5	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01af9	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01afe	f2 0f 11 0d 98
	02 00 00	 movsdx	 QWORD PTR exp_special_values+664, xmm1
  01b06	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01b0a	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01b0f	f2 0f 11 05 a0
	02 00 00	 movsdx	 QWORD PTR exp_special_values+672, xmm0
  01b17	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01b1b	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01b20	f2 0f 11 0d a8
	02 00 00	 movsdx	 QWORD PTR exp_special_values+680, xmm1
  01b28	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01b2c	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01b31	f2 0f 11 05 b0
	02 00 00	 movsdx	 QWORD PTR exp_special_values+688, xmm0
  01b39	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01b3d	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01b42	f2 0f 11 0d b8
	02 00 00	 movsdx	 QWORD PTR exp_special_values+696, xmm1
  01b4a	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01b4e	f2 44 0f 11 25
	c8 02 00 00	 movsdx	 QWORD PTR exp_special_values+712, xmm12
  01b57	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01b5c	f2 0f 11 05 c0
	02 00 00	 movsdx	 QWORD PTR exp_special_values+704, xmm0
  01b64	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01b68	f2 44 0f 11 35
	d8 02 00 00	 movsdx	 QWORD PTR exp_special_values+728, xmm14
  01b71	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01b76	f2 0f 11 0d d0
	02 00 00	 movsdx	 QWORD PTR exp_special_values+720, xmm1
  01b7e	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01b82	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01b87	f2 0f 11 05 e0
	02 00 00	 movsdx	 QWORD PTR exp_special_values+736, xmm0
  01b8f	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01b93	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01b98	f2 0f 11 0d e8
	02 00 00	 movsdx	 QWORD PTR exp_special_values+744, xmm1
  01ba0	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01ba4	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01ba9	f2 0f 11 05 f0
	02 00 00	 movsdx	 QWORD PTR exp_special_values+752, xmm0
  01bb1	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01bb5	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01bba	f2 0f 11 0d f8
	02 00 00	 movsdx	 QWORD PTR exp_special_values+760, xmm1
  01bc2	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01bc6	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01bcb	f2 0f 11 05 00
	03 00 00	 movsdx	 QWORD PTR exp_special_values+768, xmm0
  01bd3	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01bd7	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01bdc	f2 0f 11 0d 08
	03 00 00	 movsdx	 QWORD PTR exp_special_values+776, xmm1

; 1194 : 
; 1195 :     INIT_SPECIAL_VALUES(log_special_values, {
; 1196 :       C(INF,-P34) C(INF,-P)  C(INF,-P)   C(INF,P)   C(INF,P)  C(INF,P34)  C(INF,N)
; 1197 :       C(INF,-P12) C(U,U)     C(U,U)      C(U,U)     C(U,U)    C(INF,P12)  C(N,N)
; 1198 :       C(INF,-P12) C(U,U)     C(-INF,-P)  C(-INF,P)  C(U,U)    C(INF,P12)  C(N,N)
; 1199 :       C(INF,-P12) C(U,U)     C(-INF,-0.) C(-INF,0.) C(U,U)    C(INF,P12)  C(N,N)
; 1200 :       C(INF,-P12) C(U,U)     C(U,U)      C(U,U)     C(U,U)    C(INF,P12)  C(N,N)
; 1201 :       C(INF,-P14) C(INF,-0.) C(INF,-0.)  C(INF,0.)  C(INF,0.) C(INF,P14)  C(INF,N)
; 1202 :       C(INF,N)    C(N,N)     C(N,N)      C(N,N)     C(N,N)    C(INF,N)    C(N,N)
; 1203 :     })

  01be4	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01be8	f2 0f 11 15 08
	00 00 00	 movsdx	 QWORD PTR log_special_values+8, xmm2
  01bf0	f2 0f 11 05 00
	00 00 00	 movsdx	 QWORD PTR log_special_values, xmm0
  01bf8	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01bfc	f2 0f 11 25 18
	00 00 00	 movsdx	 QWORD PTR log_special_values+24, xmm4
  01c04	f2 0f 11 0d 10
	00 00 00	 movsdx	 QWORD PTR log_special_values+16, xmm1
  01c0c	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01c10	f2 0f 11 25 28
	00 00 00	 movsdx	 QWORD PTR log_special_values+40, xmm4
  01c18	f2 0f 11 05 20
	00 00 00	 movsdx	 QWORD PTR log_special_values+32, xmm0
  01c20	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01c24	f2 0f 11 0d 30
	00 00 00	 movsdx	 QWORD PTR log_special_values+48, xmm1
  01c2c	f2 44 0f 11 0d
	38 00 00 00	 movsdx	 QWORD PTR log_special_values+56, xmm9
  01c35	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01c39	f2 44 0f 11 0d
	48 00 00 00	 movsdx	 QWORD PTR log_special_values+72, xmm9
  01c42	f2 0f 11 05 40
	00 00 00	 movsdx	 QWORD PTR log_special_values+64, xmm0
  01c4a	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01c4e	f2 44 0f 11 05
	58 00 00 00	 movsdx	 QWORD PTR log_special_values+88, xmm8
  01c57	f2 0f 11 0d 50
	00 00 00	 movsdx	 QWORD PTR log_special_values+80, xmm1
  01c5f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01c63	f2 0f 11 05 60
	00 00 00	 movsdx	 QWORD PTR log_special_values+96, xmm0
  01c6b	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01c6f	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01c74	f2 0f 11 0d 68
	00 00 00	 movsdx	 QWORD PTR log_special_values+104, xmm1
  01c7c	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01c80	f2 0f 11 2d 78
	00 00 00	 movsdx	 QWORD PTR log_special_values+120, xmm5
  01c88	f2 0f 11 05 70
	00 00 00	 movsdx	 QWORD PTR log_special_values+112, xmm0
  01c90	f2 44 0f 11 2d
	80 00 00 00	 movsdx	 QWORD PTR log_special_values+128, xmm13
  01c99	f2 44 0f 11 2d
	88 00 00 00	 movsdx	 QWORD PTR log_special_values+136, xmm13
  01ca2	f2 44 0f 11 2d
	90 00 00 00	 movsdx	 QWORD PTR log_special_values+144, xmm13
  01cab	f2 44 0f 11 2d
	98 00 00 00	 movsdx	 QWORD PTR log_special_values+152, xmm13
  01cb4	f2 44 0f 11 2d
	a0 00 00 00	 movsdx	 QWORD PTR log_special_values+160, xmm13
  01cbd	f2 44 0f 11 2d
	a8 00 00 00	 movsdx	 QWORD PTR log_special_values+168, xmm13
  01cc6	f2 44 0f 11 2d
	b0 00 00 00	 movsdx	 QWORD PTR log_special_values+176, xmm13
  01ccf	f2 44 0f 11 2d
	b8 00 00 00	 movsdx	 QWORD PTR log_special_values+184, xmm13
  01cd8	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01cdc	f2 44 0f 11 15
	c8 00 00 00	 movsdx	 QWORD PTR log_special_values+200, xmm10
  01ce5	f2 0f 11 05 c0
	00 00 00	 movsdx	 QWORD PTR log_special_values+192, xmm0
  01ced	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01cf1	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01cf6	f2 0f 11 0d d0
	00 00 00	 movsdx	 QWORD PTR log_special_values+208, xmm1
  01cfe	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01d02	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01d07	f2 0f 11 05 d8
	00 00 00	 movsdx	 QWORD PTR log_special_values+216, xmm0
  01d0f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01d13	f2 0f 11 2d e8
	00 00 00	 movsdx	 QWORD PTR log_special_values+232, xmm5
  01d1b	f2 0f 11 05 e0
	00 00 00	 movsdx	 QWORD PTR log_special_values+224, xmm0
  01d23	f2 44 0f 11 2d
	f0 00 00 00	 movsdx	 QWORD PTR log_special_values+240, xmm13
  01d2c	f2 44 0f 11 2d
	f8 00 00 00	 movsdx	 QWORD PTR log_special_values+248, xmm13
  01d35	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01d39	f2 0f 11 25 08
	01 00 00	 movsdx	 QWORD PTR log_special_values+264, xmm4
  01d41	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  01d46	f2 0f 11 05 00
	01 00 00	 movsdx	 QWORD PTR log_special_values+256, xmm0
  01d4e	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01d52	f2 44 0f 11 0d
	18 01 00 00	 movsdx	 QWORD PTR log_special_values+280, xmm9
  01d5b	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  01d60	f2 0f 11 0d 10
	01 00 00	 movsdx	 QWORD PTR log_special_values+272, xmm1
  01d68	f2 44 0f 11 2d
	20 01 00 00	 movsdx	 QWORD PTR log_special_values+288, xmm13
  01d71	f2 44 0f 11 2d
	28 01 00 00	 movsdx	 QWORD PTR log_special_values+296, xmm13
  01d7a	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01d7e	f2 44 0f 11 15
	38 01 00 00	 movsdx	 QWORD PTR log_special_values+312, xmm10
  01d87	f2 0f 11 05 30
	01 00 00	 movsdx	 QWORD PTR log_special_values+304, xmm0
  01d8f	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01d93	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01d98	f2 0f 11 0d 40
	01 00 00	 movsdx	 QWORD PTR log_special_values+320, xmm1
  01da0	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01da4	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01da9	f2 0f 11 05 48
	01 00 00	 movsdx	 QWORD PTR log_special_values+328, xmm0
  01db1	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01db5	f2 0f 11 2d 58
	01 00 00	 movsdx	 QWORD PTR log_special_values+344, xmm5
  01dbd	f2 0f 11 05 50
	01 00 00	 movsdx	 QWORD PTR log_special_values+336, xmm0
  01dc5	f2 44 0f 11 2d
	60 01 00 00	 movsdx	 QWORD PTR log_special_values+352, xmm13
  01dce	f2 44 0f 11 2d
	68 01 00 00	 movsdx	 QWORD PTR log_special_values+360, xmm13
  01dd7	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01ddb	f2 44 0f 11 25
	78 01 00 00	 movsdx	 QWORD PTR log_special_values+376, xmm12
  01de4	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  01de9	f2 0f 11 05 70
	01 00 00	 movsdx	 QWORD PTR log_special_values+368, xmm0
  01df1	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01df5	f2 44 0f 11 35
	88 01 00 00	 movsdx	 QWORD PTR log_special_values+392, xmm14
  01dfe	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  01e03	f2 0f 11 0d 80
	01 00 00	 movsdx	 QWORD PTR log_special_values+384, xmm1
  01e0b	f2 44 0f 11 2d
	90 01 00 00	 movsdx	 QWORD PTR log_special_values+400, xmm13
  01e14	f2 44 0f 11 2d
	98 01 00 00	 movsdx	 QWORD PTR log_special_values+408, xmm13
  01e1d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01e21	f2 44 0f 11 15
	a8 01 00 00	 movsdx	 QWORD PTR log_special_values+424, xmm10
  01e2a	f2 0f 11 05 a0
	01 00 00	 movsdx	 QWORD PTR log_special_values+416, xmm0
  01e32	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01e36	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01e3b	f2 0f 11 0d b0
	01 00 00	 movsdx	 QWORD PTR log_special_values+432, xmm1
  01e43	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01e47	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01e4c	f2 0f 11 05 b8
	01 00 00	 movsdx	 QWORD PTR log_special_values+440, xmm0
  01e54	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01e58	f2 0f 11 05 c0
	01 00 00	 movsdx	 QWORD PTR log_special_values+448, xmm0
  01e60	f2 0f 11 2d c8
	01 00 00	 movsdx	 QWORD PTR log_special_values+456, xmm5
  01e68	f2 44 0f 11 2d
	d0 01 00 00	 movsdx	 QWORD PTR log_special_values+464, xmm13
  01e71	f2 44 0f 11 2d
	d8 01 00 00	 movsdx	 QWORD PTR log_special_values+472, xmm13
  01e7a	f2 44 0f 11 2d
	e0 01 00 00	 movsdx	 QWORD PTR log_special_values+480, xmm13
  01e83	f2 44 0f 11 2d
	e8 01 00 00	 movsdx	 QWORD PTR log_special_values+488, xmm13
  01e8c	f2 44 0f 11 2d
	f0 01 00 00	 movsdx	 QWORD PTR log_special_values+496, xmm13
  01e95	f2 44 0f 11 2d
	f8 01 00 00	 movsdx	 QWORD PTR log_special_values+504, xmm13
  01e9e	f2 44 0f 11 2d
	00 02 00 00	 movsdx	 QWORD PTR log_special_values+512, xmm13
  01ea7	f2 44 0f 11 2d
	08 02 00 00	 movsdx	 QWORD PTR log_special_values+520, xmm13
  01eb0	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01eb4	f2 44 0f 11 15
	18 02 00 00	 movsdx	 QWORD PTR log_special_values+536, xmm10
  01ebd	f2 0f 11 05 10
	02 00 00	 movsdx	 QWORD PTR log_special_values+528, xmm0
  01ec5	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01ec9	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01ece	f2 0f 11 0d 20
	02 00 00	 movsdx	 QWORD PTR log_special_values+544, xmm1
  01ed6	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01eda	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01edf	f2 0f 11 05 28
	02 00 00	 movsdx	 QWORD PTR log_special_values+552, xmm0
  01ee7	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01eeb	f2 0f 11 1d 38
	02 00 00	 movsdx	 QWORD PTR log_special_values+568, xmm3
  01ef3	f2 0f 11 05 30
	02 00 00	 movsdx	 QWORD PTR log_special_values+560, xmm0
  01efb	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01eff	f2 44 0f 11 25
	48 02 00 00	 movsdx	 QWORD PTR log_special_values+584, xmm12
  01f08	f2 0f 11 0d 40
	02 00 00	 movsdx	 QWORD PTR log_special_values+576, xmm1
  01f10	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01f14	f2 44 0f 11 25
	58 02 00 00	 movsdx	 QWORD PTR log_special_values+600, xmm12
  01f1d	f2 0f 11 05 50
	02 00 00	 movsdx	 QWORD PTR log_special_values+592, xmm0
  01f25	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01f29	f2 44 0f 11 35
	68 02 00 00	 movsdx	 QWORD PTR log_special_values+616, xmm14
  01f32	f2 0f 11 0d 60
	02 00 00	 movsdx	 QWORD PTR log_special_values+608, xmm1
  01f3a	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01f3e	f2 44 0f 11 35
	78 02 00 00	 movsdx	 QWORD PTR log_special_values+632, xmm14
  01f47	f2 0f 11 05 70
	02 00 00	 movsdx	 QWORD PTR log_special_values+624, xmm0
  01f4f	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01f53	f2 0f 11 3d 88
	02 00 00	 movsdx	 QWORD PTR log_special_values+648, xmm7
  01f5b	f2 0f 11 0d 80
	02 00 00	 movsdx	 QWORD PTR log_special_values+640, xmm1
  01f63	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01f67	f2 0f 11 05 90
	02 00 00	 movsdx	 QWORD PTR log_special_values+656, xmm0
  01f6f	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01f73	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01f78	f2 0f 11 0d 98
	02 00 00	 movsdx	 QWORD PTR log_special_values+664, xmm1
  01f80	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01f84	f2 0f 11 05 a0
	02 00 00	 movsdx	 QWORD PTR log_special_values+672, xmm0
  01f8c	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01f90	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01f95	f2 0f 11 0d a8
	02 00 00	 movsdx	 QWORD PTR log_special_values+680, xmm1
  01f9d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01fa1	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01fa6	f2 0f 11 05 b0
	02 00 00	 movsdx	 QWORD PTR log_special_values+688, xmm0
  01fae	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01fb2	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01fb7	f2 0f 11 0d b8
	02 00 00	 movsdx	 QWORD PTR log_special_values+696, xmm1
  01fbf	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01fc3	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01fc8	f2 0f 11 05 c0
	02 00 00	 movsdx	 QWORD PTR log_special_values+704, xmm0
  01fd0	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01fd4	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01fd9	f2 0f 11 0d c8
	02 00 00	 movsdx	 QWORD PTR log_special_values+712, xmm1
  01fe1	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  01fe5	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  01fea	f2 0f 11 05 d0
	02 00 00	 movsdx	 QWORD PTR log_special_values+720, xmm0
  01ff2	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  01ff6	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  01ffb	f2 0f 11 0d d8
	02 00 00	 movsdx	 QWORD PTR log_special_values+728, xmm1
  02003	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02007	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0200c	f2 0f 11 05 e0
	02 00 00	 movsdx	 QWORD PTR log_special_values+736, xmm0
  02014	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02018	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0201d	f2 0f 11 0d e8
	02 00 00	 movsdx	 QWORD PTR log_special_values+744, xmm1
  02025	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02029	f2 0f 11 05 f0
	02 00 00	 movsdx	 QWORD PTR log_special_values+752, xmm0
  02031	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02035	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0203a	f2 0f 11 0d f8
	02 00 00	 movsdx	 QWORD PTR log_special_values+760, xmm1
  02042	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02046	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0204b	f2 0f 11 05 00
	03 00 00	 movsdx	 QWORD PTR log_special_values+768, xmm0
  02053	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02057	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0205c	f2 0f 11 0d 08
	03 00 00	 movsdx	 QWORD PTR log_special_values+776, xmm1

; 1204 : 
; 1205 :     INIT_SPECIAL_VALUES(sinh_special_values, {
; 1206 :       C(INF,N) C(U,U) C(-INF,-0.) C(-INF,0.) C(U,U) C(INF,N) C(INF,N)
; 1207 :       C(N,N)   C(U,U) C(U,U)      C(U,U)     C(U,U) C(N,N)   C(N,N)
; 1208 :       C(0.,N)  C(U,U) C(-0.,-0.)  C(-0.,0.)  C(U,U) C(0.,N)  C(0.,N)
; 1209 :       C(0.,N)  C(U,U) C(0.,-0.)   C(0.,0.)   C(U,U) C(0.,N)  C(0.,N)
; 1210 :       C(N,N)   C(U,U) C(U,U)      C(U,U)     C(U,U) C(N,N)   C(N,N)
; 1211 :       C(INF,N) C(U,U) C(INF,-0.)  C(INF,0.)  C(U,U) C(INF,N) C(INF,N)
; 1212 :       C(N,N)   C(N,N) C(N,-0.)    C(N,0.)    C(N,N) C(N,N)   C(N,N)
; 1213 :     })

  02064	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02068	f2 0f 11 05 00
	00 00 00	 movsdx	 QWORD PTR sinh_special_values, xmm0
  02070	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02074	f2 44 0f 11 2d
	10 00 00 00	 movsdx	 QWORD PTR sinh_special_values+16, xmm13
  0207d	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02082	f2 0f 11 0d 08
	00 00 00	 movsdx	 QWORD PTR sinh_special_values+8, xmm1
  0208a	f2 44 0f 11 2d
	18 00 00 00	 movsdx	 QWORD PTR sinh_special_values+24, xmm13
  02093	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02097	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  0209c	f2 0f 11 05 20
	00 00 00	 movsdx	 QWORD PTR sinh_special_values+32, xmm0
  020a4	f2 44 0f 11 25
	28 00 00 00	 movsdx	 QWORD PTR sinh_special_values+40, xmm12
  020ad	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  020b1	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  020b6	f2 0f 11 0d 30
	00 00 00	 movsdx	 QWORD PTR sinh_special_values+48, xmm1
  020be	f2 44 0f 11 35
	38 00 00 00	 movsdx	 QWORD PTR sinh_special_values+56, xmm14
  020c7	f2 44 0f 11 2d
	40 00 00 00	 movsdx	 QWORD PTR sinh_special_values+64, xmm13
  020d0	f2 44 0f 11 2d
	48 00 00 00	 movsdx	 QWORD PTR sinh_special_values+72, xmm13
  020d9	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  020dd	f2 0f 11 05 50
	00 00 00	 movsdx	 QWORD PTR sinh_special_values+80, xmm0
  020e5	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  020e9	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  020ee	f2 0f 11 0d 58
	00 00 00	 movsdx	 QWORD PTR sinh_special_values+88, xmm1
  020f6	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  020fa	f2 0f 11 05 60
	00 00 00	 movsdx	 QWORD PTR sinh_special_values+96, xmm0
  02102	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02106	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0210b	f2 0f 11 0d 68
	00 00 00	 movsdx	 QWORD PTR sinh_special_values+104, xmm1
  02113	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02117	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0211c	f2 0f 11 05 70
	00 00 00	 movsdx	 QWORD PTR sinh_special_values+112, xmm0
  02124	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02128	f2 44 0f 11 2d
	80 00 00 00	 movsdx	 QWORD PTR sinh_special_values+128, xmm13
  02131	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02136	f2 0f 11 0d 78
	00 00 00	 movsdx	 QWORD PTR sinh_special_values+120, xmm1
  0213e	f2 44 0f 11 2d
	88 00 00 00	 movsdx	 QWORD PTR sinh_special_values+136, xmm13
  02147	f2 44 0f 11 2d
	90 00 00 00	 movsdx	 QWORD PTR sinh_special_values+144, xmm13
  02150	f2 44 0f 11 2d
	98 00 00 00	 movsdx	 QWORD PTR sinh_special_values+152, xmm13
  02159	f2 44 0f 11 2d
	a0 00 00 00	 movsdx	 QWORD PTR sinh_special_values+160, xmm13
  02162	f2 44 0f 11 2d
	a8 00 00 00	 movsdx	 QWORD PTR sinh_special_values+168, xmm13
  0216b	f2 44 0f 11 2d
	b0 00 00 00	 movsdx	 QWORD PTR sinh_special_values+176, xmm13
  02174	f2 44 0f 11 2d
	b8 00 00 00	 movsdx	 QWORD PTR sinh_special_values+184, xmm13
  0217d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02181	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02186	f2 0f 11 05 c0
	00 00 00	 movsdx	 QWORD PTR sinh_special_values+192, xmm0
  0218e	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02192	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02197	f2 0f 11 0d c8
	00 00 00	 movsdx	 QWORD PTR sinh_special_values+200, xmm1
  0219f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  021a3	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  021a8	f2 0f 11 05 d0
	00 00 00	 movsdx	 QWORD PTR sinh_special_values+208, xmm0
  021b0	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  021b4	f2 44 0f 11 35
	e0 00 00 00	 movsdx	 QWORD PTR sinh_special_values+224, xmm14
  021bd	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  021c2	f2 0f 11 0d d8
	00 00 00	 movsdx	 QWORD PTR sinh_special_values+216, xmm1
  021ca	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  021ce	f2 44 0f 11 2d
	f0 00 00 00	 movsdx	 QWORD PTR sinh_special_values+240, xmm13
  021d7	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  021dc	f2 0f 11 05 e8
	00 00 00	 movsdx	 QWORD PTR sinh_special_values+232, xmm0
  021e4	f2 44 0f 11 2d
	f8 00 00 00	 movsdx	 QWORD PTR sinh_special_values+248, xmm13
  021ed	f2 44 0f 11 25
	00 01 00 00	 movsdx	 QWORD PTR sinh_special_values+256, xmm12
  021f6	f2 44 0f 11 25
	08 01 00 00	 movsdx	 QWORD PTR sinh_special_values+264, xmm12
  021ff	f2 44 0f 11 25
	10 01 00 00	 movsdx	 QWORD PTR sinh_special_values+272, xmm12
  02208	f2 44 0f 11 35
	18 01 00 00	 movsdx	 QWORD PTR sinh_special_values+280, xmm14
  02211	f2 44 0f 11 2d
	20 01 00 00	 movsdx	 QWORD PTR sinh_special_values+288, xmm13
  0221a	f2 44 0f 11 2d
	28 01 00 00	 movsdx	 QWORD PTR sinh_special_values+296, xmm13
  02223	f2 44 0f 11 35
	30 01 00 00	 movsdx	 QWORD PTR sinh_special_values+304, xmm14
  0222c	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02230	f2 44 0f 11 35
	40 01 00 00	 movsdx	 QWORD PTR sinh_special_values+320, xmm14
  02239	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0223e	f2 0f 11 05 38
	01 00 00	 movsdx	 QWORD PTR sinh_special_values+312, xmm0
  02246	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0224a	f2 44 0f 11 35
	50 01 00 00	 movsdx	 QWORD PTR sinh_special_values+336, xmm14
  02253	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02258	f2 0f 11 0d 48
	01 00 00	 movsdx	 QWORD PTR sinh_special_values+328, xmm1
  02260	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02264	f2 44 0f 11 2d
	60 01 00 00	 movsdx	 QWORD PTR sinh_special_values+352, xmm13
  0226d	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02272	f2 44 0f 11 2d
	68 01 00 00	 movsdx	 QWORD PTR sinh_special_values+360, xmm13
  0227b	f2 44 0f 11 35
	70 01 00 00	 movsdx	 QWORD PTR sinh_special_values+368, xmm14
  02284	f2 0f 11 05 58
	01 00 00	 movsdx	 QWORD PTR sinh_special_values+344, xmm0
  0228c	f2 44 0f 11 25
	78 01 00 00	 movsdx	 QWORD PTR sinh_special_values+376, xmm12
  02295	f2 44 0f 11 35
	80 01 00 00	 movsdx	 QWORD PTR sinh_special_values+384, xmm14
  0229e	f2 44 0f 11 35
	88 01 00 00	 movsdx	 QWORD PTR sinh_special_values+392, xmm14
  022a7	f2 44 0f 11 2d
	90 01 00 00	 movsdx	 QWORD PTR sinh_special_values+400, xmm13
  022b0	f2 44 0f 11 2d
	98 01 00 00	 movsdx	 QWORD PTR sinh_special_values+408, xmm13
  022b9	f2 44 0f 11 35
	a0 01 00 00	 movsdx	 QWORD PTR sinh_special_values+416, xmm14
  022c2	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  022c6	f2 44 0f 11 35
	b0 01 00 00	 movsdx	 QWORD PTR sinh_special_values+432, xmm14
  022cf	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  022d4	f2 0f 11 05 a8
	01 00 00	 movsdx	 QWORD PTR sinh_special_values+424, xmm0
  022dc	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  022e0	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  022e5	f2 0f 11 0d b8
	01 00 00	 movsdx	 QWORD PTR sinh_special_values+440, xmm1
  022ed	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  022f1	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  022f6	f2 0f 11 05 c0
	01 00 00	 movsdx	 QWORD PTR sinh_special_values+448, xmm0
  022fe	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02302	f2 44 0f 11 2d
	d0 01 00 00	 movsdx	 QWORD PTR sinh_special_values+464, xmm13
  0230b	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02310	f2 0f 11 0d c8
	01 00 00	 movsdx	 QWORD PTR sinh_special_values+456, xmm1
  02318	f2 44 0f 11 2d
	d8 01 00 00	 movsdx	 QWORD PTR sinh_special_values+472, xmm13
  02321	f2 44 0f 11 2d
	e0 01 00 00	 movsdx	 QWORD PTR sinh_special_values+480, xmm13
  0232a	f2 44 0f 11 2d
	e8 01 00 00	 movsdx	 QWORD PTR sinh_special_values+488, xmm13
  02333	f2 44 0f 11 2d
	f0 01 00 00	 movsdx	 QWORD PTR sinh_special_values+496, xmm13
  0233c	f2 44 0f 11 2d
	f8 01 00 00	 movsdx	 QWORD PTR sinh_special_values+504, xmm13
  02345	f2 44 0f 11 2d
	00 02 00 00	 movsdx	 QWORD PTR sinh_special_values+512, xmm13
  0234e	f2 44 0f 11 2d
	08 02 00 00	 movsdx	 QWORD PTR sinh_special_values+520, xmm13
  02357	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0235b	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02360	f2 0f 11 05 10
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+528, xmm0
  02368	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0236c	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02371	f2 0f 11 0d 18
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+536, xmm1
  02379	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0237d	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02382	f2 0f 11 05 20
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+544, xmm0
  0238a	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0238e	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02393	f2 0f 11 0d 28
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+552, xmm1
  0239b	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0239f	f2 0f 11 05 30
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+560, xmm0
  023a7	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  023ab	f2 44 0f 11 2d
	40 02 00 00	 movsdx	 QWORD PTR sinh_special_values+576, xmm13
  023b4	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  023b9	f2 0f 11 0d 38
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+568, xmm1
  023c1	f2 44 0f 11 2d
	48 02 00 00	 movsdx	 QWORD PTR sinh_special_values+584, xmm13
  023ca	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  023ce	f2 0f 11 05 50
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+592, xmm0
  023d6	f2 44 0f 11 25
	58 02 00 00	 movsdx	 QWORD PTR sinh_special_values+600, xmm12
  023df	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  023e3	f2 0f 11 0d 60
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+608, xmm1
  023eb	f2 44 0f 11 35
	68 02 00 00	 movsdx	 QWORD PTR sinh_special_values+616, xmm14
  023f4	f2 44 0f 11 2d
	70 02 00 00	 movsdx	 QWORD PTR sinh_special_values+624, xmm13
  023fd	f2 44 0f 11 2d
	78 02 00 00	 movsdx	 QWORD PTR sinh_special_values+632, xmm13
  02406	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0240a	f2 0f 11 05 80
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+640, xmm0
  02412	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02416	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0241b	f2 0f 11 0d 88
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+648, xmm1
  02423	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02427	f2 0f 11 05 90
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+656, xmm0
  0242f	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02433	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02438	f2 0f 11 0d 98
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+664, xmm1
  02440	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02444	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02449	f2 0f 11 05 a0
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+672, xmm0
  02451	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02455	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0245a	f2 0f 11 0d a8
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+680, xmm1
  02462	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02466	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0246b	f2 0f 11 05 b0
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+688, xmm0
  02473	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02477	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0247c	f2 0f 11 0d b8
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+696, xmm1
  02484	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02488	f2 44 0f 11 25
	c8 02 00 00	 movsdx	 QWORD PTR sinh_special_values+712, xmm12
  02491	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02496	f2 0f 11 05 c0
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+704, xmm0
  0249e	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  024a2	f2 44 0f 11 35
	d8 02 00 00	 movsdx	 QWORD PTR sinh_special_values+728, xmm14
  024ab	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  024b0	f2 0f 11 0d d0
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+720, xmm1
  024b8	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  024bc	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  024c1	f2 0f 11 05 e0
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+736, xmm0
  024c9	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  024cd	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  024d2	f2 0f 11 0d e8
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+744, xmm1
  024da	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  024de	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  024e3	f2 0f 11 05 f0
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+752, xmm0
  024eb	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  024ef	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  024f4	f2 0f 11 0d f8
	02 00 00	 movsdx	 QWORD PTR sinh_special_values+760, xmm1
  024fc	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02500	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02505	f2 0f 11 05 00
	03 00 00	 movsdx	 QWORD PTR sinh_special_values+768, xmm0
  0250d	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02511	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02516	f2 0f 11 0d 08
	03 00 00	 movsdx	 QWORD PTR sinh_special_values+776, xmm1

; 1214 : 
; 1215 :     INIT_SPECIAL_VALUES(sqrt_special_values, {
; 1216 :       C(INF,-INF) C(0.,-INF) C(0.,-INF) C(0.,INF) C(0.,INF) C(INF,INF) C(N,INF)
; 1217 :       C(INF,-INF) C(U,U)     C(U,U)     C(U,U)    C(U,U)    C(INF,INF) C(N,N)
; 1218 :       C(INF,-INF) C(U,U)     C(0.,-0.)  C(0.,0.)  C(U,U)    C(INF,INF) C(N,N)
; 1219 :       C(INF,-INF) C(U,U)     C(0.,-0.)  C(0.,0.)  C(U,U)    C(INF,INF) C(N,N)
; 1220 :       C(INF,-INF) C(U,U)     C(U,U)     C(U,U)    C(U,U)    C(INF,INF) C(N,N)
; 1221 :       C(INF,-INF) C(INF,-0.) C(INF,-0.) C(INF,0.) C(INF,0.) C(INF,INF) C(INF,N)
; 1222 :       C(INF,-INF) C(N,N)     C(N,N)     C(N,N)    C(N,N)    C(INF,INF) C(N,N)
; 1223 :     })

  0251e	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02522	f2 0f 11 05 00
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values, xmm0
  0252a	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0252e	f2 44 0f 11 35
	10 00 00 00	 movsdx	 QWORD PTR sqrt_special_values+16, xmm14
  02537	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  0253c	f2 0f 11 0d 08
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+8, xmm1
  02544	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02548	f2 44 0f 11 35
	20 00 00 00	 movsdx	 QWORD PTR sqrt_special_values+32, xmm14
  02551	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  02556	f2 0f 11 05 18
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+24, xmm0
  0255e	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02562	f2 44 0f 11 35
	30 00 00 00	 movsdx	 QWORD PTR sqrt_special_values+48, xmm14
  0256b	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  02570	f2 0f 11 0d 28
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+40, xmm1
  02578	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0257c	f2 44 0f 11 35
	40 00 00 00	 movsdx	 QWORD PTR sqrt_special_values+64, xmm14
  02585	f2 0f 11 05 38
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+56, xmm0
  0258d	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02591	f2 0f 11 0d 48
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+72, xmm1
  02599	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0259d	f2 0f 11 05 50
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+80, xmm0
  025a5	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  025a9	f2 0f 11 0d 58
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+88, xmm1
  025b1	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  025b5	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  025ba	f2 0f 11 05 60
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+96, xmm0
  025c2	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  025c6	f2 0f 11 05 68
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+104, xmm0
  025ce	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  025d2	f2 0f 11 0d 70
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+112, xmm1
  025da	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  025de	f2 44 0f 11 2d
	80 00 00 00	 movsdx	 QWORD PTR sqrt_special_values+128, xmm13
  025e7	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  025ec	f2 0f 11 05 78
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+120, xmm0
  025f4	f2 44 0f 11 2d
	88 00 00 00	 movsdx	 QWORD PTR sqrt_special_values+136, xmm13
  025fd	f2 44 0f 11 2d
	90 00 00 00	 movsdx	 QWORD PTR sqrt_special_values+144, xmm13
  02606	f2 44 0f 11 2d
	98 00 00 00	 movsdx	 QWORD PTR sqrt_special_values+152, xmm13
  0260f	f2 44 0f 11 2d
	a0 00 00 00	 movsdx	 QWORD PTR sqrt_special_values+160, xmm13
  02618	f2 44 0f 11 2d
	a8 00 00 00	 movsdx	 QWORD PTR sqrt_special_values+168, xmm13
  02621	f2 44 0f 11 2d
	b0 00 00 00	 movsdx	 QWORD PTR sqrt_special_values+176, xmm13
  0262a	f2 44 0f 11 2d
	b8 00 00 00	 movsdx	 QWORD PTR sqrt_special_values+184, xmm13
  02633	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02637	f2 0f 11 05 c0
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+192, xmm0
  0263f	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02643	f2 0f 11 0d c8
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+200, xmm1
  0264b	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0264f	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02654	f2 0f 11 05 d0
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+208, xmm0
  0265c	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02660	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02665	f2 0f 11 0d d8
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+216, xmm1
  0266d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02671	f2 0f 11 05 e0
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+224, xmm0
  02679	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0267d	f2 44 0f 11 2d
	f0 00 00 00	 movsdx	 QWORD PTR sqrt_special_values+240, xmm13
  02686	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  0268b	f2 44 0f 11 2d
	f8 00 00 00	 movsdx	 QWORD PTR sqrt_special_values+248, xmm13
  02694	f2 44 0f 11 35
	00 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+256, xmm14
  0269d	f2 44 0f 11 25
	08 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+264, xmm12
  026a6	f2 0f 11 0d e8
	00 00 00	 movsdx	 QWORD PTR sqrt_special_values+232, xmm1
  026ae	f2 44 0f 11 35
	10 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+272, xmm14
  026b7	f2 44 0f 11 35
	18 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+280, xmm14
  026c0	f2 44 0f 11 2d
	20 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+288, xmm13
  026c9	f2 44 0f 11 2d
	28 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+296, xmm13
  026d2	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  026d6	f2 0f 11 05 30
	01 00 00	 movsdx	 QWORD PTR sqrt_special_values+304, xmm0
  026de	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  026e2	f2 0f 11 0d 38
	01 00 00	 movsdx	 QWORD PTR sqrt_special_values+312, xmm1
  026ea	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  026ee	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  026f3	f2 0f 11 05 40
	01 00 00	 movsdx	 QWORD PTR sqrt_special_values+320, xmm0
  026fb	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  026ff	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02704	f2 0f 11 0d 48
	01 00 00	 movsdx	 QWORD PTR sqrt_special_values+328, xmm1
  0270c	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02710	f2 0f 11 05 50
	01 00 00	 movsdx	 QWORD PTR sqrt_special_values+336, xmm0
  02718	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0271c	f2 44 0f 11 2d
	60 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+352, xmm13
  02725	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  0272a	f2 0f 11 0d 58
	01 00 00	 movsdx	 QWORD PTR sqrt_special_values+344, xmm1
  02732	f2 44 0f 11 2d
	68 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+360, xmm13
  0273b	f2 44 0f 11 35
	70 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+368, xmm14
  02744	f2 44 0f 11 25
	78 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+376, xmm12
  0274d	f2 44 0f 11 35
	80 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+384, xmm14
  02756	f2 44 0f 11 35
	88 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+392, xmm14
  0275f	f2 44 0f 11 2d
	90 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+400, xmm13
  02768	f2 44 0f 11 2d
	98 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+408, xmm13
  02771	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02775	f2 0f 11 05 a0
	01 00 00	 movsdx	 QWORD PTR sqrt_special_values+416, xmm0
  0277d	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02781	f2 0f 11 0d a8
	01 00 00	 movsdx	 QWORD PTR sqrt_special_values+424, xmm1
  02789	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0278d	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02792	f2 0f 11 05 b0
	01 00 00	 movsdx	 QWORD PTR sqrt_special_values+432, xmm0
  0279a	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0279e	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  027a3	f2 0f 11 0d b8
	01 00 00	 movsdx	 QWORD PTR sqrt_special_values+440, xmm1
  027ab	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  027af	f2 0f 11 05 c0
	01 00 00	 movsdx	 QWORD PTR sqrt_special_values+448, xmm0
  027b7	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  027bb	f2 44 0f 11 2d
	d0 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+464, xmm13
  027c4	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  027c9	f2 0f 11 0d c8
	01 00 00	 movsdx	 QWORD PTR sqrt_special_values+456, xmm1
  027d1	f2 44 0f 11 2d
	d8 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+472, xmm13
  027da	f2 44 0f 11 2d
	e0 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+480, xmm13
  027e3	f2 44 0f 11 2d
	e8 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+488, xmm13
  027ec	f2 44 0f 11 2d
	f0 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+496, xmm13
  027f5	f2 44 0f 11 2d
	f8 01 00 00	 movsdx	 QWORD PTR sqrt_special_values+504, xmm13
  027fe	f2 44 0f 11 2d
	00 02 00 00	 movsdx	 QWORD PTR sqrt_special_values+512, xmm13
  02807	f2 44 0f 11 2d
	08 02 00 00	 movsdx	 QWORD PTR sqrt_special_values+520, xmm13
  02810	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02814	f2 0f 11 05 10
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+528, xmm0
  0281c	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02820	f2 0f 11 0d 18
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+536, xmm1
  02828	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0282c	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02831	f2 0f 11 05 20
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+544, xmm0
  02839	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0283d	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02842	f2 0f 11 0d 28
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+552, xmm1
  0284a	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0284e	f2 0f 11 05 30
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+560, xmm0
  02856	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  0285a	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  0285f	f2 0f 11 0d 38
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+568, xmm1
  02867	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0286b	f2 44 0f 11 25
	48 02 00 00	 movsdx	 QWORD PTR sqrt_special_values+584, xmm12
  02874	f2 0f 11 05 40
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+576, xmm0
  0287c	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02880	f2 44 0f 11 25
	58 02 00 00	 movsdx	 QWORD PTR sqrt_special_values+600, xmm12
  02889	f2 0f 11 0d 50
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+592, xmm1
  02891	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02895	f2 44 0f 11 35
	68 02 00 00	 movsdx	 QWORD PTR sqrt_special_values+616, xmm14
  0289e	f2 0f 11 05 60
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+608, xmm0
  028a6	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  028aa	f2 44 0f 11 35
	78 02 00 00	 movsdx	 QWORD PTR sqrt_special_values+632, xmm14
  028b3	f2 0f 11 0d 70
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+624, xmm1
  028bb	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  028bf	f2 0f 11 05 80
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+640, xmm0
  028c7	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  028cb	f2 0f 11 0d 88
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+648, xmm1
  028d3	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  028d7	f2 0f 11 05 90
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+656, xmm0
  028df	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  028e3	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  028e8	f2 0f 11 0d 98
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+664, xmm1
  028f0	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  028f4	f2 0f 11 05 a0
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+672, xmm0
  028fc	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02900	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  02905	f2 0f 11 0d a8
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+680, xmm1
  0290d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02911	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02916	f2 0f 11 05 b0
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+688, xmm0
  0291e	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02922	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02927	f2 0f 11 0d b8
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+696, xmm1
  0292f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02933	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02938	f2 0f 11 05 c0
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+704, xmm0
  02940	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02944	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02949	f2 0f 11 0d c8
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+712, xmm1
  02951	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02955	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0295a	f2 0f 11 05 d0
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+720, xmm0
  02962	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02966	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0296b	f2 0f 11 0d d8
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+728, xmm1
  02973	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02977	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0297c	f2 0f 11 05 e0
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+736, xmm0
  02984	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02988	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0298d	f2 0f 11 0d e8
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+744, xmm1
  02995	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02999	f2 0f 11 05 f0
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+752, xmm0
  029a1	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  029a5	f2 0f 11 0d f8
	02 00 00	 movsdx	 QWORD PTR sqrt_special_values+760, xmm1
  029ad	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  029b1	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  029b6	f2 0f 11 05 00
	03 00 00	 movsdx	 QWORD PTR sqrt_special_values+768, xmm0
  029be	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]

; 1224 : 
; 1225 :     INIT_SPECIAL_VALUES(tanh_special_values, {
; 1226 :       C(-1.,0.) C(U,U) C(-1.,-0.) C(-1.,0.) C(U,U) C(-1.,0.) C(-1.,0.)
; 1227 :       C(N,N)    C(U,U) C(U,U)     C(U,U)    C(U,U) C(N,N)    C(N,N)
; 1228 :       C(N,N)    C(U,U) C(-0.,-0.) C(-0.,0.) C(U,U) C(N,N)    C(N,N)
; 1229 :       C(N,N)    C(U,U) C(0.,-0.)  C(0.,0.)  C(U,U) C(N,N)    C(N,N)
; 1230 :       C(N,N)    C(U,U) C(U,U)     C(U,U)    C(U,U) C(N,N)    C(N,N)
; 1231 :       C(1.,0.)  C(U,U) C(1.,-0.)  C(1.,0.)  C(U,U) C(1.,0.)  C(1.,0.)
; 1232 :       C(N,N)    C(N,N) C(N,-0.)   C(N,0.)   C(N,N) C(N,N)    C(N,N)
; 1233 :     })

  029c2	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@bff0000000000000
  029ca	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  029cf	f2 0f 11 05 00
	00 00 00	 movsdx	 QWORD PTR tanh_special_values, xmm0
  029d7	f2 0f 11 05 20
	00 00 00	 movsdx	 QWORD PTR tanh_special_values+32, xmm0
  029df	f2 0f 11 05 30
	00 00 00	 movsdx	 QWORD PTR tanh_special_values+48, xmm0
  029e7	f2 0f 11 05 50
	00 00 00	 movsdx	 QWORD PTR tanh_special_values+80, xmm0
  029ef	f2 0f 11 05 60
	00 00 00	 movsdx	 QWORD PTR tanh_special_values+96, xmm0
  029f7	f2 0f 11 0d 08
	03 00 00	 movsdx	 QWORD PTR sqrt_special_values+776, xmm1
  029ff	f2 44 0f 11 35
	08 00 00 00	 movsdx	 QWORD PTR tanh_special_values+8, xmm14
  02a08	f2 44 0f 11 2d
	10 00 00 00	 movsdx	 QWORD PTR tanh_special_values+16, xmm13
  02a11	f2 44 0f 11 2d
	18 00 00 00	 movsdx	 QWORD PTR tanh_special_values+24, xmm13
  02a1a	f2 44 0f 11 25
	28 00 00 00	 movsdx	 QWORD PTR tanh_special_values+40, xmm12
  02a23	f2 44 0f 11 35
	38 00 00 00	 movsdx	 QWORD PTR tanh_special_values+56, xmm14
  02a2c	f2 44 0f 11 2d
	40 00 00 00	 movsdx	 QWORD PTR tanh_special_values+64, xmm13
  02a35	f2 44 0f 11 2d
	48 00 00 00	 movsdx	 QWORD PTR tanh_special_values+72, xmm13
  02a3e	f2 44 0f 11 35
	58 00 00 00	 movsdx	 QWORD PTR tanh_special_values+88, xmm14
  02a47	f2 44 0f 11 35
	68 00 00 00	 movsdx	 QWORD PTR tanh_special_values+104, xmm14
  02a50	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02a54	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02a59	f2 0f 11 05 70
	00 00 00	 movsdx	 QWORD PTR tanh_special_values+112, xmm0
  02a61	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02a65	f2 44 0f 11 2d
	80 00 00 00	 movsdx	 QWORD PTR tanh_special_values+128, xmm13
  02a6e	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02a73	f2 0f 11 0d 78
	00 00 00	 movsdx	 QWORD PTR tanh_special_values+120, xmm1
  02a7b	f2 44 0f 11 2d
	88 00 00 00	 movsdx	 QWORD PTR tanh_special_values+136, xmm13
  02a84	f2 44 0f 11 2d
	90 00 00 00	 movsdx	 QWORD PTR tanh_special_values+144, xmm13
  02a8d	f2 44 0f 11 2d
	98 00 00 00	 movsdx	 QWORD PTR tanh_special_values+152, xmm13
  02a96	f2 44 0f 11 2d
	a0 00 00 00	 movsdx	 QWORD PTR tanh_special_values+160, xmm13
  02a9f	f2 44 0f 11 2d
	a8 00 00 00	 movsdx	 QWORD PTR tanh_special_values+168, xmm13
  02aa8	f2 44 0f 11 2d
	b0 00 00 00	 movsdx	 QWORD PTR tanh_special_values+176, xmm13
  02ab1	f2 44 0f 11 2d
	b8 00 00 00	 movsdx	 QWORD PTR tanh_special_values+184, xmm13
  02aba	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02abe	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02ac3	f2 0f 11 05 c0
	00 00 00	 movsdx	 QWORD PTR tanh_special_values+192, xmm0
  02acb	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02acf	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02ad4	f2 0f 11 0d c8
	00 00 00	 movsdx	 QWORD PTR tanh_special_values+200, xmm1
  02adc	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02ae0	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02ae5	f2 0f 11 05 d0
	00 00 00	 movsdx	 QWORD PTR tanh_special_values+208, xmm0
  02aed	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02af1	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02af6	f2 0f 11 0d d8
	00 00 00	 movsdx	 QWORD PTR tanh_special_values+216, xmm1
  02afe	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02b02	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02b07	f2 0f 11 05 e0
	00 00 00	 movsdx	 QWORD PTR tanh_special_values+224, xmm0
  02b0f	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02b13	f2 44 0f 11 2d
	f0 00 00 00	 movsdx	 QWORD PTR tanh_special_values+240, xmm13
  02b1c	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02b21	f2 0f 11 0d e8
	00 00 00	 movsdx	 QWORD PTR tanh_special_values+232, xmm1
  02b29	f2 44 0f 11 2d
	f8 00 00 00	 movsdx	 QWORD PTR tanh_special_values+248, xmm13
  02b32	f2 44 0f 11 25
	00 01 00 00	 movsdx	 QWORD PTR tanh_special_values+256, xmm12
  02b3b	f2 44 0f 11 25
	08 01 00 00	 movsdx	 QWORD PTR tanh_special_values+264, xmm12
  02b44	f2 44 0f 11 25
	10 01 00 00	 movsdx	 QWORD PTR tanh_special_values+272, xmm12
  02b4d	f2 44 0f 11 35
	18 01 00 00	 movsdx	 QWORD PTR tanh_special_values+280, xmm14
  02b56	f2 44 0f 11 2d
	20 01 00 00	 movsdx	 QWORD PTR tanh_special_values+288, xmm13
  02b5f	f2 44 0f 11 2d
	28 01 00 00	 movsdx	 QWORD PTR tanh_special_values+296, xmm13
  02b68	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02b6c	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02b71	f2 0f 11 05 30
	01 00 00	 movsdx	 QWORD PTR tanh_special_values+304, xmm0
  02b79	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02b7d	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02b82	f2 0f 11 0d 38
	01 00 00	 movsdx	 QWORD PTR tanh_special_values+312, xmm1
  02b8a	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02b8e	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02b93	f2 0f 11 05 40
	01 00 00	 movsdx	 QWORD PTR tanh_special_values+320, xmm0
  02b9b	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02b9f	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02ba4	f2 0f 11 0d 48
	01 00 00	 movsdx	 QWORD PTR tanh_special_values+328, xmm1
  02bac	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02bb0	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02bb5	f2 0f 11 05 50
	01 00 00	 movsdx	 QWORD PTR tanh_special_values+336, xmm0
  02bbd	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02bc1	f2 44 0f 11 2d
	60 01 00 00	 movsdx	 QWORD PTR tanh_special_values+352, xmm13
  02bca	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02bcf	f2 0f 11 0d 58
	01 00 00	 movsdx	 QWORD PTR tanh_special_values+344, xmm1
  02bd7	f2 44 0f 11 2d
	68 01 00 00	 movsdx	 QWORD PTR tanh_special_values+360, xmm13
  02be0	f2 44 0f 11 35
	70 01 00 00	 movsdx	 QWORD PTR tanh_special_values+368, xmm14
  02be9	f2 44 0f 11 25
	78 01 00 00	 movsdx	 QWORD PTR tanh_special_values+376, xmm12
  02bf2	f2 44 0f 11 35
	80 01 00 00	 movsdx	 QWORD PTR tanh_special_values+384, xmm14
  02bfb	f2 44 0f 11 35
	88 01 00 00	 movsdx	 QWORD PTR tanh_special_values+392, xmm14
  02c04	f2 44 0f 11 2d
	90 01 00 00	 movsdx	 QWORD PTR tanh_special_values+400, xmm13
  02c0d	f2 44 0f 11 2d
	98 01 00 00	 movsdx	 QWORD PTR tanh_special_values+408, xmm13
  02c16	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02c1a	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02c1f	f2 0f 11 05 a0
	01 00 00	 movsdx	 QWORD PTR tanh_special_values+416, xmm0
  02c27	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02c2b	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02c30	f2 0f 11 0d a8
	01 00 00	 movsdx	 QWORD PTR tanh_special_values+424, xmm1
  02c38	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02c3c	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02c41	f2 0f 11 05 b0
	01 00 00	 movsdx	 QWORD PTR tanh_special_values+432, xmm0
  02c49	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02c4d	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02c52	f2 0f 11 0d b8
	01 00 00	 movsdx	 QWORD PTR tanh_special_values+440, xmm1
  02c5a	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02c5e	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02c63	f2 0f 11 05 c0
	01 00 00	 movsdx	 QWORD PTR tanh_special_values+448, xmm0
  02c6b	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02c6f	f2 44 0f 11 2d
	d0 01 00 00	 movsdx	 QWORD PTR tanh_special_values+464, xmm13
  02c78	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02c7d	f2 0f 11 0d c8
	01 00 00	 movsdx	 QWORD PTR tanh_special_values+456, xmm1
  02c85	f2 44 0f 11 2d
	d8 01 00 00	 movsdx	 QWORD PTR tanh_special_values+472, xmm13
  02c8e	f2 44 0f 11 2d
	e0 01 00 00	 movsdx	 QWORD PTR tanh_special_values+480, xmm13
  02c97	f2 44 0f 11 2d
	e8 01 00 00	 movsdx	 QWORD PTR tanh_special_values+488, xmm13
  02ca0	f2 44 0f 11 2d
	f0 01 00 00	 movsdx	 QWORD PTR tanh_special_values+496, xmm13
  02ca9	f2 44 0f 11 2d
	f8 01 00 00	 movsdx	 QWORD PTR tanh_special_values+504, xmm13
  02cb2	f2 44 0f 11 2d
	00 02 00 00	 movsdx	 QWORD PTR tanh_special_values+512, xmm13
  02cbb	f2 44 0f 11 2d
	08 02 00 00	 movsdx	 QWORD PTR tanh_special_values+520, xmm13
  02cc4	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02cc8	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02ccd	f2 0f 11 05 10
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+528, xmm0
  02cd5	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02cd9	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02cde	f2 0f 11 0d 18
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+536, xmm1
  02ce6	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02cea	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02cef	f2 0f 11 05 20
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+544, xmm0
  02cf7	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02cfb	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02d00	f2 0f 11 0d 28
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+552, xmm1
  02d08	f2 0f 11 35 30
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+560, xmm6
  02d10	f2 44 0f 11 35
	38 02 00 00	 movsdx	 QWORD PTR tanh_special_values+568, xmm14
  02d19	f2 44 0f 11 2d
	40 02 00 00	 movsdx	 QWORD PTR tanh_special_values+576, xmm13
  02d22	f2 44 0f 11 2d
	48 02 00 00	 movsdx	 QWORD PTR tanh_special_values+584, xmm13
  02d2b	f2 0f 11 35 50
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+592, xmm6
  02d33	f2 44 0f 11 25
	58 02 00 00	 movsdx	 QWORD PTR tanh_special_values+600, xmm12
  02d3c	f2 0f 11 35 60
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+608, xmm6
  02d44	f2 44 0f 11 35
	68 02 00 00	 movsdx	 QWORD PTR tanh_special_values+616, xmm14
  02d4d	f2 44 0f 11 2d
	70 02 00 00	 movsdx	 QWORD PTR tanh_special_values+624, xmm13
  02d56	f2 44 0f 11 2d
	78 02 00 00	 movsdx	 QWORD PTR tanh_special_values+632, xmm13
  02d5f	f2 0f 11 35 80
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+640, xmm6
  02d67	f2 44 0f 11 35
	88 02 00 00	 movsdx	 QWORD PTR tanh_special_values+648, xmm14
  02d70	f2 0f 11 35 90
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+656, xmm6
  02d78	f2 44 0f 11 35
	98 02 00 00	 movsdx	 QWORD PTR tanh_special_values+664, xmm14
  02d81	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02d85	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02d8a	f2 0f 11 05 a0
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+672, xmm0
  02d92	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02d96	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02d9b	f2 0f 11 0d a8
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+680, xmm1
  02da3	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02da7	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02dac	f2 0f 11 05 b0
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+688, xmm0
  02db4	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02db8	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02dbd	f2 0f 11 0d b8
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+696, xmm1
  02dc5	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02dc9	f2 44 0f 11 25
	c8 02 00 00	 movsdx	 QWORD PTR tanh_special_values+712, xmm12
  02dd2	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02dd7	f2 0f 11 05 c0
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+704, xmm0
  02ddf	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02de3	f2 44 0f 11 35
	d8 02 00 00	 movsdx	 QWORD PTR tanh_special_values+728, xmm14
  02dec	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02df1	f2 0f 11 0d d0
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+720, xmm1
  02df9	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02dfd	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02e02	f2 0f 11 05 e0
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+736, xmm0
  02e0a	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02e0e	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02e13	f2 0f 11 0d e8
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+744, xmm1
  02e1b	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02e1f	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02e24	f2 0f 11 05 f0
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+752, xmm0
  02e2c	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02e30	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02e35	f2 0f 11 0d f8
	02 00 00	 movsdx	 QWORD PTR tanh_special_values+760, xmm1
  02e3d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02e41	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02e46	f2 0f 11 05 00
	03 00 00	 movsdx	 QWORD PTR tanh_special_values+768, xmm0
  02e4e	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02e52	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02e57	f2 0f 11 0d 08
	03 00 00	 movsdx	 QWORD PTR tanh_special_values+776, xmm1

; 1234 : 
; 1235 :     INIT_SPECIAL_VALUES(rect_special_values, {
; 1236 :       C(INF,N) C(U,U) C(-INF,0.) C(-INF,-0.) C(U,U) C(INF,N) C(INF,N)
; 1237 :       C(N,N)   C(U,U) C(U,U)     C(U,U)      C(U,U) C(N,N)   C(N,N)
; 1238 :       C(0.,0.) C(U,U) C(-0.,0.)  C(-0.,-0.)  C(U,U) C(0.,0.) C(0.,0.)
; 1239 :       C(0.,0.) C(U,U) C(0.,-0.)  C(0.,0.)    C(U,U) C(0.,0.) C(0.,0.)
; 1240 :       C(N,N)   C(U,U) C(U,U)     C(U,U)      C(U,U) C(N,N)   C(N,N)
; 1241 :       C(INF,N) C(U,U) C(INF,-0.) C(INF,0.)   C(U,U) C(INF,N) C(INF,N)
; 1242 :       C(N,N)   C(N,N) C(N,0.)    C(N,0.)     C(N,N) C(N,N)   C(N,N)
; 1243 :     })

  02e5f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02e63	f2 0f 11 05 00
	00 00 00	 movsdx	 QWORD PTR rect_special_values, xmm0
  02e6b	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02e6f	f2 44 0f 11 2d
	10 00 00 00	 movsdx	 QWORD PTR rect_special_values+16, xmm13
  02e78	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02e7d	f2 0f 11 0d 08
	00 00 00	 movsdx	 QWORD PTR rect_special_values+8, xmm1
  02e85	f2 44 0f 11 2d
	18 00 00 00	 movsdx	 QWORD PTR rect_special_values+24, xmm13
  02e8e	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02e92	66 41 0f 57 c3	 xorpd	 xmm0, xmm11
  02e97	f2 0f 11 05 20
	00 00 00	 movsdx	 QWORD PTR rect_special_values+32, xmm0
  02e9f	f2 44 0f 11 35
	28 00 00 00	 movsdx	 QWORD PTR rect_special_values+40, xmm14
  02ea8	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02eac	66 41 0f 57 cb	 xorpd	 xmm1, xmm11
  02eb1	f2 0f 11 0d 30
	00 00 00	 movsdx	 QWORD PTR rect_special_values+48, xmm1
  02eb9	f2 44 0f 11 25
	38 00 00 00	 movsdx	 QWORD PTR rect_special_values+56, xmm12
  02ec2	f2 44 0f 11 2d
	40 00 00 00	 movsdx	 QWORD PTR rect_special_values+64, xmm13
  02ecb	f2 44 0f 11 2d
	48 00 00 00	 movsdx	 QWORD PTR rect_special_values+72, xmm13
  02ed4	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02ed8	f2 0f 11 05 50
	00 00 00	 movsdx	 QWORD PTR rect_special_values+80, xmm0
  02ee0	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02ee4	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02ee9	f2 0f 11 0d 58
	00 00 00	 movsdx	 QWORD PTR rect_special_values+88, xmm1
  02ef1	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02ef5	f2 0f 11 05 60
	00 00 00	 movsdx	 QWORD PTR rect_special_values+96, xmm0
  02efd	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02f01	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02f06	f2 0f 11 0d 68
	00 00 00	 movsdx	 QWORD PTR rect_special_values+104, xmm1
  02f0e	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02f12	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02f17	f2 0f 11 05 70
	00 00 00	 movsdx	 QWORD PTR rect_special_values+112, xmm0
  02f1f	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02f23	f2 44 0f 11 2d
	80 00 00 00	 movsdx	 QWORD PTR rect_special_values+128, xmm13
  02f2c	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02f31	f2 0f 11 0d 78
	00 00 00	 movsdx	 QWORD PTR rect_special_values+120, xmm1
  02f39	f2 44 0f 11 2d
	88 00 00 00	 movsdx	 QWORD PTR rect_special_values+136, xmm13
  02f42	f2 44 0f 11 2d
	90 00 00 00	 movsdx	 QWORD PTR rect_special_values+144, xmm13
  02f4b	f2 44 0f 11 2d
	98 00 00 00	 movsdx	 QWORD PTR rect_special_values+152, xmm13
  02f54	f2 44 0f 11 2d
	a0 00 00 00	 movsdx	 QWORD PTR rect_special_values+160, xmm13
  02f5d	f2 44 0f 11 2d
	a8 00 00 00	 movsdx	 QWORD PTR rect_special_values+168, xmm13
  02f66	f2 44 0f 11 2d
	b0 00 00 00	 movsdx	 QWORD PTR rect_special_values+176, xmm13
  02f6f	f2 44 0f 11 2d
	b8 00 00 00	 movsdx	 QWORD PTR rect_special_values+184, xmm13
  02f78	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02f7c	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02f81	f2 0f 11 05 c0
	00 00 00	 movsdx	 QWORD PTR rect_special_values+192, xmm0
  02f89	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02f8d	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02f92	f2 0f 11 0d c8
	00 00 00	 movsdx	 QWORD PTR rect_special_values+200, xmm1
  02f9a	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  02f9e	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  02fa3	f2 0f 11 05 d0
	00 00 00	 movsdx	 QWORD PTR rect_special_values+208, xmm0
  02fab	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  02faf	f2 44 0f 11 35
	e0 00 00 00	 movsdx	 QWORD PTR rect_special_values+224, xmm14
  02fb8	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  02fbd	f2 0f 11 0d d8
	00 00 00	 movsdx	 QWORD PTR rect_special_values+216, xmm1
  02fc5	f2 44 0f 11 35
	e8 00 00 00	 movsdx	 QWORD PTR rect_special_values+232, xmm14
  02fce	f2 44 0f 11 2d
	f0 00 00 00	 movsdx	 QWORD PTR rect_special_values+240, xmm13
  02fd7	f2 44 0f 11 2d
	f8 00 00 00	 movsdx	 QWORD PTR rect_special_values+248, xmm13
  02fe0	f2 44 0f 11 25
	00 01 00 00	 movsdx	 QWORD PTR rect_special_values+256, xmm12
  02fe9	f2 44 0f 11 35
	08 01 00 00	 movsdx	 QWORD PTR rect_special_values+264, xmm14
  02ff2	f2 44 0f 11 25
	10 01 00 00	 movsdx	 QWORD PTR rect_special_values+272, xmm12
  02ffb	f2 44 0f 11 25
	18 01 00 00	 movsdx	 QWORD PTR rect_special_values+280, xmm12
  03004	f2 44 0f 11 2d
	20 01 00 00	 movsdx	 QWORD PTR rect_special_values+288, xmm13
  0300d	f2 44 0f 11 2d
	28 01 00 00	 movsdx	 QWORD PTR rect_special_values+296, xmm13
  03016	f2 44 0f 11 35
	30 01 00 00	 movsdx	 QWORD PTR rect_special_values+304, xmm14
  0301f	f2 44 0f 11 35
	38 01 00 00	 movsdx	 QWORD PTR rect_special_values+312, xmm14
  03028	f2 44 0f 11 35
	40 01 00 00	 movsdx	 QWORD PTR rect_special_values+320, xmm14
  03031	f2 44 0f 11 35
	48 01 00 00	 movsdx	 QWORD PTR rect_special_values+328, xmm14
  0303a	f2 44 0f 11 35
	50 01 00 00	 movsdx	 QWORD PTR rect_special_values+336, xmm14
  03043	f2 44 0f 11 35
	58 01 00 00	 movsdx	 QWORD PTR rect_special_values+344, xmm14
  0304c	f2 44 0f 11 2d
	60 01 00 00	 movsdx	 QWORD PTR rect_special_values+352, xmm13
  03055	f2 44 0f 11 2d
	68 01 00 00	 movsdx	 QWORD PTR rect_special_values+360, xmm13
  0305e	f2 44 0f 11 35
	70 01 00 00	 movsdx	 QWORD PTR rect_special_values+368, xmm14
  03067	f2 44 0f 11 25
	78 01 00 00	 movsdx	 QWORD PTR rect_special_values+376, xmm12
  03070	f2 44 0f 11 35
	80 01 00 00	 movsdx	 QWORD PTR rect_special_values+384, xmm14
  03079	f2 44 0f 11 35
	88 01 00 00	 movsdx	 QWORD PTR rect_special_values+392, xmm14
  03082	f2 44 0f 11 2d
	90 01 00 00	 movsdx	 QWORD PTR rect_special_values+400, xmm13
  0308b	f2 44 0f 11 2d
	98 01 00 00	 movsdx	 QWORD PTR rect_special_values+408, xmm13
  03094	f2 44 0f 11 35
	a0 01 00 00	 movsdx	 QWORD PTR rect_special_values+416, xmm14
  0309d	f2 44 0f 11 35
	a8 01 00 00	 movsdx	 QWORD PTR rect_special_values+424, xmm14
  030a6	f2 44 0f 11 35
	b0 01 00 00	 movsdx	 QWORD PTR rect_special_values+432, xmm14
  030af	f2 44 0f 11 35
	b8 01 00 00	 movsdx	 QWORD PTR rect_special_values+440, xmm14
  030b8	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  030bc	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  030c1	f2 0f 11 05 c0
	01 00 00	 movsdx	 QWORD PTR rect_special_values+448, xmm0
  030c9	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  030cd	f2 44 0f 11 2d
	d0 01 00 00	 movsdx	 QWORD PTR rect_special_values+464, xmm13
  030d6	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  030db	f2 0f 11 0d c8
	01 00 00	 movsdx	 QWORD PTR rect_special_values+456, xmm1
  030e3	f2 44 0f 11 2d
	d8 01 00 00	 movsdx	 QWORD PTR rect_special_values+472, xmm13
  030ec	f2 44 0f 11 2d
	e0 01 00 00	 movsdx	 QWORD PTR rect_special_values+480, xmm13
  030f5	f2 44 0f 11 2d
	e8 01 00 00	 movsdx	 QWORD PTR rect_special_values+488, xmm13
  030fe	f2 44 0f 11 2d
	f0 01 00 00	 movsdx	 QWORD PTR rect_special_values+496, xmm13
  03107	f2 44 0f 11 2d
	f8 01 00 00	 movsdx	 QWORD PTR rect_special_values+504, xmm13
  03110	f2 44 0f 11 2d
	00 02 00 00	 movsdx	 QWORD PTR rect_special_values+512, xmm13
  03119	f2 44 0f 11 2d
	08 02 00 00	 movsdx	 QWORD PTR rect_special_values+520, xmm13
  03122	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  03126	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0312b	f2 0f 11 05 10
	02 00 00	 movsdx	 QWORD PTR rect_special_values+528, xmm0
  03133	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  03137	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0313c	f2 0f 11 0d 18
	02 00 00	 movsdx	 QWORD PTR rect_special_values+536, xmm1
  03144	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  03148	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0314d	f2 0f 11 05 20
	02 00 00	 movsdx	 QWORD PTR rect_special_values+544, xmm0
  03155	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  03159	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0315e	f2 0f 11 0d 28
	02 00 00	 movsdx	 QWORD PTR rect_special_values+552, xmm1
  03166	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0316a	f2 0f 11 05 30
	02 00 00	 movsdx	 QWORD PTR rect_special_values+560, xmm0
  03172	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  03176	44 0f 28 5c 24
	50		 movaps	 xmm11, XMMWORD PTR [rsp+80]
  0317c	44 0f 28 54 24
	60		 movaps	 xmm10, XMMWORD PTR [rsp+96]
  03182	f2 44 0f 11 2d
	40 02 00 00	 movsdx	 QWORD PTR rect_special_values+576, xmm13
  0318b	f2 44 0f 11 2d
	48 02 00 00	 movsdx	 QWORD PTR rect_special_values+584, xmm13
  03194	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  03199	44 0f 28 4c 24
	70		 movaps	 xmm9, XMMWORD PTR [rsp+112]
  0319f	44 0f 28 84 24
	80 00 00 00	 movaps	 xmm8, XMMWORD PTR [rsp+128]
  031a8	0f 28 bc 24 90
	00 00 00	 movaps	 xmm7, XMMWORD PTR [rsp+144]
  031b0	f2 0f 11 0d 38
	02 00 00	 movsdx	 QWORD PTR rect_special_values+568, xmm1
  031b8	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  031bc	f2 44 0f 11 25
	58 02 00 00	 movsdx	 QWORD PTR rect_special_values+600, xmm12
  031c5	f2 0f 11 05 50
	02 00 00	 movsdx	 QWORD PTR rect_special_values+592, xmm0
  031cd	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  031d1	f2 44 0f 11 35
	68 02 00 00	 movsdx	 QWORD PTR rect_special_values+616, xmm14
  031da	44 0f 28 64 24
	40		 movaps	 xmm12, XMMWORD PTR [rsp+64]
  031e0	0f 28 b4 24 a0
	00 00 00	 movaps	 xmm6, XMMWORD PTR [rsp+160]
  031e8	f2 0f 11 0d 60
	02 00 00	 movsdx	 QWORD PTR rect_special_values+608, xmm1
  031f0	f2 44 0f 11 2d
	70 02 00 00	 movsdx	 QWORD PTR rect_special_values+624, xmm13
  031f9	f2 44 0f 11 2d
	78 02 00 00	 movsdx	 QWORD PTR rect_special_values+632, xmm13
  03202	44 0f 28 6c 24
	30		 movaps	 xmm13, XMMWORD PTR [rsp+48]
  03208	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0320c	f2 0f 11 05 80
	02 00 00	 movsdx	 QWORD PTR rect_special_values+640, xmm0
  03214	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  03218	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0321d	f2 0f 11 0d 88
	02 00 00	 movsdx	 QWORD PTR rect_special_values+648, xmm1
  03225	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  03229	f2 0f 11 05 90
	02 00 00	 movsdx	 QWORD PTR rect_special_values+656, xmm0
  03231	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  03235	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0323a	f2 0f 11 0d 98
	02 00 00	 movsdx	 QWORD PTR rect_special_values+664, xmm1
  03242	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  03246	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0324b	f2 0f 11 05 a0
	02 00 00	 movsdx	 QWORD PTR rect_special_values+672, xmm0
  03253	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  03257	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0325c	f2 0f 11 0d a8
	02 00 00	 movsdx	 QWORD PTR rect_special_values+680, xmm1
  03264	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  03268	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  0326d	f2 0f 11 05 b0
	02 00 00	 movsdx	 QWORD PTR rect_special_values+688, xmm0
  03275	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  03279	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0327e	f2 0f 11 0d b8
	02 00 00	 movsdx	 QWORD PTR rect_special_values+696, xmm1
  03286	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0328a	f2 44 0f 11 35
	c8 02 00 00	 movsdx	 QWORD PTR rect_special_values+712, xmm14
  03293	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  03298	f2 0f 11 05 c0
	02 00 00	 movsdx	 QWORD PTR rect_special_values+704, xmm0
  032a0	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  032a4	f2 44 0f 11 35
	d8 02 00 00	 movsdx	 QWORD PTR rect_special_values+728, xmm14
  032ad	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  032b2	f2 0f 11 0d d0
	02 00 00	 movsdx	 QWORD PTR rect_special_values+720, xmm1
  032ba	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  032be	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  032c3	f2 0f 11 05 e0
	02 00 00	 movsdx	 QWORD PTR rect_special_values+736, xmm0
  032cb	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  032cf	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  032d4	f2 0f 11 0d e8
	02 00 00	 movsdx	 QWORD PTR rect_special_values+744, xmm1
  032dc	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  032e0	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  032e5	f2 0f 11 05 f0
	02 00 00	 movsdx	 QWORD PTR rect_special_values+752, xmm0
  032ed	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  032f1	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  032f6	f2 0f 11 0d f8
	02 00 00	 movsdx	 QWORD PTR rect_special_values+760, xmm1
  032fe	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  03302	f2 41 0f 59 c6	 mulsd	 xmm0, xmm14
  03307	f2 0f 11 05 00
	03 00 00	 movsdx	 QWORD PTR rect_special_values+768, xmm0
  0330f	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]

; 1244 :     return m;

  03313	48 8b c3	 mov	 rax, rbx
  03316	f2 41 0f 59 ce	 mulsd	 xmm1, xmm14
  0331b	44 0f 28 74 24
	20		 movaps	 xmm14, XMMWORD PTR [rsp+32]
  03321	f2 0f 11 0d 08
	03 00 00	 movsdx	 QWORD PTR rect_special_values+776, xmm1

; 1245 : }

  03329	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  03330	5b		 pop	 rbx
  03331	c3		 ret	 0
PyInit_cmath ENDP
_TEXT	ENDS
PUBLIC	__real@3ff62e42fefa39ef
PUBLIC	$T21675
PUBLIC	$T21674
EXTRN	_Py_asinh:PROC
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
pdata	SEGMENT
$pdata$c_acos DD imagerel c_acos
	DD	imagerel c_acos+80
	DD	imagerel $unwind$c_acos
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$c_acos DD imagerel c_acos+80
	DD	imagerel c_acos+514
	DD	imagerel $chain$1$c_acos
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$c_acos DD imagerel c_acos+514
	DD	imagerel c_acos+596
	DD	imagerel $chain$3$c_acos
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$c_acos DD imagerel c_acos+596
	DD	imagerel c_acos+624
	DD	imagerel $chain$2$c_acos
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$c_acos DD 021H
	DD	imagerel c_acos
	DD	imagerel c_acos+80
	DD	imagerel $unwind$c_acos
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$c_acos DD 020821H
	DD	0123408H
	DD	imagerel c_acos+596
	DD	imagerel c_acos+624
	DD	imagerel $chain$2$c_acos
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$c_acos DD 040a21H
	DD	06780aH
	DD	076805H
	DD	imagerel c_acos
	DD	imagerel c_acos+80
	DD	imagerel $unwind$c_acos
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_acos DD 061501H
	DD	0147415H
	DD	0136415H
	DD	0500bf215H
xdata	ENDS
;	COMDAT __real@3ff62e42fefa39ef
CONST	SEGMENT
__real@3ff62e42fefa39ef DQ 03ff62e42fefa39efr	; 1.38629
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cmathmodule.c
CONST	ENDS
;	COMDAT c_acos
_TEXT	SEGMENT
s1$ = 32
s2$ = 48
$T21672 = 48
$T21675 = 64
$T21674 = 64
r$ = 64
$T21673 = 80
$T21671 = 144
z$ = 152
c_acos	PROC						; COMDAT

; 128  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000a	55		 push	 rbp
  0000b	48 8b ec	 mov	 rbp, rsp
  0000e	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H

; 129  :     Py_complex s1, s2, r;
; 130  : 
; 131  :     SPECIAL_VALUE(z, acos_special_values);

  00015	f2 0f 10 02	 movsdx	 xmm0, QWORD PTR [rdx]
  00019	48 8b fa	 mov	 rdi, rdx
  0001c	48 8b f1	 mov	 rsi, rcx
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00025	85 c0		 test	 eax, eax
  00027	0f 84 d5 01 00
	00		 je	 $LN6@c_acos
  0002d	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00038	85 c0		 test	 eax, eax
  0003a	0f 84 c2 01 00
	00		 je	 $LN6@c_acos

; 132  : 
; 133  :     if (fabs(z.real) > CM_LARGE_DOUBLE || fabs(z.imag) > CM_LARGE_DOUBLE) {

  00040	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __mask@@AbsDouble@
  00048	f2 0f 10 15 00
	00 00 00	 movsdx	 xmm2, QWORD PTR __real@7fcfffffffffffff
  00050	0f 29 74 24 70	 movaps	 XMMWORD PTR [rsp+112], xmm6
  00055	0f 29 7c 24 60	 movaps	 XMMWORD PTR [rsp+96], xmm7
  0005a	f2 0f 10 3f	 movsdx	 xmm7, QWORD PTR [rdi]
  0005e	66 0f 28 c7	 movapd	 xmm0, xmm7
  00062	66 0f 54 c1	 andpd	 xmm0, xmm1
  00066	66 0f 2f c2	 comisd	 xmm0, xmm2
  0006a	0f 87 db 00 00
	00		 ja	 $LN4@c_acos
  00070	f2 0f 10 5f 08	 movsdx	 xmm3, QWORD PTR [rdi+8]
  00075	66 0f 28 c3	 movapd	 xmm0, xmm3
  00079	66 0f 54 c1	 andpd	 xmm0, xmm1
  0007d	66 0f 2f c2	 comisd	 xmm0, xmm2
  00081	0f 87 c4 00 00
	00		 ja	 $LN4@c_acos

; 144  :         }
; 145  :     } else {
; 146  :         s1.real = 1.-z.real;

  00087	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000

; 147  :         s1.imag = -z.imag;

  0008f	66 0f 57 1d 00
	00 00 00	 xorpd	 xmm3, QWORD PTR __mask@@NegDouble@

; 148  :         s1 = c_sqrt(s1);

  00097	48 8d 55 c0	 lea	 rdx, QWORD PTR $T21674[rbp-128]
  0009b	f2 0f 5c c7	 subsd	 xmm0, xmm7
  0009f	48 8d 4d b0	 lea	 rcx, QWORD PTR $T21672[rbp-128]
  000a3	f2 0f 11 45 a0	 movsdx	 QWORD PTR s1$[rbp-128], xmm0
  000a8	f2 0f 11 5d a8	 movsdx	 QWORD PTR s1$[rbp-120], xmm3
  000ad	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR s1$[rbp-128]
  000b1	66 0f 7f 45 c0	 movdqa	 XMMWORD PTR $T21674[rbp-128], xmm0
  000b6	e8 00 00 00 00	 call	 c_sqrt

; 149  :         s2.real = 1.+z.real;

  000bb	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]

; 150  :         s2.imag = z.imag;
; 151  :         s2 = c_sqrt(s2);

  000bf	48 8d 55 c0	 lea	 rdx, QWORD PTR $T21675[rbp-128]
  000c3	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000c6	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000ca	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000d2	f2 0f 11 45 b0	 movsdx	 QWORD PTR s2$[rbp-128], xmm0
  000d7	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  000dc	48 89 4d a0	 mov	 QWORD PTR s1$[rbp-128], rcx
  000e0	48 8d 4d d0	 lea	 rcx, QWORD PTR $T21673[rbp-128]
  000e4	48 89 45 a8	 mov	 QWORD PTR s1$[rbp-120], rax
  000e8	f2 0f 11 45 b8	 movsdx	 QWORD PTR s2$[rbp-120], xmm0
  000ed	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR s2$[rbp-128]
  000f1	66 0f 7f 4d c0	 movdqa	 XMMWORD PTR $T21675[rbp-128], xmm1
  000f6	e8 00 00 00 00	 call	 c_sqrt

; 152  :         r.real = 2.*atan2(s1.real, s2.real);

  000fb	f2 0f 10 45 a0	 movsdx	 xmm0, QWORD PTR s1$[rbp-128]
  00100	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00103	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00107	48 89 4d b0	 mov	 QWORD PTR s2$[rbp-128], rcx
  0010b	48 89 45 b8	 mov	 QWORD PTR s2$[rbp-120], rax
  0010f	f2 0f 10 7d b0	 movsdx	 xmm7, QWORD PTR s2$[rbp-128]
  00114	66 0f 28 cf	 movapd	 xmm1, xmm7
  00118	e8 00 00 00 00	 call	 atan2

; 153  :         r.imag = m_asinh(s2.real*s1.imag - s2.imag*s1.real);

  0011d	f2 0f 10 4d b8	 movsdx	 xmm1, QWORD PTR s2$[rbp-120]
  00122	f2 0f 59 7d a8	 mulsd	 xmm7, QWORD PTR s1$[rbp-120]
  00127	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  0012f	f2 0f 59 4d a0	 mulsd	 xmm1, QWORD PTR s1$[rbp-128]
  00134	f2 0f 5c f9	 subsd	 xmm7, xmm1
  00138	f2 0f 11 45 c0	 movsdx	 QWORD PTR r$[rbp-128], xmm0
  0013d	66 0f 28 c7	 movapd	 xmm0, xmm7
  00141	e8 00 00 00 00	 call	 _Py_asinh
  00146	e9 8f 00 00 00	 jmp	 $LN14@c_acos
$LN4@c_acos:

; 134  :         /* avoid unnecessary overflow for large arguments */
; 135  :         r.real = atan2(fabs(z.imag), z.real);

  0014b	f2 0f 10 77 08	 movsdx	 xmm6, QWORD PTR [rdi+8]
  00150	66 0f 28 c6	 movapd	 xmm0, xmm6
  00154	66 0f 54 c1	 andpd	 xmm0, xmm1
  00158	66 0f 28 cf	 movapd	 xmm1, xmm7
  0015c	e8 00 00 00 00	 call	 atan2

; 136  :         /* split into cases to make sure that the branch cut has the
; 137  :            correct continuity on systems with unsigned zeros */
; 138  :         if (z.real < 0.) {
; 139  :             r.imag = -copysign(log(hypot(z.real/2., z.imag/2.)) +
; 140  :                                M_LN2*2., z.imag);

  00161	f2 0f 59 35 00
	00 00 00	 mulsd	 xmm6, QWORD PTR __real@3fe0000000000000
  00169	f2 0f 11 45 c0	 movsdx	 QWORD PTR r$[rbp-128], xmm0
  0016e	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00172	66 0f 2f c7	 comisd	 xmm0, xmm7
  00176	66 0f 28 ce	 movapd	 xmm1, xmm6
  0017a	f2 0f 59 3d 00
	00 00 00	 mulsd	 xmm7, QWORD PTR __real@3fe0000000000000
  00182	66 0f 28 c7	 movapd	 xmm0, xmm7
  00186	76 28		 jbe	 SHORT $LN3@c_acos
  00188	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__hypot
  0018e	e8 00 00 00 00	 call	 log
  00193	f2 0f 10 4f 08	 movsdx	 xmm1, QWORD PTR [rdi+8]
  00198	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff62e42fefa39ef
  001a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  001a6	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@

; 141  :         } else {

  001ae	eb 2a		 jmp	 SHORT $LN14@c_acos
$LN3@c_acos:

; 142  :             r.imag = copysign(log(hypot(z.real/2., z.imag/2.)) +
; 143  :                               M_LN2*2., -z.imag);

  001b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__hypot
  001b6	f2 0f 10 77 08	 movsdx	 xmm6, QWORD PTR [rdi+8]
  001bb	66 0f 57 35 00
	00 00 00	 xorpd	 xmm6, QWORD PTR __mask@@NegDouble@
  001c3	e8 00 00 00 00	 call	 log
  001c8	66 0f 28 ce	 movapd	 xmm1, xmm6
  001cc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff62e42fefa39ef
  001d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
$LN14@c_acos:
  001da	f2 0f 11 45 c8	 movsdx	 QWORD PTR r$[rbp-120], xmm0

; 154  :     }
; 155  :     errno = 0;

  001df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  001e5	0f 28 7c 24 60	 movaps	 xmm7, XMMWORD PTR [rsp+96]
  001ea	0f 28 74 24 70	 movaps	 xmm6, XMMWORD PTR [rsp+112]
  001ef	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 156  :     return r;

  001f5	48 8b 45 c0	 mov	 rax, QWORD PTR r$[rbp-128]
  001f9	48 89 06	 mov	 QWORD PTR [rsi], rax
  001fc	48 8b 45 c8	 mov	 rax, QWORD PTR r$[rbp-120]
  00200	eb 52		 jmp	 SHORT $LN15@c_acos
$LN6@c_acos:
  00202	48 89 9c 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rbx

; 129  :     Py_complex s1, s2, r;
; 130  : 
; 131  :     SPECIAL_VALUE(z, acos_special_values);

  0020a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00210	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00216	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  0021b	e8 00 00 00 00	 call	 special_type
  00220	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00224	48 63 d8	 movsxd	 rbx, eax
  00227	e8 00 00 00 00	 call	 special_type
  0022c	48 63 c8	 movsxd	 rcx, eax
  0022f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:acos_special_values
  00236	48 6b c9 07	 imul	 rcx, 7
  0023a	48 03 cb	 add	 rcx, rbx
  0023d	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR [rsp+144]
  00245	48 03 c9	 add	 rcx, rcx
  00248	48 8b 04 ca	 mov	 rax, QWORD PTR [rdx+rcx*8]
  0024c	48 89 06	 mov	 QWORD PTR [rsi], rax
  0024f	48 8b 44 ca 08	 mov	 rax, QWORD PTR [rdx+rcx*8+8]
$LN15@c_acos:

; 157  : }

  00254	4c 8d 9c 24 80
	00 00 00	 lea	 r11, QWORD PTR [rsp+128]
  0025c	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
  00260	48 8b c6	 mov	 rax, rsi
  00263	49 8b 73 18	 mov	 rsi, QWORD PTR [r11+24]
  00267	49 8b 7b 20	 mov	 rdi, QWORD PTR [r11+32]
  0026b	49 8b e3	 mov	 rsp, r11
  0026e	5d		 pop	 rbp
  0026f	c3		 ret	 0
c_acos	ENDP
_TEXT	ENDS
PUBLIC	$T21731
PUBLIC	$T21730
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
pdata	SEGMENT
$pdata$c_acosh DD imagerel c_acosh
	DD	imagerel c_acosh+393
	DD	imagerel $unwind$c_acosh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$c_acosh DD imagerel c_acosh+393
	DD	imagerel c_acosh+469
	DD	imagerel $chain$0$c_acosh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$c_acosh DD imagerel c_acosh+469
	DD	imagerel c_acosh+495
	DD	imagerel $chain$1$c_acosh
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$c_acosh DD 021H
	DD	imagerel c_acosh
	DD	imagerel c_acosh+393
	DD	imagerel $unwind$c_acosh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$c_acosh DD 020521H
	DD	0e3405H
	DD	imagerel c_acosh
	DD	imagerel c_acosh+393
	DD	imagerel $unwind$c_acosh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_acosh DD 061201H
	DD	0107412H
	DD	0f6412H
	DD	0500bb212H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cmathmodule.c
xdata	ENDS
;	COMDAT c_acosh
_TEXT	SEGMENT
s2$ = 32
$T21728 = 32
s1$ = 48
$T21731 = 64
$T21730 = 64
r$ = 64
$T21729 = 80
$T21727 = 112
z$ = 120
c_acosh	PROC						; COMDAT

; 169  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000a	55		 push	 rbp
  0000b	48 8b ec	 mov	 rbp, rsp
  0000e	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 170  :     Py_complex s1, s2, r;
; 171  : 
; 172  :     SPECIAL_VALUE(z, acosh_special_values);

  00012	f2 0f 10 02	 movsdx	 xmm0, QWORD PTR [rdx]
  00016	48 8b fa	 mov	 rdi, rdx
  00019	48 8b f1	 mov	 rsi, rcx
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00022	85 c0		 test	 eax, eax
  00024	0f 84 5f 01 00
	00		 je	 $LN4@c_acosh
  0002a	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00035	85 c0		 test	 eax, eax
  00037	0f 84 4c 01 00
	00		 je	 $LN4@c_acosh

; 173  : 
; 174  :     if (fabs(z.real) > CM_LARGE_DOUBLE || fabs(z.imag) > CM_LARGE_DOUBLE) {

  0003d	f2 0f 10 1f	 movsdx	 xmm3, QWORD PTR [rdi]
  00041	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __mask@@AbsDouble@
  00049	f2 0f 10 15 00
	00 00 00	 movsdx	 xmm2, QWORD PTR __real@7fcfffffffffffff
  00051	66 0f 28 c3	 movapd	 xmm0, xmm3
  00055	66 0f 54 c1	 andpd	 xmm0, xmm1
  00059	66 0f 2f c2	 comisd	 xmm0, xmm2
  0005d	0f 87 c9 00 00
	00		 ja	 $LN2@c_acosh
  00063	f2 0f 10 67 08	 movsdx	 xmm4, QWORD PTR [rdi+8]
  00068	66 0f 28 c4	 movapd	 xmm0, xmm4
  0006c	66 0f 54 c1	 andpd	 xmm0, xmm1
  00070	66 0f 2f c2	 comisd	 xmm0, xmm2
  00074	0f 87 b2 00 00
	00		 ja	 $LN2@c_acosh

; 178  :     } else {
; 179  :         s1.real = z.real - 1.;

  0007a	f2 0f 5c 1d 00
	00 00 00	 subsd	 xmm3, QWORD PTR __real@3ff0000000000000

; 180  :         s1.imag = z.imag;

  00082	f2 0f 11 65 d8	 movsdx	 QWORD PTR s1$[rbp-88], xmm4

; 181  :         s1 = c_sqrt(s1);

  00087	48 8d 55 e0	 lea	 rdx, QWORD PTR $T21730[rbp-96]
  0008b	48 8d 4d c0	 lea	 rcx, QWORD PTR $T21728[rbp-96]
  0008f	f2 0f 11 5d d0	 movsdx	 QWORD PTR s1$[rbp-96], xmm3
  00094	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR s1$[rbp-96]
  00098	66 0f 7f 45 e0	 movdqa	 XMMWORD PTR $T21730[rbp-96], xmm0
  0009d	e8 00 00 00 00	 call	 c_sqrt

; 182  :         s2.real = z.real + 1.;

  000a2	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]

; 183  :         s2.imag = z.imag;
; 184  :         s2 = c_sqrt(s2);

  000a6	48 8d 55 e0	 lea	 rdx, QWORD PTR $T21731[rbp-96]
  000aa	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000ad	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000b1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000b9	f2 0f 11 45 c0	 movsdx	 QWORD PTR s2$[rbp-96], xmm0
  000be	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  000c3	48 89 4d d0	 mov	 QWORD PTR s1$[rbp-96], rcx
  000c7	48 8d 4d f0	 lea	 rcx, QWORD PTR $T21729[rbp-96]
  000cb	48 89 45 d8	 mov	 QWORD PTR s1$[rbp-88], rax
  000cf	f2 0f 11 45 c8	 movsdx	 QWORD PTR s2$[rbp-88], xmm0
  000d4	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR s2$[rbp-96]
  000d8	66 0f 7f 4d e0	 movdqa	 XMMWORD PTR $T21731[rbp-96], xmm1
  000dd	e8 00 00 00 00	 call	 c_sqrt
  000e2	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000e5	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000e9	48 89 45 c8	 mov	 QWORD PTR s2$[rbp-88], rax
  000ed	48 89 4d c0	 mov	 QWORD PTR s2$[rbp-96], rcx

; 185  :         r.real = m_asinh(s1.real*s2.real + s1.imag*s2.imag);

  000f1	f2 0f 10 55 c0	 movsdx	 xmm2, QWORD PTR s2$[rbp-96]
  000f6	f2 0f 10 45 c8	 movsdx	 xmm0, QWORD PTR s2$[rbp-88]
  000fb	f2 0f 59 45 d8	 mulsd	 xmm0, QWORD PTR s1$[rbp-88]
  00100	f2 0f 59 55 d0	 mulsd	 xmm2, QWORD PTR s1$[rbp-96]
  00105	f2 0f 58 c2	 addsd	 xmm0, xmm2
  00109	e8 00 00 00 00	 call	 _Py_asinh

; 186  :         r.imag = 2.*atan2(s1.imag, s2.real);

  0010e	f2 0f 10 4d c0	 movsdx	 xmm1, QWORD PTR s2$[rbp-96]
  00113	f2 0f 11 45 e0	 movsdx	 QWORD PTR r$[rbp-96], xmm0
  00118	f2 0f 10 45 d8	 movsdx	 xmm0, QWORD PTR s1$[rbp-88]
  0011d	e8 00 00 00 00	 call	 atan2
  00122	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  0012a	eb 3f		 jmp	 SHORT $LN10@c_acosh
$LN2@c_acosh:

; 175  :         /* avoid unnecessary overflow for large arguments */
; 176  :         r.real = log(hypot(z.real/2., z.imag/2.)) + M_LN2*2.;

  0012c	f2 0f 10 4f 08	 movsdx	 xmm1, QWORD PTR [rdi+8]
  00131	f2 0f 59 1d 00
	00 00 00	 mulsd	 xmm3, QWORD PTR __real@3fe0000000000000
  00139	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00141	66 0f 28 c3	 movapd	 xmm0, xmm3
  00145	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__hypot
  0014b	e8 00 00 00 00	 call	 log

; 177  :         r.imag = atan2(z.imag, z.real);

  00150	f2 0f 10 0f	 movsdx	 xmm1, QWORD PTR [rdi]
  00154	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff62e42fefa39ef
  0015c	f2 0f 11 45 e0	 movsdx	 QWORD PTR r$[rbp-96], xmm0
  00161	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00166	e8 00 00 00 00	 call	 atan2
$LN10@c_acosh:
  0016b	f2 0f 11 45 e8	 movsdx	 QWORD PTR r$[rbp-88], xmm0

; 187  :     }
; 188  :     errno = 0;

  00170	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00176	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 189  :     return r;

  0017c	48 8b 45 e0	 mov	 rax, QWORD PTR r$[rbp-96]
  00180	48 89 06	 mov	 QWORD PTR [rsi], rax
  00183	48 8b 45 e8	 mov	 rax, QWORD PTR r$[rbp-88]
  00187	eb 4c		 jmp	 SHORT $LN11@c_acosh
$LN4@c_acosh:
  00189	48 89 5c 24 70	 mov	 QWORD PTR [rsp+112], rbx

; 170  :     Py_complex s1, s2, r;
; 171  : 
; 172  :     SPECIAL_VALUE(z, acosh_special_values);

  0018e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00194	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  0019a	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  0019f	e8 00 00 00 00	 call	 special_type
  001a4	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  001a8	48 63 d8	 movsxd	 rbx, eax
  001ab	e8 00 00 00 00	 call	 special_type
  001b0	48 63 c8	 movsxd	 rcx, eax
  001b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:acosh_special_values
  001ba	48 6b c9 07	 imul	 rcx, 7
  001be	48 03 cb	 add	 rcx, rbx
  001c1	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  001c6	48 03 c9	 add	 rcx, rcx
  001c9	48 8b 04 ca	 mov	 rax, QWORD PTR [rdx+rcx*8]
  001cd	48 89 06	 mov	 QWORD PTR [rsi], rax
  001d0	48 8b 44 ca 08	 mov	 rax, QWORD PTR [rdx+rcx*8+8]
$LN11@c_acosh:

; 190  : }

  001d5	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR [rsp+128]
  001dd	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
  001e1	48 8b c6	 mov	 rax, rsi
  001e4	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  001e9	48 83 c4 60	 add	 rsp, 96			; 00000060H
  001ed	5d		 pop	 rbp
  001ee	c3		 ret	 0
c_acosh	ENDP
_TEXT	ENDS
PUBLIC	$T21770
PUBLIC	$T21769
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
pdata	SEGMENT
$pdata$c_asinh DD imagerel c_asinh
	DD	imagerel c_asinh+78
	DD	imagerel $unwind$c_asinh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$c_asinh DD imagerel c_asinh+78
	DD	imagerel c_asinh+180
	DD	imagerel $chain$2$c_asinh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$c_asinh DD imagerel c_asinh+180
	DD	imagerel c_asinh+373
	DD	imagerel $chain$3$c_asinh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$c_asinh DD imagerel c_asinh+373
	DD	imagerel c_asinh+564
	DD	imagerel $chain$4$c_asinh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$c_asinh DD imagerel c_asinh+564
	DD	imagerel c_asinh+646
	DD	imagerel $chain$6$c_asinh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$c_asinh DD imagerel c_asinh+646
	DD	imagerel c_asinh+674
	DD	imagerel $chain$5$c_asinh
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$c_asinh DD 021H
	DD	imagerel c_asinh
	DD	imagerel c_asinh+78
	DD	imagerel $unwind$c_asinh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$c_asinh DD 020821H
	DD	0163408H
	DD	imagerel c_asinh+646
	DD	imagerel c_asinh+674
	DD	imagerel $chain$5$c_asinh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$c_asinh DD 021H
	DD	imagerel c_asinh+78
	DD	imagerel c_asinh+180
	DD	imagerel $chain$2$c_asinh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$c_asinh DD 020621H
	DD	069806H
	DD	imagerel c_asinh+78
	DD	imagerel c_asinh+180
	DD	imagerel $chain$2$c_asinh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$c_asinh DD 061621H
	DD	078816H
	DD	087810H
	DD	096808H
	DD	imagerel c_asinh
	DD	imagerel c_asinh+78
	DD	imagerel $unwind$c_asinh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_asinh DD 071701H
	DD	0187417H
	DD	0176417H
	DD	0140117H
	DD	0500bH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\cmathmodule.c
xdata	ENDS
;	COMDAT c_asinh
_TEXT	SEGMENT
$T21769 = 32
s2$ = 32
s1$ = 48
r$ = 48
$T21770 = 64
$T21767 = 64
$T21768 = 80
$T21766 = 176
z$ = 184
c_asinh	PROC						; COMDAT

; 221  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000a	55		 push	 rbp
  0000b	48 8d 6c 24 a9	 lea	 rbp, QWORD PTR [rsp-87]
  00010	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H

; 222  :     Py_complex s1, s2, r;
; 223  : 
; 224  :     SPECIAL_VALUE(z, asinh_special_values);

  00017	f2 0f 10 02	 movsdx	 xmm0, QWORD PTR [rdx]
  0001b	48 8b fa	 mov	 rdi, rdx
  0001e	48 8b f1	 mov	 rsi, rcx
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00027	85 c0		 test	 eax, eax
  00029	0f 84 05 02 00
	00		 je	 $LN6@c_asinh
  0002f	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0003a	85 c0		 test	 eax, eax
  0003c	0f 84 f2 01 00
	00		 je	 $LN6@c_asinh

; 225  : 
; 226  :     if (fabs(z.real) > CM_LARGE_DOUBLE || fabs(z.imag) > CM_LARGE_DOUBLE) {

  00042	f2 0f 10 1f	 movsdx	 xmm3, QWORD PTR [rdi]
  00046	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@7fcfffffffffffff
  0004e	0f 29 b4 24 90
	00 00 00	 movaps	 XMMWORD PTR [rsp+144], xmm6
  00056	0f 29 bc 24 80
	00 00 00	 movaps	 XMMWORD PTR [rsp+128], xmm7
  0005e	44 0f 29 44 24
	70		 movaps	 XMMWORD PTR [rsp+112], xmm8
  00064	f2 44 0f 10 05
	00 00 00 00	 movsdx	 xmm8, QWORD PTR __mask@@AbsDouble@
  0006d	66 0f 28 c3	 movapd	 xmm0, xmm3
  00071	66 41 0f 54 c0	 andpd	 xmm0, xmm8
  00076	66 0f 2f c1	 comisd	 xmm0, xmm1
  0007a	0f 87 f5 00 00
	00		 ja	 $LN4@c_asinh
  00080	f2 0f 10 57 08	 movsdx	 xmm2, QWORD PTR [rdi+8]
  00085	66 0f 28 c2	 movapd	 xmm0, xmm2
  00089	66 41 0f 54 c0	 andpd	 xmm0, xmm8
  0008e	66 0f 2f c1	 comisd	 xmm0, xmm1
  00092	0f 87 dd 00 00
	00		 ja	 $LN4@c_asinh

; 235  :     } else {
; 236  :         s1.real = 1.+z.imag;
; 237  :         s1.imag = -z.real;

  00098	66 0f 57 1d 00
	00 00 00	 xorpd	 xmm3, QWORD PTR __mask@@NegDouble@
  000a0	f2 0f 10 35 00
	00 00 00	 movsdx	 xmm6, QWORD PTR __real@3ff0000000000000

; 238  :         s1 = c_sqrt(s1);

  000a8	48 8d 55 d7	 lea	 rdx, QWORD PTR $T21769[rbp-73]
  000ac	f2 0f 58 d6	 addsd	 xmm2, xmm6
  000b0	48 8d 4d f7	 lea	 rcx, QWORD PTR $T21767[rbp-73]
  000b4	44 0f 29 4c 24
	60		 movaps	 XMMWORD PTR [rsp+96], xmm9
  000ba	f2 0f 11 55 e7	 movsdx	 QWORD PTR s1$[rbp-73], xmm2
  000bf	f2 0f 11 5d ef	 movsdx	 QWORD PTR s1$[rbp-65], xmm3
  000c4	0f 28 45 e7	 movaps	 xmm0, XMMWORD PTR s1$[rbp-73]
  000c8	66 0f 7f 45 d7	 movdqa	 XMMWORD PTR $T21769[rbp-73], xmm0
  000cd	e8 00 00 00 00	 call	 c_sqrt

; 239  :         s2.real = 1.-z.imag;

  000d2	f2 0f 5c 77 08	 subsd	 xmm6, QWORD PTR [rdi+8]

; 240  :         s2.imag = z.real;

  000d7	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]

; 241  :         s2 = c_sqrt(s2);

  000db	48 8d 55 f7	 lea	 rdx, QWORD PTR $T21770[rbp-73]
  000df	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000e2	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000e6	f2 0f 11 45 df	 movsdx	 QWORD PTR s2$[rbp-65], xmm0
  000eb	f2 0f 11 75 d7	 movsdx	 QWORD PTR s2$[rbp-73], xmm6
  000f0	48 89 4d e7	 mov	 QWORD PTR s1$[rbp-73], rcx
  000f4	48 8d 4d 07	 lea	 rcx, QWORD PTR $T21768[rbp-73]
  000f8	48 89 45 ef	 mov	 QWORD PTR s1$[rbp-65], rax
  000fc	0f 28 4d d7	 movaps	 xmm1, XMMWORD PTR s2$[rbp-73]
  00100	66 0f 7f 4d f7	 movdqa	 XMMWORD PTR $T21770[rbp-73], xmm1
  00105	e8 00 00 00 00	 call	 c_sqrt

; 242  :         r.real = m_asinh(s1.real*s2.imag-s2.real*s1.imag);

  0010a	f2 0f 10 7d e7	 movsdx	 xmm7, QWORD PTR s1$[rbp-73]
  0010f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00112	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00116	48 89 4d d7	 mov	 QWORD PTR s2$[rbp-73], rcx
  0011a	48 89 45 df	 mov	 QWORD PTR s2$[rbp-65], rax
  0011e	f2 44 0f 10 45
	d7		 movsdx	 xmm8, QWORD PTR s2$[rbp-73]
  00124	f2 44 0f 10 4d
	df		 movsdx	 xmm9, QWORD PTR s2$[rbp-65]
  0012a	66 41 0f 28 d0	 movapd	 xmm2, xmm8
  0012f	66 41 0f 28 c1	 movapd	 xmm0, xmm9
  00134	f2 0f 59 55 ef	 mulsd	 xmm2, QWORD PTR s1$[rbp-65]
  00139	f2 0f 59 c7	 mulsd	 xmm0, xmm7
  0013d	f2 0f 5c c2	 subsd	 xmm0, xmm2
  00141	e8 00 00 00 00	 call	 _Py_asinh

; 243  :         r.imag = atan2(z.imag, s1.real*s2.real-s1.imag*s2.imag);

  00146	f2 44 0f 59 4d
	ef		 mulsd	 xmm9, QWORD PTR s1$[rbp-65]
  0014c	f2 44 0f 59 c7	 mulsd	 xmm8, xmm7
  00151	f2 0f 11 45 e7	 movsdx	 QWORD PTR r$[rbp-73], xmm0
  00156	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  0015b	f2 45 0f 5c c1	 subsd	 xmm8, xmm9
  00160	66 41 0f 28 c8	 movapd	 xmm1, xmm8
  00165	e8 00 00 00 00	 call	 atan2
  0016a	44 0f 28 4c 24
	60		 movaps	 xmm9, XMMWORD PTR [rsp+96]
  00170	e9 8b 00 00 00	 jmp	 $LN14@c_asinh
$LN4@c_asinh:

; 227  :         if (z.imag >= 0.) {

  00175	f2 0f 10 4f 08	 movsdx	 xmm1, QWORD PTR [rdi+8]

; 228  :             r.real = copysign(log(hypot(z.real/2., z.imag/2.)) +
; 229  :                               M_LN2*2., z.real);

  0017a	f2 0f 59 1d 00
	00 00 00	 mulsd	 xmm3, QWORD PTR __real@3fe0000000000000
  00182	66 0f 2f 0d 00
	00 00 00	 comisd	 xmm1, QWORD PTR __real@0000000000000000
  0018a	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00192	66 0f 28 c3	 movapd	 xmm0, xmm3
  00196	72 1f		 jb	 SHORT $LN3@c_asinh
  00198	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__hypot
  0019e	e8 00 00 00 00	 call	 log
  001a3	f2 0f 10 0f	 movsdx	 xmm1, QWORD PTR [rdi]
  001a7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff62e42fefa39ef
  001af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign

; 230  :         } else {

  001b5	eb 31		 jmp	 SHORT $LN15@c_asinh
$LN3@c_asinh:

; 231  :             r.real = -copysign(log(hypot(z.real/2., z.imag/2.)) +
; 232  :                                M_LN2*2., -z.real);

  001b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__hypot
  001bd	f2 0f 10 37	 movsdx	 xmm6, QWORD PTR [rdi]
  001c1	f2 0f 10 3d 00
	00 00 00	 movsdx	 xmm7, QWORD PTR __mask@@NegDouble@
  001c9	66 0f 57 f7	 xorpd	 xmm6, xmm7
  001cd	e8 00 00 00 00	 call	 log
  001d2	66 0f 28 ce	 movapd	 xmm1, xmm6
  001d6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff62e42fefa39ef
  001de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  001e4	66 0f 57 c7	 xorpd	 xmm0, xmm7
$LN15@c_asinh:

; 233  :         }
; 234  :         r.imag = atan2(z.imag, fabs(z.real));

  001e8	f2 0f 10 0f	 movsdx	 xmm1, QWORD PTR [rdi]
  001ec	f2 0f 11 45 e7	 movsdx	 QWORD PTR r$[rbp-73], xmm0
  001f1	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  001f6	66 41 0f 54 c8	 andpd	 xmm1, xmm8
  001fb	e8 00 00 00 00	 call	 atan2
$LN14@c_asinh:
  00200	f2 0f 11 45 ef	 movsdx	 QWORD PTR r$[rbp-65], xmm0

; 244  :     }
; 245  :     errno = 0;

  00205	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0020b	44 0f 28 44 24
	70		 movaps	 xmm8, XMMWORD PTR [rsp+112]
  00211	0f 28 bc 24 80
	00 00 00	 movaps	 xmm7, XMMWORD PTR [rsp+128]
  00219	0f 28 b4 24 90
	00 00 00	 movaps	 xmm6, XMMWORD PTR [rsp+144]
  00221	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 246  :     return r;

  00227	48 8b 45 e7	 mov	 rax, QWORD PTR r$[rbp-73]
  0022b	48 89 06	 mov	 QWORD PTR [rsi], rax
  0022e	48 8b 45 ef	 mov	 rax, QWORD PTR r$[rbp-65]
  00232	eb 52		 jmp	 SHORT $LN16@c_asinh
$LN6@c_asinh:
  00234	48 89 9c 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rbx

; 222  :     Py_complex s1, s2, r;
; 223  : 
; 224  :     SPECIAL_VALUE(z, asinh_special_values);

  0023c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00242	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00248	f2 0f 10 47 08	 movsdx	 xmm0, QWORD PTR [rdi+8]
  0024d	e8 00 00 00 00	 call	 special_type
  00252	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00256	48 63 d8	 movsxd	 rbx, eax
  00259	e8 00 00 00 00	 call	 special_type
  0025e	48 63 c8	 movsxd	 rcx, eax
  00261	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:asinh_special_values
  00268	48 6b c9 07	 imul	 rcx, 7
  0026c	48 03 cb	 add	 rcx, rbx
  0026f	48 8b 9c 24 b0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+176]
  00277	48 03 c9	 add	 rcx, rcx
  0027a	48 8b 04 ca	 mov	 rax, QWORD PTR [rdx+rcx*8]
  0027e	48 89 06	 mov	 QWORD PTR [rsi], rax
  00281	48 8b 44 ca 08	 mov	 rax, QWORD PTR [rdx+rcx*8+8]
$LN16@c_asinh:

; 247  : }

  00286	4c 8d 9c 24 a0
	00 00 00	 lea	 r11, QWORD PTR [rsp+160]
  0028e	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
  00292	48 8b c6	 mov	 rax, rsi
  00295	49 8b 73 18	 mov	 rsi, QWORD PTR [r11+24]
  00299	49 8b 7b 20	 mov	 rdi, QWORD PTR [r11+32]
  0029d	49 8b e3	 mov	 rsp, r11
  002a0	5d		 pop	 rbp
  002a1	c3		 ret	 0
c_asinh	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$c_atan DD imagerel c_atan
	DD	imagerel c_atan+124
	DD	imagerel $unwind$c_atan
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_atan DD 041101H
	DD	056811H
	DD	03004b208H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT c_atan
_TEXT	SEGMENT
s$ = 32
$T21832 = 112
z$ = 120
c_atan	PROC						; COMDAT

; 257  : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	53		 push	 rbx
  00004	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 258  :     /* atan(z) = -i atanh(iz) */
; 259  :     Py_complex s, r;
; 260  :     s.real = -z.imag;

  00008	f2 0f 10 42 08	 movsdx	 xmm0, QWORD PTR [rdx+8]
  0000d	0f 29 70 e8	 movaps	 XMMWORD PTR [rax-24], xmm6
  00011	f2 0f 10 35 00
	00 00 00	 movsdx	 xmm6, QWORD PTR __mask@@NegDouble@
  00019	48 8b d9	 mov	 rbx, rcx

; 261  :     s.imag = z.real;
; 262  :     s = c_atanh(s);

  0001c	48 8d 48 d8	 lea	 rcx, QWORD PTR [rax-40]
  00020	66 0f 57 c6	 xorpd	 xmm0, xmm6
  00024	f2 0f 11 40 b8	 movsdx	 QWORD PTR [rax-72], xmm0
  00029	f2 0f 10 02	 movsdx	 xmm0, QWORD PTR [rdx]
  0002d	48 8d 50 c8	 lea	 rdx, QWORD PTR [rax-56]
  00031	f2 0f 11 40 c0	 movsdx	 QWORD PTR [rax-64], xmm0
  00036	0f 28 48 b8	 movaps	 xmm1, XMMWORD PTR [rax-72]
  0003a	66 0f 7f 48 c8	 movdqa	 XMMWORD PTR [rax-56], xmm1
  0003f	e8 00 00 00 00	 call	 c_atanh
  00044	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00047	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004b	48 89 44 24 28	 mov	 QWORD PTR s$[rsp+8], rax
  00050	48 89 4c 24 20	 mov	 QWORD PTR s$[rsp], rcx

; 263  :     r.real = s.imag;
; 264  :     r.imag = -s.real;
; 265  :     return r;

  00055	48 8b c3	 mov	 rax, rbx
  00058	f2 0f 10 4c 24
	20		 movsdx	 xmm1, QWORD PTR s$[rsp]
  0005e	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR s$[rsp+8]
  00064	66 0f 57 ce	 xorpd	 xmm1, xmm6

; 266  : }

  00068	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]
  0006d	f2 0f 11 03	 movsdx	 QWORD PTR [rbx], xmm0
  00071	f2 0f 11 4b 08	 movsdx	 QWORD PTR [rbx+8], xmm1
  00076	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0007a	5b		 pop	 rbx
  0007b	c3		 ret	 0
c_atan	ENDP
_TEXT	ENDS
PUBLIC	$T21848
;	COMDAT pdata
pdata	SEGMENT
$pdata$c_cos DD	imagerel c_cos
	DD	imagerel c_cos+79
	DD	imagerel $unwind$c_cos
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_cos DD 020601H
	DD	030027206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT c_cos
_TEXT	SEGMENT
$T21848 = 32
$T21847 = 48
$T21846 = 80
z$ = 88
c_cos	PROC						; COMDAT

; 361  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 362  :     /* cos(z) = cosh(iz) */
; 363  :     Py_complex r;
; 364  :     r.real = -z.imag;

  00006	f2 0f 10 42 08	 movsdx	 xmm0, QWORD PTR [rdx+8]

; 365  :     r.imag = z.real;

  0000b	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 366  :     r = c_cosh(r);

  00015	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T21848[rsp]
  0001a	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@
  00022	f2 0f 11 01	 movsdx	 QWORD PTR [rcx], xmm0
  00026	0f 10 01	 movups	 xmm0, XMMWORD PTR [rcx]
  00029	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T21847[rsp]
  0002e	0f 29 44 24 20	 movaps	 XMMWORD PTR $T21848[rsp], xmm0
  00033	e8 00 00 00 00	 call	 c_cosh
  00038	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0003b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0003f	48 89 0b	 mov	 QWORD PTR [rbx], rcx
  00042	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 367  :     return r;

  00046	48 8b c3	 mov	 rax, rbx

; 368  : }

  00049	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0004d	5b		 pop	 rbx
  0004e	c3		 ret	 0
c_cos	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$c_sin DD	imagerel c_sin
	DD	imagerel c_sin+124
	DD	imagerel $unwind$c_sin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_sin DD 041101H
	DD	056811H
	DD	03004b208H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT c_sin
_TEXT	SEGMENT
s$ = 32
$T21859 = 112
z$ = 120
c_sin	PROC						; COMDAT

; 589  : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	53		 push	 rbx
  00004	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 590  :     /* sin(z) = -i sin(iz) */
; 591  :     Py_complex s, r;
; 592  :     s.real = -z.imag;

  00008	f2 0f 10 42 08	 movsdx	 xmm0, QWORD PTR [rdx+8]
  0000d	0f 29 70 e8	 movaps	 XMMWORD PTR [rax-24], xmm6
  00011	f2 0f 10 35 00
	00 00 00	 movsdx	 xmm6, QWORD PTR __mask@@NegDouble@
  00019	48 8b d9	 mov	 rbx, rcx

; 593  :     s.imag = z.real;
; 594  :     s = c_sinh(s);

  0001c	48 8d 48 d8	 lea	 rcx, QWORD PTR [rax-40]
  00020	66 0f 57 c6	 xorpd	 xmm0, xmm6
  00024	f2 0f 11 40 b8	 movsdx	 QWORD PTR [rax-72], xmm0
  00029	f2 0f 10 02	 movsdx	 xmm0, QWORD PTR [rdx]
  0002d	48 8d 50 c8	 lea	 rdx, QWORD PTR [rax-56]
  00031	f2 0f 11 40 c0	 movsdx	 QWORD PTR [rax-64], xmm0
  00036	0f 28 48 b8	 movaps	 xmm1, XMMWORD PTR [rax-72]
  0003a	66 0f 7f 48 c8	 movdqa	 XMMWORD PTR [rax-56], xmm1
  0003f	e8 00 00 00 00	 call	 c_sinh
  00044	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00047	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004b	48 89 44 24 28	 mov	 QWORD PTR s$[rsp+8], rax
  00050	48 89 4c 24 20	 mov	 QWORD PTR s$[rsp], rcx

; 595  :     r.real = s.imag;
; 596  :     r.imag = -s.real;
; 597  :     return r;

  00055	48 8b c3	 mov	 rax, rbx
  00058	f2 0f 10 4c 24
	20		 movsdx	 xmm1, QWORD PTR s$[rsp]
  0005e	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR s$[rsp+8]
  00064	66 0f 57 ce	 xorpd	 xmm1, xmm6

; 598  : }

  00068	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]
  0006d	f2 0f 11 03	 movsdx	 QWORD PTR [rbx], xmm0
  00071	f2 0f 11 4b 08	 movsdx	 QWORD PTR [rbx+8], xmm1
  00076	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0007a	5b		 pop	 rbx
  0007b	c3		 ret	 0
c_sin	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$c_tan DD	imagerel c_tan
	DD	imagerel c_tan+124
	DD	imagerel $unwind$c_tan
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_tan DD 041101H
	DD	056811H
	DD	03004b208H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT c_tan
_TEXT	SEGMENT
s$ = 32
$T21873 = 112
z$ = 120
c_tan	PROC						; COMDAT

; 741  : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	53		 push	 rbx
  00004	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 742  :     /* tan(z) = -i tanh(iz) */
; 743  :     Py_complex s, r;
; 744  :     s.real = -z.imag;

  00008	f2 0f 10 42 08	 movsdx	 xmm0, QWORD PTR [rdx+8]
  0000d	0f 29 70 e8	 movaps	 XMMWORD PTR [rax-24], xmm6
  00011	f2 0f 10 35 00
	00 00 00	 movsdx	 xmm6, QWORD PTR __mask@@NegDouble@
  00019	48 8b d9	 mov	 rbx, rcx

; 745  :     s.imag = z.real;
; 746  :     s = c_tanh(s);

  0001c	48 8d 48 d8	 lea	 rcx, QWORD PTR [rax-40]
  00020	66 0f 57 c6	 xorpd	 xmm0, xmm6
  00024	f2 0f 11 40 b8	 movsdx	 QWORD PTR [rax-72], xmm0
  00029	f2 0f 10 02	 movsdx	 xmm0, QWORD PTR [rdx]
  0002d	48 8d 50 c8	 lea	 rdx, QWORD PTR [rax-56]
  00031	f2 0f 11 40 c0	 movsdx	 QWORD PTR [rax-64], xmm0
  00036	0f 28 48 b8	 movaps	 xmm1, XMMWORD PTR [rax-72]
  0003a	66 0f 7f 48 c8	 movdqa	 XMMWORD PTR [rax-56], xmm1
  0003f	e8 00 00 00 00	 call	 c_tanh
  00044	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00047	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004b	48 89 44 24 28	 mov	 QWORD PTR s$[rsp+8], rax
  00050	48 89 4c 24 20	 mov	 QWORD PTR s$[rsp], rcx

; 747  :     r.real = s.imag;
; 748  :     r.imag = -s.real;
; 749  :     return r;

  00055	48 8b c3	 mov	 rax, rbx
  00058	f2 0f 10 4c 24
	20		 movsdx	 xmm1, QWORD PTR s$[rsp]
  0005e	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR s$[rsp+8]
  00064	66 0f 57 ce	 xorpd	 xmm1, xmm6

; 750  : }

  00068	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]
  0006d	f2 0f 11 03	 movsdx	 QWORD PTR [rbx], xmm0
  00071	f2 0f 11 4b 08	 movsdx	 QWORD PTR [rbx+8], xmm1
  00076	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0007a	5b		 pop	 rbx
  0007b	c3		 ret	 0
c_tan	ENDP
_TEXT	ENDS
PUBLIC	$T21894
PUBLIC	$T21892
PUBLIC	$T21893
PUBLIC	$T21891
PUBLIC	$T21890
PUBLIC	??_C@_03DDDPELM@D?$HMD?$AA@			; `string'
EXTRN	_Py_c_quot:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$cmath_log DD imagerel cmath_log
	DD	imagerel cmath_log+246
	DD	imagerel $unwind$cmath_log
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cmath_log DD 040d01H
	DD	010340dH
	DD	05006d20dH
xdata	ENDS
;	COMDAT ??_C@_03DDDPELM@D?$HMD?$AA@
CONST	SEGMENT
??_C@_03DDDPELM@D?$HMD?$AA@ DB 'D|D', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT cmath_log
_TEXT	SEGMENT
x$ = 32
y$ = 48
$T21893 = 64
$T21891 = 64
$T21890 = 64
$T21894 = 80
$T21892 = 80
$T21888 = 80
$T21887 = 80
$T21889 = 96
self$ = 128
args$ = 136
cmath_log PROC						; COMDAT

; 833  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	55		 push	 rbp
  00006	48 8b ec	 mov	 rbp, rsp
  00009	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000d	48 8b da	 mov	 rbx, rdx

; 834  :     Py_complex x;
; 835  :     Py_complex y;
; 836  : 
; 837  :     if (!PyArg_ParseTuple(args, "D|D", &x, &y))

  00010	4c 8d 4d c0	 lea	 r9, QWORD PTR y$[rbp-112]
  00014	4c 8d 45 b0	 lea	 r8, QWORD PTR x$[rbp-112]
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DDDPELM@D?$HMD?$AA@
  0001f	48 8b cb	 mov	 rcx, rbx
  00022	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00027	85 c0		 test	 eax, eax
  00029	75 10		 jne	 SHORT $LN3@cmath_log

; 838  :         return NULL;

  0002b	33 c0		 xor	 eax, eax

; 851  : }

  0002d	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  00035	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00039	5d		 pop	 rbp
  0003a	c3		 ret	 0
$LN3@cmath_log:

; 839  : 
; 840  :     errno = 0;

  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno

; 841  :     PyFPE_START_PROTECT("complex function", return 0)
; 842  :     x = c_log(x);

  00041	48 8d 55 d0	 lea	 rdx, QWORD PTR $T21890[rbp-112]
  00045	48 8d 4d e0	 lea	 rcx, QWORD PTR $T21887[rbp-112]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  0004f	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR x$[rbp-112]
  00053	66 0f 7f 45 d0	 movdqa	 XMMWORD PTR $T21890[rbp-112], xmm0
  00058	e8 00 00 00 00	 call	 c_log

; 843  :     if (PyTuple_GET_SIZE(args) == 2) {

  0005d	48 83 7b 60 02	 cmp	 QWORD PTR [rbx+96], 2
  00062	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00065	0f 29 45 b0	 movaps	 XMMWORD PTR x$[rbp-112], xmm0
  00069	75 4d		 jne	 SHORT $LN2@cmath_log

; 844  :         y = c_log(y);

  0006b	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR y$[rbp-112]
  0006f	48 8d 55 d0	 lea	 rdx, QWORD PTR $T21891[rbp-112]
  00073	48 8d 4d e0	 lea	 rcx, QWORD PTR $T21888[rbp-112]
  00077	66 0f 7f 45 d0	 movdqa	 XMMWORD PTR $T21891[rbp-112], xmm0
  0007c	e8 00 00 00 00	 call	 c_log

; 845  :         x = c_quot(x, y);

  00081	4c 8d 45 d0	 lea	 r8, QWORD PTR $T21893[rbp-112]
  00085	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR x$[rbp-112]
  00089	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0008c	48 8d 55 e0	 lea	 rdx, QWORD PTR $T21892[rbp-112]
  00090	48 89 4d c0	 mov	 QWORD PTR y$[rbp-112], rcx
  00094	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00098	48 89 4d c8	 mov	 QWORD PTR y$[rbp-104], rcx
  0009c	48 8d 4d f0	 lea	 rcx, QWORD PTR $T21889[rbp-112]
  000a0	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000a3	66 0f 7f 4d e0	 movdqa	 XMMWORD PTR $T21892[rbp-112], xmm1
  000a8	0f 29 45 d0	 movaps	 XMMWORD PTR $T21893[rbp-112], xmm0
  000ac	e8 00 00 00 00	 call	 _Py_c_quot
  000b1	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000b4	0f 29 45 b0	 movaps	 XMMWORD PTR x$[rbp-112], xmm0
$LN2@cmath_log:

; 846  :     }
; 847  :     PyFPE_END_PROTECT(x)
; 848  :     if (errno != 0)

  000b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000be	83 38 00	 cmp	 DWORD PTR [rax], 0
  000c1	74 13		 je	 SHORT $LN1@cmath_log

; 849  :         return math_error();

  000c3	e8 00 00 00 00	 call	 math_error

; 851  : }

  000c8	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  000d0	48 83 c4 70	 add	 rsp, 112		; 00000070H
  000d4	5d		 pop	 rbp
  000d5	c3		 ret	 0
$LN1@cmath_log:

; 850  :     return PyComplex_FromCComplex(x);

  000d6	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR x$[rbp-112]
  000da	48 8d 4d e0	 lea	 rcx, QWORD PTR $T21894[rbp-112]
  000de	66 0f 7f 45 e0	 movdqa	 XMMWORD PTR $T21894[rbp-112], xmm0
  000e3	e8 00 00 00 00	 call	 PyComplex_FromCComplex

; 851  : }

  000e8	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  000f0	48 83 c4 70	 add	 rsp, 112		; 00000070H
  000f4	5d		 pop	 rbp
  000f5	c3		 ret	 0
cmath_log ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT cmath_acos
_TEXT	SEGMENT
self$ = 8
args$ = 16
cmath_acos PROC						; COMDAT

; 900  : FUNC1(cmath_acos, c_acos)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:c_acos
  0000a	e9 00 00 00 00	 jmp	 math_1
cmath_acos ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT cmath_acosh
_TEXT	SEGMENT
self$ = 8
args$ = 16
cmath_acosh PROC					; COMDAT

; 901  : FUNC1(cmath_acosh, c_acosh)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:c_acosh
  0000a	e9 00 00 00 00	 jmp	 math_1
cmath_acosh ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT cmath_asinh
_TEXT	SEGMENT
self$ = 8
args$ = 16
cmath_asinh PROC					; COMDAT

; 903  : FUNC1(cmath_asinh, c_asinh)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:c_asinh
  0000a	e9 00 00 00 00	 jmp	 math_1
cmath_asinh ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT cmath_atan
_TEXT	SEGMENT
self$ = 8
args$ = 16
cmath_atan PROC						; COMDAT

; 904  : FUNC1(cmath_atan, c_atan)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:c_atan
  0000a	e9 00 00 00 00	 jmp	 math_1
cmath_atan ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT cmath_cos
_TEXT	SEGMENT
self$ = 8
args$ = 16
cmath_cos PROC						; COMDAT

; 906  : FUNC1(cmath_cos, c_cos)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:c_cos
  0000a	e9 00 00 00 00	 jmp	 math_1
cmath_cos ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT cmath_sin
_TEXT	SEGMENT
self$ = 8
args$ = 16
cmath_sin PROC						; COMDAT

; 910  : FUNC1(cmath_sin, c_sin)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:c_sin
  0000a	e9 00 00 00 00	 jmp	 math_1
cmath_sin ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT cmath_tan
_TEXT	SEGMENT
self$ = 8
args$ = 16
cmath_tan PROC						; COMDAT

; 913  : FUNC1(cmath_tan, c_tan)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:c_tan
  0000a	e9 00 00 00 00	 jmp	 math_1
cmath_tan ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$c_asin DD imagerel c_asin
	DD	imagerel c_asin+124
	DD	imagerel $unwind$c_asin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_asin DD 041101H
	DD	056811H
	DD	03004b208H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT c_asin
_TEXT	SEGMENT
s$ = 32
$T21939 = 112
z$ = 120
c_asin	PROC						; COMDAT

; 200  : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	53		 push	 rbx
  00004	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 201  :     /* asin(z) = -i asinh(iz) */
; 202  :     Py_complex s, r;
; 203  :     s.real = -z.imag;

  00008	f2 0f 10 42 08	 movsdx	 xmm0, QWORD PTR [rdx+8]
  0000d	0f 29 70 e8	 movaps	 XMMWORD PTR [rax-24], xmm6
  00011	f2 0f 10 35 00
	00 00 00	 movsdx	 xmm6, QWORD PTR __mask@@NegDouble@
  00019	48 8b d9	 mov	 rbx, rcx

; 204  :     s.imag = z.real;
; 205  :     s = c_asinh(s);

  0001c	48 8d 48 d8	 lea	 rcx, QWORD PTR [rax-40]
  00020	66 0f 57 c6	 xorpd	 xmm0, xmm6
  00024	f2 0f 11 40 b8	 movsdx	 QWORD PTR [rax-72], xmm0
  00029	f2 0f 10 02	 movsdx	 xmm0, QWORD PTR [rdx]
  0002d	48 8d 50 c8	 lea	 rdx, QWORD PTR [rax-56]
  00031	f2 0f 11 40 c0	 movsdx	 QWORD PTR [rax-64], xmm0
  00036	0f 28 48 b8	 movaps	 xmm1, XMMWORD PTR [rax-72]
  0003a	66 0f 7f 48 c8	 movdqa	 XMMWORD PTR [rax-56], xmm1
  0003f	e8 00 00 00 00	 call	 c_asinh
  00044	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00047	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004b	48 89 44 24 28	 mov	 QWORD PTR s$[rsp+8], rax
  00050	48 89 4c 24 20	 mov	 QWORD PTR s$[rsp], rcx

; 206  :     r.real = s.imag;
; 207  :     r.imag = -s.real;
; 208  :     return r;

  00055	48 8b c3	 mov	 rax, rbx
  00058	f2 0f 10 4c 24
	20		 movsdx	 xmm1, QWORD PTR s$[rsp]
  0005e	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR s$[rsp+8]
  00064	66 0f 57 ce	 xorpd	 xmm1, xmm6

; 209  : }

  00068	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]
  0006d	f2 0f 11 03	 movsdx	 QWORD PTR [rbx], xmm0
  00071	f2 0f 11 4b 08	 movsdx	 QWORD PTR [rbx+8], xmm1
  00076	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0007a	5b		 pop	 rbx
  0007b	c3		 ret	 0
c_asin	ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT cmath_asin
_TEXT	SEGMENT
self$ = 8
args$ = 16
cmath_asin PROC						; COMDAT

; 902  : FUNC1(cmath_asin, c_asin)

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:c_asin
  0000a	e9 00 00 00 00	 jmp	 math_1
cmath_asin ENDP
_TEXT	ENDS
END
