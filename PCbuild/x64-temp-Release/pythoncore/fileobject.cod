; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0O@INCPDHBH@stderrprinter?$AA@		; `string'
PUBLIC	??_C@_0BM@PHALLEFK@String?5giving?5the?5file?5mode?$AA@ ; `string'
PUBLIC	??_C@_04GMGOKAFF@mode?$AA@			; `string'
PUBLIC	??_C@_0BF@ONNNIPNG@Encoding?5of?5the?5file?$AA@	; `string'
PUBLIC	??_C@_08MLPGAEIK@encoding?$AA@			; `string'
PUBLIC	??_C@_0BL@DEDMGLDL@True?5if?5the?5file?5is?5closed?$AA@ ; `string'
PUBLIC	??_C@_06IKJOPBFO@closed?$AA@			; `string'
PUBLIC	??_C@_06BMABDNNN@isatty?$AA@			; `string'
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	??_C@_06FFBIALPD@fileno?$AA@			; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_08KBCDPPMN@readline?$AA@			; `string'
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	PyStdPrinter_Type
EXTRN	PyObject_Free:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_0O@INCPDHBH@stderrprinter?$AA@
CONST	SEGMENT
??_C@_0O@INCPDHBH@stderrprinter?$AA@ DB 'stderrprinter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PHALLEFK@String?5giving?5the?5file?5mode?$AA@
CONST	SEGMENT
??_C@_0BM@PHALLEFK@String?5giving?5the?5file?5mode?$AA@ DB 'String giving'
	DB	' the file mode', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMGOKAFF@mode?$AA@
CONST	SEGMENT
??_C@_04GMGOKAFF@mode?$AA@ DB 'mode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ONNNIPNG@Encoding?5of?5the?5file?$AA@
CONST	SEGMENT
??_C@_0BF@ONNNIPNG@Encoding?5of?5the?5file?$AA@ DB 'Encoding of the file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLPGAEIK@encoding?$AA@
CONST	SEGMENT
??_C@_08MLPGAEIK@encoding?$AA@ DB 'encoding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DEDMGLDL@True?5if?5the?5file?5is?5closed?$AA@
CONST	SEGMENT
??_C@_0BL@DEDMGLDL@True?5if?5the?5file?5is?5closed?$AA@ DB 'True if the f'
	DB	'ile is closed', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKJOPBFO@closed?$AA@
CONST	SEGMENT
??_C@_06IKJOPBFO@closed?$AA@ DB 'closed', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
stdprinter_methods DQ FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:stdprinter_noop
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:stdprinter_noop
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	FLAT:stdprinter_fileno
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	FLAT:stdprinter_isatty
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:stdprinter_write
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
stdprinter_getsetlist DQ FLAT:??_C@_06IKJOPBFO@closed?$AA@
	DQ	FLAT:get_closed
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0BL@DEDMGLDL@True?5if?5the?5file?5is?5closed?$AA@
	ORG $+8
	DQ	FLAT:??_C@_08MLPGAEIK@encoding?$AA@
	DQ	FLAT:get_encoding
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0BF@ONNNIPNG@Encoding?5of?5the?5file?$AA@
	ORG $+8
	DQ	FLAT:??_C@_04GMGOKAFF@mode?$AA@
	DQ	FLAT:get_mode
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0BM@PHALLEFK@String?5giving?5the?5file?5mode?$AA@
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyStdPrinter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0O@INCPDHBH@stderrprinter?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:stdprinter_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:stdprinter_methods
	DQ	0000000000000000H
	DQ	FLAT:stdprinter_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:stdprinter_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:stdprinter_new
	DQ	FLAT:PyObject_Free
	ORG $+64
_DATA	ENDS
;	COMDAT ??_C@_06BMABDNNN@isatty?$AA@
CONST	SEGMENT
??_C@_06BMABDNNN@isatty?$AA@ DB 'isatty', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFBIALPD@fileno?$AA@
CONST	SEGMENT
??_C@_06FFBIALPD@fileno?$AA@ DB 'fileno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBCDPPMN@readline?$AA@
CONST	SEGMENT
??_C@_08KBCDPPMN@readline?$AA@ DB 'readline', 00H	; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_fileno@?1??PyObject_AsFileDescriptor@@9@9 DQ 0000000000000000H ; `PyObject_AsFileDescriptor'::`2'::PyId_fileno
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	0000000000000000H
?PyId_write@?1??PyFile_WriteObject@@9@9 DQ 0000000000000000H ; `PyFile_WriteObject'::`2'::PyId_write
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	0000000000000000H
?PyId_readline@?3??PyFile_GetLine@@9@9 DQ 0000000000000000H ; `PyFile_GetLine'::`4'::PyId_readline
	DQ	FLAT:??_C@_08KBCDPPMN@readline?$AA@
	DQ	0000000000000000H
?PyId_open@?1??PyFile_FromFd@@9@9 DQ 0000000000000000H	; `PyFile_FromFd'::`2'::PyId_open
	DQ	FLAT:??_C@_04PMOCAHAA@open?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_07ICHCJMKI@isisssi?$AA@			; `string'
PUBLIC	??_C@_02KFNNKBCK@io?$AA@			; `string'
PUBLIC	PyFile_FromFd
EXTRN	_PyObject_CallMethodId_SizeT:PROC
EXTRN	PyImport_ImportModule:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\objects\fileobject.c
pdata	SEGMENT
$pdata$PyFile_FromFd DD imagerel $LN5
	DD	imagerel $LN5+184
	DD	imagerel $unwind$PyFile_FromFd
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFile_FromFd DD 081401H
	DD	0e6414H
	DD	0d5414H
	DD	0c3414H
	DD	070109214H
xdata	ENDS
;	COMDAT ??_C@_07ICHCJMKI@isisssi?$AA@
CONST	SEGMENT
??_C@_07ICHCJMKI@isisssi?$AA@ DB 'isisssi', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KFNNKBCK@io?$AA@
CONST	SEGMENT
??_C@_02KFNNKBCK@io?$AA@ DB 'io', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyFile_FromFd
_TEXT	SEGMENT
fd$ = 96
name$ = 104
mode$ = 112
buffering$ = 120
encoding$ = 128
errors$ = 136
newline$ = 144
closefd$ = 152
PyFile_FromFd PROC					; COMDAT

; 31   : {

$LN5:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	8b e9		 mov	 ebp, ecx

; 32   :     PyObject *io, *stream;
; 33   :     _Py_IDENTIFIER(open);
; 34   : 
; 35   :     io = PyImport_ImportModule("io");

  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02KFNNKBCK@io?$AA@
  0001d	41 8b d9	 mov	 ebx, r9d
  00020	49 8b f0	 mov	 rsi, r8
  00023	e8 00 00 00 00	 call	 PyImport_ImportModule
  00028	48 8b f8	 mov	 rdi, rax

; 36   :     if (io == NULL)

  0002b	48 85 c0	 test	 rax, rax
  0002e	74 73		 je	 SHORT $LN1@PyFile_Fro
$LN2@PyFile_Fro:

; 37   :         return NULL;
; 38   :     stream = _PyObject_CallMethodId(io, &PyId_open, "isisssi", fd, mode,
; 39   :                                  buffering, encoding, errors,
; 40   :                                  newline, closefd);

  00030	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0003f	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_open@?1??PyFile_FromFd@@9@9
  00044	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00048	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR closefd$[rsp]
  0004f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07ICHCJMKI@isisssi?$AA@
  00056	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0005a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR newline$[rsp]
  00062	44 8b cd	 mov	 r9d, ebp
  00065	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0006a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR errors$[rsp]
  00072	48 8b cf	 mov	 rcx, rdi
  00075	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0007a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR encoding$[rsp]
  00082	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00087	89 5c 24 28	 mov	 DWORD PTR [rsp+40], ebx
  0008b	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  00090	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT

; 41   :     Py_DECREF(io);

  00095	48 8b cf	 mov	 rcx, rdi
  00098	48 8b d8	 mov	 rbx, rax
  0009b	e8 00 00 00 00	 call	 _Py_DecRef

; 42   :     if (stream == NULL)

  000a0	48 8b c3	 mov	 rax, rbx
$LN1@PyFile_Fro:

; 43   :         return NULL;
; 44   :     /* ignore name attribute because the name attribute of _BufferedIOMixin
; 45   :        and TextIOWrapper is read only */
; 46   :     return stream;
; 47   : }

  000a3	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  000a8	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  000ad	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  000b2	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000b6	5f		 pop	 rdi
  000b7	c3		 ret	 0
PyFile_FromFd ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@LFAMHIIP@EOF?5when?5reading?5a?5line?$AA@ ; `string'
PUBLIC	??_C@_0CG@EJCLHJFO@object?4readline?$CI?$CJ?5returned?5non?9s@ ; `string'
PUBLIC	??_C@_03LIHNMIHG@?$CIi?$CJ?$AA@			; `string'
PUBLIC	??_C@_0BI@IGLOKEDB@?4?4?2Objects?2fileobject?4c?$AA@ ; `string'
PUBLIC	PyFile_GetLine
EXTRN	PyUnicode_Substring:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	_PyBytes_Resize:PROC
EXTRN	PyExc_EOFError:QWORD
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	_Py_BuildValue_SizeT:PROC
EXTRN	PyTuple_New:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFile_GetLine DD imagerel $LN38
	DD	imagerel $LN38+66
	DD	imagerel $unwind$PyFile_GetLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyFile_GetLine DD imagerel $LN38+66
	DD	imagerel $LN38+95
	DD	imagerel $chain$0$PyFile_GetLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyFile_GetLine DD imagerel $LN38+95
	DD	imagerel $LN38+161
	DD	imagerel $chain$3$PyFile_GetLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyFile_GetLine DD imagerel $LN38+161
	DD	imagerel $LN38+500
	DD	imagerel $chain$5$PyFile_GetLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$PyFile_GetLine DD imagerel $LN38+500
	DD	imagerel $LN38+715
	DD	imagerel $chain$7$PyFile_GetLine
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$PyFile_GetLine DD 040021H
	DD	086400H
	DD	073400H
	DD	imagerel $LN38
	DD	imagerel $LN38+66
	DD	imagerel $unwind$PyFile_GetLine
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyFile_GetLine DD 040021H
	DD	086400H
	DD	073400H
	DD	imagerel $LN38
	DD	imagerel $LN38+66
	DD	imagerel $unwind$PyFile_GetLine
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyFile_GetLine DD 040521H
	DD	073405H
	DD	086400H
	DD	imagerel $LN38
	DD	imagerel $LN38+66
	DD	imagerel $unwind$PyFile_GetLine
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyFile_GetLine DD 020521H
	DD	086405H
	DD	imagerel $LN38
	DD	imagerel $LN38+66
	DD	imagerel $unwind$PyFile_GetLine
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFile_GetLine DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT ??_C@_0BI@LFAMHIIP@EOF?5when?5reading?5a?5line?$AA@
CONST	SEGMENT
??_C@_0BI@LFAMHIIP@EOF?5when?5reading?5a?5line?$AA@ DB 'EOF when reading '
	DB	'a line', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EJCLHJFO@object?4readline?$CI?$CJ?5returned?5non?9s@
CONST	SEGMENT
??_C@_0CG@EJCLHJFO@object?4readline?$CI?$CJ?5returned?5non?9s@ DB 'object'
	DB	'.readline() returned non-string', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LIHNMIHG@?$CIi?$CJ?$AA@
CONST	SEGMENT
??_C@_03LIHNMIHG@?$CIi?$CJ?$AA@ DB '(i)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IGLOKEDB@?4?4?2Objects?2fileobject?4c?$AA@
CONST	SEGMENT
??_C@_0BI@IGLOKEDB@?4?4?2Objects?2fileobject?4c?$AA@ DB '..\Objects\fileo'
	DB	'bject.c', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyFile_GetLine
_TEXT	SEGMENT
result$ = 48
f$ = 48
n$ = 56
PyFile_GetLine PROC					; COMDAT

; 51   : {

$LN38:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	8b fa		 mov	 edi, edx
  00008	4c 8b c1	 mov	 r8, rcx

; 52   :     PyObject *result;
; 53   : 
; 54   :     if (f == NULL) {

  0000b	48 85 c9	 test	 rcx, rcx
  0000e	75 17		 jne	 SHORT $LN16@PyFile_Get

; 55   :         PyErr_BadInternalCall();

  00010	8d 51 37	 lea	 edx, QWORD PTR [rcx+55]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@IGLOKEDB@?4?4?2Objects?2fileobject?4c?$AA@
  0001a	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 56   :         return NULL;

  0001f	33 c0		 xor	 eax, eax

; 123  : }

  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5f		 pop	 rdi
  00026	c3		 ret	 0
$LN16@PyFile_Get:

; 57   :     }
; 58   : 
; 59   :     {
; 60   :         PyObject *reader;
; 61   :         PyObject *args;
; 62   :         _Py_IDENTIFIER(readline);
; 63   : 
; 64   :         reader = _PyObject_GetAttrId(f, &PyId_readline);

  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0002d	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00036	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_readline@?3??PyFile_GetLine@@9@9
  0003b	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  0003f	49 8b c8	 mov	 rcx, r8
  00042	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00047	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0004c	48 8b f0	 mov	 rsi, rax

; 65   :         if (reader == NULL)

  0004f	48 85 c0	 test	 rax, rax
  00052	75 0b		 jne	 SHORT $LN15@PyFile_Get
  00054	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 123  : }

  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5f		 pop	 rdi
  0005e	c3		 ret	 0
$LN15@PyFile_Get:
  0005f	48 89 5c 24 38	 mov	 QWORD PTR [rsp+56], rbx

; 66   :             return NULL;
; 67   :         if (n <= 0)

  00064	85 ff		 test	 edi, edi
  00066	7f 09		 jg	 SHORT $LN14@PyFile_Get

; 68   :             args = PyTuple_New(0);

  00068	33 c9		 xor	 ecx, ecx
  0006a	e8 00 00 00 00	 call	 PyTuple_New

; 69   :         else

  0006f	eb 0e		 jmp	 SHORT $LN37@PyFile_Get
$LN14@PyFile_Get:

; 70   :             args = Py_BuildValue("(i)", n);

  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03LIHNMIHG@?$CIi?$CJ?$AA@
  00078	8b d7		 mov	 edx, edi
  0007a	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
$LN37@PyFile_Get:
  0007f	48 8b d8	 mov	 rbx, rax

; 71   :         if (args == NULL) {
; 72   :             Py_DECREF(reader);

  00082	48 8b ce	 mov	 rcx, rsi
  00085	48 85 c0	 test	 rax, rax
  00088	75 17		 jne	 SHORT $LN12@PyFile_Get
  0008a	e8 00 00 00 00	 call	 _Py_DecRef
  0008f	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00094	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 73   :             return NULL;

  00099	33 c0		 xor	 eax, eax

; 123  : }

  0009b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
$LN12@PyFile_Get:

; 74   :         }
; 75   :         result = PyEval_CallObject(reader, args);

  000a1	45 33 c0	 xor	 r8d, r8d
  000a4	48 8b d3	 mov	 rdx, rbx
  000a7	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords

; 76   :         Py_DECREF(reader);

  000ac	48 8b ce	 mov	 rcx, rsi
  000af	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax
  000b4	e8 00 00 00 00	 call	 _Py_DecRef

; 77   :         Py_DECREF(args);

  000b9	48 8b cb	 mov	 rcx, rbx
  000bc	e8 00 00 00 00	 call	 _Py_DecRef

; 78   :         if (result != NULL && !PyBytes_Check(result) &&
; 79   :             !PyUnicode_Check(result)) {

  000c1	48 8b 5c 24 30	 mov	 rbx, QWORD PTR result$[rsp]
  000c6	33 f6		 xor	 esi, esi
  000c8	48 85 db	 test	 rbx, rbx
  000cb	74 3b		 je	 SHORT $LN11@PyFile_Get
  000cd	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000d1	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [rax+256]
  000d7	0f ba e1 1b	 bt	 ecx, 27
  000db	72 2b		 jb	 SHORT $LN11@PyFile_Get
  000dd	0f ba e1 1c	 bt	 ecx, 28
  000e1	72 25		 jb	 SHORT $LN11@PyFile_Get

; 80   :             Py_DECREF(result);

  000e3	48 8b cb	 mov	 rcx, rbx
  000e6	e8 00 00 00 00	 call	 _Py_DecRef

; 81   :             result = NULL;
; 82   :             PyErr_SetString(PyExc_TypeError,
; 83   :                        "object.readline() returned non-string");

  000eb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@EJCLHJFO@object?4readline?$CI?$CJ?5returned?5non?9s@
  000f9	48 89 74 24 30	 mov	 QWORD PTR result$[rsp], rsi
  000fe	e8 00 00 00 00	 call	 PyErr_SetString
  00103	48 8b 5c 24 30	 mov	 rbx, QWORD PTR result$[rsp]
$LN11@PyFile_Get:

; 84   :         }
; 85   :     }
; 86   : 
; 87   :     if (n < 0 && result != NULL && PyBytes_Check(result)) {

  00108	85 ff		 test	 edi, edi
  0010a	0f 89 a8 01 00
	00		 jns	 $LN1@PyFile_Get
  00110	48 85 db	 test	 rbx, rbx
  00113	0f 84 9f 01 00
	00		 je	 $LN1@PyFile_Get
  00119	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0011d	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  00127	74 6d		 je	 SHORT $LN5@PyFile_Get

; 88   :         char *s = PyBytes_AS_STRING(result);
; 89   :         Py_ssize_t len = PyBytes_GET_SIZE(result);

  00129	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  0012d	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]

; 90   :         if (len == 0) {

  00131	48 85 d2	 test	 rdx, rdx
  00134	75 27		 jne	 SHORT $LN9@PyFile_Get

; 91   :             Py_DECREF(result);

  00136	48 8b cb	 mov	 rcx, rbx
  00139	e8 00 00 00 00	 call	 _Py_DecRef

; 92   :             result = NULL;
; 93   :             PyErr_SetString(PyExc_EOFError,
; 94   :                             "EOF when reading a line");

  0013e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_EOFError
  00145	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LFAMHIIP@EOF?5when?5reading?5a?5line?$AA@
  0014c	48 89 74 24 30	 mov	 QWORD PTR result$[rsp], rsi
  00151	e8 00 00 00 00	 call	 PyErr_SetString
  00156	48 8b 5c 24 30	 mov	 rbx, QWORD PTR result$[rsp]
  0015b	eb 39		 jmp	 SHORT $LN5@PyFile_Get
$LN9@PyFile_Get:

; 95   :         }
; 96   :         else if (s[len-1] == '\n') {

  0015d	80 7c 0a ff 0a	 cmp	 BYTE PTR [rdx+rcx-1], 10
  00162	75 32		 jne	 SHORT $LN5@PyFile_Get

; 97   :             if (result->ob_refcnt == 1)
; 98   :                 _PyBytes_Resize(&result, len-1);

  00164	48 ff ca	 dec	 rdx
  00167	48 83 7b 50 01	 cmp	 QWORD PTR [rbx+80], 1
  0016c	75 11		 jne	 SHORT $LN6@PyFile_Get
  0016e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR result$[rsp]
  00173	e8 00 00 00 00	 call	 _PyBytes_Resize

; 99   :             else {

  00178	48 8b 5c 24 30	 mov	 rbx, QWORD PTR result$[rsp]
  0017d	eb 17		 jmp	 SHORT $LN5@PyFile_Get
$LN6@PyFile_Get:

; 100  :                 PyObject *v;
; 101  :                 v = PyBytes_FromStringAndSize(s, len-1);

  0017f	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 102  :                 Py_DECREF(result);

  00184	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  00189	48 8b d8	 mov	 rbx, rax
  0018c	e8 00 00 00 00	 call	 _Py_DecRef

; 103  :                 result = v;

  00191	48 89 5c 24 30	 mov	 QWORD PTR result$[rsp], rbx
$LN5@PyFile_Get:

; 104  :             }
; 105  :         }
; 106  :     }
; 107  :     if (n < 0 && result != NULL && PyUnicode_Check(result)) {

  00196	48 85 db	 test	 rbx, rbx
  00199	0f 84 19 01 00
	00		 je	 $LN1@PyFile_Get
  0019f	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001a3	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  001ad	0f 84 05 01 00
	00		 je	 $LN1@PyFile_Get

; 108  :         Py_ssize_t len = PyUnicode_GET_LENGTH(result);

  001b3	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]

; 109  :         if (len == 0) {

  001b7	4d 85 c0	 test	 r8, r8
  001ba	75 38		 jne	 SHORT $LN3@PyFile_Get

; 110  :             Py_DECREF(result);

  001bc	48 8b cb	 mov	 rcx, rbx
  001bf	e8 00 00 00 00	 call	 _Py_DecRef

; 111  :             result = NULL;
; 112  :             PyErr_SetString(PyExc_EOFError,
; 113  :                             "EOF when reading a line");

  001c4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_EOFError
  001cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LFAMHIIP@EOF?5when?5reading?5a?5line?$AA@
  001d2	48 89 74 24 30	 mov	 QWORD PTR result$[rsp], rsi
  001d7	e8 00 00 00 00	 call	 PyErr_SetString
  001dc	48 8b 5c 24 30	 mov	 rbx, QWORD PTR result$[rsp]
  001e1	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 119  :             result = v;
; 120  :         }
; 121  :     }
; 122  :     return result;

  001e6	48 8b c3	 mov	 rax, rbx
  001e9	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]

; 123  : }

  001ee	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001f2	5f		 pop	 rdi
  001f3	c3		 ret	 0
$LN3@PyFile_Get:

; 114  :         }
; 115  :         else if (PyUnicode_READ_CHAR(result, len-1) == '\n') {

  001f4	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  001f7	8b c8		 mov	 ecx, eax
  001f9	c1 e9 02	 shr	 ecx, 2
  001fc	83 e1 07	 and	 ecx, 7
  001ff	83 f9 01	 cmp	 ecx, 1
  00202	75 35		 jne	 SHORT $LN33@PyFile_Get
  00204	a8 20		 test	 al, 32			; 00000020H
  00206	74 22		 je	 SHORT $LN21@PyFile_Get
  00208	a8 40		 test	 al, 64			; 00000040H
  0020a	74 0f		 je	 SHORT $LN19@PyFile_Get
  0020c	42 0f b6 4c 03
	7f		 movzx	 ecx, BYTE PTR [rbx+r8+127]
  00212	48 8d 83 80 00
	00 00		 lea	 rax, QWORD PTR [rbx+128]
  00219	eb 7e		 jmp	 SHORT $LN32@PyFile_Get
$LN19@PyFile_Get:
  0021b	48 8d 83 a0 00
	00 00		 lea	 rax, QWORD PTR [rbx+160]
  00222	42 0f b6 4c 00
	ff		 movzx	 ecx, BYTE PTR [rax+r8-1]
  00228	eb 6f		 jmp	 SHORT $LN32@PyFile_Get
$LN21@PyFile_Get:
  0022a	48 8b 83 a0 00
	00 00		 mov	 rax, QWORD PTR [rbx+160]
  00231	42 0f b6 4c 00
	ff		 movzx	 ecx, BYTE PTR [rax+r8-1]
  00237	eb 60		 jmp	 SHORT $LN32@PyFile_Get
$LN33@PyFile_Get:
  00239	83 f9 02	 cmp	 ecx, 2
  0023c	75 35		 jne	 SHORT $LN31@PyFile_Get
  0023e	a8 20		 test	 al, 32			; 00000020H
  00240	74 22		 je	 SHORT $LN25@PyFile_Get
  00242	a8 40		 test	 al, 64			; 00000040H
  00244	74 0f		 je	 SHORT $LN23@PyFile_Get
  00246	42 0f b7 4c 43
	7e		 movzx	 ecx, WORD PTR [rbx+r8*2+126]
  0024c	48 8d 83 80 00
	00 00		 lea	 rax, QWORD PTR [rbx+128]
  00253	eb 44		 jmp	 SHORT $LN32@PyFile_Get
$LN23@PyFile_Get:
  00255	48 8d 83 a0 00
	00 00		 lea	 rax, QWORD PTR [rbx+160]
  0025c	42 0f b7 4c 40
	fe		 movzx	 ecx, WORD PTR [rax+r8*2-2]
  00262	eb 35		 jmp	 SHORT $LN32@PyFile_Get
$LN25@PyFile_Get:
  00264	48 8b 83 a0 00
	00 00		 mov	 rax, QWORD PTR [rbx+160]
  0026b	42 0f b7 4c 40
	fe		 movzx	 ecx, WORD PTR [rax+r8*2-2]
  00271	eb 26		 jmp	 SHORT $LN32@PyFile_Get
$LN31@PyFile_Get:
  00273	a8 20		 test	 al, 32			; 00000020H
  00275	74 16		 je	 SHORT $LN29@PyFile_Get
  00277	a8 40		 test	 al, 64			; 00000040H
  00279	74 09		 je	 SHORT $LN27@PyFile_Get
  0027b	48 8d 83 80 00
	00 00		 lea	 rax, QWORD PTR [rbx+128]
  00282	eb 10		 jmp	 SHORT $LN30@PyFile_Get
$LN27@PyFile_Get:
  00284	48 8d 83 a0 00
	00 00		 lea	 rax, QWORD PTR [rbx+160]
  0028b	eb 07		 jmp	 SHORT $LN30@PyFile_Get
$LN29@PyFile_Get:
  0028d	48 8b 83 a0 00
	00 00		 mov	 rax, QWORD PTR [rbx+160]
$LN30@PyFile_Get:
  00294	42 8b 4c 80 fc	 mov	 ecx, DWORD PTR [rax+r8*4-4]
$LN32@PyFile_Get:
  00299	83 f9 0a	 cmp	 ecx, 10
  0029c	75 1a		 jne	 SHORT $LN1@PyFile_Get

; 116  :             PyObject *v;
; 117  :             v = PyUnicode_Substring(result, 0, len-1);

  0029e	49 ff c8	 dec	 r8
  002a1	33 d2		 xor	 edx, edx
  002a3	48 8b cb	 mov	 rcx, rbx
  002a6	e8 00 00 00 00	 call	 PyUnicode_Substring

; 118  :             Py_DECREF(result);

  002ab	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  002b0	48 8b d8	 mov	 rbx, rax
  002b3	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyFile_Get:

; 119  :             result = v;
; 120  :         }
; 121  :     }
; 122  :     return result;

  002b8	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  002bd	48 8b c3	 mov	 rax, rbx
  002c0	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]

; 123  : }

  002c5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  002c9	5f		 pop	 rdi
  002ca	c3		 ret	 0
PyFile_GetLine ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@EMCDFIKA@writeobject?5with?5NULL?5file?$AA@ ; `string'
PUBLIC	PyFile_WriteObject
EXTRN	PyTuple_Pack:PROC
EXTRN	PyObject_Repr:PROC
EXTRN	PyObject_Str:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFile_WriteObject DD imagerel $LN15
	DD	imagerel $LN15+84
	DD	imagerel $unwind$PyFile_WriteObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyFile_WriteObject DD imagerel $LN15+84
	DD	imagerel $LN15+187
	DD	imagerel $chain$0$PyFile_WriteObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyFile_WriteObject DD imagerel $LN15+187
	DD	imagerel $LN15+274
	DD	imagerel $chain$3$PyFile_WriteObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyFile_WriteObject DD 040e21H
	DD	06540eH
	DD	077400H
	DD	imagerel $LN15
	DD	imagerel $LN15+84
	DD	imagerel $unwind$PyFile_WriteObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyFile_WriteObject DD 020521H
	DD	077405H
	DD	imagerel $LN15
	DD	imagerel $LN15+84
	DD	imagerel $unwind$PyFile_WriteObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFile_WriteObject DD 040a01H
	DD	08340aH
	DD	06006320aH
xdata	ENDS
;	COMDAT ??_C@_0BL@EMCDFIKA@writeobject?5with?5NULL?5file?$AA@
CONST	SEGMENT
??_C@_0BL@EMCDFIKA@writeobject?5with?5NULL?5file?$AA@ DB 'writeobject wit'
	DB	'h NULL file', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyFile_WriteObject
_TEXT	SEGMENT
v$ = 48
f$ = 56
flags$ = 64
PyFile_WriteObject PROC					; COMDAT

; 129  : {

$LN15:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	41 8b f0	 mov	 esi, r8d
  0000d	4c 8b ca	 mov	 r9, rdx
  00010	48 8b d9	 mov	 rbx, rcx

; 130  :     PyObject *writer, *value, *args, *result;
; 131  :     _Py_IDENTIFIER(write);
; 132  : 
; 133  :     if (f == NULL) {

  00013	48 85 d2	 test	 rdx, rdx
  00016	75 21		 jne	 SHORT $LN7@PyFile_Wri

; 134  :         PyErr_SetString(PyExc_TypeError, "writeobject with NULL file");

  00018	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@EMCDFIKA@writeobject?5with?5NULL?5file?$AA@
  00026	e8 00 00 00 00	 call	 PyErr_SetString

; 135  :         return -1;

  0002b	83 c8 ff	 or	 eax, -1

; 163  : }

  0002e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5e		 pop	 rsi
  00038	c3		 ret	 0
$LN7@PyFile_Wri:

; 136  :     }
; 137  :     writer = _PyObject_GetAttrId(f, &PyId_write);

  00039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0003f	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00048	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_write@?1??PyFile_WriteObject@@9@9
  0004d	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00051	49 8b c9	 mov	 rcx, r9
  00054	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00059	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0005e	48 8b f8	 mov	 rdi, rax

; 138  :     if (writer == NULL)

  00061	48 85 c0	 test	 rax, rax

; 139  :         return -1;

  00064	74 42		 je	 SHORT $LN14@PyFile_Wri

; 140  :     if (flags & Py_PRINT_RAW) {
; 141  :         value = PyObject_Str(v);

  00066	48 8b cb	 mov	 rcx, rbx
  00069	40 f6 c6 01	 test	 sil, 1
  0006d	74 07		 je	 SHORT $LN5@PyFile_Wri
  0006f	e8 00 00 00 00	 call	 PyObject_Str

; 142  :     }
; 143  :     else

  00074	eb 05		 jmp	 SHORT $LN12@PyFile_Wri
$LN5@PyFile_Wri:

; 144  :         value = PyObject_Repr(v);

  00076	e8 00 00 00 00	 call	 PyObject_Repr
$LN12@PyFile_Wri:
  0007b	48 8b d8	 mov	 rbx, rax

; 145  :     if (value == NULL) {

  0007e	48 85 c0	 test	 rax, rax

; 146  :         Py_DECREF(writer);
; 147  :         return -1;

  00081	74 1d		 je	 SHORT $LN13@PyFile_Wri

; 148  :     }
; 149  :     args = PyTuple_Pack(1, value);

  00083	48 8b d0	 mov	 rdx, rax
  00086	b9 01 00 00 00	 mov	 ecx, 1
  0008b	e8 00 00 00 00	 call	 PyTuple_Pack
  00090	48 8b f0	 mov	 rsi, rax

; 150  :     if (args == NULL) {

  00093	48 85 c0	 test	 rax, rax
  00096	75 23		 jne	 SHORT $LN2@PyFile_Wri

; 151  :         Py_DECREF(value);

  00098	48 8b cb	 mov	 rcx, rbx
  0009b	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@PyFile_Wri:

; 152  :         Py_DECREF(writer);

  000a0	48 8b cf	 mov	 rcx, rdi
  000a3	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@PyFile_Wri:

; 153  :         return -1;

  000a8	83 c8 ff	 or	 eax, -1
  000ab	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 163  : }

  000b0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b9	5e		 pop	 rsi
  000ba	c3		 ret	 0
$LN2@PyFile_Wri:

; 154  :     }
; 155  :     result = PyEval_CallObject(writer, args);

  000bb	45 33 c0	 xor	 r8d, r8d
  000be	48 8b d0	 mov	 rdx, rax
  000c1	48 8b cf	 mov	 rcx, rdi
  000c4	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  000c9	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords

; 156  :     Py_DECREF(args);

  000ce	48 8b ce	 mov	 rcx, rsi
  000d1	48 8b e8	 mov	 rbp, rax
  000d4	e8 00 00 00 00	 call	 _Py_DecRef

; 157  :     Py_DECREF(value);

  000d9	48 8b cb	 mov	 rcx, rbx
  000dc	e8 00 00 00 00	 call	 _Py_DecRef

; 158  :     Py_DECREF(writer);

  000e1	48 8b cf	 mov	 rcx, rdi
  000e4	e8 00 00 00 00	 call	 _Py_DecRef

; 159  :     if (result == NULL)

  000e9	48 85 ed	 test	 rbp, rbp
  000ec	75 05		 jne	 SHORT $LN1@PyFile_Wri

; 160  :         return -1;

  000ee	83 c8 ff	 or	 eax, -1
  000f1	eb 0a		 jmp	 SHORT $LN11@PyFile_Wri
$LN1@PyFile_Wri:

; 161  :     Py_DECREF(result);

  000f3	48 8b cd	 mov	 rcx, rbp
  000f6	e8 00 00 00 00	 call	 _Py_DecRef

; 162  :     return 0;

  000fb	33 c0		 xor	 eax, eax
$LN11@PyFile_Wri:

; 163  : }

  000fd	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  00102	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  00107	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0010c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00110	5e		 pop	 rsi
  00111	c3		 ret	 0
PyFile_WriteObject ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@MOMOFDKF@null?5file?5for?5PyFile_WriteString@ ; `string'
PUBLIC	PyFile_WriteString
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyErr_Occurred:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFile_WriteString DD imagerel $LN9
	DD	imagerel $LN9+130
	DD	imagerel $unwind$PyFile_WriteString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFile_WriteString DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CB@MOMOFDKF@null?5file?5for?5PyFile_WriteString@
CONST	SEGMENT
??_C@_0CB@MOMOFDKF@null?5file?5for?5PyFile_WriteString@ DB 'null file for'
	DB	' PyFile_WriteString', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyFile_WriteString
_TEXT	SEGMENT
s$ = 48
f$ = 56
PyFile_WriteString PROC					; COMDAT

; 167  : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 168  :     if (f == NULL) {

  00010	48 85 d2	 test	 rdx, rdx
  00013	75 2b		 jne	 SHORT $LN6@PyFile_Wri@2

; 169  :         /* Should be caused by a pre-existing error */
; 170  :         if (!PyErr_Occurred())

  00015	e8 00 00 00 00	 call	 PyErr_Occurred
  0001a	48 85 c0	 test	 rax, rax
  0001d	75 13		 jne	 SHORT $LN3@PyFile_Wri@2

; 171  :             PyErr_SetString(PyExc_SystemError,
; 172  :                             "null file for PyFile_WriteString");

  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@MOMOFDKF@null?5file?5for?5PyFile_WriteString@
  0002d	e8 00 00 00 00	 call	 PyErr_SetString
$LN3@PyFile_Wri@2:

; 183  :     }
; 184  :     else
; 185  :         return -1;

  00032	83 c8 ff	 or	 eax, -1

; 186  : }

  00035	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5f		 pop	 rdi
  0003f	c3		 ret	 0
$LN6@PyFile_Wri@2:

; 173  :         return -1;
; 174  :     }
; 175  :     else if (!PyErr_Occurred()) {

  00040	e8 00 00 00 00	 call	 PyErr_Occurred
  00045	48 85 c0	 test	 rax, rax
  00048	75 e8		 jne	 SHORT $LN3@PyFile_Wri@2

; 176  :         PyObject *v = PyUnicode_FromString(s);

  0004a	48 8b cf	 mov	 rcx, rdi
  0004d	e8 00 00 00 00	 call	 PyUnicode_FromString
  00052	48 8b f8	 mov	 rdi, rax

; 177  :         int err;
; 178  :         if (v == NULL)

  00055	48 85 c0	 test	 rax, rax

; 179  :             return -1;

  00058	74 d8		 je	 SHORT $LN3@PyFile_Wri@2

; 180  :         err = PyFile_WriteObject(v, f, Py_PRINT_RAW);

  0005a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00060	48 8b d3	 mov	 rdx, rbx
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 PyFile_WriteObject

; 181  :         Py_DECREF(v);

  0006b	48 8b cf	 mov	 rcx, rdi
  0006e	8b d8		 mov	 ebx, eax
  00070	e8 00 00 00 00	 call	 _Py_DecRef

; 182  :         return err;

  00075	8b c3		 mov	 eax, ebx

; 186  : }

  00077	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00080	5f		 pop	 rdi
  00081	c3		 ret	 0
PyFile_WriteString ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@JCAJMKKB@argument?5must?5be?5an?5int?0?5or?5have@ ; `string'
PUBLIC	??_C@_0CA@GFOJBACD@fileno?$CI?$CJ?5returned?5a?5non?9integer?$AA@ ; `string'
PUBLIC	??_C@_0DC@GPILBMJA@file?5descriptor?5cannot?5be?5a?5nega@ ; `string'
PUBLIC	PyObject_AsFileDescriptor
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	_PyLong_AsInt:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_AsFileDescriptor DD imagerel $LN14
	DD	imagerel $LN14+304
	DD	imagerel $unwind$PyObject_AsFileDescriptor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_AsFileDescriptor DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0DE@JCAJMKKB@argument?5must?5be?5an?5int?0?5or?5have@
CONST	SEGMENT
??_C@_0DE@JCAJMKKB@argument?5must?5be?5an?5int?0?5or?5have@ DB 'argument '
	DB	'must be an int, or have a fileno() method.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GFOJBACD@fileno?$CI?$CJ?5returned?5a?5non?9integer?$AA@
CONST	SEGMENT
??_C@_0CA@GFOJBACD@fileno?$CI?$CJ?5returned?5a?5non?9integer?$AA@ DB 'fil'
	DB	'eno() returned a non-integer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@GPILBMJA@file?5descriptor?5cannot?5be?5a?5nega@
CONST	SEGMENT
??_C@_0DC@GPILBMJA@file?5descriptor?5cannot?5be?5a?5nega@ DB 'file descri'
	DB	'ptor cannot be a negative integer (%i)', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_AsFileDescriptor
_TEXT	SEGMENT
o$ = 48
PyObject_AsFileDescriptor PROC				; COMDAT

; 197  : {

$LN14:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 198  :     int fd;
; 199  :     PyObject *meth;
; 200  :     _Py_IDENTIFIER(fileno);
; 201  : 
; 202  :     if (PyLong_Check(o)) {

  0000a	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000e	4c 8b c1	 mov	 r8, rcx
  00011	f7 80 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rax+256], 16777216 ; 01000000H
  0001b	74 09		 je	 SHORT $LN9@PyObject_A

; 203  :         fd = _PyLong_AsInt(o);

  0001d	e8 00 00 00 00	 call	 _PyLong_AsInt
  00022	8b d8		 mov	 ebx, eax
  00024	eb 6f		 jmp	 SHORT $LN4@PyObject_A
$LN9@PyObject_A:

; 204  :     }
; 205  :     else if ((meth = _PyObject_GetAttrId(o, &PyId_fileno)) != NULL)

  00026	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0002c	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00035	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId_fileno@?1??PyObject_AsFileDescriptor@@9@9
  0003a	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  0003e	49 8b c8	 mov	 rcx, r8
  00041	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00046	48 8b d8	 mov	 rbx, rax
  00049	48 85 c0	 test	 rax, rax
  0004c	0f 84 bd 00 00
	00		 je	 $LN7@PyObject_A

; 206  :     {
; 207  :         PyObject *fno = PyEval_CallObject(meth, NULL);

  00052	45 33 c0	 xor	 r8d, r8d
  00055	33 d2		 xor	 edx, edx
  00057	48 8b c8	 mov	 rcx, rax
  0005a	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords

; 208  :         Py_DECREF(meth);

  0005f	48 8b cb	 mov	 rcx, rbx
  00062	48 8b f8	 mov	 rdi, rax
  00065	e8 00 00 00 00	 call	 _Py_DecRef

; 209  :         if (fno == NULL)

  0006a	48 85 ff	 test	 rdi, rdi

; 210  :             return -1;

  0006d	0f 84 af 00 00
	00		 je	 $LN13@PyObject_A

; 211  : 
; 212  :         if (PyLong_Check(fno)) {

  00073	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00077	f7 80 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rax+256], 16777216 ; 01000000H
  00081	74 63		 je	 SHORT $LN5@PyObject_A

; 213  :             fd = _PyLong_AsInt(fno);

  00083	48 8b cf	 mov	 rcx, rdi
  00086	e8 00 00 00 00	 call	 _PyLong_AsInt

; 214  :             Py_DECREF(fno);

  0008b	48 8b cf	 mov	 rcx, rdi
  0008e	8b d8		 mov	 ebx, eax
  00090	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@PyObject_A:

; 227  :     }
; 228  : 
; 229  :     if (fd == -1 && PyErr_Occurred())

  00095	83 fb ff	 cmp	 ebx, -1
  00098	75 17		 jne	 SHORT $LN2@PyObject_A
  0009a	e8 00 00 00 00	 call	 PyErr_Occurred
  0009f	48 85 c0	 test	 rax, rax
  000a2	74 11		 je	 SHORT $LN12@PyObject_A

; 226  :         return -1;

  000a4	0b c3		 or	 eax, ebx

; 238  : }

  000a6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ab	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000af	5f		 pop	 rdi
  000b0	c3		 ret	 0
$LN2@PyObject_A:

; 230  :         return -1;
; 231  :     if (fd < 0) {

  000b1	85 db		 test	 ebx, ebx
  000b3	79 24		 jns	 SHORT $LN1@PyObject_A
$LN12@PyObject_A:

; 232  :         PyErr_Format(PyExc_ValueError,
; 233  :                      "file descriptor cannot be a negative integer (%i)",
; 234  :                      fd);

  000b5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@GPILBMJA@file?5descriptor?5cannot?5be?5a?5nega@
  000c3	44 8b c3	 mov	 r8d, ebx
  000c6	e8 00 00 00 00	 call	 PyErr_Format
  000cb	83 c8 ff	 or	 eax, -1

; 238  : }

  000ce	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000d3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d7	5f		 pop	 rdi
  000d8	c3		 ret	 0
$LN1@PyObject_A:

; 235  :         return -1;
; 236  :     }
; 237  :     return fd;

  000d9	8b c3		 mov	 eax, ebx

; 238  : }

  000db	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000e0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e4	5f		 pop	 rdi
  000e5	c3		 ret	 0
$LN5@PyObject_A:

; 215  :         }
; 216  :         else {
; 217  :             PyErr_SetString(PyExc_TypeError,
; 218  :                             "fileno() returned a non-integer");

  000e6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@GFOJBACD@fileno?$CI?$CJ?5returned?5a?5non?9integer?$AA@
  000f4	e8 00 00 00 00	 call	 PyErr_SetString

; 219  :             Py_DECREF(fno);

  000f9	48 8b cf	 mov	 rcx, rdi
  000fc	e8 00 00 00 00	 call	 _Py_DecRef

; 226  :         return -1;

  00101	83 c8 ff	 or	 eax, -1

; 238  : }

  00104	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00109	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0010d	5f		 pop	 rdi
  0010e	c3		 ret	 0
$LN7@PyObject_A:

; 220  :             return -1;
; 221  :         }
; 222  :     }
; 223  :     else {
; 224  :         PyErr_SetString(PyExc_TypeError,
; 225  :                         "argument must be an int, or have a fileno() method.");

  0010f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@JCAJMKKB@argument?5must?5be?5an?5int?0?5or?5have@
  0011d	e8 00 00 00 00	 call	 PyErr_SetString
$LN13@PyObject_A:

; 226  :         return -1;

  00122	83 c8 ff	 or	 eax, -1

; 238  : }

  00125	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0012a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0012e	5f		 pop	 rdi
  0012f	c3		 ret	 0
PyObject_AsFileDescriptor ENDP
_TEXT	ENDS
PUBLIC	Py_UniversalNewlineFgets
EXTRN	__imp_ungetc:PROC
EXTRN	__imp_getc:PROC
EXTRN	__imp__errno:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_UniversalNewlineFgets DD imagerel $LN21
	DD	imagerel $LN21+204
	DD	imagerel $unwind$Py_UniversalNewlineFgets
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_UniversalNewlineFgets DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0d0143218H
	DD	07010c012H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT Py_UniversalNewlineFgets
_TEXT	SEGMENT
buf$ = 64
n$ = 72
stream$ = 80
fobj$ = 88
Py_UniversalNewlineFgets PROC				; COMDAT

; 256  : {

$LN21:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 257  :     char *p = buf;
; 258  :     int c;
; 259  :     int newlinetypes = 0;
; 260  :     int skipnextlf = 0;

  00018	45 33 ed	 xor	 r13d, r13d
  0001b	49 8b e8	 mov	 rbp, r8
  0001e	8b da		 mov	 ebx, edx
  00020	4c 8b e1	 mov	 r12, rcx
  00023	48 8b f1	 mov	 rsi, rcx
  00026	41 8b fd	 mov	 edi, r13d

; 261  : 
; 262  :     if (fobj) {

  00029	4d 85 c9	 test	 r9, r9
  0002c	74 10		 je	 SHORT $LN14@Py_Univers

; 263  :         errno = ENXIO;          /* What can you do... */

  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00034	c7 00 06 00 00
	00		 mov	 DWORD PTR [rax], 6

; 264  :         return NULL;

  0003a	33 c0		 xor	 eax, eax
  0003c	eb 75		 jmp	 SHORT $LN1@Py_Univers
$LN14@Py_Univers:

; 265  :     }
; 266  :     FLOCKFILE(stream);
; 267  :     c = 'x'; /* Shut up gcc warning */
; 268  :     while (--n > 0 && (c = GETC(stream)) != EOF ) {

  0003e	ff cb		 dec	 ebx
  00040	85 db		 test	 ebx, ebx
  00042	7e 45		 jle	 SHORT $LN20@Py_Univers
$LL13@Py_Univers:
  00044	48 8b cd	 mov	 rcx, rbp
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  0004d	83 f8 ff	 cmp	 eax, -1
  00050	74 37		 je	 SHORT $LN20@Py_Univers

; 269  :         if (skipnextlf ) {

  00052	85 ff		 test	 edi, edi
  00054	74 16		 je	 SHORT $LN10@Py_Univers

; 270  :             skipnextlf = 0;

  00056	41 8b fd	 mov	 edi, r13d

; 271  :             if (c == '\n') {

  00059	83 f8 0a	 cmp	 eax, 10
  0005c	75 0e		 jne	 SHORT $LN10@Py_Univers

; 272  :                 /* Seeing a \n here with skipnextlf true
; 273  :                 ** means we saw a \r before.
; 274  :                 */
; 275  :                 newlinetypes |= NEWLINE_CRLF;
; 276  :                 c = GETC(stream);

  0005e	48 8b cd	 mov	 rcx, rbp
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc

; 277  :                 if (c == EOF) break;

  00067	83 f8 ff	 cmp	 eax, -1
  0006a	74 1d		 je	 SHORT $LN20@Py_Univers
$LN10@Py_Univers:

; 278  :             } else {
; 279  :                 /*
; 280  :                 ** Note that c == EOF also brings us here,
; 281  :                 ** so we're okay if the last char in the file
; 282  :                 ** is a CR.
; 283  :                 */
; 284  :                 newlinetypes |= NEWLINE_CR;
; 285  :             }
; 286  :         }
; 287  :         if (c == '\r') {

  0006c	83 f8 0d	 cmp	 eax, 13
  0006f	75 08		 jne	 SHORT $LN7@Py_Univers

; 288  :             /* A \r is translated into a \n, and we skip
; 289  :             ** an adjacent \n, if any. We don't set the
; 290  :             ** newlinetypes flag until we've seen the next char.
; 291  :             */
; 292  :             skipnextlf = 1;

  00071	8d 78 f4	 lea	 edi, QWORD PTR [rax-12]

; 293  :             c = '\n';

  00074	b8 0a 00 00 00	 mov	 eax, 10
$LN7@Py_Univers:

; 294  :         } else if ( c == '\n') {
; 295  :             newlinetypes |= NEWLINE_LF;
; 296  :         }
; 297  :         *p++ = c;

  00079	88 06		 mov	 BYTE PTR [rsi], al
  0007b	48 ff c6	 inc	 rsi

; 298  :         if (c == '\n') break;

  0007e	83 f8 0a	 cmp	 eax, 10
  00081	74 06		 je	 SHORT $LN20@Py_Univers

; 265  :     }
; 266  :     FLOCKFILE(stream);
; 267  :     c = 'x'; /* Shut up gcc warning */
; 268  :     while (--n > 0 && (c = GETC(stream)) != EOF ) {

  00083	ff cb		 dec	 ebx
  00085	85 db		 test	 ebx, ebx
  00087	7f bb		 jg	 SHORT $LL13@Py_Univers
$LN20@Py_Univers:

; 299  :     }
; 300  :     /* if ( c == EOF && skipnextlf )
; 301  :         newlinetypes |= NEWLINE_CR; */
; 302  :     FUNLOCKFILE(stream);
; 303  :     *p = '\0';

  00089	44 88 2e	 mov	 BYTE PTR [rsi], r13b

; 304  :     if ( skipnextlf ) {

  0008c	85 ff		 test	 edi, edi
  0008e	74 19		 je	 SHORT $LN2@Py_Univers

; 305  :         /* If we have no file object we cannot save the
; 306  :         ** skipnextlf flag. We have to readahead, which
; 307  :         ** will cause a pause if we're reading from an
; 308  :         ** interactive stream, but that is very unlikely
; 309  :         ** unless we're doing something silly like
; 310  :         ** exec(open("/dev/tty").read()).
; 311  :         */
; 312  :         c = GETC(stream);

  00090	48 8b cd	 mov	 rcx, rbp
  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc

; 313  :         if ( c != '\n' )

  00099	83 f8 0a	 cmp	 eax, 10
  0009c	74 0b		 je	 SHORT $LN2@Py_Univers

; 314  :             ungetc(c, stream);

  0009e	48 8b d5	 mov	 rdx, rbp
  000a1	8b c8		 mov	 ecx, eax
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ungetc
$LN2@Py_Univers:

; 315  :     }
; 316  :     if (p == buf)

  000a9	49 3b f4	 cmp	 rsi, r12
  000ac	4d 0f 44 e5	 cmove	 r12, r13
  000b0	49 8b c4	 mov	 rax, r12
$LN1@Py_Univers:

; 317  :         return NULL;
; 318  :     return buf;
; 319  : }

  000b3	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b8	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000bd	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000c2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c6	41 5d		 pop	 r13
  000c8	41 5c		 pop	 r12
  000ca	5f		 pop	 rdi
  000cb	c3		 ret	 0
Py_UniversalNewlineFgets ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stdprinter_new DD imagerel stdprinter_new
	DD	imagerel stdprinter_new+32
	DD	imagerel $unwind$stdprinter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stdprinter_new DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT stdprinter_new
_TEXT	SEGMENT
type$ = 48
args$ = 56
kews$ = 64
stdprinter_new PROC					; COMDAT

; 333  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8b c1	 mov	 rax, rcx

; 334  :     PyStdPrinter_Object *self;
; 335  : 
; 336  :     assert(type != NULL && type->tp_alloc != NULL);
; 337  : 
; 338  :     self = (PyStdPrinter_Object *) type->tp_alloc(type, 0);

  00007	33 d2		 xor	 edx, edx
  00009	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]

; 339  :     if (self != NULL) {

  0000f	48 85 c0	 test	 rax, rax
  00012	74 07		 je	 SHORT $LN4@stdprinter

; 340  :         self->fd = -1;

  00014	c7 40 60 ff ff
	ff ff		 mov	 DWORD PTR [rax+96], -1
$LN4@stdprinter:

; 341  :     }
; 342  : 
; 343  :     return (PyObject *) self;
; 344  : }

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
stdprinter_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@HCBCJMNJ@cannot?5create?5?8stderrprinter?8?5in@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$stdprinter_init DD imagerel stdprinter_init
	DD	imagerel stdprinter_init+31
	DD	imagerel $unwind$stdprinter_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stdprinter_init DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CI@HCBCJMNJ@cannot?5create?5?8stderrprinter?8?5in@
CONST	SEGMENT
??_C@_0CI@HCBCJMNJ@cannot?5create?5?8stderrprinter?8?5in@ DB 'cannot crea'
	DB	'te ''stderrprinter'' instances', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stdprinter_init
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwds$ = 64
stdprinter_init PROC					; COMDAT

; 348  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 349  :     PyErr_SetString(PyExc_TypeError,
; 350  :                     "cannot create 'stderrprinter' instances");

  00004	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0000b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@HCBCJMNJ@cannot?5create?5?8stderrprinter?8?5in@
  00012	e8 00 00 00 00	 call	 PyErr_SetString

; 351  :     return -1;

  00017	83 c8 ff	 or	 eax, -1

; 352  : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
stdprinter_init ENDP
_TEXT	ENDS
PUBLIC	PyFile_NewStdPrinter
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	__imp_fileno:PROC
EXTRN	__imp___iob_func:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFile_NewStdPrinter DD imagerel $LN7
	DD	imagerel $LN7+98
	DD	imagerel $unwind$PyFile_NewStdPrinter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFile_NewStdPrinter DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyFile_NewStdPrinter
_TEXT	SEGMENT
fd$ = 48
PyFile_NewStdPrinter PROC				; COMDAT

; 356  : {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	8b d9		 mov	 ebx, ecx

; 357  :     PyStdPrinter_Object *self;
; 358  : 
; 359  :     if (fd != fileno(stdout) && fd != fileno(stderr)) {

  00008	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0000e	48 8d 48 30	 lea	 rcx, QWORD PTR [rax+48]
  00012	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  00018	3b d8		 cmp	 ebx, eax
  0001a	74 1c		 je	 SHORT $LN2@PyFile_New
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00022	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  0002c	3b d8		 cmp	 ebx, eax
  0002e	74 08		 je	 SHORT $LN2@PyFile_New

; 360  :         /* not enough infrastructure for PyErr_BadInternalCall() */
; 361  :         return NULL;

  00030	33 c0		 xor	 eax, eax

; 368  :     }
; 369  :     return (PyObject*)self;
; 370  : }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5b		 pop	 rbx
  00037	c3		 ret	 0
$LN2@PyFile_New:

; 362  :     }
; 363  : 
; 364  :     self = PyObject_New(PyStdPrinter_Object,
; 365  :                         &PyStdPrinter_Type);

  00038	e8 00 00 00 00	 call	 _Py_PXCTX
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyStdPrinter_Type
  00044	85 c0		 test	 eax, eax
  00046	74 07		 je	 SHORT $LN5@PyFile_New
  00048	e8 00 00 00 00	 call	 _PxObject_New
  0004d	eb 05		 jmp	 SHORT $LN6@PyFile_New
$LN5@PyFile_New:
  0004f	e8 00 00 00 00	 call	 _PyObject_New
$LN6@PyFile_New:

; 366  :     if (self != NULL) {

  00054	48 85 c0	 test	 rax, rax
  00057	74 03		 je	 SHORT $LN1@PyFile_New

; 367  :         self->fd = fd;

  00059	89 58 60	 mov	 DWORD PTR [rax+96], ebx
$LN1@PyFile_New:

; 368  :     }
; 369  :     return (PyObject*)self;
; 370  : }

  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5b		 pop	 rbx
  00061	c3		 ret	 0
PyFile_NewStdPrinter ENDP
_TEXT	ENDS
PUBLIC	??_C@_01LKDEMHDF@s?$AA@				; `string'
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyErr_SetFromErrno:PROC
EXTRN	PyExc_IOError:QWORD
EXTRN	PyEval_RestoreThread:PROC
EXTRN	__imp_write:PROC
EXTRN	PyEval_SaveThread:PROC
EXTRN	_PyArg_ParseTuple_SizeT:PROC
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stdprinter_write DD imagerel stdprinter_write
	DD	imagerel stdprinter_write+138
	DD	imagerel $unwind$stdprinter_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$stdprinter_write DD imagerel stdprinter_write+138
	DD	imagerel stdprinter_write+232
	DD	imagerel $chain$1$stdprinter_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$stdprinter_write DD imagerel stdprinter_write+232
	DD	imagerel stdprinter_write+273
	DD	imagerel $chain$2$stdprinter_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$stdprinter_write DD imagerel stdprinter_write+273
	DD	imagerel stdprinter_write+298
	DD	imagerel $chain$4$stdprinter_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$stdprinter_write DD imagerel stdprinter_write+298
	DD	imagerel stdprinter_write+317
	DD	imagerel $chain$6$stdprinter_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$stdprinter_write DD 020021H
	DD	0a7400H
	DD	imagerel stdprinter_write
	DD	imagerel stdprinter_write+138
	DD	imagerel $unwind$stdprinter_write
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$stdprinter_write DD 020021H
	DD	0a7400H
	DD	imagerel stdprinter_write
	DD	imagerel stdprinter_write+138
	DD	imagerel $unwind$stdprinter_write
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$stdprinter_write DD 020021H
	DD	0a7400H
	DD	imagerel stdprinter_write
	DD	imagerel stdprinter_write+138
	DD	imagerel $unwind$stdprinter_write
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$stdprinter_write DD 040a21H
	DD	0a740aH
	DD	093405H
	DD	imagerel stdprinter_write
	DD	imagerel stdprinter_write+138
	DD	imagerel $unwind$stdprinter_write
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stdprinter_write DD 020601H
	DD	060025206H
xdata	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s?$AA@
CONST	SEGMENT
??_C@_01LKDEMHDF@s?$AA@ DB 's', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\fileobject.c
CONST	ENDS
;	COMDAT stdprinter_write
_TEXT	SEGMENT
c$ = 64
self$ = 64
args$ = 72
stdprinter_write PROC					; COMDAT

; 374  : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 375  :     char *c;
; 376  :     Py_ssize_t n;
; 377  : 
; 378  :     if (self->fd < 0) {

  00006	83 79 60 00	 cmp	 DWORD PTR [rcx+96], 0
  0000a	48 8b c2	 mov	 rax, rdx
  0000d	48 8b f1	 mov	 rsi, rcx
  00010	7d 52		 jge	 SHORT $LN5@stdprinter@2

; 379  :         /* fd might be invalid on Windows
; 380  :          * I can't raise an exception here. It may lead to an
; 381  :          * unlimited recursion in the case stderr is invalid.
; 382  :          */
; 383  :         Py_RETURN_NONE;

  00012	e8 00 00 00 00	 call	 _Py_PXCTX
  00017	85 c0		 test	 eax, eax
  00019	75 3c		 jne	 SHORT $LN9@stdprinter@2
  0001b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00030	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00036	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00043	85 c0		 test	 eax, eax
  00045	75 09		 jne	 SHORT $LN8@stdprinter@2
  00047	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0004e	74 07		 je	 SHORT $LN9@stdprinter@2
$LN8@stdprinter@2:
  00050	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@stdprinter@2:
  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 410  : }

  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5e		 pop	 rsi
  00063	c3		 ret	 0
$LN5@stdprinter@2:

; 384  :     }
; 385  : 
; 386  :     if (!PyArg_ParseTuple(args, "s", &c)) {

  00064	4c 8d 44 24 40	 lea	 r8, QWORD PTR c$[rsp]
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
  00070	48 8b c8	 mov	 rcx, rax
  00073	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00078	85 c0		 test	 eax, eax
  0007a	75 08		 jne	 SHORT $LN4@stdprinter@2

; 387  :         return NULL;

  0007c	33 c0		 xor	 eax, eax

; 410  : }

  0007e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00082	5e		 pop	 rsi
  00083	c3		 ret	 0
$LN4@stdprinter@2:

; 388  :     }
; 389  :     n = strlen(c);

  00084	48 83 c9 ff	 or	 rcx, -1
  00088	33 c0		 xor	 eax, eax
  0008a	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  0008f	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00094	48 8b 7c 24 40	 mov	 rdi, QWORD PTR c$[rsp]
  00099	f2 ae		 repne scasb
  0009b	48 f7 d1	 not	 rcx
  0009e	48 8d 79 ff	 lea	 rdi, QWORD PTR [rcx-1]

; 390  : 
; 391  :     Py_BEGIN_ALLOW_THREADS

  000a2	e8 00 00 00 00	 call	 PyEval_SaveThread
  000a7	48 8b d8	 mov	 rbx, rax

; 392  :     errno = 0;

  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000b0	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 393  : #if defined(MS_WIN64) || defined(MS_WINDOWS)
; 394  :     if (n > INT_MAX)
; 395  :         n = INT_MAX;
; 396  :     n = write(self->fd, c, (int)n);

  000b6	48 8b 54 24 40	 mov	 rdx, QWORD PTR c$[rsp]
  000bb	8b 4e 60	 mov	 ecx, DWORD PTR [rsi+96]
  000be	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000c3	48 3b f8	 cmp	 rdi, rax
  000c6	48 0f 4f f8	 cmovg	 rdi, rax
  000ca	44 8b c7	 mov	 r8d, edi
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 397  : #else
; 398  :     n = write(self->fd, c, n);
; 399  : #endif
; 400  :     Py_END_ALLOW_THREADS

  000d3	48 8b cb	 mov	 rcx, rbx
  000d6	48 63 f8	 movsxd	 rdi, eax
  000d9	e8 00 00 00 00	 call	 PyEval_RestoreThread
  000de	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]

; 401  : 
; 402  :     if (n < 0) {

  000e3	48 85 ff	 test	 rdi, rdi
  000e6	79 42		 jns	 SHORT $LN2@stdprinter@2

; 403  :         if (errno == EAGAIN)

  000e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000ee	83 38 0b	 cmp	 DWORD PTR [rax], 11
  000f1	75 1e		 jne	 SHORT $LN1@stdprinter@2

; 404  :             Py_RETURN_NONE;

  000f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000fa	e8 00 00 00 00	 call	 _Py_IncRef
  000ff	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  00104	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 410  : }

  0010b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010f	5e		 pop	 rsi
  00110	c3		 ret	 0
$LN1@stdprinter@2:

; 405  :         PyErr_SetFromErrno(PyExc_IOError);

  00111	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00118	e8 00 00 00 00	 call	 PyErr_SetFromErrno
  0011d	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 406  :         return NULL;

  00122	33 c0		 xor	 eax, eax

; 410  : }

  00124	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00128	5e		 pop	 rsi
  00129	c3		 ret	 0
$LN2@stdprinter@2:

; 407  :     }
; 408  : 
; 409  :     return PyLong_FromSsize_t(n);

  0012a	48 8b cf	 mov	 rcx, rdi
  0012d	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00132	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 410  : }

  00137	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0013b	5e		 pop	 rsi
  0013c	c3		 ret	 0
stdprinter_write ENDP
_TEXT	ENDS
EXTRN	PyLong_FromLong:PROC
; Function compile flags: /Ogtpy
;	COMDAT stdprinter_fileno
_TEXT	SEGMENT
self$ = 8
stdprinter_fileno PROC					; COMDAT

; 415  :     return PyLong_FromLong((long) self->fd);

  00000	8b 49 60	 mov	 ecx, DWORD PTR [rcx+96]

; 416  : }

  00003	e9 00 00 00 00	 jmp	 PyLong_FromLong
stdprinter_fileno ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@OAPBOME@?$DMstdprinter?$CIfd?$DN?$CFd?$CJ?5object?5at?50x?$CF@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT ??_C@_0CD@OAPBOME@?$DMstdprinter?$CIfd?$DN?$CFd?$CJ?5object?5at?50x?$CF@
CONST	SEGMENT
??_C@_0CD@OAPBOME@?$DMstdprinter?$CIfd?$DN?$CFd?$CJ?5object?5at?50x?$CF@ DB '<'
	DB	'stdprinter(fd=%d) object at 0x%x>', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stdprinter_repr
_TEXT	SEGMENT
self$ = 8
stdprinter_repr PROC					; COMDAT

; 421  :     return PyUnicode_FromFormat("<stdprinter(fd=%d) object at 0x%x>",
; 422  :                                 self->fd, self);

  00000	8b 51 60	 mov	 edx, DWORD PTR [rcx+96]
  00003	4c 8b c1	 mov	 r8, rcx
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@OAPBOME@?$DMstdprinter?$CIfd?$DN?$CFd?$CJ?5object?5at?50x?$CF@

; 423  : }

  0000d	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
stdprinter_repr ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stdprinter_noop DD imagerel stdprinter_noop
	DD	imagerel stdprinter_noop+100
	DD	imagerel $unwind$stdprinter_noop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stdprinter_noop DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\fileobject.c
xdata	ENDS
;	COMDAT stdprinter_noop
_TEXT	SEGMENT
self$ = 64
stdprinter_noop PROC					; COMDAT

; 427  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 428  :     Py_RETURN_NONE;

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	75 48		 jne	 SHORT $LN7@stdprinter@3
  0000f	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00024	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002a	4c 8b cb	 mov	 r9, rbx
  0002d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	75 09		 jne	 SHORT $LN3@stdprinter@3
  0003e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00045	74 07		 je	 SHORT $LN9@stdprinter@3
$LN3@stdprinter@3:
  00047	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@stdprinter@3:
  0004e	48 8b c3	 mov	 rax, rbx

; 429  : }

  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
$LN7@stdprinter@3:

; 428  :     Py_RETURN_NONE;

  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 429  : }

  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
stdprinter_noop ENDP
_TEXT	ENDS
EXTRN	PyBool_FromLong:PROC
EXTRN	__imp_isatty:PROC
EXTRN	_Py_FalseStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stdprinter_isatty DD imagerel stdprinter_isatty
	DD	imagerel stdprinter_isatty+146
	DD	imagerel $unwind$stdprinter_isatty
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stdprinter_isatty DD 046601H
	DD	087466H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\fileobject.c
xdata	ENDS
;	COMDAT stdprinter_isatty
_TEXT	SEGMENT
self$ = 64
stdprinter_isatty PROC					; COMDAT

; 433  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 434  :     long res;
; 435  :     if (self->fd < 0) {

  00006	83 79 60 00	 cmp	 DWORD PTR [rcx+96], 0
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	7d 52		 jge	 SHORT $LN1@stdprinter@4

; 436  :         Py_RETURN_FALSE;

  0000f	e8 00 00 00 00	 call	 _Py_PXCTX
  00014	85 c0		 test	 eax, eax
  00016	75 3c		 jne	 SHORT $LN5@stdprinter@4
  00018	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00033	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00040	85 c0		 test	 eax, eax
  00042	75 09		 jne	 SHORT $LN4@stdprinter@4
  00044	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  0004b	74 07		 je	 SHORT $LN5@stdprinter@4
$LN4@stdprinter@4:
  0004d	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN5@stdprinter@4:
  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 444  : }

  0005b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005f	5b		 pop	 rbx
  00060	c3		 ret	 0
$LN1@stdprinter@4:
  00061	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 437  :     }
; 438  : 
; 439  :     Py_BEGIN_ALLOW_THREADS

  00066	e8 00 00 00 00	 call	 PyEval_SaveThread

; 440  :     res = isatty(self->fd);

  0006b	8b 4b 60	 mov	 ecx, DWORD PTR [rbx+96]
  0006e	48 8b f8	 mov	 rdi, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isatty

; 441  :     Py_END_ALLOW_THREADS

  00077	48 8b cf	 mov	 rcx, rdi
  0007a	8b d8		 mov	 ebx, eax
  0007c	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 442  : 
; 443  :     return PyBool_FromLong(res);

  00081	8b cb		 mov	 ecx, ebx
  00083	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 444  : }

  00088	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008c	5b		 pop	 rbx
  0008d	e9 00 00 00 00	 jmp	 PyBool_FromLong
stdprinter_isatty ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$get_closed DD imagerel get_closed
	DD	imagerel get_closed+100
	DD	imagerel $unwind$get_closed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_closed DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\fileobject.c
xdata	ENDS
;	COMDAT get_closed
_TEXT	SEGMENT
self$ = 64
closure$ = 72
get_closed PROC						; COMDAT

; 457  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 458  :     Py_INCREF(Py_False);

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	75 48		 jne	 SHORT $LN7@get_closed
  0000f	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00024	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002a	4c 8b cb	 mov	 r9, rbx
  0002d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	75 09		 jne	 SHORT $LN3@get_closed
  0003e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00045	74 07		 je	 SHORT $LN9@get_closed
$LN3@get_closed:
  00047	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN9@get_closed:

; 459  :     return Py_False;

  0004e	48 8b c3	 mov	 rax, rbx

; 460  : }

  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
$LN7@get_closed:

; 459  :     return Py_False;

  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 460  : }

  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
get_closed ENDP
_TEXT	ENDS
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT get_mode
_TEXT	SEGMENT
self$ = 8
closure$ = 16
get_mode PROC						; COMDAT

; 465  :     return PyUnicode_FromString("w");

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01NOFIACDB@w?$AA@

; 466  : }

  00007	e9 00 00 00 00	 jmp	 PyUnicode_FromString
get_mode ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$get_encoding DD imagerel get_encoding
	DD	imagerel get_encoding+100
	DD	imagerel $unwind$get_encoding
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_encoding DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\fileobject.c
xdata	ENDS
;	COMDAT get_encoding
_TEXT	SEGMENT
self$ = 64
closure$ = 72
get_encoding PROC					; COMDAT

; 470  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 471  :     Py_RETURN_NONE;

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	75 48		 jne	 SHORT $LN7@get_encodi
  0000f	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00024	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002a	4c 8b cb	 mov	 r9, rbx
  0002d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	75 09		 jne	 SHORT $LN3@get_encodi
  0003e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00045	74 07		 je	 SHORT $LN9@get_encodi
$LN3@get_encodi:
  00047	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@get_encodi:
  0004e	48 8b c3	 mov	 rax, rbx

; 472  : }

  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
$LN7@get_encodi:

; 471  :     Py_RETURN_NONE;

  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 472  : }

  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
get_encoding ENDP
_TEXT	ENDS
END
