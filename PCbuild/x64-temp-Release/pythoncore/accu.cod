; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	PyUnicode_Join:PROC
EXTRN	PyUnicode_FromStringAndSize:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\accu.c
pdata	SEGMENT
$pdata$join_list_unicode DD imagerel join_list_unicode
	DD	imagerel join_list_unicode+66
	DD	imagerel $unwind$join_list_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$join_list_unicode DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT join_list_unicode
_TEXT	SEGMENT
lst$ = 48
join_list_unicode PROC					; COMDAT

; 8    : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 9    :     /* return ''.join(lst) */
; 10   :     PyObject *sep, *ret;
; 11   :     sep = PyUnicode_FromStringAndSize("", 0);

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00014	33 d2		 xor	 edx, edx
  00016	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize

; 12   :     ret = PyUnicode_Join(sep, lst);

  0001b	48 8b d3	 mov	 rdx, rbx
  0001e	48 8b c8	 mov	 rcx, rax
  00021	48 8b f8	 mov	 rdi, rax
  00024	e8 00 00 00 00	 call	 PyUnicode_Join

; 13   :     Py_DECREF(sep);

  00029	48 8b cf	 mov	 rcx, rdi
  0002c	48 8b d8	 mov	 rbx, rax
  0002f	e8 00 00 00 00	 call	 _Py_DecRef

; 14   :     return ret;

  00034	48 8b c3	 mov	 rax, rbx

; 15   : }

  00037	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
join_list_unicode ENDP
_TEXT	ENDS
PUBLIC	_PyAccu_Init
EXTRN	PyList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyAccu_Init DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$_PyAccu_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyAccu_Init DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyAccu_Init
_TEXT	SEGMENT
acc$ = 48
_PyAccu_Init PROC					; COMDAT

; 19   : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 20   :     /* Lazily allocated */
; 21   :     acc->large = NULL;

  00009	48 c7 01 00 00
	00 00		 mov	 QWORD PTR [rcx], 0

; 22   :     acc->small = PyList_New(0);

  00010	33 c9		 xor	 ecx, ecx
  00012	e8 00 00 00 00	 call	 PyList_New
  00017	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 23   :     if (acc->small == NULL)

  0001b	48 f7 d8	 neg	 rax
  0001e	1b c0		 sbb	 eax, eax
  00020	f7 d8		 neg	 eax
  00022	ff c8		 dec	 eax

; 24   :         return -1;
; 25   :     return 0;
; 26   : }

  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5b		 pop	 rbx
  00029	c3		 ret	 0
_PyAccu_Init ENDP
_TEXT	ENDS
EXTRN	PyList_Append:PROC
EXTRN	PyList_SetSlice:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$flush_accumulator DD imagerel flush_accumulator
	DD	imagerel flush_accumulator+69
	DD	imagerel $unwind$flush_accumulator
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$flush_accumulator DD imagerel flush_accumulator+69
	DD	imagerel flush_accumulator+135
	DD	imagerel $chain$0$flush_accumulator
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$flush_accumulator DD imagerel flush_accumulator+135
	DD	imagerel flush_accumulator+174
	DD	imagerel $chain$2$flush_accumulator
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$flush_accumulator DD imagerel flush_accumulator+174
	DD	imagerel flush_accumulator+187
	DD	imagerel $chain$3$flush_accumulator
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$flush_accumulator DD 021H
	DD	imagerel flush_accumulator
	DD	imagerel flush_accumulator+69
	DD	imagerel $unwind$flush_accumulator
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$flush_accumulator DD 020021H
	DD	067400H
	DD	imagerel flush_accumulator
	DD	imagerel flush_accumulator+69
	DD	imagerel $unwind$flush_accumulator
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$flush_accumulator DD 020521H
	DD	067405H
	DD	imagerel flush_accumulator
	DD	imagerel flush_accumulator+69
	DD	imagerel $unwind$flush_accumulator
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$flush_accumulator DD 040a01H
	DD	07340aH
	DD	06006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT flush_accumulator
_TEXT	SEGMENT
acc$ = 48
flush_accumulator PROC					; COMDAT

; 30   : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 31   :     Py_ssize_t nsmall = PyList_GET_SIZE(acc->small);

  0000a	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	48 8b 70 60	 mov	 rsi, QWORD PTR [rax+96]

; 32   :     if (nsmall) {

  00015	48 85 f6	 test	 rsi, rsi
  00018	0f 84 90 00 00
	00		 je	 $LN5@flush_accu

; 33   :         int ret;
; 34   :         PyObject *joined;
; 35   :         if (acc->large == NULL) {

  0001e	48 83 39 00	 cmp	 QWORD PTR [rcx], 0
  00022	75 1d		 jne	 SHORT $LN3@flush_accu

; 36   :             acc->large = PyList_New(0);

  00024	33 c9		 xor	 ecx, ecx
  00026	e8 00 00 00 00	 call	 PyList_New
  0002b	48 89 03	 mov	 QWORD PTR [rbx], rax

; 37   :             if (acc->large == NULL)

  0002e	48 85 c0	 test	 rax, rax
  00031	75 0e		 jne	 SHORT $LN3@flush_accu

; 38   :                 return -1;

  00033	83 c8 ff	 or	 eax, -1

; 52   : }

  00036	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5e		 pop	 rsi
  00040	c3		 ret	 0
$LN3@flush_accu:

; 39   :         }
; 40   :         joined = join_list_unicode(acc->small);

  00041	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00045	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0004a	e8 00 00 00 00	 call	 join_list_unicode
  0004f	48 8b f8	 mov	 rdi, rax

; 41   :         if (joined == NULL)

  00052	48 85 c0	 test	 rax, rax

; 42   :             return -1;

  00055	74 1d		 je	 SHORT $LN9@flush_accu

; 43   :         if (PyList_SetSlice(acc->small, 0, nsmall, NULL)) {

  00057	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  0005b	45 33 c9	 xor	 r9d, r9d
  0005e	4c 8b c6	 mov	 r8, rsi
  00061	33 d2		 xor	 edx, edx
  00063	e8 00 00 00 00	 call	 PyList_SetSlice
  00068	85 c0		 test	 eax, eax
  0006a	74 1b		 je	 SHORT $LN1@flush_accu

; 44   :             Py_DECREF(joined);

  0006c	48 8b cf	 mov	 rcx, rdi
  0006f	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@flush_accu:

; 45   :             return -1;

  00074	83 c8 ff	 or	 eax, -1
  00077	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 52   : }

  0007c	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00081	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00085	5e		 pop	 rsi
  00086	c3		 ret	 0
$LN1@flush_accu:

; 46   :         }
; 47   :         ret = PyList_Append(acc->large, joined);

  00087	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0008a	48 8b d7	 mov	 rdx, rdi
  0008d	e8 00 00 00 00	 call	 PyList_Append

; 48   :         Py_DECREF(joined);

  00092	48 8b cf	 mov	 rcx, rdi
  00095	8b d8		 mov	 ebx, eax
  00097	e8 00 00 00 00	 call	 _Py_DecRef
  0009c	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 49   :         return ret;

  000a1	8b c3		 mov	 eax, ebx

; 52   : }

  000a3	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000a8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ac	5e		 pop	 rsi
  000ad	c3		 ret	 0
$LN5@flush_accu:

; 50   :     }
; 51   :     return 0;

  000ae	33 c0		 xor	 eax, eax

; 52   : }

  000b0	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000b5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b9	5e		 pop	 rsi
  000ba	c3		 ret	 0
flush_accumulator ENDP
_TEXT	ENDS
PUBLIC	_PyAccu_Accumulate
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyAccu_Accumulate DD imagerel $LN5
	DD	imagerel $LN5+66
	DD	imagerel $unwind$_PyAccu_Accumulate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyAccu_Accumulate DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyAccu_Accumulate
_TEXT	SEGMENT
acc$ = 48
unicode$ = 56
_PyAccu_Accumulate PROC					; COMDAT

; 56   : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 57   :     Py_ssize_t nsmall;
; 58   :     assert(PyUnicode_Check(unicode));
; 59   : 
; 60   :     if (PyList_Append(acc->small, unicode))

  00009	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0000d	e8 00 00 00 00	 call	 PyList_Append
  00012	85 c0		 test	 eax, eax
  00014	74 09		 je	 SHORT $LN2@PyAccu_Acc

; 61   :         return -1;

  00016	83 c8 ff	 or	 eax, -1

; 73   : }

  00019	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001d	5b		 pop	 rbx
  0001e	c3		 ret	 0
$LN2@PyAccu_Acc:

; 62   :     nsmall = PyList_GET_SIZE(acc->small);
; 63   :     /* Each item in a list of unicode objects has an overhead (in 64-bit
; 64   :      * builds) of:
; 65   :      *   - 8 bytes for the list slot
; 66   :      *   - 56 bytes for the header of the unicode object
; 67   :      * that is, 64 bytes.  100000 such objects waste more than 6MB
; 68   :      * compared to a single concatenated string.
; 69   :      */
; 70   :     if (nsmall < 100000)

  0001f	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00023	48 81 78 60 a0
	86 01 00	 cmp	 QWORD PTR [rax+96], 100000 ; 000186a0H
  0002b	7d 08		 jge	 SHORT $LN1@PyAccu_Acc

; 71   :         return 0;

  0002d	33 c0		 xor	 eax, eax

; 73   : }

  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5b		 pop	 rbx
  00034	c3		 ret	 0
$LN1@PyAccu_Acc:

; 72   :     return flush_accumulator(acc);

  00035	48 8b cb	 mov	 rcx, rbx

; 73   : }

  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5b		 pop	 rbx
  0003d	e9 00 00 00 00	 jmp	 flush_accumulator
_PyAccu_Accumulate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@PLNFJNEA@_PyAccu_FinishAsList?$AA@	; `string'
PUBLIC	??_C@_0BC@LAMOHJF@?4?4?2Objects?2accu?4c?$AA@	; `string'
PUBLIC	_PyAccu_FinishAsList
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_PyAccu_FinishAsList DD imagerel $LN24
	DD	imagerel $LN24+6
	DD	imagerel $unwind$_PyAccu_FinishAsList
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyAccu_FinishAsList DD imagerel $LN24+6
	DD	imagerel $LN24+71
	DD	imagerel $chain$0$_PyAccu_FinishAsList
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PyAccu_FinishAsList DD imagerel $LN24+71
	DD	imagerel $LN24+194
	DD	imagerel $chain$1$_PyAccu_FinishAsList
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_PyAccu_FinishAsList DD imagerel $LN24+194
	DD	imagerel $LN24+203
	DD	imagerel $chain$2$_PyAccu_FinishAsList
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_PyAccu_FinishAsList DD imagerel $LN24+203
	DD	imagerel $LN24+287
	DD	imagerel $chain$3$_PyAccu_FinishAsList
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_PyAccu_FinishAsList DD 021H
	DD	imagerel $LN24
	DD	imagerel $LN24+6
	DD	imagerel $unwind$_PyAccu_FinishAsList
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_PyAccu_FinishAsList DD 021H
	DD	imagerel $LN24+6
	DD	imagerel $LN24+71
	DD	imagerel $chain$0$_PyAccu_FinishAsList
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PyAccu_FinishAsList DD 020521H
	DD	097405H
	DD	imagerel $LN24+6
	DD	imagerel $LN24+71
	DD	imagerel $chain$0$_PyAccu_FinishAsList
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyAccu_FinishAsList DD 020521H
	DD	086405H
	DD	imagerel $LN24
	DD	imagerel $LN24+6
	DD	imagerel $unwind$_PyAccu_FinishAsList
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyAccu_FinishAsList DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BF@PLNFJNEA@_PyAccu_FinishAsList?$AA@
CONST	SEGMENT
??_C@_0BF@PLNFJNEA@_PyAccu_FinishAsList?$AA@ DB '_PyAccu_FinishAsList', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LAMOHJF@?4?4?2Objects?2accu?4c?$AA@
CONST	SEGMENT
??_C@_0BC@LAMOHJF@?4?4?2Objects?2accu?4c?$AA@ DB '..\Objects\accu.c', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\accu.c
CONST	ENDS
;	COMDAT _PyAccu_FinishAsList
_TEXT	SEGMENT
acc$ = 64
_PyAccu_FinishAsList PROC				; COMDAT

; 77   : {

$LN24:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0000b	48 8b d9	 mov	 rbx, rcx

; 78   :     int ret;
; 79   :     PyObject *res;
; 80   : 
; 81   :     ret = flush_accumulator(acc);

  0000e	e8 00 00 00 00	 call	 flush_accumulator

; 82   :     Py_CLEAR(acc->small);

  00013	4c 8b 4b 08	 mov	 r9, QWORD PTR [rbx+8]
  00017	8b f0		 mov	 esi, eax
  00019	4d 85 c9	 test	 r9, r9
  0001c	0f 84 a0 00 00
	00		 je	 $LN8@PyAccu_Fin
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LAMOHJF@?4?4?2Objects?2accu?4c?$AA@
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@PLNFJNEA@_PyAccu_FinishAsList?$AA@
  00030	41 b8 52 00 00
	00		 mov	 r8d, 82			; 00000052H
  00036	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00043	85 c0		 test	 eax, eax
  00045	75 7b		 jne	 SHORT $LN8@PyAccu_Fin
  00047	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  0004c	48 8b 7b 08	 mov	 rdi, QWORD PTR [rbx+8]
  00050	48 c7 43 08 00
	00 00 00	 mov	 QWORD PTR [rbx+8], 0
  00058	e8 00 00 00 00	 call	 _Py_PXCTX
  0005d	85 c0		 test	 eax, eax
  0005f	75 5c		 jne	 SHORT $LN23@PyAccu_Fin
  00061	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00065	a8 20		 test	 al, 32			; 00000020H
  00067	75 4c		 jne	 SHORT $LN16@PyAccu_Fin
  00069	84 c0		 test	 al, al
  0006b	78 48		 js	 SHORT $LN16@PyAccu_Fin
  0006d	a8 02		 test	 al, 2
  0006f	75 4c		 jne	 SHORT $LN23@PyAccu_Fin
  00071	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00075	75 46		 jne	 SHORT $LN23@PyAccu_Fin
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00085	4c 8b cf	 mov	 r9, rdi
  00088	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0008e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00096	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009b	48 8b cf	 mov	 rcx, rdi
  0009e	85 c0		 test	 eax, eax
  000a0	74 07		 je	 SHORT $LN21@PyAccu_Fin
  000a2	e8 00 00 00 00	 call	 _Px_Dealloc
  000a7	eb 14		 jmp	 SHORT $LN23@PyAccu_Fin
$LN21@PyAccu_Fin:
  000a9	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000ad	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000b3	eb 08		 jmp	 SHORT $LN23@PyAccu_Fin
$LN16@PyAccu_Fin:
  000b5	48 8b cf	 mov	 rcx, rdi
  000b8	e8 00 00 00 00	 call	 Px_DecRef
$LN23@PyAccu_Fin:
  000bd	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
$LN8@PyAccu_Fin:

; 83   :     if (ret) {

  000c2	85 f6		 test	 esi, esi
  000c4	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000c9	74 44		 je	 SHORT $LN5@PyAccu_Fin

; 84   :         Py_CLEAR(acc->large);

  000cb	4c 8b 0b	 mov	 r9, QWORD PTR [rbx]
  000ce	4d 85 c9	 test	 r9, r9
  000d1	74 34		 je	 SHORT $LN3@PyAccu_Fin
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LAMOHJF@?4?4?2Objects?2accu?4c?$AA@
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@PLNFJNEA@_PyAccu_FinishAsList?$AA@
  000e1	41 b8 54 00 00
	00		 mov	 r8d, 84			; 00000054H
  000e7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ef	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f4	85 c0		 test	 eax, eax
  000f6	75 0f		 jne	 SHORT $LN3@PyAccu_Fin
  000f8	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  000fb	48 c7 03 00 00
	00 00		 mov	 QWORD PTR [rbx], 0
  00102	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyAccu_Fin:

; 85   :         return NULL;

  00107	33 c0		 xor	 eax, eax

; 89   :     return res;
; 90   : }

  00109	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010d	5b		 pop	 rbx
  0010e	c3		 ret	 0
$LN5@PyAccu_Fin:

; 86   :     }
; 87   :     res = acc->large;

  0010f	48 8b 03	 mov	 rax, QWORD PTR [rbx]

; 88   :     acc->large = NULL;

  00112	48 c7 03 00 00
	00 00		 mov	 QWORD PTR [rbx], 0

; 89   :     return res;
; 90   : }

  00119	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0011d	5b		 pop	 rbx
  0011e	c3		 ret	 0
_PyAccu_FinishAsList ENDP
_TEXT	ENDS
PUBLIC	_PyAccu_Finish
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyAccu_Finish DD imagerel $LN6
	DD	imagerel $LN6+27
	DD	imagerel $unwind$_PyAccu_Finish
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_PyAccu_Finish DD imagerel $LN6+27
	DD	imagerel $LN6+62
	DD	imagerel $chain$0$_PyAccu_Finish
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_PyAccu_Finish DD imagerel $LN6+62
	DD	imagerel $LN6+81
	DD	imagerel $chain$1$_PyAccu_Finish
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_PyAccu_Finish DD 021H
	DD	imagerel $LN6
	DD	imagerel $LN6+27
	DD	imagerel $unwind$_PyAccu_Finish
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_PyAccu_Finish DD 020521H
	DD	063405H
	DD	imagerel $LN6
	DD	imagerel $LN6+27
	DD	imagerel $unwind$_PyAccu_Finish
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyAccu_Finish DD 020601H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyAccu_Finish
_TEXT	SEGMENT
acc$ = 48
_PyAccu_Finish PROC					; COMDAT

; 94   : {

$LN6:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 95   :     PyObject *list, *res;
; 96   :     if (acc->large == NULL) {

  00006	48 83 39 00	 cmp	 QWORD PTR [rcx], 0
  0000a	75 32		 jne	 SHORT $LN3@PyAccu_Fin@2

; 97   :         list = acc->small;

  0000c	48 8b 79 08	 mov	 rdi, QWORD PTR [rcx+8]

; 98   :         acc->small = NULL;

  00010	48 c7 41 08 00
	00 00 00	 mov	 QWORD PTR [rcx+8], 0
$LN1@PyAccu_Fin@2:

; 103  :             return NULL;
; 104  :     }
; 105  :     res = join_list_unicode(list);

  00018	48 8b cf	 mov	 rcx, rdi
  0001b	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00020	e8 00 00 00 00	 call	 join_list_unicode

; 106  :     Py_DECREF(list);

  00025	48 8b cf	 mov	 rcx, rdi
  00028	48 8b d8	 mov	 rbx, rax
  0002b	e8 00 00 00 00	 call	 _Py_DecRef

; 107  :     return res;

  00030	48 8b c3	 mov	 rax, rbx
  00033	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 108  : }

  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
$LN3@PyAccu_Fin@2:

; 99   :     }
; 100  :     else {
; 101  :         list = _PyAccu_FinishAsList(acc);

  0003e	e8 00 00 00 00	 call	 _PyAccu_FinishAsList
  00043	48 8b f8	 mov	 rdi, rax

; 102  :         if (!list)

  00046	48 85 c0	 test	 rax, rax
  00049	75 cd		 jne	 SHORT $LN1@PyAccu_Fin@2

; 108  : }

  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
_PyAccu_Finish ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@FNMAMFNH@_PyAccu_Destroy?$AA@		; `string'
PUBLIC	_PyAccu_Destroy
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_PyAccu_Destroy DD imagerel $LN33
	DD	imagerel $LN33+368
	DD	imagerel $unwind$_PyAccu_Destroy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyAccu_Destroy DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BA@FNMAMFNH@_PyAccu_Destroy?$AA@
CONST	SEGMENT
??_C@_0BA@FNMAMFNH@_PyAccu_Destroy?$AA@ DB '_PyAccu_Destroy', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\accu.c
CONST	ENDS
;	COMDAT _PyAccu_Destroy
_TEXT	SEGMENT
acc$ = 64
_PyAccu_Destroy PROC					; COMDAT

; 112  : {

$LN33:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 113  :     Py_CLEAR(acc->small);

  0000a	4c 8b 49 08	 mov	 r9, QWORD PTR [rcx+8]
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	4d 85 c9	 test	 r9, r9
  00014	0f 84 96 00 00
	00		 je	 $LN7@PyAccu_Des
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LAMOHJF@?4?4?2Objects?2accu?4c?$AA@
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FNMAMFNH@_PyAccu_Destroy?$AA@
  00028	41 b8 71 00 00
	00		 mov	 r8d, 113		; 00000071H
  0002e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00036	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003b	85 c0		 test	 eax, eax
  0003d	75 71		 jne	 SHORT $LN7@PyAccu_Des
  0003f	48 8b 5f 08	 mov	 rbx, QWORD PTR [rdi+8]
  00043	48 c7 47 08 00
	00 00 00	 mov	 QWORD PTR [rdi+8], 0
  0004b	e8 00 00 00 00	 call	 _Py_PXCTX
  00050	85 c0		 test	 eax, eax
  00052	75 5c		 jne	 SHORT $LN7@PyAccu_Des
  00054	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00058	a8 20		 test	 al, 32			; 00000020H
  0005a	75 4c		 jne	 SHORT $LN15@PyAccu_Des
  0005c	84 c0		 test	 al, al
  0005e	78 48		 js	 SHORT $LN15@PyAccu_Des
  00060	a8 02		 test	 al, 2
  00062	75 4c		 jne	 SHORT $LN7@PyAccu_Des
  00064	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00068	75 46		 jne	 SHORT $LN7@PyAccu_Des
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00078	4c 8b cb	 mov	 r9, rbx
  0007b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00081	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00089	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008e	48 8b cb	 mov	 rcx, rbx
  00091	85 c0		 test	 eax, eax
  00093	74 07		 je	 SHORT $LN20@PyAccu_Des
  00095	e8 00 00 00 00	 call	 _Px_Dealloc
  0009a	eb 14		 jmp	 SHORT $LN7@PyAccu_Des
$LN20@PyAccu_Des:
  0009c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000a6	eb 08		 jmp	 SHORT $LN7@PyAccu_Des
$LN15@PyAccu_Des:
  000a8	48 8b cb	 mov	 rcx, rbx
  000ab	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyAccu_Des:

; 114  :     Py_CLEAR(acc->large);

  000b0	4c 8b 0f	 mov	 r9, QWORD PTR [rdi]
  000b3	4d 85 c9	 test	 r9, r9
  000b6	0f 84 a9 00 00
	00		 je	 $LN3@PyAccu_Des
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LAMOHJF@?4?4?2Objects?2accu?4c?$AA@
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FNMAMFNH@_PyAccu_Destroy?$AA@
  000ca	41 b8 72 00 00
	00		 mov	 r8d, 114		; 00000072H
  000d0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000dd	85 c0		 test	 eax, eax
  000df	0f 85 80 00 00
	00		 jne	 $LN3@PyAccu_Des
  000e5	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
  000e8	48 c7 07 00 00
	00 00		 mov	 QWORD PTR [rdi], 0
  000ef	e8 00 00 00 00	 call	 _Py_PXCTX
  000f4	85 c0		 test	 eax, eax
  000f6	75 6d		 jne	 SHORT $LN3@PyAccu_Des
  000f8	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000fc	a8 20		 test	 al, 32			; 00000020H
  000fe	75 5d		 jne	 SHORT $LN26@PyAccu_Des
  00100	84 c0		 test	 al, al
  00102	78 59		 js	 SHORT $LN26@PyAccu_Des
  00104	a8 02		 test	 al, 2
  00106	75 5d		 jne	 SHORT $LN3@PyAccu_Des
  00108	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0010c	75 57		 jne	 SHORT $LN3@PyAccu_Des
  0010e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0011c	4c 8b cb	 mov	 r9, rbx
  0011f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00125	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0012d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00132	48 8b cb	 mov	 rcx, rbx
  00135	85 c0		 test	 eax, eax
  00137	74 0f		 je	 SHORT $LN31@PyAccu_Des

; 115  : }

  00139	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0013e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00142	5f		 pop	 rdi
  00143	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 114  :     Py_CLEAR(acc->large);

$LN31@PyAccu_Des:
  00148	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 115  : }

  0014c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00151	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00155	5f		 pop	 rdi
  00156	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 114  :     Py_CLEAR(acc->large);

$LN26@PyAccu_Des:
  0015d	48 8b cb	 mov	 rcx, rbx
  00160	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyAccu_Des:

; 115  : }

  00165	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0016a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0016e	5f		 pop	 rdi
  0016f	c3		 ret	 0
_PyAccu_Destroy ENDP
_TEXT	ENDS
END
