; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07KHCAGKLP@_locale?$AA@			; `string'
PUBLIC	??_C@_0BC@IFLEJNJD@_getdefaultlocale?$AA@	; `string'
PUBLIC	??_C@_07LGAGEEBC@strxfrm?$AA@			; `string'
PUBLIC	??_C@_07NDJNBCDA@strcoll?$AA@			; `string'
PUBLIC	??_C@_0L@FCBGCLP@localeconv?$AA@		; `string'
PUBLIC	??_C@_09IOBOFJNA@setlocale?$AA@			; `string'
;	COMDAT ??_C@_07KHCAGKLP@_locale?$AA@
CONST	SEGMENT
??_C@_07KHCAGKLP@_locale?$AA@ DB '_locale', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IFLEJNJD@_getdefaultlocale?$AA@
CONST	SEGMENT
??_C@_0BC@IFLEJNJD@_getdefaultlocale?$AA@ DB '_getdefaultlocale', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LGAGEEBC@strxfrm?$AA@
CONST	SEGMENT
??_C@_07LGAGEEBC@strxfrm?$AA@ DB 'strxfrm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NDJNBCDA@strcoll?$AA@
CONST	SEGMENT
??_C@_07NDJNBCDA@strcoll?$AA@ DB 'strcoll', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCBGCLP@localeconv?$AA@
CONST	SEGMENT
??_C@_0L@FCBGCLP@localeconv?$AA@ DB 'localeconv', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IOBOFJNA@setlocale?$AA@
CONST	SEGMENT
??_C@_09IOBOFJNA@setlocale?$AA@ DB 'setlocale', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
locale__doc__ DB 'Support for POSIX locales.', 00H
	ORG $+5
setlocale__doc__ DB '(integer,string=None) -> string. Activates/queries l'
	DB	'ocale processing.', 00H
	ORG $+10
localeconv__doc__ DB '() -> dict. Returns numeric and monetary locale-spe'
	DB	'cific parameters.', 00H
	ORG $+11
strcoll__doc__ DB 'string,string -> int. Compares two strings according t'
	DB	'o the locale.', 00H
	ORG $+12
strxfrm__doc__ DB 'strxfrm(string) -> string.', 0aH, 0aH, 'Return a strin'
	DB	'g that can be used as a key for locale-aware comparisons.', 00H
	ORG $+12
PyLocale_Methods DQ FLAT:??_C@_09IOBOFJNA@setlocale?$AA@
	DQ	FLAT:PyLocale_setlocale
	DD	01H
	ORG $+4
	DQ	FLAT:setlocale__doc__
	DQ	FLAT:??_C@_0L@FCBGCLP@localeconv?$AA@
	DQ	FLAT:PyLocale_localeconv
	DD	04H
	ORG $+4
	DQ	FLAT:localeconv__doc__
	DQ	FLAT:??_C@_07NDJNBCDA@strcoll?$AA@
	DQ	FLAT:PyLocale_strcoll
	DD	01H
	ORG $+4
	DQ	FLAT:strcoll__doc__
	DQ	FLAT:??_C@_07LGAGEEBC@strxfrm?$AA@
	DQ	FLAT:PyLocale_strxfrm
	DD	01H
	ORG $+4
	DQ	FLAT:strxfrm__doc__
	DQ	FLAT:??_C@_0BC@IFLEJNJD@_getdefaultlocale?$AA@
	DQ	FLAT:PyLocale_getdefaultlocale
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_localemodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07KHCAGKLP@_locale?$AA@
	DQ	FLAT:locale__doc__
	DQ	ffffffffffffffffH
	DQ	FLAT:PyLocale_Methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyList_SetItem:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	PyList_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_localemodule.c
pdata	SEGMENT
$pdata$copy_grouping DD imagerel copy_grouping
	DD	imagerel copy_grouping+28
	DD	imagerel $unwind$copy_grouping
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$copy_grouping DD imagerel copy_grouping+28
	DD	imagerel copy_grouping+82
	DD	imagerel $chain$0$copy_grouping
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$copy_grouping DD imagerel copy_grouping+82
	DD	imagerel copy_grouping+193
	DD	imagerel $chain$4$copy_grouping
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$copy_grouping DD 061021H
	DD	087410H
	DD	076405H
	DD	065400H
	DD	imagerel copy_grouping
	DD	imagerel copy_grouping+28
	DD	imagerel $unwind$copy_grouping
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$copy_grouping DD 020521H
	DD	065405H
	DD	imagerel copy_grouping
	DD	imagerel copy_grouping+28
	DD	imagerel $unwind$copy_grouping
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$copy_grouping DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT copy_grouping
_TEXT	SEGMENT
s$ = 48
copy_grouping PROC					; COMDAT

; 53   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 54   :     int i;
; 55   :     PyObject *result, *val = NULL;
; 56   : 
; 57   :     if (s[0] == '\0')

  00006	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00009	48 8b d9	 mov	 rbx, rcx
  0000c	84 c0		 test	 al, al
  0000e	75 0c		 jne	 SHORT $LN12@copy_group

; 58   :         /* empty string: no grouping at all */
; 59   :         return PyList_New(0);

  00010	33 c9		 xor	 ecx, ecx

; 87   : }

  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5b		 pop	 rbx
  00017	e9 00 00 00 00	 jmp	 PyList_New
$LN12@copy_group:
  0001c	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp

; 60   : 
; 61   :     for (i = 0; s[i] != '\0' && s[i] != CHAR_MAX; i++)

  00021	33 d2		 xor	 edx, edx
$LL11@copy_group:
  00023	3c 7f		 cmp	 al, 127			; 0000007fH
  00025	74 0d		 je	 SHORT $LN9@copy_group
  00027	0f b6 41 01	 movzx	 eax, BYTE PTR [rcx+1]
  0002b	48 ff c1	 inc	 rcx
  0002e	ff c2		 inc	 edx
  00030	84 c0		 test	 al, al
  00032	75 ef		 jne	 SHORT $LL11@copy_group
$LN9@copy_group:

; 62   :         ; /* nothing */
; 63   : 
; 64   :     result = PyList_New(i+1);

  00034	8d 42 01	 lea	 eax, DWORD PTR [rdx+1]
  00037	48 63 c8	 movsxd	 rcx, eax
  0003a	e8 00 00 00 00	 call	 PyList_New
  0003f	48 8b e8	 mov	 rbp, rax

; 65   :     if (!result)

  00042	48 85 c0	 test	 rax, rax
  00045	75 0b		 jne	 SHORT $LN8@copy_group
  00047	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]

; 87   : }

  0004c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00050	5b		 pop	 rbx
  00051	c3		 ret	 0
$LN8@copy_group:
  00052	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi

; 66   :         return NULL;
; 67   : 
; 68   :     i = -1;

  00057	83 ce ff	 or	 esi, -1
  0005a	48 ff cb	 dec	 rbx
  0005d	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
$LL7@copy_group:

; 69   :     do {
; 70   :         i++;
; 71   :         val = PyLong_FromLong(s[i]);

  00062	0f be 4b 01	 movsx	 ecx, BYTE PTR [rbx+1]
  00066	48 ff c3	 inc	 rbx
  00069	ff c6		 inc	 esi
  0006b	e8 00 00 00 00	 call	 PyLong_FromLong
  00070	48 8b f8	 mov	 rdi, rax

; 72   :         if (!val)

  00073	48 85 c0	 test	 rax, rax
  00076	74 2a		 je	 SHORT $LN20@copy_group

; 73   :             break;
; 74   :         if (PyList_SetItem(result, i, val)) {

  00078	48 63 d6	 movsxd	 rdx, esi
  0007b	4c 8b c0	 mov	 r8, rax
  0007e	48 8b cd	 mov	 rcx, rbp
  00081	e8 00 00 00 00	 call	 PyList_SetItem
  00086	85 c0		 test	 eax, eax
  00088	75 10		 jne	 SHORT $LN18@copy_group

; 76   :             val = NULL;
; 77   :             break;
; 78   :         }
; 79   :     } while (s[i] != '\0' && s[i] != CHAR_MAX);

  0008a	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  0008d	84 c0		 test	 al, al
  0008f	74 04		 je	 SHORT $LN1@copy_group
  00091	3c 7f		 cmp	 al, 127			; 0000007fH
  00093	75 cd		 jne	 SHORT $LL7@copy_group
$LN1@copy_group:

; 84   :     }
; 85   : 
; 86   :     return result;

  00095	48 8b c5	 mov	 rax, rbp
  00098	eb 12		 jmp	 SHORT $LN23@copy_group
$LN18@copy_group:

; 75   :             Py_DECREF(val);

  0009a	48 8b cf	 mov	 rcx, rdi
  0009d	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@copy_group:

; 80   : 
; 81   :     if (!val) {
; 82   :         Py_DECREF(result);

  000a2	48 8b cd	 mov	 rcx, rbp
  000a5	e8 00 00 00 00	 call	 _Py_DecRef

; 83   :         return NULL;

  000aa	33 c0		 xor	 eax, eax
$LN23@copy_group:
  000ac	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000b1	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000b6	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]

; 87   : }

  000bb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bf	5b		 pop	 rbx
  000c0	c3		 ret	 0
copy_grouping ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@ODLNMNJD@invalid?5locale?5category?$AA@ ; `string'
PUBLIC	??_C@_0BE@NDOIIFNL@locale?5query?5failed?$AA@	; `string'
PUBLIC	??_C@_0BL@JLONJDAP@unsupported?5locale?5setting?$AA@ ; `string'
PUBLIC	??_C@_0O@LKFCIHHK@i?$HMz?3setlocale?$AA@	; `string'
EXTRN	PyUnicode_DecodeLocale:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	__imp_setlocale:PROC
EXTRN	_PyArg_ParseTuple_SizeT:PROC
_BSS	SEGMENT
Error	DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyLocale_setlocale DD imagerel PyLocale_setlocale
	DD	imagerel PyLocale_setlocale+200
	DD	imagerel $unwind$PyLocale_setlocale
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyLocale_setlocale DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BI@ODLNMNJD@invalid?5locale?5category?$AA@
CONST	SEGMENT
??_C@_0BI@ODLNMNJD@invalid?5locale?5category?$AA@ DB 'invalid locale cate'
	DB	'gory', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NDOIIFNL@locale?5query?5failed?$AA@
CONST	SEGMENT
??_C@_0BE@NDOIIFNL@locale?5query?5failed?$AA@ DB 'locale query failed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JLONJDAP@unsupported?5locale?5setting?$AA@
CONST	SEGMENT
??_C@_0BL@JLONJDAP@unsupported?5locale?5setting?$AA@ DB 'unsupported loca'
	DB	'le setting', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LKFCIHHK@i?$HMz?3setlocale?$AA@
CONST	SEGMENT
??_C@_0O@LKFCIHHK@i?$HMz?3setlocale?$AA@ DB 'i|z:setlocale', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyLocale_setlocale
_TEXT	SEGMENT
self$ = 48
args$ = 56
category$ = 64
locale$ = 72
PyLocale_setlocale PROC					; COMDAT

; 91   : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 92   :     int category;
; 93   :     char *locale = NULL, *result;
; 94   :     PyObject *result_object;
; 95   : 
; 96   :     if (!PyArg_ParseTuple(args, "i|z:setlocale", &category, &locale))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 48	 lea	 r9, QWORD PTR locale$[rsp]
  0000c	4c 8d 44 24 40	 lea	 r8, QWORD PTR category$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@LKFCIHHK@i?$HMz?3setlocale?$AA@
  00018	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR locale$[rsp], 0
  00021	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00026	85 c0		 test	 eax, eax

; 97   :         return NULL;

  00028	0f 84 93 00 00
	00		 je	 $LN11@PyLocale_s

; 98   : 
; 99   : #if defined(MS_WINDOWS)
; 100  :     if (category < LC_MIN || category > LC_MAX)

  0002e	8b 4c 24 40	 mov	 ecx, DWORD PTR category$[rsp]
  00032	83 f9 05	 cmp	 ecx, 5
  00035	77 77		 ja	 SHORT $LN6@PyLocale_s

; 104  :     }
; 105  : #endif
; 106  : 
; 107  :     if (locale) {

  00037	48 8b 54 24 48	 mov	 rdx, QWORD PTR locale$[rsp]
  0003c	48 85 d2	 test	 rdx, rdx
  0003f	74 39		 je	 SHORT $LN5@PyLocale_s

; 108  :         /* set locale */
; 109  :         result = setlocale(category, locale);

  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setlocale

; 110  :         if (!result) {

  00047	48 85 c0	 test	 rax, rax
  0004a	75 1a		 jne	 SHORT $LN4@PyLocale_s

; 111  :             /* operation failed, no setting was changed */
; 112  :             PyErr_SetString(Error, "unsupported locale setting");

  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Error
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@JLONJDAP@unsupported?5locale?5setting?$AA@
  0005a	e8 00 00 00 00	 call	 PyErr_SetString
  0005f	33 c0		 xor	 eax, eax

; 126  :     }
; 127  :     return result_object;
; 128  : }

  00061	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00065	c3		 ret	 0
$LN4@PyLocale_s:

; 113  :             return NULL;
; 114  :         }
; 115  :         result_object = PyUnicode_DecodeLocale(result, NULL);

  00066	33 d2		 xor	 edx, edx
  00068	48 8b c8	 mov	 rcx, rax
  0006b	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale

; 116  :         if (!result_object)

  00070	48 85 c0	 test	 rax, rax
  00073	75 4e		 jne	 SHORT $LN9@PyLocale_s

; 126  :     }
; 127  :     return result_object;
; 128  : }

  00075	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00079	c3		 ret	 0
$LN5@PyLocale_s:

; 117  :             return NULL;
; 118  :     } else {
; 119  :         /* get locale */
; 120  :         result = setlocale(category, NULL);

  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setlocale

; 121  :         if (!result) {

  00080	48 85 c0	 test	 rax, rax
  00083	75 1a		 jne	 SHORT $LN1@PyLocale_s

; 122  :             PyErr_SetString(Error, "locale query failed");

  00085	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Error
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NDOIIFNL@locale?5query?5failed?$AA@
  00093	e8 00 00 00 00	 call	 PyErr_SetString
  00098	33 c0		 xor	 eax, eax

; 126  :     }
; 127  :     return result_object;
; 128  : }

  0009a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0009e	c3		 ret	 0
$LN1@PyLocale_s:

; 123  :             return NULL;
; 124  :         }
; 125  :         result_object = PyUnicode_DecodeLocale(result, NULL);

  0009f	33 d2		 xor	 edx, edx
  000a1	48 8b c8	 mov	 rcx, rax
  000a4	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale

; 126  :     }
; 127  :     return result_object;
; 128  : }

  000a9	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ad	c3		 ret	 0
$LN6@PyLocale_s:

; 101  :     {
; 102  :         PyErr_SetString(Error, "invalid locale category");

  000ae	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Error
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@ODLNMNJD@invalid?5locale?5category?$AA@
  000bc	e8 00 00 00 00	 call	 PyErr_SetString
$LN11@PyLocale_s:

; 103  :         return NULL;

  000c1	33 c0		 xor	 eax, eax
$LN9@PyLocale_s:

; 126  :     }
; 127  :     return result_object;
; 128  : }

  000c3	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000c7	c3		 ret	 0
PyLocale_setlocale ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@IIJABFIC@n_sign_posn?$AA@		; `string'
PUBLIC	??_C@_0M@GNLJCLGA@p_sign_posn?$AA@		; `string'
PUBLIC	??_C@_0P@EGPOAFBL@n_sep_by_space?$AA@		; `string'
PUBLIC	??_C@_0O@NBELBJAD@n_cs_precedes?$AA@		; `string'
PUBLIC	??_C@_0P@OPOPICCB@p_sep_by_space?$AA@		; `string'
PUBLIC	??_C@_0O@HMGCHAOP@p_cs_precedes?$AA@		; `string'
PUBLIC	??_C@_0M@FIBCOHAG@frac_digits?$AA@		; `string'
PUBLIC	??_C@_0BA@FJDCGKOJ@int_frac_digits?$AA@		; `string'
PUBLIC	??_C@_0O@LIPPBDND@negative_sign?$AA@		; `string'
PUBLIC	??_C@_0O@JKFECLNP@positive_sign?$AA@		; `string'
PUBLIC	??_C@_0N@IOEAAJCN@mon_grouping?$AA@		; `string'
PUBLIC	??_C@_0BC@ELBDBOMN@mon_thousands_sep?$AA@	; `string'
PUBLIC	??_C@_0BC@GKGFEJOK@mon_decimal_point?$AA@	; `string'
PUBLIC	??_C@_0BA@DENJGIBD@currency_symbol?$AA@		; `string'
PUBLIC	??_C@_0BA@HOLPBJNH@int_curr_symbol?$AA@		; `string'
PUBLIC	??_C@_08DOJJHCKD@grouping?$AA@			; `string'
PUBLIC	??_C@_0O@JPGGJHKE@thousands_sep?$AA@		; `string'
PUBLIC	??_C@_0O@LOBAMAID@decimal_point?$AA@		; `string'
EXTRN	PyDict_SetItemString:PROC
EXTRN	__imp_localeconv:PROC
EXTRN	PyDict_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyLocale_localeconv DD imagerel PyLocale_localeconv
	DD	imagerel PyLocale_localeconv+25
	DD	imagerel $unwind$PyLocale_localeconv
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyLocale_localeconv DD imagerel PyLocale_localeconv+25
	DD	imagerel PyLocale_localeconv+916
	DD	imagerel $chain$1$PyLocale_localeconv
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyLocale_localeconv DD imagerel PyLocale_localeconv+916
	DD	imagerel PyLocale_localeconv+1123
	DD	imagerel $chain$3$PyLocale_localeconv
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyLocale_localeconv DD imagerel PyLocale_localeconv+1123
	DD	imagerel PyLocale_localeconv+1151
	DD	imagerel $chain$5$PyLocale_localeconv
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$PyLocale_localeconv DD imagerel PyLocale_localeconv+1151
	DD	imagerel PyLocale_localeconv+1177
	DD	imagerel $chain$7$PyLocale_localeconv
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$PyLocale_localeconv DD 040021H
	DD	096400H
	DD	083400H
	DD	imagerel PyLocale_localeconv
	DD	imagerel PyLocale_localeconv+25
	DD	imagerel $unwind$PyLocale_localeconv
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyLocale_localeconv DD 040021H
	DD	096400H
	DD	083400H
	DD	imagerel PyLocale_localeconv
	DD	imagerel PyLocale_localeconv+25
	DD	imagerel $unwind$PyLocale_localeconv
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyLocale_localeconv DD 040021H
	DD	096400H
	DD	083400H
	DD	imagerel PyLocale_localeconv
	DD	imagerel PyLocale_localeconv+25
	DD	imagerel $unwind$PyLocale_localeconv
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyLocale_localeconv DD 040a21H
	DD	09640aH
	DD	083405H
	DD	imagerel PyLocale_localeconv
	DD	imagerel PyLocale_localeconv+25
	DD	imagerel $unwind$PyLocale_localeconv
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyLocale_localeconv DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0M@IIJABFIC@n_sign_posn?$AA@
CONST	SEGMENT
??_C@_0M@IIJABFIC@n_sign_posn?$AA@ DB 'n_sign_posn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GNLJCLGA@p_sign_posn?$AA@
CONST	SEGMENT
??_C@_0M@GNLJCLGA@p_sign_posn?$AA@ DB 'p_sign_posn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EGPOAFBL@n_sep_by_space?$AA@
CONST	SEGMENT
??_C@_0P@EGPOAFBL@n_sep_by_space?$AA@ DB 'n_sep_by_space', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NBELBJAD@n_cs_precedes?$AA@
CONST	SEGMENT
??_C@_0O@NBELBJAD@n_cs_precedes?$AA@ DB 'n_cs_precedes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OPOPICCB@p_sep_by_space?$AA@
CONST	SEGMENT
??_C@_0P@OPOPICCB@p_sep_by_space?$AA@ DB 'p_sep_by_space', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HMGCHAOP@p_cs_precedes?$AA@
CONST	SEGMENT
??_C@_0O@HMGCHAOP@p_cs_precedes?$AA@ DB 'p_cs_precedes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FIBCOHAG@frac_digits?$AA@
CONST	SEGMENT
??_C@_0M@FIBCOHAG@frac_digits?$AA@ DB 'frac_digits', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FJDCGKOJ@int_frac_digits?$AA@
CONST	SEGMENT
??_C@_0BA@FJDCGKOJ@int_frac_digits?$AA@ DB 'int_frac_digits', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LIPPBDND@negative_sign?$AA@
CONST	SEGMENT
??_C@_0O@LIPPBDND@negative_sign?$AA@ DB 'negative_sign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JKFECLNP@positive_sign?$AA@
CONST	SEGMENT
??_C@_0O@JKFECLNP@positive_sign?$AA@ DB 'positive_sign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IOEAAJCN@mon_grouping?$AA@
CONST	SEGMENT
??_C@_0N@IOEAAJCN@mon_grouping?$AA@ DB 'mon_grouping', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ELBDBOMN@mon_thousands_sep?$AA@
CONST	SEGMENT
??_C@_0BC@ELBDBOMN@mon_thousands_sep?$AA@ DB 'mon_thousands_sep', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GKGFEJOK@mon_decimal_point?$AA@
CONST	SEGMENT
??_C@_0BC@GKGFEJOK@mon_decimal_point?$AA@ DB 'mon_decimal_point', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DENJGIBD@currency_symbol?$AA@
CONST	SEGMENT
??_C@_0BA@DENJGIBD@currency_symbol?$AA@ DB 'currency_symbol', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HOLPBJNH@int_curr_symbol?$AA@
CONST	SEGMENT
??_C@_0BA@HOLPBJNH@int_curr_symbol?$AA@ DB 'int_curr_symbol', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DOJJHCKD@grouping?$AA@
CONST	SEGMENT
??_C@_08DOJJHCKD@grouping?$AA@ DB 'grouping', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JPGGJHKE@thousands_sep?$AA@
CONST	SEGMENT
??_C@_0O@JPGGJHKE@thousands_sep?$AA@ DB 'thousands_sep', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LOBAMAID@decimal_point?$AA@
CONST	SEGMENT
??_C@_0O@LOBAMAID@decimal_point?$AA@ DB 'decimal_point', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_localemodule.c
CONST	ENDS
;	COMDAT PyLocale_localeconv
_TEXT	SEGMENT
self$ = 64
PyLocale_localeconv PROC				; COMDAT

; 135  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 136  :     PyObject* result;
; 137  :     struct lconv *l;
; 138  :     PyObject *x;
; 139  : 
; 140  :     result = PyDict_New();

  00006	e8 00 00 00 00	 call	 PyDict_New
  0000b	48 8b f8	 mov	 rdi, rax

; 141  :     if (!result)

  0000e	48 85 c0	 test	 rax, rax
  00011	75 06		 jne	 SHORT $LN99@PyLocale_l

; 197  : }

  00013	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00017	5f		 pop	 rdi
  00018	c3		 ret	 0
$LN99@PyLocale_l:
  00019	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0001e	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi

; 142  :         return NULL;
; 143  : 
; 144  :     /* if LC_NUMERIC is different in the C library, use saved value */
; 145  :     l = localeconv();

  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_localeconv

; 146  : 
; 147  :     /* hopefully, the localeconv result survives the C library calls
; 148  :        involved herein */
; 149  : 
; 150  : #define RESULT_STRING(s)\
; 151  :     x = PyUnicode_DecodeLocale(l->s, NULL);   \
; 152  :     if (!x) goto failed;\
; 153  :     PyDict_SetItemString(result, #s, x);\
; 154  :     Py_XDECREF(x)
; 155  : 
; 156  : #define RESULT_INT(i)\
; 157  :     x = PyLong_FromLong(l->i);\
; 158  :     if (!x) goto failed;\
; 159  :     PyDict_SetItemString(result, #i, x);\
; 160  :     Py_XDECREF(x)
; 161  : 
; 162  :     /* Numeric information */
; 163  :     RESULT_STRING(decimal_point);

  00029	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0002c	33 d2		 xor	 edx, edx
  0002e	48 8b f0	 mov	 rsi, rax
  00031	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  00036	48 8b d8	 mov	 rbx, rax
  00039	48 85 c0	 test	 rax, rax
  0003c	0f 84 52 03 00
	00		 je	 $failed$63630
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@LOBAMAID@decimal_point?$AA@
  00049	4c 8b c0	 mov	 r8, rax
  0004c	48 8b cf	 mov	 rcx, rdi
  0004f	e8 00 00 00 00	 call	 PyDict_SetItemString
  00054	48 8b cb	 mov	 rcx, rbx
  00057	e8 00 00 00 00	 call	 _Py_DecRef

; 164  :     RESULT_STRING(thousands_sep);

  0005c	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00060	33 d2		 xor	 edx, edx
  00062	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  00067	48 8b d8	 mov	 rbx, rax
  0006a	48 85 c0	 test	 rax, rax
  0006d	0f 84 21 03 00
	00		 je	 $failed$63630
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@JPGGJHKE@thousands_sep?$AA@
  0007a	4c 8b c0	 mov	 r8, rax
  0007d	48 8b cf	 mov	 rcx, rdi
  00080	e8 00 00 00 00	 call	 PyDict_SetItemString
  00085	48 8b cb	 mov	 rcx, rbx
  00088	e8 00 00 00 00	 call	 _Py_DecRef

; 165  :     x = copy_grouping(l->grouping);

  0008d	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  00091	e8 00 00 00 00	 call	 copy_grouping
  00096	48 8b d8	 mov	 rbx, rax

; 166  :     if (!x)

  00099	48 85 c0	 test	 rax, rax
  0009c	0f 84 f2 02 00
	00		 je	 $failed$63630

; 167  :         goto failed;
; 168  :     PyDict_SetItemString(result, "grouping", x);

  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08DOJJHCKD@grouping?$AA@
  000a9	4c 8b c0	 mov	 r8, rax
  000ac	48 8b cf	 mov	 rcx, rdi
  000af	e8 00 00 00 00	 call	 PyDict_SetItemString

; 169  :     Py_XDECREF(x);

  000b4	48 8b cb	 mov	 rcx, rbx
  000b7	e8 00 00 00 00	 call	 _Py_DecRef

; 170  : 
; 171  :     /* Monetary information */
; 172  :     RESULT_STRING(int_curr_symbol);

  000bc	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  000c0	33 d2		 xor	 edx, edx
  000c2	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  000c7	48 8b d8	 mov	 rbx, rax
  000ca	48 85 c0	 test	 rax, rax
  000cd	0f 84 c1 02 00
	00		 je	 $failed$63630
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@HOLPBJNH@int_curr_symbol?$AA@
  000da	4c 8b c0	 mov	 r8, rax
  000dd	48 8b cf	 mov	 rcx, rdi
  000e0	e8 00 00 00 00	 call	 PyDict_SetItemString
  000e5	48 8b cb	 mov	 rcx, rbx
  000e8	e8 00 00 00 00	 call	 _Py_DecRef

; 173  :     RESULT_STRING(currency_symbol);

  000ed	48 8b 4e 20	 mov	 rcx, QWORD PTR [rsi+32]
  000f1	33 d2		 xor	 edx, edx
  000f3	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  000f8	48 8b d8	 mov	 rbx, rax
  000fb	48 85 c0	 test	 rax, rax
  000fe	0f 84 90 02 00
	00		 je	 $failed$63630
  00104	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@DENJGIBD@currency_symbol?$AA@
  0010b	4c 8b c0	 mov	 r8, rax
  0010e	48 8b cf	 mov	 rcx, rdi
  00111	e8 00 00 00 00	 call	 PyDict_SetItemString
  00116	48 8b cb	 mov	 rcx, rbx
  00119	e8 00 00 00 00	 call	 _Py_DecRef

; 174  :     RESULT_STRING(mon_decimal_point);

  0011e	48 8b 4e 28	 mov	 rcx, QWORD PTR [rsi+40]
  00122	33 d2		 xor	 edx, edx
  00124	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  00129	48 8b d8	 mov	 rbx, rax
  0012c	48 85 c0	 test	 rax, rax
  0012f	0f 84 5f 02 00
	00		 je	 $failed$63630
  00135	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@GKGFEJOK@mon_decimal_point?$AA@
  0013c	4c 8b c0	 mov	 r8, rax
  0013f	48 8b cf	 mov	 rcx, rdi
  00142	e8 00 00 00 00	 call	 PyDict_SetItemString
  00147	48 8b cb	 mov	 rcx, rbx
  0014a	e8 00 00 00 00	 call	 _Py_DecRef

; 175  :     RESULT_STRING(mon_thousands_sep);

  0014f	48 8b 4e 30	 mov	 rcx, QWORD PTR [rsi+48]
  00153	33 d2		 xor	 edx, edx
  00155	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  0015a	48 8b d8	 mov	 rbx, rax
  0015d	48 85 c0	 test	 rax, rax
  00160	0f 84 2e 02 00
	00		 je	 $failed$63630
  00166	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@ELBDBOMN@mon_thousands_sep?$AA@
  0016d	4c 8b c0	 mov	 r8, rax
  00170	48 8b cf	 mov	 rcx, rdi
  00173	e8 00 00 00 00	 call	 PyDict_SetItemString
  00178	48 8b cb	 mov	 rcx, rbx
  0017b	e8 00 00 00 00	 call	 _Py_DecRef

; 176  :     x = copy_grouping(l->mon_grouping);

  00180	48 8b 4e 38	 mov	 rcx, QWORD PTR [rsi+56]
  00184	e8 00 00 00 00	 call	 copy_grouping
  00189	48 8b d8	 mov	 rbx, rax

; 177  :     if (!x)

  0018c	48 85 c0	 test	 rax, rax
  0018f	0f 84 ff 01 00
	00		 je	 $failed$63630

; 178  :         goto failed;
; 179  :     PyDict_SetItemString(result, "mon_grouping", x);

  00195	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@IOEAAJCN@mon_grouping?$AA@
  0019c	4c 8b c0	 mov	 r8, rax
  0019f	48 8b cf	 mov	 rcx, rdi
  001a2	e8 00 00 00 00	 call	 PyDict_SetItemString

; 180  :     Py_XDECREF(x);

  001a7	48 8b cb	 mov	 rcx, rbx
  001aa	e8 00 00 00 00	 call	 _Py_DecRef

; 181  :     RESULT_STRING(positive_sign);

  001af	48 8b 4e 40	 mov	 rcx, QWORD PTR [rsi+64]
  001b3	33 d2		 xor	 edx, edx
  001b5	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  001ba	48 8b d8	 mov	 rbx, rax
  001bd	48 85 c0	 test	 rax, rax
  001c0	0f 84 ce 01 00
	00		 je	 $failed$63630
  001c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@JKFECLNP@positive_sign?$AA@
  001cd	4c 8b c0	 mov	 r8, rax
  001d0	48 8b cf	 mov	 rcx, rdi
  001d3	e8 00 00 00 00	 call	 PyDict_SetItemString
  001d8	48 8b cb	 mov	 rcx, rbx
  001db	e8 00 00 00 00	 call	 _Py_DecRef

; 182  :     RESULT_STRING(negative_sign);

  001e0	48 8b 4e 48	 mov	 rcx, QWORD PTR [rsi+72]
  001e4	33 d2		 xor	 edx, edx
  001e6	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  001eb	48 8b d8	 mov	 rbx, rax
  001ee	48 85 c0	 test	 rax, rax
  001f1	0f 84 9d 01 00
	00		 je	 $failed$63630
  001f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@LIPPBDND@negative_sign?$AA@
  001fe	4c 8b c0	 mov	 r8, rax
  00201	48 8b cf	 mov	 rcx, rdi
  00204	e8 00 00 00 00	 call	 PyDict_SetItemString
  00209	48 8b cb	 mov	 rcx, rbx
  0020c	e8 00 00 00 00	 call	 _Py_DecRef

; 183  :     RESULT_INT(int_frac_digits);

  00211	0f be 4e 50	 movsx	 ecx, BYTE PTR [rsi+80]
  00215	e8 00 00 00 00	 call	 PyLong_FromLong
  0021a	48 8b d8	 mov	 rbx, rax
  0021d	48 85 c0	 test	 rax, rax
  00220	0f 84 6e 01 00
	00		 je	 $failed$63630
  00226	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@FJDCGKOJ@int_frac_digits?$AA@
  0022d	4c 8b c0	 mov	 r8, rax
  00230	48 8b cf	 mov	 rcx, rdi
  00233	e8 00 00 00 00	 call	 PyDict_SetItemString
  00238	48 8b cb	 mov	 rcx, rbx
  0023b	e8 00 00 00 00	 call	 _Py_DecRef

; 184  :     RESULT_INT(frac_digits);

  00240	0f be 4e 51	 movsx	 ecx, BYTE PTR [rsi+81]
  00244	e8 00 00 00 00	 call	 PyLong_FromLong
  00249	48 8b d8	 mov	 rbx, rax
  0024c	48 85 c0	 test	 rax, rax
  0024f	0f 84 3f 01 00
	00		 je	 $failed$63630
  00255	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@FIBCOHAG@frac_digits?$AA@
  0025c	4c 8b c0	 mov	 r8, rax
  0025f	48 8b cf	 mov	 rcx, rdi
  00262	e8 00 00 00 00	 call	 PyDict_SetItemString
  00267	48 8b cb	 mov	 rcx, rbx
  0026a	e8 00 00 00 00	 call	 _Py_DecRef

; 185  :     RESULT_INT(p_cs_precedes);

  0026f	0f be 4e 52	 movsx	 ecx, BYTE PTR [rsi+82]
  00273	e8 00 00 00 00	 call	 PyLong_FromLong
  00278	48 8b d8	 mov	 rbx, rax
  0027b	48 85 c0	 test	 rax, rax
  0027e	0f 84 10 01 00
	00		 je	 $failed$63630
  00284	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@HMGCHAOP@p_cs_precedes?$AA@
  0028b	4c 8b c0	 mov	 r8, rax
  0028e	48 8b cf	 mov	 rcx, rdi
  00291	e8 00 00 00 00	 call	 PyDict_SetItemString
  00296	48 8b cb	 mov	 rcx, rbx
  00299	e8 00 00 00 00	 call	 _Py_DecRef

; 186  :     RESULT_INT(p_sep_by_space);

  0029e	0f be 4e 53	 movsx	 ecx, BYTE PTR [rsi+83]
  002a2	e8 00 00 00 00	 call	 PyLong_FromLong
  002a7	48 8b d8	 mov	 rbx, rax
  002aa	48 85 c0	 test	 rax, rax
  002ad	0f 84 e1 00 00
	00		 je	 $failed$63630
  002b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@OPOPICCB@p_sep_by_space?$AA@
  002ba	4c 8b c0	 mov	 r8, rax
  002bd	48 8b cf	 mov	 rcx, rdi
  002c0	e8 00 00 00 00	 call	 PyDict_SetItemString
  002c5	48 8b cb	 mov	 rcx, rbx
  002c8	e8 00 00 00 00	 call	 _Py_DecRef

; 187  :     RESULT_INT(n_cs_precedes);

  002cd	0f be 4e 54	 movsx	 ecx, BYTE PTR [rsi+84]
  002d1	e8 00 00 00 00	 call	 PyLong_FromLong
  002d6	48 8b d8	 mov	 rbx, rax
  002d9	48 85 c0	 test	 rax, rax
  002dc	0f 84 b2 00 00
	00		 je	 $failed$63630
  002e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@NBELBJAD@n_cs_precedes?$AA@
  002e9	4c 8b c0	 mov	 r8, rax
  002ec	48 8b cf	 mov	 rcx, rdi
  002ef	e8 00 00 00 00	 call	 PyDict_SetItemString
  002f4	48 8b cb	 mov	 rcx, rbx
  002f7	e8 00 00 00 00	 call	 _Py_DecRef

; 188  :     RESULT_INT(n_sep_by_space);

  002fc	0f be 4e 55	 movsx	 ecx, BYTE PTR [rsi+85]
  00300	e8 00 00 00 00	 call	 PyLong_FromLong
  00305	48 8b d8	 mov	 rbx, rax
  00308	48 85 c0	 test	 rax, rax
  0030b	0f 84 83 00 00
	00		 je	 $failed$63630
  00311	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@EGPOAFBL@n_sep_by_space?$AA@
  00318	4c 8b c0	 mov	 r8, rax
  0031b	48 8b cf	 mov	 rcx, rdi
  0031e	e8 00 00 00 00	 call	 PyDict_SetItemString
  00323	48 8b cb	 mov	 rcx, rbx
  00326	e8 00 00 00 00	 call	 _Py_DecRef

; 189  :     RESULT_INT(p_sign_posn);

  0032b	0f be 4e 56	 movsx	 ecx, BYTE PTR [rsi+86]
  0032f	e8 00 00 00 00	 call	 PyLong_FromLong
  00334	48 8b d8	 mov	 rbx, rax
  00337	48 85 c0	 test	 rax, rax
  0033a	74 58		 je	 SHORT $failed$63630
  0033c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GNLJCLGA@p_sign_posn?$AA@
  00343	4c 8b c0	 mov	 r8, rax
  00346	48 8b cf	 mov	 rcx, rdi
  00349	e8 00 00 00 00	 call	 PyDict_SetItemString
  0034e	48 8b cb	 mov	 rcx, rbx
  00351	e8 00 00 00 00	 call	 _Py_DecRef

; 190  :     RESULT_INT(n_sign_posn);

  00356	0f be 4e 57	 movsx	 ecx, BYTE PTR [rsi+87]
  0035a	e8 00 00 00 00	 call	 PyLong_FromLong
  0035f	48 8b d8	 mov	 rbx, rax
  00362	48 85 c0	 test	 rax, rax
  00365	74 2d		 je	 SHORT $failed$63630
  00367	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IIJABFIC@n_sign_posn?$AA@
  0036e	4c 8b c0	 mov	 r8, rax
  00371	48 8b cf	 mov	 rcx, rdi
  00374	e8 00 00 00 00	 call	 PyDict_SetItemString
  00379	48 8b cb	 mov	 rcx, rbx
  0037c	e8 00 00 00 00	 call	 _Py_DecRef
  00381	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00386	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]

; 191  :     return result;

  0038b	48 8b c7	 mov	 rax, rdi

; 197  : }

  0038e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00392	5f		 pop	 rdi
  00393	c3		 ret	 0
$failed$63630:

; 192  : 
; 193  :   failed:
; 194  :     Py_XDECREF(result);

  00394	e8 00 00 00 00	 call	 _Py_PXCTX
  00399	85 c0		 test	 eax, eax
  0039b	75 5c		 jne	 SHORT $LN7@PyLocale_l
  0039d	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  003a1	a8 20		 test	 al, 32			; 00000020H
  003a3	75 4c		 jne	 SHORT $LN106@PyLocale_l
  003a5	84 c0		 test	 al, al
  003a7	78 48		 js	 SHORT $LN106@PyLocale_l
  003a9	a8 02		 test	 al, 2
  003ab	75 4c		 jne	 SHORT $LN7@PyLocale_l
  003ad	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  003b1	75 46		 jne	 SHORT $LN7@PyLocale_l
  003b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  003c1	4c 8b cf	 mov	 r9, rdi
  003c4	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  003ca	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003d2	e8 00 00 00 00	 call	 _PyParallel_Guard
  003d7	48 8b cf	 mov	 rcx, rdi
  003da	85 c0		 test	 eax, eax
  003dc	74 07		 je	 SHORT $LN111@PyLocale_l
  003de	e8 00 00 00 00	 call	 _Px_Dealloc
  003e3	eb 14		 jmp	 SHORT $LN7@PyLocale_l
$LN111@PyLocale_l:
  003e5	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  003e9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003ef	eb 08		 jmp	 SHORT $LN7@PyLocale_l
$LN106@PyLocale_l:
  003f1	48 8b cf	 mov	 rcx, rdi
  003f4	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyLocale_l:

; 195  :     Py_XDECREF(x);

  003f9	48 85 db	 test	 rbx, rbx
  003fc	0f 84 85 00 00
	00		 je	 $LN3@PyLocale_l
  00402	e8 00 00 00 00	 call	 _Py_PXCTX
  00407	85 c0		 test	 eax, eax
  00409	75 7c		 jne	 SHORT $LN3@PyLocale_l
  0040b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0040f	a8 20		 test	 al, 32			; 00000020H
  00411	75 6c		 jne	 SHORT $LN117@PyLocale_l
  00413	84 c0		 test	 al, al
  00415	78 68		 js	 SHORT $LN117@PyLocale_l
  00417	a8 02		 test	 al, 2
  00419	75 6c		 jne	 SHORT $LN3@PyLocale_l
  0041b	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0041f	75 66		 jne	 SHORT $LN3@PyLocale_l
  00421	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00428	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0042f	4c 8b cb	 mov	 r9, rbx
  00432	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00438	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00440	e8 00 00 00 00	 call	 _PyParallel_Guard
  00445	48 8b cb	 mov	 rcx, rbx
  00448	85 c0		 test	 eax, eax
  0044a	74 17		 je	 SHORT $LN122@PyLocale_l
  0044c	e8 00 00 00 00	 call	 _Px_Dealloc
  00451	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00456	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]

; 196  :     return NULL;

  0045b	33 c0		 xor	 eax, eax

; 197  : }

  0045d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00461	5f		 pop	 rdi
  00462	c3		 ret	 0

; 195  :     Py_XDECREF(x);

$LN122@PyLocale_l:
  00463	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00467	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0046d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00472	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]

; 196  :     return NULL;

  00477	33 c0		 xor	 eax, eax

; 197  : }

  00479	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0047d	5f		 pop	 rdi
  0047e	c3		 ret	 0

; 195  :     Py_XDECREF(x);

$LN117@PyLocale_l:
  0047f	48 8b cb	 mov	 rcx, rbx
  00482	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyLocale_l:

; 196  :     return NULL;

  00487	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0048c	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00491	33 c0		 xor	 eax, eax

; 197  : }

  00493	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00497	5f		 pop	 rdi
  00498	c3		 ret	 0
PyLocale_localeconv ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DAPDAKJD@UU?3strcoll?$AA@		; `string'
EXTRN	__imp_free:PROC
EXTRN	_PxMem_Free:PROC
EXTRN	__imp_wcscoll:PROC
EXTRN	PyUnicode_AsWideCharString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyLocale_strcoll DD imagerel PyLocale_strcoll
	DD	imagerel PyLocale_strcoll+52
	DD	imagerel $unwind$PyLocale_strcoll
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyLocale_strcoll DD imagerel PyLocale_strcoll+52
	DD	imagerel PyLocale_strcoll+183
	DD	imagerel $chain$1$PyLocale_strcoll
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyLocale_strcoll DD imagerel PyLocale_strcoll+183
	DD	imagerel PyLocale_strcoll+194
	DD	imagerel $chain$3$PyLocale_strcoll
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyLocale_strcoll DD imagerel PyLocale_strcoll+194
	DD	imagerel PyLocale_strcoll+208
	DD	imagerel $chain$4$PyLocale_strcoll
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyLocale_strcoll DD 020021H
	DD	077400H
	DD	imagerel PyLocale_strcoll
	DD	imagerel PyLocale_strcoll+52
	DD	imagerel $unwind$PyLocale_strcoll
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyLocale_strcoll DD 040021H
	DD	077400H
	DD	063400H
	DD	imagerel PyLocale_strcoll
	DD	imagerel PyLocale_strcoll+52
	DD	imagerel $unwind$PyLocale_strcoll
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyLocale_strcoll DD 041e21H
	DD	06341eH
	DD	077405H
	DD	imagerel PyLocale_strcoll
	DD	imagerel PyLocale_strcoll+52
	DD	imagerel $unwind$PyLocale_strcoll
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyLocale_strcoll DD 020601H
	DD	060023206H
xdata	ENDS
;	COMDAT ??_C@_0L@DAPDAKJD@UU?3strcoll?$AA@
CONST	SEGMENT
??_C@_0L@DAPDAKJD@UU?3strcoll?$AA@ DB 'UU:strcoll', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyLocale_strcoll
_TEXT	SEGMENT
self$ = 48
args$ = 56
os1$ = 64
os2$ = 72
PyLocale_strcoll PROC					; COMDAT

; 205  : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 206  :     PyObject *os1, *os2, *result = NULL;
; 207  :     wchar_t *ws1 = NULL, *ws2 = NULL;
; 208  : 
; 209  :     if (!PyArg_ParseTuple(args, "UU:strcoll", &os1, &os2))

  00006	48 8b ca	 mov	 rcx, rdx
  00009	4c 8d 4c 24 48	 lea	 r9, QWORD PTR os2$[rsp]
  0000e	4c 8d 44 24 40	 lea	 r8, QWORD PTR os1$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DAPDAKJD@UU?3strcoll?$AA@
  0001a	33 f6		 xor	 esi, esi
  0001c	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00021	85 c0		 test	 eax, eax
  00023	75 08		 jne	 SHORT $LN5@PyLocale_s@2

; 210  :         return NULL;

  00025	33 c0		 xor	 eax, eax

; 225  : }

  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5e		 pop	 rsi
  0002c	c3		 ret	 0
$LN5@PyLocale_s@2:

; 211  :     /* Convert the unicode strings to wchar[]. */
; 212  :     ws1 = PyUnicode_AsWideCharString(os1, NULL);

  0002d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR os1$[rsp]
  00032	33 d2		 xor	 edx, edx
  00034	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00039	e8 00 00 00 00	 call	 PyUnicode_AsWideCharString
  0003e	48 8b f8	 mov	 rdi, rax

; 213  :     if (ws1 == NULL)

  00041	48 85 c0	 test	 rax, rax
  00044	74 7c		 je	 SHORT $LN11@PyLocale_s@2

; 214  :         goto done;
; 215  :     ws2 = PyUnicode_AsWideCharString(os2, NULL);

  00046	48 8b 4c 24 48	 mov	 rcx, QWORD PTR os2$[rsp]
  0004b	33 d2		 xor	 edx, edx
  0004d	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00052	e8 00 00 00 00	 call	 PyUnicode_AsWideCharString
  00057	48 8b d8	 mov	 rbx, rax

; 216  :     if (ws2 == NULL)

  0005a	48 85 c0	 test	 rax, rax
  0005d	74 16		 je	 SHORT $done$63795

; 217  :         goto done;
; 218  :     /* Collate the strings. */
; 219  :     result = PyLong_FromLong(wcscoll(ws1, ws2));

  0005f	48 8b d0	 mov	 rdx, rax
  00062	48 8b cf	 mov	 rcx, rdi
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcscoll
  0006b	8b c8		 mov	 ecx, eax
  0006d	e8 00 00 00 00	 call	 PyLong_FromLong
  00072	48 8b f0	 mov	 rsi, rax
$done$63795:

; 220  :   done:
; 221  :     /* Deallocate everything. */
; 222  :     if (ws1) PyMem_FREE(ws1);

  00075	e8 00 00 00 00	 call	 _Py_PXCTX
  0007a	48 8b cf	 mov	 rcx, rdi
  0007d	85 c0		 test	 eax, eax
  0007f	74 07		 je	 SHORT $LN8@PyLocale_s@2
  00081	e8 00 00 00 00	 call	 _PxMem_Free
  00086	eb 06		 jmp	 SHORT $LN9@PyLocale_s@2
$LN8@PyLocale_s@2:
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN9@PyLocale_s@2:

; 223  :     if (ws2) PyMem_FREE(ws2);

  0008e	48 85 db	 test	 rbx, rbx
  00091	74 2a		 je	 SHORT $LN12@PyLocale_s@2
  00093	e8 00 00 00 00	 call	 _Py_PXCTX
  00098	48 8b cb	 mov	 rcx, rbx
  0009b	85 c0		 test	 eax, eax
  0009d	74 18		 je	 SHORT $LN10@PyLocale_s@2
  0009f	e8 00 00 00 00	 call	 _PxMem_Free
  000a4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a9	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 224  :     return result;

  000ae	48 8b c6	 mov	 rax, rsi

; 225  : }

  000b1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b5	5e		 pop	 rsi
  000b6	c3		 ret	 0
$LN10@PyLocale_s@2:

; 223  :     if (ws2) PyMem_FREE(ws2);

  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN12@PyLocale_s@2:
  000bd	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN11@PyLocale_s@2:

; 224  :     return result;

  000c2	48 8b c6	 mov	 rax, rsi
  000c5	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 225  : }

  000ca	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ce	5e		 pop	 rsi
  000cf	c3		 ret	 0
PyLocale_strcoll ENDP
_TEXT	ENDS
PUBLIC	??_C@_09NEIMPEEN@U?3strxfrm?$AA@		; `string'
EXTRN	PyMem_Free:PROC
EXTRN	PyUnicode_FromWideChar:PROC
EXTRN	PyMem_Realloc:PROC
EXTRN	__imp_wcsxfrm:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyLocale_strxfrm DD imagerel PyLocale_strxfrm
	DD	imagerel PyLocale_strxfrm+77
	DD	imagerel $unwind$PyLocale_strxfrm
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyLocale_strxfrm DD imagerel PyLocale_strxfrm+77
	DD	imagerel PyLocale_strxfrm+124
	DD	imagerel $chain$1$PyLocale_strxfrm
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyLocale_strxfrm DD imagerel PyLocale_strxfrm+124
	DD	imagerel PyLocale_strxfrm+216
	DD	imagerel $chain$2$PyLocale_strxfrm
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyLocale_strxfrm DD imagerel PyLocale_strxfrm+216
	DD	imagerel PyLocale_strxfrm+237
	DD	imagerel $chain$3$PyLocale_strxfrm
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyLocale_strxfrm DD imagerel PyLocale_strxfrm+237
	DD	imagerel PyLocale_strxfrm+251
	DD	imagerel $chain$4$PyLocale_strxfrm
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyLocale_strxfrm DD 021H
	DD	imagerel PyLocale_strxfrm
	DD	imagerel PyLocale_strxfrm+77
	DD	imagerel $unwind$PyLocale_strxfrm
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyLocale_strxfrm DD 021H
	DD	imagerel PyLocale_strxfrm+77
	DD	imagerel PyLocale_strxfrm+124
	DD	imagerel $chain$1$PyLocale_strxfrm
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyLocale_strxfrm DD 020521H
	DD	056405H
	DD	imagerel PyLocale_strxfrm+77
	DD	imagerel PyLocale_strxfrm+124
	DD	imagerel $chain$1$PyLocale_strxfrm
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyLocale_strxfrm DD 020521H
	DD	083405H
	DD	imagerel PyLocale_strxfrm
	DD	imagerel PyLocale_strxfrm+77
	DD	imagerel $unwind$PyLocale_strxfrm
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyLocale_strxfrm DD 043701H
	DD	047437H
	DD	050025206H
xdata	ENDS
;	COMDAT ??_C@_09NEIMPEEN@U?3strxfrm?$AA@
CONST	SEGMENT
??_C@_09NEIMPEEN@U?3strxfrm?$AA@ DB 'U:strxfrm', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyLocale_strxfrm
_TEXT	SEGMENT
self$ = 64
args$ = 72
n1$ = 80
str$ = 88
PyLocale_strxfrm PROC					; COMDAT

; 236  : {

  00000	40 55		 push	 rbp
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 237  :     PyObject *str;
; 238  :     Py_ssize_t n1;
; 239  :     wchar_t *s = NULL, *buf = NULL;
; 240  :     size_t n2;
; 241  :     PyObject *result = NULL;
; 242  : 
; 243  :     if (!PyArg_ParseTuple(args, "U:strxfrm", &str))

  00006	48 8b ca	 mov	 rcx, rdx
  00009	4c 8d 44 24 58	 lea	 r8, QWORD PTR str$[rsp]
  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09NEIMPEEN@U?3strxfrm?$AA@
  00015	33 ed		 xor	 ebp, ebp
  00017	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0001c	85 c0		 test	 eax, eax
  0001e	75 08		 jne	 SHORT $LN7@PyLocale_s@3

; 244  :         return NULL;

  00020	33 c0		 xor	 eax, eax

; 275  : }

  00022	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
$LN7@PyLocale_s@3:

; 245  : 
; 246  :     s = PyUnicode_AsWideCharString(str, &n1);

  00028	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  0002d	48 8d 54 24 50	 lea	 rdx, QWORD PTR n1$[rsp]
  00032	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00037	e8 00 00 00 00	 call	 PyUnicode_AsWideCharString
  0003c	48 8b f8	 mov	 rdi, rax

; 247  :     if (s == NULL)

  0003f	48 85 c0	 test	 rax, rax
  00042	0f 84 a5 00 00
	00		 je	 $LN1@PyLocale_s@3

; 248  :         goto exit;
; 249  : 
; 250  :     /* assume no change in size, first */
; 251  :     n1 = n1 + 1;

  00048	48 8b 4c 24 50	 mov	 rcx, QWORD PTR n1$[rsp]
  0004d	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00052	48 ff c1	 inc	 rcx
  00055	48 89 4c 24 50	 mov	 QWORD PTR n1$[rsp], rcx

; 252  :     buf = PyMem_Malloc(n1 * sizeof(wchar_t));

  0005a	48 03 c9	 add	 rcx, rcx
  0005d	e8 00 00 00 00	 call	 PyMem_Malloc
  00062	48 8b d8	 mov	 rbx, rax

; 253  :     if (!buf) {

  00065	48 85 c0	 test	 rax, rax
  00068	75 07		 jne	 SHORT $LN5@PyLocale_s@3

; 254  :         PyErr_NoMemory();

  0006a	e8 00 00 00 00	 call	 PyErr_NoMemory

; 255  :         goto exit;

  0006f	eb 6f		 jmp	 SHORT $LN2@PyLocale_s@3
$LN5@PyLocale_s@3:

; 256  :     }
; 257  :     n2 = wcsxfrm(buf, s, n1);

  00071	4c 8b 44 24 50	 mov	 r8, QWORD PTR n1$[rsp]
  00076	48 8b d7	 mov	 rdx, rdi
  00079	48 8b c8	 mov	 rcx, rax
  0007c	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcsxfrm
  00087	48 8b f0	 mov	 rsi, rax

; 258  :     if (n2 >= (size_t)n1) {

  0008a	48 3b 44 24 50	 cmp	 rax, QWORD PTR n1$[rsp]
  0008f	72 2f		 jb	 SHORT $LN4@PyLocale_s@3

; 259  :         /* more space needed */
; 260  :         wchar_t * new_buf = PyMem_Realloc(buf, (n2+1)*sizeof(wchar_t));

  00091	48 8d 54 00 02	 lea	 rdx, QWORD PTR [rax+rax+2]
  00096	48 8b cb	 mov	 rcx, rbx
  00099	e8 00 00 00 00	 call	 PyMem_Realloc

; 261  :         if (!new_buf) {

  0009e	48 85 c0	 test	 rax, rax
  000a1	75 07		 jne	 SHORT $LN3@PyLocale_s@3

; 262  :             PyErr_NoMemory();

  000a3	e8 00 00 00 00	 call	 PyErr_NoMemory

; 263  :             goto exit;

  000a8	eb 24		 jmp	 SHORT $exit$63822
$LN3@PyLocale_s@3:

; 264  :         }
; 265  :         buf = new_buf;
; 266  :         n2 = wcsxfrm(buf, s, n2+1);

  000aa	4c 8d 46 01	 lea	 r8, QWORD PTR [rsi+1]
  000ae	48 8b d7	 mov	 rdx, rdi
  000b1	48 8b c8	 mov	 rcx, rax
  000b4	48 8b d8	 mov	 rbx, rax
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcsxfrm
  000bd	48 8b f0	 mov	 rsi, rax
$LN4@PyLocale_s@3:

; 267  :     }
; 268  :     result = PyUnicode_FromWideChar(buf, n2);

  000c0	48 8b d6	 mov	 rdx, rsi
  000c3	48 8b cb	 mov	 rcx, rbx
  000c6	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  000cb	48 8b e8	 mov	 rbp, rax
$exit$63822:

; 269  : exit:
; 270  :     if (buf)

  000ce	48 8b 74 24 28	 mov	 rsi, QWORD PTR [rsp+40]
  000d3	48 85 db	 test	 rbx, rbx
  000d6	74 08		 je	 SHORT $LN2@PyLocale_s@3

; 271  :         PyMem_Free(buf);

  000d8	48 8b cb	 mov	 rcx, rbx
  000db	e8 00 00 00 00	 call	 PyMem_Free
$LN2@PyLocale_s@3:

; 272  :     if (s)
; 273  :         PyMem_Free(s);

  000e0	48 8b cf	 mov	 rcx, rdi
  000e3	e8 00 00 00 00	 call	 PyMem_Free
  000e8	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN1@PyLocale_s@3:

; 274  :     return result;

  000ed	48 8b c5	 mov	 rax, rbp
  000f0	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 275  : }

  000f5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f9	5d		 pop	 rbp
  000fa	c3		 ret	 0
PyLocale_strxfrm ENDP
_TEXT	ENDS
PUBLIC	??_C@_02HPGKMGCF@Os?$AA@			; `string'
PUBLIC	??_C@_02FCBLNKNB@ss?$AA@			; `string'
PUBLIC	??_C@_04LDGHIPEL@cp?$CFd?$AA@			; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	_Py_BuildValue_SizeT:PROC
EXTRN	__imp_GetLocaleInfoA:PROC
EXTRN	PyOS_snprintf:PROC
EXTRN	__imp_GetACP:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyLocale_getdefaultlocale DD imagerel PyLocale_getdefaultlocale
	DD	imagerel PyLocale_getdefaultlocale+77
	DD	imagerel $unwind$PyLocale_getdefaultlocale
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyLocale_getdefaultlocale DD imagerel PyLocale_getdefaultlocale+77
	DD	imagerel PyLocale_getdefaultlocale+136
	DD	imagerel $chain$0$PyLocale_getdefaultlocale
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyLocale_getdefaultlocale DD imagerel PyLocale_getdefaultlocale+136
	DD	imagerel PyLocale_getdefaultlocale+312
	DD	imagerel $chain$1$PyLocale_getdefaultlocale
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyLocale_getdefaultlocale DD 021H
	DD	imagerel PyLocale_getdefaultlocale
	DD	imagerel PyLocale_getdefaultlocale+77
	DD	imagerel $unwind$PyLocale_getdefaultlocale
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyLocale_getdefaultlocale DD 020821H
	DD	0247408H
	DD	imagerel PyLocale_getdefaultlocale
	DD	imagerel PyLocale_getdefaultlocale+77
	DD	imagerel $unwind$PyLocale_getdefaultlocale
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyLocale_getdefaultlocale DD 030901H
	DD	0220109H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_02HPGKMGCF@Os?$AA@
CONST	SEGMENT
??_C@_02HPGKMGCF@Os?$AA@ DB 'Os', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FCBLNKNB@ss?$AA@
CONST	SEGMENT
??_C@_02FCBLNKNB@ss?$AA@ DB 'ss', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LDGHIPEL@cp?$CFd?$AA@
CONST	SEGMENT
??_C@_04LDGHIPEL@cp?$CFd?$AA@ DB 'cp%d', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_localemodule.c
CONST	ENDS
;	COMDAT PyLocale_getdefaultlocale
_TEXT	SEGMENT
locale$ = 48
encoding$ = 160
self$ = 288
PyLocale_getdefaultlocale PROC				; COMDAT

; 281  : {

  00000	40 53		 push	 rbx
  00002	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H

; 282  :     char encoding[100];
; 283  :     char locale[100];
; 284  : 
; 285  :     PyOS_snprintf(encoding, sizeof(encoding), "cp%d", GetACP());

  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetACP
  0000f	bb 64 00 00 00	 mov	 ebx, 100		; 00000064H
  00014	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04LDGHIPEL@cp?$CFd?$AA@
  0001b	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR encoding$[rsp]
  00023	8b d3		 mov	 edx, ebx
  00025	44 8b c8	 mov	 r9d, eax
  00028	e8 00 00 00 00	 call	 PyOS_snprintf

; 286  : 
; 287  :     if (GetLocaleInfo(LOCALE_USER_DEFAULT,
; 288  :                       LOCALE_SISO639LANGNAME,
; 289  :                       locale, sizeof(locale))) {

  0002d	4c 8d 44 24 30	 lea	 r8, QWORD PTR locale$[rsp]
  00032	8d 53 f5	 lea	 edx, QWORD PTR [rbx-11]
  00035	44 8b cb	 mov	 r9d, ebx
  00038	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLocaleInfoA
  00043	85 c0		 test	 eax, eax
  00045	74 63		 je	 SHORT $LN2@PyLocale_g

; 290  :         Py_ssize_t i = strlen(locale);

  00047	48 83 c9 ff	 or	 rcx, -1
  0004b	33 c0		 xor	 eax, eax
  0004d	48 89 bc 24 20
	01 00 00	 mov	 QWORD PTR [rsp+288], rdi
  00055	48 8d 7c 24 30	 lea	 rdi, QWORD PTR locale$[rsp]

; 291  :         locale[i++] = '_';
; 292  :         if (GetLocaleInfo(LOCALE_USER_DEFAULT,
; 293  :                           LOCALE_SISO3166CTRYNAME,
; 294  :                           locale+i, (int)(sizeof(locale)-i)))

  0005a	8d 50 5a	 lea	 edx, QWORD PTR [rax+90]
  0005d	f2 ae		 repne scasb
  0005f	48 f7 d1	 not	 rcx
  00062	2b d9		 sub	 ebx, ecx
  00064	4c 8d 44 0c 30	 lea	 r8, QWORD PTR locale$[rsp+rcx]
  00069	c6 44 0c 2f 5f	 mov	 BYTE PTR locale$[rsp+rcx-1], 95 ; 0000005fH
  0006e	44 8b cb	 mov	 r9d, ebx
  00071	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLocaleInfoA
  0007c	48 8b bc 24 20
	01 00 00	 mov	 rdi, QWORD PTR [rsp+288]
  00084	85 c0		 test	 eax, eax
  00086	74 22		 je	 SHORT $LN2@PyLocale_g
$LN11@PyLocale_g:

; 295  :             return Py_BuildValue("ss", locale, encoding);

  00088	48 8d 54 24 30	 lea	 rdx, QWORD PTR locale$[rsp]
  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02FCBLNKNB@ss?$AA@

; 311  :     return Py_BuildValue("Os", Py_None, encoding);

  00094	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR encoding$[rsp]
  0009c	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT

; 312  : }

  000a1	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  000a8	5b		 pop	 rbx
  000a9	c3		 ret	 0
$LN2@PyLocale_g:

; 296  :     }
; 297  : 
; 298  :     /* If we end up here, this windows version didn't know about
; 299  :        ISO639/ISO3166 names (it's probably Windows 95).  Return the
; 300  :        Windows language identifier instead (a hexadecimal number) */
; 301  : 
; 302  :     locale[0] = '0';
; 303  :     locale[1] = 'x';
; 304  :     if (GetLocaleInfo(LOCALE_USER_DEFAULT, LOCALE_IDEFAULTLANGUAGE,
; 305  :                       locale+2, sizeof(locale)-2)) {

  000aa	41 b9 62 00 00
	00		 mov	 r9d, 98			; 00000062H
  000b0	4c 8d 44 24 32	 lea	 r8, QWORD PTR locale$[rsp+2]
  000b5	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  000ba	41 8d 51 a7	 lea	 edx, QWORD PTR [r9-89]
  000be	66 c7 44 24 30
	30 78		 mov	 WORD PTR locale$[rsp], 30768 ; 00007830H
  000c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLocaleInfoA
  000cb	85 c0		 test	 eax, eax

; 306  :         return Py_BuildValue("ss", locale, encoding);

  000cd	75 b9		 jne	 SHORT $LN11@PyLocale_g

; 307  :     }
; 308  : 
; 309  :     /* cannot determine the language code (very unlikely) */
; 310  :     Py_INCREF(Py_None);

  000cf	e8 00 00 00 00	 call	 _Py_PXCTX
  000d4	85 c0		 test	 eax, eax
  000d6	75 3c		 jne	 SHORT $LN7@PyLocale_g
  000d8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000ed	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000f3	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000fb	e8 00 00 00 00	 call	 _PyParallel_Guard
  00100	85 c0		 test	 eax, eax
  00102	75 09		 jne	 SHORT $LN6@PyLocale_g
  00104	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0010b	74 07		 je	 SHORT $LN7@PyLocale_g
$LN6@PyLocale_g:
  0010d	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@PyLocale_g:

; 311  :     return Py_BuildValue("Os", Py_None, encoding);

  00114	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  0011b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02HPGKMGCF@Os?$AA@
  00122	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR encoding$[rsp]
  0012a	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT

; 312  : }

  0012f	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  00136	5b		 pop	 rbx
  00137	c3		 ret	 0
PyLocale_getdefaultlocale ENDP
_TEXT	ENDS
PUBLIC	??_C@_05NAOIJFC@Error?$AA@			; `string'
PUBLIC	??_C@_0N@DHPKPPHG@locale?4Error?$AA@		; `string'
PUBLIC	??_C@_08HHKMDCKL@CHAR_MAX?$AA@			; `string'
PUBLIC	??_C@_06NEFDFEKB@LC_ALL?$AA@			; `string'
PUBLIC	??_C@_0L@DLHIECNL@LC_NUMERIC?$AA@		; `string'
PUBLIC	??_C@_0M@MIENIKLA@LC_MONETARY?$AA@		; `string'
PUBLIC	??_C@_0L@KFJHEKIK@LC_COLLATE?$AA@		; `string'
PUBLIC	??_C@_07LCBHPJJN@LC_TIME?$AA@			; `string'
PUBLIC	??_C@_08EADHIDAD@LC_CTYPE?$AA@			; `string'
PUBLIC	PyInit__locale
EXTRN	PyErr_NewException:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_Create2:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyInit__locale DD imagerel $LN109
	DD	imagerel $LN109+1075
	DD	imagerel $unwind$PyInit__locale
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__locale DD 063201H
	DD	097432H
	DD	08342dH
	DD	060025206H
xdata	ENDS
;	COMDAT ??_C@_05NAOIJFC@Error?$AA@
CONST	SEGMENT
??_C@_05NAOIJFC@Error?$AA@ DB 'Error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DHPKPPHG@locale?4Error?$AA@
CONST	SEGMENT
??_C@_0N@DHPKPPHG@locale?4Error?$AA@ DB 'locale.Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HHKMDCKL@CHAR_MAX?$AA@
CONST	SEGMENT
??_C@_08HHKMDCKL@CHAR_MAX?$AA@ DB 'CHAR_MAX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NEFDFEKB@LC_ALL?$AA@
CONST	SEGMENT
??_C@_06NEFDFEKB@LC_ALL?$AA@ DB 'LC_ALL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DLHIECNL@LC_NUMERIC?$AA@
CONST	SEGMENT
??_C@_0L@DLHIECNL@LC_NUMERIC?$AA@ DB 'LC_NUMERIC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MIENIKLA@LC_MONETARY?$AA@
CONST	SEGMENT
??_C@_0M@MIENIKLA@LC_MONETARY?$AA@ DB 'LC_MONETARY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KFJHEKIK@LC_COLLATE?$AA@
CONST	SEGMENT
??_C@_0L@KFJHEKIK@LC_COLLATE?$AA@ DB 'LC_COLLATE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LCBHPJJN@LC_TIME?$AA@
CONST	SEGMENT
??_C@_07LCBHPJJN@LC_TIME?$AA@ DB 'LC_TIME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EADHIDAD@LC_CTYPE?$AA@
CONST	SEGMENT
??_C@_08EADHIDAD@LC_CTYPE?$AA@ DB 'LC_CTYPE', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_localemodule.c
CONST	ENDS
;	COMDAT PyInit__locale
_TEXT	SEGMENT
PyInit__locale PROC					; COMDAT

; 618  : {

$LN109:
  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 619  :     PyObject *m, *d, *x;
; 620  : #ifdef HAVE_LANGINFO_H
; 621  :     int i;
; 622  : #endif
; 623  : 
; 624  :     m = PyModule_Create(&_localemodule);

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_localemodule
  0000d	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00012	e8 00 00 00 00	 call	 PyModule_Create2
  00017	48 8b f0	 mov	 rsi, rax

; 625  :     if (m == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	75 06		 jne	 SHORT $LN29@PyInit__lo

; 674  : }

  0001f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00023	5e		 pop	 rsi
  00024	c3		 ret	 0
$LN29@PyInit__lo:

; 626  :     return NULL;
; 627  : 
; 628  :     d = PyModule_GetDict(m);

  00025	48 8b c8	 mov	 rcx, rax
  00028	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0002d	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00032	e8 00 00 00 00	 call	 PyModule_GetDict

; 629  : 
; 630  :     x = PyLong_FromLong(LC_CTYPE);

  00037	b9 02 00 00 00	 mov	 ecx, 2
  0003c	48 8b f8	 mov	 rdi, rax
  0003f	e8 00 00 00 00	 call	 PyLong_FromLong

; 631  :     PyDict_SetItemString(d, "LC_CTYPE", x);

  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EADHIDAD@LC_CTYPE?$AA@
  0004b	4c 8b c0	 mov	 r8, rax
  0004e	48 8b cf	 mov	 rcx, rdi
  00051	48 8b d8	 mov	 rbx, rax
  00054	e8 00 00 00 00	 call	 PyDict_SetItemString

; 632  :     Py_XDECREF(x);

  00059	48 85 db	 test	 rbx, rbx
  0005c	74 65		 je	 SHORT $LN27@PyInit__lo
  0005e	e8 00 00 00 00	 call	 _Py_PXCTX
  00063	85 c0		 test	 eax, eax
  00065	75 5c		 jne	 SHORT $LN27@PyInit__lo
  00067	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0006b	a8 20		 test	 al, 32			; 00000020H
  0006d	75 4c		 jne	 SHORT $LN36@PyInit__lo
  0006f	84 c0		 test	 al, al
  00071	78 48		 js	 SHORT $LN36@PyInit__lo
  00073	a8 02		 test	 al, 2
  00075	75 4c		 jne	 SHORT $LN27@PyInit__lo
  00077	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0007b	75 46		 jne	 SHORT $LN27@PyInit__lo
  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00084	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0008b	4c 8b cb	 mov	 r9, rbx
  0008e	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00094	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0009c	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a1	48 8b cb	 mov	 rcx, rbx
  000a4	85 c0		 test	 eax, eax
  000a6	74 07		 je	 SHORT $LN41@PyInit__lo
  000a8	e8 00 00 00 00	 call	 _Px_Dealloc
  000ad	eb 14		 jmp	 SHORT $LN27@PyInit__lo
$LN41@PyInit__lo:
  000af	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000b3	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000b9	eb 08		 jmp	 SHORT $LN27@PyInit__lo
$LN36@PyInit__lo:
  000bb	48 8b cb	 mov	 rcx, rbx
  000be	e8 00 00 00 00	 call	 Px_DecRef
$LN27@PyInit__lo:

; 633  : 
; 634  :     x = PyLong_FromLong(LC_TIME);

  000c3	b9 05 00 00 00	 mov	 ecx, 5
  000c8	e8 00 00 00 00	 call	 PyLong_FromLong

; 635  :     PyDict_SetItemString(d, "LC_TIME", x);

  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07LCBHPJJN@LC_TIME?$AA@
  000d4	48 8b cf	 mov	 rcx, rdi
  000d7	4c 8b c0	 mov	 r8, rax
  000da	48 8b d8	 mov	 rbx, rax
  000dd	e8 00 00 00 00	 call	 PyDict_SetItemString

; 636  :     Py_XDECREF(x);

  000e2	48 85 db	 test	 rbx, rbx
  000e5	74 65		 je	 SHORT $LN23@PyInit__lo
  000e7	e8 00 00 00 00	 call	 _Py_PXCTX
  000ec	85 c0		 test	 eax, eax
  000ee	75 5c		 jne	 SHORT $LN23@PyInit__lo
  000f0	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000f4	a8 20		 test	 al, 32			; 00000020H
  000f6	75 4c		 jne	 SHORT $LN47@PyInit__lo
  000f8	84 c0		 test	 al, al
  000fa	78 48		 js	 SHORT $LN47@PyInit__lo
  000fc	a8 02		 test	 al, 2
  000fe	75 4c		 jne	 SHORT $LN23@PyInit__lo
  00100	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00104	75 46		 jne	 SHORT $LN23@PyInit__lo
  00106	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0010d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00114	4c 8b cb	 mov	 r9, rbx
  00117	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0011d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00125	e8 00 00 00 00	 call	 _PyParallel_Guard
  0012a	48 8b cb	 mov	 rcx, rbx
  0012d	85 c0		 test	 eax, eax
  0012f	74 07		 je	 SHORT $LN52@PyInit__lo
  00131	e8 00 00 00 00	 call	 _Px_Dealloc
  00136	eb 14		 jmp	 SHORT $LN23@PyInit__lo
$LN52@PyInit__lo:
  00138	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0013c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00142	eb 08		 jmp	 SHORT $LN23@PyInit__lo
$LN47@PyInit__lo:
  00144	48 8b cb	 mov	 rcx, rbx
  00147	e8 00 00 00 00	 call	 Px_DecRef
$LN23@PyInit__lo:

; 637  : 
; 638  :     x = PyLong_FromLong(LC_COLLATE);

  0014c	b9 01 00 00 00	 mov	 ecx, 1
  00151	e8 00 00 00 00	 call	 PyLong_FromLong

; 639  :     PyDict_SetItemString(d, "LC_COLLATE", x);

  00156	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@KFJHEKIK@LC_COLLATE?$AA@
  0015d	48 8b cf	 mov	 rcx, rdi
  00160	4c 8b c0	 mov	 r8, rax
  00163	48 8b d8	 mov	 rbx, rax
  00166	e8 00 00 00 00	 call	 PyDict_SetItemString

; 640  :     Py_XDECREF(x);

  0016b	48 85 db	 test	 rbx, rbx
  0016e	74 65		 je	 SHORT $LN19@PyInit__lo
  00170	e8 00 00 00 00	 call	 _Py_PXCTX
  00175	85 c0		 test	 eax, eax
  00177	75 5c		 jne	 SHORT $LN19@PyInit__lo
  00179	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0017d	a8 20		 test	 al, 32			; 00000020H
  0017f	75 4c		 jne	 SHORT $LN58@PyInit__lo
  00181	84 c0		 test	 al, al
  00183	78 48		 js	 SHORT $LN58@PyInit__lo
  00185	a8 02		 test	 al, 2
  00187	75 4c		 jne	 SHORT $LN19@PyInit__lo
  00189	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0018d	75 46		 jne	 SHORT $LN19@PyInit__lo
  0018f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00196	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0019d	4c 8b cb	 mov	 r9, rbx
  001a0	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001a6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001ae	e8 00 00 00 00	 call	 _PyParallel_Guard
  001b3	48 8b cb	 mov	 rcx, rbx
  001b6	85 c0		 test	 eax, eax
  001b8	74 07		 je	 SHORT $LN63@PyInit__lo
  001ba	e8 00 00 00 00	 call	 _Px_Dealloc
  001bf	eb 14		 jmp	 SHORT $LN19@PyInit__lo
$LN63@PyInit__lo:
  001c1	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001c5	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001cb	eb 08		 jmp	 SHORT $LN19@PyInit__lo
$LN58@PyInit__lo:
  001cd	48 8b cb	 mov	 rcx, rbx
  001d0	e8 00 00 00 00	 call	 Px_DecRef
$LN19@PyInit__lo:

; 641  : 
; 642  :     x = PyLong_FromLong(LC_MONETARY);

  001d5	b9 03 00 00 00	 mov	 ecx, 3
  001da	e8 00 00 00 00	 call	 PyLong_FromLong

; 643  :     PyDict_SetItemString(d, "LC_MONETARY", x);

  001df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@MIENIKLA@LC_MONETARY?$AA@
  001e6	48 8b cf	 mov	 rcx, rdi
  001e9	4c 8b c0	 mov	 r8, rax
  001ec	48 8b d8	 mov	 rbx, rax
  001ef	e8 00 00 00 00	 call	 PyDict_SetItemString

; 644  :     Py_XDECREF(x);

  001f4	48 85 db	 test	 rbx, rbx
  001f7	74 65		 je	 SHORT $LN15@PyInit__lo
  001f9	e8 00 00 00 00	 call	 _Py_PXCTX
  001fe	85 c0		 test	 eax, eax
  00200	75 5c		 jne	 SHORT $LN15@PyInit__lo
  00202	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00206	a8 20		 test	 al, 32			; 00000020H
  00208	75 4c		 jne	 SHORT $LN69@PyInit__lo
  0020a	84 c0		 test	 al, al
  0020c	78 48		 js	 SHORT $LN69@PyInit__lo
  0020e	a8 02		 test	 al, 2
  00210	75 4c		 jne	 SHORT $LN15@PyInit__lo
  00212	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00216	75 46		 jne	 SHORT $LN15@PyInit__lo
  00218	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0021f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00226	4c 8b cb	 mov	 r9, rbx
  00229	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0022f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00237	e8 00 00 00 00	 call	 _PyParallel_Guard
  0023c	48 8b cb	 mov	 rcx, rbx
  0023f	85 c0		 test	 eax, eax
  00241	74 07		 je	 SHORT $LN74@PyInit__lo
  00243	e8 00 00 00 00	 call	 _Px_Dealloc
  00248	eb 14		 jmp	 SHORT $LN15@PyInit__lo
$LN74@PyInit__lo:
  0024a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0024e	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00254	eb 08		 jmp	 SHORT $LN15@PyInit__lo
$LN69@PyInit__lo:
  00256	48 8b cb	 mov	 rcx, rbx
  00259	e8 00 00 00 00	 call	 Px_DecRef
$LN15@PyInit__lo:

; 645  : 
; 646  : #ifdef LC_MESSAGES
; 647  :     x = PyLong_FromLong(LC_MESSAGES);
; 648  :     PyDict_SetItemString(d, "LC_MESSAGES", x);
; 649  :     Py_XDECREF(x);
; 650  : #endif /* LC_MESSAGES */
; 651  : 
; 652  :     x = PyLong_FromLong(LC_NUMERIC);

  0025e	b9 04 00 00 00	 mov	 ecx, 4
  00263	e8 00 00 00 00	 call	 PyLong_FromLong

; 653  :     PyDict_SetItemString(d, "LC_NUMERIC", x);

  00268	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DLHIECNL@LC_NUMERIC?$AA@
  0026f	48 8b cf	 mov	 rcx, rdi
  00272	4c 8b c0	 mov	 r8, rax
  00275	48 8b d8	 mov	 rbx, rax
  00278	e8 00 00 00 00	 call	 PyDict_SetItemString

; 654  :     Py_XDECREF(x);

  0027d	48 85 db	 test	 rbx, rbx
  00280	74 65		 je	 SHORT $LN11@PyInit__lo
  00282	e8 00 00 00 00	 call	 _Py_PXCTX
  00287	85 c0		 test	 eax, eax
  00289	75 5c		 jne	 SHORT $LN11@PyInit__lo
  0028b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0028f	a8 20		 test	 al, 32			; 00000020H
  00291	75 4c		 jne	 SHORT $LN80@PyInit__lo
  00293	84 c0		 test	 al, al
  00295	78 48		 js	 SHORT $LN80@PyInit__lo
  00297	a8 02		 test	 al, 2
  00299	75 4c		 jne	 SHORT $LN11@PyInit__lo
  0029b	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0029f	75 46		 jne	 SHORT $LN11@PyInit__lo
  002a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  002af	4c 8b cb	 mov	 r9, rbx
  002b2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002b8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002c0	e8 00 00 00 00	 call	 _PyParallel_Guard
  002c5	48 8b cb	 mov	 rcx, rbx
  002c8	85 c0		 test	 eax, eax
  002ca	74 07		 je	 SHORT $LN85@PyInit__lo
  002cc	e8 00 00 00 00	 call	 _Px_Dealloc
  002d1	eb 14		 jmp	 SHORT $LN11@PyInit__lo
$LN85@PyInit__lo:
  002d3	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  002d7	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002dd	eb 08		 jmp	 SHORT $LN11@PyInit__lo
$LN80@PyInit__lo:
  002df	48 8b cb	 mov	 rcx, rbx
  002e2	e8 00 00 00 00	 call	 Px_DecRef
$LN11@PyInit__lo:

; 655  : 
; 656  :     x = PyLong_FromLong(LC_ALL);

  002e7	33 c9		 xor	 ecx, ecx
  002e9	e8 00 00 00 00	 call	 PyLong_FromLong

; 657  :     PyDict_SetItemString(d, "LC_ALL", x);

  002ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06NEFDFEKB@LC_ALL?$AA@
  002f5	48 8b cf	 mov	 rcx, rdi
  002f8	4c 8b c0	 mov	 r8, rax
  002fb	48 8b d8	 mov	 rbx, rax
  002fe	e8 00 00 00 00	 call	 PyDict_SetItemString

; 658  :     Py_XDECREF(x);

  00303	48 85 db	 test	 rbx, rbx
  00306	74 65		 je	 SHORT $LN7@PyInit__lo
  00308	e8 00 00 00 00	 call	 _Py_PXCTX
  0030d	85 c0		 test	 eax, eax
  0030f	75 5c		 jne	 SHORT $LN7@PyInit__lo
  00311	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00315	a8 20		 test	 al, 32			; 00000020H
  00317	75 4c		 jne	 SHORT $LN91@PyInit__lo
  00319	84 c0		 test	 al, al
  0031b	78 48		 js	 SHORT $LN91@PyInit__lo
  0031d	a8 02		 test	 al, 2
  0031f	75 4c		 jne	 SHORT $LN7@PyInit__lo
  00321	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00325	75 46		 jne	 SHORT $LN7@PyInit__lo
  00327	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0032e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00335	4c 8b cb	 mov	 r9, rbx
  00338	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0033e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00346	e8 00 00 00 00	 call	 _PyParallel_Guard
  0034b	48 8b cb	 mov	 rcx, rbx
  0034e	85 c0		 test	 eax, eax
  00350	74 07		 je	 SHORT $LN96@PyInit__lo
  00352	e8 00 00 00 00	 call	 _Px_Dealloc
  00357	eb 14		 jmp	 SHORT $LN7@PyInit__lo
$LN96@PyInit__lo:
  00359	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0035d	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00363	eb 08		 jmp	 SHORT $LN7@PyInit__lo
$LN91@PyInit__lo:
  00365	48 8b cb	 mov	 rcx, rbx
  00368	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyInit__lo:

; 659  : 
; 660  :     x = PyLong_FromLong(CHAR_MAX);

  0036d	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00372	e8 00 00 00 00	 call	 PyLong_FromLong

; 661  :     PyDict_SetItemString(d, "CHAR_MAX", x);

  00377	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08HHKMDCKL@CHAR_MAX?$AA@
  0037e	48 8b cf	 mov	 rcx, rdi
  00381	4c 8b c0	 mov	 r8, rax
  00384	48 8b d8	 mov	 rbx, rax
  00387	e8 00 00 00 00	 call	 PyDict_SetItemString

; 662  :     Py_XDECREF(x);

  0038c	48 85 db	 test	 rbx, rbx
  0038f	74 65		 je	 SHORT $LN3@PyInit__lo
  00391	e8 00 00 00 00	 call	 _Py_PXCTX
  00396	85 c0		 test	 eax, eax
  00398	75 5c		 jne	 SHORT $LN3@PyInit__lo
  0039a	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0039e	a8 20		 test	 al, 32			; 00000020H
  003a0	75 4c		 jne	 SHORT $LN102@PyInit__lo
  003a2	84 c0		 test	 al, al
  003a4	78 48		 js	 SHORT $LN102@PyInit__lo
  003a6	a8 02		 test	 al, 2
  003a8	75 4c		 jne	 SHORT $LN3@PyInit__lo
  003aa	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  003ae	75 46		 jne	 SHORT $LN3@PyInit__lo
  003b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  003be	4c 8b cb	 mov	 r9, rbx
  003c1	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  003c7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003cf	e8 00 00 00 00	 call	 _PyParallel_Guard
  003d4	48 8b cb	 mov	 rcx, rbx
  003d7	85 c0		 test	 eax, eax
  003d9	74 07		 je	 SHORT $LN107@PyInit__lo
  003db	e8 00 00 00 00	 call	 _Px_Dealloc
  003e0	eb 14		 jmp	 SHORT $LN3@PyInit__lo
$LN107@PyInit__lo:
  003e2	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  003e6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003ec	eb 08		 jmp	 SHORT $LN3@PyInit__lo
$LN102@PyInit__lo:
  003ee	48 8b cb	 mov	 rcx, rbx
  003f1	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyInit__lo:

; 663  : 
; 664  :     Error = PyErr_NewException("locale.Error", NULL, NULL);

  003f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DHPKPPHG@locale?4Error?$AA@
  003fd	45 33 c0	 xor	 r8d, r8d
  00400	33 d2		 xor	 edx, edx
  00402	e8 00 00 00 00	 call	 PyErr_NewException

; 665  :     PyDict_SetItemString(d, "Error", Error);

  00407	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05NAOIJFC@Error?$AA@
  0040e	48 8b cf	 mov	 rcx, rdi
  00411	4c 8b c0	 mov	 r8, rax
  00414	48 89 05 00 00
	00 00		 mov	 QWORD PTR Error, rax
  0041b	e8 00 00 00 00	 call	 PyDict_SetItemString
  00420	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00425	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 666  : 
; 667  : #ifdef HAVE_LANGINFO_H
; 668  :     for (i = 0; langinfo_constants[i].name; i++) {
; 669  :         PyModule_AddIntConstant(m, langinfo_constants[i].name,
; 670  :                                 langinfo_constants[i].value);
; 671  :     }
; 672  : #endif
; 673  :     return m;

  0042a	48 8b c6	 mov	 rax, rsi

; 674  : }

  0042d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00431	5e		 pop	 rsi
  00432	c3		 ret	 0
PyInit__locale ENDP
_TEXT	ENDS
END
