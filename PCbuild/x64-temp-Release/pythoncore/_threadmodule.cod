; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07CNDFADNJ@_thread?$AA@			; `string'
PUBLIC	??_C@_0L@NELPJPHD@stack_size?$AA@		; `string'
PUBLIC	??_C@_06HHPHCOMB@_count?$AA@			; `string'
PUBLIC	??_C@_09ICJGJIKJ@get_ident?$AA@			; `string'
PUBLIC	??_C@_0P@GILDALKM@interrupt_main?$AA@		; `string'
PUBLIC	??_C@_04MKNBDEPB@exit?$AA@			; `string'
PUBLIC	??_C@_0M@EHGPAPBC@exit_thread?$AA@		; `string'
PUBLIC	??_C@_08HGGEJCMJ@allocate?$AA@			; `string'
PUBLIC	??_C@_0O@MLDABOCH@allocate_lock?$AA@		; `string'
PUBLIC	??_C@_09BEJJCLOL@start_new?$AA@			; `string'
PUBLIC	??_C@_0BB@NIEJKBPO@start_new_thread?$AA@	; `string'
PUBLIC	??_C@_0BC@GKOPAEKP@Thread?9local?5data?$AA@	; `string'
PUBLIC	??_C@_0P@HHKNGPPL@_thread?4_local?$AA@		; `string'
PUBLIC	??_C@_0BG@MBDGPDAK@_localdummy_destroyed?$AA@	; `string'
PUBLIC	??_C@_0BD@JJFEDPB@Thread?9local?5dummy?$AA@	; `string'
PUBLIC	??_C@_0BE@DIJGDAPK@_thread?4_localdummy?$AA@	; `string'
PUBLIC	??_C@_0O@GJOLJECC@_thread?4RLock?$AA@		; `string'
PUBLIC	??_C@_0O@GAANLLMC@_release_save?$AA@		; `string'
PUBLIC	??_C@_0BB@LNGBJLEI@_acquire_restore?$AA@	; `string'
PUBLIC	??_C@_09HFMMNEJG@_is_owned?$AA@			; `string'
PUBLIC	??_C@_0N@FKGDBBBI@_thread?4lock?$AA@		; `string'
PUBLIC	??_C@_08CMFIGCJD@__exit__?$AA@			; `string'
PUBLIC	??_C@_09OAJHKKGH@__enter__?$AA@			; `string'
PUBLIC	??_C@_06KKBPGBGI@locked?$AA@			; `string'
PUBLIC	??_C@_0M@GHINBMOK@locked_lock?$AA@		; `string'
PUBLIC	??_C@_07EOGFDLKI@release?$AA@			; `string'
PUBLIC	??_C@_0N@EJFMMAJJ@release_lock?$AA@		; `string'
PUBLIC	??_C@_07MEFPPMEF@acquire?$AA@			; `string'
PUBLIC	??_C@_0N@JKBCAFMP@acquire_lock?$AA@		; `string'
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
nb_threads DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_07CNDFADNJ@_thread?$AA@
CONST	SEGMENT
??_C@_07CNDFADNJ@_thread?$AA@ DB '_thread', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NELPJPHD@stack_size?$AA@
CONST	SEGMENT
??_C@_0L@NELPJPHD@stack_size?$AA@ DB 'stack_size', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HHPHCOMB@_count?$AA@
CONST	SEGMENT
??_C@_06HHPHCOMB@_count?$AA@ DB '_count', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09ICJGJIKJ@get_ident?$AA@
CONST	SEGMENT
??_C@_09ICJGJIKJ@get_ident?$AA@ DB 'get_ident', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GILDALKM@interrupt_main?$AA@
CONST	SEGMENT
??_C@_0P@GILDALKM@interrupt_main?$AA@ DB 'interrupt_main', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MKNBDEPB@exit?$AA@
CONST	SEGMENT
??_C@_04MKNBDEPB@exit?$AA@ DB 'exit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EHGPAPBC@exit_thread?$AA@
CONST	SEGMENT
??_C@_0M@EHGPAPBC@exit_thread?$AA@ DB 'exit_thread', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGGEJCMJ@allocate?$AA@
CONST	SEGMENT
??_C@_08HGGEJCMJ@allocate?$AA@ DB 'allocate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MLDABOCH@allocate_lock?$AA@
CONST	SEGMENT
??_C@_0O@MLDABOCH@allocate_lock?$AA@ DB 'allocate_lock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BEJJCLOL@start_new?$AA@
CONST	SEGMENT
??_C@_09BEJJCLOL@start_new?$AA@ DB 'start_new', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NIEJKBPO@start_new_thread?$AA@
CONST	SEGMENT
??_C@_0BB@NIEJKBPO@start_new_thread?$AA@ DB 'start_new_thread', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GKOPAEKP@Thread?9local?5data?$AA@
CONST	SEGMENT
??_C@_0BC@GKOPAEKP@Thread?9local?5data?$AA@ DB 'Thread-local data', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HHKNGPPL@_thread?4_local?$AA@
CONST	SEGMENT
??_C@_0P@HHKNGPPL@_thread?4_local?$AA@ DB '_thread._local', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MBDGPDAK@_localdummy_destroyed?$AA@
CONST	SEGMENT
??_C@_0BG@MBDGPDAK@_localdummy_destroyed?$AA@ DB '_localdummy_destroyed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JJFEDPB@Thread?9local?5dummy?$AA@
CONST	SEGMENT
??_C@_0BD@JJFEDPB@Thread?9local?5dummy?$AA@ DB 'Thread-local dummy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DIJGDAPK@_thread?4_localdummy?$AA@
CONST	SEGMENT
??_C@_0BE@DIJGDAPK@_thread?4_localdummy?$AA@ DB '_thread._localdummy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GJOLJECC@_thread?4RLock?$AA@
CONST	SEGMENT
??_C@_0O@GJOLJECC@_thread?4RLock?$AA@ DB '_thread.RLock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GAANLLMC@_release_save?$AA@
CONST	SEGMENT
??_C@_0O@GAANLLMC@_release_save?$AA@ DB '_release_save', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LNGBJLEI@_acquire_restore?$AA@
CONST	SEGMENT
??_C@_0BB@LNGBJLEI@_acquire_restore?$AA@ DB '_acquire_restore', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HFMMNEJG@_is_owned?$AA@
CONST	SEGMENT
??_C@_09HFMMNEJG@_is_owned?$AA@ DB '_is_owned', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FKGDBBBI@_thread?4lock?$AA@
CONST	SEGMENT
??_C@_0N@FKGDBBBI@_thread?4lock?$AA@ DB '_thread.lock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMFIGCJD@__exit__?$AA@
CONST	SEGMENT
??_C@_08CMFIGCJD@__exit__?$AA@ DB '__exit__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OAJHKKGH@__enter__?$AA@
CONST	SEGMENT
??_C@_09OAJHKKGH@__enter__?$AA@ DB '__enter__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06KKBPGBGI@locked?$AA@
CONST	SEGMENT
??_C@_06KKBPGBGI@locked?$AA@ DB 'locked', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GHINBMOK@locked_lock?$AA@
CONST	SEGMENT
??_C@_0M@GHINBMOK@locked_lock?$AA@ DB 'locked_lock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EOGFDLKI@release?$AA@
CONST	SEGMENT
??_C@_07EOGFDLKI@release?$AA@ DB 'release', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EJFMMAJJ@release_lock?$AA@
CONST	SEGMENT
??_C@_0N@EJFMMAJJ@release_lock?$AA@ DB 'release_lock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEFPPMEF@acquire?$AA@
CONST	SEGMENT
??_C@_07MEFPPMEF@acquire?$AA@ DB 'acquire', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JKBCAFMP@acquire_lock?$AA@
CONST	SEGMENT
??_C@_0N@JKBCAFMP@acquire_lock?$AA@ DB 'acquire_lock', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
acquire_doc DB	'acquire([wait]) -> bool', 0aH, '(acquire_lock() is an ob'
	DB	'solete synonym)', 0aH, 0aH, 'Lock the lock.  Without argument'
	DB	', this blocks if the lock is already', 0aH, 'locked (even by '
	DB	'the same thread), waiting for another thread to release', 0aH
	DB	'the lock, and return True once the lock is acquired.', 0aH, 'W'
	DB	'ith an argument, this will only block if the argument is true'
	DB	',', 0aH, 'and the return value reflects whether the lock is a'
	DB	'cquired.', 0aH, 'The blocking operation is interruptible.', 00H
	ORG $+8
release_doc DB	'release()', 0aH, '(release_lock() is an obsolete synonym'
	DB	')', 0aH, 0aH, 'Release the lock, allowing another thread that'
	DB	' is blocked waiting for', 0aH, 'the lock to acquire the lock.'
	DB	'  The lock must be in the locked state,', 0aH, 'but it needn'''
	DB	't be locked by the same thread that unlocks it.', 00H
	ORG $+5
locked_doc DB	'locked() -> bool', 0aH, '(locked_lock() is an obsolete s'
	DB	'ynonym)', 0aH, 0aH, 'Return whether the lock is in the locked'
	DB	' state.', 00H
	ORG $+7
lock_methods DQ	FLAT:??_C@_0N@JKBCAFMP@acquire_lock?$AA@
	DQ	FLAT:lock_PyThread_acquire_lock
	DD	03H
	ORG $+4
	DQ	FLAT:acquire_doc
	DQ	FLAT:??_C@_07MEFPPMEF@acquire?$AA@
	DQ	FLAT:lock_PyThread_acquire_lock
	DD	03H
	ORG $+4
	DQ	FLAT:acquire_doc
	DQ	FLAT:??_C@_0N@EJFMMAJJ@release_lock?$AA@
	DQ	FLAT:lock_PyThread_release_lock
	DD	04H
	ORG $+4
	DQ	FLAT:release_doc
	DQ	FLAT:??_C@_07EOGFDLKI@release?$AA@
	DQ	FLAT:lock_PyThread_release_lock
	DD	04H
	ORG $+4
	DQ	FLAT:release_doc
	DQ	FLAT:??_C@_0M@GHINBMOK@locked_lock?$AA@
	DQ	FLAT:lock_locked_lock
	DD	04H
	ORG $+4
	DQ	FLAT:locked_doc
	DQ	FLAT:??_C@_06KKBPGBGI@locked?$AA@
	DQ	FLAT:lock_locked_lock
	DD	04H
	ORG $+4
	DQ	FLAT:locked_doc
	DQ	FLAT:??_C@_09OAJHKKGH@__enter__?$AA@
	DQ	FLAT:lock_PyThread_acquire_lock
	DD	03H
	ORG $+4
	DQ	FLAT:acquire_doc
	DQ	FLAT:??_C@_08CMFIGCJD@__exit__?$AA@
	DQ	FLAT:lock_PyThread_release_lock
	DD	01H
	ORG $+4
	DQ	FLAT:release_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
Locktype DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0N@FKGDBBBI@_thread?4lock?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:lock_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000068H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:lock_methods
	ORG $+152
rlock_acquire_doc DB 'acquire(blocking=True) -> bool', 0aH, 0aH, 'Lock th'
	DB	'e lock.  `blocking` indicates whether we should wait', 0aH, 'f'
	DB	'or the lock to be available or not.  If `blocking` is False', 0aH
	DB	'and another thread holds the lock, the method will return Fal'
	DB	'se', 0aH, 'immediately.  If `blocking` is True and another th'
	DB	'read holds', 0aH, 'the lock, the method will wait for the loc'
	DB	'k to be released,', 0aH, 'take it and then return True.', 0aH
	DB	'(note: the blocking operation is interruptible.)', 0aH, 0aH, 'I'
	DB	'n all other cases, the method will return True immediately.', 0aH
	DB	'Precisely, if the current thread already holds the lock, its', 0aH
	DB	'internal counter is simply incremented. If nobody holds the l'
	DB	'ock,', 0aH, 'the lock is taken and its internal counter initi'
	DB	'alized to 1.', 00H
	ORG $+5
rlock_release_doc DB 'release()', 0aH, 0aH, 'Release the lock, allowing a'
	DB	'nother thread that is blocked waiting for', 0aH, 'the lock to'
	DB	' acquire the lock.  The lock must be in the locked state,', 0aH
	DB	'and must be locked by the same thread that unlocks it; otherw'
	DB	'ise a', 0aH, '`RuntimeError` is raised.', 0aH, 0aH, 'Do note '
	DB	'that if the lock was acquire()d several times in a row by the'
	DB	0aH, 'current thread, release() needs to be called as many tim'
	DB	'es for the lock', 0aH, 'to be available for other threads.', 00H
	ORG $+11
rlock_acquire_restore_doc DB '_acquire_restore(state) -> None', 0aH, 0aH, 'F'
	DB	'or internal use by `threading.Condition`.', 00H
	ORG $+4
rlock_release_save_doc DB '_release_save() -> tuple', 0aH, 0aH, 'For inte'
	DB	'rnal use by `threading.Condition`.', 00H
	ORG $+11
rlock_is_owned_doc DB '_is_owned() -> bool', 0aH, 0aH, 'For internal use '
	DB	'by `threading.Condition`.', 00H
rlock_methods DQ FLAT:??_C@_07MEFPPMEF@acquire?$AA@
	DQ	FLAT:rlock_acquire
	DD	03H
	ORG $+4
	DQ	FLAT:rlock_acquire_doc
	DQ	FLAT:??_C@_07EOGFDLKI@release?$AA@
	DQ	FLAT:rlock_release
	DD	04H
	ORG $+4
	DQ	FLAT:rlock_release_doc
	DQ	FLAT:??_C@_09HFMMNEJG@_is_owned?$AA@
	DQ	FLAT:rlock_is_owned
	DD	04H
	ORG $+4
	DQ	FLAT:rlock_is_owned_doc
	DQ	FLAT:??_C@_0BB@LNGBJLEI@_acquire_restore?$AA@
	DQ	FLAT:rlock_acquire_restore
	DD	08H
	ORG $+4
	DQ	FLAT:rlock_acquire_restore_doc
	DQ	FLAT:??_C@_0O@GAANLLMC@_release_save?$AA@
	DQ	FLAT:rlock_release_save
	DD	04H
	ORG $+4
	DQ	FLAT:rlock_release_save_doc
	DQ	FLAT:??_C@_09OAJHKKGH@__enter__?$AA@
	DQ	FLAT:rlock_acquire
	DD	03H
	ORG $+4
	DQ	FLAT:rlock_acquire_doc
	DQ	FLAT:??_C@_08CMFIGCJD@__exit__?$AA@
	DQ	FLAT:rlock_release
	DD	01H
	ORG $+4
	DQ	FLAT:rlock_release_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
RLocktype DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0O@GJOLJECC@_thread?4RLock?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:rlock_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:rlock_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040400H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:rlock_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:rlock_new
	ORG $+72
localdummytype DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BE@DIJGDAPK@_thread?4_localdummy?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:localdummy_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	FLAT:??_C@_0BD@JJFEDPB@Thread?9local?5dummy?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000068H
	ORG $+176
?wr_callback_def@?1??local_new@@9@9 DQ FLAT:??_C@_0BG@MBDGPDAK@_localdummy_destroyed?$AA@ ; `local_new'::`2'::wr_callback_def
	DQ	FLAT:_localdummy_destroyed
	DD	08H
	ORG $+4
	ORG $+8
localtype DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@HHKNGPPL@_thread?4_local?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:local_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:local_getattro
	DQ	FLAT:local_setattro
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:??_C@_0BC@GKOPAEKP@Thread?9local?5data?$AA@
	DQ	FLAT:local_traverse
	DQ	FLAT:local_clear
	DQ	0000000000000000H
	DQ	0000000000000078H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:local_new
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+56
start_new_doc DB 'start_new_thread(function, args[, kwargs])', 0aH, '(sta'
	DB	'rt_new() is an obsolete synonym)', 0aH, 0aH, 'Start a new thr'
	DB	'ead and return its identifier.  The thread will call the', 0aH
	DB	'function with positional arguments from the tuple args and ke'
	DB	'yword arguments', 0aH, 'taken from the optional dictionary kw'
	DB	'args.  The thread exits when the', 0aH, 'function returns; th'
	DB	'e return value is ignored.  The thread will also exit', 0aH, 'w'
	DB	'hen the function raises an unhandled exception; a stack trace'
	DB	' will be', 0aH, 'printed unless the exception is SystemExit.', 0aH
	DB	00H
	ORG $+6
exit_doc DB	'exit()', 0aH, '(exit_thread() is an obsolete synonym)', 0aH
	DB	0aH, 'This is synonymous to ``raise SystemExit''''.  It will c'
	DB	'ause the current', 0aH, 'thread to exit silently unless the e'
	DB	'xception is caught.', 00H
	ORG $+2
interrupt_doc DB 'interrupt_main()', 0aH, 0aH, 'Raise a KeyboardInterrupt'
	DB	' in the main thread.', 0aH, 'A subthread can use this functio'
	DB	'n to interrupt the main thread.', 00H
allocate_doc DB	'allocate_lock() -> lock object', 0aH, '(allocate() is an'
	DB	' obsolete synonym)', 0aH, 0aH, 'Create a new lock object.  Se'
	DB	'e help(LockType) for information about locks.', 00H
	ORG $+1
get_ident_doc DB 'get_ident() -> integer', 0aH, 0aH, 'Return a non-zero i'
	DB	'nteger that uniquely identifies the current thread', 0aH, 'am'
	DB	'ongst other threads that exist simultaneously.', 0aH, 'This m'
	DB	'ay be used to identify per-thread resources.', 0aH, 'Even tho'
	DB	'ugh on some platforms threads identities may appear to be', 0aH
	DB	'allocated consecutive numbers starting at 1, this behavior sh'
	DB	'ould not', 0aH, 'be relied upon, and the number should be see'
	DB	'n purely as a magic cookie.', 0aH, 'A thread''s identity may '
	DB	'be reused for another thread after it exits.', 00H
	ORG $+9
_count_doc DB	'_count() -> integer', 0aH, 0aH, 'Return the number of cu'
	DB	'rrently running Python threads, excluding ', 0aH, 'the main t'
	DB	'hread. The returned number comprises all threads created', 0aH
	DB	'through `start_new_thread()` as well as `threading.Thread`, a'
	DB	'nd not', 0aH, 'yet finished.', 0aH, 0aH, 'This function is me'
	DB	'ant for internal and specialized purposes only.', 0aH, 'In mo'
	DB	'st applications `threading.enumerate()` should be used instea'
	DB	'd.', 00H
	ORG $+11
stack_size_doc DB 'stack_size([size]) -> size', 0aH, 0aH, 'Return the thr'
	DB	'ead stack size used when creating new threads.  The', 0aH, 'o'
	DB	'ptional size argument specifies the stack size (in bytes) to '
	DB	'be used', 0aH, 'for subsequently created threads, and must be'
	DB	' 0 (use platform or', 0aH, 'configured default) or a positive'
	DB	' integer value of at least 32,768 (32k).', 0aH, 'If changing '
	DB	'the thread stack size is unsupported, a ThreadError', 0aH, 'e'
	DB	'xception is raised.  If the specified size is invalid, a Valu'
	DB	'eError', 0aH, 'exception is raised, and the stack size is unm'
	DB	'odified.  32k bytes', 0aH, ' currently the minimum supported '
	DB	'stack size value to guarantee', 0aH, 'sufficient stack space '
	DB	'for the interpreter itself.', 0aH, 0aH, 'Note that some platf'
	DB	'orms may have particular restrictions on values for', 0aH, 't'
	DB	'he stack size, such as requiring a minimum stack size larger '
	DB	'than 32kB or', 0aH, 'requiring allocation in multiples of the'
	DB	' system memory page size', 0aH, '- platform documentation sho'
	DB	'uld be referred to for more information', 0aH, '(4kB pages ar'
	DB	'e common; using multiples of 4096 for the stack size is', 0aH
	DB	'the suggested approach in the absence of more specific inform'
	DB	'ation).', 00H
	ORG $+5
thread_methods DQ FLAT:??_C@_0BB@NIEJKBPO@start_new_thread?$AA@
	DQ	FLAT:thread_PyThread_start_new_thread
	DD	01H
	ORG $+4
	DQ	FLAT:start_new_doc
	DQ	FLAT:??_C@_09BEJJCLOL@start_new?$AA@
	DQ	FLAT:thread_PyThread_start_new_thread
	DD	01H
	ORG $+4
	DQ	FLAT:start_new_doc
	DQ	FLAT:??_C@_0O@MLDABOCH@allocate_lock?$AA@
	DQ	FLAT:thread_PyThread_allocate_lock
	DD	04H
	ORG $+4
	DQ	FLAT:allocate_doc
	DQ	FLAT:??_C@_08HGGEJCMJ@allocate?$AA@
	DQ	FLAT:thread_PyThread_allocate_lock
	DD	04H
	ORG $+4
	DQ	FLAT:allocate_doc
	DQ	FLAT:??_C@_0M@EHGPAPBC@exit_thread?$AA@
	DQ	FLAT:thread_PyThread_exit_thread
	DD	04H
	ORG $+4
	DQ	FLAT:exit_doc
	DQ	FLAT:??_C@_04MKNBDEPB@exit?$AA@
	DQ	FLAT:thread_PyThread_exit_thread
	DD	04H
	ORG $+4
	DQ	FLAT:exit_doc
	DQ	FLAT:??_C@_0P@GILDALKM@interrupt_main?$AA@
	DQ	FLAT:thread_PyThread_interrupt_main
	DD	04H
	ORG $+4
	DQ	FLAT:interrupt_doc
	DQ	FLAT:??_C@_09ICJGJIKJ@get_ident?$AA@
	DQ	FLAT:thread_get_ident
	DD	04H
	ORG $+4
	DQ	FLAT:get_ident_doc
	DQ	FLAT:??_C@_06HHPHCOMB@_count?$AA@
	DQ	FLAT:thread__count
	DD	04H
	ORG $+4
	DQ	FLAT:_count_doc
	DQ	FLAT:??_C@_0L@NELPJPHD@stack_size?$AA@
	DQ	FLAT:thread_stack_size
	DD	01H
	ORG $+4
	DQ	FLAT:stack_size_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
thread_doc DB	'This module provides primitive operations to write multi'
	DB	'-threaded programs.', 0aH, 'The ''threading'' module provides'
	DB	' a more convenient interface.', 00H
	ORG $+7
lock_doc DB	'A lock object is a synchronization primitive.  To create'
	DB	' a lock,', 0aH, 'call the PyThread_allocate_lock() function. '
	DB	' Methods are:', 0aH, 0aH, 'acquire() -- lock the lock, possib'
	DB	'ly blocking until it can be obtained', 0aH, 'release() -- unl'
	DB	'ock of the lock', 0aH, 'locked() -- test whether the lock is '
	DB	'currently locked', 0aH, 0aH, 'A lock is not owned by the thre'
	DB	'ad that locked it; another thread may', 0aH, 'unlock it.  A t'
	DB	'hread attempting to lock a lock that it has already locked', 0aH
	DB	'will block until another thread unlocks it.  Deadlocks may en'
	DB	'sue.', 00H
	ORG $+5
threadmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07CNDFADNJ@_thread?$AA@
	DQ	FLAT:thread_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:thread_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyObject_Free:PROC
EXTRN	PyThread_free_lock:PROC
EXTRN	PyThread_release_lock:PROC
EXTRN	PyObject_ClearWeakRefs:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_threadmodule.c
pdata	SEGMENT
$pdata$lock_dealloc DD imagerel lock_dealloc
	DD	imagerel lock_dealloc+63
	DD	imagerel $unwind$lock_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lock_dealloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT lock_dealloc
_TEXT	SEGMENT
self$ = 48
lock_dealloc PROC					; COMDAT

; 31   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 32   :     if (self->in_weakreflist != NULL)

  00006	48 83 79 68 00	 cmp	 QWORD PTR [rcx+104], 0
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	74 05		 je	 SHORT $LN3@lock_deall

; 33   :         PyObject_ClearWeakRefs((PyObject *) self);

  00010	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN3@lock_deall:

; 34   :     if (self->lock_lock != NULL) {

  00015	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00019	48 85 c9	 test	 rcx, rcx
  0001c	74 14		 je	 SHORT $LN2@lock_deall

; 35   :         /* Unlock the lock so it's safe to free it */
; 36   :         if (self->locked)

  0001e	80 7b 70 00	 cmp	 BYTE PTR [rbx+112], 0
  00022	74 05		 je	 SHORT $LN1@lock_deall

; 37   :             PyThread_release_lock(self->lock_lock);

  00024	e8 00 00 00 00	 call	 PyThread_release_lock
$LN1@lock_deall:

; 38   :         PyThread_free_lock(self->lock_lock);

  00029	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0002d	e8 00 00 00 00	 call	 PyThread_free_lock
$LN2@lock_deall:

; 39   :     }
; 40   :     PyObject_Del(self);

  00032	48 8b cb	 mov	 rcx, rbx

; 41   : }

  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5b		 pop	 rbx
  0003a	e9 00 00 00 00	 jmp	 PyObject_Free
lock_dealloc ENDP
_TEXT	ENDS
EXTRN	Py_MakePendingCalls:PROC
EXTRN	PyEval_RestoreThread:PROC
EXTRN	PyEval_SaveThread:PROC
EXTRN	PyThread_acquire_lock_timed:PROC
EXTRN	_PyTime_gettimeofday:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$acquire_timed DD imagerel acquire_timed
	DD	imagerel acquire_timed+250
	DD	imagerel $unwind$acquire_timed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$acquire_timed DD 085701H
	DD	0a3457H
	DD	0c640fH
	DD	0b540fH
	DD	0700b720fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT acquire_timed
_TEXT	SEGMENT
endtime$ = 32
curtime$ = 48
lock$ = 80
microseconds$ = 88
acquire_timed PROC					; COMDAT

; 51   : {

  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fa	 mov	 rdi, rdx
  00012	48 8b e9	 mov	 rbp, rcx

; 52   :     PyLockStatus r;
; 53   :     _PyTime_timeval curtime;
; 54   :     _PyTime_timeval endtime;
; 55   : 
; 56   : 
; 57   :     if (microseconds > 0) {

  00015	48 85 d2	 test	 rdx, rdx
  00018	7e 38		 jle	 SHORT $LN20@acquire_ti

; 58   :         _PyTime_gettimeofday(&endtime);

  0001a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR endtime$[rsp]
  0001f	e8 00 00 00 00	 call	 _PyTime_gettimeofday

; 59   :         endtime.tv_sec += microseconds / (1000 * 1000);

  00024	48 b8 db 34 b6
	d7 82 de 1b 43	 mov	 rax, 4835703278458516699 ; 431bde82d7b634dbH
  0002e	48 f7 ef	 imul	 rdi
  00031	48 c1 fa 12	 sar	 rdx, 18
  00035	48 8b c2	 mov	 rax, rdx
  00038	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  0003c	48 03 d0	 add	 rdx, rax

; 60   :         endtime.tv_usec += microseconds % (1000 * 1000);

  0003f	8b c7		 mov	 eax, edi
  00041	48 01 54 24 20	 add	 QWORD PTR endtime$[rsp], rdx
  00046	69 d2 40 42 0f
	00		 imul	 edx, 1000000		; 000f4240H
  0004c	2b c2		 sub	 eax, edx
  0004e	01 44 24 28	 add	 DWORD PTR endtime$[rsp+8], eax
$LN20@acquire_ti:
  00052	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00057	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL8@acquire_ti:

; 61   :     }
; 62   : 
; 63   : 
; 64   :     do {
; 65   :         /* first a simple non-blocking try without releasing the GIL */
; 66   :         r = PyThread_acquire_lock_timed(lock, 0, 0);

  00060	45 33 c0	 xor	 r8d, r8d
  00063	33 d2		 xor	 edx, edx
  00065	48 8b cd	 mov	 rcx, rbp
  00068	e8 00 00 00 00	 call	 PyThread_acquire_lock_timed
  0006d	8b f0		 mov	 esi, eax

; 67   :         if (r == PY_LOCK_FAILURE && microseconds != 0) {

  0006f	85 c0		 test	 eax, eax
  00071	75 26		 jne	 SHORT $LN5@acquire_ti
  00073	48 85 ff	 test	 rdi, rdi
  00076	74 64		 je	 SHORT $LN14@acquire_ti

; 68   :             Py_BEGIN_ALLOW_THREADS

  00078	e8 00 00 00 00	 call	 PyEval_SaveThread

; 69   :             r = PyThread_acquire_lock_timed(lock, microseconds, 1);

  0007d	44 8d 46 01	 lea	 r8d, QWORD PTR [rsi+1]
  00081	48 8b d7	 mov	 rdx, rdi
  00084	48 8b cd	 mov	 rcx, rbp
  00087	48 8b d8	 mov	 rbx, rax
  0008a	e8 00 00 00 00	 call	 PyThread_acquire_lock_timed

; 70   :             Py_END_ALLOW_THREADS

  0008f	48 8b cb	 mov	 rcx, rbx
  00092	8b f0		 mov	 esi, eax
  00094	e8 00 00 00 00	 call	 PyEval_RestoreThread
$LN5@acquire_ti:

; 71   :         } 
; 72   : 
; 73   :         if (r == PY_LOCK_INTR) {

  00099	83 fe 02	 cmp	 esi, 2
  0009c	75 3e		 jne	 SHORT $LN14@acquire_ti

; 74   :             /* Run signal handlers if we were interrupted.  Propagate
; 75   :              * exceptions from signal handlers, such as KeyboardInterrupt, by
; 76   :              * passing up PY_LOCK_INTR.  */
; 77   :             if (Py_MakePendingCalls() < 0) {

  0009e	e8 00 00 00 00	 call	 Py_MakePendingCalls
  000a3	85 c0		 test	 eax, eax
  000a5	78 4c		 js	 SHORT $LN13@acquire_ti

; 79   :             }
; 80   : 
; 81   :             /* If we're using a timeout, recompute the timeout after processing
; 82   :              * signals, since those can take time.  */
; 83   :             if (microseconds > 0) {

  000a7	48 85 ff	 test	 rdi, rdi
  000aa	7e b4		 jle	 SHORT $LL8@acquire_ti

; 84   :                 _PyTime_gettimeofday(&curtime);

  000ac	48 8d 4c 24 30	 lea	 rcx, QWORD PTR curtime$[rsp]
  000b1	e8 00 00 00 00	 call	 _PyTime_gettimeofday

; 85   :                 microseconds = ((endtime.tv_sec - curtime.tv_sec) * 1000000 +
; 86   :                                 (endtime.tv_usec - curtime.tv_usec));

  000b6	48 8b 7c 24 20	 mov	 rdi, QWORD PTR endtime$[rsp]
  000bb	8b 44 24 28	 mov	 eax, DWORD PTR endtime$[rsp+8]
  000bf	48 2b 7c 24 30	 sub	 rdi, QWORD PTR curtime$[rsp]
  000c4	2b 44 24 38	 sub	 eax, DWORD PTR curtime$[rsp+8]
  000c8	48 63 c8	 movsxd	 rcx, eax
  000cb	48 69 ff 40 42
	0f 00		 imul	 rdi, 1000000		; 000f4240H
  000d2	48 03 f9	 add	 rdi, rcx

; 87   : 
; 88   :                 /* Check for negative values, since those mean block forever.
; 89   :                  */
; 90   :                 if (microseconds <= 0) {

  000d5	48 85 ff	 test	 rdi, rdi

; 92   :                 }
; 93   :             }
; 94   :         }
; 95   :     } while (r == PY_LOCK_INTR);  /* Retry if we were interrupted. */

  000d8	7f 86		 jg	 SHORT $LL8@acquire_ti

; 91   :                     r = PY_LOCK_FAILURE;

  000da	33 f6		 xor	 esi, esi
$LN14@acquire_ti:

; 96   : 
; 97   :     return r;

  000dc	8b c6		 mov	 eax, esi
$LN10@acquire_ti:
  000de	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 98   : }

  000e3	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  000e8	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  000ed	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000f1	5f		 pop	 rdi
  000f2	c3		 ret	 0
$LN13@acquire_ti:

; 78   :                 return PY_LOCK_INTR;

  000f3	b8 02 00 00 00	 mov	 eax, 2
  000f8	eb e4		 jmp	 SHORT $LN10@acquire_ti
acquire_timed ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@DOGKBCNL@timeout?5value?5is?5too?5large?$AA@ ; `string'
PUBLIC	__real@428f3fffffe0c000
PUBLIC	__real@412e848000000000
PUBLIC	??_C@_0CI@BGNBOFIL@timeout?5value?5must?5be?5strictly?5p@ ; `string'
PUBLIC	??_C@_0DA@KAHGEHOF@can?8t?5specify?5a?5timeout?5for?5a?5no@ ; `string'
PUBLIC	??_C@_0M@LDGCGPMN@?$HMid?3acquire?$AA@		; `string'
PUBLIC	??_C@_07DDHNKDGP@timeout?$AA@			; `string'
PUBLIC	__real@bff0000000000000
PUBLIC	??_C@_08NPIAFDOA@blocking?$AA@			; `string'
EXTRN	PyBool_FromLong:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyArg_ParseTupleAndKeywords:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$lock_PyThread_acquire_lock DD imagerel lock_PyThread_acquire_lock
	DD	imagerel lock_PyThread_acquire_lock+376
	DD	imagerel $unwind$lock_PyThread_acquire_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lock_PyThread_acquire_lock DD 062101H
	DD	056821H
	DD	0e340cH
	DD	07008b20cH
xdata	ENDS
;	COMDAT ??_C@_0BL@DOGKBCNL@timeout?5value?5is?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BL@DOGKBCNL@timeout?5value?5is?5too?5large?$AA@ DB 'timeout value '
	DB	'is too large', 00H				; `string'
CONST	ENDS
;	COMDAT __real@428f3fffffe0c000
CONST	SEGMENT
__real@428f3fffffe0c000 DQ 0428f3fffffe0c000r	; 4.29497e+012
CONST	ENDS
;	COMDAT __real@412e848000000000
CONST	SEGMENT
__real@412e848000000000 DQ 0412e848000000000r	; 1e+006
CONST	ENDS
;	COMDAT ??_C@_0CI@BGNBOFIL@timeout?5value?5must?5be?5strictly?5p@
CONST	SEGMENT
??_C@_0CI@BGNBOFIL@timeout?5value?5must?5be?5strictly?5p@ DB 'timeout val'
	DB	'ue must be strictly positive', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@KAHGEHOF@can?8t?5specify?5a?5timeout?5for?5a?5no@
CONST	SEGMENT
??_C@_0DA@KAHGEHOF@can?8t?5specify?5a?5timeout?5for?5a?5no@ DB 'can''t sp'
	DB	'ecify a timeout for a non-blocking call', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LDGCGPMN@?$HMid?3acquire?$AA@
CONST	SEGMENT
??_C@_0M@LDGCGPMN@?$HMid?3acquire?$AA@ DB '|id:acquire', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDHNKDGP@timeout?$AA@
CONST	SEGMENT
??_C@_07DDHNKDGP@timeout?$AA@ DB 'timeout', 00H		; `string'
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT ??_C@_08NPIAFDOA@blocking?$AA@
CONST	SEGMENT
??_C@_08NPIAFDOA@blocking?$AA@ DB 'blocking', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT lock_PyThread_acquire_lock
_TEXT	SEGMENT
timeout$ = 48
self$ = 112
args$ = 120
kwds$ = 128
blocking$ = 136
lock_PyThread_acquire_lock PROC				; COMDAT

; 102  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 08	 mov	 QWORD PTR [r11+8], rbx
  00007	57		 push	 rdi
  00008	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000c	48 8b f9	 mov	 rdi, rcx
  0000f	49 8b c0	 mov	 rax, r8
  00012	4c 8b d2	 mov	 r10, rdx

; 103  :     char *kwlist[] = {"blocking", "timeout", NULL};

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NPIAFDOA@blocking?$AA@
  0001c	0f 29 74 24 50	 movaps	 XMMWORD PTR [rsp+80], xmm6

; 104  :     int blocking = 1;
; 105  :     double timeout = -1;

  00021	f2 0f 10 35 00
	00 00 00	 movsdx	 xmm6, QWORD PTR __real@bff0000000000000
  00029	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DDHNKDGP@timeout?$AA@

; 106  :     PY_TIMEOUT_T microseconds;
; 107  :     PyLockStatus r;
; 108  : 
; 109  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|id:acquire", kwlist,
; 110  :                                      &blocking, &timeout))

  00034	4d 8d 4b d0	 lea	 r9, QWORD PTR [r11-48]
  00038	f2 0f 11 74 24
	30		 movsdx	 QWORD PTR timeout$[rsp], xmm6
  0003e	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00042	49 8d 4b c8	 lea	 rcx, QWORD PTR [r11-56]
  00046	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@LDGCGPMN@?$HMid?3acquire?$AA@
  0004d	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  00051	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  00055	33 db		 xor	 ebx, ebx
  00057	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  0005b	48 8b d0	 mov	 rdx, rax
  0005e	49 8b ca	 mov	 rcx, r10
  00061	49 89 5b e0	 mov	 QWORD PTR [r11-32], rbx
  00065	41 c7 43 20 01
	00 00 00	 mov	 DWORD PTR [r11+32], 1
  0006d	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00072	85 c0		 test	 eax, eax

; 111  :         return NULL;

  00074	74 2c		 je	 SHORT $LN16@lock_PyThr

; 112  : 
; 113  :     if (!blocking && timeout != -1) {

  00076	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR blocking$[rsp]
  0007d	f2 0f 10 4c 24
	30		 movsdx	 xmm1, QWORD PTR timeout$[rsp]
  00083	85 c0		 test	 eax, eax
  00085	75 2d		 jne	 SHORT $LN9@lock_PyThr
  00087	66 0f 2e ce	 ucomisd xmm1, xmm6
  0008b	7a 02		 jp	 SHORT $LN14@lock_PyThr
  0008d	74 25		 je	 SHORT $LN9@lock_PyThr
$LN14@lock_PyThr:

; 114  :         PyErr_SetString(PyExc_ValueError, "can't specify a timeout "
; 115  :                         "for a non-blocking call");

  0008f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@KAHGEHOF@can?8t?5specify?5a?5timeout?5for?5a?5no@
  0009d	e8 00 00 00 00	 call	 PyErr_SetString
$LN16@lock_PyThr:

; 116  :         return NULL;

  000a2	33 c0		 xor	 eax, eax

; 145  : }

  000a4	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  000a9	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]
  000ae	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000b2	5f		 pop	 rdi
  000b3	c3		 ret	 0
$LN9@lock_PyThr:

; 117  :     }
; 118  :     if (timeout < 0 && timeout != -1) {

  000b4	66 0f 57 c0	 xorpd	 xmm0, xmm0
  000b8	66 0f 2f c1	 comisd	 xmm0, xmm1
  000bc	76 2d		 jbe	 SHORT $LN8@lock_PyThr
  000be	66 0f 2e ce	 ucomisd xmm1, xmm6
  000c2	7a 02		 jp	 SHORT $LN13@lock_PyThr
  000c4	74 25		 je	 SHORT $LN8@lock_PyThr
$LN13@lock_PyThr:

; 119  :         PyErr_SetString(PyExc_ValueError, "timeout value must be "
; 120  :                         "strictly positive");

  000c6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@BGNBOFIL@timeout?5value?5must?5be?5strictly?5p@
  000d4	e8 00 00 00 00	 call	 PyErr_SetString

; 121  :         return NULL;

  000d9	33 c0		 xor	 eax, eax

; 145  : }

  000db	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  000e0	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]
  000e5	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000e9	5f		 pop	 rdi
  000ea	c3		 ret	 0
$LN8@lock_PyThr:

; 122  :     }
; 123  :     if (!blocking)

  000eb	85 c0		 test	 eax, eax
  000ed	75 05		 jne	 SHORT $LN7@lock_PyThr

; 124  :         microseconds = 0;

  000ef	48 8b d3	 mov	 rdx, rbx
  000f2	eb 50		 jmp	 SHORT $LN4@lock_PyThr
$LN7@lock_PyThr:

; 125  :     else if (timeout == -1)

  000f4	66 0f 2e ce	 ucomisd xmm1, xmm6
  000f8	7a 08		 jp	 SHORT $LN5@lock_PyThr
  000fa	75 06		 jne	 SHORT $LN5@lock_PyThr

; 126  :         microseconds = -1;

  000fc	48 83 ca ff	 or	 rdx, -1

; 127  :     else {

  00100	eb 42		 jmp	 SHORT $LN4@lock_PyThr
$LN5@lock_PyThr:

; 128  :         timeout *= 1e6;

  00102	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@412e848000000000

; 129  :         if (timeout >= (double) PY_TIMEOUT_MAX) {

  0010a	66 0f 2f 0d 00
	00 00 00	 comisd	 xmm1, QWORD PTR __real@428f3fffffe0c000
  00112	f2 0f 11 4c 24
	30		 movsdx	 QWORD PTR timeout$[rsp], xmm1
  00118	72 25		 jb	 SHORT $LN3@lock_PyThr

; 130  :             PyErr_SetString(PyExc_OverflowError,
; 131  :                             "timeout value is too large");

  0011a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00121	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@DOGKBCNL@timeout?5value?5is?5too?5large?$AA@
  00128	e8 00 00 00 00	 call	 PyErr_SetString

; 132  :             return NULL;

  0012d	33 c0		 xor	 eax, eax

; 145  : }

  0012f	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  00134	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]
  00139	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0013d	5f		 pop	 rdi
  0013e	c3		 ret	 0
$LN3@lock_PyThr:

; 133  :         }
; 134  :         microseconds = (PY_TIMEOUT_T) timeout;

  0013f	f2 48 0f 2c d1	 cvttsd2si rdx, xmm1
$LN4@lock_PyThr:

; 135  :     }
; 136  : 
; 137  :     r = acquire_timed(self->lock_lock, microseconds);

  00144	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  00148	e8 00 00 00 00	 call	 acquire_timed

; 138  :     if (r == PY_LOCK_INTR) {

  0014d	83 f8 02	 cmp	 eax, 2

; 139  :         return NULL;

  00150	0f 84 4c ff ff
	ff		 je	 $LN16@lock_PyThr

; 140  :     }
; 141  : 
; 142  :     if (r == PY_LOCK_ACQUIRED)

  00156	83 f8 01	 cmp	 eax, 1
  00159	75 03		 jne	 SHORT $LN15@lock_PyThr

; 143  :         self->locked = 1;

  0015b	88 47 70	 mov	 BYTE PTR [rdi+112], al
$LN15@lock_PyThr:

; 144  :     return PyBool_FromLong(r == PY_LOCK_ACQUIRED);

  0015e	0f 94 c3	 sete	 bl
  00161	8b cb		 mov	 ecx, ebx
  00163	e8 00 00 00 00	 call	 PyBool_FromLong

; 145  : }

  00168	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0016d	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]
  00172	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00176	5f		 pop	 rdi
  00177	c3		 ret	 0
lock_PyThread_acquire_lock ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@KCPOFNEH@release?5unlocked?5lock?$AA@	; `string'
EXTRN	_Py_NoneStruct:BYTE
_BSS	SEGMENT
	ALIGN	8

ThreadError DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$lock_PyThread_release_lock DD imagerel lock_PyThread_release_lock
	DD	imagerel lock_PyThread_release_lock+137
	DD	imagerel $unwind$lock_PyThread_release_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lock_PyThread_release_lock DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BG@KCPOFNEH@release?5unlocked?5lock?$AA@
CONST	SEGMENT
??_C@_0BG@KCPOFNEH@release?5unlocked?5lock?$AA@ DB 'release unlocked lock'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_threadmodule.c
CONST	ENDS
;	COMDAT lock_PyThread_release_lock
_TEXT	SEGMENT
self$ = 64
lock_PyThread_release_lock PROC				; COMDAT

; 160  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 161  :     /* Sanity check: the lock must be locked */
; 162  :     if (!self->locked) {

  00006	80 79 70 00	 cmp	 BYTE PTR [rcx+112], 0
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	75 1b		 jne	 SHORT $LN1@lock_PyThr@2

; 163  :         PyErr_SetString(ThreadError, "release unlocked lock");

  0000f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ThreadError
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@KCPOFNEH@release?5unlocked?5lock?$AA@
  0001d	e8 00 00 00 00	 call	 PyErr_SetString

; 164  :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 171  : }

  00024	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00028	5b		 pop	 rbx
  00029	c3		 ret	 0
$LN1@lock_PyThr@2:

; 165  :     }
; 166  : 
; 167  :     PyThread_release_lock(self->lock_lock);

  0002a	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0002e	e8 00 00 00 00	 call	 PyThread_release_lock

; 168  :     self->locked = 0;

  00033	c6 43 70 00	 mov	 BYTE PTR [rbx+112], 0

; 169  :     Py_INCREF(Py_None);

  00037	e8 00 00 00 00	 call	 _Py_PXCTX
  0003c	85 c0		 test	 eax, eax
  0003e	75 3c		 jne	 SHORT $LN5@lock_PyThr@2
  00040	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00055	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00063	e8 00 00 00 00	 call	 _PyParallel_Guard
  00068	85 c0		 test	 eax, eax
  0006a	75 09		 jne	 SHORT $LN4@lock_PyThr@2
  0006c	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00073	74 07		 je	 SHORT $LN5@lock_PyThr@2
$LN4@lock_PyThr@2:
  00075	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@lock_PyThr@2:

; 170  :     return Py_None;

  0007c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 171  : }

  00083	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00087	5b		 pop	 rbx
  00088	c3		 ret	 0
lock_PyThread_release_lock ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT lock_locked_lock
_TEXT	SEGMENT
self$ = 8
lock_locked_lock PROC					; COMDAT

; 184  :     return PyBool_FromLong((long)self->locked);

  00000	0f be 49 70	 movsx	 ecx, BYTE PTR [rcx+112]

; 185  : }

  00004	e9 00 00 00 00	 jmp	 PyBool_FromLong
lock_locked_lock ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$rlock_dealloc DD imagerel rlock_dealloc
	DD	imagerel rlock_dealloc+64
	DD	imagerel $unwind$rlock_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rlock_dealloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT rlock_dealloc
_TEXT	SEGMENT
self$ = 48
rlock_dealloc PROC					; COMDAT

; 257  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 258  :     assert(self->rlock_lock);
; 259  :     if (self->in_weakreflist != NULL)

  00006	48 83 79 70 00	 cmp	 QWORD PTR [rcx+112], 0
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	74 05		 je	 SHORT $LN2@rlock_deal

; 260  :         PyObject_ClearWeakRefs((PyObject *) self);

  00010	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN2@rlock_deal:

; 261  :     /* Unlock the lock so it's safe to free it */
; 262  :     if (self->rlock_count > 0)

  00015	83 7b 6c 00	 cmp	 DWORD PTR [rbx+108], 0
  00019	76 09		 jbe	 SHORT $LN1@rlock_deal

; 263  :         PyThread_release_lock(self->rlock_lock);

  0001b	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0001f	e8 00 00 00 00	 call	 PyThread_release_lock
$LN1@rlock_deal:

; 264  : 
; 265  :     PyThread_free_lock(self->rlock_lock);

  00024	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00028	e8 00 00 00 00	 call	 PyThread_free_lock

; 266  :     Py_TYPE(self)->tp_free(self);

  0002d	4c 8b 5b 58	 mov	 r11, QWORD PTR [rbx+88]
  00031	48 8b cb	 mov	 rcx, rbx

; 267  : }

  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5b		 pop	 rbx
  00039	49 ff a3 98 01
	00 00		 rex_jmp QWORD PTR [r11+408]
rlock_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@BAPLEJKM@Internal?5lock?5count?5overflowed?$AA@ ; `string'
EXTRN	_Py_TrueStruct:BYTE
EXTRN	PyThread_get_thread_ident:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$rlock_acquire DD imagerel rlock_acquire
	DD	imagerel rlock_acquire+324
	DD	imagerel $unwind$rlock_acquire
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$rlock_acquire DD imagerel rlock_acquire+324
	DD	imagerel rlock_acquire+451
	DD	imagerel $chain$1$rlock_acquire
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$rlock_acquire DD imagerel rlock_acquire+451
	DD	imagerel rlock_acquire+475
	DD	imagerel $chain$2$rlock_acquire
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$rlock_acquire DD 021H
	DD	imagerel rlock_acquire
	DD	imagerel rlock_acquire+324
	DD	imagerel $unwind$rlock_acquire
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$rlock_acquire DD 020521H
	DD	0e6405H
	DD	imagerel rlock_acquire
	DD	imagerel rlock_acquire+324
	DD	imagerel $unwind$rlock_acquire
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rlock_acquire DD 08f601H
	DD	0f74f6H
	DD	056821H
	DD	010340cH
	DD	05008b20cH
xdata	ENDS
;	COMDAT ??_C@_0BP@BAPLEJKM@Internal?5lock?5count?5overflowed?$AA@
CONST	SEGMENT
??_C@_0BP@BAPLEJKM@Internal?5lock?5count?5overflowed?$AA@ DB 'Internal lo'
	DB	'ck count overflowed', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT rlock_acquire
_TEXT	SEGMENT
timeout$ = 48
self$ = 112
args$ = 120
kwds$ = 128
blocking$ = 136
rlock_acquire PROC					; COMDAT

; 271  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 18	 mov	 QWORD PTR [r11+24], rbx
  00007	55		 push	 rbp
  00008	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000c	48 8b d9	 mov	 rbx, rcx
  0000f	49 8b c0	 mov	 rax, r8
  00012	4c 8b d2	 mov	 r10, rdx

; 272  :     char *kwlist[] = {"blocking", "timeout", NULL};

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NPIAFDOA@blocking?$AA@
  0001c	0f 29 74 24 50	 movaps	 XMMWORD PTR [rsp+80], xmm6

; 273  :     int blocking = 1;
; 274  :     double timeout = -1;

  00021	f2 0f 10 35 00
	00 00 00	 movsdx	 xmm6, QWORD PTR __real@bff0000000000000
  00029	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DDHNKDGP@timeout?$AA@

; 275  :     PY_TIMEOUT_T microseconds;
; 276  :     long tid;
; 277  :     PyLockStatus r = PY_LOCK_ACQUIRED;
; 278  : 
; 279  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|id:acquire", kwlist,
; 280  :                                      &blocking, &timeout))

  00034	4d 8d 4b d0	 lea	 r9, QWORD PTR [r11-48]
  00038	f2 0f 11 74 24
	30		 movsdx	 QWORD PTR timeout$[rsp], xmm6
  0003e	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00042	49 8d 4b c8	 lea	 rcx, QWORD PTR [r11-56]
  00046	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@LDGCGPMN@?$HMid?3acquire?$AA@
  0004d	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  00051	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  00055	33 ed		 xor	 ebp, ebp
  00057	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  0005b	48 8b d0	 mov	 rdx, rax
  0005e	49 8b ca	 mov	 rcx, r10
  00061	49 89 6b e0	 mov	 QWORD PTR [r11-32], rbp
  00065	41 c7 43 20 01
	00 00 00	 mov	 DWORD PTR [r11+32], 1
  0006d	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00072	85 c0		 test	 eax, eax

; 281  :         return NULL;

  00074	74 2c		 je	 SHORT $LN21@rlock_acqu

; 282  : 
; 283  :     if (!blocking && timeout != -1) {

  00076	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR blocking$[rsp]
  0007d	f2 0f 10 4c 24
	30		 movsdx	 xmm1, QWORD PTR timeout$[rsp]
  00083	85 c0		 test	 eax, eax
  00085	75 30		 jne	 SHORT $LN12@rlock_acqu
  00087	66 0f 2e ce	 ucomisd xmm1, xmm6
  0008b	7a 02		 jp	 SHORT $LN17@rlock_acqu
  0008d	74 28		 je	 SHORT $LN12@rlock_acqu
$LN17@rlock_acqu:

; 284  :         PyErr_SetString(PyExc_ValueError, "can't specify a timeout "
; 285  :                         "for a non-blocking call");

  0008f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@KAHGEHOF@can?8t?5specify?5a?5timeout?5for?5a?5no@
  0009d	e8 00 00 00 00	 call	 PyErr_SetString
$LN21@rlock_acqu:

; 286  :         return NULL;

  000a2	33 c0		 xor	 eax, eax

; 329  : }

  000a4	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  000ac	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]
  000b1	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
$LN12@rlock_acqu:

; 287  :     }
; 288  :     if (timeout < 0 && timeout != -1) {

  000b7	66 0f 57 c0	 xorpd	 xmm0, xmm0
  000bb	66 0f 2f c1	 comisd	 xmm0, xmm1
  000bf	76 30		 jbe	 SHORT $LN11@rlock_acqu
  000c1	66 0f 2e ce	 ucomisd xmm1, xmm6
  000c5	7a 02		 jp	 SHORT $LN16@rlock_acqu
  000c7	74 28		 je	 SHORT $LN11@rlock_acqu
$LN16@rlock_acqu:

; 289  :         PyErr_SetString(PyExc_ValueError, "timeout value must be "
; 290  :                         "strictly positive");

  000c9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@BGNBOFIL@timeout?5value?5must?5be?5strictly?5p@
  000d7	e8 00 00 00 00	 call	 PyErr_SetString

; 291  :         return NULL;

  000dc	33 c0		 xor	 eax, eax

; 329  : }

  000de	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  000e6	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]
  000eb	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000ef	5d		 pop	 rbp
  000f0	c3		 ret	 0
$LN11@rlock_acqu:
  000f1	48 89 7c 24 78	 mov	 QWORD PTR [rsp+120], rdi

; 292  :     }
; 293  :     if (!blocking)

  000f6	85 c0		 test	 eax, eax
  000f8	75 05		 jne	 SHORT $LN10@rlock_acqu

; 294  :         microseconds = 0;

  000fa	48 8b fd	 mov	 rdi, rbp
  000fd	eb 45		 jmp	 SHORT $LN7@rlock_acqu
$LN10@rlock_acqu:

; 295  :     else if (timeout == -1)

  000ff	66 0f 2e ce	 ucomisd xmm1, xmm6
  00103	7a 08		 jp	 SHORT $LN8@rlock_acqu
  00105	75 06		 jne	 SHORT $LN8@rlock_acqu

; 296  :         microseconds = -1;

  00107	48 83 cf ff	 or	 rdi, -1

; 297  :     else {

  0010b	eb 37		 jmp	 SHORT $LN7@rlock_acqu
$LN8@rlock_acqu:

; 298  :         timeout *= 1e6;

  0010d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@412e848000000000

; 299  :         if (timeout >= (double) PY_TIMEOUT_MAX) {

  00115	66 0f 2f 0d 00
	00 00 00	 comisd	 xmm1, QWORD PTR __real@428f3fffffe0c000
  0011d	f2 0f 11 4c 24
	30		 movsdx	 QWORD PTR timeout$[rsp], xmm1
  00123	72 1a		 jb	 SHORT $LN6@rlock_acqu

; 300  :             PyErr_SetString(PyExc_OverflowError,
; 301  :                             "timeout value is too large");

  00125	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  0012c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@DOGKBCNL@timeout?5value?5is?5too?5large?$AA@
  00133	e8 00 00 00 00	 call	 PyErr_SetString

; 302  :             return NULL;

  00138	33 c0		 xor	 eax, eax
  0013a	e9 84 00 00 00	 jmp	 $LN18@rlock_acqu
$LN6@rlock_acqu:

; 303  :         }
; 304  :         microseconds = (PY_TIMEOUT_T) timeout;

  0013f	f2 48 0f 2c f9	 cvttsd2si rdi, xmm1
$LN7@rlock_acqu:
  00144	48 89 74 24 70	 mov	 QWORD PTR [rsp+112], rsi

; 305  :     }
; 306  : 
; 307  :     tid = PyThread_get_thread_ident();

  00149	e8 00 00 00 00	 call	 PyThread_get_thread_ident

; 308  :     if (self->rlock_count > 0 && tid == self->rlock_owner) {

  0014e	8b 4b 6c	 mov	 ecx, DWORD PTR [rbx+108]
  00151	8b f0		 mov	 esi, eax
  00153	85 c9		 test	 ecx, ecx
  00155	74 3b		 je	 SHORT $LN5@rlock_acqu
  00157	3b 43 68	 cmp	 eax, DWORD PTR [rbx+104]
  0015a	75 36		 jne	 SHORT $LN5@rlock_acqu

; 309  :         unsigned long count = self->rlock_count + 1;

  0015c	8d 41 01	 lea	 eax, DWORD PTR [rcx+1]

; 310  :         if (count <= self->rlock_count) {

  0015f	3b c1		 cmp	 eax, ecx
  00161	77 17		 ja	 SHORT $LN4@rlock_acqu

; 311  :             PyErr_SetString(PyExc_OverflowError,
; 312  :                             "Internal lock count overflowed");

  00163	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  0016a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@BAPLEJKM@Internal?5lock?5count?5overflowed?$AA@
  00171	e8 00 00 00 00	 call	 PyErr_SetString
$LN20@rlock_acqu:

; 313  :             return NULL;

  00176	33 c0		 xor	 eax, eax
  00178	eb 44		 jmp	 SHORT $LN19@rlock_acqu
$LN4@rlock_acqu:

; 314  :         }
; 315  :         self->rlock_count = count;
; 316  :         Py_RETURN_TRUE;

  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00181	89 43 6c	 mov	 DWORD PTR [rbx+108], eax
  00184	e8 00 00 00 00	 call	 _Py_IncRef
  00189	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00190	eb 2c		 jmp	 SHORT $LN19@rlock_acqu
$LN5@rlock_acqu:

; 317  :     }
; 318  :     r = acquire_timed(self->rlock_lock, microseconds);

  00192	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00196	48 8b d7	 mov	 rdx, rdi
  00199	e8 00 00 00 00	 call	 acquire_timed

; 319  :     if (r == PY_LOCK_ACQUIRED) {

  0019e	83 f8 01	 cmp	 eax, 1
  001a1	75 08		 jne	 SHORT $LN3@rlock_acqu

; 320  :         assert(self->rlock_count == 0);
; 321  :         self->rlock_owner = tid;

  001a3	89 73 68	 mov	 DWORD PTR [rbx+104], esi

; 322  :         self->rlock_count = 1;

  001a6	89 43 6c	 mov	 DWORD PTR [rbx+108], eax
  001a9	eb 05		 jmp	 SHORT $LN1@rlock_acqu
$LN3@rlock_acqu:

; 323  :     }
; 324  :     else if (r == PY_LOCK_INTR) {

  001ab	83 f8 02	 cmp	 eax, 2

; 325  :         return NULL;

  001ae	74 c6		 je	 SHORT $LN20@rlock_acqu
$LN1@rlock_acqu:

; 326  :     }
; 327  : 
; 328  :     return PyBool_FromLong(r == PY_LOCK_ACQUIRED);

  001b0	83 f8 01	 cmp	 eax, 1
  001b3	40 0f 94 c5	 sete	 bpl
  001b7	8b cd		 mov	 ecx, ebp
  001b9	e8 00 00 00 00	 call	 PyBool_FromLong
$LN19@rlock_acqu:
  001be	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
$LN18@rlock_acqu:
  001c3	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]

; 329  : }

  001c8	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  001d0	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]
  001d5	48 83 c4 60	 add	 rsp, 96			; 00000060H
  001d9	5d		 pop	 rbp
  001da	c3		 ret	 0
rlock_acquire ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@KLNHBMKC@cannot?5release?5un?9acquired?5lock?$AA@ ; `string'
EXTRN	PyExc_RuntimeError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$rlock_release DD imagerel rlock_release
	DD	imagerel rlock_release+162
	DD	imagerel $unwind$rlock_release
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rlock_release DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0CA@KLNHBMKC@cannot?5release?5un?9acquired?5lock?$AA@
CONST	SEGMENT
??_C@_0CA@KLNHBMKC@cannot?5release?5un?9acquired?5lock?$AA@ DB 'cannot re'
	DB	'lease un-acquired lock', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_threadmodule.c
CONST	ENDS
;	COMDAT rlock_release
_TEXT	SEGMENT
self$ = 64
rlock_release PROC					; COMDAT

; 349  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 350  :     long tid = PyThread_get_thread_ident();

  00009	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  0000e	44 8b d8	 mov	 r11d, eax

; 351  : 
; 352  :     if (self->rlock_count == 0 || self->rlock_owner != tid) {

  00011	8b 43 6c	 mov	 eax, DWORD PTR [rbx+108]
  00014	85 c0		 test	 eax, eax
  00016	74 6f		 je	 SHORT $LN2@rlock_rele
  00018	44 39 5b 68	 cmp	 DWORD PTR [rbx+104], r11d
  0001c	75 69		 jne	 SHORT $LN2@rlock_rele

; 356  :     }
; 357  :     if (--self->rlock_count == 0) {

  0001e	ff c8		 dec	 eax
  00020	89 43 6c	 mov	 DWORD PTR [rbx+108], eax
  00023	75 10		 jne	 SHORT $LN1@rlock_rele

; 358  :         self->rlock_owner = 0;
; 359  :         PyThread_release_lock(self->rlock_lock);

  00025	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00029	c7 43 68 00 00
	00 00		 mov	 DWORD PTR [rbx+104], 0
  00030	e8 00 00 00 00	 call	 PyThread_release_lock
$LN1@rlock_rele:

; 360  :     }
; 361  :     Py_RETURN_NONE;

  00035	e8 00 00 00 00	 call	 _Py_PXCTX
  0003a	85 c0		 test	 eax, eax
  0003c	75 3c		 jne	 SHORT $LN7@rlock_rele
  0003e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00053	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00059	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00061	e8 00 00 00 00	 call	 _PyParallel_Guard
  00066	85 c0		 test	 eax, eax
  00068	75 09		 jne	 SHORT $LN6@rlock_rele
  0006a	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00071	74 07		 je	 SHORT $LN7@rlock_rele
$LN6@rlock_rele:
  00073	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@rlock_rele:
  0007a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 362  : }

  00081	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00085	5b		 pop	 rbx
  00086	c3		 ret	 0
$LN2@rlock_rele:

; 353  :         PyErr_SetString(PyExc_RuntimeError,
; 354  :                         "cannot release un-acquired lock");

  00087	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@KLNHBMKC@cannot?5release?5un?9acquired?5lock?$AA@
  00095	e8 00 00 00 00	 call	 PyErr_SetString

; 355  :         return NULL;

  0009a	33 c0		 xor	 eax, eax

; 362  : }

  0009c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a0	5b		 pop	 rbx
  000a1	c3		 ret	 0
rlock_release ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@IJIDEDFH@couldn?8t?5acquire?5lock?$AA@ ; `string'
PUBLIC	??_C@_0BE@IMAIDBOB@kl?3_acquire_restore?$AA@	; `string'
EXTRN	PyThread_acquire_lock:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$rlock_acquire_restore DD imagerel rlock_acquire_restore
	DD	imagerel rlock_acquire_restore+56
	DD	imagerel $unwind$rlock_acquire_restore
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$rlock_acquire_restore DD imagerel rlock_acquire_restore+56
	DD	imagerel rlock_acquire_restore+112
	DD	imagerel $chain$1$rlock_acquire_restore
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$rlock_acquire_restore DD imagerel rlock_acquire_restore+112
	DD	imagerel rlock_acquire_restore+235
	DD	imagerel $chain$2$rlock_acquire_restore
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$rlock_acquire_restore DD 021H
	DD	imagerel rlock_acquire_restore
	DD	imagerel rlock_acquire_restore+56
	DD	imagerel $unwind$rlock_acquire_restore
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$rlock_acquire_restore DD 040a21H
	DD	09740aH
	DD	083405H
	DD	imagerel rlock_acquire_restore
	DD	imagerel rlock_acquire_restore+56
	DD	imagerel $unwind$rlock_acquire_restore
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rlock_acquire_restore DD 020601H
	DD	060025206H
xdata	ENDS
;	COMDAT ??_C@_0BG@IJIDEDFH@couldn?8t?5acquire?5lock?$AA@
CONST	SEGMENT
??_C@_0BG@IJIDEDFH@couldn?8t?5acquire?5lock?$AA@ DB 'couldn''t acquire lo'
	DB	'ck', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IMAIDBOB@kl?3_acquire_restore?$AA@
CONST	SEGMENT
??_C@_0BE@IMAIDBOB@kl?3_acquire_restore?$AA@ DB 'kl:_acquire_restore', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_threadmodule.c
CONST	ENDS
;	COMDAT rlock_acquire_restore
_TEXT	SEGMENT
self$ = 64
arg$ = 72
owner$ = 80
count$ = 88
rlock_acquire_restore PROC				; COMDAT

; 378  : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b f1	 mov	 rsi, rcx

; 379  :     long owner;
; 380  :     unsigned long count;
; 381  :     int r = 1;
; 382  : 
; 383  :     if (!PyArg_ParseTuple(arg, "kl:_acquire_restore", &count, &owner))

  0000c	4c 8d 4c 24 50	 lea	 r9, QWORD PTR owner$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@IMAIDBOB@kl?3_acquire_restore?$AA@
  00018	4c 8d 44 24 58	 lea	 r8, QWORD PTR count$[rsp]
  0001d	48 8b c8	 mov	 rcx, rax
  00020	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00025	85 c0		 test	 eax, eax

; 384  :         return NULL;

  00027	74 5a		 je	 SHORT $LN10@rlock_acqu@2

; 385  : 
; 386  :     if (!PyThread_acquire_lock(self->rlock_lock, 0)) {

  00029	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  0002d	33 d2		 xor	 edx, edx
  0002f	e8 00 00 00 00	 call	 PyThread_acquire_lock
  00034	85 c0		 test	 eax, eax
  00036	75 53		 jne	 SHORT $LN1@rlock_acqu@2

; 387  :         Py_BEGIN_ALLOW_THREADS

  00038	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0003d	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00042	e8 00 00 00 00	 call	 PyEval_SaveThread

; 388  :         r = PyThread_acquire_lock(self->rlock_lock, 1);

  00047	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  0004b	ba 01 00 00 00	 mov	 edx, 1
  00050	48 8b f8	 mov	 rdi, rax
  00053	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 389  :         Py_END_ALLOW_THREADS

  00058	48 8b cf	 mov	 rcx, rdi
  0005b	8b d8		 mov	 ebx, eax
  0005d	e8 00 00 00 00	 call	 PyEval_RestoreThread
  00062	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 390  :     }
; 391  :     if (!r) {

  00067	85 db		 test	 ebx, ebx
  00069	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0006e	75 1b		 jne	 SHORT $LN1@rlock_acqu@2

; 392  :         PyErr_SetString(ThreadError, "couldn't acquire lock");

  00070	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ThreadError
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@IJIDEDFH@couldn?8t?5acquire?5lock?$AA@
  0007e	e8 00 00 00 00	 call	 PyErr_SetString
$LN10@rlock_acqu@2:

; 393  :         return NULL;

  00083	33 c0		 xor	 eax, eax

; 399  : }

  00085	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00089	5e		 pop	 rsi
  0008a	c3		 ret	 0
$LN1@rlock_acqu@2:

; 394  :     }
; 395  :     assert(self->rlock_count == 0);
; 396  :     self->rlock_owner = owner;

  0008b	8b 44 24 50	 mov	 eax, DWORD PTR owner$[rsp]
  0008f	89 46 68	 mov	 DWORD PTR [rsi+104], eax

; 397  :     self->rlock_count = count;

  00092	8b 44 24 58	 mov	 eax, DWORD PTR count$[rsp]
  00096	89 46 6c	 mov	 DWORD PTR [rsi+108], eax

; 398  :     Py_RETURN_NONE;

  00099	e8 00 00 00 00	 call	 _Py_PXCTX
  0009e	85 c0		 test	 eax, eax
  000a0	75 3c		 jne	 SHORT $LN7@rlock_acqu@2
  000a2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000b7	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000bd	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 09		 jne	 SHORT $LN6@rlock_acqu@2
  000ce	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000d5	74 07		 je	 SHORT $LN7@rlock_acqu@2
$LN6@rlock_acqu@2:
  000d7	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@rlock_acqu@2:
  000de	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 399  : }

  000e5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e9	5e		 pop	 rsi
  000ea	c3		 ret	 0
rlock_acquire_restore ENDP
_TEXT	ENDS
PUBLIC	??_C@_02INHECGIH@kl?$AA@			; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$rlock_release_save DD imagerel rlock_release_save
	DD	imagerel rlock_release_save+90
	DD	imagerel $unwind$rlock_release_save
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rlock_release_save DD 042f01H
	DD	06342fH
	DD	070023206H
xdata	ENDS
;	COMDAT ??_C@_02INHECGIH@kl?$AA@
CONST	SEGMENT
??_C@_02INHECGIH@kl?$AA@ DB 'kl', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT rlock_release_save
_TEXT	SEGMENT
self$ = 48
rlock_release_save PROC					; COMDAT

; 408  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 409  :     long owner;
; 410  :     unsigned long count;
; 411  : 
; 412  :     if (self->rlock_count == 0) {

  00006	8b 79 6c	 mov	 edi, DWORD PTR [rcx+108]
  00009	85 ff		 test	 edi, edi
  0000b	75 1b		 jne	 SHORT $LN1@rlock_rele@2

; 413  :         PyErr_SetString(PyExc_RuntimeError,
; 414  :                         "cannot release un-acquired lock");

  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@KLNHBMKC@cannot?5release?5un?9acquired?5lock?$AA@
  0001b	e8 00 00 00 00	 call	 PyErr_SetString

; 415  :         return NULL;

  00020	33 c0		 xor	 eax, eax

; 424  : }

  00022	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00026	5f		 pop	 rdi
  00027	c3		 ret	 0
$LN1@rlock_rele@2:

; 416  :     }
; 417  : 
; 418  :     owner = self->rlock_owner;
; 419  :     count = self->rlock_count;
; 420  :     self->rlock_count = 0;

  00028	33 c0		 xor	 eax, eax
  0002a	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0002f	8b 59 68	 mov	 ebx, DWORD PTR [rcx+104]
  00032	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 421  :     self->rlock_owner = 0;
; 422  :     PyThread_release_lock(self->rlock_lock);

  00036	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0003a	e8 00 00 00 00	 call	 PyThread_release_lock

; 423  :     return Py_BuildValue("kl", count, owner);

  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02INHECGIH@kl?$AA@
  00046	44 8b c3	 mov	 r8d, ebx
  00049	8b d7		 mov	 edx, edi
  0004b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 424  : }

  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5f		 pop	 rdi
  00055	e9 00 00 00 00	 jmp	 Py_BuildValue
rlock_release_save ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$rlock_is_owned DD imagerel rlock_is_owned
	DD	imagerel rlock_is_owned+189
	DD	imagerel $unwind$rlock_is_owned
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rlock_is_owned DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_threadmodule.c
xdata	ENDS
;	COMDAT rlock_is_owned
_TEXT	SEGMENT
self$ = 64
rlock_is_owned PROC					; COMDAT

; 434  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 435  :     long tid = PyThread_get_thread_ident();

  00009	e8 00 00 00 00	 call	 PyThread_get_thread_ident

; 436  : 
; 437  :     if (self->rlock_count > 0 && self->rlock_owner == tid) {

  0000e	83 7b 6c 00	 cmp	 DWORD PTR [rbx+108], 0
  00012	76 57		 jbe	 SHORT $LN1@rlock_is_o
  00014	39 43 68	 cmp	 DWORD PTR [rbx+104], eax
  00017	75 52		 jne	 SHORT $LN1@rlock_is_o

; 438  :         Py_RETURN_TRUE;

  00019	e8 00 00 00 00	 call	 _Py_PXCTX
  0001e	85 c0		 test	 eax, eax
  00020	75 3c		 jne	 SHORT $LN5@rlock_is_o
  00022	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00037	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00045	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004a	85 c0		 test	 eax, eax
  0004c	75 09		 jne	 SHORT $LN4@rlock_is_o
  0004e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  00055	74 07		 je	 SHORT $LN5@rlock_is_o
$LN4@rlock_is_o:
  00057	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN5@rlock_is_o:
  0005e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 441  : }

  00065	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00069	5b		 pop	 rbx
  0006a	c3		 ret	 0
$LN1@rlock_is_o:

; 439  :     }
; 440  :     Py_RETURN_FALSE;

  0006b	e8 00 00 00 00	 call	 _Py_PXCTX
  00070	85 c0		 test	 eax, eax
  00072	75 3c		 jne	 SHORT $LN9@rlock_is_o
  00074	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00089	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0008f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00097	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009c	85 c0		 test	 eax, eax
  0009e	75 09		 jne	 SHORT $LN8@rlock_is_o
  000a0	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  000a7	74 07		 je	 SHORT $LN9@rlock_is_o
$LN8@rlock_is_o:
  000a9	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN9@rlock_is_o:
  000b0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 441  : }

  000b7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000bb	5b		 pop	 rbx
  000bc	c3		 ret	 0
rlock_is_owned ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@KAKMLBKC@can?8t?5allocate?5lock?$AA@	; `string'
EXTRN	PyThread_allocate_lock:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$rlock_new DD imagerel rlock_new
	DD	imagerel rlock_new+108
	DD	imagerel $unwind$rlock_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rlock_new DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BE@KAKMLBKC@can?8t?5allocate?5lock?$AA@
CONST	SEGMENT
??_C@_0BE@KAKMLBKC@can?8t?5allocate?5lock?$AA@ DB 'can''t allocate lock', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT rlock_new
_TEXT	SEGMENT
type$ = 48
args$ = 56
kwds$ = 64
rlock_new PROC						; COMDAT

; 450  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 451  :     rlockobject *self;
; 452  : 
; 453  :     self = (rlockobject *) type->tp_alloc(type, 0);

  0000d	33 d2		 xor	 edx, edx
  0000f	ff 97 88 01 00
	00		 call	 QWORD PTR [rdi+392]
  00015	48 8b d8	 mov	 rbx, rax

; 454  :     if (self != NULL) {

  00018	48 85 c0	 test	 rax, rax
  0001b	74 41		 je	 SHORT $LN2@rlock_new

; 455  :         self->rlock_lock = PyThread_allocate_lock();

  0001d	e8 00 00 00 00	 call	 PyThread_allocate_lock
  00022	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 456  :         if (self->rlock_lock == NULL) {

  00026	48 85 c0	 test	 rax, rax
  00029	75 29		 jne	 SHORT $LN1@rlock_new

; 457  :             type->tp_free(self);

  0002b	48 8b cb	 mov	 rcx, rbx
  0002e	ff 97 98 01 00
	00		 call	 QWORD PTR [rdi+408]

; 458  :             PyErr_SetString(ThreadError, "can't allocate lock");

  00034	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ThreadError
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@KAKMLBKC@can?8t?5allocate?5lock?$AA@
  00042	e8 00 00 00 00	 call	 PyErr_SetString

; 459  :             return NULL;

  00047	33 c0		 xor	 eax, eax

; 467  : }

  00049	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
$LN1@rlock_new:

; 460  :         }
; 461  :         self->in_weakreflist = NULL;

  00054	33 c0		 xor	 eax, eax
  00056	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 462  :         self->rlock_owner = 0;

  0005a	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax
$LN2@rlock_new:

; 463  :         self->rlock_count = 0;
; 464  :     }
; 465  : 
; 466  :     return (PyObject *) self;

  0005e	48 8b c3	 mov	 rax, rbx

; 467  : }

  00061	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5f		 pop	 rdi
  0006b	c3		 ret	 0
rlock_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@OELOMNJN@?$DM?$CFs?5owner?$DN?$CFld?5count?$DN?$CFlu?$DO?$AA@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT ??_C@_0BJ@OELOMNJN@?$DM?$CFs?5owner?$DN?$CFld?5count?$DN?$CFlu?$DO?$AA@
CONST	SEGMENT
??_C@_0BJ@OELOMNJN@?$DM?$CFs?5owner?$DN?$CFld?5count?$DN?$CFlu?$DO?$AA@ DB '<'
	DB	'%s owner=%ld count=%lu>', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT rlock_repr
_TEXT	SEGMENT
self$ = 8
rlock_repr PROC						; COMDAT

; 472  :     return PyUnicode_FromFormat("<%s owner=%ld count=%lu>",
; 473  :         Py_TYPE(self)->tp_name, self->rlock_owner, self->rlock_count);

  00000	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00004	44 8b 49 6c	 mov	 r9d, DWORD PTR [rcx+108]
  00008	44 8b 41 68	 mov	 r8d, DWORD PTR [rcx+104]
  0000c	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@OELOMNJN@?$DM?$CFs?5owner?$DN?$CFld?5count?$DN?$CFlu?$DO?$AA@

; 474  : }

  00017	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
rlock_repr ENDP
_TEXT	ENDS
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$newlockobject DD imagerel newlockobject
	DD	imagerel newlockobject+112
	DD	imagerel $unwind$newlockobject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newlockobject DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT newlockobject
_TEXT	SEGMENT
newlockobject PROC					; COMDAT

; 540  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 541  :     lockobject *self;
; 542  :     self = PyObject_New(lockobject, &Locktype);

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Locktype
  00012	85 c0		 test	 eax, eax
  00014	74 07		 je	 SHORT $LN5@newlockobj
  00016	e8 00 00 00 00	 call	 _PxObject_New
  0001b	eb 05		 jmp	 SHORT $LN7@newlockobj
$LN5@newlockobj:
  0001d	e8 00 00 00 00	 call	 _PyObject_New
$LN7@newlockobj:
  00022	48 8b d8	 mov	 rbx, rax

; 543  :     if (self == NULL)

  00025	48 85 c0	 test	 rax, rax

; 544  :         return NULL;

  00028	74 35		 je	 SHORT $LN8@newlockobj

; 545  :     self->lock_lock = PyThread_allocate_lock();

  0002a	e8 00 00 00 00	 call	 PyThread_allocate_lock

; 546  :     self->locked = 0;

  0002f	c6 43 70 00	 mov	 BYTE PTR [rbx+112], 0

; 547  :     self->in_weakreflist = NULL;

  00033	48 c7 43 68 00
	00 00 00	 mov	 QWORD PTR [rbx+104], 0
  0003b	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 548  :     if (self->lock_lock == NULL) {

  0003f	48 85 c0	 test	 rax, rax
  00042	75 23		 jne	 SHORT $LN1@newlockobj

; 549  :         Py_DECREF(self);

  00044	48 8b cb	 mov	 rcx, rbx
  00047	e8 00 00 00 00	 call	 _Py_DecRef

; 550  :         PyErr_SetString(ThreadError, "can't allocate lock");

  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ThreadError
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@KAKMLBKC@can?8t?5allocate?5lock?$AA@
  0005a	e8 00 00 00 00	 call	 PyErr_SetString
$LN8@newlockobj:

; 551  :         return NULL;

  0005f	33 c0		 xor	 eax, eax

; 554  : }

  00061	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00065	5b		 pop	 rbx
  00066	c3		 ret	 0
$LN1@newlockobj:

; 552  :     }
; 553  :     return self;

  00067	48 8b c3	 mov	 rax, rbx

; 554  : }

  0006a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006e	5b		 pop	 rbx
  0006f	c3		 ret	 0
newlockobject ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$localdummy_dealloc DD imagerel localdummy_dealloc
	DD	imagerel localdummy_dealloc+40
	DD	imagerel $unwind$localdummy_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$localdummy_dealloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT localdummy_dealloc
_TEXT	SEGMENT
self$ = 48
localdummy_dealloc PROC					; COMDAT

; 607  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 608  :     if (self->weakreflist != NULL)

  00006	48 83 79 68 00	 cmp	 QWORD PTR [rcx+104], 0
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	74 05		 je	 SHORT $LN1@localdummy

; 609  :         PyObject_ClearWeakRefs((PyObject *) self);

  00010	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN1@localdummy:

; 610  :     Py_TYPE(self)->tp_free((PyObject*)self);

  00015	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00019	48 8b cb	 mov	 rcx, rbx

; 611  : }

  0001c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00020	5b		 pop	 rbx
  00021	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
localdummy_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@FDKGLEIF@_local_create_dummy?$AA@	; `string'
PUBLIC	??_C@_0BL@IPFPCOMB@?4?4?2Modules?2_threadmodule?4c?$AA@ ; `string'
PUBLIC	??_C@_0CF@PEAODEFD@Couldn?8t?5get?5thread?9state?5dictio@ ; `string'
EXTRN	PyDict_SetItem:PROC
EXTRN	PyWeakref_NewRef:PROC
EXTRN	PyDict_New:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyThreadState_GetDict:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_local_create_dummy DD imagerel _local_create_dummy
	DD	imagerel _local_create_dummy+644
	DD	imagerel $unwind$_local_create_dummy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_local_create_dummy DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0c016521aH
xdata	ENDS
;	COMDAT ??_C@_0BE@FDKGLEIF@_local_create_dummy?$AA@
CONST	SEGMENT
??_C@_0BE@FDKGLEIF@_local_create_dummy?$AA@ DB '_local_create_dummy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IPFPCOMB@?4?4?2Modules?2_threadmodule?4c?$AA@
CONST	SEGMENT
??_C@_0BL@IPFPCOMB@?4?4?2Modules?2_threadmodule?4c?$AA@ DB '..\Modules\_t'
	DB	'hreadmodule.c', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PEAODEFD@Couldn?8t?5get?5thread?9state?5dictio@
CONST	SEGMENT
??_C@_0CF@PEAODEFD@Couldn?8t?5get?5thread?9state?5dictio@ DB 'Couldn''t g'
	DB	'et thread-state dictionary', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_threadmodule.c
CONST	ENDS
;	COMDAT _local_create_dummy
_TEXT	SEGMENT
self$ = 64
_local_create_dummy PROC				; COMDAT

; 662  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0001a	48 8b e9	 mov	 rbp, rcx

; 663  :     PyObject *tdict, *ldict = NULL, *wr = NULL;

  0001d	33 f6		 xor	 esi, esi

; 664  :     localdummyobject *dummy = NULL;
; 665  :     int r;
; 666  : 
; 667  :     tdict = PyThreadState_GetDict();

  0001f	e8 00 00 00 00	 call	 PyThreadState_GetDict
  00024	4c 8b e0	 mov	 r12, rax

; 668  :     if (tdict == NULL) {

  00027	48 85 c0	 test	 rax, rax
  0002a	75 18		 jne	 SHORT $LN26@local_crea

; 669  :         PyErr_SetString(PyExc_SystemError,
; 670  :                         "Couldn't get thread-state dictionary");

  0002c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@PEAODEFD@Couldn?8t?5get?5thread?9state?5dictio@
  0003a	e8 00 00 00 00	 call	 PyErr_SetString

; 671  :         goto err;

  0003f	e9 23 02 00 00	 jmp	 $LN3@local_crea
$LN26@local_crea:

; 672  :     }
; 673  : 
; 674  :     ldict = PyDict_New();

  00044	e8 00 00 00 00	 call	 PyDict_New
  00049	48 8b f8	 mov	 rdi, rax

; 675  :     if (ldict == NULL)

  0004c	48 85 c0	 test	 rax, rax
  0004f	0f 84 12 02 00
	00		 je	 $LN3@local_crea

; 676  :         goto err;
; 677  :     dummy = (localdummyobject *) localdummytype.tp_alloc(&localdummytype, 0);

  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:localdummytype
  0005c	33 d2		 xor	 edx, edx
  0005e	ff 15 88 01 00
	00		 call	 QWORD PTR localdummytype+392
  00064	48 8b d8	 mov	 rbx, rax

; 678  :     if (dummy == NULL)

  00067	48 85 c0	 test	 rax, rax
  0006a	0f 84 be 00 00
	00		 je	 $err$20658

; 679  :         goto err;
; 680  :     dummy->localdict = ldict;

  00070	48 89 78 60	 mov	 QWORD PTR [rax+96], rdi

; 681  :     wr = PyWeakref_NewRef((PyObject *) dummy, self->wr_callback);

  00074	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR [rbp+136]
  0007b	48 8b c8	 mov	 rcx, rax
  0007e	e8 00 00 00 00	 call	 PyWeakref_NewRef
  00083	48 8b f0	 mov	 rsi, rax

; 682  :     if (wr == NULL)

  00086	48 85 c0	 test	 rax, rax
  00089	0f 84 9f 00 00
	00		 je	 $err$20658

; 683  :         goto err;
; 684  : 
; 685  :     /* As a side-effect, this will cache the weakref's hash before the
; 686  :        dummy gets deleted */
; 687  :     r = PyDict_SetItem(self->dummies, wr, ldict);

  0008f	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR [rbp+128]
  00096	4c 8b c7	 mov	 r8, rdi
  00099	48 8b d0	 mov	 rdx, rax
  0009c	e8 00 00 00 00	 call	 PyDict_SetItem

; 688  :     if (r < 0)

  000a1	85 c0		 test	 eax, eax
  000a3	0f 88 85 00 00
	00		 js	 $err$20658

; 689  :         goto err;
; 690  :     Py_CLEAR(wr);

  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@IPFPCOMB@?4?4?2Modules?2_threadmodule?4c?$AA@
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@FDKGLEIF@_local_create_dummy?$AA@
  000b7	4c 8b ce	 mov	 r9, rsi
  000ba	41 b8 b2 02 00
	00		 mov	 r8d, 690		; 000002b2H
  000c0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cd	85 c0		 test	 eax, eax
  000cf	75 0a		 jne	 SHORT $LN20@local_crea
  000d1	48 8b ce	 mov	 rcx, rsi
  000d4	33 f6		 xor	 esi, esi
  000d6	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@local_crea:

; 691  :     r = PyDict_SetItem(tdict, self->key, (PyObject *) dummy);

  000db	48 8b 55 60	 mov	 rdx, QWORD PTR [rbp+96]
  000df	4c 8b c3	 mov	 r8, rbx
  000e2	49 8b cc	 mov	 rcx, r12
  000e5	e8 00 00 00 00	 call	 PyDict_SetItem

; 692  :     if (r < 0)

  000ea	85 c0		 test	 eax, eax
  000ec	78 40		 js	 SHORT $err$20658

; 693  :         goto err;
; 694  :     Py_CLEAR(dummy);

  000ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@IPFPCOMB@?4?4?2Modules?2_threadmodule?4c?$AA@
  000f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@FDKGLEIF@_local_create_dummy?$AA@
  000fc	4c 8b cb	 mov	 r9, rbx
  000ff	41 b8 b6 02 00
	00		 mov	 r8d, 694		; 000002b6H
  00105	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0010d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00112	85 c0		 test	 eax, eax
  00114	75 08		 jne	 SHORT $LN15@local_crea
  00116	48 8b cb	 mov	 rcx, rbx
  00119	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@local_crea:

; 695  : 
; 696  :     Py_DECREF(ldict);

  0011e	48 8b cf	 mov	 rcx, rdi
  00121	e8 00 00 00 00	 call	 _Py_DecRef

; 697  :     return ldict;

  00126	48 8b c7	 mov	 rax, rdi
  00129	e9 3b 01 00 00	 jmp	 $LN27@local_crea
$err$20658:

; 698  : 
; 699  : err:
; 700  :     Py_XDECREF(ldict);

  0012e	e8 00 00 00 00	 call	 _Py_PXCTX
  00133	85 c0		 test	 eax, eax
  00135	75 5c		 jne	 SHORT $LN11@local_crea
  00137	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0013b	a8 20		 test	 al, 32			; 00000020H
  0013d	75 4c		 jne	 SHORT $LN33@local_crea
  0013f	84 c0		 test	 al, al
  00141	78 48		 js	 SHORT $LN33@local_crea
  00143	a8 02		 test	 al, 2
  00145	75 4c		 jne	 SHORT $LN11@local_crea
  00147	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0014b	75 46		 jne	 SHORT $LN11@local_crea
  0014d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0015b	4c 8b cf	 mov	 r9, rdi
  0015e	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00164	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0016c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00171	48 8b cf	 mov	 rcx, rdi
  00174	85 c0		 test	 eax, eax
  00176	74 07		 je	 SHORT $LN38@local_crea
  00178	e8 00 00 00 00	 call	 _Px_Dealloc
  0017d	eb 14		 jmp	 SHORT $LN11@local_crea
$LN38@local_crea:
  0017f	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00183	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00189	eb 08		 jmp	 SHORT $LN11@local_crea
$LN33@local_crea:
  0018b	48 8b cf	 mov	 rcx, rdi
  0018e	e8 00 00 00 00	 call	 Px_DecRef
$LN11@local_crea:

; 701  :     Py_XDECREF(wr);

  00193	48 85 f6	 test	 rsi, rsi
  00196	74 65		 je	 SHORT $LN7@local_crea
  00198	e8 00 00 00 00	 call	 _Py_PXCTX
  0019d	85 c0		 test	 eax, eax
  0019f	75 5c		 jne	 SHORT $LN7@local_crea
  001a1	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  001a5	a8 20		 test	 al, 32			; 00000020H
  001a7	75 4c		 jne	 SHORT $LN44@local_crea
  001a9	84 c0		 test	 al, al
  001ab	78 48		 js	 SHORT $LN44@local_crea
  001ad	a8 02		 test	 al, 2
  001af	75 4c		 jne	 SHORT $LN7@local_crea
  001b1	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  001b5	75 46		 jne	 SHORT $LN7@local_crea
  001b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001c5	4c 8b ce	 mov	 r9, rsi
  001c8	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001ce	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001d6	e8 00 00 00 00	 call	 _PyParallel_Guard
  001db	48 8b ce	 mov	 rcx, rsi
  001de	85 c0		 test	 eax, eax
  001e0	74 07		 je	 SHORT $LN49@local_crea
  001e2	e8 00 00 00 00	 call	 _Px_Dealloc
  001e7	eb 14		 jmp	 SHORT $LN7@local_crea
$LN49@local_crea:
  001e9	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  001ed	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001f3	eb 08		 jmp	 SHORT $LN7@local_crea
$LN44@local_crea:
  001f5	48 8b ce	 mov	 rcx, rsi
  001f8	e8 00 00 00 00	 call	 Px_DecRef
$LN7@local_crea:

; 702  :     Py_XDECREF(dummy);

  001fd	48 85 db	 test	 rbx, rbx
  00200	74 65		 je	 SHORT $LN3@local_crea
  00202	e8 00 00 00 00	 call	 _Py_PXCTX
  00207	85 c0		 test	 eax, eax
  00209	75 5c		 jne	 SHORT $LN3@local_crea
  0020b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0020f	a8 20		 test	 al, 32			; 00000020H
  00211	75 4c		 jne	 SHORT $LN55@local_crea
  00213	84 c0		 test	 al, al
  00215	78 48		 js	 SHORT $LN55@local_crea
  00217	a8 02		 test	 al, 2
  00219	75 4c		 jne	 SHORT $LN3@local_crea
  0021b	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0021f	75 46		 jne	 SHORT $LN3@local_crea
  00221	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00228	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0022f	4c 8b cb	 mov	 r9, rbx
  00232	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00238	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00240	e8 00 00 00 00	 call	 _PyParallel_Guard
  00245	48 8b cb	 mov	 rcx, rbx
  00248	85 c0		 test	 eax, eax
  0024a	74 07		 je	 SHORT $LN60@local_crea
  0024c	e8 00 00 00 00	 call	 _Px_Dealloc
  00251	eb 14		 jmp	 SHORT $LN3@local_crea
$LN60@local_crea:
  00253	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00257	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0025d	eb 08		 jmp	 SHORT $LN3@local_crea
$LN55@local_crea:
  0025f	48 8b cb	 mov	 rcx, rbx
  00262	e8 00 00 00 00	 call	 Px_DecRef
$LN3@local_crea:

; 703  :     return NULL;

  00267	33 c0		 xor	 eax, eax
$LN27@local_crea:

; 704  : }

  00269	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0026e	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00273	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00278	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0027d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00281	41 5c		 pop	 r12
  00283	c3		 ret	 0
_local_create_dummy ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@IKOIBAHF@local_traverse?$AA@		; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$local_traverse DD imagerel local_traverse
	DD	imagerel local_traverse+210
	DD	imagerel $unwind$local_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$local_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0P@IKOIBAHF@local_traverse?$AA@
CONST	SEGMENT
??_C@_0P@IKOIBAHF@local_traverse?$AA@ DB 'local_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT local_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
local_traverse PROC					; COMDAT

; 761  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 762  :     Py_VISIT(self->args);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN15@local_trav
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@IPFPCOMB@?4?4?2Modules?2_threadmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IKOIBAHF@local_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 fa 02 00
	00		 mov	 r8d, 762		; 000002faH
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@local_trav:
  0003d	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN17@local_trav
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 73		 jne	 SHORT $LN19@local_trav
$LN17@local_trav:

; 763  :     Py_VISIT(self->kw);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	74 1c		 je	 SHORT $LN9@local_trav
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@IPFPCOMB@?4?4?2Modules?2_threadmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IKOIBAHF@local_traverse?$AA@
  00066	45 33 c9	 xor	 r9d, r9d
  00069	41 b8 fb 02 00
	00		 mov	 r8d, 763		; 000002fbH
  0006f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@local_trav:
  00074	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00078	48 85 c9	 test	 rcx, rcx
  0007b	74 09		 je	 SHORT $LN11@local_trav
  0007d	48 8b d7	 mov	 rdx, rdi
  00080	ff d6		 call	 rsi
  00082	85 c0		 test	 eax, eax
  00084	75 3c		 jne	 SHORT $LN19@local_trav
$LN11@local_trav:

; 764  :     Py_VISIT(self->dummies);

  00086	e8 00 00 00 00	 call	 _Py_PXCTX
  0008b	85 c0		 test	 eax, eax
  0008d	74 1c		 je	 SHORT $LN3@local_trav
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@IPFPCOMB@?4?4?2Modules?2_threadmodule?4c?$AA@
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IKOIBAHF@local_traverse?$AA@
  0009d	45 33 c9	 xor	 r9d, r9d
  000a0	41 b8 fc 02 00
	00		 mov	 r8d, 764		; 000002fcH
  000a6	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@local_trav:
  000ab	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  000b2	48 85 c9	 test	 rcx, rcx
  000b5	74 09		 je	 SHORT $LN5@local_trav
  000b7	48 8b d7	 mov	 rdx, rdi
  000ba	ff d6		 call	 rsi
  000bc	85 c0		 test	 eax, eax
  000be	75 02		 jne	 SHORT $LN19@local_trav
$LN5@local_trav:

; 765  :     return 0;

  000c0	33 c0		 xor	 eax, eax
$LN19@local_trav:

; 766  : }

  000c2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c7	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000cc	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d0	5f		 pop	 rdi
  000d1	c3		 ret	 0
local_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@MDAJCGDD@local_clear?$AA@		; `string'
EXTRN	PyThreadState_Next:PROC
EXTRN	PyDict_DelItem:PROC
EXTRN	PyDict_GetItem:PROC
EXTRN	PyInterpreterState_ThreadHead:PROC
EXTRN	PyThreadState_Get:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$local_clear DD imagerel local_clear
	DD	imagerel local_clear+14
	DD	imagerel $unwind$local_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$local_clear DD imagerel local_clear+14
	DD	imagerel local_clear+686
	DD	imagerel $chain$0$local_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$local_clear DD imagerel local_clear+686
	DD	imagerel local_clear+785
	DD	imagerel $chain$1$local_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$local_clear DD 021H
	DD	imagerel local_clear
	DD	imagerel local_clear+14
	DD	imagerel $unwind$local_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$local_clear DD 020521H
	DD	086405H
	DD	imagerel local_clear
	DD	imagerel local_clear+14
	DD	imagerel $unwind$local_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$local_clear DD 040a01H
	DD	09340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0M@MDAJCGDD@local_clear?$AA@
CONST	SEGMENT
??_C@_0M@MDAJCGDD@local_clear?$AA@ DB 'local_clear', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_threadmodule.c
CONST	ENDS
;	COMDAT local_clear
_TEXT	SEGMENT
self$ = 64
local_clear PROC					; COMDAT

; 770  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 771  :     PyThreadState *tstate;
; 772  :     Py_CLEAR(self->args);

  0000a	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  0000e	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00013	33 f6		 xor	 esi, esi
  00015	48 8b f9	 mov	 rdi, rcx
  00018	4d 85 c9	 test	 r9, r9
  0001b	0f 84 92 00 00
	00		 je	 $LN20@local_clea
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@IPFPCOMB@?4?4?2Modules?2_threadmodule?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MDAJCGDD@local_clear?$AA@
  0002f	41 b8 04 03 00
	00		 mov	 r8d, 772		; 00000304H
  00035	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00042	85 c0		 test	 eax, eax
  00044	75 6d		 jne	 SHORT $LN20@local_clea
  00046	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  0004a	48 89 77 68	 mov	 QWORD PTR [rdi+104], rsi
  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	75 5c		 jne	 SHORT $LN20@local_clea
  00057	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0005b	a8 20		 test	 al, 32			; 00000020H
  0005d	75 4c		 jne	 SHORT $LN28@local_clea
  0005f	84 c0		 test	 al, al
  00061	78 48		 js	 SHORT $LN28@local_clea
  00063	a8 02		 test	 al, 2
  00065	75 4c		 jne	 SHORT $LN20@local_clea
  00067	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0006b	75 46		 jne	 SHORT $LN20@local_clea
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00074	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0007b	4c 8b cb	 mov	 r9, rbx
  0007e	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00084	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00091	48 8b cb	 mov	 rcx, rbx
  00094	85 c0		 test	 eax, eax
  00096	74 07		 je	 SHORT $LN33@local_clea
  00098	e8 00 00 00 00	 call	 _Px_Dealloc
  0009d	eb 14		 jmp	 SHORT $LN20@local_clea
$LN33@local_clea:
  0009f	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a3	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000a9	eb 08		 jmp	 SHORT $LN20@local_clea
$LN28@local_clea:
  000ab	48 8b cb	 mov	 rcx, rbx
  000ae	e8 00 00 00 00	 call	 Px_DecRef
$LN20@local_clea:

; 773  :     Py_CLEAR(self->kw);

  000b3	4c 8b 4f 70	 mov	 r9, QWORD PTR [rdi+112]
  000b7	4d 85 c9	 test	 r9, r9
  000ba	0f 84 92 00 00
	00		 je	 $LN16@local_clea
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@IPFPCOMB@?4?4?2Modules?2_threadmodule?4c?$AA@
  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MDAJCGDD@local_clear?$AA@
  000ce	41 b8 05 03 00
	00		 mov	 r8d, 773		; 00000305H
  000d4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000dc	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e1	85 c0		 test	 eax, eax
  000e3	75 6d		 jne	 SHORT $LN16@local_clea
  000e5	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  000e9	48 89 77 70	 mov	 QWORD PTR [rdi+112], rsi
  000ed	e8 00 00 00 00	 call	 _Py_PXCTX
  000f2	85 c0		 test	 eax, eax
  000f4	75 5c		 jne	 SHORT $LN16@local_clea
  000f6	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000fa	a8 20		 test	 al, 32			; 00000020H
  000fc	75 4c		 jne	 SHORT $LN39@local_clea
  000fe	84 c0		 test	 al, al
  00100	78 48		 js	 SHORT $LN39@local_clea
  00102	a8 02		 test	 al, 2
  00104	75 4c		 jne	 SHORT $LN16@local_clea
  00106	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0010a	75 46		 jne	 SHORT $LN16@local_clea
  0010c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0011a	4c 8b cb	 mov	 r9, rbx
  0011d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00123	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0012b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00130	48 8b cb	 mov	 rcx, rbx
  00133	85 c0		 test	 eax, eax
  00135	74 07		 je	 SHORT $LN44@local_clea
  00137	e8 00 00 00 00	 call	 _Px_Dealloc
  0013c	eb 14		 jmp	 SHORT $LN16@local_clea
$LN44@local_clea:
  0013e	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00142	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00148	eb 08		 jmp	 SHORT $LN16@local_clea
$LN39@local_clea:
  0014a	48 8b cb	 mov	 rcx, rbx
  0014d	e8 00 00 00 00	 call	 Px_DecRef
$LN16@local_clea:

; 774  :     Py_CLEAR(self->dummies);

  00152	4c 8b 8f 80 00
	00 00		 mov	 r9, QWORD PTR [rdi+128]
  00159	4d 85 c9	 test	 r9, r9
  0015c	0f 84 98 00 00
	00		 je	 $LN12@local_clea
  00162	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@IPFPCOMB@?4?4?2Modules?2_threadmodule?4c?$AA@
  00169	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MDAJCGDD@local_clear?$AA@
  00170	41 b8 06 03 00
	00		 mov	 r8d, 774		; 00000306H
  00176	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0017e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00183	85 c0		 test	 eax, eax
  00185	75 73		 jne	 SHORT $LN12@local_clea
  00187	48 8b 9f 80 00
	00 00		 mov	 rbx, QWORD PTR [rdi+128]
  0018e	48 89 b7 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rsi
  00195	e8 00 00 00 00	 call	 _Py_PXCTX
  0019a	85 c0		 test	 eax, eax
  0019c	75 5c		 jne	 SHORT $LN12@local_clea
  0019e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001a2	a8 20		 test	 al, 32			; 00000020H
  001a4	75 4c		 jne	 SHORT $LN50@local_clea
  001a6	84 c0		 test	 al, al
  001a8	78 48		 js	 SHORT $LN50@local_clea
  001aa	a8 02		 test	 al, 2
  001ac	75 4c		 jne	 SHORT $LN12@local_clea
  001ae	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001b2	75 46		 jne	 SHORT $LN12@local_clea
  001b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001c2	4c 8b cb	 mov	 r9, rbx
  001c5	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001cb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001d3	e8 00 00 00 00	 call	 _PyParallel_Guard
  001d8	48 8b cb	 mov	 rcx, rbx
  001db	85 c0		 test	 eax, eax
  001dd	74 07		 je	 SHORT $LN55@local_clea
  001df	e8 00 00 00 00	 call	 _Px_Dealloc
  001e4	eb 14		 jmp	 SHORT $LN12@local_clea
$LN55@local_clea:
  001e6	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001ea	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001f0	eb 08		 jmp	 SHORT $LN12@local_clea
$LN50@local_clea:
  001f2	48 8b cb	 mov	 rcx, rbx
  001f5	e8 00 00 00 00	 call	 Px_DecRef
$LN12@local_clea:

; 775  :     Py_CLEAR(self->wr_callback);

  001fa	4c 8b 8f 88 00
	00 00		 mov	 r9, QWORD PTR [rdi+136]
  00201	4d 85 c9	 test	 r9, r9
  00204	0f 84 98 00 00
	00		 je	 $LN8@local_clea
  0020a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@IPFPCOMB@?4?4?2Modules?2_threadmodule?4c?$AA@
  00211	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MDAJCGDD@local_clear?$AA@
  00218	41 b8 07 03 00
	00		 mov	 r8d, 775		; 00000307H
  0021e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00226	e8 00 00 00 00	 call	 _PyParallel_Guard
  0022b	85 c0		 test	 eax, eax
  0022d	75 73		 jne	 SHORT $LN8@local_clea
  0022f	48 8b 9f 88 00
	00 00		 mov	 rbx, QWORD PTR [rdi+136]
  00236	48 89 b7 88 00
	00 00		 mov	 QWORD PTR [rdi+136], rsi
  0023d	e8 00 00 00 00	 call	 _Py_PXCTX
  00242	85 c0		 test	 eax, eax
  00244	75 5c		 jne	 SHORT $LN8@local_clea
  00246	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0024a	a8 20		 test	 al, 32			; 00000020H
  0024c	75 4c		 jne	 SHORT $LN61@local_clea
  0024e	84 c0		 test	 al, al
  00250	78 48		 js	 SHORT $LN61@local_clea
  00252	a8 02		 test	 al, 2
  00254	75 4c		 jne	 SHORT $LN8@local_clea
  00256	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0025a	75 46		 jne	 SHORT $LN8@local_clea
  0025c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00263	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0026a	4c 8b cb	 mov	 r9, rbx
  0026d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00273	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0027b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00280	48 8b cb	 mov	 rcx, rbx
  00283	85 c0		 test	 eax, eax
  00285	74 07		 je	 SHORT $LN66@local_clea
  00287	e8 00 00 00 00	 call	 _Px_Dealloc
  0028c	eb 14		 jmp	 SHORT $LN8@local_clea
$LN66@local_clea:
  0028e	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00292	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00298	eb 08		 jmp	 SHORT $LN8@local_clea
$LN61@local_clea:
  0029a	48 8b cb	 mov	 rcx, rbx
  0029d	e8 00 00 00 00	 call	 Px_DecRef
$LN8@local_clea:

; 776  :     /* Remove all strong references to dummies from the thread states */
; 777  :     if (self->key
; 778  :         && (tstate = PyThreadState_Get())
; 779  :         && tstate->interp) {

  002a2	48 83 7f 60 00	 cmp	 QWORD PTR [rdi+96], 0
  002a7	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  002ac	74 56		 je	 SHORT $LN71@local_clea
  002ae	e8 00 00 00 00	 call	 PyThreadState_Get
  002b3	48 85 c0	 test	 rax, rax
  002b6	74 4c		 je	 SHORT $LN71@local_clea
  002b8	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  002bc	48 85 c9	 test	 rcx, rcx
  002bf	74 43		 je	 SHORT $LN71@local_clea

; 780  :         for(tstate = PyInterpreterState_ThreadHead(tstate->interp);
; 781  :             tstate;
; 782  :             tstate = PyThreadState_Next(tstate))

  002c1	e8 00 00 00 00	 call	 PyInterpreterState_ThreadHead
  002c6	48 8b d8	 mov	 rbx, rax
  002c9	48 85 c0	 test	 rax, rax
  002cc	74 36		 je	 SHORT $LN71@local_clea
  002ce	66 90		 npad	 2
$LL4@local_clea:

; 783  :             if (tstate->dict &&
; 784  :                 PyDict_GetItem(tstate->dict, self->key))

  002d0	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  002d4	48 85 c9	 test	 rcx, rcx
  002d7	74 1b		 je	 SHORT $LN3@local_clea
  002d9	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  002dd	e8 00 00 00 00	 call	 PyDict_GetItem
  002e2	48 85 c0	 test	 rax, rax
  002e5	74 0d		 je	 SHORT $LN3@local_clea

; 785  :                 PyDict_DelItem(tstate->dict, self->key);

  002e7	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  002eb	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  002ef	e8 00 00 00 00	 call	 PyDict_DelItem
$LN3@local_clea:

; 780  :         for(tstate = PyInterpreterState_ThreadHead(tstate->interp);
; 781  :             tstate;
; 782  :             tstate = PyThreadState_Next(tstate))

  002f4	48 8b cb	 mov	 rcx, rbx
  002f7	e8 00 00 00 00	 call	 PyThreadState_Next
  002fc	48 8b d8	 mov	 rbx, rax
  002ff	48 85 c0	 test	 rax, rax
  00302	75 cc		 jne	 SHORT $LL4@local_clea
$LN71@local_clea:

; 786  :     }
; 787  :     return 0;

  00304	33 c0		 xor	 eax, eax

; 788  : }

  00306	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0030b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0030f	5f		 pop	 rdi
  00310	c3		 ret	 0
local_clear ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$local_dealloc DD imagerel local_dealloc
	DD	imagerel local_dealloc+175
	DD	imagerel $unwind$local_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$local_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_threadmodule.c
xdata	ENDS
;	COMDAT local_dealloc
_TEXT	SEGMENT
self$ = 64
local_dealloc PROC					; COMDAT

; 792  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 793  :     /* Weakrefs must be invalidated right now, otherwise they can be used
; 794  :        from code called below, which is very dangerous since Py_REFCNT(self) == 0 */
; 795  :     if (self->weakreflist != NULL)

  0000a	48 83 79 78 00	 cmp	 QWORD PTR [rcx+120], 0
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	74 05		 je	 SHORT $LN5@local_deal

; 796  :         PyObject_ClearWeakRefs((PyObject *) self);

  00014	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN5@local_deal:

; 797  : 
; 798  :     PyObject_GC_UnTrack(self);

  00019	48 8b cf	 mov	 rcx, rdi
  0001c	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 799  : 
; 800  :     local_clear(self);

  00021	48 8b cf	 mov	 rcx, rdi
  00024	e8 00 00 00 00	 call	 local_clear

; 801  :     Py_XDECREF(self->key);

  00029	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]
  0002d	48 85 db	 test	 rbx, rbx
  00030	74 65		 je	 SHORT $LN3@local_deal
  00032	e8 00 00 00 00	 call	 _Py_PXCTX
  00037	85 c0		 test	 eax, eax
  00039	75 5c		 jne	 SHORT $LN3@local_deal
  0003b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0003f	a8 20		 test	 al, 32			; 00000020H
  00041	75 4c		 jne	 SHORT $LN12@local_deal
  00043	84 c0		 test	 al, al
  00045	78 48		 js	 SHORT $LN12@local_deal
  00047	a8 02		 test	 al, 2
  00049	75 4c		 jne	 SHORT $LN3@local_deal
  0004b	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0004f	75 46		 jne	 SHORT $LN3@local_deal
  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0005f	4c 8b cb	 mov	 r9, rbx
  00062	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00068	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00070	e8 00 00 00 00	 call	 _PyParallel_Guard
  00075	48 8b cb	 mov	 rcx, rbx
  00078	85 c0		 test	 eax, eax
  0007a	74 07		 je	 SHORT $LN17@local_deal
  0007c	e8 00 00 00 00	 call	 _Px_Dealloc
  00081	eb 14		 jmp	 SHORT $LN3@local_deal
$LN17@local_deal:
  00083	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00087	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0008d	eb 08		 jmp	 SHORT $LN3@local_deal
$LN12@local_deal:
  0008f	48 8b cb	 mov	 rcx, rbx
  00092	e8 00 00 00 00	 call	 Px_DecRef
$LN3@local_deal:

; 802  :     Py_TYPE(self)->tp_free((PyObject*)self);

  00097	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0009b	48 8b cf	 mov	 rcx, rdi

; 803  : }

  0009e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a7	5f		 pop	 rdi
  000a8	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
local_dealloc ENDP
_TEXT	ENDS
EXTRN	PyBaseObject_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ldict DD imagerel _ldict
	DD	imagerel _ldict+65
	DD	imagerel $unwind$_ldict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_ldict DD imagerel _ldict+65
	DD	imagerel _ldict+164
	DD	imagerel $chain$0$_ldict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_ldict DD imagerel _ldict+164
	DD	imagerel _ldict+187
	DD	imagerel $chain$2$_ldict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_ldict DD 020021H
	DD	067400H
	DD	imagerel _ldict
	DD	imagerel _ldict+65
	DD	imagerel $unwind$_ldict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_ldict DD 020521H
	DD	067405H
	DD	imagerel _ldict
	DD	imagerel _ldict+65
	DD	imagerel $unwind$_ldict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ldict DD 040a01H
	DD	07340aH
	DD	06006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _ldict
_TEXT	SEGMENT
self$ = 48
_ldict	PROC						; COMDAT

; 808  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 809  :     PyObject *tdict, *ldict, *dummy;
; 810  : 
; 811  :     tdict = PyThreadState_GetDict();

  0000d	e8 00 00 00 00	 call	 PyThreadState_GetDict
  00012	48 8b f0	 mov	 rsi, rax

; 812  :     if (tdict == NULL) {

  00015	48 85 c0	 test	 rax, rax
  00018	75 20		 jne	 SHORT $LN5@ldict

; 813  :         PyErr_SetString(PyExc_SystemError,
; 814  :                         "Couldn't get thread-state dictionary");

  0001a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@PEAODEFD@Couldn?8t?5get?5thread?9state?5dictio@
  00028	e8 00 00 00 00	 call	 PyErr_SetString

; 815  :         return NULL;

  0002d	33 c0		 xor	 eax, eax

; 837  :     }
; 838  : 
; 839  :     return ldict;
; 840  : }

  0002f	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5e		 pop	 rsi
  00039	c3		 ret	 0
$LN5@ldict:

; 816  :     }
; 817  : 
; 818  :     dummy = PyDict_GetItem(tdict, self->key);

  0003a	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  0003e	48 8b c8	 mov	 rcx, rax
  00041	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00046	e8 00 00 00 00	 call	 PyDict_GetItem

; 819  :     if (dummy == NULL) {

  0004b	48 85 c0	 test	 rax, rax
  0004e	75 54		 jne	 SHORT $LN4@ldict

; 820  :         ldict = _local_create_dummy(self);

  00050	48 8b cb	 mov	 rcx, rbx
  00053	e8 00 00 00 00	 call	 _local_create_dummy
  00058	48 8b f8	 mov	 rdi, rax

; 821  :         if (ldict == NULL)

  0005b	48 85 c0	 test	 rax, rax

; 822  :             return NULL;

  0005e	74 32		 je	 SHORT $LN9@ldict

; 823  : 
; 824  :         if (Py_TYPE(self)->tp_init != PyBaseObject_Type.tp_init &&
; 825  :             Py_TYPE(self)->tp_init((PyObject*)self,
; 826  :                                    self->args, self->kw) < 0) {

  00060	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00064	4c 8b 88 80 01
	00 00		 mov	 r9, QWORD PTR [rax+384]
  0006b	4c 3b 0d 80 01
	00 00		 cmp	 r9, QWORD PTR PyBaseObject_Type+384
  00072	74 34		 je	 SHORT $LN1@ldict
  00074	4c 8b 43 70	 mov	 r8, QWORD PTR [rbx+112]
  00078	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  0007c	48 8b cb	 mov	 rcx, rbx
  0007f	41 ff d1	 call	 r9
  00082	85 c0		 test	 eax, eax
  00084	79 22		 jns	 SHORT $LN1@ldict

; 827  :             /* we need to get rid of ldict from thread so
; 828  :                we create a new one the next time we do an attr
; 829  :                access */
; 830  :             PyDict_DelItem(tdict, self->key);

  00086	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  0008a	48 8b ce	 mov	 rcx, rsi
  0008d	e8 00 00 00 00	 call	 PyDict_DelItem
$LN9@ldict:

; 831  :             return NULL;

  00092	33 c0		 xor	 eax, eax
  00094	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 837  :     }
; 838  : 
; 839  :     return ldict;
; 840  : }

  00099	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0009e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a2	5e		 pop	 rsi
  000a3	c3		 ret	 0
$LN4@ldict:

; 832  :         }
; 833  :     }
; 834  :     else {
; 835  :         assert(Py_TYPE(dummy) == &localdummytype);
; 836  :         ldict = ((localdummyobject *) dummy)->localdict;

  000a4	48 8b 78 60	 mov	 rdi, QWORD PTR [rax+96]
$LN1@ldict:

; 837  :     }
; 838  : 
; 839  :     return ldict;
; 840  : }

  000a8	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000ad	48 8b c7	 mov	 rax, rdi
  000b0	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  000b5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b9	5e		 pop	 rsi
  000ba	c3		 ret	 0
_ldict	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@MBODLJBI@?8?$CF?450s?8?5object?5attribute?5?8?$CFU?8?5is@ ; `string'
EXTRN	_PyObject_GenericSetAttrWithDict:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_AttributeError:QWORD
EXTRN	PyObject_RichCompareBool:PROC
_BSS	SEGMENT
str_dict DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$local_setattro DD imagerel local_setattro
	DD	imagerel local_setattro+146
	DD	imagerel $unwind$local_setattro
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$local_setattro DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CL@MBODLJBI@?8?$CF?450s?8?5object?5attribute?5?8?$CFU?8?5is@
CONST	SEGMENT
??_C@_0CL@MBODLJBI@?8?$CF?450s?8?5object?5attribute?5?8?$CFU?8?5is@ DB ''''
	DB	'%.50s'' object attribute ''%U'' is read-only', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT local_setattro
_TEXT	SEGMENT
self$ = 48
name$ = 56
v$ = 64
local_setattro PROC					; COMDAT

; 844  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b e8	 mov	 rbp, r8
  00017	48 8b da	 mov	 rbx, rdx
  0001a	48 8b f9	 mov	 rdi, rcx

; 845  :     PyObject *ldict;
; 846  :     int r;
; 847  : 
; 848  :     ldict = _ldict(self);

  0001d	e8 00 00 00 00	 call	 _ldict
  00022	48 8b f0	 mov	 rsi, rax

; 849  :     if (ldict == NULL)

  00025	48 85 c0	 test	 rax, rax

; 850  :         return -1;

  00028	74 38		 je	 SHORT $LN6@local_seta

; 851  : 
; 852  :     r = PyObject_RichCompareBool(name, str_dict, Py_EQ);

  0002a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR str_dict
  00031	41 b8 02 00 00
	00		 mov	 r8d, 2
  00037	48 8b cb	 mov	 rcx, rbx
  0003a	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 853  :     if (r == 1) {

  0003f	83 f8 01	 cmp	 eax, 1
  00042	75 23		 jne	 SHORT $LN2@local_seta

; 854  :         PyErr_Format(PyExc_AttributeError,
; 855  :                      "'%.50s' object attribute '%U' is read-only",
; 856  :                      Py_TYPE(self)->tp_name, name);

  00044	4c 8b 47 58	 mov	 r8, QWORD PTR [rdi+88]
  00048	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@MBODLJBI@?8?$CF?450s?8?5object?5attribute?5?8?$CFU?8?5is@
  00056	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0005a	4c 8b cb	 mov	 r9, rbx
  0005d	e8 00 00 00 00	 call	 PyErr_Format
$LN6@local_seta:

; 857  :         return -1;

  00062	83 c8 ff	 or	 eax, -1
  00065	eb 16		 jmp	 SHORT $LN4@local_seta
$LN2@local_seta:

; 858  :     }
; 859  :     if (r == -1)

  00067	83 f8 ff	 cmp	 eax, -1

; 860  :         return -1;

  0006a	74 f6		 je	 SHORT $LN6@local_seta

; 861  : 
; 862  :     return _PyObject_GenericSetAttrWithDict((PyObject *)self, name, v, ldict);

  0006c	4c 8b ce	 mov	 r9, rsi
  0006f	4c 8b c5	 mov	 r8, rbp
  00072	48 8b d3	 mov	 rdx, rbx
  00075	48 8b cf	 mov	 rcx, rdi
  00078	e8 00 00 00 00	 call	 _PyObject_GenericSetAttrWithDict
$LN4@local_seta:

; 863  : }

  0007d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00082	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00087	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0008c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00090	5f		 pop	 rdi
  00091	c3		 ret	 0
local_setattro ENDP
_TEXT	ENDS
EXTRN	_PyObject_GenericGetAttrWithDict:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$local_getattro DD imagerel local_getattro
	DD	imagerel local_getattro+272
	DD	imagerel $unwind$local_getattro
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$local_getattro DD 08d301H
	DD	0874d3H
	DD	0a540fH
	DD	09340fH
	DD	0600b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_threadmodule.c
xdata	ENDS
;	COMDAT local_getattro
_TEXT	SEGMENT
self$ = 64
name$ = 72
local_getattro PROC					; COMDAT

; 913  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b ea	 mov	 rbp, rdx
  00012	48 8b f1	 mov	 rsi, rcx

; 914  :     PyObject *ldict, *value;
; 915  :     int r;
; 916  : 
; 917  :     ldict = _ldict(self);

  00015	e8 00 00 00 00	 call	 _ldict
  0001a	48 8b d8	 mov	 rbx, rax

; 918  :     if (ldict == NULL)

  0001d	48 85 c0	 test	 rax, rax
  00020	75 12		 jne	 SHORT $LN5@local_geta
$LN13@local_geta:

; 919  :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 941  : }

  00024	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00029	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  0002e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00032	5e		 pop	 rsi
  00033	c3		 ret	 0
$LN5@local_geta:

; 920  : 
; 921  :     r = PyObject_RichCompareBool(name, str_dict, Py_EQ);

  00034	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR str_dict
  0003b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00041	48 8b cd	 mov	 rcx, rbp
  00044	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 922  :     if (r == 1) {

  00049	83 f8 01	 cmp	 eax, 1
  0004c	75 4e		 jne	 SHORT $LN4@local_geta

; 923  :         Py_INCREF(ldict);

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	75 32		 jne	 SHORT $LN9@local_geta
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00065	4c 8b cb	 mov	 r9, rbx
  00068	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00076	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007b	85 c0		 test	 eax, eax
  0007d	75 06		 jne	 SHORT $LN8@local_geta
  0007f	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00083	74 04		 je	 SHORT $LN9@local_geta
$LN8@local_geta:
  00085	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN9@local_geta:

; 924  :         return ldict;

  00089	48 8b c3	 mov	 rax, rbx

; 941  : }

  0008c	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00091	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00096	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009a	5e		 pop	 rsi
  0009b	c3		 ret	 0
$LN4@local_geta:

; 925  :     }
; 926  :     if (r == -1)

  0009c	83 f8 ff	 cmp	 eax, -1

; 927  :         return NULL;

  0009f	74 81		 je	 SHORT $LN13@local_geta

; 928  : 
; 929  :     if (Py_TYPE(self) != &localtype)

  000a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:localtype

; 930  :         /* use generic lookup for subtypes */
; 931  :         return _PyObject_GenericGetAttrWithDict((PyObject *)self, name, ldict);

  000a8	48 8b d5	 mov	 rdx, rbp
  000ab	48 39 46 58	 cmp	 QWORD PTR [rsi+88], rax
  000af	74 1a		 je	 SHORT $LN2@local_geta
  000b1	4c 8b c3	 mov	 r8, rbx
  000b4	48 8b ce	 mov	 rcx, rsi

; 941  : }

  000b7	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000bc	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000c1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c5	5e		 pop	 rsi
  000c6	e9 00 00 00 00	 jmp	 _PyObject_GenericGetAttrWithDict
$LN2@local_geta:

; 932  : 
; 933  :     /* Optimization: just look in dict ourselves */
; 934  :     value = PyDict_GetItem(ldict, name);

  000cb	48 8b cb	 mov	 rcx, rbx
  000ce	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  000d3	e8 00 00 00 00	 call	 PyDict_GetItem
  000d8	48 8b f8	 mov	 rdi, rax

; 935  :     if (value == NULL)

  000db	48 85 c0	 test	 rax, rax
  000de	75 10		 jne	 SHORT $LN1@local_geta

; 936  :         /* Fall back on generic to get __class__ and __dict__ */
; 937  :         return _PyObject_GenericGetAttrWithDict((PyObject *)self, name, ldict);

  000e0	4c 8b c3	 mov	 r8, rbx
  000e3	48 8b d5	 mov	 rdx, rbp
  000e6	48 8b ce	 mov	 rcx, rsi
  000e9	e8 00 00 00 00	 call	 _PyObject_GenericGetAttrWithDict
  000ee	eb 0b		 jmp	 SHORT $LN12@local_geta
$LN1@local_geta:

; 938  : 
; 939  :     Py_INCREF(value);

  000f0	48 8b c8	 mov	 rcx, rax
  000f3	e8 00 00 00 00	 call	 _Py_IncRef

; 940  :     return value;

  000f8	48 8b c7	 mov	 rax, rdi
$LN12@local_geta:

; 941  : }

  000fb	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  00100	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00105	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  0010a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010e	5e		 pop	 rsi
  0010f	c3		 ret	 0
local_getattro ENDP
_TEXT	ENDS
EXTRN	PyErr_WriteUnraisable:PROC
EXTRN	PyErr_Occurred:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_localdummy_destroyed DD imagerel _localdummy_destroyed
	DD	imagerel _localdummy_destroyed+254
	DD	imagerel $unwind$_localdummy_destroyed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_localdummy_destroyed DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_threadmodule.c
xdata	ENDS
;	COMDAT _localdummy_destroyed
_TEXT	SEGMENT
localweakref$ = 64
dummyweakref$ = 72
_localdummy_destroyed PROC				; COMDAT

; 946  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 947  :     PyObject *obj;
; 948  :     localobject *self;
; 949  :     assert(PyWeakref_CheckRef(localweakref));
; 950  :     obj = PyWeakref_GET_OBJECT(localweakref);

  0000f	48 8b 59 60	 mov	 rbx, QWORD PTR [rcx+96]
  00013	48 8b fa	 mov	 rdi, rdx
  00016	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
  0001d	48 83 7b 50 00	 cmp	 QWORD PTR [rbx+80], 0
  00022	0f 8e 82 00 00
	00		 jle	 $LN21@localdummy@2

; 951  :     if (obj == Py_None)

  00028	48 3b de	 cmp	 rbx, rsi
  0002b	74 7d		 je	 SHORT $LN21@localdummy@2

; 953  :     Py_INCREF(obj);

  0002d	e8 00 00 00 00	 call	 _Py_PXCTX
  00032	85 c0		 test	 eax, eax
  00034	75 32		 jne	 SHORT $LN14@localdummy@2
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00044	4c 8b cb	 mov	 r9, rbx
  00047	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0004d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00055	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005a	85 c0		 test	 eax, eax
  0005c	75 06		 jne	 SHORT $LN13@localdummy@2
  0005e	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00062	74 04		 je	 SHORT $LN14@localdummy@2
$LN13@localdummy@2:
  00064	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN14@localdummy@2:

; 954  :     assert(PyObject_TypeCheck(obj, &localtype));
; 955  :     /* If the thread-local object is still alive and not being cleared,
; 956  :        remove the corresponding local dict */
; 957  :     self = (localobject *) obj;
; 958  :     if (self->dummies != NULL) {

  00068	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  0006f	48 85 c9	 test	 rcx, rcx
  00072	74 2e		 je	 SHORT $LN1@localdummy@2

; 959  :         PyObject *ldict;
; 960  :         ldict = PyDict_GetItem(self->dummies, dummyweakref);

  00074	48 8b d7	 mov	 rdx, rdi
  00077	e8 00 00 00 00	 call	 PyDict_GetItem

; 961  :         if (ldict != NULL) {

  0007c	48 85 c0	 test	 rax, rax
  0007f	74 0f		 je	 SHORT $LN2@localdummy@2

; 962  :             PyDict_DelItem(self->dummies, dummyweakref);

  00081	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  00088	48 8b d7	 mov	 rdx, rdi
  0008b	e8 00 00 00 00	 call	 PyDict_DelItem
$LN2@localdummy@2:

; 963  :         }
; 964  :         if (PyErr_Occurred())

  00090	e8 00 00 00 00	 call	 PyErr_Occurred
  00095	48 85 c0	 test	 rax, rax
  00098	74 08		 je	 SHORT $LN1@localdummy@2

; 965  :             PyErr_WriteUnraisable(obj);

  0009a	48 8b cb	 mov	 rcx, rbx
  0009d	e8 00 00 00 00	 call	 PyErr_WriteUnraisable
$LN1@localdummy@2:

; 966  :     }
; 967  :     Py_DECREF(obj);

  000a2	48 8b cb	 mov	 rcx, rbx
  000a5	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@localdummy@2:

; 952  :         Py_RETURN_NONE;

  000aa	e8 00 00 00 00	 call	 _Py_PXCTX
  000af	85 c0		 test	 eax, eax
  000b1	75 38		 jne	 SHORT $LN10@localdummy@2
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000c1	4c 8b ce	 mov	 r9, rsi
  000c4	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ca	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000d2	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d7	85 c0		 test	 eax, eax
  000d9	75 09		 jne	 SHORT $LN9@localdummy@2
  000db	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000e2	74 07		 je	 SHORT $LN10@localdummy@2
$LN9@localdummy@2:
  000e4	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN10@localdummy@2:

; 968  :     Py_RETURN_NONE;
; 969  : }

  000eb	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000f0	48 8b c6	 mov	 rax, rsi
  000f3	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000f8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fc	5f		 pop	 rdi
  000fd	c3		 ret	 0
_localdummy_destroyed ENDP
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_06FJGNEBG@stderr?$AA@			; `string'
PUBLIC	??_C@_0CK@OCFOHGPE@Unhandled?5exception?5in?5thread?5st@ ; `string'
EXTRN	PyThread_exit_thread:PROC
EXTRN	PyThreadState_DeleteCurrent:PROC
EXTRN	PyThreadState_Clear:PROC
EXTRN	__imp_free:PROC
EXTRN	_PxMem_Free:PROC
EXTRN	PyErr_PrintEx:PROC
EXTRN	PyErr_Restore:PROC
EXTRN	PyObject_Print:PROC
EXTRN	__imp___iob_func:PROC
EXTRN	PyFile_WriteObject:PROC
EXTRN	PySys_GetObject:PROC
EXTRN	PyErr_Fetch:PROC
EXTRN	PySys_WriteStderr:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_SystemExit:QWORD
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	PyEval_AcquireThread:PROC
EXTRN	_PyThreadState_Init:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$t_bootstrap DD imagerel t_bootstrap
	DD	imagerel t_bootstrap+433
	DD	imagerel $unwind$t_bootstrap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$t_bootstrap DD 040801H
	DD	070045208H
	DD	030026003H
xdata	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJGNEBG@stderr?$AA@
CONST	SEGMENT
??_C@_06FJGNEBG@stderr?$AA@ DB 'stderr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OCFOHGPE@Unhandled?5exception?5in?5thread?5st@
CONST	SEGMENT
??_C@_0CK@OCFOHGPE@Unhandled?5exception?5in?5thread?5st@ DB 'Unhandled ex'
	DB	'ception in thread started by ', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_threadmodule.c
CONST	ENDS
;	COMDAT t_bootstrap
_TEXT	SEGMENT
tb$20981 = 80
boot_raw$ = 80
value$20980 = 88
exc$20979 = 96
t_bootstrap PROC					; COMDAT

; 983  : {

  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 984  :     struct bootstate *boot = (struct bootstate *) boot_raw;
; 985  :     PyThreadState *tstate;
; 986  :     PyObject *res;
; 987  : 
; 988  :     tstate = boot->tstate;

  00008	48 8b 71 20	 mov	 rsi, QWORD PTR [rcx+32]
  0000c	48 8b f9	 mov	 rdi, rcx

; 989  :     tstate->thread_id = PyThread_get_thread_ident();

  0000f	e8 00 00 00 00	 call	 PyThread_get_thread_ident

; 990  :     _PyThreadState_Init(tstate);

  00014	48 8b ce	 mov	 rcx, rsi
  00017	89 86 90 00 00
	00		 mov	 DWORD PTR [rsi+144], eax
  0001d	e8 00 00 00 00	 call	 _PyThreadState_Init

; 991  :     PyEval_AcquireThread(tstate);

  00022	48 8b ce	 mov	 rcx, rsi
  00025	e8 00 00 00 00	 call	 PyEval_AcquireThread

; 992  :     nb_threads++;
; 993  :     res = PyEval_CallObjectWithKeywords(
; 994  :         boot->func, boot->args, boot->keyw);

  0002a	4c 8b 47 18	 mov	 r8, QWORD PTR [rdi+24]
  0002e	48 8b 57 10	 mov	 rdx, QWORD PTR [rdi+16]
  00032	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  00036	ff 05 00 00 00
	00		 inc	 DWORD PTR nb_threads
  0003c	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords

; 995  :     if (res == NULL) {

  00041	48 85 c0	 test	 rax, rax
  00044	0f 85 a7 00 00
	00		 jne	 $LN10@t_bootstra

; 996  :         if (PyErr_ExceptionMatches(PyExc_SystemExit))

  0004a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemExit
  00051	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00056	85 c0		 test	 eax, eax
  00058	74 0a		 je	 SHORT $LN9@t_bootstra

; 997  :             PyErr_Clear();

  0005a	e8 00 00 00 00	 call	 PyErr_Clear

; 998  :         else {

  0005f	e9 95 00 00 00	 jmp	 $LN5@t_bootstra
$LN9@t_bootstra:

; 999  :             PyObject *file;
; 1000 :             PyObject *exc, *value, *tb;
; 1001 :             PySys_WriteStderr(
; 1002 :                 "Unhandled exception in thread started by ");

  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CK@OCFOHGPE@Unhandled?5exception?5in?5thread?5st@
  0006b	e8 00 00 00 00	 call	 PySys_WriteStderr

; 1003 :             PyErr_Fetch(&exc, &value, &tb);

  00070	4c 8d 44 24 50	 lea	 r8, QWORD PTR tb$20981[rsp]
  00075	48 8d 54 24 58	 lea	 rdx, QWORD PTR value$20980[rsp]
  0007a	48 8d 4c 24 60	 lea	 rcx, QWORD PTR exc$20979[rsp]
  0007f	e8 00 00 00 00	 call	 PyErr_Fetch

; 1004 :             file = PySys_GetObject("stderr");

  00084	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  0008b	e8 00 00 00 00	 call	 PySys_GetObject

; 1005 :             if (file != NULL && file != Py_None)

  00090	48 85 c0	 test	 rax, rax
  00093	74 1d		 je	 SHORT $LN7@t_bootstra
  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0009c	48 3b c1	 cmp	 rax, rcx
  0009f	74 11		 je	 SHORT $LN7@t_bootstra

; 1006 :                 PyFile_WriteObject(boot->func, file, 0);

  000a1	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  000a5	45 33 c0	 xor	 r8d, r8d
  000a8	48 8b d0	 mov	 rdx, rax
  000ab	e8 00 00 00 00	 call	 PyFile_WriteObject

; 1007 :             else

  000b0	eb 16		 jmp	 SHORT $LN6@t_bootstra
$LN7@t_bootstra:

; 1008 :                 PyObject_Print(boot->func, stderr, 0);

  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  000b8	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  000bc	45 33 c0	 xor	 r8d, r8d
  000bf	48 8d 50 60	 lea	 rdx, QWORD PTR [rax+96]
  000c3	e8 00 00 00 00	 call	 PyObject_Print
$LN6@t_bootstra:

; 1009 :             PySys_WriteStderr("\n");

  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  000cf	e8 00 00 00 00	 call	 PySys_WriteStderr

; 1010 :             PyErr_Restore(exc, value, tb);

  000d4	4c 8b 44 24 50	 mov	 r8, QWORD PTR tb$20981[rsp]
  000d9	48 8b 54 24 58	 mov	 rdx, QWORD PTR value$20980[rsp]
  000de	48 8b 4c 24 60	 mov	 rcx, QWORD PTR exc$20979[rsp]
  000e3	e8 00 00 00 00	 call	 PyErr_Restore

; 1011 :             PyErr_PrintEx(0);

  000e8	33 c9		 xor	 ecx, ecx
  000ea	e8 00 00 00 00	 call	 PyErr_PrintEx

; 1012 :         }
; 1013 :     }
; 1014 :     else

  000ef	eb 08		 jmp	 SHORT $LN5@t_bootstra
$LN10@t_bootstra:

; 1015 :         Py_DECREF(res);

  000f1	48 8b c8	 mov	 rcx, rax
  000f4	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@t_bootstra:

; 1016 :     Py_DECREF(boot->func);

  000f9	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  000fd	e8 00 00 00 00	 call	 _Py_DecRef

; 1017 :     Py_DECREF(boot->args);

  00102	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  00106	e8 00 00 00 00	 call	 _Py_DecRef

; 1018 :     Py_XDECREF(boot->keyw);

  0010b	48 8b 5f 18	 mov	 rbx, QWORD PTR [rdi+24]
  0010f	48 85 db	 test	 rbx, rbx
  00112	74 65		 je	 SHORT $LN3@t_bootstra
  00114	e8 00 00 00 00	 call	 _Py_PXCTX
  00119	85 c0		 test	 eax, eax
  0011b	75 5c		 jne	 SHORT $LN3@t_bootstra
  0011d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00121	a8 20		 test	 al, 32			; 00000020H
  00123	75 4c		 jne	 SHORT $LN19@t_bootstra
  00125	84 c0		 test	 al, al
  00127	78 48		 js	 SHORT $LN19@t_bootstra
  00129	a8 02		 test	 al, 2
  0012b	75 4c		 jne	 SHORT $LN3@t_bootstra
  0012d	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00131	75 46		 jne	 SHORT $LN3@t_bootstra
  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00141	4c 8b cb	 mov	 r9, rbx
  00144	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0014a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00152	e8 00 00 00 00	 call	 _PyParallel_Guard
  00157	48 8b cb	 mov	 rcx, rbx
  0015a	85 c0		 test	 eax, eax
  0015c	74 07		 je	 SHORT $LN24@t_bootstra
  0015e	e8 00 00 00 00	 call	 _Px_Dealloc
  00163	eb 14		 jmp	 SHORT $LN3@t_bootstra
$LN24@t_bootstra:
  00165	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00169	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0016f	eb 08		 jmp	 SHORT $LN3@t_bootstra
$LN19@t_bootstra:
  00171	48 8b cb	 mov	 rcx, rbx
  00174	e8 00 00 00 00	 call	 Px_DecRef
$LN3@t_bootstra:

; 1019 :     PyMem_DEL(boot_raw);

  00179	e8 00 00 00 00	 call	 _Py_PXCTX
  0017e	48 8b cf	 mov	 rcx, rdi
  00181	85 c0		 test	 eax, eax
  00183	74 07		 je	 SHORT $LN13@t_bootstra
  00185	e8 00 00 00 00	 call	 _PxMem_Free
  0018a	eb 06		 jmp	 SHORT $LN14@t_bootstra
$LN13@t_bootstra:
  0018c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN14@t_bootstra:

; 1020 :     nb_threads--;

  00192	ff 0d 00 00 00
	00		 dec	 DWORD PTR nb_threads

; 1021 :     PyThreadState_Clear(tstate);

  00198	48 8b ce	 mov	 rcx, rsi
  0019b	e8 00 00 00 00	 call	 PyThreadState_Clear

; 1022 :     PyThreadState_DeleteCurrent();

  001a0	e8 00 00 00 00	 call	 PyThreadState_DeleteCurrent

; 1023 :     PyThread_exit_thread();
; 1024 : }

  001a5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001a9	5f		 pop	 rdi
  001aa	5e		 pop	 rsi
  001ab	5b		 pop	 rbx
  001ac	e9 00 00 00 00	 jmp	 PyThread_exit_thread
t_bootstrap ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@ODCFJGAK@can?8t?5start?5new?5thread?$AA@ ; `string'
PUBLIC	??_C@_0CG@MFDKJLAE@optional?53rd?5arg?5must?5be?5a?5dicti@ ; `string'
PUBLIC	??_C@_0BI@FCDOBOF@2nd?5arg?5must?5be?5a?5tuple?$AA@ ; `string'
PUBLIC	??_C@_0BL@JGMPDGMG@first?5arg?5must?5be?5callable?$AA@ ; `string'
EXTRN	PyLong_FromLong:PROC
EXTRN	PyThread_start_new_thread:PROC
EXTRN	PyEval_InitThreads:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	_PyThreadState_Prealloc:PROC
EXTRN	_PyThreadState_Current:QWORD
EXTRN	_PyParallel_GetThreadState:PROC
EXTRN	__imp_malloc:PROC
EXTRN	_PxMem_Malloc:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyCallable_Check:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$thread_PyThread_start_new_thread DD imagerel thread_PyThread_start_new_thread
	DD	imagerel thread_PyThread_start_new_thread+210
	DD	imagerel $unwind$thread_PyThread_start_new_thread
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$thread_PyThread_start_new_thread DD imagerel thread_PyThread_start_new_thread+210
	DD	imagerel thread_PyThread_start_new_thread+353
	DD	imagerel $chain$0$thread_PyThread_start_new_thread
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$thread_PyThread_start_new_thread DD imagerel thread_PyThread_start_new_thread+353
	DD	imagerel thread_PyThread_start_new_thread+374
	DD	imagerel $chain$2$thread_PyThread_start_new_thread
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$thread_PyThread_start_new_thread DD imagerel thread_PyThread_start_new_thread+374
	DD	imagerel thread_PyThread_start_new_thread+526
	DD	imagerel $chain$4$thread_PyThread_start_new_thread
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$thread_PyThread_start_new_thread DD imagerel thread_PyThread_start_new_thread+526
	DD	imagerel thread_PyThread_start_new_thread+544
	DD	imagerel $chain$6$thread_PyThread_start_new_thread
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$thread_PyThread_start_new_thread DD imagerel thread_PyThread_start_new_thread+544
	DD	imagerel thread_PyThread_start_new_thread+561
	DD	imagerel $chain$8$thread_PyThread_start_new_thread
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$thread_PyThread_start_new_thread DD 020021H
	DD	0a3400H
	DD	imagerel thread_PyThread_start_new_thread
	DD	imagerel thread_PyThread_start_new_thread+210
	DD	imagerel $unwind$thread_PyThread_start_new_thread
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$thread_PyThread_start_new_thread DD 020021H
	DD	0a3400H
	DD	imagerel thread_PyThread_start_new_thread
	DD	imagerel thread_PyThread_start_new_thread+210
	DD	imagerel $unwind$thread_PyThread_start_new_thread
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$thread_PyThread_start_new_thread DD 020021H
	DD	0a3400H
	DD	imagerel thread_PyThread_start_new_thread
	DD	imagerel thread_PyThread_start_new_thread+210
	DD	imagerel $unwind$thread_PyThread_start_new_thread
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$thread_PyThread_start_new_thread DD 020021H
	DD	0a3400H
	DD	imagerel thread_PyThread_start_new_thread
	DD	imagerel thread_PyThread_start_new_thread+210
	DD	imagerel $unwind$thread_PyThread_start_new_thread
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$thread_PyThread_start_new_thread DD 020521H
	DD	0a3405H
	DD	imagerel thread_PyThread_start_new_thread
	DD	imagerel thread_PyThread_start_new_thread+210
	DD	imagerel $unwind$thread_PyThread_start_new_thread
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$thread_PyThread_start_new_thread DD 010701H
	DD	0a207H
xdata	ENDS
;	COMDAT ??_C@_0BH@ODCFJGAK@can?8t?5start?5new?5thread?$AA@
CONST	SEGMENT
??_C@_0BH@ODCFJGAK@can?8t?5start?5new?5thread?$AA@ DB 'can''t start new t'
	DB	'hread', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MFDKJLAE@optional?53rd?5arg?5must?5be?5a?5dicti@
CONST	SEGMENT
??_C@_0CG@MFDKJLAE@optional?53rd?5arg?5must?5be?5a?5dicti@ DB 'optional 3'
	DB	'rd arg must be a dictionary', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FCDOBOF@2nd?5arg?5must?5be?5a?5tuple?$AA@
CONST	SEGMENT
??_C@_0BI@FCDOBOF@2nd?5arg?5must?5be?5a?5tuple?$AA@ DB '2nd arg must be a'
	DB	' tuple', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JGMPDGMG@first?5arg?5must?5be?5callable?$AA@
CONST	SEGMENT
??_C@_0BL@JGMPDGMG@first?5arg?5must?5be?5callable?$AA@ DB 'first arg must'
	DB	' be callable', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT thread_PyThread_start_new_thread
_TEXT	SEGMENT
args$ = 64
self$ = 96
fargs$ = 104
keyw$ = 112
func$ = 120
thread_PyThread_start_new_thread PROC			; COMDAT

; 1028 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1029 :     PyObject *func, *args, *keyw = NULL;
; 1030 :     struct bootstate *boot;
; 1031 :     long ident;
; 1032 : 
; 1033 :     if (!PyArg_UnpackTuple(fargs, "start_new_thread", 2, 3,
; 1034 :                            &func, &args, &keyw))

  00007	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0000b	48 8b c2	 mov	 rax, rdx
  0000e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00014	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00018	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@NIEJKBPO@start_new_thread?$AA@
  00023	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00027	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0002b	45 8d 41 ff	 lea	 r8d, QWORD PTR [r9-1]
  0002f	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  00033	48 8b c8	 mov	 rcx, rax
  00036	49 c7 43 18 00
	00 00 00	 mov	 QWORD PTR [r11+24], 0
  0003e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00043	85 c0		 test	 eax, eax

; 1035 :         return NULL;

  00045	74 21		 je	 SHORT $LN28@thread_PyT

; 1036 :     if (!PyCallable_Check(func)) {

  00047	48 8b 4c 24 78	 mov	 rcx, QWORD PTR func$[rsp]
  0004c	e8 00 00 00 00	 call	 PyCallable_Check
  00051	85 c0		 test	 eax, eax
  00053	75 1a		 jne	 SHORT $LN14@thread_PyT

; 1037 :         PyErr_SetString(PyExc_TypeError,
; 1038 :                         "first arg must be callable");

  00055	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@JGMPDGMG@first?5arg?5must?5be?5callable?$AA@
  00063	e8 00 00 00 00	 call	 PyErr_SetString
$LN28@thread_PyT:

; 1039 :         return NULL;

  00068	33 c0		 xor	 eax, eax

; 1078 : }

  0006a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0006e	c3		 ret	 0
$LN14@thread_PyT:

; 1040 :     }
; 1041 :     if (!PyTuple_Check(args)) {

  0006f	48 8b 44 24 40	 mov	 rax, QWORD PTR args$[rsp]
  00074	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00078	f7 81 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rcx+256], 67108864 ; 04000000H
  00082	75 1a		 jne	 SHORT $LN13@thread_PyT

; 1042 :         PyErr_SetString(PyExc_TypeError,
; 1043 :                         "2nd arg must be a tuple");

  00084	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0008b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@FCDOBOF@2nd?5arg?5must?5be?5a?5tuple?$AA@
  00092	e8 00 00 00 00	 call	 PyErr_SetString

; 1044 :         return NULL;

  00097	33 c0		 xor	 eax, eax

; 1078 : }

  00099	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0009d	c3		 ret	 0
$LN13@thread_PyT:

; 1045 :     }
; 1046 :     if (keyw != NULL && !PyDict_Check(keyw)) {

  0009e	48 8b 44 24 70	 mov	 rax, QWORD PTR keyw$[rsp]
  000a3	48 85 c0	 test	 rax, rax
  000a6	74 2a		 je	 SHORT $LN12@thread_PyT
  000a8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ac	f7 80 00 01 00
	00 00 00 00 20	 test	 DWORD PTR [rax+256], 536870912 ; 20000000H
  000b6	75 1a		 jne	 SHORT $LN12@thread_PyT

; 1047 :         PyErr_SetString(PyExc_TypeError,
; 1048 :                         "optional 3rd arg must be a dictionary");

  000b8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@MFDKJLAE@optional?53rd?5arg?5must?5be?5a?5dicti@
  000c6	e8 00 00 00 00	 call	 PyErr_SetString

; 1049 :         return NULL;

  000cb	33 c0		 xor	 eax, eax

; 1078 : }

  000cd	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000d1	c3		 ret	 0
$LN12@thread_PyT:
  000d2	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx

; 1050 :     }
; 1051 :     boot = PyMem_NEW(struct bootstate, 1);

  000d7	e8 00 00 00 00	 call	 _Py_PXCTX
  000dc	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  000e1	85 c0		 test	 eax, eax
  000e3	74 07		 je	 SHORT $LN18@thread_PyT
  000e5	e8 00 00 00 00	 call	 _PxMem_Malloc
  000ea	eb 06		 jmp	 SHORT $LN27@thread_PyT
$LN18@thread_PyT:
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
$LN27@thread_PyT:
  000f2	48 8b d8	 mov	 rbx, rax

; 1052 :     if (boot == NULL)

  000f5	48 85 c0	 test	 rax, rax

; 1053 :         return PyErr_NoMemory();

  000f8	74 6d		 je	 SHORT $LN23@thread_PyT

; 1054 :     boot->interp = PyThreadState_GET()->interp;

  000fa	e8 00 00 00 00	 call	 _Py_PXCTX
  000ff	85 c0		 test	 eax, eax
  00101	74 07		 je	 SHORT $LN20@thread_PyT
  00103	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00108	eb 07		 jmp	 SHORT $LN21@thread_PyT
$LN20@thread_PyT:
  0010a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN21@thread_PyT:
  00111	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00115	48 89 0b	 mov	 QWORD PTR [rbx], rcx

; 1055 :     boot->func = func;

  00118	48 8b 44 24 78	 mov	 rax, QWORD PTR func$[rsp]
  0011d	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 1056 :     boot->args = args;

  00121	48 8b 44 24 40	 mov	 rax, QWORD PTR args$[rsp]
  00126	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 1057 :     boot->keyw = keyw;

  0012a	48 8b 44 24 70	 mov	 rax, QWORD PTR keyw$[rsp]
  0012f	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax

; 1058 :     boot->tstate = _PyThreadState_Prealloc(boot->interp);

  00133	e8 00 00 00 00	 call	 _PyThreadState_Prealloc
  00138	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax

; 1059 :     if (boot->tstate == NULL) {

  0013c	48 85 c0	 test	 rax, rax
  0013f	75 35		 jne	 SHORT $LN10@thread_PyT

; 1060 :         PyMem_DEL(boot);

  00141	e8 00 00 00 00	 call	 _Py_PXCTX
  00146	48 8b cb	 mov	 rcx, rbx
  00149	85 c0		 test	 eax, eax
  0014b	74 14		 je	 SHORT $LN22@thread_PyT
  0014d	e8 00 00 00 00	 call	 _PxMem_Free

; 1061 :         return PyErr_NoMemory();

  00152	e8 00 00 00 00	 call	 PyErr_NoMemory
  00157	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 1078 : }

  0015c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00160	c3		 ret	 0
$LN22@thread_PyT:

; 1060 :         PyMem_DEL(boot);

  00161	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN23@thread_PyT:

; 1061 :         return PyErr_NoMemory();

  00167	e8 00 00 00 00	 call	 PyErr_NoMemory
  0016c	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 1078 : }

  00171	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00175	c3		 ret	 0
$LN10@thread_PyT:

; 1062 :     }
; 1063 :     Py_INCREF(func);

  00176	48 8b 4c 24 78	 mov	 rcx, QWORD PTR func$[rsp]
  0017b	e8 00 00 00 00	 call	 _Py_IncRef

; 1064 :     Py_INCREF(args);

  00180	48 8b 4c 24 40	 mov	 rcx, QWORD PTR args$[rsp]
  00185	e8 00 00 00 00	 call	 _Py_IncRef

; 1065 :     Py_XINCREF(keyw);

  0018a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR keyw$[rsp]
  0018f	48 85 c9	 test	 rcx, rcx
  00192	74 05		 je	 SHORT $LN8@thread_PyT
  00194	e8 00 00 00 00	 call	 _Py_IncRef
$LN8@thread_PyT:

; 1066 :     PyEval_InitThreads(); /* Start the interpreter's thread-awareness */

  00199	e8 00 00 00 00	 call	 PyEval_InitThreads

; 1067 :     ident = PyThread_start_new_thread(t_bootstrap, (void*) boot);

  0019e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:t_bootstrap
  001a5	48 8b d3	 mov	 rdx, rbx
  001a8	e8 00 00 00 00	 call	 PyThread_start_new_thread

; 1068 :     if (ident == -1) {

  001ad	83 f8 ff	 cmp	 eax, -1
  001b0	75 6e		 jne	 SHORT $LN5@thread_PyT

; 1069 :         PyErr_SetString(ThreadError, "can't start new thread");

  001b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ThreadError
  001b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@ODCFJGAK@can?8t?5start?5new?5thread?$AA@
  001c0	e8 00 00 00 00	 call	 PyErr_SetString

; 1070 :         Py_DECREF(func);

  001c5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR func$[rsp]
  001ca	e8 00 00 00 00	 call	 _Py_DecRef

; 1071 :         Py_DECREF(args);

  001cf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR args$[rsp]
  001d4	e8 00 00 00 00	 call	 _Py_DecRef

; 1072 :         Py_XDECREF(keyw);

  001d9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR keyw$[rsp]
  001de	48 85 c9	 test	 rcx, rcx
  001e1	74 05		 je	 SHORT $LN3@thread_PyT
  001e3	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@thread_PyT:

; 1073 :         PyThreadState_Clear(boot->tstate);

  001e8	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  001ec	e8 00 00 00 00	 call	 PyThreadState_Clear

; 1074 :         PyMem_DEL(boot);

  001f1	e8 00 00 00 00	 call	 _Py_PXCTX
  001f6	48 8b cb	 mov	 rcx, rbx
  001f9	85 c0		 test	 eax, eax
  001fb	74 11		 je	 SHORT $LN24@thread_PyT
  001fd	e8 00 00 00 00	 call	 _PxMem_Free
  00202	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 1075 :         return NULL;

  00207	33 c0		 xor	 eax, eax

; 1078 : }

  00209	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0020d	c3		 ret	 0
$LN24@thread_PyT:

; 1074 :         PyMem_DEL(boot);

  0020e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  00214	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 1075 :         return NULL;

  00219	33 c0		 xor	 eax, eax

; 1078 : }

  0021b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0021f	c3		 ret	 0
$LN5@thread_PyT:

; 1076 :     }
; 1077 :     return PyLong_FromLong(ident);

  00220	8b c8		 mov	 ecx, eax
  00222	e8 00 00 00 00	 call	 PyLong_FromLong
  00227	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 1078 : }

  0022c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00230	c3		 ret	 0
thread_PyThread_start_new_thread ENDP
_TEXT	ENDS
EXTRN	PyErr_SetNone:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$thread_PyThread_exit_thread DD imagerel thread_PyThread_exit_thread
	DD	imagerel thread_PyThread_exit_thread+23
	DD	imagerel $unwind$thread_PyThread_exit_thread
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$thread_PyThread_exit_thread DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT thread_PyThread_exit_thread
_TEXT	SEGMENT
self$ = 48
thread_PyThread_exit_thread PROC			; COMDAT

; 1093 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1094 :     PyErr_SetNone(PyExc_SystemExit);

  00004	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemExit
  0000b	e8 00 00 00 00	 call	 PyErr_SetNone

; 1095 :     return NULL;

  00010	33 c0		 xor	 eax, eax

; 1096 : }

  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
thread_PyThread_exit_thread ENDP
_TEXT	ENDS
EXTRN	PyErr_SetInterrupt:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$thread_PyThread_interrupt_main DD imagerel thread_PyThread_interrupt_main
	DD	imagerel thread_PyThread_interrupt_main+105
	DD	imagerel $unwind$thread_PyThread_interrupt_main
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$thread_PyThread_interrupt_main DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_threadmodule.c
xdata	ENDS
;	COMDAT thread_PyThread_interrupt_main
_TEXT	SEGMENT
self$ = 64
thread_PyThread_interrupt_main PROC			; COMDAT

; 1107 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1108 :     PyErr_SetInterrupt();

  00006	e8 00 00 00 00	 call	 PyErr_SetInterrupt

; 1109 :     Py_INCREF(Py_None);

  0000b	e8 00 00 00 00	 call	 _Py_PXCTX
  00010	85 c0		 test	 eax, eax
  00012	75 48		 jne	 SHORT $LN7@thread_PyT@2
  00014	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00029	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0002f	4c 8b cb	 mov	 r9, rbx
  00032	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 09		 jne	 SHORT $LN3@thread_PyT@2
  00043	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0004a	74 07		 je	 SHORT $LN9@thread_PyT@2
$LN3@thread_PyT@2:
  0004c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN9@thread_PyT@2:

; 1110 :     return Py_None;

  00053	48 8b c3	 mov	 rax, rbx

; 1111 : }

  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	5b		 pop	 rbx
  0005b	c3		 ret	 0
$LN7@thread_PyT@2:

; 1110 :     return Py_None;

  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1111 : }

  00063	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00067	5b		 pop	 rbx
  00068	c3		 ret	 0
thread_PyThread_interrupt_main ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT thread_PyThread_allocate_lock
_TEXT	SEGMENT
self$ = 8
thread_PyThread_allocate_lock PROC			; COMDAT

; 1125 :     return (PyObject *) newlockobject();
; 1126 : }

  00000	e9 00 00 00 00	 jmp	 newlockobject
thread_PyThread_allocate_lock ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@KPPNMFGL@no?5current?5thread?5ident?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$thread_get_ident DD imagerel thread_get_ident
	DD	imagerel thread_get_ident+51
	DD	imagerel $unwind$thread_get_ident
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$thread_get_ident DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BI@KPPNMFGL@no?5current?5thread?5ident?$AA@
CONST	SEGMENT
??_C@_0BI@KPPNMFGL@no?5current?5thread?5ident?$AA@ DB 'no current thread '
	DB	'ident', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT thread_get_ident
_TEXT	SEGMENT
self$ = 48
thread_get_ident PROC					; COMDAT

; 1136 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1137 :     long ident;
; 1138 :     ident = PyThread_get_thread_ident();

  00004	e8 00 00 00 00	 call	 PyThread_get_thread_ident

; 1139 :     if (ident == -1) {

  00009	83 f8 ff	 cmp	 eax, -1
  0000c	75 1a		 jne	 SHORT $LN1@thread_get

; 1140 :         PyErr_SetString(ThreadError, "no current thread ident");

  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ThreadError
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KPPNMFGL@no?5current?5thread?5ident?$AA@
  0001c	e8 00 00 00 00	 call	 PyErr_SetString

; 1141 :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 1144 : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
$LN1@thread_get:

; 1142 :     }
; 1143 :     return PyLong_FromLong(ident);

  00028	8b c8		 mov	 ecx, eax

; 1144 : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	e9 00 00 00 00	 jmp	 PyLong_FromLong
thread_get_ident ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT thread__count
_TEXT	SEGMENT
self$ = 8
thread__count PROC					; COMDAT

; 1160 :     return PyLong_FromLong(nb_threads);

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR nb_threads

; 1161 : }

  00006	e9 00 00 00 00	 jmp	 PyLong_FromLong
thread__count ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@GBKBPAJK@setting?5stack?5size?5not?5supported@ ; `string'
PUBLIC	??_C@_0BK@NJKGHHMM@size?5not?5valid?3?5?$CFzd?5bytes?$AA@ ; `string'
PUBLIC	??_C@_0CD@HBAEJLFK@size?5must?5be?50?5or?5a?5positive?5val@ ; `string'
PUBLIC	??_C@_0O@KEBCHNLL@?$HMn?3stack_size?$AA@	; `string'
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyThread_set_stacksize:PROC
EXTRN	PyThread_get_stacksize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$thread_stack_size DD imagerel thread_stack_size
	DD	imagerel thread_stack_size+71
	DD	imagerel $unwind$thread_stack_size
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$thread_stack_size DD imagerel thread_stack_size+71
	DD	imagerel thread_stack_size+135
	DD	imagerel $chain$0$thread_stack_size
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$thread_stack_size DD imagerel thread_stack_size+135
	DD	imagerel thread_stack_size+171
	DD	imagerel $chain$2$thread_stack_size
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$thread_stack_size DD imagerel thread_stack_size+171
	DD	imagerel thread_stack_size+189
	DD	imagerel $chain$4$thread_stack_size
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$thread_stack_size DD 020021H
	DD	043400H
	DD	imagerel thread_stack_size
	DD	imagerel thread_stack_size+71
	DD	imagerel $unwind$thread_stack_size
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$thread_stack_size DD 020021H
	DD	043400H
	DD	imagerel thread_stack_size
	DD	imagerel thread_stack_size+71
	DD	imagerel $unwind$thread_stack_size
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$thread_stack_size DD 020521H
	DD	043405H
	DD	imagerel thread_stack_size
	DD	imagerel thread_stack_size+71
	DD	imagerel $unwind$thread_stack_size
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$thread_stack_size DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CB@GBKBPAJK@setting?5stack?5size?5not?5supported@
CONST	SEGMENT
??_C@_0CB@GBKBPAJK@setting?5stack?5size?5not?5supported@ DB 'setting stac'
	DB	'k size not supported', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NJKGHHMM@size?5not?5valid?3?5?$CFzd?5bytes?$AA@
CONST	SEGMENT
??_C@_0BK@NJKGHHMM@size?5not?5valid?3?5?$CFzd?5bytes?$AA@ DB 'size not va'
	DB	'lid: %zd bytes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HBAEJLFK@size?5must?5be?50?5or?5a?5positive?5val@
CONST	SEGMENT
??_C@_0CD@HBAEJLFK@size?5must?5be?50?5or?5a?5positive?5val@ DB 'size must'
	DB	' be 0 or a positive value', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KEBCHNLL@?$HMn?3stack_size?$AA@
CONST	SEGMENT
??_C@_0O@KEBCHNLL@?$HMn?3stack_size?$AA@ DB '|n:stack_size', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT thread_stack_size
_TEXT	SEGMENT
self$ = 48
args$ = 56
new_size$ = 64
thread_stack_size PROC					; COMDAT

; 1177 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1178 :     size_t old_size;
; 1179 :     Py_ssize_t new_size = 0;
; 1180 :     int rc;
; 1181 : 
; 1182 :     if (!PyArg_ParseTuple(args, "|n:stack_size", &new_size))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 40	 lea	 r8, QWORD PTR new_size$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@KEBCHNLL@?$HMn?3stack_size?$AA@
  00013	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR new_size$[rsp], 0
  0001c	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00021	85 c0		 test	 eax, eax

; 1183 :         return NULL;

  00023	74 1b		 je	 SHORT $LN8@thread_sta

; 1184 : 
; 1185 :     if (new_size < 0) {

  00025	48 83 7c 24 40
	00		 cmp	 QWORD PTR new_size$[rsp], 0
  0002b	7d 1a		 jge	 SHORT $LN3@thread_sta

; 1186 :         PyErr_SetString(PyExc_ValueError,
; 1187 :                         "size must be 0 or a positive value");

  0002d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HBAEJLFK@size?5must?5be?50?5or?5a?5positive?5val@
  0003b	e8 00 00 00 00	 call	 PyErr_SetString
$LN8@thread_sta:

; 1188 :         return NULL;

  00040	33 c0		 xor	 eax, eax

; 1207 : }

  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	c3		 ret	 0
$LN3@thread_sta:
  00047	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx

; 1189 :     }
; 1190 : 
; 1191 :     old_size = PyThread_get_stacksize();

  0004c	e8 00 00 00 00	 call	 PyThread_get_stacksize

; 1192 : 
; 1193 :     rc = PyThread_set_stacksize((size_t) new_size);

  00051	48 8b 4c 24 40	 mov	 rcx, QWORD PTR new_size$[rsp]
  00056	48 8b d8	 mov	 rbx, rax
  00059	e8 00 00 00 00	 call	 PyThread_set_stacksize

; 1194 :     if (rc == -1) {

  0005e	83 f8 ff	 cmp	 eax, -1
  00061	75 24		 jne	 SHORT $LN2@thread_sta

; 1195 :         PyErr_Format(PyExc_ValueError,
; 1196 :                      "size not valid: %zd bytes",
; 1197 :                      new_size);

  00063	4c 8b 44 24 40	 mov	 r8, QWORD PTR new_size$[rsp]
  00068	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@NJKGHHMM@size?5not?5valid?3?5?$CFzd?5bytes?$AA@
  00076	e8 00 00 00 00	 call	 PyErr_Format
  0007b	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 1198 :         return NULL;

  00080	33 c0		 xor	 eax, eax

; 1207 : }

  00082	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00086	c3		 ret	 0
$LN2@thread_sta:

; 1199 :     }
; 1200 :     if (rc == -2) {

  00087	83 f8 fe	 cmp	 eax, -2
  0008a	75 1f		 jne	 SHORT $LN1@thread_sta

; 1201 :         PyErr_SetString(ThreadError,
; 1202 :                         "setting stack size not supported");

  0008c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ThreadError
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@GBKBPAJK@setting?5stack?5size?5not?5supported@
  0009a	e8 00 00 00 00	 call	 PyErr_SetString
  0009f	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 1203 :         return NULL;

  000a4	33 c0		 xor	 eax, eax

; 1207 : }

  000a6	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000aa	c3		 ret	 0
$LN1@thread_sta:

; 1204 :     }
; 1205 : 
; 1206 :     return PyLong_FromSsize_t((Py_ssize_t) old_size);

  000ab	48 8b cb	 mov	 rcx, rbx
  000ae	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  000b3	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 1207 : }

  000b8	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000bc	c3		 ret	 0
thread_stack_size ENDP
_TEXT	ENDS
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
PUBLIC	??_C@_06HKJEELDD@_local?$AA@			; `string'
PUBLIC	??_C@_05DNKFGCKI@RLock?$AA@			; `string'
PUBLIC	??_C@_08GHCJHBBL@LockType?$AA@			; `string'
PUBLIC	??_C@_05KKCIMGE@error?$AA@			; `string'
PUBLIC	??_C@_0M@CPFLABDA@TIMEOUT_MAX?$AA@		; `string'
PUBLIC	PyInit__thread
EXTRN	PyThread_init_thread:PROC
EXTRN	PyUnicode_InternFromString:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_AddObject:PROC
EXTRN	PyFloat_FromDouble:PROC
EXTRN	PyModule_Create2:PROC
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyInit__thread DD imagerel $LN28
	DD	imagerel $LN28+87
	DD	imagerel $unwind$PyInit__thread
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyInit__thread DD imagerel $LN28+87
	DD	imagerel $LN28+166
	DD	imagerel $chain$0$PyInit__thread
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyInit__thread DD imagerel $LN28+166
	DD	imagerel $LN28+339
	DD	imagerel $chain$1$PyInit__thread
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyInit__thread DD imagerel $LN28+339
	DD	imagerel $LN28+570
	DD	imagerel $chain$2$PyInit__thread
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyInit__thread DD imagerel $LN28+570
	DD	imagerel $LN28+588
	DD	imagerel $chain$4$PyInit__thread
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyInit__thread DD 020021H
	DD	083400H
	DD	imagerel $LN28
	DD	imagerel $LN28+87
	DD	imagerel $unwind$PyInit__thread
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyInit__thread DD 021H
	DD	imagerel $LN28+87
	DD	imagerel $LN28+166
	DD	imagerel $chain$0$PyInit__thread
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyInit__thread DD 020521H
	DD	067405H
	DD	imagerel $LN28+87
	DD	imagerel $LN28+166
	DD	imagerel $chain$0$PyInit__thread
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyInit__thread DD 020521H
	DD	083405H
	DD	imagerel $LN28
	DD	imagerel $LN28+87
	DD	imagerel $unwind$PyInit__thread
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__thread DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HKJEELDD@_local?$AA@
CONST	SEGMENT
??_C@_06HKJEELDD@_local?$AA@ DB '_local', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DNKFGCKI@RLock?$AA@
CONST	SEGMENT
??_C@_05DNKFGCKI@RLock?$AA@ DB 'RLock', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHCJHBBL@LockType?$AA@
CONST	SEGMENT
??_C@_08GHCJHBBL@LockType?$AA@ DB 'LockType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKCIMGE@error?$AA@
CONST	SEGMENT
??_C@_05KKCIMGE@error?$AA@ DB 'error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CPFLABDA@TIMEOUT_MAX?$AA@
CONST	SEGMENT
??_C@_0M@CPFLABDA@TIMEOUT_MAX?$AA@ DB 'TIMEOUT_MAX', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_threadmodule.c
CONST	ENDS
;	COMDAT PyInit__thread
_TEXT	SEGMENT
PyInit__thread PROC					; COMDAT

; 1287 : {

$LN28:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1288 :     PyObject *m, *d, *timeout_max;
; 1289 : 
; 1290 :     /* Initialize types: */
; 1291 :     if (PyType_Ready(&localdummytype) < 0)

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:localdummytype
  0000b	e8 00 00 00 00	 call	 PyType_Ready
  00010	85 c0		 test	 eax, eax
  00012	79 07		 jns	 SHORT $LN10@PyInit__th
$LN27@PyInit__th:

; 1292 :         return NULL;

  00014	33 c0		 xor	 eax, eax

; 1338 : }

  00016	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0001a	c3		 ret	 0
$LN10@PyInit__th:

; 1293 :     if (PyType_Ready(&localtype) < 0)

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:localtype
  00022	e8 00 00 00 00	 call	 PyType_Ready
  00027	85 c0		 test	 eax, eax

; 1294 :         return NULL;

  00029	78 e9		 js	 SHORT $LN27@PyInit__th

; 1295 :     if (PyType_Ready(&Locktype) < 0)

  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Locktype
  00032	e8 00 00 00 00	 call	 PyType_Ready
  00037	85 c0		 test	 eax, eax

; 1296 :         return NULL;

  00039	78 d9		 js	 SHORT $LN27@PyInit__th

; 1297 :     if (PyType_Ready(&RLocktype) < 0)

  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:RLocktype
  00042	e8 00 00 00 00	 call	 PyType_Ready
  00047	85 c0		 test	 eax, eax

; 1298 :         return NULL;

  00049	78 c9		 js	 SHORT $LN27@PyInit__th

; 1299 : 
; 1300 :     /* Create the module and add the functions */
; 1301 :     m = PyModule_Create(&threadmodule);

  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:threadmodule
  00052	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00057	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0005c	e8 00 00 00 00	 call	 PyModule_Create2
  00061	48 8b d8	 mov	 rbx, rax

; 1302 :     if (m == NULL)

  00064	48 85 c0	 test	 rax, rax

; 1303 :         return NULL;

  00067	0f 84 c1 01 00
	00		 je	 $LN26@PyInit__th

; 1304 : 
; 1305 :     timeout_max = PyFloat_FromDouble(PY_TIMEOUT_MAX / 1000000);

  0006d	66 0f ef c0	 pxor	 xmm0, xmm0
  00071	b8 37 89 41 00	 mov	 eax, 4294967		; 00418937H
  00076	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  0007b	e8 00 00 00 00	 call	 PyFloat_FromDouble

; 1306 :     if (!timeout_max)

  00080	48 85 c0	 test	 rax, rax

; 1307 :         return NULL;

  00083	0f 84 a5 01 00
	00		 je	 $LN26@PyInit__th

; 1308 :     if (PyModule_AddObject(m, "TIMEOUT_MAX", timeout_max) < 0)

  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@CPFLABDA@TIMEOUT_MAX?$AA@
  00090	4c 8b c0	 mov	 r8, rax
  00093	48 8b cb	 mov	 rcx, rbx
  00096	e8 00 00 00 00	 call	 PyModule_AddObject
  0009b	85 c0		 test	 eax, eax

; 1309 :         return NULL;

  0009d	0f 88 8b 01 00
	00		 js	 $LN26@PyInit__th

; 1310 : 
; 1311 :     /* Add a symbolic constant */
; 1312 :     d = PyModule_GetDict(m);

  000a3	48 8b cb	 mov	 rcx, rbx
  000a6	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000ab	e8 00 00 00 00	 call	 PyModule_GetDict

; 1313 :     ThreadError = PyExc_RuntimeError;

  000b0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  000b7	48 89 0d 00 00
	00 00		 mov	 QWORD PTR ThreadError, rcx
  000be	48 8b f8	 mov	 rdi, rax

; 1314 :     Py_INCREF(ThreadError);

  000c1	e8 00 00 00 00	 call	 _Py_IncRef

; 1315 : 
; 1316 :     PyDict_SetItemString(d, "error", ThreadError);

  000c6	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ThreadError
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KKCIMGE@error?$AA@
  000d4	48 8b cf	 mov	 rcx, rdi
  000d7	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1317 :     Locktype.tp_doc = lock_doc;

  000dc	4c 8d 1d 00 00
	00 00		 lea	 r11, OFFSET FLAT:lock_doc
  000e3	4c 89 1d 08 01
	00 00		 mov	 QWORD PTR Locktype+264, r11

; 1318 :     Py_INCREF(&Locktype);

  000ea	e8 00 00 00 00	 call	 _Py_PXCTX
  000ef	85 c0		 test	 eax, eax
  000f1	75 3c		 jne	 SHORT $LN14@PyInit__th
  000f3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:Locktype
  000fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00108	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0010e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00116	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011b	85 c0		 test	 eax, eax
  0011d	75 09		 jne	 SHORT $LN13@PyInit__th
  0011f	f6 05 20 00 00
	00 20		 test	 BYTE PTR Locktype+32, 32 ; 00000020H
  00126	74 07		 je	 SHORT $LN14@PyInit__th
$LN13@PyInit__th:
  00128	48 ff 05 50 00
	00 00		 inc	 QWORD PTR Locktype+80
$LN14@PyInit__th:

; 1319 :     PyDict_SetItemString(d, "LockType", (PyObject *)&Locktype);

  0012f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Locktype
  00136	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08GHCJHBBL@LockType?$AA@
  0013d	48 8b cf	 mov	 rcx, rdi
  00140	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1320 : 
; 1321 :     Py_INCREF(&RLocktype);

  00145	e8 00 00 00 00	 call	 _Py_PXCTX
  0014a	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  0014f	85 c0		 test	 eax, eax
  00151	75 3c		 jne	 SHORT $LN18@PyInit__th
  00153	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:RLocktype
  0015a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00168	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0016e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00176	e8 00 00 00 00	 call	 _PyParallel_Guard
  0017b	85 c0		 test	 eax, eax
  0017d	75 09		 jne	 SHORT $LN17@PyInit__th
  0017f	f6 05 20 00 00
	00 20		 test	 BYTE PTR RLocktype+32, 32 ; 00000020H
  00186	74 07		 je	 SHORT $LN18@PyInit__th
$LN17@PyInit__th:
  00188	48 ff 05 50 00
	00 00		 inc	 QWORD PTR RLocktype+80
$LN18@PyInit__th:

; 1322 :     if (PyModule_AddObject(m, "RLock", (PyObject *)&RLocktype) < 0)

  0018f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:RLocktype
  00196	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05DNKFGCKI@RLock?$AA@
  0019d	48 8b cb	 mov	 rcx, rbx
  001a0	e8 00 00 00 00	 call	 PyModule_AddObject
  001a5	85 c0		 test	 eax, eax

; 1323 :         return NULL;

  001a7	0f 88 81 00 00
	00		 js	 $LN26@PyInit__th

; 1324 : 
; 1325 :     Py_INCREF(&localtype);

  001ad	e8 00 00 00 00	 call	 _Py_PXCTX
  001b2	85 c0		 test	 eax, eax
  001b4	75 3c		 jne	 SHORT $LN22@PyInit__th
  001b6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:localtype
  001bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001cb	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001d1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001d9	e8 00 00 00 00	 call	 _PyParallel_Guard
  001de	85 c0		 test	 eax, eax
  001e0	75 09		 jne	 SHORT $LN21@PyInit__th
  001e2	f6 05 20 00 00
	00 20		 test	 BYTE PTR localtype+32, 32 ; 00000020H
  001e9	74 07		 je	 SHORT $LN22@PyInit__th
$LN21@PyInit__th:
  001eb	48 ff 05 50 00
	00 00		 inc	 QWORD PTR localtype+80
$LN22@PyInit__th:

; 1326 :     if (PyModule_AddObject(m, "_local", (PyObject *)&localtype) < 0)

  001f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:localtype
  001f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06HKJEELDD@_local?$AA@
  00200	48 8b cb	 mov	 rcx, rbx
  00203	e8 00 00 00 00	 call	 PyModule_AddObject
  00208	85 c0		 test	 eax, eax

; 1327 :         return NULL;

  0020a	78 22		 js	 SHORT $LN26@PyInit__th

; 1328 : 
; 1329 :     nb_threads = 0;
; 1330 : 
; 1331 :     str_dict = PyUnicode_InternFromString("__dict__");

  0020c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08IBFKALI@__dict__?$AA@
  00213	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR nb_threads, 0
  0021d	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00222	48 89 05 00 00
	00 00		 mov	 QWORD PTR str_dict, rax

; 1332 :     if (str_dict == NULL)

  00229	48 85 c0	 test	 rax, rax
  0022c	75 0c		 jne	 SHORT $LN1@PyInit__th
$LN26@PyInit__th:

; 1333 :         return NULL;

  0022e	33 c0		 xor	 eax, eax
  00230	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1338 : }

  00235	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00239	c3		 ret	 0
$LN1@PyInit__th:

; 1334 : 
; 1335 :     /* Initialize the C thread library */
; 1336 :     PyThread_init_thread();

  0023a	e8 00 00 00 00	 call	 PyThread_init_thread

; 1337 :     return m;

  0023f	48 8b c3	 mov	 rax, rbx
  00242	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1338 : }

  00247	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0024b	c3		 ret	 0
PyInit__thread ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@EIOLNPNH@thread?4local?4?$CFp?$AA@	; `string'
PUBLIC	??_C@_0CL@NGBDAHFO@Initialization?5arguments?5are?5not@ ; `string'
EXTRN	PyCFunction_NewEx:PROC
EXTRN	PyObject_IsTrue:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$local_new DD imagerel local_new
	DD	imagerel local_new+430
	DD	imagerel $unwind$local_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$local_new DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0BA@EIOLNPNH@thread?4local?4?$CFp?$AA@
CONST	SEGMENT
??_C@_0BA@EIOLNPNH@thread?4local?4?$CFp?$AA@ DB 'thread.local.%p', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NGBDAHFO@Initialization?5arguments?5are?5not@
CONST	SEGMENT
??_C@_0CL@NGBDAHFO@Initialization?5arguments?5are?5not@ DB 'Initializatio'
	DB	'n arguments are not supported', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_threadmodule.c
CONST	ENDS
;	COMDAT local_new
_TEXT	SEGMENT
type$ = 64
args$ = 72
kw$ = 80
local_new PROC						; COMDAT

; 708  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 709  :     localobject *self;
; 710  :     PyObject *wr;
; 711  :     static PyMethodDef wr_callback_def = {
; 712  :         "_localdummy_destroyed", (PyCFunction) _localdummy_destroyed, METH_O
; 713  :     };
; 714  : 
; 715  :     if (type->tp_init == PyBaseObject_Type.tp_init
; 716  :         && ((args && PyObject_IsTrue(args))
; 717  :         || (kw && PyObject_IsTrue(kw)))) {

  0000f	48 8b 05 80 01
	00 00		 mov	 rax, QWORD PTR PyBaseObject_Type+384
  00016	49 8b f8	 mov	 rdi, r8
  00019	48 8b f2	 mov	 rsi, rdx
  0001c	48 8b d9	 mov	 rbx, rcx
  0001f	48 39 81 80 01
	00 00		 cmp	 QWORD PTR [rcx+384], rax
  00026	75 47		 jne	 SHORT $LN17@local_new
  00028	48 85 d2	 test	 rdx, rdx
  0002b	74 0c		 je	 SHORT $LN15@local_new
  0002d	48 8b ca	 mov	 rcx, rdx
  00030	e8 00 00 00 00	 call	 PyObject_IsTrue
  00035	85 c0		 test	 eax, eax
  00037	75 11		 jne	 SHORT $LN16@local_new
$LN15@local_new:
  00039	48 85 ff	 test	 rdi, rdi
  0003c	74 31		 je	 SHORT $LN17@local_new
  0003e	48 8b cf	 mov	 rcx, rdi
  00041	e8 00 00 00 00	 call	 PyObject_IsTrue
  00046	85 c0		 test	 eax, eax
  00048	74 25		 je	 SHORT $LN17@local_new
$LN16@local_new:

; 718  :         PyErr_SetString(PyExc_TypeError,
; 719  :                   "Initialization arguments are not supported");

  0004a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@NGBDAHFO@Initialization?5arguments?5are?5not@
  00058	e8 00 00 00 00	 call	 PyErr_SetString

; 756  :     return NULL;

  0005d	33 c0		 xor	 eax, eax

; 757  : }

  0005f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00064	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00069	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006d	5f		 pop	 rdi
  0006e	c3		 ret	 0
$LN17@local_new:

; 720  :         return NULL;
; 721  :     }
; 722  : 
; 723  :     self = (localobject *)type->tp_alloc(type, 0);

  0006f	33 d2		 xor	 edx, edx
  00071	48 8b cb	 mov	 rcx, rbx
  00074	ff 93 88 01 00
	00		 call	 QWORD PTR [rbx+392]
  0007a	48 8b d8	 mov	 rbx, rax

; 724  :     if (self == NULL)

  0007d	48 85 c0	 test	 rax, rax

; 725  :         return NULL;

  00080	0f 84 16 01 00
	00		 je	 $LN28@local_new

; 726  : 
; 727  :     Py_XINCREF(args);

  00086	48 85 f6	 test	 rsi, rsi
  00089	74 3b		 je	 SHORT $LN12@local_new
  0008b	e8 00 00 00 00	 call	 _Py_PXCTX
  00090	85 c0		 test	 eax, eax
  00092	75 32		 jne	 SHORT $LN12@local_new
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a2	4c 8b ce	 mov	 r9, rsi
  000a5	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ab	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b8	85 c0		 test	 eax, eax
  000ba	75 06		 jne	 SHORT $LN20@local_new
  000bc	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  000c0	74 04		 je	 SHORT $LN12@local_new
$LN20@local_new:
  000c2	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN12@local_new:

; 728  :     self->args = args;

  000c6	48 89 73 68	 mov	 QWORD PTR [rbx+104], rsi

; 729  :     Py_XINCREF(kw);

  000ca	48 85 ff	 test	 rdi, rdi
  000cd	74 3b		 je	 SHORT $LN8@local_new
  000cf	e8 00 00 00 00	 call	 _Py_PXCTX
  000d4	85 c0		 test	 eax, eax
  000d6	75 32		 jne	 SHORT $LN8@local_new
  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000e6	4c 8b cf	 mov	 r9, rdi
  000e9	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ef	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000f7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fc	85 c0		 test	 eax, eax
  000fe	75 06		 jne	 SHORT $LN24@local_new
  00100	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00104	74 04		 je	 SHORT $LN8@local_new
$LN24@local_new:
  00106	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN8@local_new:

; 730  :     self->kw = kw;
; 731  :     self->key = PyUnicode_FromFormat("thread.local.%p", self);

  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@EIOLNPNH@thread?4local?4?$CFp?$AA@
  00111	48 8b d3	 mov	 rdx, rbx
  00114	48 89 7b 70	 mov	 QWORD PTR [rbx+112], rdi
  00118	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  0011d	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 732  :     if (self->key == NULL)

  00121	48 85 c0	 test	 rax, rax
  00124	74 6e		 je	 SHORT $err$20741

; 733  :         goto err;
; 734  : 
; 735  :     self->dummies = PyDict_New();

  00126	e8 00 00 00 00	 call	 PyDict_New
  0012b	48 89 83 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rax

; 736  :     if (self->dummies == NULL)

  00132	48 85 c0	 test	 rax, rax
  00135	74 5d		 je	 SHORT $err$20741

; 737  :         goto err;
; 738  : 
; 739  :     /* We use a weak reference to self in the callback closure
; 740  :        in order to avoid spurious reference cycles */
; 741  :     wr = PyWeakref_NewRef((PyObject *) self, NULL);

  00137	33 d2		 xor	 edx, edx
  00139	48 8b cb	 mov	 rcx, rbx
  0013c	e8 00 00 00 00	 call	 PyWeakref_NewRef
  00141	48 8b f8	 mov	 rdi, rax

; 742  :     if (wr == NULL)

  00144	48 85 c0	 test	 rax, rax
  00147	74 4b		 je	 SHORT $err$20741

; 743  :         goto err;
; 744  :     self->wr_callback = PyCFunction_New(&wr_callback_def, wr);

  00149	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?wr_callback_def@?1??local_new@@9@9
  00150	45 33 c0	 xor	 r8d, r8d
  00153	48 8b d0	 mov	 rdx, rax
  00156	e8 00 00 00 00	 call	 PyCFunction_NewEx

; 745  :     Py_DECREF(wr);

  0015b	48 8b cf	 mov	 rcx, rdi
  0015e	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax
  00165	e8 00 00 00 00	 call	 _Py_DecRef

; 746  :     if (self->wr_callback == NULL)

  0016a	48 83 bb 88 00
	00 00 00	 cmp	 QWORD PTR [rbx+136], 0
  00172	74 20		 je	 SHORT $err$20741

; 747  :         goto err;
; 748  : 
; 749  :     if (_local_create_dummy(self) == NULL)

  00174	48 8b cb	 mov	 rcx, rbx
  00177	e8 00 00 00 00	 call	 _local_create_dummy
  0017c	48 85 c0	 test	 rax, rax
  0017f	74 13		 je	 SHORT $err$20741

; 750  :         goto err;
; 751  : 
; 752  :     return (PyObject *)self;

  00181	48 8b c3	 mov	 rax, rbx

; 757  : }

  00184	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00189	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0018e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00192	5f		 pop	 rdi
  00193	c3		 ret	 0
$err$20741:

; 753  : 
; 754  :   err:
; 755  :     Py_DECREF(self);

  00194	48 8b cb	 mov	 rcx, rbx
  00197	e8 00 00 00 00	 call	 _Py_DecRef
$LN28@local_new:

; 757  : }

  0019c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001a1	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  001a6	33 c0		 xor	 eax, eax
  001a8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001ac	5f		 pop	 rdi
  001ad	c3		 ret	 0
local_new ENDP
_TEXT	ENDS
END
