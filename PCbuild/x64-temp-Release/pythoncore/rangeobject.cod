; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@GOAHCCGP@longrange_iterator?$AA@	; `string'
PUBLIC	??_C@_0P@PFENEOO@range_iterator?$AA@		; `string'
PUBLIC	??_C@_0N@MOOGCAMH@__setstate__?$AA@		; `string'
PUBLIC	??_C@_0BA@BJLPBKGK@__length_hint__?$AA@		; `string'
PUBLIC	??_C@_05CCGOGOBM@range?$AA@			; `string'
PUBLIC	??_C@_04CNBNFAL@step?$AA@			; `string'
PUBLIC	??_C@_04PEGFANN@stop?$AA@			; `string'
PUBLIC	??_C@_05FAGFPHJG@start?$AA@			; `string'
PUBLIC	??_C@_05FKHKFDID@index?$AA@			; `string'
PUBLIC	??_C@_05IOMEMJEC@count?$AA@			; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_0N@FDLIKANA@__reversed__?$AA@		; `string'
PUBLIC	PyRange_Type
PUBLIC	PyRangeIter_Type
PUBLIC	PyLongRangeIter_Type
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_Free:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_0BD@GOAHCCGP@longrange_iterator?$AA@
CONST	SEGMENT
??_C@_0BD@GOAHCCGP@longrange_iterator?$AA@ DB 'longrange_iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PFENEOO@range_iterator?$AA@
CONST	SEGMENT
??_C@_0P@PFENEOO@range_iterator?$AA@ DB 'range_iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOOGCAMH@__setstate__?$AA@
CONST	SEGMENT
??_C@_0N@MOOGCAMH@__setstate__?$AA@ DB '__setstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
CONST	SEGMENT
??_C@_0BA@BJLPBKGK@__length_hint__?$AA@ DB '__length_hint__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CCGOGOBM@range?$AA@
CONST	SEGMENT
??_C@_05CCGOGOBM@range?$AA@ DB 'range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CNBNFAL@step?$AA@
CONST	SEGMENT
??_C@_04CNBNFAL@step?$AA@ DB 'step', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PEGFANN@stop?$AA@
CONST	SEGMENT
??_C@_04PEGFANN@stop?$AA@ DB 'stop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FAGFPHJG@start?$AA@
CONST	SEGMENT
??_C@_05FAGFPHJG@start?$AA@ DB 'start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FKHKFDID@index?$AA@
CONST	SEGMENT
??_C@_05FKHKFDID@index?$AA@ DB 'index', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IOMEMJEC@count?$AA@
CONST	SEGMENT
??_C@_05IOMEMJEC@count?$AA@ DB 'count', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FDLIKANA@__reversed__?$AA@
CONST	SEGMENT
??_C@_0N@FDLIKANA@__reversed__?$AA@ DB '__reversed__', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
range_doc DB	'range(stop) -> range object', 0aH, 'range(start, stop[, '
	DB	'step]) -> range object', 0aH, 0aH, 'Return a virtual sequence'
	DB	' of numbers from start to stop by step.', 00H
	ORG $+7
range_as_sequence DQ FLAT:range_length
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:range_item
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:range_contains
	ORG $+16
range_as_mapping DQ FLAT:range_length
	DQ	FLAT:range_subscript
	DQ	0000000000000000H
reverse_doc DB	'Return a reverse iterator.', 00H
	ORG $+13
count_doc DB	'rangeobject.count(value) -> integer -- return number of '
	DB	'occurrences of value', 00H
	ORG $+3
index_doc DB	'rangeobject.index(value, [start, [stop]]) -> integer -- '
	DB	'return index of value.', 0aH, 'Raise ValueError if the value '
	DB	'is not present.', 00H
	ORG $+3
range_methods DQ FLAT:??_C@_0N@FDLIKANA@__reversed__?$AA@
	DQ	FLAT:range_reverse
	DD	04H
	ORG $+4
	DQ	FLAT:reverse_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:range_reduce
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05IOMEMJEC@count?$AA@
	DQ	FLAT:range_count
	DD	08H
	ORG $+4
	DQ	FLAT:count_doc
	DQ	FLAT:??_C@_05FKHKFDID@index?$AA@
	DQ	FLAT:range_index
	DD	08H
	ORG $+4
	DQ	FLAT:index_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
range_members DQ FLAT:??_C@_05FAGFPHJG@start?$AA@
	DD	010H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04PEGFANN@stop?$AA@
	DD	010H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04CNBNFAL@step?$AA@
	DD	010H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyRange_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_05CCGOGOBM@range?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:range_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:range_repr
	DQ	0000000000000000H
	DQ	FLAT:range_as_sequence
	DQ	FLAT:range_as_mapping
	DQ	FLAT:range_hash
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	FLAT:range_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:range_richcompare
	DQ	0000000000000000H
	DQ	FLAT:range_iter
	DQ	0000000000000000H
	DQ	FLAT:range_methods
	DQ	FLAT:range_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:range_new
	ORG $+72
length_hint_doc DB 'Private method returning an estimate of len(list(it))'
	DB	'.', 00H
	ORG $+1
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+1
setstate_doc DB	'Set state information for unpickling.', 00H
	ORG $+10
rangeiter_methods DQ FLAT:??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
	DQ	FLAT:rangeiter_len
	DD	04H
	ORG $+4
	DQ	FLAT:length_hint_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:rangeiter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:rangeiter_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyRangeIter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@PFENEOO@range_iterator?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_Free
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:rangeiter_next
	DQ	FLAT:rangeiter_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:rangeiter_new
	ORG $+72
longrangeiter_methods DQ FLAT:??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
	DQ	FLAT:longrangeiter_len
	DD	04H
	ORG $+4
	DQ	FLAT:length_hint_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:longrangeiter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:longrangeiter_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyLongRangeIter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@GOAHCCGP@longrange_iterator?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:longrangeiter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:longrangeiter_next
	DQ	FLAT:longrangeiter_methods
	DQ	0000000000000000H
	ORG $+144
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@ENBJFOCK@validate_step?$AA@		; `string'
PUBLIC	??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@ ; `string'
PUBLIC	??_C@_0BP@EMMABHJN@range?$CI?$CJ?5arg?53?5must?5not?5be?5zero?$AA@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyNumber_AsSsize_t:PROC
EXTRN	PyNumber_Index:PROC
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\rangeobject.c
pdata	SEGMENT
$pdata$validate_step DD imagerel validate_step
	DD	imagerel validate_step+23
	DD	imagerel $unwind$validate_step
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$validate_step DD imagerel validate_step+23
	DD	imagerel validate_step+85
	DD	imagerel $chain$0$validate_step
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$validate_step DD imagerel validate_step+85
	DD	imagerel validate_step+172
	DD	imagerel $chain$2$validate_step
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$validate_step DD 020021H
	DD	063400H
	DD	imagerel validate_step
	DD	imagerel validate_step+23
	DD	imagerel $unwind$validate_step
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$validate_step DD 020521H
	DD	063405H
	DD	imagerel validate_step
	DD	imagerel validate_step+23
	DD	imagerel $unwind$validate_step
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_step DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0O@ENBJFOCK@validate_step?$AA@
CONST	SEGMENT
??_C@_0O@ENBJFOCK@validate_step?$AA@ DB 'validate_step', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@ DB '..\Objects\rang'
	DB	'eobject.c', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EMMABHJN@range?$CI?$CJ?5arg?53?5must?5not?5be?5zero?$AA@
CONST	SEGMENT
??_C@_0BP@EMMABHJN@range?$CI?$CJ?5arg?53?5must?5not?5be?5zero?$AA@ DB 'ra'
	DB	'nge() arg 3 must not be zero', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT validate_step
_TEXT	SEGMENT
step$ = 64
validate_step PROC					; COMDAT

; 26   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 27   :     /* No step specified, use a step of 1. */
; 28   :     if (!step)

  00004	48 85 c9	 test	 rcx, rcx
  00007	75 0e		 jne	 SHORT $LN9@validate_s

; 29   :         return PyLong_FromLong(1);

  00009	b9 01 00 00 00	 mov	 ecx, 1

; 46   : }

  0000e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00012	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN9@validate_s:
  00017	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 30   : 
; 31   :     step = PyNumber_Index(step);

  0001c	e8 00 00 00 00	 call	 PyNumber_Index
  00021	48 8b d8	 mov	 rbx, rax

; 32   :     if (step) {

  00024	48 85 c0	 test	 rax, rax
  00027	74 76		 je	 SHORT $LN2@validate_s

; 33   :         Py_ssize_t istep = PyNumber_AsSsize_t(step, NULL);

  00029	33 d2		 xor	 edx, edx
  0002b	48 8b c8	 mov	 rcx, rax
  0002e	e8 00 00 00 00	 call	 PyNumber_AsSsize_t

; 34   :         if (istep == -1 && PyErr_Occurred()) {

  00033	48 83 f8 ff	 cmp	 rax, -1
  00037	75 1c		 jne	 SHORT $LN7@validate_s
  00039	e8 00 00 00 00	 call	 PyErr_Occurred
  0003e	48 85 c0	 test	 rax, rax
  00041	74 5c		 je	 SHORT $LN2@validate_s

; 35   :             /* Ignore OverflowError, we know the value isn't 0. */
; 36   :             PyErr_Clear();

  00043	e8 00 00 00 00	 call	 PyErr_Clear

; 42   :         }
; 43   :     }
; 44   : 
; 45   :     return step;

  00048	48 8b c3	 mov	 rax, rbx
  0004b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 46   : }

  00050	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00054	c3		 ret	 0
$LN7@validate_s:

; 37   :         }
; 38   :         else if (istep == 0) {

  00055	48 85 c0	 test	 rax, rax
  00058	75 45		 jne	 SHORT $LN2@validate_s

; 39   :             PyErr_SetString(PyExc_ValueError,
; 40   :                             "range() arg 3 must not be zero");

  0005a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@EMMABHJN@range?$CI?$CJ?5arg?53?5must?5not?5be?5zero?$AA@
  00068	e8 00 00 00 00	 call	 PyErr_SetString

; 41   :             Py_CLEAR(step);

  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  00074	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@ENBJFOCK@validate_step?$AA@
  0007b	4c 8b cb	 mov	 r9, rbx
  0007e	41 b8 29 00 00
	00		 mov	 r8d, 41			; 00000029H
  00084	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00091	85 c0		 test	 eax, eax
  00093	75 0a		 jne	 SHORT $LN2@validate_s
  00095	48 8b cb	 mov	 rcx, rbx
  00098	33 db		 xor	 ebx, ebx
  0009a	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@validate_s:

; 42   :         }
; 43   :     }
; 44   : 
; 45   :     return step;

  0009f	48 8b c3	 mov	 rax, rbx
  000a2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 46   : }

  000a7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ab	c3		 ret	 0
validate_step ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_dealloc DD imagerel range_dealloc
	DD	imagerel range_dealloc+58
	DD	imagerel $unwind$range_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_dealloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT range_dealloc
_TEXT	SEGMENT
r$ = 48
range_dealloc PROC					; COMDAT

; 146  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 147  :     Py_DECREF(r->start);

  00009	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0000d	e8 00 00 00 00	 call	 _Py_DecRef

; 148  :     Py_DECREF(r->stop);

  00012	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00016	e8 00 00 00 00	 call	 _Py_DecRef

; 149  :     Py_DECREF(r->step);

  0001b	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  0001f	e8 00 00 00 00	 call	 _Py_DecRef

; 150  :     Py_DECREF(r->length);

  00024	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  00028	e8 00 00 00 00	 call	 _Py_DecRef

; 151  :     PyObject_Del(r);

  0002d	48 8b cb	 mov	 rcx, rbx

; 152  : }

  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5b		 pop	 rbx
  00035	e9 00 00 00 00	 jmp	 PyObject_Free
range_dealloc ENDP
_TEXT	ENDS
EXTRN	PyNumber_Add:PROC
EXTRN	PyNumber_FloorDivide:PROC
EXTRN	PyNumber_Subtract:PROC
EXTRN	PyNumber_Negative:PROC
EXTRN	PyObject_RichCompareBool:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$compute_range_length DD imagerel compute_range_length
	DD	imagerel compute_range_length+61
	DD	imagerel $unwind$compute_range_length
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$compute_range_length DD imagerel compute_range_length+61
	DD	imagerel compute_range_length+334
	DD	imagerel $chain$0$compute_range_length
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$compute_range_length DD imagerel compute_range_length+334
	DD	imagerel compute_range_length+354
	DD	imagerel $chain$1$compute_range_length
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$compute_range_length DD imagerel compute_range_length+354
	DD	imagerel compute_range_length+396
	DD	imagerel $chain$2$compute_range_length
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$compute_range_length DD 020021H
	DD	087400H
	DD	imagerel compute_range_length
	DD	imagerel compute_range_length+61
	DD	imagerel $unwind$compute_range_length
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$compute_range_length DD 021H
	DD	imagerel compute_range_length
	DD	imagerel compute_range_length+61
	DD	imagerel $unwind$compute_range_length
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$compute_range_length DD 020521H
	DD	087405H
	DD	imagerel compute_range_length
	DD	imagerel compute_range_length+61
	DD	imagerel $unwind$compute_range_length
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compute_range_length DD 081301H
	DD	0a5413H
	DD	093413H
	DD	0d00f3213H
	DD	0600bc00dH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT compute_range_length
_TEXT	SEGMENT
start$ = 64
stop$ = 72
step$ = 80
compute_range_length PROC				; COMDAT

; 160  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	41 54		 push	 r12
  0000d	41 55		 push	 r13
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00013	4c 8b e9	 mov	 r13, rcx

; 161  :     /* -------------------------------------------------------------
; 162  :     Algorithm is equal to that of get_len_of_range(), but it operates
; 163  :     on PyObjects (which are assumed to be PyLong objects).
; 164  :     ---------------------------------------------------------------*/
; 165  :     int cmp_result;
; 166  :     PyObject *lo, *hi;
; 167  :     PyObject *diff = NULL;
; 168  :     PyObject *one = NULL;
; 169  :     PyObject *tmp1 = NULL, *tmp2 = NULL, *result;
; 170  :                 /* holds sub-expression evaluations */
; 171  : 
; 172  :     PyObject *zero = PyLong_FromLong(0);

  00016	33 c9		 xor	 ecx, ecx
  00018	49 8b d8	 mov	 rbx, r8
  0001b	4c 8b e2	 mov	 r12, rdx
  0001e	33 f6		 xor	 esi, esi
  00020	e8 00 00 00 00	 call	 PyLong_FromLong
  00025	48 8b e8	 mov	 rbp, rax

; 173  :     if (zero == NULL)

  00028	48 85 c0	 test	 rax, rax
  0002b	0f 84 1d 01 00
	00		 je	 $LN36@compute_ra
$LN35@compute_ra:

; 174  :         return NULL;
; 175  :     cmp_result = PyObject_RichCompareBool(step, zero, Py_GT);

  00031	41 b8 04 00 00
	00		 mov	 r8d, 4
  00037	48 8b d0	 mov	 rdx, rax
  0003a	48 8b cb	 mov	 rcx, rbx
  0003d	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00042	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 176  :     Py_DECREF(zero);

  00047	48 8b cd	 mov	 rcx, rbp
  0004a	8b f8		 mov	 edi, eax
  0004c	e8 00 00 00 00	 call	 _Py_DecRef

; 177  :     if (cmp_result == -1)

  00051	83 ff ff	 cmp	 edi, -1

; 178  :         return NULL;

  00054	0f 84 ed 00 00
	00		 je	 $LN3@compute_ra

; 179  : 
; 180  :     if (cmp_result == 1) {
; 181  :         lo = start;
; 182  :         hi = stop;
; 183  :         Py_INCREF(step);

  0005a	48 8b cb	 mov	 rcx, rbx
  0005d	83 ff 01	 cmp	 edi, 1
  00060	75 0a		 jne	 SHORT $LN33@compute_ra
  00062	49 8b ed	 mov	 rbp, r13
  00065	e8 00 00 00 00	 call	 _Py_IncRef

; 184  :     } else {

  0006a	eb 17		 jmp	 SHORT $LN31@compute_ra
$LN33@compute_ra:

; 185  :         lo = stop;

  0006c	49 8b ec	 mov	 rbp, r12

; 186  :         hi = start;

  0006f	4d 8b e5	 mov	 r12, r13

; 187  :         step = PyNumber_Negative(step);

  00072	e8 00 00 00 00	 call	 PyNumber_Negative
  00077	48 8b d8	 mov	 rbx, rax

; 188  :         if (!step)

  0007a	48 85 c0	 test	 rax, rax

; 189  :             return NULL;

  0007d	0f 84 c4 00 00
	00		 je	 $LN3@compute_ra
$LN31@compute_ra:

; 190  :     }
; 191  : 
; 192  :     /* if (lo >= hi), return length of 0. */
; 193  :     if (PyObject_RichCompareBool(lo, hi, Py_GE) == 1) {

  00083	41 b8 05 00 00
	00		 mov	 r8d, 5
  00089	49 8b d4	 mov	 rdx, r12
  0008c	48 8b cd	 mov	 rcx, rbp
  0008f	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00094	83 f8 01	 cmp	 eax, 1
  00097	75 19		 jne	 SHORT $LN30@compute_ra

; 194  :         Py_XDECREF(step);

  00099	48 85 db	 test	 rbx, rbx
  0009c	74 08		 je	 SHORT $LN28@compute_ra
  0009e	48 8b cb	 mov	 rcx, rbx
  000a1	e8 00 00 00 00	 call	 _Py_DecRef
$LN28@compute_ra:

; 195  :         return PyLong_FromLong(0);

  000a6	33 c9		 xor	 ecx, ecx
  000a8	e8 00 00 00 00	 call	 PyLong_FromLong
  000ad	e9 97 00 00 00	 jmp	 $LN38@compute_ra
$LN30@compute_ra:

; 196  :     }
; 197  : 
; 198  :     if ((one = PyLong_FromLong(1L)) == NULL)

  000b2	b9 01 00 00 00	 mov	 ecx, 1
  000b7	e8 00 00 00 00	 call	 PyLong_FromLong
  000bc	48 8b f8	 mov	 rdi, rax
  000bf	48 85 c0	 test	 rax, rax
  000c2	74 5c		 je	 SHORT $LN15@compute_ra

; 199  :         goto Fail;
; 200  : 
; 201  :     if ((tmp1 = PyNumber_Subtract(hi, lo)) == NULL)

  000c4	48 8b d5	 mov	 rdx, rbp
  000c7	49 8b cc	 mov	 rcx, r12
  000ca	e8 00 00 00 00	 call	 PyNumber_Subtract
  000cf	48 8b f0	 mov	 rsi, rax
  000d2	48 85 c0	 test	 rax, rax
  000d5	74 49		 je	 SHORT $LN15@compute_ra

; 202  :         goto Fail;
; 203  : 
; 204  :     if ((diff = PyNumber_Subtract(tmp1, one)) == NULL)

  000d7	48 8b d7	 mov	 rdx, rdi
  000da	48 8b c8	 mov	 rcx, rax
  000dd	e8 00 00 00 00	 call	 PyNumber_Subtract
  000e2	48 8b e8	 mov	 rbp, rax
  000e5	48 85 c0	 test	 rax, rax
  000e8	74 36		 je	 SHORT $LN15@compute_ra

; 205  :         goto Fail;
; 206  : 
; 207  :     if ((tmp2 = PyNumber_FloorDivide(diff, step)) == NULL)

  000ea	48 8b d3	 mov	 rdx, rbx
  000ed	48 8b c8	 mov	 rcx, rax
  000f0	e8 00 00 00 00	 call	 PyNumber_FloorDivide
  000f5	4c 8b e0	 mov	 r12, rax
  000f8	48 85 c0	 test	 rax, rax
  000fb	74 1b		 je	 SHORT $LN19@compute_ra

; 208  :         goto Fail;
; 209  : 
; 210  :     if ((result = PyNumber_Add(tmp2, one)) == NULL)

  000fd	48 8b d7	 mov	 rdx, rdi
  00100	48 8b c8	 mov	 rcx, rax
  00103	e8 00 00 00 00	 call	 PyNumber_Add
$Fail$20385:

; 219  : 
; 220  :   Fail:
; 221  :     Py_XDECREF(tmp2);

  00108	49 8b cc	 mov	 rcx, r12
  0010b	4c 8b e8	 mov	 r13, rax
  0010e	48 85 c0	 test	 rax, rax
  00111	75 4f		 jne	 SHORT $LN21@compute_ra
  00113	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@compute_ra:

; 222  :     Py_XDECREF(diff);

  00118	48 8b cd	 mov	 rcx, rbp
  0011b	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@compute_ra:

; 223  :     Py_XDECREF(step);

  00120	48 85 db	 test	 rbx, rbx
  00123	74 08		 je	 SHORT $LN11@compute_ra
  00125	48 8b cb	 mov	 rcx, rbx
  00128	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@compute_ra:

; 224  :     Py_XDECREF(tmp1);

  0012d	48 85 f6	 test	 rsi, rsi
  00130	74 08		 je	 SHORT $LN7@compute_ra
  00132	48 8b ce	 mov	 rcx, rsi
  00135	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@compute_ra:

; 225  :     Py_XDECREF(one);

  0013a	48 85 ff	 test	 rdi, rdi
  0013d	74 08		 je	 SHORT $LN3@compute_ra
  0013f	48 8b cf	 mov	 rcx, rdi
  00142	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@compute_ra:

; 226  :     return NULL;

  00147	33 c0		 xor	 eax, eax
$LN38@compute_ra:
  00149	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN36@compute_ra:

; 227  : }

  0014e	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00153	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00158	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0015c	41 5d		 pop	 r13
  0015e	41 5c		 pop	 r12
  00160	5e		 pop	 rsi
  00161	c3		 ret	 0
$LN21@compute_ra:

; 211  :         goto Fail;
; 212  : 
; 213  :     Py_DECREF(tmp2);

  00162	e8 00 00 00 00	 call	 _Py_DecRef

; 214  :     Py_DECREF(diff);

  00167	48 8b cd	 mov	 rcx, rbp
  0016a	e8 00 00 00 00	 call	 _Py_DecRef

; 215  :     Py_DECREF(step);

  0016f	48 8b cb	 mov	 rcx, rbx
  00172	e8 00 00 00 00	 call	 _Py_DecRef

; 216  :     Py_DECREF(tmp1);

  00177	48 8b ce	 mov	 rcx, rsi
  0017a	e8 00 00 00 00	 call	 _Py_DecRef

; 217  :     Py_DECREF(one);

  0017f	48 8b cf	 mov	 rcx, rdi
  00182	e8 00 00 00 00	 call	 _Py_DecRef

; 218  :     return result;

  00187	49 8b c5	 mov	 rax, r13
  0018a	eb bd		 jmp	 SHORT $LN38@compute_ra
compute_range_length ENDP
_TEXT	ENDS
EXTRN	PyLong_AsSsize_t:PROC
; Function compile flags: /Ogtpy
;	COMDAT range_length
_TEXT	SEGMENT
r$ = 8
range_length PROC					; COMDAT

; 232  :     return PyLong_AsSsize_t(r->length);

  00000	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]

; 233  : }

  00004	e9 00 00 00 00	 jmp	 PyLong_AsSsize_t
range_length ENDP
_TEXT	ENDS
EXTRN	PyNumber_Multiply:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$compute_item DD imagerel compute_item
	DD	imagerel compute_item+84
	DD	imagerel $unwind$compute_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compute_item DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT compute_item
_TEXT	SEGMENT
r$ = 48
i$ = 56
compute_item PROC					; COMDAT

; 237  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b c2	 mov	 rax, rdx

; 238  :     PyObject *incr, *result;
; 239  :     /* PyLong equivalent to:
; 240  :      *    return r->start + (i * r->step)
; 241  :      */
; 242  :     incr = PyNumber_Multiply(i, r->step);

  0000d	48 8b 51 70	 mov	 rdx, QWORD PTR [rcx+112]
  00011	48 8b d9	 mov	 rbx, rcx
  00014	48 8b c8	 mov	 rcx, rax
  00017	e8 00 00 00 00	 call	 PyNumber_Multiply
  0001c	48 8b f8	 mov	 rdi, rax

; 243  :     if (!incr)

  0001f	48 85 c0	 test	 rax, rax
  00022	75 0b		 jne	 SHORT $LN1@compute_it

; 248  : }

  00024	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
$LN1@compute_it:

; 244  :         return NULL;
; 245  :     result = PyNumber_Add(r->start, incr);

  0002f	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00033	48 8b d0	 mov	 rdx, rax
  00036	e8 00 00 00 00	 call	 PyNumber_Add

; 246  :     Py_DECREF(incr);

  0003b	48 8b cf	 mov	 rcx, rdi
  0003e	48 8b d8	 mov	 rbx, rax
  00041	e8 00 00 00 00	 call	 _Py_DecRef

; 247  :     return result;

  00046	48 8b c3	 mov	 rax, rbx

; 248  : }

  00049	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
compute_item ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@JHFAGFCE@range?5object?5index?5out?5of?5range?$AA@ ; `string'
EXTRN	PyExc_IndexError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$compute_range_item DD imagerel compute_range_item
	DD	imagerel compute_range_item+264
	DD	imagerel $unwind$compute_range_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compute_range_item DD 088001H
	DD	066480H
	DD	08540fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0CA@JHFAGFCE@range?5object?5index?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0CA@JHFAGFCE@range?5object?5index?5out?5of?5range?$AA@ DB 'range ob'
	DB	'ject index out of range', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT compute_range_item
_TEXT	SEGMENT
r$ = 48
arg$ = 56
compute_range_item PROC					; COMDAT

; 252  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b e9	 mov	 rbp, rcx

; 253  :     int cmp_result;
; 254  :     PyObject *i, *result;
; 255  : 
; 256  :     PyObject *zero = PyLong_FromLong(0);

  00012	33 c9		 xor	 ecx, ecx
  00014	48 8b fa	 mov	 rdi, rdx
  00017	e8 00 00 00 00	 call	 PyLong_FromLong
  0001c	48 8b d8	 mov	 rbx, rax

; 257  :     if (zero == NULL)

  0001f	48 85 c0	 test	 rax, rax

; 258  :         return NULL;

  00022	74 34		 je	 SHORT $LN12@compute_ra@2

; 259  : 
; 260  :     /* PyLong equivalent to:
; 261  :      *   if (arg < 0) {
; 262  :      *     i = r->length + arg
; 263  :      *   } else {
; 264  :      *     i = arg
; 265  :      *   }
; 266  :      */
; 267  :     cmp_result = PyObject_RichCompareBool(arg, zero, Py_LT);

  00024	45 33 c0	 xor	 r8d, r8d
  00027	48 8b d0	 mov	 rdx, rax
  0002a	48 8b cf	 mov	 rcx, rdi
  0002d	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 268  :     if (cmp_result == -1) {

  00032	83 f8 ff	 cmp	 eax, -1

; 269  :         Py_DECREF(zero);
; 270  :         return NULL;

  00035	74 19		 je	 SHORT $LN13@compute_ra@2

; 271  :     }
; 272  :     if (cmp_result == 1) {

  00037	83 f8 01	 cmp	 eax, 1
  0003a	75 2e		 jne	 SHORT $LN6@compute_ra@2

; 273  :       i = PyNumber_Add(r->length, arg);

  0003c	48 8b 4d 78	 mov	 rcx, QWORD PTR [rbp+120]
  00040	48 8b d7	 mov	 rdx, rdi
  00043	e8 00 00 00 00	 call	 PyNumber_Add
  00048	48 8b f8	 mov	 rdi, rax

; 274  :       if (!i) {

  0004b	48 85 c0	 test	 rax, rax
  0004e	75 22		 jne	 SHORT $LN4@compute_ra@2
$LN13@compute_ra@2:

; 275  :         Py_DECREF(zero);

  00050	48 8b cb	 mov	 rcx, rbx
  00053	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@compute_ra@2:

; 276  :         return NULL;

  00058	33 c0		 xor	 eax, eax

; 307  : }

  0005a	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0005f	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00064	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00068	5f		 pop	 rdi
  00069	c3		 ret	 0
$LN6@compute_ra@2:

; 277  :       }
; 278  :     } else {
; 279  :       i = arg;
; 280  :       Py_INCREF(i);

  0006a	48 8b cf	 mov	 rcx, rdi
  0006d	e8 00 00 00 00	 call	 _Py_IncRef
$LN4@compute_ra@2:

; 281  :     }
; 282  : 
; 283  :     /* PyLong equivalent to:
; 284  :      *   if (i < 0 || i >= r->length) {
; 285  :      *     <report index out of bounds>
; 286  :      *   }
; 287  :      */
; 288  :     cmp_result = PyObject_RichCompareBool(i, zero, Py_LT);

  00072	45 33 c0	 xor	 r8d, r8d
  00075	48 8b d3	 mov	 rdx, rbx
  00078	48 8b cf	 mov	 rcx, rdi
  0007b	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00080	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 289  :     Py_DECREF(zero);

  00085	48 8b cb	 mov	 rcx, rbx
  00088	8b f0		 mov	 esi, eax
  0008a	e8 00 00 00 00	 call	 _Py_DecRef

; 290  :     if (cmp_result == 0) {

  0008f	85 f6		 test	 esi, esi
  00091	75 12		 jne	 SHORT $LN3@compute_ra@2

; 291  :         cmp_result = PyObject_RichCompareBool(i, r->length, Py_GE);

  00093	48 8b 55 78	 mov	 rdx, QWORD PTR [rbp+120]
  00097	44 8d 46 05	 lea	 r8d, QWORD PTR [rsi+5]
  0009b	48 8b cf	 mov	 rcx, rdi
  0009e	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  000a3	8b f0		 mov	 esi, eax
$LN3@compute_ra@2:

; 292  :     }
; 293  :     if (cmp_result == -1) {

  000a5	83 fe ff	 cmp	 esi, -1
  000a8	75 0c		 jne	 SHORT $LN2@compute_ra@2

; 294  :        Py_DECREF(i);

  000aa	48 8b cf	 mov	 rcx, rdi
  000ad	e8 00 00 00 00	 call	 _Py_DecRef

; 295  :        return NULL;

  000b2	33 c0		 xor	 eax, eax
  000b4	eb 3d		 jmp	 SHORT $LN11@compute_ra@2
$LN2@compute_ra@2:

; 296  :     }
; 297  :     if (cmp_result == 1) {

  000b6	83 fe 01	 cmp	 esi, 1
  000b9	75 1f		 jne	 SHORT $LN1@compute_ra@2

; 298  :         Py_DECREF(i);

  000bb	48 8b cf	 mov	 rcx, rdi
  000be	e8 00 00 00 00	 call	 _Py_DecRef

; 299  :         PyErr_SetString(PyExc_IndexError,
; 300  :                         "range object index out of range");

  000c3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@JHFAGFCE@range?5object?5index?5out?5of?5range?$AA@
  000d1	e8 00 00 00 00	 call	 PyErr_SetString

; 301  :         return NULL;

  000d6	33 c0		 xor	 eax, eax
  000d8	eb 19		 jmp	 SHORT $LN11@compute_ra@2
$LN1@compute_ra@2:

; 302  :     }
; 303  : 
; 304  :     result = compute_item(r, i);

  000da	48 8b d7	 mov	 rdx, rdi
  000dd	48 8b cd	 mov	 rcx, rbp
  000e0	e8 00 00 00 00	 call	 compute_item

; 305  :     Py_DECREF(i);

  000e5	48 8b cf	 mov	 rcx, rdi
  000e8	48 8b d8	 mov	 rbx, rax
  000eb	e8 00 00 00 00	 call	 _Py_DecRef

; 306  :     return result;

  000f0	48 8b c3	 mov	 rax, rbx
$LN11@compute_ra@2:

; 307  : }

  000f3	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  000f8	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000fd	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00102	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00106	5f		 pop	 rdi
  00107	c3		 ret	 0
compute_range_item ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_item DD imagerel range_item
	DD	imagerel range_item+76
	DD	imagerel $unwind$range_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_item DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT range_item
_TEXT	SEGMENT
r$ = 48
i$ = 56
range_item PROC						; COMDAT

; 311  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 312  :     PyObject *res, *arg = PyLong_FromSsize_t(i);

  0000d	48 8b ca	 mov	 rcx, rdx
  00010	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00015	48 8b f8	 mov	 rdi, rax

; 313  :     if (!arg) {

  00018	48 85 c0	 test	 rax, rax
  0001b	75 0b		 jne	 SHORT $LN1@range_item

; 319  : }

  0001d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00022	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00026	5f		 pop	 rdi
  00027	c3		 ret	 0
$LN1@range_item:

; 314  :         return NULL;
; 315  :     }
; 316  :     res = compute_range_item(r, arg);

  00028	48 8b d0	 mov	 rdx, rax
  0002b	48 8b cb	 mov	 rcx, rbx
  0002e	e8 00 00 00 00	 call	 compute_range_item

; 317  :     Py_DECREF(arg);

  00033	48 8b cf	 mov	 rcx, rdi
  00036	48 8b d8	 mov	 rbx, rax
  00039	e8 00 00 00 00	 call	 _Py_DecRef

; 318  :     return res;

  0003e	48 8b c3	 mov	 rax, rbx

; 319  : }

  00041	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5f		 pop	 rdi
  0004b	c3		 ret	 0
range_item ENDP
_TEXT	ENDS
PUBLIC	??_C@_0ED@BCLNFLAD@slice?5indices?5must?5be?5integers?5o@ ; `string'
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$compute_slice_element DD imagerel compute_slice_element
	DD	imagerel compute_slice_element+70
	DD	imagerel $unwind$compute_slice_element
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compute_slice_element DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0ED@BCLNFLAD@slice?5indices?5must?5be?5integers?5o@
CONST	SEGMENT
??_C@_0ED@BCLNFLAD@slice?5indices?5must?5be?5integers?5o@ DB 'slice indic'
	DB	'es must be integers or None or have an __index__ method', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT compute_slice_element
_TEXT	SEGMENT
obj$ = 48
compute_slice_element PROC				; COMDAT

; 328  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 329  :     PyObject *result = NULL;
; 330  :     if (obj != NULL) {

  00004	48 85 c9	 test	 rcx, rcx
  00007	74 36		 je	 SHORT $LN6@compute_sl

; 331  :         if (PyIndex_Check(obj)) {

  00009	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000d	48 8b 90 b8 00
	00 00		 mov	 rdx, QWORD PTR [rax+184]
  00014	48 85 d2	 test	 rdx, rdx
  00017	74 13		 je	 SHORT $LN2@compute_sl
  00019	48 83 ba 08 01
	00 00 00	 cmp	 QWORD PTR [rdx+264], 0
  00021	74 09		 je	 SHORT $LN2@compute_sl

; 341  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	e9 00 00 00 00	 jmp	 PyNumber_Index
$LN2@compute_sl:

; 332  :             result = PyNumber_Index(obj);
; 333  :         }
; 334  :         else {
; 335  :             PyErr_SetString(PyExc_TypeError,
; 336  :                             "slice indices must be integers or "
; 337  :                             "None or have an __index__ method");

  0002c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0ED@BCLNFLAD@slice?5indices?5must?5be?5integers?5o@
  0003a	e8 00 00 00 00	 call	 PyErr_SetString
$LN6@compute_sl:

; 338  :         }
; 339  :     }
; 340  :     return result;

  0003f	33 c0		 xor	 eax, eax

; 341  : }

  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
compute_slice_element ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@	; `string'
PUBLIC	??_C@_0BK@PFFNIAMP@slice?5step?5cannot?5be?5zero?$AA@ ; `string'
EXTRN	_PyEval_SliceIndex:PROC
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$compute_slice_indices DD imagerel compute_slice_indices
	DD	imagerel compute_slice_indices+1885
	DD	imagerel $unwind$compute_slice_indices
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compute_slice_indices DD 0a2301H
	DD	0103423H
	DD	0f01f7223H
	DD	0d01be01dH
	DD	07017c019H
	DD	050156016H
xdata	ENDS
;	COMDAT ??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@
CONST	SEGMENT
??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@ DB 'compute_slice_indices', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PFFNIAMP@slice?5step?5cannot?5be?5zero?$AA@
CONST	SEGMENT
??_C@_0BK@PFFNIAMP@slice?5step?5cannot?5be?5zero?$AA@ DB 'slice step cann'
	DB	'ot be zero', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\rangeobject.c
CONST	ENDS
;	COMDAT compute_slice_indices
_TEXT	SEGMENT
clamped_step$ = 48
r$ = 128
slice$ = 136
start$ = 144
stop$ = 152
step$ = 160
compute_slice_indices PROC				; COMDAT

; 350  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	41 54		 push	 r12
  00019	41 55		 push	 r13
  0001b	41 56		 push	 r14
  0001d	41 57		 push	 r15
  0001f	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00023	48 8b e9	 mov	 rbp, rcx

; 351  :     int cmp_result, has_elements;
; 352  :     Py_ssize_t clamped_step = 0;
; 353  :     PyObject *zero = NULL, *one = NULL, *neg_one = NULL, *candidate = NULL;
; 354  :     PyObject *tmp_start = NULL, *tmp_stop = NULL, *tmp_step = NULL;
; 355  :     zero = PyLong_FromLong(0);

  00026	33 c9		 xor	 ecx, ecx
  00028	48 8b fa	 mov	 rdi, rdx
  0002b	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR clamped_step$[rsp], 0
  00034	33 f6		 xor	 esi, esi
  00036	33 db		 xor	 ebx, ebx
  00038	e8 00 00 00 00	 call	 PyLong_FromLong
  0003d	4c 8b e0	 mov	 r12, rax

; 356  :     if (zero == NULL) goto Fail;

  00040	48 85 c0	 test	 rax, rax
  00043	0f 84 f9 06 00
	00		 je	 $LN3@compute_sl@2

; 357  :     one = PyLong_FromLong(1);

  00049	8d 4e 01	 lea	 ecx, QWORD PTR [rsi+1]
  0004c	e8 00 00 00 00	 call	 PyLong_FromLong
  00051	4c 8b f0	 mov	 r14, rax

; 358  :     if (one == NULL) goto Fail;

  00054	48 85 c0	 test	 rax, rax
  00057	0f 84 7d 06 00
	00		 je	 $LN7@compute_sl@2

; 359  :     neg_one = PyLong_FromLong(-1);

  0005d	83 c9 ff	 or	 ecx, -1
  00060	e8 00 00 00 00	 call	 PyLong_FromLong
  00065	4c 8b f8	 mov	 r15, rax

; 360  :     if (neg_one == NULL) goto Fail;

  00068	48 85 c0	 test	 rax, rax
  0006b	0f 84 04 06 00
	00		 je	 $LN11@compute_sl@2

; 361  : 
; 362  :     /* Calculate step value */
; 363  :     if (slice->step == Py_None) {

  00071	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  00075	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0007c	48 3b c8	 cmp	 rcx, rax
  0007f	75 16		 jne	 SHORT $LN99@compute_sl@2

; 364  :         clamped_step = 1;
; 365  :         tmp_step = one;
; 366  :         Py_INCREF(tmp_step);

  00081	49 8b ce	 mov	 rcx, r14
  00084	48 c7 44 24 30
	01 00 00 00	 mov	 QWORD PTR clamped_step$[rsp], 1
  0008d	4d 8b ee	 mov	 r13, r14
  00090	e8 00 00 00 00	 call	 _Py_IncRef

; 367  :     } else {

  00095	eb 46		 jmp	 SHORT $LN95@compute_sl@2
$LN99@compute_sl@2:

; 368  :         if (!_PyEval_SliceIndex(slice->step, &clamped_step)) goto Fail;

  00097	48 8d 54 24 30	 lea	 rdx, QWORD PTR clamped_step$[rsp]
  0009c	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  000a1	85 c0		 test	 eax, eax
  000a3	0f 84 67 05 00
	00		 je	 $LN15@compute_sl@2

; 369  :         if (clamped_step == 0) {

  000a9	48 39 5c 24 30	 cmp	 QWORD PTR clamped_step$[rsp], rbx
  000ae	75 18		 jne	 SHORT $LN96@compute_sl@2

; 370  :             PyErr_SetString(PyExc_ValueError,
; 371  :                             "slice step cannot be zero");

  000b0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@PFFNIAMP@slice?5step?5cannot?5be?5zero?$AA@
  000be	e8 00 00 00 00	 call	 PyErr_SetString

; 372  :             goto Fail;

  000c3	e9 48 05 00 00	 jmp	 $LN15@compute_sl@2
$LN96@compute_sl@2:

; 373  :         }
; 374  :         tmp_step = compute_slice_element(slice->step);

  000c8	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  000cc	e8 00 00 00 00	 call	 compute_slice_element
  000d1	4c 8b e8	 mov	 r13, rax

; 375  :         if (tmp_step == NULL) goto Fail;

  000d4	48 85 c0	 test	 rax, rax
  000d7	0f 84 33 05 00
	00		 je	 $LN15@compute_sl@2
$LN95@compute_sl@2:

; 376  :     }
; 377  : 
; 378  :     /* Calculate start value */
; 379  :     if (slice->start == Py_None) {

  000dd	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  000e1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000e8	48 3b c8	 cmp	 rcx, rax
  000eb	75 16		 jne	 SHORT $LN94@compute_sl@2

; 380  :         if (clamped_step < 0) {

  000ed	48 39 5c 24 30	 cmp	 QWORD PTR clamped_step$[rsp], rbx

; 381  :             tmp_start = PyNumber_Subtract(r->length, one);
; 382  :             if (tmp_start == NULL) goto Fail;
; 383  :         } else {

  000f2	0f 8c 41 01 00
	00		 jl	 $LN184@compute_sl@2

; 384  :             tmp_start = zero;

  000f8	49 8b fc	 mov	 rdi, r12

; 385  :             Py_INCREF(tmp_start);

  000fb	49 8b cc	 mov	 rcx, r12

; 386  :         }
; 387  :     } else {

  000fe	e9 57 01 00 00	 jmp	 $LN182@compute_sl@2
$LN94@compute_sl@2:

; 388  :         candidate = compute_slice_element(slice->start);

  00103	e8 00 00 00 00	 call	 compute_slice_element
  00108	48 8b f0	 mov	 rsi, rax

; 389  :         if (candidate == NULL) goto Fail;

  0010b	48 85 c0	 test	 rax, rax
  0010e	0f 84 28 04 00
	00		 je	 $LN23@compute_sl@2

; 390  :         cmp_result = PyObject_RichCompareBool(candidate, zero, Py_LT);

  00114	45 33 c0	 xor	 r8d, r8d
  00117	49 8b d4	 mov	 rdx, r12
  0011a	48 8b c8	 mov	 rcx, rax
  0011d	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 391  :         if (cmp_result == -1) goto Fail;

  00122	83 f8 ff	 cmp	 eax, -1
  00125	0f 84 11 04 00
	00		 je	 $LN23@compute_sl@2

; 392  :         if (cmp_result) {

  0012b	85 c0		 test	 eax, eax
  0012d	74 4c		 je	 SHORT $LN87@compute_sl@2

; 393  :             /* candidate < 0 */
; 394  :             tmp_start = PyNumber_Add(r->length, candidate);

  0012f	48 8b 4d 78	 mov	 rcx, QWORD PTR [rbp+120]
  00133	48 8b d6	 mov	 rdx, rsi
  00136	e8 00 00 00 00	 call	 PyNumber_Add
  0013b	48 8b f8	 mov	 rdi, rax

; 395  :             if (tmp_start == NULL) goto Fail;

  0013e	48 85 c0	 test	 rax, rax
  00141	0f 84 f5 03 00
	00		 je	 $LN23@compute_sl@2

; 396  :             Py_CLEAR(candidate);

  00147	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  0014e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@
  00155	4c 8b ce	 mov	 r9, rsi
  00158	41 b8 8c 01 00
	00		 mov	 r8d, 396		; 0000018cH
  0015e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00166	e8 00 00 00 00	 call	 _PyParallel_Guard
  0016b	85 c0		 test	 eax, eax
  0016d	75 11		 jne	 SHORT $LN81@compute_sl@2
  0016f	48 8b ce	 mov	 rcx, rsi
  00172	33 f6		 xor	 esi, esi
  00174	e8 00 00 00 00	 call	 _Py_DecRef

; 397  :         } else {

  00179	eb 05		 jmp	 SHORT $LN81@compute_sl@2
$LN87@compute_sl@2:

; 398  :             /* candidate >= 0 */
; 399  :             tmp_start = candidate;

  0017b	48 8b fe	 mov	 rdi, rsi

; 400  :             candidate = NULL;

  0017e	33 f6		 xor	 esi, esi
$LN81@compute_sl@2:

; 401  :         }
; 402  :         cmp_result = PyObject_RichCompareBool(tmp_start, zero, Py_LT);

  00180	45 33 c0	 xor	 r8d, r8d
  00183	49 8b d4	 mov	 rdx, r12
  00186	48 8b cf	 mov	 rcx, rdi
  00189	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 403  :         if (cmp_result == -1) goto Fail;

  0018e	83 f8 ff	 cmp	 eax, -1
  00191	0f 84 6a 02 00
	00		 je	 $Fail$20527

; 404  :         if (cmp_result) {

  00197	85 c0		 test	 eax, eax
  00199	74 43		 je	 SHORT $LN79@compute_sl@2

; 405  :             /* tmp_start < 0 */
; 406  :             Py_CLEAR(tmp_start);

  0019b	48 85 ff	 test	 rdi, rdi
  0019e	74 30		 je	 SHORT $LN77@compute_sl@2
  001a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  001a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@
  001ae	4c 8b cf	 mov	 r9, rdi
  001b1	41 b8 96 01 00
	00		 mov	 r8d, 406		; 00000196H
  001b7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001bf	e8 00 00 00 00	 call	 _PyParallel_Guard
  001c4	85 c0		 test	 eax, eax
  001c6	75 08		 jne	 SHORT $LN77@compute_sl@2
  001c8	48 8b cf	 mov	 rcx, rdi
  001cb	e8 00 00 00 00	 call	 _Py_DecRef
$LN77@compute_sl@2:

; 407  :             if (clamped_step < 0) {

  001d0	48 39 5c 24 30	 cmp	 QWORD PTR clamped_step$[rsp], rbx
  001d5	49 8b fc	 mov	 rdi, r12
  001d8	49 0f 4c ff	 cmovl	 rdi, r15

; 408  :                 tmp_start = neg_one;
; 409  :             } else {
; 410  :                 tmp_start = zero;
; 411  :             }
; 412  :             Py_INCREF(tmp_start);
; 413  :         } else {

  001dc	eb 79		 jmp	 SHORT $LN183@compute_sl@2
$LN79@compute_sl@2:

; 414  :             /* tmp_start >= 0 */
; 415  :             cmp_result = PyObject_RichCompareBool(tmp_start, r->length, Py_GE);

  001de	48 8b 55 78	 mov	 rdx, QWORD PTR [rbp+120]
  001e2	41 b8 05 00 00
	00		 mov	 r8d, 5
  001e8	48 8b cf	 mov	 rcx, rdi
  001eb	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 416  :             if (cmp_result == -1) goto Fail;

  001f0	83 f8 ff	 cmp	 eax, -1
  001f3	0f 84 08 02 00
	00		 je	 $Fail$20527

; 417  :             if (cmp_result) {

  001f9	85 c0		 test	 eax, eax
  001fb	74 62		 je	 SHORT $LN63@compute_sl@2

; 418  :                 /* tmp_start >= r->length */
; 419  :                 Py_CLEAR(tmp_start);

  001fd	48 85 ff	 test	 rdi, rdi
  00200	74 30		 je	 SHORT $LN68@compute_sl@2
  00202	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@
  00210	4c 8b cf	 mov	 r9, rdi
  00213	41 b8 a3 01 00
	00		 mov	 r8d, 419		; 000001a3H
  00219	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00221	e8 00 00 00 00	 call	 _PyParallel_Guard
  00226	85 c0		 test	 eax, eax
  00228	75 08		 jne	 SHORT $LN68@compute_sl@2
  0022a	48 8b cf	 mov	 rcx, rdi
  0022d	e8 00 00 00 00	 call	 _Py_DecRef
$LN68@compute_sl@2:

; 420  :                 if (clamped_step < 0) {

  00232	48 39 5c 24 30	 cmp	 QWORD PTR clamped_step$[rsp], rbx
  00237	7d 1a		 jge	 SHORT $LN65@compute_sl@2
$LN184@compute_sl@2:

; 421  :                     tmp_start = PyNumber_Subtract(r->length, one);

  00239	48 8b 4d 78	 mov	 rcx, QWORD PTR [rbp+120]
  0023d	49 8b d6	 mov	 rdx, r14
  00240	e8 00 00 00 00	 call	 PyNumber_Subtract
  00245	48 8b f8	 mov	 rdi, rax

; 422  :                     if (tmp_start == NULL) goto Fail;

  00248	48 85 c0	 test	 rax, rax
  0024b	0f 84 eb 02 00
	00		 je	 $LN23@compute_sl@2

; 423  :                 } else {

  00251	eb 0c		 jmp	 SHORT $LN63@compute_sl@2
$LN65@compute_sl@2:

; 424  :                     tmp_start = r->length;

  00253	48 8b 7d 78	 mov	 rdi, QWORD PTR [rbp+120]
$LN183@compute_sl@2:

; 425  :                     Py_INCREF(tmp_start);

  00257	48 8b cf	 mov	 rcx, rdi
$LN182@compute_sl@2:
  0025a	e8 00 00 00 00	 call	 _Py_IncRef
$LN63@compute_sl@2:

; 426  :                 }
; 427  :             }
; 428  :         }
; 429  :     }
; 430  : 
; 431  :     /* Calculate stop value */
; 432  :     if (slice->stop == Py_None) {

  0025f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR slice$[rsp]
  00267	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0026e	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00272	48 3b c8	 cmp	 rcx, rax
  00275	75 33		 jne	 SHORT $LN62@compute_sl@2

; 433  :         if (clamped_step < 0) {

  00277	48 39 5c 24 30	 cmp	 QWORD PTR clamped_step$[rsp], rbx

; 434  :             tmp_stop = neg_one;

  0027c	49 8b df	 mov	 rbx, r15
  0027f	7c 04		 jl	 SHORT $LN60@compute_sl@2
$LN34@compute_sl@2:

; 475  :                 } else {
; 476  :                     tmp_stop = r->length;

  00281	48 8b 5d 78	 mov	 rbx, QWORD PTR [rbp+120]
$LN60@compute_sl@2:

; 477  :                     Py_INCREF(tmp_stop);

  00285	48 8b cb	 mov	 rcx, rbx
  00288	e8 00 00 00 00	 call	 _Py_IncRef
$LN32@compute_sl@2:

; 478  :                 }
; 479  :             }
; 480  :         }
; 481  :     }
; 482  : 
; 483  :     /* Check if the slice is empty or not */
; 484  :     if (clamped_step < 0) {

  0028d	48 83 7c 24 30
	00		 cmp	 QWORD PTR clamped_step$[rsp], 0

; 485  :         has_elements = PyObject_RichCompareBool(tmp_start, tmp_stop, Py_GT);

  00293	48 8b d3	 mov	 rdx, rbx
  00296	48 8b cf	 mov	 rcx, rdi
  00299	0f 8d d0 01 00
	00		 jge	 $LN31@compute_sl@2
  0029f	41 b8 04 00 00
	00		 mov	 r8d, 4

; 486  :     } else {

  002a5	e9 c8 01 00 00	 jmp	 $LN185@compute_sl@2
$LN62@compute_sl@2:

; 435  :         } else {
; 436  :             tmp_stop = r->length;
; 437  :         }
; 438  :         Py_INCREF(tmp_stop);
; 439  :     } else {
; 440  :         candidate = compute_slice_element(slice->stop);

  002aa	e8 00 00 00 00	 call	 compute_slice_element
  002af	48 8b f0	 mov	 rsi, rax

; 441  :         if (candidate == NULL) goto Fail;

  002b2	48 85 c0	 test	 rax, rax
  002b5	0f 84 46 01 00
	00		 je	 $Fail$20527

; 442  :         cmp_result = PyObject_RichCompareBool(candidate, zero, Py_LT);

  002bb	45 33 c0	 xor	 r8d, r8d
  002be	49 8b d4	 mov	 rdx, r12
  002c1	48 8b c8	 mov	 rcx, rax
  002c4	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 443  :         if (cmp_result == -1) goto Fail;

  002c9	83 f8 ff	 cmp	 eax, -1
  002cc	0f 84 2f 01 00
	00		 je	 $Fail$20527

; 444  :         if (cmp_result) {

  002d2	85 c0		 test	 eax, eax
  002d4	74 4c		 je	 SHORT $LN56@compute_sl@2

; 445  :             /* candidate < 0 */
; 446  :             tmp_stop = PyNumber_Add(r->length, candidate);

  002d6	48 8b 4d 78	 mov	 rcx, QWORD PTR [rbp+120]
  002da	48 8b d6	 mov	 rdx, rsi
  002dd	e8 00 00 00 00	 call	 PyNumber_Add
  002e2	48 8b d8	 mov	 rbx, rax

; 447  :             if (tmp_stop == NULL) goto Fail;

  002e5	48 85 c0	 test	 rax, rax
  002e8	0f 84 13 01 00
	00		 je	 $Fail$20527

; 448  :             Py_CLEAR(candidate);

  002ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  002f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@
  002fc	4c 8b ce	 mov	 r9, rsi
  002ff	41 b8 c0 01 00
	00		 mov	 r8d, 448		; 000001c0H
  00305	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0030d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00312	85 c0		 test	 eax, eax
  00314	75 11		 jne	 SHORT $LN50@compute_sl@2
  00316	48 8b ce	 mov	 rcx, rsi
  00319	33 f6		 xor	 esi, esi
  0031b	e8 00 00 00 00	 call	 _Py_DecRef

; 449  :         } else {

  00320	eb 05		 jmp	 SHORT $LN50@compute_sl@2
$LN56@compute_sl@2:

; 450  :             /* candidate >= 0 */
; 451  :             tmp_stop = candidate;

  00322	48 8b de	 mov	 rbx, rsi

; 452  :             candidate = NULL;

  00325	33 f6		 xor	 esi, esi
$LN50@compute_sl@2:

; 453  :         }
; 454  :         cmp_result = PyObject_RichCompareBool(tmp_stop, zero, Py_LT);

  00327	45 33 c0	 xor	 r8d, r8d
  0032a	49 8b d4	 mov	 rdx, r12
  0032d	48 8b cb	 mov	 rcx, rbx
  00330	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 455  :         if (cmp_result == -1) goto Fail;

  00335	83 f8 ff	 cmp	 eax, -1
  00338	0f 84 c3 00 00
	00		 je	 $Fail$20527

; 456  :         if (cmp_result) {

  0033e	85 c0		 test	 eax, eax
  00340	74 47		 je	 SHORT $LN48@compute_sl@2

; 457  :             /* tmp_stop < 0 */
; 458  :             Py_CLEAR(tmp_stop);

  00342	48 85 db	 test	 rbx, rbx
  00345	74 30		 je	 SHORT $LN46@compute_sl@2
  00347	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  0034e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@
  00355	4c 8b cb	 mov	 r9, rbx
  00358	41 b8 ca 01 00
	00		 mov	 r8d, 458		; 000001caH
  0035e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00366	e8 00 00 00 00	 call	 _PyParallel_Guard
  0036b	85 c0		 test	 eax, eax
  0036d	75 08		 jne	 SHORT $LN46@compute_sl@2
  0036f	48 8b cb	 mov	 rcx, rbx
  00372	e8 00 00 00 00	 call	 _Py_DecRef
$LN46@compute_sl@2:

; 459  :             if (clamped_step < 0) {

  00377	48 83 7c 24 30
	00		 cmp	 QWORD PTR clamped_step$[rsp], 0
  0037d	49 8b dc	 mov	 rbx, r12
  00380	49 0f 4c df	 cmovl	 rbx, r15

; 460  :                 tmp_stop = neg_one;
; 461  :             } else {
; 462  :                 tmp_stop = zero;
; 463  :             }
; 464  :             Py_INCREF(tmp_stop);
; 465  :         } else {

  00384	e9 fc fe ff ff	 jmp	 $LN60@compute_sl@2
$LN48@compute_sl@2:

; 466  :             /* tmp_stop >= 0 */
; 467  :             cmp_result = PyObject_RichCompareBool(tmp_stop, r->length, Py_GE);

  00389	48 8b 55 78	 mov	 rdx, QWORD PTR [rbp+120]
  0038d	41 b8 05 00 00
	00		 mov	 r8d, 5
  00393	48 8b cb	 mov	 rcx, rbx
  00396	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 468  :             if (cmp_result == -1) goto Fail;

  0039b	83 f8 ff	 cmp	 eax, -1
  0039e	74 61		 je	 SHORT $Fail$20527

; 469  :             if (cmp_result) {

  003a0	85 c0		 test	 eax, eax
  003a2	0f 84 e5 fe ff
	ff		 je	 $LN32@compute_sl@2

; 470  :                 /* tmp_stop >= r->length */
; 471  :                 Py_CLEAR(tmp_stop);

  003a8	48 85 db	 test	 rbx, rbx
  003ab	74 30		 je	 SHORT $LN37@compute_sl@2
  003ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  003b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@
  003bb	4c 8b cb	 mov	 r9, rbx
  003be	41 b8 d7 01 00
	00		 mov	 r8d, 471		; 000001d7H
  003c4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003cc	e8 00 00 00 00	 call	 _PyParallel_Guard
  003d1	85 c0		 test	 eax, eax
  003d3	75 08		 jne	 SHORT $LN37@compute_sl@2
  003d5	48 8b cb	 mov	 rcx, rbx
  003d8	e8 00 00 00 00	 call	 _Py_DecRef
$LN37@compute_sl@2:

; 472  :                 if (clamped_step < 0) {

  003dd	48 83 7c 24 30
	00		 cmp	 QWORD PTR clamped_step$[rsp], 0
  003e3	0f 8d 98 fe ff
	ff		 jge	 $LN34@compute_sl@2

; 473  :                     tmp_stop = PyNumber_Subtract(r->length, one);

  003e9	48 8b 4d 78	 mov	 rcx, QWORD PTR [rbp+120]
  003ed	49 8b d6	 mov	 rdx, r14
  003f0	e8 00 00 00 00	 call	 PyNumber_Subtract
  003f5	48 8b d8	 mov	 rbx, rax

; 474  :                     if (tmp_stop == NULL) goto Fail;

  003f8	48 85 c0	 test	 rax, rax
  003fb	0f 85 8c fe ff
	ff		 jne	 $LN32@compute_sl@2
$Fail$20527:

; 498  : 
; 499  :   Fail:
; 500  :     Py_XDECREF(tmp_start);

  00401	48 85 ff	 test	 rdi, rdi
  00404	0f 84 c8 00 00
	00		 je	 $LN27@compute_sl@2
  0040a	e8 00 00 00 00	 call	 _Py_PXCTX
  0040f	85 c0		 test	 eax, eax
  00411	0f 85 bb 00 00
	00		 jne	 $LN27@compute_sl@2
  00417	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0041b	a8 20		 test	 al, 32			; 00000020H
  0041d	0f 85 a7 00 00
	00		 jne	 $LN109@compute_sl@2
  00423	84 c0		 test	 al, al
  00425	0f 88 9f 00 00
	00		 js	 $LN109@compute_sl@2
  0042b	a8 02		 test	 al, 2
  0042d	0f 85 9f 00 00
	00		 jne	 $LN27@compute_sl@2
  00433	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00437	0f 85 95 00 00
	00		 jne	 $LN27@compute_sl@2
  0043d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00444	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0044b	4c 8b cf	 mov	 r9, rdi
  0044e	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00454	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0045c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00461	48 8b cf	 mov	 rcx, rdi
  00464	85 c0		 test	 eax, eax
  00466	74 56		 je	 SHORT $LN114@compute_sl@2
  00468	e8 00 00 00 00	 call	 _Px_Dealloc
  0046d	eb 63		 jmp	 SHORT $LN27@compute_sl@2
$LN31@compute_sl@2:

; 487  :         has_elements = PyObject_RichCompareBool(tmp_start, tmp_stop, Py_LT);

  0046f	45 33 c0	 xor	 r8d, r8d
$LN185@compute_sl@2:
  00472	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00477	8b e8		 mov	 ebp, eax

; 488  :     }
; 489  :     if (has_elements == -1) goto Fail;

  00479	83 f8 ff	 cmp	 eax, -1
  0047c	74 83		 je	 SHORT $Fail$20527

; 490  : 
; 491  :     *start = tmp_start;

  0047e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]

; 492  :     *stop = tmp_stop;
; 493  :     *step = tmp_step;
; 494  :     Py_DECREF(neg_one);

  00486	49 8b cf	 mov	 rcx, r15
  00489	48 89 38	 mov	 QWORD PTR [rax], rdi
  0048c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR stop$[rsp]
  00494	48 89 18	 mov	 QWORD PTR [rax], rbx
  00497	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR step$[rsp]
  0049f	4c 89 28	 mov	 QWORD PTR [rax], r13
  004a2	e8 00 00 00 00	 call	 _Py_DecRef

; 495  :     Py_DECREF(one);

  004a7	49 8b ce	 mov	 rcx, r14
  004aa	e8 00 00 00 00	 call	 _Py_DecRef

; 496  :     Py_DECREF(zero);

  004af	49 8b cc	 mov	 rcx, r12
  004b2	e8 00 00 00 00	 call	 _Py_DecRef

; 497  :     return has_elements;

  004b7	8b c5		 mov	 eax, ebp
  004b9	e9 87 02 00 00	 jmp	 $LN103@compute_sl@2

; 498  : 
; 499  :   Fail:
; 500  :     Py_XDECREF(tmp_start);

$LN114@compute_sl@2:
  004be	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  004c2	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  004c8	eb 08		 jmp	 SHORT $LN27@compute_sl@2
$LN109@compute_sl@2:
  004ca	48 8b cf	 mov	 rcx, rdi
  004cd	e8 00 00 00 00	 call	 Px_DecRef
$LN27@compute_sl@2:

; 501  :     Py_XDECREF(tmp_stop);

  004d2	48 85 db	 test	 rbx, rbx
  004d5	74 65		 je	 SHORT $LN23@compute_sl@2
  004d7	e8 00 00 00 00	 call	 _Py_PXCTX
  004dc	85 c0		 test	 eax, eax
  004de	75 5c		 jne	 SHORT $LN23@compute_sl@2
  004e0	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  004e4	a8 20		 test	 al, 32			; 00000020H
  004e6	75 4c		 jne	 SHORT $LN120@compute_sl@2
  004e8	84 c0		 test	 al, al
  004ea	78 48		 js	 SHORT $LN120@compute_sl@2
  004ec	a8 02		 test	 al, 2
  004ee	75 4c		 jne	 SHORT $LN23@compute_sl@2
  004f0	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  004f4	75 46		 jne	 SHORT $LN23@compute_sl@2
  004f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  004fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00504	4c 8b cb	 mov	 r9, rbx
  00507	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0050d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00515	e8 00 00 00 00	 call	 _PyParallel_Guard
  0051a	48 8b cb	 mov	 rcx, rbx
  0051d	85 c0		 test	 eax, eax
  0051f	74 07		 je	 SHORT $LN125@compute_sl@2
  00521	e8 00 00 00 00	 call	 _Px_Dealloc
  00526	eb 14		 jmp	 SHORT $LN23@compute_sl@2
$LN125@compute_sl@2:
  00528	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0052c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00532	eb 08		 jmp	 SHORT $LN23@compute_sl@2
$LN120@compute_sl@2:
  00534	48 8b cb	 mov	 rcx, rbx
  00537	e8 00 00 00 00	 call	 Px_DecRef
$LN23@compute_sl@2:

; 502  :     Py_XDECREF(tmp_step);

  0053c	4d 85 ed	 test	 r13, r13
  0053f	74 65		 je	 SHORT $LN19@compute_sl@2
  00541	e8 00 00 00 00	 call	 _Py_PXCTX
  00546	85 c0		 test	 eax, eax
  00548	75 5c		 jne	 SHORT $LN19@compute_sl@2
  0054a	49 8b 45 20	 mov	 rax, QWORD PTR [r13+32]
  0054e	a8 20		 test	 al, 32			; 00000020H
  00550	75 4c		 jne	 SHORT $LN131@compute_sl@2
  00552	84 c0		 test	 al, al
  00554	78 48		 js	 SHORT $LN131@compute_sl@2
  00556	a8 02		 test	 al, 2
  00558	75 4c		 jne	 SHORT $LN19@compute_sl@2
  0055a	49 ff 4d 50	 dec	 QWORD PTR [r13+80]
  0055e	75 46		 jne	 SHORT $LN19@compute_sl@2
  00560	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00567	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0056e	4d 8b cd	 mov	 r9, r13
  00571	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00577	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0057f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00584	49 8b cd	 mov	 rcx, r13
  00587	85 c0		 test	 eax, eax
  00589	74 07		 je	 SHORT $LN136@compute_sl@2
  0058b	e8 00 00 00 00	 call	 _Px_Dealloc
  00590	eb 14		 jmp	 SHORT $LN19@compute_sl@2
$LN136@compute_sl@2:
  00592	49 8b 45 58	 mov	 rax, QWORD PTR [r13+88]
  00596	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0059c	eb 08		 jmp	 SHORT $LN19@compute_sl@2
$LN131@compute_sl@2:
  0059e	49 8b cd	 mov	 rcx, r13
  005a1	e8 00 00 00 00	 call	 Px_DecRef
$LN19@compute_sl@2:

; 503  :     Py_XDECREF(candidate);

  005a6	48 85 f6	 test	 rsi, rsi
  005a9	74 65		 je	 SHORT $LN15@compute_sl@2
  005ab	e8 00 00 00 00	 call	 _Py_PXCTX
  005b0	85 c0		 test	 eax, eax
  005b2	75 5c		 jne	 SHORT $LN15@compute_sl@2
  005b4	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  005b8	a8 20		 test	 al, 32			; 00000020H
  005ba	75 4c		 jne	 SHORT $LN142@compute_sl@2
  005bc	84 c0		 test	 al, al
  005be	78 48		 js	 SHORT $LN142@compute_sl@2
  005c0	a8 02		 test	 al, 2
  005c2	75 4c		 jne	 SHORT $LN15@compute_sl@2
  005c4	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  005c8	75 46		 jne	 SHORT $LN15@compute_sl@2
  005ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  005d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  005d8	4c 8b ce	 mov	 r9, rsi
  005db	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  005e1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  005e9	e8 00 00 00 00	 call	 _PyParallel_Guard
  005ee	48 8b ce	 mov	 rcx, rsi
  005f1	85 c0		 test	 eax, eax
  005f3	74 07		 je	 SHORT $LN147@compute_sl@2
  005f5	e8 00 00 00 00	 call	 _Px_Dealloc
  005fa	eb 14		 jmp	 SHORT $LN15@compute_sl@2
$LN147@compute_sl@2:
  005fc	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  00600	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00606	eb 08		 jmp	 SHORT $LN15@compute_sl@2
$LN142@compute_sl@2:
  00608	48 8b ce	 mov	 rcx, rsi
  0060b	e8 00 00 00 00	 call	 Px_DecRef
$LN15@compute_sl@2:

; 504  :     Py_XDECREF(neg_one);

  00610	e8 00 00 00 00	 call	 _Py_PXCTX
  00615	85 c0		 test	 eax, eax
  00617	75 5c		 jne	 SHORT $LN11@compute_sl@2
  00619	49 8b 47 20	 mov	 rax, QWORD PTR [r15+32]
  0061d	a8 20		 test	 al, 32			; 00000020H
  0061f	75 4c		 jne	 SHORT $LN153@compute_sl@2
  00621	84 c0		 test	 al, al
  00623	78 48		 js	 SHORT $LN153@compute_sl@2
  00625	a8 02		 test	 al, 2
  00627	75 4c		 jne	 SHORT $LN11@compute_sl@2
  00629	49 ff 4f 50	 dec	 QWORD PTR [r15+80]
  0062d	75 46		 jne	 SHORT $LN11@compute_sl@2
  0062f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00636	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0063d	4d 8b cf	 mov	 r9, r15
  00640	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00646	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0064e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00653	49 8b cf	 mov	 rcx, r15
  00656	85 c0		 test	 eax, eax
  00658	74 07		 je	 SHORT $LN158@compute_sl@2
  0065a	e8 00 00 00 00	 call	 _Px_Dealloc
  0065f	eb 14		 jmp	 SHORT $LN11@compute_sl@2
$LN158@compute_sl@2:
  00661	49 8b 47 58	 mov	 rax, QWORD PTR [r15+88]
  00665	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0066b	eb 08		 jmp	 SHORT $LN11@compute_sl@2
$LN153@compute_sl@2:
  0066d	49 8b cf	 mov	 rcx, r15
  00670	e8 00 00 00 00	 call	 Px_DecRef
$LN11@compute_sl@2:

; 505  :     Py_XDECREF(one);

  00675	e8 00 00 00 00	 call	 _Py_PXCTX
  0067a	85 c0		 test	 eax, eax
  0067c	75 5c		 jne	 SHORT $LN7@compute_sl@2
  0067e	49 8b 46 20	 mov	 rax, QWORD PTR [r14+32]
  00682	a8 20		 test	 al, 32			; 00000020H
  00684	75 4c		 jne	 SHORT $LN164@compute_sl@2
  00686	84 c0		 test	 al, al
  00688	78 48		 js	 SHORT $LN164@compute_sl@2
  0068a	a8 02		 test	 al, 2
  0068c	75 4c		 jne	 SHORT $LN7@compute_sl@2
  0068e	49 ff 4e 50	 dec	 QWORD PTR [r14+80]
  00692	75 46		 jne	 SHORT $LN7@compute_sl@2
  00694	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0069b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  006a2	4d 8b ce	 mov	 r9, r14
  006a5	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  006ab	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  006b3	e8 00 00 00 00	 call	 _PyParallel_Guard
  006b8	49 8b ce	 mov	 rcx, r14
  006bb	85 c0		 test	 eax, eax
  006bd	74 07		 je	 SHORT $LN169@compute_sl@2
  006bf	e8 00 00 00 00	 call	 _Px_Dealloc
  006c4	eb 14		 jmp	 SHORT $LN7@compute_sl@2
$LN169@compute_sl@2:
  006c6	49 8b 46 58	 mov	 rax, QWORD PTR [r14+88]
  006ca	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  006d0	eb 08		 jmp	 SHORT $LN7@compute_sl@2
$LN164@compute_sl@2:
  006d2	49 8b ce	 mov	 rcx, r14
  006d5	e8 00 00 00 00	 call	 Px_DecRef
$LN7@compute_sl@2:

; 506  :     Py_XDECREF(zero);

  006da	e8 00 00 00 00	 call	 _Py_PXCTX
  006df	85 c0		 test	 eax, eax
  006e1	75 5f		 jne	 SHORT $LN3@compute_sl@2
  006e3	49 8b 44 24 20	 mov	 rax, QWORD PTR [r12+32]
  006e8	a8 20		 test	 al, 32			; 00000020H
  006ea	75 4e		 jne	 SHORT $LN175@compute_sl@2
  006ec	84 c0		 test	 al, al
  006ee	78 4a		 js	 SHORT $LN175@compute_sl@2
  006f0	a8 02		 test	 al, 2
  006f2	75 4e		 jne	 SHORT $LN3@compute_sl@2
  006f4	49 ff 4c 24 50	 dec	 QWORD PTR [r12+80]
  006f9	75 47		 jne	 SHORT $LN3@compute_sl@2
  006fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00702	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00709	4d 8b cc	 mov	 r9, r12
  0070c	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00712	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0071a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0071f	49 8b cc	 mov	 rcx, r12
  00722	85 c0		 test	 eax, eax
  00724	74 07		 je	 SHORT $LN180@compute_sl@2
  00726	e8 00 00 00 00	 call	 _Px_Dealloc
  0072b	eb 15		 jmp	 SHORT $LN3@compute_sl@2
$LN180@compute_sl@2:
  0072d	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]
  00732	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00738	eb 08		 jmp	 SHORT $LN3@compute_sl@2
$LN175@compute_sl@2:
  0073a	49 8b cc	 mov	 rcx, r12
  0073d	e8 00 00 00 00	 call	 Px_DecRef
$LN3@compute_sl@2:

; 507  :     return -1;

  00742	83 c8 ff	 or	 eax, -1
$LN103@compute_sl@2:

; 508  : }

  00745	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  0074d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00751	41 5f		 pop	 r15
  00753	41 5e		 pop	 r14
  00755	41 5d		 pop	 r13
  00757	41 5c		 pop	 r12
  00759	5f		 pop	 rdi
  0075a	5e		 pop	 rsi
  0075b	5d		 pop	 rbp
  0075c	c3		 ret	 0
compute_slice_indices ENDP
_TEXT	ENDS
EXTRN	PyNumber_Remainder:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$range_contains_long DD imagerel range_contains_long
	DD	imagerel range_contains_long+77
	DD	imagerel $unwind$range_contains_long
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$range_contains_long DD imagerel range_contains_long+77
	DD	imagerel range_contains_long+450
	DD	imagerel $chain$0$range_contains_long
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$range_contains_long DD imagerel range_contains_long+450
	DD	imagerel range_contains_long+575
	DD	imagerel $chain$1$range_contains_long
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$range_contains_long DD 021H
	DD	imagerel range_contains_long
	DD	imagerel range_contains_long+77
	DD	imagerel $unwind$range_contains_long
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$range_contains_long DD 020521H
	DD	085405H
	DD	imagerel range_contains_long
	DD	imagerel range_contains_long+77
	DD	imagerel $unwind$range_contains_long
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_contains_long DD 081501H
	DD	0b7415H
	DD	0a6415H
	DD	093415H
	DD	0c0115215H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\rangeobject.c
xdata	ENDS
;	COMDAT range_contains_long
_TEXT	SEGMENT
r$ = 64
ob$ = 72
range_contains_long PROC				; COMDAT

; 556  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000f	41 54		 push	 r12
  00011	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00015	48 8b f9	 mov	 rdi, rcx

; 557  :     int cmp1, cmp2, cmp3;
; 558  :     PyObject *tmp1 = NULL;
; 559  :     PyObject *tmp2 = NULL;
; 560  :     PyObject *zero = NULL;
; 561  :     int result = -1;
; 562  : 
; 563  :     zero = PyLong_FromLong(0);

  00018	33 c9		 xor	 ecx, ecx
  0001a	4c 8b e2	 mov	 r12, rdx
  0001d	83 cb ff	 or	 ebx, -1
  00020	e8 00 00 00 00	 call	 PyLong_FromLong
  00025	48 8b f0	 mov	 rsi, rax

; 564  :     if (zero == NULL) /* MemoryError in int(0) */

  00028	48 85 c0	 test	 rax, rax
  0002b	0f 84 f6 01 00
	00		 je	 $LN61@range_cont

; 565  :         goto end;
; 566  : 
; 567  :     /* Check if the value can possibly be in the range. */
; 568  : 
; 569  :     cmp1 = PyObject_RichCompareBool(r->step, zero, Py_GT);

  00031	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  00035	44 8d 43 05	 lea	 r8d, QWORD PTR [rbx+5]
  00039	48 8b d0	 mov	 rdx, rax
  0003c	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 570  :     if (cmp1 == -1)

  00041	3b c3		 cmp	 eax, ebx
  00043	0f 84 79 01 00
	00		 je	 $LN7@range_cont

; 571  :         goto end;
; 572  :     if (cmp1 == 1) { /* positive steps: start <= ob < stop */
; 573  :         cmp2 = PyObject_RichCompareBool(r->start, ob, Py_LE);

  00049	44 8d 43 02	 lea	 r8d, QWORD PTR [rbx+2]
  0004d	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  00052	41 3b c0	 cmp	 eax, r8d
  00055	75 15		 jne	 SHORT $LN20@range_cont
  00057	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  0005b	49 8b d4	 mov	 rdx, r12
  0005e	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 574  :         cmp3 = PyObject_RichCompareBool(ob, r->stop, Py_LT);

  00063	48 8b 57 68	 mov	 rdx, QWORD PTR [rdi+104]
  00067	49 8b cc	 mov	 rcx, r12

; 575  :     }
; 576  :     else { /* negative steps: stop < ob <= start */

  0006a	eb 13		 jmp	 SHORT $LN63@range_cont
$LN20@range_cont:

; 577  :         cmp2 = PyObject_RichCompareBool(ob, r->start, Py_LE);

  0006c	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  00070	49 8b cc	 mov	 rcx, r12
  00073	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 578  :         cmp3 = PyObject_RichCompareBool(r->stop, ob, Py_LT);

  00078	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  0007c	49 8b d4	 mov	 rdx, r12
$LN63@range_cont:
  0007f	45 33 c0	 xor	 r8d, r8d
  00082	8b e8		 mov	 ebp, eax
  00084	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 579  :     }
; 580  : 
; 581  :     if (cmp2 == -1 || cmp3 == -1) /* TypeError */

  00089	83 fd ff	 cmp	 ebp, -1
  0008c	0f 84 2b 01 00
	00		 je	 $LN62@range_cont
  00092	83 f8 ff	 cmp	 eax, -1
  00095	0f 84 22 01 00
	00		 je	 $LN62@range_cont

; 582  :         goto end;
; 583  :     if (cmp2 == 0 || cmp3 == 0) { /* ob outside of range */

  0009b	85 ed		 test	 ebp, ebp
  0009d	0f 84 18 01 00
	00		 je	 $LN15@range_cont
  000a3	85 c0		 test	 eax, eax
  000a5	0f 84 10 01 00
	00		 je	 $LN15@range_cont

; 585  :         goto end;
; 586  :     }
; 587  : 
; 588  :     /* Check that the stride does not invalidate ob's membership. */
; 589  :     tmp1 = PyNumber_Subtract(ob, r->start);

  000ab	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  000af	49 8b cc	 mov	 rcx, r12
  000b2	e8 00 00 00 00	 call	 PyNumber_Subtract
  000b7	48 8b e8	 mov	 rbp, rax

; 590  :     if (tmp1 == NULL)

  000ba	48 85 c0	 test	 rax, rax
  000bd	0f 84 fa 00 00
	00		 je	 $LN62@range_cont

; 591  :         goto end;
; 592  :     tmp2 = PyNumber_Remainder(tmp1, r->step);

  000c3	48 8b 57 70	 mov	 rdx, QWORD PTR [rdi+112]
  000c7	48 8b c8	 mov	 rcx, rax
  000ca	e8 00 00 00 00	 call	 PyNumber_Remainder
  000cf	48 8b f8	 mov	 rdi, rax

; 593  :     if (tmp2 == NULL)

  000d2	48 85 c0	 test	 rax, rax
  000d5	74 13		 je	 SHORT $end$20796

; 594  :         goto end;
; 595  :     /* result = (int(ob) - start % step) == 0 */
; 596  :     result = PyObject_RichCompareBool(tmp2, zero, Py_EQ);

  000d7	41 b8 02 00 00
	00		 mov	 r8d, 2
  000dd	48 8b d6	 mov	 rdx, rsi
  000e0	48 8b c8	 mov	 rcx, rax
  000e3	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  000e8	8b d8		 mov	 ebx, eax
$end$20796:

; 597  :   end:
; 598  :     Py_XDECREF(tmp1);

  000ea	e8 00 00 00 00	 call	 _Py_PXCTX
  000ef	85 c0		 test	 eax, eax
  000f1	75 5c		 jne	 SHORT $LN11@range_cont
  000f3	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  000f7	a8 20		 test	 al, 32			; 00000020H
  000f9	75 4c		 jne	 SHORT $LN29@range_cont
  000fb	84 c0		 test	 al, al
  000fd	78 48		 js	 SHORT $LN29@range_cont
  000ff	a8 02		 test	 al, 2
  00101	75 4c		 jne	 SHORT $LN11@range_cont
  00103	48 ff 4d 50	 dec	 QWORD PTR [rbp+80]
  00107	75 46		 jne	 SHORT $LN11@range_cont
  00109	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00110	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00117	4c 8b cd	 mov	 r9, rbp
  0011a	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00120	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00128	e8 00 00 00 00	 call	 _PyParallel_Guard
  0012d	48 8b cd	 mov	 rcx, rbp
  00130	85 c0		 test	 eax, eax
  00132	74 07		 je	 SHORT $LN34@range_cont
  00134	e8 00 00 00 00	 call	 _Px_Dealloc
  00139	eb 14		 jmp	 SHORT $LN11@range_cont
$LN34@range_cont:
  0013b	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  0013f	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00145	eb 08		 jmp	 SHORT $LN11@range_cont
$LN29@range_cont:
  00147	48 8b cd	 mov	 rcx, rbp
  0014a	e8 00 00 00 00	 call	 Px_DecRef
$LN11@range_cont:

; 599  :     Py_XDECREF(tmp2);

  0014f	48 85 ff	 test	 rdi, rdi
  00152	74 69		 je	 SHORT $LN62@range_cont
  00154	e8 00 00 00 00	 call	 _Py_PXCTX
  00159	85 c0		 test	 eax, eax
  0015b	75 60		 jne	 SHORT $LN62@range_cont
  0015d	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00161	a8 20		 test	 al, 32			; 00000020H
  00163	75 4c		 jne	 SHORT $LN40@range_cont
  00165	84 c0		 test	 al, al
  00167	78 48		 js	 SHORT $LN40@range_cont
  00169	a8 02		 test	 al, 2
  0016b	75 50		 jne	 SHORT $LN62@range_cont
  0016d	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00171	75 4a		 jne	 SHORT $LN62@range_cont
  00173	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00181	4c 8b cf	 mov	 r9, rdi
  00184	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0018a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00192	e8 00 00 00 00	 call	 _PyParallel_Guard
  00197	48 8b cf	 mov	 rcx, rdi
  0019a	85 c0		 test	 eax, eax
  0019c	74 07		 je	 SHORT $LN45@range_cont
  0019e	e8 00 00 00 00	 call	 _Px_Dealloc
  001a3	eb 18		 jmp	 SHORT $LN62@range_cont
$LN45@range_cont:
  001a5	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  001a9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001af	eb 0c		 jmp	 SHORT $LN62@range_cont
$LN40@range_cont:
  001b1	48 8b cf	 mov	 rcx, rdi
  001b4	e8 00 00 00 00	 call	 Px_DecRef
  001b9	eb 02		 jmp	 SHORT $LN62@range_cont
$LN15@range_cont:

; 584  :         result = 0;

  001bb	33 db		 xor	 ebx, ebx
$LN62@range_cont:
  001bd	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
$LN7@range_cont:

; 600  :     Py_XDECREF(zero);

  001c2	e8 00 00 00 00	 call	 _Py_PXCTX
  001c7	85 c0		 test	 eax, eax
  001c9	75 5c		 jne	 SHORT $LN61@range_cont
  001cb	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  001cf	a8 20		 test	 al, 32			; 00000020H
  001d1	75 4c		 jne	 SHORT $LN51@range_cont
  001d3	84 c0		 test	 al, al
  001d5	78 48		 js	 SHORT $LN51@range_cont
  001d7	a8 02		 test	 al, 2
  001d9	75 4c		 jne	 SHORT $LN61@range_cont
  001db	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  001df	75 46		 jne	 SHORT $LN61@range_cont
  001e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001ef	4c 8b ce	 mov	 r9, rsi
  001f2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001f8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00200	e8 00 00 00 00	 call	 _PyParallel_Guard
  00205	48 8b ce	 mov	 rcx, rsi
  00208	85 c0		 test	 eax, eax
  0020a	74 07		 je	 SHORT $LN56@range_cont
  0020c	e8 00 00 00 00	 call	 _Px_Dealloc
  00211	eb 14		 jmp	 SHORT $LN61@range_cont
$LN56@range_cont:
  00213	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  00217	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0021d	eb 08		 jmp	 SHORT $LN61@range_cont
$LN51@range_cont:
  0021f	48 8b ce	 mov	 rcx, rsi
  00222	e8 00 00 00 00	 call	 Px_DecRef
$LN61@range_cont:

; 601  :     return result;
; 602  : }

  00227	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0022c	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  00231	8b c3		 mov	 eax, ebx
  00233	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00238	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0023c	41 5c		 pop	 r12
  0023e	c3		 ret	 0
range_contains_long ENDP
_TEXT	ENDS
EXTRN	_PySequence_IterSearch:PROC
EXTRN	PyBool_Type:BYTE
EXTRN	PyLong_Type:BYTE
; Function compile flags: /Ogtpy
;	COMDAT range_contains
_TEXT	SEGMENT
r$ = 8
ob$ = 16
range_contains PROC					; COMDAT

; 607  :     if (PyLong_CheckExact(ob) || PyBool_Check(ob))

  00000	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00004	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyLong_Type
  0000b	49 3b c0	 cmp	 rax, r8
  0000e	74 17		 je	 SHORT $LN1@range_cont@2
  00010	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBool_Type
  00017	49 3b c0	 cmp	 rax, r8
  0001a	74 0b		 je	 SHORT $LN1@range_cont@2

; 608  :         return range_contains_long(r, ob);
; 609  : 
; 610  :     return (int)_PySequence_IterSearch((PyObject*)r, ob,
; 611  :                                        PY_ITERSEARCH_CONTAINS);

  0001c	41 b8 03 00 00
	00		 mov	 r8d, 3

; 612  : }

  00022	e9 00 00 00 00	 jmp	 _PySequence_IterSearch
$LN1@range_cont@2:
  00027	e9 00 00 00 00	 jmp	 range_contains_long
range_contains ENDP
_TEXT	ENDS
EXTRN	PyObject_Not:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_equals DD imagerel range_equals
	DD	imagerel range_equals+106
	DD	imagerel $unwind$range_equals
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$range_equals DD imagerel range_equals+106
	DD	imagerel range_equals+143
	DD	imagerel $chain$0$range_equals
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$range_equals DD imagerel range_equals+143
	DD	imagerel range_equals+213
	DD	imagerel $chain$3$range_equals
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$range_equals DD imagerel range_equals+213
	DD	imagerel range_equals+224
	DD	imagerel $chain$4$range_equals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$range_equals DD 021H
	DD	imagerel range_equals
	DD	imagerel range_equals+106
	DD	imagerel $unwind$range_equals
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$range_equals DD 041221H
	DD	076412H
	DD	065400H
	DD	imagerel range_equals
	DD	imagerel range_equals+106
	DD	imagerel $unwind$range_equals
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$range_equals DD 020521H
	DD	065405H
	DD	imagerel range_equals
	DD	imagerel range_equals+106
	DD	imagerel $unwind$range_equals
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_equals DD 040a01H
	DD	08340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT range_equals
_TEXT	SEGMENT
r0$ = 48
r1$ = 56
range_equals PROC					; COMDAT

; 631  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 632  :     int cmp_result;
; 633  :     PyObject *one;
; 634  : 
; 635  :     if (r0 == r1)

  00010	48 3b ca	 cmp	 rcx, rdx
  00013	75 10		 jne	 SHORT $LN6@range_equa

; 636  :         return 1;

  00015	b8 01 00 00 00	 mov	 eax, 1

; 658  : }

  0001a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0001f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00023	5f		 pop	 rdi
  00024	c3		 ret	 0
$LN6@range_equa:

; 637  :     cmp_result = PyObject_RichCompareBool(r0->length, r1->length, Py_EQ);

  00025	48 8b 52 78	 mov	 rdx, QWORD PTR [rdx+120]
  00029	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  0002d	41 b8 02 00 00
	00		 mov	 r8d, 2
  00033	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 638  :     /* Return False or error to the caller. */
; 639  :     if (cmp_result != 1)

  00038	83 f8 01	 cmp	 eax, 1

; 640  :         return cmp_result;

  0003b	0f 85 94 00 00
	00		 jne	 $LN7@range_equa

; 641  :     cmp_result = PyObject_Not(r0->length);

  00041	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  00045	e8 00 00 00 00	 call	 PyObject_Not

; 642  :     /* Return True or error to the caller. */
; 643  :     if (cmp_result != 0)

  0004a	85 c0		 test	 eax, eax

; 644  :         return cmp_result;

  0004c	0f 85 83 00 00
	00		 jne	 $LN7@range_equa

; 645  :     cmp_result = PyObject_RichCompareBool(r0->start, r1->start, Py_EQ);

  00052	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  00056	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0005a	44 8d 40 02	 lea	 r8d, QWORD PTR [rax+2]
  0005e	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 646  :     /* Return False or error to the caller. */
; 647  :     if (cmp_result != 1)

  00063	83 f8 01	 cmp	 eax, 1

; 648  :         return cmp_result;

  00066	75 6d		 jne	 SHORT $LN7@range_equa

; 649  :     one = PyLong_FromLong(1);

  00068	8b c8		 mov	 ecx, eax
  0006a	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  0006f	e8 00 00 00 00	 call	 PyLong_FromLong
  00074	48 8b e8	 mov	 rbp, rax

; 650  :     if (!one)

  00077	48 85 c0	 test	 rax, rax
  0007a	75 13		 jne	 SHORT $LN2@range_equa

; 651  :         return -1;

  0007c	83 c8 ff	 or	 eax, -1
  0007f	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]

; 658  : }

  00084	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00089	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008d	5f		 pop	 rdi
  0008e	c3		 ret	 0
$LN2@range_equa:

; 652  :     cmp_result = PyObject_RichCompareBool(r0->length, one, Py_EQ);

  0008f	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  00093	41 b8 02 00 00
	00		 mov	 r8d, 2
  00099	48 8b d0	 mov	 rdx, rax
  0009c	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  000a1	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 653  :     Py_DECREF(one);

  000a6	48 8b cd	 mov	 rcx, rbp
  000a9	8b f0		 mov	 esi, eax
  000ab	e8 00 00 00 00	 call	 _Py_DecRef

; 654  :     /* Return True or error to the caller. */
; 655  :     if (cmp_result != 0)

  000b0	85 f6		 test	 esi, esi
  000b2	74 04		 je	 SHORT $LN1@range_equa

; 656  :         return cmp_result;

  000b4	8b c6		 mov	 eax, esi
  000b6	eb 13		 jmp	 SHORT $LN10@range_equa
$LN1@range_equa:

; 657  :     return PyObject_RichCompareBool(r0->step, r1->step, Py_EQ);

  000b8	48 8b 57 70	 mov	 rdx, QWORD PTR [rdi+112]
  000bc	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  000c0	41 b8 02 00 00
	00		 mov	 r8d, 2
  000c6	e8 00 00 00 00	 call	 PyObject_RichCompareBool
$LN10@range_equa:
  000cb	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000d0	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
$LN7@range_equa:

; 658  : }

  000d5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000da	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000de	5f		 pop	 rdi
  000df	c3		 ret	 0
range_equals ENDP
_TEXT	ENDS
EXTRN	PyErr_BadArgument:PROC
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	_Py_NotImplementedStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$range_richcompare DD imagerel range_richcompare
	DD	imagerel range_richcompare+348
	DD	imagerel $unwind$range_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_richcompare DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\rangeobject.c
xdata	ENDS
;	COMDAT range_richcompare
_TEXT	SEGMENT
self$ = 64
other$ = 72
op$ = 80
range_richcompare PROC					; COMDAT

; 662  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 663  :     int result;
; 664  : 
; 665  :     if (!PyRange_Check(other))

  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyRange_Type
  0000d	49 63 d8	 movsxd	 rbx, r8d
  00010	4c 8b c1	 mov	 r8, rcx
  00013	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  00017	74 52		 je	 SHORT $LN10@range_rich

; 666  :         Py_RETURN_NOTIMPLEMENTED;

  00019	e8 00 00 00 00	 call	 _Py_PXCTX
  0001e	85 c0		 test	 eax, eax
  00020	75 3c		 jne	 SHORT $LN14@range_rich
  00022	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NotImplementedStruct
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00037	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0003d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00045	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004a	85 c0		 test	 eax, eax
  0004c	75 09		 jne	 SHORT $LN13@range_rich
  0004e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NotImplementedStruct+32, 32 ; 00000020H
  00055	74 07		 je	 SHORT $LN14@range_rich
$LN13@range_rich:
  00057	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NotImplementedStruct+80
$LN14@range_rich:
  0005e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct

; 687  :     }
; 688  : }

  00065	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00069	5b		 pop	 rbx
  0006a	c3		 ret	 0
$LN10@range_rich:

; 667  :     switch (op) {

  0006b	83 fb 05	 cmp	 ebx, 5
  0006e	0f 87 c1 00 00
	00		 ja	 $LN1@range_rich
  00074	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:__ImageBase
  0007b	41 8b 8c 99 00
	00 00 00	 mov	 ecx, DWORD PTR $LN21@range_rich[r9+rbx*4]
  00083	49 03 c9	 add	 rcx, r9
  00086	ff e1		 jmp	 rcx
$LN7@range_rich:

; 668  :     case Py_NE:
; 669  :     case Py_EQ:
; 670  :         result = range_equals((rangeobject*)self, (rangeobject*)other);

  00088	49 8b c8	 mov	 rcx, r8
  0008b	e8 00 00 00 00	 call	 range_equals
  00090	44 8b d8	 mov	 r11d, eax

; 671  :         if (result == -1)

  00093	83 f8 ff	 cmp	 eax, -1

; 672  :             return NULL;

  00096	0f 84 9e 00 00
	00		 je	 $LN22@range_rich

; 673  :         if (op == Py_NE)

  0009c	83 fb 03	 cmp	 ebx, 3
  0009f	75 0b		 jne	 SHORT $LN5@range_rich

; 674  :             result = !result;

  000a1	33 c0		 xor	 eax, eax
  000a3	45 85 db	 test	 r11d, r11d
  000a6	0f 94 c0	 sete	 al
  000a9	44 8b d8	 mov	 r11d, eax
$LN5@range_rich:

; 675  :         if (result)

  000ac	45 85 db	 test	 r11d, r11d
  000af	74 19		 je	 SHORT $LN4@range_rich

; 676  :             Py_RETURN_TRUE;

  000b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  000b8	e8 00 00 00 00	 call	 _Py_IncRef
  000bd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 687  :     }
; 688  : }

  000c4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c8	5b		 pop	 rbx
  000c9	c3		 ret	 0
$LN4@range_rich:

; 677  :         else
; 678  :             Py_RETURN_FALSE;

  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  000d1	e8 00 00 00 00	 call	 _Py_IncRef
  000d6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 687  :     }
; 688  : }

  000dd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e1	5b		 pop	 rbx
  000e2	c3		 ret	 0
$LN3@range_rich:

; 679  :     case Py_LE:
; 680  :     case Py_GE:
; 681  :     case Py_LT:
; 682  :     case Py_GT:
; 683  :         Py_RETURN_NOTIMPLEMENTED;

  000e3	e8 00 00 00 00	 call	 _Py_PXCTX
  000e8	85 c0		 test	 eax, eax
  000ea	75 3c		 jne	 SHORT $LN18@range_rich
  000ec	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NotImplementedStruct
  000f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00101	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00107	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0010f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00114	85 c0		 test	 eax, eax
  00116	75 09		 jne	 SHORT $LN17@range_rich
  00118	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NotImplementedStruct+32, 32 ; 00000020H
  0011f	74 07		 je	 SHORT $LN18@range_rich
$LN17@range_rich:
  00121	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NotImplementedStruct+80
$LN18@range_rich:
  00128	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct

; 687  :     }
; 688  : }

  0012f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00133	5b		 pop	 rbx
  00134	c3		 ret	 0
$LN1@range_rich:

; 684  :     default:
; 685  :         PyErr_BadArgument();

  00135	e8 00 00 00 00	 call	 PyErr_BadArgument
$LN22@range_rich:

; 686  :         return NULL;

  0013a	33 c0		 xor	 eax, eax

; 687  :     }
; 688  : }

  0013c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00140	5b		 pop	 rbx
  00141	c3		 ret	 0
  00142	66 90		 npad	 2
$LN21@range_rich:
  00144	00 00 00 00	 DD	 $LN3@range_rich
  00148	00 00 00 00	 DD	 $LN3@range_rich
  0014c	00 00 00 00	 DD	 $LN7@range_rich
  00150	00 00 00 00	 DD	 $LN7@range_rich
  00154	00 00 00 00	 DD	 $LN3@range_rich
  00158	00 00 00 00	 DD	 $LN3@range_rich
range_richcompare ENDP
_TEXT	ENDS
EXTRN	PyObject_Hash:PROC
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$range_hash DD imagerel range_hash
	DD	imagerel range_hash+42
	DD	imagerel $unwind$range_hash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$range_hash DD imagerel range_hash+42
	DD	imagerel range_hash+136
	DD	imagerel $chain$0$range_hash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$range_hash DD imagerel range_hash+136
	DD	imagerel range_hash+433
	DD	imagerel $chain$1$range_hash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$range_hash DD imagerel range_hash+433
	DD	imagerel range_hash+446
	DD	imagerel $chain$2$range_hash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$range_hash DD imagerel range_hash+446
	DD	imagerel range_hash+465
	DD	imagerel $chain$3$range_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$range_hash DD 021H
	DD	imagerel range_hash
	DD	imagerel range_hash+42
	DD	imagerel $unwind$range_hash
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$range_hash DD 021H
	DD	imagerel range_hash+42
	DD	imagerel range_hash+136
	DD	imagerel $chain$0$range_hash
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$range_hash DD 020521H
	DD	09c405H
	DD	imagerel range_hash+42
	DD	imagerel range_hash+136
	DD	imagerel $chain$0$range_hash
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$range_hash DD 020521H
	DD	085405H
	DD	imagerel range_hash
	DD	imagerel range_hash+42
	DD	imagerel $unwind$range_hash
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_hash DD 060f01H
	DD	0b640fH
	DD	0a340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\rangeobject.c
xdata	ENDS
;	COMDAT range_hash
_TEXT	SEGMENT
r$ = 64
range_hash PROC						; COMDAT

; 700  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b f9	 mov	 rdi, rcx

; 701  :     PyObject *t;
; 702  :     Py_hash_t result = -1;

  00012	48 83 ce ff	 or	 rsi, -1

; 703  :     int cmp_result;
; 704  : 
; 705  :     t = PyTuple_New(3);

  00016	8d 4e 04	 lea	 ecx, QWORD PTR [rsi+4]
  00019	e8 00 00 00 00	 call	 PyTuple_New
  0001e	48 8b d8	 mov	 rbx, rax

; 706  :     if (!t)

  00021	48 85 c0	 test	 rax, rax

; 707  :         return -1;

  00024	0f 84 94 01 00
	00		 je	 $LN24@range_hash

; 708  :     Py_INCREF(r->length);

  0002a	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  0002f	48 8b 6f 78	 mov	 rbp, QWORD PTR [rdi+120]
  00033	e8 00 00 00 00	 call	 _Py_PXCTX
  00038	85 c0		 test	 eax, eax
  0003a	75 32		 jne	 SHORT $LN12@range_hash
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0004a	4c 8b cd	 mov	 r9, rbp
  0004d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00053	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0005b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00060	85 c0		 test	 eax, eax
  00062	75 06		 jne	 SHORT $LN11@range_hash
  00064	f6 45 20 20	 test	 BYTE PTR [rbp+32], 32	; 00000020H
  00068	74 04		 je	 SHORT $LN12@range_hash
$LN11@range_hash:
  0006a	48 ff 45 50	 inc	 QWORD PTR [rbp+80]
$LN12@range_hash:

; 709  :     PyTuple_SET_ITEM(t, 0, r->length);

  0006e	48 8b 47 78	 mov	 rax, QWORD PTR [rdi+120]
  00072	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 710  :     cmp_result = PyObject_Not(r->length);

  00076	48 8b 4f 78	 mov	 rcx, QWORD PTR [rdi+120]
  0007a	e8 00 00 00 00	 call	 PyObject_Not

; 711  :     if (cmp_result == -1)

  0007f	83 f8 ff	 cmp	 eax, -1
  00082	0f 84 29 01 00
	00		 je	 $end$20895

; 712  :         goto end;
; 713  :     if (cmp_result == 1) {

  00088	4c 89 64 24 48	 mov	 QWORD PTR [rsp+72], r12
  0008d	83 f8 01	 cmp	 eax, 1
  00090	0f 85 96 00 00
	00		 jne	 $LN6@range_hash

; 714  :         Py_INCREF(Py_None);

  00096	e8 00 00 00 00	 call	 _Py_PXCTX
  0009b	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  000a2	85 c0		 test	 eax, eax
  000a4	75 38		 jne	 SHORT $LN16@range_hash
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000b4	4c 8b cf	 mov	 r9, rdi
  000b7	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000bd	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 09		 jne	 SHORT $LN15@range_hash
  000ce	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000d5	74 07		 je	 SHORT $LN16@range_hash
$LN15@range_hash:
  000d7	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN16@range_hash:

; 715  :         Py_INCREF(Py_None);

  000de	e8 00 00 00 00	 call	 _Py_PXCTX
  000e3	85 c0		 test	 eax, eax
  000e5	75 38		 jne	 SHORT $LN20@range_hash
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000f5	4c 8b cf	 mov	 r9, rdi
  000f8	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000fe	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00106	e8 00 00 00 00	 call	 _PyParallel_Guard
  0010b	85 c0		 test	 eax, eax
  0010d	75 09		 jne	 SHORT $LN19@range_hash
  0010f	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00116	74 07		 je	 SHORT $LN20@range_hash
$LN19@range_hash:
  00118	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN20@range_hash:

; 716  :         PyTuple_SET_ITEM(t, 1, Py_None);

  0011f	48 89 7b 78	 mov	 QWORD PTR [rbx+120], rdi

; 717  :         PyTuple_SET_ITEM(t, 2, Py_None);

  00123	48 89 bb 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rdi

; 718  :     }
; 719  :     else {

  0012a	eb 75		 jmp	 SHORT $LN1@range_hash
$LN6@range_hash:

; 720  :         PyObject *one;
; 721  :         Py_INCREF(r->start);

  0012c	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  00130	e8 00 00 00 00	 call	 _Py_IncRef

; 722  :         PyTuple_SET_ITEM(t, 1, r->start);

  00135	4c 8b 5f 60	 mov	 r11, QWORD PTR [rdi+96]

; 723  :         one = PyLong_FromLong(1);

  00139	b9 01 00 00 00	 mov	 ecx, 1
  0013e	4c 89 5b 78	 mov	 QWORD PTR [rbx+120], r11
  00142	e8 00 00 00 00	 call	 PyLong_FromLong
  00147	4c 8b e0	 mov	 r12, rax

; 724  :         if (!one)

  0014a	48 85 c0	 test	 rax, rax
  0014d	74 5d		 je	 SHORT $LN23@range_hash

; 725  :             goto end;
; 726  :         cmp_result = PyObject_RichCompareBool(r->length, one, Py_EQ);

  0014f	48 8b 4f 78	 mov	 rcx, QWORD PTR [rdi+120]
  00153	41 b8 02 00 00
	00		 mov	 r8d, 2
  00159	48 8b d0	 mov	 rdx, rax
  0015c	e8 00 00 00 00	 call	 PyObject_RichCompareBool

; 727  :         Py_DECREF(one);

  00161	49 8b cc	 mov	 rcx, r12
  00164	8b e8		 mov	 ebp, eax
  00166	e8 00 00 00 00	 call	 _Py_DecRef

; 728  :         if (cmp_result == -1)

  0016b	83 fd ff	 cmp	 ebp, -1
  0016e	74 3c		 je	 SHORT $LN23@range_hash

; 729  :             goto end;
; 730  :         if (cmp_result == 1) {

  00170	83 fd 01	 cmp	 ebp, 1
  00173	75 18		 jne	 SHORT $LN2@range_hash

; 731  :             Py_INCREF(Py_None);

  00175	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0017c	48 8b cf	 mov	 rcx, rdi
  0017f	e8 00 00 00 00	 call	 _Py_IncRef

; 732  :             PyTuple_SET_ITEM(t, 2, Py_None);

  00184	48 89 bb 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rdi

; 733  :         }
; 734  :         else {

  0018b	eb 14		 jmp	 SHORT $LN1@range_hash
$LN2@range_hash:

; 735  :             Py_INCREF(r->step);

  0018d	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  00191	e8 00 00 00 00	 call	 _Py_IncRef

; 736  :             PyTuple_SET_ITEM(t, 2, r->step);

  00196	4c 8b 5f 70	 mov	 r11, QWORD PTR [rdi+112]
  0019a	4c 89 9b 80 00
	00 00		 mov	 QWORD PTR [rbx+128], r11
$LN1@range_hash:

; 737  :         }
; 738  :     }
; 739  :     result = PyObject_Hash(t);

  001a1	48 8b cb	 mov	 rcx, rbx
  001a4	e8 00 00 00 00	 call	 PyObject_Hash
  001a9	48 8b f0	 mov	 rsi, rax
$LN23@range_hash:
  001ac	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]
$end$20895:

; 740  :   end:
; 741  :     Py_DECREF(t);

  001b1	48 8b cb	 mov	 rcx, rbx
  001b4	e8 00 00 00 00	 call	 _Py_DecRef
  001b9	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
$LN24@range_hash:

; 742  :     return result;
; 743  : }

  001be	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  001c3	48 8b c6	 mov	 rax, rsi
  001c6	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  001cb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001cf	5f		 pop	 rdi
  001d0	c3		 ret	 0
range_hash ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_count DD imagerel range_count
	DD	imagerel range_count+107
	DD	imagerel $unwind$range_count
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_count DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT range_count
_TEXT	SEGMENT
r$ = 48
ob$ = 56
range_count PROC					; COMDAT

; 747  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 748  :     if (PyLong_CheckExact(ob) || PyBool_Check(ob)) {

  00004	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00008	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyLong_Type
  0000f	49 3b c0	 cmp	 rax, r8
  00012	74 29		 je	 SHORT $LN7@range_coun
  00014	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBool_Type
  0001b	49 3b c0	 cmp	 rax, r8
  0001e	74 1d		 je	 SHORT $LN7@range_coun

; 756  :     } else {
; 757  :         Py_ssize_t count;
; 758  :         count = _PySequence_IterSearch((PyObject*)r, ob, PY_ITERSEARCH_COUNT);

  00020	41 b8 01 00 00
	00		 mov	 r8d, 1
  00026	e8 00 00 00 00	 call	 _PySequence_IterSearch

; 759  :         if (count == -1)

  0002b	48 83 f8 ff	 cmp	 rax, -1

; 760  :             return NULL;

  0002f	74 16		 je	 SHORT $LN12@range_coun

; 761  :         return PyLong_FromSsize_t(count);

  00031	48 8b c8	 mov	 rcx, rax

; 762  :     }
; 763  : }

  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
$LN7@range_coun:

; 749  :         int result = range_contains_long(r, ob);

  0003d	e8 00 00 00 00	 call	 range_contains_long

; 750  :         if (result == -1)

  00042	83 f8 ff	 cmp	 eax, -1
  00045	75 07		 jne	 SHORT $LN6@range_coun
$LN12@range_coun:

; 751  :             return NULL;

  00047	33 c0		 xor	 eax, eax

; 762  :     }
; 763  : }

  00049	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004d	c3		 ret	 0
$LN6@range_coun:

; 752  :         else if (result)

  0004e	85 c0		 test	 eax, eax
  00050	74 0e		 je	 SHORT $LN4@range_coun

; 753  :             return PyLong_FromLong(1);

  00052	b9 01 00 00 00	 mov	 ecx, 1

; 762  :     }
; 763  : }

  00057	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005b	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN4@range_coun:

; 754  :         else
; 755  :             return PyLong_FromLong(0);

  00060	33 c9		 xor	 ecx, ecx

; 762  :     }
; 763  : }

  00062	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00066	e9 00 00 00 00	 jmp	 PyLong_FromLong
range_count ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@IFOFHIPH@?$CFR?5is?5not?5in?5range?$AA@ ; `string'
EXTRN	PyErr_Format:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_index DD imagerel range_index
	DD	imagerel range_index+110
	DD	imagerel $unwind$range_index
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$range_index DD imagerel range_index+110
	DD	imagerel range_index+144
	DD	imagerel $chain$0$range_index
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$range_index DD imagerel range_index+144
	DD	imagerel range_index+186
	DD	imagerel $chain$2$range_index
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$range_index DD imagerel range_index+186
	DD	imagerel range_index+221
	DD	imagerel $chain$3$range_index
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$range_index DD 021H
	DD	imagerel range_index
	DD	imagerel range_index+110
	DD	imagerel $unwind$range_index
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$range_index DD 020021H
	DD	066400H
	DD	imagerel range_index
	DD	imagerel range_index+110
	DD	imagerel $unwind$range_index
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$range_index DD 020521H
	DD	066405H
	DD	imagerel range_index
	DD	imagerel range_index+110
	DD	imagerel $unwind$range_index
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_index DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BD@IFOFHIPH@?$CFR?5is?5not?5in?5range?$AA@
CONST	SEGMENT
??_C@_0BD@IFOFHIPH@?$CFR?5is?5not?5in?5range?$AA@ DB '%R is not in range', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT range_index
_TEXT	SEGMENT
r$ = 48
ob$ = 56
range_index PROC					; COMDAT

; 767  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 768  :     int contains;
; 769  : 
; 770  :     if (!PyLong_CheckExact(ob) && !PyBool_Check(ob)) {

  0000a	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyLong_Type
  00018	48 8b da	 mov	 rbx, rdx
  0001b	48 3b c1	 cmp	 rax, rcx
  0001e	74 36		 je	 SHORT $LN5@range_inde
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBool_Type
  00027	48 3b c1	 cmp	 rax, rcx
  0002a	74 2a		 je	 SHORT $LN5@range_inde

; 771  :         Py_ssize_t index;
; 772  :         index = _PySequence_IterSearch((PyObject*)r, ob, PY_ITERSEARCH_INDEX);

  0002c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00032	48 8b cf	 mov	 rcx, rdi
  00035	e8 00 00 00 00	 call	 _PySequence_IterSearch

; 773  :         if (index == -1)

  0003a	48 83 f8 ff	 cmp	 rax, -1

; 774  :             return NULL;

  0003e	0f 84 8c 00 00
	00		 je	 $LN9@range_inde

; 775  :         return PyLong_FromSsize_t(index);

  00044	48 8b c8	 mov	 rcx, rax

; 795  : }

  00047	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0004c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00050	5f		 pop	 rdi
  00051	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
$LN5@range_inde:

; 776  :     }
; 777  : 
; 778  :     contains = range_contains_long(r, ob);

  00056	48 8b cf	 mov	 rcx, rdi
  00059	e8 00 00 00 00	 call	 range_contains_long

; 779  :     if (contains == -1)

  0005e	83 f8 ff	 cmp	 eax, -1

; 780  :         return NULL;

  00061	74 6d		 je	 SHORT $LN9@range_inde

; 781  : 
; 782  :     if (contains) {

  00063	85 c0		 test	 eax, eax
  00065	74 53		 je	 SHORT $LN2@range_inde

; 783  :         PyObject *idx, *tmp = PyNumber_Subtract(ob, r->start);

  00067	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  0006b	48 8b cb	 mov	 rcx, rbx
  0006e	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00073	e8 00 00 00 00	 call	 PyNumber_Subtract
  00078	48 8b f0	 mov	 rsi, rax

; 784  :         if (tmp == NULL)

  0007b	48 85 c0	 test	 rax, rax
  0007e	75 10		 jne	 SHORT $LN1@range_inde
  00080	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 795  : }

  00085	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0008a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008e	5f		 pop	 rdi
  0008f	c3		 ret	 0
$LN1@range_inde:

; 785  :             return NULL;
; 786  :         /* idx = (ob - r.start) // r.step */
; 787  :         idx = PyNumber_FloorDivide(tmp, r->step);

  00090	48 8b 57 70	 mov	 rdx, QWORD PTR [rdi+112]
  00094	48 8b c8	 mov	 rcx, rax
  00097	e8 00 00 00 00	 call	 PyNumber_FloorDivide

; 788  :         Py_DECREF(tmp);

  0009c	48 8b ce	 mov	 rcx, rsi
  0009f	48 8b d8	 mov	 rbx, rax
  000a2	e8 00 00 00 00	 call	 _Py_DecRef
  000a7	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 789  :         return idx;

  000ac	48 8b c3	 mov	 rax, rbx

; 795  : }

  000af	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000b4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b8	5f		 pop	 rdi
  000b9	c3		 ret	 0
$LN2@range_inde:

; 790  :     }
; 791  : 
; 792  :     /* object is not in the range */
; 793  :     PyErr_Format(PyExc_ValueError, "%R is not in range", ob);

  000ba	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@IFOFHIPH@?$CFR?5is?5not?5in?5range?$AA@
  000c8	4c 8b c3	 mov	 r8, rbx
  000cb	e8 00 00 00 00	 call	 PyErr_Format
$LN9@range_inde:

; 794  :     return NULL;

  000d0	33 c0		 xor	 eax, eax

; 795  : }

  000d2	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000d7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000db	5f		 pop	 rdi
  000dc	c3		 ret	 0
range_index ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@EIKKGFPF@range?$CI?$CFR?0?5?$CFR?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BC@PONFPGBB@range?$CI?$CFR?0?5?$CFR?0?5?$CFR?$CJ?$AA@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_repr DD imagerel range_repr
	DD	imagerel range_repr+85
	DD	imagerel $unwind$range_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_repr DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0O@EIKKGFPF@range?$CI?$CFR?0?5?$CFR?$CJ?$AA@
CONST	SEGMENT
??_C@_0O@EIKKGFPF@range?$CI?$CFR?0?5?$CFR?$CJ?$AA@ DB 'range(%R, %R)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PONFPGBB@range?$CI?$CFR?0?5?$CFR?0?5?$CFR?$CJ?$AA@
CONST	SEGMENT
??_C@_0BC@PONFPGBB@range?$CI?$CFR?0?5?$CFR?0?5?$CFR?$CJ?$AA@ DB 'range(%R'
	DB	', %R, %R)', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT range_repr
_TEXT	SEGMENT
r$ = 48
range_repr PROC						; COMDAT

; 810  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 811  :     Py_ssize_t istep;
; 812  : 
; 813  :     /* Check for special case values for printing.  We don't always
; 814  :        need the step value.  We don't care about errors
; 815  :        (it means overflow), so clear the errors. */
; 816  :     istep = PyNumber_AsSsize_t(r->step, NULL);

  00009	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0000d	33 d2		 xor	 edx, edx
  0000f	e8 00 00 00 00	 call	 PyNumber_AsSsize_t

; 817  :     if (istep != 1 || (istep == -1 && PyErr_Occurred())) {

  00014	48 83 f8 01	 cmp	 rax, 1
  00018	74 22		 je	 SHORT $LN7@range_repr

; 818  :         PyErr_Clear();

  0001a	e8 00 00 00 00	 call	 PyErr_Clear

; 823  :     else
; 824  :         return PyUnicode_FromFormat("range(%R, %R, %R)",
; 825  :                                     r->start, r->stop, r->step);

  0001f	4c 8b 4b 70	 mov	 r9, QWORD PTR [rbx+112]
  00023	4c 8b 43 68	 mov	 r8, QWORD PTR [rbx+104]
  00027	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@PONFPGBB@range?$CI?$CFR?0?5?$CFR?0?5?$CFR?$CJ?$AA@

; 826  : }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5b		 pop	 rbx
  00037	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
$LN7@range_repr:

; 819  :     }
; 820  : 
; 821  :     if (istep == 1)
; 822  :         return PyUnicode_FromFormat("range(%R, %R)", r->start, r->stop);

  0003c	4c 8b 43 68	 mov	 r8, QWORD PTR [rbx+104]
  00040	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EIKKGFPF@range?$CI?$CFR?0?5?$CFR?$CJ?$AA@

; 826  : }

  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5b		 pop	 rbx
  00050	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
range_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_08LIDALBJO@?$CIO?$CIOOO?$CJ?$CJ?$AA@	; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_reduce DD imagerel range_reduce
	DD	imagerel range_reduce+42
	DD	imagerel $unwind$range_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_reduce DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_08LIDALBJO@?$CIO?$CIOOO?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_08LIDALBJO@?$CIO?$CIOOO?$CJ?$CJ?$AA@ DB '(O(OOO))', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT range_reduce
_TEXT	SEGMENT
r$ = 64
args$ = 72
range_reduce PROC					; COMDAT

; 831  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 832  :     return Py_BuildValue("(O(OOO))", Py_TYPE(r),
; 833  :                          r->start, r->stop, r->step);

  00004	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  00008	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  0000c	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00010	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LIDALBJO@?$CIO?$CIOOO?$CJ?$CJ?$AA@
  0001b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00020	e8 00 00 00 00	 call	 Py_BuildValue

; 834  : }

  00025	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00029	c3		 ret	 0
range_reduce ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT rangeiter_next
_TEXT	SEGMENT
r$ = 8
rangeiter_next PROC					; COMDAT

; 951  :     if (r->index < r->len)

  00000	8b 41 60	 mov	 eax, DWORD PTR [rcx+96]
  00003	48 8b d1	 mov	 rdx, rcx
  00006	3b 41 6c	 cmp	 eax, DWORD PTR [rcx+108]
  00009	7d 13		 jge	 SHORT $LN1@rangeiter_

; 952  :         /* cast to unsigned to avoid possible signed overflow
; 953  :            in intermediate calculations. */
; 954  :         return PyLong_FromLong((long)(r->start +
; 955  :                                       (unsigned long)(r->index++) * r->step));

  0000b	8b 49 68	 mov	 ecx, DWORD PTR [rcx+104]
  0000e	0f af c8	 imul	 ecx, eax
  00011	03 4a 64	 add	 ecx, DWORD PTR [rdx+100]
  00014	ff c0		 inc	 eax
  00016	89 42 60	 mov	 DWORD PTR [rdx+96], eax

; 957  : }

  00019	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN1@rangeiter_:

; 956  :     return NULL;

  0001e	33 c0		 xor	 eax, eax

; 957  : }

  00020	c3		 ret	 0
rangeiter_next ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT rangeiter_len
_TEXT	SEGMENT
r$ = 8
rangeiter_len PROC					; COMDAT

; 961  : {

  00000	48 8b c1	 mov	 rax, rcx

; 962  :     return PyLong_FromLong(r->len - r->index);

  00003	8b 49 6c	 mov	 ecx, DWORD PTR [rcx+108]
  00006	2b 48 60	 sub	 ecx, DWORD PTR [rax+96]

; 963  : }

  00009	e9 00 00 00 00	 jmp	 PyLong_FromLong
rangeiter_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@	; `string'
EXTRN	PyLong_AsLong:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$rangeiter_setstate DD imagerel rangeiter_setstate
	DD	imagerel rangeiter_setstate+153
	DD	imagerel $unwind$rangeiter_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rangeiter_setstate DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@ DB 'index out of range', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\rangeobject.c
CONST	ENDS
;	COMDAT rangeiter_setstate
_TEXT	SEGMENT
r$ = 64
state$ = 72
rangeiter_setstate PROC					; COMDAT

; 999  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 1000 :     long index = PyLong_AsLong(state);

  00009	48 8b ca	 mov	 rcx, rdx
  0000c	e8 00 00 00 00	 call	 PyLong_AsLong

; 1001 :     if (index == -1 && PyErr_Occurred())

  00011	83 f8 ff	 cmp	 eax, -1
  00014	75 25		 jne	 SHORT $LN3@rangeiter_@2
  00016	e8 00 00 00 00	 call	 PyErr_Occurred
  0001b	48 85 c0	 test	 rax, rax
  0001e	75 13		 jne	 SHORT $LN10@rangeiter_@2
$LN1@rangeiter_@2:

; 1004 :         PyErr_SetString(PyExc_ValueError, "index out of range");

  00020	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@
  0002e	e8 00 00 00 00	 call	 PyErr_SetString
$LN10@rangeiter_@2:

; 1005 :         return NULL;

  00033	33 c0		 xor	 eax, eax

; 1009 : }

  00035	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00039	5b		 pop	 rbx
  0003a	c3		 ret	 0
$LN3@rangeiter_@2:

; 1002 :         return NULL;
; 1003 :     if (index < 0 || index >= r->len) {

  0003b	85 c0		 test	 eax, eax
  0003d	78 e1		 js	 SHORT $LN1@rangeiter_@2
  0003f	3b 43 6c	 cmp	 eax, DWORD PTR [rbx+108]
  00042	7d dc		 jge	 SHORT $LN1@rangeiter_@2

; 1006 :     }
; 1007 :     r->index = index;

  00044	89 43 60	 mov	 DWORD PTR [rbx+96], eax

; 1008 :     Py_RETURN_NONE;

  00047	e8 00 00 00 00	 call	 _Py_PXCTX
  0004c	85 c0		 test	 eax, eax
  0004e	75 3c		 jne	 SHORT $LN7@rangeiter_@2
  00050	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00065	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00073	e8 00 00 00 00	 call	 _PyParallel_Guard
  00078	85 c0		 test	 eax, eax
  0007a	75 09		 jne	 SHORT $LN6@rangeiter_@2
  0007c	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00083	74 07		 je	 SHORT $LN7@rangeiter_@2
$LN6@rangeiter_@2:
  00085	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@rangeiter_@2:
  0008c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1009 : }

  00093	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00097	5b		 pop	 rbx
  00098	c3		 ret	 0
rangeiter_setstate ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT get_len_of_range
_TEXT	SEGMENT
lo$ = 8
hi$ = 16
step$ = 24
get_len_of_range PROC					; COMDAT

; 1073 : {

  00000	8b c2		 mov	 eax, edx

; 1074 :     /* -------------------------------------------------------------
; 1075 :     If step > 0 and lo >= hi, or step < 0 and lo <= hi, the range is empty.
; 1076 :     Else for step > 0, if n values are in the range, the last one is
; 1077 :     lo + (n-1)*step, which must be <= hi-1.  Rearranging,
; 1078 :     n <= (hi - lo - 1)/step + 1, so taking the floor of the RHS gives
; 1079 :     the proper value.  Since lo < hi in this case, hi-lo-1 >= 0, so
; 1080 :     the RHS is non-negative and so truncation is the same as the
; 1081 :     floor.  Letting M be the largest positive long, the worst case
; 1082 :     for the RHS numerator is hi=M, lo=-M-1, and then
; 1083 :     hi-lo-1 = M-(-M-1)-1 = 2*M.  Therefore unsigned long has enough
; 1084 :     precision to compute the RHS exactly.  The analysis for step < 0
; 1085 :     is similar.
; 1086 :     ---------------------------------------------------------------*/
; 1087 :     assert(step != 0);
; 1088 :     if (step > 0 && lo < hi)

  00002	45 85 c0	 test	 r8d, r8d
  00005	7e 13		 jle	 SHORT $LN7@get_len_of
  00007	3b ca		 cmp	 ecx, edx
  00009	7d 0c		 jge	 SHORT $LN4@get_len_of

; 1089 :         return 1UL + (hi - 1UL - lo) / step;

  0000b	2b c1		 sub	 eax, ecx
  0000d	33 d2		 xor	 edx, edx
  0000f	ff c8		 dec	 eax
  00011	41 f7 f0	 div	 r8d
  00014	ff c0		 inc	 eax

; 1094 : }

  00016	c3		 ret	 0
$LN4@get_len_of:

; 1090 :     else if (step < 0 && lo > hi)

  00017	45 85 c0	 test	 r8d, r8d
$LN7@get_len_of:
  0001a	79 14		 jns	 SHORT $LN2@get_len_of
  0001c	3b ca		 cmp	 ecx, edx
  0001e	7e 10		 jle	 SHORT $LN2@get_len_of

; 1091 :         return 1UL + (lo - 1UL - hi) / (0UL - step);

  00020	2b ca		 sub	 ecx, edx
  00022	41 f7 d8	 neg	 r8d
  00025	33 d2		 xor	 edx, edx
  00027	8d 41 ff	 lea	 eax, DWORD PTR [rcx-1]
  0002a	41 f7 f0	 div	 r8d
  0002d	ff c0		 inc	 eax

; 1094 : }

  0002f	c3		 ret	 0
$LN2@get_len_of:

; 1092 :     else
; 1093 :         return 0UL;

  00030	33 c0		 xor	 eax, eax

; 1094 : }

  00032	c3		 ret	 0
get_len_of_range ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@GNIMPPAA@range?5too?5large?5to?5represent?5as?5@ ; `string'
EXTRN	PyExc_OverflowError:QWORD
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$fast_range_iter DD imagerel fast_range_iter
	DD	imagerel fast_range_iter+159
	DD	imagerel $unwind$fast_range_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fast_range_iter DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0DB@GNIMPPAA@range?5too?5large?5to?5represent?5as?5@
CONST	SEGMENT
??_C@_0DB@GNIMPPAA@range?5too?5large?5to?5represent?5as?5@ DB 'range too '
	DB	'large to represent as a range_iterator', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT fast_range_iter
_TEXT	SEGMENT
start$ = 48
stop$ = 56
step$ = 64
fast_range_iter PROC					; COMDAT

; 1101 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b d8	 mov	 ebx, r8d
  00012	8b f2		 mov	 esi, edx
  00014	8b f9		 mov	 edi, ecx

; 1102 :     rangeiterobject *it = PyObject_New(rangeiterobject, &PyRangeIter_Type);

  00016	e8 00 00 00 00	 call	 _Py_PXCTX
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyRangeIter_Type
  00022	85 c0		 test	 eax, eax
  00024	74 07		 je	 SHORT $LN5@fast_range
  00026	e8 00 00 00 00	 call	 _PxObject_New
  0002b	eb 05		 jmp	 SHORT $LN7@fast_range
$LN5@fast_range:
  0002d	e8 00 00 00 00	 call	 _PyObject_New
$LN7@fast_range:
  00032	4c 8b d8	 mov	 r11, rax

; 1103 :     unsigned long ulen;
; 1104 :     if (it == NULL)

  00035	48 85 c0	 test	 rax, rax

; 1105 :         return NULL;

  00038	74 34		 je	 SHORT $LN8@fast_range

; 1106 :     it->start = start;
; 1107 :     it->step = step;
; 1108 :     ulen = get_len_of_range(start, stop, step);

  0003a	44 8b c3	 mov	 r8d, ebx
  0003d	8b d6		 mov	 edx, esi
  0003f	8b cf		 mov	 ecx, edi
  00041	89 78 64	 mov	 DWORD PTR [rax+100], edi
  00044	89 58 68	 mov	 DWORD PTR [rax+104], ebx
  00047	e8 00 00 00 00	 call	 get_len_of_range

; 1109 :     if (ulen > (unsigned long)LONG_MAX) {

  0004c	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00051	76 2d		 jbe	 SHORT $LN1@fast_range

; 1110 :         Py_DECREF(it);

  00053	49 8b cb	 mov	 rcx, r11
  00056	e8 00 00 00 00	 call	 _Py_DecRef

; 1111 :         PyErr_SetString(PyExc_OverflowError,
; 1112 :                         "range too large to represent as a range_iterator");

  0005b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@GNIMPPAA@range?5too?5large?5to?5represent?5as?5@
  00069	e8 00 00 00 00	 call	 PyErr_SetString
$LN8@fast_range:

; 1113 :         return NULL;

  0006e	33 c0		 xor	 eax, eax

; 1114 :     }
; 1115 :     it->len = (long)ulen;
; 1116 :     it->index = 0;
; 1117 :     return (PyObject *)it;
; 1118 : }

  00070	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00075	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0007a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007e	5f		 pop	 rdi
  0007f	c3		 ret	 0
$LN1@fast_range:
  00080	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00085	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0008a	41 89 43 6c	 mov	 DWORD PTR [r11+108], eax
  0008e	49 8b c3	 mov	 rax, r11
  00091	41 c7 43 60 00
	00 00 00	 mov	 DWORD PTR [r11+96], 0
  00099	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009d	5f		 pop	 rdi
  0009e	c3		 ret	 0
fast_range_iter ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@BHGBOPIB@lll?$DLrangeiter?$CI?$CJ?5requires?53?5int?5a@ ; `string'
PUBLIC	??_C@_0M@NOEHEHAK@rangeiter?$CI?$CJ?$AA@	; `string'
EXTRN	PyArg_ParseTuple:PROC
EXTRN	_PyArg_NoKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$rangeiter_new DD imagerel rangeiter_new
	DD	imagerel rangeiter_new+99
	DD	imagerel $unwind$rangeiter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rangeiter_new DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_0CJ@BHGBOPIB@lll?$DLrangeiter?$CI?$CJ?5requires?53?5int?5a@
CONST	SEGMENT
??_C@_0CJ@BHGBOPIB@lll?$DLrangeiter?$CI?$CJ?5requires?53?5int?5a@ DB 'lll'
	DB	';rangeiter() requires 3 int arguments', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NOEHEHAK@rangeiter?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0M@NOEHEHAK@rangeiter?$CI?$CJ?$AA@ DB 'rangeiter()', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT rangeiter_new
_TEXT	SEGMENT
stop$ = 48
start$ = 52
type$ = 80
args$ = 88
kw$ = 96
step$ = 104
rangeiter_new PROC					; COMDAT

; 1122 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b da	 mov	 rbx, rdx

; 1123 :     long start, stop, step;
; 1124 : 
; 1125 :     if (!_PyArg_NoKeywords("rangeiter()", kw))

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@NOEHEHAK@rangeiter?$CI?$CJ?$AA@
  00010	49 8b d0	 mov	 rdx, r8
  00013	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00018	85 c0		 test	 eax, eax
  0001a	75 08		 jne	 SHORT $LN2@rangeiter_@3
$LN5@rangeiter_@3:

; 1126 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 1133 : }

  0001e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00022	5b		 pop	 rbx
  00023	c3		 ret	 0
$LN2@rangeiter_@3:

; 1127 : 
; 1128 :     if (!PyArg_ParseTuple(args, "lll;rangeiter() requires 3 int arguments",
; 1129 :                           &start, &stop, &step))

  00024	48 8d 44 24 68	 lea	 rax, QWORD PTR step$[rsp]
  00029	4c 8d 4c 24 30	 lea	 r9, QWORD PTR stop$[rsp]
  0002e	4c 8d 44 24 34	 lea	 r8, QWORD PTR start$[rsp]
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@BHGBOPIB@lll?$DLrangeiter?$CI?$CJ?5requires?53?5int?5a@
  0003a	48 8b cb	 mov	 rcx, rbx
  0003d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00042	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00047	85 c0		 test	 eax, eax

; 1130 :         return NULL;

  00049	74 d1		 je	 SHORT $LN5@rangeiter_@3

; 1131 : 
; 1132 :     return fast_range_iter(start, stop, step);

  0004b	44 8b 44 24 68	 mov	 r8d, DWORD PTR step$[rsp]
  00050	8b 54 24 30	 mov	 edx, DWORD PTR stop$[rsp]
  00054	8b 4c 24 34	 mov	 ecx, DWORD PTR start$[rsp]
  00058	e8 00 00 00 00	 call	 fast_range_iter

; 1133 : }

  0005d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00061	5b		 pop	 rbx
  00062	c3		 ret	 0
rangeiter_new ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT longrangeiter_len
_TEXT	SEGMENT
r$ = 8
no_args$ = 16
longrangeiter_len PROC					; COMDAT

; 1146 :     return PyNumber_Subtract(r->len, r->index);

  00000	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00004	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]

; 1147 : }

  00008	e9 00 00 00 00	 jmp	 PyNumber_Subtract
longrangeiter_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@OPDDFHIK@longrangeiter_setstate?$AA@	; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$longrangeiter_setstate DD imagerel longrangeiter_setstate
	DD	imagerel longrangeiter_setstate+10
	DD	imagerel $unwind$longrangeiter_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$longrangeiter_setstate DD imagerel longrangeiter_setstate+10
	DD	imagerel longrangeiter_setstate+203
	DD	imagerel $chain$1$longrangeiter_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$longrangeiter_setstate DD imagerel longrangeiter_setstate+203
	DD	imagerel longrangeiter_setstate+267
	DD	imagerel $chain$2$longrangeiter_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$longrangeiter_setstate DD imagerel longrangeiter_setstate+267
	DD	imagerel longrangeiter_setstate+352
	DD	imagerel $chain$3$longrangeiter_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$longrangeiter_setstate DD 021H
	DD	imagerel longrangeiter_setstate
	DD	imagerel longrangeiter_setstate+10
	DD	imagerel $unwind$longrangeiter_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$longrangeiter_setstate DD 020021H
	DD	097400H
	DD	imagerel longrangeiter_setstate
	DD	imagerel longrangeiter_setstate+10
	DD	imagerel $unwind$longrangeiter_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$longrangeiter_setstate DD 040a21H
	DD	09740aH
	DD	086405H
	DD	imagerel longrangeiter_setstate
	DD	imagerel longrangeiter_setstate+10
	DD	imagerel $unwind$longrangeiter_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$longrangeiter_setstate DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BH@OPDDFHIK@longrangeiter_setstate?$AA@
CONST	SEGMENT
??_C@_0BH@OPDDFHIK@longrangeiter_setstate?$AA@ DB 'longrangeiter_setstate'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\rangeobject.c
CONST	ENDS
;	COMDAT longrangeiter_setstate
_TEXT	SEGMENT
r$ = 64
state$ = 72
longrangeiter_setstate PROC				; COMDAT

; 1180 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1181 :     Py_CLEAR(r->index);

  00006	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  0000a	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0000f	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00014	48 8b fa	 mov	 rdi, rdx
  00017	48 8b f1	 mov	 rsi, rcx
  0001a	4d 85 c9	 test	 r9, r9
  0001d	0f 84 96 00 00
	00		 je	 $LN3@longrangei
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@OPDDFHIK@longrangeiter_setstate?$AA@
  00031	41 b8 9d 04 00
	00		 mov	 r8d, 1181		; 0000049dH
  00037	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00044	85 c0		 test	 eax, eax
  00046	75 71		 jne	 SHORT $LN3@longrangei
  00048	48 8b 5e 60	 mov	 rbx, QWORD PTR [rsi+96]
  0004c	48 c7 46 60 00
	00 00 00	 mov	 QWORD PTR [rsi+96], 0
  00054	e8 00 00 00 00	 call	 _Py_PXCTX
  00059	85 c0		 test	 eax, eax
  0005b	75 5c		 jne	 SHORT $LN3@longrangei
  0005d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00061	a8 20		 test	 al, 32			; 00000020H
  00063	75 4c		 jne	 SHORT $LN11@longrangei
  00065	84 c0		 test	 al, al
  00067	78 48		 js	 SHORT $LN11@longrangei
  00069	a8 02		 test	 al, 2
  0006b	75 4c		 jne	 SHORT $LN3@longrangei
  0006d	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00071	75 46		 jne	 SHORT $LN3@longrangei
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00081	4c 8b cb	 mov	 r9, rbx
  00084	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0008a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00092	e8 00 00 00 00	 call	 _PyParallel_Guard
  00097	48 8b cb	 mov	 rcx, rbx
  0009a	85 c0		 test	 eax, eax
  0009c	74 07		 je	 SHORT $LN16@longrangei
  0009e	e8 00 00 00 00	 call	 _Px_Dealloc
  000a3	eb 14		 jmp	 SHORT $LN3@longrangei
$LN16@longrangei:
  000a5	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000a9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000af	eb 08		 jmp	 SHORT $LN3@longrangei
$LN11@longrangei:
  000b1	48 8b cb	 mov	 rcx, rbx
  000b4	e8 00 00 00 00	 call	 Px_DecRef
$LN3@longrangei:

; 1182 :     r->index = state;

  000b9	48 89 7e 60	 mov	 QWORD PTR [rsi+96], rdi

; 1183 :     Py_INCREF(r->index);

  000bd	e8 00 00 00 00	 call	 _Py_PXCTX
  000c2	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000c7	85 c0		 test	 eax, eax
  000c9	75 32		 jne	 SHORT $LN19@longrangei
  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000d9	4c 8b cf	 mov	 r9, rdi
  000dc	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000e2	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000ea	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ef	85 c0		 test	 eax, eax
  000f1	75 06		 jne	 SHORT $LN18@longrangei
  000f3	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000f7	74 04		 je	 SHORT $LN19@longrangei
$LN18@longrangei:
  000f9	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN19@longrangei:

; 1184 :     Py_RETURN_NONE;

  000fd	e8 00 00 00 00	 call	 _Py_PXCTX
  00102	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00107	85 c0		 test	 eax, eax
  00109	75 48		 jne	 SHORT $LN26@longrangei
  0010b	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00112	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00120	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00126	4c 8b cb	 mov	 r9, rbx
  00129	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00131	e8 00 00 00 00	 call	 _PyParallel_Guard
  00136	85 c0		 test	 eax, eax
  00138	75 09		 jne	 SHORT $LN22@longrangei
  0013a	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00141	74 07		 je	 SHORT $LN28@longrangei
$LN22@longrangei:
  00143	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN28@longrangei:
  0014a	48 8b c3	 mov	 rax, rbx

; 1185 : }

  0014d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00151	5b		 pop	 rbx
  00152	c3		 ret	 0
$LN26@longrangei:

; 1184 :     Py_RETURN_NONE;

  00153	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1185 : }

  0015a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0015e	5b		 pop	 rbx
  0015f	c3		 ret	 0
longrangeiter_setstate ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$longrangeiter_dealloc DD imagerel longrangeiter_dealloc
	DD	imagerel longrangeiter_dealloc+507
	DD	imagerel $unwind$longrangeiter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$longrangeiter_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\rangeobject.c
xdata	ENDS
;	COMDAT longrangeiter_dealloc
_TEXT	SEGMENT
r$ = 64
longrangeiter_dealloc PROC				; COMDAT

; 1199 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1200 :     Py_XDECREF(r->index);

  0000a	48 8b 59 60	 mov	 rbx, QWORD PTR [rcx+96]
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	48 85 db	 test	 rbx, rbx
  00014	74 65		 je	 SHORT $LN15@longrangei@2
  00016	e8 00 00 00 00	 call	 _Py_PXCTX
  0001b	85 c0		 test	 eax, eax
  0001d	75 5c		 jne	 SHORT $LN15@longrangei@2
  0001f	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00023	a8 20		 test	 al, 32			; 00000020H
  00025	75 4c		 jne	 SHORT $LN23@longrangei@2
  00027	84 c0		 test	 al, al
  00029	78 48		 js	 SHORT $LN23@longrangei@2
  0002b	a8 02		 test	 al, 2
  0002d	75 4c		 jne	 SHORT $LN15@longrangei@2
  0002f	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00033	75 46		 jne	 SHORT $LN15@longrangei@2
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00043	4c 8b cb	 mov	 r9, rbx
  00046	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	48 8b cb	 mov	 rcx, rbx
  0005c	85 c0		 test	 eax, eax
  0005e	74 07		 je	 SHORT $LN28@longrangei@2
  00060	e8 00 00 00 00	 call	 _Px_Dealloc
  00065	eb 14		 jmp	 SHORT $LN15@longrangei@2
$LN28@longrangei@2:
  00067	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0006b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00071	eb 08		 jmp	 SHORT $LN15@longrangei@2
$LN23@longrangei@2:
  00073	48 8b cb	 mov	 rcx, rbx
  00076	e8 00 00 00 00	 call	 Px_DecRef
$LN15@longrangei@2:

; 1201 :     Py_XDECREF(r->start);

  0007b	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  0007f	48 85 db	 test	 rbx, rbx
  00082	74 65		 je	 SHORT $LN11@longrangei@2
  00084	e8 00 00 00 00	 call	 _Py_PXCTX
  00089	85 c0		 test	 eax, eax
  0008b	75 5c		 jne	 SHORT $LN11@longrangei@2
  0008d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00091	a8 20		 test	 al, 32			; 00000020H
  00093	75 4c		 jne	 SHORT $LN34@longrangei@2
  00095	84 c0		 test	 al, al
  00097	78 48		 js	 SHORT $LN34@longrangei@2
  00099	a8 02		 test	 al, 2
  0009b	75 4c		 jne	 SHORT $LN11@longrangei@2
  0009d	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a1	75 46		 jne	 SHORT $LN11@longrangei@2
  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b1	4c 8b cb	 mov	 r9, rbx
  000b4	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000ba	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c2	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c7	48 8b cb	 mov	 rcx, rbx
  000ca	85 c0		 test	 eax, eax
  000cc	74 07		 je	 SHORT $LN39@longrangei@2
  000ce	e8 00 00 00 00	 call	 _Px_Dealloc
  000d3	eb 14		 jmp	 SHORT $LN11@longrangei@2
$LN39@longrangei@2:
  000d5	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000d9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000df	eb 08		 jmp	 SHORT $LN11@longrangei@2
$LN34@longrangei@2:
  000e1	48 8b cb	 mov	 rcx, rbx
  000e4	e8 00 00 00 00	 call	 Px_DecRef
$LN11@longrangei@2:

; 1202 :     Py_XDECREF(r->step);

  000e9	48 8b 5f 70	 mov	 rbx, QWORD PTR [rdi+112]
  000ed	48 85 db	 test	 rbx, rbx
  000f0	74 65		 je	 SHORT $LN7@longrangei@2
  000f2	e8 00 00 00 00	 call	 _Py_PXCTX
  000f7	85 c0		 test	 eax, eax
  000f9	75 5c		 jne	 SHORT $LN7@longrangei@2
  000fb	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000ff	a8 20		 test	 al, 32			; 00000020H
  00101	75 4c		 jne	 SHORT $LN45@longrangei@2
  00103	84 c0		 test	 al, al
  00105	78 48		 js	 SHORT $LN45@longrangei@2
  00107	a8 02		 test	 al, 2
  00109	75 4c		 jne	 SHORT $LN7@longrangei@2
  0010b	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0010f	75 46		 jne	 SHORT $LN7@longrangei@2
  00111	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00118	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0011f	4c 8b cb	 mov	 r9, rbx
  00122	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00128	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00130	e8 00 00 00 00	 call	 _PyParallel_Guard
  00135	48 8b cb	 mov	 rcx, rbx
  00138	85 c0		 test	 eax, eax
  0013a	74 07		 je	 SHORT $LN50@longrangei@2
  0013c	e8 00 00 00 00	 call	 _Px_Dealloc
  00141	eb 14		 jmp	 SHORT $LN7@longrangei@2
$LN50@longrangei@2:
  00143	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00147	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0014d	eb 08		 jmp	 SHORT $LN7@longrangei@2
$LN45@longrangei@2:
  0014f	48 8b cb	 mov	 rcx, rbx
  00152	e8 00 00 00 00	 call	 Px_DecRef
$LN7@longrangei@2:

; 1203 :     Py_XDECREF(r->len);

  00157	48 8b 5f 78	 mov	 rbx, QWORD PTR [rdi+120]
  0015b	48 85 db	 test	 rbx, rbx
  0015e	0f 84 85 00 00
	00		 je	 $LN3@longrangei@2
  00164	e8 00 00 00 00	 call	 _Py_PXCTX
  00169	85 c0		 test	 eax, eax
  0016b	75 7c		 jne	 SHORT $LN3@longrangei@2
  0016d	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00171	a8 20		 test	 al, 32			; 00000020H
  00173	75 6c		 jne	 SHORT $LN56@longrangei@2
  00175	84 c0		 test	 al, al
  00177	78 68		 js	 SHORT $LN56@longrangei@2
  00179	a8 02		 test	 al, 2
  0017b	75 6c		 jne	 SHORT $LN3@longrangei@2
  0017d	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00181	75 66		 jne	 SHORT $LN3@longrangei@2
  00183	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0018a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00191	4c 8b cb	 mov	 r9, rbx
  00194	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0019a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001a2	e8 00 00 00 00	 call	 _PyParallel_Guard
  001a7	48 8b cb	 mov	 rcx, rbx
  001aa	85 c0		 test	 eax, eax
  001ac	74 17		 je	 SHORT $LN61@longrangei@2
  001ae	e8 00 00 00 00	 call	 _Px_Dealloc

; 1204 :     PyObject_Del(r);

  001b3	48 8b cf	 mov	 rcx, rdi

; 1205 : }

  001b6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001bb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001bf	5f		 pop	 rdi
  001c0	e9 00 00 00 00	 jmp	 PyObject_Free

; 1203 :     Py_XDECREF(r->len);

$LN61@longrangei@2:
  001c5	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001c9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 1204 :     PyObject_Del(r);

  001cf	48 8b cf	 mov	 rcx, rdi

; 1205 : }

  001d2	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001d7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001db	5f		 pop	 rdi
  001dc	e9 00 00 00 00	 jmp	 PyObject_Free

; 1203 :     Py_XDECREF(r->len);

$LN56@longrangei@2:
  001e1	48 8b cb	 mov	 rcx, rbx
  001e4	e8 00 00 00 00	 call	 Px_DecRef
$LN3@longrangei@2:

; 1204 :     PyObject_Del(r);

  001e9	48 8b cf	 mov	 rcx, rdi

; 1205 : }

  001ec	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001f1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001f5	5f		 pop	 rdi
  001f6	e9 00 00 00 00	 jmp	 PyObject_Free
longrangeiter_dealloc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$longrangeiter_next DD imagerel longrangeiter_next
	DD	imagerel longrangeiter_next+43
	DD	imagerel $unwind$longrangeiter_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$longrangeiter_next DD imagerel longrangeiter_next+43
	DD	imagerel longrangeiter_next+72
	DD	imagerel $chain$0$longrangeiter_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$longrangeiter_next DD imagerel longrangeiter_next+72
	DD	imagerel longrangeiter_next+123
	DD	imagerel $chain$3$longrangeiter_next
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$longrangeiter_next DD imagerel longrangeiter_next+123
	DD	imagerel longrangeiter_next+236
	DD	imagerel $chain$6$longrangeiter_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$longrangeiter_next DD 060d21H
	DD	06540dH
	DD	087400H
	DD	076400H
	DD	imagerel longrangeiter_next
	DD	imagerel longrangeiter_next+43
	DD	imagerel $unwind$longrangeiter_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$longrangeiter_next DD 040c21H
	DD	08740cH
	DD	076400H
	DD	imagerel longrangeiter_next
	DD	imagerel longrangeiter_next+43
	DD	imagerel $unwind$longrangeiter_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$longrangeiter_next DD 020521H
	DD	076405H
	DD	imagerel longrangeiter_next
	DD	imagerel longrangeiter_next+43
	DD	imagerel $unwind$longrangeiter_next
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$longrangeiter_next DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT longrangeiter_next
_TEXT	SEGMENT
r$ = 48
longrangeiter_next PROC					; COMDAT

; 1209 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1210 :     PyObject *one, *product, *new_index, *result;
; 1211 :     if (PyObject_RichCompareBool(r->index, r->len, Py_LT) != 1)

  00006	48 8b 51 78	 mov	 rdx, QWORD PTR [rcx+120]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00011	45 33 c0	 xor	 r8d, r8d
  00014	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00019	83 f8 01	 cmp	 eax, 1
  0001c	74 08		 je	 SHORT $LN6@longrangei@3

; 1212 :         return NULL;

  0001e	33 c0		 xor	 eax, eax

; 1240 : }

  00020	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00024	5b		 pop	 rbx
  00025	c3		 ret	 0
$LN6@longrangei@3:

; 1213 : 
; 1214 :     one = PyLong_FromLong(1);

  00026	b9 01 00 00 00	 mov	 ecx, 1
  0002b	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  00030	e8 00 00 00 00	 call	 PyLong_FromLong
  00035	48 8b f0	 mov	 rsi, rax

; 1215 :     if (!one)

  00038	48 85 c0	 test	 rax, rax
  0003b	75 0b		 jne	 SHORT $LN5@longrangei@3
  0003d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]

; 1240 : }

  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5b		 pop	 rbx
  00047	c3		 ret	 0
$LN5@longrangei@3:

; 1216 :         return NULL;
; 1217 : 
; 1218 :     new_index = PyNumber_Add(r->index, one);

  00048	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0004c	48 8b d0	 mov	 rdx, rax
  0004f	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00054	e8 00 00 00 00	 call	 PyNumber_Add

; 1219 :     Py_DECREF(one);

  00059	48 8b ce	 mov	 rcx, rsi
  0005c	48 8b f8	 mov	 rdi, rax
  0005f	e8 00 00 00 00	 call	 _Py_DecRef

; 1220 :     if (!new_index)

  00064	48 85 ff	 test	 rdi, rdi
  00067	75 12		 jne	 SHORT $LN4@longrangei@3

; 1221 :         return NULL;

  00069	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  0006e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00073	33 c0		 xor	 eax, eax

; 1240 : }

  00075	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
$LN4@longrangei@3:

; 1222 : 
; 1223 :     product = PyNumber_Multiply(r->index, r->step);

  0007b	48 8b 53 70	 mov	 rdx, QWORD PTR [rbx+112]
  0007f	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00083	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  00088	e8 00 00 00 00	 call	 PyNumber_Multiply
  0008d	48 8b e8	 mov	 rbp, rax

; 1224 :     if (!product) {

  00090	48 85 c0	 test	 rax, rax
  00093	75 0c		 jne	 SHORT $LN3@longrangei@3

; 1225 :         Py_DECREF(new_index);

  00095	48 8b cf	 mov	 rcx, rdi
  00098	e8 00 00 00 00	 call	 _Py_DecRef

; 1226 :         return NULL;

  0009d	33 c0		 xor	 eax, eax
  0009f	eb 36		 jmp	 SHORT $LN11@longrangei@3
$LN3@longrangei@3:

; 1227 :     }
; 1228 : 
; 1229 :     result = PyNumber_Add(r->start, product);

  000a1	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  000a5	48 8b d0	 mov	 rdx, rax
  000a8	e8 00 00 00 00	 call	 PyNumber_Add

; 1230 :     Py_DECREF(product);

  000ad	48 8b cd	 mov	 rcx, rbp
  000b0	48 8b f0	 mov	 rsi, rax
  000b3	e8 00 00 00 00	 call	 _Py_DecRef

; 1231 :     if (result) {

  000b8	48 85 f6	 test	 rsi, rsi
  000bb	74 0f		 je	 SHORT $LN2@longrangei@3

; 1232 :         Py_DECREF(r->index);

  000bd	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000c1	e8 00 00 00 00	 call	 _Py_DecRef

; 1233 :         r->index = new_index;

  000c6	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi

; 1234 :     }
; 1235 :     else {

  000ca	eb 08		 jmp	 SHORT $LN1@longrangei@3
$LN2@longrangei@3:

; 1236 :         Py_DECREF(new_index);

  000cc	48 8b cf	 mov	 rcx, rdi
  000cf	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@longrangei@3:

; 1237 :     }
; 1238 : 
; 1239 :     return result;

  000d4	48 8b c6	 mov	 rax, rsi
$LN11@longrangei@3:
  000d7	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  000dc	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000e1	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]

; 1240 : }

  000e6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ea	5b		 pop	 rbx
  000eb	c3		 ret	 0
longrangeiter_next ENDP
_TEXT	ENDS
EXTRN	PyErr_ExceptionMatches:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$range_iter DD imagerel range_iter
	DD	imagerel range_iter+455
	DD	imagerel $unwind$range_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_iter DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\rangeobject.c
xdata	ENDS
;	COMDAT range_iter
_TEXT	SEGMENT
seq$ = 64
range_iter PROC						; COMDAT

; 1277 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b f9	 mov	 rdi, rcx

; 1278 :     rangeobject *r = (rangeobject *)seq;
; 1279 :     longrangeiterobject *it;
; 1280 :     long lstart, lstop, lstep;
; 1281 :     PyObject *int_it;
; 1282 : 
; 1283 :     assert(PyRange_Check(seq));
; 1284 : 
; 1285 :     /* If all three fields and the length convert to long, use the int
; 1286 :      * version */
; 1287 :     lstart = PyLong_AsLong(r->start);

  00017	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0001b	e8 00 00 00 00	 call	 PyLong_AsLong
  00020	8b e8		 mov	 ebp, eax

; 1288 :     if (lstart == -1 && PyErr_Occurred()) {

  00022	83 f8 ff	 cmp	 eax, -1
  00025	75 0a		 jne	 SHORT $LN6@range_iter
  00027	e8 00 00 00 00	 call	 PyErr_Occurred
  0002c	48 85 c0	 test	 rax, rax

; 1289 :         PyErr_Clear();
; 1290 :         goto long_range;

  0002f	75 60		 jne	 SHORT $LN23@range_iter
$LN6@range_iter:

; 1291 :     }
; 1292 :     lstop = PyLong_AsLong(r->stop);

  00031	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  00035	e8 00 00 00 00	 call	 PyLong_AsLong
  0003a	8b d8		 mov	 ebx, eax

; 1293 :     if (lstop == -1 && PyErr_Occurred()) {

  0003c	83 f8 ff	 cmp	 eax, -1
  0003f	75 0a		 jne	 SHORT $LN5@range_iter
  00041	e8 00 00 00 00	 call	 PyErr_Occurred
  00046	48 85 c0	 test	 rax, rax

; 1294 :         PyErr_Clear();
; 1295 :         goto long_range;

  00049	75 46		 jne	 SHORT $LN23@range_iter
$LN5@range_iter:

; 1296 :     }
; 1297 :     lstep = PyLong_AsLong(r->step);

  0004b	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  0004f	e8 00 00 00 00	 call	 PyLong_AsLong
  00054	8b f0		 mov	 esi, eax

; 1298 :     if (lstep == -1 && PyErr_Occurred()) {

  00056	83 f8 ff	 cmp	 eax, -1
  00059	75 0a		 jne	 SHORT $LN4@range_iter
  0005b	e8 00 00 00 00	 call	 PyErr_Occurred
  00060	48 85 c0	 test	 rax, rax

; 1299 :         PyErr_Clear();
; 1300 :         goto long_range;

  00063	75 2c		 jne	 SHORT $LN23@range_iter
$LN4@range_iter:

; 1301 :     }
; 1302 :     int_it = fast_range_iter(lstart, lstop, lstep);

  00065	44 8b c6	 mov	 r8d, esi
  00068	8b d3		 mov	 edx, ebx
  0006a	8b cd		 mov	 ecx, ebp
  0006c	e8 00 00 00 00	 call	 fast_range_iter
  00071	48 8b d8	 mov	 rbx, rax

; 1303 :     if (int_it == NULL && PyErr_ExceptionMatches(PyExc_OverflowError)) {

  00074	48 85 c0	 test	 rax, rax
  00077	0f 85 32 01 00
	00		 jne	 $LN3@range_iter
  0007d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00084	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00089	85 c0		 test	 eax, eax
  0008b	0f 84 1e 01 00
	00		 je	 $LN3@range_iter
$LN23@range_iter:

; 1304 :         PyErr_Clear();

  00091	e8 00 00 00 00	 call	 PyErr_Clear
$long_range$21348:

; 1308 : 
; 1309 :   long_range:
; 1310 :     it = PyObject_New(longrangeiterobject, &PyLongRangeIter_Type);

  00096	e8 00 00 00 00	 call	 _Py_PXCTX
  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyLongRangeIter_Type
  000a2	85 c0		 test	 eax, eax
  000a4	74 07		 je	 SHORT $LN9@range_iter
  000a6	e8 00 00 00 00	 call	 _PxObject_New
  000ab	eb 05		 jmp	 SHORT $LN24@range_iter
$LN9@range_iter:
  000ad	e8 00 00 00 00	 call	 _PyObject_New
$LN24@range_iter:
  000b2	48 8b d8	 mov	 rbx, rax

; 1311 :     if (it == NULL)

  000b5	48 85 c0	 test	 rax, rax

; 1312 :         return NULL;

  000b8	0f 84 ed 00 00
	00		 je	 $LN25@range_iter

; 1313 : 
; 1314 :     /* Do all initialization here, so we can DECREF on failure. */
; 1315 :     it->start = r->start;

  000be	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  000c2	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 1316 :     it->step = r->step;

  000c6	48 8b 47 70	 mov	 rax, QWORD PTR [rdi+112]
  000ca	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 1317 :     it->len = r->length;

  000ce	48 8b 47 78	 mov	 rax, QWORD PTR [rdi+120]

; 1318 :     Py_INCREF(it->start);

  000d2	48 8b 7b 68	 mov	 rdi, QWORD PTR [rbx+104]
  000d6	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax
  000da	e8 00 00 00 00	 call	 _Py_PXCTX
  000df	85 c0		 test	 eax, eax
  000e1	75 32		 jne	 SHORT $LN12@range_iter
  000e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000f1	4c 8b cf	 mov	 r9, rdi
  000f4	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000fa	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00102	e8 00 00 00 00	 call	 _PyParallel_Guard
  00107	85 c0		 test	 eax, eax
  00109	75 06		 jne	 SHORT $LN11@range_iter
  0010b	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0010f	74 04		 je	 SHORT $LN12@range_iter
$LN11@range_iter:
  00111	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN12@range_iter:

; 1319 :     Py_INCREF(it->step);

  00115	48 8b 7b 70	 mov	 rdi, QWORD PTR [rbx+112]
  00119	e8 00 00 00 00	 call	 _Py_PXCTX
  0011e	85 c0		 test	 eax, eax
  00120	75 32		 jne	 SHORT $LN16@range_iter
  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00129	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00130	4c 8b cf	 mov	 r9, rdi
  00133	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00139	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00141	e8 00 00 00 00	 call	 _PyParallel_Guard
  00146	85 c0		 test	 eax, eax
  00148	75 06		 jne	 SHORT $LN15@range_iter
  0014a	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0014e	74 04		 je	 SHORT $LN16@range_iter
$LN15@range_iter:
  00150	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN16@range_iter:

; 1320 :     Py_INCREF(it->len);

  00154	48 8b 7b 78	 mov	 rdi, QWORD PTR [rbx+120]
  00158	e8 00 00 00 00	 call	 _Py_PXCTX
  0015d	85 c0		 test	 eax, eax
  0015f	75 32		 jne	 SHORT $LN20@range_iter
  00161	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00168	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0016f	4c 8b cf	 mov	 r9, rdi
  00172	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00178	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00180	e8 00 00 00 00	 call	 _PyParallel_Guard
  00185	85 c0		 test	 eax, eax
  00187	75 06		 jne	 SHORT $LN19@range_iter
  00189	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0018d	74 04		 je	 SHORT $LN20@range_iter
$LN19@range_iter:
  0018f	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN20@range_iter:

; 1321 : 
; 1322 :     it->index = PyLong_FromLong(0);

  00193	33 c9		 xor	 ecx, ecx
  00195	e8 00 00 00 00	 call	 PyLong_FromLong
  0019a	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 1323 :     if (!it->index)

  0019e	48 85 c0	 test	 rax, rax
  001a1	75 0c		 jne	 SHORT $LN3@range_iter

; 1324 :         goto create_failure;
; 1325 : 
; 1326 :     return (PyObject *)it;
; 1327 : 
; 1328 : create_failure:
; 1329 :     Py_DECREF(it);

  001a3	48 8b cb	 mov	 rcx, rbx
$create_failure$21363:
  001a6	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@range_iter:

; 1330 :     return NULL;

  001ab	33 c0		 xor	 eax, eax
  001ad	eb 03		 jmp	 SHORT $LN7@range_iter
$LN3@range_iter:

; 1305 :         goto long_range;
; 1306 :     }
; 1307 :     return (PyObject *)int_it;

  001af	48 8b c3	 mov	 rax, rbx
$LN7@range_iter:

; 1331 : }

  001b2	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001b7	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  001bc	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  001c1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001c5	5f		 pop	 rdi
  001c6	c3		 ret	 0
range_iter ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$range_reverse DD imagerel range_reverse
	DD	imagerel range_reverse+300
	DD	imagerel $unwind$range_reverse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$range_reverse DD imagerel range_reverse+300
	DD	imagerel range_reverse+460
	DD	imagerel $chain$0$range_reverse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$range_reverse DD imagerel range_reverse+460
	DD	imagerel range_reverse+481
	DD	imagerel $chain$1$range_reverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$range_reverse DD 021H
	DD	imagerel range_reverse
	DD	imagerel range_reverse+300
	DD	imagerel $unwind$range_reverse
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$range_reverse DD 020521H
	DD	08c405H
	DD	imagerel range_reverse
	DD	imagerel range_reverse+300
	DD	imagerel $unwind$range_reverse
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_reverse DD 081401H
	DD	0b6414H
	DD	0a5414H
	DD	093414H
	DD	070105214H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\rangeobject.c
xdata	ENDS
;	COMDAT range_reverse
_TEXT	SEGMENT
seq$ = 64
range_reverse PROC					; COMDAT

; 1335 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b f1	 mov	 rsi, rcx

; 1336 :     rangeobject *range = (rangeobject*) seq;
; 1337 :     longrangeiterobject *it;
; 1338 :     PyObject *one, *sum, *diff, *product;
; 1339 :     long lstart, lstop, lstep, new_start, new_stop;
; 1340 :     unsigned long ulen;
; 1341 : 
; 1342 :     assert(PyRange_Check(seq));
; 1343 : 
; 1344 :     /* reversed(range(start, stop, step)) can be expressed as
; 1345 :        range(start+(n-1)*step, start-step, -step), where n is the number of
; 1346 :        integers in the range.
; 1347 : 
; 1348 :        If each of start, stop, step, -step, start-step, and the length
; 1349 :        of the iterator is representable as a C long, use the int
; 1350 :        version.  This excludes some cases where the reversed range is
; 1351 :        representable as a range_iterator, but it's good enough for
; 1352 :        common cases and it makes the checks simple. */
; 1353 : 
; 1354 :     lstart = PyLong_AsLong(range->start);

  00017	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0001b	e8 00 00 00 00	 call	 PyLong_AsLong
  00020	8b f8		 mov	 edi, eax

; 1355 :     if (lstart == -1 && PyErr_Occurred()) {

  00022	83 f8 ff	 cmp	 eax, -1
  00025	75 0a		 jne	 SHORT $LN16@range_reve
  00027	e8 00 00 00 00	 call	 PyErr_Occurred
  0002c	48 85 c0	 test	 rax, rax

; 1356 :         PyErr_Clear();
; 1357 :         goto long_range;

  0002f	75 34		 jne	 SHORT $LN28@range_reve
$LN16@range_reve:

; 1358 :     }
; 1359 :     lstop = PyLong_AsLong(range->stop);

  00031	48 8b 4e 68	 mov	 rcx, QWORD PTR [rsi+104]
  00035	e8 00 00 00 00	 call	 PyLong_AsLong
  0003a	8b e8		 mov	 ebp, eax

; 1360 :     if (lstop == -1 && PyErr_Occurred()) {

  0003c	83 f8 ff	 cmp	 eax, -1
  0003f	75 0a		 jne	 SHORT $LN15@range_reve
  00041	e8 00 00 00 00	 call	 PyErr_Occurred
  00046	48 85 c0	 test	 rax, rax

; 1362 :         goto long_range;

  00049	75 1a		 jne	 SHORT $LN28@range_reve
$LN15@range_reve:

; 1363 :     }
; 1364 :     lstep = PyLong_AsLong(range->step);

  0004b	48 8b 4e 70	 mov	 rcx, QWORD PTR [rsi+112]
  0004f	e8 00 00 00 00	 call	 PyLong_AsLong
  00054	8b d8		 mov	 ebx, eax

; 1365 :     if (lstep == -1 && PyErr_Occurred()) {

  00056	83 f8 ff	 cmp	 eax, -1
  00059	75 26		 jne	 SHORT $LN14@range_reve
  0005b	e8 00 00 00 00	 call	 PyErr_Occurred
  00060	48 85 c0	 test	 rax, rax
  00063	74 32		 je	 SHORT $LN12@range_reve
$LN28@range_reve:

; 1361 :         PyErr_Clear();

  00065	e8 00 00 00 00	 call	 PyErr_Clear
$long_range$21385:

; 1402 : 
; 1403 : long_range:
; 1404 :     it = PyObject_New(longrangeiterobject, &PyLongRangeIter_Type);

  0006a	e8 00 00 00 00	 call	 _Py_PXCTX
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyLongRangeIter_Type
  00076	85 c0		 test	 eax, eax
  00078	74 59		 je	 SHORT $LN19@range_reve
  0007a	e8 00 00 00 00	 call	 _PxObject_New
  0007f	eb 57		 jmp	 SHORT $LN29@range_reve
$LN14@range_reve:

; 1366 :         PyErr_Clear();
; 1367 :         goto long_range;
; 1368 :     }
; 1369 :     /* check for possible overflow of -lstep */
; 1370 :     if (lstep == LONG_MIN)

  00081	3d 00 00 00 80	 cmp	 eax, -2147483648	; ffffffff80000000H
  00086	74 e2		 je	 SHORT $long_range$21385

; 1371 :         goto long_range;
; 1372 : 
; 1373 :     /* check for overflow of lstart - lstep:
; 1374 : 
; 1375 :        for lstep > 0, need only check whether lstart - lstep < LONG_MIN.
; 1376 :        for lstep < 0, need only check whether lstart - lstep > LONG_MAX
; 1377 : 
; 1378 :        Rearrange these inequalities as:
; 1379 : 
; 1380 :            lstart - LONG_MIN < lstep  (lstep > 0)
; 1381 :            LONG_MAX - lstart < -lstep  (lstep < 0)
; 1382 : 
; 1383 :        and compute both sides as unsigned longs, to avoid the
; 1384 :        possibility of undefined behaviour due to signed overflow. */
; 1385 : 
; 1386 :     if (lstep > 0) {

  00088	85 c0		 test	 eax, eax
  0008a	7e 0b		 jle	 SHORT $LN12@range_reve

; 1387 :          if ((unsigned long)lstart - LONG_MIN < (unsigned long)lstep)

  0008c	b8 00 00 00 80	 mov	 eax, -2147483648	; ffffffff80000000H
  00091	03 c7		 add	 eax, edi
  00093	3b c3		 cmp	 eax, ebx

; 1388 :             goto long_range;
; 1389 :     }
; 1390 :     else {

  00095	eb 0d		 jmp	 SHORT $LN27@range_reve
$LN12@range_reve:

; 1391 :         if (LONG_MAX - (unsigned long)lstart < 0UL - lstep)

  00097	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0009c	8b c3		 mov	 eax, ebx
  0009e	2b cf		 sub	 ecx, edi
  000a0	f7 d8		 neg	 eax
  000a2	3b c8		 cmp	 ecx, eax
$LN27@range_reve:
  000a4	72 c4		 jb	 SHORT $long_range$21385

; 1392 :             goto long_range;
; 1393 :     }
; 1394 : 
; 1395 :     ulen = get_len_of_range(lstart, lstop, lstep);

  000a6	44 8b c3	 mov	 r8d, ebx
  000a9	8b d5		 mov	 edx, ebp
  000ab	8b cf		 mov	 ecx, edi
  000ad	e8 00 00 00 00	 call	 get_len_of_range

; 1396 :     if (ulen > (unsigned long)LONG_MAX)

  000b2	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  000b7	77 b1		 ja	 SHORT $long_range$21385

; 1397 :         goto long_range;
; 1398 : 
; 1399 :     new_stop = lstart - lstep;

  000b9	2b fb		 sub	 edi, ebx

; 1400 :     new_start = (long)(new_stop + ulen * lstep);

  000bb	0f af c3	 imul	 eax, ebx

; 1401 :     return fast_range_iter(new_start, new_stop, -lstep);

  000be	44 8b c3	 mov	 r8d, ebx
  000c1	41 f7 d8	 neg	 r8d
  000c4	8b d7		 mov	 edx, edi
  000c6	8d 0c 07	 lea	 ecx, DWORD PTR [rdi+rax]
  000c9	e8 00 00 00 00	 call	 fast_range_iter
  000ce	e9 f9 00 00 00	 jmp	 $LN17@range_reve
$LN19@range_reve:

; 1402 : 
; 1403 : long_range:
; 1404 :     it = PyObject_New(longrangeiterobject, &PyLongRangeIter_Type);

  000d3	e8 00 00 00 00	 call	 _PyObject_New
$LN29@range_reve:
  000d8	48 8b f8	 mov	 rdi, rax

; 1405 :     if (it == NULL)

  000db	48 85 c0	 test	 rax, rax
  000de	0f 84 e8 00 00
	00		 je	 $LN17@range_reve
$LN7@range_reve:

; 1406 :         return NULL;
; 1407 : 
; 1408 :     /* start + (len - 1) * step */
; 1409 :     it->len = range->length;

  000e4	48 8b 5e 78	 mov	 rbx, QWORD PTR [rsi+120]
  000e8	48 89 5f 78	 mov	 QWORD PTR [rdi+120], rbx

; 1410 :     Py_INCREF(it->len);

  000ec	e8 00 00 00 00	 call	 _Py_PXCTX
  000f1	85 c0		 test	 eax, eax
  000f3	75 32		 jne	 SHORT $LN22@range_reve
  000f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00103	4c 8b cb	 mov	 r9, rbx
  00106	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0010c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00114	e8 00 00 00 00	 call	 _PyParallel_Guard
  00119	85 c0		 test	 eax, eax
  0011b	75 06		 jne	 SHORT $LN21@range_reve
  0011d	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00121	74 04		 je	 SHORT $LN22@range_reve
$LN21@range_reve:
  00123	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN22@range_reve:

; 1411 : 
; 1412 :     one = PyLong_FromLong(1);

  00127	b9 01 00 00 00	 mov	 ecx, 1
  0012c	4c 89 64 24 40	 mov	 QWORD PTR [rsp+64], r12
  00131	e8 00 00 00 00	 call	 PyLong_FromLong
  00136	48 8b d8	 mov	 rbx, rax

; 1413 :     if (!one)

  00139	48 85 c0	 test	 rax, rax
  0013c	74 7f		 je	 SHORT $create_failure$21406

; 1414 :         goto create_failure;
; 1415 : 
; 1416 :     diff = PyNumber_Subtract(it->len, one);

  0013e	48 8b 4f 78	 mov	 rcx, QWORD PTR [rdi+120]
  00142	48 8b d0	 mov	 rdx, rax
  00145	e8 00 00 00 00	 call	 PyNumber_Subtract

; 1417 :     Py_DECREF(one);

  0014a	48 8b cb	 mov	 rcx, rbx
  0014d	4c 8b e0	 mov	 r12, rax
  00150	e8 00 00 00 00	 call	 _Py_DecRef

; 1418 :     if (!diff)

  00155	4d 85 e4	 test	 r12, r12
  00158	74 63		 je	 SHORT $create_failure$21406

; 1419 :         goto create_failure;
; 1420 : 
; 1421 :     product = PyNumber_Multiply(diff, range->step);

  0015a	48 8b 56 70	 mov	 rdx, QWORD PTR [rsi+112]
  0015e	49 8b cc	 mov	 rcx, r12
  00161	e8 00 00 00 00	 call	 PyNumber_Multiply

; 1422 :     Py_DECREF(diff);

  00166	49 8b cc	 mov	 rcx, r12
  00169	48 8b e8	 mov	 rbp, rax
  0016c	e8 00 00 00 00	 call	 _Py_DecRef

; 1423 :     if (!product)

  00171	48 85 ed	 test	 rbp, rbp
  00174	74 47		 je	 SHORT $create_failure$21406

; 1424 :         goto create_failure;
; 1425 : 
; 1426 :     sum = PyNumber_Add(range->start, product);

  00176	48 8b 4e 60	 mov	 rcx, QWORD PTR [rsi+96]
  0017a	48 8b d5	 mov	 rdx, rbp
  0017d	e8 00 00 00 00	 call	 PyNumber_Add

; 1427 :     Py_DECREF(product);

  00182	48 8b cd	 mov	 rcx, rbp
  00185	48 8b d8	 mov	 rbx, rax
  00188	e8 00 00 00 00	 call	 _Py_DecRef

; 1428 :     it->start = sum;

  0018d	48 89 5f 68	 mov	 QWORD PTR [rdi+104], rbx

; 1429 :     if (!it->start)

  00191	48 85 db	 test	 rbx, rbx
  00194	74 27		 je	 SHORT $create_failure$21406

; 1430 :         goto create_failure;
; 1431 : 
; 1432 :     it->step = PyNumber_Negative(range->step);

  00196	48 8b 4e 70	 mov	 rcx, QWORD PTR [rsi+112]
  0019a	e8 00 00 00 00	 call	 PyNumber_Negative
  0019f	48 89 47 70	 mov	 QWORD PTR [rdi+112], rax

; 1433 :     if (!it->step)

  001a3	48 85 c0	 test	 rax, rax
  001a6	74 15		 je	 SHORT $create_failure$21406

; 1434 :         goto create_failure;
; 1435 : 
; 1436 :     it->index = PyLong_FromLong(0);

  001a8	33 c9		 xor	 ecx, ecx
  001aa	e8 00 00 00 00	 call	 PyLong_FromLong
  001af	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax

; 1437 :     if (!it->index)

  001b3	48 85 c0	 test	 rax, rax
  001b6	74 05		 je	 SHORT $create_failure$21406

; 1438 :         goto create_failure;
; 1439 : 
; 1440 :     return (PyObject *)it;

  001b8	48 8b c7	 mov	 rax, rdi
  001bb	eb 0a		 jmp	 SHORT $LN26@range_reve
$create_failure$21406:

; 1441 : 
; 1442 : create_failure:
; 1443 :     Py_DECREF(it);

  001bd	48 8b cf	 mov	 rcx, rdi
  001c0	e8 00 00 00 00	 call	 _Py_DecRef

; 1444 :     return NULL;

  001c5	33 c0		 xor	 eax, eax
$LN26@range_reve:
  001c7	4c 8b 64 24 40	 mov	 r12, QWORD PTR [rsp+64]
$LN17@range_reve:

; 1445 : }

  001cc	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  001d1	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  001d6	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  001db	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001df	5f		 pop	 rdi
  001e0	c3		 ret	 0
range_reverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$make_range_object DD imagerel make_range_object
	DD	imagerel make_range_object+144
	DD	imagerel $unwind$make_range_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_range_object DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0c016321aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT make_range_object
_TEXT	SEGMENT
type$ = 48
start$ = 56
stop$ = 64
step$ = 72
make_range_object PROC					; COMDAT

; 54   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001a	49 8b e8	 mov	 rbp, r8
  0001d	4c 8b e2	 mov	 r12, rdx
  00020	48 8b f9	 mov	 rdi, rcx

; 55   :     rangeobject *obj = NULL;
; 56   :     PyObject *length;
; 57   :     length = compute_range_length(start, stop, step);

  00023	4d 8b c1	 mov	 r8, r9
  00026	48 8b d5	 mov	 rdx, rbp
  00029	49 8b cc	 mov	 rcx, r12
  0002c	49 8b f1	 mov	 rsi, r9
  0002f	e8 00 00 00 00	 call	 compute_range_length
  00034	48 8b d8	 mov	 rbx, rax

; 58   :     if (length == NULL) {

  00037	48 85 c0	 test	 rax, rax

; 59   :         return NULL;

  0003a	74 25		 je	 SHORT $LN7@make_range

; 60   :     }
; 61   :     obj = PyObject_New(rangeobject, type);

  0003c	e8 00 00 00 00	 call	 _Py_PXCTX
  00041	48 8b cf	 mov	 rcx, rdi
  00044	85 c0		 test	 eax, eax
  00046	74 07		 je	 SHORT $LN5@make_range
  00048	e8 00 00 00 00	 call	 _PxObject_New
  0004d	eb 05		 jmp	 SHORT $LN6@make_range
$LN5@make_range:
  0004f	e8 00 00 00 00	 call	 _PyObject_New
$LN6@make_range:

; 62   :     if (obj == NULL) {

  00054	48 85 c0	 test	 rax, rax
  00057	75 0c		 jne	 SHORT $LN1@make_range

; 63   :         Py_DECREF(length);

  00059	48 8b cb	 mov	 rcx, rbx
  0005c	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@make_range:

; 64   :         return NULL;

  00061	33 c0		 xor	 eax, eax
  00063	eb 10		 jmp	 SHORT $LN3@make_range
$LN1@make_range:

; 65   :     }
; 66   :     obj->start = start;

  00065	4c 89 60 60	 mov	 QWORD PTR [rax+96], r12

; 67   :     obj->stop = stop;

  00069	48 89 68 68	 mov	 QWORD PTR [rax+104], rbp

; 68   :     obj->step = step;

  0006d	48 89 70 70	 mov	 QWORD PTR [rax+112], rsi

; 69   :     obj->length = length;

  00071	48 89 58 78	 mov	 QWORD PTR [rax+120], rbx
$LN3@make_range:

; 70   :     return obj;
; 71   : }

  00075	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007a	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0007f	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00084	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00089	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008d	41 5c		 pop	 r12
  0008f	c3		 ret	 0
make_range_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_07DOGFLLNP@range?$CI?$CJ?$AA@		; `string'
EXTRN	PyArg_UnpackTuple:PROC
EXTRN	PyTuple_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_new DD imagerel range_new
	DD	imagerel range_new+402
	DD	imagerel $unwind$range_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_new DD 061201H
	DD	0d7412H
	DD	0c3412H
	DD	0500b9212H
xdata	ENDS
;	COMDAT ??_C@_07DOGFLLNP@range?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_07DOGFLLNP@range?$CI?$CJ?$AA@ DB 'range()', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT range_new
_TEXT	SEGMENT
start$ = 64
step$ = 72
type$ = 96
args$ = 104
kw$ = 112
stop$ = 120
range_new PROC						; COMDAT

; 80   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi
  0000a	55		 push	 rbp
  0000b	48 8b ec	 mov	 rbp, rsp
  0000e	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 81   :     rangeobject *obj;
; 82   :     PyObject *start = NULL, *stop = NULL, *step = NULL;

  00012	33 c0		 xor	 eax, eax
  00014	48 8b f9	 mov	 rdi, rcx
  00017	48 8b da	 mov	 rbx, rdx

; 83   : 
; 84   :     if (!_PyArg_NoKeywords("range()", kw))

  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DOGFLLNP@range?$CI?$CJ?$AA@
  00021	49 8b d0	 mov	 rdx, r8
  00024	48 89 45 f0	 mov	 QWORD PTR start$[rbp-80], rax
  00028	48 89 45 28	 mov	 QWORD PTR stop$[rbp-80], rax
  0002c	48 89 45 f8	 mov	 QWORD PTR step$[rbp-80], rax
  00030	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00035	85 c0		 test	 eax, eax

; 85   :         return NULL;

  00037	0f 84 43 01 00
	00		 je	 $LN3@range_new

; 86   : 
; 87   :     if (PyTuple_Size(args) <= 1) {

  0003d	48 8b cb	 mov	 rcx, rbx
  00040	e8 00 00 00 00	 call	 PyTuple_Size

; 88   :         if (!PyArg_UnpackTuple(args, "range", 1, 1, &stop))

  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05CCGOGOBM@range?$AA@
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	48 83 f8 01	 cmp	 rax, 1
  00053	7f 72		 jg	 SHORT $LN23@range_new
  00055	48 8d 45 28	 lea	 rax, QWORD PTR stop$[rbp-80]
  00059	41 b9 01 00 00
	00		 mov	 r9d, 1
  0005f	45 8b c1	 mov	 r8d, r9d
  00062	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00067	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0006c	85 c0		 test	 eax, eax

; 89   :             return NULL;

  0006e	0f 84 0c 01 00
	00		 je	 $LN3@range_new

; 90   :         stop = PyNumber_Index(stop);

  00074	48 8b 4d 28	 mov	 rcx, QWORD PTR stop$[rbp-80]
  00078	e8 00 00 00 00	 call	 PyNumber_Index
  0007d	48 89 45 28	 mov	 QWORD PTR stop$[rbp-80], rax

; 91   :         if (!stop)

  00081	48 85 c0	 test	 rax, rax

; 92   :             return NULL;

  00084	0f 84 f6 00 00
	00		 je	 $LN3@range_new

; 93   :         start = PyLong_FromLong(0);

  0008a	33 c9		 xor	 ecx, ecx
  0008c	e8 00 00 00 00	 call	 PyLong_FromLong
  00091	48 89 45 f0	 mov	 QWORD PTR start$[rbp-80], rax

; 94   :         if (!start) {

  00095	48 85 c0	 test	 rax, rax

; 95   :             Py_DECREF(stop);
; 96   :             return NULL;

  00098	0f 84 9a 00 00
	00		 je	 $LN28@range_new

; 97   :         }
; 98   :         step = PyLong_FromLong(1);

  0009e	b9 01 00 00 00	 mov	 ecx, 1
  000a3	e8 00 00 00 00	 call	 PyLong_FromLong
  000a8	48 89 45 f8	 mov	 QWORD PTR step$[rbp-80], rax

; 99   :         if (!step) {

  000ac	48 85 c0	 test	 rax, rax
  000af	0f 85 89 00 00
	00		 jne	 $LN14@range_new

; 100  :             Py_DECREF(stop);

  000b5	48 8b 4d 28	 mov	 rcx, QWORD PTR stop$[rbp-80]
  000b9	e8 00 00 00 00	 call	 _Py_DecRef
$LN29@range_new:

; 101  :             Py_DECREF(start);

  000be	48 8b 4d f0	 mov	 rcx, QWORD PTR start$[rbp-80]

; 102  :             return NULL;

  000c2	e9 b4 00 00 00	 jmp	 $LN27@range_new
$LN23@range_new:

; 103  :         }
; 104  :     }
; 105  :     else {
; 106  :         if (!PyArg_UnpackTuple(args, "range", 2, 3,
; 107  :                                &start, &stop, &step))

  000c7	48 8d 45 f8	 lea	 rax, QWORD PTR step$[rbp-80]
  000cb	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d1	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  000d6	48 8d 45 28	 lea	 rax, QWORD PTR stop$[rbp-80]
  000da	45 8d 41 ff	 lea	 r8d, QWORD PTR [r9-1]
  000de	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000e3	48 8d 45 f0	 lea	 rax, QWORD PTR start$[rbp-80]
  000e7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ec	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  000f1	85 c0		 test	 eax, eax

; 108  :             return NULL;

  000f3	0f 84 87 00 00
	00		 je	 $LN3@range_new

; 109  : 
; 110  :         /* Convert borrowed refs to owned refs */
; 111  :         start = PyNumber_Index(start);

  000f9	48 8b 4d f0	 mov	 rcx, QWORD PTR start$[rbp-80]
  000fd	e8 00 00 00 00	 call	 PyNumber_Index
  00102	48 89 45 f0	 mov	 QWORD PTR start$[rbp-80], rax

; 112  :         if (!start)

  00106	48 85 c0	 test	 rax, rax

; 113  :             return NULL;

  00109	74 75		 je	 SHORT $LN3@range_new

; 114  :         stop = PyNumber_Index(stop);

  0010b	48 8b 4d 28	 mov	 rcx, QWORD PTR stop$[rbp-80]
  0010f	e8 00 00 00 00	 call	 PyNumber_Index
  00114	48 89 45 28	 mov	 QWORD PTR stop$[rbp-80], rax

; 115  :         if (!stop) {

  00118	48 85 c0	 test	 rax, rax

; 116  :             Py_DECREF(start);
; 117  :             return NULL;

  0011b	74 a1		 je	 SHORT $LN29@range_new

; 118  :         }
; 119  :         step = validate_step(step);    /* Caution, this can clear exceptions */

  0011d	48 8b 4d f8	 mov	 rcx, QWORD PTR step$[rbp-80]
  00121	e8 00 00 00 00	 call	 validate_step
  00126	48 89 45 f8	 mov	 QWORD PTR step$[rbp-80], rax

; 120  :         if (!step) {

  0012a	48 85 c0	 test	 rax, rax
  0012d	75 0f		 jne	 SHORT $LN14@range_new

; 121  :             Py_DECREF(start);

  0012f	48 8b 4d f0	 mov	 rcx, QWORD PTR start$[rbp-80]
  00133	e8 00 00 00 00	 call	 _Py_DecRef
$LN28@range_new:

; 122  :             Py_DECREF(stop);

  00138	48 8b 4d 28	 mov	 rcx, QWORD PTR stop$[rbp-80]

; 123  :             return NULL;

  0013c	eb 3d		 jmp	 SHORT $LN27@range_new
$LN14@range_new:

; 124  :         }
; 125  :     }
; 126  : 
; 127  :     obj = make_range_object(type, start, stop, step);

  0013e	4c 8b 45 28	 mov	 r8, QWORD PTR stop$[rbp-80]
  00142	48 8b 55 f0	 mov	 rdx, QWORD PTR start$[rbp-80]
  00146	4c 8b c8	 mov	 r9, rax
  00149	48 8b cf	 mov	 rcx, rdi
  0014c	e8 00 00 00 00	 call	 make_range_object

; 128  :     if (obj != NULL)

  00151	48 85 c0	 test	 rax, rax

; 129  :         return (PyObject *) obj;

  00154	75 2c		 jne	 SHORT $LN25@range_new

; 130  : 
; 131  :     /* Failed to create object, release attributes */
; 132  :     Py_XDECREF(start);

  00156	48 8b 4d f0	 mov	 rcx, QWORD PTR start$[rbp-80]
  0015a	48 85 c9	 test	 rcx, rcx
  0015d	74 05		 je	 SHORT $LN11@range_new
  0015f	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@range_new:

; 133  :     Py_XDECREF(stop);

  00164	48 8b 4d 28	 mov	 rcx, QWORD PTR stop$[rbp-80]
  00168	48 85 c9	 test	 rcx, rcx
  0016b	74 05		 je	 SHORT $LN7@range_new
  0016d	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@range_new:

; 134  :     Py_XDECREF(step);

  00172	48 8b 4d f8	 mov	 rcx, QWORD PTR step$[rbp-80]
  00176	48 85 c9	 test	 rcx, rcx
  00179	74 05		 je	 SHORT $LN3@range_new
$LN27@range_new:
  0017b	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@range_new:

; 135  :     return NULL;

  00180	33 c0		 xor	 eax, eax
$LN25@range_new:

; 136  : }

  00182	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00187	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  0018c	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00190	5d		 pop	 rbp
  00191	c3		 ret	 0
range_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@IKFMEAAB@compute_slice?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$compute_slice DD imagerel compute_slice
	DD	imagerel compute_slice+1078
	DD	imagerel $unwind$compute_slice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compute_slice DD 0c6f01H
	DD	06c46fH
	DD	07746aH
	DD	0e645aH
	DD	0f00b720fH
	DD	0d007e009H
	DD	030045005H
xdata	ENDS
;	COMDAT ??_C@_0O@IKFMEAAB@compute_slice?$AA@
CONST	SEGMENT
??_C@_0O@IKFMEAAB@compute_slice?$AA@ DB 'compute_slice', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\rangeobject.c
CONST	ENDS
;	COMDAT compute_slice
_TEXT	SEGMENT
r$ = 112
stop$ = 120
_slice$ = 120
start$ = 128
step$ = 136
compute_slice PROC					; COMDAT

; 512  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	55		 push	 rbp
  00005	41 55		 push	 r13
  00007	41 56		 push	 r14
  00009	41 57		 push	 r15
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 513  :     PySliceObject *slice = (PySliceObject *) _slice;
; 514  :     rangeobject *result;
; 515  :     PyObject *start = NULL, *stop = NULL, *step = NULL;

  0000f	33 db		 xor	 ebx, ebx

; 516  :     PyObject *substart = NULL, *substop = NULL, *substep = NULL;
; 517  :     int has_elements;
; 518  : 
; 519  :     has_elements = compute_slice_indices(r, slice, &start, &stop, &step);

  00011	49 8d 43 20	 lea	 rax, QWORD PTR [r11+32]
  00015	4d 8d 4b 10	 lea	 r9, QWORD PTR [r11+16]
  00019	4d 8d 43 18	 lea	 r8, QWORD PTR [r11+24]
  0001d	4c 8b f1	 mov	 r14, rcx
  00020	49 89 43 b8	 mov	 QWORD PTR [r11-72], rax
  00024	49 89 5b 18	 mov	 QWORD PTR [r11+24], rbx
  00028	49 89 5b 10	 mov	 QWORD PTR [r11+16], rbx
  0002c	49 89 5b 20	 mov	 QWORD PTR [r11+32], rbx
  00030	8b eb		 mov	 ebp, ebx
  00032	44 8b eb	 mov	 r13d, ebx
  00035	e8 00 00 00 00	 call	 compute_slice_indices
  0003a	44 8b f8	 mov	 r15d, eax

; 520  :     if (has_elements == -1) return NULL;

  0003d	83 f8 ff	 cmp	 eax, -1
  00040	75 0f		 jne	 SHORT $LN43@compute_sl@3
  00042	33 c0		 xor	 eax, eax

; 551  : }

  00044	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00048	41 5f		 pop	 r15
  0004a	41 5e		 pop	 r14
  0004c	41 5d		 pop	 r13
  0004e	5d		 pop	 rbp
  0004f	5b		 pop	 rbx
  00050	c3		 ret	 0
$LN43@compute_sl@3:

; 521  : 
; 522  :     substep = PyNumber_Multiply(r->step, step);

  00051	49 8b 4e 70	 mov	 rcx, QWORD PTR [r14+112]
  00055	48 89 74 24 70	 mov	 QWORD PTR [rsp+112], rsi
  0005a	48 8b b4 24 88
	00 00 00	 mov	 rsi, QWORD PTR step$[rsp]
  00062	48 8b d6	 mov	 rdx, rsi
  00065	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  0006a	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  0006f	e8 00 00 00 00	 call	 PyNumber_Multiply
  00074	4c 8b e0	 mov	 r12, rax

; 523  :     if (substep == NULL) goto fail;

  00077	48 85 c0	 test	 rax, rax
  0007a	0f 84 0c 01 00
	00		 je	 $LN112@compute_sl@3

; 524  :     Py_CLEAR(step);

  00080	48 85 f6	 test	 rsi, rsi
  00083	74 33		 je	 SHORT $LN40@compute_sl@3
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IKFMEAAB@compute_slice?$AA@
  00093	4c 8b ce	 mov	 r9, rsi
  00096	41 b8 0c 02 00
	00		 mov	 r8d, 524		; 0000020cH
  0009c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a9	85 c0		 test	 eax, eax
  000ab	75 0b		 jne	 SHORT $LN40@compute_sl@3
  000ad	48 8b ce	 mov	 rcx, rsi
  000b0	48 8b f3	 mov	 rsi, rbx
  000b3	e8 00 00 00 00	 call	 _Py_DecRef
$LN40@compute_sl@3:

; 525  : 
; 526  :     substart = compute_item(r, start);

  000b8	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR start$[rsp]
  000c0	49 8b ce	 mov	 rcx, r14
  000c3	48 8b d7	 mov	 rdx, rdi
  000c6	e8 00 00 00 00	 call	 compute_item
  000cb	48 8b e8	 mov	 rbp, rax

; 527  :     if (substart == NULL) goto fail;

  000ce	48 85 c0	 test	 rax, rax
  000d1	0f 84 bd 00 00
	00		 je	 $LN113@compute_sl@3

; 528  :     Py_CLEAR(start);

  000d7	48 85 ff	 test	 rdi, rdi
  000da	74 33		 je	 SHORT $LN35@compute_sl@3
  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IKFMEAAB@compute_slice?$AA@
  000ea	4c 8b cf	 mov	 r9, rdi
  000ed	41 b8 10 02 00
	00		 mov	 r8d, 528		; 00000210H
  000f3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000fb	e8 00 00 00 00	 call	 _PyParallel_Guard
  00100	85 c0		 test	 eax, eax
  00102	75 0b		 jne	 SHORT $LN35@compute_sl@3
  00104	48 8b cf	 mov	 rcx, rdi
  00107	48 8b fb	 mov	 rdi, rbx
  0010a	e8 00 00 00 00	 call	 _Py_DecRef
$LN35@compute_sl@3:

; 529  : 
; 530  :     if (has_elements) {

  0010f	48 8b 5c 24 78	 mov	 rbx, QWORD PTR stop$[rsp]
  00114	45 85 ff	 test	 r15d, r15d
  00117	74 15		 je	 SHORT $LN32@compute_sl@3

; 531  :         substop = compute_item(r, stop);

  00119	48 8b d3	 mov	 rdx, rbx
  0011c	49 8b ce	 mov	 rcx, r14
  0011f	e8 00 00 00 00	 call	 compute_item
  00124	4c 8b e8	 mov	 r13, rax

; 532  :         if (substop == NULL) goto fail;

  00127	48 85 c0	 test	 rax, rax
  0012a	74 6d		 je	 SHORT $fail$20710

; 533  :     } else {

  0012c	eb 0b		 jmp	 SHORT $LN29@compute_sl@3
$LN32@compute_sl@3:

; 534  :         substop = substart;
; 535  :         Py_INCREF(substop);

  0012e	48 8b cd	 mov	 rcx, rbp
  00131	4c 8b ed	 mov	 r13, rbp
  00134	e8 00 00 00 00	 call	 _Py_IncRef
$LN29@compute_sl@3:

; 536  :     }
; 537  :     Py_CLEAR(stop);

  00139	48 85 db	 test	 rbx, rbx
  0013c	74 32		 je	 SHORT $LN28@compute_sl@3
  0013e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  00145	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IKFMEAAB@compute_slice?$AA@
  0014c	4c 8b cb	 mov	 r9, rbx
  0014f	41 b8 19 02 00
	00		 mov	 r8d, 537		; 00000219H
  00155	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0015d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00162	85 c0		 test	 eax, eax
  00164	75 0a		 jne	 SHORT $LN28@compute_sl@3
  00166	48 8b cb	 mov	 rcx, rbx
  00169	33 db		 xor	 ebx, ebx
  0016b	e8 00 00 00 00	 call	 _Py_DecRef
$LN28@compute_sl@3:

; 538  : 
; 539  :     result = make_range_object(Py_TYPE(r), substart, substop, substep);

  00170	49 8b 4e 58	 mov	 rcx, QWORD PTR [r14+88]
  00174	4d 8b cc	 mov	 r9, r12
  00177	4d 8b c5	 mov	 r8, r13
  0017a	48 8b d5	 mov	 rdx, rbp
  0017d	e8 00 00 00 00	 call	 make_range_object

; 540  :     if (result != NULL) {

  00182	48 85 c0	 test	 rax, rax
  00185	74 12		 je	 SHORT $fail$20710

; 541  :         return (PyObject *) result;

  00187	e9 8e 02 00 00	 jmp	 $LN116@compute_sl@3
$LN112@compute_sl@3:
  0018c	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR start$[rsp]
$LN113@compute_sl@3:
  00194	48 8b 5c 24 78	 mov	 rbx, QWORD PTR stop$[rsp]
$fail$20710:

; 542  :     }
; 543  : fail:
; 544  :     Py_XDECREF(start);

  00199	48 85 ff	 test	 rdi, rdi
  0019c	74 65		 je	 SHORT $LN23@compute_sl@3
  0019e	e8 00 00 00 00	 call	 _Py_PXCTX
  001a3	85 c0		 test	 eax, eax
  001a5	75 5c		 jne	 SHORT $LN23@compute_sl@3
  001a7	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  001ab	a8 20		 test	 al, 32			; 00000020H
  001ad	75 4c		 jne	 SHORT $LN50@compute_sl@3
  001af	84 c0		 test	 al, al
  001b1	78 48		 js	 SHORT $LN50@compute_sl@3
  001b3	a8 02		 test	 al, 2
  001b5	75 4c		 jne	 SHORT $LN23@compute_sl@3
  001b7	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  001bb	75 46		 jne	 SHORT $LN23@compute_sl@3
  001bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001cb	4c 8b cf	 mov	 r9, rdi
  001ce	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001d4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001dc	e8 00 00 00 00	 call	 _PyParallel_Guard
  001e1	48 8b cf	 mov	 rcx, rdi
  001e4	85 c0		 test	 eax, eax
  001e6	74 07		 je	 SHORT $LN55@compute_sl@3
  001e8	e8 00 00 00 00	 call	 _Px_Dealloc
  001ed	eb 14		 jmp	 SHORT $LN23@compute_sl@3
$LN55@compute_sl@3:
  001ef	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  001f3	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001f9	eb 08		 jmp	 SHORT $LN23@compute_sl@3
$LN50@compute_sl@3:
  001fb	48 8b cf	 mov	 rcx, rdi
  001fe	e8 00 00 00 00	 call	 Px_DecRef
$LN23@compute_sl@3:

; 545  :     Py_XDECREF(stop);

  00203	48 85 db	 test	 rbx, rbx
  00206	74 65		 je	 SHORT $LN19@compute_sl@3
  00208	e8 00 00 00 00	 call	 _Py_PXCTX
  0020d	85 c0		 test	 eax, eax
  0020f	75 5c		 jne	 SHORT $LN19@compute_sl@3
  00211	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00215	a8 20		 test	 al, 32			; 00000020H
  00217	75 4c		 jne	 SHORT $LN61@compute_sl@3
  00219	84 c0		 test	 al, al
  0021b	78 48		 js	 SHORT $LN61@compute_sl@3
  0021d	a8 02		 test	 al, 2
  0021f	75 4c		 jne	 SHORT $LN19@compute_sl@3
  00221	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00225	75 46		 jne	 SHORT $LN19@compute_sl@3
  00227	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0022e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00235	4c 8b cb	 mov	 r9, rbx
  00238	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0023e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00246	e8 00 00 00 00	 call	 _PyParallel_Guard
  0024b	48 8b cb	 mov	 rcx, rbx
  0024e	85 c0		 test	 eax, eax
  00250	74 07		 je	 SHORT $LN66@compute_sl@3
  00252	e8 00 00 00 00	 call	 _Px_Dealloc
  00257	eb 14		 jmp	 SHORT $LN19@compute_sl@3
$LN66@compute_sl@3:
  00259	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0025d	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00263	eb 08		 jmp	 SHORT $LN19@compute_sl@3
$LN61@compute_sl@3:
  00265	48 8b cb	 mov	 rcx, rbx
  00268	e8 00 00 00 00	 call	 Px_DecRef
$LN19@compute_sl@3:

; 546  :     Py_XDECREF(step);

  0026d	48 85 f6	 test	 rsi, rsi
  00270	74 65		 je	 SHORT $LN15@compute_sl@3
  00272	e8 00 00 00 00	 call	 _Py_PXCTX
  00277	85 c0		 test	 eax, eax
  00279	75 5c		 jne	 SHORT $LN15@compute_sl@3
  0027b	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0027f	a8 20		 test	 al, 32			; 00000020H
  00281	75 4c		 jne	 SHORT $LN72@compute_sl@3
  00283	84 c0		 test	 al, al
  00285	78 48		 js	 SHORT $LN72@compute_sl@3
  00287	a8 02		 test	 al, 2
  00289	75 4c		 jne	 SHORT $LN15@compute_sl@3
  0028b	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  0028f	75 46		 jne	 SHORT $LN15@compute_sl@3
  00291	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00298	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0029f	4c 8b ce	 mov	 r9, rsi
  002a2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002a8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002b0	e8 00 00 00 00	 call	 _PyParallel_Guard
  002b5	48 8b ce	 mov	 rcx, rsi
  002b8	85 c0		 test	 eax, eax
  002ba	74 07		 je	 SHORT $LN77@compute_sl@3
  002bc	e8 00 00 00 00	 call	 _Px_Dealloc
  002c1	eb 14		 jmp	 SHORT $LN15@compute_sl@3
$LN77@compute_sl@3:
  002c3	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  002c7	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002cd	eb 08		 jmp	 SHORT $LN15@compute_sl@3
$LN72@compute_sl@3:
  002cf	48 8b ce	 mov	 rcx, rsi
  002d2	e8 00 00 00 00	 call	 Px_DecRef
$LN15@compute_sl@3:

; 547  :     Py_XDECREF(substart);

  002d7	48 85 ed	 test	 rbp, rbp
  002da	74 65		 je	 SHORT $LN11@compute_sl@3
  002dc	e8 00 00 00 00	 call	 _Py_PXCTX
  002e1	85 c0		 test	 eax, eax
  002e3	75 5c		 jne	 SHORT $LN11@compute_sl@3
  002e5	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  002e9	a8 20		 test	 al, 32			; 00000020H
  002eb	75 4c		 jne	 SHORT $LN83@compute_sl@3
  002ed	84 c0		 test	 al, al
  002ef	78 48		 js	 SHORT $LN83@compute_sl@3
  002f1	a8 02		 test	 al, 2
  002f3	75 4c		 jne	 SHORT $LN11@compute_sl@3
  002f5	48 ff 4d 50	 dec	 QWORD PTR [rbp+80]
  002f9	75 46		 jne	 SHORT $LN11@compute_sl@3
  002fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00302	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00309	4c 8b cd	 mov	 r9, rbp
  0030c	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00312	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0031a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0031f	48 8b cd	 mov	 rcx, rbp
  00322	85 c0		 test	 eax, eax
  00324	74 07		 je	 SHORT $LN88@compute_sl@3
  00326	e8 00 00 00 00	 call	 _Px_Dealloc
  0032b	eb 14		 jmp	 SHORT $LN11@compute_sl@3
$LN88@compute_sl@3:
  0032d	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  00331	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00337	eb 08		 jmp	 SHORT $LN11@compute_sl@3
$LN83@compute_sl@3:
  00339	48 8b cd	 mov	 rcx, rbp
  0033c	e8 00 00 00 00	 call	 Px_DecRef
$LN11@compute_sl@3:

; 548  :     Py_XDECREF(substop);

  00341	4d 85 ed	 test	 r13, r13
  00344	74 65		 je	 SHORT $LN7@compute_sl@3
  00346	e8 00 00 00 00	 call	 _Py_PXCTX
  0034b	85 c0		 test	 eax, eax
  0034d	75 5c		 jne	 SHORT $LN7@compute_sl@3
  0034f	49 8b 45 20	 mov	 rax, QWORD PTR [r13+32]
  00353	a8 20		 test	 al, 32			; 00000020H
  00355	75 4c		 jne	 SHORT $LN94@compute_sl@3
  00357	84 c0		 test	 al, al
  00359	78 48		 js	 SHORT $LN94@compute_sl@3
  0035b	a8 02		 test	 al, 2
  0035d	75 4c		 jne	 SHORT $LN7@compute_sl@3
  0035f	49 ff 4d 50	 dec	 QWORD PTR [r13+80]
  00363	75 46		 jne	 SHORT $LN7@compute_sl@3
  00365	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0036c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00373	4d 8b cd	 mov	 r9, r13
  00376	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0037c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00384	e8 00 00 00 00	 call	 _PyParallel_Guard
  00389	49 8b cd	 mov	 rcx, r13
  0038c	85 c0		 test	 eax, eax
  0038e	74 07		 je	 SHORT $LN99@compute_sl@3
  00390	e8 00 00 00 00	 call	 _Px_Dealloc
  00395	eb 14		 jmp	 SHORT $LN7@compute_sl@3
$LN99@compute_sl@3:
  00397	49 8b 45 58	 mov	 rax, QWORD PTR [r13+88]
  0039b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003a1	eb 08		 jmp	 SHORT $LN7@compute_sl@3
$LN94@compute_sl@3:
  003a3	49 8b cd	 mov	 rcx, r13
  003a6	e8 00 00 00 00	 call	 Px_DecRef
$LN7@compute_sl@3:

; 549  :     Py_XDECREF(substep);

  003ab	4d 85 e4	 test	 r12, r12
  003ae	74 68		 je	 SHORT $LN3@compute_sl@3
  003b0	e8 00 00 00 00	 call	 _Py_PXCTX
  003b5	85 c0		 test	 eax, eax
  003b7	75 5f		 jne	 SHORT $LN3@compute_sl@3
  003b9	49 8b 44 24 20	 mov	 rax, QWORD PTR [r12+32]
  003be	a8 20		 test	 al, 32			; 00000020H
  003c0	75 4e		 jne	 SHORT $LN105@compute_sl@3
  003c2	84 c0		 test	 al, al
  003c4	78 4a		 js	 SHORT $LN105@compute_sl@3
  003c6	a8 02		 test	 al, 2
  003c8	75 4e		 jne	 SHORT $LN3@compute_sl@3
  003ca	49 ff 4c 24 50	 dec	 QWORD PTR [r12+80]
  003cf	75 47		 jne	 SHORT $LN3@compute_sl@3
  003d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  003df	4d 8b cc	 mov	 r9, r12
  003e2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  003e8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003f0	e8 00 00 00 00	 call	 _PyParallel_Guard
  003f5	49 8b cc	 mov	 rcx, r12
  003f8	85 c0		 test	 eax, eax
  003fa	74 07		 je	 SHORT $LN110@compute_sl@3
  003fc	e8 00 00 00 00	 call	 _Px_Dealloc
  00401	eb 15		 jmp	 SHORT $LN3@compute_sl@3
$LN110@compute_sl@3:
  00403	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]
  00408	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0040e	eb 08		 jmp	 SHORT $LN3@compute_sl@3
$LN105@compute_sl@3:
  00410	49 8b cc	 mov	 rcx, r12
  00413	e8 00 00 00 00	 call	 Px_DecRef
$LN3@compute_sl@3:

; 550  :     return NULL;

  00418	33 c0		 xor	 eax, eax
$LN116@compute_sl@3:
  0041a	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  0041f	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  00424	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]

; 551  : }

  00429	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0042d	41 5f		 pop	 r15
  0042f	41 5e		 pop	 r14
  00431	41 5d		 pop	 r13
  00433	5d		 pop	 rbp
  00434	5b		 pop	 rbx
  00435	c3		 ret	 0
compute_slice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@LFAJHCEJ@range?5indices?5must?5be?5integers?5o@ ; `string'
EXTRN	PySlice_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_subscript DD imagerel range_subscript
	DD	imagerel range_subscript+38
	DD	imagerel $unwind$range_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$range_subscript DD imagerel range_subscript+38
	DD	imagerel range_subscript+67
	DD	imagerel $chain$0$range_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$range_subscript DD imagerel range_subscript+67
	DD	imagerel range_subscript+103
	DD	imagerel $chain$2$range_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$range_subscript DD imagerel range_subscript+103
	DD	imagerel range_subscript+156
	DD	imagerel $chain$3$range_subscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$range_subscript DD 021H
	DD	imagerel range_subscript
	DD	imagerel range_subscript+38
	DD	imagerel $unwind$range_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$range_subscript DD 020021H
	DD	067400H
	DD	imagerel range_subscript
	DD	imagerel range_subscript+38
	DD	imagerel $unwind$range_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$range_subscript DD 020521H
	DD	067405H
	DD	imagerel range_subscript
	DD	imagerel range_subscript+38
	DD	imagerel $unwind$range_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_subscript DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0DF@LFAJHCEJ@range?5indices?5must?5be?5integers?5o@
CONST	SEGMENT
??_C@_0DF@LFAJHCEJ@range?5indices?5must?5be?5integers?5o@ DB 'range indic'
	DB	'es must be integers or slices, not %.200s', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT range_subscript
_TEXT	SEGMENT
self$ = 48
item$ = 56
range_subscript PROC					; COMDAT

; 838  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 839  :     if (PyIndex_Check(item)) {

  00006	4c 8b 42 58	 mov	 r8, QWORD PTR [rdx+88]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	49 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [r8+184]
  00014	48 85 c0	 test	 rax, rax
  00017	74 4e		 je	 SHORT $LN3@range_subs
  00019	48 83 b8 08 01
	00 00 00	 cmp	 QWORD PTR [rax+264], 0
  00021	74 44		 je	 SHORT $LN3@range_subs

; 840  :         PyObject *i, *result;
; 841  :         i = PyNumber_Index(item);

  00023	48 8b ca	 mov	 rcx, rdx
  00026	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0002b	e8 00 00 00 00	 call	 PyNumber_Index
  00030	48 8b f8	 mov	 rdi, rax

; 842  :         if (!i)

  00033	48 85 c0	 test	 rax, rax
  00036	75 0b		 jne	 SHORT $LN2@range_subs
  00038	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 855  : }

  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5b		 pop	 rbx
  00042	c3		 ret	 0
$LN2@range_subs:

; 843  :             return NULL;
; 844  :         result = compute_range_item(self, i);

  00043	48 8b d0	 mov	 rdx, rax
  00046	48 8b cb	 mov	 rcx, rbx
  00049	e8 00 00 00 00	 call	 compute_range_item

; 845  :         Py_DECREF(i);

  0004e	48 8b cf	 mov	 rcx, rdi
  00051	48 8b d8	 mov	 rbx, rax
  00054	e8 00 00 00 00	 call	 _Py_DecRef
  00059	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 846  :         return result;

  0005e	48 8b c3	 mov	 rax, rbx

; 855  : }

  00061	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00065	5b		 pop	 rbx
  00066	c3		 ret	 0
$LN3@range_subs:

; 847  :     }
; 848  :     if (PySlice_Check(item)) {

  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySlice_Type
  0006e	4c 3b c0	 cmp	 r8, rax
  00071	75 0a		 jne	 SHORT $LN1@range_subs

; 855  : }

  00073	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00077	5b		 pop	 rbx
  00078	e9 00 00 00 00	 jmp	 compute_slice
$LN1@range_subs:

; 849  :         return compute_slice(self, item);
; 850  :     }
; 851  :     PyErr_Format(PyExc_TypeError,
; 852  :                  "range indices must be integers or slices, not %.200s",
; 853  :                  item->ob_type->tp_name);

  0007d	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00081	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@LFAJHCEJ@range?5indices?5must?5be?5integers?5o@
  0008f	e8 00 00 00 00	 call	 PyErr_Format

; 854  :     return NULL;

  00094	33 c0		 xor	 eax, eax

; 855  : }

  00096	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009a	5b		 pop	 rbx
  0009b	c3		 ret	 0
range_subscript ENDP
_TEXT	ENDS
PUBLIC	??_C@_05HCLGNDAK@N?$CIN?$CJi?$AA@		; `string'
PUBLIC	??_C@_04BKLHDIKK@iter?$AA@			; `string'
EXTRN	_PyObject_GetBuiltin:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$rangeiter_reduce DD imagerel rangeiter_reduce
	DD	imagerel rangeiter_reduce+500
	DD	imagerel $unwind$rangeiter_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rangeiter_reduce DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0c016521aH
xdata	ENDS
;	COMDAT ??_C@_05HCLGNDAK@N?$CIN?$CJi?$AA@
CONST	SEGMENT
??_C@_05HCLGNDAK@N?$CIN?$CJi?$AA@ DB 'N(N)i', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKLHDIKK@iter?$AA@
CONST	SEGMENT
??_C@_04BKLHDIKK@iter?$AA@ DB 'iter', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\rangeobject.c
CONST	ENDS
;	COMDAT rangeiter_reduce
_TEXT	SEGMENT
r$ = 64
rangeiter_reduce PROC					; COMDAT

; 970  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0001a	48 8b e9	 mov	 rbp, rcx

; 971  :     PyObject *start=NULL, *stop=NULL, *step=NULL;
; 972  :     PyObject *range;
; 973  : 
; 974  :     /* create a range object for pickling */
; 975  :     start = PyLong_FromLong(r->start);

  0001d	8b 49 64	 mov	 ecx, DWORD PTR [rcx+100]
  00020	33 db		 xor	 ebx, ebx
  00022	e8 00 00 00 00	 call	 PyLong_FromLong
  00027	48 8b f0	 mov	 rsi, rax

; 976  :     if (start == NULL)

  0002a	48 85 c0	 test	 rax, rax
  0002d	0f 84 a4 01 00
	00		 je	 $LN3@rangeiter_@4

; 977  :         goto err;
; 978  :     stop = PyLong_FromLong(r->start + r->len * r->step);

  00033	8b 4d 6c	 mov	 ecx, DWORD PTR [rbp+108]
  00036	0f af 4d 68	 imul	 ecx, DWORD PTR [rbp+104]
  0003a	03 4d 64	 add	 ecx, DWORD PTR [rbp+100]
  0003d	e8 00 00 00 00	 call	 PyLong_FromLong
  00042	48 8b f8	 mov	 rdi, rax

; 979  :     if (stop == NULL)

  00045	48 85 c0	 test	 rax, rax
  00048	74 54		 je	 SHORT $err$21089

; 980  :         goto err;
; 981  :     step = PyLong_FromLong(r->step);

  0004a	8b 4d 68	 mov	 ecx, DWORD PTR [rbp+104]
  0004d	e8 00 00 00 00	 call	 PyLong_FromLong
  00052	48 8b d8	 mov	 rbx, rax

; 982  :     if (step == NULL)

  00055	48 85 c0	 test	 rax, rax
  00058	74 44		 je	 SHORT $err$21089

; 983  :         goto err;
; 984  :     range = (PyObject*)make_range_object(&PyRange_Type,
; 985  :                                start, stop, step);

  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyRange_Type
  00061	4c 8b c8	 mov	 r9, rax
  00064	4c 8b c7	 mov	 r8, rdi
  00067	48 8b d6	 mov	 rdx, rsi
  0006a	e8 00 00 00 00	 call	 make_range_object
  0006f	4c 8b e0	 mov	 r12, rax

; 986  :     if (range == NULL)

  00072	48 85 c0	 test	 rax, rax
  00075	74 27		 je	 SHORT $err$21089

; 987  :         goto err;
; 988  :     /* return the result */
; 989  :     return Py_BuildValue("N(N)i", _PyObject_GetBuiltin("iter"), range, r->index);

  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  0007e	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  00083	44 8b 4d 60	 mov	 r9d, DWORD PTR [rbp+96]
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05HCLGNDAK@N?$CIN?$CJi?$AA@
  0008e	48 8b d0	 mov	 rdx, rax
  00091	4d 8b c4	 mov	 r8, r12
  00094	e8 00 00 00 00	 call	 Py_BuildValue
  00099	e9 3b 01 00 00	 jmp	 $LN17@rangeiter_@4
$err$21089:

; 990  : err:
; 991  :     Py_XDECREF(start);

  0009e	e8 00 00 00 00	 call	 _Py_PXCTX
  000a3	85 c0		 test	 eax, eax
  000a5	75 5c		 jne	 SHORT $LN11@rangeiter_@4
  000a7	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  000ab	a8 20		 test	 al, 32			; 00000020H
  000ad	75 4c		 jne	 SHORT $LN23@rangeiter_@4
  000af	84 c0		 test	 al, al
  000b1	78 48		 js	 SHORT $LN23@rangeiter_@4
  000b3	a8 02		 test	 al, 2
  000b5	75 4c		 jne	 SHORT $LN11@rangeiter_@4
  000b7	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  000bb	75 46		 jne	 SHORT $LN11@rangeiter_@4
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000cb	4c 8b ce	 mov	 r9, rsi
  000ce	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000d4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000dc	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e1	48 8b ce	 mov	 rcx, rsi
  000e4	85 c0		 test	 eax, eax
  000e6	74 07		 je	 SHORT $LN28@rangeiter_@4
  000e8	e8 00 00 00 00	 call	 _Px_Dealloc
  000ed	eb 14		 jmp	 SHORT $LN11@rangeiter_@4
$LN28@rangeiter_@4:
  000ef	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  000f3	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000f9	eb 08		 jmp	 SHORT $LN11@rangeiter_@4
$LN23@rangeiter_@4:
  000fb	48 8b ce	 mov	 rcx, rsi
  000fe	e8 00 00 00 00	 call	 Px_DecRef
$LN11@rangeiter_@4:

; 992  :     Py_XDECREF(stop);

  00103	48 85 ff	 test	 rdi, rdi
  00106	74 65		 je	 SHORT $LN7@rangeiter_@4
  00108	e8 00 00 00 00	 call	 _Py_PXCTX
  0010d	85 c0		 test	 eax, eax
  0010f	75 5c		 jne	 SHORT $LN7@rangeiter_@4
  00111	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00115	a8 20		 test	 al, 32			; 00000020H
  00117	75 4c		 jne	 SHORT $LN34@rangeiter_@4
  00119	84 c0		 test	 al, al
  0011b	78 48		 js	 SHORT $LN34@rangeiter_@4
  0011d	a8 02		 test	 al, 2
  0011f	75 4c		 jne	 SHORT $LN7@rangeiter_@4
  00121	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00125	75 46		 jne	 SHORT $LN7@rangeiter_@4
  00127	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0012e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00135	4c 8b cf	 mov	 r9, rdi
  00138	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0013e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00146	e8 00 00 00 00	 call	 _PyParallel_Guard
  0014b	48 8b cf	 mov	 rcx, rdi
  0014e	85 c0		 test	 eax, eax
  00150	74 07		 je	 SHORT $LN39@rangeiter_@4
  00152	e8 00 00 00 00	 call	 _Px_Dealloc
  00157	eb 14		 jmp	 SHORT $LN7@rangeiter_@4
$LN39@rangeiter_@4:
  00159	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0015d	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00163	eb 08		 jmp	 SHORT $LN7@rangeiter_@4
$LN34@rangeiter_@4:
  00165	48 8b cf	 mov	 rcx, rdi
  00168	e8 00 00 00 00	 call	 Px_DecRef
$LN7@rangeiter_@4:

; 993  :     Py_XDECREF(step);

  0016d	48 85 db	 test	 rbx, rbx
  00170	74 65		 je	 SHORT $LN3@rangeiter_@4
  00172	e8 00 00 00 00	 call	 _Py_PXCTX
  00177	85 c0		 test	 eax, eax
  00179	75 5c		 jne	 SHORT $LN3@rangeiter_@4
  0017b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0017f	a8 20		 test	 al, 32			; 00000020H
  00181	75 4c		 jne	 SHORT $LN45@rangeiter_@4
  00183	84 c0		 test	 al, al
  00185	78 48		 js	 SHORT $LN45@rangeiter_@4
  00187	a8 02		 test	 al, 2
  00189	75 4c		 jne	 SHORT $LN3@rangeiter_@4
  0018b	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0018f	75 46		 jne	 SHORT $LN3@rangeiter_@4
  00191	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00198	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0019f	4c 8b cb	 mov	 r9, rbx
  001a2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001a8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001b0	e8 00 00 00 00	 call	 _PyParallel_Guard
  001b5	48 8b cb	 mov	 rcx, rbx
  001b8	85 c0		 test	 eax, eax
  001ba	74 07		 je	 SHORT $LN50@rangeiter_@4
  001bc	e8 00 00 00 00	 call	 _Px_Dealloc
  001c1	eb 14		 jmp	 SHORT $LN3@rangeiter_@4
$LN50@rangeiter_@4:
  001c3	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001c7	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001cd	eb 08		 jmp	 SHORT $LN3@rangeiter_@4
$LN45@rangeiter_@4:
  001cf	48 8b cb	 mov	 rcx, rbx
  001d2	e8 00 00 00 00	 call	 Px_DecRef
$LN3@rangeiter_@4:

; 994  :     return NULL;

  001d7	33 c0		 xor	 eax, eax
$LN17@rangeiter_@4:

; 995  : }

  001d9	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001de	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  001e3	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  001e8	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  001ed	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001f1	41 5c		 pop	 r12
  001f3	c3		 ret	 0
rangeiter_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_05LBGIFACO@N?$CIN?$CJO?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$longrangeiter_reduce DD imagerel longrangeiter_reduce
	DD	imagerel longrangeiter_reduce+52
	DD	imagerel $unwind$longrangeiter_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$longrangeiter_reduce DD imagerel longrangeiter_reduce+52
	DD	imagerel longrangeiter_reduce+283
	DD	imagerel $chain$0$longrangeiter_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$longrangeiter_reduce DD imagerel longrangeiter_reduce+283
	DD	imagerel longrangeiter_reduce+332
	DD	imagerel $chain$2$longrangeiter_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$longrangeiter_reduce DD 020021H
	DD	086400H
	DD	imagerel longrangeiter_reduce
	DD	imagerel longrangeiter_reduce+52
	DD	imagerel $unwind$longrangeiter_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$longrangeiter_reduce DD 020521H
	DD	086405H
	DD	imagerel longrangeiter_reduce
	DD	imagerel longrangeiter_reduce+52
	DD	imagerel $unwind$longrangeiter_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$longrangeiter_reduce DD 040a01H
	DD	09340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_05LBGIFACO@N?$CIN?$CJO?$AA@
CONST	SEGMENT
??_C@_05LBGIFACO@N?$CIN?$CJO?$AA@ DB 'N(N)O', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\rangeobject.c
CONST	ENDS
;	COMDAT longrangeiter_reduce
_TEXT	SEGMENT
r$ = 64
longrangeiter_reduce PROC				; COMDAT

; 1151 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1152 :     PyObject *product, *stop=NULL;
; 1153 :     PyObject *range;
; 1154 : 
; 1155 :     /* create a range object for pickling.  Must calculate the "stop" value */
; 1156 :     product = PyNumber_Multiply(r->len, r->step);

  0000a	48 8b 51 70	 mov	 rdx, QWORD PTR [rcx+112]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00015	e8 00 00 00 00	 call	 PyNumber_Multiply
  0001a	48 8b f8	 mov	 rdi, rax

; 1157 :     if (product == NULL)

  0001d	48 85 c0	 test	 rax, rax
  00020	75 0b		 jne	 SHORT $LN3@longrangei@4

; 1176 : }

  00022	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00027	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002b	5f		 pop	 rdi
  0002c	c3		 ret	 0
$LN3@longrangei@4:

; 1158 :         return NULL;
; 1159 :     stop = PyNumber_Add(r->start, product);

  0002d	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00031	48 8b d0	 mov	 rdx, rax
  00034	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00039	e8 00 00 00 00	 call	 PyNumber_Add

; 1160 :     Py_DECREF(product);

  0003e	48 8b cf	 mov	 rcx, rdi
  00041	48 8b f0	 mov	 rsi, rax
  00044	e8 00 00 00 00	 call	 _Py_DecRef

; 1161 :     if (stop ==  NULL)

  00049	48 85 f6	 test	 rsi, rsi

; 1162 :         return NULL;

  0004c	0f 84 b7 00 00
	00		 je	 $LN15@longrangei@4

; 1163 :     Py_INCREF(r->start);

  00052	48 8b 7b 68	 mov	 rdi, QWORD PTR [rbx+104]
  00056	e8 00 00 00 00	 call	 _Py_PXCTX
  0005b	85 c0		 test	 eax, eax
  0005d	75 32		 jne	 SHORT $LN7@longrangei@4
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006d	4c 8b cf	 mov	 r9, rdi
  00070	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00076	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00083	85 c0		 test	 eax, eax
  00085	75 06		 jne	 SHORT $LN6@longrangei@4
  00087	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0008b	74 04		 je	 SHORT $LN7@longrangei@4
$LN6@longrangei@4:
  0008d	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN7@longrangei@4:

; 1164 :     Py_INCREF(r->step);

  00091	48 8b 7b 70	 mov	 rdi, QWORD PTR [rbx+112]
  00095	e8 00 00 00 00	 call	 _Py_PXCTX
  0009a	85 c0		 test	 eax, eax
  0009c	75 32		 jne	 SHORT $LN11@longrangei@4
  0009e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000ac	4c 8b cf	 mov	 r9, rdi
  000af	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000b5	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000bd	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c2	85 c0		 test	 eax, eax
  000c4	75 06		 jne	 SHORT $LN10@longrangei@4
  000c6	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  000ca	74 04		 je	 SHORT $LN11@longrangei@4
$LN10@longrangei@4:
  000cc	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN11@longrangei@4:

; 1165 :     range =  (PyObject*)make_range_object(&PyRange_Type,
; 1166 :                                r->start, stop, r->step);

  000d0	4c 8b 4b 70	 mov	 r9, QWORD PTR [rbx+112]
  000d4	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  000d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyRange_Type
  000df	4c 8b c6	 mov	 r8, rsi
  000e2	e8 00 00 00 00	 call	 make_range_object
  000e7	48 8b f8	 mov	 rdi, rax

; 1167 :     if (range == NULL) {

  000ea	48 85 c0	 test	 rax, rax
  000ed	75 2c		 jne	 SHORT $LN1@longrangei@4

; 1168 :         Py_DECREF(r->start);

  000ef	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  000f3	e8 00 00 00 00	 call	 _Py_DecRef

; 1169 :         Py_DECREF(stop);

  000f8	48 8b ce	 mov	 rcx, rsi
  000fb	e8 00 00 00 00	 call	 _Py_DecRef

; 1170 :         Py_DECREF(r->step);

  00100	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  00104	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@longrangei@4:

; 1171 :         return NULL;

  00109	33 c0		 xor	 eax, eax
  0010b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 1176 : }

  00110	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00115	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00119	5f		 pop	 rdi
  0011a	c3		 ret	 0
$LN1@longrangei@4:

; 1172 :     }
; 1173 : 
; 1174 :     /* return the result */
; 1175 :     return Py_BuildValue("N(N)O", _PyObject_GetBuiltin("iter"), range, r->index);

  0011b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  00122	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  00127	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LBGIFACO@N?$CIN?$CJO?$AA@
  00132	48 8b d0	 mov	 rdx, rax
  00135	4c 8b c7	 mov	 r8, rdi
  00138	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 1176 : }

  0013d	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00142	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00146	5f		 pop	 rdi
  00147	e9 00 00 00 00	 jmp	 Py_BuildValue
longrangeiter_reduce ENDP
_TEXT	ENDS
END
