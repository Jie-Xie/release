; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@OMHGPBAM@bad?5memberdescr?5type?$AA@	; `string'
PUBLIC	PyMember_GetOne
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyLong_FromUnsignedLongLong:PROC
EXTRN	PyLong_FromLongLong:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_AttributeError:QWORD
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyUnicode_FromStringAndSize:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyFloat_FromDouble:PROC
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyLong_FromUnsignedLong:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	PyBool_FromLong:PROC
EXTRN	__ImageBase:BYTE
EXTRN	_fltused:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\python\structmember.c
pdata	SEGMENT
$pdata$PyMember_GetOne DD imagerel $LN36
	DD	imagerel $LN36+500
	DD	imagerel $unwind$PyMember_GetOne
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMember_GetOne DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BF@OMHGPBAM@bad?5memberdescr?5type?$AA@
CONST	SEGMENT
??_C@_0BF@OMHGPBAM@bad?5memberdescr?5type?$AA@ DB 'bad memberdescr type', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyMember_GetOne
_TEXT	SEGMENT
addr$ = 48
l$ = 56
PyMember_GetOne PROC					; COMDAT

; 10   : {

$LN36:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 11   :     PyObject *v;
; 12   : 
; 13   :     addr += l->offset;
; 14   :     switch (l->type) {

  00006	48 63 42 08	 movsxd	 rax, DWORD PTR [rdx+8]
  0000a	48 03 4a 10	 add	 rcx, QWORD PTR [rdx+16]
  0000e	83 f8 14	 cmp	 eax, 20
  00011	0f 87 6b 01 00
	00		 ja	 $LN1@PyMember_G
  00017	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:__ImageBase
  0001e	45 8b 84 81 00
	00 00 00	 mov	 r8d, DWORD PTR $LN35@PyMember_G[r9+rax*4]
  00026	4d 03 c1	 add	 r8, r9
  00029	41 ff e0	 jmp	 r8
$LN29@PyMember_G:

; 15   :     case T_BOOL:
; 16   :         v = PyBool_FromLong(*(char*)addr);

  0002c	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  0002f	e8 00 00 00 00	 call	 PyBool_FromLong
  00034	48 8b d8	 mov	 rbx, rax

; 94   : }

  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5b		 pop	 rbx
  0003c	c3		 ret	 0
$LN28@PyMember_G:

; 17   :         break;
; 18   :     case T_BYTE:
; 19   :         v = PyLong_FromLong(*(char*)addr);

  0003d	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00040	e8 00 00 00 00	 call	 PyLong_FromLong
  00045	48 8b d8	 mov	 rbx, rax

; 94   : }

  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5b		 pop	 rbx
  0004d	c3		 ret	 0
$LN27@PyMember_G:

; 20   :         break;
; 21   :     case T_UBYTE:
; 22   :         v = PyLong_FromUnsignedLong(*(unsigned char*)addr);

  0004e	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00051	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
  00056	48 8b d8	 mov	 rbx, rax

; 94   : }

  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5b		 pop	 rbx
  0005e	c3		 ret	 0
$LN26@PyMember_G:

; 23   :         break;
; 24   :     case T_SHORT:
; 25   :         v = PyLong_FromLong(*(short*)addr);

  0005f	0f bf 09	 movsx	 ecx, WORD PTR [rcx]
  00062	e8 00 00 00 00	 call	 PyLong_FromLong
  00067	48 8b d8	 mov	 rbx, rax

; 94   : }

  0006a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006e	5b		 pop	 rbx
  0006f	c3		 ret	 0
$LN25@PyMember_G:

; 26   :         break;
; 27   :     case T_USHORT:
; 28   :         v = PyLong_FromUnsignedLong(*(unsigned short*)addr);

  00070	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  00073	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
  00078	48 8b d8	 mov	 rbx, rax

; 94   : }

  0007b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007f	5b		 pop	 rbx
  00080	c3		 ret	 0
$LN24@PyMember_G:

; 29   :         break;
; 30   :     case T_INT:
; 31   :         v = PyLong_FromLong(*(int*)addr);

  00081	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00083	e8 00 00 00 00	 call	 PyLong_FromLong
  00088	48 8b d8	 mov	 rbx, rax

; 94   : }

  0008b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008f	5b		 pop	 rbx
  00090	c3		 ret	 0
$LN23@PyMember_G:

; 32   :         break;
; 33   :     case T_UINT:
; 34   :         v = PyLong_FromUnsignedLong(*(unsigned int*)addr);

  00091	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00093	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
  00098	48 8b d8	 mov	 rbx, rax

; 94   : }

  0009b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009f	5b		 pop	 rbx
  000a0	c3		 ret	 0
$LN20@PyMember_G:

; 35   :         break;
; 36   :     case T_LONG:
; 37   :         v = PyLong_FromLong(*(long*)addr);
; 38   :         break;
; 39   :     case T_ULONG:
; 40   :         v = PyLong_FromUnsignedLong(*(unsigned long*)addr);
; 41   :         break;
; 42   :     case T_PYSSIZET:
; 43   :         v = PyLong_FromSsize_t(*(Py_ssize_t*)addr);

  000a1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a4	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  000a9	48 8b d8	 mov	 rbx, rax

; 94   : }

  000ac	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b0	5b		 pop	 rbx
  000b1	c3		 ret	 0
$LN19@PyMember_G:

; 44   :         break;
; 45   :     case T_FLOAT:
; 46   :         v = PyFloat_FromDouble((double)*(float*)addr);

  000b2	66 0f 6e 01	 movd	 xmm0, DWORD PTR [rcx]
  000b6	0f 5a c0	 cvtps2pd xmm0, xmm0
  000b9	e8 00 00 00 00	 call	 PyFloat_FromDouble
  000be	48 8b d8	 mov	 rbx, rax

; 94   : }

  000c1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c5	5b		 pop	 rbx
  000c6	c3		 ret	 0
$LN18@PyMember_G:

; 47   :         break;
; 48   :     case T_DOUBLE:
; 49   :         v = PyFloat_FromDouble(*(double*)addr);

  000c7	f2 0f 10 01	 movsdx	 xmm0, QWORD PTR [rcx]
  000cb	e8 00 00 00 00	 call	 PyFloat_FromDouble
  000d0	48 8b d8	 mov	 rbx, rax

; 94   : }

  000d3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d7	5b		 pop	 rbx
  000d8	c3		 ret	 0
$LN17@PyMember_G:

; 50   :         break;
; 51   :     case T_STRING:
; 52   :         if (*(char**)addr == NULL) {

  000d9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000dc	48 85 c9	 test	 rcx, rcx

; 53   :             Py_INCREF(Py_None);
; 54   :             v = Py_None;
; 55   :         }
; 56   :         else

  000df	0f 84 85 00 00
	00		 je	 $LN2@PyMember_G
$LN16@PyMember_G:

; 57   :             v = PyUnicode_FromString(*(char**)addr);

  000e5	e8 00 00 00 00	 call	 PyUnicode_FromString
  000ea	48 8b d8	 mov	 rbx, rax

; 94   : }

  000ed	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f1	5b		 pop	 rbx
  000f2	c3		 ret	 0
$LN13@PyMember_G:

; 58   :         break;
; 59   :     case T_STRING_INPLACE:
; 60   :         v = PyUnicode_FromString((char*)addr);
; 61   :         break;
; 62   :     case T_CHAR:
; 63   :         v = PyUnicode_FromStringAndSize((char*)addr, 1);

  000f3	ba 01 00 00 00	 mov	 edx, 1
  000f8	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  000fd	48 8b d8	 mov	 rbx, rax

; 94   : }

  00100	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00104	5b		 pop	 rbx
  00105	c3		 ret	 0
$LN12@PyMember_G:

; 64   :         break;
; 65   :     case T_OBJECT:
; 66   :         v = *(PyObject **)addr;

  00106	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 67   :         if (v == NULL)

  00109	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00110	48 85 c0	 test	 rax, rax
  00113	48 0f 45 d8	 cmovne	 rbx, rax
$LN34@PyMember_G:

; 68   :             v = Py_None;
; 69   :         Py_INCREF(v);

  00117	48 8b cb	 mov	 rcx, rbx
  0011a	e8 00 00 00 00	 call	 _Py_IncRef

; 92   :     }
; 93   :     return v;

  0011f	48 8b c3	 mov	 rax, rbx

; 94   : }

  00122	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00126	5b		 pop	 rbx
  00127	c3		 ret	 0
$LN10@PyMember_G:

; 70   :         break;
; 71   :     case T_OBJECT_EX:
; 72   :         v = *(PyObject **)addr;

  00128	48 8b 19	 mov	 rbx, QWORD PTR [rcx]

; 73   :         if (v == NULL)

  0012b	48 85 db	 test	 rbx, rbx
  0012e	75 e7		 jne	 SHORT $LN34@PyMember_G

; 74   :             PyErr_SetString(PyExc_AttributeError, l->name);

  00130	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00133	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0013a	e8 00 00 00 00	 call	 PyErr_SetString

; 92   :     }
; 93   :     return v;

  0013f	48 8b c3	 mov	 rax, rbx

; 94   : }

  00142	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00146	5b		 pop	 rbx
  00147	c3		 ret	 0
$LN4@PyMember_G:

; 75   :         Py_XINCREF(v);
; 76   :         break;
; 77   : #ifdef HAVE_LONG_LONG
; 78   :     case T_LONGLONG:
; 79   :         v = PyLong_FromLongLong(*(PY_LONG_LONG *)addr);

  00148	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0014b	e8 00 00 00 00	 call	 PyLong_FromLongLong
  00150	48 8b d8	 mov	 rbx, rax

; 94   : }

  00153	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00157	5b		 pop	 rbx
  00158	c3		 ret	 0
$LN3@PyMember_G:

; 80   :         break;
; 81   :     case T_ULONGLONG:
; 82   :         v = PyLong_FromUnsignedLongLong(*(unsigned PY_LONG_LONG *)addr);

  00159	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0015c	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong
  00161	48 8b d8	 mov	 rbx, rax

; 94   : }

  00164	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00168	5b		 pop	 rbx
  00169	c3		 ret	 0
$LN2@PyMember_G:

; 83   :         break;
; 84   : #endif /* HAVE_LONG_LONG */
; 85   :     case T_NONE:
; 86   :         v = Py_None;

  0016a	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct

; 87   :         Py_INCREF(v);

  00171	48 8b cb	 mov	 rcx, rbx
  00174	e8 00 00 00 00	 call	 _Py_IncRef

; 92   :     }
; 93   :     return v;

  00179	48 8b c3	 mov	 rax, rbx

; 94   : }

  0017c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00180	5b		 pop	 rbx
  00181	c3		 ret	 0
$LN1@PyMember_G:

; 88   :         break;
; 89   :     default:
; 90   :         PyErr_SetString(PyExc_SystemError, "bad memberdescr type");

  00182	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00189	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@OMHGPBAM@bad?5memberdescr?5type?$AA@
  00190	e8 00 00 00 00	 call	 PyErr_SetString

; 91   :         v = NULL;

  00195	33 db		 xor	 ebx, ebx

; 92   :     }
; 93   :     return v;

  00197	8b c3		 mov	 eax, ebx

; 94   : }

  00199	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0019d	5b		 pop	 rbx
  0019e	c3		 ret	 0
  0019f	90		 npad	 1
$LN35@PyMember_G:
  001a0	00 00 00 00	 DD	 $LN26@PyMember_G
  001a4	00 00 00 00	 DD	 $LN24@PyMember_G
  001a8	00 00 00 00	 DD	 $LN24@PyMember_G
  001ac	00 00 00 00	 DD	 $LN19@PyMember_G
  001b0	00 00 00 00	 DD	 $LN18@PyMember_G
  001b4	00 00 00 00	 DD	 $LN17@PyMember_G
  001b8	00 00 00 00	 DD	 $LN12@PyMember_G
  001bc	00 00 00 00	 DD	 $LN13@PyMember_G
  001c0	00 00 00 00	 DD	 $LN28@PyMember_G
  001c4	00 00 00 00	 DD	 $LN27@PyMember_G
  001c8	00 00 00 00	 DD	 $LN25@PyMember_G
  001cc	00 00 00 00	 DD	 $LN23@PyMember_G
  001d0	00 00 00 00	 DD	 $LN23@PyMember_G
  001d4	00 00 00 00	 DD	 $LN16@PyMember_G
  001d8	00 00 00 00	 DD	 $LN29@PyMember_G
  001dc	00 00 00 00	 DD	 $LN1@PyMember_G
  001e0	00 00 00 00	 DD	 $LN10@PyMember_G
  001e4	00 00 00 00	 DD	 $LN4@PyMember_G
  001e8	00 00 00 00	 DD	 $LN3@PyMember_G
  001ec	00 00 00 00	 DD	 $LN20@PyMember_G
  001f0	00 00 00 00	 DD	 $LN2@PyMember_G
PyMember_GetOne ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@CFDFPIO@bad?5memberdescr?5type?5for?5?$CFs?$AA@ ; `string'
PUBLIC	__real@bff0000000000000
PUBLIC	??_C@_0CE@LOFDCFIJ@Truncation?5of?5value?5to?5unsigned?5@ ; `string'
PUBLIC	??_C@_0CL@BFDOFHCC@Writing?5negative?5value?5into?5unsi@ ; `string'
PUBLIC	??_C@_0BL@HDEENFHC@Truncation?5of?5value?5to?5int?$AA@ ; `string'
PUBLIC	??_C@_0CG@BHHGENBJ@Truncation?5of?5value?5to?5unsigned?5@ ; `string'
PUBLIC	??_C@_0BN@FNIDEKGE@Truncation?5of?5value?5to?5short?$AA@ ; `string'
PUBLIC	??_C@_0CF@PMOFFFDD@Truncation?5of?5value?5to?5unsigned?5@ ; `string'
PUBLIC	??_C@_0BM@NGEHGJFH@Truncation?5of?5value?5to?5char?$AA@ ; `string'
PUBLIC	??_C@_0CC@EJFJMAJD@attribute?5value?5type?5must?5be?5boo@ ; `string'
PUBLIC	??_C@_0CE@KCFPEPMK@can?8t?5delete?5numeric?1char?5attrib@ ; `string'
PUBLIC	??_C@_0BD@NCFELION@readonly?5attribute?$AA@	; `string'
PUBLIC	PyMember_SetOne
EXTRN	PyErr_Format:PROC
EXTRN	PyLong_AsUnsignedLongLong:PROC
EXTRN	PyLong_AsLongLong:PROC
EXTRN	PyErr_BadArgument:PROC
EXTRN	PyUnicode_AsUTF8AndSize:PROC
EXTRN	PyFloat_AsDouble:PROC
EXTRN	PyLong_AsSsize_t:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyLong_AsUnsignedLong:PROC
EXTRN	PyErr_WarnEx:PROC
EXTRN	PyExc_RuntimeWarning:QWORD
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsLong:PROC
EXTRN	_Py_TrueStruct:BYTE
EXTRN	PyBool_Type:BYTE
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMember_SetOne DD imagerel $LN109
	DD	imagerel $LN109+148
	DD	imagerel $unwind$PyMember_SetOne
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyMember_SetOne DD imagerel $LN109+148
	DD	imagerel $LN109+1328
	DD	imagerel $chain$1$PyMember_SetOne
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyMember_SetOne DD imagerel $LN109+1328
	DD	imagerel $LN109+1408
	DD	imagerel $chain$3$PyMember_SetOne
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyMember_SetOne DD 040021H
	DD	026800H
	DD	096400H
	DD	imagerel $LN109
	DD	imagerel $LN109+148
	DD	imagerel $unwind$PyMember_SetOne
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyMember_SetOne DD 040a21H
	DD	02680aH
	DD	096405H
	DD	imagerel $LN109
	DD	imagerel $LN109+148
	DD	imagerel $unwind$PyMember_SetOne
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMember_SetOne DD 040a01H
	DD	0a340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BM@CFDFPIO@bad?5memberdescr?5type?5for?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BM@CFDFPIO@bad?5memberdescr?5type?5for?5?$CFs?$AA@ DB 'bad memberd'
	DB	'escr type for %s', 00H			; `string'
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT ??_C@_0CE@LOFDCFIJ@Truncation?5of?5value?5to?5unsigned?5@
CONST	SEGMENT
??_C@_0CE@LOFDCFIJ@Truncation?5of?5value?5to?5unsigned?5@ DB 'Truncation '
	DB	'of value to unsigned int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@BFDOFHCC@Writing?5negative?5value?5into?5unsi@
CONST	SEGMENT
??_C@_0CL@BFDOFHCC@Writing?5negative?5value?5into?5unsi@ DB 'Writing nega'
	DB	'tive value into unsigned field', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HDEENFHC@Truncation?5of?5value?5to?5int?$AA@
CONST	SEGMENT
??_C@_0BL@HDEENFHC@Truncation?5of?5value?5to?5int?$AA@ DB 'Truncation of '
	DB	'value to int', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BHHGENBJ@Truncation?5of?5value?5to?5unsigned?5@
CONST	SEGMENT
??_C@_0CG@BHHGENBJ@Truncation?5of?5value?5to?5unsigned?5@ DB 'Truncation '
	DB	'of value to unsigned short', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FNIDEKGE@Truncation?5of?5value?5to?5short?$AA@
CONST	SEGMENT
??_C@_0BN@FNIDEKGE@Truncation?5of?5value?5to?5short?$AA@ DB 'Truncation o'
	DB	'f value to short', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PMOFFFDD@Truncation?5of?5value?5to?5unsigned?5@
CONST	SEGMENT
??_C@_0CF@PMOFFFDD@Truncation?5of?5value?5to?5unsigned?5@ DB 'Truncation '
	DB	'of value to unsigned char', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NGEHGJFH@Truncation?5of?5value?5to?5char?$AA@
CONST	SEGMENT
??_C@_0BM@NGEHGJFH@Truncation?5of?5value?5to?5char?$AA@ DB 'Truncation of'
	DB	' value to char', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EJFJMAJD@attribute?5value?5type?5must?5be?5boo@
CONST	SEGMENT
??_C@_0CC@EJFJMAJD@attribute?5value?5type?5must?5be?5boo@ DB 'attribute v'
	DB	'alue type must be bool', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KCFPEPMK@can?8t?5delete?5numeric?1char?5attrib@
CONST	SEGMENT
??_C@_0CE@KCFPEPMK@can?8t?5delete?5numeric?1char?5attrib@ DB 'can''t dele'
	DB	'te numeric/char attribute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NCFELION@readonly?5attribute?$AA@
CONST	SEGMENT
??_C@_0BD@NCFELION@readonly?5attribute?$AA@ DB 'readonly attribute', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyMember_SetOne
_TEXT	SEGMENT
len$20449 = 64
addr$ = 64
l$ = 72
v$ = 80
PyMember_SetOne PROC					; COMDAT

; 104  : {

$LN109:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	49 8b d8	 mov	 rbx, r8

; 105  :     PyObject *oldv;
; 106  : 
; 107  :     addr += l->offset;

  00010	48 03 7a 10	 add	 rdi, QWORD PTR [rdx+16]

; 108  : 
; 109  :     if ((l->flags & READONLY))

  00014	f6 42 18 01	 test	 BYTE PTR [rdx+24], 1
  00018	74 21		 je	 SHORT $LN100@PyMember_S

; 110  :     {
; 111  :         PyErr_SetString(PyExc_AttributeError, "readonly attribute");

  0001a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@NCFELION@readonly?5attribute?$AA@
  00028	e8 00 00 00 00	 call	 PyErr_SetString

; 112  :         return -1;

  0002d	83 c8 ff	 or	 eax, -1

; 296  : }

  00030	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00035	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00039	5f		 pop	 rdi
  0003a	c3		 ret	 0
$LN100@PyMember_S:

; 113  :     }
; 114  :     if (v == NULL) {

  0003b	48 85 db	 test	 rbx, rbx
  0003e	75 50		 jne	 SHORT $LN95@PyMember_S

; 115  :         if (l->type == T_OBJECT_EX) {

  00040	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  00043	83 f8 10	 cmp	 eax, 16
  00046	75 22		 jne	 SHORT $LN98@PyMember_S

; 116  :             /* Check if the attribute is set. */
; 117  :             if (*(PyObject **)addr == NULL) {

  00048	48 39 1f	 cmp	 QWORD PTR [rdi], rbx
  0004b	75 43		 jne	 SHORT $LN95@PyMember_S

; 118  :                 PyErr_SetString(PyExc_AttributeError, l->name);

  0004d	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00050	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00057	e8 00 00 00 00	 call	 PyErr_SetString

; 119  :                 return -1;

  0005c	83 c8 ff	 or	 eax, -1

; 296  : }

  0005f	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00064	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00068	5f		 pop	 rdi
  00069	c3		 ret	 0
$LN98@PyMember_S:

; 120  :             }
; 121  :         }
; 122  :         else if (l->type != T_OBJECT) {

  0006a	83 f8 06	 cmp	 eax, 6
  0006d	74 21		 je	 SHORT $LN95@PyMember_S

; 123  :             PyErr_SetString(PyExc_TypeError,
; 124  :                             "can't delete numeric/char attribute");

  0006f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@KCFPEPMK@can?8t?5delete?5numeric?1char?5attrib@
  0007d	e8 00 00 00 00	 call	 PyErr_SetString

; 125  :             return -1;

  00082	83 c8 ff	 or	 eax, -1

; 296  : }

  00085	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0008a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008e	5f		 pop	 rdi
  0008f	c3		 ret	 0
$LN95@PyMember_S:

; 126  :         }
; 127  :     }
; 128  :     switch (l->type) {

  00090	48 63 42 08	 movsxd	 rax, DWORD PTR [rdx+8]
  00094	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  00099	0f 29 74 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm6
  0009e	83 f8 13	 cmp	 eax, 19
  000a1	0f 87 5b 04 00
	00		 ja	 $LN1@PyMember_S
  000a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:__ImageBase
  000ae	41 8b 8c 80 00
	00 00 00	 mov	 ecx, DWORD PTR $LN103@PyMember_S[r8+rax*4]
  000b6	49 03 c8	 add	 rcx, r8
  000b9	ff e1		 jmp	 rcx
$LN92@PyMember_S:

; 129  :     case T_BOOL:{
; 130  :         if (!PyBool_Check(v)) {

  000bb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBool_Type
  000c2	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  000c6	74 18		 je	 SHORT $LN91@PyMember_S

; 131  :             PyErr_SetString(PyExc_TypeError,
; 132  :                             "attribute value type must be bool");

  000c8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@EJFJMAJD@attribute?5value?5type?5must?5be?5boo@
  000d6	e8 00 00 00 00	 call	 PyErr_SetString

; 133  :             return -1;

  000db	e9 38 04 00 00	 jmp	 $LN106@PyMember_S
$LN91@PyMember_S:

; 134  :         }
; 135  :         if (v == Py_True)

  000e0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000e7	48 3b d8	 cmp	 rbx, rax
  000ea	0f 94 c0	 sete	 al
  000ed	88 07		 mov	 BYTE PTR [rdi], al

; 294  :     }
; 295  :     return 0;

  000ef	33 c0		 xor	 eax, eax
  000f1	e9 25 04 00 00	 jmp	 $LN105@PyMember_S
$LN88@PyMember_S:

; 136  :             *(char*)addr = (char) 1;
; 137  :         else
; 138  :             *(char*)addr = (char) 0;
; 139  :         break;
; 140  :         }
; 141  :     case T_BYTE:{
; 142  :         long long_val = PyLong_AsLong(v);

  000f6	48 8b cb	 mov	 rcx, rbx
  000f9	e8 00 00 00 00	 call	 PyLong_AsLong
  000fe	8b d8		 mov	 ebx, eax

; 143  :         if ((long_val == -1) && PyErr_Occurred())

  00100	83 f8 ff	 cmp	 eax, -1
  00103	75 0e		 jne	 SHORT $LN87@PyMember_S
  00105	e8 00 00 00 00	 call	 PyErr_Occurred
  0010a	48 85 c0	 test	 rax, rax

; 144  :             return -1;

  0010d	0f 85 05 04 00
	00		 jne	 $LN106@PyMember_S
$LN87@PyMember_S:

; 145  :         *(char*)addr = (char)long_val;

  00113	88 1f		 mov	 BYTE PTR [rdi], bl

; 146  :         /* XXX: For compatibility, only warn about truncations
; 147  :            for now. */
; 148  :         if ((long_val > CHAR_MAX) || (long_val < CHAR_MIN))

  00115	83 fb 7f	 cmp	 ebx, 127		; 0000007fH
  00118	7f 09		 jg	 SHORT $LN84@PyMember_S
  0011a	83 fb 80	 cmp	 ebx, -128		; ffffffffffffff80H
  0011d	0f 8d db 03 00
	00		 jge	 $LN2@PyMember_S
$LN84@PyMember_S:

; 149  :             WARN("Truncation of value to char");

  00123	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  0012a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@NGEHGJFH@Truncation?5of?5value?5to?5char?$AA@
  00131	41 b8 01 00 00
	00		 mov	 r8d, 1
  00137	e8 00 00 00 00	 call	 PyErr_WarnEx
  0013c	85 c0		 test	 eax, eax
  0013e	0f 89 ba 03 00
	00		 jns	 $LN2@PyMember_S
  00144	e9 cf 03 00 00	 jmp	 $LN106@PyMember_S
$LN80@PyMember_S:

; 150  :         break;
; 151  :         }
; 152  :     case T_UBYTE:{
; 153  :         long long_val = PyLong_AsLong(v);

  00149	48 8b cb	 mov	 rcx, rbx
  0014c	e8 00 00 00 00	 call	 PyLong_AsLong
  00151	8b d8		 mov	 ebx, eax

; 154  :         if ((long_val == -1) && PyErr_Occurred())

  00153	83 f8 ff	 cmp	 eax, -1
  00156	75 0e		 jne	 SHORT $LN79@PyMember_S
  00158	e8 00 00 00 00	 call	 PyErr_Occurred
  0015d	48 85 c0	 test	 rax, rax

; 155  :             return -1;

  00160	0f 85 b2 03 00
	00		 jne	 $LN106@PyMember_S
$LN79@PyMember_S:

; 156  :         *(unsigned char*)addr = (unsigned char)long_val;

  00166	88 1f		 mov	 BYTE PTR [rdi], bl

; 157  :         if ((long_val > UCHAR_MAX) || (long_val < 0))

  00168	81 fb ff 00 00
	00		 cmp	 ebx, 255		; 000000ffH
  0016e	7f 08		 jg	 SHORT $LN76@PyMember_S
  00170	85 db		 test	 ebx, ebx
  00172	0f 89 86 03 00
	00		 jns	 $LN2@PyMember_S
$LN76@PyMember_S:

; 158  :             WARN("Truncation of value to unsigned char");

  00178	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  0017f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@PMOFFFDD@Truncation?5of?5value?5to?5unsigned?5@
  00186	41 b8 01 00 00
	00		 mov	 r8d, 1
  0018c	e8 00 00 00 00	 call	 PyErr_WarnEx
  00191	85 c0		 test	 eax, eax
  00193	0f 89 65 03 00
	00		 jns	 $LN2@PyMember_S
  00199	e9 7a 03 00 00	 jmp	 $LN106@PyMember_S
$LN72@PyMember_S:

; 159  :         break;
; 160  :         }
; 161  :     case T_SHORT:{
; 162  :         long long_val = PyLong_AsLong(v);

  0019e	48 8b cb	 mov	 rcx, rbx
  001a1	e8 00 00 00 00	 call	 PyLong_AsLong
  001a6	8b d8		 mov	 ebx, eax

; 163  :         if ((long_val == -1) && PyErr_Occurred())

  001a8	83 f8 ff	 cmp	 eax, -1
  001ab	75 0e		 jne	 SHORT $LN71@PyMember_S
  001ad	e8 00 00 00 00	 call	 PyErr_Occurred
  001b2	48 85 c0	 test	 rax, rax

; 164  :             return -1;

  001b5	0f 85 5d 03 00
	00		 jne	 $LN106@PyMember_S
$LN71@PyMember_S:

; 165  :         *(short*)addr = (short)long_val;

  001bb	66 89 1f	 mov	 WORD PTR [rdi], bx

; 166  :         if ((long_val > SHRT_MAX) || (long_val < SHRT_MIN))

  001be	81 fb ff 7f 00
	00		 cmp	 ebx, 32767		; 00007fffH
  001c4	7f 0c		 jg	 SHORT $LN68@PyMember_S
  001c6	81 fb 00 80 ff
	ff		 cmp	 ebx, -32768		; ffffffffffff8000H
  001cc	0f 8d 2c 03 00
	00		 jge	 $LN2@PyMember_S
$LN68@PyMember_S:

; 167  :             WARN("Truncation of value to short");

  001d2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  001d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@FNIDEKGE@Truncation?5of?5value?5to?5short?$AA@
  001e0	41 b8 01 00 00
	00		 mov	 r8d, 1
  001e6	e8 00 00 00 00	 call	 PyErr_WarnEx
  001eb	85 c0		 test	 eax, eax
  001ed	0f 89 0b 03 00
	00		 jns	 $LN2@PyMember_S
  001f3	e9 20 03 00 00	 jmp	 $LN106@PyMember_S
$LN64@PyMember_S:

; 168  :         break;
; 169  :         }
; 170  :     case T_USHORT:{
; 171  :         long long_val = PyLong_AsLong(v);

  001f8	48 8b cb	 mov	 rcx, rbx
  001fb	e8 00 00 00 00	 call	 PyLong_AsLong
  00200	8b d8		 mov	 ebx, eax

; 172  :         if ((long_val == -1) && PyErr_Occurred())

  00202	83 f8 ff	 cmp	 eax, -1
  00205	75 0e		 jne	 SHORT $LN63@PyMember_S
  00207	e8 00 00 00 00	 call	 PyErr_Occurred
  0020c	48 85 c0	 test	 rax, rax

; 173  :             return -1;

  0020f	0f 85 03 03 00
	00		 jne	 $LN106@PyMember_S
$LN63@PyMember_S:

; 174  :         *(unsigned short*)addr = (unsigned short)long_val;

  00215	66 89 1f	 mov	 WORD PTR [rdi], bx

; 175  :         if ((long_val > USHRT_MAX) || (long_val < 0))

  00218	81 fb ff ff 00
	00		 cmp	 ebx, 65535		; 0000ffffH
  0021e	7f 08		 jg	 SHORT $LN60@PyMember_S
  00220	85 db		 test	 ebx, ebx
  00222	0f 89 d6 02 00
	00		 jns	 $LN2@PyMember_S
$LN60@PyMember_S:

; 176  :             WARN("Truncation of value to unsigned short");

  00228	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  0022f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BHHGENBJ@Truncation?5of?5value?5to?5unsigned?5@
  00236	41 b8 01 00 00
	00		 mov	 r8d, 1
  0023c	e8 00 00 00 00	 call	 PyErr_WarnEx
  00241	85 c0		 test	 eax, eax
  00243	0f 89 b5 02 00
	00		 jns	 $LN2@PyMember_S
  00249	e9 ca 02 00 00	 jmp	 $LN106@PyMember_S
$LN56@PyMember_S:

; 177  :         break;
; 178  :         }
; 179  :     case T_INT:{
; 180  :         long long_val = PyLong_AsLong(v);

  0024e	48 8b cb	 mov	 rcx, rbx
  00251	e8 00 00 00 00	 call	 PyLong_AsLong
  00256	8b d8		 mov	 ebx, eax

; 181  :         if ((long_val == -1) && PyErr_Occurred())

  00258	83 f8 ff	 cmp	 eax, -1
  0025b	75 0e		 jne	 SHORT $LN55@PyMember_S
  0025d	e8 00 00 00 00	 call	 PyErr_Occurred
  00262	48 85 c0	 test	 rax, rax

; 182  :             return -1;

  00265	0f 85 ad 02 00
	00		 jne	 $LN106@PyMember_S
$LN55@PyMember_S:

; 183  :         *(int *)addr = (int)long_val;

  0026b	89 1f		 mov	 DWORD PTR [rdi], ebx

; 184  :         if ((long_val > INT_MAX) || (long_val < INT_MIN))

  0026d	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00273	7f 0c		 jg	 SHORT $LN52@PyMember_S
  00275	81 fb 00 00 00
	80		 cmp	 ebx, -2147483648	; ffffffff80000000H
  0027b	0f 8d 7d 02 00
	00		 jge	 $LN2@PyMember_S
$LN52@PyMember_S:

; 185  :             WARN("Truncation of value to int");

  00281	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  00288	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@HDEENFHC@Truncation?5of?5value?5to?5int?$AA@
  0028f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00295	e8 00 00 00 00	 call	 PyErr_WarnEx
  0029a	85 c0		 test	 eax, eax
  0029c	0f 89 5c 02 00
	00		 jns	 $LN2@PyMember_S
  002a2	e9 71 02 00 00	 jmp	 $LN106@PyMember_S
$LN48@PyMember_S:

; 186  :         break;
; 187  :         }
; 188  :     case T_UINT:{
; 189  :         unsigned long ulong_val = PyLong_AsUnsignedLong(v);

  002a7	48 8b cb	 mov	 rcx, rbx
  002aa	e8 00 00 00 00	 call	 PyLong_AsUnsignedLong
  002af	8b f0		 mov	 esi, eax

; 190  :         if ((ulong_val == (unsigned long)-1) && PyErr_Occurred()) {

  002b1	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  002b4	75 50		 jne	 SHORT $LN47@PyMember_S
  002b6	e8 00 00 00 00	 call	 PyErr_Occurred
  002bb	48 85 c0	 test	 rax, rax
  002be	74 46		 je	 SHORT $LN47@PyMember_S

; 191  :             /* XXX: For compatibility, accept negative int values
; 192  :                as well. */
; 193  :             PyErr_Clear();

  002c0	e8 00 00 00 00	 call	 PyErr_Clear

; 194  :             ulong_val = PyLong_AsLong(v);

  002c5	48 8b cb	 mov	 rcx, rbx
  002c8	e8 00 00 00 00	 call	 PyLong_AsLong
  002cd	8b f0		 mov	 esi, eax

; 195  :             if ((ulong_val == (unsigned long)-1) &&
; 196  :                 PyErr_Occurred())

  002cf	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  002d2	75 0e		 jne	 SHORT $LN46@PyMember_S
  002d4	e8 00 00 00 00	 call	 PyErr_Occurred
  002d9	48 85 c0	 test	 rax, rax

; 197  :                 return -1;

  002dc	0f 85 36 02 00
	00		 jne	 $LN106@PyMember_S
$LN46@PyMember_S:

; 198  :             *(unsigned int *)addr = (unsigned int)ulong_val;

  002e2	89 37		 mov	 DWORD PTR [rdi], esi

; 199  :             WARN("Writing negative value into unsigned field");

  002e4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  002eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@BFDOFHCC@Writing?5negative?5value?5into?5unsi@
  002f2	41 b8 01 00 00
	00		 mov	 r8d, 1
  002f8	e8 00 00 00 00	 call	 PyErr_WarnEx
  002fd	85 c0		 test	 eax, eax
  002ff	79 07		 jns	 SHORT $LN41@PyMember_S
  00301	e9 12 02 00 00	 jmp	 $LN106@PyMember_S
$LN47@PyMember_S:

; 200  :         } else
; 201  :             *(unsigned int *)addr = (unsigned int)ulong_val;

  00306	89 37		 mov	 DWORD PTR [rdi], esi
$LN41@PyMember_S:

; 202  :         if (ulong_val > UINT_MAX)

  00308	83 fe ff	 cmp	 esi, -1			; ffffffffH
  0030b	0f 86 ed 01 00
	00		 jbe	 $LN2@PyMember_S

; 203  :             WARN("Truncation of value to unsigned int");

  00311	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  00318	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@LOFDCFIJ@Truncation?5of?5value?5to?5unsigned?5@
  0031f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00325	e8 00 00 00 00	 call	 PyErr_WarnEx
  0032a	85 c0		 test	 eax, eax
  0032c	0f 89 cc 01 00
	00		 jns	 $LN2@PyMember_S
  00332	e9 e1 01 00 00	 jmp	 $LN106@PyMember_S
$LN35@PyMember_S:

; 204  :         break;
; 205  :         }
; 206  :     case T_LONG:{
; 207  :         *(long*)addr = PyLong_AsLong(v);

  00337	48 8b cb	 mov	 rcx, rbx
  0033a	e8 00 00 00 00	 call	 PyLong_AsLong
  0033f	89 07		 mov	 DWORD PTR [rdi], eax

; 208  :         if ((*(long*)addr == -1) && PyErr_Occurred())

  00341	83 f8 ff	 cmp	 eax, -1
  00344	0f 85 b4 01 00
	00		 jne	 $LN2@PyMember_S
  0034a	e8 00 00 00 00	 call	 PyErr_Occurred
  0034f	48 85 c0	 test	 rax, rax
  00352	0f 84 a6 01 00
	00		 je	 $LN2@PyMember_S

; 209  :             return -1;

  00358	e9 bb 01 00 00	 jmp	 $LN106@PyMember_S
$LN33@PyMember_S:

; 210  :         break;
; 211  :         }
; 212  :     case T_ULONG:{
; 213  :         *(unsigned long*)addr = PyLong_AsUnsignedLong(v);

  0035d	48 8b cb	 mov	 rcx, rbx
  00360	e8 00 00 00 00	 call	 PyLong_AsUnsignedLong
  00365	89 07		 mov	 DWORD PTR [rdi], eax

; 214  :         if ((*(unsigned long*)addr == (unsigned long)-1)
; 215  :             && PyErr_Occurred()) {

  00367	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  0036a	0f 85 8e 01 00
	00		 jne	 $LN2@PyMember_S
  00370	e8 00 00 00 00	 call	 PyErr_Occurred
  00375	48 85 c0	 test	 rax, rax
  00378	0f 84 80 01 00
	00		 je	 $LN2@PyMember_S

; 216  :             /* XXX: For compatibility, accept negative int values
; 217  :                as well. */
; 218  :             PyErr_Clear();

  0037e	e8 00 00 00 00	 call	 PyErr_Clear

; 219  :             *(unsigned long*)addr = PyLong_AsLong(v);

  00383	48 8b cb	 mov	 rcx, rbx
  00386	e8 00 00 00 00	 call	 PyLong_AsLong
  0038b	89 07		 mov	 DWORD PTR [rdi], eax

; 220  :             if ((*(unsigned long*)addr == (unsigned long)-1)
; 221  :                 && PyErr_Occurred())

  0038d	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  00390	75 0e		 jne	 SHORT $LN30@PyMember_S
  00392	e8 00 00 00 00	 call	 PyErr_Occurred
  00397	48 85 c0	 test	 rax, rax

; 222  :                 return -1;

  0039a	0f 85 78 01 00
	00		 jne	 $LN106@PyMember_S
$LN30@PyMember_S:

; 223  :             WARN("Writing negative value into unsigned field");

  003a0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  003a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@BFDOFHCC@Writing?5negative?5value?5into?5unsi@
  003ae	41 b8 01 00 00
	00		 mov	 r8d, 1
  003b4	e8 00 00 00 00	 call	 PyErr_WarnEx
  003b9	85 c0		 test	 eax, eax
  003bb	0f 89 3d 01 00
	00		 jns	 $LN2@PyMember_S
  003c1	e9 52 01 00 00	 jmp	 $LN106@PyMember_S
$LN26@PyMember_S:

; 224  :         }
; 225  :         break;
; 226  :         }
; 227  :     case T_PYSSIZET:{
; 228  :         *(Py_ssize_t*)addr = PyLong_AsSsize_t(v);

  003c6	48 8b cb	 mov	 rcx, rbx
  003c9	e8 00 00 00 00	 call	 PyLong_AsSsize_t
$LN108@PyMember_S:
  003ce	48 89 07	 mov	 QWORD PTR [rdi], rax

; 229  :         if ((*(Py_ssize_t*)addr == (Py_ssize_t)-1)
; 230  :             && PyErr_Occurred())

  003d1	48 83 f8 ff	 cmp	 rax, -1
  003d5	0f 85 23 01 00
	00		 jne	 $LN2@PyMember_S
  003db	e8 00 00 00 00	 call	 PyErr_Occurred
  003e0	48 85 c0	 test	 rax, rax
  003e3	0f 84 15 01 00
	00		 je	 $LN2@PyMember_S

; 231  :                         return -1;

  003e9	e9 2a 01 00 00	 jmp	 $LN106@PyMember_S
$LN24@PyMember_S:

; 232  :         break;
; 233  :         }
; 234  :     case T_FLOAT:{
; 235  :         double double_val = PyFloat_AsDouble(v);

  003ee	48 8b cb	 mov	 rcx, rbx
  003f1	e8 00 00 00 00	 call	 PyFloat_AsDouble

; 236  :         if ((double_val == -1) && PyErr_Occurred())

  003f6	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  003fe	66 0f 28 f0	 movapd	 xmm6, xmm0
  00402	7a 10		 jp	 SHORT $LN23@PyMember_S
  00404	75 0e		 jne	 SHORT $LN23@PyMember_S
  00406	e8 00 00 00 00	 call	 PyErr_Occurred
  0040b	48 85 c0	 test	 rax, rax

; 237  :             return -1;

  0040e	0f 85 04 01 00
	00		 jne	 $LN106@PyMember_S
$LN23@PyMember_S:

; 238  :         *(float*)addr = (float)double_val;

  00414	f2 0f 5a c6	 cvtsd2ss xmm0, xmm6

; 294  :     }
; 295  :     return 0;

  00418	33 c0		 xor	 eax, eax
  0041a	f3 0f 11 07	 movss	 DWORD PTR [rdi], xmm0
  0041e	e9 f8 00 00 00	 jmp	 $LN105@PyMember_S
$LN22@PyMember_S:

; 239  :         break;
; 240  :         }
; 241  :     case T_DOUBLE:
; 242  :         *(double*)addr = PyFloat_AsDouble(v);

  00423	48 8b cb	 mov	 rcx, rbx
  00426	e8 00 00 00 00	 call	 PyFloat_AsDouble

; 243  :         if ((*(double*)addr == -1) && PyErr_Occurred())

  0042b	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  00433	f2 0f 11 07	 movsdx	 QWORD PTR [rdi], xmm0
  00437	0f 8a c1 00 00
	00		 jp	 $LN2@PyMember_S
  0043d	0f 85 bb 00 00
	00		 jne	 $LN2@PyMember_S
  00443	e8 00 00 00 00	 call	 PyErr_Occurred
  00448	48 85 c0	 test	 rax, rax
  0044b	0f 84 ad 00 00
	00		 je	 $LN2@PyMember_S

; 244  :             return -1;

  00451	e9 c2 00 00 00	 jmp	 $LN106@PyMember_S
$LN19@PyMember_S:

; 245  :         break;
; 246  :     case T_OBJECT:
; 247  :     case T_OBJECT_EX:
; 248  :         Py_XINCREF(v);

  00456	48 85 db	 test	 rbx, rbx
  00459	74 08		 je	 SHORT $LN18@PyMember_S
  0045b	48 8b cb	 mov	 rcx, rbx
  0045e	e8 00 00 00 00	 call	 _Py_IncRef
$LN18@PyMember_S:

; 249  :         oldv = *(PyObject **)addr;

  00463	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]

; 250  :         *(PyObject **)addr = v;

  00466	48 89 1f	 mov	 QWORD PTR [rdi], rbx

; 251  :         Py_XDECREF(oldv);

  00469	48 85 c9	 test	 rcx, rcx
  0046c	0f 84 8c 00 00
	00		 je	 $LN2@PyMember_S
  00472	e8 00 00 00 00	 call	 _Py_DecRef

; 294  :     }
; 295  :     return 0;

  00477	33 c0		 xor	 eax, eax
  00479	e9 9d 00 00 00	 jmp	 $LN105@PyMember_S
$LN11@PyMember_S:

; 252  :         break;
; 253  :     case T_CHAR: {
; 254  :         char *string;
; 255  :         Py_ssize_t len;
; 256  : 
; 257  :         string = _PyUnicode_AsStringAndSize(v, &len);

  0047e	48 8d 54 24 40	 lea	 rdx, QWORD PTR len$20449[rsp]
  00483	48 8b cb	 mov	 rcx, rbx
  00486	e8 00 00 00 00	 call	 PyUnicode_AsUTF8AndSize

; 258  :         if (string == NULL || len != 1) {

  0048b	48 85 c0	 test	 rax, rax
  0048e	74 11		 je	 SHORT $LN9@PyMember_S
  00490	48 83 7c 24 40
	01		 cmp	 QWORD PTR len$20449[rsp], 1
  00496	75 09		 jne	 SHORT $LN9@PyMember_S

; 261  :         }
; 262  :         *(char*)addr = string[0];

  00498	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0049b	88 07		 mov	 BYTE PTR [rdi], al

; 294  :     }
; 295  :     return 0;

  0049d	33 c0		 xor	 eax, eax
  0049f	eb 7a		 jmp	 SHORT $LN105@PyMember_S
$LN9@PyMember_S:

; 259  :             PyErr_BadArgument();

  004a1	e8 00 00 00 00	 call	 PyErr_BadArgument

; 260  :             return -1;

  004a6	eb 70		 jmp	 SHORT $LN106@PyMember_S
$LN8@PyMember_S:

; 263  :         break;
; 264  :         }
; 265  :     case T_STRING:
; 266  :     case T_STRING_INPLACE:
; 267  :         PyErr_SetString(PyExc_TypeError, "readonly attribute");

  004a8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  004af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@NCFELION@readonly?5attribute?$AA@
  004b6	e8 00 00 00 00	 call	 PyErr_SetString

; 268  :         return -1;

  004bb	eb 5b		 jmp	 SHORT $LN106@PyMember_S
$LN7@PyMember_S:

; 269  : #ifdef HAVE_LONG_LONG
; 270  :     case T_LONGLONG:{
; 271  :         PY_LONG_LONG value;
; 272  :         *(PY_LONG_LONG*)addr = value = PyLong_AsLongLong(v);

  004bd	48 8b cb	 mov	 rcx, rbx
  004c0	e8 00 00 00 00	 call	 PyLong_AsLongLong

; 273  :         if ((value == -1) && PyErr_Occurred())
; 274  :             return -1;

  004c5	e9 04 ff ff ff	 jmp	 $LN108@PyMember_S
$LN5@PyMember_S:

; 275  :         break;
; 276  :         }
; 277  :     case T_ULONGLONG:{
; 278  :         unsigned PY_LONG_LONG value;
; 279  :         /* ??? PyLong_AsLongLong accepts an int, but PyLong_AsUnsignedLongLong
; 280  :             doesn't ??? */
; 281  :         if (PyLong_Check(v))

  004ca	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 282  :             *(unsigned PY_LONG_LONG*)addr = value = PyLong_AsUnsignedLongLong(v);

  004ce	48 8b cb	 mov	 rcx, rbx
  004d1	f7 80 00 01 00
	00 00 00 00 01	 test	 DWORD PTR [rax+256], 16777216 ; 01000000H
  004db	74 07		 je	 SHORT $LN4@PyMember_S
  004dd	e8 00 00 00 00	 call	 PyLong_AsUnsignedLongLong

; 283  :         else

  004e2	eb 07		 jmp	 SHORT $LN107@PyMember_S
$LN4@PyMember_S:

; 284  :             *(unsigned PY_LONG_LONG*)addr = value = PyLong_AsLong(v);

  004e4	e8 00 00 00 00	 call	 PyLong_AsLong
  004e9	48 98		 cdqe
$LN107@PyMember_S:
  004eb	48 89 07	 mov	 QWORD PTR [rdi], rax

; 285  :         if ((value == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())

  004ee	48 83 f8 ff	 cmp	 rax, -1
  004f2	75 0a		 jne	 SHORT $LN2@PyMember_S
  004f4	e8 00 00 00 00	 call	 PyErr_Occurred
  004f9	48 85 c0	 test	 rax, rax

; 286  :             return -1;

  004fc	75 1a		 jne	 SHORT $LN106@PyMember_S
$LN2@PyMember_S:

; 294  :     }
; 295  :     return 0;

  004fe	33 c0		 xor	 eax, eax
  00500	eb 19		 jmp	 SHORT $LN105@PyMember_S
$LN1@PyMember_S:

; 287  :         break;
; 288  :         }
; 289  : #endif /* HAVE_LONG_LONG */
; 290  :     default:
; 291  :         PyErr_Format(PyExc_SystemError,
; 292  :                      "bad memberdescr type for %s", l->name);

  00502	4c 8b 02	 mov	 r8, QWORD PTR [rdx]
  00505	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0050c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@CFDFPIO@bad?5memberdescr?5type?5for?5?$CFs?$AA@
  00513	e8 00 00 00 00	 call	 PyErr_Format
$LN106@PyMember_S:

; 293  :         return -1;

  00518	83 c8 ff	 or	 eax, -1
$LN105@PyMember_S:
  0051b	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00520	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]

; 296  : }

  00525	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0052a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0052e	5f		 pop	 rdi
  0052f	c3		 ret	 0
$LN103@PyMember_S:
  00530	00 00 00 00	 DD	 $LN72@PyMember_S
  00534	00 00 00 00	 DD	 $LN56@PyMember_S
  00538	00 00 00 00	 DD	 $LN35@PyMember_S
  0053c	00 00 00 00	 DD	 $LN24@PyMember_S
  00540	00 00 00 00	 DD	 $LN22@PyMember_S
  00544	00 00 00 00	 DD	 $LN8@PyMember_S
  00548	00 00 00 00	 DD	 $LN19@PyMember_S
  0054c	00 00 00 00	 DD	 $LN11@PyMember_S
  00550	00 00 00 00	 DD	 $LN88@PyMember_S
  00554	00 00 00 00	 DD	 $LN80@PyMember_S
  00558	00 00 00 00	 DD	 $LN64@PyMember_S
  0055c	00 00 00 00	 DD	 $LN48@PyMember_S
  00560	00 00 00 00	 DD	 $LN33@PyMember_S
  00564	00 00 00 00	 DD	 $LN8@PyMember_S
  00568	00 00 00 00	 DD	 $LN92@PyMember_S
  0056c	00 00 00 00	 DD	 $LN1@PyMember_S
  00570	00 00 00 00	 DD	 $LN19@PyMember_S
  00574	00 00 00 00	 DD	 $LN7@PyMember_S
  00578	00 00 00 00	 DD	 $LN5@PyMember_S
  0057c	00 00 00 00	 DD	 $LN26@PyMember_S
PyMember_SetOne ENDP
_TEXT	ENDS
END
