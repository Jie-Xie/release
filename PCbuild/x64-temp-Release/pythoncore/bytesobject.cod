; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@DKPNDJBA@bytes_iterator?$AA@		; `string'
PUBLIC	??_C@_0N@MOOGCAMH@__setstate__?$AA@		; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_0BA@BJLPBKGK@__length_hint__?$AA@		; `string'
PUBLIC	??_C@_05FBJAGGIG@bytes?$AA@			; `string'
PUBLIC	??_C@_09PAJHGGFL@__bytes__?$AA@			; `string'
PUBLIC	??_C@_06OEKOLKIL@source?$AA@			; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_05DMFNFMHA@zfill?$AA@			; `string'
PUBLIC	??_C@_05NECKJAMC@upper?$AA@			; `string'
PUBLIC	??_C@_09ODNGOEIO@translate?$AA@			; `string'
PUBLIC	??_C@_05PHLGJONK@title?$AA@			; `string'
PUBLIC	??_C@_08EDJLBCEI@swapcase?$AA@			; `string'
PUBLIC	??_C@_05GGNGIGHC@strip?$AA@			; `string'
PUBLIC	??_C@_0L@MPOGHCCL@startswith?$AA@		; `string'
PUBLIC	??_C@_0L@BCMGLLLC@splitlines?$AA@		; `string'
PUBLIC	??_C@_05EHPMMFBK@split?$AA@			; `string'
PUBLIC	??_C@_06DBIPDJKN@rstrip?$AA@			; `string'
PUBLIC	??_C@_06BAKFHKMF@rsplit?$AA@			; `string'
PUBLIC	??_C@_0L@KEEHLNKL@rpartition?$AA@		; `string'
PUBLIC	??_C@_05JKFAKHCP@rjust?$AA@			; `string'
PUBLIC	??_C@_06NCDOMFM@rindex?$AA@			; `string'
PUBLIC	??_C@_05BLFDIAHL@rfind?$AA@			; `string'
PUBLIC	??_C@_07CLEHDIEJ@replace?$AA@			; `string'
PUBLIC	??_C@_09IKAEIPAD@partition?$AA@			; `string'
PUBLIC	??_C@_09PBBLPCAA@maketrans?$AA@			; `string'
PUBLIC	??_C@_06GGONODO@lstrip?$AA@			; `string'
PUBLIC	??_C@_05IPJEPLHL@lower?$AA@			; `string'
PUBLIC	??_C@_05KDIMMEME@ljust?$AA@			; `string'
PUBLIC	??_C@_04DFGCDGNN@join?$AA@			; `string'
PUBLIC	??_C@_07BCOOJPCO@isupper?$AA@			; `string'
PUBLIC	??_C@_07DBHCJBDG@istitle?$AA@			; `string'
PUBLIC	??_C@_07CNBMLEON@isspace?$AA@			; `string'
PUBLIC	??_C@_07EJFAPEJH@islower?$AA@			; `string'
PUBLIC	??_C@_07CFBKIKCH@isdigit?$AA@			; `string'
PUBLIC	??_C@_07EGIOHHOB@isalpha?$AA@			; `string'
PUBLIC	??_C@_07EOADCIGC@isalnum?$AA@			; `string'
PUBLIC	??_C@_05FKHKFDID@index?$AA@			; `string'
PUBLIC	??_C@_07DIMGGDAC@fromhex?$AA@			; `string'
PUBLIC	??_C@_04CKFJHKAP@find?$AA@			; `string'
PUBLIC	??_C@_0L@DEOCELBD@expandtabs?$AA@		; `string'
PUBLIC	??_C@_08MLCMCPNP@endswith?$AA@			; `string'
PUBLIC	??_C@_06KPNAMAEI@decode?$AA@			; `string'
PUBLIC	??_C@_05IOMEMJEC@count?$AA@			; `string'
PUBLIC	??_C@_06BBLOAEEI@center?$AA@			; `string'
PUBLIC	??_C@_0L@NMODNBEH@capitalize?$AA@		; `string'
PUBLIC	??_C@_0P@BCBHENLA@__getnewargs__?$AA@		; `string'
PUBLIC	??_C@_08EMIAAFLA@keepends?$AA@			; `string'
PUBLIC	??_C@_06EOMHCNPI@errors?$AA@			; `string'
PUBLIC	??_C@_08MLPGAEIK@encoding?$AA@			; `string'
PUBLIC	??_C@_08HONNCIIN@maxsplit?$AA@			; `string'
PUBLIC	??_C@_03MGBCFPKM@sep?$AA@			; `string'
PUBLIC	??_C@_08NLCECJOD@?$HMO?3strip?$AA@		; `string'
PUBLIC	??_C@_09LGDKGINA@?$HMO?3rstrip?$AA@		; `string'
PUBLIC	??_C@_09IBNLIPED@?$HMO?3lstrip?$AA@		; `string'
PUBLIC	PyBytes_Type
PUBLIC	PyBytesIter_Type
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_Free:PROC
EXTRN	PyBaseObject_Type:BYTE
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
EXTRN	_Py_upper__doc__:BYTE
EXTRN	_Py_title__doc__:BYTE
EXTRN	_Py_swapcase__doc__:BYTE
EXTRN	_Py_maketrans__doc__:BYTE
EXTRN	_Py_lower__doc__:BYTE
EXTRN	_Py_isupper__doc__:BYTE
EXTRN	_Py_istitle__doc__:BYTE
EXTRN	_Py_isspace__doc__:BYTE
EXTRN	_Py_islower__doc__:BYTE
EXTRN	_Py_isdigit__doc__:BYTE
EXTRN	_Py_isalpha__doc__:BYTE
EXTRN	_Py_isalnum__doc__:BYTE
EXTRN	_Py_capitalize__doc__:BYTE
;	COMDAT ??_C@_0P@DKPNDJBA@bytes_iterator?$AA@
CONST	SEGMENT
??_C@_0P@DKPNDJBA@bytes_iterator?$AA@ DB 'bytes_iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOOGCAMH@__setstate__?$AA@
CONST	SEGMENT
??_C@_0N@MOOGCAMH@__setstate__?$AA@ DB '__setstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
CONST	SEGMENT
??_C@_0BA@BJLPBKGK@__length_hint__?$AA@ DB '__length_hint__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05FBJAGGIG@bytes?$AA@
CONST	SEGMENT
??_C@_05FBJAGGIG@bytes?$AA@ DB 'bytes', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___bytes__@?1??bytes_new@@9@9 DQ 0000000000000000H	; `bytes_new'::`2'::PyId___bytes__
	DQ	FLAT:??_C@_09PAJHGGFL@__bytes__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_09PAJHGGFL@__bytes__?$AA@
CONST	SEGMENT
??_C@_09PAJHGGFL@__bytes__?$AA@ DB '__bytes__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source?$AA@
CONST	SEGMENT
??_C@_06OEKOLKIL@source?$AA@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05DMFNFMHA@zfill?$AA@
CONST	SEGMENT
??_C@_05DMFNFMHA@zfill?$AA@ DB 'zfill', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NECKJAMC@upper?$AA@
CONST	SEGMENT
??_C@_05NECKJAMC@upper?$AA@ DB 'upper', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09ODNGOEIO@translate?$AA@
CONST	SEGMENT
??_C@_09ODNGOEIO@translate?$AA@ DB 'translate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05PHLGJONK@title?$AA@
CONST	SEGMENT
??_C@_05PHLGJONK@title?$AA@ DB 'title', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EDJLBCEI@swapcase?$AA@
CONST	SEGMENT
??_C@_08EDJLBCEI@swapcase?$AA@ DB 'swapcase', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GGNGIGHC@strip?$AA@
CONST	SEGMENT
??_C@_05GGNGIGHC@strip?$AA@ DB 'strip', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MPOGHCCL@startswith?$AA@
CONST	SEGMENT
??_C@_0L@MPOGHCCL@startswith?$AA@ DB 'startswith', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BCMGLLLC@splitlines?$AA@
CONST	SEGMENT
??_C@_0L@BCMGLLLC@splitlines?$AA@ DB 'splitlines', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EHPMMFBK@split?$AA@
CONST	SEGMENT
??_C@_05EHPMMFBK@split?$AA@ DB 'split', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DBIPDJKN@rstrip?$AA@
CONST	SEGMENT
??_C@_06DBIPDJKN@rstrip?$AA@ DB 'rstrip', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAKFHKMF@rsplit?$AA@
CONST	SEGMENT
??_C@_06BAKFHKMF@rsplit?$AA@ DB 'rsplit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KEEHLNKL@rpartition?$AA@
CONST	SEGMENT
??_C@_0L@KEEHLNKL@rpartition?$AA@ DB 'rpartition', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JKFAKHCP@rjust?$AA@
CONST	SEGMENT
??_C@_05JKFAKHCP@rjust?$AA@ DB 'rjust', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NCDOMFM@rindex?$AA@
CONST	SEGMENT
??_C@_06NCDOMFM@rindex?$AA@ DB 'rindex', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BLFDIAHL@rfind?$AA@
CONST	SEGMENT
??_C@_05BLFDIAHL@rfind?$AA@ DB 'rfind', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CLEHDIEJ@replace?$AA@
CONST	SEGMENT
??_C@_07CLEHDIEJ@replace?$AA@ DB 'replace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IKAEIPAD@partition?$AA@
CONST	SEGMENT
??_C@_09IKAEIPAD@partition?$AA@ DB 'partition', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PBBLPCAA@maketrans?$AA@
CONST	SEGMENT
??_C@_09PBBLPCAA@maketrans?$AA@ DB 'maketrans', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GGONODO@lstrip?$AA@
CONST	SEGMENT
??_C@_06GGONODO@lstrip?$AA@ DB 'lstrip', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IPJEPLHL@lower?$AA@
CONST	SEGMENT
??_C@_05IPJEPLHL@lower?$AA@ DB 'lower', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KDIMMEME@ljust?$AA@
CONST	SEGMENT
??_C@_05KDIMMEME@ljust?$AA@ DB 'ljust', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DFGCDGNN@join?$AA@
CONST	SEGMENT
??_C@_04DFGCDGNN@join?$AA@ DB 'join', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BCOOJPCO@isupper?$AA@
CONST	SEGMENT
??_C@_07BCOOJPCO@isupper?$AA@ DB 'isupper', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DBHCJBDG@istitle?$AA@
CONST	SEGMENT
??_C@_07DBHCJBDG@istitle?$AA@ DB 'istitle', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CNBMLEON@isspace?$AA@
CONST	SEGMENT
??_C@_07CNBMLEON@isspace?$AA@ DB 'isspace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EJFAPEJH@islower?$AA@
CONST	SEGMENT
??_C@_07EJFAPEJH@islower?$AA@ DB 'islower', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CFBKIKCH@isdigit?$AA@
CONST	SEGMENT
??_C@_07CFBKIKCH@isdigit?$AA@ DB 'isdigit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EGIOHHOB@isalpha?$AA@
CONST	SEGMENT
??_C@_07EGIOHHOB@isalpha?$AA@ DB 'isalpha', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EOADCIGC@isalnum?$AA@
CONST	SEGMENT
??_C@_07EOADCIGC@isalnum?$AA@ DB 'isalnum', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FKHKFDID@index?$AA@
CONST	SEGMENT
??_C@_05FKHKFDID@index?$AA@ DB 'index', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIMGGDAC@fromhex?$AA@
CONST	SEGMENT
??_C@_07DIMGGDAC@fromhex?$AA@ DB 'fromhex', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CKFJHKAP@find?$AA@
CONST	SEGMENT
??_C@_04CKFJHKAP@find?$AA@ DB 'find', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DEOCELBD@expandtabs?$AA@
CONST	SEGMENT
??_C@_0L@DEOCELBD@expandtabs?$AA@ DB 'expandtabs', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLCMCPNP@endswith?$AA@
CONST	SEGMENT
??_C@_08MLCMCPNP@endswith?$AA@ DB 'endswith', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06KPNAMAEI@decode?$AA@
CONST	SEGMENT
??_C@_06KPNAMAEI@decode?$AA@ DB 'decode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IOMEMJEC@count?$AA@
CONST	SEGMENT
??_C@_05IOMEMJEC@count?$AA@ DB 'count', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BBLOAEEI@center?$AA@
CONST	SEGMENT
??_C@_06BBLOAEEI@center?$AA@ DB 'center', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NMODNBEH@capitalize?$AA@
CONST	SEGMENT
??_C@_0L@NMODNBEH@capitalize?$AA@ DB 'capitalize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BCBHENLA@__getnewargs__?$AA@
CONST	SEGMENT
??_C@_0P@BCBHENLA@__getnewargs__?$AA@ DB '__getnewargs__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMIAAFLA@keepends?$AA@
CONST	SEGMENT
??_C@_08EMIAAFLA@keepends?$AA@ DB 'keepends', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOMHCNPI@errors?$AA@
CONST	SEGMENT
??_C@_06EOMHCNPI@errors?$AA@ DB 'errors', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLPGAEIK@encoding?$AA@
CONST	SEGMENT
??_C@_08MLPGAEIK@encoding?$AA@ DB 'encoding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HONNCIIN@maxsplit?$AA@
CONST	SEGMENT
??_C@_08HONNCIIN@maxsplit?$AA@ DB 'maxsplit', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGBCFPKM@sep?$AA@
CONST	SEGMENT
??_C@_03MGBCFPKM@sep?$AA@ DB 'sep', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08NLCECJOD@?$HMO?3strip?$AA@
CONST	SEGMENT
??_C@_08NLCECJOD@?$HMO?3strip?$AA@ DB '|O:strip', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LGDKGINA@?$HMO?3rstrip?$AA@
CONST	SEGMENT
??_C@_09LGDKGINA@?$HMO?3rstrip?$AA@ DB '|O:rstrip', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IBNLIPED@?$HMO?3lstrip?$AA@
CONST	SEGMENT
??_C@_09IBNLIPED@?$HMO?3lstrip?$AA@ DB '|O:lstrip', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
expandtabs__doc__ DB 'B.expandtabs([tabsize]) -> copy of B', 0aH, 0aH, 'R'
	DB	'eturn a copy of B where all tab characters are expanded using'
	DB	' spaces.', 0aH, 'If tabsize is not given, a tab size of 8 cha'
	DB	'racters is assumed.', 00H
	ORG $+3
ljust__doc__ DB	'B.ljust(width[, fillchar]) -> copy of B', 0aH, 0aH, 'Ret'
	DB	'urn B left justified in a string of length width. Padding is', 0aH
	DB	'done using the specified fill character (default is a space).'
	DB	00H
	ORG $+9
rjust__doc__ DB	'B.rjust(width[, fillchar]) -> copy of B', 0aH, 0aH, 'Ret'
	DB	'urn B right justified in a string of length width. Padding is'
	DB	0aH, 'done using the specified fill character (default is a sp'
	DB	'ace)', 00H
	ORG $+9
center__doc__ DB 'B.center(width[, fillchar]) -> copy of B', 0aH, 0aH, 'R'
	DB	'eturn B centered in a string of length width.  Padding is', 0aH
	DB	'done using the specified fill character (default is a space).'
	DB	00H
	ORG $+13
zfill__doc__ DB	'B.zfill(width) -> copy of B', 0aH, 0aH, 'Pad a numeric s'
	DB	'tring B with zeros on the left, to fill a field', 0aH, 'of th'
	DB	'e specified width.  B is never truncated.', 00H
	ORG $+5
bytes_as_sequence DQ FLAT:bytes_length
	DQ	FLAT:bytes_concat
	DQ	FLAT:bytes_repeat
	DQ	FLAT:bytes_item
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:bytes_contains
	ORG $+16
bytes_as_mapping DQ FLAT:bytes_length
	DQ	FLAT:bytes_subscript
	DQ	0000000000000000H
bytes_as_buffer DQ FLAT:bytes_buffer_getbuffer
	DQ	0000000000000000H
stripformat DQ	FLAT:??_C@_09IBNLIPED@?$HMO?3lstrip?$AA@
	DQ	FLAT:??_C@_09LGDKGINA@?$HMO?3rstrip?$AA@
	DQ	FLAT:??_C@_08NLCECJOD@?$HMO?3strip?$AA@
split__doc__ DB	'B.split(sep=None, maxsplit=-1) -> list of bytes', 0aH, 0aH
	DB	'Return a list of the sections in B, using sep as the delimite'
	DB	'r.', 0aH, 'If sep is not specified or is None, B is split on '
	DB	'ASCII whitespace', 0aH, 'characters (space, tab, return, newl'
	DB	'ine, formfeed, vertical tab).', 0aH, 'If maxsplit is given, a'
	DB	't most maxsplit splits are done.', 00H
	ORG $+2
?kwlist@?1??bytes_split@@9@9 DQ FLAT:??_C@_03MGBCFPKM@sep?$AA@ ; `bytes_split'::`2'::kwlist
	DQ	FLAT:??_C@_08HONNCIIN@maxsplit?$AA@
	DQ	0000000000000000H
	ORG $+8
partition__doc__ DB 'B.partition(sep) -> (head, sep, tail)', 0aH, 0aH, 'S'
	DB	'earch for the separator sep in B, and return the part before '
	DB	'it,', 0aH, 'the separator itself, and the part after it.  If '
	DB	'the separator is not', 0aH, 'found, returns B and two empty b'
	DB	'ytes objects.', 00H
	ORG $+3
rpartition__doc__ DB 'B.rpartition(sep) -> (head, sep, tail)', 0aH, 0aH, 'S'
	DB	'earch for the separator sep in B, starting at the end of B,', 0aH
	DB	'and return the part before it, the separator itself, and the', 0aH
	DB	'part after it.  If the separator is not found, returns two em'
	DB	'pty', 0aH, 'bytes objects and B.', 00H
	ORG $+8
rsplit__doc__ DB 'B.rsplit(sep=None, maxsplit=-1) -> list of bytes', 0aH, 0aH
	DB	'Return a list of the sections in B, using sep as the delimite'
	DB	'r,', 0aH, 'starting at the end of B and working to the front.'
	DB	0aH, 'If sep is not given, B is split on ASCII whitespace char'
	DB	'acters', 0aH, '(space, tab, return, newline, formfeed, vertic'
	DB	'al tab).', 0aH, 'If maxsplit is given, at most maxsplit split'
	DB	's are done.', 00H
	ORG $+5
?kwlist@?1??bytes_rsplit@@9@9 DQ FLAT:??_C@_03MGBCFPKM@sep?$AA@ ; `bytes_rsplit'::`2'::kwlist
	DQ	FLAT:??_C@_08HONNCIIN@maxsplit?$AA@
	DQ	0000000000000000H
join__doc__ DB	'B.join(iterable_of_bytes) -> bytes', 0aH, 0aH, 'Concaten'
	DB	'ate any number of bytes objects, with B in between each pair.'
	DB	0aH, 'Example: b''.''.join([b''ab'', b''pq'', b''rs'']) -> b'''
	DB	'ab.pq.rs''.', 00H
	ORG $+12
find__doc__ DB	'B.find(sub[, start[, end]]) -> int', 0aH, 0aH, 'Return t'
	DB	'he lowest index in B where substring sub is found,', 0aH, 'su'
	DB	'ch that sub is contained within B[start:end].  Optional', 0aH
	DB	'arguments start and end are interpreted as in slice notation.'
	DB	0aH, 0aH, 'Return -1 on failure.', 00H
	ORG $+2
index__doc__ DB	'B.index(sub[, start[, end]]) -> int', 0aH, 0aH, 'Like B.'
	DB	'find() but raise ValueError when the substring is not found.', 00H
	ORG $+7
rfind__doc__ DB	'B.rfind(sub[, start[, end]]) -> int', 0aH, 0aH, 'Return '
	DB	'the highest index in B where substring sub is found,', 0aH, 's'
	DB	'uch that sub is contained within B[start:end].  Optional', 0aH
	DB	'arguments start and end are interpreted as in slice notation.'
	DB	0aH, 0aH, 'Return -1 on failure.', 00H
rindex__doc__ DB 'B.rindex(sub[, start[, end]]) -> int', 0aH, 0aH, 'Like '
	DB	'B.rfind() but raise ValueError when the substring is not foun'
	DB	'd.', 00H
	ORG $+5
strip__doc__ DB	'B.strip([bytes]) -> bytes', 0aH, 0aH, 'Strip leading and'
	DB	' trailing bytes contained in the argument.', 0aH, 'If the arg'
	DB	'ument is omitted, strip leading and trailing ASCII whitespace'
	DB	'.', 00H
lstrip__doc__ DB 'B.lstrip([bytes]) -> bytes', 0aH, 0aH, 'Strip leading b'
	DB	'ytes contained in the argument.', 0aH, 'If the argument is om'
	DB	'itted, strip leading ASCII whitespace.', 00H
	ORG $+9
rstrip__doc__ DB 'B.rstrip([bytes]) -> bytes', 0aH, 0aH, 'Strip trailing '
	DB	'bytes contained in the argument.', 0aH, 'If the argument is o'
	DB	'mitted, strip trailing ASCII whitespace.', 00H
	ORG $+7
count__doc__ DB	'B.count(sub[, start[, end]]) -> int', 0aH, 0aH, 'Return '
	DB	'the number of non-overlapping occurrences of substring sub in'
	DB	0aH, 'string B[start:end].  Optional arguments start and end a'
	DB	're interpreted', 0aH, 'as in slice notation.', 00H
	ORG $+9
translate__doc__ DB 'B.translate(table[, deletechars]) -> bytes', 0aH, 0aH
	DB	'Return a copy of B, where all characters occurring in the', 0aH
	DB	'optional argument deletechars are removed, and the remaining', 0aH
	DB	'characters have been mapped through the given translation', 0aH
	DB	'table, which must be a bytes object of length 256.', 00H
replace__doc__ DB 'B.replace(old, new[, count]) -> bytes', 0aH, 0aH, 'Ret'
	DB	'urn a copy of B with all occurrences of subsection', 0aH, 'ol'
	DB	'd replaced by new.  If the optional argument count is', 0aH, 'g'
	DB	'iven, only first count occurances are replaced.', 00H
	ORG $+10
startswith__doc__ DB 'B.startswith(prefix[, start[, end]]) -> bool', 0aH, 0aH
	DB	'Return True if B starts with the specified prefix, False othe'
	DB	'rwise.', 0aH, 'With optional start, test B beginning at that '
	DB	'position.', 0aH, 'With optional end, stop comparing B at that'
	DB	' position.', 0aH, 'prefix can also be a tuple of bytes to try'
	DB	'.', 00H
	ORG $+4
endswith__doc__ DB 'B.endswith(suffix[, start[, end]]) -> bool', 0aH, 0aH
	DB	'Return True if B ends with the specified suffix, False otherw'
	DB	'ise.', 0aH, 'With optional start, test B beginning at that po'
	DB	'sition.', 0aH, 'With optional end, stop comparing B at that p'
	DB	'osition.', 0aH, 'suffix can also be a tuple of bytes to try.', 00H
	ORG $+8
decode__doc__ DB 'B.decode(encoding=''utf-8'', errors=''strict'') -> str', 0aH
	DB	0aH, 'Decode B using the codec registered for encoding. Defaul'
	DB	't encoding', 0aH, 'is ''utf-8''. errors may be given to set a'
	DB	' different error', 0aH, 'handling scheme.  Default is ''stric'
	DB	't'' meaning that encoding errors raise', 0aH, 'a UnicodeDecod'
	DB	'eError.  Other possible values are ''ignore'' and ''replace'''
	DB	0aH, 'as well as any other name registerd with codecs.register'
	DB	'_error that is', 0aH, 'able to handle UnicodeDecodeErrors.', 00H
	ORG $+4
?kwlist@?1??bytes_decode@@9@9 DQ FLAT:??_C@_08MLPGAEIK@encoding?$AA@ ; `bytes_decode'::`2'::kwlist
	DQ	FLAT:??_C@_06EOMHCNPI@errors?$AA@
	DQ	0000000000000000H
	ORG $+8
splitlines__doc__ DB 'B.splitlines([keepends]) -> list of lines', 0aH, 0aH
	DB	'Return a list of the lines in B, breaking at line boundaries.'
	DB	0aH, 'Line breaks are not included in the resulting list unles'
	DB	's keepends', 0aH, 'is given and true.', 00H
	ORG $+1
?kwlist@?1??bytes_splitlines@@9@9 DQ FLAT:??_C@_08EMIAAFLA@keepends?$AA@ ; `bytes_splitlines'::`2'::kwlist
	DQ	0000000000000000H
fromhex_doc DB	'bytes.fromhex(string) -> bytes', 0aH, 0aH, 'Create a byt'
	DB	'es object from a string of hexadecimal numbers.', 0aH, 'Space'
	DB	's between two numbers are accepted.', 0aH, 'Example: bytes.fr'
	DB	'omhex(''B9 01EF'') -> b''\xb9\x01\xef''.', 00H
	ORG $+5
sizeof__doc__ DB 'B.__sizeof__() -> size of B in memory, in bytes', 00H
bytes_methods DQ FLAT:??_C@_0P@BCBHENLA@__getnewargs__?$AA@
	DQ	FLAT:bytes_getnewargs
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@NMODNBEH@capitalize?$AA@
	DQ	FLAT:stringlib_capitalize
	DD	04H
	ORG $+4
	DQ	FLAT:_Py_capitalize__doc__
	DQ	FLAT:??_C@_06BBLOAEEI@center?$AA@
	DQ	FLAT:stringlib_center
	DD	01H
	ORG $+4
	DQ	FLAT:center__doc__
	DQ	FLAT:??_C@_05IOMEMJEC@count?$AA@
	DQ	FLAT:bytes_count
	DD	01H
	ORG $+4
	DQ	FLAT:count__doc__
	DQ	FLAT:??_C@_06KPNAMAEI@decode?$AA@
	DQ	FLAT:bytes_decode
	DD	03H
	ORG $+4
	DQ	FLAT:decode__doc__
	DQ	FLAT:??_C@_08MLCMCPNP@endswith?$AA@
	DQ	FLAT:bytes_endswith
	DD	01H
	ORG $+4
	DQ	FLAT:endswith__doc__
	DQ	FLAT:??_C@_0L@DEOCELBD@expandtabs?$AA@
	DQ	FLAT:stringlib_expandtabs
	DD	01H
	ORG $+4
	DQ	FLAT:expandtabs__doc__
	DQ	FLAT:??_C@_04CKFJHKAP@find?$AA@
	DQ	FLAT:bytes_find
	DD	01H
	ORG $+4
	DQ	FLAT:find__doc__
	DQ	FLAT:??_C@_07DIMGGDAC@fromhex?$AA@
	DQ	FLAT:bytes_fromhex
	DD	011H
	ORG $+4
	DQ	FLAT:fromhex_doc
	DQ	FLAT:??_C@_05FKHKFDID@index?$AA@
	DQ	FLAT:bytes_index
	DD	01H
	ORG $+4
	DQ	FLAT:index__doc__
	DQ	FLAT:??_C@_07EOADCIGC@isalnum?$AA@
	DQ	FLAT:stringlib_isalnum
	DD	04H
	ORG $+4
	DQ	FLAT:_Py_isalnum__doc__
	DQ	FLAT:??_C@_07EGIOHHOB@isalpha?$AA@
	DQ	FLAT:stringlib_isalpha
	DD	04H
	ORG $+4
	DQ	FLAT:_Py_isalpha__doc__
	DQ	FLAT:??_C@_07CFBKIKCH@isdigit?$AA@
	DQ	FLAT:stringlib_isdigit
	DD	04H
	ORG $+4
	DQ	FLAT:_Py_isdigit__doc__
	DQ	FLAT:??_C@_07EJFAPEJH@islower?$AA@
	DQ	FLAT:stringlib_islower
	DD	04H
	ORG $+4
	DQ	FLAT:_Py_islower__doc__
	DQ	FLAT:??_C@_07CNBMLEON@isspace?$AA@
	DQ	FLAT:stringlib_isspace
	DD	04H
	ORG $+4
	DQ	FLAT:_Py_isspace__doc__
	DQ	FLAT:??_C@_07DBHCJBDG@istitle?$AA@
	DQ	FLAT:stringlib_istitle
	DD	04H
	ORG $+4
	DQ	FLAT:_Py_istitle__doc__
	DQ	FLAT:??_C@_07BCOOJPCO@isupper?$AA@
	DQ	FLAT:stringlib_isupper
	DD	04H
	ORG $+4
	DQ	FLAT:_Py_isupper__doc__
	DQ	FLAT:??_C@_04DFGCDGNN@join?$AA@
	DQ	FLAT:bytes_join
	DD	08H
	ORG $+4
	DQ	FLAT:join__doc__
	DQ	FLAT:??_C@_05KDIMMEME@ljust?$AA@
	DQ	FLAT:stringlib_ljust
	DD	01H
	ORG $+4
	DQ	FLAT:ljust__doc__
	DQ	FLAT:??_C@_05IPJEPLHL@lower?$AA@
	DQ	FLAT:stringlib_lower
	DD	04H
	ORG $+4
	DQ	FLAT:_Py_lower__doc__
	DQ	FLAT:??_C@_06GGONODO@lstrip?$AA@
	DQ	FLAT:bytes_lstrip
	DD	01H
	ORG $+4
	DQ	FLAT:lstrip__doc__
	DQ	FLAT:??_C@_09PBBLPCAA@maketrans?$AA@
	DQ	FLAT:bytes_maketrans
	DD	021H
	ORG $+4
	DQ	FLAT:_Py_maketrans__doc__
	DQ	FLAT:??_C@_09IKAEIPAD@partition?$AA@
	DQ	FLAT:bytes_partition
	DD	08H
	ORG $+4
	DQ	FLAT:partition__doc__
	DQ	FLAT:??_C@_07CLEHDIEJ@replace?$AA@
	DQ	FLAT:bytes_replace
	DD	01H
	ORG $+4
	DQ	FLAT:replace__doc__
	DQ	FLAT:??_C@_05BLFDIAHL@rfind?$AA@
	DQ	FLAT:bytes_rfind
	DD	01H
	ORG $+4
	DQ	FLAT:rfind__doc__
	DQ	FLAT:??_C@_06NCDOMFM@rindex?$AA@
	DQ	FLAT:bytes_rindex
	DD	01H
	ORG $+4
	DQ	FLAT:rindex__doc__
	DQ	FLAT:??_C@_05JKFAKHCP@rjust?$AA@
	DQ	FLAT:stringlib_rjust
	DD	01H
	ORG $+4
	DQ	FLAT:rjust__doc__
	DQ	FLAT:??_C@_0L@KEEHLNKL@rpartition?$AA@
	DQ	FLAT:bytes_rpartition
	DD	08H
	ORG $+4
	DQ	FLAT:rpartition__doc__
	DQ	FLAT:??_C@_06BAKFHKMF@rsplit?$AA@
	DQ	FLAT:bytes_rsplit
	DD	03H
	ORG $+4
	DQ	FLAT:rsplit__doc__
	DQ	FLAT:??_C@_06DBIPDJKN@rstrip?$AA@
	DQ	FLAT:bytes_rstrip
	DD	01H
	ORG $+4
	DQ	FLAT:rstrip__doc__
	DQ	FLAT:??_C@_05EHPMMFBK@split?$AA@
	DQ	FLAT:bytes_split
	DD	03H
	ORG $+4
	DQ	FLAT:split__doc__
	DQ	FLAT:??_C@_0L@BCMGLLLC@splitlines?$AA@
	DQ	FLAT:bytes_splitlines
	DD	03H
	ORG $+4
	DQ	FLAT:splitlines__doc__
	DQ	FLAT:??_C@_0L@MPOGHCCL@startswith?$AA@
	DQ	FLAT:bytes_startswith
	DD	01H
	ORG $+4
	DQ	FLAT:startswith__doc__
	DQ	FLAT:??_C@_05GGNGIGHC@strip?$AA@
	DQ	FLAT:bytes_strip
	DD	01H
	ORG $+4
	DQ	FLAT:strip__doc__
	DQ	FLAT:??_C@_08EDJLBCEI@swapcase?$AA@
	DQ	FLAT:stringlib_swapcase
	DD	04H
	ORG $+4
	DQ	FLAT:_Py_swapcase__doc__
	DQ	FLAT:??_C@_05PHLGJONK@title?$AA@
	DQ	FLAT:stringlib_title
	DD	04H
	ORG $+4
	DQ	FLAT:_Py_title__doc__
	DQ	FLAT:??_C@_09ODNGOEIO@translate?$AA@
	DQ	FLAT:bytes_translate
	DD	01H
	ORG $+4
	DQ	FLAT:translate__doc__
	DQ	FLAT:??_C@_05NECKJAMC@upper?$AA@
	DQ	FLAT:stringlib_upper
	DD	04H
	ORG $+4
	DQ	FLAT:_Py_upper__doc__
	DQ	FLAT:??_C@_05DMFNFMHA@zfill?$AA@
	DQ	FLAT:stringlib_zfill
	DD	01H
	ORG $+4
	DQ	FLAT:zfill__doc__
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:bytes_sizeof
	DD	04H
	ORG $+4
	DQ	FLAT:sizeof__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
?kwlist@?1??bytes_new@@9@9 DQ FLAT:??_C@_06OEKOLKIL@source?$AA@ ; `bytes_new'::`2'::kwlist
	DQ	FLAT:??_C@_08MLPGAEIK@encoding?$AA@
	DQ	FLAT:??_C@_06EOMHCNPI@errors?$AA@
	DQ	0000000000000000H
bytes_doc DB	'bytes(iterable_of_ints) -> bytes', 0aH, 'bytes(string, e'
	DB	'ncoding[, errors]) -> bytes', 0aH, 'bytes(bytes_or_buffer) ->'
	DB	' immutable copy of bytes_or_buffer', 0aH, 'bytes(int) -> byte'
	DB	's object of size given by the parameter initialized with null'
	DB	' bytes', 0aH, 'bytes() -> empty bytes object', 0aH, 0aH, 'Con'
	DB	'struct an immutable array of bytes from:', 0aH, '  - an itera'
	DB	'ble yielding integers in range(256)', 0aH, '  - a text string'
	DB	' encoded using the specified encoding', 0aH, '  - any object '
	DB	'implementing the buffer API.', 0aH, '  - an integer', 00H
	ORG $+5
PyBytes_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_05FBJAGGIG@bytes?$AA@
	DQ	0000000000000079H
	DQ	0000000000000001H
	DQ	FLAT:bytes_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:bytes_repr
	DQ	0000000000000000H
	DQ	FLAT:bytes_as_sequence
	DQ	FLAT:bytes_as_mapping
	DQ	FLAT:bytes_hash
	DQ	0000000000000000H
	DQ	FLAT:bytes_str
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	FLAT:bytes_as_buffer
	DD	08040400H
	ORG $+4
	DQ	FLAT:bytes_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:bytes_richcompare
	DQ	0000000000000000H
	DQ	FLAT:bytes_iter
	DQ	0000000000000000H
	DQ	FLAT:bytes_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyBaseObject_Type
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:bytes_new
	DQ	FLAT:PyObject_Free
	ORG $+64
length_hint_doc DB 'Private method returning an estimate of len(list(it))'
	DB	'.', 00H
	ORG $+1
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+1
setstate_doc DB	'Set state information for unpickling.', 00H
	ORG $+10
striter_methods DQ FLAT:??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
	DQ	FLAT:striter_len
	DD	04H
	ORG $+4
	DQ	FLAT:length_hint_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:striter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:striter_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyBytesIter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@DKPNDJBA@bytes_iterator?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:striter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:striter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:striter_next
	DQ	FLAT:striter_methods
	DQ	0000000000000000H
	ORG $+144
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\include\objimpl.h
_TEXT	ENDS
;	COMDAT _PyObject_InitHead
_TEXT	SEGMENT
op$ = 8
_PyObject_InitHead PROC					; COMDAT

; 216  :     assert(Py_TYPE(op));
; 217  :     op->is_px = _Py_NOT_PARALLEL;

  00000	48 ba 78 56 ef
	be 34 12 ad de	 mov	 rdx, -2401243008567650696 ; dead1234beef5678H

; 218  :     op->px    = _Py_NOT_PARALLEL;
; 219  :     op->slist_entry.Next = NULL;

  0000a	33 c0		 xor	 eax, eax

; 220  :     op->px_flags  = Py_PXFLAGS_ISPY;

  0000c	48 c7 41 20 01
	00 00 00	 mov	 QWORD PTR [rcx+32], 1
  00014	48 89 11	 mov	 QWORD PTR [rcx], rdx
  00017	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx
  0001b	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 221  :     op->srw_lock  = NULL;

  0001f	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 222  :     op->event     = NULL;

  00023	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 223  :     op->orig_type = NULL;

  00027	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 224  : #ifdef Py_TRACE_REFS
; 225  :     op->_ob_next = NULL;
; 226  :     op->_ob_prev = NULL;
; 227  : #else
; 228  :     op->_ob_next = _Py_NOT_PARALLEL;

  0002b	48 89 51 40	 mov	 QWORD PTR [rcx+64], rdx

; 229  :     op->_ob_prev = _Py_NOT_PARALLEL;

  0002f	48 89 51 48	 mov	 QWORD PTR [rcx+72], rdx

; 230  : #endif
; 231  : }

  00033	c3		 ret	 0
_PyObject_InitHead ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@PCKAICOI@PyObject_INIT_VAR?$AA@	; `string'
PUBLIC	??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ ; `string'
EXTRN	_Px_NewReference:PROC
EXTRN	_PxObject_InitVar:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_INIT_VAR DD imagerel PyObject_INIT_VAR
	DD	imagerel PyObject_INIT_VAR+215
	DD	imagerel $unwind$PyObject_INIT_VAR
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT_VAR DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0BC@PCKAICOI@PyObject_INIT_VAR?$AA@
CONST	SEGMENT
??_C@_0BC@PCKAICOI@PyObject_INIT_VAR?$AA@ DB 'PyObject_INIT_VAR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
CONST	SEGMENT
??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ DB 'c:\src\pypa'
	DB	'rallel\include\objimpl.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyObject_INIT_VAR
_TEXT	SEGMENT
op$ = 64
tp$ = 72
n$ = 80
PyObject_INIT_VAR PROC					; COMDAT

; 247  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 248  :     Px_RETURN(_PxObject_InitVar(op, tp, n))

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1d		 je	 SHORT $LN1@PyObject_I
  00021	4c 8b c7	 mov	 r8, rdi
  00024	48 8b d6	 mov	 rdx, rsi
  00027	48 8b cb	 mov	 rcx, rbx

; 254  : }

  0002a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0002f	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00034	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00038	5f		 pop	 rdi
  00039	e9 00 00 00 00	 jmp	 _PxObject_InitVar
$LN1@PyObject_I:

; 249  :     Py_SIZE(op) = n;
; 250  :     Py_TYPE(op) = tp;
; 251  :     _PyObject_InitHead((PyObject *)op);

  0003e	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00048	33 c0		 xor	 eax, eax

; 252  :     _Py_NewReference((PyObject *)op);

  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
  00051	48 89 0b	 mov	 QWORD PTR [rbx], rcx
  00054	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  00058	48 89 4b 40	 mov	 QWORD PTR [rbx+64], rcx
  0005c	48 89 4b 48	 mov	 QWORD PTR [rbx+72], rcx
  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@PCKAICOI@PyObject_INIT_VAR?$AA@
  00067	4c 8b cb	 mov	 r9, rbx
  0006a	41 b8 fc 00 00
	00		 mov	 r8d, 252		; 000000fcH
  00070	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
  00074	48 89 73 58	 mov	 QWORD PTR [rbx+88], rsi
  00078	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  0007c	48 c7 43 20 01
	00 00 00	 mov	 QWORD PTR [rbx+32], 1
  00084	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  00088	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
  0008c	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax
  00090	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00098	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009d	85 c0		 test	 eax, eax
  0009f	74 1b		 je	 SHORT $LN4@PyObject_I
  000a1	48 8b cb	 mov	 rcx, rbx
  000a4	e8 00 00 00 00	 call	 _Px_NewReference

; 253  :     return op;

  000a9	48 8b c3	 mov	 rax, rbx

; 254  : }

  000ac	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b1	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000b6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ba	5f		 pop	 rdi
  000bb	c3		 ret	 0
$LN4@PyObject_I:
  000bc	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000c1	48 c7 43 50 01
	00 00 00	 mov	 QWORD PTR [rbx+80], 1
  000c9	48 8b c3	 mov	 rax, rbx
  000cc	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000d1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d5	5f		 pop	 rdi
  000d6	c3		 ret	 0
PyObject_INIT_VAR ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@HMLNEJOC@Type?5?$CF?4100s?5doesn?8t?5support?5the?5@ ; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\objects\bytesobject.c
pdata	SEGMENT
$pdata$_getbuffer DD imagerel _getbuffer
	DD	imagerel _getbuffer+86
	DD	imagerel $unwind$_getbuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_getbuffer DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CL@HMLNEJOC@Type?5?$CF?4100s?5doesn?8t?5support?5the?5@
CONST	SEGMENT
??_C@_0CL@HMLNEJOC@Type?5?$CF?4100s?5doesn?8t?5support?5the?5@ DB 'Type %'
	DB	'.100s doesn''t support the buffer API', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _getbuffer
_TEXT	SEGMENT
obj$ = 48
view$ = 56
_getbuffer PROC						; COMDAT

; 12   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 13   :     PyBufferProcs *buffer = Py_TYPE(obj)->tp_as_buffer;

  00006	4c 8b 41 58	 mov	 r8, QWORD PTR [rcx+88]
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	49 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [r8+248]

; 14   : 
; 15   :     if (buffer == NULL || buffer->bf_getbuffer == NULL)

  00014	48 85 c0	 test	 rax, rax
  00017	74 1c		 je	 SHORT $LN2@getbuffer
  00019	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  0001c	4d 85 c9	 test	 r9, r9
  0001f	74 14		 je	 SHORT $LN2@getbuffer

; 21   :     }
; 22   : 
; 23   :     if (buffer->bf_getbuffer(obj, view, PyBUF_SIMPLE) < 0)

  00021	45 33 c0	 xor	 r8d, r8d
  00024	41 ff d1	 call	 r9
  00027	85 c0		 test	 eax, eax

; 24   :         return -1;

  00029	78 21		 js	 SHORT $LN6@getbuffer

; 25   :     return view->len;

  0002b	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]

; 26   : }

  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5b		 pop	 rbx
  00034	c3		 ret	 0
$LN2@getbuffer:

; 16   :     {
; 17   :         PyErr_Format(PyExc_TypeError,
; 18   :                      "Type %.100s doesn't support the buffer API",
; 19   :                      Py_TYPE(obj)->tp_name);

  00035	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00039	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@HMLNEJOC@Type?5?$CF?4100s?5doesn?8t?5support?5the?5@
  00047	e8 00 00 00 00	 call	 PyErr_Format
$LN6@getbuffer:

; 20   :         return -1;

  0004c	48 83 c8 ff	 or	 rax, -1

; 26   : }

  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5b		 pop	 rbx
  00055	c3		 ret	 0
_getbuffer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@GKFHPJMO@byte?5string?5is?5too?5large?$AA@ ; `string'
PUBLIC	??_C@_0DC@LEOKNIFE@Negative?5size?5passed?5to?5PyBytes_@ ; `string'
PUBLIC	PyBytes_FromStringAndSize
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyObject_Malloc:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	memcpy:PROC
_BSS	SEGMENT
nullstring DQ	01H DUP (?)
characters DQ	0100H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyBytes_FromStringAndSize DD imagerel $LN26
	DD	imagerel $LN26+351
	DD	imagerel $unwind$PyBytes_FromStringAndSize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyBytes_FromStringAndSize DD 083f01H
	DD	07743fH
	DD	06543aH
	DD	08340aH
	DD	06006320aH
xdata	ENDS
;	COMDAT ??_C@_0BJ@GKFHPJMO@byte?5string?5is?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BJ@GKFHPJMO@byte?5string?5is?5too?5large?$AA@ DB 'byte string is t'
	DB	'oo large', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@LEOKNIFE@Negative?5size?5passed?5to?5PyBytes_@
CONST	SEGMENT
??_C@_0DC@LEOKNIFE@Negative?5size?5passed?5to?5PyBytes_@ DB 'Negative siz'
	DB	'e passed to PyBytes_FromStringAndSize', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyBytes_FromStringAndSize
_TEXT	SEGMENT
str$ = 48
size$ = 56
PyBytes_FromStringAndSize PROC				; COMDAT

; 67   : {

$LN26:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f1	 mov	 rsi, rcx

; 68   :     register PyBytesObject *op;
; 69   :     if (size < 0) {

  00010	48 85 d2	 test	 rdx, rdx
  00013	79 20		 jns	 SHORT $LN18@PyBytes_Fr

; 70   :         PyErr_SetString(PyExc_SystemError,
; 71   :             "Negative size passed to PyBytes_FromStringAndSize");

  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@LEOKNIFE@Negative?5size?5passed?5to?5PyBytes_@
  00023	e8 00 00 00 00	 call	 PyErr_SetString

; 72   :         return NULL;

  00028	33 c0		 xor	 eax, eax

; 120  : }

  0002a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5e		 pop	 rsi
  00034	c3		 ret	 0
$LN18@PyBytes_Fr:
  00035	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  0003a	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi

; 73   :     }
; 74   :     if (size == 0 && (op = nullstring) != NULL) {

  0003f	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:characters
  00046	48 85 d2	 test	 rdx, rdx
  00049	75 2b		 jne	 SHORT $LN17@PyBytes_Fr
  0004b	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR nullstring
  00052	48 85 ff	 test	 rdi, rdi
  00055	0f 85 e4 00 00
	00		 jne	 $LN25@PyBytes_Fr
$LN15@PyBytes_Fr:

; 95   :     }
; 96   : 
; 97   :     /* Inline PyObject_NewVar */
; 98   :     op = (PyBytesObject *)PyObject_MALLOC(PyBytesObject_SIZE + size);

  0005b	48 8d 4a 79	 lea	 rcx, QWORD PTR [rdx+121]
  0005f	e8 00 00 00 00	 call	 PyObject_Malloc
  00064	48 8b f8	 mov	 rdi, rax

; 99   :     if (op == NULL)

  00067	48 85 c0	 test	 rax, rax
  0006a	75 50		 jne	 SHORT $LN14@PyBytes_Fr

; 100  :         return PyErr_NoMemory();

  0006c	e8 00 00 00 00	 call	 PyErr_NoMemory
  00071	e9 d4 00 00 00	 jmp	 $LN24@PyBytes_Fr
$LN17@PyBytes_Fr:

; 75   : #ifdef COUNT_ALLOCS
; 76   :         null_strings++;
; 77   : #endif
; 78   :         Py_INCREF(op);
; 79   :         return (PyObject *)op;
; 80   :     }
; 81   :     if (size == 1 && str != NULL &&
; 82   :         (op = characters[*str & UCHAR_MAX]) != NULL)

  00076	48 83 fa 01	 cmp	 rdx, 1
  0007a	75 17		 jne	 SHORT $LN16@PyBytes_Fr
  0007c	48 85 c9	 test	 rcx, rcx
  0007f	74 da		 je	 SHORT $LN15@PyBytes_Fr
  00081	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00084	48 8b 7c c5 00	 mov	 rdi, QWORD PTR [rbp+rax*8]
  00089	48 85 ff	 test	 rdi, rdi
  0008c	74 cd		 je	 SHORT $LN15@PyBytes_Fr

; 83   :     {
; 84   : #ifdef COUNT_ALLOCS
; 85   :         one_strings++;
; 86   : #endif
; 87   :         Py_INCREF(op);
; 88   :         return (PyObject *)op;

  0008e	e9 ac 00 00 00	 jmp	 $LN25@PyBytes_Fr
$LN16@PyBytes_Fr:

; 89   :     }
; 90   : 
; 91   :     if (size > PY_SSIZE_T_MAX - PyBytesObject_SIZE) {

  00093	48 b8 86 ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775686 ; 7fffffffffffff86H
  0009d	48 3b d0	 cmp	 rdx, rax
  000a0	76 b9		 jbe	 SHORT $LN15@PyBytes_Fr

; 92   :         PyErr_SetString(PyExc_OverflowError,
; 93   :                         "byte string is too large");

  000a2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GKFHPJMO@byte?5string?5is?5too?5large?$AA@
  000b0	e8 00 00 00 00	 call	 PyErr_SetString

; 94   :         return NULL;

  000b5	33 c0		 xor	 eax, eax
  000b7	e9 8e 00 00 00	 jmp	 $LN24@PyBytes_Fr
$LN14@PyBytes_Fr:

; 101  :     PyObject_INIT_VAR((PyVarObject *)op, &PyBytes_Type, size);

  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyBytes_Type
  000c3	4c 8b c3	 mov	 r8, rbx
  000c6	48 8b c8	 mov	 rcx, rax
  000c9	e8 00 00 00 00	 call	 PyObject_INIT_VAR

; 102  :     op->ob_shash = -1;

  000ce	48 c7 47 70 ff
	ff ff ff	 mov	 QWORD PTR [rdi+112], -1

; 103  :     if (str != NULL)

  000d6	48 85 f6	 test	 rsi, rsi
  000d9	74 35		 je	 SHORT $LN10@PyBytes_Fr

; 104  :         Py_MEMCPY(op->ob_sval, str, size);

  000db	48 8d 4f 78	 lea	 rcx, QWORD PTR [rdi+120]
  000df	48 83 fb 10	 cmp	 rbx, 16
  000e3	72 0d		 jb	 SHORT $LN9@PyBytes_Fr
  000e5	4c 8b c3	 mov	 r8, rbx
  000e8	48 8b d6	 mov	 rdx, rsi
  000eb	e8 00 00 00 00	 call	 memcpy
  000f0	eb 1e		 jmp	 SHORT $LN10@PyBytes_Fr
$LN9@PyBytes_Fr:
  000f2	48 85 db	 test	 rbx, rbx
  000f5	74 19		 je	 SHORT $LN10@PyBytes_Fr
  000f7	4c 8b c6	 mov	 r8, rsi
  000fa	48 8b d3	 mov	 rdx, rbx
  000fd	4c 2b c1	 sub	 r8, rcx
$LL7@PyBytes_Fr:
  00100	41 0f b6 04 08	 movzx	 eax, BYTE PTR [r8+rcx]
  00105	48 ff c1	 inc	 rcx
  00108	48 ff ca	 dec	 rdx
  0010b	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  0010e	75 f0		 jne	 SHORT $LL7@PyBytes_Fr
$LN10@PyBytes_Fr:

; 105  :     op->ob_sval[size] = '\0';

  00110	c6 44 1f 78 00	 mov	 BYTE PTR [rdi+rbx+120], 0

; 106  : 
; 107  :     if (Py_PXCTX)

  00115	e8 00 00 00 00	 call	 _Py_PXCTX
  0011a	85 c0		 test	 eax, eax
  0011c	75 29		 jne	 SHORT $end$20339

; 108  :         goto end;
; 109  : 
; 110  :     /* share short strings */
; 111  :     if (size == 0) {

  0011e	48 85 db	 test	 rbx, rbx
  00121	75 09		 jne	 SHORT $LN3@PyBytes_Fr

; 112  :         nullstring = op;

  00123	48 89 3d 00 00
	00 00		 mov	 QWORD PTR nullstring, rdi

; 113  :         Py_INCREF(op);

  0012a	eb 13		 jmp	 SHORT $LN25@PyBytes_Fr
$LN3@PyBytes_Fr:

; 114  :     } else if (size == 1 && str != NULL) {

  0012c	48 83 fb 01	 cmp	 rbx, 1
  00130	75 15		 jne	 SHORT $end$20339
  00132	48 85 f6	 test	 rsi, rsi
  00135	74 10		 je	 SHORT $end$20339

; 115  :         characters[*str & UCHAR_MAX] = op;

  00137	0f b6 06	 movzx	 eax, BYTE PTR [rsi]
  0013a	48 89 7c c5 00	 mov	 QWORD PTR [rbp+rax*8], rdi
$LN25@PyBytes_Fr:

; 116  :         Py_INCREF(op);

  0013f	48 8b cf	 mov	 rcx, rdi
  00142	e8 00 00 00 00	 call	 _Py_IncRef
$end$20339:

; 117  :     }
; 118  : end:
; 119  :     return (PyObject *) op;

  00147	48 8b c7	 mov	 rax, rdi
$LN24@PyBytes_Fr:
  0014a	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  0014f	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 120  : }

  00154	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00159	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0015d	5e		 pop	 rsi
  0015e	c3		 ret	 0
PyBytes_FromStringAndSize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@CPOCIEOB@byte?5string?5is?5too?5long?$AA@ ; `string'
PUBLIC	PyBytes_FromString
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyBytes_FromString DD imagerel $LN35
	DD	imagerel $LN35+376
	DD	imagerel $unwind$PyBytes_FromString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyBytes_FromString DD 085f01H
	DD	08545fH
	DD	0a640fH
	DD	09340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0BI@CPOCIEOB@byte?5string?5is?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BI@CPOCIEOB@byte?5string?5is?5too?5long?$AA@ DB 'byte string is to'
	DB	'o long', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
CONST	ENDS
;	COMDAT PyBytes_FromString
_TEXT	SEGMENT
str$ = 64
PyBytes_FromString PROC					; COMDAT

; 124  : {

$LN35:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b f1	 mov	 rsi, rcx

; 125  :     register size_t size;
; 126  :     register PyBytesObject *op;
; 127  : 
; 128  :     assert(str != NULL);
; 129  :     size = strlen(str);

  00012	48 83 c9 ff	 or	 rcx, -1
  00016	33 c0		 xor	 eax, eax
  00018	48 8b fe	 mov	 rdi, rsi
  0001b	f2 ae		 repne scasb

; 130  :     if (size > PY_SSIZE_T_MAX - PyBytesObject_SIZE) {

  0001d	48 b8 86 ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775686 ; 7fffffffffffff86H
  00027	48 f7 d1	 not	 rcx
  0002a	48 ff c9	 dec	 rcx
  0002d	48 8b d9	 mov	 rbx, rcx
  00030	48 3b c8	 cmp	 rcx, rax
  00033	76 25		 jbe	 SHORT $LN16@PyBytes_Fr@2

; 131  :         PyErr_SetString(PyExc_OverflowError,
; 132  :             "byte string is too long");

  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@CPOCIEOB@byte?5string?5is?5too?5long?$AA@
  00043	e8 00 00 00 00	 call	 PyErr_SetString

; 133  :         return NULL;

  00048	33 c0		 xor	 eax, eax

; 171  : }

  0004a	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0004f	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00054	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
$LN16@PyBytes_Fr@2:
  0005a	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp

; 134  :     }
; 135  :     if (size == 0 && (op = nullstring) != NULL) {

  0005f	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:characters
  00066	48 85 c9	 test	 rcx, rcx
  00069	75 19		 jne	 SHORT $LN15@PyBytes_Fr@2
  0006b	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR nullstring
$LN34@PyBytes_Fr@2:
  00072	48 85 ff	 test	 rdi, rdi
  00075	74 1d		 je	 SHORT $LN14@PyBytes_Fr@2

; 136  : #ifdef COUNT_ALLOCS
; 137  :         null_strings++;
; 138  : #endif
; 139  :         Py_INCREF(op);

  00077	48 8b cf	 mov	 rcx, rdi
  0007a	e8 00 00 00 00	 call	 _Py_IncRef

; 140  :         return (PyObject *)op;

  0007f	e9 dc 00 00 00	 jmp	 $end$20391
$LN15@PyBytes_Fr@2:

; 141  :     }
; 142  :     if (size == 1 && (op = characters[*str & UCHAR_MAX]) != NULL) {

  00084	48 83 f9 01	 cmp	 rcx, 1
  00088	75 0a		 jne	 SHORT $LN14@PyBytes_Fr@2
  0008a	0f b6 06	 movzx	 eax, BYTE PTR [rsi]
  0008d	48 8b 7c c5 00	 mov	 rdi, QWORD PTR [rbp+rax*8]

; 143  : #ifdef COUNT_ALLOCS
; 144  :         one_strings++;
; 145  : #endif
; 146  :         Py_INCREF(op);
; 147  :         return (PyObject *)op;

  00092	eb de		 jmp	 SHORT $LN34@PyBytes_Fr@2
$LN14@PyBytes_Fr@2:

; 148  :     }
; 149  : 
; 150  :     /* Inline PyObject_NewVar */
; 151  :     op = (PyBytesObject *)PyObject_MALLOC(PyBytesObject_SIZE + size);

  00094	48 83 c1 79	 add	 rcx, 121		; 00000079H
  00098	e8 00 00 00 00	 call	 PyObject_Malloc
  0009d	48 8b f8	 mov	 rdi, rax

; 152  :     if (op == NULL)

  000a0	48 85 c0	 test	 rax, rax
  000a3	75 0a		 jne	 SHORT $LN13@PyBytes_Fr@2

; 153  :         return PyErr_NoMemory();

  000a5	e8 00 00 00 00	 call	 PyErr_NoMemory
  000aa	e9 b4 00 00 00	 jmp	 $LN29@PyBytes_Fr@2
$LN13@PyBytes_Fr@2:

; 154  :     PyObject_INIT_VAR((PyVarObject *)op, &PyBytes_Type, size);

  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyBytes_Type
  000b6	4c 8b c3	 mov	 r8, rbx
  000b9	48 8b c8	 mov	 rcx, rax
  000bc	e8 00 00 00 00	 call	 PyObject_INIT_VAR

; 155  :     op->ob_shash = -1;
; 156  :     Py_MEMCPY(op->ob_sval, str, size+1);

  000c1	48 8d 53 01	 lea	 rdx, QWORD PTR [rbx+1]
  000c5	48 c7 47 70 ff
	ff ff ff	 mov	 QWORD PTR [rdi+112], -1
  000cd	48 8d 4f 78	 lea	 rcx, QWORD PTR [rdi+120]
  000d1	48 83 fa 10	 cmp	 rdx, 16
  000d5	72 0d		 jb	 SHORT $LN9@PyBytes_Fr@2
  000d7	4c 8b c2	 mov	 r8, rdx
  000da	48 8b d6	 mov	 rdx, rsi
  000dd	e8 00 00 00 00	 call	 memcpy
  000e2	eb 1c		 jmp	 SHORT $LN11@PyBytes_Fr@2
$LN9@PyBytes_Fr@2:
  000e4	48 85 d2	 test	 rdx, rdx
  000e7	74 17		 je	 SHORT $LN11@PyBytes_Fr@2
  000e9	4c 8b c6	 mov	 r8, rsi
  000ec	4c 2b c1	 sub	 r8, rcx
  000ef	90		 npad	 1
$LL7@PyBytes_Fr@2:
  000f0	41 0f b6 04 08	 movzx	 eax, BYTE PTR [r8+rcx]
  000f5	48 ff c1	 inc	 rcx
  000f8	48 ff ca	 dec	 rdx
  000fb	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  000fe	75 f0		 jne	 SHORT $LL7@PyBytes_Fr@2
$LN11@PyBytes_Fr@2:

; 157  : 
; 158  :     if (Py_PXCTX)

  00100	e8 00 00 00 00	 call	 _Py_PXCTX
  00105	85 c0		 test	 eax, eax
  00107	75 57		 jne	 SHORT $end$20391

; 159  :         goto end;
; 160  : 
; 161  :     /* share short strings */
; 162  :     if (size == 0) {

  00109	48 85 db	 test	 rbx, rbx
  0010c	75 09		 jne	 SHORT $LN3@PyBytes_Fr@2

; 163  :         nullstring = op;

  0010e	48 89 3d 00 00
	00 00		 mov	 QWORD PTR nullstring, rdi

; 164  :         Py_INCREF(op);

  00115	eb 0e		 jmp	 SHORT $LN33@PyBytes_Fr@2
$LN3@PyBytes_Fr@2:

; 165  :     } else if (size == 1) {

  00117	48 83 fb 01	 cmp	 rbx, 1
  0011b	75 43		 jne	 SHORT $end$20391

; 166  :         characters[*str & UCHAR_MAX] = op;

  0011d	0f b6 06	 movzx	 eax, BYTE PTR [rsi]
  00120	48 89 7c c5 00	 mov	 QWORD PTR [rbp+rax*8], rdi
$LN33@PyBytes_Fr@2:

; 167  :         Py_INCREF(op);

  00125	e8 00 00 00 00	 call	 _Py_PXCTX
  0012a	85 c0		 test	 eax, eax
  0012c	75 32		 jne	 SHORT $end$20391
  0012e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00135	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0013c	4c 8b cf	 mov	 r9, rdi
  0013f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00145	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0014d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00152	85 c0		 test	 eax, eax
  00154	75 06		 jne	 SHORT $LN23@PyBytes_Fr@2
  00156	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  0015a	74 04		 je	 SHORT $end$20391
$LN23@PyBytes_Fr@2:
  0015c	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$end$20391:

; 168  :     }
; 169  : end:
; 170  :     return (PyObject *) op;

  00160	48 8b c7	 mov	 rax, rdi
$LN29@PyBytes_Fr@2:
  00163	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]

; 171  : }

  00168	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0016d	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00172	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00176	5f		 pop	 rdi
  00177	c3		 ret	 0
PyBytes_FromString ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bytes_dealloc
_TEXT	SEGMENT
op$ = 8
bytes_dealloc PROC					; COMDAT

; 381  :     Py_TYPE(op)->tp_free(op);

  00000	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]

; 382  : }

  00004	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
bytes_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@KABNEBGK@expected?5bytes?0?5?$CF?4200s?5found?$AA@ ; `string'
PUBLIC	PyBytes_Size
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyBytes_Size DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$PyBytes_Size
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyBytes_Size DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BN@KABNEBGK@expected?5bytes?0?5?$CF?4200s?5found?$AA@
CONST	SEGMENT
??_C@_0BN@KABNEBGK@expected?5bytes?0?5?$CF?4200s?5found?$AA@ DB 'expected'
	DB	' bytes, %.200s found', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyBytes_Size
_TEXT	SEGMENT
op$ = 48
PyBytes_Size PROC					; COMDAT

; 531  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 532  :     if (!PyBytes_Check(op)) {

  00004	4c 8b 41 58	 mov	 r8, QWORD PTR [rcx+88]
  00008	41 f7 80 00 01
	00 00 00 00 00
	08		 test	 DWORD PTR [r8+256], 134217728 ; 08000000H
  00013	75 20		 jne	 SHORT $LN1@PyBytes_Si

; 533  :         PyErr_Format(PyExc_TypeError,
; 534  :              "expected bytes, %.200s found", Py_TYPE(op)->tp_name);

  00015	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@KABNEBGK@expected?5bytes?0?5?$CF?4200s?5found?$AA@
  00027	e8 00 00 00 00	 call	 PyErr_Format

; 535  :         return -1;

  0002c	48 83 c8 ff	 or	 rax, -1

; 538  : }

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
$LN1@PyBytes_Si:

; 536  :     }
; 537  :     return Py_SIZE(op);

  00035	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]

; 538  : }

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
PyBytes_Size ENDP
_TEXT	ENDS
PUBLIC	PyBytes_AsString
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyBytes_AsString DD imagerel $LN4
	DD	imagerel $LN4+60
	DD	imagerel $unwind$PyBytes_AsString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyBytes_AsString DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyBytes_AsString
_TEXT	SEGMENT
op$ = 48
PyBytes_AsString PROC					; COMDAT

; 542  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 543  :     if (!PyBytes_Check(op)) {

  00004	4c 8b 41 58	 mov	 r8, QWORD PTR [rcx+88]
  00008	41 f7 80 00 01
	00 00 00 00 00
	08		 test	 DWORD PTR [r8+256], 134217728 ; 08000000H
  00013	75 1e		 jne	 SHORT $LN1@PyBytes_As

; 544  :         PyErr_Format(PyExc_TypeError,
; 545  :              "expected bytes, %.200s found", Py_TYPE(op)->tp_name);

  00015	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@KABNEBGK@expected?5bytes?0?5?$CF?4200s?5found?$AA@
  00027	e8 00 00 00 00	 call	 PyErr_Format

; 546  :         return NULL;

  0002c	33 c0		 xor	 eax, eax

; 549  : }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
$LN1@PyBytes_As:

; 547  :     }
; 548  :     return ((PyBytesObject *)op)->ob_sval;

  00033	48 8d 41 78	 lea	 rax, QWORD PTR [rcx+120]

; 549  : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
PyBytes_AsString ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@GADJCNIN@expected?5bytes?5with?5no?5null?$AA@ ; `string'
PUBLIC	??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@ ; `string'
PUBLIC	PyBytes_AsStringAndSize
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyBytes_AsStringAndSize DD imagerel $LN9
	DD	imagerel $LN9+84
	DD	imagerel $unwind$PyBytes_AsStringAndSize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyBytes_AsStringAndSize DD imagerel $LN9+84
	DD	imagerel $LN9+120
	DD	imagerel $chain$0$PyBytes_AsStringAndSize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyBytes_AsStringAndSize DD imagerel $LN9+120
	DD	imagerel $LN9+172
	DD	imagerel $chain$2$PyBytes_AsStringAndSize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyBytes_AsStringAndSize DD 020021H
	DD	047400H
	DD	imagerel $LN9
	DD	imagerel $LN9+84
	DD	imagerel $unwind$PyBytes_AsStringAndSize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyBytes_AsStringAndSize DD 020521H
	DD	047405H
	DD	imagerel $LN9
	DD	imagerel $LN9+84
	DD	imagerel $unwind$PyBytes_AsStringAndSize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyBytes_AsStringAndSize DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BM@GADJCNIN@expected?5bytes?5with?5no?5null?$AA@
CONST	SEGMENT
??_C@_0BM@GADJCNIN@expected?5bytes?5with?5no?5null?$AA@ DB 'expected byte'
	DB	's with no null', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@ DB '..\Objects\byte'
	DB	'sobject.c', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyBytes_AsStringAndSize
_TEXT	SEGMENT
obj$ = 48
s$ = 56
len$ = 64
PyBytes_AsStringAndSize PROC				; COMDAT

; 555  : {

$LN9:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	4c 8b c9	 mov	 r9, rcx

; 556  :     if (s == NULL) {

  00007	48 85 d2	 test	 rdx, rdx
  0000a	75 19		 jne	 SHORT $LN5@PyBytes_As@2

; 557  :         PyErr_BadInternalCall();

  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@
  00013	ba 2d 02 00 00	 mov	 edx, 557		; 0000022dH
  00018	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 558  :         return -1;

  0001d	83 c8 ff	 or	 eax, -1

; 576  : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
$LN5@PyBytes_As@2:

; 559  :     }
; 560  : 
; 561  :     if (!PyBytes_Check(obj)) {

  00025	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00029	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  00033	75 1f		 jne	 SHORT $LN4@PyBytes_As@2

; 562  :         PyErr_Format(PyExc_TypeError,
; 563  :              "expected bytes, %.200s found", Py_TYPE(obj)->tp_name);

  00035	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00039	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@KABNEBGK@expected?5bytes?0?5?$CF?4200s?5found?$AA@
  00047	e8 00 00 00 00	 call	 PyErr_Format

; 564  :         return -1;

  0004c	83 c8 ff	 or	 eax, -1

; 576  : }

  0004f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00053	c3		 ret	 0
$LN4@PyBytes_As@2:
  00054	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi

; 565  :     }
; 566  : 
; 567  :     *s = PyBytes_AS_STRING(obj);

  00059	48 8d 79 78	 lea	 rdi, QWORD PTR [rcx+120]
  0005d	48 89 3a	 mov	 QWORD PTR [rdx], rdi

; 568  :     if (len != NULL)

  00060	4d 85 c0	 test	 r8, r8
  00063	74 13		 je	 SHORT $LN3@PyBytes_As@2

; 569  :         *len = PyBytes_GET_SIZE(obj);

  00065	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00069	49 89 00	 mov	 QWORD PTR [r8], rax
$LN1@PyBytes_As@2:

; 574  :     }
; 575  :     return 0;

  0006c	33 c0		 xor	 eax, eax
  0006e	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 576  : }

  00073	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00077	c3		 ret	 0
$LN3@PyBytes_As@2:

; 570  :     else if (strlen(*s) != (size_t)PyBytes_GET_SIZE(obj)) {

  00078	48 83 c9 ff	 or	 rcx, -1
  0007c	33 c0		 xor	 eax, eax
  0007e	f2 ae		 repne scasb
  00080	48 f7 d1	 not	 rcx
  00083	48 ff c9	 dec	 rcx
  00086	49 3b 49 60	 cmp	 rcx, QWORD PTR [r9+96]
  0008a	74 e0		 je	 SHORT $LN1@PyBytes_As@2

; 571  :         PyErr_SetString(PyExc_TypeError,
; 572  :                         "expected bytes with no null");

  0008c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@GADJCNIN@expected?5bytes?5with?5no?5null?$AA@
  0009a	e8 00 00 00 00	 call	 PyErr_SetString
  0009f	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 573  :         return -1;

  000a4	83 c8 ff	 or	 eax, -1

; 576  : }

  000a7	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ab	c3		 ret	 0
PyBytes_AsStringAndSize ENDP
_TEXT	ENDS
EXTRN	__imp_memchr:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\stringlib\fastsearch.h
pdata	SEGMENT
$pdata$stringlib_fastsearch_memchr_1char DD imagerel stringlib_fastsearch_memchr_1char
	DD	imagerel stringlib_fastsearch_memchr_1char+72
	DD	imagerel $unwind$stringlib_fastsearch_memchr_1char
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_fastsearch_memchr_1char DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT stringlib_fastsearch_memchr_1char
_TEXT	SEGMENT
s$ = 48
n$ = 56
needle$ = 64
mode$ = 72
stringlib_fastsearch_memchr_1char PROC			; COMDAT

; 40   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	41 0f b6 c0	 movzx	 eax, r8b
  0000a	48 8b d9	 mov	 rbx, rcx

; 41   :     if (mode == FAST_SEARCH) {

  0000d	41 83 f9 01	 cmp	 r9d, 1
  00011	75 2d		 jne	 SHORT $LN6@stringlib_

; 42   :         const STRINGLIB_CHAR *ptr = s;
; 43   :         const STRINGLIB_CHAR *e = s + n;

  00013	4c 8d 04 11	 lea	 r8, QWORD PTR [rcx+rdx]

; 44   :         while (ptr < e) {

  00017	49 3b c8	 cmp	 rcx, r8
  0001a	73 11		 jae	 SHORT $LN4@stringlib_

; 45   :             void *candidate = memchr((const void *) ptr, needle, (e - ptr) * sizeof(STRINGLIB_CHAR));

  0001c	4c 2b c1	 sub	 r8, rcx
  0001f	0f b6 d0	 movzx	 edx, al
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr

; 46   :             if (candidate == NULL)

  00028	48 85 c0	 test	 rax, rax
  0002b	75 0a		 jne	 SHORT $LN3@stringlib_
$LN4@stringlib_:

; 47   :                 return -1;

  0002d	48 83 c8 ff	 or	 rax, -1

; 78   :     }
; 79   : 
; 80   : #undef DO_MEMCHR
; 81   : }

  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5b		 pop	 rbx
  00036	c3		 ret	 0
$LN3@stringlib_:

; 48   :             ptr = (const STRINGLIB_CHAR *) _Py_ALIGN_DOWN(candidate, sizeof(STRINGLIB_CHAR));
; 49   :             if (sizeof(STRINGLIB_CHAR) == 1 || *ptr == ch)
; 50   :                 return (ptr - s);

  00037	48 2b c3	 sub	 rax, rbx

; 78   :     }
; 79   : 
; 80   : #undef DO_MEMCHR
; 81   : }

  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5b		 pop	 rbx
  0003f	c3		 ret	 0
$LN6@stringlib_:

; 51   :             /* False positive */
; 52   :             ptr++;
; 53   :         }
; 54   :         return -1;
; 55   :     }
; 56   : #ifdef HAVE_MEMRCHR
; 57   :     /* memrchr() is a GNU extension, available since glibc 2.1.91.
; 58   :        it doesn't seem as optimized as memchr(), but is still quite
; 59   :        faster than our hand-written loop in FASTSEARCH below */
; 60   :     else if (mode == FAST_RSEARCH) {
; 61   :         while (n > 0) {
; 62   :             const STRINGLIB_CHAR *found;
; 63   :             void *candidate = memrchr((const void *) s, needle, n * sizeof(STRINGLIB_CHAR));
; 64   :             if (candidate == NULL)
; 65   :                 return -1;
; 66   :             found = (const STRINGLIB_CHAR *) _Py_ALIGN_DOWN(candidate, sizeof(STRINGLIB_CHAR));
; 67   :             n = found - s;
; 68   :             if (sizeof(STRINGLIB_CHAR) == 1 || *found == ch)
; 69   :                 return n;
; 70   :             /* False positive */
; 71   :         }
; 72   :         return -1;
; 73   :     }
; 74   : #endif
; 75   :     else {
; 76   :         assert(0); /* Should never get here */
; 77   :         return 0;

  00040	33 c0		 xor	 eax, eax

; 78   :     }
; 79   : 
; 80   : #undef DO_MEMCHR
; 81   : }

  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5b		 pop	 rbx
  00047	c3		 ret	 0
stringlib_fastsearch_memchr_1char ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fastsearch DD imagerel fastsearch
	DD	imagerel fastsearch+346
	DD	imagerel $unwind$fastsearch
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$fastsearch DD imagerel fastsearch+346
	DD	imagerel fastsearch+977
	DD	imagerel $chain$2$fastsearch
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$fastsearch DD imagerel fastsearch+977
	DD	imagerel fastsearch+991
	DD	imagerel $chain$3$fastsearch
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$fastsearch DD imagerel fastsearch+991
	DD	imagerel fastsearch+996
	DD	imagerel $chain$4$fastsearch
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$fastsearch DD 060021H
	DD	067400H
	DD	076400H
	DD	0e5400H
	DD	imagerel fastsearch
	DD	imagerel fastsearch+346
	DD	imagerel $unwind$fastsearch
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$fastsearch DD 021H
	DD	imagerel fastsearch
	DD	imagerel fastsearch+346
	DD	imagerel $unwind$fastsearch
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$fastsearch DD 061321H
	DD	067413H
	DD	07640aH
	DD	0e5405H
	DD	imagerel fastsearch
	DD	imagerel fastsearch+346
	DD	imagerel $unwind$fastsearch
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fastsearch DD 061201H
	DD	0f00e7212H
	DD	0d00ae00cH
	DD	03006c008H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT fastsearch
_TEXT	SEGMENT
s$ = 112
mask$1$ = 120
n$ = 120
p$ = 128
skip$1$ = 136
m$ = 136
maxcount$ = 144
mode$ = 152
fastsearch PROC						; COMDAT

; 87   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	53		 push	 rbx
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	41 56		 push	 r14
  0000c	41 57		 push	 r15
  0000e	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00012	4d 8b e9	 mov	 r13, r9

; 88   :     unsigned long mask;
; 89   :     Py_ssize_t skip, count = 0;

  00015	45 33 db	 xor	 r11d, r11d

; 90   :     Py_ssize_t i, j, mlast, w;
; 91   : 
; 92   :     w = n - m;

  00018	4c 8b d2	 mov	 r10, rdx
  0001b	4d 2b d5	 sub	 r10, r13
  0001e	4d 8b f8	 mov	 r15, r8
  00021	48 8b d9	 mov	 rbx, rcx
  00024	45 8b cb	 mov	 r9d, r11d

; 93   : 
; 94   :     if (w < 0 || (mode == FAST_COUNT && maxcount == 0))

  00027	0f 88 1b 01 00
	00		 js	 $LN41@fastsearch
  0002d	44 8b b4 24 98
	00 00 00	 mov	 r14d, DWORD PTR mode$[rsp]
  00035	4c 8b a4 24 90
	00 00 00	 mov	 r12, QWORD PTR maxcount$[rsp]
  0003d	45 85 f6	 test	 r14d, r14d
  00040	75 09		 jne	 SHORT $LN61@fastsearch
  00042	4d 85 e4	 test	 r12, r12
  00045	0f 84 fd 00 00
	00		 je	 $LN41@fastsearch
$LN61@fastsearch:

; 95   :         return -1;
; 96   : 
; 97   :     /* look for special cases */
; 98   :     if (m <= 1) {

  0004b	49 83 fd 01	 cmp	 r13, 1
  0004f	0f 8f 05 01 00
	00		 jg	 $LN59@fastsearch

; 99   :         if (m <= 0)

  00055	4d 85 ed	 test	 r13, r13

; 100  :             return -1;

  00058	0f 8e ea 00 00
	00		 jle	 $LN41@fastsearch

; 101  :         /* use special case for 1-character strings */
; 102  :         if (n > 10 && (mode == FAST_SEARCH
; 103  : #ifdef HAVE_MEMRCHR
; 104  :                     || mode == FAST_RSEARCH
; 105  : #endif
; 106  :                     )) {

  0005e	48 83 fa 0a	 cmp	 rdx, 10
  00062	7e 3a		 jle	 SHORT $LN57@fastsearch
  00064	41 83 fe 01	 cmp	 r14d, 1
  00068	75 34		 jne	 SHORT $LN57@fastsearch

; 107  :             /* use memchr if we can choose a needle without two many likely
; 108  :                false positives */
; 109  :             unsigned char needle;
; 110  :             needle = p[0] & 0xff;
; 111  : #if STRINGLIB_SIZEOF_CHAR > 1
; 112  :             /* If looking for a multiple of 256, we'd have too
; 113  :                many false positives looking for the '\0' byte in UCS2
; 114  :                and UCS4 representations. */
; 115  :             if (needle != 0)
; 116  : #endif
; 117  :                 return STRINGLIB(fastsearch_memchr_1char)
; 118  :                        (s, n, p[0], needle, maxcount, mode);

  0006a	4c 8d 04 11	 lea	 r8, QWORD PTR [rcx+rdx]
  0006e	49 3b c8	 cmp	 rcx, r8
  00071	0f 83 d1 00 00
	00		 jae	 $LN41@fastsearch
  00077	41 0f b6 17	 movzx	 edx, BYTE PTR [r15]
  0007b	4c 2b c1	 sub	 r8, rcx
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  00084	48 85 c0	 test	 rax, rax
  00087	0f 84 bb 00 00
	00		 je	 $LN41@fastsearch
  0008d	48 2b c3	 sub	 rax, rbx

; 223  : }

  00090	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00094	41 5f		 pop	 r15
  00096	41 5e		 pop	 r14
  00098	41 5d		 pop	 r13
  0009a	41 5c		 pop	 r12
  0009c	5b		 pop	 rbx
  0009d	c3		 ret	 0
$LN57@fastsearch:

; 119  :         }
; 120  :         if (mode == FAST_COUNT) {

  0009e	45 85 f6	 test	 r14d, r14d
  000a1	75 45		 jne	 SHORT $LN56@fastsearch

; 121  :             for (i = 0; i < n; i++)

  000a3	48 85 d2	 test	 rdx, rdx
  000a6	7e 1e		 jle	 SHORT $LN99@fastsearch
  000a8	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  000ac	0f 1f 40 00	 npad	 4
$LL55@fastsearch:

; 122  :                 if (s[i] == p[0]) {

  000b0	41 38 04 0b	 cmp	 BYTE PTR [r11+rcx], al
  000b4	75 08		 jne	 SHORT $LN54@fastsearch

; 123  :                     count++;

  000b6	49 ff c1	 inc	 r9

; 124  :                     if (count == maxcount)

  000b9	4d 3b cc	 cmp	 r9, r12
  000bc	74 19		 je	 SHORT $LN81@fastsearch
$LN54@fastsearch:

; 121  :             for (i = 0; i < n; i++)

  000be	49 ff c3	 inc	 r11
  000c1	4c 3b da	 cmp	 r11, rdx
  000c4	7c ea		 jl	 SHORT $LL55@fastsearch
$LN99@fastsearch:

; 126  :                 }
; 127  :             return count;

  000c6	49 8b c1	 mov	 rax, r9

; 223  : }

  000c9	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000cd	41 5f		 pop	 r15
  000cf	41 5e		 pop	 r14
  000d1	41 5d		 pop	 r13
  000d3	41 5c		 pop	 r12
  000d5	5b		 pop	 rbx
  000d6	c3		 ret	 0
$LN81@fastsearch:

; 125  :                         return maxcount;

  000d7	49 8b c4	 mov	 rax, r12

; 223  : }

  000da	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000de	41 5f		 pop	 r15
  000e0	41 5e		 pop	 r14
  000e2	41 5d		 pop	 r13
  000e4	41 5c		 pop	 r12
  000e6	5b		 pop	 rbx
  000e7	c3		 ret	 0
$LN56@fastsearch:

; 128  :         } else if (mode == FAST_SEARCH) {

  000e8	41 83 fe 01	 cmp	 r14d, 1
  000ec	75 3a		 jne	 SHORT $LN49@fastsearch

; 129  :             for (i = 0; i < n; i++)

  000ee	48 85 d2	 test	 rdx, rdx
  000f1	7e 55		 jle	 SHORT $LN41@fastsearch
  000f3	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
$LL48@fastsearch:

; 130  :                 if (s[i] == p[0])

  000f7	41 38 04 0b	 cmp	 BYTE PTR [r11+rcx], al
  000fb	74 1a		 je	 SHORT $LN82@fastsearch

; 129  :             for (i = 0; i < n; i++)

  000fd	49 ff c3	 inc	 r11
  00100	4c 3b da	 cmp	 r11, rdx
  00103	7c f2		 jl	 SHORT $LL48@fastsearch

; 135  :                     return i;
; 136  :         }
; 137  :         return -1;

  00105	48 83 c8 ff	 or	 rax, -1

; 223  : }

  00109	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0010d	41 5f		 pop	 r15
  0010f	41 5e		 pop	 r14
  00111	41 5d		 pop	 r13
  00113	41 5c		 pop	 r12
  00115	5b		 pop	 rbx
  00116	c3		 ret	 0
$LN82@fastsearch:

; 131  :                     return i;

  00117	49 8b c3	 mov	 rax, r11

; 223  : }

  0011a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0011e	41 5f		 pop	 r15
  00120	41 5e		 pop	 r14
  00122	41 5d		 pop	 r13
  00124	41 5c		 pop	 r12
  00126	5b		 pop	 rbx
  00127	c3		 ret	 0
$LN49@fastsearch:

; 132  :         } else {    /* FAST_RSEARCH */
; 133  :             for (i = n - 1; i > -1; i--)

  00128	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  0012c	48 83 f8 ff	 cmp	 rax, -1
  00130	7e 16		 jle	 SHORT $LN41@fastsearch
  00132	41 0f b6 08	 movzx	 ecx, BYTE PTR [r8]
$LL43@fastsearch:

; 134  :                 if (s[i] == p[0])

  00136	38 0c 18	 cmp	 BYTE PTR [rax+rbx], cl
  00139	0f 84 92 02 00
	00		 je	 $LN62@fastsearch

; 132  :         } else {    /* FAST_RSEARCH */
; 133  :             for (i = n - 1; i > -1; i--)

  0013f	48 ff c8	 dec	 rax
  00142	48 83 f8 ff	 cmp	 rax, -1
  00146	7f ee		 jg	 SHORT $LL43@fastsearch
$LN41@fastsearch:

; 135  :                     return i;
; 136  :         }
; 137  :         return -1;

  00148	48 83 c8 ff	 or	 rax, -1

; 223  : }

  0014c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00150	41 5f		 pop	 r15
  00152	41 5e		 pop	 r14
  00154	41 5d		 pop	 r13
  00156	41 5c		 pop	 r12
  00158	5b		 pop	 rbx
  00159	c3		 ret	 0
$LN59@fastsearch:
  0015a	48 89 6c 24 70	 mov	 QWORD PTR [rsp+112], rbp
  0015f	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi

; 138  :     }
; 139  : 
; 140  :     mlast = m - 1;
; 141  :     skip = mlast - 1;
; 142  :     mask = 0;
; 143  : 
; 144  :     if (mode != FAST_RSEARCH) {

  00164	48 83 cd ff	 or	 rbp, -1
  00168	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0016d	49 8d 7d ff	 lea	 rdi, QWORD PTR [r13-1]
  00171	45 8b c3	 mov	 r8d, r11d
  00174	48 8d 47 ff	 lea	 rax, QWORD PTR [rdi-1]

; 145  : 
; 146  :         /* create compressed boyer-moore delta 1 table */
; 147  : 
; 148  :         /* process pattern[:-1] */
; 149  :         for (i = 0; i < mlast; i++) {

  00178	8d 75 02	 lea	 esi, QWORD PTR [rbp+2]
  0017b	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR skip$1$[rsp], rax
  00183	41 83 fe 02	 cmp	 r14d, 2
  00187	0f 84 5b 01 00
	00		 je	 $LN39@fastsearch
  0018d	48 85 ff	 test	 rdi, rdi
  00190	7e 75		 jle	 SHORT $LN36@fastsearch
  00192	46 0f b6 3c 3f	 movzx	 r15d, BYTE PTR [rdi+r15]
  00197	48 8b ac 24 80
	00 00 00	 mov	 rbp, QWORD PTR p$[rsp]
  0019f	4c 8d 4f ff	 lea	 r9, QWORD PTR [rdi-1]
  001a3	4c 8b f7	 mov	 r14, rdi
  001a6	4d 8b e1	 mov	 r12, r9
  001a9	41 8b fb	 mov	 edi, r11d
  001ac	0f 1f 40 00	 npad	 4
$LL38@fastsearch:

; 150  :             STRINGLIB_BLOOM_ADD(mask, p[i]);

  001b0	44 0f be 45 00	 movsx	 r8d, BYTE PTR [rbp]
  001b5	8b d6		 mov	 edx, esi
  001b7	41 8b c8	 mov	 ecx, r8d
  001ba	83 e1 1f	 and	 ecx, 31
  001bd	d3 e2		 shl	 edx, cl
  001bf	0b fa		 or	 edi, edx

; 151  :             if (p[i] == p[mlast])

  001c1	45 3a c7	 cmp	 r8b, r15b
  001c4	4d 0f 44 cc	 cmove	 r9, r12
  001c8	48 ff c5	 inc	 rbp
  001cb	49 ff cc	 dec	 r12
  001ce	49 ff ce	 dec	 r14
  001d1	75 dd		 jne	 SHORT $LL38@fastsearch
  001d3	4c 8b a4 24 90
	00 00 00	 mov	 r12, QWORD PTR maxcount$[rsp]
  001db	44 8b b4 24 98
	00 00 00	 mov	 r14d, DWORD PTR mode$[rsp]
  001e3	4c 8b bc 24 80
	00 00 00	 mov	 r15, QWORD PTR p$[rsp]
  001eb	89 7c 24 78	 mov	 DWORD PTR mask$1$[rsp], edi
  001ef	4c 89 8c 24 88
	00 00 00	 mov	 QWORD PTR skip$1$[rsp], r9
  001f7	48 83 cd ff	 or	 rbp, -1
  001fb	44 8b 44 24 78	 mov	 r8d, DWORD PTR mask$1$[rsp]
  00200	4d 8b cb	 mov	 r9, r11
  00203	49 8d 7d ff	 lea	 rdi, QWORD PTR [r13-1]
$LN36@fastsearch:

; 152  :                 skip = mlast - i - 1;
; 153  :         }
; 154  :         /* process pattern[-1] outside the loop */
; 155  :         STRINGLIB_BLOOM_ADD(mask, p[mlast]);

  00207	42 0f be 04 3f	 movsx	 eax, BYTE PTR [rdi+r15]

; 156  : 
; 157  :         for (i = 0; i <= w; i++) {

  0020c	49 8b d3	 mov	 rdx, r11
  0020f	83 e0 1f	 and	 eax, 31
  00212	0f b6 c8	 movzx	 ecx, al
  00215	d3 e6		 shl	 esi, cl
  00217	44 0b c6	 or	 r8d, esi
  0021a	44 89 44 24 78	 mov	 DWORD PTR mask$1$[rsp], r8d
  0021f	4d 85 d2	 test	 r10, r10
  00222	0f 88 9f 00 00
	00		 js	 $LN100@fastsearch
  00228	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR p$[rsp]
  00230	4e 8d 3c 2b	 lea	 r15, QWORD PTR [rbx+r13]
$LN108@fastsearch:
  00234	42 0f b6 44 2e
	ff		 movzx	 eax, BYTE PTR [rsi+r13-1]

; 158  :             /* note: using mlast in the skip path slows things down on x86 */
; 159  :             if (s[i+m-1] == p[m-1]) {

  0023a	41 38 44 17 ff	 cmp	 BYTE PTR [r15+rdx-1], al
  0023f	75 69		 jne	 SHORT $LN31@fastsearch

; 160  :                 /* candidate match */
; 161  :                 for (j = 0; j < mlast; j++)

  00241	4d 8b c3	 mov	 r8, r11
  00244	48 85 ff	 test	 rdi, rdi
  00247	7e 28		 jle	 SHORT $LN84@fastsearch
  00249	48 8b c2	 mov	 rax, rdx
  0024c	48 8b ce	 mov	 rcx, rsi
  0024f	48 2b c6	 sub	 rax, rsi
  00252	48 8d 34 18	 lea	 rsi, QWORD PTR [rax+rbx]
$LL30@fastsearch:

; 162  :                     if (s[i+j] != p[j])

  00256	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00259	38 04 0e	 cmp	 BYTE PTR [rsi+rcx], al
  0025c	75 0b		 jne	 SHORT $LN102@fastsearch

; 160  :                 /* candidate match */
; 161  :                 for (j = 0; j < mlast; j++)

  0025e	49 ff c0	 inc	 r8
  00261	48 ff c1	 inc	 rcx
  00264	4c 3b c7	 cmp	 r8, rdi
  00267	7c ed		 jl	 SHORT $LL30@fastsearch
$LN102@fastsearch:
  00269	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR p$[rsp]
$LN84@fastsearch:

; 163  :                         break;
; 164  :                 if (j == mlast) {

  00271	4c 3b c7	 cmp	 r8, rdi
  00274	75 17		 jne	 SHORT $LN26@fastsearch

; 165  :                     /* got a match! */
; 166  :                     if (mode != FAST_COUNT)

  00276	45 85 f6	 test	 r14d, r14d
  00279	75 65		 jne	 SHORT $LN85@fastsearch

; 168  :                     count++;

  0027b	49 ff c1	 inc	 r9

; 169  :                     if (count == maxcount)

  0027e	4d 3b cc	 cmp	 r9, r12
  00281	74 55		 je	 SHORT $LN86@fastsearch

; 171  :                     i = i + mlast;
; 172  :                     continue;

  00283	44 8b 44 24 78	 mov	 r8d, DWORD PTR mask$1$[rsp]
  00288	48 03 d7	 add	 rdx, rdi
  0028b	eb 2e		 jmp	 SHORT $LN33@fastsearch
$LN26@fastsearch:

; 173  :                 }
; 174  :                 /* miss: check if next character is part of pattern */
; 175  :                 if (!STRINGLIB_BLOOM(mask, s[i+m]))

  0028d	41 0f be 04 17	 movsx	 eax, BYTE PTR [r15+rdx]
  00292	44 8b 44 24 78	 mov	 r8d, DWORD PTR mask$1$[rsp]
  00297	83 e0 1f	 and	 eax, 31
  0029a	41 0f a3 c0	 bt	 r8d, eax

; 176  :                     i = i + m;
; 177  :                 else

  0029e	73 18		 jae	 SHORT $LN107@fastsearch

; 178  :                     i = i + skip;

  002a0	48 03 94 24 88
	00 00 00	 add	 rdx, QWORD PTR skip$1$[rsp]

; 179  :             } else {

  002a8	eb 11		 jmp	 SHORT $LN33@fastsearch
$LN31@fastsearch:

; 180  :                 /* skip: check if next character is part of pattern */
; 181  :                 if (!STRINGLIB_BLOOM(mask, s[i+m]))

  002aa	41 0f be 04 17	 movsx	 eax, BYTE PTR [r15+rdx]
  002af	83 e0 1f	 and	 eax, 31
  002b2	41 0f a3 c0	 bt	 r8d, eax
  002b6	72 03		 jb	 SHORT $LN33@fastsearch
$LN107@fastsearch:

; 182  :                     i = i + m;

  002b8	49 03 d5	 add	 rdx, r13
$LN33@fastsearch:

; 156  : 
; 157  :         for (i = 0; i <= w; i++) {

  002bb	48 ff c2	 inc	 rdx
  002be	49 3b d2	 cmp	 rdx, r10
  002c1	0f 8e 6d ff ff
	ff		 jle	 $LN108@fastsearch
$LN100@fastsearch:

; 216  :             }
; 217  :         }
; 218  :     }
; 219  : 
; 220  :     if (mode != FAST_COUNT)

  002c7	45 85 f6	 test	 r14d, r14d
  002ca	0f 85 ef 00 00
	00		 jne	 $LN101@fastsearch

; 222  :     return count;

  002d0	49 8b c1	 mov	 rax, r9
  002d3	e9 ea 00 00 00	 jmp	 $LN106@fastsearch
$LN86@fastsearch:

; 170  :                         return maxcount;

  002d8	49 8b c4	 mov	 rax, r12
  002db	e9 e2 00 00 00	 jmp	 $LN106@fastsearch
$LN85@fastsearch:

; 167  :                         return i;

  002e0	48 8b c2	 mov	 rax, rdx
  002e3	e9 da 00 00 00	 jmp	 $LN106@fastsearch
$LN39@fastsearch:

; 183  :             }
; 184  :         }
; 185  :     } else {    /* FAST_RSEARCH */
; 186  : 
; 187  :         /* create compressed boyer-moore delta 1 table */
; 188  : 
; 189  :         /* process pattern[0] outside the loop */
; 190  :         STRINGLIB_BLOOM_ADD(mask, p[0]);

  002e8	45 0f be 37	 movsx	 r14d, BYTE PTR [r15]
  002ec	44 8b e6	 mov	 r12d, esi
  002ef	41 8b ce	 mov	 ecx, r14d
  002f2	83 e1 1f	 and	 ecx, 31
  002f5	41 d3 e4	 shl	 r12d, cl

; 191  :         /* process pattern[:0:-1] */
; 192  :         for (i = mlast; i > 0; i--) {

  002f8	48 85 ff	 test	 rdi, rdi
  002fb	7e 41		 jle	 SHORT $LN16@fastsearch
  002fd	4e 8d 0c 3f	 lea	 r9, QWORD PTR [rdi+r15]
  00301	49 2b ef	 sub	 rbp, r15
  00304	4c 8b df	 mov	 r11, rdi
  00307	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL18@fastsearch:

; 193  :             STRINGLIB_BLOOM_ADD(mask, p[i]);

  00310	45 0f be 01	 movsx	 r8d, BYTE PTR [r9]
  00314	8b d6		 mov	 edx, esi
  00316	41 8b c8	 mov	 ecx, r8d
  00319	83 e1 1f	 and	 ecx, 31
  0031c	d3 e2		 shl	 edx, cl
  0031e	44 0b e2	 or	 r12d, edx

; 194  :             if (p[i] == p[0])

  00321	45 3a c6	 cmp	 r8b, r14b
  00324	75 0c		 jne	 SHORT $LN17@fastsearch

; 195  :                 skip = i - 1;

  00326	49 8d 04 29	 lea	 rax, QWORD PTR [r9+rbp]
  0032a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR skip$1$[rsp], rax
$LN17@fastsearch:

; 191  :         /* process pattern[:0:-1] */
; 192  :         for (i = mlast; i > 0; i--) {

  00332	49 ff c9	 dec	 r9
  00335	49 ff cb	 dec	 r11
  00338	75 d6		 jne	 SHORT $LL18@fastsearch
  0033a	48 83 cd ff	 or	 rbp, -1
$LN16@fastsearch:

; 196  :         }
; 197  : 
; 198  :         for (i = w; i >= 0; i--) {

  0033e	4d 8b c2	 mov	 r8, r10
  00341	4d 2b c7	 sub	 r8, r15
  00344	4c 03 c3	 add	 r8, rbx
$LL14@fastsearch:

; 199  :             if (s[i] == p[0]) {

  00347	45 38 34 1a	 cmp	 BYTE PTR [r10+rbx], r14b
  0034b	75 50		 jne	 SHORT $LN11@fastsearch

; 200  :                 /* candidate match */
; 201  :                 for (j = mlast; j > 0; j--)

  0034d	48 8b d7	 mov	 rdx, rdi
  00350	48 85 ff	 test	 rdi, rdi
  00353	7e 1f		 jle	 SHORT $LN103@fastsearch
  00355	4a 8d 0c 3f	 lea	 rcx, QWORD PTR [rdi+r15]
  00359	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@fastsearch:

; 202  :                     if (s[i+j] != p[j])

  00360	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00363	41 38 04 08	 cmp	 BYTE PTR [r8+rcx], al
  00367	75 0b		 jne	 SHORT $LN103@fastsearch

; 200  :                 /* candidate match */
; 201  :                 for (j = mlast; j > 0; j--)

  00369	48 ff ca	 dec	 rdx
  0036c	48 ff c9	 dec	 rcx
  0036f	48 85 d2	 test	 rdx, rdx
  00372	7f ec		 jg	 SHORT $LL10@fastsearch
$LN103@fastsearch:

; 203  :                         break;
; 204  :                 if (j == 0)

  00374	48 85 d2	 test	 rdx, rdx
  00377	74 66		 je	 SHORT $LN88@fastsearch

; 207  :                 /* miss: check if previous character is part of pattern */
; 208  :                 if (i > 0 && !STRINGLIB_BLOOM(mask, s[i-1]))

  00379	4d 85 d2	 test	 r10, r10
  0037c	7e 0f		 jle	 SHORT $LN5@fastsearch
  0037e	41 0f be 44 1a
	ff		 movsx	 eax, BYTE PTR [r10+rbx-1]
  00384	83 e0 1f	 and	 eax, 31
  00387	41 0f a3 c4	 bt	 r12d, eax

; 209  :                     i = i - m;
; 210  :                 else

  0038b	73 24		 jae	 SHORT $LN109@fastsearch
$LN5@fastsearch:

; 211  :                     i = i - skip;

  0038d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR skip$1$[rsp]
  00395	4c 2b d2	 sub	 r10, rdx
  00398	4c 2b c2	 sub	 r8, rdx

; 212  :             } else {

  0039b	eb 1a		 jmp	 SHORT $LN13@fastsearch
$LN11@fastsearch:

; 213  :                 /* skip: check if previous character is part of pattern */
; 214  :                 if (i > 0 && !STRINGLIB_BLOOM(mask, s[i-1]))

  0039d	4d 85 d2	 test	 r10, r10
  003a0	7e 15		 jle	 SHORT $LN13@fastsearch
  003a2	41 0f be 44 1a
	ff		 movsx	 eax, BYTE PTR [r10+rbx-1]
  003a8	83 e0 1f	 and	 eax, 31
  003ab	41 0f a3 c4	 bt	 r12d, eax
  003af	72 06		 jb	 SHORT $LN13@fastsearch
$LN109@fastsearch:

; 215  :                     i = i - m;

  003b1	4d 2b d5	 sub	 r10, r13
  003b4	4d 2b c5	 sub	 r8, r13
$LN13@fastsearch:

; 196  :         }
; 197  : 
; 198  :         for (i = w; i >= 0; i--) {

  003b7	49 ff c8	 dec	 r8
  003ba	49 ff ca	 dec	 r10
  003bd	79 88		 jns	 SHORT $LL14@fastsearch
$LN101@fastsearch:

; 221  :         return -1;

  003bf	48 8b c5	 mov	 rax, rbp
$LN106@fastsearch:
  003c2	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  003c7	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  003cc	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
$LN62@fastsearch:

; 223  : }

  003d1	48 83 c4 40	 add	 rsp, 64			; 00000040H
  003d5	41 5f		 pop	 r15
  003d7	41 5e		 pop	 r14
  003d9	41 5d		 pop	 r13
  003db	41 5c		 pop	 r12
  003dd	5b		 pop	 rbx
  003de	c3		 ret	 0
$LN88@fastsearch:

; 205  :                     /* got a match! */
; 206  :                     return i;

  003df	49 8b c2	 mov	 rax, r10
  003e2	eb de		 jmp	 SHORT $LN106@fastsearch
fastsearch ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\stringlib\count.h
pdata	SEGMENT
$pdata$stringlib_count DD imagerel stringlib_count
	DD	imagerel stringlib_count+40
	DD	imagerel $unwind$stringlib_count
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$stringlib_count DD imagerel stringlib_count+40
	DD	imagerel stringlib_count+73
	DD	imagerel $chain$0$stringlib_count
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$stringlib_count DD imagerel stringlib_count+73
	DD	imagerel stringlib_count+78
	DD	imagerel $chain$1$stringlib_count
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$stringlib_count DD 021H
	DD	imagerel stringlib_count
	DD	imagerel stringlib_count+40
	DD	imagerel $unwind$stringlib_count
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$stringlib_count DD 020521H
	DD	063405H
	DD	imagerel stringlib_count
	DD	imagerel stringlib_count+40
	DD	imagerel $unwind$stringlib_count
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_count DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT stringlib_count
_TEXT	SEGMENT
str$ = 64
str_len$ = 72
sub$ = 80
sub_len$ = 88
maxcount$ = 96
stringlib_count PROC					; COMDAT

; 11   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 12   :     Py_ssize_t count;
; 13   : 
; 14   :     if (str_len < 0)

  00004	48 85 d2	 test	 rdx, rdx
  00007	79 07		 jns	 SHORT $LN3@stringlib_@2

; 15   :         return 0; /* start > len(str) */

  00009	33 c0		 xor	 eax, eax

; 22   :         return 0; /* no match */
; 23   : 
; 24   :     return count;
; 25   : }

  0000b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0000f	c3		 ret	 0
$LN3@stringlib_@2:

; 16   :     if (sub_len == 0)
; 17   :         return (str_len < maxcount) ? str_len + 1 : maxcount;

  00010	48 8b 44 24 60	 mov	 rax, QWORD PTR maxcount$[rsp]
  00015	4d 85 c9	 test	 r9, r9
  00018	75 0e		 jne	 SHORT $LN2@stringlib_@2
  0001a	48 3b d0	 cmp	 rdx, rax
  0001d	7d 2a		 jge	 SHORT $LN1@stringlib_@2
  0001f	48 8d 42 01	 lea	 rax, QWORD PTR [rdx+1]

; 22   :         return 0; /* no match */
; 23   : 
; 24   :     return count;
; 25   : }

  00023	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00027	c3		 ret	 0
$LN2@stringlib_@2:
  00028	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 18   : 
; 19   :     count = FASTSEARCH(str, str_len, sub, sub_len, maxcount, FAST_COUNT);

  0002d	33 db		 xor	 ebx, ebx
  0002f	89 5c 24 28	 mov	 DWORD PTR [rsp+40], ebx
  00033	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00038	e8 00 00 00 00	 call	 fastsearch

; 20   : 
; 21   :     if (count < 0)

  0003d	48 85 c0	 test	 rax, rax
  00040	48 0f 48 c3	 cmovs	 rax, rbx
  00044	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN1@stringlib_@2:

; 22   :         return 0; /* no match */
; 23   : 
; 24   :     return count;
; 25   : }

  00049	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004d	c3		 ret	 0
stringlib_count ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\stringlib\fastsearch.h
pdata	SEGMENT
$pdata$stringlib_find DD imagerel stringlib_find
	DD	imagerel stringlib_find+58
	DD	imagerel $unwind$stringlib_find
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$stringlib_find DD imagerel stringlib_find+58
	DD	imagerel stringlib_find+235
	DD	imagerel $chain$4$stringlib_find
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$stringlib_find DD imagerel stringlib_find+235
	DD	imagerel stringlib_find+513
	DD	imagerel $chain$6$stringlib_find
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$stringlib_find DD 0a0021H
	DD	06f400H
	DD	07d400H
	DD	0fc400H
	DD	0e6400H
	DD	0c5400H
	DD	imagerel stringlib_find
	DD	imagerel stringlib_find+58
	DD	imagerel $unwind$stringlib_find
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$stringlib_find DD 0a1c21H
	DD	06f41cH
	DD	07d417H
	DD	0fc40fH
	DD	0e640aH
	DD	0c5405H
	DD	imagerel stringlib_find
	DD	imagerel stringlib_find+58
	DD	imagerel $unwind$stringlib_find
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_find DD 040901H
	DD	0e0057209H
	DD	030027003H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\stringlib\find.h
xdata	ENDS
;	COMDAT stringlib_find
_TEXT	SEGMENT
w$1$ = 32
str$ = 96
skip$1$ = 104
str_len$ = 104
sub$ = 112
sub_len$ = 120
offset$ = 128
stringlib_find PROC					; COMDAT

; 11   : {

  00000	40 53		 push	 rbx
  00002	57		 push	 rdi
  00003	41 56		 push	 r14
  00005	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00009	49 8b d9	 mov	 rbx, r9
  0000c	4d 8b f0	 mov	 r14, r8
  0000f	48 8b f9	 mov	 rdi, rcx

; 12   :     Py_ssize_t pos;
; 13   : 
; 14   :     if (str_len < 0)

  00012	48 85 d2	 test	 rdx, rdx
  00015	79 0d		 jns	 SHORT $LN3@stringlib_@3

; 15   :         return -1;

  00017	48 83 c8 ff	 or	 rax, -1

; 25   : }

  0001b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0001f	41 5e		 pop	 r14
  00021	5f		 pop	 rdi
  00022	5b		 pop	 rbx
  00023	c3		 ret	 0
$LN3@stringlib_@3:

; 16   :     if (sub_len == 0)

  00024	48 85 db	 test	 rbx, rbx
  00027	75 11		 jne	 SHORT $LN2@stringlib_@3

; 17   :         return offset;

  00029	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR offset$[rsp]

; 25   : }

  00031	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00035	41 5e		 pop	 r14
  00037	5f		 pop	 rdi
  00038	5b		 pop	 rbx
  00039	c3		 ret	 0
$LN2@stringlib_@3:
  0003a	48 89 6c 24 60	 mov	 QWORD PTR [rsp+96], rbp
  0003f	48 89 74 24 70	 mov	 QWORD PTR [rsp+112], rsi
  00044	4c 89 64 24 78	 mov	 QWORD PTR [rsp+120], r12

; 18   : 
; 19   :     pos = FASTSEARCH(str, str_len, sub, sub_len, -1, FAST_SEARCH);

  00049	48 8b ea	 mov	 rbp, rdx
  0004c	4c 89 6c 24 38	 mov	 QWORD PTR [rsp+56], r13
  00051	4c 89 7c 24 30	 mov	 QWORD PTR [rsp+48], r15
  00056	48 2b eb	 sub	 rbp, rbx
  00059	48 89 6c 24 20	 mov	 QWORD PTR w$1$[rsp], rbp
  0005e	78 62		 js	 SHORT $LN65@stringlib_@3
  00060	48 83 fb 01	 cmp	 rbx, 1
  00064	0f 8f 81 00 00
	00		 jg	 $LN64@stringlib_@3
  0006a	48 85 db	 test	 rbx, rbx
  0006d	7e 53		 jle	 SHORT $LN65@stringlib_@3
  0006f	48 83 fa 0a	 cmp	 rdx, 10
  00073	7e 2f		 jle	 SHORT $LN62@stringlib_@3
  00075	4c 8d 04 11	 lea	 r8, QWORD PTR [rcx+rdx]
  00079	49 3b c8	 cmp	 rcx, r8
  0007c	73 15		 jae	 SHORT $LN72@stringlib_@3
  0007e	41 0f b6 16	 movzx	 edx, BYTE PTR [r14]
  00082	4c 2b c1	 sub	 r8, rcx
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  0008b	4c 8b c8	 mov	 r9, rax
  0008e	48 85 c0	 test	 rax, rax
  00091	75 09		 jne	 SHORT $LN71@stringlib_@3
$LN72@stringlib_@3:
  00093	49 83 c9 ff	 or	 r9, -1
  00097	e9 4f 01 00 00	 jmp	 $LN67@stringlib_@3
$LN71@stringlib_@3:
  0009c	4c 2b cf	 sub	 r9, rdi
  0009f	e9 47 01 00 00	 jmp	 $LN67@stringlib_@3
$LN62@stringlib_@3:
  000a4	45 33 c9	 xor	 r9d, r9d
  000a7	48 85 d2	 test	 rdx, rdx
  000aa	7e 16		 jle	 SHORT $LN65@stringlib_@3
  000ac	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
$LL53@stringlib_@3:
  000b0	41 38 04 09	 cmp	 BYTE PTR [r9+rcx], al
  000b4	0f 84 31 01 00
	00		 je	 $LN67@stringlib_@3
  000ba	49 ff c1	 inc	 r9
  000bd	4c 3b ca	 cmp	 r9, rdx
  000c0	7c ee		 jl	 SHORT $LL53@stringlib_@3
$LN65@stringlib_@3:
  000c2	49 83 c9 ff	 or	 r9, -1
$LN1@stringlib_@3:
  000c6	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]
  000cb	4c 8b 6c 24 38	 mov	 r13, QWORD PTR [rsp+56]
  000d0	4c 8b 64 24 78	 mov	 r12, QWORD PTR [rsp+120]
  000d5	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  000da	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]

; 23   : 
; 24   :     return pos;

  000df	49 8b c1	 mov	 rax, r9

; 25   : }

  000e2	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000e6	41 5e		 pop	 r14
  000e8	5f		 pop	 rdi
  000e9	5b		 pop	 rbx
  000ea	c3		 ret	 0

; 18   : 
; 19   :     pos = FASTSEARCH(str, str_len, sub, sub_len, -1, FAST_SEARCH);

$LN64@stringlib_@3:
  000eb	4d 8d 51 ff	 lea	 r10, QWORD PTR [r9-1]
  000ef	45 33 c9	 xor	 r9d, r9d
  000f2	4d 8d 62 ff	 lea	 r12, QWORD PTR [r10-1]
  000f6	45 8b f9	 mov	 r15d, r9d
  000f9	45 8d 59 01	 lea	 r11d, QWORD PTR [r9+1]
  000fd	4d 85 d2	 test	 r10, r10
  00100	7e 55		 jle	 SHORT $LN41@stringlib_@3
  00102	47 0f b6 2c 02	 movzx	 r13d, BYTE PTR [r10+r8]
  00107	49 8b ec	 mov	 rbp, r12
  0010a	4d 8b e2	 mov	 r12, r10
  0010d	4c 8b d5	 mov	 r10, rbp
  00110	49 8b f0	 mov	 rsi, r8
  00113	66 66 66 66 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL43@stringlib_@3:
  00120	44 0f be 06	 movsx	 r8d, BYTE PTR [rsi]
  00124	41 8b d3	 mov	 edx, r11d
  00127	41 8b c8	 mov	 ecx, r8d
  0012a	83 e1 1f	 and	 ecx, 31
  0012d	d3 e2		 shl	 edx, cl
  0012f	44 0b fa	 or	 r15d, edx
  00132	45 3a c5	 cmp	 r8b, r13b
  00135	4c 0f 44 d5	 cmove	 r10, rbp
  00139	48 ff c6	 inc	 rsi
  0013c	48 ff cd	 dec	 rbp
  0013f	49 ff cc	 dec	 r12
  00142	75 dc		 jne	 SHORT $LL43@stringlib_@3
  00144	48 8b 6c 24 20	 mov	 rbp, QWORD PTR w$1$[rsp]
  00149	4c 89 54 24 68	 mov	 QWORD PTR skip$1$[rsp], r10
  0014e	4c 8d 53 ff	 lea	 r10, QWORD PTR [rbx-1]
  00152	4c 8b 64 24 68	 mov	 r12, QWORD PTR skip$1$[rsp]
$LN41@stringlib_@3:
  00157	43 0f be 0c 32	 movsx	 ecx, BYTE PTR [r10+r14]
  0015c	49 8b d1	 mov	 rdx, r9
  0015f	83 e1 1f	 and	 ecx, 31
  00162	41 d3 e3	 shl	 r11d, cl
  00165	45 0b fb	 or	 r15d, r11d
  00168	48 85 ed	 test	 rbp, rbp
  0016b	0f 88 51 ff ff
	ff		 js	 $LN65@stringlib_@3
  00171	45 0f b6 6c 1e
	ff		 movzx	 r13d, BYTE PTR [r14+rbx-1]
  00177	48 8d 34 1f	 lea	 rsi, QWORD PTR [rdi+rbx]
  0017b	0f 1f 44 00 00	 npad	 5
$LL39@stringlib_@3:
  00180	44 38 6c 16 ff	 cmp	 BYTE PTR [rsi+rdx-1], r13b
  00185	75 44		 jne	 SHORT $LN36@stringlib_@3
  00187	4d 8b c1	 mov	 r8, r9
  0018a	4d 85 d2	 test	 r10, r10
  0018d	7e 25		 jle	 SHORT $LN89@stringlib_@3
  0018f	4c 8b da	 mov	 r11, rdx
  00192	49 8b ce	 mov	 rcx, r14
  00195	4d 2b de	 sub	 r11, r14
  00198	4c 03 df	 add	 r11, rdi
  0019b	0f 1f 44 00 00	 npad	 5
$LL35@stringlib_@3:
  001a0	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  001a3	41 38 04 0b	 cmp	 BYTE PTR [r11+rcx], al
  001a7	75 0b		 jne	 SHORT $LN89@stringlib_@3
  001a9	49 ff c0	 inc	 r8
  001ac	48 ff c1	 inc	 rcx
  001af	4d 3b c2	 cmp	 r8, r10
  001b2	7c ec		 jl	 SHORT $LL35@stringlib_@3
$LN89@stringlib_@3:
  001b4	4d 3b c2	 cmp	 r8, r10
  001b7	74 2f		 je	 SHORT $LN83@stringlib_@3
  001b9	0f be 04 16	 movsx	 eax, BYTE PTR [rsi+rdx]
  001bd	83 e0 1f	 and	 eax, 31
  001c0	41 0f a3 c7	 bt	 r15d, eax
  001c4	73 12		 jae	 SHORT $LN90@stringlib_@3
  001c6	49 03 d4	 add	 rdx, r12
  001c9	eb 10		 jmp	 SHORT $LN38@stringlib_@3
$LN36@stringlib_@3:
  001cb	0f be 04 16	 movsx	 eax, BYTE PTR [rsi+rdx]
  001cf	83 e0 1f	 and	 eax, 31
  001d2	41 0f a3 c7	 bt	 r15d, eax
  001d6	72 03		 jb	 SHORT $LN38@stringlib_@3
$LN90@stringlib_@3:
  001d8	48 03 d3	 add	 rdx, rbx
$LN38@stringlib_@3:
  001db	48 ff c2	 inc	 rdx
  001de	48 3b d5	 cmp	 rdx, rbp
  001e1	7e 9d		 jle	 SHORT $LL39@stringlib_@3
  001e3	e9 da fe ff ff	 jmp	 $LN65@stringlib_@3
$LN83@stringlib_@3:
  001e8	4c 8b ca	 mov	 r9, rdx
$LN67@stringlib_@3:

; 20   : 
; 21   :     if (pos >= 0)

  001eb	4d 85 c9	 test	 r9, r9
  001ee	0f 88 d2 fe ff
	ff		 js	 $LN1@stringlib_@3

; 22   :         pos += offset;

  001f4	4c 03 8c 24 80
	00 00 00	 add	 r9, QWORD PTR offset$[rsp]
  001fc	e9 c5 fe ff ff	 jmp	 $LN1@stringlib_@3
stringlib_find ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\stringlib\fastsearch.h
pdata	SEGMENT
$pdata$stringlib_rfind DD imagerel stringlib_rfind
	DD	imagerel stringlib_rfind+58
	DD	imagerel $unwind$stringlib_rfind
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$stringlib_rfind DD imagerel stringlib_rfind+58
	DD	imagerel stringlib_rfind+161
	DD	imagerel $chain$2$stringlib_rfind
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$stringlib_rfind DD imagerel stringlib_rfind+161
	DD	imagerel stringlib_rfind+198
	DD	imagerel $chain$4$stringlib_rfind
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$stringlib_rfind DD imagerel stringlib_rfind+198
	DD	imagerel stringlib_rfind+280
	DD	imagerel $chain$6$stringlib_rfind
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$stringlib_rfind DD imagerel stringlib_rfind+280
	DD	imagerel stringlib_rfind+425
	DD	imagerel $chain$7$stringlib_rfind
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$stringlib_rfind DD 021H
	DD	imagerel stringlib_rfind+161
	DD	imagerel stringlib_rfind+198
	DD	imagerel $chain$4$stringlib_rfind
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$stringlib_rfind DD 040d21H
	DD	07740dH
	DD	066405H
	DD	imagerel stringlib_rfind+161
	DD	imagerel stringlib_rfind+198
	DD	imagerel $chain$4$stringlib_rfind
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$stringlib_rfind DD 060021H
	DD	0e400H
	DD	01d400H
	DD	08c400H
	DD	imagerel stringlib_rfind
	DD	imagerel stringlib_rfind+58
	DD	imagerel $unwind$stringlib_rfind
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$stringlib_rfind DD 061421H
	DD	0e414H
	DD	01d40dH
	DD	08c405H
	DD	imagerel stringlib_rfind
	DD	imagerel stringlib_rfind+58
	DD	imagerel $unwind$stringlib_rfind
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_rfind DD 040901H
	DD	0f0051209H
	DD	030025003H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\stringlib\find.h
xdata	ENDS
;	COMDAT stringlib_rfind
_TEXT	SEGMENT
str$ = 48
str_len$ = 56
sub$ = 64
sub_len$ = 72
offset$ = 80
stringlib_rfind PROC					; COMDAT

; 31   : {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	41 57		 push	 r15
  00005	48 83 ec 10	 sub	 rsp, 16
  00009	49 8b d9	 mov	 rbx, r9
  0000c	4d 8b f8	 mov	 r15, r8
  0000f	48 8b e9	 mov	 rbp, rcx

; 32   :     Py_ssize_t pos;
; 33   : 
; 34   :     if (str_len < 0)

  00012	48 85 d2	 test	 rdx, rdx
  00015	79 0d		 jns	 SHORT $LN3@stringlib_@4

; 35   :         return -1;

  00017	48 83 c8 ff	 or	 rax, -1

; 45   : }

  0001b	48 83 c4 10	 add	 rsp, 16
  0001f	41 5f		 pop	 r15
  00021	5d		 pop	 rbp
  00022	5b		 pop	 rbx
  00023	c3		 ret	 0
$LN3@stringlib_@4:

; 36   :     if (sub_len == 0)

  00024	48 85 db	 test	 rbx, rbx
  00027	75 11		 jne	 SHORT $LN2@stringlib_@4

; 37   :         return str_len + offset;

  00029	48 8b 44 24 50	 mov	 rax, QWORD PTR offset$[rsp]
  0002e	48 03 c2	 add	 rax, rdx

; 45   : }

  00031	48 83 c4 10	 add	 rsp, 16
  00035	41 5f		 pop	 r15
  00037	5d		 pop	 rbp
  00038	5b		 pop	 rbx
  00039	c3		 ret	 0
$LN2@stringlib_@4:
  0003a	4c 89 64 24 40	 mov	 QWORD PTR [rsp+64], r12

; 38   : 
; 39   :     pos = FASTSEARCH(str, str_len, sub, sub_len, -1, FAST_RSEARCH);

  0003f	4c 8b ca	 mov	 r9, rdx
  00042	4c 89 6c 24 08	 mov	 QWORD PTR [rsp+8], r13
  00047	4c 2b cb	 sub	 r9, rbx
  0004a	4c 89 34 24	 mov	 QWORD PTR [rsp], r14
  0004e	78 33		 js	 SHORT $LN65@stringlib_@4
  00050	48 83 fb 01	 cmp	 rbx, 1
  00054	7f 4b		 jg	 SHORT $LN64@stringlib_@4
  00056	48 85 db	 test	 rbx, rbx
  00059	7e 28		 jle	 SHORT $LN65@stringlib_@4
  0005b	4c 8d 4a ff	 lea	 r9, QWORD PTR [rdx-1]
  0005f	49 83 f9 ff	 cmp	 r9, -1
  00063	7e 1e		 jle	 SHORT $LN65@stringlib_@4
  00065	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL48@stringlib_@4:
  00070	41 38 04 09	 cmp	 BYTE PTR [r9+rcx], al
  00074	0f 84 15 01 00
	00		 je	 $LN83@stringlib_@4
  0007a	49 ff c9	 dec	 r9
  0007d	49 83 f9 ff	 cmp	 r9, -1
  00081	7f ed		 jg	 SHORT $LL48@stringlib_@4
$LN65@stringlib_@4:
  00083	49 83 ca ff	 or	 r10, -1
$LN1@stringlib_@4:
  00087	4c 8b 34 24	 mov	 r14, QWORD PTR [rsp]
  0008b	4c 8b 6c 24 08	 mov	 r13, QWORD PTR [rsp+8]
  00090	4c 8b 64 24 40	 mov	 r12, QWORD PTR [rsp+64]

; 43   : 
; 44   :     return pos;

  00095	49 8b c2	 mov	 rax, r10

; 45   : }

  00098	48 83 c4 10	 add	 rsp, 16
  0009c	41 5f		 pop	 r15
  0009e	5d		 pop	 rbp
  0009f	5b		 pop	 rbx
  000a0	c3		 ret	 0

; 38   : 
; 39   :     pos = FASTSEARCH(str, str_len, sub, sub_len, -1, FAST_RSEARCH);

$LN64@stringlib_@4:
  000a1	45 0f be 18	 movsx	 r11d, BYTE PTR [r8]
  000a5	4c 8d 63 ff	 lea	 r12, QWORD PTR [rbx-1]
  000a9	41 be 01 00 00
	00		 mov	 r14d, 1
  000af	41 8b cb	 mov	 ecx, r11d
  000b2	49 83 ca ff	 or	 r10, -1
  000b6	4d 8d 6c 24 ff	 lea	 r13, QWORD PTR [r12-1]
  000bb	83 e1 1f	 and	 ecx, 31
  000be	41 d3 e6	 shl	 r14d, cl
  000c1	4d 85 e4	 test	 r12, r12
  000c4	7e 52		 jle	 SHORT $LN21@stringlib_@4
  000c6	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  000cb	49 8b f2	 mov	 rsi, r10
  000ce	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  000d3	4f 8d 1c 04	 lea	 r11, QWORD PTR [r12+r8]
  000d7	49 8b fc	 mov	 rdi, r12
  000da	45 0f b6 20	 movzx	 r12d, BYTE PTR [r8]
  000de	49 2b f0	 sub	 rsi, r8
$LL23@stringlib_@4:
  000e1	45 0f be 03	 movsx	 r8d, BYTE PTR [r11]
  000e5	ba 01 00 00 00	 mov	 edx, 1
  000ea	41 8b c8	 mov	 ecx, r8d
  000ed	83 e1 1f	 and	 ecx, 31
  000f0	d3 e2		 shl	 edx, cl
  000f2	44 0b f2	 or	 r14d, edx
  000f5	45 3a c4	 cmp	 r8b, r12b
  000f8	75 04		 jne	 SHORT $LN22@stringlib_@4
  000fa	4e 8d 2c 1e	 lea	 r13, QWORD PTR [rsi+r11]
$LN22@stringlib_@4:
  000fe	49 ff cb	 dec	 r11
  00101	48 ff cf	 dec	 rdi
  00104	75 db		 jne	 SHORT $LL23@stringlib_@4
  00106	45 0f b6 1f	 movzx	 r11d, BYTE PTR [r15]
  0010a	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  0010f	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  00114	4c 8d 63 ff	 lea	 r12, QWORD PTR [rbx-1]
$LN21@stringlib_@4:
  00118	4d 8b c1	 mov	 r8, r9
  0011b	4d 2b c7	 sub	 r8, r15
  0011e	4c 03 c5	 add	 r8, rbp
$LL19@stringlib_@4:
  00121	45 38 1c 29	 cmp	 BYTE PTR [r9+rbp], r11b
  00125	75 41		 jne	 SHORT $LN16@stringlib_@4
  00127	49 8b d4	 mov	 rdx, r12
  0012a	4d 85 e4	 test	 r12, r12
  0012d	7e 18		 jle	 SHORT $LN89@stringlib_@4
  0012f	4b 8d 0c 3c	 lea	 rcx, QWORD PTR [r12+r15]
$LL15@stringlib_@4:
  00133	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00136	41 38 04 08	 cmp	 BYTE PTR [r8+rcx], al
  0013a	75 0b		 jne	 SHORT $LN89@stringlib_@4
  0013c	48 ff ca	 dec	 rdx
  0013f	48 ff c9	 dec	 rcx
  00142	48 85 d2	 test	 rdx, rdx
  00145	7f ec		 jg	 SHORT $LL15@stringlib_@4
$LN89@stringlib_@4:
  00147	48 85 d2	 test	 rdx, rdx
  0014a	74 43		 je	 SHORT $LN83@stringlib_@4
  0014c	4d 85 c9	 test	 r9, r9
  0014f	7e 0f		 jle	 SHORT $LN10@stringlib_@4
  00151	41 0f be 44 29
	ff		 movsx	 eax, BYTE PTR [r9+rbp-1]
  00157	83 e0 1f	 and	 eax, 31
  0015a	41 0f a3 c6	 bt	 r14d, eax
  0015e	73 1c		 jae	 SHORT $LN90@stringlib_@4
$LN10@stringlib_@4:
  00160	4d 2b cd	 sub	 r9, r13
  00163	4d 2b c5	 sub	 r8, r13
  00166	eb 1a		 jmp	 SHORT $LN18@stringlib_@4
$LN16@stringlib_@4:
  00168	4d 85 c9	 test	 r9, r9
  0016b	7e 15		 jle	 SHORT $LN18@stringlib_@4
  0016d	41 0f be 44 29
	ff		 movsx	 eax, BYTE PTR [r9+rbp-1]
  00173	83 e0 1f	 and	 eax, 31
  00176	41 0f a3 c6	 bt	 r14d, eax
  0017a	72 06		 jb	 SHORT $LN18@stringlib_@4
$LN90@stringlib_@4:
  0017c	4c 2b cb	 sub	 r9, rbx
  0017f	4c 2b c3	 sub	 r8, rbx
$LN18@stringlib_@4:
  00182	49 ff c8	 dec	 r8
  00185	49 ff c9	 dec	 r9
  00188	79 97		 jns	 SHORT $LL19@stringlib_@4
  0018a	e9 f8 fe ff ff	 jmp	 $LN1@stringlib_@4
$LN83@stringlib_@4:
  0018f	4d 8b d1	 mov	 r10, r9

; 40   : 
; 41   :     if (pos >= 0)

  00192	4d 85 c9	 test	 r9, r9
  00195	0f 88 ec fe ff
	ff		 js	 $LN1@stringlib_@4

; 42   :         pos += offset;

  0019b	48 8b 44 24 50	 mov	 rax, QWORD PTR offset$[rsp]
  001a0	4d 8d 14 01	 lea	 r10, QWORD PTR [r9+rax]
  001a4	e9 de fe ff ff	 jmp	 $LN1@stringlib_@4
stringlib_rfind ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringlib_find_slice DD imagerel stringlib_find_slice
	DD	imagerel stringlib_find_slice+75
	DD	imagerel $unwind$stringlib_find_slice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_find_slice DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT stringlib_find_slice
_TEXT	SEGMENT
str$ = 64
str_len$ = 72
sub$ = 80
sub_len$ = 88
start$ = 96
end$ = 104
stringlib_find_slice PROC				; COMDAT

; 66   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	4c 8b d2	 mov	 r10, rdx

; 67   :     ADJUST_INDICES(start, end, str_len);

  00007	48 8b 54 24 68	 mov	 rdx, QWORD PTR end$[rsp]
  0000c	45 33 db	 xor	 r11d, r11d
  0000f	49 3b d2	 cmp	 rdx, r10
  00012	7e 05		 jle	 SHORT $LN6@stringlib_@5
  00014	49 8b d2	 mov	 rdx, r10
  00017	eb 0c		 jmp	 SHORT $LN3@stringlib_@5
$LN6@stringlib_@5:
  00019	48 85 d2	 test	 rdx, rdx
  0001c	79 07		 jns	 SHORT $LN3@stringlib_@5
  0001e	49 03 d2	 add	 rdx, r10
  00021	49 0f 48 d3	 cmovs	 rdx, r11
$LN3@stringlib_@5:
  00025	48 8b 44 24 60	 mov	 rax, QWORD PTR start$[rsp]
  0002a	48 85 c0	 test	 rax, rax
  0002d	79 07		 jns	 SHORT $LN1@stringlib_@5
  0002f	49 03 c2	 add	 rax, r10
  00032	49 0f 48 c3	 cmovs	 rax, r11
$LN1@stringlib_@5:

; 68   :     return STRINGLIB(find)(str + start, end - start, sub, sub_len, start);

  00036	48 2b d0	 sub	 rdx, rax
  00039	48 03 c8	 add	 rcx, rax
  0003c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00041	e8 00 00 00 00	 call	 stringlib_find

; 69   : }

  00046	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004a	c3		 ret	 0
stringlib_find_slice ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringlib_rfind_slice DD imagerel stringlib_rfind_slice
	DD	imagerel stringlib_rfind_slice+75
	DD	imagerel $unwind$stringlib_rfind_slice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_rfind_slice DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT stringlib_rfind_slice
_TEXT	SEGMENT
str$ = 64
str_len$ = 72
sub$ = 80
sub_len$ = 88
start$ = 96
end$ = 104
stringlib_rfind_slice PROC				; COMDAT

; 75   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	4c 8b d2	 mov	 r10, rdx

; 76   :     ADJUST_INDICES(start, end, str_len);

  00007	48 8b 54 24 68	 mov	 rdx, QWORD PTR end$[rsp]
  0000c	45 33 db	 xor	 r11d, r11d
  0000f	49 3b d2	 cmp	 rdx, r10
  00012	7e 05		 jle	 SHORT $LN6@stringlib_@6
  00014	49 8b d2	 mov	 rdx, r10
  00017	eb 0c		 jmp	 SHORT $LN3@stringlib_@6
$LN6@stringlib_@6:
  00019	48 85 d2	 test	 rdx, rdx
  0001c	79 07		 jns	 SHORT $LN3@stringlib_@6
  0001e	49 03 d2	 add	 rdx, r10
  00021	49 0f 48 d3	 cmovs	 rdx, r11
$LN3@stringlib_@6:
  00025	48 8b 44 24 60	 mov	 rax, QWORD PTR start$[rsp]
  0002a	48 85 c0	 test	 rax, rax
  0002d	79 07		 jns	 SHORT $LN1@stringlib_@6
  0002f	49 03 c2	 add	 rax, r10
  00032	49 0f 48 c3	 cmovs	 rax, r11
$LN1@stringlib_@6:

; 77   :     return STRINGLIB(rfind)(str + start, end - start, sub, sub_len, start);

  00036	48 2b d0	 sub	 rdx, rax
  00039	48 03 c8	 add	 rcx, rax
  0003c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00041	e8 00 00 00 00	 call	 stringlib_rfind

; 78   : }

  00046	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004a	c3		 ret	 0
stringlib_rfind_slice ENDP
_TEXT	ENDS
PUBLIC	??_C@_05BBAJLHME@O?$HMOO?3?$AA@			; `string'
EXTRN	_PyEval_SliceIndex:PROC
EXTRN	_PyArg_ParseTuple_SizeT:PROC
EXTRN	__imp_strncpy:PROC
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringlib_parse_args_finds DD imagerel stringlib_parse_args_finds
	DD	imagerel stringlib_parse_args_finds+307
	DD	imagerel $unwind$stringlib_parse_args_finds
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_parse_args_finds DD 0b2001H
	DD	0187420H
	DD	0176420H
	DD	0163420H
	DD	0120120H
	DD	0c012d014H
	DD	05010H
xdata	ENDS
;	COMDAT ??_C@_05BBAJLHME@O?$HMOO?3?$AA@
CONST	SEGMENT
??_C@_05BBAJLHME@O?$HMOO?3?$AA@ DB 'O|OO:', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringlib_parse_args_finds
_TEXT	SEGMENT
tmp_start$ = 48
tmp_end$ = 56
obj_end$ = 64
obj_start$ = 72
tmp_subobj$ = 80
format$ = 88
function_name$ = 176
args$ = 184
subobj$ = 192
start$ = 200
end$ = 208
stringlib_parse_args_finds PROC				; COMDAT

; 108  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	55		 push	 rbp
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 8d 6c 24 c1	 lea	 rbp, QWORD PTR [rsp-63]
  00019	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 109  :     PyObject *tmp_subobj;
; 110  :     Py_ssize_t tmp_start = 0;
; 111  :     Py_ssize_t tmp_end = PY_SSIZE_T_MAX;

  00020	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0002a	4d 8b e0	 mov	 r12, r8
  0002d	48 8b da	 mov	 rbx, rdx
  00030	48 8b d1	 mov	 rdx, rcx

; 112  :     PyObject *obj_start=Py_None, *obj_end=Py_None;
; 113  :     char format[FORMAT_BUFFER_SIZE] = "O|OO:";
; 114  :     size_t len = strlen(format);

  00033	48 83 c9 ff	 or	 rcx, -1
  00037	48 89 45 e7	 mov	 QWORD PTR tmp_end$[rbp-81], rax
  0003b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ??_C@_05BBAJLHME@O?$HMOO?3?$AA@
  00041	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:_Py_NoneStruct
  00048	48 8d 7d 07	 lea	 rdi, QWORD PTR format$[rbp-81]
  0004c	89 45 07	 mov	 DWORD PTR format$[rbp-81], eax
  0004f	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_05BBAJLHME@O?$HMOO?3?$AA@+4

; 115  : 
; 116  :     strncpy(format + len, function_name, FORMAT_BUFFER_SIZE - len - 1);

  00056	41 b8 31 00 00
	00		 mov	 r8d, 49			; 00000031H
  0005c	66 89 45 0b	 mov	 WORD PTR format$[rbp-77], ax
  00060	33 c0		 xor	 eax, eax
  00062	49 8b f1	 mov	 rsi, r9
  00065	48 89 45 0d	 mov	 QWORD PTR format$[rbp-75], rax
  00069	48 89 45 15	 mov	 QWORD PTR format$[rbp-67], rax
  0006d	48 89 45 1d	 mov	 QWORD PTR format$[rbp-59], rax
  00071	48 89 45 25	 mov	 QWORD PTR format$[rbp-51], rax
  00075	48 89 45 2d	 mov	 QWORD PTR format$[rbp-43], rax
  00079	89 45 35	 mov	 DWORD PTR format$[rbp-35], eax
  0007c	f2 ae		 repne scasb
  0007e	48 c7 45 df 00
	00 00 00	 mov	 QWORD PTR tmp_start$[rbp-81], 0
  00086	4c 89 6d f7	 mov	 QWORD PTR obj_start$[rbp-81], r13
  0008a	48 f7 d1	 not	 rcx
  0008d	4c 89 6d ef	 mov	 QWORD PTR obj_end$[rbp-81], r13
  00091	48 ff c9	 dec	 rcx
  00094	4c 2b c1	 sub	 r8, rcx
  00097	48 8d 4c 0d 07	 lea	 rcx, QWORD PTR format$[rbp+rcx-81]
  0009c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy

; 117  :     format[FORMAT_BUFFER_SIZE - 1] = '\0';
; 118  : 
; 119  :     if (!PyArg_ParseTuple(args, format, &tmp_subobj, &obj_start, &obj_end))

  000a2	48 8d 45 ef	 lea	 rax, QWORD PTR obj_end$[rbp-81]
  000a6	4c 8d 4d f7	 lea	 r9, QWORD PTR obj_start$[rbp-81]
  000aa	4c 8d 45 ff	 lea	 r8, QWORD PTR tmp_subobj$[rbp-81]
  000ae	48 8d 55 07	 lea	 rdx, QWORD PTR format$[rbp-81]
  000b2	48 8b cb	 mov	 rcx, rbx
  000b5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ba	c6 45 38 00	 mov	 BYTE PTR format$[rbp-32], 0
  000be	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  000c3	85 c0		 test	 eax, eax
  000c5	75 04		 jne	 SHORT $LN5@stringlib_@7
$LN8@stringlib_@7:

; 120  :         return 0;

  000c7	33 c0		 xor	 eax, eax
  000c9	eb 4b		 jmp	 SHORT $LN6@stringlib_@7
$LN5@stringlib_@7:

; 121  : 
; 122  :     /* To support None in "start" and "end" arguments, meaning
; 123  :        the same as if they were not passed.
; 124  :     */
; 125  :     if (obj_start != Py_None)

  000cb	48 8b 4d f7	 mov	 rcx, QWORD PTR obj_start$[rbp-81]
  000cf	49 3b cd	 cmp	 rcx, r13
  000d2	74 0d		 je	 SHORT $LN3@stringlib_@7

; 126  :         if (!_PyEval_SliceIndex(obj_start, &tmp_start))

  000d4	48 8d 55 df	 lea	 rdx, QWORD PTR tmp_start$[rbp-81]
  000d8	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  000dd	85 c0		 test	 eax, eax

; 127  :             return 0;

  000df	74 e6		 je	 SHORT $LN8@stringlib_@7
$LN3@stringlib_@7:

; 128  :     if (obj_end != Py_None)

  000e1	48 8b 4d ef	 mov	 rcx, QWORD PTR obj_end$[rbp-81]
  000e5	49 3b cd	 cmp	 rcx, r13
  000e8	74 0d		 je	 SHORT $LN1@stringlib_@7

; 129  :         if (!_PyEval_SliceIndex(obj_end, &tmp_end))

  000ea	48 8d 55 e7	 lea	 rdx, QWORD PTR tmp_end$[rbp-81]
  000ee	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  000f3	85 c0		 test	 eax, eax

; 130  :             return 0;

  000f5	74 d0		 je	 SHORT $LN8@stringlib_@7
$LN1@stringlib_@7:

; 131  : 
; 132  :     *start = tmp_start;

  000f7	48 8b 45 df	 mov	 rax, QWORD PTR tmp_start$[rbp-81]

; 133  :     *end = tmp_end;

  000fb	48 8b 4d 7f	 mov	 rcx, QWORD PTR end$[rbp-81]
  000ff	48 89 06	 mov	 QWORD PTR [rsi], rax
  00102	48 8b 45 e7	 mov	 rax, QWORD PTR tmp_end$[rbp-81]
  00106	48 89 01	 mov	 QWORD PTR [rcx], rax

; 134  :     *subobj = tmp_subobj;

  00109	48 8b 45 ff	 mov	 rax, QWORD PTR tmp_subobj$[rbp-81]
  0010d	49 89 04 24	 mov	 QWORD PTR [r12], rax

; 135  :     return 1;

  00111	b8 01 00 00 00	 mov	 eax, 1
$LN6@stringlib_@7:

; 136  : }

  00116	4c 8d 9c 24 90
	00 00 00	 lea	 r11, QWORD PTR [rsp+144]
  0011e	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  00122	49 8b 73 28	 mov	 rsi, QWORD PTR [r11+40]
  00126	49 8b 7b 30	 mov	 rdi, QWORD PTR [r11+48]
  0012a	49 8b e3	 mov	 rsp, r11
  0012d	41 5d		 pop	 r13
  0012f	41 5c		 pop	 r12
  00131	5d		 pop	 rbp
  00132	c3		 ret	 0
stringlib_parse_args_finds ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@NJOIMFKH@byte?5must?5be?5in?5range?$CI0?0?5256?$CJ?$AA@ ; `string'
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_GivenExceptionMatches:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyNumber_AsSsize_t:PROC
EXTRN	PyNumber_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringlib_parse_args_finds_byte DD imagerel stringlib_parse_args_finds_byte
	DD	imagerel stringlib_parse_args_finds_byte+56
	DD	imagerel $unwind$stringlib_parse_args_finds_byte
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$stringlib_parse_args_finds_byte DD imagerel stringlib_parse_args_finds_byte+56
	DD	imagerel stringlib_parse_args_finds_byte+157
	DD	imagerel $chain$0$stringlib_parse_args_finds_byte
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$stringlib_parse_args_finds_byte DD imagerel stringlib_parse_args_finds_byte+157
	DD	imagerel stringlib_parse_args_finds_byte+195
	DD	imagerel $chain$2$stringlib_parse_args_finds_byte
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$stringlib_parse_args_finds_byte DD imagerel stringlib_parse_args_finds_byte+195
	DD	imagerel stringlib_parse_args_finds_byte+232
	DD	imagerel $chain$4$stringlib_parse_args_finds_byte
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$stringlib_parse_args_finds_byte DD 020021H
	DD	0a3400H
	DD	imagerel stringlib_parse_args_finds_byte
	DD	imagerel stringlib_parse_args_finds_byte+56
	DD	imagerel $unwind$stringlib_parse_args_finds_byte
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$stringlib_parse_args_finds_byte DD 020021H
	DD	0a3400H
	DD	imagerel stringlib_parse_args_finds_byte
	DD	imagerel stringlib_parse_args_finds_byte+56
	DD	imagerel $unwind$stringlib_parse_args_finds_byte
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$stringlib_parse_args_finds_byte DD 020521H
	DD	0a3405H
	DD	imagerel stringlib_parse_args_finds_byte
	DD	imagerel stringlib_parse_args_finds_byte+56
	DD	imagerel $unwind$stringlib_parse_args_finds_byte
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_parse_args_finds_byte DD 040a01H
	DD	0b640aH
	DD	07006720aH
xdata	ENDS
;	COMDAT ??_C@_0BO@NJOIMFKH@byte?5must?5be?5in?5range?$CI0?0?5256?$CJ?$AA@
CONST	SEGMENT
??_C@_0BO@NJOIMFKH@byte?5must?5be?5in?5range?$CI0?0?5256?$CJ?$AA@ DB 'byt'
	DB	'e must be in range(0, 256)', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringlib_parse_args_finds_byte
_TEXT	SEGMENT
tmp_subobj$ = 48
function_name$ = 80
args$ = 88
subobj$ = 96
byte$ = 104
start$ = 112
end$ = 120
stringlib_parse_args_finds_byte PROC			; COMDAT

; 186  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 187  :     PyObject *tmp_subobj;
; 188  :     Py_ssize_t ival;
; 189  :     PyObject *err;
; 190  : 
; 191  :     if(!STRINGLIB(parse_args_finds)(function_name, args, &tmp_subobj,
; 192  :                                     start, end))

  0000a	48 8b 44 24 78	 mov	 rax, QWORD PTR end$[rsp]
  0000f	49 8b f1	 mov	 rsi, r9
  00012	4c 8b 4c 24 70	 mov	 r9, QWORD PTR start$[rsp]
  00017	49 8b f8	 mov	 rdi, r8
  0001a	4c 8d 44 24 30	 lea	 r8, QWORD PTR tmp_subobj$[rsp]
  0001f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00024	e8 00 00 00 00	 call	 stringlib_parse_args_finds
  00029	85 c0		 test	 eax, eax
  0002b	75 0b		 jne	 SHORT $LN6@stringlib_@8

; 218  : }

  0002d	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00032	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00036	5f		 pop	 rdi
  00037	c3		 ret	 0
$LN6@stringlib_@8:
  00038	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx

; 193  :         return 0;
; 194  : 
; 195  :     if (!PyNumber_Check(tmp_subobj)) {

  0003d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR tmp_subobj$[rsp]
  00042	48 8b cb	 mov	 rcx, rbx
  00045	e8 00 00 00 00	 call	 PyNumber_Check
  0004a	85 c0		 test	 eax, eax

; 196  :         *subobj = tmp_subobj;
; 197  :         return 1;

  0004c	74 37		 je	 SHORT $LN10@stringlib_@8

; 198  :     }
; 199  : 
; 200  :     ival = PyNumber_AsSsize_t(tmp_subobj, PyExc_OverflowError);

  0004e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  00055	48 8b cb	 mov	 rcx, rbx
  00058	e8 00 00 00 00	 call	 PyNumber_AsSsize_t

; 201  :     if (ival == -1) {

  0005d	48 83 f8 ff	 cmp	 rax, -1
  00061	75 3a		 jne	 SHORT $LN3@stringlib_@8

; 202  :         err = PyErr_Occurred();

  00063	e8 00 00 00 00	 call	 PyErr_Occurred

; 203  :         if (err && !PyErr_GivenExceptionMatches(err, PyExc_OverflowError)) {

  00068	48 85 c0	 test	 rax, rax
  0006b	74 56		 je	 SHORT $LN1@stringlib_@8
  0006d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  00074	48 8b c8	 mov	 rcx, rax
  00077	e8 00 00 00 00	 call	 PyErr_GivenExceptionMatches
  0007c	85 c0		 test	 eax, eax
  0007e	75 43		 jne	 SHORT $LN1@stringlib_@8

; 204  :             PyErr_Clear();

  00080	e8 00 00 00 00	 call	 PyErr_Clear
$LN10@stringlib_@8:

; 205  :             *subobj = tmp_subobj;

  00085	48 89 1f	 mov	 QWORD PTR [rdi], rbx
  00088	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 206  :             return 1;

  0008d	b8 01 00 00 00	 mov	 eax, 1

; 218  : }

  00092	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00097	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0009b	5f		 pop	 rdi
  0009c	c3		 ret	 0
$LN3@stringlib_@8:

; 207  :         }
; 208  :     }
; 209  : 
; 210  :     if (ival < 0 || ival > 255) {

  0009d	48 3d ff 00 00
	00		 cmp	 rax, 255		; 000000ffH
  000a3	77 1e		 ja	 SHORT $LN1@stringlib_@8

; 212  :         return 0;
; 213  :     }
; 214  : 
; 215  :     *subobj = NULL;

  000a5	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000aa	48 c7 07 00 00
	00 00		 mov	 QWORD PTR [rdi], 0

; 216  :     *byte = (char)ival;

  000b1	88 06		 mov	 BYTE PTR [rsi], al

; 217  :     return 1;

  000b3	b8 01 00 00 00	 mov	 eax, 1

; 218  : }

  000b8	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  000bd	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000c1	5f		 pop	 rdi
  000c2	c3		 ret	 0
$LN1@stringlib_@8:

; 211  :         PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)");

  000c3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@NJOIMFKH@byte?5must?5be?5in?5range?$CI0?0?5256?$CJ?$AA@
  000d1	e8 00 00 00 00	 call	 PyErr_SetString
  000d6	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 218  : }

  000db	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  000e0	33 c0		 xor	 eax, eax
  000e2	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000e6	5f		 pop	 rdi
  000e7	c3		 ret	 0
stringlib_parse_args_finds_byte ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@JDENDMBF@empty?5separator?$AA@	; `string'
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\stringlib\fastsearch.h
pdata	SEGMENT
$pdata$stringlib_partition DD imagerel stringlib_partition
	DD	imagerel stringlib_partition+81
	DD	imagerel $unwind$stringlib_partition
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$stringlib_partition DD imagerel stringlib_partition+81
	DD	imagerel stringlib_partition+116
	DD	imagerel $chain$0$stringlib_partition
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$stringlib_partition DD imagerel stringlib_partition+116
	DD	imagerel stringlib_partition+361
	DD	imagerel $chain$5$stringlib_partition
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$stringlib_partition DD imagerel stringlib_partition+361
	DD	imagerel stringlib_partition+736
	DD	imagerel $chain$7$stringlib_partition
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$stringlib_partition DD 080021H
	DD	08f400H
	DD	096400H
	DD	0a5400H
	DD	0113400H
	DD	imagerel stringlib_partition
	DD	imagerel stringlib_partition+81
	DD	imagerel $unwind$stringlib_partition
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$stringlib_partition DD 081221H
	DD	096412H
	DD	0a540dH
	DD	0113408H
	DD	08f400H
	DD	imagerel stringlib_partition
	DD	imagerel stringlib_partition+81
	DD	imagerel $unwind$stringlib_partition
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$stringlib_partition DD 020521H
	DD	08f405H
	DD	imagerel stringlib_partition
	DD	imagerel stringlib_partition+81
	DD	imagerel $unwind$stringlib_partition
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_partition DD 051501H
	DD	0e011a215H
	DD	0c00dd00fH
	DD	0700bH
xdata	ENDS
;	COMDAT ??_C@_0BA@JDENDMBF@empty?5separator?$AA@
CONST	SEGMENT
??_C@_0BA@JDENDMBF@empty?5separator?$AA@ DB 'empty separator', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\stringlib\partition.h
CONST	ENDS
;	COMDAT stringlib_partition
_TEXT	SEGMENT
mask$1$ = 32
skip$1$ = 40
mlast$1$ = 48
w$1$ = 56
str_obj$ = 128
str$ = 136
str_len$ = 144
sep_obj$ = 152
sep$ = 160
sep_len$ = 168
stringlib_partition PROC				; COMDAT

; 12   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	41 54		 push	 r12
  0000d	41 55		 push	 r13
  0000f	41 56		 push	 r14
  00011	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 13   :     PyObject* out;
; 14   :     Py_ssize_t pos;
; 15   : 
; 16   :     if (sep_len == 0) {

  00015	4c 8b ac 24 a8
	00 00 00	 mov	 r13, QWORD PTR sep_len$[rsp]
  0001d	49 8b f9	 mov	 rdi, r9
  00020	4d 8b f0	 mov	 r14, r8
  00023	4c 8b e2	 mov	 r12, rdx
  00026	4d 85 ed	 test	 r13, r13
  00029	75 21		 jne	 SHORT $LN4@stringlib_@9

; 17   :         PyErr_SetString(PyExc_ValueError, "empty separator");

  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@JDENDMBF@empty?5separator?$AA@
  00039	e8 00 00 00 00	 call	 PyErr_SetString

; 18   :         return NULL;

  0003e	33 c0		 xor	 eax, eax

; 52   :     }
; 53   : 
; 54   :     return out;
; 55   : }

  00040	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00044	41 5e		 pop	 r14
  00046	41 5d		 pop	 r13
  00048	41 5c		 pop	 r12
  0004a	5f		 pop	 rdi
  0004b	c3		 ret	 0
$LN4@stringlib_@9:

; 19   :     }
; 20   : 
; 21   :     out = PyTuple_New(3);

  0004c	b9 03 00 00 00	 mov	 ecx, 3
  00051	4c 89 7c 24 40	 mov	 QWORD PTR [rsp+64], r15
  00056	e8 00 00 00 00	 call	 PyTuple_New
  0005b	4c 8b f8	 mov	 r15, rax

; 22   :     if (!out)

  0005e	48 85 c0	 test	 rax, rax
  00061	75 11		 jne	 SHORT $LN3@stringlib_@9
  00063	4c 8b 7c 24 40	 mov	 r15, QWORD PTR [rsp+64]

; 52   :     }
; 53   : 
; 54   :     return out;
; 55   : }

  00068	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0006c	41 5e		 pop	 r14
  0006e	41 5d		 pop	 r13
  00070	41 5c		 pop	 r12
  00072	5f		 pop	 rdi
  00073	c3		 ret	 0
$LN3@stringlib_@9:
  00074	48 89 9c 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rbx
  0007c	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  00081	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi

; 23   :         return NULL;
; 24   : 
; 25   :     pos = FASTSEARCH(str, str_len, sep, sep_len, -1, FAST_SEARCH);

  00086	49 8b f6	 mov	 rsi, r14
  00089	49 2b f5	 sub	 rsi, r13
  0008c	48 89 74 24 38	 mov	 QWORD PTR w$1$[rsp], rsi
  00091	78 72		 js	 SHORT $LN90@stringlib_@9
  00093	49 83 fd 01	 cmp	 r13, 1
  00097	0f 8f cc 00 00
	00		 jg	 $LN65@stringlib_@9
  0009d	4d 85 ed	 test	 r13, r13
  000a0	7e 63		 jle	 SHORT $LN90@stringlib_@9
  000a2	49 83 fe 0a	 cmp	 r14, 10
  000a6	7e 39		 jle	 SHORT $LN63@stringlib_@9
  000a8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR sep$[rsp]
  000b0	4f 8d 04 34	 lea	 r8, QWORD PTR [r12+r14]
  000b4	4d 3b e0	 cmp	 r12, r8
  000b7	73 17		 jae	 SHORT $LN73@stringlib_@9
  000b9	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  000bc	4d 2b c4	 sub	 r8, r12
  000bf	49 8b cc	 mov	 rcx, r12
  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  000c8	48 8b d8	 mov	 rbx, rax
  000cb	48 85 c0	 test	 rax, rax
  000ce	75 09		 jne	 SHORT $LN72@stringlib_@9
$LN73@stringlib_@9:
  000d0	48 83 cb ff	 or	 rbx, -1
  000d4	e9 ad 01 00 00	 jmp	 $LN68@stringlib_@9
$LN72@stringlib_@9:
  000d9	49 2b dc	 sub	 rbx, r12
  000dc	e9 a5 01 00 00	 jmp	 $LN68@stringlib_@9
$LN63@stringlib_@9:
  000e1	33 db		 xor	 ebx, ebx
  000e3	4d 85 f6	 test	 r14, r14
  000e6	7e 1d		 jle	 SHORT $LN90@stringlib_@9
  000e8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR sep$[rsp]
  000f0	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
$LL54@stringlib_@9:
  000f3	42 38 0c 23	 cmp	 BYTE PTR [rbx+r12], cl
  000f7	0f 84 89 01 00
	00		 je	 $LN68@stringlib_@9
  000fd	48 ff c3	 inc	 rbx
  00100	49 3b de	 cmp	 rbx, r14
  00103	7c ee		 jl	 SHORT $LL54@stringlib_@9
$LN90@stringlib_@9:

; 28   : #if STRINGLIB_MUTABLE
; 29   :         PyTuple_SET_ITEM(out, 0, STRINGLIB_NEW(str, str_len));
; 30   :         PyTuple_SET_ITEM(out, 1, STRINGLIB_NEW(NULL, 0));
; 31   :         PyTuple_SET_ITEM(out, 2, STRINGLIB_NEW(NULL, 0));
; 32   : #else
; 33   :         Py_INCREF(str_obj);

  00105	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR str_obj$[rsp]
  0010d	48 8b cb	 mov	 rcx, rbx
  00110	e8 00 00 00 00	 call	 _Py_IncRef

; 34   :         PyTuple_SET_ITEM(out, 0, (PyObject*) str_obj);
; 35   :         Py_INCREF(STRINGLIB_EMPTY);

  00115	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR nullstring
  0011c	49 89 5f 70	 mov	 QWORD PTR [r15+112], rbx
  00120	e8 00 00 00 00	 call	 _Py_IncRef

; 36   :         PyTuple_SET_ITEM(out, 1, (PyObject*) STRINGLIB_EMPTY);

  00125	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR nullstring
  0012c	49 89 4f 78	 mov	 QWORD PTR [r15+120], rcx

; 37   :         Py_INCREF(STRINGLIB_EMPTY);

  00130	e8 00 00 00 00	 call	 _Py_IncRef

; 38   :         PyTuple_SET_ITEM(out, 2, (PyObject*) STRINGLIB_EMPTY);

  00135	4c 8b 1d 00 00
	00 00		 mov	 r11, QWORD PTR nullstring
  0013c	4d 89 9f 80 00
	00 00		 mov	 QWORD PTR [r15+128], r11
$LN1@stringlib_@9:

; 39   : #endif
; 40   :         return out;

  00143	49 8b c7	 mov	 rax, r15
$LN95@stringlib_@9:
  00146	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0014b	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00150	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR [rsp+136]
  00158	4c 8b 7c 24 40	 mov	 r15, QWORD PTR [rsp+64]

; 52   :     }
; 53   : 
; 54   :     return out;
; 55   : }

  0015d	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00161	41 5e		 pop	 r14
  00163	41 5d		 pop	 r13
  00165	41 5c		 pop	 r12
  00167	5f		 pop	 rdi
  00168	c3		 ret	 0

; 23   :         return NULL;
; 24   : 
; 25   :     pos = FASTSEARCH(str, str_len, sep, sep_len, -1, FAST_SEARCH);

$LN65@stringlib_@9:
  00169	4d 8d 4d ff	 lea	 r9, QWORD PTR [r13-1]
  0016d	33 db		 xor	 ebx, ebx
  0016f	49 8d 41 ff	 lea	 rax, QWORD PTR [r9-1]
  00173	4c 89 4c 24 30	 mov	 QWORD PTR mlast$1$[rsp], r9
  00178	8b fb		 mov	 edi, ebx
  0017a	44 8d 53 01	 lea	 r10d, QWORD PTR [rbx+1]
  0017e	48 89 44 24 28	 mov	 QWORD PTR skip$1$[rsp], rax
  00183	4d 85 c9	 test	 r9, r9
  00186	7e 5d		 jle	 SHORT $LN42@stringlib_@9
  00188	4c 8b 9c 24 a0
	00 00 00	 mov	 r11, QWORD PTR sep$[rsp]
  00190	49 8b f1	 mov	 rsi, r9
  00193	48 8b f8	 mov	 rdi, rax
  00196	43 0f b6 2c 19	 movzx	 ebp, BYTE PTR [r9+r11]
  0019b	4c 8b c8	 mov	 r9, rax
  0019e	44 8b eb	 mov	 r13d, ebx
$LL44@stringlib_@9:
  001a1	45 0f be 03	 movsx	 r8d, BYTE PTR [r11]
  001a5	41 8b d2	 mov	 edx, r10d
  001a8	41 8b c8	 mov	 ecx, r8d
  001ab	83 e1 1f	 and	 ecx, 31
  001ae	d3 e2		 shl	 edx, cl
  001b0	44 0b ea	 or	 r13d, edx
  001b3	44 3a c5	 cmp	 r8b, bpl
  001b6	4c 0f 44 cf	 cmove	 r9, rdi
  001ba	49 ff c3	 inc	 r11
  001bd	48 ff cf	 dec	 rdi
  001c0	48 ff ce	 dec	 rsi
  001c3	75 dc		 jne	 SHORT $LL44@stringlib_@9
  001c5	48 8b 74 24 38	 mov	 rsi, QWORD PTR w$1$[rsp]
  001ca	44 89 6c 24 20	 mov	 DWORD PTR mask$1$[rsp], r13d
  001cf	4c 8b ac 24 a8
	00 00 00	 mov	 r13, QWORD PTR sep_len$[rsp]
  001d7	8b 7c 24 20	 mov	 edi, DWORD PTR mask$1$[rsp]
  001db	4c 89 4c 24 28	 mov	 QWORD PTR skip$1$[rsp], r9
  001e0	4c 8b 4c 24 30	 mov	 r9, QWORD PTR mlast$1$[rsp]
$LN42@stringlib_@9:
  001e5	48 8b ac 24 a0
	00 00 00	 mov	 rbp, QWORD PTR sep$[rsp]
  001ed	48 8b d3	 mov	 rdx, rbx
  001f0	41 0f be 04 29	 movsx	 eax, BYTE PTR [r9+rbp]
  001f5	83 e0 1f	 and	 eax, 31
  001f8	0f b6 c8	 movzx	 ecx, al
  001fb	41 d3 e2	 shl	 r10d, cl
  001fe	41 0b fa	 or	 edi, r10d
  00201	48 85 f6	 test	 rsi, rsi
  00204	0f 88 fb fe ff
	ff		 js	 $LN90@stringlib_@9
  0020a	4f 8d 1c 2c	 lea	 r11, QWORD PTR [r12+r13]
$LN97@stringlib_@9:
  0020e	41 0f b6 44 2d
	ff		 movzx	 eax, BYTE PTR [r13+rbp-1]
  00214	41 38 44 13 ff	 cmp	 BYTE PTR [r11+rdx-1], al
  00219	75 42		 jne	 SHORT $LN37@stringlib_@9
  0021b	4c 8b c3	 mov	 r8, rbx
  0021e	4d 85 c9	 test	 r9, r9
  00221	7e 21		 jle	 SHORT $LN91@stringlib_@9
  00223	4c 8b d2	 mov	 r10, rdx
  00226	48 8b cd	 mov	 rcx, rbp
  00229	4c 2b d5	 sub	 r10, rbp
  0022c	4d 03 d4	 add	 r10, r12
  0022f	90		 npad	 1
$LL36@stringlib_@9:
  00230	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00233	41 38 04 0a	 cmp	 BYTE PTR [r10+rcx], al
  00237	75 0b		 jne	 SHORT $LN91@stringlib_@9
  00239	49 ff c0	 inc	 r8
  0023c	48 ff c1	 inc	 rcx
  0023f	4d 3b c1	 cmp	 r8, r9
  00242	7c ec		 jl	 SHORT $LL36@stringlib_@9
$LN91@stringlib_@9:
  00244	4d 3b c1	 cmp	 r8, r9
  00247	74 32		 je	 SHORT $LN84@stringlib_@9
  00249	41 0f be 04 13	 movsx	 eax, BYTE PTR [r11+rdx]
  0024e	83 e0 1f	 and	 eax, 31
  00251	0f a3 c7	 bt	 edi, eax
  00254	73 14		 jae	 SHORT $LN96@stringlib_@9
  00256	48 03 54 24 28	 add	 rdx, QWORD PTR skip$1$[rsp]
  0025b	eb 10		 jmp	 SHORT $LN39@stringlib_@9
$LN37@stringlib_@9:
  0025d	41 0f be 04 13	 movsx	 eax, BYTE PTR [r11+rdx]
  00262	83 e0 1f	 and	 eax, 31
  00265	0f a3 c7	 bt	 edi, eax
  00268	72 03		 jb	 SHORT $LN39@stringlib_@9
$LN96@stringlib_@9:
  0026a	49 03 d5	 add	 rdx, r13
$LN39@stringlib_@9:
  0026d	48 ff c2	 inc	 rdx
  00270	48 3b d6	 cmp	 rdx, rsi
  00273	0f 8f 8c fe ff
	ff		 jg	 $LN90@stringlib_@9
  00279	eb 93		 jmp	 SHORT $LN97@stringlib_@9
$LN84@stringlib_@9:
  0027b	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR sep_obj$[rsp]
  00283	48 8b da	 mov	 rbx, rdx
$LN68@stringlib_@9:

; 26   : 
; 27   :     if (pos < 0) {

  00286	48 85 db	 test	 rbx, rbx
  00289	0f 88 76 fe ff
	ff		 js	 $LN90@stringlib_@9

; 41   :     }
; 42   : 
; 43   :     PyTuple_SET_ITEM(out, 0, STRINGLIB_NEW(str, pos));

  0028f	48 8b d3	 mov	 rdx, rbx
  00292	49 8b cc	 mov	 rcx, r12
  00295	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 44   :     Py_INCREF(sep_obj);

  0029a	48 8b cf	 mov	 rcx, rdi
  0029d	49 89 47 70	 mov	 QWORD PTR [r15+112], rax
  002a1	e8 00 00 00 00	 call	 _Py_IncRef

; 45   :     PyTuple_SET_ITEM(out, 1, sep_obj);
; 46   :     pos += sep_len;

  002a6	49 03 dd	 add	 rbx, r13

; 47   :     PyTuple_SET_ITEM(out, 2, STRINGLIB_NEW(str + pos, str_len - pos));

  002a9	4c 2b f3	 sub	 r14, rbx
  002ac	4a 8d 0c 23	 lea	 rcx, QWORD PTR [rbx+r12]
  002b0	49 89 7f 78	 mov	 QWORD PTR [r15+120], rdi
  002b4	49 8b d6	 mov	 rdx, r14
  002b7	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  002bc	49 89 87 80 00
	00 00		 mov	 QWORD PTR [r15+128], rax

; 48   : 
; 49   :     if (PyErr_Occurred()) {

  002c3	e8 00 00 00 00	 call	 PyErr_Occurred
  002c8	48 85 c0	 test	 rax, rax
  002cb	0f 84 72 fe ff
	ff		 je	 $LN1@stringlib_@9

; 50   :         Py_DECREF(out);

  002d1	49 8b cf	 mov	 rcx, r15
  002d4	e8 00 00 00 00	 call	 _Py_DecRef

; 51   :         return NULL;

  002d9	33 c0		 xor	 eax, eax
  002db	e9 66 fe ff ff	 jmp	 $LN95@stringlib_@9
stringlib_partition ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\stringlib\fastsearch.h
pdata	SEGMENT
$pdata$stringlib_rpartition DD imagerel stringlib_rpartition
	DD	imagerel stringlib_rpartition+82
	DD	imagerel $unwind$stringlib_rpartition
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$stringlib_rpartition DD imagerel stringlib_rpartition+82
	DD	imagerel stringlib_rpartition+115
	DD	imagerel $chain$0$stringlib_rpartition
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$stringlib_rpartition DD imagerel stringlib_rpartition+115
	DD	imagerel stringlib_rpartition+289
	DD	imagerel $chain$5$stringlib_rpartition
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$stringlib_rpartition DD imagerel stringlib_rpartition+289
	DD	imagerel stringlib_rpartition+626
	DD	imagerel $chain$7$stringlib_rpartition
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$stringlib_rpartition DD 080021H
	DD	04f400H
	DD	05e400H
	DD	06c400H
	DD	0d3400H
	DD	imagerel stringlib_rpartition
	DD	imagerel stringlib_rpartition+82
	DD	imagerel $unwind$stringlib_rpartition
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$stringlib_rpartition DD 081521H
	DD	04f415H
	DD	05e40dH
	DD	0d3405H
	DD	06c400H
	DD	imagerel stringlib_rpartition
	DD	imagerel stringlib_rpartition+82
	DD	imagerel $unwind$stringlib_rpartition
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$stringlib_rpartition DD 020521H
	DD	06c405H
	DD	imagerel stringlib_rpartition
	DD	imagerel stringlib_rpartition+82
	DD	imagerel $unwind$stringlib_rpartition
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_rpartition DD 051801H
	DD	0d0146218H
	DD	060117012H
	DD	05010H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\stringlib\partition.h
xdata	ENDS
;	COMDAT stringlib_rpartition
_TEXT	SEGMENT
str_obj$ = 96
str$ = 104
str_len$ = 112
sep_obj$ = 120
sep$ = 128
sep_len$ = 136
stringlib_rpartition PROC				; COMDAT

; 62   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	41 55		 push	 r13
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 63   :     PyObject* out;
; 64   :     Py_ssize_t pos;
; 65   : 
; 66   :     if (sep_len == 0) {

  00018	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR sep_len$[rsp]
  00020	4d 8b e9	 mov	 r13, r9
  00023	49 8b e8	 mov	 rbp, r8
  00026	48 8b f2	 mov	 rsi, rdx
  00029	48 85 ff	 test	 rdi, rdi
  0002c	75 1f		 jne	 SHORT $LN4@stringlib_@10

; 67   :         PyErr_SetString(PyExc_ValueError, "empty separator");

  0002e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@JDENDMBF@empty?5separator?$AA@
  0003c	e8 00 00 00 00	 call	 PyErr_SetString

; 68   :         return NULL;

  00041	33 c0		 xor	 eax, eax

; 102  :     }
; 103  : 
; 104  :     return out;
; 105  : }

  00043	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00047	41 5d		 pop	 r13
  00049	5f		 pop	 rdi
  0004a	5e		 pop	 rsi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
$LN4@stringlib_@10:

; 69   :     }
; 70   : 
; 71   :     out = PyTuple_New(3);

  0004d	b9 03 00 00 00	 mov	 ecx, 3
  00052	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  00057	e8 00 00 00 00	 call	 PyTuple_New
  0005c	4c 8b e0	 mov	 r12, rax

; 72   :     if (!out)

  0005f	48 85 c0	 test	 rax, rax
  00062	75 0f		 jne	 SHORT $LN3@stringlib_@10
  00064	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]

; 102  :     }
; 103  : 
; 104  :     return out;
; 105  : }

  00069	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006d	41 5d		 pop	 r13
  0006f	5f		 pop	 rdi
  00070	5e		 pop	 rsi
  00071	5d		 pop	 rbp
  00072	c3		 ret	 0
$LN3@stringlib_@10:
  00073	48 89 5c 24 68	 mov	 QWORD PTR [rsp+104], rbx

; 73   :         return NULL;
; 74   : 
; 75   :     pos = FASTSEARCH(str, str_len, sep, sep_len, -1, FAST_RSEARCH);

  00078	48 8b dd	 mov	 rbx, rbp
  0007b	4c 89 74 24 28	 mov	 QWORD PTR [rsp+40], r14
  00080	48 2b df	 sub	 rbx, rdi
  00083	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00088	78 38		 js	 SHORT $LN90@stringlib_@10
  0008a	48 83 ff 01	 cmp	 rdi, 1
  0008e	0f 8f 8d 00 00
	00		 jg	 $LN65@stringlib_@10
  00094	48 85 ff	 test	 rdi, rdi
  00097	7e 29		 jle	 SHORT $LN90@stringlib_@10
  00099	48 8d 5d ff	 lea	 rbx, QWORD PTR [rbp-1]
  0009d	48 83 fb ff	 cmp	 rbx, -1
  000a1	7e 1f		 jle	 SHORT $LN90@stringlib_@10
  000a3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR sep$[rsp]
  000ab	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  000ae	66 90		 npad	 2
$LL49@stringlib_@10:
  000b0	38 0c 33	 cmp	 BYTE PTR [rbx+rsi], cl
  000b3	0f 84 5b 01 00
	00		 je	 $LN68@stringlib_@10
  000b9	48 ff cb	 dec	 rbx
  000bc	48 83 fb ff	 cmp	 rbx, -1
  000c0	7f ee		 jg	 SHORT $LL49@stringlib_@10
$LN90@stringlib_@10:

; 78   : #if STRINGLIB_MUTABLE
; 79   :         PyTuple_SET_ITEM(out, 0, STRINGLIB_NEW(NULL, 0));
; 80   :         PyTuple_SET_ITEM(out, 1, STRINGLIB_NEW(NULL, 0));
; 81   :         PyTuple_SET_ITEM(out, 2, STRINGLIB_NEW(str, str_len));
; 82   : #else
; 83   :         Py_INCREF(STRINGLIB_EMPTY);

  000c2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR nullstring
  000c9	e8 00 00 00 00	 call	 _Py_IncRef

; 84   :         PyTuple_SET_ITEM(out, 0, (PyObject*) STRINGLIB_EMPTY);

  000ce	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR nullstring
  000d5	49 89 4c 24 70	 mov	 QWORD PTR [r12+112], rcx

; 85   :         Py_INCREF(STRINGLIB_EMPTY);

  000da	e8 00 00 00 00	 call	 _Py_IncRef

; 86   :         PyTuple_SET_ITEM(out, 1, (PyObject*) STRINGLIB_EMPTY);

  000df	4c 8b 1d 00 00
	00 00		 mov	 r11, QWORD PTR nullstring

; 87   :         Py_INCREF(str_obj);

  000e6	48 8b 5c 24 60	 mov	 rbx, QWORD PTR str_obj$[rsp]
  000eb	4d 89 5c 24 78	 mov	 QWORD PTR [r12+120], r11
  000f0	48 8b cb	 mov	 rcx, rbx
  000f3	e8 00 00 00 00	 call	 _Py_IncRef

; 88   :         PyTuple_SET_ITEM(out, 2, (PyObject*) str_obj);

  000f8	49 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [r12+128], rbx
$LN1@stringlib_@10:

; 89   : #endif
; 90   :         return out;

  00100	49 8b c4	 mov	 rax, r12
$LN96@stringlib_@10:
  00103	4c 8b 74 24 28	 mov	 r14, QWORD PTR [rsp+40]
  00108	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  0010d	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
  00112	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]

; 102  :     }
; 103  : 
; 104  :     return out;
; 105  : }

  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	41 5d		 pop	 r13
  0011d	5f		 pop	 rdi
  0011e	5e		 pop	 rsi
  0011f	5d		 pop	 rbp
  00120	c3		 ret	 0

; 73   :         return NULL;
; 74   : 
; 75   :     pos = FASTSEARCH(str, str_len, sep, sep_len, -1, FAST_RSEARCH);

$LN65@stringlib_@10:
  00121	4c 8b 94 24 80
	00 00 00	 mov	 r10, QWORD PTR sep$[rsp]
  00129	48 8d 6f ff	 lea	 rbp, QWORD PTR [rdi-1]
  0012d	41 be 01 00 00
	00		 mov	 r14d, 1
  00133	45 0f be 3a	 movsx	 r15d, BYTE PTR [r10]
  00137	4c 8d 6d ff	 lea	 r13, QWORD PTR [rbp-1]
  0013b	41 8b cf	 mov	 ecx, r15d
  0013e	83 e1 1f	 and	 ecx, 31
  00141	41 d3 e6	 shl	 r14d, cl
  00144	48 85 ed	 test	 rbp, rbp
  00147	7e 44		 jle	 SHORT $LN22@stringlib_@10
  00149	49 83 cb ff	 or	 r11, -1
  0014d	4d 8d 0c 2a	 lea	 r9, QWORD PTR [r10+rbp]
  00151	4d 2b da	 sub	 r11, r10
  00154	4c 8b d5	 mov	 r10, rbp
  00157	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL24@stringlib_@10:
  00160	45 0f be 01	 movsx	 r8d, BYTE PTR [r9]
  00164	ba 01 00 00 00	 mov	 edx, 1
  00169	41 8b c8	 mov	 ecx, r8d
  0016c	83 e1 1f	 and	 ecx, 31
  0016f	d3 e2		 shl	 edx, cl
  00171	44 0b f2	 or	 r14d, edx
  00174	45 3a c7	 cmp	 r8b, r15b
  00177	75 04		 jne	 SHORT $LN23@stringlib_@10
  00179	4f 8d 2c 0b	 lea	 r13, QWORD PTR [r11+r9]
$LN23@stringlib_@10:
  0017d	49 ff c9	 dec	 r9
  00180	49 ff ca	 dec	 r10
  00183	75 db		 jne	 SHORT $LL24@stringlib_@10
  00185	4c 8b 94 24 80
	00 00 00	 mov	 r10, QWORD PTR sep$[rsp]
$LN22@stringlib_@10:
  0018d	4c 8b c3	 mov	 r8, rbx
  00190	4d 2b c2	 sub	 r8, r10
  00193	4c 03 c6	 add	 r8, rsi
$LL20@stringlib_@10:
  00196	44 38 3c 33	 cmp	 BYTE PTR [rbx+rsi], r15b
  0019a	75 48		 jne	 SHORT $LN17@stringlib_@10
  0019c	48 8b d5	 mov	 rdx, rbp
  0019f	48 85 ed	 test	 rbp, rbp
  001a2	7e 20		 jle	 SHORT $LN91@stringlib_@10
  001a4	49 8d 0c 2a	 lea	 rcx, QWORD PTR [r10+rbp]
  001a8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL16@stringlib_@10:
  001b0	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  001b3	41 38 04 08	 cmp	 BYTE PTR [r8+rcx], al
  001b7	75 0b		 jne	 SHORT $LN91@stringlib_@10
  001b9	48 ff ca	 dec	 rdx
  001bc	48 ff c9	 dec	 rcx
  001bf	48 85 d2	 test	 rdx, rdx
  001c2	7f ec		 jg	 SHORT $LL16@stringlib_@10
$LN91@stringlib_@10:
  001c4	48 85 d2	 test	 rdx, rdx
  001c7	74 41		 je	 SHORT $LN92@stringlib_@10
  001c9	48 85 db	 test	 rbx, rbx
  001cc	7e 0e		 jle	 SHORT $LN11@stringlib_@10
  001ce	0f be 44 33 ff	 movsx	 eax, BYTE PTR [rbx+rsi-1]
  001d3	83 e0 1f	 and	 eax, 31
  001d6	41 0f a3 c6	 bt	 r14d, eax
  001da	73 1b		 jae	 SHORT $LN97@stringlib_@10
$LN11@stringlib_@10:
  001dc	49 2b dd	 sub	 rbx, r13
  001df	4d 2b c5	 sub	 r8, r13
  001e2	eb 19		 jmp	 SHORT $LN19@stringlib_@10
$LN17@stringlib_@10:
  001e4	48 85 db	 test	 rbx, rbx
  001e7	7e 14		 jle	 SHORT $LN19@stringlib_@10
  001e9	0f be 44 33 ff	 movsx	 eax, BYTE PTR [rbx+rsi-1]
  001ee	83 e0 1f	 and	 eax, 31
  001f1	41 0f a3 c6	 bt	 r14d, eax
  001f5	72 06		 jb	 SHORT $LN19@stringlib_@10
$LN97@stringlib_@10:
  001f7	48 2b df	 sub	 rbx, rdi
  001fa	4c 2b c7	 sub	 r8, rdi
$LN19@stringlib_@10:
  001fd	49 ff c8	 dec	 r8
  00200	48 ff cb	 dec	 rbx
  00203	79 91		 jns	 SHORT $LL20@stringlib_@10
  00205	e9 b8 fe ff ff	 jmp	 $LN90@stringlib_@10
$LN92@stringlib_@10:

; 62   : {

  0020a	48 8b 6c 24 70	 mov	 rbp, QWORD PTR str_len$[rsp]
  0020f	4c 8b 6c 24 78	 mov	 r13, QWORD PTR sep_obj$[rsp]

; 73   :         return NULL;
; 74   : 
; 75   :     pos = FASTSEARCH(str, str_len, sep, sep_len, -1, FAST_RSEARCH);

$LN68@stringlib_@10:

; 76   : 
; 77   :     if (pos < 0) {

  00214	48 85 db	 test	 rbx, rbx
  00217	0f 88 a5 fe ff
	ff		 js	 $LN90@stringlib_@10

; 91   :     }
; 92   : 
; 93   :     PyTuple_SET_ITEM(out, 0, STRINGLIB_NEW(str, pos));

  0021d	48 8b d3	 mov	 rdx, rbx
  00220	48 8b ce	 mov	 rcx, rsi
  00223	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 94   :     Py_INCREF(sep_obj);

  00228	49 8b cd	 mov	 rcx, r13
  0022b	49 89 44 24 70	 mov	 QWORD PTR [r12+112], rax
  00230	e8 00 00 00 00	 call	 _Py_IncRef

; 95   :     PyTuple_SET_ITEM(out, 1, sep_obj);
; 96   :     pos += sep_len;

  00235	48 8d 04 3b	 lea	 rax, QWORD PTR [rbx+rdi]

; 97   :     PyTuple_SET_ITEM(out, 2, STRINGLIB_NEW(str + pos, str_len - pos));

  00239	48 2b e8	 sub	 rbp, rax
  0023c	48 8d 0c 30	 lea	 rcx, QWORD PTR [rax+rsi]
  00240	4d 89 6c 24 78	 mov	 QWORD PTR [r12+120], r13
  00245	48 8b d5	 mov	 rdx, rbp
  00248	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0024d	49 89 84 24 80
	00 00 00	 mov	 QWORD PTR [r12+128], rax

; 98   : 
; 99   :     if (PyErr_Occurred()) {

  00255	e8 00 00 00 00	 call	 PyErr_Occurred
  0025a	48 85 c0	 test	 rax, rax
  0025d	0f 84 9d fe ff
	ff		 je	 $LN1@stringlib_@10

; 100  :         Py_DECREF(out);

  00263	49 8b cc	 mov	 rcx, r12
  00266	e8 00 00 00 00	 call	 _Py_DecRef

; 101  :         return NULL;

  0026b	33 c0		 xor	 eax, eax
  0026d	e9 91 fe ff ff	 jmp	 $LN96@stringlib_@10
stringlib_rpartition ENDP
_TEXT	ENDS
EXTRN	PyList_Append:PROC
EXTRN	_Py_ctype_table:BYTE
EXTRN	PyList_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stringlib_split_whitespace DD imagerel stringlib_split_whitespace
	DD	imagerel stringlib_split_whitespace+580
	DD	imagerel $unwind$stringlib_split_whitespace
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_split_whitespace DD 0c5a01H
	DD	0d645aH
	DD	0c3455H
	DD	0e5412H
	DD	0f00e5212H
	DD	0d00ae00cH
	DD	07006c008H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\stringlib\split.h
xdata	ENDS
;	COMDAT stringlib_split_whitespace
_TEXT	SEGMENT
str_obj$ = 96
str$ = 104
str_len$ = 112
maxcount$ = 120
stringlib_split_whitespace PROC				; COMDAT

; 57   : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	57		 push	 rdi
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	41 56		 push	 r14
  0000c	41 57		 push	 r15
  0000e	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 58   :     Py_ssize_t i, j, count=0;

  00012	45 33 e4	 xor	 r12d, r12d
  00015	4c 8b f9	 mov	 r15, rcx
  00018	4d 8b f1	 mov	 r14, r9
  0001b	49 8b f8	 mov	 rdi, r8
  0001e	48 8b ea	 mov	 rbp, rdx

; 59   :     PyObject *list = PyList_New(PREALLOC_SIZE(maxcount));

  00021	41 8d 4c 24 0c	 lea	 ecx, QWORD PTR [r12+12]
  00026	49 83 f9 0c	 cmp	 r9, 12
  0002a	7d 04		 jge	 SHORT $LN27@stringlib_@11
  0002c	49 8d 49 01	 lea	 rcx, QWORD PTR [r9+1]
$LN27@stringlib_@11:
  00030	e8 00 00 00 00	 call	 PyList_New
  00035	4c 8b e8	 mov	 r13, rax

; 60   :     PyObject *sub;
; 61   : 
; 62   :     if (list == NULL)

  00038	48 85 c0	 test	 rax, rax
  0003b	75 13		 jne	 SHORT $LN23@stringlib_@11

; 99   : }

  0003d	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  00042	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00046	41 5f		 pop	 r15
  00048	41 5e		 pop	 r14
  0004a	41 5d		 pop	 r13
  0004c	41 5c		 pop	 r12
  0004e	5f		 pop	 rdi
  0004f	c3		 ret	 0
$LN23@stringlib_@11:
  00050	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  00055	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi

; 63   :         return NULL;
; 64   : 
; 65   :     i = j = 0;

  0005a	49 8b dc	 mov	 rbx, r12
$LN63@stringlib_@11:

; 66   :     while (maxcount-- > 0) {

  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_ctype_table
  00064	4d 85 f6	 test	 r14, r14
  00067	0f 8e 35 01 00
	00		 jle	 $LN49@stringlib_@11
  0006d	49 ff ce	 dec	 r14
  00070	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBytes_Type

; 67   :         while (i < str_len && STRINGLIB_ISSPACE(str[i]))

  00077	48 3b df	 cmp	 rbx, rdi
  0007a	7d 19		 jge	 SHORT $LN59@stringlib_@11
  0007c	0f 1f 40 00	 npad	 4
$LL20@stringlib_@11:
  00080	0f b6 04 2b	 movzx	 eax, BYTE PTR [rbx+rbp]
  00084	f6 04 82 08	 test	 BYTE PTR [rdx+rax*4], 8
  00088	74 08		 je	 SHORT $LN55@stringlib_@11

; 68   :             i++;

  0008a	48 ff c3	 inc	 rbx
  0008d	48 3b df	 cmp	 rbx, rdi
  00090	7c ee		 jl	 SHORT $LL20@stringlib_@11
$LN55@stringlib_@11:

; 69   :         if (i == str_len) break;

  00092	48 3b df	 cmp	 rbx, rdi
$LN59@stringlib_@11:
  00095	0f 84 07 01 00
	00		 je	 $LN49@stringlib_@11

; 70   :         j = i; i++;

  0009b	48 8b cb	 mov	 rcx, rbx
  0009e	48 ff c3	 inc	 rbx

; 71   :         while (i < str_len && !STRINGLIB_ISSPACE(str[i]))

  000a1	48 3b df	 cmp	 rbx, rdi
  000a4	7d 12		 jge	 SHORT $LN56@stringlib_@11
$LL17@stringlib_@11:
  000a6	0f b6 04 2b	 movzx	 eax, BYTE PTR [rbx+rbp]
  000aa	f6 04 82 08	 test	 BYTE PTR [rdx+rax*4], 8
  000ae	75 08		 jne	 SHORT $LN56@stringlib_@11

; 72   :             i++;

  000b0	48 ff c3	 inc	 rbx
  000b3	48 3b df	 cmp	 rbx, rdi
  000b6	7c ee		 jl	 SHORT $LL17@stringlib_@11
$LN56@stringlib_@11:

; 73   : #ifndef STRINGLIB_MUTABLE
; 74   :         if (j == 0 && i == str_len && STRINGLIB_CHECK_EXACT(str_obj)) {

  000b8	48 85 c9	 test	 rcx, rcx
  000bb	75 0f		 jne	 SHORT $LN15@stringlib_@11
  000bd	48 3b df	 cmp	 rbx, rdi
  000c0	75 0a		 jne	 SHORT $LN15@stringlib_@11
  000c2	4d 39 47 58	 cmp	 QWORD PTR [r15+88], r8
  000c6	0f 84 bd 00 00
	00		 je	 $LN44@stringlib_@11
$LN15@stringlib_@11:

; 80   :         }
; 81   : #endif
; 82   :         SPLIT_ADD(str, j, i);

  000cc	48 8b d3	 mov	 rdx, rbx
  000cf	48 2b d1	 sub	 rdx, rcx
  000d2	48 03 cd	 add	 rcx, rbp
  000d5	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000da	48 8b f0	 mov	 rsi, rax
  000dd	48 85 c0	 test	 rax, rax
  000e0	0f 84 14 01 00
	00		 je	 $onError$21253
  000e6	49 83 fc 0c	 cmp	 r12, 12
  000ea	7d 11		 jge	 SHORT $LN13@stringlib_@11
  000ec	49 8b 4d 70	 mov	 rcx, QWORD PTR [r13+112]
  000f0	49 ff c4	 inc	 r12
  000f3	4a 89 44 e1 f8	 mov	 QWORD PTR [rcx+r12*8-8], rax
  000f8	e9 60 ff ff ff	 jmp	 $LN63@stringlib_@11
$LN13@stringlib_@11:
  000fd	48 8b d0	 mov	 rdx, rax
  00100	49 8b cd	 mov	 rcx, r13
  00103	e8 00 00 00 00	 call	 PyList_Append
  00108	85 c0		 test	 eax, eax
  0010a	0f 85 e2 00 00
	00		 jne	 $LN46@stringlib_@11
  00110	e8 00 00 00 00	 call	 _Py_PXCTX
  00115	85 c0		 test	 eax, eax
  00117	75 68		 jne	 SHORT $LN38@stringlib_@11
  00119	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0011d	a8 20		 test	 al, 32			; 00000020H
  0011f	75 58		 jne	 SHORT $LN32@stringlib_@11
  00121	84 c0		 test	 al, al
  00123	78 54		 js	 SHORT $LN32@stringlib_@11
  00125	a8 02		 test	 al, 2
  00127	75 58		 jne	 SHORT $LN38@stringlib_@11
  00129	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  0012d	75 52		 jne	 SHORT $LN38@stringlib_@11
  0012f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0013d	4c 8b ce	 mov	 r9, rsi
  00140	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00146	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0014e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00153	48 8b ce	 mov	 rcx, rsi
  00156	85 c0		 test	 eax, eax
  00158	74 0d		 je	 SHORT $LN37@stringlib_@11
  0015a	e8 00 00 00 00	 call	 _Px_Dealloc
  0015f	49 ff c4	 inc	 r12
  00162	e9 f6 fe ff ff	 jmp	 $LN63@stringlib_@11
$LN37@stringlib_@11:
  00167	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  0016b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00171	49 ff c4	 inc	 r12
  00174	e9 e4 fe ff ff	 jmp	 $LN63@stringlib_@11
$LN32@stringlib_@11:
  00179	48 8b ce	 mov	 rcx, rsi
  0017c	e8 00 00 00 00	 call	 Px_DecRef
$LN38@stringlib_@11:
  00181	49 ff c4	 inc	 r12

; 66   :     while (maxcount-- > 0) {

  00184	e9 d4 fe ff ff	 jmp	 $LN63@stringlib_@11
$LN44@stringlib_@11:

; 75   :             /* No whitespace in str_obj, so just use it as list[0] */
; 76   :             Py_INCREF(str_obj);

  00189	49 8b cf	 mov	 rcx, r15
  0018c	e8 00 00 00 00	 call	 _Py_IncRef

; 77   :             PyList_SET_ITEM(list, 0, (PyObject *)str_obj);

  00191	4d 8b 5d 70	 mov	 r11, QWORD PTR [r13+112]

; 78   :             count++;

  00195	49 ff c4	 inc	 r12
  00198	4d 89 3b	 mov	 QWORD PTR [r11], r15

; 79   :             break;

  0019b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_ctype_table
$LN49@stringlib_@11:

; 83   :     }
; 84   : 
; 85   :     if (i < str_len) {

  001a2	48 3b df	 cmp	 rbx, rdi
  001a5	7d 79		 jge	 SHORT $LN6@stringlib_@11
  001a7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL8@stringlib_@11:

; 86   :         /* Only occurs when maxcount was reached */
; 87   :         /* Skip any remaining whitespace and copy to end of string */
; 88   :         while (i < str_len && STRINGLIB_ISSPACE(str[i]))

  001b0	0f b6 04 2b	 movzx	 eax, BYTE PTR [rbx+rbp]
  001b4	f6 04 82 08	 test	 BYTE PTR [rdx+rax*4], 8
  001b8	74 08		 je	 SHORT $LN7@stringlib_@11

; 89   :             i++;

  001ba	48 ff c3	 inc	 rbx
  001bd	48 3b df	 cmp	 rbx, rdi
  001c0	7c ee		 jl	 SHORT $LL8@stringlib_@11
$LN7@stringlib_@11:

; 90   :         if (i != str_len)

  001c2	48 3b df	 cmp	 rbx, rdi
  001c5	74 59		 je	 SHORT $LN6@stringlib_@11

; 91   :             SPLIT_ADD(str, i, str_len);

  001c7	48 2b fb	 sub	 rdi, rbx
  001ca	48 8d 0c 2b	 lea	 rcx, QWORD PTR [rbx+rbp]
  001ce	48 8b d7	 mov	 rdx, rdi
  001d1	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  001d6	48 8b d8	 mov	 rbx, rax
  001d9	48 85 c0	 test	 rax, rax
  001dc	74 1c		 je	 SHORT $onError$21253
  001de	49 83 fc 0c	 cmp	 r12, 12
  001e2	7d 22		 jge	 SHORT $LN4@stringlib_@11
  001e4	49 8b 4d 70	 mov	 rcx, QWORD PTR [r13+112]
  001e8	49 ff c4	 inc	 r12
  001eb	4a 89 44 e1 f8	 mov	 QWORD PTR [rcx+r12*8-8], rax
  001f0	eb 2e		 jmp	 SHORT $LN6@stringlib_@11
$LN46@stringlib_@11:

; 80   :         }
; 81   : #endif
; 82   :         SPLIT_ADD(str, j, i);

  001f2	48 8b ce	 mov	 rcx, rsi
$LN61@stringlib_@11:
  001f5	e8 00 00 00 00	 call	 _Py_DecRef
$onError$21253:

; 95   : 
; 96   :   onError:
; 97   :     Py_DECREF(list);

  001fa	49 8b cd	 mov	 rcx, r13
  001fd	e8 00 00 00 00	 call	 _Py_DecRef

; 98   :     return NULL;

  00202	33 c0		 xor	 eax, eax
  00204	eb 21		 jmp	 SHORT $LN58@stringlib_@11
$LN4@stringlib_@11:

; 91   :             SPLIT_ADD(str, i, str_len);

  00206	48 8b d0	 mov	 rdx, rax
  00209	49 8b cd	 mov	 rcx, r13
  0020c	e8 00 00 00 00	 call	 PyList_Append
  00211	48 8b cb	 mov	 rcx, rbx
  00214	85 c0		 test	 eax, eax
  00216	75 dd		 jne	 SHORT $LN61@stringlib_@11
  00218	e8 00 00 00 00	 call	 _Py_DecRef
  0021d	49 ff c4	 inc	 r12
$LN6@stringlib_@11:

; 92   :     }
; 93   :     FIX_PREALLOC_SIZE(list);

  00220	4d 89 65 60	 mov	 QWORD PTR [r13+96], r12

; 94   :     return list;

  00224	49 8b c5	 mov	 rax, r13
$LN58@stringlib_@11:

; 99   : }

  00227	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0022c	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  00231	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  00236	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0023a	41 5f		 pop	 r15
  0023c	41 5e		 pop	 r14
  0023e	41 5d		 pop	 r13
  00240	41 5c		 pop	 r12
  00242	5f		 pop	 rdi
  00243	c3		 ret	 0
stringlib_split_whitespace ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stringlib_split_char DD imagerel stringlib_split_char
	DD	imagerel stringlib_split_char+81
	DD	imagerel $unwind$stringlib_split_char
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$stringlib_split_char DD imagerel stringlib_split_char+81
	DD	imagerel stringlib_split_char+330
	DD	imagerel $chain$0$stringlib_split_char
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$stringlib_split_char DD imagerel stringlib_split_char+330
	DD	imagerel stringlib_split_char+354
	DD	imagerel $chain$1$stringlib_split_char
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$stringlib_split_char DD imagerel stringlib_split_char+354
	DD	imagerel stringlib_split_char+555
	DD	imagerel $chain$2$stringlib_split_char
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$stringlib_split_char DD 020021H
	DD	0d3400H
	DD	imagerel stringlib_split_char
	DD	imagerel stringlib_split_char+81
	DD	imagerel $unwind$stringlib_split_char
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$stringlib_split_char DD 021H
	DD	imagerel stringlib_split_char
	DD	imagerel stringlib_split_char+81
	DD	imagerel $unwind$stringlib_split_char
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$stringlib_split_char DD 020521H
	DD	0d3405H
	DD	imagerel stringlib_split_char
	DD	imagerel stringlib_split_char+81
	DD	imagerel $unwind$stringlib_split_char
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_split_char DD 0a1c01H
	DD	0f641cH
	DD	0e541cH
	DD	0f018521cH
	DD	0d014e016H
	DD	07010c012H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\stringlib\split.h
xdata	ENDS
;	COMDAT stringlib_split_char
_TEXT	SEGMENT
str_obj$ = 96
str$ = 104
str_len$ = 112
ch$ = 120
maxcount$ = 128
stringlib_split_char PROC				; COMDAT

; 106  : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 107  :     Py_ssize_t i, j, count=0;
; 108  :     PyObject *list = PyList_New(PREALLOC_SIZE(maxcount));

  0001c	4c 8b bc 24 80
	00 00 00	 mov	 r15, QWORD PTR maxcount$[rsp]
  00024	33 f6		 xor	 esi, esi
  00026	4c 8b e1	 mov	 r12, rcx
  00029	45 0f b6 f1	 movzx	 r14d, r9b
  0002d	49 8b f8	 mov	 rdi, r8
  00030	4c 8b ea	 mov	 r13, rdx
  00033	8d 4e 0c	 lea	 ecx, QWORD PTR [rsi+12]
  00036	49 83 ff 0c	 cmp	 r15, 12
  0003a	7d 04		 jge	 SHORT $LN24@stringlib_@12
  0003c	49 8d 4f 01	 lea	 rcx, QWORD PTR [r15+1]
$LN24@stringlib_@12:
  00040	e8 00 00 00 00	 call	 PyList_New
  00045	48 8b e8	 mov	 rbp, rax

; 109  :     PyObject *sub;
; 110  : 
; 111  :     if (list == NULL)

  00048	48 85 c0	 test	 rax, rax
  0004b	0f 84 f9 00 00
	00		 je	 $LN21@stringlib_@12
$LN20@stringlib_@12:
  00051	48 89 5c 24 68	 mov	 QWORD PTR [rsp+104], rbx

; 112  :         return NULL;
; 113  : 
; 114  :     i = j = 0;

  00056	48 8b ce	 mov	 rcx, rsi
  00059	48 8b de	 mov	 rbx, rsi

; 115  :     while ((j < str_len) && (maxcount-- > 0)) {

  0005c	48 85 ff	 test	 rdi, rdi
  0005f	0f 8e 81 00 00
	00		 jle	 $LN48@stringlib_@12
$LL19@stringlib_@12:
  00065	49 8b c7	 mov	 rax, r15
  00068	49 ff cf	 dec	 r15
  0006b	48 85 c0	 test	 rax, rax
  0006e	7e 68		 jle	 SHORT $LN18@stringlib_@12

; 116  :         for(; j < str_len; j++) {

  00070	48 3b df	 cmp	 rbx, rdi
  00073	7d 63		 jge	 SHORT $LN18@stringlib_@12
$LL17@stringlib_@12:

; 117  :             /* I found that using memchr makes no difference */
; 118  :             if (str[j] == ch) {

  00075	46 38 34 2b	 cmp	 BYTE PTR [rbx+r13], r14b
  00079	74 0a		 je	 SHORT $LN42@stringlib_@12

; 116  :         for(; j < str_len; j++) {

  0007b	48 ff c3	 inc	 rbx
  0007e	48 3b df	 cmp	 rbx, rdi
  00081	7c f2		 jl	 SHORT $LL17@stringlib_@12
  00083	eb 53		 jmp	 SHORT $LN18@stringlib_@12
$LN42@stringlib_@12:

; 119  :                 SPLIT_ADD(str, i, j);

  00085	48 8b d3	 mov	 rdx, rbx
  00088	48 2b d1	 sub	 rdx, rcx
  0008b	49 03 cd	 add	 rcx, r13
  0008e	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00093	4c 8b e0	 mov	 r12, rax
  00096	48 85 c0	 test	 rax, rax
  00099	0f 84 09 01 00
	00		 je	 $onError$21308
  0009f	48 83 fe 0c	 cmp	 rsi, 12
  000a3	7d 0a		 jge	 SHORT $LN12@stringlib_@12
  000a5	48 8b 4d 70	 mov	 rcx, QWORD PTR [rbp+112]
  000a9	48 89 04 f1	 mov	 QWORD PTR [rcx+rsi*8], rax
  000ad	eb 1b		 jmp	 SHORT $LN9@stringlib_@12
$LN12@stringlib_@12:
  000af	48 8b d0	 mov	 rdx, rax
  000b2	48 8b cd	 mov	 rcx, rbp
  000b5	e8 00 00 00 00	 call	 PyList_Append
  000ba	49 8b cc	 mov	 rcx, r12
  000bd	85 c0		 test	 eax, eax
  000bf	0f 85 de 00 00
	00		 jne	 $LN44@stringlib_@12
  000c5	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@stringlib_@12:

; 120  :                 i = j = j + 1;

  000ca	48 ff c3	 inc	 rbx
  000cd	48 ff c6	 inc	 rsi
  000d0	48 8b cb	 mov	 rcx, rbx
  000d3	48 3b df	 cmp	 rbx, rdi
  000d6	7c 8d		 jl	 SHORT $LL19@stringlib_@12
$LN18@stringlib_@12:

; 121  :                 break;
; 122  :             }
; 123  :         }
; 124  :     }
; 125  : #ifndef STRINGLIB_MUTABLE
; 126  :     if (count == 0 && STRINGLIB_CHECK_EXACT(str_obj)) {

  000d8	48 85 f6	 test	 rsi, rsi
  000db	0f 85 81 00 00
	00		 jne	 $LN8@stringlib_@12
  000e1	4c 8b 64 24 60	 mov	 r12, QWORD PTR str_obj$[rsp]
$LN48@stringlib_@12:
  000e6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  000ed	49 39 44 24 58	 cmp	 QWORD PTR [r12+88], rax
  000f2	75 6e		 jne	 SHORT $LN8@stringlib_@12

; 127  :         /* ch not in str_obj, so just use str_obj as list[0] */
; 128  :         Py_INCREF(str_obj);

  000f4	e8 00 00 00 00	 call	 _Py_PXCTX
  000f9	85 c0		 test	 eax, eax
  000fb	75 35		 jne	 SHORT $LN26@stringlib_@12
  000fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00104	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0010b	4d 8b cc	 mov	 r9, r12
  0010e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00114	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0011c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00121	85 c0		 test	 eax, eax
  00123	75 08		 jne	 SHORT $LN25@stringlib_@12
  00125	41 f6 44 24 20
	20		 test	 BYTE PTR [r12+32], 32	; 00000020H
  0012b	74 05		 je	 SHORT $LN26@stringlib_@12
$LN25@stringlib_@12:
  0012d	49 ff 44 24 50	 inc	 QWORD PTR [r12+80]
$LN26@stringlib_@12:

; 129  :         PyList_SET_ITEM(list, 0, (PyObject *)str_obj);

  00132	48 8b 45 70	 mov	 rax, QWORD PTR [rbp+112]

; 130  :         count++;

  00136	be 01 00 00 00	 mov	 esi, 1
  0013b	4c 89 20	 mov	 QWORD PTR [rax], r12
$LN6@stringlib_@12:

; 135  :     }
; 136  :     FIX_PREALLOC_SIZE(list);

  0013e	48 89 75 60	 mov	 QWORD PTR [rbp+96], rsi

; 137  :     return list;

  00142	48 8b c5	 mov	 rax, rbp
$LN49@stringlib_@12:
  00145	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
$LN21@stringlib_@12:

; 142  : }

  0014a	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  0014f	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  00154	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00158	41 5f		 pop	 r15
  0015a	41 5e		 pop	 r14
  0015c	41 5d		 pop	 r13
  0015e	41 5c		 pop	 r12
  00160	5f		 pop	 rdi
  00161	c3		 ret	 0
$LN8@stringlib_@12:

; 131  :     } else
; 132  : #endif
; 133  :     if (i <= str_len) {

  00162	48 3b cf	 cmp	 rcx, rdi
  00165	7f d7		 jg	 SHORT $LN6@stringlib_@12

; 134  :         SPLIT_ADD(str, i, str_len);

  00167	48 2b f9	 sub	 rdi, rcx
  0016a	49 03 cd	 add	 rcx, r13
  0016d	48 8b d7	 mov	 rdx, rdi
  00170	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00175	48 8b d8	 mov	 rbx, rax
  00178	48 85 c0	 test	 rax, rax
  0017b	74 2b		 je	 SHORT $onError$21308
  0017d	48 83 fe 0c	 cmp	 rsi, 12
  00181	7d 0e		 jge	 SHORT $LN4@stringlib_@12
  00183	48 8b 4d 70	 mov	 rcx, QWORD PTR [rbp+112]
  00187	48 ff c6	 inc	 rsi
  0018a	48 89 44 f1 f8	 mov	 QWORD PTR [rcx+rsi*8-8], rax
  0018f	eb ad		 jmp	 SHORT $LN6@stringlib_@12
$LN4@stringlib_@12:
  00191	48 8b d0	 mov	 rdx, rax
  00194	48 8b cd	 mov	 rcx, rbp
  00197	e8 00 00 00 00	 call	 PyList_Append
  0019c	48 8b cb	 mov	 rcx, rbx
  0019f	85 c0		 test	 eax, eax
  001a1	74 5b		 je	 SHORT $LN2@stringlib_@12
$LN44@stringlib_@12:
  001a3	e8 00 00 00 00	 call	 _Py_DecRef
$onError$21308:

; 138  : 
; 139  :   onError:
; 140  :     Py_DECREF(list);

  001a8	e8 00 00 00 00	 call	 _Py_PXCTX
  001ad	85 c0		 test	 eax, eax
  001af	75 73		 jne	 SHORT $LN39@stringlib_@12
  001b1	48 8b 45 20	 mov	 rax, QWORD PTR [rbp+32]
  001b5	a8 20		 test	 al, 32			; 00000020H
  001b7	75 63		 jne	 SHORT $LN33@stringlib_@12
  001b9	84 c0		 test	 al, al
  001bb	78 5f		 js	 SHORT $LN33@stringlib_@12
  001bd	a8 02		 test	 al, 2
  001bf	75 63		 jne	 SHORT $LN39@stringlib_@12
  001c1	48 ff 4d 50	 dec	 QWORD PTR [rbp+80]
  001c5	75 5d		 jne	 SHORT $LN39@stringlib_@12
  001c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001d5	4c 8b cd	 mov	 r9, rbp
  001d8	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001de	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001e6	e8 00 00 00 00	 call	 _PyParallel_Guard
  001eb	48 8b cd	 mov	 rcx, rbp
  001ee	85 c0		 test	 eax, eax
  001f0	74 19		 je	 SHORT $LN38@stringlib_@12
  001f2	e8 00 00 00 00	 call	 _Px_Dealloc

; 141  :     return NULL;

  001f7	33 c0		 xor	 eax, eax
  001f9	e9 47 ff ff ff	 jmp	 $LN49@stringlib_@12
$LN2@stringlib_@12:

; 134  :         SPLIT_ADD(str, i, str_len);

  001fe	e8 00 00 00 00	 call	 _Py_DecRef
  00203	48 ff c6	 inc	 rsi
  00206	e9 33 ff ff ff	 jmp	 $LN6@stringlib_@12

; 138  : 
; 139  :   onError:
; 140  :     Py_DECREF(list);

$LN38@stringlib_@12:
  0020b	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  0020f	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 141  :     return NULL;

  00215	33 c0		 xor	 eax, eax
  00217	e9 29 ff ff ff	 jmp	 $LN49@stringlib_@12

; 138  : 
; 139  :   onError:
; 140  :     Py_DECREF(list);

$LN33@stringlib_@12:
  0021c	48 8b cd	 mov	 rcx, rbp
  0021f	e8 00 00 00 00	 call	 Px_DecRef
$LN39@stringlib_@12:

; 141  :     return NULL;

  00224	33 c0		 xor	 eax, eax
  00226	e9 1a ff ff ff	 jmp	 $LN49@stringlib_@12
stringlib_split_char ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\stringlib\fastsearch.h
pdata	SEGMENT
$pdata$stringlib_split DD imagerel stringlib_split
	DD	imagerel stringlib_split+132
	DD	imagerel $unwind$stringlib_split
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$stringlib_split DD imagerel stringlib_split+132
	DD	imagerel stringlib_split+190
	DD	imagerel $chain$1$stringlib_split
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$stringlib_split DD imagerel stringlib_split+190
	DD	imagerel stringlib_split+824
	DD	imagerel $chain$2$stringlib_split
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$stringlib_split DD imagerel stringlib_split+824
	DD	imagerel stringlib_split+847
	DD	imagerel $chain$3$stringlib_split
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$stringlib_split DD imagerel stringlib_split+847
	DD	imagerel stringlib_split+960
	DD	imagerel $chain$5$stringlib_split
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$stringlib_split DD 060021H
	DD	0ad400H
	DD	0b7400H
	DD	0153400H
	DD	imagerel stringlib_split
	DD	imagerel stringlib_split+132
	DD	imagerel $unwind$stringlib_split
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$stringlib_split DD 021H
	DD	imagerel stringlib_split+132
	DD	imagerel stringlib_split+190
	DD	imagerel $chain$1$stringlib_split
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$stringlib_split DD 020821H
	DD	0153408H
	DD	imagerel stringlib_split+132
	DD	imagerel stringlib_split+190
	DD	imagerel $chain$1$stringlib_split
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$stringlib_split DD 041721H
	DD	0ad417H
	DD	0b7405H
	DD	imagerel stringlib_split
	DD	imagerel stringlib_split+132
	DD	imagerel $unwind$stringlib_split
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_split DD 061b01H
	DD	0f017b21bH
	DD	0c013e015H
	DD	050106011H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\stringlib\split.h
xdata	ENDS
;	COMDAT stringlib_split
_TEXT	SEGMENT
count$1$ = 48
i$1$ = 56
maxcount$1$ = 64
str_obj$ = 144
str$ = 152
str_len$ = 160
sep$ = 168
list$1$ = 176
sep_len$ = 176
maxcount$ = 184
stringlib_split PROC					; COMDAT

; 149  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	41 54		 push	 r12
  00013	41 56		 push	 r14
  00015	41 57		 push	 r15
  00017	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 150  :     Py_ssize_t i, j, pos, count=0;
; 151  :     PyObject *list, *sub;
; 152  : 
; 153  :     if (sep_len == 0) {

  0001b	48 8b b4 24 b0
	00 00 00	 mov	 rsi, QWORD PTR sep_len$[rsp]
  00023	45 33 e4	 xor	 r12d, r12d
  00026	4d 8b f9	 mov	 r15, r9
  00029	49 8b e8	 mov	 rbp, r8
  0002c	4c 8b f2	 mov	 r14, rdx
  0002f	4c 89 64 24 30	 mov	 QWORD PTR count$1$[rsp], r12
  00034	48 85 f6	 test	 rsi, rsi
  00037	75 22		 jne	 SHORT $LN19@stringlib_@13

; 154  :         PyErr_SetString(PyExc_ValueError, "empty separator");

  00039	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@JDENDMBF@empty?5separator?$AA@
  00047	e8 00 00 00 00	 call	 PyErr_SetString

; 155  :         return NULL;

  0004c	33 c0		 xor	 eax, eax

; 190  : }

  0004e	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00052	41 5f		 pop	 r15
  00054	41 5e		 pop	 r14
  00056	41 5c		 pop	 r12
  00058	5e		 pop	 rsi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
$LN19@stringlib_@13:

; 156  :     }
; 157  :     else if (sep_len == 1)

  0005b	48 83 fe 01	 cmp	 rsi, 1
  0005f	75 23		 jne	 SHORT $LN17@stringlib_@13

; 158  :         return STRINGLIB(split_char)(str_obj, str, str_len, sep[0], maxcount);

  00061	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR maxcount$[rsp]
  00069	45 0f b6 09	 movzx	 r9d, BYTE PTR [r9]
  0006d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00072	e8 00 00 00 00	 call	 stringlib_split_char

; 190  : }

  00077	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0007b	41 5f		 pop	 r15
  0007d	41 5e		 pop	 r14
  0007f	41 5c		 pop	 r12
  00081	5e		 pop	 rsi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
$LN17@stringlib_@13:
  00084	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi

; 159  : 
; 160  :     list = PyList_New(PREALLOC_SIZE(maxcount));

  00089	48 8b bc 24 b8
	00 00 00	 mov	 rdi, QWORD PTR maxcount$[rsp]
  00091	b9 0c 00 00 00	 mov	 ecx, 12
  00096	4c 89 6c 24 50	 mov	 QWORD PTR [rsp+80], r13
  0009b	48 83 ff 0c	 cmp	 rdi, 12
  0009f	7d 04		 jge	 SHORT $LN23@stringlib_@13
  000a1	48 8d 4f 01	 lea	 rcx, QWORD PTR [rdi+1]
$LN23@stringlib_@13:
  000a5	e8 00 00 00 00	 call	 PyList_New
  000aa	4c 8b e8	 mov	 r13, rax
  000ad	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR list$1$[rsp], rax

; 161  :     if (list == NULL)

  000b5	48 85 c0	 test	 rax, rax
  000b8	0f 84 7a 02 00
	00		 je	 $LN122@stringlib_@13
$LN16@stringlib_@13:
  000be	48 89 9c 24 a8
	00 00 00	 mov	 QWORD PTR [rsp+168], rbx

; 162  :         return NULL;
; 163  : 
; 164  :     i = j = 0;

  000c6	33 db		 xor	 ebx, ebx
  000c8	48 89 5c 24 38	 mov	 QWORD PTR i$1$[rsp], rbx

; 165  :     while (maxcount-- > 0) {

  000cd	48 85 ff	 test	 rdi, rdi
  000d0	0f 8e 85 01 00
	00		 jle	 $LN112@stringlib_@13
  000d6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL15@stringlib_@13:

; 166  :         pos = FASTSEARCH(str+i, str_len-i, sep, sep_len, -1, FAST_SEARCH);

  000e0	48 8b c5	 mov	 rax, rbp
  000e3	4a 8d 2c 33	 lea	 rbp, QWORD PTR [rbx+r14]
  000e7	48 ff cf	 dec	 rdi
  000ea	48 2b c3	 sub	 rax, rbx
  000ed	48 89 7c 24 40	 mov	 QWORD PTR maxcount$1$[rsp], rdi
  000f2	4c 8b f0	 mov	 r14, rax
  000f5	4c 2b f6	 sub	 r14, rsi
  000f8	0f 88 4c 01 00
	00		 js	 $LN110@stringlib_@13
  000fe	48 83 fe 01	 cmp	 rsi, 1
  00102	7f 68		 jg	 SHORT $LN82@stringlib_@13
  00104	48 85 f6	 test	 rsi, rsi
  00107	0f 8e 3d 01 00
	00		 jle	 $LN110@stringlib_@13
  0010d	48 83 f8 0a	 cmp	 rax, 10
  00111	7e 32		 jle	 SHORT $LN80@stringlib_@13
  00113	4c 8d 04 28	 lea	 r8, QWORD PTR [rax+rbp]
  00117	49 3b e8	 cmp	 rbp, r8
  0011a	73 18		 jae	 SHORT $LN90@stringlib_@13
  0011c	41 0f b6 17	 movzx	 edx, BYTE PTR [r15]
  00120	4c 2b c5	 sub	 r8, rbp
  00123	48 8b cd	 mov	 rcx, rbp
  00126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  0012c	4c 8b d8	 mov	 r11, rax
  0012f	48 85 c0	 test	 rax, rax
  00132	75 09		 jne	 SHORT $LN89@stringlib_@13
$LN90@stringlib_@13:
  00134	49 83 cb ff	 or	 r11, -1
  00138	e9 65 01 00 00	 jmp	 $LN85@stringlib_@13
$LN89@stringlib_@13:
  0013d	4c 2b dd	 sub	 r11, rbp
  00140	e9 5d 01 00 00	 jmp	 $LN85@stringlib_@13
$LN80@stringlib_@13:
  00145	45 33 db	 xor	 r11d, r11d
  00148	48 85 c0	 test	 rax, rax
  0014b	0f 8e f9 00 00
	00		 jle	 $LN110@stringlib_@13
  00151	41 0f b6 0f	 movzx	 ecx, BYTE PTR [r15]
$LL71@stringlib_@13:
  00155	41 38 0c 2b	 cmp	 BYTE PTR [r11+rbp], cl
  00159	0f 84 43 01 00
	00		 je	 $LN85@stringlib_@13
  0015f	49 ff c3	 inc	 r11
  00162	4c 3b d8	 cmp	 r11, rax
  00165	7c ee		 jl	 SHORT $LL71@stringlib_@13
  00167	e9 de 00 00 00	 jmp	 $LN110@stringlib_@13
$LN82@stringlib_@13:
  0016c	48 8d 7e ff	 lea	 rdi, QWORD PTR [rsi-1]
  00170	45 33 e4	 xor	 r12d, r12d
  00173	4c 8d 6f ff	 lea	 r13, QWORD PTR [rdi-1]
  00177	48 85 ff	 test	 rdi, rdi
  0017a	7e 3f		 jle	 SHORT $LN59@stringlib_@13
  0017c	42 0f b6 1c 3f	 movzx	 ebx, BYTE PTR [rdi+r15]
  00181	4d 8b cf	 mov	 r9, r15
  00184	4d 8b d5	 mov	 r10, r13
  00187	4c 8b df	 mov	 r11, rdi
  0018a	66 0f 1f 44 00
	00		 npad	 6
$LL61@stringlib_@13:
  00190	45 0f be 01	 movsx	 r8d, BYTE PTR [r9]
  00194	ba 01 00 00 00	 mov	 edx, 1
  00199	41 8b c8	 mov	 ecx, r8d
  0019c	83 e1 1f	 and	 ecx, 31
  0019f	d3 e2		 shl	 edx, cl
  001a1	44 0b e2	 or	 r12d, edx
  001a4	44 3a c3	 cmp	 r8b, bl
  001a7	4d 0f 44 ea	 cmove	 r13, r10
  001ab	49 ff c1	 inc	 r9
  001ae	49 ff ca	 dec	 r10
  001b1	49 ff cb	 dec	 r11
  001b4	75 da		 jne	 SHORT $LL61@stringlib_@13
  001b6	48 8b 5c 24 38	 mov	 rbx, QWORD PTR i$1$[rsp]
$LN59@stringlib_@13:
  001bb	42 0f be 0c 3f	 movsx	 ecx, BYTE PTR [rdi+r15]
  001c0	ba 01 00 00 00	 mov	 edx, 1
  001c5	45 33 db	 xor	 r11d, r11d
  001c8	83 e1 1f	 and	 ecx, 31
  001cb	d3 e2		 shl	 edx, cl
  001cd	44 0b e2	 or	 r12d, edx
  001d0	4d 85 f6	 test	 r14, r14
  001d3	78 70		 js	 SHORT $LN120@stringlib_@13
  001d5	45 0f b6 54 37
	ff		 movzx	 r10d, BYTE PTR [r15+rsi-1]
  001db	4c 8d 0c 2e	 lea	 r9, QWORD PTR [rsi+rbp]
  001df	90		 npad	 1
$LL57@stringlib_@13:
  001e0	47 38 54 19 ff	 cmp	 BYTE PTR [r9+r11-1], r10b
  001e5	75 45		 jne	 SHORT $LN54@stringlib_@13
  001e7	33 d2		 xor	 edx, edx
  001e9	48 85 ff	 test	 rdi, rdi
  001ec	7e 26		 jle	 SHORT $LN118@stringlib_@13
  001ee	4c 8b c5	 mov	 r8, rbp
  001f1	49 8b cf	 mov	 rcx, r15
  001f4	4d 2b c7	 sub	 r8, r15
  001f7	4d 03 c3	 add	 r8, r11
  001fa	66 0f 1f 44 00
	00		 npad	 6
$LL53@stringlib_@13:
  00200	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00203	41 38 04 08	 cmp	 BYTE PTR [r8+rcx], al
  00207	75 0b		 jne	 SHORT $LN118@stringlib_@13
  00209	48 ff c2	 inc	 rdx
  0020c	48 ff c1	 inc	 rcx
  0020f	48 3b d7	 cmp	 rdx, rdi
  00212	7c ec		 jl	 SHORT $LL53@stringlib_@13
$LN118@stringlib_@13:
  00214	48 3b d7	 cmp	 rdx, rdi
  00217	74 7c		 je	 SHORT $LN102@stringlib_@13
  00219	43 0f be 04 19	 movsx	 eax, BYTE PTR [r9+r11]
  0021e	83 e0 1f	 and	 eax, 31
  00221	41 0f a3 c4	 bt	 r12d, eax
  00225	73 13		 jae	 SHORT $LN124@stringlib_@13
  00227	4d 03 dd	 add	 r11, r13
  0022a	eb 11		 jmp	 SHORT $LN56@stringlib_@13
$LN54@stringlib_@13:
  0022c	43 0f be 04 19	 movsx	 eax, BYTE PTR [r9+r11]
  00231	83 e0 1f	 and	 eax, 31
  00234	41 0f a3 c4	 bt	 r12d, eax
  00238	72 03		 jb	 SHORT $LN56@stringlib_@13
$LN124@stringlib_@13:
  0023a	4c 03 de	 add	 r11, rsi
$LN56@stringlib_@13:
  0023d	49 ff c3	 inc	 r11
  00240	4d 3b de	 cmp	 r11, r14
  00243	7e 9b		 jle	 SHORT $LL57@stringlib_@13
$LN120@stringlib_@13:

; 170  :         SPLIT_ADD(str, i, j);

  00245	4c 8b 64 24 30	 mov	 r12, QWORD PTR count$1$[rsp]
$LN110@stringlib_@13:

; 172  :     }
; 173  : #ifndef STRINGLIB_MUTABLE
; 174  :     if (count == 0 && STRINGLIB_CHECK_EXACT(str_obj)) {

  0024a	4d 85 e4	 test	 r12, r12
  0024d	0f 85 fc 00 00
	00		 jne	 $LN7@stringlib_@13
  00253	4c 8b ac 24 b0
	00 00 00	 mov	 r13, QWORD PTR list$1$[rsp]
$LN112@stringlib_@13:
  0025b	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR str_obj$[rsp]
  00263	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  0026a	48 39 47 58	 cmp	 QWORD PTR [rdi+88], rax
  0026e	0f 85 db 00 00
	00		 jne	 $LN7@stringlib_@13

; 175  :         /* No match in str_obj, so just use it as list[0] */
; 176  :         Py_INCREF(str_obj);

  00274	48 8b cf	 mov	 rcx, rdi
  00277	e8 00 00 00 00	 call	 _Py_IncRef

; 177  :         PyList_SET_ITEM(list, 0, (PyObject *)str_obj);

  0027c	4d 8b 5d 70	 mov	 r11, QWORD PTR [r13+112]

; 178  :         count++;

  00280	41 bc 01 00 00
	00		 mov	 r12d, 1
  00286	49 89 3b	 mov	 QWORD PTR [r11], rdi

; 183  :     }
; 184  :     FIX_PREALLOC_SIZE(list);

  00289	4d 89 65 60	 mov	 QWORD PTR [r13+96], r12

; 185  :     return list;

  0028d	49 8b c5	 mov	 rax, r13
  00290	e9 9b 00 00 00	 jmp	 $LN123@stringlib_@13
$LN102@stringlib_@13:
  00295	4c 8b 64 24 30	 mov	 r12, QWORD PTR count$1$[rsp]
  0029a	4c 8b ac 24 b0
	00 00 00	 mov	 r13, QWORD PTR list$1$[rsp]

; 166  :         pos = FASTSEARCH(str+i, str_len-i, sep, sep_len, -1, FAST_SEARCH);

$LN85@stringlib_@13:

; 167  :         if (pos < 0)

  002a2	4d 85 db	 test	 r11, r11
  002a5	78 a3		 js	 SHORT $LN110@stringlib_@13

; 168  :             break;
; 169  :         j = i + pos;

  002a7	49 8d 3c 1b	 lea	 rdi, QWORD PTR [r11+rbx]

; 170  :         SPLIT_ADD(str, i, j);

  002ab	48 8b cd	 mov	 rcx, rbp
  002ae	48 8b d7	 mov	 rdx, rdi
  002b1	48 2b d3	 sub	 rdx, rbx
  002b4	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  002b9	48 8b d8	 mov	 rbx, rax
  002bc	48 85 c0	 test	 rax, rax
  002bf	74 60		 je	 SHORT $onError$21368
  002c1	49 83 fc 0c	 cmp	 r12, 12
  002c5	7d 0a		 jge	 SHORT $LN11@stringlib_@13
  002c7	49 8b 4d 70	 mov	 rcx, QWORD PTR [r13+112]
  002cb	4a 89 04 e1	 mov	 QWORD PTR [rcx+r12*8], rax
  002cf	eb 17		 jmp	 SHORT $LN8@stringlib_@13
$LN11@stringlib_@13:
  002d1	48 8b d0	 mov	 rdx, rax
  002d4	49 8b cd	 mov	 rcx, r13
  002d7	e8 00 00 00 00	 call	 PyList_Append
  002dc	48 8b cb	 mov	 rcx, rbx
  002df	85 c0		 test	 eax, eax
  002e1	75 39		 jne	 SHORT $LN105@stringlib_@13
  002e3	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@stringlib_@13:

; 171  :         i = j + sep_len;

  002e8	48 8d 1c 37	 lea	 rbx, QWORD PTR [rdi+rsi]
  002ec	48 8b 7c 24 40	 mov	 rdi, QWORD PTR maxcount$1$[rsp]
  002f1	49 ff c4	 inc	 r12
  002f4	4c 89 64 24 30	 mov	 QWORD PTR count$1$[rsp], r12
  002f9	48 89 5c 24 38	 mov	 QWORD PTR i$1$[rsp], rbx
  002fe	48 85 ff	 test	 rdi, rdi
  00301	0f 8e 43 ff ff
	ff		 jle	 $LN110@stringlib_@13

; 179  :     } else
; 180  : #endif
; 181  :     {
; 182  :         SPLIT_ADD(str, i, str_len);

  00307	48 8b ac 24 a0
	00 00 00	 mov	 rbp, QWORD PTR str_len$[rsp]
  0030f	4c 8b b4 24 98
	00 00 00	 mov	 r14, QWORD PTR str$[rsp]
  00317	e9 c4 fd ff ff	 jmp	 $LL15@stringlib_@13
$LN105@stringlib_@13:

; 170  :         SPLIT_ADD(str, i, j);

  0031c	e8 00 00 00 00	 call	 _Py_DecRef
$onError$21368:

; 186  : 
; 187  :   onError:
; 188  :     Py_DECREF(list);

  00321	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR list$1$[rsp]
  00329	e8 00 00 00 00	 call	 _Py_DecRef

; 189  :     return NULL;

  0032e	33 c0		 xor	 eax, eax
$LN123@stringlib_@13:
  00330	48 8b 9c 24 a8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+168]
$LN122@stringlib_@13:
  00338	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0033d	4c 8b 6c 24 50	 mov	 r13, QWORD PTR [rsp+80]

; 190  : }

  00342	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00346	41 5f		 pop	 r15
  00348	41 5e		 pop	 r14
  0034a	41 5c		 pop	 r12
  0034c	5e		 pop	 rsi
  0034d	5d		 pop	 rbp
  0034e	c3		 ret	 0
$LN7@stringlib_@13:

; 179  :     } else
; 180  : #endif
; 181  :     {
; 182  :         SPLIT_ADD(str, i, str_len);

  0034f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00357	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR str_len$[rsp]
  0035f	48 8d 0c 03	 lea	 rcx, QWORD PTR [rbx+rax]
  00363	48 2b d3	 sub	 rdx, rbx
  00366	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0036b	48 8b d8	 mov	 rbx, rax
  0036e	48 85 c0	 test	 rax, rax
  00371	74 ae		 je	 SHORT $onError$21368
  00373	4c 8b ac 24 b0
	00 00 00	 mov	 r13, QWORD PTR list$1$[rsp]
  0037b	49 83 fc 0c	 cmp	 r12, 12
  0037f	7d 15		 jge	 SHORT $LN4@stringlib_@13
  00381	49 8b 4d 70	 mov	 rcx, QWORD PTR [r13+112]
  00385	49 ff c4	 inc	 r12
  00388	4a 89 44 e1 f8	 mov	 QWORD PTR [rcx+r12*8-8], rax

; 183  :     }
; 184  :     FIX_PREALLOC_SIZE(list);

  0038d	4d 89 65 60	 mov	 QWORD PTR [r13+96], r12

; 185  :     return list;

  00391	49 8b c5	 mov	 rax, r13
  00394	eb 9a		 jmp	 SHORT $LN123@stringlib_@13
$LN4@stringlib_@13:

; 179  :     } else
; 180  : #endif
; 181  :     {
; 182  :         SPLIT_ADD(str, i, str_len);

  00396	48 8b d0	 mov	 rdx, rax
  00399	49 8b cd	 mov	 rcx, r13
  0039c	e8 00 00 00 00	 call	 PyList_Append
  003a1	48 8b cb	 mov	 rcx, rbx
  003a4	85 c0		 test	 eax, eax
  003a6	0f 85 70 ff ff
	ff		 jne	 $LN105@stringlib_@13
  003ac	e8 00 00 00 00	 call	 _Py_DecRef
  003b1	49 ff c4	 inc	 r12

; 185  :     return list;

  003b4	49 8b c5	 mov	 rax, r13
  003b7	4d 89 65 60	 mov	 QWORD PTR [r13+96], r12
  003bb	e9 70 ff ff ff	 jmp	 $LN123@stringlib_@13
stringlib_split ENDP
_TEXT	ENDS
EXTRN	PyList_Reverse:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stringlib_rsplit_whitespace DD imagerel stringlib_rsplit_whitespace
	DD	imagerel stringlib_rsplit_whitespace+585
	DD	imagerel $unwind$stringlib_rsplit_whitespace
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_rsplit_whitespace DD 0c5501H
	DD	0df455H
	DD	0c7450H
	DD	0e3411H
	DD	0e00d5211H
	DD	0c009d00bH
	DD	050066007H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\stringlib\split.h
xdata	ENDS
;	COMDAT stringlib_rsplit_whitespace
_TEXT	SEGMENT
str_obj$ = 96
str$ = 104
str_len$ = 112
maxcount$ = 120
stringlib_rsplit_whitespace PROC			; COMDAT

; 196  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	41 54		 push	 r12
  00009	41 55		 push	 r13
  0000b	41 56		 push	 r14
  0000d	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 197  :     Py_ssize_t i, j, count=0;

  00011	33 ed		 xor	 ebp, ebp
  00013	4c 8b f1	 mov	 r14, rcx
  00016	4d 8b e9	 mov	 r13, r9
  00019	49 8b d8	 mov	 rbx, r8
  0001c	48 8b f2	 mov	 rsi, rdx

; 198  :     PyObject *list = PyList_New(PREALLOC_SIZE(maxcount));

  0001f	8d 4d 0c	 lea	 ecx, QWORD PTR [rbp+12]
  00022	49 83 f9 0c	 cmp	 r9, 12
  00026	7d 04		 jge	 SHORT $LN28@stringlib_@14
  00028	49 8d 49 01	 lea	 rcx, QWORD PTR [r9+1]
$LN28@stringlib_@14:
  0002c	e8 00 00 00 00	 call	 PyList_New
  00031	4c 8b e0	 mov	 r12, rax

; 199  :     PyObject *sub;
; 200  : 
; 201  :     if (list == NULL)

  00034	48 85 c0	 test	 rax, rax
  00037	75 12		 jne	 SHORT $LN24@stringlib_@14

; 240  : }

  00039	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0003e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00042	41 5e		 pop	 r14
  00044	41 5d		 pop	 r13
  00046	41 5c		 pop	 r12
  00048	5e		 pop	 rsi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
$LN24@stringlib_@14:
  0004b	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  00050	4c 89 7c 24 68	 mov	 QWORD PTR [rsp+104], r15

; 202  :         return NULL;
; 203  : 
; 204  :     i = j = str_len - 1;

  00055	4c 8d 7b ff	 lea	 r15, QWORD PTR [rbx-1]
  00059	49 8b df	 mov	 rbx, r15
$LN62@stringlib_@14:

; 205  :     while (maxcount-- > 0) {

  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_ctype_table
  00063	4d 85 ed	 test	 r13, r13
  00066	0f 8e 33 01 00
	00		 jle	 $LN50@stringlib_@14
  0006c	49 ff cd	 dec	 r13
  0006f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBytes_Type

; 206  :         while (i >= 0 && STRINGLIB_ISSPACE(str[i]))

  00076	48 85 db	 test	 rbx, rbx
  00079	0f 88 8e 01 00
	00		 js	 $LN7@stringlib_@14
  0007f	90		 npad	 1
$LL21@stringlib_@14:
  00080	0f b6 04 33	 movzx	 eax, BYTE PTR [rbx+rsi]
  00084	f6 04 81 08	 test	 BYTE PTR [rcx+rax*4], 8
  00088	74 0a		 je	 SHORT $LN20@stringlib_@14

; 207  :             i--;

  0008a	48 ff cb	 dec	 rbx

; 206  :         while (i >= 0 && STRINGLIB_ISSPACE(str[i]))

  0008d	79 f1		 jns	 SHORT $LL21@stringlib_@14
  0008f	e9 79 01 00 00	 jmp	 $LN7@stringlib_@14
$LN20@stringlib_@14:

; 208  :         if (i < 0) break;

  00094	48 85 db	 test	 rbx, rbx
  00097	0f 88 70 01 00
	00		 js	 $LN7@stringlib_@14

; 209  :         j = i; i--;

  0009d	48 8b d3	 mov	 rdx, rbx
  000a0	48 ff cb	 dec	 rbx

; 210  :         while (i >= 0 && !STRINGLIB_ISSPACE(str[i]))

  000a3	78 0f		 js	 SHORT $LN57@stringlib_@14
$LL18@stringlib_@14:
  000a5	0f b6 04 33	 movzx	 eax, BYTE PTR [rbx+rsi]
  000a9	f6 04 81 08	 test	 BYTE PTR [rcx+rax*4], 8
  000ad	75 05		 jne	 SHORT $LN57@stringlib_@14

; 211  :             i--;

  000af	48 ff cb	 dec	 rbx

; 210  :         while (i >= 0 && !STRINGLIB_ISSPACE(str[i]))

  000b2	79 f1		 jns	 SHORT $LL18@stringlib_@14
$LN57@stringlib_@14:

; 212  : #ifndef STRINGLIB_MUTABLE
; 213  :         if (j == str_len - 1 && i < 0 && STRINGLIB_CHECK_EXACT(str_obj)) {

  000b4	49 3b d7	 cmp	 rdx, r15
  000b7	75 0f		 jne	 SHORT $LN16@stringlib_@14
  000b9	48 85 db	 test	 rbx, rbx
  000bc	79 0a		 jns	 SHORT $LN16@stringlib_@14
  000be	4d 39 46 58	 cmp	 QWORD PTR [r14+88], r8
  000c2	0f 84 bd 00 00
	00		 je	 $LN45@stringlib_@14
$LN16@stringlib_@14:

; 219  :         }
; 220  : #endif
; 221  :         SPLIT_ADD(str, i + 1, j + 1);

  000c8	48 8d 4c 33 01	 lea	 rcx, QWORD PTR [rbx+rsi+1]
  000cd	48 2b d3	 sub	 rdx, rbx
  000d0	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000d5	48 8b f8	 mov	 rdi, rax
  000d8	48 85 c0	 test	 rax, rax
  000db	0f 84 3d 01 00
	00		 je	 $onError$21431
  000e1	48 83 fd 0c	 cmp	 rbp, 12
  000e5	7d 12		 jge	 SHORT $LN14@stringlib_@14
  000e7	49 8b 4c 24 70	 mov	 rcx, QWORD PTR [r12+112]
  000ec	48 ff c5	 inc	 rbp
  000ef	48 89 44 e9 f8	 mov	 QWORD PTR [rcx+rbp*8-8], rax
  000f4	e9 63 ff ff ff	 jmp	 $LN62@stringlib_@14
$LN14@stringlib_@14:
  000f9	48 8b d0	 mov	 rdx, rax
  000fc	49 8b cc	 mov	 rcx, r12
  000ff	e8 00 00 00 00	 call	 PyList_Append
  00104	85 c0		 test	 eax, eax
  00106	0f 85 a9 00 00
	00		 jne	 $LN47@stringlib_@14
  0010c	e8 00 00 00 00	 call	 _Py_PXCTX
  00111	85 c0		 test	 eax, eax
  00113	75 68		 jne	 SHORT $LN39@stringlib_@14
  00115	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00119	a8 20		 test	 al, 32			; 00000020H
  0011b	75 58		 jne	 SHORT $LN33@stringlib_@14
  0011d	84 c0		 test	 al, al
  0011f	78 54		 js	 SHORT $LN33@stringlib_@14
  00121	a8 02		 test	 al, 2
  00123	75 58		 jne	 SHORT $LN39@stringlib_@14
  00125	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00129	75 52		 jne	 SHORT $LN39@stringlib_@14
  0012b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00139	4c 8b cf	 mov	 r9, rdi
  0013c	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00142	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0014a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0014f	48 8b cf	 mov	 rcx, rdi
  00152	85 c0		 test	 eax, eax
  00154	74 0d		 je	 SHORT $LN38@stringlib_@14
  00156	e8 00 00 00 00	 call	 _Px_Dealloc
  0015b	48 ff c5	 inc	 rbp
  0015e	e9 f9 fe ff ff	 jmp	 $LN62@stringlib_@14
$LN38@stringlib_@14:
  00163	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00167	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0016d	48 ff c5	 inc	 rbp
  00170	e9 e7 fe ff ff	 jmp	 $LN62@stringlib_@14
$LN33@stringlib_@14:
  00175	48 8b cf	 mov	 rcx, rdi
  00178	e8 00 00 00 00	 call	 Px_DecRef
$LN39@stringlib_@14:
  0017d	48 ff c5	 inc	 rbp

; 205  :     while (maxcount-- > 0) {

  00180	e9 d7 fe ff ff	 jmp	 $LN62@stringlib_@14
$LN45@stringlib_@14:

; 214  :             /* No whitespace in str_obj, so just use it as list[0] */
; 215  :             Py_INCREF(str_obj);

  00185	49 8b ce	 mov	 rcx, r14
  00188	e8 00 00 00 00	 call	 _Py_IncRef

; 216  :             PyList_SET_ITEM(list, 0, (PyObject *)str_obj);

  0018d	4d 8b 5c 24 70	 mov	 r11, QWORD PTR [r12+112]

; 217  :             count++;

  00192	48 ff c5	 inc	 rbp
  00195	4d 89 33	 mov	 QWORD PTR [r11], r14

; 218  :             break;

  00198	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_ctype_table
$LN50@stringlib_@14:

; 222  :     }
; 223  : 
; 224  :     if (i >= 0) {

  0019f	48 85 db	 test	 rbx, rbx
  001a2	78 69		 js	 SHORT $LN7@stringlib_@14
$LL9@stringlib_@14:

; 225  :         /* Only occurs when maxcount was reached */
; 226  :         /* Skip any remaining whitespace and copy to beginning of string */
; 227  :         while (i >= 0 && STRINGLIB_ISSPACE(str[i]))

  001a4	0f b6 04 33	 movzx	 eax, BYTE PTR [rbx+rsi]
  001a8	f6 04 81 08	 test	 BYTE PTR [rcx+rax*4], 8
  001ac	74 1b		 je	 SHORT $LN8@stringlib_@14

; 228  :             i--;

  001ae	48 ff cb	 dec	 rbx

; 225  :         /* Only occurs when maxcount was reached */
; 226  :         /* Skip any remaining whitespace and copy to beginning of string */
; 227  :         while (i >= 0 && STRINGLIB_ISSPACE(str[i]))

  001b1	79 f1		 jns	 SHORT $LL9@stringlib_@14

; 229  :         if (i >= 0)

  001b3	eb 58		 jmp	 SHORT $LN7@stringlib_@14
$LN47@stringlib_@14:

; 219  :         }
; 220  : #endif
; 221  :         SPLIT_ADD(str, i + 1, j + 1);

  001b5	48 8b cf	 mov	 rcx, rdi
$LN63@stringlib_@14:
  001b8	e8 00 00 00 00	 call	 _Py_DecRef

; 236  : 
; 237  :   onError:
; 238  :     Py_DECREF(list);

  001bd	49 8b cc	 mov	 rcx, r12
  001c0	e8 00 00 00 00	 call	 _Py_DecRef

; 239  :     return NULL;

  001c5	33 c0		 xor	 eax, eax
  001c7	eb 64		 jmp	 SHORT $LN60@stringlib_@14
$LN8@stringlib_@14:

; 229  :         if (i >= 0)

  001c9	48 85 db	 test	 rbx, rbx
  001cc	78 3f		 js	 SHORT $LN7@stringlib_@14

; 230  :             SPLIT_ADD(str, 0, i + 1);

  001ce	48 8d 53 01	 lea	 rdx, QWORD PTR [rbx+1]
  001d2	48 8b ce	 mov	 rcx, rsi
  001d5	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  001da	48 8b d8	 mov	 rbx, rax
  001dd	48 85 c0	 test	 rax, rax
  001e0	74 3c		 je	 SHORT $onError$21431
  001e2	48 83 fd 0c	 cmp	 rbp, 12
  001e6	7d 0b		 jge	 SHORT $LN5@stringlib_@14
  001e8	49 8b 4c 24 70	 mov	 rcx, QWORD PTR [r12+112]
  001ed	48 89 04 e9	 mov	 QWORD PTR [rcx+rbp*8], rax
  001f1	eb 17		 jmp	 SHORT $LN2@stringlib_@14
$LN5@stringlib_@14:
  001f3	48 8b d0	 mov	 rdx, rax
  001f6	49 8b cc	 mov	 rcx, r12
  001f9	e8 00 00 00 00	 call	 PyList_Append
  001fe	48 8b cb	 mov	 rcx, rbx
  00201	85 c0		 test	 eax, eax
  00203	75 b3		 jne	 SHORT $LN63@stringlib_@14
  00205	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@stringlib_@14:
  0020a	48 ff c5	 inc	 rbp
$LN7@stringlib_@14:

; 231  :     }
; 232  :     FIX_PREALLOC_SIZE(list);
; 233  :     if (PyList_Reverse(list) < 0)

  0020d	49 8b cc	 mov	 rcx, r12
  00210	49 89 6c 24 60	 mov	 QWORD PTR [r12+96], rbp
  00215	e8 00 00 00 00	 call	 PyList_Reverse
  0021a	85 c0		 test	 eax, eax
  0021c	79 0c		 jns	 SHORT $LN1@stringlib_@14
$onError$21431:

; 236  : 
; 237  :   onError:
; 238  :     Py_DECREF(list);

  0021e	49 8b cc	 mov	 rcx, r12
  00221	e8 00 00 00 00	 call	 _Py_DecRef

; 239  :     return NULL;

  00226	33 c0		 xor	 eax, eax
  00228	eb 03		 jmp	 SHORT $LN60@stringlib_@14
$LN1@stringlib_@14:

; 234  :         goto onError;
; 235  :     return list;

  0022a	49 8b c4	 mov	 rax, r12
$LN60@stringlib_@14:
  0022d	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
  00232	4c 8b 7c 24 68	 mov	 r15, QWORD PTR [rsp+104]

; 240  : }

  00237	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0023c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00240	41 5e		 pop	 r14
  00242	41 5d		 pop	 r13
  00244	41 5c		 pop	 r12
  00246	5e		 pop	 rsi
  00247	5d		 pop	 rbp
  00248	c3		 ret	 0
stringlib_rsplit_whitespace ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stringlib_rsplit_char DD imagerel stringlib_rsplit_char
	DD	imagerel stringlib_rsplit_char+80
	DD	imagerel $unwind$stringlib_rsplit_char
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$stringlib_rsplit_char DD imagerel stringlib_rsplit_char+80
	DD	imagerel stringlib_rsplit_char+503
	DD	imagerel $chain$0$stringlib_rsplit_char
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$stringlib_rsplit_char DD imagerel stringlib_rsplit_char+503
	DD	imagerel stringlib_rsplit_char+527
	DD	imagerel $chain$1$stringlib_rsplit_char
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$stringlib_rsplit_char DD 021H
	DD	imagerel stringlib_rsplit_char
	DD	imagerel stringlib_rsplit_char+80
	DD	imagerel $unwind$stringlib_rsplit_char
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$stringlib_rsplit_char DD 020521H
	DD	0c5405H
	DD	imagerel stringlib_rsplit_char
	DD	imagerel stringlib_rsplit_char+80
	DD	imagerel $unwind$stringlib_rsplit_char
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_rsplit_char DD 0a1701H
	DD	0e6417H
	DD	0d3417H
	DD	0f0135217H
	DD	0d00fe011H
	DD	0700bc00dH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\stringlib\split.h
xdata	ENDS
;	COMDAT stringlib_rsplit_char
_TEXT	SEGMENT
str_obj$ = 96
str$ = 104
str_len$ = 112
ch$ = 120
maxcount$ = 128
stringlib_rsplit_char PROC				; COMDAT

; 247  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	41 54		 push	 r12
  0000d	41 55		 push	 r13
  0000f	41 56		 push	 r14
  00011	41 57		 push	 r15
  00013	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 248  :     Py_ssize_t i, j, count=0;
; 249  :     PyObject *list = PyList_New(PREALLOC_SIZE(maxcount));

  00017	4c 8b b4 24 80
	00 00 00	 mov	 r14, QWORD PTR maxcount$[rsp]
  0001f	33 f6		 xor	 esi, esi
  00021	4c 8b f9	 mov	 r15, rcx
  00024	45 0f b6 e9	 movzx	 r13d, r9b
  00028	49 8b d8	 mov	 rbx, r8
  0002b	4c 8b e2	 mov	 r12, rdx
  0002e	8d 4e 0c	 lea	 ecx, QWORD PTR [rsi+12]
  00031	49 83 fe 0c	 cmp	 r14, 12
  00035	7d 04		 jge	 SHORT $LN25@stringlib_@15
  00037	49 8d 4e 01	 lea	 rcx, QWORD PTR [r14+1]
$LN25@stringlib_@15:
  0003b	e8 00 00 00 00	 call	 PyList_New
  00040	48 8b f8	 mov	 rdi, rax

; 250  :     PyObject *sub;
; 251  : 
; 252  :     if (list == NULL)

  00043	48 85 c0	 test	 rax, rax
  00046	0f 84 ab 01 00
	00		 je	 $LN22@stringlib_@15
$LN21@stringlib_@15:

; 253  :         return NULL;
; 254  : 
; 255  :     i = j = str_len - 1;

  0004c	48 8d 53 ff	 lea	 rdx, QWORD PTR [rbx-1]
  00050	48 89 6c 24 60	 mov	 QWORD PTR [rsp+96], rbp
  00055	48 8b da	 mov	 rbx, rdx

; 256  :     while ((i >= 0) && (maxcount-- > 0)) {

  00058	48 85 d2	 test	 rdx, rdx
  0005b	78 74		 js	 SHORT $LN49@stringlib_@15
  0005d	0f 1f 00	 npad	 3
$LL20@stringlib_@15:
  00060	49 8b c6	 mov	 rax, r14
  00063	49 ff ce	 dec	 r14
  00066	48 85 c0	 test	 rax, rax
  00069	7e 61		 jle	 SHORT $LN19@stringlib_@15

; 257  :         for(; i >= 0; i--) {

  0006b	48 85 db	 test	 rbx, rbx
  0006e	78 5c		 js	 SHORT $LN19@stringlib_@15
$LL18@stringlib_@15:

; 258  :             if (str[i] == ch) {

  00070	46 38 2c 23	 cmp	 BYTE PTR [rbx+r12], r13b
  00074	74 07		 je	 SHORT $LN43@stringlib_@15

; 257  :         for(; i >= 0; i--) {

  00076	48 ff cb	 dec	 rbx
  00079	79 f5		 jns	 SHORT $LL18@stringlib_@15
  0007b	eb 4f		 jmp	 SHORT $LN19@stringlib_@15
$LN43@stringlib_@15:

; 259  :                 SPLIT_ADD(str, i + 1, j + 1);

  0007d	4a 8d 4c 23 01	 lea	 rcx, QWORD PTR [rbx+r12+1]
  00082	48 2b d3	 sub	 rdx, rbx
  00085	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0008a	48 8b e8	 mov	 rbp, rax
  0008d	48 85 c0	 test	 rax, rax
  00090	0f 84 ec 00 00
	00		 je	 $onError$21487
  00096	48 83 fe 0c	 cmp	 rsi, 12
  0009a	7d 0a		 jge	 SHORT $LN13@stringlib_@15
  0009c	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  000a0	48 89 04 f1	 mov	 QWORD PTR [rcx+rsi*8], rax
  000a4	eb 1b		 jmp	 SHORT $LN10@stringlib_@15
$LN13@stringlib_@15:
  000a6	48 8b d0	 mov	 rdx, rax
  000a9	48 8b cf	 mov	 rcx, rdi
  000ac	e8 00 00 00 00	 call	 PyList_Append
  000b1	48 8b cd	 mov	 rcx, rbp
  000b4	85 c0		 test	 eax, eax
  000b6	0f 85 a7 00 00
	00		 jne	 $LN45@stringlib_@15
  000bc	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@stringlib_@15:
  000c1	48 ff c6	 inc	 rsi

; 260  :                 j = i = i - 1;

  000c4	48 ff cb	 dec	 rbx
  000c7	48 8b d3	 mov	 rdx, rbx
  000ca	79 94		 jns	 SHORT $LL20@stringlib_@15
$LN19@stringlib_@15:

; 261  :                 break;
; 262  :             }
; 263  :         }
; 264  :     }
; 265  : #ifndef STRINGLIB_MUTABLE
; 266  :     if (count == 0 && STRINGLIB_CHECK_EXACT(str_obj)) {

  000cc	48 85 f6	 test	 rsi, rsi
  000cf	75 57		 jne	 SHORT $LN9@stringlib_@15
$LN49@stringlib_@15:
  000d1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  000d8	49 39 47 58	 cmp	 QWORD PTR [r15+88], rax
  000dc	75 4a		 jne	 SHORT $LN9@stringlib_@15

; 267  :         /* ch not in str_obj, so just use str_obj as list[0] */
; 268  :         Py_INCREF(str_obj);

  000de	e8 00 00 00 00	 call	 _Py_PXCTX
  000e3	85 c0		 test	 eax, eax
  000e5	75 33		 jne	 SHORT $LN27@stringlib_@15
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000f5	4d 8b cf	 mov	 r9, r15
  000f8	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000fe	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00106	e8 00 00 00 00	 call	 _PyParallel_Guard
  0010b	85 c0		 test	 eax, eax
  0010d	75 07		 jne	 SHORT $LN26@stringlib_@15
  0010f	41 f6 47 20 20	 test	 BYTE PTR [r15+32], 32	; 00000020H
  00114	74 04		 je	 SHORT $LN27@stringlib_@15
$LN26@stringlib_@15:
  00116	49 ff 47 50	 inc	 QWORD PTR [r15+80]
$LN27@stringlib_@15:

; 269  :         PyList_SET_ITEM(list, 0, (PyObject *)str_obj);

  0011a	48 8b 47 70	 mov	 rax, QWORD PTR [rdi+112]

; 270  :         count++;

  0011e	be 01 00 00 00	 mov	 esi, 1
  00123	4c 89 38	 mov	 QWORD PTR [rax], r15

; 271  :     } else

  00126	eb 4a		 jmp	 SHORT $LN7@stringlib_@15
$LN9@stringlib_@15:

; 272  : #endif
; 273  :     if (j >= -1) {

  00128	48 83 fa ff	 cmp	 rdx, -1
  0012c	7c 44		 jl	 SHORT $LN7@stringlib_@15

; 274  :         SPLIT_ADD(str, 0, j + 1);

  0012e	48 ff c2	 inc	 rdx
  00131	49 8b cc	 mov	 rcx, r12
  00134	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00139	48 8b d8	 mov	 rbx, rax
  0013c	48 85 c0	 test	 rax, rax
  0013f	74 41		 je	 SHORT $onError$21487
  00141	48 83 fe 0c	 cmp	 rsi, 12
  00145	7d 0a		 jge	 SHORT $LN5@stringlib_@15
  00147	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  0014b	48 89 04 f1	 mov	 QWORD PTR [rcx+rsi*8], rax
  0014f	eb 1e		 jmp	 SHORT $LN2@stringlib_@15
$LN5@stringlib_@15:
  00151	48 8b d0	 mov	 rdx, rax
  00154	48 8b cf	 mov	 rcx, rdi
  00157	e8 00 00 00 00	 call	 PyList_Append
  0015c	48 8b cb	 mov	 rcx, rbx
  0015f	85 c0		 test	 eax, eax
  00161	74 07		 je	 SHORT $LN3@stringlib_@15
$LN45@stringlib_@15:
  00163	e8 00 00 00 00	 call	 _Py_DecRef
  00168	eb 18		 jmp	 SHORT $onError$21487
$LN3@stringlib_@15:
  0016a	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@stringlib_@15:
  0016f	48 ff c6	 inc	 rsi
$LN7@stringlib_@15:

; 275  :     }
; 276  :     FIX_PREALLOC_SIZE(list);
; 277  :     if (PyList_Reverse(list) < 0)

  00172	48 8b cf	 mov	 rcx, rdi
  00175	48 89 77 60	 mov	 QWORD PTR [rdi+96], rsi
  00179	e8 00 00 00 00	 call	 PyList_Reverse
  0017e	85 c0		 test	 eax, eax
  00180	79 6d		 jns	 SHORT $LN1@stringlib_@15
$onError$21487:

; 280  : 
; 281  :   onError:
; 282  :     Py_DECREF(list);

  00182	e8 00 00 00 00	 call	 _Py_PXCTX
  00187	85 c0		 test	 eax, eax
  00189	75 60		 jne	 SHORT $LN40@stringlib_@15
  0018b	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0018f	a8 20		 test	 al, 32			; 00000020H
  00191	75 50		 jne	 SHORT $LN34@stringlib_@15
  00193	84 c0		 test	 al, al
  00195	78 4c		 js	 SHORT $LN34@stringlib_@15
  00197	a8 02		 test	 al, 2
  00199	75 50		 jne	 SHORT $LN40@stringlib_@15
  0019b	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0019f	75 4a		 jne	 SHORT $LN40@stringlib_@15
  001a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001af	4c 8b cf	 mov	 r9, rdi
  001b2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001b8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001c0	e8 00 00 00 00	 call	 _PyParallel_Guard
  001c5	48 8b cf	 mov	 rcx, rdi
  001c8	85 c0		 test	 eax, eax
  001ca	74 09		 je	 SHORT $LN39@stringlib_@15
  001cc	e8 00 00 00 00	 call	 _Px_Dealloc

; 283  :     return NULL;

  001d1	33 c0		 xor	 eax, eax
  001d3	eb 1d		 jmp	 SHORT $LN50@stringlib_@15

; 280  : 
; 281  :   onError:
; 282  :     Py_DECREF(list);

$LN39@stringlib_@15:
  001d5	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  001d9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 283  :     return NULL;

  001df	33 c0		 xor	 eax, eax
  001e1	eb 0f		 jmp	 SHORT $LN50@stringlib_@15

; 280  : 
; 281  :   onError:
; 282  :     Py_DECREF(list);

$LN34@stringlib_@15:
  001e3	48 8b cf	 mov	 rcx, rdi
  001e6	e8 00 00 00 00	 call	 Px_DecRef
$LN40@stringlib_@15:

; 283  :     return NULL;

  001eb	33 c0		 xor	 eax, eax
  001ed	eb 03		 jmp	 SHORT $LN50@stringlib_@15
$LN1@stringlib_@15:

; 278  :         goto onError;
; 279  :     return list;

  001ef	48 8b c7	 mov	 rax, rdi
$LN50@stringlib_@15:
  001f2	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
$LN22@stringlib_@15:

; 284  : }

  001f7	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  001fc	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  00201	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00205	41 5f		 pop	 r15
  00207	41 5e		 pop	 r14
  00209	41 5d		 pop	 r13
  0020b	41 5c		 pop	 r12
  0020d	5f		 pop	 rdi
  0020e	c3		 ret	 0
stringlib_rsplit_char ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\stringlib\fastsearch.h
pdata	SEGMENT
$pdata$stringlib_rsplit DD imagerel stringlib_rsplit
	DD	imagerel stringlib_rsplit+130
	DD	imagerel $unwind$stringlib_rsplit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$stringlib_rsplit DD imagerel stringlib_rsplit+130
	DD	imagerel stringlib_rsplit+744
	DD	imagerel $chain$1$stringlib_rsplit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$stringlib_rsplit DD imagerel stringlib_rsplit+744
	DD	imagerel stringlib_rsplit+836
	DD	imagerel $chain$3$stringlib_rsplit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$stringlib_rsplit DD 040021H
	DD	08e400H
	DD	011d400H
	DD	imagerel stringlib_rsplit
	DD	imagerel stringlib_rsplit+130
	DD	imagerel $unwind$stringlib_rsplit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$stringlib_rsplit DD 040d21H
	DD	08e40dH
	DD	011d408H
	DD	imagerel stringlib_rsplit
	DD	imagerel stringlib_rsplit+130
	DD	imagerel $unwind$stringlib_rsplit
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_rsplit DD 071601H
	DD	0f0128216H
	DD	0700ec010H
	DD	0500c600dH
	DD	0300bH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\stringlib\split.h
xdata	ENDS
;	COMDAT stringlib_rsplit
_TEXT	SEGMENT
j$1$ = 48
maxcount$1$ = 56
str_obj$ = 128
str$ = 136
str_len$ = 144
sep$ = 152
list$1$ = 160
sep_len$ = 160
maxcount$ = 168
stringlib_rsplit PROC					; COMDAT

; 291  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	53		 push	 rbx
  0000b	55		 push	 rbp
  0000c	56		 push	 rsi
  0000d	57		 push	 rdi
  0000e	41 54		 push	 r12
  00010	41 57		 push	 r15
  00012	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 292  :     Py_ssize_t j, pos, count=0;
; 293  :     PyObject *list, *sub;
; 294  : 
; 295  :     if (sep_len == 0) {

  00016	48 8b b4 24 a0
	00 00 00	 mov	 rsi, QWORD PTR sep_len$[rsp]
  0001e	45 33 ff	 xor	 r15d, r15d
  00021	4d 8b e1	 mov	 r12, r9
  00024	49 8b f8	 mov	 rdi, r8
  00027	4c 89 44 24 30	 mov	 QWORD PTR j$1$[rsp], r8
  0002c	48 8b ea	 mov	 rbp, rdx
  0002f	48 8b d9	 mov	 rbx, rcx
  00032	48 85 f6	 test	 rsi, rsi
  00035	75 22		 jne	 SHORT $LN20@stringlib_@16

; 296  :         PyErr_SetString(PyExc_ValueError, "empty separator");

  00037	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@JDENDMBF@empty?5separator?$AA@
  00045	e8 00 00 00 00	 call	 PyErr_SetString

; 297  :         return NULL;

  0004a	33 c0		 xor	 eax, eax

; 333  : }

  0004c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00050	41 5f		 pop	 r15
  00052	41 5c		 pop	 r12
  00054	5f		 pop	 rdi
  00055	5e		 pop	 rsi
  00056	5d		 pop	 rbp
  00057	5b		 pop	 rbx
  00058	c3		 ret	 0
$LN20@stringlib_@16:

; 298  :     }
; 299  :     else if (sep_len == 1)

  00059	48 83 fe 01	 cmp	 rsi, 1
  0005d	75 23		 jne	 SHORT $LN18@stringlib_@16

; 300  :         return STRINGLIB(rsplit_char)(str_obj, str, str_len, sep[0], maxcount);

  0005f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR maxcount$[rsp]
  00067	45 0f b6 09	 movzx	 r9d, BYTE PTR [r9]
  0006b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00070	e8 00 00 00 00	 call	 stringlib_rsplit_char

; 333  : }

  00075	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00079	41 5f		 pop	 r15
  0007b	41 5c		 pop	 r12
  0007d	5f		 pop	 rdi
  0007e	5e		 pop	 rsi
  0007f	5d		 pop	 rbp
  00080	5b		 pop	 rbx
  00081	c3		 ret	 0
$LN18@stringlib_@16:
  00082	4c 89 ac 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], r13
  0008a	4c 89 74 24 40	 mov	 QWORD PTR [rsp+64], r14

; 301  : 
; 302  :     list = PyList_New(PREALLOC_SIZE(maxcount));

  0008f	4c 8b b4 24 a8
	00 00 00	 mov	 r14, QWORD PTR maxcount$[rsp]
  00097	b9 0c 00 00 00	 mov	 ecx, 12
  0009c	49 83 fe 0c	 cmp	 r14, 12
  000a0	7d 04		 jge	 SHORT $LN24@stringlib_@16
  000a2	49 8d 4e 01	 lea	 rcx, QWORD PTR [r14+1]
$LN24@stringlib_@16:
  000a6	e8 00 00 00 00	 call	 PyList_New
  000ab	4c 8b e8	 mov	 r13, rax
  000ae	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR list$1$[rsp], rax

; 303  :     if (list == NULL)

  000b6	48 85 c0	 test	 rax, rax

; 304  :         return NULL;

  000b9	0f 84 0d 02 00
	00		 je	 $LN123@stringlib_@16

; 305  : 
; 306  :     j = str_len;
; 307  :     while (maxcount-- > 0) {

  000bf	4d 85 f6	 test	 r14, r14
  000c2	7e 67		 jle	 SHORT $LN113@stringlib_@16
  000c4	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL16@stringlib_@16:
  000d0	49 ff ce	 dec	 r14

; 308  :         pos = FASTSEARCH(str, j, sep, sep_len, -1, FAST_RSEARCH);

  000d3	48 8b df	 mov	 rbx, rdi
  000d6	48 2b de	 sub	 rbx, rsi
  000d9	4c 89 74 24 38	 mov	 QWORD PTR maxcount$1$[rsp], r14
  000de	78 32		 js	 SHORT $LN111@stringlib_@16
  000e0	48 83 fe 01	 cmp	 rsi, 1
  000e4	7f 70		 jg	 SHORT $LN83@stringlib_@16
  000e6	48 85 f6	 test	 rsi, rsi
  000e9	7e 27		 jle	 SHORT $LN111@stringlib_@16
  000eb	48 8d 5f ff	 lea	 rbx, QWORD PTR [rdi-1]
  000ef	48 83 fb ff	 cmp	 rbx, -1
  000f3	7e 1d		 jle	 SHORT $LN111@stringlib_@16
  000f5	41 0f b6 04 24	 movzx	 eax, BYTE PTR [r12]
  000fa	66 0f 1f 44 00
	00		 npad	 6
$LL67@stringlib_@16:
  00100	38 04 2b	 cmp	 BYTE PTR [rbx+rbp], al
  00103	0f 84 4b 01 00
	00		 je	 $LN103@stringlib_@16
  00109	48 ff cb	 dec	 rbx
  0010c	48 83 fb ff	 cmp	 rbx, -1
  00110	7f ee		 jg	 SHORT $LL67@stringlib_@16
$LN111@stringlib_@16:

; 313  :     }
; 314  : #ifndef STRINGLIB_MUTABLE
; 315  :     if (count == 0 && STRINGLIB_CHECK_EXACT(str_obj)) {

  00112	4d 85 ff	 test	 r15, r15
  00115	0f 85 cd 01 00
	00		 jne	 $LN8@stringlib_@16
  0011b	4c 8b ac 24 a0
	00 00 00	 mov	 r13, QWORD PTR list$1$[rsp]
  00123	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR str_obj$[rsp]
$LN113@stringlib_@16:
  0012b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  00132	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  00136	0f 85 ac 01 00
	00		 jne	 $LN8@stringlib_@16

; 316  :         /* No match in str_obj, so just use it as list[0] */
; 317  :         Py_INCREF(str_obj);

  0013c	48 8b cb	 mov	 rcx, rbx
  0013f	e8 00 00 00 00	 call	 _Py_IncRef

; 318  :         PyList_SET_ITEM(list, 0, (PyObject *)str_obj);

  00144	4d 8b 5d 70	 mov	 r11, QWORD PTR [r13+112]

; 319  :         count++;

  00148	41 bf 01 00 00
	00		 mov	 r15d, 1
  0014e	49 89 1b	 mov	 QWORD PTR [r11], rbx

; 320  :     } else

  00151	e9 d9 01 00 00	 jmp	 $LN7@stringlib_@16

; 308  :         pos = FASTSEARCH(str, j, sep, sep_len, -1, FAST_RSEARCH);

$LN83@stringlib_@16:
  00156	4c 8b 94 24 98
	00 00 00	 mov	 r10, QWORD PTR sep$[rsp]
  0015e	48 8d 7e ff	 lea	 rdi, QWORD PTR [rsi-1]
  00162	41 bd 01 00 00
	00		 mov	 r13d, 1
  00168	45 0f be 32	 movsx	 r14d, BYTE PTR [r10]
  0016c	4c 8d 67 ff	 lea	 r12, QWORD PTR [rdi-1]
  00170	41 8b ce	 mov	 ecx, r14d
  00173	83 e1 1f	 and	 ecx, 31
  00176	41 d3 e5	 shl	 r13d, cl
  00179	48 85 ff	 test	 rdi, rdi
  0017c	7e 3f		 jle	 SHORT $LN40@stringlib_@16
  0017e	49 83 cb ff	 or	 r11, -1
  00182	4e 8d 0c 17	 lea	 r9, QWORD PTR [rdi+r10]
  00186	4d 2b da	 sub	 r11, r10
  00189	4c 8b d7	 mov	 r10, rdi
  0018c	0f 1f 40 00	 npad	 4
$LL42@stringlib_@16:
  00190	45 0f be 01	 movsx	 r8d, BYTE PTR [r9]
  00194	ba 01 00 00 00	 mov	 edx, 1
  00199	41 8b c8	 mov	 ecx, r8d
  0019c	83 e1 1f	 and	 ecx, 31
  0019f	d3 e2		 shl	 edx, cl
  001a1	44 0b ea	 or	 r13d, edx
  001a4	45 3a c6	 cmp	 r8b, r14b
  001a7	75 04		 jne	 SHORT $LN41@stringlib_@16
  001a9	4f 8d 24 0b	 lea	 r12, QWORD PTR [r11+r9]
$LN41@stringlib_@16:
  001ad	49 ff c9	 dec	 r9
  001b0	49 ff ca	 dec	 r10
  001b3	75 db		 jne	 SHORT $LL42@stringlib_@16
  001b5	4c 8b 94 24 98
	00 00 00	 mov	 r10, QWORD PTR sep$[rsp]
$LN40@stringlib_@16:
  001bd	4c 8b c3	 mov	 r8, rbx
  001c0	4d 2b c2	 sub	 r8, r10
  001c3	4c 03 c5	 add	 r8, rbp
$LL38@stringlib_@16:
  001c6	44 38 34 2b	 cmp	 BYTE PTR [rbx+rbp], r14b
  001ca	75 48		 jne	 SHORT $LN35@stringlib_@16
  001cc	48 8b d7	 mov	 rdx, rdi
  001cf	48 85 ff	 test	 rdi, rdi
  001d2	7e 20		 jle	 SHORT $LN119@stringlib_@16
  001d4	4a 8d 0c 17	 lea	 rcx, QWORD PTR [rdi+r10]
  001d8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL34@stringlib_@16:
  001e0	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  001e3	41 38 04 08	 cmp	 BYTE PTR [r8+rcx], al
  001e7	75 0b		 jne	 SHORT $LN119@stringlib_@16
  001e9	48 ff ca	 dec	 rdx
  001ec	48 ff c9	 dec	 rcx
  001ef	48 85 d2	 test	 rdx, rdx
  001f2	7f ec		 jg	 SHORT $LL34@stringlib_@16
$LN119@stringlib_@16:
  001f4	48 85 d2	 test	 rdx, rdx
  001f7	74 41		 je	 SHORT $LN120@stringlib_@16
  001f9	48 85 db	 test	 rbx, rbx
  001fc	7e 0e		 jle	 SHORT $LN29@stringlib_@16
  001fe	0f be 44 2b ff	 movsx	 eax, BYTE PTR [rbx+rbp-1]
  00203	83 e0 1f	 and	 eax, 31
  00206	41 0f a3 c5	 bt	 r13d, eax
  0020a	73 1b		 jae	 SHORT $LN124@stringlib_@16
$LN29@stringlib_@16:
  0020c	49 2b dc	 sub	 rbx, r12
  0020f	4d 2b c4	 sub	 r8, r12
  00212	eb 19		 jmp	 SHORT $LN37@stringlib_@16
$LN35@stringlib_@16:
  00214	48 85 db	 test	 rbx, rbx
  00217	7e 14		 jle	 SHORT $LN37@stringlib_@16
  00219	0f be 44 2b ff	 movsx	 eax, BYTE PTR [rbx+rbp-1]
  0021e	83 e0 1f	 and	 eax, 31
  00221	41 0f a3 c5	 bt	 r13d, eax
  00225	72 06		 jb	 SHORT $LN37@stringlib_@16
$LN124@stringlib_@16:
  00227	48 2b de	 sub	 rbx, rsi
  0022a	4c 2b c6	 sub	 r8, rsi
$LN37@stringlib_@16:
  0022d	49 ff c8	 dec	 r8
  00230	48 ff cb	 dec	 rbx
  00233	79 91		 jns	 SHORT $LL38@stringlib_@16
  00235	e9 d8 fe ff ff	 jmp	 $LN111@stringlib_@16
$LN120@stringlib_@16:

; 312  :         j = pos;

  0023a	48 8b 7c 24 30	 mov	 rdi, QWORD PTR j$1$[rsp]
  0023f	4c 8b a4 24 98
	00 00 00	 mov	 r12, QWORD PTR sep$[rsp]
  00247	4c 8b ac 24 a0
	00 00 00	 mov	 r13, QWORD PTR list$1$[rsp]
  0024f	4c 8b 74 24 38	 mov	 r14, QWORD PTR maxcount$1$[rsp]
$LN103@stringlib_@16:

; 309  :         if (pos < 0)

  00254	48 85 db	 test	 rbx, rbx
  00257	0f 88 b5 fe ff
	ff		 js	 $LN111@stringlib_@16

; 310  :             break;
; 311  :         SPLIT_ADD(str, pos + sep_len, j);

  0025d	48 2b fb	 sub	 rdi, rbx
  00260	48 8d 0c 2b	 lea	 rcx, QWORD PTR [rbx+rbp]
  00264	48 2b fe	 sub	 rdi, rsi
  00267	48 03 ce	 add	 rcx, rsi
  0026a	48 8b d7	 mov	 rdx, rdi
  0026d	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00272	48 8b f8	 mov	 rdi, rax
  00275	48 85 c0	 test	 rax, rax
  00278	74 45		 je	 SHORT $onError$21547
  0027a	49 83 ff 0c	 cmp	 r15, 12
  0027e	7d 0a		 jge	 SHORT $LN12@stringlib_@16
  00280	49 8b 4d 70	 mov	 rcx, QWORD PTR [r13+112]
  00284	4a 89 04 f9	 mov	 QWORD PTR [rcx+r15*8], rax
  00288	eb 17		 jmp	 SHORT $LN9@stringlib_@16
$LN12@stringlib_@16:
  0028a	48 8b d0	 mov	 rdx, rax
  0028d	49 8b cd	 mov	 rcx, r13
  00290	e8 00 00 00 00	 call	 PyList_Append
  00295	48 8b cf	 mov	 rcx, rdi
  00298	85 c0		 test	 eax, eax
  0029a	75 1e		 jne	 SHORT $LN106@stringlib_@16
  0029c	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@stringlib_@16:
  002a1	49 ff c7	 inc	 r15

; 312  :         j = pos;

  002a4	48 8b fb	 mov	 rdi, rbx
  002a7	48 89 5c 24 30	 mov	 QWORD PTR j$1$[rsp], rbx
  002ac	4d 85 f6	 test	 r14, r14
  002af	0f 8f 1b fe ff
	ff		 jg	 $LL16@stringlib_@16

; 324  :     }
; 325  :     FIX_PREALLOC_SIZE(list);
; 326  :     if (PyList_Reverse(list) < 0)

  002b5	e9 58 fe ff ff	 jmp	 $LN111@stringlib_@16
$LN106@stringlib_@16:

; 310  :             break;
; 311  :         SPLIT_ADD(str, pos + sep_len, j);

  002ba	e8 00 00 00 00	 call	 _Py_DecRef
$onError$21547:

; 329  : 
; 330  :   onError:
; 331  :     Py_DECREF(list);

  002bf	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR list$1$[rsp]
  002c7	e8 00 00 00 00	 call	 _Py_DecRef
$LN123@stringlib_@16:

; 332  :     return NULL;

  002cc	33 c0		 xor	 eax, eax
$LN122@stringlib_@16:
  002ce	4c 8b ac 24 88
	00 00 00	 mov	 r13, QWORD PTR [rsp+136]
  002d6	4c 8b 74 24 40	 mov	 r14, QWORD PTR [rsp+64]

; 333  : }

  002db	48 83 c4 48	 add	 rsp, 72			; 00000048H
  002df	41 5f		 pop	 r15
  002e1	41 5c		 pop	 r12
  002e3	5f		 pop	 rdi
  002e4	5e		 pop	 rsi
  002e5	5d		 pop	 rbp
  002e6	5b		 pop	 rbx
  002e7	c3		 ret	 0
$LN8@stringlib_@16:

; 321  : #endif
; 322  :     {
; 323  :         SPLIT_ADD(str, 0, j);

  002e8	48 8b 54 24 30	 mov	 rdx, QWORD PTR j$1$[rsp]
  002ed	48 8b cd	 mov	 rcx, rbp
  002f0	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  002f5	48 8b d8	 mov	 rbx, rax
  002f8	48 85 c0	 test	 rax, rax
  002fb	74 c2		 je	 SHORT $onError$21547
  002fd	4c 8b ac 24 a0
	00 00 00	 mov	 r13, QWORD PTR list$1$[rsp]
  00305	49 83 ff 0c	 cmp	 r15, 12
  00309	7d 0a		 jge	 SHORT $LN5@stringlib_@16
  0030b	49 8b 4d 70	 mov	 rcx, QWORD PTR [r13+112]
  0030f	4a 89 04 f9	 mov	 QWORD PTR [rcx+r15*8], rax
  00313	eb 17		 jmp	 SHORT $LN2@stringlib_@16
$LN5@stringlib_@16:
  00315	48 8b d0	 mov	 rdx, rax
  00318	49 8b cd	 mov	 rcx, r13
  0031b	e8 00 00 00 00	 call	 PyList_Append
  00320	48 8b cb	 mov	 rcx, rbx
  00323	85 c0		 test	 eax, eax
  00325	75 93		 jne	 SHORT $LN106@stringlib_@16
  00327	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@stringlib_@16:
  0032c	49 ff c7	 inc	 r15
$LN7@stringlib_@16:

; 324  :     }
; 325  :     FIX_PREALLOC_SIZE(list);
; 326  :     if (PyList_Reverse(list) < 0)

  0032f	49 8b cd	 mov	 rcx, r13
  00332	4d 89 7d 60	 mov	 QWORD PTR [r13+96], r15
  00336	e8 00 00 00 00	 call	 PyList_Reverse
  0033b	85 c0		 test	 eax, eax
  0033d	78 80		 js	 SHORT $onError$21547

; 327  :         goto onError;
; 328  :     return list;

  0033f	49 8b c5	 mov	 rax, r13
  00342	eb 8a		 jmp	 SHORT $LN122@stringlib_@16
stringlib_rsplit ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stringlib_splitlines DD imagerel stringlib_splitlines
	DD	imagerel stringlib_splitlines+53
	DD	imagerel $unwind$stringlib_splitlines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$stringlib_splitlines DD imagerel stringlib_splitlines+53
	DD	imagerel stringlib_splitlines+368
	DD	imagerel $chain$2$stringlib_splitlines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$stringlib_splitlines DD imagerel stringlib_splitlines+368
	DD	imagerel stringlib_splitlines+405
	DD	imagerel $chain$4$stringlib_splitlines
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$stringlib_splitlines DD 060021H
	DD	0ef400H
	DD	0d7400H
	DD	0c3400H
	DD	imagerel stringlib_splitlines
	DD	imagerel stringlib_splitlines+53
	DD	imagerel $unwind$stringlib_splitlines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$stringlib_splitlines DD 061121H
	DD	0ef411H
	DD	0d740cH
	DD	0c3405H
	DD	imagerel stringlib_splitlines
	DD	imagerel stringlib_splitlines+53
	DD	imagerel $unwind$stringlib_splitlines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_splitlines DD 060d01H
	DD	0e009520dH
	DD	0c005d007H
	DD	050026003H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\stringlib\split.h
xdata	ENDS
;	COMDAT stringlib_splitlines
_TEXT	SEGMENT
str_obj$ = 96
str$ = 104
str_len$ = 112
keepends$ = 120
stringlib_splitlines PROC				; COMDAT

; 339  : {

  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	41 54		 push	 r12
  00005	41 55		 push	 r13
  00007	41 56		 push	 r14
  00009	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000d	4c 8b e9	 mov	 r13, rcx

; 340  :     /* This does not use the preallocated list because splitlines is
; 341  :        usually run with hundreds of newlines.  The overhead of
; 342  :        switching between PyList_SET_ITEM and append causes about a
; 343  :        2-3% slowdown for that common case.  A smarter implementation
; 344  :        could move the if check out, so the SET_ITEMs are done first
; 345  :        and the appends only done when the prealloc buffer is full.
; 346  :        That's too much work for little gain.*/
; 347  : 
; 348  :     register Py_ssize_t i;
; 349  :     register Py_ssize_t j;
; 350  :     PyObject *list = PyList_New(0);

  00010	33 c9		 xor	 ecx, ecx
  00012	45 8b f1	 mov	 r14d, r9d
  00015	49 8b f0	 mov	 rsi, r8
  00018	48 8b ea	 mov	 rbp, rdx
  0001b	e8 00 00 00 00	 call	 PyList_New
  00020	4c 8b e0	 mov	 r12, rax

; 351  :     PyObject *sub;
; 352  : 
; 353  :     if (list == NULL)

  00023	48 85 c0	 test	 rax, rax
  00026	75 0d		 jne	 SHORT $LN14@stringlib_@17

; 389  : }

  00028	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002c	41 5e		 pop	 r14
  0002e	41 5d		 pop	 r13
  00030	41 5c		 pop	 r12
  00032	5e		 pop	 rsi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
$LN14@stringlib_@17:
  00035	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx

; 354  :         return NULL;
; 355  : 
; 356  :     for (i = j = 0; i < str_len; ) {

  0003a	33 c9		 xor	 ecx, ecx
  0003c	48 89 7c 24 68	 mov	 QWORD PTR [rsp+104], rdi
  00041	4c 89 7c 24 70	 mov	 QWORD PTR [rsp+112], r15
  00046	8b d9		 mov	 ebx, ecx
  00048	48 85 f6	 test	 rsi, rsi
  0004b	0f 8e 00 01 00
	00		 jle	 $LN12@stringlib_@17
  00051	4c 8d 3d 00 00
	00 00		 lea	 r15, OFFSET FLAT:PyBytes_Type

; 357  :         Py_ssize_t eol;
; 358  : 
; 359  :         /* Find a line and append it */
; 360  :         while (i < str_len && !STRINGLIB_ISLINEBREAK(str[i]))

  00058	48 3b ce	 cmp	 rcx, rsi
  0005b	7d 17		 jge	 SHORT $LN36@stringlib_@17
  0005d	0f 1f 00	 npad	 3
$LL11@stringlib_@17:
  00060	0f b6 04 2b	 movzx	 eax, BYTE PTR [rbx+rbp]
  00064	3c 0a		 cmp	 al, 10
  00066	74 0c		 je	 SHORT $LN36@stringlib_@17
  00068	3c 0d		 cmp	 al, 13
  0006a	74 08		 je	 SHORT $LN36@stringlib_@17

; 361  :             i++;

  0006c	48 ff c3	 inc	 rbx
  0006f	48 3b de	 cmp	 rbx, rsi
  00072	7c ec		 jl	 SHORT $LL11@stringlib_@17
$LN36@stringlib_@17:

; 362  : 
; 363  :         /* Skip the line break reading CRLF as one line break */
; 364  :         eol = i;

  00074	48 8b d3	 mov	 rdx, rbx

; 365  :         if (i < str_len) {

  00077	48 3b de	 cmp	 rbx, rsi
  0007a	7d 26		 jge	 SHORT $LN6@stringlib_@17

; 366  :             if (str[i] == '\r' && i + 1 < str_len && str[i+1] == '\n')

  0007c	80 3c 2b 0d	 cmp	 BYTE PTR [rbx+rbp], 13
  00080	75 16		 jne	 SHORT $LN8@stringlib_@17
  00082	48 8d 43 01	 lea	 rax, QWORD PTR [rbx+1]
  00086	48 3b c6	 cmp	 rax, rsi
  00089	7d 0d		 jge	 SHORT $LN8@stringlib_@17
  0008b	80 7c 2b 01 0a	 cmp	 BYTE PTR [rbx+rbp+1], 10
  00090	75 06		 jne	 SHORT $LN8@stringlib_@17

; 367  :                 i += 2;

  00092	48 83 c3 02	 add	 rbx, 2

; 368  :             else

  00096	eb 03		 jmp	 SHORT $LN7@stringlib_@17
$LN8@stringlib_@17:

; 369  :                 i++;

  00098	48 ff c3	 inc	 rbx
$LN7@stringlib_@17:

; 370  :             if (keepends)

  0009b	45 85 f6	 test	 r14d, r14d
  0009e	48 0f 45 d3	 cmovne	 rdx, rbx
$LN6@stringlib_@17:

; 371  :                 eol = i;
; 372  :         }
; 373  : #ifndef STRINGLIB_MUTABLE
; 374  :         if (j == 0 && eol == str_len && STRINGLIB_CHECK_EXACT(str_obj)) {

  000a2	48 85 c9	 test	 rcx, rcx
  000a5	75 0f		 jne	 SHORT $LN5@stringlib_@17
  000a7	48 3b d6	 cmp	 rdx, rsi
  000aa	75 0a		 jne	 SHORT $LN5@stringlib_@17
  000ac	4d 39 7d 58	 cmp	 QWORD PTR [r13+88], r15
  000b0	0f 84 ba 00 00
	00		 je	 $LN30@stringlib_@17
$LN5@stringlib_@17:

; 379  :         }
; 380  : #endif
; 381  :         SPLIT_APPEND(str, j, eol);

  000b6	48 2b d1	 sub	 rdx, rcx
  000b9	48 03 cd	 add	 rcx, rbp
  000bc	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000c1	48 8b f8	 mov	 rdi, rax
  000c4	48 85 c0	 test	 rax, rax
  000c7	0f 84 bc 00 00
	00		 je	 $onError$21605
  000cd	48 8b d0	 mov	 rdx, rax
  000d0	49 8b cc	 mov	 rcx, r12
  000d3	e8 00 00 00 00	 call	 PyList_Append
  000d8	85 c0		 test	 eax, eax
  000da	0f 85 a1 00 00
	00		 jne	 $LN32@stringlib_@17
  000e0	e8 00 00 00 00	 call	 _Py_PXCTX
  000e5	85 c0		 test	 eax, eax
  000e7	75 5c		 jne	 SHORT $LN27@stringlib_@17
  000e9	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000ed	a8 20		 test	 al, 32			; 00000020H
  000ef	75 4c		 jne	 SHORT $LN21@stringlib_@17
  000f1	84 c0		 test	 al, al
  000f3	78 48		 js	 SHORT $LN21@stringlib_@17
  000f5	a8 02		 test	 al, 2
  000f7	75 4c		 jne	 SHORT $LN27@stringlib_@17
  000f9	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  000fd	75 46		 jne	 SHORT $LN27@stringlib_@17
  000ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00106	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0010d	4c 8b cf	 mov	 r9, rdi
  00110	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00116	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0011e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00123	48 8b cf	 mov	 rcx, rdi
  00126	85 c0		 test	 eax, eax
  00128	74 07		 je	 SHORT $LN26@stringlib_@17
  0012a	e8 00 00 00 00	 call	 _Px_Dealloc
  0012f	eb 14		 jmp	 SHORT $LN27@stringlib_@17
$LN26@stringlib_@17:
  00131	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00135	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0013b	eb 08		 jmp	 SHORT $LN27@stringlib_@17
$LN21@stringlib_@17:
  0013d	48 8b cf	 mov	 rcx, rdi
  00140	e8 00 00 00 00	 call	 Px_DecRef
$LN27@stringlib_@17:

; 382  :         j = i;

  00145	48 8b cb	 mov	 rcx, rbx
  00148	48 3b de	 cmp	 rbx, rsi
  0014b	0f 8c 0f ff ff
	ff		 jl	 $LL11@stringlib_@17
$LN12@stringlib_@17:

; 383  :     }
; 384  :     return list;

  00151	49 8b c4	 mov	 rax, r12
$LN39@stringlib_@17:
  00154	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  00159	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0015e	4c 8b 7c 24 70	 mov	 r15, QWORD PTR [rsp+112]

; 389  : }

  00163	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00167	41 5e		 pop	 r14
  00169	41 5d		 pop	 r13
  0016b	41 5c		 pop	 r12
  0016d	5e		 pop	 rsi
  0016e	5d		 pop	 rbp
  0016f	c3		 ret	 0
$LN30@stringlib_@17:

; 375  :             /* No linebreak in str_obj, so just use it as list[0] */
; 376  :             if (PyList_Append(list, str_obj))

  00170	49 8b d5	 mov	 rdx, r13
  00173	49 8b cc	 mov	 rcx, r12
  00176	e8 00 00 00 00	 call	 PyList_Append
  0017b	85 c0		 test	 eax, eax
  0017d	75 0a		 jne	 SHORT $onError$21605

; 377  :                 goto onError;
; 378  :             break;

  0017f	eb d0		 jmp	 SHORT $LN12@stringlib_@17
$LN32@stringlib_@17:

; 379  :         }
; 380  : #endif
; 381  :         SPLIT_APPEND(str, j, eol);

  00181	48 8b cf	 mov	 rcx, rdi
  00184	e8 00 00 00 00	 call	 _Py_DecRef
$onError$21605:

; 385  : 
; 386  :   onError:
; 387  :     Py_DECREF(list);

  00189	49 8b cc	 mov	 rcx, r12
  0018c	e8 00 00 00 00	 call	 _Py_DecRef

; 388  :     return NULL;

  00191	33 c0		 xor	 eax, eax
  00193	eb bf		 jmp	 SHORT $LN39@stringlib_@17
stringlib_splitlines ENDP
_TEXT	ENDS
EXTRN	_Py_bytes_isspace:PROC
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\stringlib\ctype.h
;	COMDAT stringlib_isspace
_TEXT	SEGMENT
self$ = 8
stringlib_isspace PROC					; COMDAT

; 9    :     return _Py_bytes_isspace(STRINGLIB_STR(self), STRINGLIB_LEN(self));

  00000	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00004	48 83 c1 78	 add	 rcx, 120		; 00000078H

; 10   : }

  00008	e9 00 00 00 00	 jmp	 _Py_bytes_isspace
stringlib_isspace ENDP
_TEXT	ENDS
EXTRN	_Py_bytes_isalpha:PROC
; Function compile flags: /Ogtpy
;	COMDAT stringlib_isalpha
_TEXT	SEGMENT
self$ = 8
stringlib_isalpha PROC					; COMDAT

; 15   :     return _Py_bytes_isalpha(STRINGLIB_STR(self), STRINGLIB_LEN(self));

  00000	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00004	48 83 c1 78	 add	 rcx, 120		; 00000078H

; 16   : }

  00008	e9 00 00 00 00	 jmp	 _Py_bytes_isalpha
stringlib_isalpha ENDP
_TEXT	ENDS
EXTRN	_Py_bytes_isalnum:PROC
; Function compile flags: /Ogtpy
;	COMDAT stringlib_isalnum
_TEXT	SEGMENT
self$ = 8
stringlib_isalnum PROC					; COMDAT

; 21   :     return _Py_bytes_isalnum(STRINGLIB_STR(self), STRINGLIB_LEN(self));

  00000	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00004	48 83 c1 78	 add	 rcx, 120		; 00000078H

; 22   : }

  00008	e9 00 00 00 00	 jmp	 _Py_bytes_isalnum
stringlib_isalnum ENDP
_TEXT	ENDS
EXTRN	_Py_bytes_isdigit:PROC
; Function compile flags: /Ogtpy
;	COMDAT stringlib_isdigit
_TEXT	SEGMENT
self$ = 8
stringlib_isdigit PROC					; COMDAT

; 27   :     return _Py_bytes_isdigit(STRINGLIB_STR(self), STRINGLIB_LEN(self));

  00000	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00004	48 83 c1 78	 add	 rcx, 120		; 00000078H

; 28   : }

  00008	e9 00 00 00 00	 jmp	 _Py_bytes_isdigit
stringlib_isdigit ENDP
_TEXT	ENDS
EXTRN	_Py_bytes_islower:PROC
; Function compile flags: /Ogtpy
;	COMDAT stringlib_islower
_TEXT	SEGMENT
self$ = 8
stringlib_islower PROC					; COMDAT

; 33   :     return _Py_bytes_islower(STRINGLIB_STR(self), STRINGLIB_LEN(self));

  00000	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00004	48 83 c1 78	 add	 rcx, 120		; 00000078H

; 34   : }

  00008	e9 00 00 00 00	 jmp	 _Py_bytes_islower
stringlib_islower ENDP
_TEXT	ENDS
EXTRN	_Py_bytes_isupper:PROC
; Function compile flags: /Ogtpy
;	COMDAT stringlib_isupper
_TEXT	SEGMENT
self$ = 8
stringlib_isupper PROC					; COMDAT

; 39   :     return _Py_bytes_isupper(STRINGLIB_STR(self), STRINGLIB_LEN(self));

  00000	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00004	48 83 c1 78	 add	 rcx, 120		; 00000078H

; 40   : }

  00008	e9 00 00 00 00	 jmp	 _Py_bytes_isupper
stringlib_isupper ENDP
_TEXT	ENDS
EXTRN	_Py_bytes_istitle:PROC
; Function compile flags: /Ogtpy
;	COMDAT stringlib_istitle
_TEXT	SEGMENT
self$ = 8
stringlib_istitle PROC					; COMDAT

; 45   :     return _Py_bytes_istitle(STRINGLIB_STR(self), STRINGLIB_LEN(self));

  00000	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00004	48 83 c1 78	 add	 rcx, 120		; 00000078H

; 46   : }

  00008	e9 00 00 00 00	 jmp	 _Py_bytes_istitle
stringlib_istitle ENDP
_TEXT	ENDS
EXTRN	_Py_bytes_lower:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringlib_lower DD imagerel stringlib_lower
	DD	imagerel stringlib_lower+74
	DD	imagerel $unwind$stringlib_lower
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_lower DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT stringlib_lower
_TEXT	SEGMENT
self$ = 48
stringlib_lower PROC					; COMDAT

; 53   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 54   :     PyObject* newobj;
; 55   :     newobj = STRINGLIB_NEW(NULL, STRINGLIB_LEN(self));

  0000a	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	33 c9		 xor	 ecx, ecx
  00013	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00018	48 8b f8	 mov	 rdi, rax

; 56   :     if (!newobj)

  0001b	48 85 c0	 test	 rax, rax
  0001e	75 0b		 jne	 SHORT $LN1@stringlib_@18

; 60   :     return newobj;
; 61   : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN1@stringlib_@18:

; 57   :             return NULL;
; 58   :     _Py_bytes_lower(STRINGLIB_STR(newobj), STRINGLIB_STR(self),
; 59   :                  STRINGLIB_LEN(self));

  0002b	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  0002f	48 8d 53 78	 lea	 rdx, QWORD PTR [rbx+120]
  00033	48 8d 48 78	 lea	 rcx, QWORD PTR [rax+120]
  00037	e8 00 00 00 00	 call	 _Py_bytes_lower

; 60   :     return newobj;
; 61   : }

  0003c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00041	48 8b c7	 mov	 rax, rdi
  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
stringlib_lower ENDP
_TEXT	ENDS
EXTRN	_Py_bytes_upper:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringlib_upper DD imagerel stringlib_upper
	DD	imagerel stringlib_upper+74
	DD	imagerel $unwind$stringlib_upper
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_upper DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT stringlib_upper
_TEXT	SEGMENT
self$ = 48
stringlib_upper PROC					; COMDAT

; 65   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 66   :     PyObject* newobj;
; 67   :     newobj = STRINGLIB_NEW(NULL, STRINGLIB_LEN(self));

  0000a	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	33 c9		 xor	 ecx, ecx
  00013	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00018	48 8b f8	 mov	 rdi, rax

; 68   :     if (!newobj)

  0001b	48 85 c0	 test	 rax, rax
  0001e	75 0b		 jne	 SHORT $LN1@stringlib_@19

; 72   :     return newobj;
; 73   : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN1@stringlib_@19:

; 69   :             return NULL;
; 70   :     _Py_bytes_upper(STRINGLIB_STR(newobj), STRINGLIB_STR(self),
; 71   :                  STRINGLIB_LEN(self));

  0002b	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  0002f	48 8d 53 78	 lea	 rdx, QWORD PTR [rbx+120]
  00033	48 8d 48 78	 lea	 rcx, QWORD PTR [rax+120]
  00037	e8 00 00 00 00	 call	 _Py_bytes_upper

; 72   :     return newobj;
; 73   : }

  0003c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00041	48 8b c7	 mov	 rax, rdi
  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
stringlib_upper ENDP
_TEXT	ENDS
EXTRN	_Py_bytes_title:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringlib_title DD imagerel stringlib_title
	DD	imagerel stringlib_title+74
	DD	imagerel $unwind$stringlib_title
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_title DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT stringlib_title
_TEXT	SEGMENT
self$ = 48
stringlib_title PROC					; COMDAT

; 77   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 78   :     PyObject* newobj;
; 79   :     newobj = STRINGLIB_NEW(NULL, STRINGLIB_LEN(self));

  0000a	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	33 c9		 xor	 ecx, ecx
  00013	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00018	48 8b f8	 mov	 rdi, rax

; 80   :     if (!newobj)

  0001b	48 85 c0	 test	 rax, rax
  0001e	75 0b		 jne	 SHORT $LN1@stringlib_@20

; 84   :     return newobj;
; 85   : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN1@stringlib_@20:

; 81   :             return NULL;
; 82   :     _Py_bytes_title(STRINGLIB_STR(newobj), STRINGLIB_STR(self),
; 83   :                  STRINGLIB_LEN(self));

  0002b	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  0002f	48 8d 53 78	 lea	 rdx, QWORD PTR [rbx+120]
  00033	48 8d 48 78	 lea	 rcx, QWORD PTR [rax+120]
  00037	e8 00 00 00 00	 call	 _Py_bytes_title

; 84   :     return newobj;
; 85   : }

  0003c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00041	48 8b c7	 mov	 rax, rdi
  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
stringlib_title ENDP
_TEXT	ENDS
EXTRN	_Py_bytes_capitalize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringlib_capitalize DD imagerel stringlib_capitalize
	DD	imagerel stringlib_capitalize+74
	DD	imagerel $unwind$stringlib_capitalize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_capitalize DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT stringlib_capitalize
_TEXT	SEGMENT
self$ = 48
stringlib_capitalize PROC				; COMDAT

; 89   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 90   :     PyObject* newobj;
; 91   :     newobj = STRINGLIB_NEW(NULL, STRINGLIB_LEN(self));

  0000a	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	33 c9		 xor	 ecx, ecx
  00013	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00018	48 8b f8	 mov	 rdi, rax

; 92   :     if (!newobj)

  0001b	48 85 c0	 test	 rax, rax
  0001e	75 0b		 jne	 SHORT $LN1@stringlib_@21

; 96   :     return newobj;
; 97   : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN1@stringlib_@21:

; 93   :             return NULL;
; 94   :     _Py_bytes_capitalize(STRINGLIB_STR(newobj), STRINGLIB_STR(self),
; 95   :                       STRINGLIB_LEN(self));

  0002b	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  0002f	48 8d 53 78	 lea	 rdx, QWORD PTR [rbx+120]
  00033	48 8d 48 78	 lea	 rcx, QWORD PTR [rax+120]
  00037	e8 00 00 00 00	 call	 _Py_bytes_capitalize

; 96   :     return newobj;
; 97   : }

  0003c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00041	48 8b c7	 mov	 rax, rdi
  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
stringlib_capitalize ENDP
_TEXT	ENDS
EXTRN	_Py_bytes_swapcase:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringlib_swapcase DD imagerel stringlib_swapcase
	DD	imagerel stringlib_swapcase+74
	DD	imagerel $unwind$stringlib_swapcase
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_swapcase DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT stringlib_swapcase
_TEXT	SEGMENT
self$ = 48
stringlib_swapcase PROC					; COMDAT

; 101  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 102  :     PyObject* newobj;
; 103  :     newobj = STRINGLIB_NEW(NULL, STRINGLIB_LEN(self));

  0000a	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	33 c9		 xor	 ecx, ecx
  00013	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00018	48 8b f8	 mov	 rdi, rax

; 104  :     if (!newobj)

  0001b	48 85 c0	 test	 rax, rax
  0001e	75 0b		 jne	 SHORT $LN1@stringlib_@22

; 108  :     return newobj;
; 109  : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN1@stringlib_@22:

; 105  :             return NULL;
; 106  :     _Py_bytes_swapcase(STRINGLIB_STR(newobj), STRINGLIB_STR(self),
; 107  :                     STRINGLIB_LEN(self));

  0002b	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  0002f	48 8d 53 78	 lea	 rdx, QWORD PTR [rbx+120]
  00033	48 8d 48 78	 lea	 rcx, QWORD PTR [rax+120]
  00037	e8 00 00 00 00	 call	 _Py_bytes_swapcase

; 108  :     return newobj;
; 109  : }

  0003c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00041	48 8b c7	 mov	 rax, rdi
  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
stringlib_swapcase ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBJEGKI@result?5is?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0O@DJDMKPID@?$HMi?3expandtabs?$AA@	; `string'
EXTRN	memset:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\stringlib\transmogrify.h
pdata	SEGMENT
$pdata$stringlib_expandtabs DD imagerel stringlib_expandtabs
	DD	imagerel stringlib_expandtabs+56
	DD	imagerel $unwind$stringlib_expandtabs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$stringlib_expandtabs DD imagerel stringlib_expandtabs+56
	DD	imagerel stringlib_expandtabs+215
	DD	imagerel $chain$1$stringlib_expandtabs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$stringlib_expandtabs DD imagerel stringlib_expandtabs+215
	DD	imagerel stringlib_expandtabs+235
	DD	imagerel $chain$4$stringlib_expandtabs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$stringlib_expandtabs DD imagerel stringlib_expandtabs+235
	DD	imagerel stringlib_expandtabs+251
	DD	imagerel $chain$5$stringlib_expandtabs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$stringlib_expandtabs DD imagerel stringlib_expandtabs+251
	DD	imagerel stringlib_expandtabs+346
	DD	imagerel $chain$6$stringlib_expandtabs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$stringlib_expandtabs DD imagerel stringlib_expandtabs+346
	DD	imagerel stringlib_expandtabs+354
	DD	imagerel $chain$7$stringlib_expandtabs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$stringlib_expandtabs DD imagerel stringlib_expandtabs+354
	DD	imagerel stringlib_expandtabs+375
	DD	imagerel $chain$8$stringlib_expandtabs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$stringlib_expandtabs DD 021H
	DD	imagerel stringlib_expandtabs+215
	DD	imagerel stringlib_expandtabs+235
	DD	imagerel $chain$4$stringlib_expandtabs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$stringlib_expandtabs DD 021H
	DD	imagerel stringlib_expandtabs+235
	DD	imagerel stringlib_expandtabs+251
	DD	imagerel $chain$5$stringlib_expandtabs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$stringlib_expandtabs DD 020521H
	DD	095405H
	DD	imagerel stringlib_expandtabs+235
	DD	imagerel stringlib_expandtabs+251
	DD	imagerel $chain$5$stringlib_expandtabs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$stringlib_expandtabs DD 020521H
	DD	0b6405H
	DD	imagerel stringlib_expandtabs+215
	DD	imagerel stringlib_expandtabs+235
	DD	imagerel $chain$4$stringlib_expandtabs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$stringlib_expandtabs DD 060721H
	DD	04d407H
	DD	05c400H
	DD	083400H
	DD	imagerel stringlib_expandtabs
	DD	imagerel stringlib_expandtabs+56
	DD	imagerel $unwind$stringlib_expandtabs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$stringlib_expandtabs DD 040a21H
	DD	05c40aH
	DD	083405H
	DD	imagerel stringlib_expandtabs
	DD	imagerel stringlib_expandtabs+56
	DD	imagerel $unwind$stringlib_expandtabs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_expandtabs DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0BD@OLBJEGKI@result?5is?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBJEGKI@result?5is?5too?5long?$AA@ DB 'result is too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DJDMKPID@?$HMi?3expandtabs?$AA@
CONST	SEGMENT
??_C@_0O@DJDMKPID@?$HMi?3expandtabs?$AA@ DB '|i:expandtabs', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringlib_expandtabs
_TEXT	SEGMENT
self$ = 64
args$ = 72
tabsize$ = 80
stringlib_expandtabs PROC				; COMDAT

; 15   : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b f9	 mov	 rdi, rcx

; 16   :     const char *e, *p;
; 17   :     char *q;
; 18   :     size_t i, j;
; 19   :     PyObject *u;
; 20   :     int tabsize = 8;
; 21   : 
; 22   :     if (!PyArg_ParseTuple(args, "|i:expandtabs", &tabsize))

  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR tabsize$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@DJDMKPID@?$HMi?3expandtabs?$AA@
  00018	48 8b c8	 mov	 rcx, rax
  0001b	c7 44 24 50 08
	00 00 00	 mov	 DWORD PTR tabsize$[rsp], 8
  00023	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00028	85 c0		 test	 eax, eax
  0002a	75 08		 jne	 SHORT $LN23@stringlib_@23

; 23   :         return NULL;

  0002c	33 c0		 xor	 eax, eax

; 82   : }

  0002e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00032	5f		 pop	 rdi
  00033	c3		 ret	 0
$LN23@stringlib_@23:

; 24   : 
; 25   :     /* First pass: determine size of output string */
; 26   :     i = j = 0;
; 27   :     e = STRINGLIB_STR(self) + STRINGLIB_LEN(self);

  00034	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00038	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0003d	4c 89 64 24 28	 mov	 QWORD PTR [rsp+40], r12
  00042	4c 8d 64 38 78	 lea	 r12, QWORD PTR [rax+rdi+120]

; 28   :     for (p = STRINGLIB_STR(self); p < e; p++)

  00047	48 83 c7 78	 add	 rdi, 120		; 00000078H
  0004b	45 33 c9	 xor	 r9d, r9d
  0004e	45 33 d2	 xor	 r10d, r10d
  00051	48 bb ff ff ff
	ff ff ff ff 7f	 mov	 rbx, 9223372036854775807 ; 7fffffffffffffffH
  0005b	4c 8b c7	 mov	 r8, rdi
  0005e	49 3b fc	 cmp	 rdi, r12
  00061	73 46		 jae	 SHORT $LN20@stringlib_@23
  00063	4c 63 5c 24 50	 movsxd	 r11, DWORD PTR tabsize$[rsp]
$LL22@stringlib_@23:

; 29   :         if (*p == '\t') {

  00068	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  0006c	3c 09		 cmp	 al, 9
  0006e	75 1b		 jne	 SHORT $LN19@stringlib_@23

; 30   :             if (tabsize > 0) {

  00070	45 85 db	 test	 r11d, r11d
  00073	7e 2c		 jle	 SHORT $LN21@stringlib_@23

; 31   :                 j += tabsize - (j % tabsize);

  00075	33 d2		 xor	 edx, edx
  00077	49 8b c1	 mov	 rax, r9
  0007a	49 8b cb	 mov	 rcx, r11
  0007d	49 f7 f3	 div	 r11
  00080	48 2b ca	 sub	 rcx, rdx
  00083	4c 03 c9	 add	 r9, rcx

; 32   :                 if (j > PY_SSIZE_T_MAX) {

  00086	4c 3b cb	 cmp	 r9, rbx

; 33   :                     PyErr_SetString(PyExc_OverflowError,
; 34   :                                     "result is too long");
; 35   :                     return NULL;
; 36   :                 }
; 37   :             }
; 38   :         }
; 39   :         else {

  00089	eb 14		 jmp	 SHORT $LN40@stringlib_@23
$LN19@stringlib_@23:

; 40   :             j++;

  0008b	49 ff c1	 inc	 r9

; 41   :             if (*p == '\n' || *p == '\r') {

  0008e	3c 0a		 cmp	 al, 10
  00090	74 04		 je	 SHORT $LN14@stringlib_@23
  00092	3c 0d		 cmp	 al, 13
  00094	75 0b		 jne	 SHORT $LN21@stringlib_@23
$LN14@stringlib_@23:

; 42   :                 i += j;

  00096	4d 03 d1	 add	 r10, r9

; 43   :                 j = 0;

  00099	45 33 c9	 xor	 r9d, r9d

; 44   :                 if (i > PY_SSIZE_T_MAX) {

  0009c	4c 3b d3	 cmp	 r10, rbx
$LN40@stringlib_@23:
  0009f	77 11		 ja	 SHORT $LN30@stringlib_@23
$LN21@stringlib_@23:

; 28   :     for (p = STRINGLIB_STR(self); p < e; p++)

  000a1	49 ff c0	 inc	 r8
  000a4	4d 3b c4	 cmp	 r8, r12
  000a7	72 bf		 jb	 SHORT $LL22@stringlib_@23
$LN20@stringlib_@23:

; 45   :                     PyErr_SetString(PyExc_OverflowError,
; 46   :                                     "result is too long");
; 47   :                     return NULL;
; 48   :                 }
; 49   :             }
; 50   :         }
; 51   : 
; 52   :     if ((i + j) > PY_SSIZE_T_MAX) {

  000a9	4b 8d 14 11	 lea	 rdx, QWORD PTR [r9+r10]
  000ad	48 3b d3	 cmp	 rdx, rbx
  000b0	76 25		 jbe	 SHORT $LN12@stringlib_@23
$LN30@stringlib_@23:

; 53   :         PyErr_SetString(PyExc_OverflowError, "result is too long");

  000b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  000b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@OLBJEGKI@result?5is?5too?5long?$AA@
  000c0	e8 00 00 00 00	 call	 PyErr_SetString
  000c5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ca	4c 8b 64 24 28	 mov	 r12, QWORD PTR [rsp+40]

; 54   :         return NULL;

  000cf	33 c0		 xor	 eax, eax

; 82   : }

  000d1	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d5	5f		 pop	 rdi
  000d6	c3		 ret	 0
$LN12@stringlib_@23:

; 55   :     }
; 56   : 
; 57   :     /* Second pass: create output string and fill it */
; 58   :     u = STRINGLIB_NEW(NULL, i + j);

  000d7	33 c9		 xor	 ecx, ecx
  000d9	4c 89 6c 24 20	 mov	 QWORD PTR [rsp+32], r13
  000de	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000e3	4c 8b e8	 mov	 r13, rax

; 59   :     if (!u)

  000e6	48 85 c0	 test	 rax, rax
  000e9	74 77		 je	 SHORT $LN39@stringlib_@23
$LN11@stringlib_@23:
  000eb	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi

; 60   :         return NULL;
; 61   : 
; 62   :     j = 0;

  000f0	33 f6		 xor	 esi, esi

; 63   :     q = STRINGLIB_STR(u);

  000f2	48 8d 58 78	 lea	 rbx, QWORD PTR [rax+120]

; 64   : 
; 65   :     for (p = STRINGLIB_STR(self); p < e; p++)

  000f6	49 3b fc	 cmp	 rdi, r12
  000f9	73 5f		 jae	 SHORT $LN8@stringlib_@23
  000fb	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
$LL10@stringlib_@23:

; 66   :         if (*p == '\t') {

  00100	0f b6 07	 movzx	 eax, BYTE PTR [rdi]
  00103	3c 09		 cmp	 al, 9
  00105	75 31		 jne	 SHORT $LN7@stringlib_@23

; 67   :             if (tabsize > 0) {

  00107	48 63 44 24 50	 movsxd	 rax, DWORD PTR tabsize$[rsp]
  0010c	85 c0		 test	 eax, eax
  0010e	7e 3d		 jle	 SHORT $LN9@stringlib_@23

; 68   :                 i = tabsize - (j % tabsize);

  00110	48 8b e8	 mov	 rbp, rax
  00113	33 d2		 xor	 edx, edx
  00115	48 8b c6	 mov	 rax, rsi
  00118	48 f7 f5	 div	 rbp
  0011b	48 2b ea	 sub	 rbp, rdx

; 69   :                 j += i;

  0011e	48 03 f5	 add	 rsi, rbp

; 70   :                 while (i--)

  00121	48 85 ed	 test	 rbp, rbp
  00124	74 27		 je	 SHORT $LN9@stringlib_@23

; 68   :                 i = tabsize - (j % tabsize);

  00126	4c 8b c5	 mov	 r8, rbp
  00129	b2 20		 mov	 dl, 32			; 00000020H
  0012b	48 8b cb	 mov	 rcx, rbx
  0012e	e8 00 00 00 00	 call	 memset

; 70   :                 while (i--)

  00133	48 03 dd	 add	 rbx, rbp

; 71   :                     *q++ = ' ';
; 72   :             }
; 73   :         }
; 74   :         else {

  00136	eb 15		 jmp	 SHORT $LN9@stringlib_@23
$LN7@stringlib_@23:

; 75   :             j++;
; 76   :             *q++ = *p;

  00138	88 03		 mov	 BYTE PTR [rbx], al

; 77   :             if (*p == '\n' || *p == '\r')

  0013a	0f b6 07	 movzx	 eax, BYTE PTR [rdi]
  0013d	48 ff c6	 inc	 rsi
  00140	48 ff c3	 inc	 rbx
  00143	3c 0a		 cmp	 al, 10
  00145	74 04		 je	 SHORT $LN1@stringlib_@23
  00147	3c 0d		 cmp	 al, 13
  00149	75 02		 jne	 SHORT $LN9@stringlib_@23
$LN1@stringlib_@23:

; 78   :                 j = 0;

  0014b	33 f6		 xor	 esi, esi
$LN9@stringlib_@23:

; 64   : 
; 65   :     for (p = STRINGLIB_STR(self); p < e; p++)

  0014d	48 ff c7	 inc	 rdi
  00150	49 3b fc	 cmp	 rdi, r12
  00153	72 ab		 jb	 SHORT $LL10@stringlib_@23
  00155	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
$LN8@stringlib_@23:
  0015a	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]

; 79   :         }
; 80   : 
; 81   :     return u;

  0015f	49 8b c5	 mov	 rax, r13
$LN39@stringlib_@23:
  00162	4c 8b 6c 24 20	 mov	 r13, QWORD PTR [rsp+32]
  00167	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0016c	4c 8b 64 24 28	 mov	 r12, QWORD PTR [rsp+40]

; 82   : }

  00171	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00175	5f		 pop	 rdi
  00176	c3		 ret	 0
stringlib_expandtabs ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pad DD	imagerel pad
	DD	imagerel pad+90
	DD	imagerel $unwind$pad
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$pad DD	imagerel pad+90
	DD	imagerel pad+229
	DD	imagerel $chain$0$pad
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$pad DD	imagerel pad+229
	DD	imagerel pad+251
	DD	imagerel $chain$1$pad
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$pad DD	021H
	DD	imagerel pad
	DD	imagerel pad+90
	DD	imagerel $unwind$pad
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$pad DD	020521H
	DD	067405H
	DD	imagerel pad
	DD	imagerel pad+90
	DD	imagerel $unwind$pad
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pad DD	081501H
	DD	096415H
	DD	085415H
	DD	073415H
	DD	0c0113215H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT pad
_TEXT	SEGMENT
self$ = 48
left$ = 56
right$ = 64
fill$ = 72
pad	PROC						; COMDAT

; 86   : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	41 54		 push	 r12
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 87   :     PyObject *u;
; 88   : 
; 89   :     if (left < 0)

  00015	33 c0		 xor	 eax, eax
  00017	48 85 d2	 test	 rdx, rdx
  0001a	48 8b f2	 mov	 rsi, rdx
  0001d	48 0f 48 f0	 cmovs	 rsi, rax

; 90   :         left = 0;
; 91   :     if (right < 0)

  00021	4d 85 c0	 test	 r8, r8
  00024	49 8b e8	 mov	 rbp, r8
  00027	48 0f 48 e8	 cmovs	 rbp, rax
  0002b	45 0f b6 e1	 movzx	 r12d, r9b
  0002f	48 8b d9	 mov	 rbx, rcx

; 92   :         right = 0;
; 93   : 
; 94   :     if (left == 0 && right == 0 && STRINGLIB_CHECK_EXACT(self)) {

  00032	48 85 f6	 test	 rsi, rsi
  00035	75 1f		 jne	 SHORT $LN12@pad
  00037	48 85 ed	 test	 rbp, rbp
  0003a	75 1a		 jne	 SHORT $LN12@pad
  0003c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  00043	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00047	75 0d		 jne	 SHORT $LN12@pad

; 95   : #if STRINGLIB_MUTABLE
; 96   :         /* We're defined as returning a copy;  If the object is mutable
; 97   :          * that means we must make an identical copy. */
; 98   :         return STRINGLIB_NEW(STRINGLIB_STR(self), STRINGLIB_LEN(self));
; 99   : #else
; 100  :         Py_INCREF(self);

  00049	e8 00 00 00 00	 call	 _Py_IncRef

; 101  :         return (PyObject *)self;

  0004e	48 8b c3	 mov	 rax, rbx
  00051	e9 8f 00 00 00	 jmp	 $LN15@pad
$LN12@pad:

; 102  : #endif /* STRINGLIB_MUTABLE */
; 103  :     }
; 104  : 
; 105  :     u = STRINGLIB_NEW(NULL,
; 106  : 				   left + STRINGLIB_LEN(self) + right);

  00056	48 8d 14 2e	 lea	 rdx, QWORD PTR [rsi+rbp]
  0005a	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0005f	48 03 51 60	 add	 rdx, QWORD PTR [rcx+96]
  00063	33 c9		 xor	 ecx, ecx
  00065	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0006a	48 8b f8	 mov	 rdi, rax

; 107  :     if (u) {

  0006d	48 85 c0	 test	 rax, rax
  00070	74 6b		 je	 SHORT $LN1@pad

; 108  :         if (left)

  00072	48 85 f6	 test	 rsi, rsi
  00075	74 10		 je	 SHORT $LN9@pad

; 109  :             memset(STRINGLIB_STR(u), fill, left);

  00077	48 8d 48 78	 lea	 rcx, QWORD PTR [rax+120]
  0007b	41 0f be d4	 movsx	 edx, r12b
  0007f	4c 8b c6	 mov	 r8, rsi
  00082	e8 00 00 00 00	 call	 memset
$LN9@pad:

; 110  :         Py_MEMCPY(STRINGLIB_STR(u) + left,
; 111  : 	       STRINGLIB_STR(self),
; 112  : 	       STRINGLIB_LEN(self));

  00087	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  0008b	48 8d 4c 37 78	 lea	 rcx, QWORD PTR [rdi+rsi+120]
  00090	48 8d 53 78	 lea	 rdx, QWORD PTR [rbx+120]
  00094	49 83 f8 10	 cmp	 r8, 16
  00098	72 07		 jb	 SHORT $LN6@pad
  0009a	e8 00 00 00 00	 call	 memcpy
  0009f	eb 1e		 jmp	 SHORT $LN8@pad
$LN6@pad:
  000a1	4d 85 c0	 test	 r8, r8
  000a4	74 19		 je	 SHORT $LN8@pad
  000a6	48 2b d1	 sub	 rdx, rcx
  000a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@pad:
  000b0	0f b6 04 0a	 movzx	 eax, BYTE PTR [rdx+rcx]
  000b4	48 ff c1	 inc	 rcx
  000b7	49 ff c8	 dec	 r8
  000ba	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  000bd	75 f1		 jne	 SHORT $LL4@pad
$LN8@pad:

; 113  :         if (right)

  000bf	48 85 ed	 test	 rbp, rbp
  000c2	74 19		 je	 SHORT $LN1@pad

; 114  :             memset(STRINGLIB_STR(u) + left + STRINGLIB_LEN(self),
; 115  : 		   fill, right);

  000c4	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  000c8	48 8d 0c 37	 lea	 rcx, QWORD PTR [rdi+rsi]
  000cc	41 0f be d4	 movsx	 edx, r12b
  000d0	48 8d 4c 01 78	 lea	 rcx, QWORD PTR [rcx+rax+120]
  000d5	4c 8b c5	 mov	 r8, rbp
  000d8	e8 00 00 00 00	 call	 memset
$LN1@pad:

; 116  :     }
; 117  : 
; 118  :     return u;

  000dd	48 8b c7	 mov	 rax, rdi
  000e0	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
$LN15@pad:

; 119  : }

  000e5	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000ea	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000ef	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000f4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f8	41 5c		 pop	 r12
  000fa	c3		 ret	 0
pad	ENDP
_TEXT	ENDS
PUBLIC	??_C@_09HKAKFEFH@n?$HMc?3ljust?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringlib_ljust DD imagerel stringlib_ljust
	DD	imagerel stringlib_ljust+123
	DD	imagerel $unwind$stringlib_ljust
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_ljust DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_09HKAKFEFH@n?$HMc?3ljust?$AA@
CONST	SEGMENT
??_C@_09HKAKFEFH@n?$HMc?3ljust?$AA@ DB 'n|c:ljust', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringlib_ljust
_TEXT	SEGMENT
self$ = 48
args$ = 56
fillchar$ = 64
width$ = 72
stringlib_ljust PROC					; COMDAT

; 129  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 130  :     Py_ssize_t width;
; 131  :     char fillchar = ' ';
; 132  : 
; 133  :     if (!PyArg_ParseTuple(args, "n|c:ljust", &width, &fillchar))

  0000c	4c 8d 4c 24 40	 lea	 r9, QWORD PTR fillchar$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09HKAKFEFH@n?$HMc?3ljust?$AA@
  00018	4c 8d 44 24 48	 lea	 r8, QWORD PTR width$[rsp]
  0001d	48 8b c8	 mov	 rcx, rax
  00020	c6 44 24 40 20	 mov	 BYTE PTR fillchar$[rsp], 32 ; 00000020H
  00025	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0002a	85 c0		 test	 eax, eax
  0002c	75 08		 jne	 SHORT $LN2@stringlib_@24

; 134  :         return NULL;

  0002e	33 c0		 xor	 eax, eax

; 148  : }

  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5b		 pop	 rbx
  00035	c3		 ret	 0
$LN2@stringlib_@24:

; 135  : 
; 136  :     if (STRINGLIB_LEN(self) >= width && STRINGLIB_CHECK_EXACT(self)) {

  00036	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0003a	4c 8b 44 24 48	 mov	 r8, QWORD PTR width$[rsp]
  0003f	49 3b c0	 cmp	 rax, r8
  00042	7c 1e		 jl	 SHORT $LN1@stringlib_@24
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBytes_Type
  0004b	48 39 4b 58	 cmp	 QWORD PTR [rbx+88], rcx
  0004f	75 11		 jne	 SHORT $LN1@stringlib_@24

; 137  : #if STRINGLIB_MUTABLE
; 138  :         /* We're defined as returning a copy;  If the object is mutable
; 139  :          * that means we must make an identical copy. */
; 140  :         return STRINGLIB_NEW(STRINGLIB_STR(self), STRINGLIB_LEN(self));
; 141  : #else
; 142  :         Py_INCREF(self);

  00051	48 8b cb	 mov	 rcx, rbx
  00054	e8 00 00 00 00	 call	 _Py_IncRef

; 143  :         return (PyObject*) self;

  00059	48 8b c3	 mov	 rax, rbx

; 148  : }

  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5b		 pop	 rbx
  00061	c3		 ret	 0
$LN1@stringlib_@24:

; 144  : #endif
; 145  :     }
; 146  : 
; 147  :     return pad(self, 0, width - STRINGLIB_LEN(self), fillchar);

  00062	44 0f b6 4c 24
	40		 movzx	 r9d, BYTE PTR fillchar$[rsp]
  00068	4c 2b c0	 sub	 r8, rax
  0006b	33 d2		 xor	 edx, edx
  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 pad

; 148  : }

  00075	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
stringlib_ljust ENDP
_TEXT	ENDS
PUBLIC	??_C@_09EDNGDHLM@n?$HMc?3rjust?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringlib_rjust DD imagerel stringlib_rjust
	DD	imagerel stringlib_rjust+124
	DD	imagerel $unwind$stringlib_rjust
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_rjust DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_09EDNGDHLM@n?$HMc?3rjust?$AA@
CONST	SEGMENT
??_C@_09EDNGDHLM@n?$HMc?3rjust?$AA@ DB 'n|c:rjust', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringlib_rjust
_TEXT	SEGMENT
self$ = 48
args$ = 56
fillchar$ = 64
width$ = 72
stringlib_rjust PROC					; COMDAT

; 159  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 160  :     Py_ssize_t width;
; 161  :     char fillchar = ' ';
; 162  : 
; 163  :     if (!PyArg_ParseTuple(args, "n|c:rjust", &width, &fillchar))

  0000c	4c 8d 4c 24 40	 lea	 r9, QWORD PTR fillchar$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09EDNGDHLM@n?$HMc?3rjust?$AA@
  00018	4c 8d 44 24 48	 lea	 r8, QWORD PTR width$[rsp]
  0001d	48 8b c8	 mov	 rcx, rax
  00020	c6 44 24 40 20	 mov	 BYTE PTR fillchar$[rsp], 32 ; 00000020H
  00025	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0002a	85 c0		 test	 eax, eax
  0002c	75 08		 jne	 SHORT $LN2@stringlib_@25

; 164  :         return NULL;

  0002e	33 c0		 xor	 eax, eax

; 178  : }

  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5b		 pop	 rbx
  00035	c3		 ret	 0
$LN2@stringlib_@25:

; 165  : 
; 166  :     if (STRINGLIB_LEN(self) >= width && STRINGLIB_CHECK_EXACT(self)) {

  00036	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  0003a	48 8b 54 24 48	 mov	 rdx, QWORD PTR width$[rsp]
  0003f	48 3b c2	 cmp	 rax, rdx
  00042	7c 1e		 jl	 SHORT $LN1@stringlib_@25
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBytes_Type
  0004b	48 39 4b 58	 cmp	 QWORD PTR [rbx+88], rcx
  0004f	75 11		 jne	 SHORT $LN1@stringlib_@25

; 167  : #if STRINGLIB_MUTABLE
; 168  :         /* We're defined as returning a copy;  If the object is mutable
; 169  :          * that means we must make an identical copy. */
; 170  :         return STRINGLIB_NEW(STRINGLIB_STR(self), STRINGLIB_LEN(self));
; 171  : #else
; 172  :         Py_INCREF(self);

  00051	48 8b cb	 mov	 rcx, rbx
  00054	e8 00 00 00 00	 call	 _Py_IncRef

; 173  :         return (PyObject*) self;

  00059	48 8b c3	 mov	 rax, rbx

; 178  : }

  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5b		 pop	 rbx
  00061	c3		 ret	 0
$LN1@stringlib_@25:

; 174  : #endif
; 175  :     }
; 176  : 
; 177  :     return pad(self, width - STRINGLIB_LEN(self), 0, fillchar);

  00062	44 0f b6 4c 24
	40		 movzx	 r9d, BYTE PTR fillchar$[rsp]
  00068	48 2b d0	 sub	 rdx, rax
  0006b	45 33 c0	 xor	 r8d, r8d
  0006e	48 8b cb	 mov	 rcx, rbx
  00071	e8 00 00 00 00	 call	 pad

; 178  : }

  00076	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007a	5b		 pop	 rbx
  0007b	c3		 ret	 0
stringlib_rjust ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@HIGBEACG@n?$HMc?3center?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringlib_center DD imagerel stringlib_center
	DD	imagerel stringlib_center+153
	DD	imagerel $unwind$stringlib_center
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_center DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0L@HIGBEACG@n?$HMc?3center?$AA@
CONST	SEGMENT
??_C@_0L@HIGBEACG@n?$HMc?3center?$AA@ DB 'n|c:center', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringlib_center
_TEXT	SEGMENT
self$ = 48
args$ = 56
fillchar$ = 64
width$ = 72
stringlib_center PROC					; COMDAT

; 189  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 190  :     Py_ssize_t marg, left;
; 191  :     Py_ssize_t width;
; 192  :     char fillchar = ' ';
; 193  : 
; 194  :     if (!PyArg_ParseTuple(args, "n|c:center", &width, &fillchar))

  0000c	4c 8d 4c 24 40	 lea	 r9, QWORD PTR fillchar$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@HIGBEACG@n?$HMc?3center?$AA@
  00018	4c 8d 44 24 48	 lea	 r8, QWORD PTR width$[rsp]
  0001d	48 8b c8	 mov	 rcx, rax
  00020	c6 44 24 40 20	 mov	 BYTE PTR fillchar$[rsp], 32 ; 00000020H
  00025	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0002a	85 c0		 test	 eax, eax
  0002c	75 08		 jne	 SHORT $LN2@stringlib_@26

; 195  :         return NULL;

  0002e	33 c0		 xor	 eax, eax

; 212  : }

  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5b		 pop	 rbx
  00035	c3		 ret	 0
$LN2@stringlib_@26:

; 196  : 
; 197  :     if (STRINGLIB_LEN(self) >= width && STRINGLIB_CHECK_EXACT(self)) {

  00036	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0003a	48 8b 44 24 48	 mov	 rax, QWORD PTR width$[rsp]
  0003f	48 3b c8	 cmp	 rcx, rax
  00042	7c 1e		 jl	 SHORT $LN1@stringlib_@26
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyBytes_Type
  0004b	48 39 53 58	 cmp	 QWORD PTR [rbx+88], rdx
  0004f	75 11		 jne	 SHORT $LN1@stringlib_@26

; 198  : #if STRINGLIB_MUTABLE
; 199  :         /* We're defined as returning a copy;  If the object is mutable
; 200  :          * that means we must make an identical copy. */
; 201  :         return STRINGLIB_NEW(STRINGLIB_STR(self), STRINGLIB_LEN(self));
; 202  : #else
; 203  :         Py_INCREF(self);

  00051	48 8b cb	 mov	 rcx, rbx
  00054	e8 00 00 00 00	 call	 _Py_IncRef

; 204  :         return (PyObject*) self;

  00059	48 8b c3	 mov	 rax, rbx

; 212  : }

  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5b		 pop	 rbx
  00061	c3		 ret	 0
$LN1@stringlib_@26:

; 205  : #endif
; 206  :     }
; 207  : 
; 208  :     marg = width - STRINGLIB_LEN(self);
; 209  :     left = marg / 2 + (marg & width & 1);
; 210  : 
; 211  :     return pad(self, left, marg - left, fillchar);

  00062	44 0f b6 4c 24
	40		 movzx	 r9d, BYTE PTR fillchar$[rsp]
  00068	4c 8b c0	 mov	 r8, rax
  0006b	4c 2b c1	 sub	 r8, rcx
  0006e	49 8b c8	 mov	 rcx, r8
  00071	48 23 c8	 and	 rcx, rax
  00074	49 8b c0	 mov	 rax, r8
  00077	48 99		 cdq
  00079	83 e1 01	 and	 ecx, 1
  0007c	48 2b c2	 sub	 rax, rdx
  0007f	48 d1 f8	 sar	 rax, 1
  00082	48 03 c8	 add	 rcx, rax
  00085	4c 2b c1	 sub	 r8, rcx
  00088	48 8b d1	 mov	 rdx, rcx
  0008b	48 8b cb	 mov	 rcx, rbx
  0008e	e8 00 00 00 00	 call	 pad

; 212  : }

  00093	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00097	5b		 pop	 rbx
  00098	c3		 ret	 0
stringlib_center ENDP
_TEXT	ENDS
PUBLIC	??_C@_07CBMPGKCP@n?3zfill?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringlib_zfill DD imagerel stringlib_zfill
	DD	imagerel stringlib_zfill+48
	DD	imagerel $unwind$stringlib_zfill
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$stringlib_zfill DD imagerel stringlib_zfill+48
	DD	imagerel stringlib_zfill+98
	DD	imagerel $chain$0$stringlib_zfill
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$stringlib_zfill DD imagerel stringlib_zfill+98
	DD	imagerel stringlib_zfill+121
	DD	imagerel $chain$2$stringlib_zfill
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$stringlib_zfill DD imagerel stringlib_zfill+121
	DD	imagerel stringlib_zfill+157
	DD	imagerel $chain$4$stringlib_zfill
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$stringlib_zfill DD imagerel stringlib_zfill+157
	DD	imagerel stringlib_zfill+191
	DD	imagerel $chain$6$stringlib_zfill
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$stringlib_zfill DD 020021H
	DD	067400H
	DD	imagerel stringlib_zfill
	DD	imagerel stringlib_zfill+48
	DD	imagerel $unwind$stringlib_zfill
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$stringlib_zfill DD 020021H
	DD	067400H
	DD	imagerel stringlib_zfill
	DD	imagerel stringlib_zfill+48
	DD	imagerel $unwind$stringlib_zfill
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$stringlib_zfill DD 020021H
	DD	067400H
	DD	imagerel stringlib_zfill
	DD	imagerel stringlib_zfill+48
	DD	imagerel $unwind$stringlib_zfill
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$stringlib_zfill DD 020521H
	DD	067405H
	DD	imagerel stringlib_zfill
	DD	imagerel stringlib_zfill+48
	DD	imagerel $unwind$stringlib_zfill
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringlib_zfill DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_07CBMPGKCP@n?3zfill?$AA@
CONST	SEGMENT
??_C@_07CBMPGKCP@n?3zfill?$AA@ DB 'n:zfill', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringlib_zfill
_TEXT	SEGMENT
self$ = 48
args$ = 56
width$ = 64
stringlib_zfill PROC					; COMDAT

; 222  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 223  :     Py_ssize_t fill;
; 224  :     PyObject *s;
; 225  :     char *p;
; 226  :     Py_ssize_t width;
; 227  : 
; 228  :     if (!PyArg_ParseTuple(args, "n:zfill", &width))

  0000c	4c 8d 44 24 40	 lea	 r8, QWORD PTR width$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07CBMPGKCP@n?3zfill?$AA@
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00020	85 c0		 test	 eax, eax
  00022	75 08		 jne	 SHORT $LN7@stringlib_@27

; 229  :         return NULL;

  00024	33 c0		 xor	 eax, eax

; 261  :     }
; 262  : 
; 263  :     return (PyObject*) s;
; 264  : }

  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5b		 pop	 rbx
  0002b	c3		 ret	 0
$LN7@stringlib_@27:

; 230  : 
; 231  :     if (STRINGLIB_LEN(self) >= width) {

  0002c	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00030	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00035	48 8b 7c 24 40	 mov	 rdi, QWORD PTR width$[rsp]
  0003a	48 3b c7	 cmp	 rax, rdi
  0003d	7c 3a		 jl	 SHORT $LN4@stringlib_@27

; 232  :         if (STRINGLIB_CHECK_EXACT(self)) {

  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBytes_Type
  00046	48 39 4b 58	 cmp	 QWORD PTR [rbx+88], rcx
  0004a	75 16		 jne	 SHORT $LN5@stringlib_@27

; 233  : #if STRINGLIB_MUTABLE
; 234  :             /* We're defined as returning a copy;  If the object is mutable
; 235  :              * that means we must make an identical copy. */
; 236  :             return STRINGLIB_NEW(STRINGLIB_STR(self), STRINGLIB_LEN(self));
; 237  : #else
; 238  :             Py_INCREF(self);

  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	e8 00 00 00 00	 call	 _Py_IncRef
  00054	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 239  :             return (PyObject*) self;

  00059	48 8b c3	 mov	 rax, rbx

; 261  :     }
; 262  : 
; 263  :     return (PyObject*) s;
; 264  : }

  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5b		 pop	 rbx
  00061	c3		 ret	 0
$LN5@stringlib_@27:

; 240  : #endif
; 241  :         }
; 242  :         else
; 243  :             return STRINGLIB_NEW(
; 244  :                 STRINGLIB_STR(self),
; 245  :                 STRINGLIB_LEN(self)
; 246  :             );

  00062	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  00066	48 8b d0	 mov	 rdx, rax
  00069	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0006e	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 261  :     }
; 262  : 
; 263  :     return (PyObject*) s;
; 264  : }

  00073	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00077	5b		 pop	 rbx
  00078	c3		 ret	 0
$LN4@stringlib_@27:

; 247  :     }
; 248  : 
; 249  :     fill = width - STRINGLIB_LEN(self);

  00079	48 2b f8	 sub	 rdi, rax

; 250  : 
; 251  :     s = pad(self, fill, 0, '0');

  0007c	41 b1 30	 mov	 r9b, 48			; 00000030H
  0007f	45 33 c0	 xor	 r8d, r8d
  00082	48 8b d7	 mov	 rdx, rdi
  00085	48 8b cb	 mov	 rcx, rbx
  00088	e8 00 00 00 00	 call	 pad

; 252  : 
; 253  :     if (s == NULL)

  0008d	48 85 c0	 test	 rax, rax
  00090	75 0b		 jne	 SHORT $LN3@stringlib_@27
  00092	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 261  :     }
; 262  : 
; 263  :     return (PyObject*) s;
; 264  : }

  00097	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009b	5b		 pop	 rbx
  0009c	c3		 ret	 0
$LN3@stringlib_@27:

; 254  :         return NULL;
; 255  : 
; 256  :     p = STRINGLIB_STR(s);
; 257  :     if (p[fill] == '+' || p[fill] == '-') {

  0009d	0f b6 4c 38 78	 movzx	 ecx, BYTE PTR [rax+rdi+120]
  000a2	80 f9 2b	 cmp	 cl, 43			; 0000002bH
  000a5	74 05		 je	 SHORT $LN1@stringlib_@27
  000a7	80 f9 2d	 cmp	 cl, 45			; 0000002dH
  000aa	75 08		 jne	 SHORT $LN2@stringlib_@27
$LN1@stringlib_@27:

; 258  :         /* move sign to beginning of string */
; 259  :         p[0] = p[fill];

  000ac	88 48 78	 mov	 BYTE PTR [rax+120], cl

; 260  :         p[fill] = '0';

  000af	c6 44 38 78 30	 mov	 BYTE PTR [rax+rdi+120], 48 ; 00000030H
$LN2@stringlib_@27:
  000b4	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 261  :     }
; 262  : 
; 263  :     return (PyObject*) s;
; 264  : }

  000b9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bd	5b		 pop	 rbx
  000be	c3		 ret	 0
stringlib_zfill ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@HHFIJLJJ@bytes?5object?5is?5too?5large?5to?5mak@ ; `string'
PUBLIC	PyBytes_Repr
EXTRN	Py_hexdigits:QWORD
EXTRN	PyUnicode_New:PROC
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\objects\bytesobject.c
pdata	SEGMENT
$pdata$PyBytes_Repr DD imagerel $LN46
	DD	imagerel $LN46+588
	DD	imagerel $unwind$PyBytes_Repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyBytes_Repr DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0d0143218H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_0CH@HHFIJLJJ@bytes?5object?5is?5too?5large?5to?5mak@
CONST	SEGMENT
??_C@_0CH@HHFIJLJJ@bytes?5object?5is?5too?5large?5to?5mak@ DB 'bytes obje'
	DB	'ct is too large to make repr', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyBytes_Repr
_TEXT	SEGMENT
obj$ = 64
smartquotes$ = 72
PyBytes_Repr PROC					; COMDAT

; 594  : {

$LN46:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 595  :     register PyBytesObject* op = (PyBytesObject*) obj;
; 596  :     Py_ssize_t i, length = Py_SIZE(op);

  00018	48 8b 69 60	 mov	 rbp, QWORD PTR [rcx+96]

; 597  :     size_t newsize, squotes, dquotes;
; 598  :     PyObject *v;
; 599  :     unsigned char quote, *s, *p;
; 600  : 
; 601  :     /* Compute size of output string */
; 602  :     squotes = dquotes = 0;

  0001c	33 db		 xor	 ebx, ebx
  0001e	44 8b e2	 mov	 r12d, edx
  00021	8b f3		 mov	 esi, ebx
  00023	44 8b db	 mov	 r11d, ebx

; 603  :     newsize = 3; /* b'' */

  00026	44 8d 43 03	 lea	 r8d, QWORD PTR [rbx+3]

; 604  :     s = (unsigned char*)op->ob_sval;

  0002a	4c 8d 69 78	 lea	 r13, QWORD PTR [rcx+120]

; 605  :     for (i = 0; i < length; i++) {

  0002e	48 85 ed	 test	 rbp, rbp
  00031	7e 60		 jle	 SHORT $LN29@PyBytes_Re

; 595  :     register PyBytesObject* op = (PyBytesObject*) obj;
; 596  :     Py_ssize_t i, length = Py_SIZE(op);

  00033	4d 8b cd	 mov	 r9, r13
  00036	4c 8b d5	 mov	 r10, rbp
  00039	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:__ImageBase
$LL31@PyBytes_Re:

; 606  :         switch(s[i]) {

  00040	41 0f b6 11	 movzx	 edx, BYTE PTR [r9]
  00044	8d 42 f7	 lea	 eax, DWORD PTR [rdx-9]
  00047	83 f8 53	 cmp	 eax, 83			; 00000053H
  0004a	77 2c		 ja	 SHORT $LN23@PyBytes_Re
  0004c	48 98		 cdqe
  0004e	0f b6 84 07 00
	00 00 00	 movzx	 eax, BYTE PTR $LN42@PyBytes_Re[rdi+rax]
  00056	8b 8c 87 00 00
	00 00		 mov	 ecx, DWORD PTR $LN43@PyBytes_Re[rdi+rax*4]
  0005d	48 03 cf	 add	 rcx, rdi
  00060	ff e1		 jmp	 rcx
$LN26@PyBytes_Re:

; 607  :         case '\'': squotes++; newsize++; break;

  00062	49 ff c3	 inc	 r11
  00065	49 ff c0	 inc	 r8
  00068	eb 21		 jmp	 SHORT $LN30@PyBytes_Re
$LN25@PyBytes_Re:

; 608  :         case '"':  dquotes++; newsize++; break;

  0006a	48 ff c6	 inc	 rsi
  0006d	49 ff c0	 inc	 r8
  00070	eb 19		 jmp	 SHORT $LN30@PyBytes_Re
$LN24@PyBytes_Re:

; 609  :         case '\\': case '\t': case '\n': case '\r':
; 610  :             newsize += 2; break; /* \C */

  00072	49 83 c0 02	 add	 r8, 2
  00076	eb 13		 jmp	 SHORT $LN30@PyBytes_Re
$LN23@PyBytes_Re:

; 611  :         default:
; 612  :             if (s[i] < ' ' || s[i] >= 0x7f)

  00078	80 fa 20	 cmp	 dl, 32			; 00000020H
  0007b	72 0a		 jb	 SHORT $LN21@PyBytes_Re
  0007d	80 fa 7f	 cmp	 dl, 127			; 0000007fH
  00080	73 05		 jae	 SHORT $LN21@PyBytes_Re

; 614  :             else
; 615  :                 newsize++;

  00082	49 ff c0	 inc	 r8
  00085	eb 04		 jmp	 SHORT $LN30@PyBytes_Re
$LN21@PyBytes_Re:

; 613  :                 newsize += 4; /* \xHH */

  00087	49 83 c0 04	 add	 r8, 4
$LN30@PyBytes_Re:

; 605  :     for (i = 0; i < length; i++) {

  0008b	49 ff c1	 inc	 r9
  0008e	49 ff ca	 dec	 r10
  00091	75 ad		 jne	 SHORT $LL31@PyBytes_Re
$LN29@PyBytes_Re:

; 616  :         }
; 617  :     }
; 618  :     quote = '\'';

  00093	40 b7 27	 mov	 dil, 39			; 00000027H

; 619  :     if (smartquotes && squotes && !dquotes)

  00096	45 85 e4	 test	 r12d, r12d
  00099	74 14		 je	 SHORT $LN19@PyBytes_Re
  0009b	4d 85 db	 test	 r11, r11
  0009e	74 1d		 je	 SHORT $LN18@PyBytes_Re
  000a0	40 0f b6 ff	 movzx	 edi, dil
  000a4	b8 22 00 00 00	 mov	 eax, 34			; 00000022H
  000a9	48 85 f6	 test	 rsi, rsi
  000ac	0f 44 f8	 cmove	 edi, eax
$LN19@PyBytes_Re:

; 620  :         quote = '"';
; 621  :     if (squotes && quote == '\'')

  000af	4d 85 db	 test	 r11, r11
  000b2	74 09		 je	 SHORT $LN18@PyBytes_Re
  000b4	40 80 ff 27	 cmp	 dil, 39			; 00000027H
  000b8	75 03		 jne	 SHORT $LN18@PyBytes_Re

; 622  :         newsize += squotes;

  000ba	4d 03 c3	 add	 r8, r11
$LN18@PyBytes_Re:

; 623  : 
; 624  :     if (newsize > (PY_SSIZE_T_MAX - sizeof(PyUnicodeObject) - 1)) {

  000bd	48 b8 4e ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775630 ; 7fffffffffffff4eH
  000c7	4c 3b c0	 cmp	 r8, rax
  000ca	76 1a		 jbe	 SHORT $LN17@PyBytes_Re

; 625  :         PyErr_SetString(PyExc_OverflowError,
; 626  :             "bytes object is too large to make repr");

  000cc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@HHFIJLJJ@bytes?5object?5is?5too?5large?5to?5mak@
  000da	e8 00 00 00 00	 call	 PyErr_SetString
$LN45@PyBytes_Re:

; 627  :         return NULL;

  000df	33 c0		 xor	 eax, eax
  000e1	e9 e8 00 00 00	 jmp	 $LN32@PyBytes_Re
$LN17@PyBytes_Re:

; 628  :     }
; 629  : 
; 630  :     v = PyUnicode_New(newsize, 127);

  000e6	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  000eb	49 8b c8	 mov	 rcx, r8
  000ee	e8 00 00 00 00	 call	 PyUnicode_New
  000f3	4c 8b d8	 mov	 r11, rax

; 631  :     if (v == NULL) {

  000f6	48 85 c0	 test	 rax, rax

; 632  :         return NULL;

  000f9	74 e4		 je	 SHORT $LN45@PyBytes_Re

; 633  :     }
; 634  :     p = PyUnicode_1BYTE_DATA(v);

  000fb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000fe	a8 20		 test	 al, 32			; 00000020H
  00100	74 16		 je	 SHORT $LN36@PyBytes_Re
  00102	a8 40		 test	 al, 64			; 00000040H
  00104	74 09		 je	 SHORT $LN34@PyBytes_Re
  00106	4d 8d 83 80 00
	00 00		 lea	 r8, QWORD PTR [r11+128]
  0010d	eb 10		 jmp	 SHORT $LN37@PyBytes_Re
$LN34@PyBytes_Re:
  0010f	4d 8d 83 a0 00
	00 00		 lea	 r8, QWORD PTR [r11+160]
  00116	eb 07		 jmp	 SHORT $LN37@PyBytes_Re
$LN36@PyBytes_Re:
  00118	4d 8b 83 a0 00
	00 00		 mov	 r8, QWORD PTR [r11+160]
$LN37@PyBytes_Re:

; 635  : 
; 636  :     *p++ = 'b', *p++ = quote;

  0011f	41 c6 00 62	 mov	 BYTE PTR [r8], 98	; 00000062H
  00123	41 88 78 01	 mov	 BYTE PTR [r8+1], dil
  00127	49 83 c0 02	 add	 r8, 2

; 637  :     for (i = 0; i < length; i++) {

  0012b	48 85 ed	 test	 rbp, rbp
  0012e	0f 8e 94 00 00
	00		 jle	 $LN13@PyBytes_Re
$LL15@PyBytes_Re:

; 638  :         unsigned char c = op->ob_sval[i];

  00134	41 0f b6 4c 1d
	00		 movzx	 ecx, BYTE PTR [r13+rbx]

; 639  :         if (c == quote || c == '\\')

  0013a	40 3a cf	 cmp	 cl, dil
  0013d	74 71		 je	 SHORT $LN11@PyBytes_Re
  0013f	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00142	74 6c		 je	 SHORT $LN11@PyBytes_Re

; 641  :         else if (c == '\t')

  00144	80 f9 09	 cmp	 cl, 9
  00147	75 08		 jne	 SHORT $LN9@PyBytes_Re

; 642  :             *p++ = '\\', *p++ = 't';

  00149	66 41 c7 00 5c
	74		 mov	 WORD PTR [r8], 29788	; 0000745cH
  0014f	eb 67		 jmp	 SHORT $LN44@PyBytes_Re
$LN9@PyBytes_Re:

; 643  :         else if (c == '\n')

  00151	80 f9 0a	 cmp	 cl, 10
  00154	75 08		 jne	 SHORT $LN7@PyBytes_Re

; 644  :             *p++ = '\\', *p++ = 'n';

  00156	66 41 c7 00 5c
	6e		 mov	 WORD PTR [r8], 28252	; 00006e5cH
  0015c	eb 5a		 jmp	 SHORT $LN44@PyBytes_Re
$LN7@PyBytes_Re:

; 645  :         else if (c == '\r')

  0015e	80 f9 0d	 cmp	 cl, 13
  00161	75 08		 jne	 SHORT $LN5@PyBytes_Re

; 646  :             *p++ = '\\', *p++ = 'r';

  00163	66 41 c7 00 5c
	72		 mov	 WORD PTR [r8], 29276	; 0000725cH
  00169	eb 4d		 jmp	 SHORT $LN44@PyBytes_Re
$LN5@PyBytes_Re:

; 647  :         else if (c < ' ' || c >= 0x7f) {

  0016b	8d 41 e0	 lea	 eax, DWORD PTR [rcx-32]
  0016e	3c 5e		 cmp	 al, 94			; 0000005eH
  00170	77 08		 ja	 SHORT $LN2@PyBytes_Re

; 654  :             *p++ = c;

  00172	41 88 08	 mov	 BYTE PTR [r8], cl
  00175	49 ff c0	 inc	 r8
  00178	eb 42		 jmp	 SHORT $LN14@PyBytes_Re
$LN2@PyBytes_Re:

; 648  :             *p++ = '\\';

  0017a	66 41 c7 00 5c
	78		 mov	 WORD PTR [r8], 30812	; 0000785cH

; 649  :             *p++ = 'x';
; 650  :             *p++ = Py_hexdigits[(c & 0xf0) >> 4];

  00180	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Py_hexdigits
  00187	0f b6 d1	 movzx	 edx, cl
  0018a	8b ca		 mov	 ecx, edx

; 651  :             *p++ = Py_hexdigits[c & 0xf];

  0018c	83 e2 0f	 and	 edx, 15
  0018f	48 c1 e9 04	 shr	 rcx, 4
  00193	49 83 c0 04	 add	 r8, 4
  00197	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  0019b	41 88 48 fe	 mov	 BYTE PTR [r8-2], cl
  0019f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Py_hexdigits
  001a6	0f b6 0c 02	 movzx	 ecx, BYTE PTR [rdx+rax]
  001aa	41 88 48 ff	 mov	 BYTE PTR [r8-1], cl

; 652  :         }
; 653  :         else

  001ae	eb 0c		 jmp	 SHORT $LN14@PyBytes_Re
$LN11@PyBytes_Re:

; 640  :             *p++ = '\\', *p++ = c;

  001b0	41 c6 00 5c	 mov	 BYTE PTR [r8], 92	; 0000005cH
  001b4	41 88 48 01	 mov	 BYTE PTR [r8+1], cl
$LN44@PyBytes_Re:
  001b8	49 83 c0 02	 add	 r8, 2
$LN14@PyBytes_Re:

; 637  :     for (i = 0; i < length; i++) {

  001bc	48 ff c3	 inc	 rbx
  001bf	48 3b dd	 cmp	 rbx, rbp
  001c2	0f 8c 6c ff ff
	ff		 jl	 $LL15@PyBytes_Re
$LN13@PyBytes_Re:

; 655  :     }
; 656  :     *p++ = quote;

  001c8	41 88 38	 mov	 BYTE PTR [r8], dil

; 657  :     assert(_PyUnicode_CheckConsistency(v, 1));
; 658  :     return v;

  001cb	49 8b c3	 mov	 rax, r11
$LN32@PyBytes_Re:

; 659  : }

  001ce	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001d3	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  001d8	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  001dd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001e1	41 5d		 pop	 r13
  001e3	41 5c		 pop	 r12
  001e5	5f		 pop	 rdi
  001e6	c3		 ret	 0
  001e7	90		 npad	 1
$LN43@PyBytes_Re:
  001e8	00 00 00 00	 DD	 $LN24@PyBytes_Re
  001ec	00 00 00 00	 DD	 $LN25@PyBytes_Re
  001f0	00 00 00 00	 DD	 $LN26@PyBytes_Re
  001f4	00 00 00 00	 DD	 $LN23@PyBytes_Re
$LN42@PyBytes_Re:
  001f8	00		 DB	 0
  001f9	00		 DB	 0
  001fa	03		 DB	 3
  001fb	03		 DB	 3
  001fc	00		 DB	 0
  001fd	03		 DB	 3
  001fe	03		 DB	 3
  001ff	03		 DB	 3
  00200	03		 DB	 3
  00201	03		 DB	 3
  00202	03		 DB	 3
  00203	03		 DB	 3
  00204	03		 DB	 3
  00205	03		 DB	 3
  00206	03		 DB	 3
  00207	03		 DB	 3
  00208	03		 DB	 3
  00209	03		 DB	 3
  0020a	03		 DB	 3
  0020b	03		 DB	 3
  0020c	03		 DB	 3
  0020d	03		 DB	 3
  0020e	03		 DB	 3
  0020f	03		 DB	 3
  00210	03		 DB	 3
  00211	01		 DB	 1
  00212	03		 DB	 3
  00213	03		 DB	 3
  00214	03		 DB	 3
  00215	03		 DB	 3
  00216	02		 DB	 2
  00217	03		 DB	 3
  00218	03		 DB	 3
  00219	03		 DB	 3
  0021a	03		 DB	 3
  0021b	03		 DB	 3
  0021c	03		 DB	 3
  0021d	03		 DB	 3
  0021e	03		 DB	 3
  0021f	03		 DB	 3
  00220	03		 DB	 3
  00221	03		 DB	 3
  00222	03		 DB	 3
  00223	03		 DB	 3
  00224	03		 DB	 3
  00225	03		 DB	 3
  00226	03		 DB	 3
  00227	03		 DB	 3
  00228	03		 DB	 3
  00229	03		 DB	 3
  0022a	03		 DB	 3
  0022b	03		 DB	 3
  0022c	03		 DB	 3
  0022d	03		 DB	 3
  0022e	03		 DB	 3
  0022f	03		 DB	 3
  00230	03		 DB	 3
  00231	03		 DB	 3
  00232	03		 DB	 3
  00233	03		 DB	 3
  00234	03		 DB	 3
  00235	03		 DB	 3
  00236	03		 DB	 3
  00237	03		 DB	 3
  00238	03		 DB	 3
  00239	03		 DB	 3
  0023a	03		 DB	 3
  0023b	03		 DB	 3
  0023c	03		 DB	 3
  0023d	03		 DB	 3
  0023e	03		 DB	 3
  0023f	03		 DB	 3
  00240	03		 DB	 3
  00241	03		 DB	 3
  00242	03		 DB	 3
  00243	03		 DB	 3
  00244	03		 DB	 3
  00245	03		 DB	 3
  00246	03		 DB	 3
  00247	03		 DB	 3
  00248	03		 DB	 3
  00249	03		 DB	 3
  0024a	03		 DB	 3
  0024b	00		 DB	 0
PyBytes_Repr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bytes_repr
_TEXT	SEGMENT
op$ = 8
bytes_repr PROC						; COMDAT

; 664  :     return PyBytes_Repr(op, 1);

  00000	ba 01 00 00 00	 mov	 edx, 1

; 665  : }

  00005	e9 00 00 00 00	 jmp	 PyBytes_Repr
bytes_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@CNFIHAHP@str?$CI?$CJ?5on?5a?5bytes?5instance?$AA@ ; `string'
EXTRN	PyErr_WarnEx:PROC
EXTRN	PyExc_BytesWarning:QWORD
EXTRN	Py_BytesWarningFlag:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_str DD imagerel bytes_str
	DD	imagerel bytes_str+68
	DD	imagerel $unwind$bytes_str
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_str DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0BK@CNFIHAHP@str?$CI?$CJ?5on?5a?5bytes?5instance?$AA@
CONST	SEGMENT
??_C@_0BK@CNFIHAHP@str?$CI?$CJ?5on?5a?5bytes?5instance?$AA@ DB 'str() on '
	DB	'a bytes instance', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bytes_str
_TEXT	SEGMENT
op$ = 48
bytes_str PROC						; COMDAT

; 669  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 670  :     if (Py_BytesWarningFlag) {

  00006	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_BytesWarningFlag, 0
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	74 25		 je	 SHORT $LN1@bytes_str

; 671  :         if (PyErr_WarnEx(PyExc_BytesWarning,
; 672  :                          "str() on a bytes instance", 1))

  00012	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BytesWarning
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@CNFIHAHP@str?$CI?$CJ?5on?5a?5bytes?5instance?$AA@
  00020	41 b8 01 00 00
	00		 mov	 r8d, 1
  00026	e8 00 00 00 00	 call	 PyErr_WarnEx
  0002b	85 c0		 test	 eax, eax
  0002d	74 08		 je	 SHORT $LN1@bytes_str

; 673  :             return NULL;

  0002f	33 c0		 xor	 eax, eax

; 676  : }

  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5b		 pop	 rbx
  00036	c3		 ret	 0
$LN1@bytes_str:

; 674  :     }
; 675  :     return bytes_repr(op);

  00037	48 8b cb	 mov	 rcx, rbx

; 676  : }

  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5b		 pop	 rbx
  0003f	e9 00 00 00 00	 jmp	 bytes_repr
bytes_str ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bytes_length
_TEXT	SEGMENT
a$ = 8
bytes_length PROC					; COMDAT

; 681  :     return Py_SIZE(a);

  00000	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]

; 682  : }

  00004	c3		 ret	 0
bytes_length ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@KJMEMNEM@can?8t?5concat?5?$CF?4100s?5to?5?$CF?4100s?$AA@ ; `string'
EXTRN	PyBuffer_Release:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_concat DD imagerel bytes_concat
	DD	imagerel bytes_concat+337
	DD	imagerel $unwind$bytes_concat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_concat DD 071201H
	DD	01b6412H
	DD	01a3412H
	DD	0180112H
	DD	0700bH
xdata	ENDS
;	COMDAT ??_C@_0BO@KJMEMNEM@can?8t?5concat?5?$CF?4100s?5to?5?$CF?4100s?$AA@
CONST	SEGMENT
??_C@_0BO@KJMEMNEM@can?8t?5concat?5?$CF?4100s?5to?5?$CF?4100s?$AA@ DB 'ca'
	DB	'n''t concat %.100s to %.100s', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bytes_concat
_TEXT	SEGMENT
va$ = 32
vb$ = 112
a$ = 208
b$ = 216
bytes_concat PROC					; COMDAT

; 687  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00012	48 8b fa	 mov	 rdi, rdx

; 688  :     Py_ssize_t size;
; 689  :     Py_buffer va, vb;
; 690  :     PyObject *result = NULL;
; 691  : 
; 692  :     va.len = -1;
; 693  :     vb.len = -1;
; 694  :     if (_getbuffer(a, &va) < 0  ||
; 695  :         _getbuffer(b, &vb) < 0) {

  00015	48 8d 54 24 20	 lea	 rdx, QWORD PTR va$[rsp]
  0001a	48 8b f1	 mov	 rsi, rcx
  0001d	33 db		 xor	 ebx, ebx
  0001f	48 c7 44 24 30
	ff ff ff ff	 mov	 QWORD PTR va$[rsp+16], -1
  00028	48 c7 84 24 80
	00 00 00 ff ff
	ff ff		 mov	 QWORD PTR vb$[rsp+16], -1
  00034	e8 00 00 00 00	 call	 _getbuffer
  00039	48 85 c0	 test	 rax, rax
  0003c	0f 88 ad 00 00
	00		 js	 $LN7@bytes_conc
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR vb$[rsp]
  00047	48 8b cf	 mov	 rcx, rdi
  0004a	e8 00 00 00 00	 call	 _getbuffer
  0004f	48 85 c0	 test	 rax, rax
  00052	0f 88 97 00 00
	00		 js	 $LN7@bytes_conc

; 698  :         goto done;
; 699  :     }
; 700  : 
; 701  :     /* Optimize end cases */
; 702  :     if (va.len == 0 && PyBytes_CheckExact(b)) {

  00058	48 8b 4c 24 30	 mov	 rcx, QWORD PTR va$[rsp+16]
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyBytes_Type
  00064	48 85 c9	 test	 rcx, rcx
  00067	75 16		 jne	 SHORT $LN6@bytes_conc
  00069	48 39 57 58	 cmp	 QWORD PTR [rdi+88], rdx
  0006d	75 10		 jne	 SHORT $LN6@bytes_conc

; 703  :         result = b;
; 704  :         Py_INCREF(result);

  0006f	48 8b cf	 mov	 rcx, rdi
  00072	48 8b df	 mov	 rbx, rdi
  00075	e8 00 00 00 00	 call	 _Py_IncRef

; 705  :         goto done;

  0007a	e9 93 00 00 00	 jmp	 $done$22066
$LN6@bytes_conc:

; 706  :     }
; 707  :     if (vb.len == 0 && PyBytes_CheckExact(a)) {

  0007f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR vb$[rsp+16]
  00087	48 85 c0	 test	 rax, rax
  0008a	75 13		 jne	 SHORT $LN5@bytes_conc
  0008c	48 39 56 58	 cmp	 QWORD PTR [rsi+88], rdx
  00090	75 0d		 jne	 SHORT $LN5@bytes_conc

; 708  :         result = a;
; 709  :         Py_INCREF(result);

  00092	48 8b ce	 mov	 rcx, rsi
  00095	48 8b de	 mov	 rbx, rsi
  00098	e8 00 00 00 00	 call	 _Py_IncRef

; 710  :         goto done;

  0009d	eb 73		 jmp	 SHORT $done$22066
$LN5@bytes_conc:

; 711  :     }
; 712  : 
; 713  :     size = va.len + vb.len;

  0009f	48 8d 14 08	 lea	 rdx, QWORD PTR [rax+rcx]

; 714  :     if (size < 0) {

  000a3	48 85 d2	 test	 rdx, rdx
  000a6	79 07		 jns	 SHORT $LN4@bytes_conc

; 715  :         PyErr_NoMemory();

  000a8	e8 00 00 00 00	 call	 PyErr_NoMemory

; 716  :         goto done;

  000ad	eb 63		 jmp	 SHORT $done$22066
$LN4@bytes_conc:

; 717  :     }
; 718  : 
; 719  :     result = PyBytes_FromStringAndSize(NULL, size);

  000af	33 c9		 xor	 ecx, ecx
  000b1	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000b6	48 8b d8	 mov	 rbx, rax

; 720  :     if (result != NULL) {

  000b9	48 85 c0	 test	 rax, rax
  000bc	74 54		 je	 SHORT $done$22066

; 721  :         memcpy(PyBytes_AS_STRING(result), va.buf, va.len);

  000be	4c 8b 44 24 30	 mov	 r8, QWORD PTR va$[rsp+16]
  000c3	48 8b 54 24 20	 mov	 rdx, QWORD PTR va$[rsp]
  000c8	48 8d 48 78	 lea	 rcx, QWORD PTR [rax+120]
  000cc	e8 00 00 00 00	 call	 memcpy

; 722  :         memcpy(PyBytes_AS_STRING(result) + va.len, vb.buf, vb.len);

  000d1	4c 8b 5c 24 30	 mov	 r11, QWORD PTR va$[rsp+16]
  000d6	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR vb$[rsp+16]
  000de	48 8b 54 24 70	 mov	 rdx, QWORD PTR vb$[rsp]
  000e3	49 8d 4c 1b 78	 lea	 rcx, QWORD PTR [r11+rbx+120]
  000e8	e8 00 00 00 00	 call	 memcpy
  000ed	eb 23		 jmp	 SHORT $done$22066
$LN7@bytes_conc:

; 696  :         PyErr_Format(PyExc_TypeError, "can't concat %.100s to %.100s",
; 697  :                      Py_TYPE(a)->tp_name, Py_TYPE(b)->tp_name);

  000ef	4c 8b 4f 58	 mov	 r9, QWORD PTR [rdi+88]
  000f3	4c 8b 46 58	 mov	 r8, QWORD PTR [rsi+88]
  000f7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000fe	4d 8b 49 70	 mov	 r9, QWORD PTR [r9+112]
  00102	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00106	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@KJMEMNEM@can?8t?5concat?5?$CF?4100s?5to?5?$CF?4100s?$AA@
  0010d	e8 00 00 00 00	 call	 PyErr_Format
$done$22066:

; 723  :     }
; 724  : 
; 725  :   done:
; 726  :     if (va.len != -1)

  00112	48 83 7c 24 30
	ff		 cmp	 QWORD PTR va$[rsp+16], -1
  00118	74 0a		 je	 SHORT $LN2@bytes_conc

; 727  :         PyBuffer_Release(&va);

  0011a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR va$[rsp]
  0011f	e8 00 00 00 00	 call	 PyBuffer_Release
$LN2@bytes_conc:

; 728  :     if (vb.len != -1)

  00124	48 83 bc 24 80
	00 00 00 ff	 cmp	 QWORD PTR vb$[rsp+16], -1
  0012d	74 0a		 je	 SHORT $LN11@bytes_conc

; 729  :         PyBuffer_Release(&vb);

  0012f	48 8d 4c 24 70	 lea	 rcx, QWORD PTR vb$[rsp]
  00134	e8 00 00 00 00	 call	 PyBuffer_Release
$LN11@bytes_conc:

; 730  :     return result;
; 731  : }

  00139	4c 8d 9c 24 c0
	00 00 00	 lea	 r11, QWORD PTR [rsp+192]
  00141	48 8b c3	 mov	 rax, rbx
  00144	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  00148	49 8b 73 18	 mov	 rsi, QWORD PTR [r11+24]
  0014c	49 8b e3	 mov	 rsp, r11
  0014f	5f		 pop	 rdi
  00150	c3		 ret	 0
bytes_concat ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@PIBCFLKK@repeated?5bytes?5are?5too?5long?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_repeat DD imagerel bytes_repeat
	DD	imagerel bytes_repeat+27
	DD	imagerel $unwind$bytes_repeat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$bytes_repeat DD imagerel bytes_repeat+27
	DD	imagerel bytes_repeat+75
	DD	imagerel $chain$1$bytes_repeat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$bytes_repeat DD imagerel bytes_repeat+75
	DD	imagerel bytes_repeat+130
	DD	imagerel $chain$2$bytes_repeat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$bytes_repeat DD imagerel bytes_repeat+130
	DD	imagerel bytes_repeat+165
	DD	imagerel $chain$3$bytes_repeat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$bytes_repeat DD imagerel bytes_repeat+165
	DD	imagerel bytes_repeat+448
	DD	imagerel $chain$4$bytes_repeat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$bytes_repeat DD imagerel bytes_repeat+448
	DD	imagerel bytes_repeat+469
	DD	imagerel $chain$5$bytes_repeat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$bytes_repeat DD 021H
	DD	imagerel bytes_repeat+130
	DD	imagerel bytes_repeat+165
	DD	imagerel $chain$3$bytes_repeat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$bytes_repeat DD 020521H
	DD	08c405H
	DD	imagerel bytes_repeat+130
	DD	imagerel bytes_repeat+165
	DD	imagerel $chain$3$bytes_repeat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$bytes_repeat DD 040021H
	DD	076400H
	DD	065400H
	DD	imagerel bytes_repeat
	DD	imagerel bytes_repeat+27
	DD	imagerel $unwind$bytes_repeat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$bytes_repeat DD 021H
	DD	imagerel bytes_repeat
	DD	imagerel bytes_repeat+27
	DD	imagerel $unwind$bytes_repeat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$bytes_repeat DD 040a21H
	DD	07640aH
	DD	065405H
	DD	imagerel bytes_repeat
	DD	imagerel bytes_repeat+27
	DD	imagerel $unwind$bytes_repeat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_repeat DD 040a01H
	DD	09340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BM@PIBCFLKK@repeated?5bytes?5are?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BM@PIBCFLKK@repeated?5bytes?5are?5too?5long?$AA@ DB 'repeated byte'
	DB	's are too long', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bytes_repeat
_TEXT	SEGMENT
a$ = 48
n$ = 56
bytes_repeat PROC					; COMDAT

; 735  : {

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 736  :     register Py_ssize_t i;
; 737  :     register Py_ssize_t j;
; 738  :     register Py_ssize_t size;
; 739  :     register PyBytesObject *op;
; 740  :     size_t nbytes;
; 741  :     if (n < 0)

  00010	48 85 d2	 test	 rdx, rdx
  00013	79 36		 jns	 SHORT $LN39@bytes_repe

; 742  :         n = 0;

  00015	33 db		 xor	 ebx, ebx
$LN24@bytes_repe:

; 750  :     }
; 751  :     size = Py_SIZE(a) * n;

  00017	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  0001b	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  00020	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  00025	48 8b f0	 mov	 rsi, rax

; 752  :     if (size == Py_SIZE(a) && PyBytes_CheckExact(a)) {

  00028	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:PyBytes_Type
  0002f	48 0f af f3	 imul	 rsi, rbx
  00033	48 3b f0	 cmp	 rsi, rax
  00036	75 4a		 jne	 SHORT $LN23@bytes_repe
  00038	48 39 69 58	 cmp	 QWORD PTR [rcx+88], rbp
  0003c	75 44		 jne	 SHORT $LN23@bytes_repe

; 753  :         Py_INCREF(a);

  0003e	e8 00 00 00 00	 call	 _Py_IncRef

; 754  :         return (PyObject *)a;

  00043	48 8b c7	 mov	 rax, rdi
  00046	e9 75 01 00 00	 jmp	 $LN37@bytes_repe
$LN39@bytes_repe:

; 743  :     /* watch out for overflows:  the size can overflow int,
; 744  :      * and the # of bytes needed can overflow size_t
; 745  :      */
; 746  :     if (n > 0 && Py_SIZE(a) > PY_SSIZE_T_MAX / n) {

  0004b	7e ca		 jle	 SHORT $LN24@bytes_repe
  0004d	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00057	48 99		 cdq
  00059	48 f7 fb	 idiv	 rbx
  0005c	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  00060	7e b5		 jle	 SHORT $LN24@bytes_repe

; 747  :         PyErr_SetString(PyExc_OverflowError,
; 748  :             "repeated bytes are too long");

  00062	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@PIBCFLKK@repeated?5bytes?5are?5too?5long?$AA@
  00070	e8 00 00 00 00	 call	 PyErr_SetString

; 749  :         return NULL;

  00075	33 c0		 xor	 eax, eax

; 783  : }

  00077	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0007c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00080	5f		 pop	 rdi
  00081	c3		 ret	 0
$LN23@bytes_repe:

; 755  :     }
; 756  :     nbytes = (size_t)size;
; 757  :     if (nbytes + PyBytesObject_SIZE <= nbytes) {

  00082	48 8d 4e 79	 lea	 rcx, QWORD PTR [rsi+121]
  00086	48 3b ce	 cmp	 rcx, rsi
  00089	77 1a		 ja	 SHORT $LN22@bytes_repe

; 758  :         PyErr_SetString(PyExc_OverflowError,
; 759  :             "repeated bytes are too long");

  0008b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00092	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@PIBCFLKK@repeated?5bytes?5are?5too?5long?$AA@
  00099	e8 00 00 00 00	 call	 PyErr_SetString

; 760  :         return NULL;

  0009e	33 c0		 xor	 eax, eax
  000a0	e9 1b 01 00 00	 jmp	 $LN37@bytes_repe
$LN22@bytes_repe:
  000a5	4c 89 64 24 40	 mov	 QWORD PTR [rsp+64], r12

; 761  :     }
; 762  :     op = (PyBytesObject *)PyObject_MALLOC(PyBytesObject_SIZE + nbytes);

  000aa	e8 00 00 00 00	 call	 PyObject_Malloc
  000af	4c 8b e0	 mov	 r12, rax

; 763  :     if (op == NULL)

  000b2	48 85 c0	 test	 rax, rax
  000b5	75 0a		 jne	 SHORT $LN21@bytes_repe

; 764  :         return PyErr_NoMemory();

  000b7	e8 00 00 00 00	 call	 PyErr_NoMemory
  000bc	e9 fa 00 00 00	 jmp	 $LN38@bytes_repe
$LN21@bytes_repe:

; 765  :     PyObject_INIT_VAR((PyVarObject *)op, &PyBytes_Type, size);

  000c1	4c 8b c6	 mov	 r8, rsi
  000c4	48 8b d5	 mov	 rdx, rbp
  000c7	48 8b c8	 mov	 rcx, rax
  000ca	e8 00 00 00 00	 call	 PyObject_INIT_VAR

; 766  :     op->ob_shash = -1;

  000cf	49 c7 44 24 70
	ff ff ff ff	 mov	 QWORD PTR [r12+112], -1

; 767  :     op->ob_sval[size] = '\0';

  000d8	41 c6 44 34 78
	00		 mov	 BYTE PTR [r12+rsi+120], 0

; 768  :     if (Py_SIZE(a) == 1 && n > 0) {

  000de	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  000e2	48 83 fa 01	 cmp	 rdx, 1
  000e6	75 1b		 jne	 SHORT $LN20@bytes_repe
  000e8	48 85 db	 test	 rbx, rbx
  000eb	7e 16		 jle	 SHORT $LN20@bytes_repe

; 769  :         memset(op->ob_sval, a->ob_sval[0] , n);

  000ed	0f be 57 78	 movsx	 edx, BYTE PTR [rdi+120]
  000f1	49 8d 4c 24 78	 lea	 rcx, QWORD PTR [r12+120]
  000f6	4c 8b c3	 mov	 r8, rbx
  000f9	e8 00 00 00 00	 call	 memset

; 770  :         return (PyObject *) op;

  000fe	e9 b5 00 00 00	 jmp	 $LN9@bytes_repe
$LN20@bytes_repe:

; 771  :     }
; 772  :     i = 0;
; 773  :     if (i < size) {

  00103	48 85 f6	 test	 rsi, rsi
  00106	0f 8e ac 00 00
	00		 jle	 $LN9@bytes_repe

; 774  :         Py_MEMCPY(op->ob_sval, a->ob_sval, Py_SIZE(a));

  0010c	49 8d 6c 24 78	 lea	 rbp, QWORD PTR [r12+120]
  00111	4c 8d 4f 78	 lea	 r9, QWORD PTR [rdi+120]
  00115	48 83 fa 10	 cmp	 rdx, 16
  00119	72 10		 jb	 SHORT $LN15@bytes_repe
  0011b	4c 8b c2	 mov	 r8, rdx
  0011e	48 8b cd	 mov	 rcx, rbp
  00121	49 8b d1	 mov	 rdx, r9
  00124	e8 00 00 00 00	 call	 memcpy
  00129	eb 25		 jmp	 SHORT $LN17@bytes_repe
$LN15@bytes_repe:
  0012b	48 85 d2	 test	 rdx, rdx
  0012e	74 20		 je	 SHORT $LN17@bytes_repe
  00130	48 8b cd	 mov	 rcx, rbp
  00133	4c 2b cd	 sub	 r9, rbp
  00136	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL13@bytes_repe:
  00140	41 0f b6 04 09	 movzx	 eax, BYTE PTR [r9+rcx]
  00145	48 ff c1	 inc	 rcx
  00148	48 ff ca	 dec	 rdx
  0014b	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  0014e	75 f0		 jne	 SHORT $LL13@bytes_repe
$LN17@bytes_repe:

; 775  :         i = Py_SIZE(a);

  00150	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]

; 776  :     }
; 777  :     while (i < size) {

  00154	48 3b de	 cmp	 rbx, rsi
  00157	7d 5f		 jge	 SHORT $LN9@bytes_repe
  00159	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@bytes_repe:

; 778  :         j = (i <= size-i)  ?  i  :  size-i;

  00160	48 8b fe	 mov	 rdi, rsi

; 779  :         Py_MEMCPY(op->ob_sval+i, op->ob_sval, j);

  00163	48 8d 0c 2b	 lea	 rcx, QWORD PTR [rbx+rbp]
  00167	48 2b fb	 sub	 rdi, rbx
  0016a	48 3b df	 cmp	 rbx, rdi
  0016d	48 0f 4e fb	 cmovle	 rdi, rbx
  00171	48 83 ff 10	 cmp	 rdi, 16
  00175	72 0d		 jb	 SHORT $LN5@bytes_repe
  00177	4c 8b c7	 mov	 r8, rdi
  0017a	48 8b d5	 mov	 rdx, rbp
  0017d	e8 00 00 00 00	 call	 memcpy
  00182	eb 2c		 jmp	 SHORT $LN7@bytes_repe
$LN5@bytes_repe:
  00184	48 85 ff	 test	 rdi, rdi
  00187	74 27		 je	 SHORT $LN7@bytes_repe
  00189	4c 8b c5	 mov	 r8, rbp
  0018c	48 8b d7	 mov	 rdx, rdi
  0018f	4c 2b c1	 sub	 r8, rcx
  00192	66 66 66 66 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL3@bytes_repe:
  001a0	41 0f b6 04 08	 movzx	 eax, BYTE PTR [r8+rcx]
  001a5	48 ff c1	 inc	 rcx
  001a8	48 ff ca	 dec	 rdx
  001ab	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  001ae	75 f0		 jne	 SHORT $LL3@bytes_repe
$LN7@bytes_repe:

; 780  :         i += j;

  001b0	48 03 df	 add	 rbx, rdi
  001b3	48 3b de	 cmp	 rbx, rsi
  001b6	7c a8		 jl	 SHORT $LL10@bytes_repe
$LN9@bytes_repe:

; 781  :     }
; 782  :     return (PyObject *) op;

  001b8	49 8b c4	 mov	 rax, r12
$LN38@bytes_repe:
  001bb	4c 8b 64 24 40	 mov	 r12, QWORD PTR [rsp+64]
$LN37@bytes_repe:
  001c0	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  001c5	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]

; 783  : }

  001ca	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  001cf	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001d3	5f		 pop	 rdi
  001d4	c3		 ret	 0
bytes_repeat ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_contains DD imagerel bytes_contains
	DD	imagerel bytes_contains+212
	DD	imagerel $unwind$bytes_contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_contains DD 061201H
	DD	0136412H
	DD	0123412H
	DD	0700bf212H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT bytes_contains
_TEXT	SEGMENT
varg$22166 = 48
self$ = 144
arg$ = 152
bytes_contains PROC					; COMDAT

; 787  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00012	48 8b da	 mov	 rbx, rdx

; 788  :     Py_ssize_t ival = PyNumber_AsSsize_t(arg, PyExc_ValueError);

  00015	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  0001c	48 8b f1	 mov	 rsi, rcx
  0001f	48 8b cb	 mov	 rcx, rbx
  00022	e8 00 00 00 00	 call	 PyNumber_AsSsize_t

; 789  :     if (ival == -1 && PyErr_Occurred()) {

  00027	48 83 f8 ff	 cmp	 rax, -1
  0002b	75 57		 jne	 SHORT $LN4@bytes_cont
  0002d	e8 00 00 00 00	 call	 PyErr_Occurred
  00032	48 85 c0	 test	 rax, rax
  00035	74 72		 je	 SHORT $LN1@bytes_cont

; 790  :         Py_buffer varg;
; 791  :         Py_ssize_t pos;
; 792  :         PyErr_Clear();

  00037	e8 00 00 00 00	 call	 PyErr_Clear

; 793  :         if (_getbuffer(arg, &varg) < 0)

  0003c	48 8d 54 24 30	 lea	 rdx, QWORD PTR varg$22166[rsp]
  00041	48 8b cb	 mov	 rcx, rbx
  00044	e8 00 00 00 00	 call	 _getbuffer
  00049	48 85 c0	 test	 rax, rax

; 794  :             return -1;

  0004c	78 6e		 js	 SHORT $LN7@bytes_cont

; 795  :         pos = stringlib_find(PyBytes_AS_STRING(self), Py_SIZE(self),
; 796  :                              varg.buf, varg.len, 0);

  0004e	4c 8b 4c 24 40	 mov	 r9, QWORD PTR varg$22166[rsp+16]
  00053	4c 8b 44 24 30	 mov	 r8, QWORD PTR varg$22166[rsp]
  00058	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  0005c	48 8d 4e 78	 lea	 rcx, QWORD PTR [rsi+120]
  00060	33 ff		 xor	 edi, edi
  00062	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00067	e8 00 00 00 00	 call	 stringlib_find

; 797  :         PyBuffer_Release(&varg);

  0006c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR varg$22166[rsp]
  00071	48 8b d8	 mov	 rbx, rax
  00074	e8 00 00 00 00	 call	 PyBuffer_Release

; 798  :         return pos >= 0;

  00079	48 85 db	 test	 rbx, rbx
  0007c	40 0f 99 c7	 setns	 dil
  00080	8b c7		 mov	 eax, edi
  00082	eb 3b		 jmp	 SHORT $LN5@bytes_cont
$LN4@bytes_cont:

; 799  :     }
; 800  :     if (ival < 0 || ival >= 256) {

  00084	48 3d ff 00 00
	00		 cmp	 rax, 255		; 000000ffH
  0008a	77 1d		 ja	 SHORT $LN1@bytes_cont

; 803  :     }
; 804  : 
; 805  :     return memchr(PyBytes_AS_STRING(self), (int) ival, Py_SIZE(self)) != NULL;

  0008c	4c 8b 46 60	 mov	 r8, QWORD PTR [rsi+96]
  00090	48 8d 4e 78	 lea	 rcx, QWORD PTR [rsi+120]
  00094	8b d0		 mov	 edx, eax
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  0009c	33 ff		 xor	 edi, edi
  0009e	48 85 c0	 test	 rax, rax
  000a1	40 0f 95 c7	 setne	 dil
  000a5	8b c7		 mov	 eax, edi
  000a7	eb 16		 jmp	 SHORT $LN5@bytes_cont
$LN1@bytes_cont:

; 801  :         PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)");

  000a9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@NJOIMFKH@byte?5must?5be?5in?5range?$CI0?0?5256?$CJ?$AA@
  000b7	e8 00 00 00 00	 call	 PyErr_SetString
$LN7@bytes_cont:

; 802  :         return -1;

  000bc	83 c8 ff	 or	 eax, -1
$LN5@bytes_cont:

; 806  : }

  000bf	4c 8d 9c 24 80
	00 00 00	 lea	 r11, QWORD PTR [rsp+128]
  000c7	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  000cb	49 8b 73 18	 mov	 rsi, QWORD PTR [r11+24]
  000cf	49 8b e3	 mov	 rsp, r11
  000d2	5f		 pop	 rdi
  000d3	c3		 ret	 0
bytes_contains ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@	; `string'
EXTRN	PyExc_IndexError:QWORD
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_item DD imagerel bytes_item
	DD	imagerel bytes_item+55
	DD	imagerel $unwind$bytes_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_item DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@ DB 'index out of range', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bytes_item
_TEXT	SEGMENT
a$ = 48
i$ = 56
bytes_item PROC						; COMDAT

; 810  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 811  :     if (i < 0 || i >= Py_SIZE(a)) {

  00004	48 85 d2	 test	 rdx, rdx
  00007	78 14		 js	 SHORT $LN1@bytes_item
  00009	48 3b 51 60	 cmp	 rdx, QWORD PTR [rcx+96]
  0000d	7d 0e		 jge	 SHORT $LN1@bytes_item

; 814  :     }
; 815  :     return PyLong_FromLong((unsigned char)a->ob_sval[i]);

  0000f	0f b6 4c 11 78	 movzx	 ecx, BYTE PTR [rcx+rdx+120]

; 816  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN1@bytes_item:

; 812  :         PyErr_SetString(PyExc_IndexError, "index out of range");

  0001d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@
  0002b	e8 00 00 00 00	 call	 PyErr_SetString

; 813  :         return NULL;

  00030	33 c0		 xor	 eax, eax

; 816  : }

  00032	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00036	c3		 ret	 0
bytes_item ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@BBGHAPNJ@Comparison?5between?5bytes?5and?5str@ ; `string'
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	PyObject_IsInstance:PROC
EXTRN	PyUnicode_Type:BYTE
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	memcmp:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$bytes_richcompare DD imagerel bytes_richcompare
	DD	imagerel bytes_richcompare+171
	DD	imagerel $unwind$bytes_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$bytes_richcompare DD imagerel bytes_richcompare+171
	DD	imagerel bytes_richcompare+283
	DD	imagerel $chain$1$bytes_richcompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$bytes_richcompare DD imagerel bytes_richcompare+283
	DD	imagerel bytes_richcompare+592
	DD	imagerel $chain$2$bytes_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$bytes_richcompare DD 021H
	DD	imagerel bytes_richcompare
	DD	imagerel bytes_richcompare+171
	DD	imagerel $unwind$bytes_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$bytes_richcompare DD 040e21H
	DD	0bc40eH
	DD	0a5405H
	DD	imagerel bytes_richcompare
	DD	imagerel bytes_richcompare+171
	DD	imagerel $unwind$bytes_richcompare
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_richcompare DD 060d01H
	DD	0c340dH
	DD	0d009520dH
	DD	060067007H
xdata	ENDS
;	COMDAT ??_C@_0CE@BBGHAPNJ@Comparison?5between?5bytes?5and?5str@
CONST	SEGMENT
??_C@_0CE@BBGHAPNJ@Comparison?5between?5bytes?5and?5str@ DB 'Comparison b'
	DB	'etween bytes and string', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
CONST	ENDS
;	COMDAT bytes_richcompare
_TEXT	SEGMENT
a$ = 80
b$ = 88
op$ = 96
bytes_richcompare PROC					; COMDAT

; 820  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	41 55		 push	 r13
  00009	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 821  :     int c;
; 822  :     Py_ssize_t len_a, len_b;
; 823  :     Py_ssize_t min_len;
; 824  :     PyObject *result;
; 825  : 
; 826  :     /* Make sure both arguments are strings. */
; 827  :     if (!(PyBytes_Check(a) && PyBytes_Check(b))) {

  0000d	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00011	49 63 f8	 movsxd	 rdi, r8d
  00014	48 8b f2	 mov	 rsi, rdx
  00017	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  00021	4c 8b c1	 mov	 r8, rcx
  00024	0f 84 3e 01 00
	00		 je	 $LN26@bytes_rich
  0002a	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0002e	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  00038	0f 84 2a 01 00
	00		 je	 $LN26@bytes_rich

; 838  :         goto out;
; 839  :     }
; 840  :     if (a == b) {

  0003e	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:__ImageBase
  00045	48 3b ca	 cmp	 rcx, rdx
  00048	75 2a		 jne	 SHORT $LN19@bytes_rich

; 841  :         switch (op) {

  0004a	83 ff 05	 cmp	 edi, 5
  0004d	77 25		 ja	 SHORT $LN19@bytes_rich
  0004f	41 8b 8c bd 00
	00 00 00	 mov	 ecx, DWORD PTR $LN38@bytes_rich[r13+rdi*4]
  00057	49 03 cd	 add	 rcx, r13
  0005a	ff e1		 jmp	 rcx
$LN18@bytes_rich:

; 842  :         case Py_EQ:case Py_LE:case Py_GE:
; 843  :             result = Py_True;

  0005c	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_TrueStruct

; 844  :             goto out;

  00063	e9 6a 01 00 00	 jmp	 $out$22218
$LN17@bytes_rich:

; 845  :         case Py_NE:case Py_LT:case Py_GT:
; 846  :             result = Py_False;

  00068	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct

; 847  :             goto out;

  0006f	e9 5e 01 00 00	 jmp	 $out$22218
$LN19@bytes_rich:

; 848  :         }
; 849  :     }
; 850  :     if (op == Py_EQ) {

  00074	83 ff 02	 cmp	 edi, 2
  00077	75 32		 jne	 SHORT $LN16@bytes_rich

; 851  :         /* Supporting Py_NE here as well does not save
; 852  :            much time, since Py_NE is rarely used.  */
; 853  :         if (Py_SIZE(a) == Py_SIZE(b)
; 854  :             && (a->ob_sval[0] == b->ob_sval[0]
; 855  :             && memcmp(a->ob_sval, b->ob_sval, Py_SIZE(a)) == 0)) {

  00079	4d 8b 48 60	 mov	 r9, QWORD PTR [r8+96]
  0007d	4c 3b 4a 60	 cmp	 r9, QWORD PTR [rdx+96]
  00081	75 e5		 jne	 SHORT $LN17@bytes_rich
  00083	0f b6 42 78	 movzx	 eax, BYTE PTR [rdx+120]
  00087	48 83 c2 78	 add	 rdx, 120		; 00000078H
  0008b	49 8d 48 78	 lea	 rcx, QWORD PTR [r8+120]
  0008f	38 01		 cmp	 BYTE PTR [rcx], al
  00091	75 d5		 jne	 SHORT $LN17@bytes_rich
  00093	4d 8b c1	 mov	 r8, r9
  00096	e8 00 00 00 00	 call	 memcmp
  0009b	85 c0		 test	 eax, eax
  0009d	75 c9		 jne	 SHORT $LN17@bytes_rich

; 856  :             result = Py_True;

  0009f	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_TrueStruct

; 857  :         } else {

  000a6	e9 27 01 00 00	 jmp	 $out$22218
$LN16@bytes_rich:
  000ab	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp

; 858  :             result = Py_False;
; 859  :         }
; 860  :         goto out;
; 861  :     }
; 862  :     len_a = Py_SIZE(a); len_b = Py_SIZE(b);

  000b0	49 8b 68 60	 mov	 rbp, QWORD PTR [r8+96]
  000b4	4c 89 64 24 58	 mov	 QWORD PTR [rsp+88], r12
  000b9	4c 8b 62 60	 mov	 r12, QWORD PTR [rdx+96]

; 863  :     min_len = (len_a < len_b) ? len_a : len_b;

  000bd	49 3b ec	 cmp	 rbp, r12
  000c0	4d 8b d4	 mov	 r10, r12
  000c3	4c 0f 4c d5	 cmovl	 r10, rbp

; 864  :     if (min_len > 0) {

  000c7	33 db		 xor	 ebx, ebx
  000c9	4d 85 d2	 test	 r10, r10
  000cc	7e 25		 jle	 SHORT $LN36@bytes_rich

; 865  :         c = Py_CHARMASK(*a->ob_sval) - Py_CHARMASK(*b->ob_sval);

  000ce	45 0f b6 48 78	 movzx	 r9d, BYTE PTR [r8+120]
  000d3	0f b6 42 78	 movzx	 eax, BYTE PTR [rdx+120]
  000d7	48 83 c2 78	 add	 rdx, 120		; 00000078H
  000db	44 2b c8	 sub	 r9d, eax
  000de	49 8d 48 78	 lea	 rcx, QWORD PTR [r8+120]

; 866  :         if (c==0)

  000e2	75 24		 jne	 SHORT $LN31@bytes_rich

; 867  :             c = memcmp(a->ob_sval, b->ob_sval, min_len);

  000e4	4d 8b c2	 mov	 r8, r10
  000e7	e8 00 00 00 00	 call	 memcmp
  000ec	44 8b c8	 mov	 r9d, eax

; 868  :     } else
; 869  :         c = 0;
; 870  :     if (c == 0)

  000ef	85 c0		 test	 eax, eax
  000f1	75 15		 jne	 SHORT $LN31@bytes_rich
$LN36@bytes_rich:

; 871  :         c = (len_a < len_b) ? -1 : (len_a > len_b) ? 1 : 0;

  000f3	49 3b ec	 cmp	 rbp, r12
  000f6	7d 06		 jge	 SHORT $LN30@bytes_rich
  000f8	41 83 c9 ff	 or	 r9d, -1
  000fc	eb 0a		 jmp	 SHORT $LN31@bytes_rich
$LN30@bytes_rich:
  000fe	49 3b ec	 cmp	 rbp, r12
  00101	44 8b cb	 mov	 r9d, ebx
  00104	41 0f 9f c1	 setg	 r9b
$LN31@bytes_rich:

; 872  :     switch (op) {

  00108	4c 8b 64 24 58	 mov	 r12, QWORD PTR [rsp+88]
  0010d	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00112	83 ff 05	 cmp	 edi, 5
  00115	0f 87 b0 00 00
	00		 ja	 $LN22@bytes_rich
  0011b	41 8b 8c bd 00
	00 00 00	 mov	 ecx, DWORD PTR $LN37@bytes_rich[r13+rdi*4]
  00123	49 03 cd	 add	 rcx, r13
  00126	ff e1		 jmp	 rcx
$LN7@bytes_rich:

; 873  :     case Py_LT: c = c <  0; break;

  00128	45 85 c9	 test	 r9d, r9d
  0012b	0f 98 c3	 sets	 bl
  0012e	eb 1e		 jmp	 SHORT $LN39@bytes_rich
$LN6@bytes_rich:

; 874  :     case Py_LE: c = c <= 0; break;

  00130	45 85 c9	 test	 r9d, r9d
  00133	0f 9e c3	 setle	 bl
  00136	eb 16		 jmp	 SHORT $LN39@bytes_rich
$LN4@bytes_rich:

; 875  :     case Py_EQ: assert(0);  break; /* unreachable */
; 876  :     case Py_NE: c = c != 0; break;

  00138	45 85 c9	 test	 r9d, r9d
  0013b	0f 95 c3	 setne	 bl
  0013e	eb 0e		 jmp	 SHORT $LN39@bytes_rich
$LN3@bytes_rich:

; 877  :     case Py_GT: c = c >  0; break;

  00140	45 85 c9	 test	 r9d, r9d
  00143	0f 9f c3	 setg	 bl
  00146	eb 06		 jmp	 SHORT $LN39@bytes_rich
$LN2@bytes_rich:

; 878  :     case Py_GE: c = c >= 0; break;

  00148	45 85 c9	 test	 r9d, r9d
  0014b	0f 99 c3	 setns	 bl
$LN39@bytes_rich:
  0014e	44 8b cb	 mov	 r9d, ebx
$LN8@bytes_rich:

; 879  :     default:
; 880  :         result = Py_NotImplemented;
; 881  :         goto out;
; 882  :     }
; 883  :     result = c ? Py_True : Py_False;

  00151	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00158	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_FalseStruct
  0015f	45 85 c9	 test	 r9d, r9d
  00162	48 0f 45 d8	 cmovne	 rbx, rax
  00166	eb 6a		 jmp	 SHORT $out$22218
$LN26@bytes_rich:

; 828  :         if (Py_BytesWarningFlag && (op == Py_EQ || op == Py_NE) &&
; 829  :             (PyObject_IsInstance((PyObject*)a,
; 830  :                                  (PyObject*)&PyUnicode_Type) ||
; 831  :             PyObject_IsInstance((PyObject*)b,
; 832  :                                  (PyObject*)&PyUnicode_Type))) {

  00168	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_BytesWarningFlag, 0
  0016f	74 5a		 je	 SHORT $LN22@bytes_rich
  00171	83 ff 02	 cmp	 edi, 2
  00174	74 05		 je	 SHORT $LN24@bytes_rich
  00176	83 ff 03	 cmp	 edi, 3
  00179	75 50		 jne	 SHORT $LN22@bytes_rich
$LN24@bytes_rich:
  0017b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyUnicode_Type
  00182	e8 00 00 00 00	 call	 PyObject_IsInstance
  00187	85 c0		 test	 eax, eax
  00189	75 13		 jne	 SHORT $LN23@bytes_rich
  0018b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyUnicode_Type
  00192	48 8b ce	 mov	 rcx, rsi
  00195	e8 00 00 00 00	 call	 PyObject_IsInstance
  0019a	85 c0		 test	 eax, eax
  0019c	74 2d		 je	 SHORT $LN22@bytes_rich
$LN23@bytes_rich:

; 833  :             if (PyErr_WarnEx(PyExc_BytesWarning,
; 834  :                         "Comparison between bytes and string", 1))

  0019e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BytesWarning
  001a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@BBGHAPNJ@Comparison?5between?5bytes?5and?5str@
  001ac	41 b8 01 00 00
	00		 mov	 r8d, 1
  001b2	e8 00 00 00 00	 call	 PyErr_WarnEx
  001b7	85 c0		 test	 eax, eax
  001b9	74 10		 je	 SHORT $LN22@bytes_rich

; 835  :                 return NULL;

  001bb	33 c0		 xor	 eax, eax

; 887  : }

  001bd	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  001c2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001c6	41 5d		 pop	 r13
  001c8	5f		 pop	 rdi
  001c9	5e		 pop	 rsi
  001ca	c3		 ret	 0
$LN22@bytes_rich:

; 836  :         }
; 837  :         result = Py_NotImplemented;

  001cb	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NotImplementedStruct
$out$22218:

; 884  :   out:
; 885  :     Py_INCREF(result);

  001d2	e8 00 00 00 00	 call	 _Py_PXCTX
  001d7	85 c0		 test	 eax, eax
  001d9	75 32		 jne	 SHORT $LN33@bytes_rich
  001db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001e9	4c 8b cb	 mov	 r9, rbx
  001ec	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001f2	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001fa	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ff	85 c0		 test	 eax, eax
  00201	75 06		 jne	 SHORT $LN32@bytes_rich
  00203	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00207	74 04		 je	 SHORT $LN33@bytes_rich
$LN32@bytes_rich:
  00209	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN33@bytes_rich:

; 886  :     return result;

  0020d	48 8b c3	 mov	 rax, rbx

; 887  : }

  00210	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00215	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00219	41 5d		 pop	 r13
  0021b	5f		 pop	 rdi
  0021c	5e		 pop	 rsi
  0021d	c3		 ret	 0
  0021e	66 90		 npad	 2
$LN38@bytes_rich:
  00220	00 00 00 00	 DD	 $LN17@bytes_rich
  00224	00 00 00 00	 DD	 $LN18@bytes_rich
  00228	00 00 00 00	 DD	 $LN18@bytes_rich
  0022c	00 00 00 00	 DD	 $LN17@bytes_rich
  00230	00 00 00 00	 DD	 $LN17@bytes_rich
  00234	00 00 00 00	 DD	 $LN18@bytes_rich
$LN37@bytes_rich:
  00238	00 00 00 00	 DD	 $LN7@bytes_rich
  0023c	00 00 00 00	 DD	 $LN6@bytes_rich
  00240	00 00 00 00	 DD	 $LN8@bytes_rich
  00244	00 00 00 00	 DD	 $LN4@bytes_rich
  00248	00 00 00 00	 DD	 $LN3@bytes_rich
  0024c	00 00 00 00	 DD	 $LN2@bytes_rich
bytes_richcompare ENDP
_TEXT	ENDS
EXTRN	_Py_HashBytes:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_hash DD imagerel bytes_hash
	DD	imagerel bytes_hash+49
	DD	imagerel $unwind$bytes_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_hash DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT bytes_hash
_TEXT	SEGMENT
a$ = 48
bytes_hash PROC						; COMDAT

; 891  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 892  :     if (a->ob_shash == -1) {

  00006	48 83 79 70 ff	 cmp	 QWORD PTR [rcx+112], -1
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	75 17		 jne	 SHORT $LN4@bytes_hash

; 893  :         /* Can't fail */
; 894  :         a->ob_shash = _Py_HashBytes((unsigned char *) a->ob_sval, Py_SIZE(a));

  00010	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  00014	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00018	e8 00 00 00 00	 call	 _Py_HashBytes
  0001d	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 897  : }

  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5b		 pop	 rbx
  00026	c3		 ret	 0
$LN4@bytes_hash:

; 895  :     }
; 896  :     return a->ob_shash;

  00027	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]

; 897  : }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
bytes_hash ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@HKNFHIEC@byte?5indices?5must?5be?5integers?0?5n@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	PySlice_GetIndicesEx:PROC
EXTRN	PySlice_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_subscript DD imagerel bytes_subscript
	DD	imagerel bytes_subscript+52
	DD	imagerel $unwind$bytes_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$bytes_subscript DD imagerel bytes_subscript+52
	DD	imagerel bytes_subscript+94
	DD	imagerel $chain$0$bytes_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$bytes_subscript DD imagerel bytes_subscript+94
	DD	imagerel bytes_subscript+131
	DD	imagerel $chain$2$bytes_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$bytes_subscript DD imagerel bytes_subscript+131
	DD	imagerel bytes_subscript+163
	DD	imagerel $chain$4$bytes_subscript
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$bytes_subscript DD imagerel bytes_subscript+163
	DD	imagerel bytes_subscript+433
	DD	imagerel $chain$5$bytes_subscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$bytes_subscript DD 021H
	DD	imagerel bytes_subscript
	DD	imagerel bytes_subscript+52
	DD	imagerel $unwind$bytes_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$bytes_subscript DD 020021H
	DD	0a7400H
	DD	imagerel bytes_subscript
	DD	imagerel bytes_subscript+52
	DD	imagerel $unwind$bytes_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$bytes_subscript DD 020021H
	DD	0a7400H
	DD	imagerel bytes_subscript
	DD	imagerel bytes_subscript+52
	DD	imagerel $unwind$bytes_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$bytes_subscript DD 020521H
	DD	0a7405H
	DD	imagerel bytes_subscript
	DD	imagerel bytes_subscript+52
	DD	imagerel $unwind$bytes_subscript
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_subscript DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_0CK@HKNFHIEC@byte?5indices?5must?5be?5integers?0?5n@
CONST	SEGMENT
??_C@_0CK@HKNFHIEC@byte?5indices?5must?5be?5integers?0?5n@ DB 'byte indic'
	DB	'es must be integers, not %.200s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bytes_subscript
_TEXT	SEGMENT
stop$22291 = 48
self$ = 80
step$22292 = 88
item$ = 88
slicelength$22293 = 96
start$22290 = 104
bytes_subscript PROC					; COMDAT

; 901  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 902  :     if (PyIndex_Check(item)) {

  00006	4c 8b 42 58	 mov	 r8, QWORD PTR [rdx+88]
  0000a	4c 8b d2	 mov	 r10, rdx
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	49 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [r8+184]
  00017	48 85 c0	 test	 rax, rax
  0001a	0f 84 83 00 00
	00		 je	 $LN19@bytes_subs
  00020	48 83 b8 08 01
	00 00 00	 cmp	 QWORD PTR [rax+264], 0
  00028	74 79		 je	 SHORT $LN19@bytes_subs

; 903  :         Py_ssize_t i = PyNumber_AsSsize_t(item, PyExc_IndexError);

  0002a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_IndexError
  00031	49 8b ca	 mov	 rcx, r10
  00034	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  00039	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  0003e	48 8b f8	 mov	 rdi, rax

; 904  :         if (i == -1 && PyErr_Occurred())

  00041	48 83 f8 ff	 cmp	 rax, -1
  00045	75 17		 jne	 SHORT $LN18@bytes_subs
  00047	e8 00 00 00 00	 call	 PyErr_Occurred
  0004c	48 85 c0	 test	 rax, rax
  0004f	74 12		 je	 SHORT $LN25@bytes_subs

; 905  :             return NULL;

  00051	33 c0		 xor	 eax, eax
  00053	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 961  :     }
; 962  : }

  00058	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0005c	5b		 pop	 rbx
  0005d	c3		 ret	 0
$LN18@bytes_subs:

; 906  :         if (i < 0)

  0005e	48 85 c0	 test	 rax, rax
  00061	79 06		 jns	 SHORT $LN24@bytes_subs
$LN25@bytes_subs:

; 907  :             i += PyBytes_GET_SIZE(self);

  00063	48 03 7b 60	 add	 rdi, QWORD PTR [rbx+96]

; 908  :         if (i < 0 || i >= PyBytes_GET_SIZE(self)) {

  00067	78 1a		 js	 SHORT $LN15@bytes_subs
$LN24@bytes_subs:
  00069	48 3b 7b 60	 cmp	 rdi, QWORD PTR [rbx+96]
  0006d	7d 14		 jge	 SHORT $LN15@bytes_subs

; 911  :             return NULL;
; 912  :         }
; 913  :         return PyLong_FromLong((unsigned char)self->ob_sval[i]);

  0006f	0f b6 4c 1f 78	 movzx	 ecx, BYTE PTR [rdi+rbx+120]
  00074	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 961  :     }
; 962  : }

  00079	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0007d	5b		 pop	 rbx
  0007e	e9 00 00 00 00	 jmp	 PyLong_FromLong
$LN15@bytes_subs:

; 909  :             PyErr_SetString(PyExc_IndexError,
; 910  :                             "index out of range");

  00083	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@
  00091	e8 00 00 00 00	 call	 PyErr_SetString
  00096	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  0009b	33 c0		 xor	 eax, eax

; 961  :     }
; 962  : }

  0009d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000a1	5b		 pop	 rbx
  000a2	c3		 ret	 0
$LN19@bytes_subs:

; 914  :     }
; 915  :     else if (PySlice_Check(item)) {

  000a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySlice_Type
  000aa	4c 3b c0	 cmp	 r8, rax
  000ad	0f 85 df 00 00
	00		 jne	 $LN13@bytes_subs

; 916  :         Py_ssize_t start, stop, step, slicelength, cur, i;
; 917  :         char* source_buf;
; 918  :         char* result_buf;
; 919  :         PyObject* result;
; 920  : 
; 921  :         if (PySlice_GetIndicesEx(item,
; 922  :                          PyBytes_GET_SIZE(self),
; 923  :                          &start, &stop, &step, &slicelength) < 0) {

  000b3	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  000b7	48 8d 44 24 60	 lea	 rax, QWORD PTR slicelength$22293[rsp]
  000bc	4c 8d 4c 24 30	 lea	 r9, QWORD PTR stop$22291[rsp]
  000c1	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000c6	48 8d 44 24 58	 lea	 rax, QWORD PTR step$22292[rsp]
  000cb	4c 8d 44 24 68	 lea	 r8, QWORD PTR start$22290[rsp]
  000d0	49 8b ca	 mov	 rcx, r10
  000d3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d8	e8 00 00 00 00	 call	 PySlice_GetIndicesEx
  000dd	85 c0		 test	 eax, eax

; 924  :             return NULL;

  000df	0f 88 c4 00 00
	00		 js	 $LN29@bytes_subs

; 925  :         }
; 926  : 
; 927  :         if (slicelength <= 0) {

  000e5	48 8b 54 24 60	 mov	 rdx, QWORD PTR slicelength$22293[rsp]
  000ea	48 85 d2	 test	 rdx, rdx
  000ed	7f 14		 jg	 SHORT $LN11@bytes_subs

; 928  :             return PyBytes_FromStringAndSize("", 0);

  000ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000f6	33 d2		 xor	 edx, edx
  000f8	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 961  :     }
; 962  : }

  000fd	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00101	5b		 pop	 rbx
  00102	c3		 ret	 0
$LN11@bytes_subs:

; 929  :         }
; 930  :         else if (start == 0 && step == 1 &&
; 931  :                  slicelength == PyBytes_GET_SIZE(self) &&
; 932  :                  PyBytes_CheckExact(self)) {

  00103	48 8b 44 24 68	 mov	 rax, QWORD PTR start$22290[rsp]
  00108	48 85 c0	 test	 rax, rax
  0010b	75 2c		 jne	 SHORT $LN9@bytes_subs
  0010d	48 83 7c 24 58
	01		 cmp	 QWORD PTR step$22292[rsp], 1
  00113	75 3c		 jne	 SHORT $LN7@bytes_subs
  00115	48 3b 53 60	 cmp	 rdx, QWORD PTR [rbx+96]
  00119	75 26		 jne	 SHORT $LN26@bytes_subs
  0011b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBytes_Type
  00122	48 39 4b 58	 cmp	 QWORD PTR [rbx+88], rcx
  00126	75 19		 jne	 SHORT $LN26@bytes_subs

; 933  :             Py_INCREF(self);

  00128	48 8b cb	 mov	 rcx, rbx
  0012b	e8 00 00 00 00	 call	 _Py_IncRef

; 934  :             return (PyObject *)self;

  00130	48 8b c3	 mov	 rax, rbx

; 961  :     }
; 962  : }

  00133	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00137	5b		 pop	 rbx
  00138	c3		 ret	 0
$LN9@bytes_subs:

; 935  :         }
; 936  :         else if (step == 1) {

  00139	48 83 7c 24 58
	01		 cmp	 QWORD PTR step$22292[rsp], 1
  0013f	75 10		 jne	 SHORT $LN7@bytes_subs
$LN26@bytes_subs:

; 937  :             return PyBytes_FromStringAndSize(
; 938  :                 PyBytes_AS_STRING(self) + start,
; 939  :                 slicelength);

  00141	48 8d 4c 18 78	 lea	 rcx, QWORD PTR [rax+rbx+120]
  00146	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 961  :     }
; 962  : }

  0014b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0014f	5b		 pop	 rbx
  00150	c3		 ret	 0
$LN7@bytes_subs:

; 940  :         }
; 941  :         else {
; 942  :             source_buf = PyBytes_AS_STRING(self);
; 943  :             result = PyBytes_FromStringAndSize(NULL, slicelength);

  00151	33 c9		 xor	 ecx, ecx
  00153	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00158	4c 8b d8	 mov	 r11, rax

; 944  :             if (result == NULL)

  0015b	48 85 c0	 test	 rax, rax

; 945  :                 return NULL;

  0015e	74 49		 je	 SHORT $LN29@bytes_subs

; 946  : 
; 947  :             result_buf = PyBytes_AS_STRING(result);
; 948  :             for (cur = start, i = 0; i < slicelength;
; 949  :                  cur += step, i++) {

  00160	48 8b 54 24 68	 mov	 rdx, QWORD PTR start$22290[rsp]
  00165	33 c9		 xor	 ecx, ecx
  00167	48 39 4c 24 60	 cmp	 QWORD PTR slicelength$22293[rsp], rcx
  0016c	7e 1b		 jle	 SHORT $LN2@bytes_subs
  0016e	66 90		 npad	 2
$LL4@bytes_subs:

; 950  :                 result_buf[i] = source_buf[cur];

  00170	0f b6 44 1a 78	 movzx	 eax, BYTE PTR [rdx+rbx+120]
  00175	48 ff c1	 inc	 rcx
  00178	42 88 44 19 77	 mov	 BYTE PTR [rcx+r11+119], al
  0017d	48 03 54 24 58	 add	 rdx, QWORD PTR step$22292[rsp]
  00182	48 3b 4c 24 60	 cmp	 rcx, QWORD PTR slicelength$22293[rsp]
  00187	7c e7		 jl	 SHORT $LL4@bytes_subs
$LN2@bytes_subs:

; 951  :             }
; 952  : 
; 953  :             return result;

  00189	49 8b c3	 mov	 rax, r11

; 961  :     }
; 962  : }

  0018c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00190	5b		 pop	 rbx
  00191	c3		 ret	 0
$LN13@bytes_subs:

; 954  :         }
; 955  :     }
; 956  :     else {
; 957  :         PyErr_Format(PyExc_TypeError,
; 958  :                      "byte indices must be integers, not %.200s",
; 959  :                      Py_TYPE(item)->tp_name);

  00192	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00196	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0019d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@HKNFHIEC@byte?5indices?5must?5be?5integers?0?5n@
  001a4	e8 00 00 00 00	 call	 PyErr_Format
$LN29@bytes_subs:

; 960  :         return NULL;

  001a9	33 c0		 xor	 eax, eax

; 961  :     }
; 962  : }

  001ab	48 83 c4 40	 add	 rsp, 64			; 00000040H
  001af	5b		 pop	 rbx
  001b0	c3		 ret	 0
bytes_subscript ENDP
_TEXT	ENDS
EXTRN	PyBuffer_FillInfo:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_buffer_getbuffer DD imagerel bytes_buffer_getbuffer
	DD	imagerel bytes_buffer_getbuffer+46
	DD	imagerel $unwind$bytes_buffer_getbuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_buffer_getbuffer DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT bytes_buffer_getbuffer
_TEXT	SEGMENT
self$ = 64
view$ = 72
flags$ = 80
bytes_buffer_getbuffer PROC				; COMDAT

; 966  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 967  :     return PyBuffer_FillInfo(view, (PyObject*)self, (void *)self->ob_sval, Py_SIZE(self),
; 968  :                              1, flags);

  00004	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  00008	41 8b c0	 mov	 eax, r8d
  0000b	4c 8b d2	 mov	 r10, rdx
  0000e	4c 8d 41 78	 lea	 r8, QWORD PTR [rcx+120]
  00012	48 8b d1	 mov	 rdx, rcx
  00015	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00019	49 8b ca	 mov	 rcx, r10
  0001c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00024	e8 00 00 00 00	 call	 PyBuffer_FillInfo

; 969  : }

  00029	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002d	c3		 ret	 0
bytes_buffer_getbuffer ENDP
_TEXT	ENDS
PUBLIC	??_C@_09DBJIONJK@?$HMOn?3split?$AA@		; `string'
EXTRN	_PyArg_ParseTupleAndKeywords_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_split DD imagerel bytes_split
	DD	imagerel bytes_split+257
	DD	imagerel $unwind$bytes_split
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_split DD 061101H
	DD	0153411H
	DD	0700af211H
	DD	050086009H
xdata	ENDS
;	COMDAT ??_C@_09DBJIONJK@?$HMOn?3split?$AA@
CONST	SEGMENT
??_C@_09DBJIONJK@?$HMOn?3split?$AA@ DB '|On:split', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bytes_split
_TEXT	SEGMENT
vsub$ = 48
maxsplit$ = 160
self$ = 160
args$ = 168
kwds$ = 176
subobj$ = 184
bytes_split PROC					; COMDAT

; 1013 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 10	 mov	 QWORD PTR [r11+16], rbx
  00007	55		 push	 rbp
  00008	56		 push	 rsi
  00009	57		 push	 rdi
  0000a	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H

; 1014 :     static char *kwlist[] = {"sep", "maxsplit", 0};
; 1015 :     Py_ssize_t len = PyBytes_GET_SIZE(self), n;

  00011	48 8b 79 60	 mov	 rdi, QWORD PTR [rcx+96]
  00015	48 8b d9	 mov	 rbx, rcx

; 1016 :     Py_ssize_t maxsplit = -1;
; 1017 :     const char *s = PyBytes_AS_STRING(self), *sub;
; 1018 :     Py_buffer vsub;
; 1019 :     PyObject *list, *subobj = Py_None;
; 1020 : 
; 1021 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|On:split",
; 1022 :                                      kwlist, &subobj, &maxsplit))

  00018	49 8d 4b 08	 lea	 rcx, QWORD PTR [r11+8]
  0001c	49 89 4b 90	 mov	 QWORD PTR [r11-112], rcx
  00020	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  00024	49 8b c0	 mov	 rax, r8
  00027	4c 8b d2	 mov	 r10, rdx
  0002a	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  0002e	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_Py_NoneStruct
  00035	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??bytes_split@@9@9
  0003c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09DBJIONJK@?$HMOn?3split?$AA@
  00043	48 8b d0	 mov	 rdx, rax
  00046	49 8b ca	 mov	 rcx, r10
  00049	49 c7 43 08 ff
	ff ff ff	 mov	 QWORD PTR [r11+8], -1
  00051	49 89 6b 20	 mov	 QWORD PTR [r11+32], rbp
  00055	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  0005a	85 c0		 test	 eax, eax
  0005c	75 07		 jne	 SHORT $LN4@bytes_spli
$LN7@bytes_spli:

; 1023 :         return NULL;

  0005e	33 c0		 xor	 eax, eax
  00060	e9 89 00 00 00	 jmp	 $LN5@bytes_spli
$LN4@bytes_spli:

; 1024 :     if (maxsplit < 0)

  00065	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR maxsplit$[rsp]

; 1025 :         maxsplit = PY_SSIZE_T_MAX;
; 1026 :     if (subobj == Py_None)

  0006d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR subobj$[rsp]
  00075	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0007f	4d 85 c9	 test	 r9, r9
  00082	4c 0f 48 c8	 cmovs	 r9, rax
  00086	4c 89 8c 24 a0
	00 00 00	 mov	 QWORD PTR maxsplit$[rsp], r9
  0008e	48 3b cd	 cmp	 rcx, rbp
  00091	75 11		 jne	 SHORT $LN2@bytes_spli

; 1027 :         return stringlib_split_whitespace((PyObject*) self, s, len, maxsplit);

  00093	48 8d 53 78	 lea	 rdx, QWORD PTR [rbx+120]
  00097	4c 8b c7	 mov	 r8, rdi
  0009a	48 8b cb	 mov	 rcx, rbx
  0009d	e8 00 00 00 00	 call	 stringlib_split_whitespace
  000a2	eb 4a		 jmp	 SHORT $LN5@bytes_spli
$LN2@bytes_spli:

; 1028 :     if (_getbuffer(subobj, &vsub) < 0)

  000a4	48 8d 54 24 30	 lea	 rdx, QWORD PTR vsub$[rsp]
  000a9	e8 00 00 00 00	 call	 _getbuffer
  000ae	48 85 c0	 test	 rax, rax

; 1029 :         return NULL;

  000b1	78 ab		 js	 SHORT $LN7@bytes_spli

; 1030 :     sub = vsub.buf;
; 1031 :     n = vsub.len;
; 1032 : 
; 1033 :     list = stringlib_split((PyObject*) self, s, len, sub, n, maxsplit);

  000b3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR maxsplit$[rsp]
  000bb	4c 8b 4c 24 30	 mov	 r9, QWORD PTR vsub$[rsp]
  000c0	48 8d 53 78	 lea	 rdx, QWORD PTR [rbx+120]
  000c4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000c9	48 8b 44 24 40	 mov	 rax, QWORD PTR vsub$[rsp+16]
  000ce	4c 8b c7	 mov	 r8, rdi
  000d1	48 8b cb	 mov	 rcx, rbx
  000d4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d9	e8 00 00 00 00	 call	 stringlib_split

; 1034 :     PyBuffer_Release(&vsub);

  000de	48 8d 4c 24 30	 lea	 rcx, QWORD PTR vsub$[rsp]
  000e3	48 8b d8	 mov	 rbx, rax
  000e6	e8 00 00 00 00	 call	 PyBuffer_Release

; 1035 :     return list;

  000eb	48 8b c3	 mov	 rax, rbx
$LN5@bytes_spli:

; 1036 : }

  000ee	48 8b 9c 24 a8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+168]
  000f6	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  000fd	5f		 pop	 rdi
  000fe	5e		 pop	 rsi
  000ff	5d		 pop	 rbp
  00100	c3		 ret	 0
bytes_split ENDP
_TEXT	ENDS
EXTRN	PyObject_AsCharBuffer:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_partition DD imagerel bytes_partition
	DD	imagerel bytes_partition+137
	DD	imagerel $unwind$bytes_partition
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_partition DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT bytes_partition
_TEXT	SEGMENT
self$ = 64
sep$ = 72
sep_obj$ = 72
sep_len$ = 80
bytes_partition PROC					; COMDAT

; 1047 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1048 :     const char *sep;
; 1049 :     Py_ssize_t sep_len;
; 1050 : 
; 1051 :     if (PyBytes_Check(sep_obj)) {

  0000a	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0000e	48 8b da	 mov	 rbx, rdx
  00011	48 8b f9	 mov	 rdi, rcx
  00014	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  0001e	74 14		 je	 SHORT $LN3@bytes_part

; 1052 :         sep = PyBytes_AS_STRING(sep_obj);
; 1053 :         sep_len = PyBytes_GET_SIZE(sep_obj);

  00020	4c 8b 42 60	 mov	 r8, QWORD PTR [rdx+96]
  00024	48 8d 42 78	 lea	 rax, QWORD PTR [rdx+120]
  00028	4c 89 44 24 50	 mov	 QWORD PTR sep_len$[rsp], r8
  0002d	48 89 44 24 48	 mov	 QWORD PTR sep$[rsp], rax
  00032	eb 2d		 jmp	 SHORT $LN1@bytes_part
$LN3@bytes_part:

; 1054 :     }
; 1055 :     else if (PyObject_AsCharBuffer(sep_obj, &sep, &sep_len))

  00034	4c 8d 44 24 50	 lea	 r8, QWORD PTR sep_len$[rsp]
  00039	48 8d 54 24 48	 lea	 rdx, QWORD PTR sep$[rsp]
  0003e	48 8b cb	 mov	 rcx, rbx
  00041	e8 00 00 00 00	 call	 PyObject_AsCharBuffer
  00046	85 c0		 test	 eax, eax
  00048	74 0d		 je	 SHORT $LN6@bytes_part

; 1056 :         return NULL;

  0004a	33 c0		 xor	 eax, eax

; 1063 : }

  0004c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5f		 pop	 rdi
  00056	c3		 ret	 0
$LN6@bytes_part:

; 1056 :         return NULL;

  00057	48 8b 44 24 48	 mov	 rax, QWORD PTR sep$[rsp]
  0005c	4c 8b 44 24 50	 mov	 r8, QWORD PTR sep_len$[rsp]
$LN1@bytes_part:

; 1057 : 
; 1058 :     return stringlib_partition(
; 1059 :         (PyObject*) self,
; 1060 :         PyBytes_AS_STRING(self), PyBytes_GET_SIZE(self),
; 1061 :         sep_obj, sep, sep_len
; 1062 :         );

  00061	4c 89 44 24 28	 mov	 QWORD PTR [rsp+40], r8
  00066	4c 8b 47 60	 mov	 r8, QWORD PTR [rdi+96]
  0006a	48 8d 57 78	 lea	 rdx, QWORD PTR [rdi+120]
  0006e	4c 8b cb	 mov	 r9, rbx
  00071	48 8b cf	 mov	 rcx, rdi
  00074	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00079	e8 00 00 00 00	 call	 stringlib_partition

; 1063 : }

  0007e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00083	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00087	5f		 pop	 rdi
  00088	c3		 ret	 0
bytes_partition ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_rpartition DD imagerel bytes_rpartition
	DD	imagerel bytes_rpartition+137
	DD	imagerel $unwind$bytes_rpartition
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_rpartition DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT bytes_rpartition
_TEXT	SEGMENT
self$ = 64
sep$ = 72
sep_obj$ = 72
sep_len$ = 80
bytes_rpartition PROC					; COMDAT

; 1075 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1076 :     const char *sep;
; 1077 :     Py_ssize_t sep_len;
; 1078 : 
; 1079 :     if (PyBytes_Check(sep_obj)) {

  0000a	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  0000e	48 8b da	 mov	 rbx, rdx
  00011	48 8b f9	 mov	 rdi, rcx
  00014	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  0001e	74 14		 je	 SHORT $LN3@bytes_rpar

; 1080 :         sep = PyBytes_AS_STRING(sep_obj);
; 1081 :         sep_len = PyBytes_GET_SIZE(sep_obj);

  00020	4c 8b 42 60	 mov	 r8, QWORD PTR [rdx+96]
  00024	48 8d 42 78	 lea	 rax, QWORD PTR [rdx+120]
  00028	4c 89 44 24 50	 mov	 QWORD PTR sep_len$[rsp], r8
  0002d	48 89 44 24 48	 mov	 QWORD PTR sep$[rsp], rax
  00032	eb 2d		 jmp	 SHORT $LN1@bytes_rpar
$LN3@bytes_rpar:

; 1082 :     }
; 1083 :     else if (PyObject_AsCharBuffer(sep_obj, &sep, &sep_len))

  00034	4c 8d 44 24 50	 lea	 r8, QWORD PTR sep_len$[rsp]
  00039	48 8d 54 24 48	 lea	 rdx, QWORD PTR sep$[rsp]
  0003e	48 8b cb	 mov	 rcx, rbx
  00041	e8 00 00 00 00	 call	 PyObject_AsCharBuffer
  00046	85 c0		 test	 eax, eax
  00048	74 0d		 je	 SHORT $LN6@bytes_rpar

; 1084 :         return NULL;

  0004a	33 c0		 xor	 eax, eax

; 1091 : }

  0004c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5f		 pop	 rdi
  00056	c3		 ret	 0
$LN6@bytes_rpar:

; 1084 :         return NULL;

  00057	48 8b 44 24 48	 mov	 rax, QWORD PTR sep$[rsp]
  0005c	4c 8b 44 24 50	 mov	 r8, QWORD PTR sep_len$[rsp]
$LN1@bytes_rpar:

; 1085 : 
; 1086 :     return stringlib_rpartition(
; 1087 :         (PyObject*) self,
; 1088 :         PyBytes_AS_STRING(self), PyBytes_GET_SIZE(self),
; 1089 :         sep_obj, sep, sep_len
; 1090 :         );

  00061	4c 89 44 24 28	 mov	 QWORD PTR [rsp+40], r8
  00066	4c 8b 47 60	 mov	 r8, QWORD PTR [rdi+96]
  0006a	48 8d 57 78	 lea	 rdx, QWORD PTR [rdi+120]
  0006e	4c 8b cb	 mov	 r9, rbx
  00071	48 8b cf	 mov	 rcx, rdi
  00074	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00079	e8 00 00 00 00	 call	 stringlib_rpartition

; 1091 : }

  0007e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00083	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00087	5f		 pop	 rdi
  00088	c3		 ret	 0
bytes_rpartition ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@PNGLJNMN@?$HMOn?3rsplit?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_rsplit DD imagerel bytes_rsplit
	DD	imagerel bytes_rsplit+257
	DD	imagerel $unwind$bytes_rsplit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_rsplit DD 061101H
	DD	0153411H
	DD	0700af211H
	DD	050086009H
xdata	ENDS
;	COMDAT ??_C@_0L@PNGLJNMN@?$HMOn?3rsplit?$AA@
CONST	SEGMENT
??_C@_0L@PNGLJNMN@?$HMOn?3rsplit?$AA@ DB '|On:rsplit', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bytes_rsplit
_TEXT	SEGMENT
vsub$ = 48
maxsplit$ = 160
self$ = 160
args$ = 168
kwds$ = 176
subobj$ = 184
bytes_rsplit PROC					; COMDAT

; 1105 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 10	 mov	 QWORD PTR [r11+16], rbx
  00007	55		 push	 rbp
  00008	56		 push	 rsi
  00009	57		 push	 rdi
  0000a	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H

; 1106 :     static char *kwlist[] = {"sep", "maxsplit", 0};
; 1107 :     Py_ssize_t len = PyBytes_GET_SIZE(self), n;

  00011	48 8b 79 60	 mov	 rdi, QWORD PTR [rcx+96]
  00015	48 8b d9	 mov	 rbx, rcx

; 1108 :     Py_ssize_t maxsplit = -1;
; 1109 :     const char *s = PyBytes_AS_STRING(self), *sub;
; 1110 :     Py_buffer vsub;
; 1111 :     PyObject *list, *subobj = Py_None;
; 1112 : 
; 1113 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|On:rsplit",
; 1114 :                                      kwlist, &subobj, &maxsplit))

  00018	49 8d 4b 08	 lea	 rcx, QWORD PTR [r11+8]
  0001c	49 89 4b 90	 mov	 QWORD PTR [r11-112], rcx
  00020	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  00024	49 8b c0	 mov	 rax, r8
  00027	4c 8b d2	 mov	 r10, rdx
  0002a	49 89 4b 88	 mov	 QWORD PTR [r11-120], rcx
  0002e	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_Py_NoneStruct
  00035	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??bytes_rsplit@@9@9
  0003c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@PNGLJNMN@?$HMOn?3rsplit?$AA@
  00043	48 8b d0	 mov	 rdx, rax
  00046	49 8b ca	 mov	 rcx, r10
  00049	49 c7 43 08 ff
	ff ff ff	 mov	 QWORD PTR [r11+8], -1
  00051	49 89 6b 20	 mov	 QWORD PTR [r11+32], rbp
  00055	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  0005a	85 c0		 test	 eax, eax
  0005c	75 07		 jne	 SHORT $LN4@bytes_rspl
$LN7@bytes_rspl:

; 1115 :         return NULL;

  0005e	33 c0		 xor	 eax, eax
  00060	e9 89 00 00 00	 jmp	 $LN5@bytes_rspl
$LN4@bytes_rspl:

; 1116 :     if (maxsplit < 0)

  00065	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR maxsplit$[rsp]

; 1117 :         maxsplit = PY_SSIZE_T_MAX;
; 1118 :     if (subobj == Py_None)

  0006d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR subobj$[rsp]
  00075	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0007f	4d 85 c9	 test	 r9, r9
  00082	4c 0f 48 c8	 cmovs	 r9, rax
  00086	4c 89 8c 24 a0
	00 00 00	 mov	 QWORD PTR maxsplit$[rsp], r9
  0008e	48 3b cd	 cmp	 rcx, rbp
  00091	75 11		 jne	 SHORT $LN2@bytes_rspl

; 1119 :         return stringlib_rsplit_whitespace((PyObject*) self, s, len, maxsplit);

  00093	48 8d 53 78	 lea	 rdx, QWORD PTR [rbx+120]
  00097	4c 8b c7	 mov	 r8, rdi
  0009a	48 8b cb	 mov	 rcx, rbx
  0009d	e8 00 00 00 00	 call	 stringlib_rsplit_whitespace
  000a2	eb 4a		 jmp	 SHORT $LN5@bytes_rspl
$LN2@bytes_rspl:

; 1120 :     if (_getbuffer(subobj, &vsub) < 0)

  000a4	48 8d 54 24 30	 lea	 rdx, QWORD PTR vsub$[rsp]
  000a9	e8 00 00 00 00	 call	 _getbuffer
  000ae	48 85 c0	 test	 rax, rax

; 1121 :         return NULL;

  000b1	78 ab		 js	 SHORT $LN7@bytes_rspl

; 1122 :     sub = vsub.buf;
; 1123 :     n = vsub.len;
; 1124 : 
; 1125 :     list = stringlib_rsplit((PyObject*) self, s, len, sub, n, maxsplit);

  000b3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR maxsplit$[rsp]
  000bb	4c 8b 4c 24 30	 mov	 r9, QWORD PTR vsub$[rsp]
  000c0	48 8d 53 78	 lea	 rdx, QWORD PTR [rbx+120]
  000c4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000c9	48 8b 44 24 40	 mov	 rax, QWORD PTR vsub$[rsp+16]
  000ce	4c 8b c7	 mov	 r8, rdi
  000d1	48 8b cb	 mov	 rcx, rbx
  000d4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d9	e8 00 00 00 00	 call	 stringlib_rsplit

; 1126 :     PyBuffer_Release(&vsub);

  000de	48 8d 4c 24 30	 lea	 rcx, QWORD PTR vsub$[rsp]
  000e3	48 8b d8	 mov	 rbx, rax
  000e6	e8 00 00 00 00	 call	 PyBuffer_Release

; 1127 :     return list;

  000eb	48 8b c3	 mov	 rax, rbx
$LN5@bytes_rspl:

; 1128 : }

  000ee	48 8b 9c 24 a8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+168]
  000f6	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  000fd	5f		 pop	 rdi
  000fe	5e		 pop	 rsi
  000ff	5d		 pop	 rbp
  00100	c3		 ret	 0
bytes_rsplit ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@MJLEPPKI@join?$CI?$CJ?5result?5is?5too?5long?5for?5by@ ; `string'
PUBLIC	??_C@_0CP@BJLDFOBC@sequence?5item?5?$CFzd?3?5expected?5byte@ ; `string'
EXTRN	_PyByteArray_empty_string:BYTE
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyByteArray_Type:BYTE
EXTRN	PySequence_Size:PROC
EXTRN	PySequence_Fast:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$bytes_join DD imagerel bytes_join
	DD	imagerel bytes_join+74
	DD	imagerel $unwind$bytes_join
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$bytes_join DD imagerel bytes_join+74
	DD	imagerel bytes_join+129
	DD	imagerel $chain$0$bytes_join
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$bytes_join DD imagerel bytes_join+129
	DD	imagerel bytes_join+206
	DD	imagerel $chain$3$bytes_join
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$bytes_join DD imagerel bytes_join+206
	DD	imagerel bytes_join+811
	DD	imagerel $chain$4$bytes_join
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$bytes_join DD imagerel bytes_join+811
	DD	imagerel bytes_join+834
	DD	imagerel $chain$5$bytes_join
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$bytes_join DD 021H
	DD	imagerel bytes_join+129
	DD	imagerel bytes_join+206
	DD	imagerel $chain$3$bytes_join
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$bytes_join DD 020521H
	DD	0d5405H
	DD	imagerel bytes_join+129
	DD	imagerel bytes_join+206
	DD	imagerel $chain$3$bytes_join
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$bytes_join DD 040521H
	DD	0e6405H
	DD	0ff400H
	DD	imagerel bytes_join
	DD	imagerel bytes_join+74
	DD	imagerel $unwind$bytes_join
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$bytes_join DD 020521H
	DD	0ff405H
	DD	imagerel bytes_join
	DD	imagerel bytes_join+74
	DD	imagerel $unwind$bytes_join
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_join DD 060d01H
	DD	0e009520dH
	DD	0c005d007H
	DD	030027003H
xdata	ENDS
;	COMDAT ??_C@_0CE@MJLEPPKI@join?$CI?$CJ?5result?5is?5too?5long?5for?5by@
CONST	SEGMENT
??_C@_0CE@MJLEPPKI@join?$CI?$CJ?5result?5is?5too?5long?5for?5by@ DB 'join'
	DB	'() result is too long for bytes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BJLDFOBC@sequence?5item?5?$CFzd?3?5expected?5byte@
CONST	SEGMENT
??_C@_0CP@BJLDFOBC@sequence?5item?5?$CFzd?3?5expected?5byte@ DB 'sequence'
	DB	' item %zd: expected bytes, %.80s found', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
CONST	ENDS
;	COMDAT bytes_join
_TEXT	SEGMENT
sep$1$ = 96
self$ = 96
orig$ = 104
bytes_join PROC						; COMDAT

; 1139 : {

  00000	40 53		 push	 rbx
  00002	57		 push	 rdi
  00003	41 54		 push	 r12
  00005	41 55		 push	 r13
  00007	41 56		 push	 r14
  00009	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1140 :     char *sep = PyBytes_AS_STRING(self);
; 1141 :     const Py_ssize_t seplen = PyBytes_GET_SIZE(self);

  0000d	4c 8b 71 60	 mov	 r14, QWORD PTR [rcx+96]
  00011	48 8b c2	 mov	 rax, rdx
  00014	4c 8d 61 78	 lea	 r12, QWORD PTR [rcx+120]

; 1142 :     PyObject *res = NULL;
; 1143 :     char *p;
; 1144 :     Py_ssize_t seqlen = 0;
; 1145 :     size_t sz = 0;
; 1146 :     Py_ssize_t i;
; 1147 :     PyObject *seq, *item;
; 1148 : 
; 1149 :     seq = PySequence_Fast(orig, "");

  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0001f	45 33 ed	 xor	 r13d, r13d
  00022	48 8b c8	 mov	 rcx, rax
  00025	4c 89 64 24 60	 mov	 QWORD PTR sep$1$[rsp], r12
  0002a	41 8b fd	 mov	 edi, r13d
  0002d	e8 00 00 00 00	 call	 PySequence_Fast
  00032	48 8b d8	 mov	 rbx, rax

; 1150 :     if (seq == NULL) {

  00035	48 85 c0	 test	 rax, rax
  00038	75 0d		 jne	 SHORT $LN34@bytes_join

; 1226 : }

  0003a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003e	41 5e		 pop	 r14
  00040	41 5d		 pop	 r13
  00042	41 5c		 pop	 r12
  00044	5f		 pop	 rdi
  00045	5b		 pop	 rbx
  00046	c3		 ret	 0
$LN34@bytes_join:

; 1151 :         return NULL;
; 1152 :     }
; 1153 : 
; 1154 :     seqlen = PySequence_Size(seq);

  00047	48 8b c8	 mov	 rcx, rax
  0004a	4c 89 7c 24 78	 mov	 QWORD PTR [rsp+120], r15
  0004f	e8 00 00 00 00	 call	 PySequence_Size
  00054	4c 8b f8	 mov	 r15, rax

; 1155 :     if (seqlen == 0) {

  00057	48 85 c0	 test	 rax, rax
  0005a	75 25		 jne	 SHORT $LN33@bytes_join

; 1156 :         Py_DECREF(seq);

  0005c	48 8b cb	 mov	 rcx, rbx
  0005f	e8 00 00 00 00	 call	 _Py_DecRef

; 1157 :         return PyBytes_FromString("");

  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0006b	4c 8b 7c 24 78	 mov	 r15, QWORD PTR [rsp+120]

; 1226 : }

  00070	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00074	41 5e		 pop	 r14
  00076	41 5d		 pop	 r13
  00078	41 5c		 pop	 r12
  0007a	5f		 pop	 rdi
  0007b	5b		 pop	 rbx
  0007c	e9 00 00 00 00	 jmp	 PyBytes_FromString
$LN33@bytes_join:
  00081	48 89 74 24 70	 mov	 QWORD PTR [rsp+112], rsi

; 1158 :     }
; 1159 :     if (seqlen == 1) {

  00086	48 83 f8 01	 cmp	 rax, 1
  0008a	75 42		 jne	 SHORT $LN31@bytes_join

; 1160 :         item = PySequence_Fast_GET_ITEM(seq, 0);

  0008c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00090	f7 80 00 01 00
	00 00 00 00 02	 test	 DWORD PTR [rax+256], 33554432 ; 02000000H
  0009a	74 09		 je	 SHORT $LN37@bytes_join
  0009c	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  000a0	48 8b 30	 mov	 rsi, QWORD PTR [rax]
  000a3	eb 04		 jmp	 SHORT $LN38@bytes_join
$LN37@bytes_join:
  000a5	48 8b 73 70	 mov	 rsi, QWORD PTR [rbx+112]
$LN38@bytes_join:

; 1161 :         if (PyBytes_CheckExact(item)) {

  000a9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  000b0	48 39 46 58	 cmp	 QWORD PTR [rsi+88], rax
  000b4	75 18		 jne	 SHORT $LN31@bytes_join

; 1162 :             Py_INCREF(item);

  000b6	48 8b ce	 mov	 rcx, rsi
  000b9	e8 00 00 00 00	 call	 _Py_IncRef

; 1163 :             Py_DECREF(seq);

  000be	48 8b cb	 mov	 rcx, rbx
  000c1	e8 00 00 00 00	 call	 _Py_DecRef

; 1164 :             return item;

  000c6	48 8b c6	 mov	 rax, rsi
  000c9	e9 5d 02 00 00	 jmp	 $LN68@bytes_join
$LN31@bytes_join:
  000ce	48 89 6c 24 68	 mov	 QWORD PTR [rsp+104], rbp

; 1165 :         }
; 1166 :     }
; 1167 : 
; 1168 :     /* There are at least two things to join, or else we have a subclass
; 1169 :      * of the builtin types in the sequence.
; 1170 :      * Do a pre-pass to figure out the total amount of space we'll
; 1171 :      * need (sz), and see whether all argument are bytes.
; 1172 :      */
; 1173 :     /* XXX Shouldn't we use _getbuffer() on these items instead? */
; 1174 :     for (i = 0; i < seqlen; i++) {

  000d3	49 8b f5	 mov	 rsi, r13
  000d6	4d 85 ff	 test	 r15, r15
  000d9	0f 8e 85 00 00
	00		 jle	 $LN28@bytes_join
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  000e6	49 b8 ff ff ff
	ff ff ff ff 7f	 mov	 r8, 9223372036854775807	; 7fffffffffffffffH
$LL30@bytes_join:

; 1175 :         const size_t old_sz = sz;
; 1176 :         item = PySequence_Fast_GET_ITEM(seq, i);

  000f0	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000f4	4c 8b e7	 mov	 r12, rdi
  000f7	f7 80 00 01 00
	00 00 00 00 02	 test	 DWORD PTR [rax+256], 33554432 ; 02000000H
  00101	74 0a		 je	 SHORT $LN39@bytes_join
  00103	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  00107	48 8b 2c f0	 mov	 rbp, QWORD PTR [rax+rsi*8]
  0010b	eb 05		 jmp	 SHORT $LN40@bytes_join
$LN39@bytes_join:
  0010d	48 8b 6c f3 70	 mov	 rbp, QWORD PTR [rbx+rsi*8+112]
$LN40@bytes_join:

; 1177 :         if (!PyBytes_Check(item) && !PyByteArray_Check(item)) {

  00112	48 8b 4d 58	 mov	 rcx, QWORD PTR [rbp+88]
  00116	f7 81 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rcx+256], 134217728 ; 08000000H
  00120	75 1f		 jne	 SHORT $LN27@bytes_join
  00122	48 3b ca	 cmp	 rcx, rdx
  00125	74 1a		 je	 SHORT $LN27@bytes_join
  00127	e8 00 00 00 00	 call	 PyType_IsSubtype
  0012c	85 c0		 test	 eax, eax
  0012e	74 72		 je	 SHORT $LN60@bytes_join
  00130	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  00137	49 b8 ff ff ff
	ff ff ff ff 7f	 mov	 r8, 9223372036854775807	; 7fffffffffffffffH
$LN27@bytes_join:

; 1184 :         }
; 1185 :         sz += Py_SIZE(item);

  00141	48 03 7d 60	 add	 rdi, QWORD PTR [rbp+96]

; 1186 :         if (i != 0)

  00145	48 85 f6	 test	 rsi, rsi
  00148	74 03		 je	 SHORT $LN26@bytes_join

; 1187 :             sz += seplen;

  0014a	49 03 fe	 add	 rdi, r14
$LN26@bytes_join:

; 1188 :         if (sz < old_sz || sz > PY_SSIZE_T_MAX) {

  0014d	49 3b fc	 cmp	 rdi, r12
  00150	72 7d		 jb	 SHORT $LN61@bytes_join
  00152	49 3b f8	 cmp	 rdi, r8
  00155	77 78		 ja	 SHORT $LN61@bytes_join

; 1165 :         }
; 1166 :     }
; 1167 : 
; 1168 :     /* There are at least two things to join, or else we have a subclass
; 1169 :      * of the builtin types in the sequence.
; 1170 :      * Do a pre-pass to figure out the total amount of space we'll
; 1171 :      * need (sz), and see whether all argument are bytes.
; 1172 :      */
; 1173 :     /* XXX Shouldn't we use _getbuffer() on these items instead? */
; 1174 :     for (i = 0; i < seqlen; i++) {

  00157	48 ff c6	 inc	 rsi
  0015a	49 3b f7	 cmp	 rsi, r15
  0015d	7c 91		 jl	 SHORT $LL30@bytes_join

; 1188 :         if (sz < old_sz || sz > PY_SSIZE_T_MAX) {

  0015f	4c 8b 64 24 60	 mov	 r12, QWORD PTR sep$1$[rsp]
$LN28@bytes_join:

; 1193 :         }
; 1194 :     }
; 1195 : 
; 1196 :     /* Allocate result space. */
; 1197 :     res = PyBytes_FromStringAndSize((char*)NULL, sz);

  00164	48 8b d7	 mov	 rdx, rdi
  00167	33 c9		 xor	 ecx, ecx
  00169	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0016e	48 8b e8	 mov	 rbp, rax

; 1198 :     if (res == NULL) {

  00171	48 85 c0	 test	 rax, rax

; 1199 :         Py_DECREF(seq);
; 1200 :         return NULL;

  00174	74 6c		 je	 SHORT $LN70@bytes_join

; 1201 :     }
; 1202 : 
; 1203 :     /* Catenate everything. */
; 1204 :     /* I'm not worried about a PyByteArray item growing because there's
; 1205 :        nowhere in this function where we release the GIL. */
; 1206 :     p = PyBytes_AS_STRING(res);

  00176	48 8d 70 78	 lea	 rsi, QWORD PTR [rax+120]

; 1207 :     for (i = 0; i < seqlen; ++i) {

  0017a	4d 85 ff	 test	 r15, r15
  0017d	0f 8e 3b 01 00
	00		 jle	 $LN20@bytes_join
$LL22@bytes_join:

; 1208 :         size_t n;
; 1209 :         char *q;
; 1210 :         if (i) {

  00183	4d 85 ed	 test	 r13, r13
  00186	0f 84 97 00 00
	00		 je	 $LN19@bytes_join

; 1211 :             Py_MEMCPY(p, sep, seplen);

  0018c	49 83 fe 10	 cmp	 r14, 16
  00190	72 5f		 jb	 SHORT $LN15@bytes_join
  00192	4d 8b c6	 mov	 r8, r14
  00195	49 8b d4	 mov	 rdx, r12
  00198	48 8b ce	 mov	 rcx, rsi
  0019b	e8 00 00 00 00	 call	 memcpy
  001a0	eb 7e		 jmp	 SHORT $LN17@bytes_join
$LN60@bytes_join:

; 1178 :             PyErr_Format(PyExc_TypeError,
; 1179 :                          "sequence item %zd: expected bytes,"
; 1180 :                          " %.80s found",
; 1181 :                          i, Py_TYPE(item)->tp_name);

  001a2	4c 8b 4d 58	 mov	 r9, QWORD PTR [rbp+88]
  001a6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@BJLDFOBC@sequence?5item?5?$CFzd?3?5expected?5byte@
  001b4	4d 8b 49 70	 mov	 r9, QWORD PTR [r9+112]
  001b8	4c 8b c6	 mov	 r8, rsi
  001bb	e8 00 00 00 00	 call	 PyErr_Format

; 1182 :             Py_DECREF(seq);

  001c0	48 8b cb	 mov	 rcx, rbx
  001c3	e8 00 00 00 00	 call	 _Py_DecRef

; 1183 :             return NULL;

  001c8	33 c0		 xor	 eax, eax
  001ca	e9 57 01 00 00	 jmp	 $LN69@bytes_join
$LN61@bytes_join:

; 1189 :             PyErr_SetString(PyExc_OverflowError,
; 1190 :                 "join() result is too long for bytes");

  001cf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  001d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@MJLEPPKI@join?$CI?$CJ?5result?5is?5too?5long?5for?5by@
  001dd	e8 00 00 00 00	 call	 PyErr_SetString
$LN70@bytes_join:

; 1191 :             Py_DECREF(seq);

  001e2	48 8b cb	 mov	 rcx, rbx
  001e5	e8 00 00 00 00	 call	 _Py_DecRef

; 1192 :             return NULL;

  001ea	33 c0		 xor	 eax, eax
  001ec	e9 35 01 00 00	 jmp	 $LN69@bytes_join
$LN15@bytes_join:

; 1211 :             Py_MEMCPY(p, sep, seplen);

  001f1	4d 85 f6	 test	 r14, r14
  001f4	74 2a		 je	 SHORT $LN17@bytes_join
  001f6	4d 8b c4	 mov	 r8, r12
  001f9	48 8b ce	 mov	 rcx, rsi
  001fc	49 8b d6	 mov	 rdx, r14
  001ff	4c 2b c6	 sub	 r8, rsi
  00202	66 66 66 66 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL13@bytes_join:
  00210	41 0f b6 04 08	 movzx	 eax, BYTE PTR [r8+rcx]
  00215	48 ff c1	 inc	 rcx
  00218	48 ff ca	 dec	 rdx
  0021b	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  0021e	75 f0		 jne	 SHORT $LL13@bytes_join
$LN17@bytes_join:

; 1212 :             p += seplen;

  00220	49 03 f6	 add	 rsi, r14
$LN19@bytes_join:

; 1213 :         }
; 1214 :         item = PySequence_Fast_GET_ITEM(seq, i);

  00223	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00227	f7 80 00 01 00
	00 00 00 00 02	 test	 DWORD PTR [rax+256], 33554432 ; 02000000H
  00231	74 0a		 je	 SHORT $LN41@bytes_join
  00233	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  00237	4a 8b 14 e8	 mov	 rdx, QWORD PTR [rax+r13*8]
  0023b	eb 05		 jmp	 SHORT $LN42@bytes_join
$LN41@bytes_join:
  0023d	4a 8b 54 eb 70	 mov	 rdx, QWORD PTR [rbx+r13*8+112]
$LN42@bytes_join:

; 1215 :         n = Py_SIZE(item);
; 1216 :         if (PyBytes_Check(item))

  00242	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00246	48 8b 7a 60	 mov	 rdi, QWORD PTR [rdx+96]
  0024a	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  00254	74 06		 je	 SHORT $LN10@bytes_join

; 1217 :             q = PyBytes_AS_STRING(item);

  00256	48 83 c2 78	 add	 rdx, 120		; 00000078H

; 1218 :         else

  0025a	eb 15		 jmp	 SHORT $LN8@bytes_join
$LN10@bytes_join:

; 1219 :             q = PyByteArray_AS_STRING(item);

  0025c	48 85 ff	 test	 rdi, rdi
  0025f	74 09		 je	 SHORT $LN43@bytes_join
  00261	48 8b 92 80 00
	00 00		 mov	 rdx, QWORD PTR [rdx+128]
  00268	eb 07		 jmp	 SHORT $LN8@bytes_join
$LN43@bytes_join:
  0026a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyByteArray_empty_string
$LN8@bytes_join:

; 1220 :         Py_MEMCPY(p, q, n);

  00271	48 83 ff 10	 cmp	 rdi, 16
  00275	72 0d		 jb	 SHORT $LN5@bytes_join
  00277	4c 8b c7	 mov	 r8, rdi
  0027a	48 8b ce	 mov	 rcx, rsi
  0027d	e8 00 00 00 00	 call	 memcpy
  00282	eb 2b		 jmp	 SHORT $LN7@bytes_join
$LN5@bytes_join:
  00284	48 85 ff	 test	 rdi, rdi
  00287	74 26		 je	 SHORT $LN7@bytes_join
  00289	48 8b ce	 mov	 rcx, rsi
  0028c	48 2b d6	 sub	 rdx, rsi
  0028f	4c 8b c7	 mov	 r8, rdi
  00292	66 66 66 66 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL3@bytes_join:
  002a0	0f b6 04 0a	 movzx	 eax, BYTE PTR [rdx+rcx]
  002a4	48 ff c1	 inc	 rcx
  002a7	49 ff c8	 dec	 r8
  002aa	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  002ad	75 f1		 jne	 SHORT $LL3@bytes_join
$LN7@bytes_join:

; 1207 :     for (i = 0; i < seqlen; ++i) {

  002af	49 ff c5	 inc	 r13

; 1221 :         p += n;

  002b2	48 03 f7	 add	 rsi, rdi
  002b5	4d 3b ef	 cmp	 r13, r15
  002b8	0f 8c c5 fe ff
	ff		 jl	 $LL22@bytes_join
$LN20@bytes_join:

; 1222 :     }
; 1223 : 
; 1224 :     Py_DECREF(seq);

  002be	e8 00 00 00 00	 call	 _Py_PXCTX
  002c3	85 c0		 test	 eax, eax
  002c5	75 5c		 jne	 SHORT $LN55@bytes_join
  002c7	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  002cb	a8 20		 test	 al, 32			; 00000020H
  002cd	75 4c		 jne	 SHORT $LN49@bytes_join
  002cf	84 c0		 test	 al, al
  002d1	78 48		 js	 SHORT $LN49@bytes_join
  002d3	a8 02		 test	 al, 2
  002d5	75 4c		 jne	 SHORT $LN55@bytes_join
  002d7	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  002db	75 46		 jne	 SHORT $LN55@bytes_join
  002dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  002eb	4c 8b cb	 mov	 r9, rbx
  002ee	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002f4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002fc	e8 00 00 00 00	 call	 _PyParallel_Guard
  00301	48 8b cb	 mov	 rcx, rbx
  00304	85 c0		 test	 eax, eax
  00306	74 07		 je	 SHORT $LN54@bytes_join
  00308	e8 00 00 00 00	 call	 _Px_Dealloc
  0030d	eb 14		 jmp	 SHORT $LN55@bytes_join
$LN54@bytes_join:
  0030f	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00313	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00319	eb 08		 jmp	 SHORT $LN55@bytes_join
$LN49@bytes_join:
  0031b	48 8b cb	 mov	 rcx, rbx
  0031e	e8 00 00 00 00	 call	 Px_DecRef
$LN55@bytes_join:

; 1225 :     return res;

  00323	48 8b c5	 mov	 rax, rbp
$LN69@bytes_join:
  00326	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
$LN68@bytes_join:
  0032b	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  00330	4c 8b 7c 24 78	 mov	 r15, QWORD PTR [rsp+120]

; 1226 : }

  00335	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00339	41 5e		 pop	 r14
  0033b	41 5d		 pop	 r13
  0033d	41 5c		 pop	 r12
  0033f	5f		 pop	 rdi
  00340	5b		 pop	 rbx
  00341	c3		 ret	 0
bytes_join ENDP
_TEXT	ENDS
PUBLIC	_PyBytes_Join
; Function compile flags: /Ogtpy
;	COMDAT _PyBytes_Join
_TEXT	SEGMENT
sep$ = 8
x$ = 16
_PyBytes_Join PROC					; COMDAT

; 1231 :     assert(sep != NULL && PyBytes_Check(sep));
; 1232 :     assert(x != NULL);
; 1233 :     return bytes_join(sep, x);
; 1234 : }

  00000	e9 00 00 00 00	 jmp	 bytes_join
_PyBytes_Join ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@BAIIFBKB@find?1rfind?1index?1rindex?$AA@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\objects\stringlib\find.h
pdata	SEGMENT
$pdata$bytes_find_internal DD imagerel bytes_find_internal
	DD	imagerel bytes_find_internal+646
	DD	imagerel $unwind$bytes_find_internal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_find_internal DD 0d2401H
	DD	0247424H
	DD	0236424H
	DD	0223424H
	DD	01c0124H
	DD	0e016f018H
	DD	0c012d014H
	DD	05010H
xdata	ENDS
;	COMDAT ??_C@_0BI@BAIIFBKB@find?1rfind?1index?1rindex?$AA@
CONST	SEGMENT
??_C@_0BI@BAIIFBKB@find?1rfind?1index?1rindex?$AA@ DB 'find/rfind/index/r'
	DB	'index', 00H					; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
CONST	ENDS
;	COMDAT bytes_find_internal
_TEXT	SEGMENT
tmp_end$27196 = 48
tmp_start$27195 = 56
obj_end$27198 = 64
tmp_subobj$27194 = 72
format$27199 = 80
subbuf$ = 144
self$ = 272
args$ = 280
dir$ = 288
obj_start$27197 = 296
byte$ = 296
bytes_find_internal PROC				; COMDAT

; 1253 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	55		 push	 rbp
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 8d 6c 24 c9	 lea	 rbp, QWORD PTR [rsp-55]
  0001d	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  00024	4c 8b e9	 mov	 r13, rcx

; 1254 :     PyObject *subobj;
; 1255 :     char byte;
; 1256 :     Py_buffer subbuf;
; 1257 :     const char *sub;
; 1258 :     Py_ssize_t sub_len;
; 1259 :     Py_ssize_t start=0, end=PY_SSIZE_T_MAX;
; 1260 :     Py_ssize_t res;
; 1261 : 
; 1262 :     if (!stringlib_parse_args_finds_byte("find/rfind/index/rindex",
; 1263 :                                          args, &subobj, &byte, &start, &end))

  00027	48 83 c9 ff	 or	 rcx, -1
  0002b	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00035	48 89 45 87	 mov	 QWORD PTR tmp_end$27196[rbp-169], rax
  00039	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ??_C@_05BBAJLHME@O?$HMOO?3?$AA@
  0003f	45 8b f0	 mov	 r14d, r8d
  00042	89 45 a7	 mov	 DWORD PTR format$27199[rbp-169], eax
  00045	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_05BBAJLHME@O?$HMOO?3?$AA@+4
  0004c	48 8b da	 mov	 rbx, rdx
  0004f	66 89 45 ab	 mov	 WORD PTR format$27199[rbp-165], ax
  00053	33 c0		 xor	 eax, eax
  00055	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
  0005c	48 89 45 ad	 mov	 QWORD PTR format$27199[rbp-163], rax
  00060	48 89 45 b5	 mov	 QWORD PTR format$27199[rbp-155], rax
  00064	48 89 45 bd	 mov	 QWORD PTR format$27199[rbp-147], rax
  00068	48 89 45 c5	 mov	 QWORD PTR format$27199[rbp-139], rax
  0006c	48 89 45 cd	 mov	 QWORD PTR format$27199[rbp-131], rax
  00070	89 45 d5	 mov	 DWORD PTR format$27199[rbp-123], eax
  00073	48 8d 7d a7	 lea	 rdi, QWORD PTR format$27199[rbp-169]
  00077	41 b8 31 00 00
	00		 mov	 r8d, 49			; 00000031H
  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@BAIIFBKB@find?1rfind?1index?1rindex?$AA@
  00084	f2 ae		 repne scasb
  00086	45 33 ff	 xor	 r15d, r15d
  00089	48 89 75 7f	 mov	 QWORD PTR obj_start$27197[rbp-169], rsi
  0008d	48 f7 d1	 not	 rcx
  00090	4c 89 7d 8f	 mov	 QWORD PTR tmp_start$27195[rbp-169], r15
  00094	48 89 75 97	 mov	 QWORD PTR obj_end$27198[rbp-169], rsi
  00098	48 ff c9	 dec	 rcx
  0009b	4c 2b c1	 sub	 r8, rcx
  0009e	48 8d 4c 0d a7	 lea	 rcx, QWORD PTR format$27199[rbp+rcx-169]
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy
  000a9	48 8d 45 97	 lea	 rax, QWORD PTR obj_end$27198[rbp-169]
  000ad	4c 8d 4d 7f	 lea	 r9, QWORD PTR obj_start$27197[rbp-169]
  000b1	4c 8d 45 9f	 lea	 r8, QWORD PTR tmp_subobj$27194[rbp-169]
  000b5	48 8d 55 a7	 lea	 rdx, QWORD PTR format$27199[rbp-169]
  000b9	48 8b cb	 mov	 rcx, rbx
  000bc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c1	44 88 7d d8	 mov	 BYTE PTR format$27199[rbp-120], r15b
  000c5	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  000ca	85 c0		 test	 eax, eax
  000cc	0f 84 8c 01 00
	00		 je	 $LN42@bytes_find
  000d2	48 8b 4d 7f	 mov	 rcx, QWORD PTR obj_start$27197[rbp-169]
  000d6	48 3b ce	 cmp	 rcx, rsi
  000d9	74 11		 je	 SHORT $LN20@bytes_find
  000db	48 8d 55 8f	 lea	 rdx, QWORD PTR tmp_start$27195[rbp-169]
  000df	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  000e4	85 c0		 test	 eax, eax
  000e6	0f 84 72 01 00
	00		 je	 $LN42@bytes_find
$LN20@bytes_find:
  000ec	48 8b 4d 97	 mov	 rcx, QWORD PTR obj_end$27198[rbp-169]
  000f0	48 3b ce	 cmp	 rcx, rsi
  000f3	74 11		 je	 SHORT $LN18@bytes_find
  000f5	48 8d 55 87	 lea	 rdx, QWORD PTR tmp_end$27196[rbp-169]
  000f9	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  000fe	85 c0		 test	 eax, eax
  00100	0f 84 58 01 00
	00		 je	 $LN42@bytes_find
$LN18@bytes_find:
  00106	48 8b 75 9f	 mov	 rsi, QWORD PTR tmp_subobj$27194[rbp-169]
  0010a	48 8b 5d 8f	 mov	 rbx, QWORD PTR tmp_start$27195[rbp-169]
  0010e	48 8b 7d 87	 mov	 rdi, QWORD PTR tmp_end$27196[rbp-169]
  00112	48 8b ce	 mov	 rcx, rsi
  00115	e8 00 00 00 00	 call	 PyNumber_Check
  0011a	85 c0		 test	 eax, eax
  0011c	74 3f		 je	 SHORT $LN43@bytes_find
  0011e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  00125	48 8b ce	 mov	 rcx, rsi
  00128	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  0012d	48 83 f8 ff	 cmp	 rax, -1
  00131	75 51		 jne	 SHORT $LN12@bytes_find
  00133	e8 00 00 00 00	 call	 PyErr_Occurred
  00138	48 85 c0	 test	 rax, rax
  0013b	0f 84 0a 01 00
	00		 je	 $LN10@bytes_find
  00141	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  00148	48 8b c8	 mov	 rcx, rax
  0014b	e8 00 00 00 00	 call	 PyErr_GivenExceptionMatches
  00150	85 c0		 test	 eax, eax
  00152	0f 85 f3 00 00
	00		 jne	 $LN10@bytes_find
  00158	e8 00 00 00 00	 call	 PyErr_Clear
$LN43@bytes_find:
  0015d	4c 8b e6	 mov	 r12, rsi

; 1265 : 
; 1266 :     if (subobj) {

  00160	48 85 f6	 test	 rsi, rsi
  00163	74 31		 je	 SHORT $LN6@bytes_find

; 1267 :         if (_getbuffer(subobj, &subbuf) < 0)

  00165	48 8d 55 e7	 lea	 rdx, QWORD PTR subbuf$[rbp-169]
  00169	48 8b ce	 mov	 rcx, rsi
  0016c	e8 00 00 00 00	 call	 _getbuffer
  00171	48 85 c0	 test	 rax, rax

; 1268 :             return -2;

  00174	0f 88 e4 00 00
	00		 js	 $LN42@bytes_find

; 1269 : 
; 1270 :         sub = subbuf.buf;

  0017a	4c 8b 45 e7	 mov	 r8, QWORD PTR subbuf$[rbp-169]

; 1271 :         sub_len = subbuf.len;

  0017e	4c 8b 4d f7	 mov	 r9, QWORD PTR subbuf$[rbp-153]

; 1272 :     }
; 1273 :     else {

  00182	eb 1c		 jmp	 SHORT $LN4@bytes_find

; 1254 :     PyObject *subobj;
; 1255 :     char byte;
; 1256 :     Py_buffer subbuf;
; 1257 :     const char *sub;
; 1258 :     Py_ssize_t sub_len;
; 1259 :     Py_ssize_t start=0, end=PY_SSIZE_T_MAX;
; 1260 :     Py_ssize_t res;
; 1261 : 
; 1262 :     if (!stringlib_parse_args_finds_byte("find/rfind/index/rindex",
; 1263 :                                          args, &subobj, &byte, &start, &end))

$LN12@bytes_find:
  00184	48 3d ff 00 00
	00		 cmp	 rax, 255		; 000000ffH
  0018a	0f 87 bb 00 00
	00		 ja	 $LN10@bytes_find
  00190	4d 8b e7	 mov	 r12, r15
  00193	88 45 7f	 mov	 BYTE PTR byte$[rbp-169], al
$LN6@bytes_find:

; 1274 :         sub = &byte;

  00196	4c 8d 45 7f	 lea	 r8, QWORD PTR byte$[rbp-169]

; 1275 :         sub_len = 1;

  0019a	41 b9 01 00 00
	00		 mov	 r9d, 1
$LN4@bytes_find:

; 1276 :     }
; 1277 : 
; 1278 :     if (dir > 0)
; 1279 :         res = stringlib_find_slice(
; 1280 :             PyBytes_AS_STRING(self), PyBytes_GET_SIZE(self),
; 1281 :             sub, sub_len, start, end);

  001a0	49 8b 4d 60	 mov	 rcx, QWORD PTR [r13+96]
  001a4	45 85 f6	 test	 r14d, r14d
  001a7	7e 47		 jle	 SHORT $LN3@bytes_find
  001a9	48 3b f9	 cmp	 rdi, rcx
  001ac	7e 05		 jle	 SHORT $LN30@bytes_find
  001ae	48 8b f9	 mov	 rdi, rcx
  001b1	eb 13		 jmp	 SHORT $LN27@bytes_find
$LN30@bytes_find:
  001b3	48 85 ff	 test	 rdi, rdi
  001b6	79 0e		 jns	 SHORT $LN27@bytes_find
  001b8	48 8d 04 39	 lea	 rax, QWORD PTR [rcx+rdi]
  001bc	48 8b f8	 mov	 rdi, rax
  001bf	48 85 c0	 test	 rax, rax
  001c2	49 0f 48 ff	 cmovs	 rdi, r15
$LN27@bytes_find:
  001c6	48 85 db	 test	 rbx, rbx
  001c9	79 0e		 jns	 SHORT $LN25@bytes_find
  001cb	48 8d 04 19	 lea	 rax, QWORD PTR [rcx+rbx]
  001cf	48 8b d8	 mov	 rbx, rax
  001d2	48 85 c0	 test	 rax, rax
  001d5	49 0f 48 df	 cmovs	 rbx, r15
$LN25@bytes_find:
  001d9	48 2b fb	 sub	 rdi, rbx
  001dc	4a 8d 4c 2b 78	 lea	 rcx, QWORD PTR [rbx+r13+120]
  001e1	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  001e6	48 8b d7	 mov	 rdx, rdi
  001e9	e8 00 00 00 00	 call	 stringlib_find

; 1282 :     else

  001ee	eb 45		 jmp	 SHORT $LN44@bytes_find
$LN3@bytes_find:

; 1283 :         res = stringlib_rfind_slice(
; 1284 :             PyBytes_AS_STRING(self), PyBytes_GET_SIZE(self),
; 1285 :             sub, sub_len, start, end);

  001f0	48 3b f9	 cmp	 rdi, rcx
  001f3	7e 05		 jle	 SHORT $LN38@bytes_find
  001f5	48 8b f9	 mov	 rdi, rcx
  001f8	eb 13		 jmp	 SHORT $LN35@bytes_find
$LN38@bytes_find:
  001fa	48 85 ff	 test	 rdi, rdi
  001fd	79 0e		 jns	 SHORT $LN35@bytes_find
  001ff	48 8d 04 39	 lea	 rax, QWORD PTR [rcx+rdi]
  00203	48 8b f8	 mov	 rdi, rax
  00206	48 85 c0	 test	 rax, rax
  00209	49 0f 48 ff	 cmovs	 rdi, r15
$LN35@bytes_find:
  0020d	48 85 db	 test	 rbx, rbx
  00210	79 0e		 jns	 SHORT $LN33@bytes_find
  00212	48 8d 04 19	 lea	 rax, QWORD PTR [rcx+rbx]
  00216	48 8b d8	 mov	 rbx, rax
  00219	48 85 c0	 test	 rax, rax
  0021c	49 0f 48 df	 cmovs	 rbx, r15
$LN33@bytes_find:
  00220	48 2b fb	 sub	 rdi, rbx
  00223	4a 8d 4c 2b 78	 lea	 rcx, QWORD PTR [rbx+r13+120]
  00228	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0022d	48 8b d7	 mov	 rdx, rdi
  00230	e8 00 00 00 00	 call	 stringlib_rfind
$LN44@bytes_find:
  00235	48 8b f8	 mov	 rdi, rax

; 1286 : 
; 1287 :     if (subobj)

  00238	4d 85 e4	 test	 r12, r12
  0023b	74 09		 je	 SHORT $LN1@bytes_find

; 1288 :         PyBuffer_Release(&subbuf);

  0023d	48 8d 4d e7	 lea	 rcx, QWORD PTR subbuf$[rbp-169]
  00241	e8 00 00 00 00	 call	 PyBuffer_Release
$LN1@bytes_find:

; 1289 : 
; 1290 :     return res;

  00246	48 8b c7	 mov	 rax, rdi
  00249	eb 1a		 jmp	 SHORT $LN8@bytes_find

; 1254 :     PyObject *subobj;
; 1255 :     char byte;
; 1256 :     Py_buffer subbuf;
; 1257 :     const char *sub;
; 1258 :     Py_ssize_t sub_len;
; 1259 :     Py_ssize_t start=0, end=PY_SSIZE_T_MAX;
; 1260 :     Py_ssize_t res;
; 1261 : 
; 1262 :     if (!stringlib_parse_args_finds_byte("find/rfind/index/rindex",
; 1263 :                                          args, &subobj, &byte, &start, &end))

$LN10@bytes_find:
  0024b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00252	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@NJOIMFKH@byte?5must?5be?5in?5range?$CI0?0?5256?$CJ?$AA@
  00259	e8 00 00 00 00	 call	 PyErr_SetString
$LN42@bytes_find:

; 1264 :         return -2;

  0025e	48 c7 c0 fe ff
	ff ff		 mov	 rax, -2
$LN8@bytes_find:

; 1291 : }

  00265	4c 8d 9c 24 e0
	00 00 00	 lea	 r11, QWORD PTR [rsp+224]
  0026d	49 8b 5b 30	 mov	 rbx, QWORD PTR [r11+48]
  00271	49 8b 73 38	 mov	 rsi, QWORD PTR [r11+56]
  00275	49 8b 7b 40	 mov	 rdi, QWORD PTR [r11+64]
  00279	49 8b e3	 mov	 rsp, r11
  0027c	41 5f		 pop	 r15
  0027e	41 5e		 pop	 r14
  00280	41 5d		 pop	 r13
  00282	41 5c		 pop	 r12
  00284	5d		 pop	 rbp
  00285	c3		 ret	 0
bytes_find_internal ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_find DD imagerel bytes_find
	DD	imagerel bytes_find+40
	DD	imagerel $unwind$bytes_find
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_find DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT bytes_find
_TEXT	SEGMENT
self$ = 48
args$ = 56
bytes_find PROC						; COMDAT

; 1305 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1306 :     Py_ssize_t result = bytes_find_internal(self, args, +1);

  00004	41 b8 01 00 00
	00		 mov	 r8d, 1
  0000a	e8 00 00 00 00	 call	 bytes_find_internal

; 1307 :     if (result == -2)

  0000f	48 83 f8 fe	 cmp	 rax, -2
  00013	75 07		 jne	 SHORT $LN1@bytes_find@2

; 1308 :         return NULL;

  00015	33 c0		 xor	 eax, eax

; 1310 : }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
$LN1@bytes_find@2:

; 1309 :     return PyLong_FromSsize_t(result);

  0001c	48 8b c8	 mov	 rcx, rax

; 1310 : }

  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
bytes_find ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@NLNEJIOA@substring?5not?5found?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_index DD imagerel bytes_index
	DD	imagerel bytes_index+65
	DD	imagerel $unwind$bytes_index
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_index DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BE@NLNEJIOA@substring?5not?5found?$AA@
CONST	SEGMENT
??_C@_0BE@NLNEJIOA@substring?5not?5found?$AA@ DB 'substring not found', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bytes_index
_TEXT	SEGMENT
self$ = 48
args$ = 56
bytes_index PROC					; COMDAT

; 1320 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1321 :     Py_ssize_t result = bytes_find_internal(self, args, +1);

  00004	41 b8 01 00 00
	00		 mov	 r8d, 1
  0000a	e8 00 00 00 00	 call	 bytes_find_internal

; 1322 :     if (result == -2)

  0000f	48 83 f8 fe	 cmp	 rax, -2

; 1323 :         return NULL;

  00013	74 19		 je	 SHORT $LN5@bytes_inde

; 1324 :     if (result == -1) {

  00015	48 83 f8 ff	 cmp	 rax, -1
  00019	75 1a		 jne	 SHORT $LN1@bytes_inde

; 1325 :         PyErr_SetString(PyExc_ValueError,
; 1326 :                         "substring not found");

  0001b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NLNEJIOA@substring?5not?5found?$AA@
  00029	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@bytes_inde:

; 1327 :         return NULL;

  0002e	33 c0		 xor	 eax, eax

; 1330 : }

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
$LN1@bytes_inde:

; 1328 :     }
; 1329 :     return PyLong_FromSsize_t(result);

  00035	48 8b c8	 mov	 rcx, rax

; 1330 : }

  00038	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003c	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
bytes_index ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_rfind DD imagerel bytes_rfind
	DD	imagerel bytes_rfind+38
	DD	imagerel $unwind$bytes_rfind
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_rfind DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT bytes_rfind
_TEXT	SEGMENT
self$ = 48
args$ = 56
bytes_rfind PROC					; COMDAT

; 1344 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1345 :     Py_ssize_t result = bytes_find_internal(self, args, -1);

  00004	41 83 c8 ff	 or	 r8d, -1
  00008	e8 00 00 00 00	 call	 bytes_find_internal

; 1346 :     if (result == -2)

  0000d	48 83 f8 fe	 cmp	 rax, -2
  00011	75 07		 jne	 SHORT $LN1@bytes_rfin

; 1347 :         return NULL;

  00013	33 c0		 xor	 eax, eax

; 1349 : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
$LN1@bytes_rfin:

; 1348 :     return PyLong_FromSsize_t(result);

  0001a	48 8b c8	 mov	 rcx, rax

; 1349 : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
bytes_rfind ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_rindex DD imagerel bytes_rindex
	DD	imagerel bytes_rindex+63
	DD	imagerel $unwind$bytes_rindex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_rindex DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT bytes_rindex
_TEXT	SEGMENT
self$ = 48
args$ = 56
bytes_rindex PROC					; COMDAT

; 1359 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1360 :     Py_ssize_t result = bytes_find_internal(self, args, -1);

  00004	41 83 c8 ff	 or	 r8d, -1
  00008	e8 00 00 00 00	 call	 bytes_find_internal

; 1361 :     if (result == -2)

  0000d	48 83 f8 fe	 cmp	 rax, -2

; 1362 :         return NULL;

  00011	74 19		 je	 SHORT $LN5@bytes_rind

; 1363 :     if (result == -1) {

  00013	48 83 f8 ff	 cmp	 rax, -1
  00017	75 1a		 jne	 SHORT $LN1@bytes_rind

; 1364 :         PyErr_SetString(PyExc_ValueError,
; 1365 :                         "substring not found");

  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NLNEJIOA@substring?5not?5found?$AA@
  00027	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@bytes_rind:

; 1366 :         return NULL;

  0002c	33 c0		 xor	 eax, eax

; 1369 : }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
$LN1@bytes_rind:

; 1367 :     }
; 1368 :     return PyLong_FromSsize_t(result);

  00033	48 8b c8	 mov	 rcx, rax

; 1369 : }

  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
bytes_rindex ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$do_xstrip DD imagerel do_xstrip
	DD	imagerel do_xstrip+64
	DD	imagerel $unwind$do_xstrip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$do_xstrip DD imagerel do_xstrip+64
	DD	imagerel do_xstrip+214
	DD	imagerel $chain$3$do_xstrip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$do_xstrip DD imagerel do_xstrip+214
	DD	imagerel do_xstrip+286
	DD	imagerel $chain$4$do_xstrip
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$do_xstrip DD 021H
	DD	imagerel do_xstrip
	DD	imagerel do_xstrip+64
	DD	imagerel $unwind$do_xstrip
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$do_xstrip DD 041721H
	DD	015d417H
	DD	014c408H
	DD	imagerel do_xstrip
	DD	imagerel do_xstrip+64
	DD	imagerel $unwind$do_xstrip
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$do_xstrip DD 084001H
	DD	0137440H
	DD	0123438H
	DD	0e005d209H
	DD	050026003H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT do_xstrip
_TEXT	SEGMENT
vsep$ = 32
self$ = 144
striptype$ = 152
sepobj$ = 160
do_xstrip PROC						; COMDAT

; 1374 : {

  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	41 56		 push	 r14
  00005	48 83 ec 70	 sub	 rsp, 112		; 00000070H

; 1375 :     Py_buffer vsep;
; 1376 :     char *s = PyBytes_AS_STRING(self);
; 1377 :     Py_ssize_t len = PyBytes_GET_SIZE(self);

  00009	48 8b 69 60	 mov	 rbp, QWORD PTR [rcx+96]
  0000d	44 8b f2	 mov	 r14d, edx
  00010	48 8b f1	 mov	 rsi, rcx

; 1378 :     char *sep;
; 1379 :     Py_ssize_t seplen;
; 1380 :     Py_ssize_t i, j;
; 1381 : 
; 1382 :     if (_getbuffer(sepobj, &vsep) < 0)

  00013	48 8d 54 24 20	 lea	 rdx, QWORD PTR vsep$[rsp]
  00018	49 8b c8	 mov	 rcx, r8
  0001b	e8 00 00 00 00	 call	 _getbuffer
  00020	48 85 c0	 test	 rax, rax
  00023	79 0b		 jns	 SHORT $LN11@do_xstrip

; 1383 :         return NULL;

  00025	33 c0		 xor	 eax, eax

; 1410 : }

  00027	48 83 c4 70	 add	 rsp, 112		; 00000070H
  0002b	41 5e		 pop	 r14
  0002d	5e		 pop	 rsi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
$LN11@do_xstrip:
  00030	48 89 9c 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rbx
  00038	48 89 bc 24 98
	00 00 00	 mov	 QWORD PTR [rsp+152], rdi
  00040	4c 89 a4 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], r12

; 1384 :     sep = vsep.buf;

  00048	4c 8b 64 24 20	 mov	 r12, QWORD PTR vsep$[rsp]

; 1385 :     seplen = vsep.len;
; 1386 : 
; 1387 :     i = 0;

  0004d	33 ff		 xor	 edi, edi
  0004f	4c 89 ac 24 a8
	00 00 00	 mov	 QWORD PTR [rsp+168], r13
  00057	4c 8b 6c 24 30	 mov	 r13, QWORD PTR vsep$[rsp+16]

; 1388 :     if (striptype != RIGHTSTRIP) {

  0005c	41 83 fe 01	 cmp	 r14d, 1
  00060	74 2c		 je	 SHORT $LN17@do_xstrip

; 1389 :         while (i < len && memchr(sep, Py_CHARMASK(s[i]), seplen)) {

  00062	48 85 ed	 test	 rbp, rbp
  00065	7e 27		 jle	 SHORT $LN17@do_xstrip
  00067	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL9@do_xstrip:
  00070	0f b6 54 37 78	 movzx	 edx, BYTE PTR [rdi+rsi+120]
  00075	4d 8b c5	 mov	 r8, r13
  00078	49 8b cc	 mov	 rcx, r12
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  00081	48 85 c0	 test	 rax, rax
  00084	74 08		 je	 SHORT $LN17@do_xstrip

; 1390 :             i++;

  00086	48 ff c7	 inc	 rdi
  00089	48 3b fd	 cmp	 rdi, rbp
  0008c	7c e2		 jl	 SHORT $LL9@do_xstrip
$LN17@do_xstrip:

; 1391 :         }
; 1392 :     }
; 1393 : 
; 1394 :     j = len;

  0008e	48 8b dd	 mov	 rbx, rbp

; 1395 :     if (striptype != LEFTSTRIP) {

  00091	45 85 f6	 test	 r14d, r14d
  00094	74 21		 je	 SHORT $LN7@do_xstrip
$LL6@do_xstrip:

; 1396 :         do {
; 1397 :             j--;

  00096	48 ff cb	 dec	 rbx

; 1398 :         } while (j >= i && memchr(sep, Py_CHARMASK(s[j]), seplen));

  00099	48 3b df	 cmp	 rbx, rdi
  0009c	7c 16		 jl	 SHORT $LN3@do_xstrip
  0009e	0f b6 54 33 78	 movzx	 edx, BYTE PTR [rbx+rsi+120]
  000a3	4d 8b c5	 mov	 r8, r13
  000a6	49 8b cc	 mov	 rcx, r12
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  000af	48 85 c0	 test	 rax, rax
  000b2	75 e2		 jne	 SHORT $LL6@do_xstrip
$LN3@do_xstrip:

; 1399 :         j++;

  000b4	48 ff c3	 inc	 rbx
$LN7@do_xstrip:

; 1400 :     }
; 1401 : 
; 1402 :     PyBuffer_Release(&vsep);

  000b7	48 8d 4c 24 20	 lea	 rcx, QWORD PTR vsep$[rsp]
  000bc	e8 00 00 00 00	 call	 PyBuffer_Release
  000c1	4c 8b ac 24 a8
	00 00 00	 mov	 r13, QWORD PTR [rsp+168]
  000c9	4c 8b a4 24 a0
	00 00 00	 mov	 r12, QWORD PTR [rsp+160]

; 1403 : 
; 1404 :     if (i == 0 && j == len && PyBytes_CheckExact(self)) {

  000d1	48 85 ff	 test	 rdi, rdi
  000d4	75 1f		 jne	 SHORT $LN2@do_xstrip
  000d6	48 3b dd	 cmp	 rbx, rbp
  000d9	75 1a		 jne	 SHORT $LN2@do_xstrip
  000db	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  000e2	48 39 46 58	 cmp	 QWORD PTR [rsi+88], rax
  000e6	75 0d		 jne	 SHORT $LN2@do_xstrip

; 1405 :         Py_INCREF(self);

  000e8	48 8b ce	 mov	 rcx, rsi
  000eb	e8 00 00 00 00	 call	 _Py_IncRef

; 1406 :         return (PyObject*)self;

  000f0	48 8b c6	 mov	 rax, rsi
  000f3	eb 10		 jmp	 SHORT $LN19@do_xstrip
$LN2@do_xstrip:

; 1407 :     }
; 1408 :     else
; 1409 :         return PyBytes_FromStringAndSize(s+i, j-i);

  000f5	48 2b df	 sub	 rbx, rdi
  000f8	48 8d 4c 37 78	 lea	 rcx, QWORD PTR [rdi+rsi+120]
  000fd	48 8b d3	 mov	 rdx, rbx
  00100	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
$LN19@do_xstrip:
  00105	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR [rsp+144]
  0010d	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR [rsp+152]

; 1410 : }

  00115	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00119	41 5e		 pop	 r14
  0011b	5e		 pop	 rsi
  0011c	5d		 pop	 rbp
  0011d	c3		 ret	 0
do_xstrip ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$do_strip DD imagerel do_strip
	DD	imagerel do_strip+161
	DD	imagerel $unwind$do_strip
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$do_strip DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT do_strip
_TEXT	SEGMENT
self$ = 48
striptype$ = 56
do_strip PROC						; COMDAT

; 1415 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1416 :     char *s = PyBytes_AS_STRING(self);
; 1417 :     Py_ssize_t len = PyBytes_GET_SIZE(self), i, j;
; 1418 : 
; 1419 :     i = 0;

  00006	45 33 c0	 xor	 r8d, r8d
  00009	48 8b d9	 mov	 rbx, rcx
  0000c	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00010	44 8b ca	 mov	 r9d, edx

; 1420 :     if (striptype != RIGHTSTRIP) {

  00013	4c 8d 15 00 00
	00 00		 lea	 r10, OFFSET FLAT:_Py_ctype_table
  0001a	83 fa 01	 cmp	 edx, 1
  0001d	74 26		 je	 SHORT $LN16@do_strip

; 1421 :         while (i < len && Py_ISSPACE(s[i])) {

  0001f	48 85 c9	 test	 rcx, rcx
  00022	7e 21		 jle	 SHORT $LN16@do_strip
  00024	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL9@do_strip:
  00030	41 0f b6 44 18
	78		 movzx	 eax, BYTE PTR [r8+rbx+120]
  00036	41 f6 04 82 08	 test	 BYTE PTR [r10+rax*4], 8
  0003b	74 08		 je	 SHORT $LN16@do_strip

; 1422 :             i++;

  0003d	49 ff c0	 inc	 r8
  00040	4c 3b c1	 cmp	 r8, rcx
  00043	7c eb		 jl	 SHORT $LL9@do_strip
$LN16@do_strip:

; 1423 :         }
; 1424 :     }
; 1425 : 
; 1426 :     j = len;

  00045	48 8b d1	 mov	 rdx, rcx

; 1427 :     if (striptype != LEFTSTRIP) {

  00048	45 85 c9	 test	 r9d, r9d
  0004b	74 1a		 je	 SHORT $LN7@do_strip
  0004d	0f 1f 00	 npad	 3
$LL6@do_strip:

; 1428 :         do {
; 1429 :             j--;

  00050	48 ff ca	 dec	 rdx

; 1430 :         } while (j >= i && Py_ISSPACE(s[j]));

  00053	49 3b d0	 cmp	 rdx, r8
  00056	7c 0c		 jl	 SHORT $LN3@do_strip
  00058	0f b6 44 1a 78	 movzx	 eax, BYTE PTR [rdx+rbx+120]
  0005d	41 f6 04 82 08	 test	 BYTE PTR [r10+rax*4], 8
  00062	75 ec		 jne	 SHORT $LL6@do_strip
$LN3@do_strip:

; 1431 :         j++;

  00064	48 ff c2	 inc	 rdx
$LN7@do_strip:

; 1432 :     }
; 1433 : 
; 1434 :     if (i == 0 && j == len && PyBytes_CheckExact(self)) {

  00067	4d 85 c0	 test	 r8, r8
  0006a	75 23		 jne	 SHORT $LN2@do_strip
  0006c	48 3b d1	 cmp	 rdx, rcx
  0006f	75 1e		 jne	 SHORT $LN2@do_strip
  00071	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  00078	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  0007c	75 11		 jne	 SHORT $LN2@do_strip

; 1435 :         Py_INCREF(self);

  0007e	48 8b cb	 mov	 rcx, rbx
  00081	e8 00 00 00 00	 call	 _Py_IncRef

; 1436 :         return (PyObject*)self;

  00086	48 8b c3	 mov	 rax, rbx

; 1440 : }

  00089	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008d	5b		 pop	 rbx
  0008e	c3		 ret	 0
$LN2@do_strip:

; 1437 :     }
; 1438 :     else
; 1439 :         return PyBytes_FromStringAndSize(s+i, j-i);

  0008f	49 8d 4c 18 78	 lea	 rcx, QWORD PTR [r8+rbx+120]
  00094	49 2b d0	 sub	 rdx, r8

; 1440 : }

  00097	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009b	5b		 pop	 rbx
  0009c	e9 00 00 00 00	 jmp	 PyBytes_FromStringAndSize
do_strip ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$do_argstrip DD imagerel do_argstrip
	DD	imagerel do_argstrip+133
	DD	imagerel $unwind$do_argstrip
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$do_argstrip DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT do_argstrip
_TEXT	SEGMENT
self$ = 48
striptype$ = 56
args$ = 64
sep$ = 72
do_argstrip PROC					; COMDAT

; 1445 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	49 8b c0	 mov	 rax, r8

; 1446 :     PyObject *sep = NULL;
; 1447 : 
; 1448 :     if (!PyArg_ParseTuple(args, (char *)stripformat[striptype], &sep))

  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:stripformat
  00017	48 63 da	 movsxd	 rbx, edx
  0001a	4c 8d 44 24 48	 lea	 r8, QWORD PTR sep$[rsp]
  0001f	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR sep$[rsp], 0
  00028	48 8b 14 d9	 mov	 rdx, QWORD PTR [rcx+rbx*8]
  0002c	48 8b c8	 mov	 rcx, rax
  0002f	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00034	85 c0		 test	 eax, eax
  00036	75 0d		 jne	 SHORT $LN2@do_argstri

; 1449 :         return NULL;

  00038	33 c0		 xor	 eax, eax

; 1455 : }

  0003a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
$LN2@do_argstri:

; 1450 : 
; 1451 :     if (sep != NULL && sep != Py_None) {

  00045	4c 8b 44 24 48	 mov	 r8, QWORD PTR sep$[rsp]
  0004a	4d 85 c0	 test	 r8, r8
  0004d	74 21		 je	 SHORT $LN1@do_argstri
  0004f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00056	4c 3b c0	 cmp	 r8, rax
  00059	74 15		 je	 SHORT $LN1@do_argstri

; 1452 :         return do_xstrip(self, striptype, sep);

  0005b	8b d3		 mov	 edx, ebx
  0005d	48 8b cf	 mov	 rcx, rdi
  00060	e8 00 00 00 00	 call	 do_xstrip

; 1455 : }

  00065	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006e	5f		 pop	 rdi
  0006f	c3		 ret	 0
$LN1@do_argstri:

; 1453 :     }
; 1454 :     return do_strip(self, striptype);

  00070	8b d3		 mov	 edx, ebx
  00072	48 8b cf	 mov	 rcx, rdi
  00075	e8 00 00 00 00	 call	 do_strip

; 1455 : }

  0007a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00083	5f		 pop	 rdi
  00084	c3		 ret	 0
do_argstrip ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_strip DD imagerel bytes_strip
	DD	imagerel bytes_strip+174
	DD	imagerel $unwind$bytes_strip
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_strip DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT bytes_strip
_TEXT	SEGMENT
self$ = 48
args$ = 56
bytes_strip PROC					; COMDAT

; 1465 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1466 :     if (PyTuple_GET_SIZE(args) == 0)

  00006	48 83 7a 60 00	 cmp	 QWORD PTR [rdx+96], 0
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	0f 85 88 00 00
	00		 jne	 $LN2@bytes_stri

; 1467 :         return do_strip(self, BOTHSTRIP); /* Common case */

  00014	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00018	33 c9		 xor	 ecx, ecx
  0001a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_ctype_table
  00021	4d 85 c0	 test	 r8, r8
  00024	7e 1e		 jle	 SHORT $LN20@bytes_stri
  00026	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL13@bytes_stri:
  00030	0f b6 44 19 78	 movzx	 eax, BYTE PTR [rcx+rbx+120]
  00035	41 f6 04 81 08	 test	 BYTE PTR [r9+rax*4], 8
  0003a	74 08		 je	 SHORT $LN20@bytes_stri
  0003c	48 ff c1	 inc	 rcx
  0003f	49 3b c8	 cmp	 rcx, r8
  00042	7c ec		 jl	 SHORT $LL13@bytes_stri
$LN20@bytes_stri:
  00044	49 8b d0	 mov	 rdx, r8
$LL10@bytes_stri:
  00047	48 ff ca	 dec	 rdx
  0004a	48 3b d1	 cmp	 rdx, rcx
  0004d	7c 0c		 jl	 SHORT $LN7@bytes_stri
  0004f	0f b6 44 1a 78	 movzx	 eax, BYTE PTR [rdx+rbx+120]
  00054	41 f6 04 81 08	 test	 BYTE PTR [r9+rax*4], 8
  00059	75 ec		 jne	 SHORT $LL10@bytes_stri
$LN7@bytes_stri:
  0005b	48 ff c2	 inc	 rdx
  0005e	48 85 c9	 test	 rcx, rcx
  00061	75 23		 jne	 SHORT $LN6@bytes_stri
  00063	49 3b d0	 cmp	 rdx, r8
  00066	75 1e		 jne	 SHORT $LN6@bytes_stri
  00068	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  0006f	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  00073	75 11		 jne	 SHORT $LN6@bytes_stri
  00075	48 8b cb	 mov	 rcx, rbx
  00078	e8 00 00 00 00	 call	 _Py_IncRef
  0007d	48 8b c3	 mov	 rax, rbx

; 1470 : }

  00080	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00084	5b		 pop	 rbx
  00085	c3		 ret	 0

; 1467 :         return do_strip(self, BOTHSTRIP); /* Common case */

$LN6@bytes_stri:
  00086	48 2b d1	 sub	 rdx, rcx
  00089	48 8d 4c 19 78	 lea	 rcx, QWORD PTR [rcx+rbx+120]
  0008e	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00093	48 8b d8	 mov	 rbx, rax

; 1470 : }

  00096	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009a	5b		 pop	 rbx
  0009b	c3		 ret	 0
$LN2@bytes_stri:

; 1468 :     else
; 1469 :         return do_argstrip(self, BOTHSTRIP, args);

  0009c	4c 8b c2	 mov	 r8, rdx
  0009f	ba 02 00 00 00	 mov	 edx, 2

; 1470 : }

  000a4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a8	5b		 pop	 rbx
  000a9	e9 00 00 00 00	 jmp	 do_argstrip
bytes_strip ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_lstrip DD imagerel bytes_lstrip
	DD	imagerel bytes_lstrip+126
	DD	imagerel $unwind$bytes_lstrip
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_lstrip DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT bytes_lstrip
_TEXT	SEGMENT
self$ = 48
args$ = 56
bytes_lstrip PROC					; COMDAT

; 1480 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1481 :     if (PyTuple_GET_SIZE(args) == 0)

  00006	48 83 7a 60 00	 cmp	 QWORD PTR [rdx+96], 0
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	75 5f		 jne	 SHORT $LN2@bytes_lstr

; 1482 :         return do_strip(self, LEFTSTRIP); /* Common case */

  00010	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00014	33 c9		 xor	 ecx, ecx
  00016	48 85 d2	 test	 rdx, rdx
  00019	7e 20		 jle	 SHORT $LN20@bytes_lstr
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_ctype_table
$LL13@bytes_lstr:
  00022	0f b6 44 19 78	 movzx	 eax, BYTE PTR [rcx+rbx+120]
  00027	41 f6 04 80 08	 test	 BYTE PTR [r8+rax*4], 8
  0002c	74 08		 je	 SHORT $LN12@bytes_lstr
  0002e	48 ff c1	 inc	 rcx
  00031	48 3b ca	 cmp	 rcx, rdx
  00034	7c ec		 jl	 SHORT $LL13@bytes_lstr
$LN12@bytes_lstr:
  00036	48 85 c9	 test	 rcx, rcx
  00039	75 1e		 jne	 SHORT $LN6@bytes_lstr
$LN20@bytes_lstr:
  0003b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  00042	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  00046	75 11		 jne	 SHORT $LN6@bytes_lstr
  00048	48 8b cb	 mov	 rcx, rbx
  0004b	e8 00 00 00 00	 call	 _Py_IncRef
  00050	48 8b c3	 mov	 rax, rbx

; 1485 : }

  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5b		 pop	 rbx
  00058	c3		 ret	 0

; 1482 :         return do_strip(self, LEFTSTRIP); /* Common case */

$LN6@bytes_lstr:
  00059	48 2b d1	 sub	 rdx, rcx
  0005c	48 8d 4c 19 78	 lea	 rcx, QWORD PTR [rcx+rbx+120]
  00061	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00066	48 8b d8	 mov	 rbx, rax

; 1485 : }

  00069	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006d	5b		 pop	 rbx
  0006e	c3		 ret	 0
$LN2@bytes_lstr:

; 1483 :     else
; 1484 :         return do_argstrip(self, LEFTSTRIP, args);

  0006f	4c 8b c2	 mov	 r8, rdx
  00072	33 d2		 xor	 edx, edx

; 1485 : }

  00074	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00078	5b		 pop	 rbx
  00079	e9 00 00 00 00	 jmp	 do_argstrip
bytes_lstrip ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_rstrip DD imagerel bytes_rstrip
	DD	imagerel bytes_rstrip+120
	DD	imagerel $unwind$bytes_rstrip
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_rstrip DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT bytes_rstrip
_TEXT	SEGMENT
self$ = 48
args$ = 56
bytes_rstrip PROC					; COMDAT

; 1495 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1496 :     if (PyTuple_GET_SIZE(args) == 0)

  00006	48 83 7a 60 00	 cmp	 QWORD PTR [rdx+96], 0
  0000b	48 8b d9	 mov	 rbx, rcx
  0000e	75 56		 jne	 SHORT $LN2@bytes_rstr

; 1497 :         return do_strip(self, RIGHTSTRIP); /* Common case */

  00010	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  00014	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00018	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_ctype_table
  0001f	49 8b d0	 mov	 rdx, r8
$LL10@bytes_rstr:
  00022	48 ff ca	 dec	 rdx
  00025	78 0b		 js	 SHORT $LN7@bytes_rstr
  00027	0f b6 04 0a	 movzx	 eax, BYTE PTR [rdx+rcx]
  0002b	41 f6 04 81 08	 test	 BYTE PTR [r9+rax*4], 8
  00030	75 f0		 jne	 SHORT $LL10@bytes_rstr
$LN7@bytes_rstr:
  00032	48 ff c2	 inc	 rdx
  00035	49 3b d0	 cmp	 rdx, r8
  00038	75 1e		 jne	 SHORT $LN6@bytes_rstr
  0003a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  00041	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  00045	75 11		 jne	 SHORT $LN6@bytes_rstr
  00047	48 8b cb	 mov	 rcx, rbx
  0004a	e8 00 00 00 00	 call	 _Py_IncRef
  0004f	48 8b c3	 mov	 rax, rbx

; 1500 : }

  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5b		 pop	 rbx
  00057	c3		 ret	 0

; 1497 :         return do_strip(self, RIGHTSTRIP); /* Common case */

$LN6@bytes_rstr:
  00058	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0005d	48 8b d8	 mov	 rbx, rax

; 1500 : }

  00060	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00064	5b		 pop	 rbx
  00065	c3		 ret	 0
$LN2@bytes_rstr:

; 1498 :     else
; 1499 :         return do_argstrip(self, RIGHTSTRIP, args);

  00066	4c 8b c2	 mov	 r8, rdx
  00069	ba 01 00 00 00	 mov	 edx, 1

; 1500 : }

  0006e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00072	5b		 pop	 rbx
  00073	e9 00 00 00 00	 jmp	 do_argstrip
bytes_rstrip ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\stringlib\fastsearch.h
pdata	SEGMENT
$pdata$bytes_count DD imagerel bytes_count
	DD	imagerel bytes_count+983
	DD	imagerel $unwind$bytes_count
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_count DD 0b1c01H
	DD	029341cH
	DD	020011cH
	DD	0e00ef010H
	DD	0c00ad00cH
	DD	060077008H
	DD	05006H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
xdata	ENDS
;	COMDAT bytes_count
_TEXT	SEGMENT
sub_obj$1$ = 48
sub$1$ = 56
$T27753 = 64
obj_end$27522 = 72
obj_start$27521 = 80
tmp_end$27520 = 88
tmp_start$27519 = 96
tmp_subobj$27518 = 104
skip$1$ = 112
format$27523 = 120
vsub$ = 176
byte$ = 320
self$ = 320
args$ = 328
mask$1$ = 336
w$1$ = 344
bytes_count PROC					; COMDAT

; 1512 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 55		 push	 r13
  0000c	41 56		 push	 r14
  0000e	41 57		 push	 r15
  00010	48 8d 6c 24 d9	 lea	 rbp, QWORD PTR [rsp-39]
  00015	48 81 ec 00 01
	00 00		 sub	 rsp, 256		; 00000100H

; 1513 :     PyObject *sub_obj;
; 1514 :     const char *str = PyBytes_AS_STRING(self), *sub;
; 1515 :     Py_ssize_t sub_len;
; 1516 :     char byte;
; 1517 :     Py_ssize_t start = 0, end = PY_SSIZE_T_MAX;
; 1518 : 
; 1519 :     Py_buffer vsub;
; 1520 :     PyObject *count_obj;
; 1521 : 
; 1522 :     if (!stringlib_parse_args_finds_byte("count", args, &sub_obj, &byte,
; 1523 :                                          &start, &end))

  0001c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ??_C@_05BBAJLHME@O?$HMOO?3?$AA@
  00022	4c 8b f1	 mov	 r14, rcx
  00025	48 83 c9 ff	 or	 rcx, -1
  00029	89 45 9f	 mov	 DWORD PTR format$27523[rbp-217], eax
  0002c	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_05BBAJLHME@O?$HMOO?3?$AA@+4
  00033	48 8b da	 mov	 rbx, rdx
  00036	66 89 45 a3	 mov	 WORD PTR format$27523[rbp-213], ax
  0003a	33 c0		 xor	 eax, eax
  0003c	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
  00043	48 89 45 a5	 mov	 QWORD PTR format$27523[rbp-211], rax
  00047	48 89 45 ad	 mov	 QWORD PTR format$27523[rbp-203], rax
  0004b	48 89 45 b5	 mov	 QWORD PTR format$27523[rbp-195], rax
  0004f	48 89 45 bd	 mov	 QWORD PTR format$27523[rbp-187], rax
  00053	48 89 45 c5	 mov	 QWORD PTR format$27523[rbp-179], rax
  00057	89 45 cd	 mov	 DWORD PTR format$27523[rbp-171], eax
  0005a	48 8d 7d 9f	 lea	 rdi, QWORD PTR format$27523[rbp-217]
  0005e	41 b8 31 00 00
	00		 mov	 r8d, 49			; 00000031H
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05IOMEMJEC@count?$AA@
  0006b	f2 ae		 repne scasb
  0006d	45 33 ed	 xor	 r13d, r13d
  00070	49 bf ff ff ff
	ff ff ff ff 7f	 mov	 r15, 9223372036854775807 ; 7fffffffffffffffH
  0007a	48 f7 d1	 not	 rcx
  0007d	4c 89 6d 87	 mov	 QWORD PTR tmp_start$27519[rbp-217], r13
  00081	4c 89 7c 24 58	 mov	 QWORD PTR tmp_end$27520[rsp], r15
  00086	48 ff c9	 dec	 rcx
  00089	48 89 74 24 50	 mov	 QWORD PTR obj_start$27521[rsp], rsi
  0008e	48 89 74 24 48	 mov	 QWORD PTR obj_end$27522[rsp], rsi
  00093	4c 2b c1	 sub	 r8, rcx
  00096	48 8d 4c 0d 9f	 lea	 rcx, QWORD PTR format$27523[rbp+rcx-217]
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy
  000a1	48 8d 44 24 48	 lea	 rax, QWORD PTR obj_end$27522[rsp]
  000a6	4c 8d 4c 24 50	 lea	 r9, QWORD PTR obj_start$27521[rsp]
  000ab	4c 8d 45 8f	 lea	 r8, QWORD PTR tmp_subobj$27518[rbp-217]
  000af	48 8d 55 9f	 lea	 rdx, QWORD PTR format$27523[rbp-217]
  000b3	48 8b cb	 mov	 rcx, rbx
  000b6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000bb	44 88 6d d0	 mov	 BYTE PTR format$27523[rbp-168], r13b
  000bf	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  000c4	85 c0		 test	 eax, eax
  000c6	0f 84 ee 02 00
	00		 je	 $LN119@bytes_coun
  000cc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj_start$27521[rsp]
  000d1	48 3b ce	 cmp	 rcx, rsi
  000d4	74 11		 je	 SHORT $LN24@bytes_coun
  000d6	48 8d 55 87	 lea	 rdx, QWORD PTR tmp_start$27519[rbp-217]
  000da	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  000df	85 c0		 test	 eax, eax
  000e1	0f 84 d3 02 00
	00		 je	 $LN119@bytes_coun
$LN24@bytes_coun:
  000e7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj_end$27522[rsp]
  000ec	48 3b ce	 cmp	 rcx, rsi
  000ef	74 12		 je	 SHORT $LN22@bytes_coun
  000f1	48 8d 54 24 58	 lea	 rdx, QWORD PTR tmp_end$27520[rsp]
  000f6	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  000fb	85 c0		 test	 eax, eax
  000fd	0f 84 b7 02 00
	00		 je	 $LN119@bytes_coun
$LN22@bytes_coun:
  00103	48 8b 75 8f	 mov	 rsi, QWORD PTR tmp_subobj$27518[rbp-217]
  00107	48 8b 5d 87	 mov	 rbx, QWORD PTR tmp_start$27519[rbp-217]
  0010b	48 8b 7c 24 58	 mov	 rdi, QWORD PTR tmp_end$27520[rsp]
  00110	48 8b ce	 mov	 rcx, rsi
  00113	e8 00 00 00 00	 call	 PyNumber_Check
  00118	41 bc 01 00 00
	00		 mov	 r12d, 1
  0011e	85 c0		 test	 eax, eax
  00120	74 3f		 je	 SHORT $LN125@bytes_coun
  00122	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  00129	48 8b ce	 mov	 rcx, rsi
  0012c	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  00131	48 83 f8 ff	 cmp	 rax, -1
  00135	75 53		 jne	 SHORT $LN16@bytes_coun
  00137	e8 00 00 00 00	 call	 PyErr_Occurred
  0013c	48 85 c0	 test	 rax, rax
  0013f	0f 84 62 02 00
	00		 je	 $LN14@bytes_coun
  00145	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  0014c	48 8b c8	 mov	 rcx, rax
  0014f	e8 00 00 00 00	 call	 PyErr_GivenExceptionMatches
  00154	85 c0		 test	 eax, eax
  00156	0f 85 4b 02 00
	00		 jne	 $LN14@bytes_coun
  0015c	e8 00 00 00 00	 call	 PyErr_Clear
$LN125@bytes_coun:
  00161	48 89 74 24 30	 mov	 QWORD PTR sub_obj$1$[rsp], rsi

; 1525 : 
; 1526 :     if (sub_obj) {

  00166	48 85 f6	 test	 rsi, rsi
  00169	74 33		 je	 SHORT $LN10@bytes_coun

; 1527 :         if (_getbuffer(sub_obj, &vsub) < 0)

  0016b	48 8d 55 d7	 lea	 rdx, QWORD PTR vsub$[rbp-217]
  0016f	48 8b ce	 mov	 rcx, rsi
  00172	e8 00 00 00 00	 call	 _getbuffer
  00177	48 85 c0	 test	 rax, rax

; 1528 :             return NULL;

  0017a	0f 88 3a 02 00
	00		 js	 $LN119@bytes_coun

; 1529 : 
; 1530 :         sub = vsub.buf;

  00180	48 8b 4d d7	 mov	 rcx, QWORD PTR vsub$[rbp-217]

; 1531 :         sub_len = vsub.len;

  00184	48 8b 75 e7	 mov	 rsi, QWORD PTR vsub$[rbp-201]

; 1532 :     }
; 1533 :     else {

  00188	eb 1b		 jmp	 SHORT $LN126@bytes_coun

; 1513 :     PyObject *sub_obj;
; 1514 :     const char *str = PyBytes_AS_STRING(self), *sub;
; 1515 :     Py_ssize_t sub_len;
; 1516 :     char byte;
; 1517 :     Py_ssize_t start = 0, end = PY_SSIZE_T_MAX;
; 1518 : 
; 1519 :     Py_buffer vsub;
; 1520 :     PyObject *count_obj;
; 1521 : 
; 1522 :     if (!stringlib_parse_args_finds_byte("count", args, &sub_obj, &byte,
; 1523 :                                          &start, &end))

$LN16@bytes_coun:
  0018a	48 3d ff 00 00
	00		 cmp	 rax, 255		; 000000ffH
  00190	0f 87 11 02 00
	00		 ja	 $LN14@bytes_coun
  00196	4c 89 6c 24 30	 mov	 QWORD PTR sub_obj$1$[rsp], r13
  0019b	88 45 67	 mov	 BYTE PTR byte$[rbp-217], al
$LN10@bytes_coun:

; 1534 :         sub = &byte;

  0019e	48 8d 4d 67	 lea	 rcx, QWORD PTR byte$[rbp-217]

; 1535 :         sub_len = 1;

  001a2	49 8b f4	 mov	 rsi, r12
$LN126@bytes_coun:

; 1536 :     }
; 1537 : 
; 1538 :     ADJUST_INDICES(start, end, PyBytes_GET_SIZE(self));

  001a5	49 8b 46 60	 mov	 rax, QWORD PTR [r14+96]
  001a9	48 89 4c 24 38	 mov	 QWORD PTR sub$1$[rsp], rcx
  001ae	48 3b f8	 cmp	 rdi, rax
  001b1	7e 05		 jle	 SHORT $LN7@bytes_coun
  001b3	48 8b f8	 mov	 rdi, rax
  001b6	eb 0c		 jmp	 SHORT $LN4@bytes_coun
$LN7@bytes_coun:
  001b8	48 85 ff	 test	 rdi, rdi
  001bb	79 07		 jns	 SHORT $LN4@bytes_coun
  001bd	48 03 f8	 add	 rdi, rax
  001c0	49 0f 48 fd	 cmovs	 rdi, r13
$LN4@bytes_coun:
  001c4	48 85 db	 test	 rbx, rbx
  001c7	79 07		 jns	 SHORT $LN2@bytes_coun
  001c9	48 03 d8	 add	 rbx, rax
  001cc	49 0f 48 dd	 cmovs	 rbx, r13
$LN2@bytes_coun:

; 1539 : 
; 1540 :     count_obj = PyLong_FromSsize_t(
; 1541 :         stringlib_count(str + start, end - start, sub, sub_len, PY_SSIZE_T_MAX)
; 1542 :         );

  001d0	48 2b fb	 sub	 rdi, rbx
  001d3	4e 8d 5c 33 78	 lea	 r11, QWORD PTR [rbx+r14+120]
  001d8	4c 89 5c 24 40	 mov	 QWORD PTR $T27753[rsp], r11
  001dd	0f 88 a3 01 00
	00		 js	 $LN120@bytes_coun
  001e3	48 85 f6	 test	 rsi, rsi
  001e6	75 12		 jne	 SHORT $LN30@bytes_coun
  001e8	49 3b ff	 cmp	 rdi, r15
  001eb	0f 8d 92 01 00
	00		 jge	 $LN29@bytes_coun
  001f1	4c 8d 6f 01	 lea	 r13, QWORD PTR [rdi+1]
  001f5	e9 8c 01 00 00	 jmp	 $LN120@bytes_coun
$LN30@bytes_coun:
  001fa	48 8b c7	 mov	 rax, rdi
  001fd	4d 8b c5	 mov	 r8, r13
  00200	48 2b c6	 sub	 rax, rsi
  00203	48 89 45 7f	 mov	 QWORD PTR w$1$[rbp-217], rax
  00207	0f 88 79 01 00
	00		 js	 $LN120@bytes_coun
  0020d	49 3b f4	 cmp	 rsi, r12
  00210	7f 3d		 jg	 SHORT $LN94@bytes_coun
  00212	48 85 f6	 test	 rsi, rsi
  00215	0f 8e 6b 01 00
	00		 jle	 $LN120@bytes_coun
  0021b	49 8b c5	 mov	 rax, r13
  0021e	48 85 ff	 test	 rdi, rdi
  00221	0f 8e 54 01 00
	00		 jle	 $LN122@bytes_coun
  00227	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0022a	66 0f 1f 44 00
	00		 npad	 6
$LL90@bytes_coun:
  00230	42 38 0c 18	 cmp	 BYTE PTR [rax+r11], cl
  00234	75 0c		 jne	 SHORT $LN89@bytes_coun
  00236	49 ff c0	 inc	 r8
  00239	4d 3b c7	 cmp	 r8, r15
  0023c	0f 84 41 01 00
	00		 je	 $LN29@bytes_coun
$LN89@bytes_coun:
  00242	48 ff c0	 inc	 rax
  00245	48 3b c7	 cmp	 rax, rdi
  00248	7c e6		 jl	 SHORT $LL90@bytes_coun
  0024a	e9 2c 01 00 00	 jmp	 $LN122@bytes_coun
$LN94@bytes_coun:
  0024f	4c 8d 4e ff	 lea	 r9, QWORD PTR [rsi-1]
  00253	45 8b d5	 mov	 r10d, r13d
  00256	4d 8d 71 ff	 lea	 r14, QWORD PTR [r9-1]
  0025a	4d 85 c9	 test	 r9, r9
  0025d	7e 67		 jle	 SHORT $LN71@bytes_coun
  0025f	45 0f b6 34 09	 movzx	 r14d, BYTE PTR [r9+rcx]
  00264	4d 8d 79 ff	 lea	 r15, QWORD PTR [r9-1]
  00268	49 8b d9	 mov	 rbx, r9
  0026b	4c 8b d1	 mov	 r10, rcx
  0026e	45 8b c8	 mov	 r9d, r8d
  00271	4d 8b df	 mov	 r11, r15
  00274	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL73@bytes_coun:
  00280	41 0f be 3a	 movsx	 edi, BYTE PTR [r10]
  00284	41 8b d4	 mov	 edx, r12d
  00287	8b cf		 mov	 ecx, edi
  00289	83 e1 1f	 and	 ecx, 31
  0028c	d3 e2		 shl	 edx, cl
  0028e	44 0b ca	 or	 r9d, edx
  00291	41 3a fe	 cmp	 dil, r14b
  00294	4d 0f 44 fb	 cmove	 r15, r11
  00298	49 ff c2	 inc	 r10
  0029b	49 ff cb	 dec	 r11
  0029e	48 ff cb	 dec	 rbx
  002a1	75 dd		 jne	 SHORT $LL73@bytes_coun
  002a3	4c 8b 5c 24 40	 mov	 r11, QWORD PTR $T27753[rsp]
  002a8	4c 89 7d 97	 mov	 QWORD PTR skip$1$[rbp-217], r15
  002ac	44 89 4d 77	 mov	 DWORD PTR mask$1$[rbp-217], r9d
  002b0	44 8b 55 77	 mov	 r10d, DWORD PTR mask$1$[rbp-217]
  002b4	4c 8b 75 97	 mov	 r14, QWORD PTR skip$1$[rbp-217]
  002b8	4c 8d 4e ff	 lea	 r9, QWORD PTR [rsi-1]
  002bc	49 bf ff ff ff
	ff ff ff ff 7f	 mov	 r15, 9223372036854775807 ; 7fffffffffffffffH
$LN71@bytes_coun:
  002c6	48 8b 5c 24 38	 mov	 rbx, QWORD PTR sub$1$[rsp]
  002cb	49 8b d5	 mov	 rdx, r13
  002ce	41 0f be 0c 19	 movsx	 ecx, BYTE PTR [r9+rbx]
  002d3	83 e1 1f	 and	 ecx, 31
  002d6	41 d3 e4	 shl	 r12d, cl
  002d9	45 0b d4	 or	 r10d, r12d
  002dc	44 89 55 77	 mov	 DWORD PTR mask$1$[rbp-217], r10d
  002e0	48 85 c0	 test	 rax, rax
  002e3	0f 88 92 00 00
	00		 js	 $LN122@bytes_coun
  002e9	4c 8b 64 24 40	 mov	 r12, QWORD PTR $T27753[rsp]
  002ee	4c 03 de	 add	 r11, rsi
$LN127@bytes_coun:
  002f1	0f b6 4c 1e ff	 movzx	 ecx, BYTE PTR [rsi+rbx-1]
  002f6	41 38 4c 13 ff	 cmp	 BYTE PTR [r11+rdx-1], cl
  002fb	75 5b		 jne	 SHORT $LN66@bytes_coun
  002fd	49 8b fd	 mov	 rdi, r13
  00300	4d 85 c9	 test	 r9, r9
  00303	7e 28		 jle	 SHORT $LN112@bytes_coun
  00305	4c 8b d2	 mov	 r10, rdx
  00308	48 8b cb	 mov	 rcx, rbx
  0030b	4c 2b d3	 sub	 r10, rbx
  0030e	4d 03 d4	 add	 r10, r12
$LL65@bytes_coun:
  00311	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00314	41 38 04 0a	 cmp	 BYTE PTR [r10+rcx], al
  00318	75 0b		 jne	 SHORT $LN123@bytes_coun
  0031a	48 ff c7	 inc	 rdi
  0031d	48 ff c1	 inc	 rcx
  00320	49 3b f9	 cmp	 rdi, r9
  00323	7c ec		 jl	 SHORT $LL65@bytes_coun
$LN123@bytes_coun:
  00325	44 8b 55 77	 mov	 r10d, DWORD PTR mask$1$[rbp-217]
  00329	48 8b 45 7f	 mov	 rax, QWORD PTR w$1$[rbp-217]
$LN112@bytes_coun:
  0032d	49 3b f9	 cmp	 rdi, r9
  00330	75 0d		 jne	 SHORT $LN61@bytes_coun
  00332	49 ff c0	 inc	 r8
  00335	4d 3b c7	 cmp	 r8, r15
  00338	74 49		 je	 SHORT $LN29@bytes_coun
  0033a	49 03 d1	 add	 rdx, r9
  0033d	eb 30		 jmp	 SHORT $LN68@bytes_coun
$LN61@bytes_coun:
  0033f	41 0f be 04 13	 movsx	 eax, BYTE PTR [r11+rdx]
  00344	83 e0 1f	 and	 eax, 31
  00347	8b c8		 mov	 ecx, eax
  00349	41 0f a3 c2	 bt	 r10d, eax
  0034d	48 8b 45 7f	 mov	 rax, QWORD PTR w$1$[rbp-217]
  00351	73 19		 jae	 SHORT $LN128@bytes_coun
  00353	49 03 d6	 add	 rdx, r14
  00356	eb 17		 jmp	 SHORT $LN68@bytes_coun
$LN66@bytes_coun:
  00358	41 0f be 04 13	 movsx	 eax, BYTE PTR [r11+rdx]
  0035d	83 e0 1f	 and	 eax, 31
  00360	8b c8		 mov	 ecx, eax
  00362	41 0f a3 c2	 bt	 r10d, eax
  00366	48 8b 45 7f	 mov	 rax, QWORD PTR w$1$[rbp-217]
  0036a	72 03		 jb	 SHORT $LN68@bytes_coun
$LN128@bytes_coun:
  0036c	48 03 d6	 add	 rdx, rsi
$LN68@bytes_coun:
  0036f	48 ff c2	 inc	 rdx
  00372	48 3b d0	 cmp	 rdx, rax
  00375	0f 8e 76 ff ff
	ff		 jle	 $LN127@bytes_coun
$LN122@bytes_coun:
  0037b	4d 8b f8	 mov	 r15, r8
  0037e	4d 85 c0	 test	 r8, r8
  00381	78 03		 js	 SHORT $LN120@bytes_coun
$LN29@bytes_coun:
  00383	4d 8b ef	 mov	 r13, r15
$LN120@bytes_coun:
  00386	49 8b cd	 mov	 rcx, r13
  00389	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 1543 : 
; 1544 :     if (sub_obj)

  0038e	48 83 7c 24 30
	00		 cmp	 QWORD PTR sub_obj$1$[rsp], 0
  00394	48 8b f8	 mov	 rdi, rax
  00397	74 09		 je	 SHORT $LN1@bytes_coun

; 1545 :         PyBuffer_Release(&vsub);

  00399	48 8d 4d d7	 lea	 rcx, QWORD PTR vsub$[rbp-217]
  0039d	e8 00 00 00 00	 call	 PyBuffer_Release
$LN1@bytes_coun:

; 1546 : 
; 1547 :     return count_obj;

  003a2	48 8b c7	 mov	 rax, rdi
  003a5	eb 15		 jmp	 SHORT $LN12@bytes_coun

; 1513 :     PyObject *sub_obj;
; 1514 :     const char *str = PyBytes_AS_STRING(self), *sub;
; 1515 :     Py_ssize_t sub_len;
; 1516 :     char byte;
; 1517 :     Py_ssize_t start = 0, end = PY_SSIZE_T_MAX;
; 1518 : 
; 1519 :     Py_buffer vsub;
; 1520 :     PyObject *count_obj;
; 1521 : 
; 1522 :     if (!stringlib_parse_args_finds_byte("count", args, &sub_obj, &byte,
; 1523 :                                          &start, &end))

$LN14@bytes_coun:
  003a7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  003ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@NJOIMFKH@byte?5must?5be?5in?5range?$CI0?0?5256?$CJ?$AA@
  003b5	e8 00 00 00 00	 call	 PyErr_SetString
$LN119@bytes_coun:

; 1524 :         return NULL;

  003ba	33 c0		 xor	 eax, eax
$LN12@bytes_coun:

; 1548 : }

  003bc	48 8b 9c 24 48
	01 00 00	 mov	 rbx, QWORD PTR [rsp+328]
  003c4	48 81 c4 00 01
	00 00		 add	 rsp, 256		; 00000100H
  003cb	41 5f		 pop	 r15
  003cd	41 5e		 pop	 r14
  003cf	41 5d		 pop	 r13
  003d1	41 5c		 pop	 r12
  003d3	5f		 pop	 rdi
  003d4	5e		 pop	 rsi
  003d5	5d		 pop	 rbp
  003d6	c3		 ret	 0
bytes_count ENDP
_TEXT	ENDS
EXTRN	_Py_bytes_maketrans:PROC
; Function compile flags: /Ogtpy
;	COMDAT bytes_maketrans
_TEXT	SEGMENT
null$ = 8
args$ = 16
bytes_maketrans PROC					; COMDAT

; 1660 :     return _Py_bytes_maketrans(args);

  00000	48 8b ca	 mov	 rcx, rdx

; 1661 : }

  00003	e9 00 00 00 00	 jmp	 _Py_bytes_maketrans
bytes_maketrans ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$return_self DD imagerel return_self
	DD	imagerel return_self+108
	DD	imagerel $unwind$return_self
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$return_self DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
xdata	ENDS
;	COMDAT return_self
_TEXT	SEGMENT
self$ = 64
return_self PROC					; COMDAT

; 1672 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1673 :     if (PyBytes_CheckExact(self)) {

  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00014	75 44		 jne	 SHORT $LN1@return_sel

; 1674 :         Py_INCREF(self);

  00016	e8 00 00 00 00	 call	 _Py_PXCTX
  0001b	85 c0		 test	 eax, eax
  0001d	75 32		 jne	 SHORT $LN5@return_sel
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0002d	4c 8b cb	 mov	 r9, rbx
  00030	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00036	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0003e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00043	85 c0		 test	 eax, eax
  00045	75 06		 jne	 SHORT $LN4@return_sel
  00047	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0004b	74 04		 je	 SHORT $LN5@return_sel
$LN4@return_sel:
  0004d	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN5@return_sel:

; 1675 :         return self;

  00051	48 8b c3	 mov	 rax, rbx

; 1680 : }

  00054	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00058	5b		 pop	 rbx
  00059	c3		 ret	 0
$LN1@return_sel:

; 1676 :     }
; 1677 :     return (PyBytesObject *)PyBytes_FromStringAndSize(
; 1678 :         PyBytes_AS_STRING(self),
; 1679 :         PyBytes_GET_SIZE(self));

  0005a	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  0005e	48 83 c1 78	 add	 rcx, 120		; 00000078H

; 1680 : }

  00062	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00066	5b		 pop	 rbx
  00067	e9 00 00 00 00	 jmp	 PyBytes_FromStringAndSize
return_self ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$countchar DD imagerel countchar
	DD	imagerel countchar+109
	DD	imagerel $unwind$countchar
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$countchar DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT countchar
_TEXT	SEGMENT
target$ = 48
target_len$ = 56
c$ = 64
maxcount$ = 72
countchar PROC						; COMDAT

; 1684 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1685 :     Py_ssize_t count=0;
; 1686 :     const char *start=target;
; 1687 :     const char *end=target+target_len;
; 1688 : 
; 1689 :     while ( (start=findchar(start, end-start, c)) != NULL ) {

  00014	41 0f be e8	 movsx	 ebp, r8b
  00018	48 8d 34 11	 lea	 rsi, QWORD PTR [rcx+rdx]
  0001c	49 8b f9	 mov	 rdi, r9
  0001f	4c 8b c6	 mov	 r8, rsi
  00022	8b d5		 mov	 edx, ebp
  00024	33 db		 xor	 ebx, ebx
  00026	4c 2b c1	 sub	 r8, rcx
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  0002f	48 85 c0	 test	 rax, rax
  00032	74 21		 je	 SHORT $LN10@countchar
$LL3@countchar:

; 1690 :         count++;

  00034	48 ff c3	 inc	 rbx

; 1691 :         if (count >= maxcount)

  00037	48 3b df	 cmp	 rbx, rdi
  0003a	7d 19		 jge	 SHORT $LN10@countchar

; 1692 :             break;
; 1693 :         start += 1;

  0003c	48 ff c0	 inc	 rax
  0003f	4c 8b c6	 mov	 r8, rsi
  00042	8b d5		 mov	 edx, ebp
  00044	4c 2b c0	 sub	 r8, rax
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  00050	48 85 c0	 test	 rax, rax
  00053	75 df		 jne	 SHORT $LL3@countchar
$LN10@countchar:

; 1694 :     }
; 1695 :     return count;
; 1696 : }

  00055	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0005a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0005f	48 8b c3	 mov	 rax, rbx
  00062	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00067	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006b	5f		 pop	 rdi
  0006c	c3		 ret	 0
countchar ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@DIPAALHI@replacement?5bytes?5are?5too?5long?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$replace_interleave DD imagerel replace_interleave
	DD	imagerel replace_interleave+107
	DD	imagerel $unwind$replace_interleave
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$replace_interleave DD imagerel replace_interleave+107
	DD	imagerel replace_interleave+154
	DD	imagerel $chain$0$replace_interleave
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$replace_interleave DD imagerel replace_interleave+154
	DD	imagerel replace_interleave+163
	DD	imagerel $chain$3$replace_interleave
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$replace_interleave DD imagerel replace_interleave+163
	DD	imagerel replace_interleave+386
	DD	imagerel $chain$4$replace_interleave
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$replace_interleave DD imagerel replace_interleave+386
	DD	imagerel replace_interleave+457
	DD	imagerel $chain$5$replace_interleave
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$replace_interleave DD 021H
	DD	imagerel replace_interleave+154
	DD	imagerel replace_interleave+163
	DD	imagerel $chain$3$replace_interleave
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$replace_interleave DD 020521H
	DD	04f405H
	DD	imagerel replace_interleave+154
	DD	imagerel replace_interleave+163
	DD	imagerel $chain$3$replace_interleave
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$replace_interleave DD 040521H
	DD	0f3405H
	DD	05e400H
	DD	imagerel replace_interleave
	DD	imagerel replace_interleave+107
	DD	imagerel $unwind$replace_interleave
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$replace_interleave DD 020521H
	DD	05e405H
	DD	imagerel replace_interleave
	DD	imagerel replace_interleave+107
	DD	imagerel $unwind$replace_interleave
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$replace_interleave DD 061001H
	DD	0d00c5210H
	DD	07008c00aH
	DD	050066007H
xdata	ENDS
;	COMDAT ??_C@_0BP@DIPAALHI@replacement?5bytes?5are?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BP@DIPAALHI@replacement?5bytes?5are?5too?5long?$AA@ DB 'replacemen'
	DB	't bytes are too long', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT replace_interleave
_TEXT	SEGMENT
n_$1$ = 96
self$ = 96
to_s$ = 104
result$1$ = 112
to_len$ = 112
maxcount$ = 120
replace_interleave PROC					; COMDAT

; 1706 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 55		 push	 r13
  0000c	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1707 :     char *self_s, *result_s;
; 1708 :     Py_ssize_t self_len, result_len;
; 1709 :     Py_ssize_t count, i;
; 1710 :     PyBytesObject *result;
; 1711 : 
; 1712 :     self_len = PyBytes_GET_SIZE(self);

  00010	48 8b 79 60	 mov	 rdi, QWORD PTR [rcx+96]
  00014	4d 8b e9	 mov	 r13, r9
  00017	49 8b f0	 mov	 rsi, r8
  0001a	48 8b ea	 mov	 rbp, rdx
  0001d	4c 8b e1	 mov	 r12, rcx
  00020	48 89 7c 24 60	 mov	 QWORD PTR n_$1$[rsp], rdi

; 1713 : 
; 1714 :     /* 1 at the end plus 1 after every character;
; 1715 :        count = min(maxcount, self_len + 1) */
; 1716 :     if (maxcount <= self_len)

  00025	4c 3b cf	 cmp	 r9, rdi
  00028	7e 04		 jle	 SHORT $LN30@replace_in

; 1717 :         count = maxcount;
; 1718 :     else
; 1719 :         /* Can't overflow: self_len + 1 <= maxcount <= PY_SSIZE_T_MAX. */
; 1720 :         count = self_len + 1;

  0002a	4c 8d 6f 01	 lea	 r13, QWORD PTR [rdi+1]
$LN30@replace_in:

; 1721 : 
; 1722 :     /* Check for overflow */
; 1723 :     /*   result_len = count * to_len + self_len; */
; 1724 :     assert(count > 0);
; 1725 :     if (to_len > (PY_SSIZE_T_MAX - self_len) / count) {

  0002e	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00038	48 2b c7	 sub	 rax, rdi
  0003b	48 99		 cdq
  0003d	49 f7 fd	 idiv	 r13
  00040	4c 3b c0	 cmp	 r8, rax
  00043	7e 21		 jle	 SHORT $LN29@replace_in

; 1726 :         PyErr_SetString(PyExc_OverflowError,
; 1727 :                         "replacement bytes are too long");

  00045	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@DIPAALHI@replacement?5bytes?5are?5too?5long?$AA@
  00053	e8 00 00 00 00	 call	 PyErr_SetString

; 1728 :         return NULL;

  00058	33 c0		 xor	 eax, eax

; 1756 : }

  0005a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005e	41 5d		 pop	 r13
  00060	41 5c		 pop	 r12
  00062	5f		 pop	 rdi
  00063	5e		 pop	 rsi
  00064	5d		 pop	 rbp
  00065	c3		 ret	 0
$LN29@replace_in:

; 1729 :     }
; 1730 :     result_len = count * to_len + self_len;

  00066	49 8b d5	 mov	 rdx, r13

; 1731 : 
; 1732 :     if (! (result = (PyBytesObject *)
; 1733 :                      PyBytes_FromStringAndSize(NULL, result_len)) )

  00069	33 c9		 xor	 ecx, ecx
  0006b	4c 89 74 24 28	 mov	 QWORD PTR [rsp+40], r14
  00070	48 0f af d6	 imul	 rdx, rsi
  00074	48 03 d7	 add	 rdx, rdi
  00077	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0007c	4c 8b f0	 mov	 r14, rax
  0007f	48 89 44 24 70	 mov	 QWORD PTR result$1$[rsp], rax
  00084	48 85 c0	 test	 rax, rax
  00087	75 11		 jne	 SHORT $LN28@replace_in
  00089	4c 8b 74 24 28	 mov	 r14, QWORD PTR [rsp+40]

; 1756 : }

  0008e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00092	41 5d		 pop	 r13
  00094	41 5c		 pop	 r12
  00096	5f		 pop	 rdi
  00097	5e		 pop	 rsi
  00098	5d		 pop	 rbp
  00099	c3		 ret	 0
$LN28@replace_in:
  0009a	48 89 5c 24 78	 mov	 QWORD PTR [rsp+120], rbx

; 1734 :         return NULL;
; 1735 : 
; 1736 :     self_s = PyBytes_AS_STRING(self);

  0009f	49 83 c4 78	 add	 r12, 120		; 00000078H
  000a3	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15

; 1737 :     result_s = PyBytes_AS_STRING(result);

  000a8	48 8d 58 78	 lea	 rbx, QWORD PTR [rax+120]

; 1738 : 
; 1739 :     /* TODO: special case single character, which doesn't need memcpy */
; 1740 : 
; 1741 :     /* Lay the first one down (guaranteed this will occur) */
; 1742 :     Py_MEMCPY(result_s, to_s, to_len);

  000ac	48 83 fe 10	 cmp	 rsi, 16
  000b0	72 10		 jb	 SHORT $LN24@replace_in
  000b2	4c 8b c6	 mov	 r8, rsi
  000b5	48 8b d5	 mov	 rdx, rbp
  000b8	48 8b cb	 mov	 rcx, rbx
  000bb	e8 00 00 00 00	 call	 memcpy
  000c0	eb 2e		 jmp	 SHORT $LN26@replace_in
$LN24@replace_in:
  000c2	48 85 f6	 test	 rsi, rsi
  000c5	74 29		 je	 SHORT $LN26@replace_in
  000c7	4c 8b c5	 mov	 r8, rbp
  000ca	48 8b cb	 mov	 rcx, rbx
  000cd	48 8b d6	 mov	 rdx, rsi
  000d0	4c 2b c3	 sub	 r8, rbx
  000d3	66 66 66 66 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL22@replace_in:
  000e0	41 0f b6 04 08	 movzx	 eax, BYTE PTR [r8+rcx]
  000e5	48 ff c1	 inc	 rcx
  000e8	48 ff ca	 dec	 rdx
  000eb	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  000ee	75 f0		 jne	 SHORT $LL22@replace_in
$LN26@replace_in:

; 1744 :     count -= 1;

  000f0	49 ff cd	 dec	 r13
  000f3	48 03 de	 add	 rbx, rsi

; 1745 : 
; 1746 :     for (i=0; i<count; i++) {

  000f6	45 33 ff	 xor	 r15d, r15d
  000f9	4d 85 ed	 test	 r13, r13
  000fc	7e 76		 jle	 SHORT $LN8@replace_in

; 1743 :     result_s += to_len;

  000fe	48 8b 7c 24 68	 mov	 rdi, QWORD PTR to_s$[rsp]
  00103	4c 8b f6	 mov	 r14, rsi

; 1745 : 
; 1746 :     for (i=0; i<count; i++) {

  00106	4d 8b fd	 mov	 r15, r13
  00109	48 8b ef	 mov	 rbp, rdi
  0010c	49 f7 de	 neg	 r14
  0010f	48 2b eb	 sub	 rbp, rbx
$LL19@replace_in:

; 1747 :         *result_s++ = *self_s++;

  00112	41 0f b6 04 24	 movzx	 eax, BYTE PTR [r12]
  00117	48 ff c3	 inc	 rbx
  0011a	48 ff cd	 dec	 rbp
  0011d	88 43 ff	 mov	 BYTE PTR [rbx-1], al
  00120	49 ff c4	 inc	 r12

; 1748 :         Py_MEMCPY(result_s, to_s, to_len);

  00123	48 83 fe 10	 cmp	 rsi, 16
  00127	72 10		 jb	 SHORT $LN13@replace_in
  00129	4c 8b c6	 mov	 r8, rsi
  0012c	48 8b d7	 mov	 rdx, rdi
  0012f	48 8b cb	 mov	 rcx, rbx
  00132	e8 00 00 00 00	 call	 memcpy
  00137	eb 26		 jmp	 SHORT $LN15@replace_in
$LN13@replace_in:
  00139	48 85 f6	 test	 rsi, rsi
  0013c	74 21		 je	 SHORT $LN15@replace_in
  0013e	48 8b cb	 mov	 rcx, rbx
  00141	48 8b d6	 mov	 rdx, rsi
  00144	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL11@replace_in:
  00150	0f b6 04 29	 movzx	 eax, BYTE PTR [rcx+rbp]
  00154	48 ff c1	 inc	 rcx
  00157	48 ff ca	 dec	 rdx
  0015a	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  0015d	75 f1		 jne	 SHORT $LL11@replace_in
$LN15@replace_in:

; 1749 :         result_s += to_len;

  0015f	48 03 de	 add	 rbx, rsi
  00162	49 03 ee	 add	 rbp, r14
  00165	49 ff cd	 dec	 r13
  00168	75 a8		 jne	 SHORT $LL19@replace_in
  0016a	48 8b 7c 24 60	 mov	 rdi, QWORD PTR n_$1$[rsp]
  0016f	4c 8b 74 24 70	 mov	 r14, QWORD PTR result$1$[rsp]
$LN8@replace_in:

; 1750 :     }
; 1751 : 
; 1752 :     /* Copy the rest of the original string */
; 1753 :     Py_MEMCPY(result_s, self_s, self_len-i);

  00174	49 2b ff	 sub	 rdi, r15
  00177	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
  0017c	48 83 ff 10	 cmp	 rdi, 16
  00180	72 10		 jb	 SHORT $LN5@replace_in
  00182	4c 8b c7	 mov	 r8, rdi
  00185	49 8b d4	 mov	 rdx, r12
  00188	48 8b cb	 mov	 rcx, rbx
  0018b	e8 00 00 00 00	 call	 memcpy
  00190	eb 1e		 jmp	 SHORT $LN7@replace_in
$LN5@replace_in:
  00192	48 85 ff	 test	 rdi, rdi
  00195	74 19		 je	 SHORT $LN7@replace_in
  00197	4c 2b e3	 sub	 r12, rbx
  0019a	66 0f 1f 44 00
	00		 npad	 6
$LL3@replace_in:
  001a0	41 0f b6 04 1c	 movzx	 eax, BYTE PTR [r12+rbx]
  001a5	48 ff c3	 inc	 rbx
  001a8	48 ff cf	 dec	 rdi
  001ab	88 43 ff	 mov	 BYTE PTR [rbx-1], al
  001ae	75 f0		 jne	 SHORT $LL3@replace_in
$LN7@replace_in:
  001b0	48 8b 5c 24 78	 mov	 rbx, QWORD PTR [rsp+120]

; 1754 : 
; 1755 :     return result;

  001b5	49 8b c6	 mov	 rax, r14
  001b8	4c 8b 74 24 28	 mov	 r14, QWORD PTR [rsp+40]

; 1756 : }

  001bd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001c1	41 5d		 pop	 r13
  001c3	41 5c		 pop	 r12
  001c5	5f		 pop	 rdi
  001c6	5e		 pop	 rsi
  001c7	5d		 pop	 rbp
  001c8	c3		 ret	 0
replace_interleave ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$replace_delete_single_character DD imagerel replace_delete_single_character
	DD	imagerel replace_delete_single_character+126
	DD	imagerel $unwind$replace_delete_single_character
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$replace_delete_single_character DD imagerel replace_delete_single_character+126
	DD	imagerel replace_delete_single_character+327
	DD	imagerel $chain$0$replace_delete_single_character
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$replace_delete_single_character DD imagerel replace_delete_single_character+327
	DD	imagerel replace_delete_single_character+350
	DD	imagerel $chain$1$replace_delete_single_character
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$replace_delete_single_character DD 021H
	DD	imagerel replace_delete_single_character
	DD	imagerel replace_delete_single_character+126
	DD	imagerel $unwind$replace_delete_single_character
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$replace_delete_single_character DD 020521H
	DD	0af405H
	DD	imagerel replace_delete_single_character
	DD	imagerel replace_delete_single_character+126
	DD	imagerel $unwind$replace_delete_single_character
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$replace_delete_single_character DD 0a1601H
	DD	0c5416H
	DD	0b3416H
	DD	0e0123216H
	DD	0c00ed010H
	DD	0600b700cH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT replace_delete_single_character
_TEXT	SEGMENT
self$ = 80
from_c$ = 88
maxcount$ = 96
replace_delete_single_character PROC			; COMDAT

; 1763 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	41 55		 push	 r13
  00010	41 56		 push	 r14
  00012	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1764 :     char *self_s, *result_s;
; 1765 :     char *start, *next, *end;
; 1766 :     Py_ssize_t self_len, result_len;
; 1767 :     Py_ssize_t count;
; 1768 :     PyBytesObject *result;
; 1769 : 
; 1770 :     self_len = PyBytes_GET_SIZE(self);

  00016	48 8b 71 60	 mov	 rsi, QWORD PTR [rcx+96]

; 1771 :     self_s = PyBytes_AS_STRING(self);

  0001a	48 8d 59 78	 lea	 rbx, QWORD PTR [rcx+120]
  0001e	49 8b f8	 mov	 rdi, r8

; 1772 : 
; 1773 :     count = countchar(self_s, self_len, from_c, maxcount);

  00021	44 0f be f2	 movsx	 r14d, dl
  00025	4c 8b e9	 mov	 r13, rcx
  00028	4c 8d 24 33	 lea	 r12, QWORD PTR [rbx+rsi]
  0002c	4d 8b c4	 mov	 r8, r12
  0002f	41 8b d6	 mov	 edx, r14d
  00032	48 8b cb	 mov	 rcx, rbx
  00035	4c 2b c3	 sub	 r8, rbx
  00038	33 ed		 xor	 ebp, ebp
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  00040	48 85 c0	 test	 rax, rax
  00043	74 22		 je	 SHORT $LN40@replace_de
$LL26@replace_de:
  00045	48 ff c5	 inc	 rbp
  00048	48 3b ef	 cmp	 rbp, rdi
  0004b	7d 1a		 jge	 SHORT $LN40@replace_de
  0004d	48 ff c0	 inc	 rax
  00050	4d 8b c4	 mov	 r8, r12
  00053	41 8b d6	 mov	 edx, r14d
  00056	4c 2b c0	 sub	 r8, rax
  00059	48 8b c8	 mov	 rcx, rax
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  00062	48 85 c0	 test	 rax, rax
  00065	75 de		 jne	 SHORT $LL26@replace_de
$LN40@replace_de:

; 1774 :     if (count == 0) {

  00067	48 85 ed	 test	 rbp, rbp
  0006a	75 0d		 jne	 SHORT $LN21@replace_de

; 1775 :         return return_self(self);

  0006c	49 8b cd	 mov	 rcx, r13
  0006f	e8 00 00 00 00	 call	 return_self
  00074	e9 ce 00 00 00	 jmp	 $LN22@replace_de
$LN21@replace_de:

; 1776 :     }
; 1777 : 
; 1778 :     result_len = self_len - count;  /* from_len == 1 */

  00079	48 2b f5	 sub	 rsi, rbp

; 1779 :     assert(result_len>=0);
; 1780 : 
; 1781 :     if ( (result = (PyBytesObject *)
; 1782 :                     PyBytes_FromStringAndSize(NULL, result_len)) == NULL)

  0007c	33 c9		 xor	 ecx, ecx
  0007e	4c 89 7c 24 50	 mov	 QWORD PTR [rsp+80], r15
  00083	48 8b d6	 mov	 rdx, rsi
  00086	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0008b	4c 8b f8	 mov	 r15, rax
  0008e	48 85 c0	 test	 rax, rax
  00091	0f 84 ab 00 00
	00		 je	 $LN42@replace_de
$LN20@replace_de:

; 1783 :         return NULL;
; 1784 :     result_s = PyBytes_AS_STRING(result);

  00097	48 8d 78 78	 lea	 rdi, QWORD PTR [rax+120]

; 1785 : 
; 1786 :     start = self_s;
; 1787 :     end = self_s + self_len;
; 1788 :     while (count-- > 0) {

  0009b	48 85 ed	 test	 rbp, rbp
  0009e	7e 6b		 jle	 SHORT $LN8@replace_de
$LL19@replace_de:

; 1789 :         next = findchar(start, end-start, from_c);

  000a0	4d 8b c4	 mov	 r8, r12
  000a3	41 8b d6	 mov	 edx, r14d
  000a6	48 8b cb	 mov	 rcx, rbx
  000a9	4c 2b c3	 sub	 r8, rbx
  000ac	48 ff cd	 dec	 rbp
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  000b5	4c 8b e8	 mov	 r13, rax

; 1790 :         if (next == NULL)

  000b8	48 85 c0	 test	 rax, rax
  000bb	74 4e		 je	 SHORT $LN8@replace_de

; 1791 :             break;
; 1792 :         Py_MEMCPY(result_s, start, next-start);

  000bd	48 8b f0	 mov	 rsi, rax
  000c0	48 2b f3	 sub	 rsi, rbx
  000c3	48 83 fe 10	 cmp	 rsi, 16
  000c7	72 10		 jb	 SHORT $LN13@replace_de
  000c9	4c 8b c6	 mov	 r8, rsi
  000cc	48 8b d3	 mov	 rdx, rbx
  000cf	48 8b cf	 mov	 rcx, rdi
  000d2	e8 00 00 00 00	 call	 memcpy
  000d7	eb 26		 jmp	 SHORT $LN15@replace_de
$LN13@replace_de:
  000d9	48 85 f6	 test	 rsi, rsi
  000dc	74 21		 je	 SHORT $LN15@replace_de
  000de	48 8b cf	 mov	 rcx, rdi
  000e1	48 2b df	 sub	 rbx, rdi
  000e4	48 8b d6	 mov	 rdx, rsi
  000e7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL11@replace_de:
  000f0	0f b6 04 0b	 movzx	 eax, BYTE PTR [rbx+rcx]
  000f4	48 ff c1	 inc	 rcx
  000f7	48 ff ca	 dec	 rdx
  000fa	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  000fd	75 f1		 jne	 SHORT $LL11@replace_de
$LN15@replace_de:

; 1793 :         result_s += (next-start);

  000ff	48 03 fe	 add	 rdi, rsi

; 1794 :         start = next+1;

  00102	49 8d 5d 01	 lea	 rbx, QWORD PTR [r13+1]
  00106	48 85 ed	 test	 rbp, rbp
  00109	7f 95		 jg	 SHORT $LL19@replace_de
$LN8@replace_de:

; 1795 :     }
; 1796 :     Py_MEMCPY(result_s, start, end-start);

  0010b	4c 2b e3	 sub	 r12, rbx
  0010e	49 83 fc 10	 cmp	 r12, 16
  00112	72 10		 jb	 SHORT $LN5@replace_de
  00114	4d 8b c4	 mov	 r8, r12
  00117	48 8b d3	 mov	 rdx, rbx
  0011a	48 8b cf	 mov	 rcx, rdi
  0011d	e8 00 00 00 00	 call	 memcpy
  00122	eb 1b		 jmp	 SHORT $LN7@replace_de
$LN5@replace_de:
  00124	4d 85 e4	 test	 r12, r12
  00127	74 16		 je	 SHORT $LN7@replace_de
  00129	48 2b df	 sub	 rbx, rdi
  0012c	0f 1f 40 00	 npad	 4
$LL3@replace_de:
  00130	0f b6 04 1f	 movzx	 eax, BYTE PTR [rdi+rbx]
  00134	48 ff c7	 inc	 rdi
  00137	49 ff cc	 dec	 r12
  0013a	88 47 ff	 mov	 BYTE PTR [rdi-1], al
  0013d	75 f1		 jne	 SHORT $LL3@replace_de
$LN7@replace_de:

; 1797 : 
; 1798 :     return result;

  0013f	49 8b c7	 mov	 rax, r15
$LN42@replace_de:
  00142	4c 8b 7c 24 50	 mov	 r15, QWORD PTR [rsp+80]
$LN22@replace_de:

; 1799 : }

  00147	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  0014c	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  00151	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00155	41 5e		 pop	 r14
  00157	41 5d		 pop	 r13
  00159	41 5c		 pop	 r12
  0015b	5f		 pop	 rdi
  0015c	5e		 pop	 rsi
  0015d	c3		 ret	 0
replace_delete_single_character ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\stringlib\count.h
pdata	SEGMENT
$pdata$replace_delete_substring DD imagerel replace_delete_substring
	DD	imagerel replace_delete_substring+117
	DD	imagerel $unwind$replace_delete_substring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$replace_delete_substring DD imagerel replace_delete_substring+117
	DD	imagerel replace_delete_substring+164
	DD	imagerel $chain$0$replace_delete_substring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$replace_delete_substring DD imagerel replace_delete_substring+164
	DD	imagerel replace_delete_substring+185
	DD	imagerel $chain$2$replace_delete_substring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$replace_delete_substring DD imagerel replace_delete_substring+185
	DD	imagerel replace_delete_substring+350
	DD	imagerel $chain$4$replace_delete_substring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$replace_delete_substring DD imagerel replace_delete_substring+350
	DD	imagerel replace_delete_substring+393
	DD	imagerel $chain$5$replace_delete_substring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$replace_delete_substring DD imagerel replace_delete_substring+393
	DD	imagerel replace_delete_substring+436
	DD	imagerel $chain$7$replace_delete_substring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$replace_delete_substring DD imagerel replace_delete_substring+436
	DD	imagerel replace_delete_substring+455
	DD	imagerel $chain$8$replace_delete_substring
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$replace_delete_substring DD 021H
	DD	imagerel replace_delete_substring
	DD	imagerel replace_delete_substring+117
	DD	imagerel $unwind$replace_delete_substring
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$replace_delete_substring DD 020021H
	DD	06f400H
	DD	imagerel replace_delete_substring
	DD	imagerel replace_delete_substring+117
	DD	imagerel $unwind$replace_delete_substring
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$replace_delete_substring DD 021H
	DD	imagerel replace_delete_substring+164
	DD	imagerel replace_delete_substring+185
	DD	imagerel $chain$2$replace_delete_substring
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$replace_delete_substring DD 040d21H
	DD	07d40dH
	DD	0105408H
	DD	imagerel replace_delete_substring+164
	DD	imagerel replace_delete_substring+185
	DD	imagerel $chain$2$replace_delete_substring
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$replace_delete_substring DD 020021H
	DD	06f400H
	DD	imagerel replace_delete_substring
	DD	imagerel replace_delete_substring+117
	DD	imagerel $unwind$replace_delete_substring
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$replace_delete_substring DD 020521H
	DD	06f405H
	DD	imagerel replace_delete_substring
	DD	imagerel replace_delete_substring+117
	DD	imagerel $unwind$replace_delete_substring
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$replace_delete_substring DD 061001H
	DD	0e00c7210H
	DD	07008c00aH
	DD	030066007H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
xdata	ENDS
;	COMDAT replace_delete_substring
_TEXT	SEGMENT
result$1$ = 112
self$ = 112
from_s$ = 120
from_len$ = 128
maxcount$ = 136
replace_delete_substring PROC				; COMDAT

; 1806 :                          Py_ssize_t maxcount) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	53		 push	 rbx
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 56		 push	 r14
  0000c	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 1807 :     char *self_s, *result_s;
; 1808 :     char *start, *next, *end;
; 1809 :     Py_ssize_t self_len, result_len;
; 1810 :     Py_ssize_t count, offset;
; 1811 :     PyBytesObject *result;
; 1812 : 
; 1813 :     self_len = PyBytes_GET_SIZE(self);

  00010	48 8b 71 60	 mov	 rsi, QWORD PTR [rcx+96]
  00014	4d 8b e1	 mov	 r12, r9
  00017	4d 8b f0	 mov	 r14, r8
  0001a	48 8b d9	 mov	 rbx, rcx

; 1814 :     self_s = PyBytes_AS_STRING(self);

  0001d	48 8d 79 78	 lea	 rdi, QWORD PTR [rcx+120]

; 1815 : 
; 1816 :     count = stringlib_count(self_s, self_len,
; 1817 :                             from_s, from_len,
; 1818 :                             maxcount);

  00021	48 85 f6	 test	 rsi, rsi
  00024	0f 88 8a 01 00
	00		 js	 $LN39@replace_de@2
  0002a	4d 85 c0	 test	 r8, r8
  0002d	75 0b		 jne	 SHORT $LN25@replace_de@2
  0002f	49 3b f1	 cmp	 rsi, r9
  00032	7d 30		 jge	 SHORT $LN27@replace_de@2
  00034	4c 8d 66 01	 lea	 r12, QWORD PTR [rsi+1]
  00038	eb 2a		 jmp	 SHORT $LN27@replace_de@2
$LN25@replace_de@2:
  0003a	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00042	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00047	4d 8b c8	 mov	 r9, r8
  0004a	4c 8b c2	 mov	 r8, rdx
  0004d	48 8b cf	 mov	 rcx, rdi
  00050	48 8b d6	 mov	 rdx, rsi
  00053	e8 00 00 00 00	 call	 fastsearch
  00058	4c 8b e0	 mov	 r12, rax
  0005b	48 85 c0	 test	 rax, rax
  0005e	0f 88 50 01 00
	00		 js	 $LN39@replace_de@2
$LN27@replace_de@2:

; 1819 : 
; 1820 :     if (count == 0) {

  00064	4d 85 e4	 test	 r12, r12
  00067	0f 84 47 01 00
	00		 je	 $LN39@replace_de@2

; 1823 :     }
; 1824 : 
; 1825 :     result_len = self_len - (count * from_len);

  0006d	49 8b c4	 mov	 rax, r12
  00070	48 8b d6	 mov	 rdx, rsi

; 1826 :     assert (result_len>=0);
; 1827 : 
; 1828 :     if ( (result = (PyBytesObject *)
; 1829 :           PyBytes_FromStringAndSize(NULL, result_len)) == NULL )

  00073	33 c9		 xor	 ecx, ecx
  00075	4c 89 7c 24 30	 mov	 QWORD PTR [rsp+48], r15
  0007a	49 0f af c6	 imul	 rax, r14
  0007e	48 2b d0	 sub	 rdx, rax
  00081	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00086	4c 8b f8	 mov	 r15, rax
  00089	48 89 44 24 70	 mov	 QWORD PTR result$1$[rsp], rax
  0008e	48 85 c0	 test	 rax, rax
  00091	75 11		 jne	 SHORT $LN20@replace_de@2
  00093	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]

; 1851 : }

  00098	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0009c	41 5e		 pop	 r14
  0009e	41 5c		 pop	 r12
  000a0	5f		 pop	 rdi
  000a1	5e		 pop	 rsi
  000a2	5b		 pop	 rbx
  000a3	c3		 ret	 0
$LN20@replace_de@2:

; 1830 :         return NULL;
; 1831 : 
; 1832 :     result_s = PyBytes_AS_STRING(result);
; 1833 : 
; 1834 :     start = self_s;
; 1835 :     end = self_s + self_len;

  000a4	48 03 f7	 add	 rsi, rdi
  000a7	48 8d 58 78	 lea	 rbx, QWORD PTR [rax+120]

; 1836 :     while (count-- > 0) {

  000ab	4d 85 e4	 test	 r12, r12
  000ae	0f 8e aa 00 00
	00		 jle	 $LN8@replace_de@2
  000b4	4c 8b 7c 24 78	 mov	 r15, QWORD PTR from_s$[rsp]
  000b9	48 89 ac 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbp
  000c1	4c 89 6c 24 38	 mov	 QWORD PTR [rsp+56], r13
  000c6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL19@replace_de@2:

; 1837 :         offset = stringlib_find(start, end-start,
; 1838 :                                 from_s, from_len,
; 1839 :                                 0);

  000d0	48 8b d6	 mov	 rdx, rsi
  000d3	4d 8b ce	 mov	 r9, r14
  000d6	4d 8b c7	 mov	 r8, r15
  000d9	48 8b cf	 mov	 rcx, rdi
  000dc	48 2b d7	 sub	 rdx, rdi
  000df	49 ff cc	 dec	 r12
  000e2	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000eb	e8 00 00 00 00	 call	 stringlib_find

; 1840 :         if (offset == -1)

  000f0	48 83 f8 ff	 cmp	 rax, -1
  000f4	74 56		 je	 SHORT $LN40@replace_de@2

; 1841 :             break;
; 1842 :         next = start + offset;

  000f6	4c 8d 2c 38	 lea	 r13, QWORD PTR [rax+rdi]

; 1843 : 
; 1844 :         Py_MEMCPY(result_s, start, next-start);

  000fa	49 8b ed	 mov	 rbp, r13
  000fd	48 2b ef	 sub	 rbp, rdi
  00100	48 83 fd 10	 cmp	 rbp, 16
  00104	72 10		 jb	 SHORT $LN13@replace_de@2
  00106	4c 8b c5	 mov	 r8, rbp
  00109	48 8b d7	 mov	 rdx, rdi
  0010c	48 8b cb	 mov	 rcx, rbx
  0010f	e8 00 00 00 00	 call	 memcpy
  00114	eb 29		 jmp	 SHORT $LN15@replace_de@2
$LN13@replace_de@2:
  00116	48 85 ed	 test	 rbp, rbp
  00119	74 24		 je	 SHORT $LN15@replace_de@2
  0011b	48 8b cb	 mov	 rcx, rbx
  0011e	48 2b fb	 sub	 rdi, rbx
  00121	48 8b d5	 mov	 rdx, rbp
  00124	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL11@replace_de@2:
  00130	0f b6 04 0f	 movzx	 eax, BYTE PTR [rdi+rcx]
  00134	48 ff c1	 inc	 rcx
  00137	48 ff ca	 dec	 rdx
  0013a	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  0013d	75 f1		 jne	 SHORT $LL11@replace_de@2
$LN15@replace_de@2:

; 1845 : 
; 1846 :         result_s += (next-start);

  0013f	48 03 dd	 add	 rbx, rbp

; 1847 :         start = next+from_len;

  00142	4b 8d 7c 35 00	 lea	 rdi, QWORD PTR [r13+r14]
  00147	4d 85 e4	 test	 r12, r12
  0014a	7f 84		 jg	 SHORT $LL19@replace_de@2
$LN40@replace_de@2:
  0014c	4c 8b 7c 24 70	 mov	 r15, QWORD PTR result$1$[rsp]
  00151	4c 8b 6c 24 38	 mov	 r13, QWORD PTR [rsp+56]
  00156	48 8b ac 24 80
	00 00 00	 mov	 rbp, QWORD PTR [rsp+128]
$LN8@replace_de@2:

; 1848 :     }
; 1849 :     Py_MEMCPY(result_s, start, end-start);

  0015e	48 2b f7	 sub	 rsi, rdi
  00161	48 83 fe 10	 cmp	 rsi, 16
  00165	72 22		 jb	 SHORT $LN5@replace_de@2
  00167	4c 8b c6	 mov	 r8, rsi
  0016a	48 8b d7	 mov	 rdx, rdi
  0016d	48 8b cb	 mov	 rcx, rbx
  00170	e8 00 00 00 00	 call	 memcpy

; 1850 :     return result;

  00175	49 8b c7	 mov	 rax, r15
  00178	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]

; 1851 : }

  0017d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00181	41 5e		 pop	 r14
  00183	41 5c		 pop	 r12
  00185	5f		 pop	 rdi
  00186	5e		 pop	 rsi
  00187	5b		 pop	 rbx
  00188	c3		 ret	 0
$LN5@replace_de@2:

; 1848 :     }
; 1849 :     Py_MEMCPY(result_s, start, end-start);

  00189	48 85 f6	 test	 rsi, rsi
  0018c	74 12		 je	 SHORT $LN7@replace_de@2
  0018e	48 2b fb	 sub	 rdi, rbx
$LL3@replace_de@2:
  00191	0f b6 04 3b	 movzx	 eax, BYTE PTR [rbx+rdi]
  00195	48 ff c3	 inc	 rbx
  00198	48 ff ce	 dec	 rsi
  0019b	88 43 ff	 mov	 BYTE PTR [rbx-1], al
  0019e	75 f1		 jne	 SHORT $LL3@replace_de@2
$LN7@replace_de@2:

; 1850 :     return result;

  001a0	49 8b c7	 mov	 rax, r15
  001a3	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]

; 1851 : }

  001a8	48 83 c4 40	 add	 rsp, 64			; 00000040H
  001ac	41 5e		 pop	 r14
  001ae	41 5c		 pop	 r12
  001b0	5f		 pop	 rdi
  001b1	5e		 pop	 rsi
  001b2	5b		 pop	 rbx
  001b3	c3		 ret	 0
$LN39@replace_de@2:

; 1821 :         /* no matches */
; 1822 :         return return_self(self);

  001b4	48 8b cb	 mov	 rcx, rbx

; 1851 : }

  001b7	48 83 c4 40	 add	 rsp, 64			; 00000040H
  001bb	41 5e		 pop	 r14
  001bd	41 5c		 pop	 r12
  001bf	5f		 pop	 rdi
  001c0	5e		 pop	 rsi
  001c1	5b		 pop	 rbx
  001c2	e9 00 00 00 00	 jmp	 return_self
replace_delete_substring ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$replace_single_character_in_place DD imagerel replace_single_character_in_place
	DD	imagerel replace_single_character_in_place+85
	DD	imagerel $unwind$replace_single_character_in_place
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$replace_single_character_in_place DD imagerel replace_single_character_in_place+85
	DD	imagerel replace_single_character_in_place+251
	DD	imagerel $chain$0$replace_single_character_in_place
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$replace_single_character_in_place DD imagerel replace_single_character_in_place+251
	DD	imagerel replace_single_character_in_place+274
	DD	imagerel $chain$1$replace_single_character_in_place
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$replace_single_character_in_place DD 021H
	DD	imagerel replace_single_character_in_place
	DD	imagerel replace_single_character_in_place+85
	DD	imagerel $unwind$replace_single_character_in_place
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$replace_single_character_in_place DD 020521H
	DD	0ac405H
	DD	imagerel replace_single_character_in_place
	DD	imagerel replace_single_character_in_place+85
	DD	imagerel $unwind$replace_single_character_in_place
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$replace_single_character_in_place DD 0a1601H
	DD	0c5416H
	DD	0b3416H
	DD	0f0123216H
	DD	0d00ee010H
	DD	0600b700cH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT replace_single_character_in_place
_TEXT	SEGMENT
self$ = 80
from_c$ = 88
to_c$ = 96
maxcount$ = 104
replace_single_character_in_place PROC			; COMDAT

; 1858 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	41 56		 push	 r14
  00010	41 57		 push	 r15
  00012	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1859 :     char *self_s, *result_s, *start, *end, *next;
; 1860 :     Py_ssize_t self_len;
; 1861 :     PyBytesObject *result;
; 1862 : 
; 1863 :     /* The result string will be the same size */
; 1864 :     self_s = PyBytes_AS_STRING(self);
; 1865 :     self_len = PyBytes_GET_SIZE(self);

  00016	48 8b 79 60	 mov	 rdi, QWORD PTR [rcx+96]
  0001a	4c 8d 69 78	 lea	 r13, QWORD PTR [rcx+120]

; 1866 : 
; 1867 :     next = findchar(self_s, self_len, from_c);

  0001e	44 0f be f2	 movsx	 r14d, dl
  00022	41 0f b6 e8	 movzx	 ebp, r8b
  00026	48 8b f1	 mov	 rsi, rcx
  00029	41 8b d6	 mov	 edx, r14d
  0002c	4c 8b c7	 mov	 r8, rdi
  0002f	49 8b cd	 mov	 rcx, r13
  00032	49 8b d9	 mov	 rbx, r9
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  0003b	4c 8b f8	 mov	 r15, rax

; 1868 : 
; 1869 :     if (next == NULL) {

  0003e	48 85 c0	 test	 rax, rax
  00041	75 0d		 jne	 SHORT $LN13@replace_si

; 1870 :         /* No matches; return the original string */
; 1871 :         return return_self(self);

  00043	48 8b ce	 mov	 rcx, rsi
  00046	e8 00 00 00 00	 call	 return_self
  0004b	e9 ab 00 00 00	 jmp	 $LN14@replace_si
$LN13@replace_si:

; 1872 :     }
; 1873 : 
; 1874 :     /* Need to make a new string */
; 1875 :     result = (PyBytesObject *) PyBytes_FromStringAndSize(NULL, self_len);

  00050	48 8b d7	 mov	 rdx, rdi
  00053	33 c9		 xor	 ecx, ecx
  00055	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12
  0005a	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0005f	4c 8b e0	 mov	 r12, rax

; 1876 :     if (result == NULL)

  00062	48 85 c0	 test	 rax, rax
  00065	0f 84 8b 00 00
	00		 je	 $LN22@replace_si
$LN12@replace_si:

; 1877 :         return NULL;
; 1878 :     result_s = PyBytes_AS_STRING(result);

  0006b	48 8d 70 78	 lea	 rsi, QWORD PTR [rax+120]

; 1879 :     Py_MEMCPY(result_s, self_s, self_len);

  0006f	48 83 ff 10	 cmp	 rdi, 16
  00073	72 10		 jb	 SHORT $LN8@replace_si
  00075	4c 8b c7	 mov	 r8, rdi
  00078	49 8b d5	 mov	 rdx, r13
  0007b	48 8b ce	 mov	 rcx, rsi
  0007e	e8 00 00 00 00	 call	 memcpy
  00083	eb 2b		 jmp	 SHORT $LN10@replace_si
$LN8@replace_si:
  00085	48 85 ff	 test	 rdi, rdi
  00088	74 26		 je	 SHORT $LN10@replace_si
  0008a	4d 8b c5	 mov	 r8, r13
  0008d	48 8b ce	 mov	 rcx, rsi
  00090	48 8b d7	 mov	 rdx, rdi
  00093	4c 2b c6	 sub	 r8, rsi
  00096	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL6@replace_si:
  000a0	41 0f b6 04 08	 movzx	 eax, BYTE PTR [r8+rcx]
  000a5	48 ff c1	 inc	 rcx
  000a8	48 ff ca	 dec	 rdx
  000ab	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  000ae	75 f0		 jne	 SHORT $LL6@replace_si
$LN10@replace_si:

; 1880 : 
; 1881 :     /* change everything in-place, starting with this one */
; 1882 :     start =  result_s + (next-self_s);

  000b0	48 8b ce	 mov	 rcx, rsi

; 1883 :     *start = to_c;
; 1884 :     start++;
; 1885 :     end = result_s + self_len;
; 1886 : 
; 1887 :     while (--maxcount > 0) {

  000b3	48 ff cb	 dec	 rbx
  000b6	48 03 fe	 add	 rdi, rsi
  000b9	49 2b cd	 sub	 rcx, r13
  000bc	49 03 cf	 add	 rcx, r15
  000bf	48 ff c1	 inc	 rcx
  000c2	40 88 69 ff	 mov	 BYTE PTR [rcx-1], bpl
  000c6	48 85 db	 test	 rbx, rbx
  000c9	7e 28		 jle	 SHORT $LN21@replace_si
  000cb	0f 1f 44 00 00	 npad	 5
$LL3@replace_si:

; 1888 :         next = findchar(start, end-start, from_c);

  000d0	4c 8b c7	 mov	 r8, rdi
  000d3	41 8b d6	 mov	 edx, r14d
  000d6	4c 2b c1	 sub	 r8, rcx
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr

; 1889 :         if (next == NULL)

  000df	48 85 c0	 test	 rax, rax
  000e2	74 0f		 je	 SHORT $LN21@replace_si

; 1890 :             break;
; 1891 :         *next = to_c;

  000e4	48 ff cb	 dec	 rbx
  000e7	40 88 28	 mov	 BYTE PTR [rax], bpl

; 1892 :         start = next+1;

  000ea	48 8d 48 01	 lea	 rcx, QWORD PTR [rax+1]
  000ee	48 85 db	 test	 rbx, rbx
  000f1	7f dd		 jg	 SHORT $LL3@replace_si
$LN21@replace_si:

; 1893 :     }
; 1894 : 
; 1895 :     return result;

  000f3	49 8b c4	 mov	 rax, r12
$LN22@replace_si:
  000f6	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]
$LN14@replace_si:

; 1896 : }

  000fb	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00100	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  00105	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00109	41 5f		 pop	 r15
  0010b	41 5e		 pop	 r14
  0010d	41 5d		 pop	 r13
  0010f	5f		 pop	 rdi
  00110	5e		 pop	 rsi
  00111	c3		 ret	 0
replace_single_character_in_place ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$replace_substring_in_place DD imagerel replace_substring_in_place
	DD	imagerel replace_substring_in_place+95
	DD	imagerel $unwind$replace_substring_in_place
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$replace_substring_in_place DD imagerel replace_substring_in_place+95
	DD	imagerel replace_substring_in_place+387
	DD	imagerel $chain$0$replace_substring_in_place
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$replace_substring_in_place DD imagerel replace_substring_in_place+387
	DD	imagerel replace_substring_in_place+410
	DD	imagerel $chain$1$replace_substring_in_place
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$replace_substring_in_place DD 021H
	DD	imagerel replace_substring_in_place
	DD	imagerel replace_substring_in_place+95
	DD	imagerel $unwind$replace_substring_in_place
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$replace_substring_in_place DD 020521H
	DD	0ce405H
	DD	imagerel replace_substring_in_place
	DD	imagerel replace_substring_in_place+95
	DD	imagerel $unwind$replace_substring_in_place
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$replace_substring_in_place DD 0a1601H
	DD	0e5416H
	DD	0d3416H
	DD	0f0125216H
	DD	0c00ed010H
	DD	0600b700cH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT replace_substring_in_place
_TEXT	SEGMENT
self$ = 96
from_s$ = 104
from_len$ = 112
to_s$ = 120
maxcount$ = 128
replace_substring_in_place PROC				; COMDAT

; 1904 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	41 55		 push	 r13
  00010	41 57		 push	 r15
  00012	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1905 :     char *result_s, *start, *end;
; 1906 :     char *self_s;
; 1907 :     Py_ssize_t self_len, offset;
; 1908 :     PyBytesObject *result;
; 1909 : 
; 1910 :     /* The result string will be the same size */
; 1911 : 
; 1912 :     self_s = PyBytes_AS_STRING(self);
; 1913 :     self_len = PyBytes_GET_SIZE(self);

  00016	48 8b 71 60	 mov	 rsi, QWORD PTR [rcx+96]
  0001a	48 8d 79 78	 lea	 rdi, QWORD PTR [rcx+120]
  0001e	4d 8b e9	 mov	 r13, r9
  00021	49 8b d8	 mov	 rbx, r8

; 1914 : 
; 1915 :     offset = stringlib_find(self_s, self_len,
; 1916 :                             from_s, from_len,
; 1917 :                             0);

  00024	4d 8b c8	 mov	 r9, r8
  00027	4c 8b fa	 mov	 r15, rdx
  0002a	48 8b e9	 mov	 rbp, rcx
  0002d	4c 8b c2	 mov	 r8, rdx
  00030	48 8b d6	 mov	 rdx, rsi
  00033	48 8b cf	 mov	 rcx, rdi
  00036	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0003f	e8 00 00 00 00	 call	 stringlib_find
  00044	4c 8b e0	 mov	 r12, rax

; 1918 :     if (offset == -1) {

  00047	48 83 f8 ff	 cmp	 rax, -1
  0004b	75 0d		 jne	 SHORT $LN29@replace_su

; 1919 :         /* No matches; return the original string */
; 1920 :         return return_self(self);

  0004d	48 8b cd	 mov	 rcx, rbp
  00050	e8 00 00 00 00	 call	 return_self
  00055	e9 29 01 00 00	 jmp	 $LN30@replace_su
$LN29@replace_su:

; 1921 :     }
; 1922 : 
; 1923 :     /* Need to make a new string */
; 1924 :     result = (PyBytesObject *) PyBytes_FromStringAndSize(NULL, self_len);

  0005a	48 8b d6	 mov	 rdx, rsi
  0005d	33 c9		 xor	 ecx, ecx
  0005f	4c 89 74 24 60	 mov	 QWORD PTR [rsp+96], r14
  00064	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00069	4c 8b f0	 mov	 r14, rax

; 1925 :     if (result == NULL)

  0006c	48 85 c0	 test	 rax, rax
  0006f	0f 84 09 01 00
	00		 je	 $LN42@replace_su
$LN28@replace_su:

; 1926 :         return NULL;
; 1927 :     result_s = PyBytes_AS_STRING(result);

  00075	48 8d 68 78	 lea	 rbp, QWORD PTR [rax+120]

; 1928 :     Py_MEMCPY(result_s, self_s, self_len);

  00079	48 83 fe 10	 cmp	 rsi, 16
  0007d	72 10		 jb	 SHORT $LN24@replace_su
  0007f	4c 8b c6	 mov	 r8, rsi
  00082	48 8b d7	 mov	 rdx, rdi
  00085	48 8b cd	 mov	 rcx, rbp
  00088	e8 00 00 00 00	 call	 memcpy
  0008d	eb 20		 jmp	 SHORT $LN26@replace_su
$LN24@replace_su:
  0008f	48 85 f6	 test	 rsi, rsi
  00092	74 1b		 je	 SHORT $LN26@replace_su
  00094	48 8b cd	 mov	 rcx, rbp
  00097	48 2b fd	 sub	 rdi, rbp
  0009a	48 8b d6	 mov	 rdx, rsi
  0009d	0f 1f 00	 npad	 3
$LL22@replace_su:
  000a0	0f b6 04 0f	 movzx	 eax, BYTE PTR [rdi+rcx]
  000a4	48 ff c1	 inc	 rcx
  000a7	48 ff ca	 dec	 rdx
  000aa	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  000ad	75 f1		 jne	 SHORT $LL22@replace_su
$LN26@replace_su:

; 1929 : 
; 1930 :     /* change everything in-place, starting with this one */
; 1931 :     start =  result_s + offset;

  000af	49 8d 3c 2c	 lea	 rdi, QWORD PTR [r12+rbp]

; 1932 :     Py_MEMCPY(start, to_s, from_len);

  000b3	48 83 fb 10	 cmp	 rbx, 16
  000b7	72 10		 jb	 SHORT $LN16@replace_su
  000b9	4c 8b c3	 mov	 r8, rbx
  000bc	49 8b d5	 mov	 rdx, r13
  000bf	48 8b cf	 mov	 rcx, rdi
  000c2	e8 00 00 00 00	 call	 memcpy
  000c7	eb 27		 jmp	 SHORT $LN18@replace_su
$LN16@replace_su:
  000c9	48 85 db	 test	 rbx, rbx
  000cc	74 22		 je	 SHORT $LN18@replace_su
  000ce	4d 8b c5	 mov	 r8, r13
  000d1	48 8b cf	 mov	 rcx, rdi
  000d4	48 8b d3	 mov	 rdx, rbx
  000d7	4c 2b c7	 sub	 r8, rdi
  000da	66 0f 1f 44 00
	00		 npad	 6
$LL14@replace_su:
  000e0	41 0f b6 04 08	 movzx	 eax, BYTE PTR [r8+rcx]
  000e5	48 ff c1	 inc	 rcx
  000e8	48 ff ca	 dec	 rdx
  000eb	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  000ee	75 f0		 jne	 SHORT $LL14@replace_su
$LN18@replace_su:

; 1933 :     start += from_len;
; 1934 :     end = result_s + self_len;

  000f0	48 03 ee	 add	 rbp, rsi

; 1935 : 
; 1936 :     while ( --maxcount > 0) {

  000f3	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR maxcount$[rsp]
  000fb	48 03 fb	 add	 rdi, rbx
  000fe	48 ff ce	 dec	 rsi
  00101	48 85 f6	 test	 rsi, rsi
  00104	7e 75		 jle	 SHORT $LN41@replace_su
  00106	45 33 e4	 xor	 r12d, r12d
  00109	0f 1f 80 00 00
	00 00		 npad	 7
$LL11@replace_su:

; 1937 :         offset = stringlib_find(start, end-start,
; 1938 :                                 from_s, from_len,
; 1939 :                                 0);

  00110	48 8b d5	 mov	 rdx, rbp
  00113	4c 8b cb	 mov	 r9, rbx
  00116	4d 8b c7	 mov	 r8, r15
  00119	48 8b cf	 mov	 rcx, rdi
  0011c	48 2b d7	 sub	 rdx, rdi
  0011f	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  00124	e8 00 00 00 00	 call	 stringlib_find

; 1940 :         if (offset==-1)

  00129	48 83 f8 ff	 cmp	 rax, -1
  0012d	74 4c		 je	 SHORT $LN41@replace_su

; 1941 :             break;
; 1942 :         Py_MEMCPY(start+offset, to_s, from_len);

  0012f	48 03 f8	 add	 rdi, rax
  00132	48 83 fb 10	 cmp	 rbx, 16
  00136	72 10		 jb	 SHORT $LN5@replace_su
  00138	4c 8b c3	 mov	 r8, rbx
  0013b	49 8b d5	 mov	 rdx, r13
  0013e	48 8b cf	 mov	 rcx, rdi
  00141	e8 00 00 00 00	 call	 memcpy
  00146	eb 28		 jmp	 SHORT $LN7@replace_su
$LN5@replace_su:
  00148	48 85 db	 test	 rbx, rbx
  0014b	74 23		 je	 SHORT $LN7@replace_su
  0014d	4d 8b c5	 mov	 r8, r13
  00150	48 8b cf	 mov	 rcx, rdi
  00153	48 8b d3	 mov	 rdx, rbx
  00156	4c 2b c7	 sub	 r8, rdi
  00159	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@replace_su:
  00160	41 0f b6 04 08	 movzx	 eax, BYTE PTR [r8+rcx]
  00165	48 ff c1	 inc	 rcx
  00168	48 ff ca	 dec	 rdx
  0016b	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  0016e	75 f0		 jne	 SHORT $LL3@replace_su
$LN7@replace_su:

; 1935 : 
; 1936 :     while ( --maxcount > 0) {

  00170	48 ff ce	 dec	 rsi

; 1943 :         start += offset+from_len;

  00173	48 03 fb	 add	 rdi, rbx
  00176	48 85 f6	 test	 rsi, rsi
  00179	7f 95		 jg	 SHORT $LL11@replace_su
$LN41@replace_su:

; 1944 :     }
; 1945 : 
; 1946 :     return result;

  0017b	49 8b c6	 mov	 rax, r14
$LN42@replace_su:
  0017e	4c 8b 74 24 60	 mov	 r14, QWORD PTR [rsp+96]
$LN30@replace_su:

; 1947 : }

  00183	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00188	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  0018d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00191	41 5f		 pop	 r15
  00193	41 5d		 pop	 r13
  00195	41 5c		 pop	 r12
  00197	5f		 pop	 rdi
  00198	5e		 pop	 rsi
  00199	c3		 ret	 0
replace_substring_in_place ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$replace_single_character DD imagerel replace_single_character
	DD	imagerel replace_single_character+615
	DD	imagerel $unwind$replace_single_character
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$replace_single_character DD 0a1901H
	DD	0e3419H
	DD	0f0153219H
	DD	0d011e013H
	DD	0700dc00fH
	DD	0500b600cH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT replace_single_character
_TEXT	SEGMENT
result$1$ = 96
self$ = 96
tv630 = 104
from_c$ = 104
to_s$ = 112
to_len$ = 120
maxcount$ = 128
replace_single_character PROC				; COMDAT

; 1955 : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	41 54		 push	 r12
  0000f	41 55		 push	 r13
  00011	41 56		 push	 r14
  00013	41 57		 push	 r15
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1956 :     char *self_s, *result_s;
; 1957 :     char *start, *next, *end;
; 1958 :     Py_ssize_t self_len, result_len;
; 1959 :     Py_ssize_t count;
; 1960 :     PyBytesObject *result;
; 1961 : 
; 1962 :     self_s = PyBytes_AS_STRING(self);
; 1963 :     self_len = PyBytes_GET_SIZE(self);

  00019	4c 8b 61 60	 mov	 r12, QWORD PTR [rcx+96]
  0001d	48 8d 79 78	 lea	 rdi, QWORD PTR [rcx+120]
  00021	4d 8b f8	 mov	 r15, r8

; 1964 : 
; 1965 :     count = countchar(self_s, self_len, from_c, maxcount);

  00024	0f be c2	 movsx	 eax, dl
  00027	48 8b e9	 mov	 rbp, rcx
  0002a	4d 8d 34 3c	 lea	 r14, QWORD PTR [r12+rdi]
  0002e	4d 8b c6	 mov	 r8, r14
  00031	8b d0		 mov	 edx, eax
  00033	48 8b cf	 mov	 rcx, rdi
  00036	4c 2b c7	 sub	 r8, rdi
  00039	49 8b f1	 mov	 rsi, r9
  0003c	45 33 ed	 xor	 r13d, r13d
  0003f	89 44 24 68	 mov	 DWORD PTR tv630[rsp], eax
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  00049	48 85 c0	 test	 rax, rax
  0004c	74 38		 je	 SHORT $LN54@replace_si@2
  0004e	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR maxcount$[rsp]
  00056	8b 74 24 68	 mov	 esi, DWORD PTR tv630[rsp]
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL45@replace_si@2:
  00060	49 ff c5	 inc	 r13
  00063	4c 3b eb	 cmp	 r13, rbx
  00066	7d 19		 jge	 SHORT $LN62@replace_si@2
  00068	48 ff c0	 inc	 rax
  0006b	4d 8b c6	 mov	 r8, r14
  0006e	8b d6		 mov	 edx, esi
  00070	4c 2b c0	 sub	 r8, rax
  00073	48 8b c8	 mov	 rcx, rax
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  0007c	48 85 c0	 test	 rax, rax
  0007f	75 df		 jne	 SHORT $LL45@replace_si@2
$LN62@replace_si@2:
  00081	48 8b 74 24 78	 mov	 rsi, QWORD PTR to_len$[rsp]
$LN54@replace_si@2:

; 1966 :     if (count == 0) {

  00086	4d 85 ed	 test	 r13, r13
  00089	75 0d		 jne	 SHORT $LN40@replace_si@2

; 1967 :         /* no matches, return unchanged */
; 1968 :         return return_self(self);

  0008b	48 8b cd	 mov	 rcx, rbp
  0008e	e8 00 00 00 00	 call	 return_self
  00093	e9 ba 01 00 00	 jmp	 $LN41@replace_si@2
$LN40@replace_si@2:

; 1969 :     }
; 1970 : 
; 1971 :     /* use the difference between current and new, hence the "-1" */
; 1972 :     /*   result_len = self_len + count * (to_len-1)  */
; 1973 :     assert(count > 0);
; 1974 :     if (to_len - 1 > (PY_SSIZE_T_MAX - self_len) / count) {

  00098	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  000a2	48 8d 4e ff	 lea	 rcx, QWORD PTR [rsi-1]
  000a6	49 2b c4	 sub	 rax, r12
  000a9	48 99		 cdq
  000ab	49 f7 fd	 idiv	 r13
  000ae	48 3b c8	 cmp	 rcx, rax
  000b1	7e 1a		 jle	 SHORT $LN39@replace_si@2

; 1975 :         PyErr_SetString(PyExc_OverflowError,
; 1976 :                         "replacement bytes are too long");

  000b3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@DIPAALHI@replacement?5bytes?5are?5too?5long?$AA@
  000c1	e8 00 00 00 00	 call	 PyErr_SetString
$LN64@replace_si@2:

; 1977 :         return NULL;

  000c6	33 c0		 xor	 eax, eax
  000c8	e9 85 01 00 00	 jmp	 $LN41@replace_si@2
$LN39@replace_si@2:

; 1978 :     }
; 1979 :     result_len = self_len + count * (to_len - 1);

  000cd	49 0f af cd	 imul	 rcx, r13
  000d1	49 8d 14 0c	 lea	 rdx, QWORD PTR [r12+rcx]

; 1980 : 
; 1981 :     if ( (result = (PyBytesObject *)
; 1982 :           PyBytes_FromStringAndSize(NULL, result_len)) == NULL)

  000d5	33 c9		 xor	 ecx, ecx
  000d7	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000dc	48 8b e8	 mov	 rbp, rax
  000df	48 89 44 24 60	 mov	 QWORD PTR result$1$[rsp], rax
  000e4	48 85 c0	 test	 rax, rax

; 1983 :         return NULL;

  000e7	74 dd		 je	 SHORT $LN64@replace_si@2

; 1984 :     result_s = PyBytes_AS_STRING(result);

  000e9	48 8d 58 78	 lea	 rbx, QWORD PTR [rax+120]

; 1985 : 
; 1986 :     start = self_s;
; 1987 :     end = self_s + self_len;
; 1988 :     while (count-- > 0) {

  000ed	4d 85 ed	 test	 r13, r13
  000f0	0f 8e 20 01 00
	00		 jle	 $LN8@replace_si@2
  000f6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL37@replace_si@2:

; 1989 :         next = findchar(start, end-start, from_c);

  00100	8b 54 24 68	 mov	 edx, DWORD PTR tv630[rsp]
  00104	4d 8b c6	 mov	 r8, r14
  00107	48 8b cf	 mov	 rcx, rdi
  0010a	4c 2b c7	 sub	 r8, rdi
  0010d	49 ff cd	 dec	 r13
  00110	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  00116	4c 8b e0	 mov	 r12, rax

; 1990 :         if (next == NULL)

  00119	48 85 c0	 test	 rax, rax
  0011c	0f 84 ef 00 00
	00		 je	 $LN63@replace_si@2

; 1991 :             break;
; 1992 : 
; 1993 :         if (next == start) {

  00122	48 3b c7	 cmp	 rax, rdi
  00125	75 54		 jne	 SHORT $LN24@replace_si@2

; 1994 :             /* replace with the 'to' */
; 1995 :             Py_MEMCPY(result_s, to_s, to_len);

  00127	48 83 fe 10	 cmp	 rsi, 16
  0012b	72 19		 jb	 SHORT $LN30@replace_si@2
  0012d	4c 8b c6	 mov	 r8, rsi
  00130	49 8b d7	 mov	 rdx, r15
  00133	48 8b cb	 mov	 rcx, rbx
  00136	e8 00 00 00 00	 call	 memcpy

; 1996 :             result_s += to_len;

  0013b	48 03 de	 add	 rbx, rsi

; 1997 :             start += 1;

  0013e	48 ff c7	 inc	 rdi

; 1998 :         } else {

  00141	e9 c2 00 00 00	 jmp	 $LN25@replace_si@2
$LN30@replace_si@2:

; 1994 :             /* replace with the 'to' */
; 1995 :             Py_MEMCPY(result_s, to_s, to_len);

  00146	48 85 f6	 test	 rsi, rsi
  00149	74 25		 je	 SHORT $LN32@replace_si@2
  0014b	4d 8b c7	 mov	 r8, r15
  0014e	48 8b cb	 mov	 rcx, rbx
  00151	48 8b d6	 mov	 rdx, rsi
  00154	4c 2b c3	 sub	 r8, rbx
  00157	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL28@replace_si@2:
  00160	41 0f b6 04 08	 movzx	 eax, BYTE PTR [r8+rcx]
  00165	48 ff c1	 inc	 rcx
  00168	48 ff ca	 dec	 rdx
  0016b	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  0016e	75 f0		 jne	 SHORT $LL28@replace_si@2
$LN32@replace_si@2:

; 1996 :             result_s += to_len;

  00170	48 03 de	 add	 rbx, rsi

; 1997 :             start += 1;

  00173	48 ff c7	 inc	 rdi

; 1998 :         } else {

  00176	e9 8d 00 00 00	 jmp	 $LN25@replace_si@2
$LN24@replace_si@2:

; 1999 :             /* copy the unchanged old then the 'to' */
; 2000 :             Py_MEMCPY(result_s, start, next-start);

  0017b	48 8b e8	 mov	 rbp, rax
  0017e	48 2b ef	 sub	 rbp, rdi
  00181	48 83 fd 10	 cmp	 rbp, 16
  00185	72 10		 jb	 SHORT $LN21@replace_si@2
  00187	4c 8b c5	 mov	 r8, rbp
  0018a	48 8b d7	 mov	 rdx, rdi
  0018d	48 8b cb	 mov	 rcx, rbx
  00190	e8 00 00 00 00	 call	 memcpy
  00195	eb 28		 jmp	 SHORT $LN23@replace_si@2
$LN21@replace_si@2:
  00197	48 85 ed	 test	 rbp, rbp
  0019a	74 23		 je	 SHORT $LN23@replace_si@2
  0019c	48 8b cb	 mov	 rcx, rbx
  0019f	48 2b fb	 sub	 rdi, rbx
  001a2	48 8b d5	 mov	 rdx, rbp
  001a5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL19@replace_si@2:
  001b0	0f b6 04 0f	 movzx	 eax, BYTE PTR [rdi+rcx]
  001b4	48 ff c1	 inc	 rcx
  001b7	48 ff ca	 dec	 rdx
  001ba	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  001bd	75 f1		 jne	 SHORT $LL19@replace_si@2
$LN23@replace_si@2:

; 2001 :             result_s += (next-start);

  001bf	48 03 dd	 add	 rbx, rbp

; 2002 :             Py_MEMCPY(result_s, to_s, to_len);

  001c2	48 83 fe 10	 cmp	 rsi, 16
  001c6	72 10		 jb	 SHORT $LN13@replace_si@2
  001c8	4c 8b c6	 mov	 r8, rsi
  001cb	49 8b d7	 mov	 rdx, r15
  001ce	48 8b cb	 mov	 rcx, rbx
  001d1	e8 00 00 00 00	 call	 memcpy
  001d6	eb 28		 jmp	 SHORT $LN15@replace_si@2
$LN13@replace_si@2:
  001d8	48 85 f6	 test	 rsi, rsi
  001db	74 23		 je	 SHORT $LN15@replace_si@2
  001dd	4d 8b c7	 mov	 r8, r15
  001e0	48 8b cb	 mov	 rcx, rbx
  001e3	48 8b d6	 mov	 rdx, rsi
  001e6	4c 2b c3	 sub	 r8, rbx
  001e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL11@replace_si@2:
  001f0	41 0f b6 04 08	 movzx	 eax, BYTE PTR [r8+rcx]
  001f5	48 ff c1	 inc	 rcx
  001f8	48 ff ca	 dec	 rdx
  001fb	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  001fe	75 f0		 jne	 SHORT $LL11@replace_si@2
$LN15@replace_si@2:

; 2003 :             result_s += to_len;

  00200	48 03 de	 add	 rbx, rsi

; 2004 :             start = next+1;

  00203	49 8d 7c 24 01	 lea	 rdi, QWORD PTR [r12+1]
$LN25@replace_si@2:

; 1985 : 
; 1986 :     start = self_s;
; 1987 :     end = self_s + self_len;
; 1988 :     while (count-- > 0) {

  00208	4d 85 ed	 test	 r13, r13
  0020b	0f 8f ef fe ff
	ff		 jg	 $LL37@replace_si@2
$LN63@replace_si@2:
  00211	48 8b 6c 24 60	 mov	 rbp, QWORD PTR result$1$[rsp]
$LN8@replace_si@2:

; 2005 :         }
; 2006 :     }
; 2007 :     /* Copy the remainder of the remaining string */
; 2008 :     Py_MEMCPY(result_s, start, end-start);

  00216	4c 2b f7	 sub	 r14, rdi
  00219	49 83 fe 10	 cmp	 r14, 16
  0021d	72 10		 jb	 SHORT $LN5@replace_si@2
  0021f	4d 8b c6	 mov	 r8, r14
  00222	48 8b d7	 mov	 rdx, rdi
  00225	48 8b cb	 mov	 rcx, rbx
  00228	e8 00 00 00 00	 call	 memcpy
  0022d	eb 20		 jmp	 SHORT $LN7@replace_si@2
$LN5@replace_si@2:
  0022f	4d 85 f6	 test	 r14, r14
  00232	74 1b		 je	 SHORT $LN7@replace_si@2
  00234	48 2b fb	 sub	 rdi, rbx
  00237	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL3@replace_si@2:
  00240	0f b6 04 3b	 movzx	 eax, BYTE PTR [rbx+rdi]
  00244	48 ff c3	 inc	 rbx
  00247	49 ff ce	 dec	 r14
  0024a	88 43 ff	 mov	 BYTE PTR [rbx-1], al
  0024d	75 f1		 jne	 SHORT $LL3@replace_si@2
$LN7@replace_si@2:

; 2009 : 
; 2010 :     return result;

  0024f	48 8b c5	 mov	 rax, rbp
$LN41@replace_si@2:

; 2011 : }

  00252	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  00257	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0025b	41 5f		 pop	 r15
  0025d	41 5e		 pop	 r14
  0025f	41 5d		 pop	 r13
  00261	41 5c		 pop	 r12
  00263	5f		 pop	 rdi
  00264	5e		 pop	 rsi
  00265	5d		 pop	 rbp
  00266	c3		 ret	 0
replace_single_character ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\stringlib\count.h
pdata	SEGMENT
$pdata$replace_substring DD imagerel replace_substring
	DD	imagerel replace_substring+137
	DD	imagerel $unwind$replace_substring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$replace_substring DD imagerel replace_substring+137
	DD	imagerel replace_substring+199
	DD	imagerel $chain$0$replace_substring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$replace_substring DD imagerel replace_substring+199
	DD	imagerel replace_substring+234
	DD	imagerel $chain$1$replace_substring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$replace_substring DD imagerel replace_substring+234
	DD	imagerel replace_substring+254
	DD	imagerel $chain$2$replace_substring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$replace_substring DD imagerel replace_substring+254
	DD	imagerel replace_substring+633
	DD	imagerel $chain$5$replace_substring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$replace_substring DD imagerel replace_substring+633
	DD	imagerel replace_substring+669
	DD	imagerel $chain$6$replace_substring
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$replace_substring DD imagerel replace_substring+669
	DD	imagerel replace_substring+688
	DD	imagerel $chain$8$replace_substring
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$replace_substring DD 021H
	DD	imagerel replace_substring
	DD	imagerel replace_substring+137
	DD	imagerel $unwind$replace_substring
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$replace_substring DD 060021H
	DD	06d400H
	DD	07c400H
	DD	0106400H
	DD	imagerel replace_substring
	DD	imagerel replace_substring+137
	DD	imagerel $unwind$replace_substring
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$replace_substring DD 060521H
	DD	06d405H
	DD	07c400H
	DD	0106400H
	DD	imagerel replace_substring
	DD	imagerel replace_substring+137
	DD	imagerel $unwind$replace_substring
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$replace_substring DD 021H
	DD	imagerel replace_substring+137
	DD	imagerel replace_substring+199
	DD	imagerel $chain$0$replace_substring
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$replace_substring DD 020521H
	DD	07c405H
	DD	imagerel replace_substring+137
	DD	imagerel replace_substring+199
	DD	imagerel $chain$0$replace_substring
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$replace_substring DD 020821H
	DD	0106408H
	DD	imagerel replace_substring
	DD	imagerel replace_substring+137
	DD	imagerel $unwind$replace_substring
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$replace_substring DD 061501H
	DD	0f0117215H
	DD	0700de00fH
	DD	0300b500cH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
xdata	ENDS
;	COMDAT replace_substring
_TEXT	SEGMENT
result$1$ = 112
self$ = 112
from_s$ = 120
from_len$ = 128
to_s$ = 136
to_len$ = 144
maxcount$ = 152
replace_substring PROC					; COMDAT

; 2018 :                   Py_ssize_t maxcount) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	53		 push	 rbx
  0000b	55		 push	 rbp
  0000c	57		 push	 rdi
  0000d	41 56		 push	 r14
  0000f	41 57		 push	 r15
  00011	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 2019 :     char *self_s, *result_s;
; 2020 :     char *start, *next, *end;
; 2021 :     Py_ssize_t self_len, result_len;
; 2022 :     Py_ssize_t count, offset;
; 2023 :     PyBytesObject *result;
; 2024 : 
; 2025 :     self_s = PyBytes_AS_STRING(self);
; 2026 :     self_len = PyBytes_GET_SIZE(self);

  00015	48 8b 69 60	 mov	 rbp, QWORD PTR [rcx+96]
  00019	4d 8b f8	 mov	 r15, r8
  0001c	48 8b d9	 mov	 rbx, rcx
  0001f	48 8d 79 78	 lea	 rdi, QWORD PTR [rcx+120]

; 2027 : 
; 2028 :     count = stringlib_count(self_s, self_len,
; 2029 :                             from_s, from_len,
; 2030 :                             maxcount);

  00023	48 85 ed	 test	 rbp, rbp
  00026	0f 88 71 02 00
	00		 js	 $LN61@replace_su@2
  0002c	4d 85 c0	 test	 r8, r8
  0002f	75 13		 jne	 SHORT $LN44@replace_su@2
  00031	4c 8b b4 24 98
	00 00 00	 mov	 r14, QWORD PTR maxcount$[rsp]
  00039	49 3b ee	 cmp	 rbp, r14
  0003c	7d 38		 jge	 SHORT $LN46@replace_su@2
  0003e	4c 8d 75 01	 lea	 r14, QWORD PTR [rbp+1]
  00042	eb 32		 jmp	 SHORT $LN46@replace_su@2
$LN44@replace_su@2:
  00044	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR maxcount$[rsp]
  0004c	4d 8b c8	 mov	 r9, r8
  0004f	4c 8b c2	 mov	 r8, rdx
  00052	48 8b d5	 mov	 rdx, rbp
  00055	48 8b cf	 mov	 rcx, rdi
  00058	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00060	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00065	e8 00 00 00 00	 call	 fastsearch
  0006a	4c 8b f0	 mov	 r14, rax
  0006d	48 85 c0	 test	 rax, rax
  00070	0f 88 27 02 00
	00		 js	 $LN61@replace_su@2
$LN46@replace_su@2:

; 2031 : 
; 2032 :     if (count == 0) {

  00076	4d 85 f6	 test	 r14, r14
  00079	0f 84 1e 02 00
	00		 je	 $LN61@replace_su@2

; 2035 :     }
; 2036 : 
; 2037 :     /* Check for overflow */
; 2038 :     /*    result_len = self_len + count * (to_len-from_len) */
; 2039 :     assert(count > 0);
; 2040 :     if (to_len - from_len > (PY_SSIZE_T_MAX - self_len) / count) {

  0007f	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00089	48 89 b4 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rsi
  00091	48 8b b4 24 90
	00 00 00	 mov	 rsi, QWORD PTR to_len$[rsp]
  00099	48 2b c5	 sub	 rax, rbp
  0009c	48 8b ce	 mov	 rcx, rsi
  0009f	48 99		 cdq
  000a1	49 2b cf	 sub	 rcx, r15
  000a4	49 f7 fe	 idiv	 r14
  000a7	48 3b c8	 cmp	 rcx, rax
  000aa	7e 17		 jle	 SHORT $LN39@replace_su@2

; 2041 :         PyErr_SetString(PyExc_OverflowError,
; 2042 :                         "replacement bytes are too long");

  000ac	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@DIPAALHI@replacement?5bytes?5are?5too?5long?$AA@
  000ba	e8 00 00 00 00	 call	 PyErr_SetString

; 2043 :         return NULL;

  000bf	33 c0		 xor	 eax, eax
  000c1	eb 27		 jmp	 SHORT $LN63@replace_su@2
$LN39@replace_su@2:

; 2044 :     }
; 2045 :     result_len = self_len + count * (to_len-from_len);

  000c3	49 0f af ce	 imul	 rcx, r14
  000c7	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12
  000cc	48 8d 54 0d 00	 lea	 rdx, QWORD PTR [rbp+rcx]

; 2046 : 
; 2047 :     if ( (result = (PyBytesObject *)
; 2048 :           PyBytes_FromStringAndSize(NULL, result_len)) == NULL)

  000d1	33 c9		 xor	 ecx, ecx
  000d3	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000d8	4c 8b e0	 mov	 r12, rax
  000db	48 89 44 24 70	 mov	 QWORD PTR result$1$[rsp], rax
  000e0	48 85 c0	 test	 rax, rax
  000e3	75 19		 jne	 SHORT $LN38@replace_su@2
$LN64@replace_su@2:
  000e5	4c 8b 64 24 38	 mov	 r12, QWORD PTR [rsp+56]
$LN63@replace_su@2:
  000ea	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR [rsp+128]

; 2079 : }

  000f2	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000f6	41 5f		 pop	 r15
  000f8	41 5e		 pop	 r14
  000fa	5f		 pop	 rdi
  000fb	5d		 pop	 rbp
  000fc	5b		 pop	 rbx
  000fd	c3		 ret	 0
$LN38@replace_su@2:
  000fe	4c 89 6c 24 30	 mov	 QWORD PTR [rsp+48], r13

; 2049 :         return NULL;
; 2050 :     result_s = PyBytes_AS_STRING(result);

  00103	48 8d 58 78	 lea	 rbx, QWORD PTR [rax+120]

; 2051 : 
; 2052 :     start = self_s;
; 2053 :     end = self_s + self_len;

  00107	4c 8d 2c 2f	 lea	 r13, QWORD PTR [rdi+rbp]

; 2054 :     while (count-- > 0) {

  0010b	4d 85 f6	 test	 r14, r14
  0010e	0f 8e 41 01 00
	00		 jle	 $LN8@replace_su@2
  00114	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL37@replace_su@2:

; 2055 :         offset = stringlib_find(start, end-start,
; 2056 :                                 from_s, from_len,
; 2057 :                                 0);

  00120	4c 8b 44 24 78	 mov	 r8, QWORD PTR from_s$[rsp]
  00125	49 8b d5	 mov	 rdx, r13
  00128	4d 8b cf	 mov	 r9, r15
  0012b	48 8b cf	 mov	 rcx, rdi
  0012e	48 2b d7	 sub	 rdx, rdi
  00131	49 ff ce	 dec	 r14
  00134	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0013d	e8 00 00 00 00	 call	 stringlib_find

; 2058 :         if (offset == -1)

  00142	48 83 f8 ff	 cmp	 rax, -1
  00146	0f 84 04 01 00
	00		 je	 $LN62@replace_su@2

; 2059 :             break;
; 2060 :         next = start+offset;

  0014c	4c 8d 24 38	 lea	 r12, QWORD PTR [rax+rdi]

; 2061 :         if (next == start) {

  00150	4c 3b e7	 cmp	 r12, rdi
  00153	75 56		 jne	 SHORT $LN24@replace_su@2

; 2062 :             /* replace with the 'to' */
; 2063 :             Py_MEMCPY(result_s, to_s, to_len);

  00155	48 83 fe 10	 cmp	 rsi, 16
  00159	72 1e		 jb	 SHORT $LN30@replace_su@2
  0015b	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR to_s$[rsp]
  00163	4c 8b c6	 mov	 r8, rsi
  00166	48 8b cb	 mov	 rcx, rbx
  00169	e8 00 00 00 00	 call	 memcpy

; 2064 :             result_s += to_len;

  0016e	48 03 de	 add	 rbx, rsi

; 2065 :             start += from_len;

  00171	49 03 ff	 add	 rdi, r15

; 2066 :         } else {

  00174	e9 ce 00 00 00	 jmp	 $LN25@replace_su@2
$LN30@replace_su@2:

; 2062 :             /* replace with the 'to' */
; 2063 :             Py_MEMCPY(result_s, to_s, to_len);

  00179	48 85 f6	 test	 rsi, rsi
  0017c	74 22		 je	 SHORT $LN32@replace_su@2
  0017e	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR to_s$[rsp]
  00186	48 8b cb	 mov	 rcx, rbx
  00189	48 8b d6	 mov	 rdx, rsi
  0018c	4c 2b c3	 sub	 r8, rbx
  0018f	90		 npad	 1
$LL28@replace_su@2:
  00190	41 0f b6 04 08	 movzx	 eax, BYTE PTR [r8+rcx]
  00195	48 ff c1	 inc	 rcx
  00198	48 ff ca	 dec	 rdx
  0019b	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  0019e	75 f0		 jne	 SHORT $LL28@replace_su@2
$LN32@replace_su@2:

; 2064 :             result_s += to_len;

  001a0	48 03 de	 add	 rbx, rsi

; 2065 :             start += from_len;

  001a3	49 03 ff	 add	 rdi, r15

; 2066 :         } else {

  001a6	e9 9c 00 00 00	 jmp	 $LN25@replace_su@2
$LN24@replace_su@2:

; 2067 :             /* copy the unchanged old then the 'to' */
; 2068 :             Py_MEMCPY(result_s, start, next-start);

  001ab	49 8b ec	 mov	 rbp, r12
  001ae	48 2b ef	 sub	 rbp, rdi
  001b1	48 83 fd 10	 cmp	 rbp, 16
  001b5	72 10		 jb	 SHORT $LN21@replace_su@2
  001b7	4c 8b c5	 mov	 r8, rbp
  001ba	48 8b d7	 mov	 rdx, rdi
  001bd	48 8b cb	 mov	 rcx, rbx
  001c0	e8 00 00 00 00	 call	 memcpy
  001c5	eb 28		 jmp	 SHORT $LN23@replace_su@2
$LN21@replace_su@2:
  001c7	48 85 ed	 test	 rbp, rbp
  001ca	74 23		 je	 SHORT $LN23@replace_su@2
  001cc	48 8b cb	 mov	 rcx, rbx
  001cf	48 2b fb	 sub	 rdi, rbx
  001d2	48 8b d5	 mov	 rdx, rbp
  001d5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL19@replace_su@2:
  001e0	0f b6 04 0f	 movzx	 eax, BYTE PTR [rdi+rcx]
  001e4	48 ff c1	 inc	 rcx
  001e7	48 ff ca	 dec	 rdx
  001ea	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  001ed	75 f1		 jne	 SHORT $LL19@replace_su@2
$LN23@replace_su@2:

; 2069 :             result_s += (next-start);

  001ef	48 03 dd	 add	 rbx, rbp

; 2070 :             Py_MEMCPY(result_s, to_s, to_len);

  001f2	48 83 fe 10	 cmp	 rsi, 16
  001f6	72 15		 jb	 SHORT $LN13@replace_su@2
  001f8	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR to_s$[rsp]
  00200	4c 8b c6	 mov	 r8, rsi
  00203	48 8b cb	 mov	 rcx, rbx
  00206	e8 00 00 00 00	 call	 memcpy
  0020b	eb 33		 jmp	 SHORT $LN15@replace_su@2
$LN13@replace_su@2:
  0020d	48 85 f6	 test	 rsi, rsi
  00210	74 2e		 je	 SHORT $LN15@replace_su@2
  00212	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR to_s$[rsp]
  0021a	48 8b cb	 mov	 rcx, rbx
  0021d	48 8b d6	 mov	 rdx, rsi
  00220	4c 2b c3	 sub	 r8, rbx
  00223	66 66 66 66 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL11@replace_su@2:
  00230	41 0f b6 04 08	 movzx	 eax, BYTE PTR [r8+rcx]
  00235	48 ff c1	 inc	 rcx
  00238	48 ff ca	 dec	 rdx
  0023b	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  0023e	75 f0		 jne	 SHORT $LL11@replace_su@2
$LN15@replace_su@2:

; 2071 :             result_s += to_len;

  00240	48 03 de	 add	 rbx, rsi

; 2072 :             start = next+from_len;

  00243	4b 8d 3c 3c	 lea	 rdi, QWORD PTR [r12+r15]
$LN25@replace_su@2:

; 2054 :     while (count-- > 0) {

  00247	4d 85 f6	 test	 r14, r14
  0024a	0f 8f d0 fe ff
	ff		 jg	 $LL37@replace_su@2
$LN62@replace_su@2:
  00250	4c 8b 64 24 70	 mov	 r12, QWORD PTR result$1$[rsp]
$LN8@replace_su@2:

; 2073 :         }
; 2074 :     }
; 2075 :     /* Copy the remainder of the remaining string */
; 2076 :     Py_MEMCPY(result_s, start, end-start);

  00255	4c 2b ef	 sub	 r13, rdi
  00258	49 83 fd 10	 cmp	 r13, 16
  0025c	72 1b		 jb	 SHORT $LN5@replace_su@2
  0025e	4d 8b c5	 mov	 r8, r13
  00261	48 8b d7	 mov	 rdx, rdi
  00264	48 8b cb	 mov	 rcx, rbx
  00267	e8 00 00 00 00	 call	 memcpy
  0026c	4c 8b 6c 24 30	 mov	 r13, QWORD PTR [rsp+48]

; 2077 : 
; 2078 :     return result;

  00271	49 8b c4	 mov	 rax, r12
  00274	e9 6c fe ff ff	 jmp	 $LN64@replace_su@2
$LN5@replace_su@2:

; 2073 :         }
; 2074 :     }
; 2075 :     /* Copy the remainder of the remaining string */
; 2076 :     Py_MEMCPY(result_s, start, end-start);

  00279	4d 85 ed	 test	 r13, r13
  0027c	74 12		 je	 SHORT $LN7@replace_su@2
  0027e	48 2b fb	 sub	 rdi, rbx
$LL3@replace_su@2:
  00281	0f b6 04 3b	 movzx	 eax, BYTE PTR [rbx+rdi]
  00285	48 ff c3	 inc	 rbx
  00288	49 ff cd	 dec	 r13
  0028b	88 43 ff	 mov	 BYTE PTR [rbx-1], al
  0028e	75 f1		 jne	 SHORT $LL3@replace_su@2
$LN7@replace_su@2:
  00290	4c 8b 6c 24 30	 mov	 r13, QWORD PTR [rsp+48]

; 2077 : 
; 2078 :     return result;

  00295	49 8b c4	 mov	 rax, r12
  00298	e9 48 fe ff ff	 jmp	 $LN64@replace_su@2
$LN61@replace_su@2:

; 2033 :         /* no matches, return unchanged */
; 2034 :         return return_self(self);

  0029d	48 8b cb	 mov	 rcx, rbx

; 2079 : }

  002a0	48 83 c4 40	 add	 rsp, 64			; 00000040H
  002a4	41 5f		 pop	 r15
  002a6	41 5e		 pop	 r14
  002a8	5f		 pop	 rdi
  002a9	5d		 pop	 rbp
  002aa	5b		 pop	 rbx
  002ab	e9 00 00 00 00	 jmp	 return_self
replace_substring ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$replace DD imagerel replace
	DD	imagerel replace+253
	DD	imagerel $unwind$replace
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$replace DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT replace
_TEXT	SEGMENT
self$ = 64
from_s$ = 72
from_len$ = 80
to_s$ = 88
to_len$ = 96
maxcount$ = 104
replace	PROC						; COMDAT

; 2087 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2088 :     if (maxcount < 0) {

  00004	48 8b 44 24 68	 mov	 rax, QWORD PTR maxcount$[rsp]
  00009	4d 8b d9	 mov	 r11, r9
  0000c	4c 8b d2	 mov	 r10, rdx
  0000f	48 85 c0	 test	 rax, rax
  00012	79 0c		 jns	 SHORT $LN21@replace

; 2089 :         maxcount = PY_SSIZE_T_MAX;

  00014	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0001e	eb 11		 jmp	 SHORT $LN14@replace
$LN21@replace:

; 2090 :     } else if (maxcount == 0 || PyBytes_GET_SIZE(self) == 0) {

  00020	0f 84 ce 00 00
	00		 je	 $LN13@replace
  00026	48 83 79 60 00	 cmp	 QWORD PTR [rcx+96], 0
  0002b	0f 84 c3 00 00
	00		 je	 $LN13@replace
$LN14@replace:

; 2091 :         /* nothing to do; return the original string */
; 2092 :         return return_self(self);
; 2093 :     }
; 2094 : 
; 2095 :     if (maxcount == 0 ||
; 2096 :         (from_len == 0 && to_len == 0)) {

  00031	4d 85 c0	 test	 r8, r8
  00034	75 1d		 jne	 SHORT $LN10@replace
  00036	4c 8b 44 24 60	 mov	 r8, QWORD PTR to_len$[rsp]
  0003b	4d 85 c0	 test	 r8, r8
  0003e	0f 84 b0 00 00
	00		 je	 $LN13@replace

; 2097 :         /* nothing to do; return the original string */
; 2098 :         return return_self(self);
; 2099 :     }
; 2100 : 
; 2101 :     /* Handle zero-length special cases */
; 2102 : 
; 2103 :     if (from_len == 0) {
; 2104 :         /* insert the 'to' string everywhere.   */
; 2105 :         /*    >>> "Python".replace("", ".")     */
; 2106 :         /*    '.P.y.t.h.o.n.'                   */
; 2107 :         return replace_interleave(self, to_s, to_len, maxcount);

  00044	4c 8b c8	 mov	 r9, rax
  00047	49 8b d3	 mov	 rdx, r11

; 2152 :     }
; 2153 : }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	e9 00 00 00 00	 jmp	 replace_interleave
$LN10@replace:

; 2108 :     }
; 2109 : 
; 2110 :     /* Except for "".replace("", "A") == "A" there is no way beyond this */
; 2111 :     /* point for an empty self string to generate a non-empty string */
; 2112 :     /* Special case so the remaining code always gets a non-empty string */
; 2113 :     if (PyBytes_GET_SIZE(self) == 0) {

  00053	48 83 79 60 00	 cmp	 QWORD PTR [rcx+96], 0

; 2114 :         return return_self(self);

  00058	0f 84 96 00 00
	00		 je	 $LN13@replace

; 2115 :     }
; 2116 : 
; 2117 :     if (to_len == 0) {

  0005e	48 8b 54 24 60	 mov	 rdx, QWORD PTR to_len$[rsp]
  00063	48 85 d2	 test	 rdx, rdx
  00066	75 25		 jne	 SHORT $LN6@replace

; 2118 :         /* delete all occurrences of 'from' string */
; 2119 :         if (from_len == 1) {

  00068	49 83 f8 01	 cmp	 r8, 1
  0006c	75 10		 jne	 SHORT $LN7@replace

; 2120 :             return replace_delete_single_character(
; 2121 :                 self, from_s[0], maxcount);

  0006e	41 0f b6 12	 movzx	 edx, BYTE PTR [r10]
  00072	4c 8b c0	 mov	 r8, rax

; 2152 :     }
; 2153 : }

  00075	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00079	e9 00 00 00 00	 jmp	 replace_delete_single_character
$LN7@replace:

; 2122 :         } else {
; 2123 :             return replace_delete_substring(self, from_s,
; 2124 :                                             from_len, maxcount);

  0007e	4c 8b c8	 mov	 r9, rax
  00081	49 8b d2	 mov	 rdx, r10

; 2152 :     }
; 2153 : }

  00084	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00088	e9 00 00 00 00	 jmp	 replace_delete_substring
$LN6@replace:

; 2125 :         }
; 2126 :     }
; 2127 : 
; 2128 :     /* Handle special case where both strings have the same length */
; 2129 : 
; 2130 :     if (from_len == to_len) {

  0008d	4c 3b c2	 cmp	 r8, rdx
  00090	75 2c		 jne	 SHORT $LN3@replace

; 2131 :         if (from_len == 1) {

  00092	49 83 f8 01	 cmp	 r8, 1
  00096	75 14		 jne	 SHORT $LN4@replace

; 2132 :             return replace_single_character_in_place(
; 2133 :                 self,
; 2134 :                 from_s[0],
; 2135 :                 to_s[0],
; 2136 :                 maxcount);

  00098	45 0f b6 03	 movzx	 r8d, BYTE PTR [r11]
  0009c	41 0f b6 12	 movzx	 edx, BYTE PTR [r10]
  000a0	4c 8b c8	 mov	 r9, rax

; 2152 :     }
; 2153 : }

  000a3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a7	e9 00 00 00 00	 jmp	 replace_single_character_in_place
$LN4@replace:

; 2137 :         } else {
; 2138 :             return replace_substring_in_place(
; 2139 :                 self, from_s, from_len, to_s, to_len,
; 2140 :                 maxcount);

  000ac	49 8b d2	 mov	 rdx, r10
  000af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b4	e8 00 00 00 00	 call	 replace_substring_in_place

; 2152 :     }
; 2153 : }

  000b9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bd	c3		 ret	 0
$LN3@replace:

; 2141 :         }
; 2142 :     }
; 2143 : 
; 2144 :     /* Otherwise use the more generic algorithms */
; 2145 :     if (from_len == 1) {

  000be	49 83 f8 01	 cmp	 r8, 1
  000c2	75 19		 jne	 SHORT $LN2@replace

; 2146 :         return replace_single_character(self, from_s[0],
; 2147 :                                         to_s, to_len, maxcount);

  000c4	4c 8b ca	 mov	 r9, rdx
  000c7	41 0f b6 12	 movzx	 edx, BYTE PTR [r10]
  000cb	4d 8b c3	 mov	 r8, r11
  000ce	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d3	e8 00 00 00 00	 call	 replace_single_character

; 2152 :     }
; 2153 : }

  000d8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000dc	c3		 ret	 0
$LN2@replace:

; 2148 :     } else {
; 2149 :         /* len('from')>=2, len('to')>=1 */
; 2150 :         return replace_substring(self, from_s, from_len, to_s, to_len,
; 2151 :                                  maxcount);

  000dd	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000e2	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  000e7	49 8b d2	 mov	 rdx, r10
  000ea	e8 00 00 00 00	 call	 replace_substring

; 2152 :     }
; 2153 : }

  000ef	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f3	c3		 ret	 0
$LN13@replace:
  000f4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f8	e9 00 00 00 00	 jmp	 return_self
replace	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@BJBCHDAG@OO?$HMn?3replace?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_replace DD imagerel bytes_replace
	DD	imagerel bytes_replace+259
	DD	imagerel $unwind$bytes_replace
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_replace DD 020601H
	DD	03002b206H
xdata	ENDS
;	COMDAT ??_C@_0N@BJBCHDAG@OO?$HMn?3replace?$AA@
CONST	SEGMENT
??_C@_0N@BJBCHDAG@OO?$HMn?3replace?$AA@ DB 'OO|n:replace', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bytes_replace
_TEXT	SEGMENT
count$ = 48
from_len$ = 56
from_s$ = 64
from$ = 72
to$ = 80
self$ = 112
args$ = 120
to_s$ = 128
to_len$ = 136
bytes_replace PROC					; COMDAT

; 2164 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	48 8b c2	 mov	 rax, rdx

; 2165 :     Py_ssize_t count = -1;
; 2166 :     PyObject *from, *to;
; 2167 :     const char *from_s, *to_s;
; 2168 :     Py_ssize_t from_len, to_len;
; 2169 : 
; 2170 :     if (!PyArg_ParseTuple(args, "OO|n:replace", &from, &to, &count))

  0000c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR count$[rsp]
  00011	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00016	4c 8d 4c 24 50	 lea	 r9, QWORD PTR to$[rsp]
  0001b	4c 8d 44 24 48	 lea	 r8, QWORD PTR from$[rsp]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@BJBCHDAG@OO?$HMn?3replace?$AA@
  00027	48 8b c8	 mov	 rcx, rax
  0002a	48 c7 44 24 30
	ff ff ff ff	 mov	 QWORD PTR count$[rsp], -1
  00033	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00038	85 c0		 test	 eax, eax
  0003a	75 08		 jne	 SHORT $LN7@bytes_repl
$LN12@bytes_repl:

; 2171 :         return NULL;

  0003c	33 c0		 xor	 eax, eax

; 2190 : }

  0003e	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00042	5b		 pop	 rbx
  00043	c3		 ret	 0
$LN7@bytes_repl:

; 2172 : 
; 2173 :     if (PyBytes_Check(from)) {

  00044	48 8b 4c 24 48	 mov	 rcx, QWORD PTR from$[rsp]
  00049	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0004d	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  00057	74 14		 je	 SHORT $LN6@bytes_repl

; 2174 :         from_s = PyBytes_AS_STRING(from);

  00059	48 8d 41 78	 lea	 rax, QWORD PTR [rcx+120]
  0005d	48 89 44 24 40	 mov	 QWORD PTR from_s$[rsp], rax

; 2175 :         from_len = PyBytes_GET_SIZE(from);

  00062	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00066	48 89 44 24 38	 mov	 QWORD PTR from_len$[rsp], rax
  0006b	eb 13		 jmp	 SHORT $LN10@bytes_repl
$LN6@bytes_repl:

; 2176 :     }
; 2177 :     else if (PyObject_AsCharBuffer(from, &from_s, &from_len))

  0006d	4c 8d 44 24 38	 lea	 r8, QWORD PTR from_len$[rsp]
  00072	48 8d 54 24 40	 lea	 rdx, QWORD PTR from_s$[rsp]
  00077	e8 00 00 00 00	 call	 PyObject_AsCharBuffer
  0007c	85 c0		 test	 eax, eax

; 2178 :         return NULL;

  0007e	75 bc		 jne	 SHORT $LN12@bytes_repl
$LN10@bytes_repl:

; 2179 : 
; 2180 :     if (PyBytes_Check(to)) {

  00080	48 8b 4c 24 50	 mov	 rcx, QWORD PTR to$[rsp]
  00085	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00089	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  00093	74 1a		 je	 SHORT $LN3@bytes_repl

; 2181 :         to_s = PyBytes_AS_STRING(to);

  00095	4c 8d 49 78	 lea	 r9, QWORD PTR [rcx+120]
  00099	4c 89 8c 24 80
	00 00 00	 mov	 QWORD PTR to_s$[rsp], r9

; 2182 :         to_len = PyBytes_GET_SIZE(to);

  000a1	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  000a5	48 89 94 24 88
	00 00 00	 mov	 QWORD PTR to_len$[rsp], rdx
  000ad	eb 2d		 jmp	 SHORT $LN1@bytes_repl
$LN3@bytes_repl:

; 2183 :     }
; 2184 :     else if (PyObject_AsCharBuffer(to, &to_s, &to_len))

  000af	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR to_len$[rsp]
  000b7	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR to_s$[rsp]
  000bf	e8 00 00 00 00	 call	 PyObject_AsCharBuffer
  000c4	85 c0		 test	 eax, eax

; 2185 :         return NULL;

  000c6	0f 85 70 ff ff
	ff		 jne	 $LN12@bytes_repl
  000cc	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR to_s$[rsp]
  000d4	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR to_len$[rsp]
$LN1@bytes_repl:

; 2186 : 
; 2187 :     return (PyObject *)replace((PyBytesObject *) self,
; 2188 :                                from_s, from_len,
; 2189 :                                to_s, to_len, count);

  000dc	48 8b 44 24 30	 mov	 rax, QWORD PTR count$[rsp]
  000e1	4c 8b 44 24 38	 mov	 r8, QWORD PTR from_len$[rsp]
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ee	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  000f3	48 8b 54 24 40	 mov	 rdx, QWORD PTR from_s$[rsp]
  000f8	e8 00 00 00 00	 call	 replace

; 2190 : }

  000fd	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00101	5b		 pop	 rbx
  00102	c3		 ret	 0
bytes_replace ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_bytes_tailmatch DD imagerel _bytes_tailmatch
	DD	imagerel _bytes_tailmatch+114
	DD	imagerel $unwind$_bytes_tailmatch
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_bytes_tailmatch DD imagerel _bytes_tailmatch+114
	DD	imagerel _bytes_tailmatch+191
	DD	imagerel $chain$0$_bytes_tailmatch
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_bytes_tailmatch DD imagerel _bytes_tailmatch+191
	DD	imagerel _bytes_tailmatch+248
	DD	imagerel $chain$2$_bytes_tailmatch
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_bytes_tailmatch DD 020021H
	DD	0a5400H
	DD	imagerel _bytes_tailmatch
	DD	imagerel _bytes_tailmatch+114
	DD	imagerel $unwind$_bytes_tailmatch
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_bytes_tailmatch DD 020521H
	DD	0a5405H
	DD	imagerel _bytes_tailmatch
	DD	imagerel _bytes_tailmatch+114
	DD	imagerel $unwind$_bytes_tailmatch
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bytes_tailmatch DD 060d01H
	DD	0b340dH
	DD	0c009320dH
	DD	060067007H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _bytes_tailmatch
_TEXT	SEGMENT
sub$ = 64
self$ = 64
slen$ = 72
substr$ = 72
start$ = 80
end$ = 88
direction$ = 96
_bytes_tailmatch PROC					; COMDAT

; 2201 : {

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	41 54		 push	 r12
  00009	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2202 :     Py_ssize_t len = PyBytes_GET_SIZE(self);
; 2203 :     Py_ssize_t slen;
; 2204 :     const char* sub;
; 2205 :     const char* str;
; 2206 : 
; 2207 :     if (PyBytes_Check(substr)) {

  0000d	48 8b 42 58	 mov	 rax, QWORD PTR [rdx+88]
  00011	48 8b 71 60	 mov	 rsi, QWORD PTR [rcx+96]
  00015	49 8b d9	 mov	 rbx, r9
  00018	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  00022	49 8b f8	 mov	 rdi, r8
  00025	4c 8b ca	 mov	 r9, rdx
  00028	4c 8b e1	 mov	 r12, rcx
  0002b	74 14		 je	 SHORT $LN16@bytes_tail

; 2208 :         sub = PyBytes_AS_STRING(substr);
; 2209 :         slen = PyBytes_GET_SIZE(substr);

  0002d	4d 8b 41 60	 mov	 r8, QWORD PTR [r9+96]
  00031	48 83 c2 78	 add	 rdx, 120		; 00000078H
  00035	4c 89 44 24 48	 mov	 QWORD PTR slen$[rsp], r8
  0003a	48 89 54 24 40	 mov	 QWORD PTR sub$[rsp], rdx
  0003f	eb 31		 jmp	 SHORT $LN14@bytes_tail
$LN16@bytes_tail:

; 2210 :     }
; 2211 :     else if (PyObject_AsCharBuffer(substr, &sub, &slen))

  00041	4c 8d 44 24 48	 lea	 r8, QWORD PTR slen$[rsp]
  00046	48 8d 54 24 40	 lea	 rdx, QWORD PTR sub$[rsp]
  0004b	49 8b c9	 mov	 rcx, r9
  0004e	e8 00 00 00 00	 call	 PyObject_AsCharBuffer
  00053	85 c0		 test	 eax, eax
  00055	74 11		 je	 SHORT $LN19@bytes_tail

; 2212 :         return -1;

  00057	83 c8 ff	 or	 eax, -1

; 2231 :     return 0;
; 2232 : }

  0005a	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  0005f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00063	41 5c		 pop	 r12
  00065	5f		 pop	 rdi
  00066	5e		 pop	 rsi
  00067	c3		 ret	 0
$LN19@bytes_tail:

; 2212 :         return -1;

  00068	48 8b 54 24 40	 mov	 rdx, QWORD PTR sub$[rsp]
  0006d	4c 8b 44 24 48	 mov	 r8, QWORD PTR slen$[rsp]
$LN14@bytes_tail:

; 2213 :     str = PyBytes_AS_STRING(self);
; 2214 : 
; 2215 :     ADJUST_INDICES(start, end, len);

  00072	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  00077	33 ed		 xor	 ebp, ebp
  00079	48 3b de	 cmp	 rbx, rsi
  0007c	7e 05		 jle	 SHORT $LN13@bytes_tail
  0007e	48 8b de	 mov	 rbx, rsi
  00081	eb 0c		 jmp	 SHORT $LN10@bytes_tail
$LN13@bytes_tail:
  00083	48 85 db	 test	 rbx, rbx
  00086	79 07		 jns	 SHORT $LN10@bytes_tail
  00088	48 03 de	 add	 rbx, rsi
  0008b	48 0f 48 dd	 cmovs	 rbx, rbp
$LN10@bytes_tail:
  0008f	48 85 ff	 test	 rdi, rdi
  00092	79 07		 jns	 SHORT $LN8@bytes_tail
  00094	48 03 fe	 add	 rdi, rsi
  00097	48 0f 48 fd	 cmovs	 rdi, rbp
$LN8@bytes_tail:

; 2216 : 
; 2217 :     if (direction < 0) {

  0009b	39 6c 24 60	 cmp	 DWORD PTR direction$[rsp], ebp
  0009f	7d 1e		 jge	 SHORT $LN7@bytes_tail

; 2218 :         /* startswith */
; 2219 :         if (start+slen > len)

  000a1	49 8d 04 38	 lea	 rax, QWORD PTR [r8+rdi]
  000a5	48 3b c6	 cmp	 rax, rsi
  000a8	7e 32		 jle	 SHORT $LN2@bytes_tail
$LN3@bytes_tail:

; 2224 :             return 0;

  000aa	33 c0		 xor	 eax, eax
$LN20@bytes_tail:
  000ac	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]

; 2231 :     return 0;
; 2232 : }

  000b1	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  000b6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ba	41 5c		 pop	 r12
  000bc	5f		 pop	 rdi
  000bd	5e		 pop	 rsi
  000be	c3		 ret	 0
$LN7@bytes_tail:

; 2220 :             return 0;
; 2221 :     } else {
; 2222 :         /* endswith */
; 2223 :         if (end-start < slen || start > len)

  000bf	48 8b c3	 mov	 rax, rbx
  000c2	48 2b c7	 sub	 rax, rdi
  000c5	49 3b c0	 cmp	 rax, r8
  000c8	7c e0		 jl	 SHORT $LN3@bytes_tail
  000ca	48 3b fe	 cmp	 rdi, rsi
  000cd	7f db		 jg	 SHORT $LN3@bytes_tail

; 2225 : 
; 2226 :         if (end-slen > start)

  000cf	48 8b c3	 mov	 rax, rbx
  000d2	49 2b c0	 sub	 rax, r8
  000d5	48 3b c7	 cmp	 rax, rdi
  000d8	48 0f 4f f8	 cmovg	 rdi, rax
$LN2@bytes_tail:

; 2227 :             start = end - slen;
; 2228 :     }
; 2229 :     if (end-start >= slen)

  000dc	48 2b df	 sub	 rbx, rdi
  000df	49 3b d8	 cmp	 rbx, r8
  000e2	7c c6		 jl	 SHORT $LN3@bytes_tail

; 2230 :         return ! memcmp(str+start, sub, slen);

  000e4	49 8d 4c 3c 78	 lea	 rcx, QWORD PTR [r12+rdi+120]
  000e9	e8 00 00 00 00	 call	 memcmp
  000ee	85 c0		 test	 eax, eax
  000f0	40 0f 94 c5	 sete	 bpl
  000f4	8b c5		 mov	 eax, ebp
  000f6	eb b4		 jmp	 SHORT $LN20@bytes_tail
_bytes_tailmatch ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DP@ICIHPOAP@startswith?5first?5arg?5must?5be?5byt@ ; `string'
EXTRN	PyBool_FromLong:PROC
EXTRN	PyErr_ExceptionMatches:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$bytes_startswith DD imagerel bytes_startswith
	DD	imagerel bytes_startswith+268
	DD	imagerel $unwind$bytes_startswith
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$bytes_startswith DD imagerel bytes_startswith+268
	DD	imagerel bytes_startswith+439
	DD	imagerel $chain$0$bytes_startswith
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$bytes_startswith DD imagerel bytes_startswith+439
	DD	imagerel bytes_startswith+462
	DD	imagerel $chain$1$bytes_startswith
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$bytes_startswith DD imagerel bytes_startswith+462
	DD	imagerel bytes_startswith+544
	DD	imagerel $chain$2$bytes_startswith
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$bytes_startswith DD imagerel bytes_startswith+544
	DD	imagerel bytes_startswith+638
	DD	imagerel $chain$3$bytes_startswith
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$bytes_startswith DD 021H
	DD	imagerel bytes_startswith
	DD	imagerel bytes_startswith+268
	DD	imagerel $unwind$bytes_startswith
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$bytes_startswith DD 020021H
	DD	016d400H
	DD	imagerel bytes_startswith
	DD	imagerel bytes_startswith+268
	DD	imagerel $unwind$bytes_startswith
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$bytes_startswith DD 021H
	DD	imagerel bytes_startswith
	DD	imagerel bytes_startswith+268
	DD	imagerel $unwind$bytes_startswith
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$bytes_startswith DD 020821H
	DD	016d408H
	DD	imagerel bytes_startswith
	DD	imagerel bytes_startswith+268
	DD	imagerel $unwind$bytes_startswith
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_startswith DD 081601H
	DD	0173416H
	DD	0e00cf216H
	DD	07008c00aH
	DD	050066007H
xdata	ENDS
;	COMDAT ??_C@_0DP@ICIHPOAP@startswith?5first?5arg?5must?5be?5byt@
CONST	SEGMENT
??_C@_0DP@ICIHPOAP@startswith?5first?5arg?5must?5be?5byt@ DB 'startswith '
	DB	'first arg must be bytes or a tuple of bytes, not %s', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
CONST	ENDS
;	COMDAT bytes_startswith
_TEXT	SEGMENT
obj_start$28245 = 48
obj_end$28246 = 56
tmp_subobj$28242 = 64
format$28247 = 72
self$ = 176
args$ = 184
tmp_end$28244 = 192
tmp_start$28243 = 200
bytes_startswith PROC					; COMDAT

; 2245 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 56		 push	 r14
  0000c	48 8b ec	 mov	 rbp, rsp
  0000f	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00016	4c 8b f1	 mov	 r14, rcx

; 2246 :     Py_ssize_t start = 0;
; 2247 :     Py_ssize_t end = PY_SSIZE_T_MAX;
; 2248 :     PyObject *subobj;
; 2249 :     int result;
; 2250 : 
; 2251 :     if (!stringlib_parse_args_finds("startswith", args, &subobj, &start, &end))

  00019	48 83 c9 ff	 or	 rcx, -1
  0001d	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00027	48 89 45 40	 mov	 QWORD PTR tmp_end$28244[rbp-128], rax
  0002b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ??_C@_05BBAJLHME@O?$HMOO?3?$AA@
  00031	48 8b da	 mov	 rbx, rdx
  00034	89 45 c8	 mov	 DWORD PTR format$28247[rbp-128], eax
  00037	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_05BBAJLHME@O?$HMOO?3?$AA@+4
  0003e	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_Py_NoneStruct
  00045	66 89 45 cc	 mov	 WORD PTR format$28247[rbp-124], ax
  00049	33 c0		 xor	 eax, eax
  0004b	48 8d 7d c8	 lea	 rdi, QWORD PTR format$28247[rbp-128]
  0004f	48 89 45 ce	 mov	 QWORD PTR format$28247[rbp-122], rax
  00053	48 89 45 d6	 mov	 QWORD PTR format$28247[rbp-114], rax
  00057	48 89 45 de	 mov	 QWORD PTR format$28247[rbp-106], rax
  0005b	48 89 45 e6	 mov	 QWORD PTR format$28247[rbp-98], rax
  0005f	48 89 45 ee	 mov	 QWORD PTR format$28247[rbp-90], rax
  00063	89 45 f6	 mov	 DWORD PTR format$28247[rbp-82], eax
  00066	f2 ae		 repne scasb
  00068	41 b8 31 00 00
	00		 mov	 r8d, 49			; 00000031H
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@MPOGHCCL@startswith?$AA@
  00075	48 f7 d1	 not	 rcx
  00078	33 f6		 xor	 esi, esi
  0007a	4c 89 65 b0	 mov	 QWORD PTR obj_start$28245[rbp-128], r12
  0007e	48 ff c9	 dec	 rcx
  00081	48 89 75 48	 mov	 QWORD PTR tmp_start$28243[rbp-128], rsi
  00085	4c 89 65 b8	 mov	 QWORD PTR obj_end$28246[rbp-128], r12
  00089	4c 2b c1	 sub	 r8, rcx
  0008c	48 8d 4c 0d c8	 lea	 rcx, QWORD PTR format$28247[rbp+rcx-128]
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy
  00097	48 8d 45 b8	 lea	 rax, QWORD PTR obj_end$28246[rbp-128]
  0009b	4c 8d 4d b0	 lea	 r9, QWORD PTR obj_start$28245[rbp-128]
  0009f	4c 8d 45 c0	 lea	 r8, QWORD PTR tmp_subobj$28242[rbp-128]
  000a3	48 8d 55 c8	 lea	 rdx, QWORD PTR format$28247[rbp-128]
  000a7	48 8b cb	 mov	 rcx, rbx
  000aa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000af	40 88 75 f9	 mov	 BYTE PTR format$28247[rbp-79], sil
  000b3	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  000b8	85 c0		 test	 eax, eax
  000ba	0f 84 ab 01 00
	00		 je	 $LN2@bytes_star
  000c0	48 8b 4d b0	 mov	 rcx, QWORD PTR obj_start$28245[rbp-128]
  000c4	49 3b cc	 cmp	 rcx, r12
  000c7	74 11		 je	 SHORT $LN16@bytes_star
  000c9	48 8d 55 48	 lea	 rdx, QWORD PTR tmp_start$28243[rbp-128]
  000cd	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  000d2	85 c0		 test	 eax, eax
  000d4	0f 84 91 01 00
	00		 je	 $LN2@bytes_star
$LN16@bytes_star:
  000da	48 8b 4d b8	 mov	 rcx, QWORD PTR obj_end$28246[rbp-128]
  000de	49 3b cc	 cmp	 rcx, r12
  000e1	74 11		 je	 SHORT $LN11@bytes_star
  000e3	48 8d 55 40	 lea	 rdx, QWORD PTR tmp_end$28244[rbp-128]
  000e7	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  000ec	85 c0		 test	 eax, eax
  000ee	0f 84 77 01 00
	00		 je	 $LN2@bytes_star
$LN11@bytes_star:

; 2252 :         return NULL;
; 2253 :     if (PyTuple_Check(subobj)) {

  000f4	48 8b 5d c0	 mov	 rbx, QWORD PTR tmp_subobj$28242[rbp-128]
  000f8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000fc	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00106	0f 84 14 01 00
	00		 je	 $LN10@bytes_star

; 2254 :         Py_ssize_t i;
; 2255 :         for (i = 0; i < PyTuple_GET_SIZE(subobj); i++) {

  0010c	4c 89 ac 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], r13
  00114	48 39 73 60	 cmp	 QWORD PTR [rbx+96], rsi
  00118	7e 49		 jle	 SHORT $LN7@bytes_star
  0011a	4c 8b 65 48	 mov	 r12, QWORD PTR tmp_start$28243[rbp-128]
  0011e	4c 8b 6d 40	 mov	 r13, QWORD PTR tmp_end$28244[rbp-128]
  00122	48 8d 7b 70	 lea	 rdi, QWORD PTR [rbx+112]
  00126	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL9@bytes_star:

; 2256 :             result = _bytes_tailmatch(self,
; 2257 :                             PyTuple_GET_ITEM(subobj, i),
; 2258 :                             start, end, -1);

  00130	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  00133	4d 8b cd	 mov	 r9, r13
  00136	4d 8b c4	 mov	 r8, r12
  00139	49 8b ce	 mov	 rcx, r14
  0013c	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  00144	e8 00 00 00 00	 call	 _bytes_tailmatch

; 2259 :             if (result == -1)

  00149	83 f8 ff	 cmp	 eax, -1
  0014c	0f 84 ca 00 00
	00		 je	 $LN30@bytes_star

; 2261 :             else if (result) {

  00152	85 c0		 test	 eax, eax
  00154	75 78		 jne	 SHORT $LN31@bytes_star

; 2254 :         Py_ssize_t i;
; 2255 :         for (i = 0; i < PyTuple_GET_SIZE(subobj); i++) {

  00156	48 ff c6	 inc	 rsi
  00159	48 83 c7 08	 add	 rdi, 8
  0015d	48 3b 73 60	 cmp	 rsi, QWORD PTR [rbx+96]
  00161	7c cd		 jl	 SHORT $LL9@bytes_star
$LN7@bytes_star:

; 2263 :             }
; 2264 :         }
; 2265 :         Py_RETURN_FALSE;

  00163	e8 00 00 00 00	 call	 _Py_PXCTX
  00168	85 c0		 test	 eax, eax
  0016a	75 3c		 jne	 SHORT $LN26@bytes_star
  0016c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  00173	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00181	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00187	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0018f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00194	85 c0		 test	 eax, eax
  00196	75 09		 jne	 SHORT $LN25@bytes_star
  00198	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  0019f	74 07		 je	 SHORT $LN26@bytes_star
$LN25@bytes_star:
  001a1	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN26@bytes_star:
  001a8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
$LN34@bytes_star:
  001af	4c 8b ac 24 b0
	00 00 00	 mov	 r13, QWORD PTR [rsp+176]
$LN1@bytes_star:

; 2276 : }

  001b7	48 8b 9c 24 b8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+184]
  001bf	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  001c6	41 5e		 pop	 r14
  001c8	41 5c		 pop	 r12
  001ca	5f		 pop	 rdi
  001cb	5e		 pop	 rsi
  001cc	5d		 pop	 rbp
  001cd	c3		 ret	 0
$LN31@bytes_star:

; 2262 :                 Py_RETURN_TRUE;

  001ce	e8 00 00 00 00	 call	 _Py_PXCTX
  001d3	85 c0		 test	 eax, eax
  001d5	75 3c		 jne	 SHORT $LN22@bytes_star
  001d7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  001de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001ec	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001f2	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001fa	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ff	85 c0		 test	 eax, eax
  00201	75 09		 jne	 SHORT $LN21@bytes_star
  00203	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  0020a	74 07		 je	 SHORT $LN22@bytes_star
$LN21@bytes_star:
  0020c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN22@bytes_star:
  00213	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0021a	eb 93		 jmp	 SHORT $LN34@bytes_star
$LN30@bytes_star:

; 2260 :                 return NULL;

  0021c	33 c0		 xor	 eax, eax
  0021e	eb 8f		 jmp	 SHORT $LN34@bytes_star
$LN10@bytes_star:

; 2266 :     }
; 2267 :     result = _bytes_tailmatch(self, subobj, start, end, -1);

  00220	4c 8b 4d 40	 mov	 r9, QWORD PTR tmp_end$28244[rbp-128]
  00224	4c 8b 45 48	 mov	 r8, QWORD PTR tmp_start$28243[rbp-128]
  00228	48 8b d3	 mov	 rdx, rbx
  0022b	49 8b ce	 mov	 rcx, r14
  0022e	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  00236	e8 00 00 00 00	 call	 _bytes_tailmatch

; 2268 :     if (result == -1) {

  0023b	83 f8 ff	 cmp	 eax, -1
  0023e	75 32		 jne	 SHORT $LN3@bytes_star

; 2269 :         if (PyErr_ExceptionMatches(PyExc_TypeError))

  00240	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00247	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0024c	85 c0		 test	 eax, eax
  0024e	74 1b		 je	 SHORT $LN2@bytes_star

; 2270 :             PyErr_Format(PyExc_TypeError, "startswith first arg must be bytes "
; 2271 :                          "or a tuple of bytes, not %s", Py_TYPE(subobj)->tp_name);

  00250	4c 8b 43 58	 mov	 r8, QWORD PTR [rbx+88]
  00254	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0025b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DP@ICIHPOAP@startswith?5first?5arg?5must?5be?5byt@
  00262	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00266	e8 00 00 00 00	 call	 PyErr_Format
$LN2@bytes_star:

; 2272 :         return NULL;

  0026b	33 c0		 xor	 eax, eax
  0026d	e9 45 ff ff ff	 jmp	 $LN1@bytes_star
$LN3@bytes_star:

; 2273 :     }
; 2274 :     else
; 2275 :         return PyBool_FromLong(result);

  00272	8b c8		 mov	 ecx, eax
  00274	e8 00 00 00 00	 call	 PyBool_FromLong
  00279	e9 39 ff ff ff	 jmp	 $LN1@bytes_star
bytes_startswith ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DN@DLKPFMBA@endswith?5first?5arg?5must?5be?5bytes@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$bytes_endswith DD imagerel bytes_endswith
	DD	imagerel bytes_endswith+268
	DD	imagerel $unwind$bytes_endswith
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$bytes_endswith DD imagerel bytes_endswith+268
	DD	imagerel bytes_endswith+439
	DD	imagerel $chain$0$bytes_endswith
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$bytes_endswith DD imagerel bytes_endswith+439
	DD	imagerel bytes_endswith+462
	DD	imagerel $chain$1$bytes_endswith
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$bytes_endswith DD imagerel bytes_endswith+462
	DD	imagerel bytes_endswith+544
	DD	imagerel $chain$2$bytes_endswith
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$bytes_endswith DD imagerel bytes_endswith+544
	DD	imagerel bytes_endswith+638
	DD	imagerel $chain$3$bytes_endswith
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$bytes_endswith DD 021H
	DD	imagerel bytes_endswith
	DD	imagerel bytes_endswith+268
	DD	imagerel $unwind$bytes_endswith
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$bytes_endswith DD 020021H
	DD	016d400H
	DD	imagerel bytes_endswith
	DD	imagerel bytes_endswith+268
	DD	imagerel $unwind$bytes_endswith
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$bytes_endswith DD 021H
	DD	imagerel bytes_endswith
	DD	imagerel bytes_endswith+268
	DD	imagerel $unwind$bytes_endswith
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$bytes_endswith DD 020821H
	DD	016d408H
	DD	imagerel bytes_endswith
	DD	imagerel bytes_endswith+268
	DD	imagerel $unwind$bytes_endswith
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_endswith DD 081601H
	DD	0173416H
	DD	0e00cf216H
	DD	07008c00aH
	DD	050066007H
xdata	ENDS
;	COMDAT ??_C@_0DN@DLKPFMBA@endswith?5first?5arg?5must?5be?5bytes@
CONST	SEGMENT
??_C@_0DN@DLKPFMBA@endswith?5first?5arg?5must?5be?5bytes@ DB 'endswith fi'
	DB	'rst arg must be bytes or a tuple of bytes, not %s', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
CONST	ENDS
;	COMDAT bytes_endswith
_TEXT	SEGMENT
obj_start$28311 = 48
obj_end$28312 = 56
tmp_subobj$28308 = 64
format$28313 = 72
self$ = 176
args$ = 184
tmp_end$28310 = 192
tmp_start$28309 = 200
bytes_endswith PROC					; COMDAT

; 2289 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 56		 push	 r14
  0000c	48 8b ec	 mov	 rbp, rsp
  0000f	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00016	4c 8b f1	 mov	 r14, rcx

; 2290 :     Py_ssize_t start = 0;
; 2291 :     Py_ssize_t end = PY_SSIZE_T_MAX;
; 2292 :     PyObject *subobj;
; 2293 :     int result;
; 2294 : 
; 2295 :     if (!stringlib_parse_args_finds("endswith", args, &subobj, &start, &end))

  00019	48 83 c9 ff	 or	 rcx, -1
  0001d	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00027	48 89 45 40	 mov	 QWORD PTR tmp_end$28310[rbp-128], rax
  0002b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ??_C@_05BBAJLHME@O?$HMOO?3?$AA@
  00031	48 8b da	 mov	 rbx, rdx
  00034	89 45 c8	 mov	 DWORD PTR format$28313[rbp-128], eax
  00037	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_05BBAJLHME@O?$HMOO?3?$AA@+4
  0003e	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_Py_NoneStruct
  00045	66 89 45 cc	 mov	 WORD PTR format$28313[rbp-124], ax
  00049	33 c0		 xor	 eax, eax
  0004b	48 8d 7d c8	 lea	 rdi, QWORD PTR format$28313[rbp-128]
  0004f	48 89 45 ce	 mov	 QWORD PTR format$28313[rbp-122], rax
  00053	48 89 45 d6	 mov	 QWORD PTR format$28313[rbp-114], rax
  00057	48 89 45 de	 mov	 QWORD PTR format$28313[rbp-106], rax
  0005b	48 89 45 e6	 mov	 QWORD PTR format$28313[rbp-98], rax
  0005f	48 89 45 ee	 mov	 QWORD PTR format$28313[rbp-90], rax
  00063	89 45 f6	 mov	 DWORD PTR format$28313[rbp-82], eax
  00066	f2 ae		 repne scasb
  00068	41 b8 31 00 00
	00		 mov	 r8d, 49			; 00000031H
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08MLCMCPNP@endswith?$AA@
  00075	48 f7 d1	 not	 rcx
  00078	33 f6		 xor	 esi, esi
  0007a	4c 89 65 b0	 mov	 QWORD PTR obj_start$28311[rbp-128], r12
  0007e	48 ff c9	 dec	 rcx
  00081	48 89 75 48	 mov	 QWORD PTR tmp_start$28309[rbp-128], rsi
  00085	4c 89 65 b8	 mov	 QWORD PTR obj_end$28312[rbp-128], r12
  00089	4c 2b c1	 sub	 r8, rcx
  0008c	48 8d 4c 0d c8	 lea	 rcx, QWORD PTR format$28313[rbp+rcx-128]
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy
  00097	48 8d 45 b8	 lea	 rax, QWORD PTR obj_end$28312[rbp-128]
  0009b	4c 8d 4d b0	 lea	 r9, QWORD PTR obj_start$28311[rbp-128]
  0009f	4c 8d 45 c0	 lea	 r8, QWORD PTR tmp_subobj$28308[rbp-128]
  000a3	48 8d 55 c8	 lea	 rdx, QWORD PTR format$28313[rbp-128]
  000a7	48 8b cb	 mov	 rcx, rbx
  000aa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000af	40 88 75 f9	 mov	 BYTE PTR format$28313[rbp-79], sil
  000b3	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  000b8	85 c0		 test	 eax, eax
  000ba	0f 84 ab 01 00
	00		 je	 $LN2@bytes_ends
  000c0	48 8b 4d b0	 mov	 rcx, QWORD PTR obj_start$28311[rbp-128]
  000c4	49 3b cc	 cmp	 rcx, r12
  000c7	74 11		 je	 SHORT $LN16@bytes_ends
  000c9	48 8d 55 48	 lea	 rdx, QWORD PTR tmp_start$28309[rbp-128]
  000cd	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  000d2	85 c0		 test	 eax, eax
  000d4	0f 84 91 01 00
	00		 je	 $LN2@bytes_ends
$LN16@bytes_ends:
  000da	48 8b 4d b8	 mov	 rcx, QWORD PTR obj_end$28312[rbp-128]
  000de	49 3b cc	 cmp	 rcx, r12
  000e1	74 11		 je	 SHORT $LN11@bytes_ends
  000e3	48 8d 55 40	 lea	 rdx, QWORD PTR tmp_end$28310[rbp-128]
  000e7	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  000ec	85 c0		 test	 eax, eax
  000ee	0f 84 77 01 00
	00		 je	 $LN2@bytes_ends
$LN11@bytes_ends:

; 2296 :         return NULL;
; 2297 :     if (PyTuple_Check(subobj)) {

  000f4	48 8b 5d c0	 mov	 rbx, QWORD PTR tmp_subobj$28308[rbp-128]
  000f8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000fc	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00106	0f 84 14 01 00
	00		 je	 $LN10@bytes_ends

; 2298 :         Py_ssize_t i;
; 2299 :         for (i = 0; i < PyTuple_GET_SIZE(subobj); i++) {

  0010c	4c 89 ac 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], r13
  00114	48 39 73 60	 cmp	 QWORD PTR [rbx+96], rsi
  00118	7e 49		 jle	 SHORT $LN7@bytes_ends
  0011a	4c 8b 65 48	 mov	 r12, QWORD PTR tmp_start$28309[rbp-128]
  0011e	4c 8b 6d 40	 mov	 r13, QWORD PTR tmp_end$28310[rbp-128]
  00122	48 8d 7b 70	 lea	 rdi, QWORD PTR [rbx+112]
  00126	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL9@bytes_ends:

; 2300 :             result = _bytes_tailmatch(self,
; 2301 :                             PyTuple_GET_ITEM(subobj, i),
; 2302 :                             start, end, +1);

  00130	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  00133	4d 8b cd	 mov	 r9, r13
  00136	4d 8b c4	 mov	 r8, r12
  00139	49 8b ce	 mov	 rcx, r14
  0013c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00144	e8 00 00 00 00	 call	 _bytes_tailmatch

; 2303 :             if (result == -1)

  00149	83 f8 ff	 cmp	 eax, -1
  0014c	0f 84 ca 00 00
	00		 je	 $LN30@bytes_ends

; 2305 :             else if (result) {

  00152	85 c0		 test	 eax, eax
  00154	75 78		 jne	 SHORT $LN31@bytes_ends

; 2298 :         Py_ssize_t i;
; 2299 :         for (i = 0; i < PyTuple_GET_SIZE(subobj); i++) {

  00156	48 ff c6	 inc	 rsi
  00159	48 83 c7 08	 add	 rdi, 8
  0015d	48 3b 73 60	 cmp	 rsi, QWORD PTR [rbx+96]
  00161	7c cd		 jl	 SHORT $LL9@bytes_ends
$LN7@bytes_ends:

; 2307 :             }
; 2308 :         }
; 2309 :         Py_RETURN_FALSE;

  00163	e8 00 00 00 00	 call	 _Py_PXCTX
  00168	85 c0		 test	 eax, eax
  0016a	75 3c		 jne	 SHORT $LN26@bytes_ends
  0016c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  00173	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00181	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00187	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0018f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00194	85 c0		 test	 eax, eax
  00196	75 09		 jne	 SHORT $LN25@bytes_ends
  00198	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  0019f	74 07		 je	 SHORT $LN26@bytes_ends
$LN25@bytes_ends:
  001a1	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN26@bytes_ends:
  001a8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
$LN34@bytes_ends:
  001af	4c 8b ac 24 b0
	00 00 00	 mov	 r13, QWORD PTR [rsp+176]
$LN1@bytes_ends:

; 2320 : }

  001b7	48 8b 9c 24 b8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+184]
  001bf	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  001c6	41 5e		 pop	 r14
  001c8	41 5c		 pop	 r12
  001ca	5f		 pop	 rdi
  001cb	5e		 pop	 rsi
  001cc	5d		 pop	 rbp
  001cd	c3		 ret	 0
$LN31@bytes_ends:

; 2306 :                 Py_RETURN_TRUE;

  001ce	e8 00 00 00 00	 call	 _Py_PXCTX
  001d3	85 c0		 test	 eax, eax
  001d5	75 3c		 jne	 SHORT $LN22@bytes_ends
  001d7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  001de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  001ec	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001f2	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001fa	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ff	85 c0		 test	 eax, eax
  00201	75 09		 jne	 SHORT $LN21@bytes_ends
  00203	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  0020a	74 07		 je	 SHORT $LN22@bytes_ends
$LN21@bytes_ends:
  0020c	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN22@bytes_ends:
  00213	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0021a	eb 93		 jmp	 SHORT $LN34@bytes_ends
$LN30@bytes_ends:

; 2304 :                 return NULL;

  0021c	33 c0		 xor	 eax, eax
  0021e	eb 8f		 jmp	 SHORT $LN34@bytes_ends
$LN10@bytes_ends:

; 2310 :     }
; 2311 :     result = _bytes_tailmatch(self, subobj, start, end, +1);

  00220	4c 8b 4d 40	 mov	 r9, QWORD PTR tmp_end$28310[rbp-128]
  00224	4c 8b 45 48	 mov	 r8, QWORD PTR tmp_start$28309[rbp-128]
  00228	48 8b d3	 mov	 rdx, rbx
  0022b	49 8b ce	 mov	 rcx, r14
  0022e	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00236	e8 00 00 00 00	 call	 _bytes_tailmatch

; 2312 :     if (result == -1) {

  0023b	83 f8 ff	 cmp	 eax, -1
  0023e	75 32		 jne	 SHORT $LN3@bytes_ends

; 2313 :         if (PyErr_ExceptionMatches(PyExc_TypeError))

  00240	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00247	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0024c	85 c0		 test	 eax, eax
  0024e	74 1b		 je	 SHORT $LN2@bytes_ends

; 2314 :             PyErr_Format(PyExc_TypeError, "endswith first arg must be bytes or "
; 2315 :                          "a tuple of bytes, not %s", Py_TYPE(subobj)->tp_name);

  00250	4c 8b 43 58	 mov	 r8, QWORD PTR [rbx+88]
  00254	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0025b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@DLKPFMBA@endswith?5first?5arg?5must?5be?5bytes@
  00262	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00266	e8 00 00 00 00	 call	 PyErr_Format
$LN2@bytes_ends:

; 2316 :         return NULL;

  0026b	33 c0		 xor	 eax, eax
  0026d	e9 45 ff ff ff	 jmp	 $LN1@bytes_ends
$LN3@bytes_ends:

; 2317 :     }
; 2318 :     else
; 2319 :         return PyBool_FromLong(result);

  00272	8b c8		 mov	 ecx, eax
  00274	e8 00 00 00 00	 call	 PyBool_FromLong
  00279	e9 39 ff ff ff	 jmp	 $LN1@bytes_ends
bytes_endswith ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@GNFOOANA@?$HMss?3decode?$AA@		; `string'
EXTRN	PyUnicode_FromEncodedObject:PROC
EXTRN	PyUnicode_GetDefaultEncoding:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_decode DD imagerel bytes_decode
	DD	imagerel bytes_decode+126
	DD	imagerel $unwind$bytes_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_decode DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT ??_C@_0L@GNFOOANA@?$HMss?3decode?$AA@
CONST	SEGMENT
??_C@_0L@GNFOOANA@?$HMss?3decode?$AA@ DB '|ss:decode', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bytes_decode
_TEXT	SEGMENT
errors$ = 48
self$ = 80
args$ = 88
kwargs$ = 96
encoding$ = 104
bytes_decode PROC					; COMDAT

; 2335 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b d9	 mov	 rbx, rcx

; 2336 :     const char *encoding = NULL;

  00009	33 c9		 xor	 ecx, ecx
  0000b	49 8b c0	 mov	 rax, r8
  0000e	48 89 4c 24 68	 mov	 QWORD PTR encoding$[rsp], rcx

; 2337 :     const char *errors = NULL;

  00013	48 89 4c 24 30	 mov	 QWORD PTR errors$[rsp], rcx
  00018	4c 8b d2	 mov	 r10, rdx

; 2338 :     static char *kwlist[] = {"encoding", "errors", 0};
; 2339 : 
; 2340 :     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "|ss:decode", kwlist, &encoding, &errors))

  0001b	48 8d 4c 24 30	 lea	 rcx, QWORD PTR errors$[rsp]
  00020	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??bytes_decode@@9@9
  00027	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@GNFOOANA@?$HMss?3decode?$AA@
  0002e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00033	48 8d 4c 24 68	 lea	 rcx, QWORD PTR encoding$[rsp]
  00038	48 8b d0	 mov	 rdx, rax
  0003b	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00040	49 8b ca	 mov	 rcx, r10
  00043	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00048	85 c0		 test	 eax, eax
  0004a	75 08		 jne	 SHORT $LN2@bytes_deco

; 2341 :         return NULL;

  0004c	33 c0		 xor	 eax, eax

; 2345 : }

  0004e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00052	5b		 pop	 rbx
  00053	c3		 ret	 0
$LN2@bytes_deco:

; 2342 :     if (encoding == NULL)

  00054	48 8b 44 24 68	 mov	 rax, QWORD PTR encoding$[rsp]
  00059	48 85 c0	 test	 rax, rax
  0005c	75 0a		 jne	 SHORT $LN1@bytes_deco

; 2343 :         encoding = PyUnicode_GetDefaultEncoding();

  0005e	e8 00 00 00 00	 call	 PyUnicode_GetDefaultEncoding
  00063	48 89 44 24 68	 mov	 QWORD PTR encoding$[rsp], rax
$LN1@bytes_deco:

; 2344 :     return PyUnicode_FromEncodedObject(self, encoding, errors);

  00068	4c 8b 44 24 30	 mov	 r8, QWORD PTR errors$[rsp]
  0006d	48 8b d0	 mov	 rdx, rax
  00070	48 8b cb	 mov	 rcx, rbx
  00073	e8 00 00 00 00	 call	 PyUnicode_FromEncodedObject

; 2345 : }

  00078	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0007c	5b		 pop	 rbx
  0007d	c3		 ret	 0
bytes_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@BPBIFPCC@?$HMi?3splitlines?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_splitlines DD imagerel bytes_splitlines
	DD	imagerel bytes_splitlines+97
	DD	imagerel $unwind$bytes_splitlines
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_splitlines DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0O@BPBIFPCC@?$HMi?3splitlines?$AA@
CONST	SEGMENT
??_C@_0O@BPBIFPCC@?$HMi?3splitlines?$AA@ DB '|i:splitlines', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bytes_splitlines
_TEXT	SEGMENT
self$ = 64
args$ = 72
kwds$ = 80
keepends$ = 88
bytes_splitlines PROC					; COMDAT

; 2357 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	49 8b c0	 mov	 rax, r8
  0000c	4c 8b d2	 mov	 r10, rdx

; 2358 :     static char *kwlist[] = {"keepends", 0};
; 2359 :     int keepends = 0;
; 2360 : 
; 2361 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|i:splitlines",
; 2362 :                                      kwlist, &keepends))

  0000f	48 8d 4c 24 58	 lea	 rcx, QWORD PTR keepends$[rsp]
  00014	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??bytes_splitlines@@9@9
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@BPBIFPCC@?$HMi?3splitlines?$AA@
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	48 8b d0	 mov	 rdx, rax
  0002a	49 8b ca	 mov	 rcx, r10
  0002d	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR keepends$[rsp], 0
  00035	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  0003a	85 c0		 test	 eax, eax
  0003c	75 08		 jne	 SHORT $LN1@bytes_spli@2

; 2363 :         return NULL;

  0003e	33 c0		 xor	 eax, eax

; 2369 : }

  00040	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00044	5b		 pop	 rbx
  00045	c3		 ret	 0
$LN1@bytes_spli@2:

; 2364 : 
; 2365 :     return stringlib_splitlines(
; 2366 :         (PyObject*) self, PyBytes_AS_STRING(self),
; 2367 :         PyBytes_GET_SIZE(self), keepends
; 2368 :         );

  00046	44 8b 4c 24 58	 mov	 r9d, DWORD PTR keepends$[rsp]
  0004b	4c 8b 43 60	 mov	 r8, QWORD PTR [rbx+96]
  0004f	48 8d 53 78	 lea	 rdx, QWORD PTR [rbx+120]
  00053	48 8b cb	 mov	 rcx, rbx
  00056	e8 00 00 00 00	 call	 stringlib_splitlines

; 2369 : }

  0005b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005f	5b		 pop	 rbx
  00060	c3		 ret	 0
bytes_splitlines ENDP
_TEXT	ENDS
EXTRN	_Py_ctype_tolower:BYTE
; Function compile flags: /Ogtpy
;	COMDAT hex_digit_to_int
_TEXT	SEGMENT
c$ = 8
hex_digit_to_int PROC					; COMDAT

; 2382 :     if (c >= 128)

  00000	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H

; 2383 :         return -1;

  00006	73 33		 jae	 SHORT $LN1@hex_digit_

; 2384 :     if (Py_ISDIGIT(c))

  00008	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:__ImageBase
  0000f	0f b6 d1	 movzx	 edx, cl
  00012	41 8b 84 90 00
	00 00 00	 mov	 eax, DWORD PTR _Py_ctype_table[r8+rdx*4]
  0001a	a8 04		 test	 al, 4
  0001c	74 04		 je	 SHORT $LN4@hex_digit_

; 2385 :         return c - '0';

  0001e	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]

; 2393 : }

  00021	c3		 ret	 0
$LN4@hex_digit_:

; 2386 :     else {
; 2387 :         if (Py_ISUPPER(c))

  00022	a8 02		 test	 al, 2
  00024	74 09		 je	 SHORT $LN2@hex_digit_

; 2388 :             c = Py_TOLOWER(c);

  00026	42 0f b6 8c 02
	00 00 00 00	 movzx	 ecx, BYTE PTR _Py_ctype_tolower[rdx+r8]
$LN2@hex_digit_:

; 2389 :         if (c >= 'a' && c <= 'f')

  0002f	8d 41 9f	 lea	 eax, DWORD PTR [rcx-97]
  00032	83 f8 05	 cmp	 eax, 5
  00035	77 04		 ja	 SHORT $LN1@hex_digit_

; 2390 :             return c - 'a' + 10;

  00037	8d 41 a9	 lea	 eax, DWORD PTR [rcx-87]

; 2393 : }

  0003a	c3		 ret	 0
$LN1@hex_digit_:

; 2391 :     }
; 2392 :     return -1;

  0003b	83 c8 ff	 or	 eax, -1

; 2393 : }

  0003e	c3		 ret	 0
hex_digit_to_int ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bytes_sizeof
_TEXT	SEGMENT
v$ = 8
bytes_sizeof PROC					; COMDAT

; 2450 :     Py_ssize_t res;
; 2451 :     res = PyBytesObject_SIZE + Py_SIZE(v) * Py_TYPE(v)->tp_itemsize;

  00000	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00004	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  0000b	48 0f af 51 60	 imul	 rdx, QWORD PTR [rcx+96]

; 2452 :     return PyLong_FromSsize_t(res);

  00010	48 8d 4a 79	 lea	 rcx, QWORD PTR [rdx+121]

; 2453 : }

  00014	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
bytes_sizeof ENDP
_TEXT	ENDS
PUBLIC	??_C@_04KABGOEGD@?$CIy?$CD?$CJ?$AA@		; `string'
EXTRN	_Py_BuildValue_SizeT:PROC
;	COMDAT ??_C@_04KABGOEGD@?$CIy?$CD?$CJ?$AA@
CONST	SEGMENT
??_C@_04KABGOEGD@?$CIy?$CD?$CJ?$AA@ DB '(y#)', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bytes_getnewargs
_TEXT	SEGMENT
v$ = 8
bytes_getnewargs PROC					; COMDAT

; 2459 :     return Py_BuildValue("(y#)", v->ob_sval, Py_SIZE(v));

  00000	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00004	48 8d 51 78	 lea	 rdx, QWORD PTR [rcx+120]
  00008	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04KABGOEGD@?$CIy?$CD?$CJ?$AA@

; 2460 : }

  0000f	e9 00 00 00 00	 jmp	 _Py_BuildValue_SizeT
bytes_getnewargs ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@DLDFGFNK@PyBytes_Concat?$AA@		; `string'
PUBLIC	PyBytes_Concat
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyBytes_Concat DD imagerel $LN9
	DD	imagerel $LN9+82
	DD	imagerel $unwind$PyBytes_Concat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyBytes_Concat DD imagerel $LN9+82
	DD	imagerel $LN9+111
	DD	imagerel $chain$0$PyBytes_Concat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyBytes_Concat DD imagerel $LN9+111
	DD	imagerel $LN9+117
	DD	imagerel $chain$1$PyBytes_Concat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyBytes_Concat DD 021H
	DD	imagerel $LN9
	DD	imagerel $LN9+82
	DD	imagerel $unwind$PyBytes_Concat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyBytes_Concat DD 020521H
	DD	083405H
	DD	imagerel $LN9
	DD	imagerel $LN9+82
	DD	imagerel $unwind$PyBytes_Concat
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyBytes_Concat DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0P@DLDFGFNK@PyBytes_Concat?$AA@
CONST	SEGMENT
??_C@_0P@DLDFGFNK@PyBytes_Concat?$AA@ DB 'PyBytes_Concat', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyBytes_Concat
_TEXT	SEGMENT
pv$ = 64
w$ = 72
PyBytes_Concat PROC					; COMDAT

; 2852 : {

$LN9:
  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b f9	 mov	 rdi, rcx

; 2853 :     register PyObject *v;
; 2854 :     assert(pv != NULL);
; 2855 :     if (*pv == NULL)

  00009	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0000c	48 85 c9	 test	 rcx, rcx
  0000f	74 5e		 je	 SHORT $LN7@PyBytes_Co

; 2856 :         return;
; 2857 :     if (w == NULL) {

  00011	48 85 d2	 test	 rdx, rdx
  00014	75 3c		 jne	 SHORT $LN5@PyBytes_Co

; 2858 :         Py_CLEAR(*pv);

  00016	4c 8b c9	 mov	 r9, rcx
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@DLDFGFNK@PyBytes_Concat?$AA@
  00027	41 b8 2a 0b 00
	00		 mov	 r8d, 2858		; 00000b2aH
  0002d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	75 31		 jne	 SHORT $LN7@PyBytes_Co
  0003e	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00041	48 c7 07 00 00
	00 00		 mov	 QWORD PTR [rdi], 0

; 2864 : }

  00048	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004c	5f		 pop	 rdi
  0004d	e9 00 00 00 00	 jmp	 _Py_DecRef
$LN5@PyBytes_Co:
  00052	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 2859 :         return;
; 2860 :     }
; 2861 :     v = bytes_concat(*pv, w);

  00057	e8 00 00 00 00	 call	 bytes_concat

; 2862 :     Py_DECREF(*pv);

  0005c	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0005f	48 8b d8	 mov	 rbx, rax
  00062	e8 00 00 00 00	 call	 _Py_DecRef

; 2863 :     *pv = v;

  00067	48 89 1f	 mov	 QWORD PTR [rdi], rbx
  0006a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN7@PyBytes_Co:

; 2864 : }

  0006f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00073	5f		 pop	 rdi
  00074	c3		 ret	 0
PyBytes_Concat ENDP
_TEXT	ENDS
PUBLIC	PyBytes_ConcatAndDel
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyBytes_ConcatAndDel DD imagerel $LN18
	DD	imagerel $LN18+133
	DD	imagerel $unwind$PyBytes_ConcatAndDel
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyBytes_ConcatAndDel DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
xdata	ENDS
;	COMDAT PyBytes_ConcatAndDel
_TEXT	SEGMENT
pv$ = 64
w$ = 72
PyBytes_ConcatAndDel PROC				; COMDAT

; 2868 : {

$LN18:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 2869 :     PyBytes_Concat(pv, w);

  00009	e8 00 00 00 00	 call	 PyBytes_Concat

; 2870 :     Py_XDECREF(w);

  0000e	48 85 db	 test	 rbx, rbx
  00011	74 6c		 je	 SHORT $LN3@PyBytes_Co@2
  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	75 63		 jne	 SHORT $LN3@PyBytes_Co@2
  0001c	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00020	a8 20		 test	 al, 32			; 00000020H
  00022	75 53		 jne	 SHORT $LN11@PyBytes_Co@2
  00024	84 c0		 test	 al, al
  00026	78 4f		 js	 SHORT $LN11@PyBytes_Co@2
  00028	a8 02		 test	 al, 2
  0002a	75 53		 jne	 SHORT $LN3@PyBytes_Co@2
  0002c	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00030	75 4d		 jne	 SHORT $LN3@PyBytes_Co@2
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00040	4c 8b cb	 mov	 r9, rbx
  00043	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00049	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00051	e8 00 00 00 00	 call	 _PyParallel_Guard
  00056	48 8b cb	 mov	 rcx, rbx
  00059	85 c0		 test	 eax, eax
  0005b	74 0a		 je	 SHORT $LN16@PyBytes_Co@2

; 2871 : }

  0005d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00061	5b		 pop	 rbx
  00062	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 2870 :     Py_XDECREF(w);

$LN16@PyBytes_Co@2:
  00067	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 2871 : }

  0006b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006f	5b		 pop	 rbx
  00070	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 2870 :     Py_XDECREF(w);

$LN11@PyBytes_Co@2:
  00077	48 8b cb	 mov	 rcx, rbx
  0007a	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyBytes_Co@2:

; 2871 : }

  0007f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00083	5b		 pop	 rbx
  00084	c3		 ret	 0
PyBytes_ConcatAndDel ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@JCLLOKPM@_PyBytes_Resize?$AA@		; `string'
PUBLIC	_PyBytes_Resize
EXTRN	PyObject_Realloc:PROC
EXTRN	_Px_ForgetReference:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyBytes_Resize DD imagerel $LN20
	DD	imagerel $LN20+338
	DD	imagerel $unwind$_PyBytes_Resize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyBytes_Resize DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0BA@JCLLOKPM@_PyBytes_Resize?$AA@
CONST	SEGMENT
??_C@_0BA@JCLLOKPM@_PyBytes_Resize?$AA@ DB '_PyBytes_Resize', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyBytes_Resize
_TEXT	SEGMENT
pv$ = 64
newsize$ = 72
_PyBytes_Resize PROC					; COMDAT

; 2890 : {

$LN20:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2891 :     register PyObject *v;
; 2892 :     register PyBytesObject *sv;
; 2893 :     v = *pv;

  0000f	48 8b 19	 mov	 rbx, QWORD PTR [rcx]
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b f9	 mov	 rdi, rcx

; 2894 :     if (!PyBytes_Check(v) || Py_REFCNT(v) != 1 || newsize < 0) {

  00018	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0001c	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  00026	0f 84 f3 00 00
	00		 je	 $LN12@PyBytes_Re@2
  0002c	48 83 7b 50 01	 cmp	 QWORD PTR [rbx+80], 1
  00031	0f 85 e8 00 00
	00		 jne	 $LN12@PyBytes_Re@2
  00037	48 85 d2	 test	 rdx, rdx
  0003a	0f 88 df 00 00
	00		 js	 $LN12@PyBytes_Re@2

; 2898 :         return -1;
; 2899 :     }
; 2900 :     PyPx_GUARD_OBJ(v);

  00040	e8 00 00 00 00	 call	 _Py_PXCTX
  00045	4c 8b cb	 mov	 r9, rbx
  00048	41 b8 54 0b 00
	00		 mov	 r8d, 2900		; 00000b54H
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JCLLOKPM@_PyBytes_Resize?$AA@
  0005c	85 c0		 test	 eax, eax
  0005e	74 0a		 je	 SHORT $LN8@PyBytes_Re@2
  00060	c7 44 24 20 40
	00 00 00	 mov	 DWORD PTR [rsp+32], 64	; 00000040H
  00068	eb 08		 jmp	 SHORT $LN18@PyBytes_Re@2
$LN8@PyBytes_Re@2:
  0006a	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
$LN18@PyBytes_Re@2:
  00072	e8 00 00 00 00	 call	 _PyParallel_Guard

; 2901 : 
; 2902 :     /* XXX UNREF/NEWREF interface should be more symmetrical */
; 2903 :     _Py_DEC_REFTOTAL;
; 2904 :     _Py_ForgetReference(v);

  00077	e8 00 00 00 00	 call	 _Py_PXCTX
  0007c	85 c0		 test	 eax, eax
  0007e	74 08		 je	 SHORT $LN4@PyBytes_Re@2
  00080	48 8b cb	 mov	 rcx, rbx
  00083	e8 00 00 00 00	 call	 _Px_ForgetReference
$LN4@PyBytes_Re@2:

; 2905 :     *pv = (PyObject *)
; 2906 :         PyObject_REALLOC((char *)v, PyBytesObject_SIZE + newsize);

  00088	48 8d 56 79	 lea	 rdx, QWORD PTR [rsi+121]
  0008c	48 8b cb	 mov	 rcx, rbx
  0008f	e8 00 00 00 00	 call	 PyObject_Realloc
  00094	48 89 07	 mov	 QWORD PTR [rdi], rax

; 2907 :     if (*pv == NULL) {

  00097	48 85 c0	 test	 rax, rax
  0009a	75 20		 jne	 SHORT $LN1@PyBytes_Re@2

; 2908 :         PyObject_Del(v);

  0009c	48 8b cb	 mov	 rcx, rbx
  0009f	e8 00 00 00 00	 call	 PyObject_Free

; 2909 :         PyErr_NoMemory();

  000a4	e8 00 00 00 00	 call	 PyErr_NoMemory
  000a9	83 c8 ff	 or	 eax, -1

; 2918 : }

  000ac	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000b1	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000b6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ba	5f		 pop	 rdi
  000bb	c3		 ret	 0
$LN1@PyBytes_Re@2:

; 2910 :         return -1;
; 2911 :     }
; 2912 :     _Py_NewReference(*pv);

  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JCLLOKPM@_PyBytes_Resize?$AA@
  000ca	4c 8b c8	 mov	 r9, rax
  000cd	41 b8 60 0b 00
	00		 mov	 r8d, 2912		; 00000b60H
  000d3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000db	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e0	85 c0		 test	 eax, eax
  000e2	74 0a		 je	 SHORT $LN16@PyBytes_Re@2
  000e4	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  000e7	e8 00 00 00 00	 call	 _Px_NewReference
  000ec	eb 0b		 jmp	 SHORT $LN17@PyBytes_Re@2
$LN16@PyBytes_Re@2:
  000ee	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  000f1	48 c7 40 50 01
	00 00 00	 mov	 QWORD PTR [rax+80], 1
$LN17@PyBytes_Re@2:

; 2913 :     sv = (PyBytesObject *) *pv;

  000f9	48 8b 07	 mov	 rax, QWORD PTR [rdi]

; 2914 :     Py_SIZE(sv) = newsize;

  000fc	48 89 70 60	 mov	 QWORD PTR [rax+96], rsi

; 2915 :     sv->ob_sval[newsize] = '\0';

  00100	c6 44 30 78 00	 mov	 BYTE PTR [rax+rsi+120], 0

; 2916 :     sv->ob_shash = -1;          /* invalidate cached hash value */

  00105	48 c7 40 70 ff
	ff ff ff	 mov	 QWORD PTR [rax+112], -1

; 2917 :     return 0;

  0010d	33 c0		 xor	 eax, eax

; 2918 : }

  0010f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00114	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00119	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0011d	5f		 pop	 rdi
  0011e	c3		 ret	 0
$LN12@PyBytes_Re@2:

; 2895 :         *pv = 0;

  0011f	48 c7 01 00 00
	00 00		 mov	 QWORD PTR [rcx], 0

; 2896 :         Py_DECREF(v);

  00126	48 8b cb	 mov	 rcx, rbx
  00129	e8 00 00 00 00	 call	 _Py_DecRef

; 2897 :         PyErr_BadInternalCall();

  0012e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@
  00135	ba 51 0b 00 00	 mov	 edx, 2897		; 00000b51H
  0013a	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 2918 : }

  0013f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00144	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00149	83 c8 ff	 or	 eax, -1
  0014c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00150	5f		 pop	 rdi
  00151	c3		 ret	 0
_PyBytes_Resize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@LGGNFECD@PyBytes_Fini?$AA@		; `string'
PUBLIC	PyBytes_Fini
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyBytes_Fini DD imagerel $LN39
	DD	imagerel $LN39+17
	DD	imagerel $unwind$PyBytes_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyBytes_Fini DD imagerel $LN39+17
	DD	imagerel $LN39+22
	DD	imagerel $chain$0$PyBytes_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyBytes_Fini DD imagerel $LN39+22
	DD	imagerel $LN39+246
	DD	imagerel $chain$3$PyBytes_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyBytes_Fini DD imagerel $LN39+246
	DD	imagerel $LN39+394
	DD	imagerel $chain$4$PyBytes_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyBytes_Fini DD imagerel $LN39+394
	DD	imagerel $LN39+419
	DD	imagerel $chain$6$PyBytes_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$PyBytes_Fini DD imagerel $LN39+419
	DD	imagerel $LN39+437
	DD	imagerel $chain$8$PyBytes_Fini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$PyBytes_Fini DD imagerel $LN39+437
	DD	imagerel $LN39+442
	DD	imagerel $chain$9$PyBytes_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$PyBytes_Fini DD 021H
	DD	imagerel $LN39
	DD	imagerel $LN39+17
	DD	imagerel $unwind$PyBytes_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$PyBytes_Fini DD 040021H
	DD	095400H
	DD	083400H
	DD	imagerel $LN39
	DD	imagerel $LN39+17
	DD	imagerel $unwind$PyBytes_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyBytes_Fini DD 040021H
	DD	095400H
	DD	083400H
	DD	imagerel $LN39
	DD	imagerel $LN39+17
	DD	imagerel $unwind$PyBytes_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyBytes_Fini DD 020021H
	DD	083400H
	DD	imagerel $LN39+17
	DD	imagerel $LN39+22
	DD	imagerel $chain$0$PyBytes_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyBytes_Fini DD 061621H
	DD	083416H
	DD	06740aH
	DD	0a6405H
	DD	imagerel $LN39+17
	DD	imagerel $LN39+22
	DD	imagerel $chain$0$PyBytes_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyBytes_Fini DD 020521H
	DD	095405H
	DD	imagerel $LN39
	DD	imagerel $LN39+17
	DD	imagerel $unwind$PyBytes_Fini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyBytes_Fini DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0N@LGGNFECD@PyBytes_Fini?$AA@
CONST	SEGMENT
??_C@_0N@LGGNFECD@PyBytes_Fini?$AA@ DB 'PyBytes_Fini', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
CONST	ENDS
;	COMDAT PyBytes_Fini
_TEXT	SEGMENT
PyBytes_Fini PROC					; COMDAT

; 2922 : {

$LN39:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2923 :     int i;
; 2924 :     if (Py_PXCTX)

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	0f 85 a4 01 00
	00		 jne	 $LN2@PyBytes_Fi

; 2925 :         return;
; 2926 :     for (i = 0; i < UCHAR_MAX + 1; i++)

  00011	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00016	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  0001b	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00020	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:characters
  00027	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0002c	be 00 01 00 00	 mov	 esi, 256		; 00000100H
  00031	33 ed		 xor	 ebp, ebp
$LL11@PyBytes_Fi:

; 2927 :         Py_CLEAR(characters[i]);

  00033	4c 8b 0f	 mov	 r9, QWORD PTR [rdi]
  00036	4d 85 c9	 test	 r9, r9
  00039	0f 84 90 00 00
	00		 je	 $LN7@PyBytes_Fi
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LGGNFECD@PyBytes_Fini?$AA@
  0004d	41 b8 6f 0b 00
	00		 mov	 r8d, 2927		; 00000b6fH
  00053	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0005b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00060	85 c0		 test	 eax, eax
  00062	75 6b		 jne	 SHORT $LN7@PyBytes_Fi
  00064	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
  00067	48 89 2f	 mov	 QWORD PTR [rdi], rbp
  0006a	e8 00 00 00 00	 call	 _Py_PXCTX
  0006f	85 c0		 test	 eax, eax
  00071	75 5c		 jne	 SHORT $LN7@PyBytes_Fi
  00073	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00077	a8 20		 test	 al, 32			; 00000020H
  00079	75 4c		 jne	 SHORT $LN19@PyBytes_Fi
  0007b	84 c0		 test	 al, al
  0007d	78 48		 js	 SHORT $LN19@PyBytes_Fi
  0007f	a8 02		 test	 al, 2
  00081	75 4c		 jne	 SHORT $LN7@PyBytes_Fi
  00083	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00087	75 46		 jne	 SHORT $LN7@PyBytes_Fi
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00097	4c 8b cb	 mov	 r9, rbx
  0009a	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000a0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ad	48 8b cb	 mov	 rcx, rbx
  000b0	85 c0		 test	 eax, eax
  000b2	74 07		 je	 SHORT $LN24@PyBytes_Fi
  000b4	e8 00 00 00 00	 call	 _Px_Dealloc
  000b9	eb 14		 jmp	 SHORT $LN7@PyBytes_Fi
$LN24@PyBytes_Fi:
  000bb	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000bf	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000c5	eb 08		 jmp	 SHORT $LN7@PyBytes_Fi
$LN19@PyBytes_Fi:
  000c7	48 8b cb	 mov	 rcx, rbx
  000ca	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyBytes_Fi:

; 2925 :         return;
; 2926 :     for (i = 0; i < UCHAR_MAX + 1; i++)

  000cf	48 83 c7 08	 add	 rdi, 8
  000d3	48 ff ce	 dec	 rsi
  000d6	0f 85 57 ff ff
	ff		 jne	 $LL11@PyBytes_Fi

; 2928 :     Py_CLEAR(nullstring);

  000dc	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR nullstring
  000e3	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  000e8	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000ed	4d 85 c9	 test	 r9, r9
  000f0	0f 84 b5 00 00
	00		 je	 $LN3@PyBytes_Fi
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LGGNFECD@PyBytes_Fini?$AA@
  00104	41 b8 70 0b 00
	00		 mov	 r8d, 2928		; 00000b70H
  0010a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00112	e8 00 00 00 00	 call	 _PyParallel_Guard
  00117	85 c0		 test	 eax, eax
  00119	0f 85 8c 00 00
	00		 jne	 $LN3@PyBytes_Fi
  0011f	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR nullstring
  00126	48 89 2d 00 00
	00 00		 mov	 QWORD PTR nullstring, rbp
  0012d	e8 00 00 00 00	 call	 _Py_PXCTX
  00132	85 c0		 test	 eax, eax
  00134	75 75		 jne	 SHORT $LN3@PyBytes_Fi
  00136	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0013a	a8 20		 test	 al, 32			; 00000020H
  0013c	75 65		 jne	 SHORT $LN30@PyBytes_Fi
  0013e	84 c0		 test	 al, al
  00140	78 61		 js	 SHORT $LN30@PyBytes_Fi
  00142	a8 02		 test	 al, 2
  00144	75 65		 jne	 SHORT $LN3@PyBytes_Fi
  00146	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0014a	75 5f		 jne	 SHORT $LN3@PyBytes_Fi
  0014c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00153	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0015a	4c 8b cb	 mov	 r9, rbx
  0015d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00163	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0016b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00170	48 8b cb	 mov	 rcx, rbx
  00173	85 c0		 test	 eax, eax
  00175	74 13		 je	 SHORT $LN35@PyBytes_Fi
  00177	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0017c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 2929 : }

  00181	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00185	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 2928 :     Py_CLEAR(nullstring);

$LN35@PyBytes_Fi:
  0018a	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0018e	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00193	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 2929 : }

  00198	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0019c	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 2928 :     Py_CLEAR(nullstring);

$LN30@PyBytes_Fi:
  001a3	48 8b cb	 mov	 rcx, rbx
  001a6	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyBytes_Fi:
  001ab	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  001b0	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN2@PyBytes_Fi:

; 2929 : }

  001b5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001b9	c3		 ret	 0
PyBytes_Fini ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@NMNLIHFB@striter_dealloc?$AA@		; `string'
EXTRN	PyObject_GC_Del:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$striter_dealloc DD imagerel striter_dealloc
	DD	imagerel striter_dealloc+301
	DD	imagerel $unwind$striter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$striter_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BA@NMNLIHFB@striter_dealloc?$AA@
CONST	SEGMENT
??_C@_0BA@NMNLIHFB@striter_dealloc?$AA@ DB 'striter_dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
CONST	ENDS
;	COMDAT striter_dealloc
_TEXT	SEGMENT
it$ = 64
striter_dealloc PROC					; COMDAT

; 2941 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 2942 :     _PyObject_GC_UNTRACK(it);

  0000d	4c 8b c9	 mov	 r9, rcx
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@NMNLIHFB@striter_dealloc?$AA@
  0001e	41 b8 7e 0b 00
	00		 mov	 r8d, 2942		; 00000b7eH
  00024	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00031	85 c0		 test	 eax, eax
  00033	75 54		 jne	 SHORT $LN5@striter_de
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@NMNLIHFB@striter_dealloc?$AA@
  00043	4c 8b cf	 mov	 r9, rdi
  00046	41 b8 7e 0b 00
	00		 mov	 r8d, 2942		; 00000b7eH
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	74 04		 je	 SHORT $LN11@striter_de
  0005d	33 d2		 xor	 edx, edx
  0005f	eb 04		 jmp	 SHORT $LN12@striter_de
$LN11@striter_de:
  00061	48 8d 57 e8	 lea	 rdx, QWORD PTR [rdi-24]
$LN12@striter_de:
  00065	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00068	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0006c	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00074	48 89 01	 mov	 QWORD PTR [rcx], rax
  00077	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0007a	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0007e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00082	48 c7 02 00 00
	00 00		 mov	 QWORD PTR [rdx], 0
$LN5@striter_de:

; 2943 :     Py_XDECREF(it->it_seq);

  00089	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
  0008d	48 85 db	 test	 rbx, rbx
  00090	0f 84 85 00 00
	00		 je	 $LN3@striter_de
  00096	e8 00 00 00 00	 call	 _Py_PXCTX
  0009b	85 c0		 test	 eax, eax
  0009d	75 7c		 jne	 SHORT $LN3@striter_de
  0009f	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000a3	a8 20		 test	 al, 32			; 00000020H
  000a5	75 6c		 jne	 SHORT $LN17@striter_de
  000a7	84 c0		 test	 al, al
  000a9	78 68		 js	 SHORT $LN17@striter_de
  000ab	a8 02		 test	 al, 2
  000ad	75 6c		 jne	 SHORT $LN3@striter_de
  000af	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000b3	75 66		 jne	 SHORT $LN3@striter_de
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c3	4c 8b cb	 mov	 r9, rbx
  000c6	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000cc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d9	48 8b cb	 mov	 rcx, rbx
  000dc	85 c0		 test	 eax, eax
  000de	74 17		 je	 SHORT $LN22@striter_de
  000e0	e8 00 00 00 00	 call	 _Px_Dealloc

; 2944 :     PyObject_GC_Del(it);

  000e5	48 8b cf	 mov	 rcx, rdi

; 2945 : }

  000e8	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000ed	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f1	5f		 pop	 rdi
  000f2	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 2943 :     Py_XDECREF(it->it_seq);

$LN22@striter_de:
  000f7	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000fb	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 2944 :     PyObject_GC_Del(it);

  00101	48 8b cf	 mov	 rcx, rdi

; 2945 : }

  00104	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00109	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0010d	5f		 pop	 rdi
  0010e	e9 00 00 00 00	 jmp	 PyObject_GC_Del

; 2943 :     Py_XDECREF(it->it_seq);

$LN17@striter_de:
  00113	48 8b cb	 mov	 rcx, rbx
  00116	e8 00 00 00 00	 call	 Px_DecRef
$LN3@striter_de:

; 2944 :     PyObject_GC_Del(it);

  0011b	48 8b cf	 mov	 rcx, rdi

; 2945 : }

  0011e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00123	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00127	5f		 pop	 rdi
  00128	e9 00 00 00 00	 jmp	 PyObject_GC_Del
striter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@MPIMDAPK@striter_traverse?$AA@	; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$striter_traverse DD imagerel striter_traverse
	DD	imagerel striter_traverse+97
	DD	imagerel $unwind$striter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$striter_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BB@MPIMDAPK@striter_traverse?$AA@
CONST	SEGMENT
??_C@_0BB@MPIMDAPK@striter_traverse?$AA@ DB 'striter_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT striter_traverse
_TEXT	SEGMENT
it$ = 48
visit$ = 56
arg$ = 64
striter_traverse PROC					; COMDAT

; 2949 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 2950 :     Py_VISIT(it->it_seq);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@striter_tr
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MPIMDAPK@striter_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 86 0b 00
	00		 mov	 r8d, 2950		; 00000b86H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@striter_tr:
  0003d	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00041	48 85 c9	 test	 rcx, rcx
  00044	74 09		 je	 SHORT $LN5@striter_tr
  00046	48 8b d7	 mov	 rdx, rdi
  00049	ff d6		 call	 rsi
  0004b	85 c0		 test	 eax, eax
  0004d	75 02		 jne	 SHORT $LN7@striter_tr
$LN5@striter_tr:

; 2951 :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN7@striter_tr:

; 2952 : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
striter_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$striter_next DD imagerel striter_next
	DD	imagerel striter_next+74
	DD	imagerel $unwind$striter_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$striter_next DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT striter_next
_TEXT	SEGMENT
it$ = 48
striter_next PROC					; COMDAT

; 2956 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 2957 :     PyBytesObject *seq;
; 2958 :     PyObject *item;
; 2959 : 
; 2960 :     assert(it != NULL);
; 2961 :     seq = it->it_seq;

  00009	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]

; 2962 :     if (seq == NULL)

  0000d	48 85 c9	 test	 rcx, rcx

; 2963 :         return NULL;

  00010	74 30		 je	 SHORT $LN6@striter_ne

; 2964 :     assert(PyBytes_Check(seq));
; 2965 : 
; 2966 :     if (it->it_index < PyBytes_GET_SIZE(seq)) {

  00012	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00016	48 3b 41 60	 cmp	 rax, QWORD PTR [rcx+96]
  0001a	7d 19		 jge	 SHORT $LN2@striter_ne

; 2967 :         item = PyLong_FromLong(
; 2968 :             (unsigned char)seq->ob_sval[it->it_index]);

  0001c	0f b6 4c 08 78	 movzx	 ecx, BYTE PTR [rax+rcx+120]
  00021	e8 00 00 00 00	 call	 PyLong_FromLong

; 2969 :         if (item != NULL)

  00026	48 85 c0	 test	 rax, rax
  00029	74 19		 je	 SHORT $LN4@striter_ne

; 2970 :             ++it->it_index;

  0002b	48 ff 43 60	 inc	 QWORD PTR [rbx+96]

; 2977 : }

  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5b		 pop	 rbx
  00034	c3		 ret	 0
$LN2@striter_ne:

; 2971 :         return item;
; 2972 :     }
; 2973 : 
; 2974 :     Py_DECREF(seq);

  00035	e8 00 00 00 00	 call	 _Py_DecRef

; 2975 :     it->it_seq = NULL;

  0003a	48 c7 43 68 00
	00 00 00	 mov	 QWORD PTR [rbx+104], 0
$LN6@striter_ne:

; 2976 :     return NULL;

  00042	33 c0		 xor	 eax, eax
$LN4@striter_ne:

; 2977 : }

  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
striter_next ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT striter_len
_TEXT	SEGMENT
it$ = 8
striter_len PROC					; COMDAT

; 2981 : {

  00000	48 8b c1	 mov	 rax, rcx

; 2982 :     Py_ssize_t len = 0;

  00003	33 c9		 xor	 ecx, ecx

; 2983 :     if (it->it_seq)

  00005	48 8b 50 68	 mov	 rdx, QWORD PTR [rax+104]
  00009	48 85 d2	 test	 rdx, rdx
  0000c	74 08		 je	 SHORT $LN1@striter_le

; 2984 :         len = PyBytes_GET_SIZE(it->it_seq) - it->it_index;

  0000e	48 8b 4a 60	 mov	 rcx, QWORD PTR [rdx+96]
  00012	48 2b 48 60	 sub	 rcx, QWORD PTR [rax+96]
$LN1@striter_le:

; 2985 :     return PyLong_FromSsize_t(len);
; 2986 : }

  00016	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
striter_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_04IFNKFGDK@N?$CIN?$CJ?$AA@		; `string'
PUBLIC	??_C@_05IFELCCKI@N?$CIO?$CJn?$AA@		; `string'
PUBLIC	??_C@_04BKLHDIKK@iter?$AA@			; `string'
EXTRN	PyUnicode_FromUnicode:PROC
EXTRN	_PyObject_GetBuiltin:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$striter_reduce DD imagerel striter_reduce
	DD	imagerel striter_reduce+134
	DD	imagerel $unwind$striter_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$striter_reduce DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_04IFNKFGDK@N?$CIN?$CJ?$AA@
CONST	SEGMENT
??_C@_04IFNKFGDK@N?$CIN?$CJ?$AA@ DB 'N(N)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IFELCCKI@N?$CIO?$CJn?$AA@
CONST	SEGMENT
??_C@_05IFELCCKI@N?$CIO?$CJn?$AA@ DB 'N(O)n', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKLHDIKK@iter?$AA@
CONST	SEGMENT
??_C@_04BKLHDIKK@iter?$AA@ DB 'iter', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT striter_reduce
_TEXT	SEGMENT
it$ = 48
striter_reduce PROC					; COMDAT

; 2993 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2994 :     if (it->it_seq != NULL) {

  0000a	48 8b 79 68	 mov	 rdi, QWORD PTR [rcx+104]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	48 85 ff	 test	 rdi, rdi
  00014	74 2c		 je	 SHORT $LN3@striter_re

; 2995 :         return Py_BuildValue("N(O)n", _PyObject_GetBuiltin("iter"),
; 2996 :                              it->it_seq, it->it_index);

  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  0001d	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  00022	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IFELCCKI@N?$CIO?$CJn?$AA@
  0002d	48 8b d0	 mov	 rdx, rax
  00030	4c 8b c7	 mov	 r8, rdi

; 3002 :     }
; 3003 : }

  00033	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	e9 00 00 00 00	 jmp	 _Py_BuildValue_SizeT
$LN3@striter_re:

; 2997 :     } else {
; 2998 :         PyObject *u = PyUnicode_FromUnicode(NULL, 0);

  00042	33 d2		 xor	 edx, edx
  00044	33 c9		 xor	 ecx, ecx
  00046	e8 00 00 00 00	 call	 PyUnicode_FromUnicode
  0004b	48 8b d8	 mov	 rbx, rax

; 2999 :         if (u == NULL)

  0004e	48 85 c0	 test	 rax, rax
  00051	75 0b		 jne	 SHORT $LN1@striter_re

; 3002 :     }
; 3003 : }

  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
$LN1@striter_re:

; 3000 :             return NULL;
; 3001 :         return Py_BuildValue("N(N)", _PyObject_GetBuiltin("iter"), u);

  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  00065	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IFNKFGDK@N?$CIN?$CJ?$AA@
  00071	4c 8b c3	 mov	 r8, rbx
  00074	48 8b d0	 mov	 rdx, rax

; 3002 :     }
; 3003 : }

  00077	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00080	5f		 pop	 rdi
  00081	e9 00 00 00 00	 jmp	 _Py_BuildValue_SizeT
striter_reduce ENDP
_TEXT	ENDS
EXTRN	PyLong_AsSsize_t:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$striter_setstate DD imagerel striter_setstate
	DD	imagerel striter_setstate+134
	DD	imagerel $unwind$striter_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$striter_setstate DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
xdata	ENDS
;	COMDAT striter_setstate
_TEXT	SEGMENT
it$ = 64
state$ = 72
striter_setstate PROC					; COMDAT

; 3009 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 3010 :     Py_ssize_t index = PyLong_AsSsize_t(state);

  00009	48 8b ca	 mov	 rcx, rdx
  0000c	e8 00 00 00 00	 call	 PyLong_AsSsize_t

; 3011 :     if (index == -1 && PyErr_Occurred())

  00011	48 83 f8 ff	 cmp	 rax, -1
  00015	75 12		 jne	 SHORT $LN2@striter_se
  00017	e8 00 00 00 00	 call	 PyErr_Occurred
  0001c	48 85 c0	 test	 rax, rax
  0001f	74 0d		 je	 SHORT $LN9@striter_se

; 3012 :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 3017 : }

  00023	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00027	5b		 pop	 rbx
  00028	c3		 ret	 0
$LN2@striter_se:

; 3013 :     if (index < 0)

  00029	48 85 c0	 test	 rax, rax
  0002c	79 02		 jns	 SHORT $LN1@striter_se
$LN9@striter_se:

; 3014 :         index = 0;

  0002e	33 c0		 xor	 eax, eax
$LN1@striter_se:

; 3015 :     it->it_index = index;

  00030	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 3016 :     Py_RETURN_NONE;

  00034	e8 00 00 00 00	 call	 _Py_PXCTX
  00039	85 c0		 test	 eax, eax
  0003b	75 3c		 jne	 SHORT $LN6@striter_se
  0003d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00052	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00058	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00060	e8 00 00 00 00	 call	 _PyParallel_Guard
  00065	85 c0		 test	 eax, eax
  00067	75 09		 jne	 SHORT $LN5@striter_se
  00069	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00070	74 07		 je	 SHORT $LN6@striter_se
$LN5@striter_se:
  00072	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@striter_se:
  00079	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3017 : }

  00080	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00084	5b		 pop	 rbx
  00085	c3		 ret	 0
striter_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0L@KAOKLDGC@bytes_iter?$AA@		; `string'
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$bytes_iter DD imagerel bytes_iter
	DD	imagerel bytes_iter+50
	DD	imagerel $unwind$bytes_iter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$bytes_iter DD imagerel bytes_iter+50
	DD	imagerel bytes_iter+102
	DD	imagerel $chain$0$bytes_iter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$bytes_iter DD imagerel bytes_iter+102
	DD	imagerel bytes_iter+345
	DD	imagerel $chain$3$bytes_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$bytes_iter DD 040521H
	DD	083405H
	DD	097400H
	DD	imagerel bytes_iter
	DD	imagerel bytes_iter+50
	DD	imagerel $unwind$bytes_iter
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$bytes_iter DD 020521H
	DD	097405H
	DD	imagerel bytes_iter
	DD	imagerel bytes_iter+50
	DD	imagerel $unwind$bytes_iter
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_iter DD 020601H
	DD	060025206H
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KAOKLDGC@bytes_iter?$AA@
CONST	SEGMENT
??_C@_0L@KAOKLDGC@bytes_iter?$AA@ DB 'bytes_iter', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
CONST	ENDS
;	COMDAT bytes_iter
_TEXT	SEGMENT
seq$ = 64
bytes_iter PROC						; COMDAT

; 3066 : {

  00000	40 56		 push	 rsi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3067 :     striterobject *it;
; 3068 : 
; 3069 :     if (!PyBytes_Check(seq)) {

  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8b f1	 mov	 rsi, rcx
  0000d	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  00017	75 19		 jne	 SHORT $LN7@bytes_iter

; 3070 :         PyErr_BadInternalCall();

  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@
  00020	ba fe 0b 00 00	 mov	 edx, 3070		; 00000bfeH
  00025	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 3071 :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 3081 : }

  0002c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00030	5e		 pop	 rsi
  00031	c3		 ret	 0
$LN7@bytes_iter:
  00032	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi

; 3072 :     }
; 3073 :     it = PyObject_GC_New(striterobject, &PyBytesIter_Type);

  00037	e8 00 00 00 00	 call	 _Py_PXCTX
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBytesIter_Type
  00043	85 c0		 test	 eax, eax
  00045	74 07		 je	 SHORT $LN10@bytes_iter
  00047	e8 00 00 00 00	 call	 _PxObject_New
  0004c	eb 05		 jmp	 SHORT $LN19@bytes_iter
$LN10@bytes_iter:
  0004e	e8 00 00 00 00	 call	 _PyObject_GC_New
$LN19@bytes_iter:
  00053	48 8b f8	 mov	 rdi, rax

; 3074 :     if (it == NULL)

  00056	48 85 c0	 test	 rax, rax
  00059	75 0b		 jne	 SHORT $LN6@bytes_iter
  0005b	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 3081 : }

  00060	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00064	5e		 pop	 rsi
  00065	c3		 ret	 0
$LN6@bytes_iter:
  00066	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx

; 3075 :         return NULL;
; 3076 :     it->it_index = 0;

  0006b	33 db		 xor	 ebx, ebx
  0006d	48 89 5f 60	 mov	 QWORD PTR [rdi+96], rbx

; 3077 :     Py_INCREF(seq);

  00071	e8 00 00 00 00	 call	 _Py_PXCTX
  00076	85 c0		 test	 eax, eax
  00078	75 32		 jne	 SHORT $LN15@bytes_iter
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00088	4c 8b ce	 mov	 r9, rsi
  0008b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00091	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00099	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009e	85 c0		 test	 eax, eax
  000a0	75 06		 jne	 SHORT $LN14@bytes_iter
  000a2	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  000a6	74 04		 je	 SHORT $LN15@bytes_iter
$LN14@bytes_iter:
  000a8	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN15@bytes_iter:

; 3078 :     it->it_seq = (PyBytesObject *)seq;
; 3079 :     _PyObject_GC_TRACK(it);

  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@KAOKLDGC@bytes_iter?$AA@
  000ba	4c 8b cf	 mov	 r9, rdi
  000bd	41 b8 07 0c 00
	00		 mov	 r8d, 3079		; 00000c07H
  000c3	48 89 77 68	 mov	 QWORD PTR [rdi+104], rsi
  000c7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000cf	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d4	85 c0		 test	 eax, eax
  000d6	75 6e		 jne	 SHORT $LN2@bytes_iter
  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@
  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@KAOKLDGC@bytes_iter?$AA@
  000e6	4c 8b cf	 mov	 r9, rdi
  000e9	41 b8 07 0c 00
	00		 mov	 r8d, 3079		; 00000c07H
  000ef	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000f7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fc	85 c0		 test	 eax, eax
  000fe	75 04		 jne	 SHORT $LN13@bytes_iter
  00100	48 8d 5f e8	 lea	 rbx, QWORD PTR [rdi-24]
$LN13@bytes_iter:
  00104	48 83 7b 10 fe	 cmp	 QWORD PTR [rbx+16], -2
  00109	74 0c		 je	 SHORT $LN1@bytes_iter
  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00112	e8 00 00 00 00	 call	 Py_FatalError
$LN1@bytes_iter:
  00117	48 c7 43 10 fd
	ff ff ff	 mov	 QWORD PTR [rbx+16], -3
  0011f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00126	48 89 03	 mov	 QWORD PTR [rbx], rax
  00129	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00130	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00134	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  00138	48 89 19	 mov	 QWORD PTR [rcx], rbx
  0013b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00142	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
$LN2@bytes_iter:

; 3080 :     return (PyObject *)it;

  00146	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0014b	48 8b c7	 mov	 rax, rdi
  0014e	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 3081 : }

  00153	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00157	5e		 pop	 rsi
  00158	c3		 ret	 0
bytes_iter ENDP
_TEXT	ENDS
PUBLIC	??_C@_02BBAHNLBA@?$CFp?$AA@			; `string'
PUBLIC	??_C@_02NJNOFBBI@?$CFx?$AA@			; `string'
PUBLIC	??_C@_02IKAHHCAI@?$CFi?$AA@			; `string'
PUBLIC	??_C@_02GMHACPFF@?$CFu?$AA@			; `string'
PUBLIC	??_C@_03GEFEEEBD@?$CFIu?$AA@			; `string'
PUBLIC	??_C@_03FKNCMABI@?$CFlu?$AA@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_03DHINGHAD@?$CFId?$AA@			; `string'
PUBLIC	??_C@_03JALODAI@?$CFld?$AA@			; `string'
PUBLIC	??_C@_0EG@OEHELKIM@PyBytes_FromFormatV?$CI?$CJ?3?5?$CFc?5format@ ; `string'
PUBLIC	PyBytes_FromFormatV
EXTRN	__imp_memmove:PROC
EXTRN	__imp_sprintf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyBytes_FromFormatV DD imagerel $LN99
	DD	imagerel $LN99+294
	DD	imagerel $unwind$PyBytes_FromFormatV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyBytes_FromFormatV DD imagerel $LN99+294
	DD	imagerel $LN99+324
	DD	imagerel $chain$0$PyBytes_FromFormatV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyBytes_FromFormatV DD imagerel $LN99+324
	DD	imagerel $LN99+1133
	DD	imagerel $chain$1$PyBytes_FromFormatV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyBytes_FromFormatV DD imagerel $LN99+1133
	DD	imagerel $LN99+1152
	DD	imagerel $chain$2$PyBytes_FromFormatV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyBytes_FromFormatV DD imagerel $LN99+1152
	DD	imagerel $LN99+1260
	DD	imagerel $chain$3$PyBytes_FromFormatV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyBytes_FromFormatV DD imagerel $LN99+1260
	DD	imagerel $LN99+1380
	DD	imagerel $chain$4$PyBytes_FromFormatV
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyBytes_FromFormatV DD 040021H
	DD	0ac400H
	DD	096400H
	DD	imagerel $LN99
	DD	imagerel $LN99+294
	DD	imagerel $unwind$PyBytes_FromFormatV
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyBytes_FromFormatV DD 021H
	DD	imagerel $LN99
	DD	imagerel $LN99+294
	DD	imagerel $unwind$PyBytes_FromFormatV
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyBytes_FromFormatV DD 021H
	DD	imagerel $LN99+294
	DD	imagerel $LN99+324
	DD	imagerel $chain$0$PyBytes_FromFormatV
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyBytes_FromFormatV DD 020521H
	DD	096405H
	DD	imagerel $LN99+294
	DD	imagerel $LN99+324
	DD	imagerel $chain$0$PyBytes_FromFormatV
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyBytes_FromFormatV DD 020521H
	DD	0ac405H
	DD	imagerel $LN99
	DD	imagerel $LN99+294
	DD	imagerel $unwind$PyBytes_FromFormatV
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyBytes_FromFormatV DD 060d01H
	DD	0b340dH
	DD	0d009320dH
	DD	050067007H
xdata	ENDS
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp?$AA@ DB '%p', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJNOFBBI@?$CFx?$AA@
CONST	SEGMENT
??_C@_02NJNOFBBI@?$CFx?$AA@ DB '%x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02IKAHHCAI@?$CFi?$AA@
CONST	SEGMENT
??_C@_02IKAHHCAI@?$CFi?$AA@ DB '%i', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMHACPFF@?$CFu?$AA@
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu?$AA@ DB '%u', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GEFEEEBD@?$CFIu?$AA@
CONST	SEGMENT
??_C@_03GEFEEEBD@?$CFIu?$AA@ DB '%Iu', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FKNCMABI@?$CFlu?$AA@
CONST	SEGMENT
??_C@_03FKNCMABI@?$CFlu?$AA@ DB '%lu', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DHINGHAD@?$CFId?$AA@
CONST	SEGMENT
??_C@_03DHINGHAD@?$CFId?$AA@ DB '%Id', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JALODAI@?$CFld?$AA@
CONST	SEGMENT
??_C@_03JALODAI@?$CFld?$AA@ DB '%ld', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@OEHELKIM@PyBytes_FromFormatV?$CI?$CJ?3?5?$CFc?5format@
CONST	SEGMENT
??_C@_0EG@OEHELKIM@PyBytes_FromFormatV?$CI?$CJ?3?5?$CFc?5format@ DB 'PyBy'
	DB	'tes_FromFormatV(): %c format expects an integer in range [0; '
	DB	'255]', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyBytes_FromFormatV
_TEXT	SEGMENT
string$ = 64
format$ = 64
vargs$ = 72
PyBytes_FromFormatV PROC				; COMDAT

; 175  : {

$LN99:
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	41 55		 push	 r13
  00009	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000d	48 8b ea	 mov	 rbp, rdx

; 176  :     va_list count;
; 177  :     Py_ssize_t n = 0;

  00010	33 d2		 xor	 edx, edx
  00012	48 8b d9	 mov	 rbx, rcx

; 178  :     const char* f;
; 179  :     char *s;
; 180  :     PyObject* string;
; 181  : 
; 182  :     Py_VA_COPY(count, vargs);
; 183  :     /* step 1: figure out how large a buffer we need */
; 184  :     for (f = format; *f; f++) {

  00015	4c 8b c1	 mov	 r8, rcx
  00018	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:__ImageBase
  0001f	38 11		 cmp	 BYTE PTR [rcx], dl
  00021	0f 84 fd 00 00
	00		 je	 $expand$20477

; 176  :     va_list count;
; 177  :     Py_ssize_t n = 0;

  00027	4c 8d 4d f8	 lea	 r9, QWORD PTR [rbp-8]
  0002b	0f 1f 44 00 00	 npad	 5
$LL68@PyBytes_Fr@3:

; 185  :         if (*f == '%') {

  00030	41 80 38 25	 cmp	 BYTE PTR [r8], 37	; 00000025H
  00034	75 79		 jne	 SHORT $LN65@PyBytes_Fr@3

; 186  :             const char* p = f;

  00036	49 8b f8	 mov	 rdi, r8
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL64@PyBytes_Fr@3:

; 187  :             while (*++f && *f != '%' && !Py_ISALPHA(*f))

  00040	41 0f b6 40 01	 movzx	 eax, BYTE PTR [r8+1]
  00045	49 ff c0	 inc	 r8
  00048	84 c0		 test	 al, al
  0004a	74 12		 je	 SHORT $LN63@PyBytes_Fr@3
  0004c	3c 25		 cmp	 al, 37			; 00000025H
  0004e	74 0e		 je	 SHORT $LN63@PyBytes_Fr@3
  00050	0f b6 c0	 movzx	 eax, al
  00053	41 f6 84 85 00
	00 00 00 03	 test	 BYTE PTR _Py_ctype_table[r13+rax*4], 3
  0005c	74 e2		 je	 SHORT $LL64@PyBytes_Fr@3
$LN63@PyBytes_Fr@3:

; 188  :                 ;
; 189  : 
; 190  :             /* skip the 'l' or 'z' in {%ld, %zd, %lu, %zu} since
; 191  :              * they don't affect the amount of space we reserve.
; 192  :              */
; 193  :             if ((*f == 'l' || *f == 'z') &&
; 194  :                             (f[1] == 'd' || f[1] == 'u'))

  0005e	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  00062	3c 6c		 cmp	 al, 108			; 0000006cH
  00064	74 04		 je	 SHORT $LN61@PyBytes_Fr@3
  00066	3c 7a		 cmp	 al, 122			; 0000007aH
  00068	75 10		 jne	 SHORT $LN62@PyBytes_Fr@3
$LN61@PyBytes_Fr@3:
  0006a	41 0f b6 40 01	 movzx	 eax, BYTE PTR [r8+1]
  0006f	3c 64		 cmp	 al, 100			; 00000064H
  00071	74 04		 je	 SHORT $LN60@PyBytes_Fr@3
  00073	3c 75		 cmp	 al, 117			; 00000075H
  00075	75 03		 jne	 SHORT $LN62@PyBytes_Fr@3
$LN60@PyBytes_Fr@3:

; 195  :                 ++f;

  00077	49 ff c0	 inc	 r8
$LN62@PyBytes_Fr@3:

; 196  : 
; 197  :             switch (*f) {

  0007a	41 0f be 00	 movsx	 eax, BYTE PTR [r8]
  0007e	83 c0 db	 add	 eax, -37		; ffffffffffffffdbH
  00081	83 f8 53	 cmp	 eax, 83			; 00000053H
  00084	0f 87 89 00 00
	00		 ja	 $LN50@PyBytes_Fr@3
  0008a	48 98		 cdqe
  0008c	41 0f b6 84 05
	00 00 00 00	 movzx	 eax, BYTE PTR $LN89@PyBytes_Fr@3[r13+rax]
  00095	41 8b 8c 85 00
	00 00 00	 mov	 ecx, DWORD PTR $LN90@PyBytes_Fr@3[r13+rax*4]
  0009d	49 03 cd	 add	 rcx, r13
  000a0	ff e1		 jmp	 rcx
$LN57@PyBytes_Fr@3:

; 198  :             case 'c':
; 199  :             {
; 200  :                 int c = va_arg(count, int);

  000a2	49 83 c1 08	 add	 r9, 8

; 201  :                 if (c < 0 || c > 255) {

  000a6	41 81 39 ff 00
	00 00		 cmp	 DWORD PTR [r9], 255	; 000000ffH
  000ad	77 41		 ja	 SHORT $LN80@PyBytes_Fr@3
$LN65@PyBytes_Fr@3:

; 244  :             n++;

  000af	48 ff c2	 inc	 rdx
$LN67@PyBytes_Fr@3:

; 178  :     const char* f;
; 179  :     char *s;
; 180  :     PyObject* string;
; 181  : 
; 182  :     Py_VA_COPY(count, vargs);
; 183  :     /* step 1: figure out how large a buffer we need */
; 184  :     for (f = format; *f; f++) {

  000b2	49 ff c0	 inc	 r8
  000b5	41 80 38 00	 cmp	 BYTE PTR [r8], 0
  000b9	0f 85 71 ff ff
	ff		 jne	 $LL68@PyBytes_Fr@3
  000bf	eb 63		 jmp	 SHORT $expand$20477
$LN53@PyBytes_Fr@3:

; 206  :                 }
; 207  :                 n++;
; 208  :                 break;
; 209  :             }
; 210  :             case '%':
; 211  :                 n++;
; 212  :                 break;
; 213  :             case 'd': case 'u': case 'i': case 'x':
; 214  :                 (void) va_arg(count, int);

  000c1	49 83 c1 08	 add	 r9, 8

; 215  :                 /* 20 bytes is enough to hold a 64-bit
; 216  :                    integer.  Decimal takes the most space.
; 217  :                    This isn't enough for octal. */
; 218  :                 n += 20;

  000c5	48 83 c2 14	 add	 rdx, 20

; 219  :                 break;

  000c9	eb e7		 jmp	 SHORT $LN67@PyBytes_Fr@3
$LN52@PyBytes_Fr@3:

; 220  :             case 's':
; 221  :                 s = va_arg(count, char*);
; 222  :                 n += strlen(s);

  000cb	49 8b 79 08	 mov	 rdi, QWORD PTR [r9+8]
  000cf	48 83 c9 ff	 or	 rcx, -1
  000d3	49 83 c1 08	 add	 r9, 8
  000d7	33 c0		 xor	 eax, eax
  000d9	f2 ae		 repne scasb
  000db	48 f7 d1	 not	 rcx
  000de	48 ff c9	 dec	 rcx
  000e1	48 03 d1	 add	 rdx, rcx

; 223  :                 break;

  000e4	eb cc		 jmp	 SHORT $LN67@PyBytes_Fr@3
$LN51@PyBytes_Fr@3:

; 224  :             case 'p':
; 225  :                 (void) va_arg(count, int);

  000e6	49 83 c1 08	 add	 r9, 8

; 226  :                 /* maximum 64-bit pointer representation:
; 227  :                  * 0xffffffffffffffff
; 228  :                  * so 19 characters is enough.
; 229  :                  * XXX I count 18 -- what's the extra for?
; 230  :                  */
; 231  :                 n += 19;

  000ea	48 83 c2 13	 add	 rdx, 19

; 241  :                 goto expand;
; 242  :             }
; 243  :         } else

  000ee	eb c2		 jmp	 SHORT $LN67@PyBytes_Fr@3
$LN80@PyBytes_Fr@3:

; 202  :                     PyErr_SetString(PyExc_OverflowError,
; 203  :                                     "PyBytes_FromFormatV(): %c format "
; 204  :                                     "expects an integer in range [0; 255]");

  000f0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EG@OEHELKIM@PyBytes_FromFormatV?$CI?$CJ?3?5?$CFc?5format@
  000fe	e8 00 00 00 00	 call	 PyErr_SetString

; 205  :                     return NULL;

  00103	33 c0		 xor	 eax, eax

; 360  : }

  00105	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  0010a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0010e	41 5d		 pop	 r13
  00110	5f		 pop	 rdi
  00111	5d		 pop	 rbp
  00112	c3		 ret	 0
$LN50@PyBytes_Fr@3:

; 232  :                 break;
; 233  :             default:
; 234  :                 /* if we stumble upon an unknown
; 235  :                    formatting code, copy the rest of
; 236  :                    the format string to the output
; 237  :                    string. (we cannot just skip the
; 238  :                    code, since there's no way to know
; 239  :                    what's in the argument list) */
; 240  :                 n += strlen(p);

  00113	48 83 c9 ff	 or	 rcx, -1
  00117	33 c0		 xor	 eax, eax
  00119	f2 ae		 repne scasb
  0011b	48 f7 d1	 not	 rcx
  0011e	48 ff c9	 dec	 rcx
  00121	48 03 d1	 add	 rdx, rcx
$expand$20477:

; 245  :     }
; 246  :  expand:
; 247  :     /* step 2: fill the buffer */
; 248  :     /* Since we've analyzed how much space we need for the worst case,
; 249  :        use sprintf directly instead of the slower PyOS_snprintf. */
; 250  :     string = PyBytes_FromStringAndSize(NULL, n);

  00124	33 c9		 xor	 ecx, ecx
  00126	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12
  0012b	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00130	4c 8b e0	 mov	 r12, rax
  00133	48 89 44 24 40	 mov	 QWORD PTR string$[rsp], rax

; 251  :     if (!string)

  00138	48 85 c0	 test	 rax, rax
  0013b	0f 84 2c 03 00
	00		 je	 $LN94@PyBytes_Fr@3
$LN48@PyBytes_Fr@3:

; 252  :         return NULL;
; 253  : 
; 254  :     s = PyBytes_AsString(string);

  00141	48 8b c8	 mov	 rcx, rax
  00144	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  00149	e8 00 00 00 00	 call	 PyBytes_AsString

; 255  : 
; 256  :     for (f = format; *f; f++) {

  0014e	80 3b 00	 cmp	 BYTE PTR [rbx], 0
  00151	48 8b f0	 mov	 rsi, rax
  00154	0f 84 f8 02 00
	00		 je	 $end$20667

; 252  :         return NULL;
; 253  : 
; 254  :     s = PyBytes_AsString(string);

  0015a	48 83 c5 f8	 add	 rbp, -8
  0015e	66 90		 npad	 2
$LL47@PyBytes_Fr@3:

; 257  :         if (*f == '%') {

  00160	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  00163	3c 25		 cmp	 al, 37			; 00000025H
  00165	0f 85 0a 01 00
	00		 jne	 $LN44@PyBytes_Fr@3

; 258  :             const char* p = f++;
; 259  :             Py_ssize_t i;
; 260  :             int longflag = 0;
; 261  :             int size_tflag = 0;
; 262  :             /* parse the width.precision part (we're only
; 263  :                interested in the precision value, if any) */
; 264  :             n = 0;
; 265  :             while (Py_ISDIGIT(*f))

  0016b	0f b6 43 01	 movzx	 eax, BYTE PTR [rbx+1]
  0016f	48 8b fb	 mov	 rdi, rbx
  00172	48 ff c3	 inc	 rbx
  00175	45 33 c0	 xor	 r8d, r8d
  00178	45 33 c9	 xor	 r9d, r9d
  0017b	33 d2		 xor	 edx, edx
  0017d	41 f6 84 85 00
	00 00 00 04	 test	 BYTE PTR _Py_ctype_table[r13+rax*4], 4
  00186	74 26		 je	 SHORT $LN42@PyBytes_Fr@3
  00188	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL43@PyBytes_Fr@3:

; 266  :                 n = (n*10) + *f++ - '0';

  00190	48 0f be c0	 movsx	 rax, al
  00194	48 ff c3	 inc	 rbx
  00197	48 8d 0c 92	 lea	 rcx, QWORD PTR [rdx+rdx*4]
  0019b	48 8d 54 48 d0	 lea	 rdx, QWORD PTR [rax+rcx*2-48]
  001a0	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  001a3	41 f6 84 85 00
	00 00 00 04	 test	 BYTE PTR _Py_ctype_table[r13+rax*4], 4
  001ac	75 e2		 jne	 SHORT $LL43@PyBytes_Fr@3
$LN42@PyBytes_Fr@3:

; 267  :             if (*f == '.') {

  001ae	80 3b 2e	 cmp	 BYTE PTR [rbx], 46	; 0000002eH
  001b1	75 3b		 jne	 SHORT $LN77@PyBytes_Fr@3

; 268  :                 f++;
; 269  :                 n = 0;
; 270  :                 while (Py_ISDIGIT(*f))

  001b3	0f b6 43 01	 movzx	 eax, BYTE PTR [rbx+1]
  001b7	48 ff c3	 inc	 rbx
  001ba	33 d2		 xor	 edx, edx
  001bc	41 f6 84 85 00
	00 00 00 04	 test	 BYTE PTR _Py_ctype_table[r13+rax*4], 4
  001c5	74 27		 je	 SHORT $LN77@PyBytes_Fr@3
  001c7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL40@PyBytes_Fr@3:

; 271  :                     n = (n*10) + *f++ - '0';

  001d0	48 0f be c0	 movsx	 rax, al
  001d4	48 ff c3	 inc	 rbx
  001d7	48 8d 0c 92	 lea	 rcx, QWORD PTR [rdx+rdx*4]
  001db	48 8d 54 48 d0	 lea	 rdx, QWORD PTR [rax+rcx*2-48]
  001e0	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  001e3	41 f6 84 85 00
	00 00 00 04	 test	 BYTE PTR _Py_ctype_table[r13+rax*4], 4
  001ec	75 e2		 jne	 SHORT $LL40@PyBytes_Fr@3
$LN77@PyBytes_Fr@3:

; 272  :             }
; 273  :             while (*f && *f != '%' && !Py_ISALPHA(*f))

  001ee	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  001f1	84 c0		 test	 al, al
  001f3	74 1d		 je	 SHORT $LN93@PyBytes_Fr@3
$LL38@PyBytes_Fr@3:
  001f5	3c 25		 cmp	 al, 37			; 00000025H
  001f7	74 19		 je	 SHORT $LN93@PyBytes_Fr@3
  001f9	0f b6 c0	 movzx	 eax, al
  001fc	41 f6 84 85 00
	00 00 00 03	 test	 BYTE PTR _Py_ctype_table[r13+rax*4], 3
  00205	75 0b		 jne	 SHORT $LN93@PyBytes_Fr@3
  00207	0f b6 43 01	 movzx	 eax, BYTE PTR [rbx+1]

; 274  :                 f++;

  0020b	48 ff c3	 inc	 rbx
  0020e	84 c0		 test	 al, al
  00210	75 e3		 jne	 SHORT $LL38@PyBytes_Fr@3
$LN93@PyBytes_Fr@3:

; 275  :             /* handle the long flag, but only for %ld and %lu.
; 276  :                others can be added when necessary. */
; 277  :             if (*f == 'l' && (f[1] == 'd' || f[1] == 'u')) {

  00212	80 3b 6c	 cmp	 BYTE PTR [rbx], 108	; 0000006cH
  00215	75 15		 jne	 SHORT $LN36@PyBytes_Fr@3
  00217	0f b6 43 01	 movzx	 eax, BYTE PTR [rbx+1]
  0021b	3c 64		 cmp	 al, 100			; 00000064H
  0021d	74 04		 je	 SHORT $LN35@PyBytes_Fr@3
  0021f	3c 75		 cmp	 al, 117			; 00000075H
  00221	75 09		 jne	 SHORT $LN36@PyBytes_Fr@3
$LN35@PyBytes_Fr@3:

; 278  :                 longflag = 1;

  00223	41 b8 01 00 00
	00		 mov	 r8d, 1

; 279  :                 ++f;

  00229	48 ff c3	 inc	 rbx
$LN36@PyBytes_Fr@3:

; 280  :             }
; 281  :             /* handle the size_t flag. */
; 282  :             if (*f == 'z' && (f[1] == 'd' || f[1] == 'u')) {

  0022c	80 3b 7a	 cmp	 BYTE PTR [rbx], 122	; 0000007aH
  0022f	75 15		 jne	 SHORT $LN34@PyBytes_Fr@3
  00231	0f b6 43 01	 movzx	 eax, BYTE PTR [rbx+1]
  00235	3c 64		 cmp	 al, 100			; 00000064H
  00237	74 04		 je	 SHORT $LN33@PyBytes_Fr@3
  00239	3c 75		 cmp	 al, 117			; 00000075H
  0023b	75 09		 jne	 SHORT $LN34@PyBytes_Fr@3
$LN33@PyBytes_Fr@3:

; 283  :                 size_tflag = 1;

  0023d	41 b9 01 00 00
	00		 mov	 r9d, 1

; 284  :                 ++f;

  00243	48 ff c3	 inc	 rbx
$LN34@PyBytes_Fr@3:

; 285  :             }
; 286  : 
; 287  :             switch (*f) {

  00246	0f be 03	 movsx	 eax, BYTE PTR [rbx]
  00249	83 c0 db	 add	 eax, -37		; ffffffffffffffdbH
  0024c	83 f8 53	 cmp	 eax, 83			; 00000053H
  0024f	0f 87 d4 01 00
	00		 ja	 $LN2@PyBytes_Fr@3
  00255	48 98		 cdqe
  00257	41 0f b6 84 05
	00 00 00 00	 movzx	 eax, BYTE PTR $LN87@PyBytes_Fr@3[r13+rax]
  00260	41 8b 8c 85 00
	00 00 00	 mov	 ecx, DWORD PTR $LN88@PyBytes_Fr@3[r13+rax*4]
  00268	49 03 cd	 add	 rcx, r13
  0026b	ff e1		 jmp	 rcx
$LN30@PyBytes_Fr@3:

; 288  :             case 'c':
; 289  :             {
; 290  :                 int c = va_arg(vargs, int);
; 291  :                 /* c has been checked for overflow in the first step */
; 292  :                 *s++ = (unsigned char)c;

  0026d	0f b6 45 08	 movzx	 eax, BYTE PTR [rbp+8]
  00271	48 83 c5 08	 add	 rbp, 8
$LN44@PyBytes_Fr@3:

; 354  :             *s++ = *f;

  00275	88 06		 mov	 BYTE PTR [rsi], al
$LN97@PyBytes_Fr@3:
  00277	48 ff c6	 inc	 rsi
$LN46@PyBytes_Fr@3:

; 255  : 
; 256  :     for (f = format; *f; f++) {

  0027a	48 ff c3	 inc	 rbx
  0027d	80 3b 00	 cmp	 BYTE PTR [rbx], 0
  00280	0f 85 da fe ff
	ff		 jne	 $LL47@PyBytes_Fr@3
  00286	e9 c7 01 00 00	 jmp	 $end$20667
$LN29@PyBytes_Fr@3:

; 293  :                 break;
; 294  :             }
; 295  :             case 'd':
; 296  :                 if (longflag)

  0028b	45 85 c0	 test	 r8d, r8d
  0028e	74 09		 je	 SHORT $LN28@PyBytes_Fr@3

; 297  :                     sprintf(s, "%ld", va_arg(vargs, long));

  00290	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03JALODAI@?$CFld?$AA@
  00297	eb 26		 jmp	 SHORT $LN95@PyBytes_Fr@3
$LN28@PyBytes_Fr@3:

; 298  :                 else if (size_tflag)

  00299	45 85 c9	 test	 r9d, r9d
  0029c	74 1a		 je	 SHORT $LN26@PyBytes_Fr@3

; 299  :                     sprintf(s, "%" PY_FORMAT_SIZE_T "d",
; 300  :                         va_arg(vargs, Py_ssize_t));

  0029e	4c 8b 45 08	 mov	 r8, QWORD PTR [rbp+8]
  002a2	48 83 c5 08	 add	 rbp, 8
  002a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DHINGHAD@?$CFId?$AA@
  002ad	48 8b ce	 mov	 rcx, rsi
  002b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sprintf

; 301  :                 else

  002b6	eb 18		 jmp	 SHORT $LN25@PyBytes_Fr@3
$LN26@PyBytes_Fr@3:

; 302  :                     sprintf(s, "%d", va_arg(vargs, int));

  002b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
$LN95@PyBytes_Fr@3:
  002bf	44 8b 45 08	 mov	 r8d, DWORD PTR [rbp+8]
  002c3	48 83 c5 08	 add	 rbp, 8
  002c7	48 8b ce	 mov	 rcx, rsi
  002ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sprintf
$LN25@PyBytes_Fr@3:

; 303  :                 s += strlen(s);

  002d0	48 83 c9 ff	 or	 rcx, -1
  002d4	33 c0		 xor	 eax, eax
  002d6	48 8b fe	 mov	 rdi, rsi
  002d9	f2 ae		 repne scasb
  002db	48 f7 d1	 not	 rcx
  002de	48 ff c9	 dec	 rcx
  002e1	48 03 f1	 add	 rsi, rcx

; 304  :                 break;

  002e4	eb 94		 jmp	 SHORT $LN46@PyBytes_Fr@3
$LN24@PyBytes_Fr@3:

; 305  :             case 'u':
; 306  :                 if (longflag)

  002e6	45 85 c0	 test	 r8d, r8d
  002e9	74 09		 je	 SHORT $LN23@PyBytes_Fr@3

; 307  :                     sprintf(s, "%lu",
; 308  :                         va_arg(vargs, unsigned long));

  002eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03FKNCMABI@?$CFlu?$AA@
  002f2	eb 26		 jmp	 SHORT $LN96@PyBytes_Fr@3
$LN23@PyBytes_Fr@3:

; 309  :                 else if (size_tflag)

  002f4	45 85 c9	 test	 r9d, r9d
  002f7	74 1a		 je	 SHORT $LN21@PyBytes_Fr@3

; 310  :                     sprintf(s, "%" PY_FORMAT_SIZE_T "u",
; 311  :                         va_arg(vargs, size_t));

  002f9	4c 8b 45 08	 mov	 r8, QWORD PTR [rbp+8]
  002fd	48 83 c5 08	 add	 rbp, 8
  00301	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03GEFEEEBD@?$CFIu?$AA@
  00308	48 8b ce	 mov	 rcx, rsi
  0030b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sprintf

; 312  :                 else

  00311	eb 18		 jmp	 SHORT $LN20@PyBytes_Fr@3
$LN21@PyBytes_Fr@3:

; 313  :                     sprintf(s, "%u",
; 314  :                         va_arg(vargs, unsigned int));

  00313	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02GMHACPFF@?$CFu?$AA@
$LN96@PyBytes_Fr@3:
  0031a	44 8b 45 08	 mov	 r8d, DWORD PTR [rbp+8]
  0031e	48 83 c5 08	 add	 rbp, 8
  00322	48 8b ce	 mov	 rcx, rsi
  00325	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sprintf
$LN20@PyBytes_Fr@3:

; 315  :                 s += strlen(s);

  0032b	48 83 c9 ff	 or	 rcx, -1
  0032f	33 c0		 xor	 eax, eax
  00331	48 8b fe	 mov	 rdi, rsi
  00334	f2 ae		 repne scasb
  00336	48 f7 d1	 not	 rcx
  00339	48 ff c9	 dec	 rcx
  0033c	48 03 f1	 add	 rsi, rcx

; 316  :                 break;

  0033f	e9 36 ff ff ff	 jmp	 $LN46@PyBytes_Fr@3
$LN19@PyBytes_Fr@3:

; 317  :             case 'i':
; 318  :                 sprintf(s, "%i", va_arg(vargs, int));

  00344	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02IKAHHCAI@?$CFi?$AA@

; 319  :                 s += strlen(s);
; 320  :                 break;

  0034b	e9 6f ff ff ff	 jmp	 $LN95@PyBytes_Fr@3
$LN18@PyBytes_Fr@3:

; 321  :             case 'x':
; 322  :                 sprintf(s, "%x", va_arg(vargs, int));

  00350	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02NJNOFBBI@?$CFx?$AA@

; 323  :                 s += strlen(s);
; 324  :                 break;

  00357	e9 63 ff ff ff	 jmp	 $LN95@PyBytes_Fr@3
$LN17@PyBytes_Fr@3:

; 325  :             case 's':
; 326  :                 p = va_arg(vargs, char*);

  0035c	4c 8b 4d 08	 mov	 r9, QWORD PTR [rbp+8]

; 327  :                 i = strlen(p);

  00360	48 83 c9 ff	 or	 rcx, -1
  00364	48 83 c5 08	 add	 rbp, 8
  00368	33 c0		 xor	 eax, eax
  0036a	49 8b f9	 mov	 rdi, r9
  0036d	f2 ae		 repne scasb
  0036f	48 f7 d1	 not	 rcx
  00372	48 ff c9	 dec	 rcx
  00375	48 8b f9	 mov	 rdi, rcx

; 328  :                 if (n > 0 && i > n)

  00378	48 85 d2	 test	 rdx, rdx
  0037b	7e 07		 jle	 SHORT $LN15@PyBytes_Fr@3
  0037d	48 3b ca	 cmp	 rcx, rdx
  00380	48 0f 4f fa	 cmovg	 rdi, rdx
$LN15@PyBytes_Fr@3:

; 329  :                     i = n;
; 330  :                 Py_MEMCPY(s, p, i);

  00384	48 83 ff 10	 cmp	 rdi, 16
  00388	72 16		 jb	 SHORT $LN12@PyBytes_Fr@3
  0038a	4c 8b c7	 mov	 r8, rdi
  0038d	49 8b d1	 mov	 rdx, r9
  00390	48 8b ce	 mov	 rcx, rsi
  00393	e8 00 00 00 00	 call	 memcpy

; 331  :                 s += i;

  00398	48 03 f7	 add	 rsi, rdi

; 332  :                 break;

  0039b	e9 da fe ff ff	 jmp	 $LN46@PyBytes_Fr@3
$LN12@PyBytes_Fr@3:

; 329  :                     i = n;
; 330  :                 Py_MEMCPY(s, p, i);

  003a0	48 85 ff	 test	 rdi, rdi
  003a3	74 1b		 je	 SHORT $LN14@PyBytes_Fr@3
  003a5	48 8b ce	 mov	 rcx, rsi
  003a8	4c 2b ce	 sub	 r9, rsi
  003ab	48 8b d7	 mov	 rdx, rdi
  003ae	66 90		 npad	 2
$LL10@PyBytes_Fr@3:
  003b0	41 0f b6 04 09	 movzx	 eax, BYTE PTR [r9+rcx]
  003b5	48 ff c1	 inc	 rcx
  003b8	48 ff ca	 dec	 rdx
  003bb	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  003be	75 f0		 jne	 SHORT $LL10@PyBytes_Fr@3
$LN14@PyBytes_Fr@3:

; 331  :                 s += i;

  003c0	48 03 f7	 add	 rsi, rdi

; 332  :                 break;

  003c3	e9 b2 fe ff ff	 jmp	 $LN46@PyBytes_Fr@3
$LN7@PyBytes_Fr@3:

; 333  :             case 'p':
; 334  :                 sprintf(s, "%p", va_arg(vargs, void*));

  003c8	4c 8b 45 08	 mov	 r8, QWORD PTR [rbp+8]
  003cc	48 83 c5 08	 add	 rbp, 8
  003d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02BBAHNLBA@?$CFp?$AA@
  003d7	48 8b ce	 mov	 rcx, rsi
  003da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sprintf

; 335  :                 /* %p is ill-defined:  ensure leading 0x. */
; 336  :                 if (s[1] == 'X')

  003e0	0f b6 46 01	 movzx	 eax, BYTE PTR [rsi+1]
  003e4	3c 58		 cmp	 al, 88			; 00000058H
  003e6	75 09		 jne	 SHORT $LN6@PyBytes_Fr@3

; 337  :                     s[1] = 'x';

  003e8	c6 46 01 78	 mov	 BYTE PTR [rsi+1], 120	; 00000078H
  003ec	e9 df fe ff ff	 jmp	 $LN25@PyBytes_Fr@3
$LN6@PyBytes_Fr@3:

; 338  :                 else if (s[1] != 'x') {

  003f1	3c 78		 cmp	 al, 120			; 00000078H
  003f3	0f 84 d7 fe ff
	ff		 je	 $LN25@PyBytes_Fr@3

; 339  :                     memmove(s+2, s, strlen(s)+1);

  003f9	48 83 c9 ff	 or	 rcx, -1
  003fd	33 c0		 xor	 eax, eax
  003ff	48 8b fe	 mov	 rdi, rsi
  00402	f2 ae		 repne scasb
  00404	48 8b d6	 mov	 rdx, rsi
  00407	48 f7 d1	 not	 rcx
  0040a	4c 8b c1	 mov	 r8, rcx
  0040d	48 8d 4e 02	 lea	 rcx, QWORD PTR [rsi+2]
  00411	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memmove

; 340  :                     s[0] = '0';

  00417	66 c7 06 30 78	 mov	 WORD PTR [rsi], 30768	; 00007830H

; 341  :                     s[1] = 'x';
; 342  :                 }
; 343  :                 s += strlen(s);
; 344  :                 break;

  0041c	e9 af fe ff ff	 jmp	 $LN25@PyBytes_Fr@3
$LN3@PyBytes_Fr@3:

; 345  :             case '%':
; 346  :                 *s++ = '%';

  00421	c6 06 25	 mov	 BYTE PTR [rsi], 37	; 00000025H

; 351  :                 goto end;
; 352  :             }
; 353  :         } else

  00424	e9 4e fe ff ff	 jmp	 $LN97@PyBytes_Fr@3
$LN2@PyBytes_Fr@3:

; 347  :                 break;
; 348  :             default:
; 349  :                 strcpy(s, p);

  00429	48 8b d6	 mov	 rdx, rsi
  0042c	48 2b d7	 sub	 rdx, rdi
  0042f	90		 npad	 1
$LL71@PyBytes_Fr@3:
  00430	0f b6 07	 movzx	 eax, BYTE PTR [rdi]
  00433	48 ff c7	 inc	 rdi
  00436	88 44 3a ff	 mov	 BYTE PTR [rdx+rdi-1], al
  0043a	84 c0		 test	 al, al
  0043c	75 f2		 jne	 SHORT $LL71@PyBytes_Fr@3

; 350  :                 s += strlen(s);

  0043e	48 83 c9 ff	 or	 rcx, -1
  00442	33 c0		 xor	 eax, eax
  00444	48 8b fe	 mov	 rdi, rsi
  00447	f2 ae		 repne scasb
  00449	48 f7 d1	 not	 rcx
  0044c	48 ff c9	 dec	 rcx
  0044f	48 03 f1	 add	 rsi, rcx
$end$20667:

; 355  :     }
; 356  : 
; 357  :  end:
; 358  :     _PyBytes_Resize(&string, s - PyBytes_AS_STRING(string));

  00452	49 2b f4	 sub	 rsi, r12
  00455	48 8d 4c 24 40	 lea	 rcx, QWORD PTR string$[rsp]
  0045a	48 8d 56 88	 lea	 rdx, QWORD PTR [rsi-120]
  0045e	e8 00 00 00 00	 call	 _PyBytes_Resize

; 359  :     return string;

  00463	48 8b 44 24 40	 mov	 rax, QWORD PTR string$[rsp]
  00468	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
$LN94@PyBytes_Fr@3:
  0046d	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]

; 360  : }

  00472	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00477	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0047b	41 5d		 pop	 r13
  0047d	5f		 pop	 rdi
  0047e	5d		 pop	 rbp
  0047f	c3		 ret	 0
$LN90@PyBytes_Fr@3:
  00480	00 00 00 00	 DD	 $LN65@PyBytes_Fr@3
  00484	00 00 00 00	 DD	 $LN57@PyBytes_Fr@3
  00488	00 00 00 00	 DD	 $LN53@PyBytes_Fr@3
  0048c	00 00 00 00	 DD	 $LN51@PyBytes_Fr@3
  00490	00 00 00 00	 DD	 $LN52@PyBytes_Fr@3
  00494	00 00 00 00	 DD	 $LN50@PyBytes_Fr@3
$LN89@PyBytes_Fr@3:
  00498	00		 DB	 0
  00499	05		 DB	 5
  0049a	05		 DB	 5
  0049b	05		 DB	 5
  0049c	05		 DB	 5
  0049d	05		 DB	 5
  0049e	05		 DB	 5
  0049f	05		 DB	 5
  004a0	05		 DB	 5
  004a1	05		 DB	 5
  004a2	05		 DB	 5
  004a3	05		 DB	 5
  004a4	05		 DB	 5
  004a5	05		 DB	 5
  004a6	05		 DB	 5
  004a7	05		 DB	 5
  004a8	05		 DB	 5
  004a9	05		 DB	 5
  004aa	05		 DB	 5
  004ab	05		 DB	 5
  004ac	05		 DB	 5
  004ad	05		 DB	 5
  004ae	05		 DB	 5
  004af	05		 DB	 5
  004b0	05		 DB	 5
  004b1	05		 DB	 5
  004b2	05		 DB	 5
  004b3	05		 DB	 5
  004b4	05		 DB	 5
  004b5	05		 DB	 5
  004b6	05		 DB	 5
  004b7	05		 DB	 5
  004b8	05		 DB	 5
  004b9	05		 DB	 5
  004ba	05		 DB	 5
  004bb	05		 DB	 5
  004bc	05		 DB	 5
  004bd	05		 DB	 5
  004be	05		 DB	 5
  004bf	05		 DB	 5
  004c0	05		 DB	 5
  004c1	05		 DB	 5
  004c2	05		 DB	 5
  004c3	05		 DB	 5
  004c4	05		 DB	 5
  004c5	05		 DB	 5
  004c6	05		 DB	 5
  004c7	05		 DB	 5
  004c8	05		 DB	 5
  004c9	05		 DB	 5
  004ca	05		 DB	 5
  004cb	05		 DB	 5
  004cc	05		 DB	 5
  004cd	05		 DB	 5
  004ce	05		 DB	 5
  004cf	05		 DB	 5
  004d0	05		 DB	 5
  004d1	05		 DB	 5
  004d2	05		 DB	 5
  004d3	05		 DB	 5
  004d4	05		 DB	 5
  004d5	05		 DB	 5
  004d6	01		 DB	 1
  004d7	02		 DB	 2
  004d8	05		 DB	 5
  004d9	05		 DB	 5
  004da	05		 DB	 5
  004db	05		 DB	 5
  004dc	02		 DB	 2
  004dd	05		 DB	 5
  004de	05		 DB	 5
  004df	05		 DB	 5
  004e0	05		 DB	 5
  004e1	05		 DB	 5
  004e2	05		 DB	 5
  004e3	03		 DB	 3
  004e4	05		 DB	 5
  004e5	05		 DB	 5
  004e6	04		 DB	 4
  004e7	05		 DB	 5
  004e8	02		 DB	 2
  004e9	05		 DB	 5
  004ea	05		 DB	 5
  004eb	02		 DB	 2
$LN88@PyBytes_Fr@3:
  004ec	00 00 00 00	 DD	 $LN3@PyBytes_Fr@3
  004f0	00 00 00 00	 DD	 $LN30@PyBytes_Fr@3
  004f4	00 00 00 00	 DD	 $LN29@PyBytes_Fr@3
  004f8	00 00 00 00	 DD	 $LN19@PyBytes_Fr@3
  004fc	00 00 00 00	 DD	 $LN7@PyBytes_Fr@3
  00500	00 00 00 00	 DD	 $LN17@PyBytes_Fr@3
  00504	00 00 00 00	 DD	 $LN24@PyBytes_Fr@3
  00508	00 00 00 00	 DD	 $LN18@PyBytes_Fr@3
  0050c	00 00 00 00	 DD	 $LN2@PyBytes_Fr@3
$LN87@PyBytes_Fr@3:
  00510	00		 DB	 0
  00511	08		 DB	 8
  00512	08		 DB	 8
  00513	08		 DB	 8
  00514	08		 DB	 8
  00515	08		 DB	 8
  00516	08		 DB	 8
  00517	08		 DB	 8
  00518	08		 DB	 8
  00519	08		 DB	 8
  0051a	08		 DB	 8
  0051b	08		 DB	 8
  0051c	08		 DB	 8
  0051d	08		 DB	 8
  0051e	08		 DB	 8
  0051f	08		 DB	 8
  00520	08		 DB	 8
  00521	08		 DB	 8
  00522	08		 DB	 8
  00523	08		 DB	 8
  00524	08		 DB	 8
  00525	08		 DB	 8
  00526	08		 DB	 8
  00527	08		 DB	 8
  00528	08		 DB	 8
  00529	08		 DB	 8
  0052a	08		 DB	 8
  0052b	08		 DB	 8
  0052c	08		 DB	 8
  0052d	08		 DB	 8
  0052e	08		 DB	 8
  0052f	08		 DB	 8
  00530	08		 DB	 8
  00531	08		 DB	 8
  00532	08		 DB	 8
  00533	08		 DB	 8
  00534	08		 DB	 8
  00535	08		 DB	 8
  00536	08		 DB	 8
  00537	08		 DB	 8
  00538	08		 DB	 8
  00539	08		 DB	 8
  0053a	08		 DB	 8
  0053b	08		 DB	 8
  0053c	08		 DB	 8
  0053d	08		 DB	 8
  0053e	08		 DB	 8
  0053f	08		 DB	 8
  00540	08		 DB	 8
  00541	08		 DB	 8
  00542	08		 DB	 8
  00543	08		 DB	 8
  00544	08		 DB	 8
  00545	08		 DB	 8
  00546	08		 DB	 8
  00547	08		 DB	 8
  00548	08		 DB	 8
  00549	08		 DB	 8
  0054a	08		 DB	 8
  0054b	08		 DB	 8
  0054c	08		 DB	 8
  0054d	08		 DB	 8
  0054e	01		 DB	 1
  0054f	02		 DB	 2
  00550	08		 DB	 8
  00551	08		 DB	 8
  00552	08		 DB	 8
  00553	08		 DB	 8
  00554	03		 DB	 3
  00555	08		 DB	 8
  00556	08		 DB	 8
  00557	08		 DB	 8
  00558	08		 DB	 8
  00559	08		 DB	 8
  0055a	08		 DB	 8
  0055b	04		 DB	 4
  0055c	08		 DB	 8
  0055d	08		 DB	 8
  0055e	05		 DB	 5
  0055f	08		 DB	 8
  00560	06		 DB	 6
  00561	08		 DB	 8
  00562	08		 DB	 8
  00563	07		 DB	 7
PyBytes_FromFormatV ENDP
_TEXT	ENDS
PUBLIC	PyBytes_FromFormat
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyBytes_FromFormat DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$PyBytes_FromFormat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyBytes_FromFormat DD 011801H
	DD	04218H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyBytes_FromFormat
_TEXT	SEGMENT
format$ = 48
PyBytes_FromFormat PROC					; COMDAT

; 364  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 365  :     PyObject* ret;
; 366  :     va_list vargs;
; 367  : 
; 368  : #ifdef HAVE_STDARG_PROTOTYPES
; 369  :     va_start(vargs, format);

  00018	48 8d 54 24 38	 lea	 rdx, QWORD PTR format$[rsp+8]

; 370  : #else
; 371  :     va_start(vargs);
; 372  : #endif
; 373  :     ret = PyBytes_FromFormatV(format, vargs);

  0001d	e8 00 00 00 00	 call	 PyBytes_FromFormatV

; 374  :     va_end(vargs);
; 375  :     return ret;
; 376  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
PyBytes_FromFormat ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@FNHLBDLO@Trailing?5?2?5in?5string?$AA@ ; `string'
PUBLIC	??_C@_0CB@MDFFHBMF@invalid?5?2x?5escape?5at?5position?5?$CFd@ ; `string'
PUBLIC	??_C@_0DE@GCJJKEKA@decoding?5error?$DL?5unknown?5error?5ha@ ; `string'
PUBLIC	??_C@_06GDPEBLPA@ignore?$AA@			; `string'
PUBLIC	??_C@_06OLFOGHEN@strict?$AA@			; `string'
PUBLIC	PyBytes_DecodeEscape
EXTRN	PyUnicode_AsEncodedString:PROC
EXTRN	PyUnicode_DecodeUTF8:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyBytes_DecodeEscape DD imagerel $LN80
	DD	imagerel $LN80+91
	DD	imagerel $unwind$PyBytes_DecodeEscape
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyBytes_DecodeEscape DD imagerel $LN80+91
	DD	imagerel $LN80+953
	DD	imagerel $chain$2$PyBytes_DecodeEscape
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyBytes_DecodeEscape DD imagerel $LN80+953
	DD	imagerel $LN80+1235
	DD	imagerel $chain$4$PyBytes_DecodeEscape
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyBytes_DecodeEscape DD 060021H
	DD	011d400H
	DD	0106400H
	DD	0e5400H
	DD	imagerel $LN80
	DD	imagerel $LN80+91
	DD	imagerel $unwind$PyBytes_DecodeEscape
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyBytes_DecodeEscape DD 061821H
	DD	011d418H
	DD	0106410H
	DD	0e5405H
	DD	imagerel $LN80
	DD	imagerel $LN80+91
	DD	imagerel $unwind$PyBytes_DecodeEscape
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyBytes_DecodeEscape DD 061101H
	DD	0f00d7211H
	DD	0c009e00bH
	DD	030067007H
xdata	ENDS
;	COMDAT ??_C@_0BF@FNHLBDLO@Trailing?5?2?5in?5string?$AA@
CONST	SEGMENT
??_C@_0BF@FNHLBDLO@Trailing?5?2?5in?5string?$AA@ DB 'Trailing \ in string'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MDFFHBMF@invalid?5?2x?5escape?5at?5position?5?$CFd@
CONST	SEGMENT
??_C@_0CB@MDFFHBMF@invalid?5?2x?5escape?5at?5position?5?$CFd@ DB 'invalid'
	DB	' \x escape at position %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@GCJJKEKA@decoding?5error?$DL?5unknown?5error?5ha@
CONST	SEGMENT
??_C@_0DE@GCJJKEKA@decoding?5error?$DL?5unknown?5error?5ha@ DB 'decoding '
	DB	'error; unknown error handling code: %.400s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDPEBLPA@ignore?$AA@
CONST	SEGMENT
??_C@_06GDPEBLPA@ignore?$AA@ DB 'ignore', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OLFOGHEN@strict?$AA@
CONST	SEGMENT
??_C@_06OLFOGHEN@strict?$AA@ DB 'strict', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyBytes_DecodeEscape
_TEXT	SEGMENT
buf$1$ = 32
newlen$1$ = 40
v$ = 48
s$ = 112
len$ = 120
errors$ = 128
unicode$ = 136
recode_encoding$ = 144
PyBytes_DecodeEscape PROC				; COMDAT

; 394  : {

$LN80:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	53		 push	 rbx
  00006	57		 push	 rdi
  00007	41 54		 push	 r12
  00009	41 56		 push	 r14
  0000b	41 57		 push	 r15
  0000d	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 395  :     int c;
; 396  :     char *p, *buf;
; 397  :     const char *end;
; 398  :     PyObject *v;
; 399  :     Py_ssize_t newlen = recode_encoding ? 4*len:len;

  00011	4c 8b a4 24 90
	00 00 00	 mov	 r12, QWORD PTR recode_encoding$[rsp]
  00019	4d 8b f8	 mov	 r15, r8
  0001c	48 8b fa	 mov	 rdi, rdx
  0001f	48 8b d9	 mov	 rbx, rcx
  00022	48 8d 04 95 00
	00 00 00	 lea	 rax, QWORD PTR [rdx*4]
  0002a	4d 85 e4	 test	 r12, r12
  0002d	75 03		 jne	 SHORT $LN79@PyBytes_De
  0002f	48 8b c2	 mov	 rax, rdx
$LN79@PyBytes_De:

; 400  :     v = PyBytes_FromStringAndSize((char *)NULL, newlen);

  00032	48 8b d0	 mov	 rdx, rax
  00035	33 c9		 xor	 ecx, ecx
  00037	48 89 44 24 28	 mov	 QWORD PTR newlen$1$[rsp], rax
  0003c	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00041	4c 8b f0	 mov	 r14, rax
  00044	48 89 44 24 30	 mov	 QWORD PTR v$[rsp], rax

; 401  :     if (v == NULL)

  00049	48 85 c0	 test	 rax, rax
  0004c	75 0d		 jne	 SHORT $LN54@PyBytes_De

; 524  : }

  0004e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00052	41 5f		 pop	 r15
  00054	41 5e		 pop	 r14
  00056	41 5c		 pop	 r12
  00058	5f		 pop	 rdi
  00059	5b		 pop	 rbx
  0005a	c3		 ret	 0
$LN54@PyBytes_De:
  0005b	48 89 6c 24 70	 mov	 QWORD PTR [rsp+112], rbp

; 402  :         return NULL;
; 403  :     p = buf = PyBytes_AsString(v);

  00060	48 8b c8	 mov	 rcx, rax
  00063	48 89 b4 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rsi
  0006b	4c 89 ac 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], r13
  00073	e8 00 00 00 00	 call	 PyBytes_AsString

; 404  :     end = s + len;

  00078	4c 8d 2c 3b	 lea	 r13, QWORD PTR [rbx+rdi]
  0007c	4c 8b c0	 mov	 r8, rax
  0007f	48 89 44 24 20	 mov	 QWORD PTR buf$1$[rsp], rax
  00084	48 8b e8	 mov	 rbp, rax

; 405  :     while (s < end) {

  00087	49 3b dd	 cmp	 rbx, r13
  0008a	0f 83 e8 02 00
	00		 jae	 $LN72@PyBytes_De
  00090	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:__ImageBase
$LL53@PyBytes_De:

; 406  :         if (*s != '\\') {

  00097	80 3b 5c	 cmp	 BYTE PTR [rbx], 92	; 0000005cH
  0009a	0f 85 f5 01 00
	00		 jne	 $non_esc$20709

; 435  :             }
; 436  :             continue;
; 437  :         }
; 438  :         s++;

  000a0	48 ff c3	 inc	 rbx

; 439  :         if (s==end) {

  000a3	49 3b dd	 cmp	 rbx, r13
  000a6	0f 84 5b 03 00
	00		 je	 $LN63@PyBytes_De

; 442  :             goto failed;
; 443  :         }
; 444  :         switch (*s++) {

  000ac	0f be 03	 movsx	 eax, BYTE PTR [rbx]
  000af	48 ff c3	 inc	 rbx
  000b2	83 e8 0a	 sub	 eax, 10
  000b5	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  000b8	0f 87 cd 01 00
	00		 ja	 $LN2@PyBytes_De
  000be	48 98		 cdqe
  000c0	41 0f b6 84 00
	00 00 00 00	 movzx	 eax, BYTE PTR $LN70@PyBytes_De[r8+rax]
  000c9	41 8b 8c 80 00
	00 00 00	 mov	 ecx, DWORD PTR $LN71@PyBytes_De[r8+rax*4]
  000d1	49 03 c8	 add	 rcx, r8
  000d4	ff e1		 jmp	 rcx
$LN32@PyBytes_De:

; 445  :         /* XXX This assumes ASCII! */
; 446  :         case '\n': break;
; 447  :         case '\\': *p++ = '\\'; break;

  000d6	c6 45 00 5c	 mov	 BYTE PTR [rbp], 92	; 0000005cH
  000da	48 ff c5	 inc	 rbp
  000dd	e9 88 02 00 00	 jmp	 $LN37@PyBytes_De
$LN31@PyBytes_De:

; 448  :         case '\'': *p++ = '\''; break;

  000e2	c6 45 00 27	 mov	 BYTE PTR [rbp], 39	; 00000027H
  000e6	48 ff c5	 inc	 rbp
  000e9	e9 7c 02 00 00	 jmp	 $LN37@PyBytes_De
$LN30@PyBytes_De:

; 449  :         case '\"': *p++ = '\"'; break;

  000ee	c6 45 00 22	 mov	 BYTE PTR [rbp], 34	; 00000022H
  000f2	48 ff c5	 inc	 rbp
  000f5	e9 70 02 00 00	 jmp	 $LN37@PyBytes_De
$LN29@PyBytes_De:

; 450  :         case 'b': *p++ = '\b'; break;

  000fa	c6 45 00 08	 mov	 BYTE PTR [rbp], 8
  000fe	48 ff c5	 inc	 rbp
  00101	e9 64 02 00 00	 jmp	 $LN37@PyBytes_De
$LN28@PyBytes_De:

; 451  :         case 'f': *p++ = '\014'; break; /* FF */

  00106	c6 45 00 0c	 mov	 BYTE PTR [rbp], 12
  0010a	48 ff c5	 inc	 rbp
  0010d	e9 58 02 00 00	 jmp	 $LN37@PyBytes_De
$LN27@PyBytes_De:

; 452  :         case 't': *p++ = '\t'; break;

  00112	c6 45 00 09	 mov	 BYTE PTR [rbp], 9
  00116	48 ff c5	 inc	 rbp
  00119	e9 4c 02 00 00	 jmp	 $LN37@PyBytes_De
$LN26@PyBytes_De:

; 453  :         case 'n': *p++ = '\n'; break;

  0011e	c6 45 00 0a	 mov	 BYTE PTR [rbp], 10
  00122	48 ff c5	 inc	 rbp
  00125	e9 40 02 00 00	 jmp	 $LN37@PyBytes_De
$LN25@PyBytes_De:

; 454  :         case 'r': *p++ = '\r'; break;

  0012a	c6 45 00 0d	 mov	 BYTE PTR [rbp], 13
  0012e	48 ff c5	 inc	 rbp
  00131	e9 34 02 00 00	 jmp	 $LN37@PyBytes_De
$LN24@PyBytes_De:

; 455  :         case 'v': *p++ = '\013'; break; /* VT */

  00136	c6 45 00 0b	 mov	 BYTE PTR [rbp], 11
  0013a	48 ff c5	 inc	 rbp
  0013d	e9 28 02 00 00	 jmp	 $LN37@PyBytes_De
$LN23@PyBytes_De:

; 456  :         case 'a': *p++ = '\007'; break; /* BEL, not classic C */

  00142	c6 45 00 07	 mov	 BYTE PTR [rbp], 7
  00146	48 ff c5	 inc	 rbp
  00149	e9 1c 02 00 00	 jmp	 $LN37@PyBytes_De
$LN22@PyBytes_De:

; 457  :         case '0': case '1': case '2': case '3':
; 458  :         case '4': case '5': case '6': case '7':
; 459  :             c = s[-1] - '0';

  0014e	0f be 4b ff	 movsx	 ecx, BYTE PTR [rbx-1]
  00152	83 e9 30	 sub	 ecx, 48			; 00000030H

; 460  :             if (s < end && '0' <= *s && *s <= '7') {

  00155	49 3b dd	 cmp	 rbx, r13
  00158	73 2f		 jae	 SHORT $LN20@PyBytes_De
  0015a	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  0015d	3c 30		 cmp	 al, 48			; 00000030H
  0015f	7c 28		 jl	 SHORT $LN20@PyBytes_De
  00161	3c 37		 cmp	 al, 55			; 00000037H
  00163	7f 24		 jg	 SHORT $LN20@PyBytes_De

; 461  :                 c = (c<<3) + *s++ - '0';

  00165	0f be c0	 movsx	 eax, al
  00168	48 ff c3	 inc	 rbx
  0016b	8d 4c c8 d0	 lea	 ecx, DWORD PTR [rax+rcx*8-48]

; 462  :                 if (s < end && '0' <= *s && *s <= '7')

  0016f	49 3b dd	 cmp	 rbx, r13
  00172	73 15		 jae	 SHORT $LN20@PyBytes_De
  00174	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  00177	3c 30		 cmp	 al, 48			; 00000030H
  00179	7c 0e		 jl	 SHORT $LN20@PyBytes_De
  0017b	3c 37		 cmp	 al, 55			; 00000037H
  0017d	7f 0a		 jg	 SHORT $LN20@PyBytes_De

; 463  :                     c = (c<<3) + *s++ - '0';

  0017f	0f be c0	 movsx	 eax, al
  00182	48 ff c3	 inc	 rbx
  00185	8d 4c c8 d0	 lea	 ecx, DWORD PTR [rax+rcx*8-48]
$LN20@PyBytes_De:

; 464  :             }
; 465  :             *p++ = c;

  00189	88 4d 00	 mov	 BYTE PTR [rbp], cl
  0018c	48 ff c5	 inc	 rbp

; 466  :             break;

  0018f	e9 d6 01 00 00	 jmp	 $LN37@PyBytes_De
$LN19@PyBytes_De:

; 467  :         case 'x':
; 468  :             if (s+1 < end && Py_ISXDIGIT(s[0]) && Py_ISXDIGIT(s[1])) {

  00194	48 8d 53 01	 lea	 rdx, QWORD PTR [rbx+1]
  00198	49 3b d5	 cmp	 rdx, r13
  0019b	73 78		 jae	 SHORT $LN18@PyBytes_De
  0019d	0f b6 0b	 movzx	 ecx, BYTE PTR [rbx]
  001a0	41 f6 84 88 00
	00 00 00 10	 test	 BYTE PTR _Py_ctype_table[r8+rcx*4], 16
  001a9	74 6a		 je	 SHORT $LN18@PyBytes_De
  001ab	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  001ae	41 f6 84 80 00
	00 00 00 10	 test	 BYTE PTR _Py_ctype_table[r8+rax*4], 16
  001b7	74 5c		 je	 SHORT $LN18@PyBytes_De

; 469  :                 unsigned int x = 0;
; 470  :                 c = Py_CHARMASK(*s);
; 471  :                 s++;

  001b9	48 8b da	 mov	 rbx, rdx

; 472  :                 if (Py_ISDIGIT(c))

  001bc	41 8b 94 88 00
	00 00 00	 mov	 edx, DWORD PTR _Py_ctype_table[r8+rcx*4]
  001c4	f6 c2 04	 test	 dl, 4
  001c7	74 05		 je	 SHORT $LN17@PyBytes_De

; 473  :                     x = c - '0';

  001c9	83 c1 d0	 add	 ecx, -48		; ffffffd0H
  001cc	eb 0d		 jmp	 SHORT $LN14@PyBytes_De
$LN17@PyBytes_De:

; 474  :                 else if (Py_ISLOWER(c))

  001ce	f6 c2 01	 test	 dl, 1
  001d1	74 05		 je	 SHORT $LN15@PyBytes_De

; 475  :                     x = 10 + c - 'a';

  001d3	83 c1 a9	 add	 ecx, -87		; ffffffa9H

; 476  :                 else

  001d6	eb 03		 jmp	 SHORT $LN14@PyBytes_De
$LN15@PyBytes_De:

; 477  :                     x = 10 + c - 'A';

  001d8	83 c1 c9	 add	 ecx, -55		; ffffffc9H
$LN14@PyBytes_De:

; 478  :                 x = x << 4;
; 479  :                 c = Py_CHARMASK(*s);

  001db	0f b6 13	 movzx	 edx, BYTE PTR [rbx]
  001de	03 c9		 add	 ecx, ecx

; 480  :                 s++;

  001e0	48 ff c3	 inc	 rbx

; 481  :                 if (Py_ISDIGIT(c))

  001e3	41 8b 84 90 00
	00 00 00	 mov	 eax, DWORD PTR _Py_ctype_table[r8+rdx*4]
  001eb	a8 04		 test	 al, 4
  001ed	74 0f		 je	 SHORT $LN13@PyBytes_De

; 482  :                     x += c - '0';

  001ef	8d 44 ca d0	 lea	 eax, DWORD PTR [rdx+rcx*8-48]

; 487  :                 *p++ = x;

  001f3	48 ff c5	 inc	 rbp
  001f6	88 45 ff	 mov	 BYTE PTR [rbp-1], al

; 488  :                 break;

  001f9	e9 6c 01 00 00	 jmp	 $LN37@PyBytes_De
$LN13@PyBytes_De:

; 483  :                 else if (Py_ISLOWER(c))

  001fe	a8 01		 test	 al, 1

; 484  :                     x += 10 + c - 'a';

  00200	8d 44 ca a9	 lea	 eax, DWORD PTR [rdx+rcx*8-87]
  00204	75 04		 jne	 SHORT $LN10@PyBytes_De

; 485  :                 else
; 486  :                     x += 10 + c - 'A';

  00206	8d 44 ca c9	 lea	 eax, DWORD PTR [rdx+rcx*8-55]
$LN10@PyBytes_De:

; 487  :                 *p++ = x;

  0020a	88 45 00	 mov	 BYTE PTR [rbp], al
  0020d	48 ff c5	 inc	 rbp

; 488  :                 break;

  00210	e9 55 01 00 00	 jmp	 $LN37@PyBytes_De
$LN18@PyBytes_De:

; 489  :             }
; 490  :             if (!errors || strcmp(errors, "strict") == 0) {

  00215	4d 85 ff	 test	 r15, r15
  00218	0f 84 bd 01 00
	00		 je	 $LN8@PyBytes_De
  0021e	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_06OLFOGHEN@strict?$AA@
  00225	49 8b f7	 mov	 rsi, r15
  00228	b9 07 00 00 00	 mov	 ecx, 7
  0022d	f3 a6		 repe cmpsb
  0022f	0f 84 a6 01 00
	00		 je	 $LN8@PyBytes_De

; 494  :                 goto failed;
; 495  :             }
; 496  :             if (strcmp(errors, "replace") == 0) {

  00235	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_07CLEHDIEJ@replace?$AA@
  0023c	49 8b f7	 mov	 rsi, r15
  0023f	b9 08 00 00 00	 mov	 ecx, 8
  00244	f3 a6		 repe cmpsb
  00246	75 09		 jne	 SHORT $LN7@PyBytes_De

; 497  :                 *p++ = '?';

  00248	c6 45 00 3f	 mov	 BYTE PTR [rbp], 63	; 0000003fH
  0024c	48 ff c5	 inc	 rbp
  0024f	eb 17		 jmp	 SHORT $LN4@PyBytes_De
$LN7@PyBytes_De:

; 498  :             } else if (strcmp(errors, "ignore") == 0)

  00251	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_06GDPEBLPA@ignore?$AA@
  00258	49 8b f7	 mov	 rsi, r15
  0025b	b9 07 00 00 00	 mov	 ecx, 7
  00260	f3 a6		 repe cmpsb
  00262	0f 85 51 01 00
	00		 jne	 $LN5@PyBytes_De
$LN4@PyBytes_De:

; 505  :                 goto failed;
; 506  :             }
; 507  :             /* skip \x */
; 508  :             if (s < end && Py_ISXDIGIT(s[0]))

  00268	49 3b dd	 cmp	 rbx, r13
  0026b	0f 83 02 01 00
	00		 jae	 $LN75@PyBytes_De
  00271	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  00274	41 f6 84 80 00
	00 00 00 10	 test	 BYTE PTR _Py_ctype_table[r8+rax*4], 16
  0027d	0f 84 e7 00 00
	00		 je	 $LN37@PyBytes_De

; 509  :                 s++; /* and a hexdigit */

  00283	48 8b da	 mov	 rbx, rdx

; 514  :             goto non_esc; /* an arbitrary number of unescaped
; 515  :                              UTF-8 bytes may follow. */
; 516  :         }
; 517  :     }

  00286	e9 df 00 00 00	 jmp	 $LN37@PyBytes_De
$LN2@PyBytes_De:

; 510  :             break;
; 511  :         default:
; 512  :             *p++ = '\\';

  0028b	c6 45 00 5c	 mov	 BYTE PTR [rbp], 92	; 0000005cH
  0028f	48 ff c5	 inc	 rbp

; 513  :             s--;

  00292	48 ff cb	 dec	 rbx
$non_esc$20709:

; 407  :           non_esc:
; 408  :             if (recode_encoding && (*s & 0x80)) {

  00295	4d 85 e4	 test	 r12, r12
  00298	0f 84 c0 00 00
	00		 je	 $LN50@PyBytes_De
  0029e	f6 03 80	 test	 BYTE PTR [rbx], 128	; 00000080H
  002a1	0f 84 b7 00 00
	00		 je	 $LN50@PyBytes_De

; 409  :                 PyObject *u, *w;
; 410  :                 char *r;
; 411  :                 const char* t;
; 412  :                 Py_ssize_t rn;
; 413  :                 t = s;

  002a7	48 8b fb	 mov	 rdi, rbx

; 414  :                 /* Decode non-ASCII bytes as UTF-8. */
; 415  :                 while (t < end && (*t & 0x80)) t++;

  002aa	49 3b dd	 cmp	 rbx, r13
  002ad	73 0e		 jae	 SHORT $LN73@PyBytes_De
  002af	90		 npad	 1
$LL49@PyBytes_De:
  002b0	f6 07 80	 test	 BYTE PTR [rdi], 128	; 00000080H
  002b3	74 08		 je	 SHORT $LN73@PyBytes_De
  002b5	48 ff c7	 inc	 rdi
  002b8	49 3b fd	 cmp	 rdi, r13
  002bb	72 f3		 jb	 SHORT $LL49@PyBytes_De
$LN73@PyBytes_De:

; 416  :                 u = PyUnicode_DecodeUTF8(s, t - s, errors);

  002bd	48 8b d7	 mov	 rdx, rdi
  002c0	4d 8b c7	 mov	 r8, r15
  002c3	48 8b cb	 mov	 rcx, rbx
  002c6	48 2b d3	 sub	 rdx, rbx
  002c9	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF8
  002ce	48 8b f0	 mov	 rsi, rax

; 417  :                 if(!u) goto failed;

  002d1	48 85 c0	 test	 rax, rax
  002d4	0f 84 40 01 00
	00		 je	 $failed$20720

; 418  : 
; 419  :                 /* Recode them in target encoding. */
; 420  :                 w = PyUnicode_AsEncodedString(
; 421  :                     u, recode_encoding, errors);

  002da	4d 8b c7	 mov	 r8, r15
  002dd	49 8b d4	 mov	 rdx, r12
  002e0	48 8b c8	 mov	 rcx, rax
  002e3	e8 00 00 00 00	 call	 PyUnicode_AsEncodedString

; 422  :                 Py_DECREF(u);

  002e8	48 8b ce	 mov	 rcx, rsi
  002eb	4c 8b e0	 mov	 r12, rax
  002ee	e8 00 00 00 00	 call	 _Py_DecRef

; 423  :                 if (!w)                 goto failed;

  002f3	4d 85 e4	 test	 r12, r12
  002f6	0f 84 1e 01 00
	00		 je	 $failed$20720

; 424  : 
; 425  :                 /* Append bytes to output buffer. */
; 426  :                 assert(PyBytes_Check(w));
; 427  :                 r = PyBytes_AS_STRING(w);
; 428  :                 rn = PyBytes_GET_SIZE(w);

  002fc	49 8b 5c 24 60	 mov	 rbx, QWORD PTR [r12+96]
  00301	49 8d 74 24 78	 lea	 rsi, QWORD PTR [r12+120]

; 429  :                 Py_MEMCPY(p, r, rn);

  00306	48 83 fb 10	 cmp	 rbx, 16
  0030a	72 10		 jb	 SHORT $LN42@PyBytes_De
  0030c	4c 8b c3	 mov	 r8, rbx
  0030f	48 8b d6	 mov	 rdx, rsi
  00312	48 8b cd	 mov	 rcx, rbp
  00315	e8 00 00 00 00	 call	 memcpy
  0031a	eb 23		 jmp	 SHORT $LN44@PyBytes_De
$LN42@PyBytes_De:
  0031c	48 85 db	 test	 rbx, rbx
  0031f	74 1e		 je	 SHORT $LN44@PyBytes_De
  00321	48 8b cd	 mov	 rcx, rbp
  00324	48 2b f5	 sub	 rsi, rbp
  00327	48 8b d3	 mov	 rdx, rbx
  0032a	66 0f 1f 44 00
	00		 npad	 6
$LL40@PyBytes_De:
  00330	0f b6 04 0e	 movzx	 eax, BYTE PTR [rsi+rcx]
  00334	48 ff c1	 inc	 rcx
  00337	48 ff ca	 dec	 rdx
  0033a	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  0033d	75 f1		 jne	 SHORT $LL40@PyBytes_De
$LN44@PyBytes_De:

; 430  :                 p += rn;
; 431  :                 Py_DECREF(w);

  0033f	49 8b cc	 mov	 rcx, r12
  00342	48 03 eb	 add	 rbp, rbx
  00345	e8 00 00 00 00	 call	 _Py_DecRef

; 432  :                 s = t;
; 433  :             } else {

  0034a	4c 8b a4 24 90
	00 00 00	 mov	 r12, QWORD PTR recode_encoding$[rsp]
  00352	48 8b df	 mov	 rbx, rdi
  00355	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:__ImageBase
  0035c	eb 0c		 jmp	 SHORT $LN37@PyBytes_De
$LN50@PyBytes_De:

; 434  :                 *p++ = *s++;

  0035e	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  00361	48 ff c5	 inc	 rbp
  00364	48 ff c3	 inc	 rbx
  00367	88 45 ff	 mov	 BYTE PTR [rbp-1], al
$LN37@PyBytes_De:

; 405  :     while (s < end) {

  0036a	49 3b dd	 cmp	 rbx, r13
  0036d	0f 82 24 fd ff
	ff		 jb	 $LL53@PyBytes_De
$LN75@PyBytes_De:

; 402  :         return NULL;
; 403  :     p = buf = PyBytes_AsString(v);

  00373	4c 8b 44 24 20	 mov	 r8, QWORD PTR buf$1$[rsp]
$LN72@PyBytes_De:

; 518  :     if (p-buf < newlen)

  00378	49 2b e8	 sub	 rbp, r8
  0037b	48 3b 6c 24 28	 cmp	 rbp, QWORD PTR newlen$1$[rsp]
  00380	7d 12		 jge	 SHORT $LN1@PyBytes_De

; 519  :         _PyBytes_Resize(&v, p - buf);

  00382	48 8d 4c 24 30	 lea	 rcx, QWORD PTR v$[rsp]
  00387	48 8b d5	 mov	 rdx, rbp
  0038a	e8 00 00 00 00	 call	 _PyBytes_Resize
  0038f	4c 8b 74 24 30	 mov	 r14, QWORD PTR v$[rsp]
$LN1@PyBytes_De:

; 520  :     return v;

  00394	49 8b c6	 mov	 rax, r14
$LN78@PyBytes_De:
  00397	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR [rsp+128]
  0039f	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  003a4	4c 8b ac 24 88
	00 00 00	 mov	 r13, QWORD PTR [rsp+136]

; 524  : }

  003ac	48 83 c4 40	 add	 rsp, 64			; 00000040H
  003b0	41 5f		 pop	 r15
  003b2	41 5e		 pop	 r14
  003b4	41 5c		 pop	 r12
  003b6	5f		 pop	 rdi
  003b7	5b		 pop	 rbx
  003b8	c3		 ret	 0
$LN5@PyBytes_De:

; 499  :                 /* do nothing */;
; 500  :             else {
; 501  :                 PyErr_Format(PyExc_ValueError,
; 502  :                              "decoding error; unknown "
; 503  :                              "error handling code: %.400s",
; 504  :                              errors);

  003b9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  003c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@GCJJKEKA@decoding?5error?$DL?5unknown?5error?5ha@
  003c7	4d 8b c7	 mov	 r8, r15
  003ca	e8 00 00 00 00	 call	 PyErr_Format

; 521  :   failed:
; 522  :     Py_DECREF(v);

  003cf	49 8b ce	 mov	 rcx, r14
  003d2	e8 00 00 00 00	 call	 _Py_DecRef

; 523  :     return NULL;

  003d7	33 c0		 xor	 eax, eax
  003d9	eb bc		 jmp	 SHORT $LN78@PyBytes_De
$LN8@PyBytes_De:

; 491  :                 PyErr_Format(PyExc_ValueError,
; 492  :                              "invalid \\x escape at position %d",
; 493  :                              s - 2 - (end - len));

  003db	48 8b 44 24 78	 mov	 rax, QWORD PTR len$[rsp]
  003e0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  003e7	49 2b dd	 sub	 rbx, r13
  003ea	4c 8d 44 03 fe	 lea	 r8, QWORD PTR [rbx+rax-2]
  003ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@MDFFHBMF@invalid?5?2x?5escape?5at?5position?5?$CFd@
  003f6	e8 00 00 00 00	 call	 PyErr_Format

; 521  :   failed:
; 522  :     Py_DECREF(v);

  003fb	49 8b ce	 mov	 rcx, r14
  003fe	e8 00 00 00 00	 call	 _Py_DecRef

; 523  :     return NULL;

  00403	33 c0		 xor	 eax, eax
  00405	eb 90		 jmp	 SHORT $LN78@PyBytes_De
$LN63@PyBytes_De:

; 440  :             PyErr_SetString(PyExc_ValueError,
; 441  :                             "Trailing \\ in string");

  00407	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0040e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@FNHLBDLO@Trailing?5?2?5in?5string?$AA@
  00415	e8 00 00 00 00	 call	 PyErr_SetString
$failed$20720:

; 521  :   failed:
; 522  :     Py_DECREF(v);

  0041a	49 8b ce	 mov	 rcx, r14
  0041d	e8 00 00 00 00	 call	 _Py_DecRef

; 523  :     return NULL;

  00422	33 c0		 xor	 eax, eax
  00424	e9 6e ff ff ff	 jmp	 $LN78@PyBytes_De
  00429	0f 1f 00	 npad	 3
$LN71@PyBytes_De:

; 524  : }

  0042c	00 00 00 00	 DD	 $LN37@PyBytes_De
  00430	00 00 00 00	 DD	 $LN30@PyBytes_De
  00434	00 00 00 00	 DD	 $LN31@PyBytes_De
  00438	00 00 00 00	 DD	 $LN22@PyBytes_De
  0043c	00 00 00 00	 DD	 $LN32@PyBytes_De
  00440	00 00 00 00	 DD	 $LN23@PyBytes_De
  00444	00 00 00 00	 DD	 $LN29@PyBytes_De
  00448	00 00 00 00	 DD	 $LN28@PyBytes_De
  0044c	00 00 00 00	 DD	 $LN26@PyBytes_De
  00450	00 00 00 00	 DD	 $LN25@PyBytes_De
  00454	00 00 00 00	 DD	 $LN27@PyBytes_De
  00458	00 00 00 00	 DD	 $LN24@PyBytes_De
  0045c	00 00 00 00	 DD	 $LN19@PyBytes_De
  00460	00 00 00 00	 DD	 $LN2@PyBytes_De
$LN70@PyBytes_De:
  00464	00		 DB	 0
  00465	0d		 DB	 13
  00466	0d		 DB	 13
  00467	0d		 DB	 13
  00468	0d		 DB	 13
  00469	0d		 DB	 13
  0046a	0d		 DB	 13
  0046b	0d		 DB	 13
  0046c	0d		 DB	 13
  0046d	0d		 DB	 13
  0046e	0d		 DB	 13
  0046f	0d		 DB	 13
  00470	0d		 DB	 13
  00471	0d		 DB	 13
  00472	0d		 DB	 13
  00473	0d		 DB	 13
  00474	0d		 DB	 13
  00475	0d		 DB	 13
  00476	0d		 DB	 13
  00477	0d		 DB	 13
  00478	0d		 DB	 13
  00479	0d		 DB	 13
  0047a	0d		 DB	 13
  0047b	0d		 DB	 13
  0047c	01		 DB	 1
  0047d	0d		 DB	 13
  0047e	0d		 DB	 13
  0047f	0d		 DB	 13
  00480	0d		 DB	 13
  00481	02		 DB	 2
  00482	0d		 DB	 13
  00483	0d		 DB	 13
  00484	0d		 DB	 13
  00485	0d		 DB	 13
  00486	0d		 DB	 13
  00487	0d		 DB	 13
  00488	0d		 DB	 13
  00489	0d		 DB	 13
  0048a	03		 DB	 3
  0048b	03		 DB	 3
  0048c	03		 DB	 3
  0048d	03		 DB	 3
  0048e	03		 DB	 3
  0048f	03		 DB	 3
  00490	03		 DB	 3
  00491	03		 DB	 3
  00492	0d		 DB	 13
  00493	0d		 DB	 13
  00494	0d		 DB	 13
  00495	0d		 DB	 13
  00496	0d		 DB	 13
  00497	0d		 DB	 13
  00498	0d		 DB	 13
  00499	0d		 DB	 13
  0049a	0d		 DB	 13
  0049b	0d		 DB	 13
  0049c	0d		 DB	 13
  0049d	0d		 DB	 13
  0049e	0d		 DB	 13
  0049f	0d		 DB	 13
  004a0	0d		 DB	 13
  004a1	0d		 DB	 13
  004a2	0d		 DB	 13
  004a3	0d		 DB	 13
  004a4	0d		 DB	 13
  004a5	0d		 DB	 13
  004a6	0d		 DB	 13
  004a7	0d		 DB	 13
  004a8	0d		 DB	 13
  004a9	0d		 DB	 13
  004aa	0d		 DB	 13
  004ab	0d		 DB	 13
  004ac	0d		 DB	 13
  004ad	0d		 DB	 13
  004ae	0d		 DB	 13
  004af	0d		 DB	 13
  004b0	0d		 DB	 13
  004b1	0d		 DB	 13
  004b2	0d		 DB	 13
  004b3	0d		 DB	 13
  004b4	0d		 DB	 13
  004b5	0d		 DB	 13
  004b6	04		 DB	 4
  004b7	0d		 DB	 13
  004b8	0d		 DB	 13
  004b9	0d		 DB	 13
  004ba	0d		 DB	 13
  004bb	05		 DB	 5
  004bc	06		 DB	 6
  004bd	0d		 DB	 13
  004be	0d		 DB	 13
  004bf	0d		 DB	 13
  004c0	07		 DB	 7
  004c1	0d		 DB	 13
  004c2	0d		 DB	 13
  004c3	0d		 DB	 13
  004c4	0d		 DB	 13
  004c5	0d		 DB	 13
  004c6	0d		 DB	 13
  004c7	0d		 DB	 13
  004c8	08		 DB	 8
  004c9	0d		 DB	 13
  004ca	0d		 DB	 13
  004cb	0d		 DB	 13
  004cc	09		 DB	 9
  004cd	0d		 DB	 13
  004ce	0a		 DB	 10
  004cf	0d		 DB	 13
  004d0	0b		 DB	 11
  004d1	0d		 DB	 13
  004d2	0c		 DB	 12
PyBytes_DecodeEscape ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@HBGAJPNJ@translation?5table?5must?5be?5256?5ch@ ; `string'
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$bytes_translate DD imagerel bytes_translate
	DD	imagerel bytes_translate+338
	DD	imagerel $unwind$bytes_translate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$bytes_translate DD imagerel bytes_translate+338
	DD	imagerel bytes_translate+859
	DD	imagerel $chain$1$bytes_translate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$bytes_translate DD 041021H
	DD	08ac410H
	DD	08b6408H
	DD	imagerel bytes_translate
	DD	imagerel bytes_translate+338
	DD	imagerel $unwind$bytes_translate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_translate DD 051301H
	DD	08c0113H
	DD	030037004H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0CO@HBGAJPNJ@translation?5table?5must?5be?5256?5ch@
CONST	SEGMENT
??_C@_0CO@HBGAJPNJ@translation?5table?5must?5be?5256?5ch@ DB 'translation'
	DB	' table must be 256 characters long', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
CONST	ENDS
;	COMDAT bytes_translate
_TEXT	SEGMENT
tablen$ = 48
result$ = 56
delobj$ = 64
tableobj$ = 72
trans_table$ = 80
table$ = 1152
self$ = 1152
args$ = 1160
dellen$ = 1168
del_table$ = 1176
bytes_translate PROC					; COMDAT

; 1561 : {

  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	57		 push	 rdi
  00004	48 8d ac 24 a0
	fc ff ff	 lea	 rbp, QWORD PTR [rsp-864]
  0000c	48 81 ec 60 04
	00 00		 sub	 rsp, 1120		; 00000460H

; 1562 :     register char *input, *output;
; 1563 :     const char *table;
; 1564 :     register Py_ssize_t i, c, changed = 0;

  00013	33 db		 xor	 ebx, ebx
  00015	48 8b f9	 mov	 rdi, rcx
  00018	48 8b c2	 mov	 rax, rdx

; 1565 :     PyObject *input_obj = (PyObject*)self;
; 1566 :     const char *output_start, *del_table=NULL;
; 1567 :     Py_ssize_t inlen, tablen, dellen = 0;
; 1568 :     PyObject *result;
; 1569 :     int trans_table[256];
; 1570 :     PyObject *tableobj, *delobj = NULL;
; 1571 : 
; 1572 :     if (!PyArg_UnpackTuple(args, "translate", 1, 2,
; 1573 :                           &tableobj, &delobj))

  0001b	48 8d 4c 24 40	 lea	 rcx, QWORD PTR delobj$[rsp]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09ODNGOEIO@translate?$AA@
  00027	44 8d 4b 02	 lea	 r9d, QWORD PTR [rbx+2]
  0002b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00030	48 8d 4c 24 48	 lea	 rcx, QWORD PTR tableobj$[rsp]
  00035	44 8d 43 01	 lea	 r8d, QWORD PTR [rbx+1]
  00039	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0003e	48 8b c8	 mov	 rcx, rax
  00041	48 89 9d 98 03
	00 00		 mov	 QWORD PTR del_table$[rbp-256], rbx
  00048	48 89 9d 90 03
	00 00		 mov	 QWORD PTR dellen$[rbp-256], rbx
  0004f	48 89 5c 24 40	 mov	 QWORD PTR delobj$[rsp], rbx
  00054	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00059	85 c0		 test	 eax, eax

; 1574 :         return NULL;

  0005b	0f 84 b2 00 00
	00		 je	 $LN67@bytes_tran

; 1575 : 
; 1576 :     if (PyBytes_Check(tableobj)) {

  00061	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tableobj$[rsp]
  00066	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0006a	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  00074	74 16		 je	 SHORT $LN35@bytes_tran

; 1577 :         table = PyBytes_AS_STRING(tableobj);

  00076	48 8d 41 78	 lea	 rax, QWORD PTR [rcx+120]
  0007a	48 89 85 80 03
	00 00		 mov	 QWORD PTR table$[rbp-256], rax

; 1578 :         tablen = PyBytes_GET_SIZE(tableobj);

  00081	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00085	48 89 44 24 30	 mov	 QWORD PTR tablen$[rsp], rax
  0008a	eb 6c		 jmp	 SHORT $LN31@bytes_tran
$LN35@bytes_tran:

; 1579 :     }
; 1580 :     else if (tableobj == Py_None) {

  0008c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00093	48 3b c8	 cmp	 rcx, rax
  00096	75 46		 jne	 SHORT $LN33@bytes_tran

; 1581 :         table = NULL;

  00098	48 89 9d 80 03
	00 00		 mov	 QWORD PTR table$[rbp-256], rbx

; 1582 :         tablen = 256;

  0009f	48 c7 44 24 30
	00 01 00 00	 mov	 QWORD PTR tablen$[rsp], 256 ; 00000100H
$LN30@bytes_tran:

; 1591 :     }
; 1592 : 
; 1593 :     if (delobj != NULL) {

  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR delobj$[rsp]
  000ad	48 85 c9	 test	 rcx, rcx
  000b0	0f 84 8e 00 00
	00		 je	 $LN29@bytes_tran

; 1594 :         if (PyBytes_Check(delobj)) {

  000b6	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  000ba	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  000c4	74 5a		 je	 SHORT $LN28@bytes_tran

; 1595 :             del_table = PyBytes_AS_STRING(delobj);

  000c6	48 8d 41 78	 lea	 rax, QWORD PTR [rcx+120]
  000ca	48 89 85 98 03
	00 00		 mov	 QWORD PTR del_table$[rbp-256], rax

; 1596 :             dellen = PyBytes_GET_SIZE(delobj);

  000d1	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  000d5	48 89 85 90 03
	00 00		 mov	 QWORD PTR dellen$[rbp-256], rax
  000dc	eb 74		 jmp	 SHORT $LN25@bytes_tran
$LN33@bytes_tran:

; 1583 :     }
; 1584 :     else if (PyObject_AsCharBuffer(tableobj, &table, &tablen))

  000de	4c 8d 44 24 30	 lea	 r8, QWORD PTR tablen$[rsp]
  000e3	48 8d 95 80 03
	00 00		 lea	 rdx, QWORD PTR table$[rbp-256]
  000ea	e8 00 00 00 00	 call	 PyObject_AsCharBuffer
  000ef	85 c0		 test	 eax, eax

; 1585 :         return NULL;

  000f1	75 20		 jne	 SHORT $LN67@bytes_tran
  000f3	48 8b 44 24 30	 mov	 rax, QWORD PTR tablen$[rsp]
$LN31@bytes_tran:

; 1586 : 
; 1587 :     if (tablen != 256) {

  000f8	48 3d 00 01 00
	00		 cmp	 rax, 256		; 00000100H
  000fe	74 a8		 je	 SHORT $LN30@bytes_tran

; 1588 :         PyErr_SetString(PyExc_ValueError,
; 1589 :           "translation table must be 256 characters long");

  00100	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00107	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@HBGAJPNJ@translation?5table?5must?5be?5256?5ch@
  0010e	e8 00 00 00 00	 call	 PyErr_SetString
$LN67@bytes_tran:

; 1590 :         return NULL;

  00113	33 c0		 xor	 eax, eax

; 1654 : }

  00115	48 81 c4 60 04
	00 00		 add	 rsp, 1120		; 00000460H
  0011c	5f		 pop	 rdi
  0011d	5b		 pop	 rbx
  0011e	5d		 pop	 rbp
  0011f	c3		 ret	 0
$LN28@bytes_tran:

; 1597 :         }
; 1598 :         else if (PyObject_AsCharBuffer(delobj, &del_table, &dellen))

  00120	4c 8d 85 90 03
	00 00		 lea	 r8, QWORD PTR dellen$[rbp-256]
  00127	48 8d 95 98 03
	00 00		 lea	 rdx, QWORD PTR del_table$[rbp-256]
  0012e	e8 00 00 00 00	 call	 PyObject_AsCharBuffer
  00133	85 c0		 test	 eax, eax
  00135	74 1b		 je	 SHORT $LN25@bytes_tran

; 1599 :             return NULL;

  00137	33 c0		 xor	 eax, eax

; 1654 : }

  00139	48 81 c4 60 04
	00 00		 add	 rsp, 1120		; 00000460H
  00140	5f		 pop	 rdi
  00141	5b		 pop	 rbx
  00142	5d		 pop	 rbp
  00143	c3		 ret	 0
$LN29@bytes_tran:

; 1600 :     }
; 1601 :     else {
; 1602 :         del_table = NULL;

  00144	48 89 9d 98 03
	00 00		 mov	 QWORD PTR del_table$[rbp-256], rbx

; 1603 :         dellen = 0;

  0014b	48 89 9d 90 03
	00 00		 mov	 QWORD PTR dellen$[rbp-256], rbx
$LN25@bytes_tran:

; 1604 :     }
; 1605 : 
; 1606 :     inlen = PyBytes_GET_SIZE(input_obj);

  00152	48 89 b4 24 58
	04 00 00	 mov	 QWORD PTR [rsp+1112], rsi
  0015a	4c 89 a4 24 50
	04 00 00	 mov	 QWORD PTR [rsp+1104], r12
  00162	4c 8b 67 60	 mov	 r12, QWORD PTR [rdi+96]

; 1607 :     result = PyBytes_FromStringAndSize((char *)NULL, inlen);

  00166	49 8b d4	 mov	 rdx, r12
  00169	33 c9		 xor	 ecx, ecx
  0016b	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00170	48 8b f0	 mov	 rsi, rax
  00173	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 1608 :     if (result == NULL)

  00178	48 85 c0	 test	 rax, rax
  0017b	0f 84 bf 01 00
	00		 je	 $LN66@bytes_tran
$LN24@bytes_tran:

; 1609 :         return NULL;
; 1610 :     output_start = output = PyBytes_AsString(result);

  00181	48 8b c8	 mov	 rcx, rax
  00184	e8 00 00 00 00	 call	 PyBytes_AsString

; 1611 :     input = PyBytes_AS_STRING(input_obj);
; 1612 : 
; 1613 :     if (dellen == 0 && table != NULL) {

  00189	4c 8b 85 90 03
	00 00		 mov	 r8, QWORD PTR dellen$[rbp-256]
  00190	4c 8d 4f 78	 lea	 r9, QWORD PTR [rdi+120]
  00194	4c 8b d8	 mov	 r11, rax
  00197	4c 8b d0	 mov	 r10, rax
  0019a	4d 85 c0	 test	 r8, r8
  0019d	75 7b		 jne	 SHORT $LN23@bytes_tran
  0019f	48 8b 85 80 03
	00 00		 mov	 rax, QWORD PTR table$[rbp-256]
  001a6	48 85 c0	 test	 rax, rax
  001a9	74 7b		 je	 SHORT $LN53@bytes_tran

; 1614 :         /* If no deletions are required, use faster code */
; 1615 :         for (i = inlen; --i >= 0; ) {

  001ab	4d 8d 44 24 ff	 lea	 r8, QWORD PTR [r12-1]
  001b0	4d 85 c0	 test	 r8, r8
  001b3	78 3c		 js	 SHORT $LN54@bytes_tran
  001b5	4d 2b ca	 sub	 r9, r10
  001b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL22@bytes_tran:

; 1616 :             c = Py_CHARMASK(*input++);

  001c0	43 0f b6 14 19	 movzx	 edx, BYTE PTR [r9+r11]

; 1617 :             if (Py_CHARMASK((*output++ = table[c])) != c)

  001c5	49 ff c3	 inc	 r11
  001c8	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  001cc	41 88 43 ff	 mov	 BYTE PTR [r11-1], al
  001d0	48 3b c2	 cmp	 rax, rdx
  001d3	74 05		 je	 SHORT $LN20@bytes_tran

; 1618 :                 changed = 1;

  001d5	bb 01 00 00 00	 mov	 ebx, 1
$LN20@bytes_tran:

; 1614 :         /* If no deletions are required, use faster code */
; 1615 :         for (i = inlen; --i >= 0; ) {

  001da	49 ff c8	 dec	 r8
  001dd	78 09		 js	 SHORT $LN64@bytes_tran
  001df	48 8b 85 80 03
	00 00		 mov	 rax, QWORD PTR table$[rbp-256]
  001e6	eb d8		 jmp	 SHORT $LL22@bytes_tran
$LN64@bytes_tran:

; 1619 :         }
; 1620 :         if (changed || !PyBytes_CheckExact(input_obj))

  001e8	48 85 db	 test	 rbx, rbx
  001eb	0f 85 4c 01 00
	00		 jne	 $LN1@bytes_tran
$LN54@bytes_tran:
  001f1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  001f8	48 39 47 58	 cmp	 QWORD PTR [rdi+88], rax
  001fc	0f 85 3b 01 00
	00		 jne	 $LN1@bytes_tran

; 1621 :             return result;
; 1622 :         Py_DECREF(result);

  00202	48 8b ce	 mov	 rcx, rsi
  00205	e8 00 00 00 00	 call	 _Py_DecRef

; 1623 :         Py_INCREF(input_obj);

  0020a	48 8b cf	 mov	 rcx, rdi
  0020d	e8 00 00 00 00	 call	 _Py_IncRef

; 1624 :         return input_obj;

  00212	48 8b c7	 mov	 rax, rdi
  00215	e9 26 01 00 00	 jmp	 $LN66@bytes_tran
$LN23@bytes_tran:

; 1625 :     }
; 1626 : 
; 1627 :     if (table == NULL) {

  0021a	48 8b 95 80 03
	00 00		 mov	 rdx, QWORD PTR table$[rbp-256]
  00221	48 85 d2	 test	 rdx, rdx
  00224	75 1f		 jne	 SHORT $LN17@bytes_tran
$LN53@bytes_tran:

; 1628 :         for (i = 0; i < 256; i++)

  00226	48 8b cb	 mov	 rcx, rbx
  00229	0f 1f 80 00 00
	00 00		 npad	 7
$LL16@bytes_tran:

; 1629 :             trans_table[i] = Py_CHARMASK(i);

  00230	0f b6 c1	 movzx	 eax, cl
  00233	48 ff c1	 inc	 rcx
  00236	89 44 8c 4c	 mov	 DWORD PTR trans_table$[rsp+rcx*4-4], eax
  0023a	48 81 f9 00 01
	00 00		 cmp	 rcx, 256		; 00000100H
  00241	7c ed		 jl	 SHORT $LL16@bytes_tran

; 1630 :     } else {

  00243	eb 1f		 jmp	 SHORT $LN10@bytes_tran
$LN17@bytes_tran:

; 1631 :         for (i = 0; i < 256; i++)

  00245	48 8b cb	 mov	 rcx, rbx
  00248	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL12@bytes_tran:

; 1632 :             trans_table[i] = Py_CHARMASK(table[i]);

  00250	0f b6 04 11	 movzx	 eax, BYTE PTR [rcx+rdx]
  00254	48 ff c1	 inc	 rcx
  00257	89 44 8c 4c	 mov	 DWORD PTR trans_table$[rsp+rcx*4-4], eax
  0025b	48 81 f9 00 01
	00 00		 cmp	 rcx, 256		; 00000100H
  00262	7c ec		 jl	 SHORT $LL12@bytes_tran
$LN10@bytes_tran:

; 1633 :     }
; 1634 : 
; 1635 :     for (i = 0; i < dellen; i++)

  00264	48 8b cb	 mov	 rcx, rbx
  00267	4d 85 c0	 test	 r8, r8
  0026a	7e 28		 jle	 SHORT $LN7@bytes_tran
  0026c	48 8b 95 98 03
	00 00		 mov	 rdx, QWORD PTR del_table$[rbp-256]
  00273	66 66 66 66 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL9@bytes_tran:

; 1636 :         trans_table[(int) Py_CHARMASK(del_table[i])] = -1;

  00280	0f b6 04 11	 movzx	 eax, BYTE PTR [rcx+rdx]
  00284	48 ff c1	 inc	 rcx
  00287	c7 44 84 50 ff
	ff ff ff	 mov	 DWORD PTR trans_table$[rsp+rax*4], -1
  0028f	49 3b c8	 cmp	 rcx, r8
  00292	7c ec		 jl	 SHORT $LL9@bytes_tran
$LN7@bytes_tran:

; 1637 : 
; 1638 :     for (i = inlen; --i >= 0; ) {

  00294	49 8d 54 24 ff	 lea	 rdx, QWORD PTR [r12-1]
  00299	48 85 d2	 test	 rdx, rdx
  0029c	78 30		 js	 SHORT $LN55@bytes_tran
  0029e	66 90		 npad	 2
$LL6@bytes_tran:

; 1639 :         c = Py_CHARMASK(*input++);

  002a0	41 0f b6 09	 movzx	 ecx, BYTE PTR [r9]
  002a4	49 ff c1	 inc	 r9

; 1640 :         if (trans_table[c] != -1)

  002a7	83 7c 8c 50 ff	 cmp	 DWORD PTR trans_table$[rsp+rcx*4], -1
  002ac	74 11		 je	 SHORT $LN3@bytes_tran

; 1641 :             if (Py_CHARMASK(*output++ = (char)trans_table[c]) == c)

  002ae	0f b6 44 8c 50	 movzx	 eax, BYTE PTR trans_table$[rsp+rcx*4]
  002b3	49 ff c3	 inc	 r11
  002b6	41 88 43 ff	 mov	 BYTE PTR [r11-1], al
  002ba	48 3b c1	 cmp	 rax, rcx
  002bd	74 05		 je	 SHORT $LN52@bytes_tran
$LN3@bytes_tran:

; 1642 :                 continue;
; 1643 :         changed = 1;

  002bf	bb 01 00 00 00	 mov	 ebx, 1
$LN52@bytes_tran:

; 1637 : 
; 1638 :     for (i = inlen; --i >= 0; ) {

  002c4	48 ff ca	 dec	 rdx
  002c7	79 d7		 jns	 SHORT $LL6@bytes_tran

; 1644 :     }
; 1645 :     if (!changed && PyBytes_CheckExact(input_obj)) {

  002c9	48 85 db	 test	 rbx, rbx
  002cc	75 55		 jne	 SHORT $LN2@bytes_tran
$LN55@bytes_tran:
  002ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  002d5	48 39 47 58	 cmp	 QWORD PTR [rdi+88], rax
  002d9	75 48		 jne	 SHORT $LN2@bytes_tran

; 1646 :         Py_DECREF(result);

  002db	48 8b ce	 mov	 rcx, rsi
  002de	e8 00 00 00 00	 call	 _Py_DecRef

; 1647 :         Py_INCREF(input_obj);

  002e3	e8 00 00 00 00	 call	 _Py_PXCTX
  002e8	85 c0		 test	 eax, eax
  002ea	75 32		 jne	 SHORT $LN40@bytes_tran
  002ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  002fa	4c 8b cf	 mov	 r9, rdi
  002fd	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00303	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0030b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00310	85 c0		 test	 eax, eax
  00312	75 06		 jne	 SHORT $LN39@bytes_tran
  00314	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00318	74 04		 je	 SHORT $LN40@bytes_tran
$LN39@bytes_tran:
  0031a	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN40@bytes_tran:

; 1648 :         return input_obj;

  0031e	48 8b c7	 mov	 rax, rdi
  00321	eb 1d		 jmp	 SHORT $LN66@bytes_tran
$LN2@bytes_tran:

; 1649 :     }
; 1650 :     /* Fix the size of the resulting string */
; 1651 :     if (inlen > 0)

  00323	4d 85 e4	 test	 r12, r12
  00326	7e 15		 jle	 SHORT $LN1@bytes_tran

; 1652 :         _PyBytes_Resize(&result, output - output_start);

  00328	4d 2b da	 sub	 r11, r10
  0032b	48 8d 4c 24 38	 lea	 rcx, QWORD PTR result$[rsp]
  00330	49 8b d3	 mov	 rdx, r11
  00333	e8 00 00 00 00	 call	 _PyBytes_Resize
  00338	48 8b 74 24 38	 mov	 rsi, QWORD PTR result$[rsp]
$LN1@bytes_tran:

; 1653 :     return result;

  0033d	48 8b c6	 mov	 rax, rsi
$LN66@bytes_tran:
  00340	48 8b b4 24 58
	04 00 00	 mov	 rsi, QWORD PTR [rsp+1112]
  00348	4c 8b a4 24 50
	04 00 00	 mov	 r12, QWORD PTR [rsp+1104]

; 1654 : }

  00350	48 81 c4 60 04
	00 00		 add	 rsp, 1120		; 00000460H
  00357	5f		 pop	 rdi
  00358	5b		 pop	 rbx
  00359	5d		 pop	 rbp
  0035a	c3		 ret	 0
bytes_translate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DO@GIPAEFDP@non?9hexadecimal?5number?5found?5in?5@ ; `string'
PUBLIC	??_C@_09FKEMNDFN@U?3fromhex?$AA@		; `string'
EXTRN	_PyUnicode_Ready:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$bytes_fromhex DD imagerel bytes_fromhex
	DD	imagerel bytes_fromhex+564
	DD	imagerel $unwind$bytes_fromhex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_fromhex DD 0b5d01H
	DD	06c45dH
	DD	077453H
	DD	08644eH
	DD	0b5449H
	DD	0a3444H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0DO@GIPAEFDP@non?9hexadecimal?5number?5found?5in?5@
CONST	SEGMENT
??_C@_0DO@GIPAEFDP@non?9hexadecimal?5number?5found?5in?5@ DB 'non-hexadec'
	DB	'imal number found in fromhex() arg at position %zd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FKEMNDFN@U?3fromhex?$AA@
CONST	SEGMENT
??_C@_09FKEMNDFN@U?3fromhex?$AA@ DB 'U:fromhex', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
CONST	ENDS
;	COMDAT bytes_fromhex
_TEXT	SEGMENT
cls$ = 80
args$ = 88
newstring$ = 96
hexobj$ = 104
bytes_fromhex PROC					; COMDAT

; 2397 : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2398 :     PyObject *newstring, *hexobj;
; 2399 :     char *buf;
; 2400 :     Py_ssize_t hexlen, byteslen, i, j;
; 2401 :     int top, bot;
; 2402 :     void *data;
; 2403 :     unsigned int kind;
; 2404 : 
; 2405 :     if (!PyArg_ParseTuple(args, "U:fromhex", &hexobj))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 68	 lea	 r8, QWORD PTR hexobj$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09FKEMNDFN@U?3fromhex?$AA@
  00013	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN16@bytes_from
$LN60@bytes_from:

; 2406 :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 2442 : }

  0001e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00022	c3		 ret	 0
$LN16@bytes_from:

; 2407 :     assert(PyUnicode_Check(hexobj));
; 2408 :     if (PyUnicode_READY(hexobj))

  00023	48 8b 4c 24 68	 mov	 rcx, QWORD PTR hexobj$[rsp]
  00028	f6 41 70 80	 test	 BYTE PTR [rcx+112], 128	; 00000080H
  0002c	75 0e		 jne	 SHORT $LN15@bytes_from
  0002e	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00033	85 c0		 test	 eax, eax

; 2409 :         return NULL;

  00035	75 e5		 jne	 SHORT $LN60@bytes_from
  00037	48 8b 4c 24 68	 mov	 rcx, QWORD PTR hexobj$[rsp]
$LN15@bytes_from:

; 2410 :     kind = PyUnicode_KIND(hexobj);

  0003c	8b 41 70	 mov	 eax, DWORD PTR [rcx+112]
  0003f	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00044	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp
  00049	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0004e	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00053	8b f8		 mov	 edi, eax
  00055	c1 ef 02	 shr	 edi, 2
  00058	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  0005d	83 e7 07	 and	 edi, 7

; 2411 :     data = PyUnicode_DATA(hexobj);

  00060	a8 20		 test	 al, 32			; 00000020H
  00062	74 16		 je	 SHORT $LN23@bytes_from
  00064	a8 40		 test	 al, 64			; 00000040H
  00066	74 09		 je	 SHORT $LN21@bytes_from
  00068	48 8d 99 80 00
	00 00		 lea	 rbx, QWORD PTR [rcx+128]
  0006f	eb 10		 jmp	 SHORT $LN24@bytes_from
$LN21@bytes_from:
  00071	48 8d 99 a0 00
	00 00		 lea	 rbx, QWORD PTR [rcx+160]
  00078	eb 07		 jmp	 SHORT $LN24@bytes_from
$LN23@bytes_from:
  0007a	48 8b 99 a0 00
	00 00		 mov	 rbx, QWORD PTR [rcx+160]
$LN24@bytes_from:

; 2412 :     hexlen = PyUnicode_GET_LENGTH(hexobj);

  00081	48 8b 69 60	 mov	 rbp, QWORD PTR [rcx+96]

; 2413 : 
; 2414 :     byteslen = hexlen/2; /* This overestimates if there are spaces */
; 2415 :     newstring = PyBytes_FromStringAndSize(NULL, byteslen);

  00085	33 c9		 xor	 ecx, ecx
  00087	48 8b c5	 mov	 rax, rbp
  0008a	48 99		 cdq
  0008c	48 2b c2	 sub	 rax, rdx
  0008f	48 d1 f8	 sar	 rax, 1
  00092	48 8b d0	 mov	 rdx, rax
  00095	4c 8b e0	 mov	 r12, rax
  00098	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0009d	48 8b f0	 mov	 rsi, rax
  000a0	48 89 44 24 60	 mov	 QWORD PTR newstring$[rsp], rax

; 2416 :     if (!newstring)

  000a5	48 85 c0	 test	 rax, rax

; 2417 :         return NULL;

  000a8	0f 84 61 01 00
	00		 je	 $LN3@bytes_from

; 2418 :     buf = PyBytes_AS_STRING(newstring);
; 2419 :     for (i = j = 0; i < hexlen; i += 2) {

  000ae	45 33 db	 xor	 r11d, r11d
  000b1	45 8b cb	 mov	 r9d, r11d
  000b4	48 85 ed	 test	 rbp, rbp
  000b7	0f 8e a5 00 00
	00		 jle	 $LN11@bytes_from
  000bd	0f 1f 00	 npad	 3
$LL10@bytes_from:

; 2420 :         /* skip over spaces in the input */
; 2421 :         while (PyUnicode_READ(kind, data, i) == ' ')

  000c0	83 ff 01	 cmp	 edi, 1
  000c3	75 07		 jne	 SHORT $LN27@bytes_from
  000c5	41 0f b6 04 19	 movzx	 eax, BYTE PTR [r9+rbx]
  000ca	eb 10		 jmp	 SHORT $LN26@bytes_from
$LN27@bytes_from:
  000cc	83 ff 02	 cmp	 edi, 2
  000cf	75 07		 jne	 SHORT $LN25@bytes_from
  000d1	42 0f b7 04 4b	 movzx	 eax, WORD PTR [rbx+r9*2]
  000d6	eb 04		 jmp	 SHORT $LN26@bytes_from
$LN25@bytes_from:

; 2418 :     buf = PyBytes_AS_STRING(newstring);
; 2419 :     for (i = j = 0; i < hexlen; i += 2) {

  000d8	42 8b 04 8b	 mov	 eax, DWORD PTR [rbx+r9*4]
$LN26@bytes_from:

; 2420 :         /* skip over spaces in the input */
; 2421 :         while (PyUnicode_READ(kind, data, i) == ' ')

  000dc	83 f8 20	 cmp	 eax, 32			; 00000020H
  000df	75 05		 jne	 SHORT $LN9@bytes_from

; 2422 :             i++;

  000e1	49 ff c1	 inc	 r9
  000e4	eb da		 jmp	 SHORT $LL10@bytes_from
$LN9@bytes_from:

; 2423 :         if (i >= hexlen)

  000e6	4c 3b cd	 cmp	 r9, rbp
  000e9	7d 77		 jge	 SHORT $LN11@bytes_from

; 2424 :             break;
; 2425 :         top = hex_digit_to_int(PyUnicode_READ(kind, data, i));

  000eb	83 ff 01	 cmp	 edi, 1
  000ee	75 07		 jne	 SHORT $LN31@bytes_from
  000f0	41 0f b6 0c 19	 movzx	 ecx, BYTE PTR [r9+rbx]
  000f5	eb 10		 jmp	 SHORT $LN30@bytes_from
$LN31@bytes_from:
  000f7	83 ff 02	 cmp	 edi, 2
  000fa	75 07		 jne	 SHORT $LN29@bytes_from
  000fc	42 0f b7 0c 4b	 movzx	 ecx, WORD PTR [rbx+r9*2]
  00101	eb 04		 jmp	 SHORT $LN30@bytes_from
$LN29@bytes_from:

; 2418 :     buf = PyBytes_AS_STRING(newstring);
; 2419 :     for (i = j = 0; i < hexlen; i += 2) {

  00103	42 8b 0c 8b	 mov	 ecx, DWORD PTR [rbx+r9*4]
$LN30@bytes_from:

; 2424 :             break;
; 2425 :         top = hex_digit_to_int(PyUnicode_READ(kind, data, i));

  00107	e8 00 00 00 00	 call	 hex_digit_to_int
  0010c	44 8b d0	 mov	 r10d, eax

; 2426 :         bot = hex_digit_to_int(PyUnicode_READ(kind, data, i+1));

  0010f	83 ff 01	 cmp	 edi, 1
  00112	75 08		 jne	 SHORT $LN35@bytes_from
  00114	41 0f b6 4c 19
	01		 movzx	 ecx, BYTE PTR [r9+rbx+1]
  0011a	eb 12		 jmp	 SHORT $LN34@bytes_from
$LN35@bytes_from:
  0011c	83 ff 02	 cmp	 edi, 2
  0011f	75 08		 jne	 SHORT $LN33@bytes_from
  00121	42 0f b7 4c 4b
	02		 movzx	 ecx, WORD PTR [rbx+r9*2+2]
  00127	eb 05		 jmp	 SHORT $LN34@bytes_from
$LN33@bytes_from:

; 2418 :     buf = PyBytes_AS_STRING(newstring);
; 2419 :     for (i = j = 0; i < hexlen; i += 2) {

  00129	42 8b 4c 8b 04	 mov	 ecx, DWORD PTR [rbx+r9*4+4]
$LN34@bytes_from:

; 2426 :         bot = hex_digit_to_int(PyUnicode_READ(kind, data, i+1));

  0012e	e8 00 00 00 00	 call	 hex_digit_to_int

; 2427 :         if (top == -1 || bot == -1) {

  00133	41 83 fa ff	 cmp	 r10d, -1
  00137	0f 84 a4 00 00
	00		 je	 $LN51@bytes_from
  0013d	83 f8 ff	 cmp	 eax, -1
  00140	0f 84 9b 00 00
	00		 je	 $LN51@bytes_from

; 2432 :         }
; 2433 :         buf[j++] = (top << 4) + bot;

  00146	41 c0 e2 04	 shl	 r10b, 4
  0014a	49 83 c1 02	 add	 r9, 2
  0014e	49 ff c3	 inc	 r11
  00151	44 02 d0	 add	 r10b, al
  00154	45 88 54 33 77	 mov	 BYTE PTR [r11+rsi+119], r10b
  00159	4c 3b cd	 cmp	 r9, rbp
  0015c	0f 8c 5e ff ff
	ff		 jl	 $LL10@bytes_from
$LN11@bytes_from:

; 2434 :     }
; 2435 :     if (j != byteslen && _PyBytes_Resize(&newstring, j) < 0)

  00162	4d 3b dc	 cmp	 r11, r12
  00165	0f 84 a8 00 00
	00		 je	 $LN5@bytes_from
  0016b	48 8d 4c 24 60	 lea	 rcx, QWORD PTR newstring$[rsp]
  00170	49 8b d3	 mov	 rdx, r11
  00173	e8 00 00 00 00	 call	 _PyBytes_Resize
  00178	48 8b 74 24 60	 mov	 rsi, QWORD PTR newstring$[rsp]
  0017d	85 c0		 test	 eax, eax
  0017f	0f 89 8e 00 00
	00		 jns	 $LN5@bytes_from
$error$23849:

; 2438 : 
; 2439 :   error:
; 2440 :     Py_XDECREF(newstring);

  00185	48 85 f6	 test	 rsi, rsi
  00188	0f 84 81 00 00
	00		 je	 $LN3@bytes_from
  0018e	e8 00 00 00 00	 call	 _Py_PXCTX
  00193	85 c0		 test	 eax, eax
  00195	75 78		 jne	 SHORT $LN3@bytes_from
  00197	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0019b	a8 20		 test	 al, 32			; 00000020H
  0019d	75 68		 jne	 SHORT $LN41@bytes_from
  0019f	84 c0		 test	 al, al
  001a1	78 64		 js	 SHORT $LN41@bytes_from
  001a3	a8 02		 test	 al, 2
  001a5	75 68		 jne	 SHORT $LN3@bytes_from
  001a7	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  001ab	75 62		 jne	 SHORT $LN3@bytes_from
  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001bb	4c 8b ce	 mov	 r9, rsi
  001be	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001c4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001cc	e8 00 00 00 00	 call	 _PyParallel_Guard
  001d1	48 8b ce	 mov	 rcx, rsi
  001d4	85 c0		 test	 eax, eax
  001d6	74 21		 je	 SHORT $LN46@bytes_from
  001d8	e8 00 00 00 00	 call	 _Px_Dealloc

; 2441 :     return NULL;

  001dd	33 c0		 xor	 eax, eax
  001df	eb 35		 jmp	 SHORT $LN59@bytes_from
$LN51@bytes_from:

; 2428 :             PyErr_Format(PyExc_ValueError,
; 2429 :                          "non-hexadecimal number found in "
; 2430 :                          "fromhex() arg at position %zd", i);

  001e1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DO@GIPAEFDP@non?9hexadecimal?5number?5found?5in?5@
  001ef	4d 8b c1	 mov	 r8, r9
  001f2	e8 00 00 00 00	 call	 PyErr_Format

; 2431 :             goto error;

  001f7	eb 8c		 jmp	 SHORT $error$23849

; 2438 : 
; 2439 :   error:
; 2440 :     Py_XDECREF(newstring);

$LN46@bytes_from:
  001f9	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  001fd	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 2441 :     return NULL;

  00203	33 c0		 xor	 eax, eax
  00205	eb 0f		 jmp	 SHORT $LN59@bytes_from

; 2438 : 
; 2439 :   error:
; 2440 :     Py_XDECREF(newstring);

$LN41@bytes_from:
  00207	48 8b ce	 mov	 rcx, rsi
  0020a	e8 00 00 00 00	 call	 Px_DecRef
$LN3@bytes_from:

; 2441 :     return NULL;

  0020f	33 c0		 xor	 eax, eax
  00211	eb 03		 jmp	 SHORT $LN59@bytes_from
$LN5@bytes_from:

; 2436 :         goto error;
; 2437 :     return newstring;

  00213	48 8b c6	 mov	 rax, rsi
$LN59@bytes_from:
  00216	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  0021b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00220	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00225	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0022a	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]

; 2442 : }

  0022f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00233	c3		 ret	 0
bytes_fromhex ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@MLPHABLA@bytes?5must?5be?5in?5range?$CI0?0?5256?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CH@FMEGCOLJ@cannot?5convert?5unicode?5object?5to@ ; `string'
PUBLIC	PyBytes_FromObject
EXTRN	PyIter_Next:PROC
EXTRN	PyObject_GetIter:PROC
EXTRN	_PyObject_LengthHint:PROC
EXTRN	PyTuple_Type:BYTE
EXTRN	PyList_Type:BYTE
EXTRN	PyBuffer_ToContiguous:PROC
EXTRN	PyObject_GetBuffer:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyBytes_FromObject DD imagerel $LN81
	DD	imagerel $LN81+139
	DD	imagerel $unwind$PyBytes_FromObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyBytes_FromObject DD imagerel $LN81+139
	DD	imagerel $LN81+276
	DD	imagerel $chain$0$PyBytes_FromObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyBytes_FromObject DD imagerel $LN81+276
	DD	imagerel $LN81+306
	DD	imagerel $chain$2$PyBytes_FromObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyBytes_FromObject DD imagerel $LN81+306
	DD	imagerel $LN81+356
	DD	imagerel $chain$4$PyBytes_FromObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$PyBytes_FromObject DD imagerel $LN81+356
	DD	imagerel $LN81+522
	DD	imagerel $chain$7$PyBytes_FromObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$PyBytes_FromObject DD imagerel $LN81+522
	DD	imagerel $LN81+738
	DD	imagerel $chain$8$PyBytes_FromObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$PyBytes_FromObject DD imagerel $LN81+738
	DD	imagerel $LN81+1015
	DD	imagerel $chain$10$PyBytes_FromObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$PyBytes_FromObject DD imagerel $LN81+1015
	DD	imagerel $LN81+1023
	DD	imagerel $chain$11$PyBytes_FromObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$12$PyBytes_FromObject DD imagerel $LN81+1023
	DD	imagerel $LN81+1048
	DD	imagerel $chain$12$PyBytes_FromObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$12$PyBytes_FromObject DD 021H
	DD	imagerel $LN81+356
	DD	imagerel $LN81+522
	DD	imagerel $chain$7$PyBytes_FromObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$PyBytes_FromObject DD 021H
	DD	imagerel $LN81+522
	DD	imagerel $LN81+738
	DD	imagerel $chain$8$PyBytes_FromObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$PyBytes_FromObject DD 041021H
	DD	010d410H
	DD	011c408H
	DD	imagerel $LN81+522
	DD	imagerel $LN81+738
	DD	imagerel $chain$8$PyBytes_FromObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$PyBytes_FromObject DD 020821H
	DD	0165408H
	DD	imagerel $LN81+356
	DD	imagerel $LN81+522
	DD	imagerel $chain$7$PyBytes_FromObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$PyBytes_FromObject DD 040f21H
	DD	017640fH
	DD	0153400H
	DD	imagerel $LN81
	DD	imagerel $LN81+139
	DD	imagerel $unwind$PyBytes_FromObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyBytes_FromObject DD 020021H
	DD	0153400H
	DD	imagerel $LN81
	DD	imagerel $LN81+139
	DD	imagerel $unwind$PyBytes_FromObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyBytes_FromObject DD 020021H
	DD	0153400H
	DD	imagerel $LN81
	DD	imagerel $LN81+139
	DD	imagerel $unwind$PyBytes_FromObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyBytes_FromObject DD 020821H
	DD	0153408H
	DD	imagerel $LN81
	DD	imagerel $LN81+139
	DD	imagerel $unwind$PyBytes_FromObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyBytes_FromObject DD 030901H
	DD	0120109H
	DD	07002H
xdata	ENDS
;	COMDAT ??_C@_0BP@MLPHABLA@bytes?5must?5be?5in?5range?$CI0?0?5256?$CJ?$AA@
CONST	SEGMENT
??_C@_0BP@MLPHABLA@bytes?5must?5be?5in?5range?$CI0?0?5256?$CJ?$AA@ DB 'by'
	DB	'tes must be in range(0, 256)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FMEGCOLJ@cannot?5convert?5unicode?5object?5to@
CONST	SEGMENT
??_C@_0CH@FMEGCOLJ@cannot?5convert?5unicode?5object?5to@ DB 'cannot conve'
	DB	'rt unicode object to bytes', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
CONST	ENDS
;	COMDAT PyBytes_FromObject
_TEXT	SEGMENT
view$24057 = 48
new$ = 160
x$ = 160
PyBytes_FromObject PROC					; COMDAT

; 2623 : {

$LN81:
  00000	40 57		 push	 rdi
  00002	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  00009	48 8b f9	 mov	 rdi, rcx

; 2624 :     PyObject *new, *it;
; 2625 :     Py_ssize_t i, size;
; 2626 : 
; 2627 :     if (x == NULL) {

  0000c	48 85 c9	 test	 rcx, rcx
  0000f	75 1c		 jne	 SHORT $LN44@PyBytes_Fr@4

; 2628 :         PyErr_BadInternalCall();

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@IJCMIAIO@?4?4?2Objects?2bytesobject?4c?$AA@
  00018	ba 44 0a 00 00	 mov	 edx, 2628		; 00000a44H
  0001d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 2629 :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 2767 : }

  00024	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  0002b	5f		 pop	 rdi
  0002c	c3		 ret	 0
$LN44@PyBytes_Fr@4:

; 2630 :     }
; 2631 : 
; 2632 :     if (PyBytes_CheckExact(x)) {

  0002d	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBytes_Type
  00038	48 3b c1	 cmp	 rax, rcx
  0003b	75 47		 jne	 SHORT $LN43@PyBytes_Fr@4

; 2633 :         Py_INCREF(x);

  0003d	e8 00 00 00 00	 call	 _Py_PXCTX
  00042	85 c0		 test	 eax, eax
  00044	75 32		 jne	 SHORT $LN48@PyBytes_Fr@4
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00054	4c 8b cf	 mov	 r9, rdi
  00057	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00065	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006a	85 c0		 test	 eax, eax
  0006c	75 06		 jne	 SHORT $LN47@PyBytes_Fr@4
  0006e	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00072	74 04		 je	 SHORT $LN48@PyBytes_Fr@4
$LN47@PyBytes_Fr@4:
  00074	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN48@PyBytes_Fr@4:

; 2634 :         return x;

  00078	48 8b c7	 mov	 rax, rdi

; 2767 : }

  0007b	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00082	5f		 pop	 rdi
  00083	c3		 ret	 0
$LN43@PyBytes_Fr@4:

; 2635 :     }
; 2636 : 
; 2637 :     /* Use the modern buffer interface */
; 2638 :     if (PyObject_CheckBuffer(x)) {

  00084	48 8b 88 f8 00
	00 00		 mov	 rcx, QWORD PTR [rax+248]
  0008b	48 89 9c 24 a8
	00 00 00	 mov	 QWORD PTR [rsp+168], rbx
  00093	48 85 c9	 test	 rcx, rcx
  00096	0f 84 96 00 00
	00		 je	 $LN42@PyBytes_Fr@4
  0009c	48 83 39 00	 cmp	 QWORD PTR [rcx], 0
  000a0	0f 84 8c 00 00
	00		 je	 $LN42@PyBytes_Fr@4

; 2639 :         Py_buffer view;
; 2640 :         if (PyObject_GetBuffer(x, &view, PyBUF_FULL_RO) < 0)

  000a6	48 8d 54 24 30	 lea	 rdx, QWORD PTR view$24057[rsp]
  000ab	41 b8 1c 01 00
	00		 mov	 r8d, 284		; 0000011cH
  000b1	48 8b cf	 mov	 rcx, rdi
  000b4	e8 00 00 00 00	 call	 PyObject_GetBuffer
  000b9	85 c0		 test	 eax, eax

; 2641 :             return NULL;

  000bb	0f 88 90 00 00
	00		 js	 $LN80@PyBytes_Fr@4

; 2642 :         new = PyBytes_FromStringAndSize(NULL, view.len);

  000c1	48 8b 54 24 40	 mov	 rdx, QWORD PTR view$24057[rsp+16]
  000c6	33 c9		 xor	 ecx, ecx
  000c8	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000cd	48 8b d8	 mov	 rbx, rax

; 2643 :         if (!new)

  000d0	48 85 c0	 test	 rax, rax
  000d3	74 22		 je	 SHORT $LN37@PyBytes_Fr@4

; 2644 :             goto fail;
; 2645 :         if (PyBuffer_ToContiguous(((PyBytesObject *)new)->ob_sval,
; 2646 :                                   &view, view.len, 'C') < 0)

  000d5	4c 8b 44 24 40	 mov	 r8, QWORD PTR view$24057[rsp+16]
  000da	48 8d 48 78	 lea	 rcx, QWORD PTR [rax+120]
  000de	48 8d 54 24 30	 lea	 rdx, QWORD PTR view$24057[rsp]
  000e3	41 b1 43	 mov	 r9b, 67			; 00000043H
  000e6	e8 00 00 00 00	 call	 PyBuffer_ToContiguous
  000eb	85 c0		 test	 eax, eax
  000ed	79 25		 jns	 SHORT $LN39@PyBytes_Fr@4

; 2650 :       fail:
; 2651 :         Py_XDECREF(new);

  000ef	48 8b cb	 mov	 rcx, rbx
$fail$24062:
  000f2	e8 00 00 00 00	 call	 _Py_DecRef
$LN37@PyBytes_Fr@4:

; 2652 :         PyBuffer_Release(&view);

  000f7	48 8d 4c 24 30	 lea	 rcx, QWORD PTR view$24057[rsp]
  000fc	e8 00 00 00 00	 call	 PyBuffer_Release
  00101	48 8b 9c 24 a8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+168]

; 2653 :         return NULL;

  00109	33 c0		 xor	 eax, eax

; 2767 : }

  0010b	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00112	5f		 pop	 rdi
  00113	c3		 ret	 0
$LN39@PyBytes_Fr@4:

; 2647 :             goto fail;
; 2648 :         PyBuffer_Release(&view);

  00114	48 8d 4c 24 30	 lea	 rcx, QWORD PTR view$24057[rsp]
  00119	e8 00 00 00 00	 call	 PyBuffer_Release

; 2649 :         return new;

  0011e	48 8b c3	 mov	 rax, rbx
  00121	48 8b 9c 24 a8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+168]

; 2767 : }

  00129	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00130	5f		 pop	 rdi
  00131	c3		 ret	 0
$LN42@PyBytes_Fr@4:

; 2654 :     }
; 2655 :     if (PyUnicode_Check(x)) {

  00132	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0013c	74 26		 je	 SHORT $LN34@PyBytes_Fr@4

; 2656 :         PyErr_SetString(PyExc_TypeError,
; 2657 :                         "cannot convert unicode object to bytes");

  0013e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00145	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@FMEGCOLJ@cannot?5convert?5unicode?5object?5to@
  0014c	e8 00 00 00 00	 call	 PyErr_SetString
$LN80@PyBytes_Fr@4:

; 2658 :         return NULL;

  00151	33 c0		 xor	 eax, eax
  00153	48 8b 9c 24 a8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+168]

; 2767 : }

  0015b	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00162	5f		 pop	 rdi
  00163	c3		 ret	 0
$LN34@PyBytes_Fr@4:

; 2659 :     }
; 2660 : 
; 2661 :     if (PyList_CheckExact(x)) {

  00164	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyList_Type
  0016b	48 89 b4 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rsi
  00173	48 3b c1	 cmp	 rax, rcx
  00176	0f 85 87 00 00
	00		 jne	 $LN33@PyBytes_Fr@4

; 2662 :         new = PyBytes_FromStringAndSize(NULL, Py_SIZE(x));

  0017c	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  00180	33 c9		 xor	 ecx, ecx
  00182	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00187	48 8b f0	 mov	 rsi, rax

; 2663 :         if (new == NULL)

  0018a	48 85 c0	 test	 rax, rax

; 2664 :             return NULL;

  0018d	74 6d		 je	 SHORT $LN79@PyBytes_Fr@4

; 2665 :         for (i = 0; i < Py_SIZE(x); i++) {

  0018f	33 db		 xor	 ebx, ebx
  00191	48 39 5f 60	 cmp	 QWORD PTR [rdi+96], rbx
  00195	7e 38		 jle	 SHORT $LN29@PyBytes_Fr@4
  00197	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL31@PyBytes_Fr@4:

; 2666 :             Py_ssize_t value = PyNumber_AsSsize_t(
; 2667 :                 PyList_GET_ITEM(x, i), PyExc_ValueError);

  001a0	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  001a4	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  001ab	48 8b 0c d9	 mov	 rcx, QWORD PTR [rcx+rbx*8]
  001af	e8 00 00 00 00	 call	 PyNumber_AsSsize_t

; 2668 :             if (value == -1 && PyErr_Occurred()) {

  001b4	48 83 f8 ff	 cmp	 rax, -1
  001b8	74 1d		 je	 SHORT $LN65@PyBytes_Fr@4

; 2671 :             }
; 2672 :             if (value < 0 || value >= 256) {

  001ba	48 3d ff 00 00
	00		 cmp	 rax, 255		; 000000ffH
  001c0	77 1f		 ja	 SHORT $LN55@PyBytes_Fr@4

; 2677 :             }
; 2678 :             ((PyBytesObject *)new)->ob_sval[i] = (char) value;

  001c2	88 44 33 78	 mov	 BYTE PTR [rbx+rsi+120], al
  001c6	48 ff c3	 inc	 rbx
  001c9	48 3b 5f 60	 cmp	 rbx, QWORD PTR [rdi+96]
  001cd	7c d1		 jl	 SHORT $LL31@PyBytes_Fr@4
$LN29@PyBytes_Fr@4:

; 2679 :         }
; 2680 :         return new;

  001cf	48 8b c6	 mov	 rax, rsi
  001d2	e9 28 02 00 00	 jmp	 $LN72@PyBytes_Fr@4
$LN65@PyBytes_Fr@4:

; 2668 :             if (value == -1 && PyErr_Occurred()) {

  001d7	e8 00 00 00 00	 call	 PyErr_Occurred
  001dc	48 85 c0	 test	 rax, rax

; 2669 :                 Py_DECREF(new);
; 2670 :                 return NULL;

  001df	75 13		 jne	 SHORT $LN78@PyBytes_Fr@4
$LN55@PyBytes_Fr@4:

; 2673 :                 PyErr_SetString(PyExc_ValueError,
; 2674 :                                 "bytes must be in range(0, 256)");

  001e1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@MLPHABLA@bytes?5must?5be?5in?5range?$CI0?0?5256?$CJ?$AA@
  001ef	e8 00 00 00 00	 call	 PyErr_SetString
$LN78@PyBytes_Fr@4:

; 2675 :                 Py_DECREF(new);

  001f4	48 8b ce	 mov	 rcx, rsi
  001f7	e8 00 00 00 00	 call	 _Py_DecRef
$LN79@PyBytes_Fr@4:

; 2676 :                 return NULL;

  001fc	33 c0		 xor	 eax, eax
  001fe	e9 fc 01 00 00	 jmp	 $LN72@PyBytes_Fr@4
$LN33@PyBytes_Fr@4:

; 2681 :     }
; 2682 :     if (PyTuple_CheckExact(x)) {

  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTuple_Type
  0020a	48 89 ac 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rbp
  00212	48 3b c1	 cmp	 rax, rcx
  00215	0f 85 87 00 00
	00		 jne	 $LN25@PyBytes_Fr@4

; 2683 :         new = PyBytes_FromStringAndSize(NULL, Py_SIZE(x));

  0021b	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  0021f	33 c9		 xor	 ecx, ecx
  00221	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00226	48 8b e8	 mov	 rbp, rax

; 2684 :         if (new == NULL)

  00229	48 85 c0	 test	 rax, rax

; 2685 :             return NULL;

  0022c	74 6d		 je	 SHORT $LN76@PyBytes_Fr@4

; 2686 :         for (i = 0; i < Py_SIZE(x); i++) {

  0022e	33 db		 xor	 ebx, ebx
  00230	48 39 5f 60	 cmp	 QWORD PTR [rdi+96], rbx
  00234	7e 38		 jle	 SHORT $LN21@PyBytes_Fr@4
  00236	48 8d 77 70	 lea	 rsi, QWORD PTR [rdi+112]
  0023a	66 0f 1f 44 00
	00		 npad	 6
$LL23@PyBytes_Fr@4:

; 2687 :             Py_ssize_t value = PyNumber_AsSsize_t(
; 2688 :                 PyTuple_GET_ITEM(x, i), PyExc_ValueError);

  00240	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  00247	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0024a	e8 00 00 00 00	 call	 PyNumber_AsSsize_t

; 2689 :             if (value == -1 && PyErr_Occurred()) {

  0024f	48 83 f8 ff	 cmp	 rax, -1
  00253	74 21		 je	 SHORT $LN67@PyBytes_Fr@4

; 2692 :             }
; 2693 :             if (value < 0 || value >= 256) {

  00255	48 3d ff 00 00
	00		 cmp	 rax, 255		; 000000ffH
  0025b	77 23		 ja	 SHORT $LN57@PyBytes_Fr@4

; 2698 :             }
; 2699 :             ((PyBytesObject *)new)->ob_sval[i] = (char) value;

  0025d	88 44 2b 78	 mov	 BYTE PTR [rbx+rbp+120], al
  00261	48 ff c3	 inc	 rbx
  00264	48 83 c6 08	 add	 rsi, 8
  00268	48 3b 5f 60	 cmp	 rbx, QWORD PTR [rdi+96]
  0026c	7c d2		 jl	 SHORT $LL23@PyBytes_Fr@4
$LN21@PyBytes_Fr@4:

; 2700 :         }
; 2701 :         return new;

  0026e	48 8b c5	 mov	 rax, rbp
  00271	e9 81 01 00 00	 jmp	 $LN73@PyBytes_Fr@4
$LN67@PyBytes_Fr@4:

; 2689 :             if (value == -1 && PyErr_Occurred()) {

  00276	e8 00 00 00 00	 call	 PyErr_Occurred
  0027b	48 85 c0	 test	 rax, rax

; 2690 :                 Py_DECREF(new);
; 2691 :                 return NULL;

  0027e	75 13		 jne	 SHORT $LN77@PyBytes_Fr@4
$LN57@PyBytes_Fr@4:

; 2694 :                 PyErr_SetString(PyExc_ValueError,
; 2695 :                                 "bytes must be in range(0, 256)");

  00280	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00287	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@MLPHABLA@bytes?5must?5be?5in?5range?$CI0?0?5256?$CJ?$AA@
  0028e	e8 00 00 00 00	 call	 PyErr_SetString
$LN77@PyBytes_Fr@4:

; 2696 :                 Py_DECREF(new);

  00293	48 8b cd	 mov	 rcx, rbp
  00296	e8 00 00 00 00	 call	 _Py_DecRef
$LN76@PyBytes_Fr@4:

; 2697 :                 return NULL;

  0029b	33 c0		 xor	 eax, eax
  0029d	e9 55 01 00 00	 jmp	 $LN73@PyBytes_Fr@4
$LN25@PyBytes_Fr@4:

; 2702 :     }
; 2703 : 
; 2704 :     /* For iterator version, create a string object and resize as needed */
; 2705 :     size = _PyObject_LengthHint(x, 64);

  002a2	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  002a7	48 8b cf	 mov	 rcx, rdi
  002aa	e8 00 00 00 00	 call	 _PyObject_LengthHint
  002af	48 8b e8	 mov	 rbp, rax

; 2706 :     if (size == -1 && PyErr_Occurred())

  002b2	48 83 f8 ff	 cmp	 rax, -1
  002b6	75 0a		 jne	 SHORT $LN17@PyBytes_Fr@4
  002b8	e8 00 00 00 00	 call	 PyErr_Occurred
  002bd	48 85 c0	 test	 rax, rax

; 2707 :         return NULL;

  002c0	75 d9		 jne	 SHORT $LN76@PyBytes_Fr@4
$LN17@PyBytes_Fr@4:

; 2708 :     /* Allocate an extra byte to prevent PyBytes_FromStringAndSize() from
; 2709 :        returning a shared empty bytes string. This required because we
; 2710 :        want to call _PyBytes_Resize() the returned object, which we can
; 2711 :        only do on bytes objects with refcount == 1. */
; 2712 :     size += 1;

  002c2	48 ff c5	 inc	 rbp

; 2713 :     new = PyBytes_FromStringAndSize(NULL, size);

  002c5	33 c9		 xor	 ecx, ecx
  002c7	48 8b d5	 mov	 rdx, rbp
  002ca	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  002cf	48 8b f0	 mov	 rsi, rax
  002d2	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR new$[rsp], rax

; 2714 :     if (new == NULL)

  002da	48 85 c0	 test	 rax, rax

; 2715 :         return NULL;

  002dd	74 bc		 je	 SHORT $LN76@PyBytes_Fr@4

; 2716 : 
; 2717 :     /* Get the iterator */
; 2718 :     it = PyObject_GetIter(x);

  002df	48 8b cf	 mov	 rcx, rdi
  002e2	4c 89 a4 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], r12
  002ea	4c 89 ac 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], r13
  002f2	e8 00 00 00 00	 call	 PyObject_GetIter
  002f7	4c 8b e8	 mov	 r13, rax

; 2719 :     if (it == NULL)

  002fa	48 85 c0	 test	 rax, rax
  002fd	0f 84 da 00 00
	00		 je	 $LN3@PyBytes_Fr@4

; 2720 :         goto error;
; 2721 : 
; 2722 :     /* Run the iterator to exhaustion */
; 2723 :     for (i = 0; ; i++) {
; 2724 :         PyObject *item;
; 2725 :         Py_ssize_t value;
; 2726 : 
; 2727 :         /* Get the next item */
; 2728 :         item = PyIter_Next(it);

  00303	48 8b c8	 mov	 rcx, rax
  00306	33 db		 xor	 ebx, ebx
  00308	e8 00 00 00 00	 call	 PyIter_Next
  0030d	4c 8b e0	 mov	 r12, rax

; 2729 :         if (item == NULL) {

  00310	48 85 c0	 test	 rax, rax
  00313	74 77		 je	 SHORT $LN58@PyBytes_Fr@4
  00315	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL14@PyBytes_Fr@4:

; 2731 :                 goto error;
; 2732 :             break;
; 2733 :         }
; 2734 : 
; 2735 :         /* Interpret it as an int (__index__) */
; 2736 :         value = PyNumber_AsSsize_t(item, PyExc_ValueError);

  00320	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  00327	49 8b cc	 mov	 rcx, r12
  0032a	e8 00 00 00 00	 call	 PyNumber_AsSsize_t

; 2737 :         Py_DECREF(item);

  0032f	49 8b cc	 mov	 rcx, r12
  00332	48 8b f8	 mov	 rdi, rax
  00335	e8 00 00 00 00	 call	 _Py_DecRef

; 2738 :         if (value == -1 && PyErr_Occurred())

  0033a	48 83 ff ff	 cmp	 rdi, -1
  0033e	74 78		 je	 SHORT $LN69@PyBytes_Fr@4

; 2739 :             goto error;
; 2740 : 
; 2741 :         /* Range check */
; 2742 :         if (value < 0 || value >= 256) {

  00340	48 85 ff	 test	 rdi, rdi
  00343	78 7d		 js	 SHORT $LN7@PyBytes_Fr@4
  00345	48 81 ff 00 01
	00 00		 cmp	 rdi, 256		; 00000100H
  0034c	7d 74		 jge	 SHORT $LN7@PyBytes_Fr@4

; 2745 :             goto error;
; 2746 :         }
; 2747 : 
; 2748 :         /* Append the byte */
; 2749 :         if (i >= size) {

  0034e	48 3b dd	 cmp	 rbx, rbp
  00351	7c 21		 jl	 SHORT $LN5@PyBytes_Fr@4

; 2750 :             size = 2 * size + 1;

  00353	48 8d 6c 2d 01	 lea	 rbp, QWORD PTR [rbp+rbp+1]

; 2751 :             if (_PyBytes_Resize(&new, size) < 0)

  00358	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR new$[rsp]
  00360	48 8b d5	 mov	 rdx, rbp
  00363	e8 00 00 00 00	 call	 _PyBytes_Resize
  00368	48 8b b4 24 a0
	00 00 00	 mov	 rsi, QWORD PTR new$[rsp]
  00370	85 c0		 test	 eax, eax
  00372	78 61		 js	 SHORT $error$24128
$LN5@PyBytes_Fr@4:

; 2752 :                 goto error;
; 2753 :         }
; 2754 :         ((PyBytesObject *)new)->ob_sval[i] = (char) value;

  00374	40 88 7c 33 78	 mov	 BYTE PTR [rbx+rsi+120], dil
  00379	49 8b cd	 mov	 rcx, r13
  0037c	48 ff c3	 inc	 rbx
  0037f	e8 00 00 00 00	 call	 PyIter_Next
  00384	4c 8b e0	 mov	 r12, rax
  00387	48 85 c0	 test	 rax, rax
  0038a	75 94		 jne	 SHORT $LL14@PyBytes_Fr@4
$LN58@PyBytes_Fr@4:

; 2730 :             if (PyErr_Occurred())

  0038c	e8 00 00 00 00	 call	 PyErr_Occurred
  00391	48 85 c0	 test	 rax, rax
  00394	75 3f		 jne	 SHORT $error$24128

; 2755 :     }
; 2756 :     _PyBytes_Resize(&new, i);

  00396	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR new$[rsp]
  0039e	48 8b d3	 mov	 rdx, rbx
  003a1	e8 00 00 00 00	 call	 _PyBytes_Resize

; 2757 : 
; 2758 :     /* Clean up and return success */
; 2759 :     Py_DECREF(it);

  003a6	49 8b cd	 mov	 rcx, r13
  003a9	e8 00 00 00 00	 call	 _Py_DecRef

; 2760 :     return new;

  003ae	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR new$[rsp]
  003b6	eb 2f		 jmp	 SHORT $LN75@PyBytes_Fr@4
$LN69@PyBytes_Fr@4:

; 2738 :         if (value == -1 && PyErr_Occurred())

  003b8	e8 00 00 00 00	 call	 PyErr_Occurred
  003bd	48 85 c0	 test	 rax, rax
  003c0	75 13		 jne	 SHORT $error$24128
$LN7@PyBytes_Fr@4:

; 2743 :             PyErr_SetString(PyExc_ValueError,
; 2744 :                             "bytes must be in range(0, 256)");

  003c2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  003c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@MLPHABLA@bytes?5must?5be?5in?5range?$CI0?0?5256?$CJ?$AA@
  003d0	e8 00 00 00 00	 call	 PyErr_SetString
$error$24128:

; 2761 : 
; 2762 :   error:
; 2763 :     /* Error handling when new != NULL */
; 2764 :     Py_XDECREF(it);

  003d5	49 8b cd	 mov	 rcx, r13
  003d8	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyBytes_Fr@4:

; 2765 :     Py_DECREF(new);

  003dd	48 8b ce	 mov	 rcx, rsi
  003e0	e8 00 00 00 00	 call	 _Py_DecRef

; 2766 :     return NULL;

  003e5	33 c0		 xor	 eax, eax
$LN75@PyBytes_Fr@4:
  003e7	4c 8b a4 24 88
	00 00 00	 mov	 r12, QWORD PTR [rsp+136]
  003ef	4c 8b ac 24 80
	00 00 00	 mov	 r13, QWORD PTR [rsp+128]
$LN73@PyBytes_Fr@4:
  003f7	48 8b ac 24 b0
	00 00 00	 mov	 rbp, QWORD PTR [rsp+176]
$LN72@PyBytes_Fr@4:
  003ff	48 8b b4 24 b8
	00 00 00	 mov	 rsi, QWORD PTR [rsp+184]
  00407	48 8b 9c 24 a8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+168]

; 2767 : }

  0040f	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00416	5f		 pop	 rdi
  00417	c3		 ret	 0
PyBytes_FromObject ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@DIJHAIGC@negative?5count?$AA@		; `string'
PUBLIC	??_C@_0CN@GAIODIPO@encoding?5or?5errors?5without?5a?5str@ ; `string'
PUBLIC	??_C@_0CL@GNADLFAE@__bytes__?5returned?5non?9bytes?5?$CIty@ ; `string'
PUBLIC	??_C@_0CE@DBOLPEDK@string?5argument?5without?5an?5encod@ ; `string'
PUBLIC	??_C@_0CN@GEIFFAEN@encoding?5or?5errors?5without?5seque@ ; `string'
PUBLIC	??_C@_0L@PHLOHJKP@?$HMOss?3bytes?$AA@		; `string'
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	_PyObject_LookupSpecial:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$bytes_new DD imagerel bytes_new
	DD	imagerel bytes_new+275
	DD	imagerel $unwind$bytes_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$bytes_new DD imagerel bytes_new+275
	DD	imagerel bytes_new+393
	DD	imagerel $chain$1$bytes_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$bytes_new DD imagerel bytes_new+393
	DD	imagerel bytes_new+411
	DD	imagerel $chain$3$bytes_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$bytes_new DD imagerel bytes_new+411
	DD	imagerel bytes_new+523
	DD	imagerel $chain$5$bytes_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$bytes_new DD imagerel bytes_new+523
	DD	imagerel bytes_new+559
	DD	imagerel $chain$7$bytes_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$bytes_new DD imagerel bytes_new+559
	DD	imagerel bytes_new+600
	DD	imagerel $chain$9$bytes_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$bytes_new DD imagerel bytes_new+600
	DD	imagerel bytes_new+655
	DD	imagerel $chain$11$bytes_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$bytes_new DD 040021H
	DD	0a7400H
	DD	0d3400H
	DD	imagerel bytes_new
	DD	imagerel bytes_new+275
	DD	imagerel $unwind$bytes_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$bytes_new DD 040021H
	DD	0a7400H
	DD	0d3400H
	DD	imagerel bytes_new
	DD	imagerel bytes_new+275
	DD	imagerel $unwind$bytes_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$bytes_new DD 040021H
	DD	0a7400H
	DD	0d3400H
	DD	imagerel bytes_new
	DD	imagerel bytes_new+275
	DD	imagerel $unwind$bytes_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$bytes_new DD 040021H
	DD	0a7400H
	DD	0d3400H
	DD	imagerel bytes_new
	DD	imagerel bytes_new+275
	DD	imagerel $unwind$bytes_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$bytes_new DD 040021H
	DD	0a7400H
	DD	0d3400H
	DD	imagerel bytes_new
	DD	imagerel bytes_new+275
	DD	imagerel $unwind$bytes_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$bytes_new DD 040a21H
	DD	0a740aH
	DD	0d3405H
	DD	imagerel bytes_new
	DD	imagerel bytes_new+275
	DD	imagerel $unwind$bytes_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bytes_new DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT ??_C@_0P@DIJHAIGC@negative?5count?$AA@
CONST	SEGMENT
??_C@_0P@DIJHAIGC@negative?5count?$AA@ DB 'negative count', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@GAIODIPO@encoding?5or?5errors?5without?5a?5str@
CONST	SEGMENT
??_C@_0CN@GAIODIPO@encoding?5or?5errors?5without?5a?5str@ DB 'encoding or'
	DB	' errors without a string argument', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GNADLFAE@__bytes__?5returned?5non?9bytes?5?$CIty@
CONST	SEGMENT
??_C@_0CL@GNADLFAE@__bytes__?5returned?5non?9bytes?5?$CIty@ DB '__bytes__'
	DB	' returned non-bytes (type %.200s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DBOLPEDK@string?5argument?5without?5an?5encod@
CONST	SEGMENT
??_C@_0CE@DBOLPEDK@string?5argument?5without?5an?5encod@ DB 'string argum'
	DB	'ent without an encoding', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@GEIFFAEN@encoding?5or?5errors?5without?5seque@
CONST	SEGMENT
??_C@_0CN@GEIFFAEN@encoding?5or?5errors?5without?5seque@ DB 'encoding or '
	DB	'errors without sequence argument', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PHLOHJKP@?$HMOss?3bytes?$AA@
CONST	SEGMENT
??_C@_0L@PHLOHJKP@?$HMOss?3bytes?$AA@ DB '|Oss:bytes', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT bytes_new
_TEXT	SEGMENT
x$ = 64
encoding$ = 96
type$ = 96
args$ = 104
kwds$ = 112
errors$ = 120
bytes_new PROC						; COMDAT

; 2531 : {

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00004	4c 8b d2	 mov	 r10, rdx

; 2532 :     PyObject *x = NULL;

  00007	33 d2		 xor	 edx, edx
  00009	49 8b c0	 mov	 rax, r8
  0000c	48 89 54 24 40	 mov	 QWORD PTR x$[rsp], rdx

; 2533 :     const char *encoding = NULL;

  00011	48 89 54 24 60	 mov	 QWORD PTR encoding$[rsp], rdx

; 2534 :     const char *errors = NULL;

  00016	48 89 54 24 78	 mov	 QWORD PTR errors$[rsp], rdx

; 2535 :     PyObject *new = NULL;
; 2536 :     PyObject *func;
; 2537 :     Py_ssize_t size;
; 2538 :     static char *kwlist[] = {"source", "encoding", "errors", 0};
; 2539 :     _Py_IDENTIFIER(__bytes__);
; 2540 : 
; 2541 :     if (type != &PyBytes_Type)

  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyBytes_Type
  00022	48 3b ca	 cmp	 rcx, rdx
  00025	74 0d		 je	 SHORT $LN22@bytes_new

; 2542 :         return str_subtype_new(type, args, kwds);

  00027	49 8b d2	 mov	 rdx, r10
  0002a	e8 00 00 00 00	 call	 str_subtype_new

; 2619 : }

  0002f	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00033	c3		 ret	 0
$LN22@bytes_new:

; 2543 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|Oss:bytes", kwlist, &x,
; 2544 :                                      &encoding, &errors))

  00034	48 8d 4c 24 78	 lea	 rcx, QWORD PTR errors$[rsp]
  00039	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??bytes_new@@9@9
  00040	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@PHLOHJKP@?$HMOss?3bytes?$AA@
  00047	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0004c	48 8d 4c 24 60	 lea	 rcx, QWORD PTR encoding$[rsp]
  00051	48 8b d0	 mov	 rdx, rax
  00054	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00059	48 8d 4c 24 40	 lea	 rcx, QWORD PTR x$[rsp]
  0005e	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00063	49 8b ca	 mov	 rcx, r10
  00066	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  0006b	85 c0		 test	 eax, eax

; 2545 :         return NULL;

  0006d	74 3c		 je	 SHORT $LN29@bytes_new

; 2546 :     if (x == NULL) {

  0006f	4c 8b 4c 24 40	 mov	 r9, QWORD PTR x$[rsp]
  00074	4d 85 c9	 test	 r9, r9
  00077	75 39		 jne	 SHORT $LN20@bytes_new

; 2547 :         if (encoding != NULL || errors != NULL) {

  00079	4c 39 4c 24 60	 cmp	 QWORD PTR encoding$[rsp], r9
  0007e	75 18		 jne	 SHORT $LN18@bytes_new
  00080	4c 39 4c 24 78	 cmp	 QWORD PTR errors$[rsp], r9
  00085	75 11		 jne	 SHORT $LN18@bytes_new

; 2552 :         }
; 2553 :         return PyBytes_FromString("");

  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0008e	e8 00 00 00 00	 call	 PyBytes_FromString

; 2619 : }

  00093	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00097	c3		 ret	 0
$LN18@bytes_new:

; 2548 :             PyErr_SetString(PyExc_TypeError,
; 2549 :                             "encoding or errors without sequence "
; 2550 :                             "argument");

  00098	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@GEIFFAEN@encoding?5or?5errors?5without?5seque@
  000a6	e8 00 00 00 00	 call	 PyErr_SetString
$LN29@bytes_new:

; 2551 :             return NULL;

  000ab	33 c0		 xor	 eax, eax

; 2619 : }

  000ad	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000b1	c3		 ret	 0
$LN20@bytes_new:

; 2554 :     }
; 2555 : 
; 2556 :     if (PyUnicode_Check(x)) {

  000b2	49 8b 41 58	 mov	 rax, QWORD PTR [r9+88]
  000b6	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  000c0	74 36		 je	 SHORT $LN17@bytes_new

; 2557 :         /* Encode via the codec registry */
; 2558 :         if (encoding == NULL) {

  000c2	48 8b 54 24 60	 mov	 rdx, QWORD PTR encoding$[rsp]
  000c7	48 85 d2	 test	 rdx, rdx
  000ca	75 1a		 jne	 SHORT $LN16@bytes_new

; 2559 :             PyErr_SetString(PyExc_TypeError,
; 2560 :                             "string argument without an encoding");

  000cc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@DBOLPEDK@string?5argument?5without?5an?5encod@
  000da	e8 00 00 00 00	 call	 PyErr_SetString

; 2561 :             return NULL;

  000df	33 c0		 xor	 eax, eax

; 2619 : }

  000e1	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000e5	c3		 ret	 0
$LN16@bytes_new:

; 2562 :         }
; 2563 :         new = PyUnicode_AsEncodedString(x, encoding, errors);

  000e6	4c 8b 44 24 78	 mov	 r8, QWORD PTR errors$[rsp]
  000eb	49 8b c9	 mov	 rcx, r9
  000ee	e8 00 00 00 00	 call	 PyUnicode_AsEncodedString

; 2619 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
$LN17@bytes_new:

; 2564 :         if (new == NULL)
; 2565 :             return NULL;
; 2566 :         assert(PyBytes_Check(new));
; 2567 :         return new;
; 2568 :     }
; 2569 : 
; 2570 :     /* We'd like to call PyObject_Bytes here, but we need to check for an
; 2571 :        integer argument before deferring to PyBytes_FromObject, something
; 2572 :        PyObject_Bytes doesn't do. */
; 2573 :     func = _PyObject_LookupSpecial(x, &PyId___bytes__);

  000f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000fe	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  00107	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?PyId___bytes__@?1??bytes_new@@9@9
  0010c	48 03 14 c8	 add	 rdx, QWORD PTR [rax+rcx*8]
  00110	49 8b c9	 mov	 rcx, r9
  00113	48 89 5c 24 68	 mov	 QWORD PTR [rsp+104], rbx
  00118	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi
  0011d	e8 00 00 00 00	 call	 _PyObject_LookupSpecial
  00122	48 8b f8	 mov	 rdi, rax

; 2574 :     if (func != NULL) {

  00125	48 85 c0	 test	 rax, rax
  00128	74 71		 je	 SHORT $LN14@bytes_new

; 2575 :         new = PyObject_CallFunctionObjArgs(func, NULL);

  0012a	33 d2		 xor	 edx, edx
  0012c	48 8b c8	 mov	 rcx, rax
  0012f	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs

; 2576 :         Py_DECREF(func);

  00134	48 8b cf	 mov	 rcx, rdi
  00137	48 8b d8	 mov	 rbx, rax
  0013a	e8 00 00 00 00	 call	 _Py_DecRef

; 2577 :         if (new == NULL)

  0013f	48 85 db	 test	 rbx, rbx

; 2578 :             return NULL;

  00142	0f 84 ff 00 00
	00		 je	 $LN28@bytes_new

; 2579 :         if (!PyBytes_Check(new)) {

  00148	4c 8b 43 58	 mov	 r8, QWORD PTR [rbx+88]
  0014c	41 f7 80 00 01
	00 00 00 00 00
	08		 test	 DWORD PTR [r8+256], 134217728 ; 08000000H
  00157	75 30		 jne	 SHORT $LN12@bytes_new

; 2580 :             PyErr_Format(PyExc_TypeError,
; 2581 :                          "__bytes__ returned non-bytes (type %.200s)",
; 2582 :                          Py_TYPE(new)->tp_name);

  00159	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0015d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00164	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@GNADLFAE@__bytes__?5returned?5non?9bytes?5?$CIty@
  0016b	e8 00 00 00 00	 call	 PyErr_Format

; 2583 :             Py_DECREF(new);

  00170	48 8b cb	 mov	 rcx, rbx
  00173	e8 00 00 00 00	 call	 _Py_DecRef
  00178	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  0017d	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 2584 :             return NULL;

  00182	33 c0		 xor	 eax, eax

; 2619 : }

  00184	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00188	c3		 ret	 0
$LN12@bytes_new:
  00189	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 2585 :         }
; 2586 :         return new;

  0018e	48 8b c3	 mov	 rax, rbx
  00191	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]

; 2619 : }

  00196	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0019a	c3		 ret	 0
$LN14@bytes_new:

; 2587 :     }
; 2588 :     else if (PyErr_Occurred())

  0019b	e8 00 00 00 00	 call	 PyErr_Occurred
  001a0	48 85 c0	 test	 rax, rax

; 2589 :         return NULL;

  001a3	0f 85 9e 00 00
	00		 jne	 $LN28@bytes_new

; 2590 : 
; 2591 :     /* Is it an integer? */
; 2592 :     size = PyNumber_AsSsize_t(x, PyExc_OverflowError);

  001a9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  001b0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  001b5	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  001ba	48 8b d8	 mov	 rbx, rax

; 2593 :     if (size == -1 && PyErr_Occurred()) {

  001bd	48 83 f8 ff	 cmp	 rax, -1
  001c1	75 6c		 jne	 SHORT $LN9@bytes_new
  001c3	e8 00 00 00 00	 call	 PyErr_Occurred
  001c8	48 85 c0	 test	 rax, rax
  001cb	74 67		 je	 SHORT $LN25@bytes_new

; 2594 :         if (PyErr_ExceptionMatches(PyExc_OverflowError))

  001cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  001d4	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  001d9	85 c0		 test	 eax, eax

; 2595 :             return NULL;

  001db	75 6a		 jne	 SHORT $LN28@bytes_new

; 2596 :         PyErr_Clear();

  001dd	e8 00 00 00 00	 call	 PyErr_Clear

; 2609 :     }
; 2610 : 
; 2611 :     /* If it's not unicode, there can't be encoding or errors */
; 2612 :     if (encoding != NULL || errors != NULL) {

  001e2	48 83 7c 24 60
	00		 cmp	 QWORD PTR encoding$[rsp], 0
  001e8	75 21		 jne	 SHORT $LN1@bytes_new
  001ea	48 83 7c 24 78
	00		 cmp	 QWORD PTR errors$[rsp], 0
  001f0	75 19		 jne	 SHORT $LN1@bytes_new

; 2616 :     }
; 2617 : 
; 2618 :     return PyBytes_FromObject(x);

  001f2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  001f7	e8 00 00 00 00	 call	 PyBytes_FromObject
  001fc	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00201	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 2619 : }

  00206	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0020a	c3		 ret	 0
$LN1@bytes_new:

; 2613 :         PyErr_SetString(PyExc_TypeError,
; 2614 :             "encoding or errors without a string argument");

  0020b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00212	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@GAIODIPO@encoding?5or?5errors?5without?5a?5str@
  00219	e8 00 00 00 00	 call	 PyErr_SetString
  0021e	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00223	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 2615 :         return NULL;

  00228	33 c0		 xor	 eax, eax

; 2619 : }

  0022a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0022e	c3		 ret	 0
$LN9@bytes_new:

; 2597 :     }
; 2598 :     else if (size < 0) {

  0022f	48 85 c0	 test	 rax, rax
  00232	79 24		 jns	 SHORT $LN6@bytes_new
$LN25@bytes_new:

; 2599 :         PyErr_SetString(PyExc_ValueError, "negative count");

  00234	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0023b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@DIJHAIGC@negative?5count?$AA@
  00242	e8 00 00 00 00	 call	 PyErr_SetString
$LN28@bytes_new:

; 2600 :         return NULL;

  00247	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  0024c	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]
  00251	33 c0		 xor	 eax, eax

; 2619 : }

  00253	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00257	c3		 ret	 0
$LN6@bytes_new:

; 2601 :     }
; 2602 :     else {
; 2603 :         new = PyBytes_FromStringAndSize(NULL, size);

  00258	48 8b d0	 mov	 rdx, rax
  0025b	33 c9		 xor	 ecx, ecx
  0025d	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00262	48 8b f8	 mov	 rdi, rax

; 2604 :         if (new == NULL)

  00265	48 85 c0	 test	 rax, rax

; 2605 :             return NULL;

  00268	74 dd		 je	 SHORT $LN28@bytes_new

; 2606 :         if (size > 0)

  0026a	48 85 db	 test	 rbx, rbx
  0026d	7e 0e		 jle	 SHORT $LN3@bytes_new

; 2607 :             memset(((PyBytesObject*)new)->ob_sval, 0, size);

  0026f	48 8d 48 78	 lea	 rcx, QWORD PTR [rax+120]
  00273	4c 8b c3	 mov	 r8, rbx
  00276	33 d2		 xor	 edx, edx
  00278	e8 00 00 00 00	 call	 memset
$LN3@bytes_new:

; 2608 :         return new;

  0027d	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00282	48 8b c7	 mov	 rax, rdi
  00285	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 2619 : }

  0028a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0028e	c3		 ret	 0
bytes_new ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$str_subtype_new DD imagerel str_subtype_new
	DD	imagerel str_subtype_new+44
	DD	imagerel $unwind$str_subtype_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$str_subtype_new DD imagerel str_subtype_new+44
	DD	imagerel str_subtype_new+149
	DD	imagerel $chain$0$str_subtype_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$str_subtype_new DD imagerel str_subtype_new+149
	DD	imagerel str_subtype_new+279
	DD	imagerel $chain$1$str_subtype_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$str_subtype_new DD 021H
	DD	imagerel str_subtype_new
	DD	imagerel str_subtype_new+44
	DD	imagerel $unwind$str_subtype_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$str_subtype_new DD 020521H
	DD	086405H
	DD	imagerel str_subtype_new
	DD	imagerel str_subtype_new+44
	DD	imagerel $unwind$str_subtype_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$str_subtype_new DD 040a01H
	DD	09340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytesobject.c
xdata	ENDS
;	COMDAT str_subtype_new
_TEXT	SEGMENT
type$ = 64
args$ = 72
kwds$ = 80
str_subtype_new PROC					; COMDAT

; 2771 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 2772 :     PyObject *tmp, *pnew;
; 2773 :     Py_ssize_t n;
; 2774 : 
; 2775 :     assert(PyType_IsSubtype(type, &PyBytes_Type));
; 2776 :     tmp = bytes_new(&PyBytes_Type, args, kwds);

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBytes_Type
  00014	e8 00 00 00 00	 call	 bytes_new
  00019	48 8b d8	 mov	 rbx, rax

; 2777 :     if (tmp == NULL)

  0001c	48 85 c0	 test	 rax, rax
  0001f	75 0b		 jne	 SHORT $LN10@str_subtyp

; 2790 : }

  00021	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00026	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002a	5f		 pop	 rdi
  0002b	c3		 ret	 0
$LN10@str_subtyp:
  0002c	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi

; 2778 :         return NULL;
; 2779 :     assert(PyBytes_CheckExact(tmp));
; 2780 :     n = PyBytes_GET_SIZE(tmp);

  00031	48 8b 70 60	 mov	 rsi, QWORD PTR [rax+96]

; 2781 :     pnew = type->tp_alloc(type, n);

  00035	48 8b cf	 mov	 rcx, rdi
  00038	48 8b d6	 mov	 rdx, rsi
  0003b	ff 97 88 01 00
	00		 call	 QWORD PTR [rdi+392]
  00041	48 8b f8	 mov	 rdi, rax

; 2782 :     if (pnew != NULL) {

  00044	48 85 c0	 test	 rax, rax
  00047	74 3e		 je	 SHORT $LN9@str_subtyp

; 2783 :         Py_MEMCPY(PyBytes_AS_STRING(pnew),
; 2784 :                   PyBytes_AS_STRING(tmp), n+1);

  00049	4c 8d 46 01	 lea	 r8, QWORD PTR [rsi+1]
  0004d	48 8d 48 78	 lea	 rcx, QWORD PTR [rax+120]
  00051	48 8d 53 78	 lea	 rdx, QWORD PTR [rbx+120]
  00055	49 83 f8 10	 cmp	 r8, 16
  00059	72 07		 jb	 SHORT $LN5@str_subtyp
  0005b	e8 00 00 00 00	 call	 memcpy
  00060	eb 1d		 jmp	 SHORT $LN7@str_subtyp
$LN5@str_subtyp:
  00062	4d 85 c0	 test	 r8, r8
  00065	74 18		 je	 SHORT $LN7@str_subtyp
  00067	48 2b d1	 sub	 rdx, rcx
  0006a	66 0f 1f 44 00
	00		 npad	 6
$LL3@str_subtyp:
  00070	0f b6 04 0a	 movzx	 eax, BYTE PTR [rdx+rcx]
  00074	48 ff c1	 inc	 rcx
  00077	49 ff c8	 dec	 r8
  0007a	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  0007d	75 f1		 jne	 SHORT $LL3@str_subtyp
$LN7@str_subtyp:

; 2785 :         ((PyBytesObject *)pnew)->ob_shash =
; 2786 :             ((PyBytesObject *)tmp)->ob_shash;

  0007f	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  00083	48 89 47 70	 mov	 QWORD PTR [rdi+112], rax
$LN9@str_subtyp:

; 2787 :     }
; 2788 :     Py_DECREF(tmp);

  00087	e8 00 00 00 00	 call	 _Py_PXCTX
  0008c	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00091	85 c0		 test	 eax, eax
  00093	75 74		 jne	 SHORT $LN23@str_subtyp
  00095	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00099	a8 20		 test	 al, 32			; 00000020H
  0009b	75 64		 jne	 SHORT $LN17@str_subtyp
  0009d	84 c0		 test	 al, al
  0009f	78 60		 js	 SHORT $LN17@str_subtyp
  000a1	a8 02		 test	 al, 2
  000a3	75 64		 jne	 SHORT $LN23@str_subtyp
  000a5	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a9	75 5e		 jne	 SHORT $LN23@str_subtyp
  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b9	4c 8b cb	 mov	 r9, rbx
  000bc	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000c2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ca	e8 00 00 00 00	 call	 _PyParallel_Guard
  000cf	48 8b cb	 mov	 rcx, rbx
  000d2	85 c0		 test	 eax, eax
  000d4	74 13		 je	 SHORT $LN22@str_subtyp
  000d6	e8 00 00 00 00	 call	 _Px_Dealloc

; 2789 :     return pnew;

  000db	48 8b c7	 mov	 rax, rdi

; 2790 : }

  000de	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000e3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e7	5f		 pop	 rdi
  000e8	c3		 ret	 0

; 2787 :     }
; 2788 :     Py_DECREF(tmp);

$LN22@str_subtyp:
  000e9	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000ed	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 2789 :     return pnew;

  000f3	48 8b c7	 mov	 rax, rdi

; 2790 : }

  000f6	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000fb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0

; 2787 :     }
; 2788 :     Py_DECREF(tmp);

$LN17@str_subtyp:
  00101	48 8b cb	 mov	 rcx, rbx
  00104	e8 00 00 00 00	 call	 Px_DecRef
$LN23@str_subtyp:

; 2789 :     return pnew;

  00109	48 8b c7	 mov	 rax, rdi

; 2790 : }

  0010c	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00111	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00115	5f		 pop	 rdi
  00116	c3		 ret	 0
str_subtype_new ENDP
_TEXT	ENDS
END
