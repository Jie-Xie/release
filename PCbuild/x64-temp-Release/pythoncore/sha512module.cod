; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07IEICALMF@_sha512?$AA@			; `string'
PUBLIC	??_C@_06IMCKCJGN@sha384?$AA@			; `string'
PUBLIC	??_C@_06PAMKOKLI@sha512?$AA@			; `string'
PUBLIC	??_C@_06ICGJLFIM@string?$AA@			; `string'
PUBLIC	??_C@_0P@CDFKDICM@_sha512?4sha512?$AA@		; `string'
PUBLIC	??_C@_0P@FPLKPLPJ@_sha512?4sha384?$AA@		; `string'
PUBLIC	??_C@_0M@NPLIJFCD@digest_size?$AA@		; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_0L@EHHMJOPG@block_size?$AA@		; `string'
PUBLIC	??_C@_06HDLLMMEJ@update?$AA@			; `string'
PUBLIC	??_C@_09NNAIGNDA@hexdigest?$AA@			; `string'
PUBLIC	??_C@_06IJPNAHC@digest?$AA@			; `string'
PUBLIC	??_C@_04COAGEIMF@copy?$AA@			; `string'
;	COMDAT ??_C@_07IEICALMF@_sha512?$AA@
CONST	SEGMENT
??_C@_07IEICALMF@_sha512?$AA@ DB '_sha512', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IMCKCJGN@sha384?$AA@
CONST	SEGMENT
??_C@_06IMCKCJGN@sha384?$AA@ DB 'sha384', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PAMKOKLI@sha512?$AA@
CONST	SEGMENT
??_C@_06PAMKOKLI@sha512?$AA@ DB 'sha512', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICGJLFIM@string?$AA@
CONST	SEGMENT
??_C@_06ICGJLFIM@string?$AA@ DB 'string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CDFKDICM@_sha512?4sha512?$AA@
CONST	SEGMENT
??_C@_0P@CDFKDICM@_sha512?4sha512?$AA@ DB '_sha512.sha512', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FPLKPLPJ@_sha512?4sha384?$AA@
CONST	SEGMENT
??_C@_0P@FPLKPLPJ@_sha512?4sha384?$AA@ DB '_sha512.sha384', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NPLIJFCD@digest_size?$AA@
CONST	SEGMENT
??_C@_0M@NPLIJFCD@digest_size?$AA@ DB 'digest_size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EHHMJOPG@block_size?$AA@
CONST	SEGMENT
??_C@_0L@EHHMJOPG@block_size?$AA@ DB 'block_size', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HDLLMMEJ@update?$AA@
CONST	SEGMENT
??_C@_06HDLLMMEJ@update?$AA@ DB 'update', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NNAIGNDA@hexdigest?$AA@
CONST	SEGMENT
??_C@_09NNAIGNDA@hexdigest?$AA@ DB 'hexdigest', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IJPNAHC@digest?$AA@
CONST	SEGMENT
??_C@_06IJPNAHC@digest?$AA@ DB 'digest', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04COAGEIMF@copy?$AA@
CONST	SEGMENT
??_C@_04COAGEIMF@copy?$AA@ DB 'copy', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
SHA512_copy__doc__ DB 'Return a copy of the hash object.', 00H
	ORG $+6
SHA512_digest__doc__ DB 'Return the digest value as a string of binary da'
	DB	'ta.', 00H
	ORG $+4
SHA512_hexdigest__doc__ DB 'Return the digest value as a string of hexade'
	DB	'cimal digits.', 00H
	ORG $+5
SHA512_update__doc__ DB 'Update this hash object''s state with the provid'
	DB	'ed string.', 00H
	ORG $+6
SHA_methods DQ	FLAT:??_C@_04COAGEIMF@copy?$AA@
	DQ	FLAT:SHA512_copy
	DD	04H
	ORG $+4
	DQ	FLAT:SHA512_copy__doc__
	DQ	FLAT:??_C@_06IJPNAHC@digest?$AA@
	DQ	FLAT:SHA512_digest
	DD	04H
	ORG $+4
	DQ	FLAT:SHA512_digest__doc__
	DQ	FLAT:??_C@_09NNAIGNDA@hexdigest?$AA@
	DQ	FLAT:SHA512_hexdigest
	DD	04H
	ORG $+4
	DQ	FLAT:SHA512_hexdigest__doc__
	DQ	FLAT:??_C@_06HDLLMMEJ@update?$AA@
	DQ	FLAT:SHA512_update
	DD	01H
	ORG $+4
	DQ	FLAT:SHA512_update__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
SHA_getseters DQ FLAT:??_C@_0L@EHHMJOPG@block_size?$AA@
	DQ	FLAT:SHA512_get_block_size
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:SHA512_get_name
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
SHA_members DQ	FLAT:??_C@_0M@NPLIJFCD@digest_size?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000130H
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+32
SHA384type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@FPLKPLPJ@_sha512?4sha384?$AA@
	DQ	0000000000000140H
	DQ	0000000000000000H
	DQ	FLAT:SHA512_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:SHA_methods
	DQ	FLAT:SHA_members
	DQ	FLAT:SHA_getseters
	ORG $+136
SHA512type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@CDFKDICM@_sha512?4sha512?$AA@
	DQ	0000000000000140H
	DQ	0000000000000000H
	DQ	FLAT:SHA512_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:SHA_methods
	DQ	FLAT:SHA_members
	DQ	FLAT:SHA_getseters
	ORG $+136
SHA512_new__doc__ DB 'Return a new SHA-512 hash object; optionally initia'
	DB	'lized with a string.', 00H
?kwlist@?1??SHA512_new@@9@9 DQ FLAT:??_C@_06ICGJLFIM@string?$AA@ ; `SHA512_new'::`2'::kwlist
	DQ	0000000000000000H
	ORG $+8
SHA384_new__doc__ DB 'Return a new SHA-384 hash object; optionally initia'
	DB	'lized with a string.', 00H
?kwlist@?1??SHA384_new@@9@9 DQ FLAT:??_C@_06ICGJLFIM@string?$AA@ ; `SHA384_new'::`2'::kwlist
	DQ	0000000000000000H
	ORG $+8
SHA_functions DQ FLAT:??_C@_06PAMKOKLI@sha512?$AA@
	DQ	FLAT:SHA512_new
	DD	03H
	ORG $+4
	DQ	FLAT:SHA512_new__doc__
	DQ	FLAT:??_C@_06IMCKCJGN@sha384?$AA@
	DQ	FLAT:SHA384_new
	DD	03H
	ORG $+4
	DQ	FLAT:SHA384_new__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_sha512module DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07IEICALMF@_sha512?$AA@
	DQ	0000000000000000H
	DQ	ffffffffffffffffH
	DQ	FLAT:SHA_functions
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\sha512module.c
_TEXT	ENDS
;	COMDAT longReverse
_TEXT	SEGMENT
buffer$ = 8
byteCount$ = 16
Endianness$ = 24
longReverse PROC					; COMDAT

; 65   :     SHA_INT64 value;
; 66   : 
; 67   :     if ( Endianness == PCT_BIG_ENDIAN )

  00000	45 85 c0	 test	 r8d, r8d
  00003	74 71		 je	 SHORT $LN7@longRevers

; 68   :         return;
; 69   : 
; 70   :     byteCount /= sizeof(*buffer);

  00005	4c 63 c2	 movsxd	 r8, edx
  00008	49 c1 e8 03	 shr	 r8, 3

; 71   :     while (byteCount--) {

  0000c	45 85 c0	 test	 r8d, r8d
  0000f	74 65		 je	 SHORT $LN7@longRevers

; 68   :         return;
; 69   : 
; 70   :     byteCount /= sizeof(*buffer);

  00011	48 8d 51 02	 lea	 rdx, QWORD PTR [rcx+2]
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL2@longRevers:

; 72   :         value = *buffer;

  00020	48 8b 4a fe	 mov	 rcx, QWORD PTR [rdx-2]

; 73   : 
; 74   :                 ((unsigned char*)buffer)[0] = (unsigned char)(value >> 56) & 0xff;
; 75   :                 ((unsigned char*)buffer)[1] = (unsigned char)(value >> 48) & 0xff;
; 76   :                 ((unsigned char*)buffer)[2] = (unsigned char)(value >> 40) & 0xff;
; 77   :                 ((unsigned char*)buffer)[3] = (unsigned char)(value >> 32) & 0xff;
; 78   :                 ((unsigned char*)buffer)[4] = (unsigned char)(value >> 24) & 0xff;
; 79   :                 ((unsigned char*)buffer)[5] = (unsigned char)(value >> 16) & 0xff;
; 80   :                 ((unsigned char*)buffer)[6] = (unsigned char)(value >>  8) & 0xff;
; 81   :                 ((unsigned char*)buffer)[7] = (unsigned char)(value      ) & 0xff;
; 82   : 
; 83   :                 buffer++;

  00024	48 83 c2 08	 add	 rdx, 8
  00028	48 8b c1	 mov	 rax, rcx
  0002b	88 4a fd	 mov	 BYTE PTR [rdx-3], cl
  0002e	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  00032	88 42 f6	 mov	 BYTE PTR [rdx-10], al
  00035	48 8b c1	 mov	 rax, rcx
  00038	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  0003c	88 42 f7	 mov	 BYTE PTR [rdx-9], al
  0003f	48 8b c1	 mov	 rax, rcx
  00042	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  00046	88 42 f8	 mov	 BYTE PTR [rdx-8], al
  00049	48 8b c1	 mov	 rax, rcx
  0004c	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00050	88 42 f9	 mov	 BYTE PTR [rdx-7], al
  00053	48 8b c1	 mov	 rax, rcx
  00056	48 c1 e8 18	 shr	 rax, 24
  0005a	88 42 fa	 mov	 BYTE PTR [rdx-6], al
  0005d	48 8b c1	 mov	 rax, rcx
  00060	48 c1 e8 10	 shr	 rax, 16
  00064	88 42 fb	 mov	 BYTE PTR [rdx-5], al
  00067	48 8b c1	 mov	 rax, rcx
  0006a	48 c1 e8 08	 shr	 rax, 8
  0006e	41 ff c8	 dec	 r8d
  00071	88 42 fc	 mov	 BYTE PTR [rdx-4], al
  00074	75 aa		 jne	 SHORT $LL2@longRevers
$LN7@longRevers:

; 84   :     }
; 85   : }

  00076	f3 c3		 fatret	 0
longReverse ENDP
_TEXT	ENDS
EXTRN	memcpy:PROC
; Function compile flags: /Ogtpy
;	COMDAT SHAcopy
_TEXT	SEGMENT
src$ = 8
dest$ = 16
SHAcopy	PROC						; COMDAT

; 89   :     dest->Endianness = src->Endianness;

  00000	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [rcx+296]
  00006	4c 8b c1	 mov	 r8, rcx
  00009	89 82 28 01 00
	00		 mov	 DWORD PTR [rdx+296], eax

; 90   :     dest->local = src->local;

  0000f	8b 81 2c 01 00
	00		 mov	 eax, DWORD PTR [rcx+300]
  00015	89 82 2c 01 00
	00		 mov	 DWORD PTR [rdx+300], eax

; 91   :     dest->digestsize = src->digestsize;

  0001b	8b 81 30 01 00
	00		 mov	 eax, DWORD PTR [rcx+304]
  00021	89 82 30 01 00
	00		 mov	 DWORD PTR [rdx+304], eax

; 92   :     dest->count_lo = src->count_lo;

  00027	8b 81 a0 00 00
	00		 mov	 eax, DWORD PTR [rcx+160]
  0002d	89 82 a0 00 00
	00		 mov	 DWORD PTR [rdx+160], eax

; 93   :     dest->count_hi = src->count_hi;

  00033	8b 81 a4 00 00
	00		 mov	 eax, DWORD PTR [rcx+164]
  00039	89 82 a4 00 00
	00		 mov	 DWORD PTR [rdx+164], eax

; 94   :     memcpy(dest->digest, src->digest, sizeof(src->digest));

  0003f	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00043	48 89 42 60	 mov	 QWORD PTR [rdx+96], rax
  00047	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0004b	48 89 42 68	 mov	 QWORD PTR [rdx+104], rax
  0004f	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  00053	48 89 42 70	 mov	 QWORD PTR [rdx+112], rax
  00057	48 8b 41 78	 mov	 rax, QWORD PTR [rcx+120]
  0005b	48 89 42 78	 mov	 QWORD PTR [rdx+120], rax
  0005f	48 8b 81 80 00
	00 00		 mov	 rax, QWORD PTR [rcx+128]
  00066	48 89 82 80 00
	00 00		 mov	 QWORD PTR [rdx+128], rax
  0006d	48 8b 81 88 00
	00 00		 mov	 rax, QWORD PTR [rcx+136]
  00074	48 89 82 88 00
	00 00		 mov	 QWORD PTR [rdx+136], rax
  0007b	48 8b 81 90 00
	00 00		 mov	 rax, QWORD PTR [rcx+144]
  00082	48 89 82 90 00
	00 00		 mov	 QWORD PTR [rdx+144], rax
  00089	48 8b 81 98 00
	00 00		 mov	 rax, QWORD PTR [rcx+152]

; 95   :     memcpy(dest->data, src->data, sizeof(src->data));

  00090	48 8d 8a a8 00
	00 00		 lea	 rcx, QWORD PTR [rdx+168]
  00097	48 89 82 98 00
	00 00		 mov	 QWORD PTR [rdx+152], rax
  0009e	49 8d 90 a8 00
	00 00		 lea	 rdx, QWORD PTR [r8+168]
  000a5	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H

; 96   : }

  000ab	e9 00 00 00 00	 jmp	 memcpy
SHAcopy	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sha512_transform DD imagerel sha512_transform
	DD	imagerel sha512_transform+10091
	DD	imagerel $unwind$sha512_transform
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sha512_transform DD 0b2401H
	DD	05e3424H
	DD	0540124H
	DD	0e013f015H
	DD	0c00fd011H
	DD	0600c700dH
	DD	0500bH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT sha512_transform
_TEXT	SEGMENT
W$ = 32
sha_info$ = 736
S$54$ = 744
sha512_transform PROC					; COMDAT

; 139  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	41 54		 push	 r12
  0000f	41 55		 push	 r13
  00011	41 56		 push	 r14
  00013	41 57		 push	 r15
  00015	48 8d ac 24 60
	fe ff ff	 lea	 rbp, QWORD PTR [rsp-416]
  0001d	48 81 ec a0 02
	00 00		 sub	 rsp, 672		; 000002a0H

; 140  :     int i;
; 141  :     SHA_INT64 S[8], W[80], t0, t1;
; 142  : 
; 143  :     memcpy(W, sha_info->data, sizeof(sha_info->data));

  00024	0f 10 81 a8 00
	00 00		 movups	 xmm0, XMMWORD PTR [rcx+168]
  0002b	0f 10 89 b8 00
	00 00		 movups	 xmm1, XMMWORD PTR [rcx+184]

; 144  :     longReverse(W, (int)sizeof(sha_info->data), sha_info->Endianness);

  00032	44 8b 81 28 01
	00 00		 mov	 r8d, DWORD PTR [rcx+296]
  00039	4c 8b e9	 mov	 r13, rcx
  0003c	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00041	0f 29 44 24 20	 movaps	 XMMWORD PTR W$[rsp], xmm0
  00046	0f 29 4c 24 30	 movaps	 XMMWORD PTR W$[rsp+16], xmm1
  0004b	0f 10 81 c8 00
	00 00		 movups	 xmm0, XMMWORD PTR [rcx+200]
  00052	0f 10 89 d8 00
	00 00		 movups	 xmm1, XMMWORD PTR [rcx+216]
  00059	0f 29 44 24 40	 movaps	 XMMWORD PTR W$[rsp+32], xmm0
  0005e	0f 29 4c 24 50	 movaps	 XMMWORD PTR W$[rsp+48], xmm1
  00063	0f 10 81 e8 00
	00 00		 movups	 xmm0, XMMWORD PTR [rcx+232]
  0006a	0f 10 89 f8 00
	00 00		 movups	 xmm1, XMMWORD PTR [rcx+248]
  00071	0f 29 44 24 60	 movaps	 XMMWORD PTR W$[rsp+64], xmm0
  00076	0f 29 4c 24 70	 movaps	 XMMWORD PTR W$[rsp+80], xmm1
  0007b	0f 10 81 08 01
	00 00		 movups	 xmm0, XMMWORD PTR [rcx+264]
  00082	0f 10 89 18 01
	00 00		 movups	 xmm1, XMMWORD PTR [rcx+280]
  00089	48 8d 4c 24 20	 lea	 rcx, QWORD PTR W$[rsp]
  0008e	0f 29 45 80	 movaps	 XMMWORD PTR W$[rbp-160], xmm0
  00092	0f 29 4d 90	 movaps	 XMMWORD PTR W$[rbp-144], xmm1
  00096	e8 00 00 00 00	 call	 longReverse
  0009b	48 8d 5c 24 20	 lea	 rbx, QWORD PTR W$[rsp]
  000a0	bf 10 00 00 00	 mov	 edi, 16
  000a5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL9@sha512_tra:

; 145  : 
; 146  :     for (i = 16; i < 80; ++i) {
; 147  :                 W[i] = Gamma1(W[i - 2]) + W[i - 7] + Gamma0(W[i - 15]) + W[i - 16];

  000b0	48 8b 53 08	 mov	 rdx, QWORD PTR [rbx+8]
  000b4	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  000b8	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  000bc	4c 8b 53 18	 mov	 r10, QWORD PTR [rbx+24]
  000c0	4c 8b c9	 mov	 r9, rcx
  000c3	48 8b c1	 mov	 rax, rcx
  000c6	48 c1 e9 06	 shr	 rcx, 6
  000ca	49 c1 c9 13	 ror	 r9, 19
  000ce	48 c1 c0 03	 rol	 rax, 3
  000d2	4c 33 c8	 xor	 r9, rax
  000d5	48 8b c2	 mov	 rax, rdx
  000d8	4c 33 c9	 xor	 r9, rcx
  000db	48 8b ca	 mov	 rcx, rdx
  000de	48 c1 c9 08	 ror	 rcx, 8
  000e2	48 d1 c8	 ror	 rax, 1
  000e5	48 33 c8	 xor	 rcx, rax
  000e8	48 8b c2	 mov	 rax, rdx
  000eb	48 c1 e8 07	 shr	 rax, 7
  000ef	48 33 c8	 xor	 rcx, rax
  000f2	4c 03 c9	 add	 r9, rcx
  000f5	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  000f9	4c 03 4b 48	 add	 r9, QWORD PTR [rbx+72]
  000fd	4c 8b d9	 mov	 r11, rcx
  00100	48 8b c1	 mov	 rax, rcx
  00103	4c 03 0b	 add	 r9, QWORD PTR [rbx]
  00106	48 c1 e9 06	 shr	 rcx, 6
  0010a	49 c1 cb 13	 ror	 r11, 19
  0010e	48 c1 c0 03	 rol	 rax, 3
  00112	4c 89 8b 80 00
	00 00		 mov	 QWORD PTR [rbx+128], r9
  00119	4c 33 d8	 xor	 r11, rax
  0011c	49 8b c0	 mov	 rax, r8
  0011f	4c 33 d9	 xor	 r11, rcx
  00122	49 8b c8	 mov	 rcx, r8
  00125	48 c1 c9 08	 ror	 rcx, 8
  00129	48 d1 c8	 ror	 rax, 1
  0012c	48 33 c8	 xor	 rcx, rax
  0012f	49 8b c0	 mov	 rax, r8
  00132	48 c1 e8 07	 shr	 rax, 7
  00136	48 33 c8	 xor	 rcx, rax
  00139	49 8b c1	 mov	 rax, r9
  0013c	4c 03 d9	 add	 r11, rcx
  0013f	49 8b ca	 mov	 rcx, r10
  00142	4c 03 5b 50	 add	 r11, QWORD PTR [rbx+80]
  00146	4c 03 da	 add	 r11, rdx
  00149	49 8b d1	 mov	 rdx, r9
  0014c	49 c1 e9 06	 shr	 r9, 6
  00150	48 c1 ca 13	 ror	 rdx, 19
  00154	48 c1 c0 03	 rol	 rax, 3
  00158	4c 89 9b 88 00
	00 00		 mov	 QWORD PTR [rbx+136], r11
  0015f	48 33 d0	 xor	 rdx, rax
  00162	49 8b c2	 mov	 rax, r10
  00165	49 33 d1	 xor	 rdx, r9
  00168	48 c1 c9 08	 ror	 rcx, 8
  0016c	48 d1 c8	 ror	 rax, 1
  0016f	48 33 c8	 xor	 rcx, rax
  00172	49 8b c2	 mov	 rax, r10
  00175	48 c1 e8 07	 shr	 rax, 7
  00179	48 33 c8	 xor	 rcx, rax
  0017c	49 8b c3	 mov	 rax, r11
  0017f	48 03 d1	 add	 rdx, rcx
  00182	48 03 53 58	 add	 rdx, QWORD PTR [rbx+88]
  00186	49 03 d0	 add	 rdx, r8
  00189	4d 8b c3	 mov	 r8, r11
  0018c	49 c1 eb 06	 shr	 r11, 6
  00190	49 c1 c8 13	 ror	 r8, 19
  00194	48 c1 c0 03	 rol	 rax, 3
  00198	48 89 93 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rdx
  0019f	48 8b 53 20	 mov	 rdx, QWORD PTR [rbx+32]
  001a3	4c 33 c0	 xor	 r8, rax
  001a6	4d 33 c3	 xor	 r8, r11
  001a9	48 8b ca	 mov	 rcx, rdx
  001ac	48 8b c2	 mov	 rax, rdx
  001af	48 c1 c9 08	 ror	 rcx, 8
  001b3	48 d1 c8	 ror	 rax, 1
  001b6	48 c1 ea 07	 shr	 rdx, 7
  001ba	48 33 c8	 xor	 rcx, rax
  001bd	48 33 ca	 xor	 rcx, rdx
  001c0	4c 03 c1	 add	 r8, rcx
  001c3	4c 03 43 60	 add	 r8, QWORD PTR [rbx+96]
  001c7	4d 03 c2	 add	 r8, r10
  001ca	4c 89 83 98 00
	00 00		 mov	 QWORD PTR [rbx+152], r8
  001d1	48 83 c3 20	 add	 rbx, 32			; 00000020H
  001d5	48 ff cf	 dec	 rdi
  001d8	0f 85 d2 fe ff
	ff		 jne	 $LL9@sha512_tra

; 148  :     }
; 149  :     for (i = 0; i < 8; ++i) {
; 150  :         S[i] = sha_info->digest[i];

  001de	4d 8b 65 60	 mov	 r12, QWORD PTR [r13+96]
  001e2	4d 8b 9d 80 00
	00 00		 mov	 r11, QWORD PTR [r13+128]
  001e9	4d 8b 8d 90 00
	00 00		 mov	 r9, QWORD PTR [r13+144]
  001f0	4d 8b 95 88 00
	00 00		 mov	 r10, QWORD PTR [r13+136]
  001f7	49 8b 75 68	 mov	 rsi, QWORD PTR [r13+104]
  001fb	49 8b 7d 70	 mov	 rdi, QWORD PTR [r13+112]
  001ff	49 8b 5d 78	 mov	 rbx, QWORD PTR [r13+120]

; 151  :     }
; 152  : 
; 153  :     /* Compress */
; 154  : #define RND(a,b,c,d,e,f,g,h,i,ki)                    \
; 155  :      t0 = h + Sigma1(e) + Ch(e, f, g) + ki + W[i];   \
; 156  :      t1 = Sigma0(a) + Maj(a, b, c);                  \
; 157  :      d += t0;                                        \
; 158  :      h  = t0 + t1;
; 159  : 
; 160  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],0,Py_ULL(0x428a2f98d728ae22));

  00203	49 8b cb	 mov	 rcx, r11
  00206	49 8b c3	 mov	 rax, r11
  00209	48 c1 c1 17	 rol	 rcx, 23
  0020d	48 c1 c8 12	 ror	 rax, 18
  00211	49 8b d2	 mov	 rdx, r10
  00214	48 33 c8	 xor	 rcx, rax
  00217	49 33 d1	 xor	 rdx, r9
  0021a	49 8b c3	 mov	 rax, r11
  0021d	48 c1 c8 0e	 ror	 rax, 14
  00221	49 23 d3	 and	 rdx, r11
  00224	4c 8b c6	 mov	 r8, rsi
  00227	48 33 c8	 xor	 rcx, rax
  0022a	49 33 d1	 xor	 rdx, r9
  0022d	4d 0b c4	 or	 r8, r12
  00230	48 03 4c 24 20	 add	 rcx, QWORD PTR W$[rsp]
  00235	4c 23 c7	 and	 r8, rdi
  00238	48 b8 22 ae 28
	d7 98 2f 8a 42	 mov	 rax, 4794697086780616226 ; 428a2f98d728ae22H
  00242	48 03 d1	 add	 rdx, rcx
  00245	49 8b cc	 mov	 rcx, r12
  00248	48 03 d0	 add	 rdx, rax
  0024b	49 8b c4	 mov	 rax, r12
  0024e	49 03 95 98 00
	00 00		 add	 rdx, QWORD PTR [r13+152]
  00255	48 03 da	 add	 rbx, rdx
  00258	48 c1 c1 1e	 rol	 rcx, 30
  0025c	48 c1 c8 1c	 ror	 rax, 28
  00260	48 33 c8	 xor	 rcx, rax
  00263	49 8b c4	 mov	 rax, r12
  00266	48 c1 c0 19	 rol	 rax, 25
  0026a	48 33 c8	 xor	 rcx, rax
  0026d	48 8b c6	 mov	 rax, rsi
  00270	49 23 c4	 and	 rax, r12
  00273	4c 0b c0	 or	 r8, rax
  00276	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 161  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],1,Py_ULL(0x7137449123ef65cd));

  0027a	48 8b cb	 mov	 rcx, rbx
  0027d	4c 03 c0	 add	 r8, rax
  00280	48 c1 c1 17	 rol	 rcx, 23
  00284	48 8b c3	 mov	 rax, rbx
  00287	48 c1 c8 12	 ror	 rax, 18
  0028b	49 8b d2	 mov	 rdx, r10
  0028e	48 33 c8	 xor	 rcx, rax
  00291	49 33 d3	 xor	 rdx, r11
  00294	48 8b c3	 mov	 rax, rbx
  00297	48 c1 c8 0e	 ror	 rax, 14
  0029b	48 23 d3	 and	 rdx, rbx
  0029e	48 33 c8	 xor	 rcx, rax
  002a1	49 33 d2	 xor	 rdx, r10
  002a4	48 b8 cd 65 ef
	23 91 44 37 71	 mov	 rax, 8158064640168781261 ; 7137449123ef65cdH
  002ae	48 03 4c 24 28	 add	 rcx, QWORD PTR W$[rsp+8]
  002b3	48 03 d1	 add	 rdx, rcx
  002b6	49 8b c8	 mov	 rcx, r8
  002b9	48 03 d0	 add	 rdx, rax
  002bc	49 8b c0	 mov	 rax, r8
  002bf	49 03 d1	 add	 rdx, r9
  002c2	4d 8b cc	 mov	 r9, r12
  002c5	48 03 fa	 add	 rdi, rdx
  002c8	48 c1 c1 1e	 rol	 rcx, 30
  002cc	48 c1 c8 1c	 ror	 rax, 28
  002d0	48 33 c8	 xor	 rcx, rax
  002d3	4d 0b c8	 or	 r9, r8
  002d6	49 8b c0	 mov	 rax, r8
  002d9	48 c1 c0 19	 rol	 rax, 25
  002dd	4c 23 ce	 and	 r9, rsi
  002e0	48 33 c8	 xor	 rcx, rax
  002e3	49 8b c4	 mov	 rax, r12
  002e6	49 23 c0	 and	 rax, r8
  002e9	4c 0b c8	 or	 r9, rax
  002ec	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 162  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],2,Py_ULL(0xb5c0fbcfec4d3b2f));

  002f0	48 8b cf	 mov	 rcx, rdi
  002f3	4c 03 c8	 add	 r9, rax
  002f6	48 c1 c1 17	 rol	 rcx, 23
  002fa	48 8b c7	 mov	 rax, rdi
  002fd	48 c1 c8 12	 ror	 rax, 18
  00301	48 33 c8	 xor	 rcx, rax
  00304	48 8b c7	 mov	 rax, rdi
  00307	48 c1 c8 0e	 ror	 rax, 14
  0030b	48 8b d3	 mov	 rdx, rbx
  0030e	48 33 c8	 xor	 rcx, rax
  00311	49 33 d3	 xor	 rdx, r11
  00314	48 b8 2f 3b 4d
	ec cf fb c0 b5	 mov	 rax, -5349999486874862801 ; b5c0fbcfec4d3b2fH
  0031e	48 03 4c 24 30	 add	 rcx, QWORD PTR W$[rsp+16]
  00323	48 23 d7	 and	 rdx, rdi
  00326	49 33 d3	 xor	 rdx, r11
  00329	48 03 d1	 add	 rdx, rcx
  0032c	49 8b c9	 mov	 rcx, r9
  0032f	48 03 d0	 add	 rdx, rax
  00332	49 8b c1	 mov	 rax, r9
  00335	49 03 d2	 add	 rdx, r10
  00338	4d 8b d1	 mov	 r10, r9
  0033b	48 03 f2	 add	 rsi, rdx
  0033e	48 c1 c1 1e	 rol	 rcx, 30
  00342	48 c1 c8 1c	 ror	 rax, 28
  00346	48 33 c8	 xor	 rcx, rax
  00349	4d 0b d0	 or	 r10, r8
  0034c	49 8b c1	 mov	 rax, r9
  0034f	48 c1 c0 19	 rol	 rax, 25
  00353	4d 23 d4	 and	 r10, r12
  00356	48 33 c8	 xor	 rcx, rax
  00359	49 8b c1	 mov	 rax, r9
  0035c	49 23 c0	 and	 rax, r8
  0035f	4c 0b d0	 or	 r10, rax
  00362	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 163  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],3,Py_ULL(0xe9b5dba58189dbbc));

  00366	48 8b ce	 mov	 rcx, rsi
  00369	4c 03 d0	 add	 r10, rax
  0036c	48 c1 c1 17	 rol	 rcx, 23
  00370	48 8b c6	 mov	 rax, rsi
  00373	48 c1 c8 12	 ror	 rax, 18
  00377	48 8b d3	 mov	 rdx, rbx
  0037a	48 33 c8	 xor	 rcx, rax
  0037d	48 33 d7	 xor	 rdx, rdi
  00380	48 8b c6	 mov	 rax, rsi
  00383	48 23 d6	 and	 rdx, rsi
  00386	48 c1 c8 0e	 ror	 rax, 14
  0038a	48 33 c8	 xor	 rcx, rax
  0038d	48 33 d3	 xor	 rdx, rbx
  00390	48 b8 bc db 89
	81 a5 db b5 e9	 mov	 rax, -1606136188198331460 ; e9b5dba58189dbbcH
  0039a	48 03 4c 24 38	 add	 rcx, QWORD PTR W$[rsp+24]
  0039f	48 03 d1	 add	 rdx, rcx
  003a2	49 8b ca	 mov	 rcx, r10
  003a5	48 03 d0	 add	 rdx, rax
  003a8	49 8b c2	 mov	 rax, r10
  003ab	49 03 d3	 add	 rdx, r11
  003ae	4d 8b da	 mov	 r11, r10
  003b1	4c 03 e2	 add	 r12, rdx
  003b4	48 c1 c1 1e	 rol	 rcx, 30
  003b8	48 c1 c8 1c	 ror	 rax, 28
  003bc	48 33 c8	 xor	 rcx, rax
  003bf	4d 0b d9	 or	 r11, r9
  003c2	49 8b c2	 mov	 rax, r10
  003c5	48 c1 c0 19	 rol	 rax, 25
  003c9	4d 23 d8	 and	 r11, r8
  003cc	48 33 c8	 xor	 rcx, rax
  003cf	49 8b c2	 mov	 rax, r10
  003d2	49 23 c1	 and	 rax, r9
  003d5	4c 0b d8	 or	 r11, rax
  003d8	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 164  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],4,Py_ULL(0x3956c25bf348b538));

  003dc	49 8b cc	 mov	 rcx, r12
  003df	4c 03 d8	 add	 r11, rax
  003e2	48 c1 c1 17	 rol	 rcx, 23
  003e6	49 8b c4	 mov	 rax, r12
  003e9	48 c1 c8 12	 ror	 rax, 18
  003ed	48 8b d7	 mov	 rdx, rdi
  003f0	48 33 c8	 xor	 rcx, rax
  003f3	48 33 d6	 xor	 rdx, rsi
  003f6	49 8b c4	 mov	 rax, r12
  003f9	49 23 d4	 and	 rdx, r12
  003fc	48 c1 c8 0e	 ror	 rax, 14
  00400	48 33 c8	 xor	 rcx, rax
  00403	48 33 d7	 xor	 rdx, rdi
  00406	48 b8 38 b5 48
	f3 5b c2 56 39	 mov	 rax, 4131703408338449720 ; 3956c25bf348b538H
  00410	48 03 4c 24 40	 add	 rcx, QWORD PTR W$[rsp+32]
  00415	48 03 d1	 add	 rdx, rcx
  00418	49 8b cb	 mov	 rcx, r11
  0041b	48 03 d0	 add	 rdx, rax
  0041e	48 03 d3	 add	 rdx, rbx
  00421	4c 03 c2	 add	 r8, rdx
  00424	48 c1 c1 1e	 rol	 rcx, 30
  00428	49 8b da	 mov	 rbx, r10
  0042b	49 8b c3	 mov	 rax, r11
  0042e	48 c1 c8 1c	 ror	 rax, 28
  00432	49 0b db	 or	 rbx, r11
  00435	48 33 c8	 xor	 rcx, rax
  00438	49 23 d9	 and	 rbx, r9
  0043b	49 8b c3	 mov	 rax, r11
  0043e	48 c1 c0 19	 rol	 rax, 25
  00442	48 33 c8	 xor	 rcx, rax
  00445	49 8b c2	 mov	 rax, r10
  00448	49 23 c3	 and	 rax, r11
  0044b	48 0b d8	 or	 rbx, rax
  0044e	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 165  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],5,Py_ULL(0x59f111f1b605d019));

  00452	48 8b d6	 mov	 rdx, rsi
  00455	48 03 d8	 add	 rbx, rax
  00458	49 33 d4	 xor	 rdx, r12
  0045b	49 8b c8	 mov	 rcx, r8
  0045e	48 c1 c1 17	 rol	 rcx, 23
  00462	49 23 d0	 and	 rdx, r8
  00465	49 8b c0	 mov	 rax, r8
  00468	48 c1 c8 12	 ror	 rax, 18
  0046c	48 33 d6	 xor	 rdx, rsi
  0046f	48 33 c8	 xor	 rcx, rax
  00472	49 8b c0	 mov	 rax, r8
  00475	48 c1 c8 0e	 ror	 rax, 14
  00479	48 33 c8	 xor	 rcx, rax
  0047c	48 b8 19 d0 05
	b6 f1 11 f1 59	 mov	 rax, 6480981068601479193 ; 59f111f1b605d019H
  00486	48 03 4c 24 48	 add	 rcx, QWORD PTR W$[rsp+40]
  0048b	48 03 d1	 add	 rdx, rcx
  0048e	48 8b cb	 mov	 rcx, rbx
  00491	48 03 d0	 add	 rdx, rax
  00494	48 8b c3	 mov	 rax, rbx
  00497	48 03 d7	 add	 rdx, rdi
  0049a	48 8b fb	 mov	 rdi, rbx
  0049d	4c 03 ca	 add	 r9, rdx
  004a0	48 c1 c1 1e	 rol	 rcx, 30
  004a4	48 c1 c8 1c	 ror	 rax, 28
  004a8	48 33 c8	 xor	 rcx, rax
  004ab	49 0b fb	 or	 rdi, r11
  004ae	48 8b c3	 mov	 rax, rbx
  004b1	48 c1 c0 19	 rol	 rax, 25
  004b5	49 23 fa	 and	 rdi, r10
  004b8	48 33 c8	 xor	 rcx, rax
  004bb	48 8b c3	 mov	 rax, rbx
  004be	49 23 c3	 and	 rax, r11
  004c1	48 0b f8	 or	 rdi, rax
  004c4	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 166  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],6,Py_ULL(0x923f82a4af194f9b));

  004c8	49 8b c9	 mov	 rcx, r9
  004cb	48 03 f8	 add	 rdi, rax
  004ce	48 c1 c1 17	 rol	 rcx, 23
  004d2	49 8b c1	 mov	 rax, r9
  004d5	48 c1 c8 12	 ror	 rax, 18
  004d9	49 8b d4	 mov	 rdx, r12
  004dc	48 33 c8	 xor	 rcx, rax
  004df	49 33 d0	 xor	 rdx, r8
  004e2	49 8b c1	 mov	 rax, r9
  004e5	48 c1 c8 0e	 ror	 rax, 14
  004e9	49 23 d1	 and	 rdx, r9
  004ec	48 33 c8	 xor	 rcx, rax
  004ef	49 33 d4	 xor	 rdx, r12
  004f2	48 b8 9b 4f 19
	af a4 82 3f 92	 mov	 rax, -7908458776815382629 ; 923f82a4af194f9bH
  004fc	48 03 4c 24 50	 add	 rcx, QWORD PTR W$[rsp+48]
  00501	48 03 d1	 add	 rdx, rcx
  00504	48 8b cf	 mov	 rcx, rdi
  00507	48 03 d0	 add	 rdx, rax
  0050a	48 8b c7	 mov	 rax, rdi
  0050d	48 03 d6	 add	 rdx, rsi
  00510	48 8b f3	 mov	 rsi, rbx
  00513	4c 03 d2	 add	 r10, rdx
  00516	48 c1 c1 1e	 rol	 rcx, 30
  0051a	48 c1 c8 1c	 ror	 rax, 28
  0051e	48 33 c8	 xor	 rcx, rax
  00521	48 0b f7	 or	 rsi, rdi
  00524	48 8b c7	 mov	 rax, rdi
  00527	48 c1 c0 19	 rol	 rax, 25
  0052b	49 23 f3	 and	 rsi, r11
  0052e	48 33 c8	 xor	 rcx, rax
  00531	48 8b c3	 mov	 rax, rbx
  00534	48 23 c7	 and	 rax, rdi
  00537	48 0b f0	 or	 rsi, rax
  0053a	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 167  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],7,Py_ULL(0xab1c5ed5da6d8118));

  0053e	49 8b ca	 mov	 rcx, r10
  00541	49 8b d1	 mov	 rdx, r9
  00544	48 03 f0	 add	 rsi, rax
  00547	49 33 d0	 xor	 rdx, r8
  0054a	48 c1 c1 17	 rol	 rcx, 23
  0054e	49 23 d2	 and	 rdx, r10
  00551	49 8b c2	 mov	 rax, r10
  00554	48 c1 c8 12	 ror	 rax, 18
  00558	49 33 d0	 xor	 rdx, r8
  0055b	48 33 c8	 xor	 rcx, rax
  0055e	49 8b c2	 mov	 rax, r10
  00561	48 c1 c8 0e	 ror	 rax, 14
  00565	48 33 c8	 xor	 rcx, rax
  00568	48 b8 18 81 6d
	da d5 5e 1c ab	 mov	 rax, -6116909921290321640 ; ab1c5ed5da6d8118H
  00572	48 03 4c 24 58	 add	 rcx, QWORD PTR W$[rsp+56]
  00577	48 03 d1	 add	 rdx, rcx
  0057a	48 8b ce	 mov	 rcx, rsi
  0057d	48 03 d0	 add	 rdx, rax
  00580	48 8b c6	 mov	 rax, rsi
  00583	49 03 d4	 add	 rdx, r12
  00586	4c 8b e7	 mov	 r12, rdi
  00589	4c 03 da	 add	 r11, rdx
  0058c	48 c1 c1 1e	 rol	 rcx, 30
  00590	48 c1 c8 1c	 ror	 rax, 28
  00594	48 33 c8	 xor	 rcx, rax
  00597	4c 0b e6	 or	 r12, rsi
  0059a	48 8b c6	 mov	 rax, rsi
  0059d	48 c1 c0 19	 rol	 rax, 25
  005a1	4c 23 e3	 and	 r12, rbx
  005a4	48 33 c8	 xor	 rcx, rax
  005a7	48 8b c7	 mov	 rax, rdi
  005aa	48 23 c6	 and	 rax, rsi
  005ad	4c 0b e0	 or	 r12, rax
  005b0	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 168  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],8,Py_ULL(0xd807aa98a3030242));

  005b4	49 8b cb	 mov	 rcx, r11
  005b7	4c 03 e0	 add	 r12, rax
  005ba	48 c1 c1 17	 rol	 rcx, 23
  005be	49 8b c3	 mov	 rax, r11
  005c1	48 c1 c8 12	 ror	 rax, 18
  005c5	49 8b d2	 mov	 rdx, r10
  005c8	48 33 c8	 xor	 rcx, rax
  005cb	49 33 d1	 xor	 rdx, r9
  005ce	49 8b c3	 mov	 rax, r11
  005d1	48 c1 c8 0e	 ror	 rax, 14
  005d5	49 23 d3	 and	 rdx, r11
  005d8	48 33 c8	 xor	 rcx, rax
  005db	49 33 d1	 xor	 rdx, r9
  005de	48 b8 42 02 03
	a3 98 aa 07 d8	 mov	 rax, -2880145864133508542 ; d807aa98a3030242H
  005e8	48 03 4c 24 60	 add	 rcx, QWORD PTR W$[rsp+64]
  005ed	48 03 d1	 add	 rdx, rcx
  005f0	49 8b cc	 mov	 rcx, r12
  005f3	48 03 d0	 add	 rdx, rax
  005f6	49 8b c4	 mov	 rax, r12
  005f9	49 03 d0	 add	 rdx, r8
  005fc	4c 8b c6	 mov	 r8, rsi
  005ff	48 03 da	 add	 rbx, rdx
  00602	48 c1 c1 1e	 rol	 rcx, 30
  00606	48 c1 c8 1c	 ror	 rax, 28
  0060a	48 33 c8	 xor	 rcx, rax
  0060d	4d 0b c4	 or	 r8, r12
  00610	49 8b c4	 mov	 rax, r12
  00613	48 c1 c0 19	 rol	 rax, 25
  00617	4c 23 c7	 and	 r8, rdi
  0061a	48 33 c8	 xor	 rcx, rax
  0061d	48 8b c6	 mov	 rax, rsi
  00620	49 23 c4	 and	 rax, r12
  00623	4c 0b c0	 or	 r8, rax
  00626	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 169  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],9,Py_ULL(0x12835b0145706fbe));

  0062a	48 8b cb	 mov	 rcx, rbx
  0062d	4c 03 c0	 add	 r8, rax
  00630	48 c1 c1 17	 rol	 rcx, 23
  00634	48 8b c3	 mov	 rax, rbx
  00637	48 c1 c8 12	 ror	 rax, 18
  0063b	49 8b d2	 mov	 rdx, r10
  0063e	48 33 c8	 xor	 rcx, rax
  00641	48 8b c3	 mov	 rax, rbx
  00644	49 33 d3	 xor	 rdx, r11
  00647	48 c1 c8 0e	 ror	 rax, 14
  0064b	48 33 c8	 xor	 rcx, rax
  0064e	48 23 d3	 and	 rdx, rbx
  00651	48 03 4c 24 68	 add	 rcx, QWORD PTR W$[rsp+72]
  00656	49 33 d2	 xor	 rdx, r10
  00659	48 b8 be 6f 70
	45 01 5b 83 12	 mov	 rax, 1334009975649890238 ; 12835b0145706fbeH
  00663	48 03 d1	 add	 rdx, rcx
  00666	49 8b c8	 mov	 rcx, r8
  00669	48 03 d0	 add	 rdx, rax
  0066c	49 8b c0	 mov	 rax, r8
  0066f	49 03 d1	 add	 rdx, r9
  00672	4d 8b cc	 mov	 r9, r12
  00675	48 03 fa	 add	 rdi, rdx
  00678	48 c1 c1 1e	 rol	 rcx, 30
  0067c	48 c1 c8 1c	 ror	 rax, 28
  00680	48 33 c8	 xor	 rcx, rax
  00683	4d 0b c8	 or	 r9, r8
  00686	49 8b c0	 mov	 rax, r8
  00689	48 c1 c0 19	 rol	 rax, 25
  0068d	4c 23 ce	 and	 r9, rsi
  00690	48 33 c8	 xor	 rcx, rax
  00693	49 8b c4	 mov	 rax, r12
  00696	49 23 c0	 and	 rax, r8
  00699	4c 0b c8	 or	 r9, rax
  0069c	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 170  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],10,Py_ULL(0x243185be4ee4b28c));

  006a0	48 8b cf	 mov	 rcx, rdi
  006a3	4c 03 c8	 add	 r9, rax
  006a6	48 c1 c1 17	 rol	 rcx, 23
  006aa	48 8b c7	 mov	 rax, rdi
  006ad	48 c1 c8 12	 ror	 rax, 18
  006b1	48 8b d3	 mov	 rdx, rbx
  006b4	48 33 c8	 xor	 rcx, rax
  006b7	49 33 d3	 xor	 rdx, r11
  006ba	48 8b c7	 mov	 rax, rdi
  006bd	48 c1 c8 0e	 ror	 rax, 14
  006c1	48 23 d7	 and	 rdx, rdi
  006c4	48 33 c8	 xor	 rcx, rax
  006c7	49 33 d3	 xor	 rdx, r11
  006ca	48 b8 8c b2 e4
	4e be 85 31 24	 mov	 rax, 2608012711638119052 ; 243185be4ee4b28cH
  006d4	48 03 4c 24 70	 add	 rcx, QWORD PTR W$[rsp+80]
  006d9	48 03 d1	 add	 rdx, rcx
  006dc	49 8b c9	 mov	 rcx, r9
  006df	48 03 d0	 add	 rdx, rax
  006e2	49 8b c1	 mov	 rax, r9
  006e5	49 03 d2	 add	 rdx, r10
  006e8	4d 8b d1	 mov	 r10, r9
  006eb	48 03 f2	 add	 rsi, rdx
  006ee	48 c1 c1 1e	 rol	 rcx, 30
  006f2	48 c1 c8 1c	 ror	 rax, 28
  006f6	48 33 c8	 xor	 rcx, rax
  006f9	4d 0b d0	 or	 r10, r8
  006fc	49 8b c1	 mov	 rax, r9
  006ff	48 c1 c0 19	 rol	 rax, 25
  00703	4d 23 d4	 and	 r10, r12
  00706	48 33 c8	 xor	 rcx, rax
  00709	49 8b c1	 mov	 rax, r9
  0070c	49 23 c0	 and	 rax, r8
  0070f	4c 0b d0	 or	 r10, rax
  00712	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 171  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],11,Py_ULL(0x550c7dc3d5ffb4e2));

  00716	48 8b ce	 mov	 rcx, rsi
  00719	4c 03 d0	 add	 r10, rax
  0071c	48 c1 c1 17	 rol	 rcx, 23
  00720	48 8b c6	 mov	 rax, rsi
  00723	48 c1 c8 12	 ror	 rax, 18
  00727	48 8b d3	 mov	 rdx, rbx
  0072a	48 33 c8	 xor	 rcx, rax
  0072d	48 33 d7	 xor	 rdx, rdi
  00730	48 8b c6	 mov	 rax, rsi
  00733	48 c1 c8 0e	 ror	 rax, 14
  00737	48 23 d6	 and	 rdx, rsi
  0073a	48 33 c8	 xor	 rcx, rax
  0073d	48 33 d3	 xor	 rdx, rbx
  00740	48 b8 e2 b4 ff
	d5 c3 7d 0c 55	 mov	 rax, 6128411473006802146 ; 550c7dc3d5ffb4e2H
  0074a	48 03 4c 24 78	 add	 rcx, QWORD PTR W$[rsp+88]
  0074f	48 03 d1	 add	 rdx, rcx
  00752	49 8b ca	 mov	 rcx, r10
  00755	48 03 d0	 add	 rdx, rax
  00758	49 8b c2	 mov	 rax, r10
  0075b	49 03 d3	 add	 rdx, r11
  0075e	4c 03 e2	 add	 r12, rdx
  00761	48 c1 c1 1e	 rol	 rcx, 30
  00765	48 c1 c8 1c	 ror	 rax, 28
  00769	48 33 c8	 xor	 rcx, rax
  0076c	49 8b c2	 mov	 rax, r10
  0076f	48 c1 c0 19	 rol	 rax, 25
  00773	4d 8b da	 mov	 r11, r10
  00776	48 33 c8	 xor	 rcx, rax
  00779	4d 0b d9	 or	 r11, r9
  0077c	49 8b c2	 mov	 rax, r10
  0077f	49 23 c1	 and	 rax, r9
  00782	4d 23 d8	 and	 r11, r8
  00785	4c 0b d8	 or	 r11, rax
  00788	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 172  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],12,Py_ULL(0x72be5d74f27b896f));

  0078c	48 8b d7	 mov	 rdx, rdi
  0078f	4c 03 d8	 add	 r11, rax
  00792	48 33 d6	 xor	 rdx, rsi
  00795	49 8b cc	 mov	 rcx, r12
  00798	48 c1 c1 17	 rol	 rcx, 23
  0079c	49 23 d4	 and	 rdx, r12
  0079f	49 8b c4	 mov	 rax, r12
  007a2	48 c1 c8 12	 ror	 rax, 18
  007a6	48 33 d7	 xor	 rdx, rdi
  007a9	48 33 c8	 xor	 rcx, rax
  007ac	49 8b c4	 mov	 rax, r12
  007af	48 c1 c8 0e	 ror	 rax, 14
  007b3	48 33 c8	 xor	 rcx, rax
  007b6	48 b8 6f 89 7b
	f2 74 5d be 72	 mov	 rax, 8268148722764581231 ; 72be5d74f27b896fH
  007c0	48 03 4d 80	 add	 rcx, QWORD PTR W$[rbp-160]
  007c4	48 03 d1	 add	 rdx, rcx
  007c7	49 8b cb	 mov	 rcx, r11
  007ca	48 03 d0	 add	 rdx, rax
  007cd	49 8b c3	 mov	 rax, r11
  007d0	48 03 d3	 add	 rdx, rbx
  007d3	49 8b da	 mov	 rbx, r10
  007d6	4c 03 c2	 add	 r8, rdx
  007d9	48 c1 c1 1e	 rol	 rcx, 30
  007dd	48 c1 c8 1c	 ror	 rax, 28
  007e1	48 33 c8	 xor	 rcx, rax
  007e4	49 0b db	 or	 rbx, r11
  007e7	49 8b c3	 mov	 rax, r11
  007ea	48 c1 c0 19	 rol	 rax, 25
  007ee	49 23 d9	 and	 rbx, r9
  007f1	48 33 c8	 xor	 rcx, rax
  007f4	49 8b c2	 mov	 rax, r10
  007f7	49 23 c3	 and	 rax, r11
  007fa	48 0b d8	 or	 rbx, rax
  007fd	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 173  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],13,Py_ULL(0x80deb1fe3b1696b1));

  00801	49 8b c8	 mov	 rcx, r8
  00804	48 03 d8	 add	 rbx, rax
  00807	48 c1 c1 17	 rol	 rcx, 23
  0080b	49 8b c0	 mov	 rax, r8
  0080e	48 c1 c8 12	 ror	 rax, 18
  00812	48 8b d6	 mov	 rdx, rsi
  00815	48 33 c8	 xor	 rcx, rax
  00818	49 33 d4	 xor	 rdx, r12
  0081b	49 8b c0	 mov	 rax, r8
  0081e	48 c1 c8 0e	 ror	 rax, 14
  00822	49 23 d0	 and	 rdx, r8
  00825	48 33 c8	 xor	 rcx, rax
  00828	48 33 d6	 xor	 rdx, rsi
  0082b	48 b8 b1 96 16
	3b fe b1 de 80	 mov	 rax, -9160688886553864527 ; 80deb1fe3b1696b1H
  00835	48 03 4d 88	 add	 rcx, QWORD PTR W$[rbp-152]
  00839	48 03 d1	 add	 rdx, rcx
  0083c	48 8b cb	 mov	 rcx, rbx
  0083f	48 03 d0	 add	 rdx, rax
  00842	48 8b c3	 mov	 rax, rbx
  00845	48 03 d7	 add	 rdx, rdi
  00848	48 8b fb	 mov	 rdi, rbx
  0084b	4c 03 ca	 add	 r9, rdx
  0084e	48 c1 c1 1e	 rol	 rcx, 30
  00852	48 c1 c8 1c	 ror	 rax, 28
  00856	48 33 c8	 xor	 rcx, rax
  00859	49 0b fb	 or	 rdi, r11
  0085c	48 8b c3	 mov	 rax, rbx
  0085f	48 c1 c0 19	 rol	 rax, 25
  00863	49 23 fa	 and	 rdi, r10
  00866	48 33 c8	 xor	 rcx, rax
  00869	48 8b c3	 mov	 rax, rbx
  0086c	49 23 c3	 and	 rax, r11
  0086f	48 0b f8	 or	 rdi, rax
  00872	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 174  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],14,Py_ULL(0x9bdc06a725c71235));

  00876	49 8b c9	 mov	 rcx, r9
  00879	48 03 f8	 add	 rdi, rax
  0087c	48 c1 c1 17	 rol	 rcx, 23
  00880	49 8b c1	 mov	 rax, r9
  00883	48 c1 c8 12	 ror	 rax, 18
  00887	49 8b d4	 mov	 rdx, r12
  0088a	48 33 c8	 xor	 rcx, rax
  0088d	49 33 d0	 xor	 rdx, r8
  00890	49 8b c1	 mov	 rax, r9
  00893	48 c1 c8 0e	 ror	 rax, 14
  00897	49 23 d1	 and	 rdx, r9
  0089a	48 33 c8	 xor	 rcx, rax
  0089d	49 33 d4	 xor	 rdx, r12
  008a0	48 b8 35 12 c7
	25 a7 06 dc 9b	 mov	 rax, -7215885187991268811 ; 9bdc06a725c71235H
  008aa	48 03 4d 90	 add	 rcx, QWORD PTR W$[rbp-144]
  008ae	48 03 d1	 add	 rdx, rcx
  008b1	48 8b cf	 mov	 rcx, rdi
  008b4	48 03 d0	 add	 rdx, rax
  008b7	48 8b c7	 mov	 rax, rdi
  008ba	48 03 d6	 add	 rdx, rsi
  008bd	48 8b f3	 mov	 rsi, rbx
  008c0	4c 03 d2	 add	 r10, rdx
  008c3	48 c1 c1 1e	 rol	 rcx, 30
  008c7	48 c1 c8 1c	 ror	 rax, 28
  008cb	48 33 c8	 xor	 rcx, rax
  008ce	48 0b f7	 or	 rsi, rdi
  008d1	48 8b c7	 mov	 rax, rdi
  008d4	48 c1 c0 19	 rol	 rax, 25
  008d8	49 23 f3	 and	 rsi, r11
  008db	48 33 c8	 xor	 rcx, rax
  008de	48 8b c3	 mov	 rax, rbx
  008e1	48 23 c7	 and	 rax, rdi
  008e4	48 0b f0	 or	 rsi, rax
  008e7	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 175  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],15,Py_ULL(0xc19bf174cf692694));

  008eb	49 8b ca	 mov	 rcx, r10
  008ee	48 03 f0	 add	 rsi, rax
  008f1	48 c1 c1 17	 rol	 rcx, 23
  008f5	49 8b c2	 mov	 rax, r10
  008f8	48 c1 c8 12	 ror	 rax, 18
  008fc	49 8b d1	 mov	 rdx, r9
  008ff	48 33 c8	 xor	 rcx, rax
  00902	49 33 d0	 xor	 rdx, r8
  00905	49 8b c2	 mov	 rax, r10
  00908	48 c1 c8 0e	 ror	 rax, 14
  0090c	49 23 d2	 and	 rdx, r10
  0090f	48 33 c8	 xor	 rcx, rax
  00912	49 33 d0	 xor	 rdx, r8
  00915	48 b8 94 26 69
	cf 74 f1 9b c1	 mov	 rax, -4495734319001033068 ; c19bf174cf692694H
  0091f	48 03 4d 98	 add	 rcx, QWORD PTR W$[rbp-136]
  00923	48 03 d1	 add	 rdx, rcx
  00926	48 8b ce	 mov	 rcx, rsi
  00929	48 03 d0	 add	 rdx, rax
  0092c	48 8b c6	 mov	 rax, rsi
  0092f	49 03 d4	 add	 rdx, r12
  00932	4c 8b e7	 mov	 r12, rdi
  00935	4c 03 da	 add	 r11, rdx
  00938	48 c1 c1 1e	 rol	 rcx, 30
  0093c	48 c1 c8 1c	 ror	 rax, 28
  00940	48 33 c8	 xor	 rcx, rax
  00943	4c 0b e6	 or	 r12, rsi
  00946	48 8b c6	 mov	 rax, rsi
  00949	48 c1 c0 19	 rol	 rax, 25
  0094d	4c 23 e3	 and	 r12, rbx
  00950	48 33 c8	 xor	 rcx, rax
  00953	48 8b c7	 mov	 rax, rdi
  00956	48 23 c6	 and	 rax, rsi
  00959	4c 0b e0	 or	 r12, rax
  0095c	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 176  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],16,Py_ULL(0xe49b69c19ef14ad2));

  00960	49 8b cb	 mov	 rcx, r11
  00963	4c 03 e0	 add	 r12, rax
  00966	48 c1 c1 17	 rol	 rcx, 23
  0096a	49 8b c3	 mov	 rax, r11
  0096d	48 c1 c8 12	 ror	 rax, 18
  00971	49 8b d2	 mov	 rdx, r10
  00974	48 33 c8	 xor	 rcx, rax
  00977	49 33 d1	 xor	 rdx, r9
  0097a	49 8b c3	 mov	 rax, r11
  0097d	48 c1 c8 0e	 ror	 rax, 14
  00981	49 23 d3	 and	 rdx, r11
  00984	48 33 c8	 xor	 rcx, rax
  00987	49 33 d1	 xor	 rdx, r9
  0098a	48 b8 d2 4a f1
	9e c1 69 9b e4	 mov	 rax, -1973867731355612462 ; e49b69c19ef14ad2H
  00994	48 03 4d a0	 add	 rcx, QWORD PTR W$[rbp-128]
  00998	48 03 d1	 add	 rdx, rcx
  0099b	48 03 d0	 add	 rdx, rax
  0099e	49 03 d0	 add	 rdx, r8
  009a1	4c 8b c6	 mov	 r8, rsi
  009a4	49 8b cc	 mov	 rcx, r12
  009a7	48 03 da	 add	 rbx, rdx
  009aa	48 c1 c1 1e	 rol	 rcx, 30
  009ae	4d 0b c4	 or	 r8, r12
  009b1	4c 23 c7	 and	 r8, rdi
  009b4	49 8b c4	 mov	 rax, r12
  009b7	48 c1 c8 1c	 ror	 rax, 28
  009bb	48 33 c8	 xor	 rcx, rax
  009be	49 8b c4	 mov	 rax, r12
  009c1	48 c1 c0 19	 rol	 rax, 25
  009c5	48 33 c8	 xor	 rcx, rax
  009c8	48 8b c6	 mov	 rax, rsi
  009cb	49 23 c4	 and	 rax, r12
  009ce	4c 0b c0	 or	 r8, rax
  009d1	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 177  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],17,Py_ULL(0xefbe4786384f25e3));

  009d5	49 8b d2	 mov	 rdx, r10
  009d8	4c 03 c0	 add	 r8, rax
  009db	49 33 d3	 xor	 rdx, r11
  009de	48 8b cb	 mov	 rcx, rbx
  009e1	48 c1 c1 17	 rol	 rcx, 23
  009e5	48 23 d3	 and	 rdx, rbx
  009e8	48 8b c3	 mov	 rax, rbx
  009eb	48 c1 c8 12	 ror	 rax, 18
  009ef	49 33 d2	 xor	 rdx, r10
  009f2	48 33 c8	 xor	 rcx, rax
  009f5	48 8b c3	 mov	 rax, rbx
  009f8	48 c1 c8 0e	 ror	 rax, 14
  009fc	48 33 c8	 xor	 rcx, rax
  009ff	48 b8 e3 25 4f
	38 86 47 be ef	 mov	 rax, -1171420211273849373 ; efbe4786384f25e3H
  00a09	48 03 4d a8	 add	 rcx, QWORD PTR W$[rbp-120]
  00a0d	48 03 d1	 add	 rdx, rcx
  00a10	49 8b c8	 mov	 rcx, r8
  00a13	48 03 d0	 add	 rdx, rax
  00a16	49 8b c0	 mov	 rax, r8
  00a19	49 03 d1	 add	 rdx, r9
  00a1c	4d 8b cc	 mov	 r9, r12
  00a1f	48 03 fa	 add	 rdi, rdx
  00a22	48 c1 c1 1e	 rol	 rcx, 30
  00a26	48 c1 c8 1c	 ror	 rax, 28
  00a2a	48 33 c8	 xor	 rcx, rax
  00a2d	4d 0b c8	 or	 r9, r8
  00a30	49 8b c0	 mov	 rax, r8
  00a33	48 c1 c0 19	 rol	 rax, 25
  00a37	4c 23 ce	 and	 r9, rsi
  00a3a	48 33 c8	 xor	 rcx, rax
  00a3d	49 8b c4	 mov	 rax, r12
  00a40	49 23 c0	 and	 rax, r8
  00a43	4c 0b c8	 or	 r9, rax
  00a46	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 178  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],18,Py_ULL(0x0fc19dc68b8cd5b5));

  00a4a	48 8b cf	 mov	 rcx, rdi
  00a4d	4c 03 c8	 add	 r9, rax
  00a50	48 c1 c1 17	 rol	 rcx, 23
  00a54	48 8b c7	 mov	 rax, rdi
  00a57	48 c1 c8 12	 ror	 rax, 18
  00a5b	48 8b d3	 mov	 rdx, rbx
  00a5e	48 33 c8	 xor	 rcx, rax
  00a61	49 33 d3	 xor	 rdx, r11
  00a64	48 8b c7	 mov	 rax, rdi
  00a67	48 c1 c8 0e	 ror	 rax, 14
  00a6b	48 23 d7	 and	 rdx, rdi
  00a6e	48 33 c8	 xor	 rcx, rax
  00a71	49 33 d3	 xor	 rdx, r11
  00a74	48 b8 b5 d5 8c
	8b c6 9d c1 0f	 mov	 rax, 1135362057144423861 ; 0fc19dc68b8cd5b5H
  00a7e	48 03 4d b0	 add	 rcx, QWORD PTR W$[rbp-112]
  00a82	48 03 d1	 add	 rdx, rcx
  00a85	49 8b c9	 mov	 rcx, r9
  00a88	48 03 d0	 add	 rdx, rax
  00a8b	49 8b c1	 mov	 rax, r9
  00a8e	49 03 d2	 add	 rdx, r10
  00a91	4d 8b d1	 mov	 r10, r9
  00a94	48 03 f2	 add	 rsi, rdx
  00a97	48 c1 c1 1e	 rol	 rcx, 30
  00a9b	48 c1 c8 1c	 ror	 rax, 28
  00a9f	48 33 c8	 xor	 rcx, rax
  00aa2	49 8b c1	 mov	 rax, r9
  00aa5	4d 0b d0	 or	 r10, r8
  00aa8	48 c1 c0 19	 rol	 rax, 25
  00aac	48 33 c8	 xor	 rcx, rax
  00aaf	4d 23 d4	 and	 r10, r12
  00ab2	49 8b c1	 mov	 rax, r9
  00ab5	49 23 c0	 and	 rax, r8
  00ab8	4c 0b d0	 or	 r10, rax
  00abb	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 179  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],19,Py_ULL(0x240ca1cc77ac9c65));

  00abf	48 8b d3	 mov	 rdx, rbx
  00ac2	4c 03 d0	 add	 r10, rax
  00ac5	48 33 d7	 xor	 rdx, rdi
  00ac8	48 8b ce	 mov	 rcx, rsi
  00acb	48 c1 c1 17	 rol	 rcx, 23
  00acf	48 23 d6	 and	 rdx, rsi
  00ad2	48 8b c6	 mov	 rax, rsi
  00ad5	48 c1 c8 12	 ror	 rax, 18
  00ad9	48 33 d3	 xor	 rdx, rbx
  00adc	48 33 c8	 xor	 rcx, rax
  00adf	48 8b c6	 mov	 rax, rsi
  00ae2	48 c1 c8 0e	 ror	 rax, 14
  00ae6	48 33 c8	 xor	 rcx, rax
  00ae9	48 b8 65 9c ac
	77 cc a1 0c 24	 mov	 rax, 2597628984639134821 ; 240ca1cc77ac9c65H
  00af3	48 03 4d b8	 add	 rcx, QWORD PTR W$[rbp-104]
  00af7	48 03 d1	 add	 rdx, rcx
  00afa	49 8b ca	 mov	 rcx, r10
  00afd	48 03 d0	 add	 rdx, rax
  00b00	49 8b c2	 mov	 rax, r10
  00b03	49 03 d3	 add	 rdx, r11
  00b06	4d 8b da	 mov	 r11, r10
  00b09	4c 03 e2	 add	 r12, rdx
  00b0c	48 c1 c1 1e	 rol	 rcx, 30
  00b10	48 c1 c8 1c	 ror	 rax, 28
  00b14	48 33 c8	 xor	 rcx, rax
  00b17	4d 0b d9	 or	 r11, r9
  00b1a	49 8b c2	 mov	 rax, r10
  00b1d	48 c1 c0 19	 rol	 rax, 25
  00b21	4d 23 d8	 and	 r11, r8
  00b24	48 33 c8	 xor	 rcx, rax
  00b27	49 8b c2	 mov	 rax, r10
  00b2a	49 23 c1	 and	 rax, r9
  00b2d	4c 0b d8	 or	 r11, rax
  00b30	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 180  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],20,Py_ULL(0x2de92c6f592b0275));

  00b34	49 8b cc	 mov	 rcx, r12
  00b37	4c 03 d8	 add	 r11, rax
  00b3a	48 c1 c1 17	 rol	 rcx, 23
  00b3e	49 8b c4	 mov	 rax, r12
  00b41	48 c1 c8 12	 ror	 rax, 18
  00b45	48 8b d7	 mov	 rdx, rdi
  00b48	48 33 c8	 xor	 rcx, rax
  00b4b	48 33 d6	 xor	 rdx, rsi
  00b4e	49 8b c4	 mov	 rax, r12
  00b51	48 c1 c8 0e	 ror	 rax, 14
  00b55	49 23 d4	 and	 rdx, r12
  00b58	48 33 c8	 xor	 rcx, rax
  00b5b	48 33 d7	 xor	 rdx, rdi
  00b5e	48 b8 75 02 2b
	59 6f 2c e9 2d	 mov	 rax, 3308224258029322869 ; 2de92c6f592b0275H
  00b68	48 03 4d c0	 add	 rcx, QWORD PTR W$[rbp-96]
  00b6c	48 03 d1	 add	 rdx, rcx
  00b6f	49 8b cb	 mov	 rcx, r11
  00b72	48 03 d0	 add	 rdx, rax
  00b75	49 8b c3	 mov	 rax, r11
  00b78	48 03 d3	 add	 rdx, rbx
  00b7b	49 8b da	 mov	 rbx, r10
  00b7e	4c 03 c2	 add	 r8, rdx
  00b81	48 c1 c1 1e	 rol	 rcx, 30
  00b85	48 c1 c8 1c	 ror	 rax, 28
  00b89	48 33 c8	 xor	 rcx, rax
  00b8c	49 0b db	 or	 rbx, r11
  00b8f	49 8b c3	 mov	 rax, r11
  00b92	48 c1 c0 19	 rol	 rax, 25
  00b96	49 23 d9	 and	 rbx, r9
  00b99	48 33 c8	 xor	 rcx, rax
  00b9c	49 8b c2	 mov	 rax, r10
  00b9f	49 23 c3	 and	 rax, r11
  00ba2	48 0b d8	 or	 rbx, rax
  00ba5	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 181  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],21,Py_ULL(0x4a7484aa6ea6e483));

  00ba9	49 8b c8	 mov	 rcx, r8
  00bac	48 03 d8	 add	 rbx, rax
  00baf	48 c1 c1 17	 rol	 rcx, 23
  00bb3	49 8b c0	 mov	 rax, r8
  00bb6	48 c1 c8 12	 ror	 rax, 18
  00bba	48 33 c8	 xor	 rcx, rax
  00bbd	49 8b c0	 mov	 rax, r8
  00bc0	48 c1 c8 0e	 ror	 rax, 14
  00bc4	48 33 c8	 xor	 rcx, rax
  00bc7	48 03 4d c8	 add	 rcx, QWORD PTR W$[rbp-88]
  00bcb	48 8b d6	 mov	 rdx, rsi
  00bce	48 b8 83 e4 a6
	6e aa 84 74 4a	 mov	 rax, 5365058923640841347 ; 4a7484aa6ea6e483H
  00bd8	49 33 d4	 xor	 rdx, r12
  00bdb	49 23 d0	 and	 rdx, r8
  00bde	48 33 d6	 xor	 rdx, rsi
  00be1	48 03 d1	 add	 rdx, rcx
  00be4	48 8b cb	 mov	 rcx, rbx
  00be7	48 03 d0	 add	 rdx, rax
  00bea	48 8b c3	 mov	 rax, rbx
  00bed	48 03 d7	 add	 rdx, rdi
  00bf0	48 8b fb	 mov	 rdi, rbx
  00bf3	4c 03 ca	 add	 r9, rdx
  00bf6	48 c1 c1 1e	 rol	 rcx, 30
  00bfa	48 c1 c8 1c	 ror	 rax, 28
  00bfe	48 33 c8	 xor	 rcx, rax
  00c01	49 0b fb	 or	 rdi, r11
  00c04	48 8b c3	 mov	 rax, rbx
  00c07	48 c1 c0 19	 rol	 rax, 25
  00c0b	49 23 fa	 and	 rdi, r10
  00c0e	48 33 c8	 xor	 rcx, rax
  00c11	48 8b c3	 mov	 rax, rbx
  00c14	49 23 c3	 and	 rax, r11
  00c17	48 0b f8	 or	 rdi, rax
  00c1a	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 182  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],22,Py_ULL(0x5cb0a9dcbd41fbd4));

  00c1e	49 8b c9	 mov	 rcx, r9
  00c21	48 03 f8	 add	 rdi, rax
  00c24	48 c1 c1 17	 rol	 rcx, 23
  00c28	49 8b c1	 mov	 rax, r9
  00c2b	48 c1 c8 12	 ror	 rax, 18
  00c2f	49 8b d4	 mov	 rdx, r12
  00c32	48 33 c8	 xor	 rcx, rax
  00c35	49 33 d0	 xor	 rdx, r8
  00c38	49 8b c1	 mov	 rax, r9
  00c3b	48 c1 c8 0e	 ror	 rax, 14
  00c3f	49 23 d1	 and	 rdx, r9
  00c42	48 33 c8	 xor	 rcx, rax
  00c45	49 33 d4	 xor	 rdx, r12
  00c48	48 b8 d4 fb 41
	bd dc a9 b0 5c	 mov	 rax, 6679025012923562964 ; 5cb0a9dcbd41fbd4H
  00c52	48 03 4d d0	 add	 rcx, QWORD PTR W$[rbp-80]
  00c56	48 03 d1	 add	 rdx, rcx
  00c59	48 8b cf	 mov	 rcx, rdi
  00c5c	48 03 d0	 add	 rdx, rax
  00c5f	48 8b c7	 mov	 rax, rdi
  00c62	48 03 d6	 add	 rdx, rsi
  00c65	48 8b f3	 mov	 rsi, rbx
  00c68	4c 03 d2	 add	 r10, rdx
  00c6b	48 c1 c1 1e	 rol	 rcx, 30
  00c6f	48 c1 c8 1c	 ror	 rax, 28
  00c73	48 33 c8	 xor	 rcx, rax
  00c76	48 0b f7	 or	 rsi, rdi
  00c79	48 8b c7	 mov	 rax, rdi
  00c7c	48 c1 c0 19	 rol	 rax, 25
  00c80	49 23 f3	 and	 rsi, r11
  00c83	48 33 c8	 xor	 rcx, rax
  00c86	48 8b c3	 mov	 rax, rbx
  00c89	48 23 c7	 and	 rax, rdi
  00c8c	48 0b f0	 or	 rsi, rax
  00c8f	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 183  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],23,Py_ULL(0x76f988da831153b5));

  00c93	49 8b ca	 mov	 rcx, r10
  00c96	48 03 f0	 add	 rsi, rax
  00c99	48 c1 c1 17	 rol	 rcx, 23
  00c9d	49 8b c2	 mov	 rax, r10
  00ca0	48 c1 c8 12	 ror	 rax, 18
  00ca4	49 8b d1	 mov	 rdx, r9
  00ca7	48 33 c8	 xor	 rcx, rax
  00caa	49 33 d0	 xor	 rdx, r8
  00cad	49 8b c2	 mov	 rax, r10
  00cb0	49 23 d2	 and	 rdx, r10
  00cb3	48 c1 c8 0e	 ror	 rax, 14
  00cb7	48 33 c8	 xor	 rcx, rax
  00cba	49 33 d0	 xor	 rdx, r8
  00cbd	48 b8 b5 53 11
	83 da 88 f9 76	 mov	 rax, 8573033837759648693 ; 76f988da831153b5H
  00cc7	48 03 4d d8	 add	 rcx, QWORD PTR W$[rbp-72]
  00ccb	48 03 d1	 add	 rdx, rcx
  00cce	48 8b ce	 mov	 rcx, rsi
  00cd1	48 03 d0	 add	 rdx, rax
  00cd4	48 8b c6	 mov	 rax, rsi
  00cd7	49 03 d4	 add	 rdx, r12
  00cda	4c 03 da	 add	 r11, rdx
  00cdd	48 c1 c1 1e	 rol	 rcx, 30
  00ce1	48 c1 c8 1c	 ror	 rax, 28
  00ce5	4c 8b e7	 mov	 r12, rdi
  00ce8	48 33 c8	 xor	 rcx, rax
  00ceb	4c 0b e6	 or	 r12, rsi
  00cee	48 8b c6	 mov	 rax, rsi
  00cf1	48 c1 c0 19	 rol	 rax, 25
  00cf5	4c 23 e3	 and	 r12, rbx
  00cf8	48 33 c8	 xor	 rcx, rax
  00cfb	48 8b c7	 mov	 rax, rdi
  00cfe	48 23 c6	 and	 rax, rsi
  00d01	4c 0b e0	 or	 r12, rax
  00d04	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 184  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],24,Py_ULL(0x983e5152ee66dfab));

  00d08	49 8b cb	 mov	 rcx, r11
  00d0b	4c 03 e0	 add	 r12, rax
  00d0e	48 c1 c1 17	 rol	 rcx, 23
  00d12	49 8b c3	 mov	 rax, r11
  00d15	48 c1 c8 12	 ror	 rax, 18
  00d19	49 8b d2	 mov	 rdx, r10
  00d1c	48 33 c8	 xor	 rcx, rax
  00d1f	49 33 d1	 xor	 rdx, r9
  00d22	49 8b c3	 mov	 rax, r11
  00d25	48 c1 c8 0e	 ror	 rax, 14
  00d29	49 23 d3	 and	 rdx, r11
  00d2c	48 33 c8	 xor	 rcx, rax
  00d2f	49 33 d1	 xor	 rdx, r9
  00d32	48 b8 ab df 66
	ee 52 51 3e 98	 mov	 rax, -7476448914759557205 ; 983e5152ee66dfabH
  00d3c	48 03 4d e0	 add	 rcx, QWORD PTR W$[rbp-64]
  00d40	48 03 d1	 add	 rdx, rcx
  00d43	49 8b cc	 mov	 rcx, r12
  00d46	48 03 d0	 add	 rdx, rax
  00d49	49 8b c4	 mov	 rax, r12
  00d4c	49 03 d0	 add	 rdx, r8
  00d4f	4c 8b c6	 mov	 r8, rsi
  00d52	48 03 da	 add	 rbx, rdx
  00d55	48 c1 c1 1e	 rol	 rcx, 30
  00d59	48 c1 c8 1c	 ror	 rax, 28
  00d5d	48 33 c8	 xor	 rcx, rax
  00d60	4d 0b c4	 or	 r8, r12
  00d63	49 8b c4	 mov	 rax, r12
  00d66	48 c1 c0 19	 rol	 rax, 25
  00d6a	4c 23 c7	 and	 r8, rdi
  00d6d	48 33 c8	 xor	 rcx, rax
  00d70	48 8b c6	 mov	 rax, rsi
  00d73	49 23 c4	 and	 rax, r12
  00d76	4c 0b c0	 or	 r8, rax
  00d79	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 185  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],25,Py_ULL(0xa831c66d2db43210));

  00d7d	48 8b cb	 mov	 rcx, rbx
  00d80	4c 03 c0	 add	 r8, rax
  00d83	48 c1 c1 17	 rol	 rcx, 23
  00d87	48 8b c3	 mov	 rax, rbx
  00d8a	48 c1 c8 12	 ror	 rax, 18
  00d8e	49 8b d2	 mov	 rdx, r10
  00d91	48 33 c8	 xor	 rcx, rax
  00d94	49 33 d3	 xor	 rdx, r11
  00d97	48 8b c3	 mov	 rax, rbx
  00d9a	48 c1 c8 0e	 ror	 rax, 14
  00d9e	48 23 d3	 and	 rdx, rbx
  00da1	48 33 c8	 xor	 rcx, rax
  00da4	49 33 d2	 xor	 rdx, r10
  00da7	48 b8 10 32 b4
	2d 6d c6 31 a8	 mov	 rax, -6327057829258317296 ; a831c66d2db43210H
  00db1	48 03 4d e8	 add	 rcx, QWORD PTR W$[rbp-56]
  00db5	48 03 d1	 add	 rdx, rcx
  00db8	49 8b c8	 mov	 rcx, r8
  00dbb	48 03 d0	 add	 rdx, rax
  00dbe	49 8b c0	 mov	 rax, r8
  00dc1	49 03 d1	 add	 rdx, r9
  00dc4	4d 8b cc	 mov	 r9, r12
  00dc7	48 03 fa	 add	 rdi, rdx
  00dca	48 c1 c1 1e	 rol	 rcx, 30
  00dce	48 c1 c8 1c	 ror	 rax, 28
  00dd2	48 33 c8	 xor	 rcx, rax
  00dd5	4d 0b c8	 or	 r9, r8
  00dd8	49 8b c0	 mov	 rax, r8
  00ddb	48 c1 c0 19	 rol	 rax, 25
  00ddf	4c 23 ce	 and	 r9, rsi
  00de2	48 33 c8	 xor	 rcx, rax
  00de5	49 8b c4	 mov	 rax, r12
  00de8	49 23 c0	 and	 rax, r8
  00deb	4c 0b c8	 or	 r9, rax
  00dee	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]
  00df2	4c 03 c8	 add	 r9, rax

; 186  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],26,Py_ULL(0xb00327c898fb213f));

  00df5	48 8b cf	 mov	 rcx, rdi
  00df8	48 8b c7	 mov	 rax, rdi
  00dfb	48 8b d3	 mov	 rdx, rbx
  00dfe	49 33 d3	 xor	 rdx, r11
  00e01	48 c1 c1 17	 rol	 rcx, 23
  00e05	48 c1 c8 12	 ror	 rax, 18
  00e09	48 33 c8	 xor	 rcx, rax
  00e0c	48 23 d7	 and	 rdx, rdi
  00e0f	48 8b c7	 mov	 rax, rdi
  00e12	49 33 d3	 xor	 rdx, r11
  00e15	48 c1 c8 0e	 ror	 rax, 14
  00e19	48 33 c8	 xor	 rcx, rax
  00e1c	48 b8 3f 21 fb
	98 c8 27 03 b0	 mov	 rax, -5763719355590565569 ; b00327c898fb213fH
  00e26	48 03 4d f0	 add	 rcx, QWORD PTR W$[rbp-48]
  00e2a	48 03 d1	 add	 rdx, rcx
  00e2d	49 8b c9	 mov	 rcx, r9
  00e30	48 03 d0	 add	 rdx, rax
  00e33	49 8b c1	 mov	 rax, r9
  00e36	49 03 d2	 add	 rdx, r10
  00e39	4d 8b d1	 mov	 r10, r9
  00e3c	48 03 f2	 add	 rsi, rdx
  00e3f	48 c1 c1 1e	 rol	 rcx, 30
  00e43	48 c1 c8 1c	 ror	 rax, 28
  00e47	48 33 c8	 xor	 rcx, rax
  00e4a	4d 0b d0	 or	 r10, r8
  00e4d	49 8b c1	 mov	 rax, r9
  00e50	48 c1 c0 19	 rol	 rax, 25
  00e54	4d 23 d4	 and	 r10, r12
  00e57	48 33 c8	 xor	 rcx, rax
  00e5a	49 8b c1	 mov	 rax, r9
  00e5d	49 23 c0	 and	 rax, r8
  00e60	4c 0b d0	 or	 r10, rax
  00e63	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 187  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],27,Py_ULL(0xbf597fc7beef0ee4));

  00e67	48 8b ce	 mov	 rcx, rsi
  00e6a	4c 03 d0	 add	 r10, rax
  00e6d	48 c1 c1 17	 rol	 rcx, 23
  00e71	48 8b c6	 mov	 rax, rsi
  00e74	48 c1 c8 12	 ror	 rax, 18
  00e78	48 8b d3	 mov	 rdx, rbx
  00e7b	48 33 c8	 xor	 rcx, rax
  00e7e	48 33 d7	 xor	 rdx, rdi
  00e81	48 8b c6	 mov	 rax, rsi
  00e84	48 c1 c8 0e	 ror	 rax, 14
  00e88	48 23 d6	 and	 rdx, rsi
  00e8b	48 33 c8	 xor	 rcx, rax
  00e8e	48 33 d3	 xor	 rdx, rbx
  00e91	48 b8 e4 0e ef
	be c7 7f 59 bf	 mov	 rax, -4658551843659510044 ; bf597fc7beef0ee4H
  00e9b	48 03 4d f8	 add	 rcx, QWORD PTR W$[rbp-40]
  00e9f	48 03 d1	 add	 rdx, rcx
  00ea2	49 8b ca	 mov	 rcx, r10
  00ea5	48 03 d0	 add	 rdx, rax
  00ea8	49 8b c2	 mov	 rax, r10
  00eab	49 03 d3	 add	 rdx, r11
  00eae	4d 8b da	 mov	 r11, r10
  00eb1	4c 03 e2	 add	 r12, rdx
  00eb4	48 c1 c1 1e	 rol	 rcx, 30
  00eb8	48 c1 c8 1c	 ror	 rax, 28
  00ebc	48 33 c8	 xor	 rcx, rax
  00ebf	4d 0b d9	 or	 r11, r9
  00ec2	49 8b c2	 mov	 rax, r10
  00ec5	48 c1 c0 19	 rol	 rax, 25
  00ec9	4d 23 d8	 and	 r11, r8
  00ecc	48 33 c8	 xor	 rcx, rax
  00ecf	49 8b c2	 mov	 rax, r10
  00ed2	49 23 c1	 and	 rax, r9
  00ed5	4c 0b d8	 or	 r11, rax
  00ed8	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 188  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],28,Py_ULL(0xc6e00bf33da88fc2));

  00edc	49 8b cc	 mov	 rcx, r12
  00edf	4c 03 d8	 add	 r11, rax
  00ee2	48 c1 c1 17	 rol	 rcx, 23
  00ee6	49 8b c4	 mov	 rax, r12
  00ee9	48 c1 c8 12	 ror	 rax, 18
  00eed	48 8b d7	 mov	 rdx, rdi
  00ef0	48 33 c8	 xor	 rcx, rax
  00ef3	48 33 d6	 xor	 rdx, rsi
  00ef6	49 8b c4	 mov	 rax, r12
  00ef9	48 c1 c8 0e	 ror	 rax, 14
  00efd	49 23 d4	 and	 rdx, r12
  00f00	48 33 c8	 xor	 rcx, rax
  00f03	48 33 d7	 xor	 rdx, rdi
  00f06	48 03 4d 00	 add	 rcx, QWORD PTR W$[rbp-32]
  00f0a	48 03 d1	 add	 rdx, rcx
  00f0d	48 b8 c2 8f a8
	3d f3 0b e0 c6	 mov	 rax, -4116276920077217854 ; c6e00bf33da88fc2H
  00f17	49 8b cb	 mov	 rcx, r11
  00f1a	48 03 d0	 add	 rdx, rax
  00f1d	49 8b c3	 mov	 rax, r11
  00f20	48 03 d3	 add	 rdx, rbx
  00f23	49 8b da	 mov	 rbx, r10
  00f26	4c 03 c2	 add	 r8, rdx
  00f29	48 c1 c1 1e	 rol	 rcx, 30
  00f2d	48 c1 c8 1c	 ror	 rax, 28
  00f31	48 33 c8	 xor	 rcx, rax
  00f34	49 0b db	 or	 rbx, r11
  00f37	49 8b c3	 mov	 rax, r11
  00f3a	48 c1 c0 19	 rol	 rax, 25
  00f3e	49 23 d9	 and	 rbx, r9
  00f41	48 33 c8	 xor	 rcx, rax
  00f44	49 8b c2	 mov	 rax, r10
  00f47	49 23 c3	 and	 rax, r11
  00f4a	48 0b d8	 or	 rbx, rax
  00f4d	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 189  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],29,Py_ULL(0xd5a79147930aa725));

  00f51	49 8b c8	 mov	 rcx, r8
  00f54	48 03 d8	 add	 rbx, rax
  00f57	48 c1 c1 17	 rol	 rcx, 23
  00f5b	49 8b c0	 mov	 rax, r8
  00f5e	48 c1 c8 12	 ror	 rax, 18
  00f62	48 8b d6	 mov	 rdx, rsi
  00f65	48 33 c8	 xor	 rcx, rax
  00f68	49 33 d4	 xor	 rdx, r12
  00f6b	49 8b c0	 mov	 rax, r8
  00f6e	48 c1 c8 0e	 ror	 rax, 14
  00f72	49 23 d0	 and	 rdx, r8
  00f75	48 33 c8	 xor	 rcx, rax
  00f78	48 33 d6	 xor	 rdx, rsi
  00f7b	48 b8 25 a7 0a
	93 47 91 a7 d5	 mov	 rax, -3051310485924567259 ; d5a79147930aa725H
  00f85	48 03 4d 08	 add	 rcx, QWORD PTR W$[rbp-24]
  00f89	48 03 d1	 add	 rdx, rcx
  00f8c	48 8b cb	 mov	 rcx, rbx
  00f8f	48 03 d0	 add	 rdx, rax
  00f92	48 8b c3	 mov	 rax, rbx
  00f95	48 03 d7	 add	 rdx, rdi
  00f98	48 8b fb	 mov	 rdi, rbx
  00f9b	4c 03 ca	 add	 r9, rdx
  00f9e	48 c1 c1 1e	 rol	 rcx, 30
  00fa2	48 c1 c8 1c	 ror	 rax, 28
  00fa6	48 33 c8	 xor	 rcx, rax
  00fa9	49 0b fb	 or	 rdi, r11
  00fac	48 8b c3	 mov	 rax, rbx
  00faf	48 c1 c0 19	 rol	 rax, 25
  00fb3	49 23 fa	 and	 rdi, r10
  00fb6	48 33 c8	 xor	 rcx, rax
  00fb9	48 8b c3	 mov	 rax, rbx
  00fbc	49 23 c3	 and	 rax, r11
  00fbf	48 0b f8	 or	 rdi, rax
  00fc2	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 190  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],30,Py_ULL(0x06ca6351e003826f));

  00fc6	49 8b c9	 mov	 rcx, r9
  00fc9	48 03 f8	 add	 rdi, rax
  00fcc	48 c1 c1 17	 rol	 rcx, 23
  00fd0	49 8b c1	 mov	 rax, r9
  00fd3	48 c1 c8 12	 ror	 rax, 18
  00fd7	49 8b d4	 mov	 rdx, r12
  00fda	48 33 c8	 xor	 rcx, rax
  00fdd	49 33 d0	 xor	 rdx, r8
  00fe0	49 8b c1	 mov	 rax, r9
  00fe3	48 c1 c8 0e	 ror	 rax, 14
  00fe7	49 23 d1	 and	 rdx, r9
  00fea	48 33 c8	 xor	 rcx, rax
  00fed	49 33 d4	 xor	 rdx, r12
  00ff0	48 b8 6f 82 03
	e0 51 63 ca 06	 mov	 rax, 489312712824947311	; 06ca6351e003826fH
  00ffa	48 03 4d 10	 add	 rcx, QWORD PTR W$[rbp-16]
  00ffe	48 03 d1	 add	 rdx, rcx
  01001	48 8b cf	 mov	 rcx, rdi
  01004	48 03 d0	 add	 rdx, rax
  01007	48 8b c7	 mov	 rax, rdi
  0100a	48 03 d6	 add	 rdx, rsi
  0100d	4c 03 d2	 add	 r10, rdx
  01010	48 c1 c1 1e	 rol	 rcx, 30
  01014	48 c1 c8 1c	 ror	 rax, 28
  01018	48 33 c8	 xor	 rcx, rax
  0101b	48 8b c7	 mov	 rax, rdi
  0101e	48 c1 c0 19	 rol	 rax, 25
  01022	48 33 c8	 xor	 rcx, rax
  01025	48 8b f3	 mov	 rsi, rbx
  01028	48 8b c3	 mov	 rax, rbx
  0102b	48 23 c7	 and	 rax, rdi
  0102e	48 0b f7	 or	 rsi, rdi
  01031	49 23 f3	 and	 rsi, r11
  01034	48 0b f0	 or	 rsi, rax
  01037	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 191  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],31,Py_ULL(0x142929670a0e6e70));

  0103b	49 8b ca	 mov	 rcx, r10
  0103e	48 03 f0	 add	 rsi, rax
  01041	48 c1 c1 17	 rol	 rcx, 23
  01045	49 8b c2	 mov	 rax, r10
  01048	48 c1 c8 12	 ror	 rax, 18
  0104c	49 8b d1	 mov	 rdx, r9
  0104f	48 33 c8	 xor	 rcx, rax
  01052	49 33 d0	 xor	 rdx, r8
  01055	49 8b c2	 mov	 rax, r10
  01058	48 c1 c8 0e	 ror	 rax, 14
  0105c	49 23 d2	 and	 rdx, r10
  0105f	48 33 c8	 xor	 rcx, rax
  01062	49 33 d0	 xor	 rdx, r8
  01065	48 b8 70 6e 0e
	0a 67 29 29 14	 mov	 rax, 1452737877330783856 ; 142929670a0e6e70H
  0106f	48 03 4d 18	 add	 rcx, QWORD PTR W$[rbp-8]
  01073	48 03 d1	 add	 rdx, rcx
  01076	48 8b ce	 mov	 rcx, rsi
  01079	48 03 d0	 add	 rdx, rax
  0107c	48 8b c6	 mov	 rax, rsi
  0107f	49 03 d4	 add	 rdx, r12
  01082	4c 8b e7	 mov	 r12, rdi
  01085	4c 03 da	 add	 r11, rdx
  01088	48 c1 c1 1e	 rol	 rcx, 30
  0108c	48 c1 c8 1c	 ror	 rax, 28
  01090	48 33 c8	 xor	 rcx, rax
  01093	4c 0b e6	 or	 r12, rsi
  01096	48 8b c6	 mov	 rax, rsi
  01099	48 c1 c0 19	 rol	 rax, 25
  0109d	4c 23 e3	 and	 r12, rbx
  010a0	48 33 c8	 xor	 rcx, rax
  010a3	48 8b c7	 mov	 rax, rdi
  010a6	48 23 c6	 and	 rax, rsi
  010a9	4c 0b e0	 or	 r12, rax
  010ac	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 192  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],32,Py_ULL(0x27b70a8546d22ffc));

  010b0	49 8b cb	 mov	 rcx, r11
  010b3	4c 03 e0	 add	 r12, rax
  010b6	48 c1 c1 17	 rol	 rcx, 23
  010ba	49 8b c3	 mov	 rax, r11
  010bd	48 c1 c8 12	 ror	 rax, 18
  010c1	49 8b d2	 mov	 rdx, r10
  010c4	48 33 c8	 xor	 rcx, rax
  010c7	49 33 d1	 xor	 rdx, r9
  010ca	49 8b c3	 mov	 rax, r11
  010cd	48 c1 c8 0e	 ror	 rax, 14
  010d1	49 23 d3	 and	 rdx, r11
  010d4	48 33 c8	 xor	 rcx, rax
  010d7	49 33 d1	 xor	 rdx, r9
  010da	48 b8 fc 2f d2
	46 85 0a b7 27	 mov	 rax, 2861767655752347644 ; 27b70a8546d22ffcH
  010e4	48 03 4d 20	 add	 rcx, QWORD PTR W$[rbp]
  010e8	48 03 d1	 add	 rdx, rcx
  010eb	49 8b cc	 mov	 rcx, r12
  010ee	48 03 d0	 add	 rdx, rax
  010f1	49 8b c4	 mov	 rax, r12
  010f4	49 03 d0	 add	 rdx, r8
  010f7	4c 8b c6	 mov	 r8, rsi
  010fa	48 03 da	 add	 rbx, rdx
  010fd	48 c1 c1 1e	 rol	 rcx, 30
  01101	48 c1 c8 1c	 ror	 rax, 28
  01105	48 33 c8	 xor	 rcx, rax
  01108	4d 0b c4	 or	 r8, r12
  0110b	49 8b c4	 mov	 rax, r12
  0110e	48 c1 c0 19	 rol	 rax, 25
  01112	4c 23 c7	 and	 r8, rdi
  01115	48 33 c8	 xor	 rcx, rax
  01118	48 8b c6	 mov	 rax, rsi
  0111b	49 23 c4	 and	 rax, r12
  0111e	4c 0b c0	 or	 r8, rax
  01121	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 193  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],33,Py_ULL(0x2e1b21385c26c926));

  01125	48 8b cb	 mov	 rcx, rbx
  01128	4c 03 c0	 add	 r8, rax
  0112b	48 c1 c1 17	 rol	 rcx, 23
  0112f	48 8b c3	 mov	 rax, rbx
  01132	48 c1 c8 12	 ror	 rax, 18
  01136	48 33 c8	 xor	 rcx, rax
  01139	49 8b d2	 mov	 rdx, r10
  0113c	48 8b c3	 mov	 rax, rbx
  0113f	49 33 d3	 xor	 rdx, r11
  01142	48 c1 c8 0e	 ror	 rax, 14
  01146	48 33 c8	 xor	 rcx, rax
  01149	48 23 d3	 and	 rdx, rbx
  0114c	48 b8 26 c9 26
	5c 38 21 1b 2e	 mov	 rax, 3322285676063803686 ; 2e1b21385c26c926H
  01156	48 03 4d 28	 add	 rcx, QWORD PTR W$[rbp+8]
  0115a	49 33 d2	 xor	 rdx, r10
  0115d	48 03 d1	 add	 rdx, rcx
  01160	49 8b c8	 mov	 rcx, r8
  01163	48 03 d0	 add	 rdx, rax
  01166	49 8b c0	 mov	 rax, r8
  01169	49 03 d1	 add	 rdx, r9
  0116c	4d 8b cc	 mov	 r9, r12
  0116f	48 03 fa	 add	 rdi, rdx
  01172	48 c1 c1 1e	 rol	 rcx, 30
  01176	48 c1 c8 1c	 ror	 rax, 28
  0117a	48 33 c8	 xor	 rcx, rax
  0117d	4d 0b c8	 or	 r9, r8
  01180	49 8b c0	 mov	 rax, r8
  01183	48 c1 c0 19	 rol	 rax, 25
  01187	4c 23 ce	 and	 r9, rsi
  0118a	48 33 c8	 xor	 rcx, rax
  0118d	49 8b c4	 mov	 rax, r12
  01190	49 23 c0	 and	 rax, r8
  01193	4c 0b c8	 or	 r9, rax
  01196	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 194  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],34,Py_ULL(0x4d2c6dfc5ac42aed));

  0119a	48 8b cf	 mov	 rcx, rdi
  0119d	4c 03 c8	 add	 r9, rax
  011a0	48 c1 c1 17	 rol	 rcx, 23
  011a4	48 8b c7	 mov	 rax, rdi
  011a7	48 c1 c8 12	 ror	 rax, 18
  011ab	48 8b d3	 mov	 rdx, rbx
  011ae	48 33 c8	 xor	 rcx, rax
  011b1	49 33 d3	 xor	 rdx, r11
  011b4	48 8b c7	 mov	 rax, rdi
  011b7	48 23 d7	 and	 rdx, rdi
  011ba	48 c1 c8 0e	 ror	 rax, 14
  011be	48 33 c8	 xor	 rcx, rax
  011c1	49 33 d3	 xor	 rdx, r11
  011c4	48 b8 ed 2a c4
	5a fc 6d 2c 4d	 mov	 rax, 5560940570517711597 ; 4d2c6dfc5ac42aedH
  011ce	48 03 4d 30	 add	 rcx, QWORD PTR W$[rbp+16]
  011d2	48 03 d1	 add	 rdx, rcx
  011d5	49 8b c9	 mov	 rcx, r9
  011d8	48 03 d0	 add	 rdx, rax
  011db	49 8b c1	 mov	 rax, r9
  011de	49 03 d2	 add	 rdx, r10
  011e1	4d 8b d1	 mov	 r10, r9
  011e4	48 03 f2	 add	 rsi, rdx
  011e7	48 c1 c1 1e	 rol	 rcx, 30
  011eb	48 c1 c8 1c	 ror	 rax, 28
  011ef	48 33 c8	 xor	 rcx, rax
  011f2	4d 0b d0	 or	 r10, r8
  011f5	49 8b c1	 mov	 rax, r9
  011f8	48 c1 c0 19	 rol	 rax, 25
  011fc	4d 23 d4	 and	 r10, r12
  011ff	48 33 c8	 xor	 rcx, rax
  01202	49 8b c1	 mov	 rax, r9
  01205	49 23 c0	 and	 rax, r8
  01208	4c 0b d0	 or	 r10, rax
  0120b	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 195  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],35,Py_ULL(0x53380d139d95b3df));

  0120f	48 8b ce	 mov	 rcx, rsi
  01212	4c 03 d0	 add	 r10, rax
  01215	48 c1 c1 17	 rol	 rcx, 23
  01219	48 8b c6	 mov	 rax, rsi
  0121c	48 c1 c8 12	 ror	 rax, 18
  01220	48 8b d3	 mov	 rdx, rbx
  01223	48 33 c8	 xor	 rcx, rax
  01226	48 33 d7	 xor	 rdx, rdi
  01229	48 8b c6	 mov	 rax, rsi
  0122c	48 23 d6	 and	 rdx, rsi
  0122f	48 c1 c8 0e	 ror	 rax, 14
  01233	48 33 d3	 xor	 rdx, rbx
  01236	48 33 c8	 xor	 rcx, rax
  01239	48 b8 df b3 95
	9d 13 0d 38 53	 mov	 rax, 5996557281743188959 ; 53380d139d95b3dfH
  01243	48 03 4d 38	 add	 rcx, QWORD PTR W$[rbp+24]
  01247	48 03 d1	 add	 rdx, rcx
  0124a	48 03 d0	 add	 rdx, rax
  0124d	49 03 d3	 add	 rdx, r11
  01250	4c 03 e2	 add	 r12, rdx
  01253	49 8b ca	 mov	 rcx, r10
  01256	49 8b c2	 mov	 rax, r10
  01259	4d 8b da	 mov	 r11, r10
  0125c	48 c1 c1 1e	 rol	 rcx, 30
  01260	48 c1 c8 1c	 ror	 rax, 28
  01264	4d 0b d9	 or	 r11, r9
  01267	48 33 c8	 xor	 rcx, rax
  0126a	4d 23 d8	 and	 r11, r8
  0126d	49 8b c2	 mov	 rax, r10
  01270	48 c1 c0 19	 rol	 rax, 25
  01274	48 33 c8	 xor	 rcx, rax
  01277	49 8b c2	 mov	 rax, r10
  0127a	49 23 c1	 and	 rax, r9
  0127d	4c 0b d8	 or	 r11, rax
  01280	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 196  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],36,Py_ULL(0x650a73548baf63de));

  01284	48 8b d7	 mov	 rdx, rdi
  01287	4c 03 d8	 add	 r11, rax
  0128a	48 33 d6	 xor	 rdx, rsi
  0128d	49 8b cc	 mov	 rcx, r12
  01290	48 c1 c1 17	 rol	 rcx, 23
  01294	49 23 d4	 and	 rdx, r12
  01297	49 8b c4	 mov	 rax, r12
  0129a	48 c1 c8 12	 ror	 rax, 18
  0129e	48 33 d7	 xor	 rdx, rdi
  012a1	48 33 c8	 xor	 rcx, rax
  012a4	49 8b c4	 mov	 rax, r12
  012a7	48 c1 c8 0e	 ror	 rax, 14
  012ab	48 33 c8	 xor	 rcx, rax
  012ae	48 b8 de 63 af
	8b 54 73 0a 65	 mov	 rax, 7280758554555802590 ; 650a73548baf63deH
  012b8	48 03 4d 40	 add	 rcx, QWORD PTR W$[rbp+32]
  012bc	48 03 d1	 add	 rdx, rcx
  012bf	49 8b cb	 mov	 rcx, r11
  012c2	48 03 d0	 add	 rdx, rax
  012c5	49 8b c3	 mov	 rax, r11
  012c8	48 03 d3	 add	 rdx, rbx
  012cb	49 8b da	 mov	 rbx, r10
  012ce	4c 03 c2	 add	 r8, rdx
  012d1	48 c1 c1 1e	 rol	 rcx, 30
  012d5	48 c1 c8 1c	 ror	 rax, 28
  012d9	48 33 c8	 xor	 rcx, rax
  012dc	49 0b db	 or	 rbx, r11
  012df	49 8b c3	 mov	 rax, r11
  012e2	48 c1 c0 19	 rol	 rax, 25
  012e6	49 23 d9	 and	 rbx, r9
  012e9	48 33 c8	 xor	 rcx, rax
  012ec	49 8b c2	 mov	 rax, r10
  012ef	49 23 c3	 and	 rax, r11
  012f2	48 0b d8	 or	 rbx, rax
  012f5	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 197  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],37,Py_ULL(0x766a0abb3c77b2a8));

  012f9	49 8b c8	 mov	 rcx, r8
  012fc	48 03 d8	 add	 rbx, rax
  012ff	48 c1 c1 17	 rol	 rcx, 23
  01303	49 8b c0	 mov	 rax, r8
  01306	48 c1 c8 12	 ror	 rax, 18
  0130a	48 8b d6	 mov	 rdx, rsi
  0130d	48 33 c8	 xor	 rcx, rax
  01310	49 33 d4	 xor	 rdx, r12
  01313	49 8b c0	 mov	 rax, r8
  01316	48 c1 c8 0e	 ror	 rax, 14
  0131a	49 23 d0	 and	 rdx, r8
  0131d	48 33 c8	 xor	 rcx, rax
  01320	48 33 d6	 xor	 rdx, rsi
  01323	48 b8 a8 b2 77
	3c bb 0a 6a 76	 mov	 rax, 8532644243296465576 ; 766a0abb3c77b2a8H
  0132d	48 03 4d 48	 add	 rcx, QWORD PTR W$[rbp+40]
  01331	48 03 d1	 add	 rdx, rcx
  01334	48 8b cb	 mov	 rcx, rbx
  01337	48 03 d0	 add	 rdx, rax
  0133a	48 8b c3	 mov	 rax, rbx
  0133d	48 03 d7	 add	 rdx, rdi
  01340	48 8b fb	 mov	 rdi, rbx
  01343	4c 03 ca	 add	 r9, rdx
  01346	48 c1 c1 1e	 rol	 rcx, 30
  0134a	48 c1 c8 1c	 ror	 rax, 28
  0134e	48 33 c8	 xor	 rcx, rax
  01351	49 0b fb	 or	 rdi, r11
  01354	48 8b c3	 mov	 rax, rbx
  01357	48 c1 c0 19	 rol	 rax, 25
  0135b	49 23 fa	 and	 rdi, r10
  0135e	48 33 c8	 xor	 rcx, rax
  01361	48 8b c3	 mov	 rax, rbx
  01364	49 23 c3	 and	 rax, r11
  01367	48 0b f8	 or	 rdi, rax
  0136a	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 198  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],38,Py_ULL(0x81c2c92e47edaee6));

  0136e	49 8b d4	 mov	 rdx, r12
  01371	48 03 f8	 add	 rdi, rax
  01374	49 33 d0	 xor	 rdx, r8
  01377	49 8b c9	 mov	 rcx, r9
  0137a	48 c1 c1 17	 rol	 rcx, 23
  0137e	49 23 d1	 and	 rdx, r9
  01381	49 8b c1	 mov	 rax, r9
  01384	48 c1 c8 12	 ror	 rax, 18
  01388	49 33 d4	 xor	 rdx, r12
  0138b	48 33 c8	 xor	 rcx, rax
  0138e	49 8b c1	 mov	 rax, r9
  01391	48 c1 c8 0e	 ror	 rax, 14
  01395	48 33 c8	 xor	 rcx, rax
  01398	48 b8 e6 ae ed
	47 2e c9 c2 81	 mov	 rax, -9096487096722542874 ; 81c2c92e47edaee6H
  013a2	48 03 4d 50	 add	 rcx, QWORD PTR W$[rbp+48]
  013a6	48 03 d1	 add	 rdx, rcx
  013a9	48 8b cf	 mov	 rcx, rdi
  013ac	48 03 d0	 add	 rdx, rax
  013af	48 8b c7	 mov	 rax, rdi
  013b2	48 03 d6	 add	 rdx, rsi
  013b5	48 8b f3	 mov	 rsi, rbx
  013b8	4c 03 d2	 add	 r10, rdx
  013bb	48 c1 c1 1e	 rol	 rcx, 30
  013bf	48 c1 c8 1c	 ror	 rax, 28
  013c3	48 33 c8	 xor	 rcx, rax
  013c6	48 0b f7	 or	 rsi, rdi
  013c9	48 8b c7	 mov	 rax, rdi
  013cc	48 c1 c0 19	 rol	 rax, 25
  013d0	49 23 f3	 and	 rsi, r11
  013d3	48 33 c8	 xor	 rcx, rax
  013d6	48 8b c3	 mov	 rax, rbx
  013d9	48 23 c7	 and	 rax, rdi
  013dc	48 0b f0	 or	 rsi, rax
  013df	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 199  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],39,Py_ULL(0x92722c851482353b));

  013e3	49 8b ca	 mov	 rcx, r10
  013e6	48 03 f0	 add	 rsi, rax
  013e9	48 c1 c1 17	 rol	 rcx, 23
  013ed	49 8b c2	 mov	 rax, r10
  013f0	48 c1 c8 12	 ror	 rax, 18
  013f4	49 8b d1	 mov	 rdx, r9
  013f7	48 33 c8	 xor	 rcx, rax
  013fa	49 33 d0	 xor	 rdx, r8
  013fd	49 8b c2	 mov	 rax, r10
  01400	48 c1 c8 0e	 ror	 rax, 14
  01404	49 23 d2	 and	 rdx, r10
  01407	48 33 c8	 xor	 rcx, rax
  0140a	49 33 d0	 xor	 rdx, r8
  0140d	48 b8 3b 35 82
	14 85 2c 72 92	 mov	 rax, -7894198246740708037 ; 92722c851482353bH
  01417	48 03 4d 58	 add	 rcx, QWORD PTR W$[rbp+56]
  0141b	48 03 d1	 add	 rdx, rcx
  0141e	48 8b ce	 mov	 rcx, rsi
  01421	48 03 d0	 add	 rdx, rax
  01424	48 8b c6	 mov	 rax, rsi
  01427	49 03 d4	 add	 rdx, r12
  0142a	4c 8b e7	 mov	 r12, rdi
  0142d	4c 03 da	 add	 r11, rdx
  01430	48 c1 c1 1e	 rol	 rcx, 30
  01434	48 c1 c8 1c	 ror	 rax, 28
  01438	48 33 c8	 xor	 rcx, rax
  0143b	4c 0b e6	 or	 r12, rsi
  0143e	48 8b c6	 mov	 rax, rsi
  01441	48 c1 c0 19	 rol	 rax, 25
  01445	4c 23 e3	 and	 r12, rbx
  01448	48 33 c8	 xor	 rcx, rax
  0144b	48 8b c7	 mov	 rax, rdi
  0144e	48 23 c6	 and	 rax, rsi
  01451	4c 0b e0	 or	 r12, rax
  01454	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 200  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],40,Py_ULL(0xa2bfe8a14cf10364));

  01458	49 8b cb	 mov	 rcx, r11
  0145b	4c 03 e0	 add	 r12, rax
  0145e	48 c1 c1 17	 rol	 rcx, 23
  01462	49 8b c3	 mov	 rax, r11
  01465	48 c1 c8 12	 ror	 rax, 18
  01469	49 8b d2	 mov	 rdx, r10
  0146c	48 33 c8	 xor	 rcx, rax
  0146f	49 8b c3	 mov	 rax, r11
  01472	48 c1 c8 0e	 ror	 rax, 14
  01476	48 33 c8	 xor	 rcx, rax
  01479	49 33 d1	 xor	 rdx, r9
  0147c	48 03 4d 60	 add	 rcx, QWORD PTR W$[rbp+64]
  01480	49 23 d3	 and	 rdx, r11
  01483	48 b8 64 03 f1
	4c a1 e8 bf a2	 mov	 rax, -6719396339535248540 ; a2bfe8a14cf10364H
  0148d	49 33 d1	 xor	 rdx, r9
  01490	48 03 d1	 add	 rdx, rcx
  01493	49 8b cc	 mov	 rcx, r12
  01496	48 03 d0	 add	 rdx, rax
  01499	49 8b c4	 mov	 rax, r12
  0149c	49 03 d0	 add	 rdx, r8
  0149f	4c 8b c6	 mov	 r8, rsi
  014a2	48 03 da	 add	 rbx, rdx
  014a5	48 c1 c1 1e	 rol	 rcx, 30
  014a9	48 c1 c8 1c	 ror	 rax, 28
  014ad	48 33 c8	 xor	 rcx, rax
  014b0	4d 0b c4	 or	 r8, r12
  014b3	49 8b c4	 mov	 rax, r12
  014b6	48 c1 c0 19	 rol	 rax, 25
  014ba	4c 23 c7	 and	 r8, rdi
  014bd	48 33 c8	 xor	 rcx, rax
  014c0	48 8b c6	 mov	 rax, rsi
  014c3	49 23 c4	 and	 rax, r12
  014c6	4c 0b c0	 or	 r8, rax
  014c9	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 201  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],41,Py_ULL(0xa81a664bbc423001));

  014cd	48 8b cb	 mov	 rcx, rbx
  014d0	4c 03 c0	 add	 r8, rax
  014d3	48 c1 c1 17	 rol	 rcx, 23
  014d7	48 8b c3	 mov	 rax, rbx
  014da	48 c1 c8 12	 ror	 rax, 18
  014de	49 8b d2	 mov	 rdx, r10
  014e1	48 33 c8	 xor	 rcx, rax
  014e4	49 33 d3	 xor	 rdx, r11
  014e7	48 8b c3	 mov	 rax, rbx
  014ea	48 c1 c8 0e	 ror	 rax, 14
  014ee	48 23 d3	 and	 rdx, rbx
  014f1	48 33 c8	 xor	 rcx, rax
  014f4	49 33 d2	 xor	 rdx, r10
  014f7	48 b8 01 30 42
	bc 4b 66 1a a8	 mov	 rax, -6333637450476146687 ; a81a664bbc423001H
  01501	48 03 4d 68	 add	 rcx, QWORD PTR W$[rbp+72]
  01505	48 03 d1	 add	 rdx, rcx
  01508	49 8b c8	 mov	 rcx, r8
  0150b	48 03 d0	 add	 rdx, rax
  0150e	49 8b c0	 mov	 rax, r8
  01511	49 03 d1	 add	 rdx, r9
  01514	4d 8b cc	 mov	 r9, r12
  01517	48 03 fa	 add	 rdi, rdx
  0151a	48 c1 c1 1e	 rol	 rcx, 30
  0151e	48 c1 c8 1c	 ror	 rax, 28
  01522	48 33 c8	 xor	 rcx, rax
  01525	4d 0b c8	 or	 r9, r8
  01528	49 8b c0	 mov	 rax, r8
  0152b	48 c1 c0 19	 rol	 rax, 25
  0152f	4c 23 ce	 and	 r9, rsi
  01532	48 33 c8	 xor	 rcx, rax
  01535	49 8b c4	 mov	 rax, r12
  01538	49 23 c0	 and	 rax, r8
  0153b	4c 0b c8	 or	 r9, rax
  0153e	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 202  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],42,Py_ULL(0xc24b8b70d0f89791));

  01542	48 8b cf	 mov	 rcx, rdi
  01545	4c 03 c8	 add	 r9, rax
  01548	48 c1 c1 17	 rol	 rcx, 23
  0154c	48 8b c7	 mov	 rax, rdi
  0154f	48 c1 c8 12	 ror	 rax, 18
  01553	48 8b d3	 mov	 rdx, rbx
  01556	48 33 c8	 xor	 rcx, rax
  01559	49 33 d3	 xor	 rdx, r11
  0155c	48 8b c7	 mov	 rax, rdi
  0155f	48 23 d7	 and	 rdx, rdi
  01562	48 c1 c8 0e	 ror	 rax, 14
  01566	48 33 c8	 xor	 rcx, rax
  01569	49 33 d3	 xor	 rdx, r11
  0156c	48 b8 91 97 f8
	d0 70 8b 4b c2	 mov	 rax, -4446306890439682159 ; c24b8b70d0f89791H
  01576	48 03 4d 70	 add	 rcx, QWORD PTR W$[rbp+80]
  0157a	48 03 d1	 add	 rdx, rcx
  0157d	49 8b c9	 mov	 rcx, r9
  01580	48 03 d0	 add	 rdx, rax
  01583	49 8b c1	 mov	 rax, r9
  01586	49 03 d2	 add	 rdx, r10
  01589	48 03 f2	 add	 rsi, rdx
  0158c	48 c1 c1 1e	 rol	 rcx, 30
  01590	48 c1 c8 1c	 ror	 rax, 28
  01594	48 33 c8	 xor	 rcx, rax
  01597	49 8b c1	 mov	 rax, r9
  0159a	4d 8b d1	 mov	 r10, r9
  0159d	48 c1 c0 19	 rol	 rax, 25
  015a1	4d 0b d0	 or	 r10, r8
  015a4	48 33 c8	 xor	 rcx, rax
  015a7	4d 23 d4	 and	 r10, r12
  015aa	49 8b c1	 mov	 rax, r9
  015ad	49 23 c0	 and	 rax, r8
  015b0	4c 0b d0	 or	 r10, rax
  015b3	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 203  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],43,Py_ULL(0xc76c51a30654be30));

  015b7	48 8b d3	 mov	 rdx, rbx
  015ba	4c 03 d0	 add	 r10, rax
  015bd	48 33 d7	 xor	 rdx, rdi
  015c0	48 8b ce	 mov	 rcx, rsi
  015c3	48 c1 c1 17	 rol	 rcx, 23
  015c7	48 23 d6	 and	 rdx, rsi
  015ca	48 8b c6	 mov	 rax, rsi
  015cd	48 c1 c8 12	 ror	 rax, 18
  015d1	48 33 d3	 xor	 rdx, rbx
  015d4	48 33 c8	 xor	 rcx, rax
  015d7	48 8b c6	 mov	 rax, rsi
  015da	48 c1 c8 0e	 ror	 rax, 14
  015de	48 33 c8	 xor	 rcx, rax
  015e1	48 b8 30 be 54
	06 a3 51 6c c7	 mov	 rax, -4076793802049405392 ; c76c51a30654be30H
  015eb	48 03 4d 78	 add	 rcx, QWORD PTR W$[rbp+88]
  015ef	48 03 d1	 add	 rdx, rcx
  015f2	49 8b ca	 mov	 rcx, r10
  015f5	48 03 d0	 add	 rdx, rax
  015f8	49 8b c2	 mov	 rax, r10
  015fb	49 03 d3	 add	 rdx, r11
  015fe	4d 8b da	 mov	 r11, r10
  01601	4c 03 e2	 add	 r12, rdx
  01604	48 c1 c1 1e	 rol	 rcx, 30
  01608	48 c1 c8 1c	 ror	 rax, 28
  0160c	48 33 c8	 xor	 rcx, rax
  0160f	4d 0b d9	 or	 r11, r9
  01612	49 8b c2	 mov	 rax, r10
  01615	48 c1 c0 19	 rol	 rax, 25
  01619	4d 23 d8	 and	 r11, r8
  0161c	48 33 c8	 xor	 rcx, rax
  0161f	49 8b c2	 mov	 rax, r10
  01622	49 23 c1	 and	 rax, r9
  01625	4c 0b d8	 or	 r11, rax
  01628	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 204  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],44,Py_ULL(0xd192e819d6ef5218));

  0162c	49 8b cc	 mov	 rcx, r12
  0162f	4c 03 d8	 add	 r11, rax
  01632	48 c1 c1 17	 rol	 rcx, 23
  01636	49 8b c4	 mov	 rax, r12
  01639	48 c1 c8 12	 ror	 rax, 18
  0163d	48 8b d7	 mov	 rdx, rdi
  01640	48 33 c8	 xor	 rcx, rax
  01643	48 33 d6	 xor	 rdx, rsi
  01646	49 8b c4	 mov	 rax, r12
  01649	48 c1 c8 0e	 ror	 rax, 14
  0164d	49 23 d4	 and	 rdx, r12
  01650	48 33 c8	 xor	 rcx, rax
  01653	48 33 d7	 xor	 rdx, rdi
  01656	48 b8 18 52 ef
	d6 19 e8 92 d1	 mov	 rax, -3345356375505022440 ; d192e819d6ef5218H
  01660	48 03 8d 80 00
	00 00		 add	 rcx, QWORD PTR W$[rbp+96]
  01667	48 03 d1	 add	 rdx, rcx
  0166a	49 8b cb	 mov	 rcx, r11
  0166d	48 03 d0	 add	 rdx, rax
  01670	49 8b c3	 mov	 rax, r11
  01673	48 03 d3	 add	 rdx, rbx
  01676	49 8b da	 mov	 rbx, r10
  01679	4c 03 c2	 add	 r8, rdx
  0167c	48 c1 c1 1e	 rol	 rcx, 30
  01680	48 c1 c8 1c	 ror	 rax, 28
  01684	48 33 c8	 xor	 rcx, rax
  01687	49 0b db	 or	 rbx, r11
  0168a	49 8b c3	 mov	 rax, r11
  0168d	48 c1 c0 19	 rol	 rax, 25
  01691	49 23 d9	 and	 rbx, r9
  01694	48 33 c8	 xor	 rcx, rax
  01697	49 8b c2	 mov	 rax, r10
  0169a	49 23 c3	 and	 rax, r11
  0169d	48 0b d8	 or	 rbx, rax
  016a0	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 205  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],45,Py_ULL(0xd69906245565a910));

  016a4	49 8b c8	 mov	 rcx, r8
  016a7	48 03 d8	 add	 rbx, rax
  016aa	48 c1 c1 17	 rol	 rcx, 23
  016ae	48 8b d6	 mov	 rdx, rsi
  016b1	49 8b c0	 mov	 rax, r8
  016b4	48 c1 c8 12	 ror	 rax, 18
  016b8	49 33 d4	 xor	 rdx, r12
  016bb	48 33 c8	 xor	 rcx, rax
  016be	49 23 d0	 and	 rdx, r8
  016c1	49 8b c0	 mov	 rax, r8
  016c4	48 33 d6	 xor	 rdx, rsi
  016c7	48 c1 c8 0e	 ror	 rax, 14
  016cb	48 33 c8	 xor	 rcx, rax
  016ce	48 b8 10 a9 65
	55 24 06 99 d6	 mov	 rax, -2983346525034927856 ; d69906245565a910H
  016d8	48 03 8d 88 00
	00 00		 add	 rcx, QWORD PTR W$[rbp+104]
  016df	48 03 d1	 add	 rdx, rcx
  016e2	48 8b cb	 mov	 rcx, rbx
  016e5	48 03 d0	 add	 rdx, rax
  016e8	48 8b c3	 mov	 rax, rbx
  016eb	48 03 d7	 add	 rdx, rdi
  016ee	48 8b fb	 mov	 rdi, rbx
  016f1	4c 03 ca	 add	 r9, rdx
  016f4	48 c1 c1 1e	 rol	 rcx, 30
  016f8	48 c1 c8 1c	 ror	 rax, 28
  016fc	48 33 c8	 xor	 rcx, rax
  016ff	49 0b fb	 or	 rdi, r11
  01702	48 8b c3	 mov	 rax, rbx
  01705	48 c1 c0 19	 rol	 rax, 25
  01709	49 23 fa	 and	 rdi, r10
  0170c	48 33 c8	 xor	 rcx, rax
  0170f	48 8b c3	 mov	 rax, rbx
  01712	49 23 c3	 and	 rax, r11
  01715	48 0b f8	 or	 rdi, rax
  01718	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 206  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],46,Py_ULL(0xf40e35855771202a));

  0171c	49 8b c9	 mov	 rcx, r9
  0171f	48 03 f8	 add	 rdi, rax
  01722	48 c1 c1 17	 rol	 rcx, 23
  01726	49 8b c1	 mov	 rax, r9
  01729	48 c1 c8 12	 ror	 rax, 18
  0172d	49 8b d4	 mov	 rdx, r12
  01730	48 33 c8	 xor	 rcx, rax
  01733	49 33 d0	 xor	 rdx, r8
  01736	49 8b c1	 mov	 rax, r9
  01739	48 c1 c8 0e	 ror	 rax, 14
  0173d	49 23 d1	 and	 rdx, r9
  01740	48 33 c8	 xor	 rcx, rax
  01743	49 33 d4	 xor	 rdx, r12
  01746	48 b8 2a 20 71
	57 85 35 0e f4	 mov	 rax, -860691631967231958 ; f40e35855771202aH
  01750	48 03 8d 90 00
	00 00		 add	 rcx, QWORD PTR W$[rbp+112]
  01757	48 03 d1	 add	 rdx, rcx
  0175a	48 8b cf	 mov	 rcx, rdi
  0175d	48 03 d0	 add	 rdx, rax
  01760	48 8b c7	 mov	 rax, rdi
  01763	48 03 d6	 add	 rdx, rsi
  01766	48 8b f3	 mov	 rsi, rbx
  01769	4c 03 d2	 add	 r10, rdx
  0176c	48 c1 c1 1e	 rol	 rcx, 30
  01770	48 c1 c8 1c	 ror	 rax, 28
  01774	48 33 c8	 xor	 rcx, rax
  01777	48 0b f7	 or	 rsi, rdi
  0177a	48 8b c7	 mov	 rax, rdi
  0177d	48 c1 c0 19	 rol	 rax, 25
  01781	49 23 f3	 and	 rsi, r11
  01784	48 33 c8	 xor	 rcx, rax
  01787	48 8b c3	 mov	 rax, rbx
  0178a	48 23 c7	 and	 rax, rdi
  0178d	48 0b f0	 or	 rsi, rax
  01790	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 207  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],47,Py_ULL(0x106aa07032bbd1b8));

  01794	49 8b ca	 mov	 rcx, r10
  01797	48 03 f0	 add	 rsi, rax
  0179a	48 c1 c1 17	 rol	 rcx, 23
  0179e	49 8b c2	 mov	 rax, r10
  017a1	48 c1 c8 12	 ror	 rax, 18
  017a5	49 8b d1	 mov	 rdx, r9
  017a8	48 33 c8	 xor	 rcx, rax
  017ab	49 33 d0	 xor	 rdx, r8
  017ae	49 8b c2	 mov	 rax, r10
  017b1	48 c1 c8 0e	 ror	 rax, 14
  017b5	49 23 d2	 and	 rdx, r10
  017b8	48 33 c8	 xor	 rcx, rax
  017bb	49 33 d0	 xor	 rdx, r8
  017be	48 b8 b8 d1 bb
	32 70 a0 6a 10	 mov	 rax, 1182934255886127544 ; 106aa07032bbd1b8H
  017c8	48 03 8d 98 00
	00 00		 add	 rcx, QWORD PTR W$[rbp+120]
  017cf	48 03 d1	 add	 rdx, rcx
  017d2	48 03 d0	 add	 rdx, rax
  017d5	48 8b ce	 mov	 rcx, rsi
  017d8	48 8b c6	 mov	 rax, rsi
  017db	49 03 d4	 add	 rdx, r12
  017de	4c 8b e7	 mov	 r12, rdi
  017e1	4c 03 da	 add	 r11, rdx
  017e4	48 c1 c1 1e	 rol	 rcx, 30
  017e8	48 c1 c8 1c	 ror	 rax, 28
  017ec	48 33 c8	 xor	 rcx, rax
  017ef	4c 0b e6	 or	 r12, rsi
  017f2	48 8b c6	 mov	 rax, rsi
  017f5	48 c1 c0 19	 rol	 rax, 25
  017f9	4c 23 e3	 and	 r12, rbx
  017fc	48 33 c8	 xor	 rcx, rax
  017ff	48 8b c7	 mov	 rax, rdi
  01802	48 23 c6	 and	 rax, rsi
  01805	4c 0b e0	 or	 r12, rax
  01808	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 208  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],48,Py_ULL(0x19a4c116b8d2d0c8));

  0180c	49 8b cb	 mov	 rcx, r11
  0180f	4c 03 e0	 add	 r12, rax
  01812	48 c1 c1 17	 rol	 rcx, 23
  01816	49 8b c3	 mov	 rax, r11
  01819	48 c1 c8 12	 ror	 rax, 18
  0181d	49 8b d2	 mov	 rdx, r10
  01820	48 33 c8	 xor	 rcx, rax
  01823	49 33 d1	 xor	 rdx, r9
  01826	49 8b c3	 mov	 rax, r11
  01829	48 c1 c8 0e	 ror	 rax, 14
  0182d	49 23 d3	 and	 rdx, r11
  01830	48 33 c8	 xor	 rcx, rax
  01833	49 33 d1	 xor	 rdx, r9
  01836	48 b8 c8 d0 d2
	b8 16 c1 a4 19	 mov	 rax, 1847814050463011016 ; 19a4c116b8d2d0c8H
  01840	48 03 8d a0 00
	00 00		 add	 rcx, QWORD PTR W$[rbp+128]
  01847	48 03 d1	 add	 rdx, rcx
  0184a	49 8b cc	 mov	 rcx, r12
  0184d	48 03 d0	 add	 rdx, rax
  01850	49 8b c4	 mov	 rax, r12
  01853	49 03 d0	 add	 rdx, r8
  01856	4c 8b c6	 mov	 r8, rsi
  01859	48 03 da	 add	 rbx, rdx
  0185c	48 c1 c1 1e	 rol	 rcx, 30
  01860	48 c1 c8 1c	 ror	 rax, 28
  01864	48 33 c8	 xor	 rcx, rax
  01867	4d 0b c4	 or	 r8, r12
  0186a	49 8b c4	 mov	 rax, r12
  0186d	48 c1 c0 19	 rol	 rax, 25
  01871	4c 23 c7	 and	 r8, rdi
  01874	48 33 c8	 xor	 rcx, rax
  01877	48 8b c6	 mov	 rax, rsi
  0187a	49 23 c4	 and	 rax, r12
  0187d	4c 0b c0	 or	 r8, rax
  01880	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 209  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],49,Py_ULL(0x1e376c085141ab53));

  01884	48 8b cb	 mov	 rcx, rbx
  01887	4c 03 c0	 add	 r8, rax
  0188a	48 c1 c1 17	 rol	 rcx, 23
  0188e	48 8b c3	 mov	 rax, rbx
  01891	48 c1 c8 12	 ror	 rax, 18
  01895	49 8b d2	 mov	 rdx, r10
  01898	48 33 c8	 xor	 rcx, rax
  0189b	49 33 d3	 xor	 rdx, r11
  0189e	48 8b c3	 mov	 rax, rbx
  018a1	48 c1 c8 0e	 ror	 rax, 14
  018a5	48 23 d3	 and	 rdx, rbx
  018a8	48 33 c8	 xor	 rcx, rax
  018ab	49 33 d2	 xor	 rdx, r10
  018ae	48 b8 53 ab 41
	51 08 6c 37 1e	 mov	 rax, 2177327727835720531 ; 1e376c085141ab53H
  018b8	48 03 8d a8 00
	00 00		 add	 rcx, QWORD PTR W$[rbp+136]
  018bf	48 03 d1	 add	 rdx, rcx
  018c2	49 8b c8	 mov	 rcx, r8
  018c5	48 03 d0	 add	 rdx, rax
  018c8	49 8b c0	 mov	 rax, r8
  018cb	49 03 d1	 add	 rdx, r9
  018ce	4d 8b cc	 mov	 r9, r12
  018d1	48 03 fa	 add	 rdi, rdx
  018d4	48 c1 c1 1e	 rol	 rcx, 30
  018d8	48 c1 c8 1c	 ror	 rax, 28
  018dc	48 33 c8	 xor	 rcx, rax
  018df	49 8b c0	 mov	 rax, r8
  018e2	48 c1 c0 19	 rol	 rax, 25
  018e6	48 33 c8	 xor	 rcx, rax
  018e9	4d 0b c8	 or	 r9, r8
  018ec	4c 23 ce	 and	 r9, rsi
  018ef	49 8b c4	 mov	 rax, r12
  018f2	49 23 c0	 and	 rax, r8
  018f5	4c 0b c8	 or	 r9, rax
  018f8	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 210  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],50,Py_ULL(0x2748774cdf8eeb99));

  018fc	48 8b cf	 mov	 rcx, rdi
  018ff	4c 03 c8	 add	 r9, rax
  01902	48 c1 c1 17	 rol	 rcx, 23
  01906	48 8b c7	 mov	 rax, rdi
  01909	48 c1 c8 12	 ror	 rax, 18
  0190d	48 8b d3	 mov	 rdx, rbx
  01910	48 33 c8	 xor	 rcx, rax
  01913	49 33 d3	 xor	 rdx, r11
  01916	48 8b c7	 mov	 rax, rdi
  01919	48 c1 c8 0e	 ror	 rax, 14
  0191d	48 23 d7	 and	 rdx, rdi
  01920	48 33 c8	 xor	 rcx, rax
  01923	49 33 d3	 xor	 rdx, r11
  01926	48 b8 99 eb 8e
	df 4c 77 48 27	 mov	 rax, 2830643537854262169 ; 2748774cdf8eeb99H
  01930	48 03 8d b0 00
	00 00		 add	 rcx, QWORD PTR W$[rbp+144]
  01937	48 03 d1	 add	 rdx, rcx
  0193a	49 8b c9	 mov	 rcx, r9
  0193d	48 03 d0	 add	 rdx, rax
  01940	49 8b c1	 mov	 rax, r9
  01943	49 03 d2	 add	 rdx, r10
  01946	4d 8b d1	 mov	 r10, r9
  01949	48 03 f2	 add	 rsi, rdx
  0194c	48 c1 c1 1e	 rol	 rcx, 30
  01950	48 c1 c8 1c	 ror	 rax, 28
  01954	48 33 c8	 xor	 rcx, rax
  01957	4d 0b d0	 or	 r10, r8
  0195a	49 8b c1	 mov	 rax, r9
  0195d	48 c1 c0 19	 rol	 rax, 25
  01961	4d 23 d4	 and	 r10, r12
  01964	48 33 c8	 xor	 rcx, rax
  01967	49 8b c1	 mov	 rax, r9
  0196a	49 23 c0	 and	 rax, r8
  0196d	4c 0b d0	 or	 r10, rax
  01970	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 211  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],51,Py_ULL(0x34b0bcb5e19b48a8));

  01974	48 8b ce	 mov	 rcx, rsi
  01977	4c 03 d0	 add	 r10, rax
  0197a	48 c1 c1 17	 rol	 rcx, 23
  0197e	48 8b c6	 mov	 rax, rsi
  01981	48 c1 c8 12	 ror	 rax, 18
  01985	48 8b d3	 mov	 rdx, rbx
  01988	48 33 c8	 xor	 rcx, rax
  0198b	48 33 d7	 xor	 rdx, rdi
  0198e	48 8b c6	 mov	 rax, rsi
  01991	48 c1 c8 0e	 ror	 rax, 14
  01995	48 23 d6	 and	 rdx, rsi
  01998	48 33 c8	 xor	 rcx, rax
  0199b	48 33 d3	 xor	 rdx, rbx
  0199e	48 b8 a8 48 9b
	e1 b5 bc b0 34	 mov	 rax, 3796741975233480872 ; 34b0bcb5e19b48a8H
  019a8	48 03 8d b8 00
	00 00		 add	 rcx, QWORD PTR W$[rbp+152]
  019af	48 03 d1	 add	 rdx, rcx
  019b2	49 8b ca	 mov	 rcx, r10
  019b5	48 03 d0	 add	 rdx, rax
  019b8	49 8b c2	 mov	 rax, r10
  019bb	49 03 d3	 add	 rdx, r11
  019be	4d 8b da	 mov	 r11, r10
  019c1	4c 03 e2	 add	 r12, rdx
  019c4	48 c1 c1 1e	 rol	 rcx, 30
  019c8	48 c1 c8 1c	 ror	 rax, 28
  019cc	48 33 c8	 xor	 rcx, rax
  019cf	4d 0b d9	 or	 r11, r9
  019d2	49 8b c2	 mov	 rax, r10
  019d5	48 c1 c0 19	 rol	 rax, 25
  019d9	4d 23 d8	 and	 r11, r8
  019dc	48 33 c8	 xor	 rcx, rax
  019df	49 8b c2	 mov	 rax, r10
  019e2	49 23 c1	 and	 rax, r9
  019e5	4c 0b d8	 or	 r11, rax
  019e8	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 212  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],52,Py_ULL(0x391c0cb3c5c95a63));

  019ec	49 8b cc	 mov	 rcx, r12
  019ef	4c 03 d8	 add	 r11, rax
  019f2	48 c1 c1 17	 rol	 rcx, 23
  019f6	49 8b c4	 mov	 rax, r12
  019f9	48 c1 c8 12	 ror	 rax, 18
  019fd	48 33 c8	 xor	 rcx, rax
  01a00	49 8b c4	 mov	 rax, r12
  01a03	48 c1 c8 0e	 ror	 rax, 14
  01a07	48 33 c8	 xor	 rcx, rax
  01a0a	48 8b d7	 mov	 rdx, rdi
  01a0d	48 b8 63 5a c9
	c5 b3 0c 1c 39	 mov	 rax, 4115178125766777443 ; 391c0cb3c5c95a63H
  01a17	48 03 8d c0 00
	00 00		 add	 rcx, QWORD PTR W$[rbp+160]
  01a1e	48 33 d6	 xor	 rdx, rsi
  01a21	49 23 d4	 and	 rdx, r12
  01a24	48 33 d7	 xor	 rdx, rdi
  01a27	48 03 d1	 add	 rdx, rcx
  01a2a	49 8b cb	 mov	 rcx, r11
  01a2d	48 03 d0	 add	 rdx, rax
  01a30	49 8b c3	 mov	 rax, r11
  01a33	48 03 d3	 add	 rdx, rbx
  01a36	49 8b da	 mov	 rbx, r10
  01a39	4c 03 c2	 add	 r8, rdx
  01a3c	48 c1 c1 1e	 rol	 rcx, 30
  01a40	48 c1 c8 1c	 ror	 rax, 28
  01a44	48 33 c8	 xor	 rcx, rax
  01a47	49 0b db	 or	 rbx, r11
  01a4a	49 8b c3	 mov	 rax, r11
  01a4d	48 c1 c0 19	 rol	 rax, 25
  01a51	49 23 d9	 and	 rbx, r9
  01a54	48 33 c8	 xor	 rcx, rax
  01a57	49 8b c2	 mov	 rax, r10
  01a5a	49 23 c3	 and	 rax, r11
  01a5d	48 0b d8	 or	 rbx, rax
  01a60	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 213  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],53,Py_ULL(0x4ed8aa4ae3418acb));

  01a64	49 8b c8	 mov	 rcx, r8
  01a67	48 03 d8	 add	 rbx, rax
  01a6a	48 c1 c1 17	 rol	 rcx, 23
  01a6e	49 8b c0	 mov	 rax, r8
  01a71	48 c1 c8 12	 ror	 rax, 18
  01a75	48 8b d6	 mov	 rdx, rsi
  01a78	48 33 c8	 xor	 rcx, rax
  01a7b	49 33 d4	 xor	 rdx, r12
  01a7e	49 8b c0	 mov	 rax, r8
  01a81	49 23 d0	 and	 rdx, r8
  01a84	48 c1 c8 0e	 ror	 rax, 14
  01a88	48 33 c8	 xor	 rcx, rax
  01a8b	48 33 d6	 xor	 rdx, rsi
  01a8e	48 b8 cb 8a 41
	e3 4a aa d8 4e	 mov	 rax, 5681478168544905931 ; 4ed8aa4ae3418acbH
  01a98	48 03 8d c8 00
	00 00		 add	 rcx, QWORD PTR W$[rbp+168]
  01a9f	48 03 d1	 add	 rdx, rcx
  01aa2	48 8b cb	 mov	 rcx, rbx
  01aa5	48 03 d0	 add	 rdx, rax
  01aa8	48 8b c3	 mov	 rax, rbx
  01aab	48 03 d7	 add	 rdx, rdi
  01aae	48 8b fb	 mov	 rdi, rbx
  01ab1	4c 03 ca	 add	 r9, rdx
  01ab4	48 c1 c1 1e	 rol	 rcx, 30
  01ab8	48 c1 c8 1c	 ror	 rax, 28
  01abc	48 33 c8	 xor	 rcx, rax
  01abf	49 0b fb	 or	 rdi, r11
  01ac2	48 8b c3	 mov	 rax, rbx
  01ac5	48 c1 c0 19	 rol	 rax, 25
  01ac9	49 23 fa	 and	 rdi, r10
  01acc	48 33 c8	 xor	 rcx, rax
  01acf	48 8b c3	 mov	 rax, rbx
  01ad2	49 23 c3	 and	 rax, r11
  01ad5	48 0b f8	 or	 rdi, rax
  01ad8	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 214  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],54,Py_ULL(0x5b9cca4f7763e373));

  01adc	49 8b c9	 mov	 rcx, r9
  01adf	48 03 f8	 add	 rdi, rax
  01ae2	48 c1 c1 17	 rol	 rcx, 23
  01ae6	49 8b c1	 mov	 rax, r9
  01ae9	48 c1 c8 12	 ror	 rax, 18
  01aed	49 8b d4	 mov	 rdx, r12
  01af0	48 33 c8	 xor	 rcx, rax
  01af3	49 33 d0	 xor	 rdx, r8
  01af6	49 8b c1	 mov	 rax, r9
  01af9	49 23 d1	 and	 rdx, r9
  01afc	48 c1 c8 0e	 ror	 rax, 14
  01b00	48 33 c8	 xor	 rcx, rax
  01b03	49 33 d4	 xor	 rdx, r12
  01b06	48 b8 73 e3 63
	77 4f ca 9c 5b	 mov	 rax, 6601373596472566643 ; 5b9cca4f7763e373H
  01b10	48 03 8d d0 00
	00 00		 add	 rcx, QWORD PTR W$[rbp+176]
  01b17	48 03 d1	 add	 rdx, rcx
  01b1a	48 8b cf	 mov	 rcx, rdi
  01b1d	48 03 d0	 add	 rdx, rax
  01b20	48 03 d6	 add	 rdx, rsi
  01b23	4c 03 d2	 add	 r10, rdx
  01b26	48 c1 c1 1e	 rol	 rcx, 30
  01b2a	48 8b f3	 mov	 rsi, rbx
  01b2d	48 8b c7	 mov	 rax, rdi
  01b30	48 c1 c8 1c	 ror	 rax, 28
  01b34	48 0b f7	 or	 rsi, rdi
  01b37	48 33 c8	 xor	 rcx, rax
  01b3a	49 23 f3	 and	 rsi, r11
  01b3d	48 8b c7	 mov	 rax, rdi
  01b40	48 c1 c0 19	 rol	 rax, 25
  01b44	48 33 c8	 xor	 rcx, rax
  01b47	48 8b c3	 mov	 rax, rbx
  01b4a	48 23 c7	 and	 rax, rdi
  01b4d	48 0b f0	 or	 rsi, rax
  01b50	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 215  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],55,Py_ULL(0x682e6ff3d6b2b8a3));

  01b54	49 8b ca	 mov	 rcx, r10
  01b57	48 03 f0	 add	 rsi, rax
  01b5a	48 c1 c1 17	 rol	 rcx, 23
  01b5e	49 8b c2	 mov	 rax, r10
  01b61	48 c1 c8 12	 ror	 rax, 18
  01b65	49 8b d1	 mov	 rdx, r9
  01b68	48 33 c8	 xor	 rcx, rax
  01b6b	49 33 d0	 xor	 rdx, r8
  01b6e	49 8b c2	 mov	 rax, r10
  01b71	48 c1 c8 0e	 ror	 rax, 14
  01b75	49 23 d2	 and	 rdx, r10
  01b78	48 33 c8	 xor	 rcx, rax
  01b7b	49 33 d0	 xor	 rdx, r8
  01b7e	48 b8 a3 b8 b2
	d6 f3 6f 2e 68	 mov	 rax, 7507060721942968483 ; 682e6ff3d6b2b8a3H
  01b88	48 03 8d d8 00
	00 00		 add	 rcx, QWORD PTR W$[rbp+184]
  01b8f	48 03 d1	 add	 rdx, rcx
  01b92	48 8b ce	 mov	 rcx, rsi
  01b95	48 03 d0	 add	 rdx, rax
  01b98	48 8b c6	 mov	 rax, rsi
  01b9b	49 03 d4	 add	 rdx, r12
  01b9e	4c 8b e7	 mov	 r12, rdi
  01ba1	4c 03 da	 add	 r11, rdx
  01ba4	48 c1 c1 1e	 rol	 rcx, 30
  01ba8	48 c1 c8 1c	 ror	 rax, 28
  01bac	48 33 c8	 xor	 rcx, rax
  01baf	4c 0b e6	 or	 r12, rsi
  01bb2	48 8b c6	 mov	 rax, rsi
  01bb5	48 c1 c0 19	 rol	 rax, 25
  01bb9	4c 23 e3	 and	 r12, rbx
  01bbc	48 33 c8	 xor	 rcx, rax
  01bbf	48 8b c7	 mov	 rax, rdi
  01bc2	48 23 c6	 and	 rax, rsi
  01bc5	4c 0b e0	 or	 r12, rax
  01bc8	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 216  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],56,Py_ULL(0x748f82ee5defb2fc));

  01bcc	49 8b cb	 mov	 rcx, r11
  01bcf	4c 03 e0	 add	 r12, rax
  01bd2	48 c1 c1 17	 rol	 rcx, 23
  01bd6	49 8b c3	 mov	 rax, r11
  01bd9	48 c1 c8 12	 ror	 rax, 18
  01bdd	49 8b d2	 mov	 rdx, r10
  01be0	48 33 c8	 xor	 rcx, rax
  01be3	49 33 d1	 xor	 rdx, r9
  01be6	49 8b c3	 mov	 rax, r11
  01be9	48 c1 c8 0e	 ror	 rax, 14
  01bed	49 23 d3	 and	 rdx, r11
  01bf0	48 33 c8	 xor	 rcx, rax
  01bf3	49 33 d1	 xor	 rdx, r9
  01bf6	48 b8 fc b2 ef
	5d ee 82 8f 74	 mov	 rax, 8399075790359081724 ; 748f82ee5defb2fcH
  01c00	48 03 8d e0 00
	00 00		 add	 rcx, QWORD PTR W$[rbp+192]
  01c07	48 03 d1	 add	 rdx, rcx
  01c0a	49 8b cc	 mov	 rcx, r12
  01c0d	48 03 d0	 add	 rdx, rax
  01c10	49 8b c4	 mov	 rax, r12
  01c13	49 03 d0	 add	 rdx, r8
  01c16	4c 8b c6	 mov	 r8, rsi
  01c19	48 03 da	 add	 rbx, rdx
  01c1c	48 c1 c1 1e	 rol	 rcx, 30
  01c20	48 c1 c8 1c	 ror	 rax, 28
  01c24	48 33 c8	 xor	 rcx, rax
  01c27	4d 0b c4	 or	 r8, r12
  01c2a	49 8b c4	 mov	 rax, r12
  01c2d	48 c1 c0 19	 rol	 rax, 25
  01c31	4c 23 c7	 and	 r8, rdi
  01c34	48 33 c8	 xor	 rcx, rax
  01c37	48 8b c6	 mov	 rax, rsi
  01c3a	49 23 c4	 and	 rax, r12
  01c3d	4c 0b c0	 or	 r8, rax
  01c40	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]
  01c44	4c 03 c0	 add	 r8, rax

; 217  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],57,Py_ULL(0x78a5636f43172f60));

  01c47	49 8b d2	 mov	 rdx, r10
  01c4a	48 8b cb	 mov	 rcx, rbx
  01c4d	48 c1 c1 17	 rol	 rcx, 23
  01c51	49 33 d3	 xor	 rdx, r11
  01c54	48 8b c3	 mov	 rax, rbx
  01c57	48 c1 c8 12	 ror	 rax, 18
  01c5b	48 23 d3	 and	 rdx, rbx
  01c5e	48 33 c8	 xor	 rcx, rax
  01c61	49 33 d2	 xor	 rdx, r10
  01c64	48 8b c3	 mov	 rax, rbx
  01c67	48 c1 c8 0e	 ror	 rax, 14
  01c6b	48 33 c8	 xor	 rcx, rax
  01c6e	48 b8 60 2f 17
	43 6f 63 a5 78	 mov	 rax, 8693463985226723168 ; 78a5636f43172f60H
  01c78	48 03 8d e8 00
	00 00		 add	 rcx, QWORD PTR W$[rbp+200]
  01c7f	48 03 d1	 add	 rdx, rcx
  01c82	49 8b c8	 mov	 rcx, r8
  01c85	48 03 d0	 add	 rdx, rax
  01c88	49 8b c0	 mov	 rax, r8
  01c8b	49 03 d1	 add	 rdx, r9
  01c8e	4d 8b cc	 mov	 r9, r12
  01c91	48 03 fa	 add	 rdi, rdx
  01c94	48 c1 c1 1e	 rol	 rcx, 30
  01c98	48 c1 c8 1c	 ror	 rax, 28
  01c9c	48 33 c8	 xor	 rcx, rax
  01c9f	4d 0b c8	 or	 r9, r8
  01ca2	49 8b c0	 mov	 rax, r8
  01ca5	48 c1 c0 19	 rol	 rax, 25
  01ca9	4c 23 ce	 and	 r9, rsi
  01cac	48 33 c8	 xor	 rcx, rax
  01caf	49 8b c4	 mov	 rax, r12
  01cb2	49 23 c0	 and	 rax, r8
  01cb5	4c 0b c8	 or	 r9, rax
  01cb8	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 218  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],58,Py_ULL(0x84c87814a1f0ab72));

  01cbc	48 8b cf	 mov	 rcx, rdi
  01cbf	4c 03 c8	 add	 r9, rax
  01cc2	48 c1 c1 17	 rol	 rcx, 23
  01cc6	48 8b c7	 mov	 rax, rdi
  01cc9	48 c1 c8 12	 ror	 rax, 18
  01ccd	48 8b d3	 mov	 rdx, rbx
  01cd0	48 33 c8	 xor	 rcx, rax
  01cd3	49 33 d3	 xor	 rdx, r11
  01cd6	48 8b c7	 mov	 rax, rdi
  01cd9	48 c1 c8 0e	 ror	 rax, 14
  01cdd	48 23 d7	 and	 rdx, rdi
  01ce0	48 33 c8	 xor	 rcx, rax
  01ce3	49 33 d3	 xor	 rdx, r11
  01ce6	48 b8 72 ab f0
	a1 14 78 c8 84	 mov	 rax, -8878714635349349518 ; 84c87814a1f0ab72H
  01cf0	48 03 8d f0 00
	00 00		 add	 rcx, QWORD PTR W$[rbp+208]
  01cf7	48 03 d1	 add	 rdx, rcx
  01cfa	49 8b c9	 mov	 rcx, r9
  01cfd	48 03 d0	 add	 rdx, rax
  01d00	49 8b c1	 mov	 rax, r9
  01d03	49 03 d2	 add	 rdx, r10
  01d06	4d 8b d1	 mov	 r10, r9
  01d09	48 03 f2	 add	 rsi, rdx
  01d0c	48 c1 c1 1e	 rol	 rcx, 30
  01d10	48 c1 c8 1c	 ror	 rax, 28
  01d14	48 33 c8	 xor	 rcx, rax
  01d17	4d 0b d0	 or	 r10, r8
  01d1a	49 8b c1	 mov	 rax, r9
  01d1d	48 c1 c0 19	 rol	 rax, 25
  01d21	4d 23 d4	 and	 r10, r12
  01d24	48 33 c8	 xor	 rcx, rax
  01d27	49 8b c1	 mov	 rax, r9
  01d2a	49 23 c0	 and	 rax, r8
  01d2d	4c 0b d0	 or	 r10, rax
  01d30	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 219  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],59,Py_ULL(0x8cc702081a6439ec));

  01d34	48 8b ce	 mov	 rcx, rsi
  01d37	4c 03 d0	 add	 r10, rax
  01d3a	48 c1 c1 17	 rol	 rcx, 23
  01d3e	48 8b c6	 mov	 rax, rsi
  01d41	48 c1 c8 12	 ror	 rax, 18
  01d45	48 8b d3	 mov	 rdx, rbx
  01d48	48 33 c8	 xor	 rcx, rax
  01d4b	48 33 d7	 xor	 rdx, rdi
  01d4e	48 8b c6	 mov	 rax, rsi
  01d51	48 c1 c8 0e	 ror	 rax, 14
  01d55	48 23 d6	 and	 rdx, rsi
  01d58	48 33 c8	 xor	 rcx, rax
  01d5b	48 33 d3	 xor	 rdx, rbx
  01d5e	48 03 8d f8 00
	00 00		 add	 rcx, QWORD PTR W$[rbp+216]
  01d65	48 b8 ec 39 64
	1a 08 02 c7 8c	 mov	 rax, -8302665154208450068 ; 8cc702081a6439ecH
  01d6f	48 03 d1	 add	 rdx, rcx
  01d72	49 8b ca	 mov	 rcx, r10
  01d75	48 03 d0	 add	 rdx, rax
  01d78	49 8b c2	 mov	 rax, r10
  01d7b	49 03 d3	 add	 rdx, r11
  01d7e	4d 8b da	 mov	 r11, r10
  01d81	4c 03 e2	 add	 r12, rdx
  01d84	48 c1 c1 1e	 rol	 rcx, 30
  01d88	48 c1 c8 1c	 ror	 rax, 28
  01d8c	48 33 c8	 xor	 rcx, rax
  01d8f	4d 0b d9	 or	 r11, r9
  01d92	49 8b c2	 mov	 rax, r10
  01d95	48 c1 c0 19	 rol	 rax, 25
  01d99	4d 23 d8	 and	 r11, r8
  01d9c	48 33 c8	 xor	 rcx, rax
  01d9f	49 8b c2	 mov	 rax, r10
  01da2	49 23 c1	 and	 rax, r9
  01da5	4c 0b d8	 or	 r11, rax
  01da8	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 220  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],60,Py_ULL(0x90befffa23631e28));

  01dac	49 8b cc	 mov	 rcx, r12
  01daf	4c 03 d8	 add	 r11, rax
  01db2	48 c1 c1 17	 rol	 rcx, 23
  01db6	49 8b c4	 mov	 rax, r12
  01db9	48 c1 c8 12	 ror	 rax, 18
  01dbd	48 8b d7	 mov	 rdx, rdi
  01dc0	48 33 c8	 xor	 rcx, rax
  01dc3	48 33 d6	 xor	 rdx, rsi
  01dc6	49 8b c4	 mov	 rax, r12
  01dc9	48 c1 c8 0e	 ror	 rax, 14
  01dcd	49 23 d4	 and	 rdx, r12
  01dd0	48 33 c8	 xor	 rcx, rax
  01dd3	48 33 d7	 xor	 rdx, rdi
  01dd6	48 b8 28 1e 63
	23 fa ff be 90	 mov	 rax, -8016688836872298968 ; 90befffa23631e28H
  01de0	48 03 8d 00 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+224]
  01de7	48 03 d1	 add	 rdx, rcx
  01dea	49 8b cb	 mov	 rcx, r11
  01ded	48 03 d0	 add	 rdx, rax
  01df0	49 8b c3	 mov	 rax, r11
  01df3	48 03 d3	 add	 rdx, rbx
  01df6	49 8b da	 mov	 rbx, r10
  01df9	4c 03 c2	 add	 r8, rdx
  01dfc	48 c1 c1 1e	 rol	 rcx, 30
  01e00	48 c1 c8 1c	 ror	 rax, 28
  01e04	48 33 c8	 xor	 rcx, rax
  01e07	49 0b db	 or	 rbx, r11
  01e0a	49 8b c3	 mov	 rax, r11
  01e0d	48 c1 c0 19	 rol	 rax, 25
  01e11	49 23 d9	 and	 rbx, r9
  01e14	48 33 c8	 xor	 rcx, rax
  01e17	49 8b c2	 mov	 rax, r10
  01e1a	49 23 c3	 and	 rax, r11
  01e1d	48 0b d8	 or	 rbx, rax
  01e20	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 221  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],61,Py_ULL(0xa4506cebde82bde9));

  01e24	49 8b c8	 mov	 rcx, r8
  01e27	48 03 d8	 add	 rbx, rax
  01e2a	48 c1 c1 17	 rol	 rcx, 23
  01e2e	49 8b c0	 mov	 rax, r8
  01e31	48 c1 c8 12	 ror	 rax, 18
  01e35	48 8b d6	 mov	 rdx, rsi
  01e38	48 33 c8	 xor	 rcx, rax
  01e3b	49 33 d4	 xor	 rdx, r12
  01e3e	49 8b c0	 mov	 rax, r8
  01e41	48 c1 c8 0e	 ror	 rax, 14
  01e45	49 23 d0	 and	 rdx, r8
  01e48	48 33 c8	 xor	 rcx, rax
  01e4b	48 33 d6	 xor	 rdx, rsi
  01e4e	48 b8 e9 bd 82
	de eb 6c 50 a4	 mov	 rax, -6606660893046293015 ; a4506cebde82bde9H
  01e58	48 03 8d 08 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+232]
  01e5f	48 03 d1	 add	 rdx, rcx
  01e62	48 8b cb	 mov	 rcx, rbx
  01e65	48 03 d0	 add	 rdx, rax
  01e68	48 8b c3	 mov	 rax, rbx
  01e6b	48 03 d7	 add	 rdx, rdi
  01e6e	4c 03 ca	 add	 r9, rdx
  01e71	48 c1 c1 1e	 rol	 rcx, 30
  01e75	48 c1 c8 1c	 ror	 rax, 28
  01e79	48 33 c8	 xor	 rcx, rax
  01e7c	48 8b c3	 mov	 rax, rbx
  01e7f	48 c1 c0 19	 rol	 rax, 25
  01e83	48 33 c8	 xor	 rcx, rax
  01e86	48 8b fb	 mov	 rdi, rbx
  01e89	48 8b c3	 mov	 rax, rbx
  01e8c	49 23 c3	 and	 rax, r11
  01e8f	49 0b fb	 or	 rdi, r11
  01e92	49 23 fa	 and	 rdi, r10
  01e95	48 0b f8	 or	 rdi, rax
  01e98	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 222  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],62,Py_ULL(0xbef9a3f7b2c67915));

  01e9c	49 8b d4	 mov	 rdx, r12
  01e9f	48 03 f8	 add	 rdi, rax
  01ea2	49 33 d0	 xor	 rdx, r8
  01ea5	49 8b c9	 mov	 rcx, r9
  01ea8	48 c1 c1 17	 rol	 rcx, 23
  01eac	49 23 d1	 and	 rdx, r9
  01eaf	49 8b c1	 mov	 rax, r9
  01eb2	48 c1 c8 12	 ror	 rax, 18
  01eb6	49 33 d4	 xor	 rdx, r12
  01eb9	48 33 c8	 xor	 rcx, rax
  01ebc	49 8b c1	 mov	 rax, r9
  01ebf	48 c1 c8 0e	 ror	 rax, 14
  01ec3	48 33 c8	 xor	 rcx, rax
  01ec6	48 b8 15 79 c6
	b2 f7 a3 f9 be	 mov	 rax, -4685533653050689259 ; bef9a3f7b2c67915H
  01ed0	48 03 8d 10 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+240]
  01ed7	48 03 d1	 add	 rdx, rcx
  01eda	48 8b cf	 mov	 rcx, rdi
  01edd	48 03 d0	 add	 rdx, rax
  01ee0	48 8b c7	 mov	 rax, rdi
  01ee3	48 03 d6	 add	 rdx, rsi
  01ee6	48 8b f3	 mov	 rsi, rbx
  01ee9	4c 03 d2	 add	 r10, rdx
  01eec	48 c1 c1 1e	 rol	 rcx, 30
  01ef0	48 c1 c8 1c	 ror	 rax, 28
  01ef4	48 33 c8	 xor	 rcx, rax
  01ef7	48 0b f7	 or	 rsi, rdi
  01efa	48 8b c7	 mov	 rax, rdi
  01efd	48 c1 c0 19	 rol	 rax, 25
  01f01	49 23 f3	 and	 rsi, r11
  01f04	48 33 c8	 xor	 rcx, rax
  01f07	48 8b c3	 mov	 rax, rbx
  01f0a	48 23 c7	 and	 rax, rdi
  01f0d	48 0b f0	 or	 rsi, rax
  01f10	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 223  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],63,Py_ULL(0xc67178f2e372532b));

  01f14	49 8b ca	 mov	 rcx, r10
  01f17	48 03 f0	 add	 rsi, rax
  01f1a	48 c1 c1 17	 rol	 rcx, 23
  01f1e	49 8b c2	 mov	 rax, r10
  01f21	48 c1 c8 12	 ror	 rax, 18
  01f25	49 8b d1	 mov	 rdx, r9
  01f28	48 33 c8	 xor	 rcx, rax
  01f2b	49 33 d0	 xor	 rdx, r8
  01f2e	49 8b c2	 mov	 rax, r10
  01f31	48 c1 c8 0e	 ror	 rax, 14
  01f35	49 23 d2	 and	 rdx, r10
  01f38	48 33 c8	 xor	 rcx, rax
  01f3b	49 33 d0	 xor	 rdx, r8
  01f3e	48 b8 2b 53 72
	e3 f2 78 71 c6	 mov	 rax, -4147400797238176981 ; c67178f2e372532bH
  01f48	48 03 8d 18 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+248]
  01f4f	48 03 d1	 add	 rdx, rcx
  01f52	48 8b ce	 mov	 rcx, rsi
  01f55	48 03 d0	 add	 rdx, rax
  01f58	48 8b c6	 mov	 rax, rsi
  01f5b	49 03 d4	 add	 rdx, r12
  01f5e	4c 8b e7	 mov	 r12, rdi
  01f61	4c 03 da	 add	 r11, rdx
  01f64	48 c1 c1 1e	 rol	 rcx, 30
  01f68	48 c1 c8 1c	 ror	 rax, 28
  01f6c	48 33 c8	 xor	 rcx, rax
  01f6f	4c 0b e6	 or	 r12, rsi
  01f72	48 8b c6	 mov	 rax, rsi
  01f75	48 c1 c0 19	 rol	 rax, 25
  01f79	4c 23 e3	 and	 r12, rbx
  01f7c	48 33 c8	 xor	 rcx, rax
  01f7f	48 8b c7	 mov	 rax, rdi
  01f82	48 23 c6	 and	 rax, rsi
  01f85	4c 0b e0	 or	 r12, rax
  01f88	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 224  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],64,Py_ULL(0xca273eceea26619c));

  01f8c	49 8b cb	 mov	 rcx, r11
  01f8f	4c 03 e0	 add	 r12, rax
  01f92	49 8b c3	 mov	 rax, r11
  01f95	48 c1 c1 17	 rol	 rcx, 23
  01f99	48 c1 c8 12	 ror	 rax, 18
  01f9d	48 33 c8	 xor	 rcx, rax
  01fa0	49 8b c3	 mov	 rax, r11
  01fa3	49 8b d2	 mov	 rdx, r10
  01fa6	49 33 d1	 xor	 rdx, r9
  01fa9	48 c1 c8 0e	 ror	 rax, 14
  01fad	48 33 c8	 xor	 rcx, rax
  01fb0	49 23 d3	 and	 rdx, r11
  01fb3	48 b8 9c 61 26
	ea ce 3e 27 ca	 mov	 rax, -3880063495543823972 ; ca273eceea26619cH
  01fbd	48 03 8d 20 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+256]
  01fc4	49 33 d1	 xor	 rdx, r9
  01fc7	48 03 d1	 add	 rdx, rcx
  01fca	49 8b cc	 mov	 rcx, r12
  01fcd	48 03 d0	 add	 rdx, rax
  01fd0	49 8b c4	 mov	 rax, r12
  01fd3	49 03 d0	 add	 rdx, r8
  01fd6	4c 8b c6	 mov	 r8, rsi
  01fd9	48 03 da	 add	 rbx, rdx
  01fdc	48 c1 c1 1e	 rol	 rcx, 30
  01fe0	48 c1 c8 1c	 ror	 rax, 28
  01fe4	48 33 c8	 xor	 rcx, rax
  01fe7	4d 0b c4	 or	 r8, r12
  01fea	49 8b c4	 mov	 rax, r12
  01fed	48 c1 c0 19	 rol	 rax, 25
  01ff1	4c 23 c7	 and	 r8, rdi
  01ff4	48 33 c8	 xor	 rcx, rax
  01ff7	48 8b c6	 mov	 rax, rsi
  01ffa	49 23 c4	 and	 rax, r12
  01ffd	4c 0b c0	 or	 r8, rax
  02000	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 225  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],65,Py_ULL(0xd186b8c721c0c207));

  02004	48 8b cb	 mov	 rcx, rbx
  02007	4c 03 c0	 add	 r8, rax
  0200a	48 c1 c1 17	 rol	 rcx, 23
  0200e	48 8b c3	 mov	 rax, rbx
  02011	48 c1 c8 12	 ror	 rax, 18
  02015	49 8b d2	 mov	 rdx, r10
  02018	48 33 c8	 xor	 rcx, rax
  0201b	49 33 d3	 xor	 rdx, r11
  0201e	48 8b c3	 mov	 rax, rbx
  02021	48 c1 c8 0e	 ror	 rax, 14
  02025	48 23 d3	 and	 rdx, rbx
  02028	48 33 c8	 xor	 rcx, rax
  0202b	49 33 d2	 xor	 rdx, r10
  0202e	48 b8 07 c2 c0
	21 c7 b8 86 d1	 mov	 rax, -3348786107499101689 ; d186b8c721c0c207H
  02038	48 03 8d 28 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+264]
  0203f	48 03 d1	 add	 rdx, rcx
  02042	49 8b c8	 mov	 rcx, r8
  02045	48 03 d0	 add	 rdx, rax
  02048	49 8b c0	 mov	 rax, r8
  0204b	49 03 d1	 add	 rdx, r9
  0204e	4d 8b cc	 mov	 r9, r12
  02051	48 03 fa	 add	 rdi, rdx
  02054	48 c1 c1 1e	 rol	 rcx, 30
  02058	48 c1 c8 1c	 ror	 rax, 28
  0205c	48 33 c8	 xor	 rcx, rax
  0205f	4d 0b c8	 or	 r9, r8
  02062	49 8b c0	 mov	 rax, r8
  02065	48 c1 c0 19	 rol	 rax, 25
  02069	4c 23 ce	 and	 r9, rsi
  0206c	48 33 c8	 xor	 rcx, rax
  0206f	49 8b c4	 mov	 rax, r12
  02072	49 23 c0	 and	 rax, r8
  02075	4c 0b c8	 or	 r9, rax
  02078	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 226  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],66,Py_ULL(0xeada7dd6cde0eb1e));

  0207c	48 8b cf	 mov	 rcx, rdi
  0207f	4c 03 c8	 add	 r9, rax
  02082	48 c1 c1 17	 rol	 rcx, 23
  02086	48 8b c7	 mov	 rax, rdi
  02089	48 c1 c8 12	 ror	 rax, 18
  0208d	48 8b d3	 mov	 rdx, rbx
  02090	48 33 c8	 xor	 rcx, rax
  02093	49 33 d3	 xor	 rdx, r11
  02096	48 8b c7	 mov	 rax, rdi
  02099	48 23 d7	 and	 rdx, rdi
  0209c	48 c1 c8 0e	 ror	 rax, 14
  020a0	48 33 c8	 xor	 rcx, rax
  020a3	49 33 d3	 xor	 rdx, r11
  020a6	48 b8 1e eb e0
	cd d6 7d da ea	 mov	 rax, -1523767162380948706 ; eada7dd6cde0eb1eH
  020b0	48 03 8d 30 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+272]
  020b7	48 03 d1	 add	 rdx, rcx
  020ba	48 03 d0	 add	 rdx, rax
  020bd	49 03 d2	 add	 rdx, r10
  020c0	48 03 f2	 add	 rsi, rdx
  020c3	49 8b c9	 mov	 rcx, r9
  020c6	49 8b c1	 mov	 rax, r9
  020c9	48 c1 c1 1e	 rol	 rcx, 30
  020cd	48 c1 c8 1c	 ror	 rax, 28
  020d1	4d 8b d1	 mov	 r10, r9
  020d4	48 33 c8	 xor	 rcx, rax
  020d7	4d 0b d0	 or	 r10, r8
  020da	49 8b c1	 mov	 rax, r9
  020dd	48 c1 c0 19	 rol	 rax, 25
  020e1	4d 23 d4	 and	 r10, r12
  020e4	48 33 c8	 xor	 rcx, rax
  020e7	49 8b c1	 mov	 rax, r9
  020ea	49 23 c0	 and	 rax, r8
  020ed	4c 0b d0	 or	 r10, rax
  020f0	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 227  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],67,Py_ULL(0xf57d4f7fee6ed178));

  020f4	48 8b ce	 mov	 rcx, rsi
  020f7	4c 03 d0	 add	 r10, rax
  020fa	48 c1 c1 17	 rol	 rcx, 23
  020fe	48 8b c6	 mov	 rax, rsi
  02101	48 c1 c8 12	 ror	 rax, 18
  02105	48 8b d3	 mov	 rdx, rbx

; 228  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],68,Py_ULL(0x06f067aa72176fba));

  02108	4d 8b ea	 mov	 r13, r10
  0210b	48 33 c8	 xor	 rcx, rax
  0210e	48 33 d7	 xor	 rdx, rdi
  02111	48 8b c6	 mov	 rax, rsi
  02114	48 c1 c8 0e	 ror	 rax, 14
  02118	48 23 d6	 and	 rdx, rsi
  0211b	48 33 c8	 xor	 rcx, rax
  0211e	48 33 d3	 xor	 rdx, rbx
  02121	48 b8 78 d1 6e
	ee 7f 4f 7d f5	 mov	 rax, -757361751448694408 ; f57d4f7fee6ed178H
  0212b	48 03 8d 38 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+280]
  02132	48 03 d1	 add	 rdx, rcx
  02135	49 8b ca	 mov	 rcx, r10
  02138	48 03 d0	 add	 rdx, rax
  0213b	49 8b c2	 mov	 rax, r10
  0213e	49 03 d3	 add	 rdx, r11
  02141	4d 8b da	 mov	 r11, r10
  02144	4c 03 e2	 add	 r12, rdx
  02147	48 c1 c1 1e	 rol	 rcx, 30
  0214b	48 c1 c8 1c	 ror	 rax, 28
  0214f	48 33 c8	 xor	 rcx, rax
  02152	4d 0b d9	 or	 r11, r9
  02155	49 8b c2	 mov	 rax, r10
  02158	48 c1 c0 19	 rol	 rax, 25
  0215c	4d 23 d8	 and	 r11, r8
  0215f	48 33 c8	 xor	 rcx, rax
  02162	49 8b c2	 mov	 rax, r10
  02165	49 23 c1	 and	 rax, r9
  02168	4c 0b d8	 or	 r11, rax
  0216b	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]
  0216f	49 8b cc	 mov	 rcx, r12
  02172	4c 03 d8	 add	 r11, rax
  02175	48 c1 c1 17	 rol	 rcx, 23
  02179	49 8b c4	 mov	 rax, r12
  0217c	48 c1 c8 12	 ror	 rax, 18
  02180	48 8b d7	 mov	 rdx, rdi
  02183	4d 0b eb	 or	 r13, r11
  02186	48 33 c8	 xor	 rcx, rax
  02189	48 33 d6	 xor	 rdx, rsi
  0218c	49 8b c4	 mov	 rax, r12
  0218f	48 c1 c8 0e	 ror	 rax, 14
  02193	49 23 d4	 and	 rdx, r12
  02196	48 33 c8	 xor	 rcx, rax
  02199	48 33 d7	 xor	 rdx, rdi
  0219c	48 b8 ba 6f 17
	72 aa 67 f0 06	 mov	 rax, 500013540394364858	; 06f067aa72176fbaH
  021a6	48 03 8d 40 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+288]
  021ad	48 03 d1	 add	 rdx, rcx
  021b0	49 8b cb	 mov	 rcx, r11
  021b3	48 03 d0	 add	 rdx, rax
  021b6	49 8b c3	 mov	 rax, r11
  021b9	48 03 d3	 add	 rdx, rbx
  021bc	4c 03 c2	 add	 r8, rdx
  021bf	48 c1 c1 1e	 rol	 rcx, 30
  021c3	48 c1 c8 1c	 ror	 rax, 28
  021c7	48 33 c8	 xor	 rcx, rax
  021ca	49 8b c3	 mov	 rax, r11
  021cd	48 c1 c0 19	 rol	 rax, 25
  021d1	48 33 c8	 xor	 rcx, rax
  021d4	4d 23 e9	 and	 r13, r9
  021d7	49 8b c2	 mov	 rax, r10
  021da	49 23 c3	 and	 rax, r11
  021dd	4c 0b e8	 or	 r13, rax
  021e0	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 229  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],69,Py_ULL(0x0a637dc5a2c898a6));

  021e4	49 8b c8	 mov	 rcx, r8
  021e7	4c 03 e8	 add	 r13, rax
  021ea	48 c1 c1 17	 rol	 rcx, 23
  021ee	49 8b c0	 mov	 rax, r8
  021f1	48 c1 c8 12	 ror	 rax, 18
  021f5	48 8b d6	 mov	 rdx, rsi
  021f8	4d 8b f5	 mov	 r14, r13
  021fb	48 33 c8	 xor	 rcx, rax
  021fe	49 33 d4	 xor	 rdx, r12
  02201	4d 0b f3	 or	 r14, r11
  02204	49 23 d0	 and	 rdx, r8
  02207	4d 23 f2	 and	 r14, r10
  0220a	49 8b c0	 mov	 rax, r8
  0220d	48 c1 c8 0e	 ror	 rax, 14
  02211	48 33 d6	 xor	 rdx, rsi

; 230  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],70,Py_ULL(0x113f9804bef90dae));

  02214	4d 8b fd	 mov	 r15, r13
  02217	48 33 c8	 xor	 rcx, rax
  0221a	48 b8 a6 98 c8
	a2 c5 7d 63 0a	 mov	 rax, 748580250866718886	; 0a637dc5a2c898a6H
  02224	48 03 8d 48 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+296]
  0222b	48 03 d1	 add	 rdx, rcx
  0222e	49 8b cd	 mov	 rcx, r13
  02231	48 03 d0	 add	 rdx, rax
  02234	49 8b c5	 mov	 rax, r13
  02237	48 03 d7	 add	 rdx, rdi
  0223a	4c 03 ca	 add	 r9, rdx
  0223d	48 c1 c1 1e	 rol	 rcx, 30
  02241	48 c1 c8 1c	 ror	 rax, 28
  02245	48 33 c8	 xor	 rcx, rax
  02248	49 8b c5	 mov	 rax, r13
  0224b	48 c1 c0 19	 rol	 rax, 25
  0224f	48 33 c8	 xor	 rcx, rax
  02252	49 8b c5	 mov	 rax, r13
  02255	49 23 c3	 and	 rax, r11
  02258	4c 0b f0	 or	 r14, rax
  0225b	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]
  0225f	49 8b c9	 mov	 rcx, r9
  02262	4c 03 f0	 add	 r14, rax
  02265	48 c1 c1 17	 rol	 rcx, 23
  02269	49 8b c1	 mov	 rax, r9
  0226c	48 c1 c8 12	 ror	 rax, 18
  02270	4d 0b fe	 or	 r15, r14
  02273	49 8b d4	 mov	 rdx, r12
  02276	48 33 c8	 xor	 rcx, rax
  02279	49 33 d0	 xor	 rdx, r8
  0227c	4d 23 fb	 and	 r15, r11
  0227f	49 23 d1	 and	 rdx, r9
  02282	49 8b c1	 mov	 rax, r9
  02285	48 c1 c8 0e	 ror	 rax, 14
  02289	49 33 d4	 xor	 rdx, r12
  0228c	48 33 c8	 xor	 rcx, rax
  0228f	48 b8 ae 0d f9
	be 04 98 3f 11	 mov	 rax, 1242879168328830382 ; 113f9804bef90daeH
  02299	48 03 8d 50 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+304]
  022a0	48 03 d1	 add	 rdx, rcx
  022a3	49 8b ce	 mov	 rcx, r14
  022a6	48 03 d0	 add	 rdx, rax
  022a9	49 8b c6	 mov	 rax, r14
  022ac	48 03 d6	 add	 rdx, rsi
  022af	4c 03 d2	 add	 r10, rdx
  022b2	48 c1 c1 1e	 rol	 rcx, 30
  022b6	48 c1 c8 1c	 ror	 rax, 28
  022ba	48 33 c8	 xor	 rcx, rax
  022bd	49 8b c6	 mov	 rax, r14
  022c0	48 c1 c0 19	 rol	 rax, 25
  022c4	48 33 c8	 xor	 rcx, rax
  022c7	49 8b c5	 mov	 rax, r13
  022ca	49 23 c6	 and	 rax, r14
  022cd	4c 0b f8	 or	 r15, rax
  022d0	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 231  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],71,Py_ULL(0x1b710b35131c471b));

  022d4	49 8b ca	 mov	 rcx, r10
  022d7	4c 03 f8	 add	 r15, rax
  022da	48 c1 c1 17	 rol	 rcx, 23
  022de	49 8b c2	 mov	 rax, r10
  022e1	48 c1 c8 12	 ror	 rax, 18
  022e5	49 8b d1	 mov	 rdx, r9
  022e8	48 33 c8	 xor	 rcx, rax
  022eb	49 8b c2	 mov	 rax, r10
  022ee	48 c1 c8 0e	 ror	 rax, 14
  022f2	48 33 c8	 xor	 rcx, rax
  022f5	48 03 8d 58 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+312]
  022fc	49 33 d0	 xor	 rdx, r8
  022ff	48 b8 1b 47 1c
	13 35 0b 71 1b	 mov	 rax, 1977374033974150939 ; 1b710b35131c471bH
  02309	49 23 d2	 and	 rdx, r10
  0230c	49 8b de	 mov	 rbx, r14
  0230f	49 33 d0	 xor	 rdx, r8
  02312	49 0b df	 or	 rbx, r15
  02315	48 03 d1	 add	 rdx, rcx
  02318	49 23 dd	 and	 rbx, r13
  0231b	49 8b cf	 mov	 rcx, r15
  0231e	48 03 d0	 add	 rdx, rax
  02321	49 8b c7	 mov	 rax, r15
  02324	49 03 d4	 add	 rdx, r12

; 232  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],72,Py_ULL(0x28db77f523047d84));

  02327	4d 8b e7	 mov	 r12, r15
  0232a	4c 03 da	 add	 r11, rdx
  0232d	48 c1 c1 1e	 rol	 rcx, 30
  02331	48 c1 c8 1c	 ror	 rax, 28
  02335	48 33 c8	 xor	 rcx, rax
  02338	49 8b c7	 mov	 rax, r15
  0233b	48 c1 c0 19	 rol	 rax, 25
  0233f	48 33 c8	 xor	 rcx, rax
  02342	49 8b c6	 mov	 rax, r14
  02345	49 23 c7	 and	 rax, r15
  02348	48 0b d8	 or	 rbx, rax
  0234b	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]
  0234f	49 8b cb	 mov	 rcx, r11
  02352	48 03 d8	 add	 rbx, rax
  02355	48 c1 c1 17	 rol	 rcx, 23
  02359	49 8b c3	 mov	 rax, r11
  0235c	48 c1 c8 12	 ror	 rax, 18
  02360	4c 0b e3	 or	 r12, rbx
  02363	49 8b d2	 mov	 rdx, r10
  02366	48 33 c8	 xor	 rcx, rax
  02369	49 33 d1	 xor	 rdx, r9
  0236c	4d 23 e6	 and	 r12, r14
  0236f	49 23 d3	 and	 rdx, r11
  02372	49 8b c3	 mov	 rax, r11
  02375	48 c1 c8 0e	 ror	 rax, 14
  02379	49 33 d1	 xor	 rdx, r9
  0237c	48 33 c8	 xor	 rcx, rax
  0237f	48 b8 84 7d 04
	23 f5 77 db 28	 mov	 rax, 2944078676154940804 ; 28db77f523047d84H
  02389	48 03 8d 60 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+320]
  02390	48 03 d1	 add	 rdx, rcx
  02393	48 8b cb	 mov	 rcx, rbx
  02396	48 03 d0	 add	 rdx, rax
  02399	48 8b c3	 mov	 rax, rbx
  0239c	49 03 d0	 add	 rdx, r8
  0239f	4c 03 ea	 add	 r13, rdx
  023a2	48 c1 c1 1e	 rol	 rcx, 30
  023a6	48 c1 c8 1c	 ror	 rax, 28
  023aa	48 33 c8	 xor	 rcx, rax
  023ad	48 8b c3	 mov	 rax, rbx
  023b0	48 c1 c0 19	 rol	 rax, 25
  023b4	48 33 c8	 xor	 rcx, rax
  023b7	49 8b c7	 mov	 rax, r15
  023ba	48 23 c3	 and	 rax, rbx
  023bd	4c 0b e0	 or	 r12, rax
  023c0	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 233  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],73,Py_ULL(0x32caab7b40c72493));

  023c4	49 8b cd	 mov	 rcx, r13
  023c7	4c 03 e0	 add	 r12, rax
  023ca	48 c1 c1 17	 rol	 rcx, 23
  023ce	49 8b c5	 mov	 rax, r13
  023d1	48 c1 c8 12	 ror	 rax, 18
  023d5	49 8b d2	 mov	 rdx, r10
  023d8	48 33 c8	 xor	 rcx, rax
  023db	49 33 d3	 xor	 rdx, r11
  023de	49 8b c5	 mov	 rax, r13
  023e1	49 23 d5	 and	 rdx, r13
  023e4	48 c1 c8 0e	 ror	 rax, 14
  023e8	48 33 c8	 xor	 rcx, rax
  023eb	49 33 d2	 xor	 rdx, r10
  023ee	48 b8 93 24 c7
	40 7b ab ca 32	 mov	 rax, 3659926193048069267 ; 32caab7b40c72493H
  023f8	48 03 8d 68 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+328]
  023ff	48 03 d1	 add	 rdx, rcx
  02402	49 8b cc	 mov	 rcx, r12
  02405	48 03 d0	 add	 rdx, rax
  02408	49 8b c4	 mov	 rax, r12
  0240b	49 03 d1	 add	 rdx, r9
  0240e	4c 03 f2	 add	 r14, rdx
  02411	48 c1 c1 1e	 rol	 rcx, 30
  02415	48 c1 c8 1c	 ror	 rax, 28
  02419	48 33 c8	 xor	 rcx, rax
  0241c	48 8b f3	 mov	 rsi, rbx
  0241f	49 8b c4	 mov	 rax, r12
  02422	48 c1 c0 19	 rol	 rax, 25
  02426	49 0b f4	 or	 rsi, r12
  02429	48 33 c8	 xor	 rcx, rax
  0242c	49 23 f7	 and	 rsi, r15
  0242f	48 8b c3	 mov	 rax, rbx
  02432	49 23 c4	 and	 rax, r12
  02435	48 0b f0	 or	 rsi, rax
  02438	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 234  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],74,Py_ULL(0x3c9ebe0a15c9bebc));

  0243c	49 8b ce	 mov	 rcx, r14
  0243f	48 03 f0	 add	 rsi, rax
  02442	48 c1 c1 17	 rol	 rcx, 23
  02446	49 8b c6	 mov	 rax, r14
  02449	48 c1 c8 12	 ror	 rax, 18
  0244d	49 8b d5	 mov	 rdx, r13
  02450	48 8b fe	 mov	 rdi, rsi
  02453	48 33 c8	 xor	 rcx, rax
  02456	49 33 d3	 xor	 rdx, r11
  02459	49 0b fc	 or	 rdi, r12
  0245c	49 23 d6	 and	 rdx, r14
  0245f	48 23 fb	 and	 rdi, rbx
  02462	49 8b c6	 mov	 rax, r14
  02465	48 c1 c8 0e	 ror	 rax, 14
  02469	49 33 d3	 xor	 rdx, r11
  0246c	48 33 c8	 xor	 rcx, rax
  0246f	48 b8 bc be c9
	15 0a be 9e 3c	 mov	 rax, 4368137639120453308 ; 3c9ebe0a15c9bebcH
  02479	48 03 8d 70 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+336]
  02480	48 03 d1	 add	 rdx, rcx
  02483	48 8b ce	 mov	 rcx, rsi
  02486	48 03 d0	 add	 rdx, rax
  02489	48 8b c6	 mov	 rax, rsi
  0248c	49 03 d2	 add	 rdx, r10
  0248f	4c 03 fa	 add	 r15, rdx
  02492	48 c1 c1 1e	 rol	 rcx, 30
  02496	48 c1 c8 1c	 ror	 rax, 28
  0249a	48 33 c8	 xor	 rcx, rax
  0249d	48 8b c6	 mov	 rax, rsi
  024a0	48 c1 c0 19	 rol	 rax, 25
  024a4	48 33 c8	 xor	 rcx, rax
  024a7	48 8b c6	 mov	 rax, rsi
  024aa	49 23 c4	 and	 rax, r12
  024ad	48 0b f8	 or	 rdi, rax
  024b0	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 235  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],75,Py_ULL(0x431d67c49c100d4c));

  024b4	49 8b cf	 mov	 rcx, r15
  024b7	48 03 f8	 add	 rdi, rax
  024ba	48 c1 c1 17	 rol	 rcx, 23
  024be	49 8b c7	 mov	 rax, r15
  024c1	48 c1 c8 12	 ror	 rax, 18
  024c5	49 8b d5	 mov	 rdx, r13
  024c8	48 33 c8	 xor	 rcx, rax
  024cb	49 33 d6	 xor	 rdx, r14
  024ce	49 8b c7	 mov	 rax, r15
  024d1	48 c1 c8 0e	 ror	 rax, 14
  024d5	49 23 d7	 and	 rdx, r15
  024d8	48 33 c8	 xor	 rcx, rax
  024db	49 33 d5	 xor	 rdx, r13
  024de	48 b8 4c 0d 10
	9c c4 67 1d 43	 mov	 rax, 4836135668995329356 ; 431d67c49c100d4cH
  024e8	48 03 8d 78 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+344]
  024ef	48 03 d1	 add	 rdx, rcx
  024f2	48 8b cf	 mov	 rcx, rdi
  024f5	48 03 d0	 add	 rdx, rax
  024f8	48 8b c7	 mov	 rax, rdi
  024fb	49 03 d3	 add	 rdx, r11
  024fe	48 03 da	 add	 rbx, rdx
  02501	48 c1 c1 1e	 rol	 rcx, 30
  02505	48 c1 c8 1c	 ror	 rax, 28
  02509	48 33 c8	 xor	 rcx, rax
  0250c	48 89 9d e8 01
	00 00		 mov	 QWORD PTR S$54$[rbp-256], rbx
  02513	48 8b c7	 mov	 rax, rdi
  02516	48 c1 c0 19	 rol	 rax, 25
  0251a	48 8b df	 mov	 rbx, rdi
  0251d	48 33 c8	 xor	 rcx, rax
  02520	48 0b de	 or	 rbx, rsi
  02523	48 8b c7	 mov	 rax, rdi
  02526	48 23 c6	 and	 rax, rsi
  02529	49 23 dc	 and	 rbx, r12
  0252c	48 0b d8	 or	 rbx, rax
  0252f	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]
  02533	48 03 d8	 add	 rbx, rax

; 236  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],76,Py_ULL(0x4cc5d4becb3e42b6));

  02536	4c 8b 85 e8 01
	00 00		 mov	 r8, QWORD PTR S$54$[rbp-256]
  0253d	49 8b d6	 mov	 rdx, r14
  02540	4c 8b df	 mov	 r11, rdi
  02543	49 33 d7	 xor	 rdx, r15
  02546	4c 0b db	 or	 r11, rbx
  02549	49 8b c8	 mov	 rcx, r8
  0254c	48 c1 c1 17	 rol	 rcx, 23
  02550	49 23 d0	 and	 rdx, r8
  02553	4c 23 de	 and	 r11, rsi
  02556	49 33 d6	 xor	 rdx, r14
  02559	49 8b c0	 mov	 rax, r8
  0255c	48 c1 c8 12	 ror	 rax, 18
  02560	48 33 c8	 xor	 rcx, rax
  02563	49 8b c0	 mov	 rax, r8
  02566	48 c1 c8 0e	 ror	 rax, 14
  0256a	48 33 c8	 xor	 rcx, rax
  0256d	48 b8 b6 42 3e
	cb be d4 c5 4c	 mov	 rax, 5532061633213252278 ; 4cc5d4becb3e42b6H
  02577	48 03 8d 80 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+352]
  0257e	48 03 d1	 add	 rdx, rcx
  02581	48 8b cb	 mov	 rcx, rbx
  02584	48 03 d0	 add	 rdx, rax
  02587	48 8b c3	 mov	 rax, rbx
  0258a	49 03 d5	 add	 rdx, r13
  0258d	4c 03 e2	 add	 r12, rdx
  02590	48 c1 c1 1e	 rol	 rcx, 30
  02594	48 c1 c8 1c	 ror	 rax, 28
  02598	48 33 c8	 xor	 rcx, rax
  0259b	48 8b c3	 mov	 rax, rbx
  0259e	48 c1 c0 19	 rol	 rax, 25
  025a2	48 33 c8	 xor	 rcx, rax
  025a5	48 8b c7	 mov	 rax, rdi
  025a8	48 23 c3	 and	 rax, rbx
  025ab	4c 0b d8	 or	 r11, rax
  025ae	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 237  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],77,Py_ULL(0x597f299cfc657e2a));

  025b2	49 8b cc	 mov	 rcx, r12
  025b5	4c 03 d8	 add	 r11, rax
  025b8	48 c1 c1 17	 rol	 rcx, 23
  025bc	49 8b c4	 mov	 rax, r12
  025bf	48 c1 c8 12	 ror	 rax, 18
  025c3	49 8b d7	 mov	 rdx, r15
  025c6	4d 8b d3	 mov	 r10, r11
  025c9	48 33 c8	 xor	 rcx, rax
  025cc	49 33 d0	 xor	 rdx, r8
  025cf	4c 0b d3	 or	 r10, rbx
  025d2	49 23 d4	 and	 rdx, r12
  025d5	4c 23 d7	 and	 r10, rdi
  025d8	49 8b c4	 mov	 rax, r12
  025db	48 c1 c8 0e	 ror	 rax, 14
  025df	49 33 d7	 xor	 rdx, r15
  025e2	48 33 c8	 xor	 rcx, rax
  025e5	48 b8 2a 7e 65
	fc 9c 29 7f 59	 mov	 rax, 6448918945643986474 ; 597f299cfc657e2aH
  025ef	48 03 8d 88 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+360]
  025f6	48 03 d1	 add	 rdx, rcx
  025f9	49 8b cb	 mov	 rcx, r11
  025fc	48 03 d0	 add	 rdx, rax
  025ff	49 8b c3	 mov	 rax, r11
  02602	49 03 d6	 add	 rdx, r14
  02605	48 03 f2	 add	 rsi, rdx
  02608	48 c1 c1 1e	 rol	 rcx, 30
  0260c	48 c1 c8 1c	 ror	 rax, 28
  02610	48 33 c8	 xor	 rcx, rax
  02613	49 8b c3	 mov	 rax, r11
  02616	48 c1 c0 19	 rol	 rax, 25
  0261a	48 33 c8	 xor	 rcx, rax
  0261d	49 8b c3	 mov	 rax, r11
  02620	48 23 c3	 and	 rax, rbx
  02623	4c 0b d0	 or	 r10, rax
  02626	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 238  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],78,Py_ULL(0x5fcb6fab3ad6faec));

  0262a	48 8b ce	 mov	 rcx, rsi
  0262d	4c 03 d0	 add	 r10, rax
  02630	48 c1 c1 17	 rol	 rcx, 23
  02634	48 8b c6	 mov	 rax, rsi
  02637	48 c1 c8 12	 ror	 rax, 18
  0263b	49 8b d0	 mov	 rdx, r8
  0263e	48 33 c8	 xor	 rcx, rax
  02641	49 33 d4	 xor	 rdx, r12
  02644	48 8b c6	 mov	 rax, rsi
  02647	48 c1 c8 0e	 ror	 rax, 14
  0264b	48 23 d6	 and	 rdx, rsi
  0264e	48 33 c8	 xor	 rcx, rax
  02651	49 33 d0	 xor	 rdx, r8
  02654	48 03 8d 90 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+368]
  0265b	48 b8 ec fa d6
	3a ab 6f cb 5f	 mov	 rax, 6902733635092675308 ; 5fcb6fab3ad6faecH
  02665	4d 8b cb	 mov	 r9, r11
  02668	48 03 d1	 add	 rdx, rcx
  0266b	4d 0b ca	 or	 r9, r10
  0266e	49 8b ca	 mov	 rcx, r10
  02671	48 03 d0	 add	 rdx, rax
  02674	4c 23 cb	 and	 r9, rbx
  02677	49 8b c2	 mov	 rax, r10
  0267a	49 03 d7	 add	 rdx, r15
  0267d	48 03 fa	 add	 rdi, rdx
  02680	48 c1 c1 1e	 rol	 rcx, 30
  02684	48 c1 c8 1c	 ror	 rax, 28
  02688	48 33 c8	 xor	 rcx, rax
  0268b	49 8b c2	 mov	 rax, r10
  0268e	48 c1 c0 19	 rol	 rax, 25
  02692	48 33 c8	 xor	 rcx, rax
  02695	49 8b c3	 mov	 rax, r11
  02698	49 23 c2	 and	 rax, r10
  0269b	4c 0b c8	 or	 r9, rax
  0269e	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]

; 239  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],79,Py_ULL(0x6c44198c4a475817));

  026a2	48 8b cf	 mov	 rcx, rdi
  026a5	4c 03 c8	 add	 r9, rax
  026a8	48 c1 c1 17	 rol	 rcx, 23
  026ac	48 8b c7	 mov	 rax, rdi
  026af	48 c1 c8 12	 ror	 rax, 18
  026b3	48 8b d6	 mov	 rdx, rsi
  026b6	48 33 c8	 xor	 rcx, rax
  026b9	49 33 d4	 xor	 rdx, r12
  026bc	48 8b c7	 mov	 rax, rdi
  026bf	48 c1 c8 0e	 ror	 rax, 14
  026c3	48 23 d7	 and	 rdx, rdi
  026c6	48 33 c8	 xor	 rcx, rax
  026c9	49 33 d4	 xor	 rdx, r12
  026cc	48 b8 17 58 47
	4a 8c 19 44 6c	 mov	 rax, 7801388544844847127 ; 6c44198c4a475817H
  026d6	48 03 8d 98 01
	00 00		 add	 rcx, QWORD PTR W$[rbp+376]
  026dd	48 03 d1	 add	 rdx, rcx
  026e0	49 8b ca	 mov	 rcx, r10
  026e3	48 03 c2	 add	 rax, rdx
  026e6	49 0b c9	 or	 rcx, r9
  026e9	49 8b d1	 mov	 rdx, r9
  026ec	4c 03 c0	 add	 r8, rax
  026ef	49 23 cb	 and	 rcx, r11
  026f2	49 8b c1	 mov	 rax, r9
  026f5	49 03 d8	 add	 rbx, r8
  026f8	48 c1 c2 1e	 rol	 rdx, 30
  026fc	48 c1 c8 1c	 ror	 rax, 28
  02700	48 33 d0	 xor	 rdx, rax
  02703	49 8b c1	 mov	 rax, r9
  02706	48 c1 c0 19	 rol	 rax, 25
  0270a	48 33 d0	 xor	 rdx, rax
  0270d	49 8b c2	 mov	 rax, r10
  02710	49 23 c1	 and	 rax, r9
  02713	48 0b c8	 or	 rcx, rax
  02716	49 8d 04 10	 lea	 rax, QWORD PTR [r8+rdx]
  0271a	48 03 c8	 add	 rcx, rax

; 240  : 
; 241  : #undef RND
; 242  : 
; 243  :     /* feedback */
; 244  :     for (i = 0; i < 8; i++) {
; 245  :         sha_info->digest[i] = sha_info->digest[i] + S[i];

  0271d	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR sha_info$[rbp-256]
  02724	48 01 98 80 00
	00 00		 add	 QWORD PTR [rax+128], rbx
  0272b	48 01 48 60	 add	 QWORD PTR [rax+96], rcx
  0272f	4c 01 48 68	 add	 QWORD PTR [rax+104], r9
  02733	4c 01 50 70	 add	 QWORD PTR [rax+112], r10
  02737	4c 01 58 78	 add	 QWORD PTR [rax+120], r11
  0273b	48 01 b8 88 00
	00 00		 add	 QWORD PTR [rax+136], rdi
  02742	48 01 b0 90 00
	00 00		 add	 QWORD PTR [rax+144], rsi

; 246  :     }
; 247  : 
; 248  : }

  02749	48 8b 9c 24 f0
	02 00 00	 mov	 rbx, QWORD PTR [rsp+752]
  02751	4c 01 a0 98 00
	00 00		 add	 QWORD PTR [rax+152], r12
  02758	48 81 c4 a0 02
	00 00		 add	 rsp, 672		; 000002a0H
  0275f	41 5f		 pop	 r15
  02761	41 5e		 pop	 r14
  02763	41 5d		 pop	 r13
  02765	41 5c		 pop	 r12
  02767	5f		 pop	 rdi
  02768	5e		 pop	 rsi
  02769	5d		 pop	 rbp
  0276a	c3		 ret	 0
sha512_transform ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT sha512_init
_TEXT	SEGMENT
sha_info$ = 8
sha512_init PROC					; COMDAT

; 257  :     TestEndianness(sha_info->Endianness)
; 258  :     sha_info->digest[0] = Py_ULL(0x6a09e667f3bcc908);

  00000	48 b8 08 c9 bc
	f3 67 e6 09 6a	 mov	 rax, 7640891576956012808 ; 6a09e667f3bcc908H
  0000a	48 c7 81 28 01
	00 00 01 00 00
	00		 mov	 QWORD PTR [rcx+296], 1

; 259  :     sha_info->digest[1] = Py_ULL(0xbb67ae8584caa73b);
; 260  :     sha_info->digest[2] = Py_ULL(0x3c6ef372fe94f82b);
; 261  :     sha_info->digest[3] = Py_ULL(0xa54ff53a5f1d36f1);
; 262  :     sha_info->digest[4] = Py_ULL(0x510e527fade682d1);
; 263  :     sha_info->digest[5] = Py_ULL(0x9b05688c2b3e6c1f);
; 264  :     sha_info->digest[6] = Py_ULL(0x1f83d9abfb41bd6b);
; 265  :     sha_info->digest[7] = Py_ULL(0x5be0cd19137e2179);
; 266  :     sha_info->count_lo = 0L;
; 267  :     sha_info->count_hi = 0L;
; 268  :     sha_info->local = 0;
; 269  :     sha_info->digestsize = 64;

  00015	c7 81 30 01 00
	00 40 00 00 00	 mov	 DWORD PTR [rcx+304], 64	; 00000040H
  0001f	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax
  00023	48 b8 3b a7 ca
	84 85 ae 67 bb	 mov	 rax, -4942790177534073029 ; bb67ae8584caa73bH
  0002d	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00031	48 b8 2b f8 94
	fe 72 f3 6e 3c	 mov	 rax, 4354685564936845355 ; 3c6ef372fe94f82bH
  0003b	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax
  0003f	48 b8 f1 36 1d
	5f 3a f5 4f a5	 mov	 rax, -6534734903238641935 ; a54ff53a5f1d36f1H
  00049	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax
  0004d	48 b8 d1 82 e6
	ad 7f 52 0e 51	 mov	 rax, 5840696475078001361 ; 510e527fade682d1H
  00057	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax
  0005e	48 b8 1f 6c 3e
	2b 8c 68 05 9b	 mov	 rax, -7276294671716946913 ; 9b05688c2b3e6c1fH
  00068	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax
  0006f	48 b8 6b bd 41
	fb ab d9 83 1f	 mov	 rax, 2270897969802886507 ; 1f83d9abfb41bd6bH
  00079	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax
  00080	48 b8 79 21 7e
	13 19 cd e0 5b	 mov	 rax, 6620516959819538809 ; 5be0cd19137e2179H
  0008a	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax
  00091	33 c0		 xor	 eax, eax
  00093	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 270  : }

  0009a	c3		 ret	 0
sha512_init ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT sha384_init
_TEXT	SEGMENT
sha_info$ = 8
sha384_init PROC					; COMDAT

; 275  :     TestEndianness(sha_info->Endianness)
; 276  :     sha_info->digest[0] = Py_ULL(0xcbbb9d5dc1059ed8);

  00000	48 b8 d8 9e 05
	c1 5d 9d bb cb	 mov	 rax, -3766243637369397544 ; cbbb9d5dc1059ed8H
  0000a	48 c7 81 28 01
	00 00 01 00 00
	00		 mov	 QWORD PTR [rcx+296], 1

; 277  :     sha_info->digest[1] = Py_ULL(0x629a292a367cd507);
; 278  :     sha_info->digest[2] = Py_ULL(0x9159015a3070dd17);
; 279  :     sha_info->digest[3] = Py_ULL(0x152fecd8f70e5939);
; 280  :     sha_info->digest[4] = Py_ULL(0x67332667ffc00b31);
; 281  :     sha_info->digest[5] = Py_ULL(0x8eb44a8768581511);
; 282  :     sha_info->digest[6] = Py_ULL(0xdb0c2e0d64f98fa7);
; 283  :     sha_info->digest[7] = Py_ULL(0x47b5481dbefa4fa4);
; 284  :     sha_info->count_lo = 0L;
; 285  :     sha_info->count_hi = 0L;
; 286  :     sha_info->local = 0;
; 287  :     sha_info->digestsize = 48;

  00015	c7 81 30 01 00
	00 30 00 00 00	 mov	 DWORD PTR [rcx+304], 48	; 00000030H
  0001f	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax
  00023	48 b8 07 d5 7c
	36 2a 29 9a 62	 mov	 rax, 7105036623409894663 ; 629a292a367cd507H
  0002d	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00031	48 b8 17 dd 70
	30 5a 01 59 91	 mov	 rax, -7973340178411365097 ; 9159015a3070dd17H
  0003b	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax
  0003f	48 b8 39 59 0e
	f7 d8 ec 2f 15	 mov	 rax, 1526699215303891257 ; 152fecd8f70e5939H
  00049	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax
  0004d	48 b8 31 0b c0
	ff 67 26 33 67	 mov	 rax, 7436329637833083697 ; 67332667ffc00b31H
  00057	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax
  0005e	48 b8 11 15 58
	68 87 4a b4 8e	 mov	 rax, -8163818279084223215 ; 8eb44a8768581511H
  00068	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax
  0006f	48 b8 a7 8f f9
	64 0d 2e 0c db	 mov	 rax, -2662702644619276377 ; db0c2e0d64f98fa7H
  00079	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax
  00080	48 b8 a4 4f fa
	be 1d 48 b5 47	 mov	 rax, 5167115440072839076 ; 47b5481dbefa4fa4H
  0008a	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax
  00091	33 c0		 xor	 eax, eax
  00093	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 288  : }

  0009a	c3		 ret	 0
sha384_init ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sha512_update DD imagerel sha512_update
	DD	imagerel sha512_update+157
	DD	imagerel $unwind$sha512_update
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$sha512_update DD imagerel sha512_update+157
	DD	imagerel sha512_update+235
	DD	imagerel $chain$1$sha512_update
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$sha512_update DD imagerel sha512_update+235
	DD	imagerel sha512_update+280
	DD	imagerel $chain$2$sha512_update
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$sha512_update DD 021H
	DD	imagerel sha512_update
	DD	imagerel sha512_update+157
	DD	imagerel $unwind$sha512_update
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$sha512_update DD 020521H
	DD	07c405H
	DD	imagerel sha512_update
	DD	imagerel sha512_update+157
	DD	imagerel $unwind$sha512_update
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sha512_update DD 084301H
	DD	063443H
	DD	09640fH
	DD	08540fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT sha512_update
_TEXT	SEGMENT
sha_info$ = 48
buffer$ = 56
count$ = 64
sha512_update PROC					; COMDAT

; 295  : {

  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 296  :     Py_ssize_t i;
; 297  :     SHA_INT32 clo;
; 298  : 
; 299  :     clo = sha_info->count_lo + ((SHA_INT32) count << 3);

  0000f	8b 81 a0 00 00
	00		 mov	 eax, DWORD PTR [rcx+160]
  00015	48 8b f9	 mov	 rdi, rcx
  00018	49 8b e8	 mov	 rbp, r8
  0001b	42 8d 0c c0	 lea	 ecx, DWORD PTR [rax+r8*8]
  0001f	48 8b f2	 mov	 rsi, rdx

; 300  :     if (clo < sha_info->count_lo) {

  00022	3b c8		 cmp	 ecx, eax
  00024	73 06		 jae	 SHORT $LN7@sha512_upd

; 301  :         ++sha_info->count_hi;

  00026	ff 87 a4 00 00
	00		 inc	 DWORD PTR [rdi+164]
$LN7@sha512_upd:

; 302  :     }
; 303  :     sha_info->count_lo = clo;

  0002c	89 8f a0 00 00
	00		 mov	 DWORD PTR [rdi+160], ecx

; 304  :     sha_info->count_hi += (SHA_INT32) count >> 29;
; 305  :     if (sha_info->local) {

  00032	8b 8f 2c 01 00
	00		 mov	 ecx, DWORD PTR [rdi+300]
  00038	41 8b c0	 mov	 eax, r8d
  0003b	c1 e8 1d	 shr	 eax, 29
  0003e	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00043	01 87 a4 00 00
	00		 add	 DWORD PTR [rdi+164], eax
  00049	85 c9		 test	 ecx, ecx
  0004b	74 44		 je	 SHORT $LN10@sha512_upd

; 306  :         i = SHA_BLOCKSIZE - sha_info->local;

  0004d	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  00052	2b c1		 sub	 eax, ecx
  00054	48 63 d8	 movsxd	 rbx, eax

; 307  :         if (i > count) {
; 308  :             i = count;
; 309  :         }
; 310  :         memcpy(((SHA_BYTE *) sha_info->data) + sha_info->local, buffer, i);

  00057	48 63 c1	 movsxd	 rax, ecx
  0005a	49 3b d8	 cmp	 rbx, r8
  0005d	48 8d 8c 38 a8
	00 00 00	 lea	 rcx, QWORD PTR [rax+rdi+168]
  00065	49 0f 4f d8	 cmovg	 rbx, r8
  00069	4c 8b c3	 mov	 r8, rbx
  0006c	e8 00 00 00 00	 call	 memcpy

; 311  :         count -= i;
; 312  :         buffer += i;
; 313  :         sha_info->local += i;

  00071	01 9f 2c 01 00
	00		 add	 DWORD PTR [rdi+300], ebx
  00077	48 2b eb	 sub	 rbp, rbx
  0007a	48 03 f3	 add	 rsi, rbx

; 314  :         if (sha_info->local == SHA_BLOCKSIZE) {

  0007d	81 bf 2c 01 00
	00 80 00 00 00	 cmp	 DWORD PTR [rdi+300], 128 ; 00000080H
  00087	75 7a		 jne	 SHORT $LN8@sha512_upd

; 315  :             sha512_transform(sha_info);

  00089	48 8b cf	 mov	 rcx, rdi
  0008c	e8 00 00 00 00	 call	 sha512_transform
$LN10@sha512_upd:

; 316  :         }
; 317  :         else {
; 318  :             return;
; 319  :         }
; 320  :     }
; 321  :     while (count >= SHA_BLOCKSIZE) {

  00091	48 81 fd 80 00
	00 00		 cmp	 rbp, 128		; 00000080H
  00098	7c 51		 jl	 SHORT $LN1@sha512_upd
  0009a	48 8b dd	 mov	 rbx, rbp
  0009d	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12
  000a2	48 c1 eb 07	 shr	 rbx, 7
  000a6	48 8b c3	 mov	 rax, rbx
  000a9	48 f7 d8	 neg	 rax
  000ac	48 c1 e0 07	 shl	 rax, 7
  000b0	48 03 e8	 add	 rbp, rax
  000b3	66 66 66 66 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL2@sha512_upd:

; 322  :         memcpy(sha_info->data, buffer, SHA_BLOCKSIZE);

  000c0	48 8d 8f a8 00
	00 00		 lea	 rcx, QWORD PTR [rdi+168]
  000c7	48 8b d6	 mov	 rdx, rsi
  000ca	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  000d0	e8 00 00 00 00	 call	 memcpy

; 323  :         buffer += SHA_BLOCKSIZE;
; 324  :         count -= SHA_BLOCKSIZE;
; 325  :         sha512_transform(sha_info);

  000d5	48 8b cf	 mov	 rcx, rdi
  000d8	48 83 ee 80	 sub	 rsi, -128		; ffffffffffffff80H
  000dc	e8 00 00 00 00	 call	 sha512_transform
  000e1	48 ff cb	 dec	 rbx
  000e4	75 da		 jne	 SHORT $LL2@sha512_upd
  000e6	4c 8b 64 24 38	 mov	 r12, QWORD PTR [rsp+56]
$LN1@sha512_upd:

; 326  :     }
; 327  :     memcpy(sha_info->data, buffer, count);

  000eb	48 8d 8f a8 00
	00 00		 lea	 rcx, QWORD PTR [rdi+168]
  000f2	4c 8b c5	 mov	 r8, rbp
  000f5	48 8b d6	 mov	 rdx, rsi
  000f8	e8 00 00 00 00	 call	 memcpy

; 328  :     sha_info->local = count;

  000fd	89 af 2c 01 00
	00		 mov	 DWORD PTR [rdi+300], ebp
$LN8@sha512_upd:

; 329  : }

  00103	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00108	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0010d	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00112	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00116	5f		 pop	 rdi
  00117	c3		 ret	 0
sha512_update ENDP
_TEXT	ENDS
EXTRN	memset:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sha512_final DD imagerel sha512_final
	DD	imagerel sha512_final+815
	DD	imagerel $unwind$sha512_final
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sha512_final DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT sha512_final
_TEXT	SEGMENT
digest$ = 48
sha_info$ = 56
sha512_final PROC					; COMDAT

; 335  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 336  :     int count;
; 337  :     SHA_INT32 lo_bit_count, hi_bit_count;
; 338  : 
; 339  :     lo_bit_count = sha_info->count_lo;

  00014	8b ba a0 00 00
	00		 mov	 edi, DWORD PTR [rdx+160]

; 340  :     hi_bit_count = sha_info->count_hi;

  0001a	8b aa a4 00 00
	00		 mov	 ebp, DWORD PTR [rdx+164]
  00020	48 8b da	 mov	 rbx, rdx

; 341  :     count = (int) ((lo_bit_count >> 3) & 0x7f);

  00023	44 8b cf	 mov	 r9d, edi
  00026	48 8b f1	 mov	 rsi, rcx
  00029	41 c1 e9 03	 shr	 r9d, 3
  0002d	41 83 e1 7f	 and	 r9d, 127		; 0000007fH

; 342  :     ((SHA_BYTE *) sha_info->data)[count++] = 0x80;

  00031	49 63 c1	 movsxd	 rax, r9d
  00034	41 ff c1	 inc	 r9d
  00037	c6 84 10 a8 00
	00 00 80	 mov	 BYTE PTR [rax+rdx+168], 128 ; 00000080H

; 343  :     if (count > SHA_BLOCKSIZE - 16) {

  0003f	41 83 f9 70	 cmp	 r9d, 112		; 00000070H
  00043	7e 34		 jle	 SHORT $LN2@sha512_fin

; 344  :         memset(((SHA_BYTE *) sha_info->data) + count, 0,
; 345  :                SHA_BLOCKSIZE - count);

  00045	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  0004a	41 2b c1	 sub	 eax, r9d
  0004d	4c 63 c0	 movsxd	 r8, eax
  00050	49 63 c1	 movsxd	 rax, r9d
  00053	48 8d 8c 10 a8
	00 00 00	 lea	 rcx, QWORD PTR [rax+rdx+168]
  0005b	33 d2		 xor	 edx, edx
  0005d	e8 00 00 00 00	 call	 memset

; 346  :         sha512_transform(sha_info);

  00062	48 8b cb	 mov	 rcx, rbx
  00065	e8 00 00 00 00	 call	 sha512_transform

; 347  :         memset((SHA_BYTE *) sha_info->data, 0, SHA_BLOCKSIZE - 16);

  0006a	48 8d 8b a8 00
	00 00		 lea	 rcx, QWORD PTR [rbx+168]
  00071	41 b8 70 00 00
	00		 mov	 r8d, 112		; 00000070H

; 348  :     }
; 349  :     else {

  00077	eb 16		 jmp	 SHORT $LN5@sha512_fin
$LN2@sha512_fin:

; 350  :         memset(((SHA_BYTE *) sha_info->data) + count, 0,
; 351  :                SHA_BLOCKSIZE - 16 - count);

  00079	b8 70 00 00 00	 mov	 eax, 112		; 00000070H
  0007e	41 2b c1	 sub	 eax, r9d
  00081	4c 63 c0	 movsxd	 r8, eax
  00084	49 63 c1	 movsxd	 rax, r9d
  00087	48 8d 8c 10 a8
	00 00 00	 lea	 rcx, QWORD PTR [rax+rdx+168]
$LN5@sha512_fin:
  0008f	33 d2		 xor	 edx, edx
  00091	e8 00 00 00 00	 call	 memset

; 352  :     }
; 353  : 
; 354  :     /* GJS: note that we add the hi/lo in big-endian. sha512_transform will
; 355  :        swap these values into host-order. */
; 356  :     sha_info->data[112] = 0;
; 357  :     sha_info->data[113] = 0;
; 358  :     sha_info->data[114] = 0;
; 359  :     sha_info->data[115] = 0;
; 360  :     sha_info->data[116] = 0;
; 361  :     sha_info->data[117] = 0;
; 362  :     sha_info->data[118] = 0;
; 363  :     sha_info->data[119] = 0;
; 364  :     sha_info->data[120] = (hi_bit_count >> 24) & 0xff;

  00096	8b c5		 mov	 eax, ebp

; 365  :     sha_info->data[121] = (hi_bit_count >> 16) & 0xff;
; 366  :     sha_info->data[122] = (hi_bit_count >>  8) & 0xff;
; 367  :     sha_info->data[123] = (hi_bit_count >>  0) & 0xff;
; 368  :     sha_info->data[124] = (lo_bit_count >> 24) & 0xff;
; 369  :     sha_info->data[125] = (lo_bit_count >> 16) & 0xff;
; 370  :     sha_info->data[126] = (lo_bit_count >>  8) & 0xff;
; 371  :     sha_info->data[127] = (lo_bit_count >>  0) & 0xff;
; 372  :     sha512_transform(sha_info);

  00098	48 8b cb	 mov	 rcx, rbx
  0009b	c1 e8 18	 shr	 eax, 24
  0009e	48 c7 83 18 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+280], 0
  000a9	40 88 ab 23 01
	00 00		 mov	 BYTE PTR [rbx+291], bpl
  000b0	88 83 20 01 00
	00		 mov	 BYTE PTR [rbx+288], al
  000b6	8b c5		 mov	 eax, ebp
  000b8	40 88 bb 27 01
	00 00		 mov	 BYTE PTR [rbx+295], dil
  000bf	c1 e8 10	 shr	 eax, 16
  000c2	88 83 21 01 00
	00		 mov	 BYTE PTR [rbx+289], al
  000c8	8b c5		 mov	 eax, ebp
  000ca	c1 e8 08	 shr	 eax, 8
  000cd	88 83 22 01 00
	00		 mov	 BYTE PTR [rbx+290], al
  000d3	8b c7		 mov	 eax, edi
  000d5	c1 e8 18	 shr	 eax, 24
  000d8	88 83 24 01 00
	00		 mov	 BYTE PTR [rbx+292], al
  000de	8b c7		 mov	 eax, edi
  000e0	c1 e8 10	 shr	 eax, 16
  000e3	88 83 25 01 00
	00		 mov	 BYTE PTR [rbx+293], al
  000e9	8b c7		 mov	 eax, edi
  000eb	c1 e8 08	 shr	 eax, 8
  000ee	88 83 26 01 00
	00		 mov	 BYTE PTR [rbx+294], al
  000f4	e8 00 00 00 00	 call	 sha512_transform

; 373  :     digest[ 0] = (unsigned char) ((sha_info->digest[0] >> 56) & 0xff);

  000f9	44 0f b6 5b 67	 movzx	 r11d, BYTE PTR [rbx+103]
  000fe	44 88 1e	 mov	 BYTE PTR [rsi], r11b

; 374  :     digest[ 1] = (unsigned char) ((sha_info->digest[0] >> 48) & 0xff);

  00101	0f b6 43 66	 movzx	 eax, BYTE PTR [rbx+102]
  00105	88 46 01	 mov	 BYTE PTR [rsi+1], al

; 375  :     digest[ 2] = (unsigned char) ((sha_info->digest[0] >> 40) & 0xff);

  00108	0f b6 43 65	 movzx	 eax, BYTE PTR [rbx+101]
  0010c	88 46 02	 mov	 BYTE PTR [rsi+2], al

; 376  :     digest[ 3] = (unsigned char) ((sha_info->digest[0] >> 32) & 0xff);

  0010f	0f b6 43 64	 movzx	 eax, BYTE PTR [rbx+100]
  00113	88 46 03	 mov	 BYTE PTR [rsi+3], al

; 377  :     digest[ 4] = (unsigned char) ((sha_info->digest[0] >> 24) & 0xff);

  00116	0f b6 43 63	 movzx	 eax, BYTE PTR [rbx+99]
  0011a	88 46 04	 mov	 BYTE PTR [rsi+4], al

; 378  :     digest[ 5] = (unsigned char) ((sha_info->digest[0] >> 16) & 0xff);

  0011d	0f b6 43 62	 movzx	 eax, BYTE PTR [rbx+98]
  00121	88 46 05	 mov	 BYTE PTR [rsi+5], al

; 379  :     digest[ 6] = (unsigned char) ((sha_info->digest[0] >>  8) & 0xff);

  00124	0f b6 43 61	 movzx	 eax, BYTE PTR [rbx+97]
  00128	88 46 06	 mov	 BYTE PTR [rsi+6], al

; 380  :     digest[ 7] = (unsigned char) ((sha_info->digest[0]      ) & 0xff);

  0012b	0f b6 43 60	 movzx	 eax, BYTE PTR [rbx+96]
  0012f	88 46 07	 mov	 BYTE PTR [rsi+7], al

; 381  :     digest[ 8] = (unsigned char) ((sha_info->digest[1] >> 56) & 0xff);

  00132	0f b6 43 6f	 movzx	 eax, BYTE PTR [rbx+111]
  00136	88 46 08	 mov	 BYTE PTR [rsi+8], al

; 382  :     digest[ 9] = (unsigned char) ((sha_info->digest[1] >> 48) & 0xff);

  00139	0f b6 43 6e	 movzx	 eax, BYTE PTR [rbx+110]
  0013d	88 46 09	 mov	 BYTE PTR [rsi+9], al

; 383  :     digest[10] = (unsigned char) ((sha_info->digest[1] >> 40) & 0xff);

  00140	0f b6 43 6d	 movzx	 eax, BYTE PTR [rbx+109]
  00144	88 46 0a	 mov	 BYTE PTR [rsi+10], al

; 384  :     digest[11] = (unsigned char) ((sha_info->digest[1] >> 32) & 0xff);

  00147	0f b6 43 6c	 movzx	 eax, BYTE PTR [rbx+108]
  0014b	88 46 0b	 mov	 BYTE PTR [rsi+11], al

; 385  :     digest[12] = (unsigned char) ((sha_info->digest[1] >> 24) & 0xff);

  0014e	0f b6 43 6b	 movzx	 eax, BYTE PTR [rbx+107]
  00152	88 46 0c	 mov	 BYTE PTR [rsi+12], al

; 386  :     digest[13] = (unsigned char) ((sha_info->digest[1] >> 16) & 0xff);

  00155	0f b6 43 6a	 movzx	 eax, BYTE PTR [rbx+106]
  00159	88 46 0d	 mov	 BYTE PTR [rsi+13], al

; 387  :     digest[14] = (unsigned char) ((sha_info->digest[1] >>  8) & 0xff);

  0015c	0f b6 43 69	 movzx	 eax, BYTE PTR [rbx+105]
  00160	88 46 0e	 mov	 BYTE PTR [rsi+14], al

; 388  :     digest[15] = (unsigned char) ((sha_info->digest[1]      ) & 0xff);

  00163	0f b6 43 68	 movzx	 eax, BYTE PTR [rbx+104]
  00167	88 46 0f	 mov	 BYTE PTR [rsi+15], al

; 389  :     digest[16] = (unsigned char) ((sha_info->digest[2] >> 56) & 0xff);

  0016a	0f b6 43 77	 movzx	 eax, BYTE PTR [rbx+119]
  0016e	88 46 10	 mov	 BYTE PTR [rsi+16], al

; 390  :     digest[17] = (unsigned char) ((sha_info->digest[2] >> 48) & 0xff);

  00171	0f b6 43 76	 movzx	 eax, BYTE PTR [rbx+118]
  00175	88 46 11	 mov	 BYTE PTR [rsi+17], al

; 391  :     digest[18] = (unsigned char) ((sha_info->digest[2] >> 40) & 0xff);

  00178	0f b6 43 75	 movzx	 eax, BYTE PTR [rbx+117]
  0017c	88 46 12	 mov	 BYTE PTR [rsi+18], al

; 392  :     digest[19] = (unsigned char) ((sha_info->digest[2] >> 32) & 0xff);

  0017f	0f b6 43 74	 movzx	 eax, BYTE PTR [rbx+116]
  00183	88 46 13	 mov	 BYTE PTR [rsi+19], al

; 393  :     digest[20] = (unsigned char) ((sha_info->digest[2] >> 24) & 0xff);

  00186	0f b6 43 73	 movzx	 eax, BYTE PTR [rbx+115]
  0018a	88 46 14	 mov	 BYTE PTR [rsi+20], al

; 394  :     digest[21] = (unsigned char) ((sha_info->digest[2] >> 16) & 0xff);

  0018d	0f b6 43 72	 movzx	 eax, BYTE PTR [rbx+114]
  00191	88 46 15	 mov	 BYTE PTR [rsi+21], al

; 395  :     digest[22] = (unsigned char) ((sha_info->digest[2] >>  8) & 0xff);

  00194	0f b6 43 71	 movzx	 eax, BYTE PTR [rbx+113]
  00198	88 46 16	 mov	 BYTE PTR [rsi+22], al

; 396  :     digest[23] = (unsigned char) ((sha_info->digest[2]      ) & 0xff);

  0019b	0f b6 43 70	 movzx	 eax, BYTE PTR [rbx+112]
  0019f	88 46 17	 mov	 BYTE PTR [rsi+23], al

; 397  :     digest[24] = (unsigned char) ((sha_info->digest[3] >> 56) & 0xff);

  001a2	0f b6 43 7f	 movzx	 eax, BYTE PTR [rbx+127]
  001a6	88 46 18	 mov	 BYTE PTR [rsi+24], al

; 398  :     digest[25] = (unsigned char) ((sha_info->digest[3] >> 48) & 0xff);

  001a9	0f b6 43 7e	 movzx	 eax, BYTE PTR [rbx+126]
  001ad	88 46 19	 mov	 BYTE PTR [rsi+25], al

; 399  :     digest[26] = (unsigned char) ((sha_info->digest[3] >> 40) & 0xff);

  001b0	0f b6 43 7d	 movzx	 eax, BYTE PTR [rbx+125]
  001b4	88 46 1a	 mov	 BYTE PTR [rsi+26], al

; 400  :     digest[27] = (unsigned char) ((sha_info->digest[3] >> 32) & 0xff);

  001b7	0f b6 43 7c	 movzx	 eax, BYTE PTR [rbx+124]
  001bb	88 46 1b	 mov	 BYTE PTR [rsi+27], al

; 401  :     digest[28] = (unsigned char) ((sha_info->digest[3] >> 24) & 0xff);

  001be	0f b6 43 7b	 movzx	 eax, BYTE PTR [rbx+123]

; 402  :     digest[29] = (unsigned char) ((sha_info->digest[3] >> 16) & 0xff);
; 403  :     digest[30] = (unsigned char) ((sha_info->digest[3] >>  8) & 0xff);
; 404  :     digest[31] = (unsigned char) ((sha_info->digest[3]      ) & 0xff);
; 405  :     digest[32] = (unsigned char) ((sha_info->digest[4] >> 56) & 0xff);
; 406  :     digest[33] = (unsigned char) ((sha_info->digest[4] >> 48) & 0xff);
; 407  :     digest[34] = (unsigned char) ((sha_info->digest[4] >> 40) & 0xff);
; 408  :     digest[35] = (unsigned char) ((sha_info->digest[4] >> 32) & 0xff);
; 409  :     digest[36] = (unsigned char) ((sha_info->digest[4] >> 24) & 0xff);
; 410  :     digest[37] = (unsigned char) ((sha_info->digest[4] >> 16) & 0xff);
; 411  :     digest[38] = (unsigned char) ((sha_info->digest[4] >>  8) & 0xff);
; 412  :     digest[39] = (unsigned char) ((sha_info->digest[4]      ) & 0xff);
; 413  :     digest[40] = (unsigned char) ((sha_info->digest[5] >> 56) & 0xff);
; 414  :     digest[41] = (unsigned char) ((sha_info->digest[5] >> 48) & 0xff);
; 415  :     digest[42] = (unsigned char) ((sha_info->digest[5] >> 40) & 0xff);
; 416  :     digest[43] = (unsigned char) ((sha_info->digest[5] >> 32) & 0xff);
; 417  :     digest[44] = (unsigned char) ((sha_info->digest[5] >> 24) & 0xff);
; 418  :     digest[45] = (unsigned char) ((sha_info->digest[5] >> 16) & 0xff);
; 419  :     digest[46] = (unsigned char) ((sha_info->digest[5] >>  8) & 0xff);
; 420  :     digest[47] = (unsigned char) ((sha_info->digest[5]      ) & 0xff);
; 421  :     digest[48] = (unsigned char) ((sha_info->digest[6] >> 56) & 0xff);
; 422  :     digest[49] = (unsigned char) ((sha_info->digest[6] >> 48) & 0xff);
; 423  :     digest[50] = (unsigned char) ((sha_info->digest[6] >> 40) & 0xff);
; 424  :     digest[51] = (unsigned char) ((sha_info->digest[6] >> 32) & 0xff);
; 425  :     digest[52] = (unsigned char) ((sha_info->digest[6] >> 24) & 0xff);
; 426  :     digest[53] = (unsigned char) ((sha_info->digest[6] >> 16) & 0xff);
; 427  :     digest[54] = (unsigned char) ((sha_info->digest[6] >>  8) & 0xff);
; 428  :     digest[55] = (unsigned char) ((sha_info->digest[6]      ) & 0xff);
; 429  :     digest[56] = (unsigned char) ((sha_info->digest[7] >> 56) & 0xff);
; 430  :     digest[57] = (unsigned char) ((sha_info->digest[7] >> 48) & 0xff);
; 431  :     digest[58] = (unsigned char) ((sha_info->digest[7] >> 40) & 0xff);
; 432  :     digest[59] = (unsigned char) ((sha_info->digest[7] >> 32) & 0xff);
; 433  :     digest[60] = (unsigned char) ((sha_info->digest[7] >> 24) & 0xff);
; 434  :     digest[61] = (unsigned char) ((sha_info->digest[7] >> 16) & 0xff);
; 435  :     digest[62] = (unsigned char) ((sha_info->digest[7] >>  8) & 0xff);
; 436  :     digest[63] = (unsigned char) ((sha_info->digest[7]      ) & 0xff);
; 437  : }

  001c2	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  001c7	88 46 1c	 mov	 BYTE PTR [rsi+28], al
  001ca	0f b6 43 7a	 movzx	 eax, BYTE PTR [rbx+122]
  001ce	88 46 1d	 mov	 BYTE PTR [rsi+29], al
  001d1	0f b6 43 79	 movzx	 eax, BYTE PTR [rbx+121]
  001d5	88 46 1e	 mov	 BYTE PTR [rsi+30], al
  001d8	0f b6 43 78	 movzx	 eax, BYTE PTR [rbx+120]
  001dc	88 46 1f	 mov	 BYTE PTR [rsi+31], al
  001df	0f b6 83 87 00
	00 00		 movzx	 eax, BYTE PTR [rbx+135]
  001e6	88 46 20	 mov	 BYTE PTR [rsi+32], al
  001e9	0f b6 83 86 00
	00 00		 movzx	 eax, BYTE PTR [rbx+134]
  001f0	88 46 21	 mov	 BYTE PTR [rsi+33], al
  001f3	0f b6 83 85 00
	00 00		 movzx	 eax, BYTE PTR [rbx+133]
  001fa	88 46 22	 mov	 BYTE PTR [rsi+34], al
  001fd	0f b6 83 84 00
	00 00		 movzx	 eax, BYTE PTR [rbx+132]
  00204	88 46 23	 mov	 BYTE PTR [rsi+35], al
  00207	0f b6 83 83 00
	00 00		 movzx	 eax, BYTE PTR [rbx+131]
  0020e	88 46 24	 mov	 BYTE PTR [rsi+36], al
  00211	0f b6 83 82 00
	00 00		 movzx	 eax, BYTE PTR [rbx+130]
  00218	88 46 25	 mov	 BYTE PTR [rsi+37], al
  0021b	0f b6 83 81 00
	00 00		 movzx	 eax, BYTE PTR [rbx+129]
  00222	88 46 26	 mov	 BYTE PTR [rsi+38], al
  00225	0f b6 83 80 00
	00 00		 movzx	 eax, BYTE PTR [rbx+128]
  0022c	88 46 27	 mov	 BYTE PTR [rsi+39], al
  0022f	0f b6 83 8f 00
	00 00		 movzx	 eax, BYTE PTR [rbx+143]
  00236	88 46 28	 mov	 BYTE PTR [rsi+40], al
  00239	0f b6 83 8e 00
	00 00		 movzx	 eax, BYTE PTR [rbx+142]
  00240	88 46 29	 mov	 BYTE PTR [rsi+41], al
  00243	0f b6 83 8d 00
	00 00		 movzx	 eax, BYTE PTR [rbx+141]
  0024a	88 46 2a	 mov	 BYTE PTR [rsi+42], al
  0024d	0f b6 83 8c 00
	00 00		 movzx	 eax, BYTE PTR [rbx+140]
  00254	88 46 2b	 mov	 BYTE PTR [rsi+43], al
  00257	0f b6 83 8b 00
	00 00		 movzx	 eax, BYTE PTR [rbx+139]
  0025e	88 46 2c	 mov	 BYTE PTR [rsi+44], al
  00261	0f b6 83 8a 00
	00 00		 movzx	 eax, BYTE PTR [rbx+138]
  00268	88 46 2d	 mov	 BYTE PTR [rsi+45], al
  0026b	0f b6 83 89 00
	00 00		 movzx	 eax, BYTE PTR [rbx+137]
  00272	88 46 2e	 mov	 BYTE PTR [rsi+46], al
  00275	0f b6 83 88 00
	00 00		 movzx	 eax, BYTE PTR [rbx+136]
  0027c	88 46 2f	 mov	 BYTE PTR [rsi+47], al
  0027f	0f b6 83 97 00
	00 00		 movzx	 eax, BYTE PTR [rbx+151]
  00286	88 46 30	 mov	 BYTE PTR [rsi+48], al
  00289	0f b6 83 96 00
	00 00		 movzx	 eax, BYTE PTR [rbx+150]
  00290	88 46 31	 mov	 BYTE PTR [rsi+49], al
  00293	0f b6 83 95 00
	00 00		 movzx	 eax, BYTE PTR [rbx+149]
  0029a	88 46 32	 mov	 BYTE PTR [rsi+50], al
  0029d	0f b6 83 94 00
	00 00		 movzx	 eax, BYTE PTR [rbx+148]
  002a4	88 46 33	 mov	 BYTE PTR [rsi+51], al
  002a7	0f b6 83 93 00
	00 00		 movzx	 eax, BYTE PTR [rbx+147]
  002ae	88 46 34	 mov	 BYTE PTR [rsi+52], al
  002b1	0f b6 83 92 00
	00 00		 movzx	 eax, BYTE PTR [rbx+146]
  002b8	88 46 35	 mov	 BYTE PTR [rsi+53], al
  002bb	0f b6 83 91 00
	00 00		 movzx	 eax, BYTE PTR [rbx+145]
  002c2	88 46 36	 mov	 BYTE PTR [rsi+54], al
  002c5	0f b6 83 90 00
	00 00		 movzx	 eax, BYTE PTR [rbx+144]
  002cc	88 46 37	 mov	 BYTE PTR [rsi+55], al
  002cf	0f b6 83 9f 00
	00 00		 movzx	 eax, BYTE PTR [rbx+159]
  002d6	88 46 38	 mov	 BYTE PTR [rsi+56], al
  002d9	0f b6 83 9e 00
	00 00		 movzx	 eax, BYTE PTR [rbx+158]
  002e0	88 46 39	 mov	 BYTE PTR [rsi+57], al
  002e3	0f b6 83 9d 00
	00 00		 movzx	 eax, BYTE PTR [rbx+157]
  002ea	88 46 3a	 mov	 BYTE PTR [rsi+58], al
  002ed	0f b6 83 9c 00
	00 00		 movzx	 eax, BYTE PTR [rbx+156]
  002f4	88 46 3b	 mov	 BYTE PTR [rsi+59], al
  002f7	0f b6 83 9b 00
	00 00		 movzx	 eax, BYTE PTR [rbx+155]
  002fe	88 46 3c	 mov	 BYTE PTR [rsi+60], al
  00301	0f b6 83 9a 00
	00 00		 movzx	 eax, BYTE PTR [rbx+154]
  00308	88 46 3d	 mov	 BYTE PTR [rsi+61], al
  0030b	0f b6 83 99 00
	00 00		 movzx	 eax, BYTE PTR [rbx+153]
  00312	88 46 3e	 mov	 BYTE PTR [rsi+62], al
  00315	0f b6 83 98 00
	00 00		 movzx	 eax, BYTE PTR [rbx+152]
  0031c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00321	88 46 3f	 mov	 BYTE PTR [rsi+63], al
  00324	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00329	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0032d	5f		 pop	 rdi
  0032e	c3		 ret	 0
sha512_final ENDP
_TEXT	ENDS
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$newSHA384object DD imagerel newSHA384object
	DD	imagerel newSHA384object+38
	DD	imagerel $unwind$newSHA384object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newSHA384object DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT newSHA384object
_TEXT	SEGMENT
newSHA384object PROC					; COMDAT

; 451  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 452  :     return (SHAobject *)PyObject_New(SHAobject, &SHA384type);

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:SHA384type
  00010	85 c0		 test	 eax, eax
  00012	74 09		 je	 SHORT $LN3@newSHA384o

; 453  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	e9 00 00 00 00	 jmp	 _PxObject_New
$LN3@newSHA384o:
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	e9 00 00 00 00	 jmp	 _PyObject_New
newSHA384object ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$newSHA512object DD imagerel newSHA512object
	DD	imagerel newSHA512object+38
	DD	imagerel $unwind$newSHA512object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newSHA512object DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT newSHA512object
_TEXT	SEGMENT
newSHA512object PROC					; COMDAT

; 457  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 458  :     return (SHAobject *)PyObject_New(SHAobject, &SHA512type);

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:SHA512type
  00010	85 c0		 test	 eax, eax
  00012	74 09		 je	 SHORT $LN3@newSHA512o

; 459  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	e9 00 00 00 00	 jmp	 _PxObject_New
$LN3@newSHA512o:
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	e9 00 00 00 00	 jmp	 _PyObject_New
newSHA512object ENDP
_TEXT	ENDS
EXTRN	PyObject_Free:PROC
; Function compile flags: /Ogtpy
;	COMDAT SHA512_dealloc
_TEXT	SEGMENT
ptr$ = 8
SHA512_dealloc PROC					; COMDAT

; 466  :     PyObject_Del(ptr);
; 467  : }

  00000	e9 00 00 00 00	 jmp	 PyObject_Free
SHA512_dealloc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SHA512_copy DD imagerel SHA512_copy
	DD	imagerel SHA512_copy+99
	DD	imagerel $unwind$SHA512_copy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SHA512_copy DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT SHA512_copy
_TEXT	SEGMENT
self$ = 48
unused$ = 56
SHA512_copy PROC					; COMDAT

; 476  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 477  :     SHAobject *newobj;
; 478  : 
; 479  :     if (((PyObject*)self)->ob_type == &SHA512type) {

  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:SHA512type
  00011	48 8b f9	 mov	 rdi, rcx
  00014	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00018	75 18		 jne	 SHORT $LN4@SHA512_cop

; 480  :         if ( (newobj = newSHA512object())==NULL)

  0001a	e8 00 00 00 00	 call	 newSHA512object
  0001f	48 8b d8	 mov	 rbx, rax
  00022	48 85 c0	 test	 rax, rax
  00025	75 23		 jne	 SHORT $LN1@SHA512_cop

; 489  : }

  00027	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5f		 pop	 rdi
  00031	c3		 ret	 0
$LN4@SHA512_cop:

; 481  :             return NULL;
; 482  :     } else {
; 483  :         if ( (newobj = newSHA384object())==NULL)

  00032	e8 00 00 00 00	 call	 newSHA384object
  00037	48 8b d8	 mov	 rbx, rax
  0003a	48 85 c0	 test	 rax, rax
  0003d	75 0b		 jne	 SHORT $LN1@SHA512_cop

; 489  : }

  0003f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
$LN1@SHA512_cop:

; 484  :             return NULL;
; 485  :     }
; 486  : 
; 487  :     SHAcopy(self, newobj);

  0004a	48 8b d3	 mov	 rdx, rbx
  0004d	48 8b cf	 mov	 rcx, rdi
  00050	e8 00 00 00 00	 call	 SHAcopy

; 488  :     return (PyObject *)newobj;

  00055	48 8b c3	 mov	 rax, rbx

; 489  : }

  00058	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
SHA512_copy ENDP
_TEXT	ENDS
EXTRN	PyBytes_FromStringAndSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$SHA512_digest DD imagerel SHA512_digest
	DD	imagerel SHA512_digest+63
	DD	imagerel $unwind$SHA512_digest
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SHA512_digest DD 030901H
	DD	0340109H
	DD	03002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT SHA512_digest
_TEXT	SEGMENT
digest$ = 32
temp$ = 96
self$ = 432
unused$ = 440
SHA512_digest PROC					; COMDAT

; 496  : {

  00000	40 53		 push	 rbx
  00002	48 81 ec a0 01
	00 00		 sub	 rsp, 416		; 000001a0H

; 497  :     unsigned char digest[SHA_DIGESTSIZE];
; 498  :     SHAobject temp;
; 499  : 
; 500  :     SHAcopy(self, &temp);

  00009	48 8d 54 24 60	 lea	 rdx, QWORD PTR temp$[rsp]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	e8 00 00 00 00	 call	 SHAcopy

; 501  :     sha512_final(digest, &temp);

  00016	48 8d 54 24 60	 lea	 rdx, QWORD PTR temp$[rsp]
  0001b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR digest$[rsp]
  00020	e8 00 00 00 00	 call	 sha512_final

; 502  :     return PyBytes_FromStringAndSize((const char *)digest, self->digestsize);

  00025	48 63 93 30 01
	00 00		 movsxd	 rdx, DWORD PTR [rbx+304]
  0002c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR digest$[rsp]
  00031	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 503  : }

  00036	48 81 c4 a0 01
	00 00		 add	 rsp, 416		; 000001a0H
  0003d	5b		 pop	 rbx
  0003e	c3		 ret	 0
SHA512_digest ENDP
_TEXT	ENDS
EXTRN	Py_hexdigits:QWORD
EXTRN	PyUnicode_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$SHA512_hexdigest DD imagerel SHA512_hexdigest
	DD	imagerel SHA512_hexdigest+202
	DD	imagerel $unwind$SHA512_hexdigest
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SHA512_hexdigest DD 030901H
	DD	0340109H
	DD	03002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT SHA512_hexdigest
_TEXT	SEGMENT
digest$ = 32
temp$ = 96
self$ = 432
unused$ = 440
SHA512_hexdigest PROC					; COMDAT

; 510  : {

  00000	40 53		 push	 rbx
  00002	48 81 ec a0 01
	00 00		 sub	 rsp, 416		; 000001a0H

; 511  :     unsigned char digest[SHA_DIGESTSIZE];
; 512  :     SHAobject temp;
; 513  :     PyObject *retval;
; 514  :     Py_UCS1 *hex_digest;
; 515  :     int i, j;
; 516  : 
; 517  :     /* Get the raw (binary) digest value */
; 518  :     SHAcopy(self, &temp);

  00009	48 8d 54 24 60	 lea	 rdx, QWORD PTR temp$[rsp]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	e8 00 00 00 00	 call	 SHAcopy

; 519  :     sha512_final(digest, &temp);

  00016	48 8d 54 24 60	 lea	 rdx, QWORD PTR temp$[rsp]
  0001b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR digest$[rsp]
  00020	e8 00 00 00 00	 call	 sha512_final

; 520  : 
; 521  :     /* Create a new string */
; 522  :     retval = PyUnicode_New(self->digestsize * 2, 127);

  00025	8b 83 30 01 00
	00		 mov	 eax, DWORD PTR [rbx+304]
  0002b	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00030	03 c0		 add	 eax, eax
  00032	48 63 c8	 movsxd	 rcx, eax
  00035	e8 00 00 00 00	 call	 PyUnicode_New
  0003a	4c 8b d8	 mov	 r11, rax

; 523  :     if (!retval)

  0003d	48 85 c0	 test	 rax, rax
  00040	75 09		 jne	 SHORT $LN4@SHA512_hex

; 539  : }

  00042	48 81 c4 a0 01
	00 00		 add	 rsp, 416		; 000001a0H
  00049	5b		 pop	 rbx
  0004a	c3		 ret	 0
$LN4@SHA512_hex:

; 524  :             return NULL;
; 525  :     hex_digest = PyUnicode_1BYTE_DATA(retval);

  0004b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0004e	a8 20		 test	 al, 32			; 00000020H
  00050	74 16		 je	 SHORT $LN9@SHA512_hex
  00052	a8 40		 test	 al, 64			; 00000040H
  00054	74 09		 je	 SHORT $LN7@SHA512_hex
  00056	4d 8d 83 80 00
	00 00		 lea	 r8, QWORD PTR [r11+128]
  0005d	eb 10		 jmp	 SHORT $LN10@SHA512_hex
$LN7@SHA512_hex:
  0005f	4d 8d 83 a0 00
	00 00		 lea	 r8, QWORD PTR [r11+160]
  00066	eb 07		 jmp	 SHORT $LN10@SHA512_hex
$LN9@SHA512_hex:
  00068	4d 8b 83 a0 00
	00 00		 mov	 r8, QWORD PTR [r11+160]
$LN10@SHA512_hex:

; 526  : 
; 527  :     /* Make hex version of the digest */
; 528  :     for (i=j=0; i<self->digestsize; i++) {

  0006f	45 33 c9	 xor	 r9d, r9d
  00072	44 39 8b 30 01
	00 00		 cmp	 DWORD PTR [rbx+304], r9d
  00079	7e 43		 jle	 SHORT $LN1@SHA512_hex
  0007b	4c 8d 54 24 20	 lea	 r10, QWORD PTR digest$[rsp]
$LL3@SHA512_hex:

; 529  :         unsigned char c;
; 530  :         c = (digest[i] >> 4) & 0xf;
; 531  :         hex_digest[j++] = Py_hexdigits[c];

  00080	41 0f b6 12	 movzx	 edx, BYTE PTR [r10]
  00084	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Py_hexdigits
  0008b	41 ff c1	 inc	 r9d
  0008e	8b ca		 mov	 ecx, edx

; 532  :         c = (digest[i] & 0xf);

  00090	83 e2 0f	 and	 edx, 15

; 533  :         hex_digest[j++] = Py_hexdigits[c];

  00093	49 83 c0 02	 add	 r8, 2
  00097	48 c1 e9 04	 shr	 rcx, 4
  0009b	49 ff c2	 inc	 r10
  0009e	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  000a2	41 88 48 fe	 mov	 BYTE PTR [r8-2], cl
  000a6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Py_hexdigits
  000ad	0f b6 0c 02	 movzx	 ecx, BYTE PTR [rdx+rax]
  000b1	41 88 48 ff	 mov	 BYTE PTR [r8-1], cl
  000b5	44 3b 8b 30 01
	00 00		 cmp	 r9d, DWORD PTR [rbx+304]
  000bc	7c c2		 jl	 SHORT $LL3@SHA512_hex
$LN1@SHA512_hex:

; 534  :     }
; 535  : #ifdef Py_DEBUG
; 536  :     assert(_PyUnicode_CheckConsistency(retval, 1));
; 537  : #endif
; 538  :     return retval;

  000be	49 8b c3	 mov	 rax, r11

; 539  : }

  000c1	48 81 c4 a0 01
	00 00		 add	 rsp, 416		; 000001a0H
  000c8	5b		 pop	 rbx
  000c9	c3		 ret	 0
SHA512_hexdigest ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@ ; `string'
PUBLIC	??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@ ; `string'
PUBLIC	??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@ ; `string'
PUBLIC	??_C@_08BNPIIEPK@O?3update?$AA@			; `string'
EXTRN	PyExc_TypeError:QWORD
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyBuffer_Release:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_BufferError:QWORD
EXTRN	PyObject_GetBuffer:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$SHA512_update DD imagerel SHA512_update
	DD	imagerel SHA512_update+320
	DD	imagerel $unwind$SHA512_update
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SHA512_update DD 020901H
	DD	03002f209H
xdata	ENDS
;	COMDAT ??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@
CONST	SEGMENT
??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@ DB 'object suppo'
	DB	'rting the buffer API required', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
CONST	SEGMENT
??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@ DB 'Buffer mus'
	DB	't be single dimension', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@
CONST	SEGMENT
??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@ DB 'Unicode-obj'
	DB	'ects must be encoded before hashing', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BNPIIEPK@O?3update?$AA@
CONST	SEGMENT
??_C@_08BNPIIEPK@O?3update?$AA@ DB 'O:update', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\sha512module.c
CONST	ENDS
;	COMDAT SHA512_update
_TEXT	SEGMENT
buf$ = 48
self$ = 144
args$ = 152
obj$ = 160
SHA512_update PROC					; COMDAT

; 546  : {

  00000	40 53		 push	 rbx
  00002	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00009	48 8b c2	 mov	 rax, rdx
  0000c	48 8b d9	 mov	 rbx, rcx

; 547  :     PyObject *obj;
; 548  :     Py_buffer buf;
; 549  : 
; 550  :     if (!PyArg_ParseTuple(args, "O:update", &obj))

  0000f	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR obj$[rsp]
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BNPIIEPK@O?3update?$AA@
  0001e	48 8b c8	 mov	 rcx, rax
  00021	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00026	85 c0		 test	 eax, eax

; 551  :         return NULL;

  00028	0f 84 07 01 00
	00		 je	 $LN16@SHA512_upd

; 552  : 
; 553  :     GET_BUFFER_VIEW_OR_ERROUT(obj, &buf);

  0002e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00036	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0003a	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00044	74 0c		 je	 SHORT $LN5@SHA512_upd
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@
  0004d	e9 d7 00 00 00	 jmp	 $LN17@SHA512_upd
$LN5@SHA512_upd:
  00052	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  00059	48 85 c0	 test	 rax, rax
  0005c	0f 84 c0 00 00
	00		 je	 $LN3@SHA512_upd
  00062	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00066	0f 84 b6 00 00
	00		 je	 $LN3@SHA512_upd
  0006c	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$[rsp]
  00071	45 33 c0	 xor	 r8d, r8d
  00074	e8 00 00 00 00	 call	 PyObject_GetBuffer
  00079	83 f8 ff	 cmp	 eax, -1
  0007c	0f 84 b3 00 00
	00		 je	 $LN16@SHA512_upd
  00082	83 7c 24 54 01	 cmp	 DWORD PTR buf$[rsp+36], 1
  00087	7e 28		 jle	 SHORT $LN7@SHA512_upd
  00089	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BufferError
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
  00097	e8 00 00 00 00	 call	 PyErr_SetString
  0009c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  000a1	e8 00 00 00 00	 call	 PyBuffer_Release
  000a6	33 c0		 xor	 eax, eax

; 560  : }

  000a8	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  000af	5b		 pop	 rbx
  000b0	c3		 ret	 0
$LN7@SHA512_upd:

; 554  : 
; 555  :     sha512_update(self, buf.buf, buf.len);

  000b1	4c 8b 44 24 40	 mov	 r8, QWORD PTR buf$[rsp+16]
  000b6	48 8b 54 24 30	 mov	 rdx, QWORD PTR buf$[rsp]
  000bb	48 8b cb	 mov	 rcx, rbx
  000be	e8 00 00 00 00	 call	 sha512_update

; 556  : 
; 557  :     PyBuffer_Release(&buf);

  000c3	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  000c8	e8 00 00 00 00	 call	 PyBuffer_Release

; 558  :     Py_INCREF(Py_None);

  000cd	e8 00 00 00 00	 call	 _Py_PXCTX
  000d2	85 c0		 test	 eax, eax
  000d4	75 3c		 jne	 SHORT $LN13@SHA512_upd
  000d6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000eb	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000f1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000f9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fe	85 c0		 test	 eax, eax
  00100	75 09		 jne	 SHORT $LN12@SHA512_upd
  00102	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00109	74 07		 je	 SHORT $LN13@SHA512_upd
$LN12@SHA512_upd:
  0010b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN13@SHA512_upd:

; 559  :     return Py_None;

  00112	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 560  : }

  00119	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  00120	5b		 pop	 rbx
  00121	c3		 ret	 0
$LN3@SHA512_upd:

; 552  : 
; 553  :     GET_BUFFER_VIEW_OR_ERROUT(obj, &buf);

  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@
$LN17@SHA512_upd:
  00129	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00130	e8 00 00 00 00	 call	 PyErr_SetString
$LN16@SHA512_upd:
  00135	33 c0		 xor	 eax, eax

; 560  : }

  00137	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0013e	5b		 pop	 rbx
  0013f	c3		 ret	 0
SHA512_update ENDP
_TEXT	ENDS
EXTRN	PyLong_FromLong:PROC
; Function compile flags: /Ogtpy
;	COMDAT SHA512_get_block_size
_TEXT	SEGMENT
self$ = 8
closure$ = 16
SHA512_get_block_size PROC				; COMDAT

; 573  :     return PyLong_FromLong(SHA_BLOCKSIZE);

  00000	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H

; 574  : }

  00005	e9 00 00 00 00	 jmp	 PyLong_FromLong
SHA512_get_block_size ENDP
_TEXT	ENDS
PUBLIC	??_C@_06IFPKDKMD@SHA384?$AA@			; `string'
PUBLIC	??_C@_06PJBKPJBG@SHA512?$AA@			; `string'
EXTRN	PyUnicode_FromStringAndSize:PROC
;	COMDAT ??_C@_06IFPKDKMD@SHA384?$AA@
CONST	SEGMENT
??_C@_06IFPKDKMD@SHA384?$AA@ DB 'SHA384', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PJBKPJBG@SHA512?$AA@
CONST	SEGMENT
??_C@_06PJBKPJBG@SHA512?$AA@ DB 'SHA512', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT SHA512_get_name
_TEXT	SEGMENT
self$ = 8
closure$ = 16
SHA512_get_name PROC					; COMDAT

; 579  :     if (((SHAobject *)self)->digestsize == 64)

  00000	83 b9 30 01 00
	00 40		 cmp	 DWORD PTR [rcx+304], 64	; 00000040H

; 580  :         return PyUnicode_FromStringAndSize("SHA512", 6);

  00007	ba 06 00 00 00	 mov	 edx, 6
  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06PJBKPJBG@SHA512?$AA@
  00013	74 07		 je	 SHORT $LN5@SHA512_get

; 581  :     else
; 582  :         return PyUnicode_FromStringAndSize("SHA384", 6);

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IFPKDKMD@SHA384?$AA@
$LN5@SHA512_get:

; 583  : }

  0001c	e9 00 00 00 00	 jmp	 PyUnicode_FromStringAndSize
SHA512_get_name ENDP
_TEXT	ENDS
PUBLIC	??_C@_06KJFPOEIK@?$HMO?3new?$AA@		; `string'
EXTRN	PyErr_Occurred:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$SHA512_new DD imagerel SHA512_new
	DD	imagerel SHA512_new+234
	DD	imagerel $unwind$SHA512_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$SHA512_new DD imagerel SHA512_new+234
	DD	imagerel SHA512_new+320
	DD	imagerel $chain$0$SHA512_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$SHA512_new DD imagerel SHA512_new+320
	DD	imagerel SHA512_new+378
	DD	imagerel $chain$2$SHA512_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$SHA512_new DD 020021H
	DD	0103400H
	DD	imagerel SHA512_new
	DD	imagerel SHA512_new+234
	DD	imagerel $unwind$SHA512_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$SHA512_new DD 020821H
	DD	0103408H
	DD	imagerel SHA512_new
	DD	imagerel SHA512_new+234
	DD	imagerel $unwind$SHA512_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SHA512_new DD 020a01H
	DD	011010aH
xdata	ENDS
;	COMDAT ??_C@_06KJFPOEIK@?$HMO?3new?$AA@
CONST	SEGMENT
??_C@_06KJFPOEIK@?$HMO?3new?$AA@ DB '|O:new', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT SHA512_new
_TEXT	SEGMENT
buf$ = 48
self$ = 144
args$ = 152
kwdict$ = 160
data_obj$ = 168
SHA512_new PROC						; COMDAT

; 678  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 679  :     static char *kwlist[] = {"string", NULL};
; 680  :     SHAobject *new;
; 681  :     PyObject *data_obj = NULL;
; 682  :     Py_buffer buf;
; 683  : 
; 684  :     if (!PyArg_ParseTupleAndKeywords(args, kwdict, "|O:new", kwlist,
; 685  :                                      &data_obj)) {

  0000a	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0000e	49 8b c0	 mov	 rax, r8
  00011	4c 8b d2	 mov	 r10, rdx
  00014	49 89 4b 98	 mov	 QWORD PTR [r11-104], rcx
  00018	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??SHA512_new@@9@9
  0001f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06KJFPOEIK@?$HMO?3new?$AA@
  00026	49 8b ca	 mov	 rcx, r10
  00029	48 8b d0	 mov	 rdx, rax
  0002c	49 c7 43 20 00
	00 00 00	 mov	 QWORD PTR [r11+32], 0
  00034	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00039	85 c0		 test	 eax, eax

; 686  :         return NULL;

  0003b	74 34		 je	 SHORT $LN20@SHA512_new

; 687  :     }
; 688  : 
; 689  :     if (data_obj)

  0003d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR data_obj$[rsp]
  00045	48 85 c9	 test	 rcx, rcx
  00048	0f 84 9c 00 00
	00		 je	 $LN11@SHA512_new

; 690  :         GET_BUFFER_VIEW_OR_ERROUT(data_obj, &buf);

  0004e	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00052	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0005c	74 1d		 je	 SHORT $LN10@SHA512_new
  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@
  0006c	e8 00 00 00 00	 call	 PyErr_SetString
$LN20@SHA512_new:
  00071	33 c0		 xor	 eax, eax

; 712  : }

  00073	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0007a	c3		 ret	 0
$LN10@SHA512_new:

; 690  :         GET_BUFFER_VIEW_OR_ERROUT(data_obj, &buf);

  0007b	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  00082	48 85 c0	 test	 rax, rax
  00085	74 46		 je	 SHORT $LN8@SHA512_new
  00087	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0008b	74 40		 je	 SHORT $LN8@SHA512_new
  0008d	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$[rsp]
  00092	45 33 c0	 xor	 r8d, r8d
  00095	e8 00 00 00 00	 call	 PyObject_GetBuffer
  0009a	83 f8 ff	 cmp	 eax, -1
  0009d	74 d2		 je	 SHORT $LN20@SHA512_new
  0009f	83 7c 24 54 01	 cmp	 DWORD PTR buf$[rsp+36], 1
  000a4	7e 44		 jle	 SHORT $LN11@SHA512_new
  000a6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BufferError
  000ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
  000b4	e8 00 00 00 00	 call	 PyErr_SetString
  000b9	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  000be	e8 00 00 00 00	 call	 PyBuffer_Release
  000c3	33 c0		 xor	 eax, eax

; 712  : }

  000c5	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000cc	c3		 ret	 0
$LN8@SHA512_new:

; 690  :         GET_BUFFER_VIEW_OR_ERROUT(data_obj, &buf);

  000cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@
  000db	e8 00 00 00 00	 call	 PyErr_SetString
  000e0	33 c0		 xor	 eax, eax

; 712  : }

  000e2	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000e9	c3		 ret	 0
$LN11@SHA512_new:
  000ea	48 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbx

; 691  : 
; 692  :     if ((new = newSHA512object()) == NULL) {

  000f2	e8 00 00 00 00	 call	 newSHA512object
  000f7	48 8b d8	 mov	 rbx, rax
  000fa	48 85 c0	 test	 rax, rax

; 693  :         if (data_obj)
; 694  :             PyBuffer_Release(&buf);
; 695  :         return NULL;

  000fd	74 1a		 je	 SHORT $LN19@SHA512_new

; 696  :     }
; 697  : 
; 698  :     sha512_init(new);

  000ff	48 8b c8	 mov	 rcx, rax
  00102	e8 00 00 00 00	 call	 sha512_init

; 699  : 
; 700  :     if (PyErr_Occurred()) {

  00107	e8 00 00 00 00	 call	 PyErr_Occurred
  0010c	48 85 c0	 test	 rax, rax
  0010f	74 2f		 je	 SHORT $LN3@SHA512_new

; 701  :         Py_DECREF(new);

  00111	48 8b cb	 mov	 rcx, rbx
  00114	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@SHA512_new:

; 702  :         if (data_obj)

  00119	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR data_obj$[rsp], 0
  00122	74 0a		 je	 SHORT $LN2@SHA512_new

; 703  :             PyBuffer_Release(&buf);

  00124	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  00129	e8 00 00 00 00	 call	 PyBuffer_Release
$LN2@SHA512_new:

; 704  :         return NULL;

  0012e	33 c0		 xor	 eax, eax
  00130	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]

; 712  : }

  00138	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0013f	c3		 ret	 0
$LN3@SHA512_new:

; 705  :     }
; 706  :     if (data_obj) {

  00140	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR data_obj$[rsp], 0
  00149	74 1c		 je	 SHORT $LN1@SHA512_new

; 707  :         sha512_update(new, buf.buf, buf.len);

  0014b	4c 8b 44 24 40	 mov	 r8, QWORD PTR buf$[rsp+16]
  00150	48 8b 54 24 30	 mov	 rdx, QWORD PTR buf$[rsp]
  00155	48 8b cb	 mov	 rcx, rbx
  00158	e8 00 00 00 00	 call	 sha512_update

; 708  :         PyBuffer_Release(&buf);

  0015d	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  00162	e8 00 00 00 00	 call	 PyBuffer_Release
$LN1@SHA512_new:

; 709  :     }
; 710  : 
; 711  :     return (PyObject *)new;

  00167	48 8b c3	 mov	 rax, rbx
  0016a	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]

; 712  : }

  00172	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00179	c3		 ret	 0
SHA512_new ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SHA384_new DD imagerel SHA384_new
	DD	imagerel SHA384_new+234
	DD	imagerel $unwind$SHA384_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$SHA384_new DD imagerel SHA384_new+234
	DD	imagerel SHA384_new+320
	DD	imagerel $chain$0$SHA384_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$SHA384_new DD imagerel SHA384_new+320
	DD	imagerel SHA384_new+378
	DD	imagerel $chain$2$SHA384_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$SHA384_new DD 020021H
	DD	0103400H
	DD	imagerel SHA384_new
	DD	imagerel SHA384_new+234
	DD	imagerel $unwind$SHA384_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$SHA384_new DD 020821H
	DD	0103408H
	DD	imagerel SHA384_new
	DD	imagerel SHA384_new+234
	DD	imagerel $unwind$SHA384_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SHA384_new DD 020a01H
	DD	011010aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT SHA384_new
_TEXT	SEGMENT
buf$ = 48
self$ = 144
args$ = 152
kwdict$ = 160
data_obj$ = 168
SHA384_new PROC						; COMDAT

; 719  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 720  :     static char *kwlist[] = {"string", NULL};
; 721  :     SHAobject *new;
; 722  :     PyObject *data_obj = NULL;
; 723  :     Py_buffer buf;
; 724  : 
; 725  :     if (!PyArg_ParseTupleAndKeywords(args, kwdict, "|O:new", kwlist,
; 726  :                                      &data_obj)) {

  0000a	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0000e	49 8b c0	 mov	 rax, r8
  00011	4c 8b d2	 mov	 r10, rdx
  00014	49 89 4b 98	 mov	 QWORD PTR [r11-104], rcx
  00018	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??SHA384_new@@9@9
  0001f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06KJFPOEIK@?$HMO?3new?$AA@
  00026	49 8b ca	 mov	 rcx, r10
  00029	48 8b d0	 mov	 rdx, rax
  0002c	49 c7 43 20 00
	00 00 00	 mov	 QWORD PTR [r11+32], 0
  00034	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00039	85 c0		 test	 eax, eax

; 727  :         return NULL;

  0003b	74 34		 je	 SHORT $LN20@SHA384_new

; 728  :     }
; 729  : 
; 730  :     if (data_obj)

  0003d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR data_obj$[rsp]
  00045	48 85 c9	 test	 rcx, rcx
  00048	0f 84 9c 00 00
	00		 je	 $LN11@SHA384_new

; 731  :         GET_BUFFER_VIEW_OR_ERROUT(data_obj, &buf);

  0004e	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00052	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0005c	74 1d		 je	 SHORT $LN10@SHA384_new
  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@
  0006c	e8 00 00 00 00	 call	 PyErr_SetString
$LN20@SHA384_new:
  00071	33 c0		 xor	 eax, eax

; 753  : }

  00073	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0007a	c3		 ret	 0
$LN10@SHA384_new:

; 731  :         GET_BUFFER_VIEW_OR_ERROUT(data_obj, &buf);

  0007b	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  00082	48 85 c0	 test	 rax, rax
  00085	74 46		 je	 SHORT $LN8@SHA384_new
  00087	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0008b	74 40		 je	 SHORT $LN8@SHA384_new
  0008d	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$[rsp]
  00092	45 33 c0	 xor	 r8d, r8d
  00095	e8 00 00 00 00	 call	 PyObject_GetBuffer
  0009a	83 f8 ff	 cmp	 eax, -1
  0009d	74 d2		 je	 SHORT $LN20@SHA384_new
  0009f	83 7c 24 54 01	 cmp	 DWORD PTR buf$[rsp+36], 1
  000a4	7e 44		 jle	 SHORT $LN11@SHA384_new
  000a6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BufferError
  000ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
  000b4	e8 00 00 00 00	 call	 PyErr_SetString
  000b9	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  000be	e8 00 00 00 00	 call	 PyBuffer_Release
  000c3	33 c0		 xor	 eax, eax

; 753  : }

  000c5	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000cc	c3		 ret	 0
$LN8@SHA384_new:

; 731  :         GET_BUFFER_VIEW_OR_ERROUT(data_obj, &buf);

  000cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@
  000db	e8 00 00 00 00	 call	 PyErr_SetString
  000e0	33 c0		 xor	 eax, eax

; 753  : }

  000e2	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000e9	c3		 ret	 0
$LN11@SHA384_new:
  000ea	48 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbx

; 732  : 
; 733  :     if ((new = newSHA384object()) == NULL) {

  000f2	e8 00 00 00 00	 call	 newSHA384object
  000f7	48 8b d8	 mov	 rbx, rax
  000fa	48 85 c0	 test	 rax, rax

; 734  :         if (data_obj)
; 735  :             PyBuffer_Release(&buf);
; 736  :         return NULL;

  000fd	74 1a		 je	 SHORT $LN19@SHA384_new

; 737  :     }
; 738  : 
; 739  :     sha384_init(new);

  000ff	48 8b c8	 mov	 rcx, rax
  00102	e8 00 00 00 00	 call	 sha384_init

; 740  : 
; 741  :     if (PyErr_Occurred()) {

  00107	e8 00 00 00 00	 call	 PyErr_Occurred
  0010c	48 85 c0	 test	 rax, rax
  0010f	74 2f		 je	 SHORT $LN3@SHA384_new

; 742  :         Py_DECREF(new);

  00111	48 8b cb	 mov	 rcx, rbx
  00114	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@SHA384_new:

; 743  :         if (data_obj)

  00119	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR data_obj$[rsp], 0
  00122	74 0a		 je	 SHORT $LN2@SHA384_new

; 744  :             PyBuffer_Release(&buf);

  00124	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  00129	e8 00 00 00 00	 call	 PyBuffer_Release
$LN2@SHA384_new:

; 745  :         return NULL;

  0012e	33 c0		 xor	 eax, eax
  00130	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]

; 753  : }

  00138	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0013f	c3		 ret	 0
$LN3@SHA384_new:

; 746  :     }
; 747  :     if (data_obj) {

  00140	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR data_obj$[rsp], 0
  00149	74 1c		 je	 SHORT $LN1@SHA384_new

; 748  :         sha512_update(new, buf.buf, buf.len);

  0014b	4c 8b 44 24 40	 mov	 r8, QWORD PTR buf$[rsp+16]
  00150	48 8b 54 24 30	 mov	 rdx, QWORD PTR buf$[rsp]
  00155	48 8b cb	 mov	 rcx, rbx
  00158	e8 00 00 00 00	 call	 sha512_update

; 749  :         PyBuffer_Release(&buf);

  0015d	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  00162	e8 00 00 00 00	 call	 PyBuffer_Release
$LN1@SHA384_new:

; 750  :     }
; 751  : 
; 752  :     return (PyObject *)new;

  00167	48 8b c3	 mov	 rax, rbx
  0016a	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]

; 753  : }

  00172	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00179	c3		 ret	 0
SHA384_new ENDP
_TEXT	ENDS
PUBLIC	PyInit__sha512
EXTRN	PyModule_Create2:PROC
EXTRN	PyType_Ready:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit__sha512 DD imagerel $LN6
	DD	imagerel $LN6+89
	DD	imagerel $unwind$PyInit__sha512
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__sha512 DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyInit__sha512
_TEXT	SEGMENT
PyInit__sha512 PROC					; COMDAT

; 784  : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 785  :     Py_TYPE(&SHA384type) = &PyType_Type;

  00006	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:PyType_Type

; 786  :     if (PyType_Ready(&SHA384type) < 0)

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:SHA384type
  00014	48 89 1d 58 00
	00 00		 mov	 QWORD PTR SHA384type+88, rbx
  0001b	e8 00 00 00 00	 call	 PyType_Ready
  00020	85 c0		 test	 eax, eax
  00022	79 08		 jns	 SHORT $LN2@PyInit__sh
$LN5@PyInit__sh:

; 787  :         return NULL;

  00024	33 c0		 xor	 eax, eax

; 792  : }

  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5b		 pop	 rbx
  0002b	c3		 ret	 0
$LN2@PyInit__sh:

; 788  :     Py_TYPE(&SHA512type) = &PyType_Type;
; 789  :     if (PyType_Ready(&SHA512type) < 0)

  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:SHA512type
  00033	48 89 1d 58 00
	00 00		 mov	 QWORD PTR SHA512type+88, rbx
  0003a	e8 00 00 00 00	 call	 PyType_Ready
  0003f	85 c0		 test	 eax, eax

; 790  :         return NULL;

  00041	78 e1		 js	 SHORT $LN5@PyInit__sh

; 791  :     return PyModule_Create(&_sha512module);

  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_sha512module
  0004a	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H

; 792  : }

  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5b		 pop	 rbx
  00054	e9 00 00 00 00	 jmp	 PyModule_Create2
PyInit__sha512 ENDP
_TEXT	ENDS
END
