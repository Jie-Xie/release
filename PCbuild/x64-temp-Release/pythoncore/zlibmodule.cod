; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04OLICEBLN@zlib?$AA@			; `string'
PUBLIC	??_C@_0BA@IDAIIEGL@zlib?4Decompress?$AA@	; `string'
PUBLIC	??_C@_0O@LMFKCDND@zlib?4Compress?$AA@		; `string'
PUBLIC	??_C@_0O@FDIIBELN@decompressobj?$AA@		; `string'
PUBLIC	??_C@_05KBIBMHFC@crc32?$AA@			; `string'
PUBLIC	??_C@_0M@HPELMCGK@compressobj?$AA@		; `string'
PUBLIC	??_C@_07NNOKLIPG@adler32?$AA@			; `string'
PUBLIC	??_C@_03KCGPGHOO@eof?$AA@			; `string'
PUBLIC	??_C@_0BA@MAEKPPAH@unconsumed_tail?$AA@		; `string'
PUBLIC	??_C@_0M@DJDDGEAM@unused_data?$AA@		; `string'
PUBLIC	??_C@_0L@BDJCADKN@decompress?$AA@		; `string'
PUBLIC	??_C@_04COAGEIMF@copy?$AA@			; `string'
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	??_C@_08EJNPIMGB@compress?$AA@			; `string'
PUBLIC	??_C@_05MPNKNAHE@zdict?$AA@			; `string'
PUBLIC	??_C@_08PDFCMIPC@strategy?$AA@			; `string'
PUBLIC	??_C@_08CGPIOOFC@memLevel?$AA@			; `string'
PUBLIC	??_C@_05KKCMBFDI@wbits?$AA@			; `string'
PUBLIC	??_C@_06GABBCIBA@method?$AA@			; `string'
PUBLIC	??_C@_05KJNJLLGA@level?$AA@			; `string'
;	COMDAT ??_C@_04OLICEBLN@zlib?$AA@
CONST	SEGMENT
??_C@_04OLICEBLN@zlib?$AA@ DB 'zlib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IDAIIEGL@zlib?4Decompress?$AA@
CONST	SEGMENT
??_C@_0BA@IDAIIEGL@zlib?4Decompress?$AA@ DB 'zlib.Decompress', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LMFKCDND@zlib?4Compress?$AA@
CONST	SEGMENT
??_C@_0O@LMFKCDND@zlib?4Compress?$AA@ DB 'zlib.Compress', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FDIIBELN@decompressobj?$AA@
CONST	SEGMENT
??_C@_0O@FDIIBELN@decompressobj?$AA@ DB 'decompressobj', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KBIBMHFC@crc32?$AA@
CONST	SEGMENT
??_C@_05KBIBMHFC@crc32?$AA@ DB 'crc32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HPELMCGK@compressobj?$AA@
CONST	SEGMENT
??_C@_0M@HPELMCGK@compressobj?$AA@ DB 'compressobj', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NNOKLIPG@adler32?$AA@
CONST	SEGMENT
??_C@_07NNOKLIPG@adler32?$AA@ DB 'adler32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KCGPGHOO@eof?$AA@
CONST	SEGMENT
??_C@_03KCGPGHOO@eof?$AA@ DB 'eof', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MAEKPPAH@unconsumed_tail?$AA@
CONST	SEGMENT
??_C@_0BA@MAEKPPAH@unconsumed_tail?$AA@ DB 'unconsumed_tail', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DJDDGEAM@unused_data?$AA@
CONST	SEGMENT
??_C@_0M@DJDDGEAM@unused_data?$AA@ DB 'unused_data', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BDJCADKN@decompress?$AA@
CONST	SEGMENT
??_C@_0L@BDJCADKN@decompress?$AA@ DB 'decompress', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04COAGEIMF@copy?$AA@
CONST	SEGMENT
??_C@_04COAGEIMF@copy?$AA@ DB 'copy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EJNPIMGB@compress?$AA@
CONST	SEGMENT
??_C@_08EJNPIMGB@compress?$AA@ DB 'compress', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MPNKNAHE@zdict?$AA@
CONST	SEGMENT
??_C@_05MPNKNAHE@zdict?$AA@ DB 'zdict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PDFCMIPC@strategy?$AA@
CONST	SEGMENT
??_C@_08PDFCMIPC@strategy?$AA@ DB 'strategy', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CGPIOOFC@memLevel?$AA@
CONST	SEGMENT
??_C@_08CGPIOOFC@memLevel?$AA@ DB 'memLevel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKCMBFDI@wbits?$AA@
CONST	SEGMENT
??_C@_05KKCMBFDI@wbits?$AA@ DB 'wbits', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GABBCIBA@method?$AA@
CONST	SEGMENT
??_C@_06GABBCIBA@method?$AA@ DB 'method', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJNJLLGA@level?$AA@
CONST	SEGMENT
??_C@_05KJNJLLGA@level?$AA@ DB 'level', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
compressobj__doc__ DB 'compressobj(level=-1, method=DEFLATED, wbits=15, m'
	DB	'emlevel=8,', 0aH, '            strategy=Z_DEFAULT_STRATEGY[, '
	DB	'zdict])', 0aH, ' -- Return a compressor object.', 0aH, 0aH, 'l'
	DB	'evel is the compression level (an integer in the range 0-9; d'
	DB	'efault is 6).', 0aH, 'Higher compression levels are slower, b'
	DB	'ut produce smaller results.', 0aH, 0aH, 'method is the compre'
	DB	'ssion algorithm. If given, this must be DEFLATED.', 0aH, 0aH, 'w'
	DB	'bits is the base two logarithm of the window size (range: 8..'
	DB	'15).', 0aH, 0aH, 'memlevel controls the amount of memory used'
	DB	' for internal compression state.', 0aH, 'Valid values range f'
	DB	'rom 1 to 9. Higher values result in higher memory usage,', 0aH
	DB	'faster compression, and smaller output.', 0aH, 0aH, 'strategy'
	DB	' is used to tune the compression algorithm. Possible values a'
	DB	're', 0aH, 'Z_DEFAULT_STRATEGY, Z_FILTERED, and Z_HUFFMAN_ONLY'
	DB	'.', 0aH, 0aH, 'zdict is the predefined compression dictionary'
	DB	' - a sequence of bytes', 0aH, 'containing subsequences that a'
	DB	're likely to occur in the input data.', 00H
	ORG $+13
decompressobj__doc__ DB 'decompressobj([wbits[, zdict]]) -- Return a deco'
	DB	'mpressor object.', 0aH, 0aH, 'Optional arg wbits is the windo'
	DB	'w buffer size.', 0aH, 0aH, 'Optional arg zdict is the predefi'
	DB	'ned compression dictionary. This must be', 0aH, 'the same dic'
	DB	'tionary as used by the compressor that produced the input dat'
	DB	'a.', 00H
	ORG $+9
compress__doc__ DB 'compress(string[, level]) -- Returned compressed stri'
	DB	'ng.', 0aH, 0aH, 'Optional arg level is the compression level,'
	DB	' in 0-9.', 00H
	ORG $+1
decompress__doc__ DB 'decompress(string[, wbits[, bufsize]]) -- Return de'
	DB	'compressed string.', 0aH, 0aH, 'Optional arg wbits is the win'
	DB	'dow buffer size.  Optional arg bufsize is', 0aH, 'the initial'
	DB	' output buffer size.', 00H
	ORG $+2
?kwlist@?1??PyZlib_compressobj@@9@9 DQ FLAT:??_C@_05KJNJLLGA@level?$AA@ ; `PyZlib_compressobj'::`2'::kwlist
	DQ	FLAT:??_C@_06GABBCIBA@method?$AA@
	DQ	FLAT:??_C@_05KKCMBFDI@wbits?$AA@
	DQ	FLAT:??_C@_08CGPIOOFC@memLevel?$AA@
	DQ	FLAT:??_C@_08PDFCMIPC@strategy?$AA@
	DQ	FLAT:??_C@_05MPNKNAHE@zdict?$AA@
	DQ	0000000000000000H
?kwlist@?1??PyZlib_decompressobj@@9@9 DQ FLAT:??_C@_05KKCMBFDI@wbits?$AA@ ; `PyZlib_decompressobj'::`2'::kwlist
	DQ	FLAT:??_C@_05MPNKNAHE@zdict?$AA@
	DQ	0000000000000000H
comp_compress__doc__ DB 'compress(data) -- Return a string containing dat'
	DB	'a compressed.', 0aH, 0aH, 'After calling this function, some '
	DB	'of the input data may still', 0aH, 'be stored in internal buf'
	DB	'fers for later processing.', 0aH, 'Call the flush() method to'
	DB	' clear these buffers.', 00H
	ORG $+15
decomp_decompress__doc__ DB 'decompress(data, max_length) -- Return a str'
	DB	'ing containing the decompressed', 0aH, 'version of the data.', 0aH
	DB	0aH, 'After calling this function, some of the input data may '
	DB	'still be stored in', 0aH, 'internal buffers for later process'
	DB	'ing.', 0aH, 'Call the flush() method to clear these buffers.', 0aH
	DB	'If the max_length parameter is specified then the return valu'
	DB	'e will be', 0aH, 'no longer than max_length.  Unconsumed inpu'
	DB	't data will be stored in', 0aH, 'the unconsumed_tail attribut'
	DB	'e.', 00H
	ORG $+2
comp_flush__doc__ DB 'flush( [mode] ) -- Return a string containing any r'
	DB	'emaining compressed data.', 0aH, 0aH, 'mode can be one of the'
	DB	' constants Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH; the', 0aH, 'd'
	DB	'efault value used when mode is not specified is Z_FINISH.', 0aH
	DB	'If mode == Z_FINISH, the compressor object can no longer be u'
	DB	'sed after', 0aH, 'calling the flush() method.  Otherwise, mor'
	DB	'e data can still be compressed.', 00H
	ORG $+2
comp_copy__doc__ DB 'copy() -- Return a copy of the compression object.', 00H
	ORG $+5
decomp_copy__doc__ DB 'copy() -- Return a copy of the decompression objec'
	DB	't.', 00H
	ORG $+11
decomp_flush__doc__ DB 'flush( [length] ) -- Return a string containing a'
	DB	'ny remaining', 0aH, 'decompressed data. length, if given, is '
	DB	'the initial size of the', 0aH, 'output buffer.', 0aH, 0aH, 'T'
	DB	'he decompressor object can no longer be used after this call.'
	DB	00H
	ORG $+3
comp_methods DQ	FLAT:??_C@_08EJNPIMGB@compress?$AA@
	DQ	FLAT:PyZlib_objcompress
	DD	01H
	ORG $+4
	DQ	FLAT:comp_compress__doc__
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:PyZlib_flush
	DD	01H
	ORG $+4
	DQ	FLAT:comp_flush__doc__
	DQ	FLAT:??_C@_04COAGEIMF@copy?$AA@
	DQ	FLAT:PyZlib_copy
	DD	04H
	ORG $+4
	DQ	FLAT:comp_copy__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
Decomp_methods DQ FLAT:??_C@_0L@BDJCADKN@decompress?$AA@
	DQ	FLAT:PyZlib_objdecompress
	DD	01H
	ORG $+4
	DQ	FLAT:decomp_decompress__doc__
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:PyZlib_unflush
	DD	01H
	ORG $+4
	DQ	FLAT:decomp_flush__doc__
	DQ	FLAT:??_C@_04COAGEIMF@copy?$AA@
	DQ	FLAT:PyZlib_uncopy
	DD	04H
	ORG $+4
	DQ	FLAT:decomp_copy__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
Decomp_members DQ FLAT:??_C@_0M@DJDDGEAM@unused_data?$AA@
	DD	06H
	ORG $+4
	DQ	00000000000000b8H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BA@MAEKPPAH@unconsumed_tail?$AA@
	DD	06H
	ORG $+4
	DQ	00000000000000c0H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_03KCGPGHOO@eof?$AA@
	DD	0eH
	ORG $+4
	DQ	00000000000000c8H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
adler32__doc__ DB 'adler32(string[, start]) -- Compute an Adler-32 checks'
	DB	'um of string.', 0aH, 0aH, 'An optional starting value can be '
	DB	'specified.  The returned checksum is', 0aH, 'an integer.', 00H
	ORG $+8
crc32__doc__ DB	'crc32(string[, start]) -- Compute a CRC-32 checksum of s'
	DB	'tring.', 0aH, 0aH, 'An optional starting value can be specifi'
	DB	'ed.  The returned checksum is', 0aH, 'an integer.', 00H
	ORG $+13
zlib_methods DQ	FLAT:??_C@_07NNOKLIPG@adler32?$AA@
	DQ	FLAT:PyZlib_adler32
	DD	01H
	ORG $+4
	DQ	FLAT:adler32__doc__
	DQ	FLAT:??_C@_08EJNPIMGB@compress?$AA@
	DQ	FLAT:PyZlib_compress
	DD	01H
	ORG $+4
	DQ	FLAT:compress__doc__
	DQ	FLAT:??_C@_0M@HPELMCGK@compressobj?$AA@
	DQ	FLAT:PyZlib_compressobj
	DD	03H
	ORG $+4
	DQ	FLAT:compressobj__doc__
	DQ	FLAT:??_C@_05KBIBMHFC@crc32?$AA@
	DQ	FLAT:PyZlib_crc32
	DD	01H
	ORG $+4
	DQ	FLAT:crc32__doc__
	DQ	FLAT:??_C@_0L@BDJCADKN@decompress?$AA@
	DQ	FLAT:PyZlib_decompress
	DD	01H
	ORG $+4
	DQ	FLAT:decompress__doc__
	DQ	FLAT:??_C@_0O@FDIIBELN@decompressobj?$AA@
	DQ	FLAT:PyZlib_decompressobj
	DD	03H
	ORG $+4
	DQ	FLAT:decompressobj__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
Comptype DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0O@LMFKCDND@zlib?4Compress?$AA@
	DQ	00000000000000e0H
	DQ	0000000000000000H
	DQ	FLAT:Comp_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:comp_methods
	ORG $+152
Decomptype DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BA@IDAIIEGL@zlib?4Decompress?$AA@
	DQ	00000000000000e0H
	DQ	0000000000000000H
	DQ	FLAT:Decomp_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:Decomp_methods
	DQ	FLAT:Decomp_members
	ORG $+144
zlib_module_documentation DB 'The functions in this module allow compress'
	DB	'ion and decompression using the', 0aH, 'zlib library, which i'
	DB	's based on GNU zip.', 0aH, 0aH, 'adler32(string[, start]) -- '
	DB	'Compute an Adler-32 checksum.', 0aH, 'compress(string[, level'
	DB	']) -- Compress string, with compression level in 0-9.', 0aH, 'c'
	DB	'ompressobj([level[, ...]]) -- Return a compressor object.', 0aH
	DB	'crc32(string[, start]) -- Compute a CRC-32 checksum.', 0aH, 'd'
	DB	'ecompress(string,[wbits],[bufsize]) -- Decompresses a compres'
	DB	'sed string.', 0aH, 'decompressobj([wbits[, zdict]]]) -- Retur'
	DB	'n a decompressor object.', 0aH, 0aH, '''wbits'' is window buf'
	DB	'fer size.', 0aH, 'Compressor objects support compress() and f'
	DB	'lush() methods; decompressor', 0aH, 'objects support decompre'
	DB	'ss() and flush().', 00H
	ORG $+6
zlibmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04OLICEBLN@zlib?$AA@
	DQ	FLAT:zlib_module_documentation
	DQ	ffffffffffffffffH
	DQ	FLAT:zlib_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@NHAKGGEG@Error?5?$CFd?5?$CFs?3?5?$CF?4200s?$AA@ ; `string'
PUBLIC	??_C@_0BP@FLCANBMB@incomplete?5or?5truncated?5stream?$AA@ ; `string'
PUBLIC	??_C@_0BD@OGFFJDEL@invalid?5input?5data?$AA@	; `string'
PUBLIC	??_C@_0M@HLHPOCOL@Error?5?$CFd?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0BK@OIOJHOBK@inconsistent?5stream?5state?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OGJHKJMK@library?5version?5mismatch?$AA@ ; `string'
EXTRN	PyErr_Format:PROC
_BSS	SEGMENT
ZlibError DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\zlibmodule.c
pdata	SEGMENT
$pdata$zlib_error DD imagerel zlib_error
	DD	imagerel zlib_error+131
	DD	imagerel $unwind$zlib_error
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zlib_error DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BE@NHAKGGEG@Error?5?$CFd?5?$CFs?3?5?$CF?4200s?$AA@
CONST	SEGMENT
??_C@_0BE@NHAKGGEG@Error?5?$CFd?5?$CFs?3?5?$CF?4200s?$AA@ DB 'Error %d %s'
	DB	': %.200s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FLCANBMB@incomplete?5or?5truncated?5stream?$AA@
CONST	SEGMENT
??_C@_0BP@FLCANBMB@incomplete?5or?5truncated?5stream?$AA@ DB 'incomplete '
	DB	'or truncated stream', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OGFFJDEL@invalid?5input?5data?$AA@
CONST	SEGMENT
??_C@_0BD@OGFFJDEL@invalid?5input?5data?$AA@ DB 'invalid input data', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HLHPOCOL@Error?5?$CFd?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0M@HLHPOCOL@Error?5?$CFd?5?$CFs?$AA@ DB 'Error %d %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OIOJHOBK@inconsistent?5stream?5state?$AA@
CONST	SEGMENT
??_C@_0BK@OIOJHOBK@inconsistent?5stream?5state?$AA@ DB 'inconsistent stre'
	DB	'am state', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OGJHKJMK@library?5version?5mismatch?$AA@
CONST	SEGMENT
??_C@_0BJ@OGJHKJMK@library?5version?5mismatch?$AA@ DB 'library version mi'
	DB	'smatch', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT zlib_error
_TEXT	SEGMENT
zst$ = 64
err$ = 72
msg$ = 80
zlib_error PROC						; COMDAT

; 56   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 57   :     const char *zmsg = Z_NULL;
; 58   :     /* In case of a version mismatch, zst.msg won't be initialized.
; 59   :        Check for this case first, before looking at zst.msg. */
; 60   :     if (err == Z_VERSION_ERROR)

  00004	83 fa fa	 cmp	 edx, -6
  00007	75 09		 jne	 SHORT $LN13@zlib_error

; 61   :         zmsg = "library version mismatch";

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BJ@OGJHKJMK@library?5version?5mismatch?$AA@

; 62   :     if (zmsg == Z_NULL)

  00010	eb 4e		 jmp	 SHORT $LN2@zlib_error
$LN13@zlib_error:

; 63   :         zmsg = zst.msg;

  00012	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]

; 64   :     if (zmsg == Z_NULL) {

  00016	48 85 c0	 test	 rax, rax
  00019	75 45		 jne	 SHORT $LN2@zlib_error

; 65   :         switch (err) {

  0001b	83 fa fb	 cmp	 edx, -5
  0001e	74 39		 je	 SHORT $LN5@zlib_error
  00020	83 fa fd	 cmp	 edx, -3
  00023	74 2b		 je	 SHORT $LN3@zlib_error
  00025	83 fa fe	 cmp	 edx, -2
  00028	75 09		 jne	 SHORT $LN14@zlib_error

; 68   :             break;
; 69   :         case Z_STREAM_ERROR:
; 70   :             zmsg = "inconsistent stream state";

  0002a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BK@OIOJHOBK@inconsistent?5stream?5state?$AA@

; 71   :             break;

  00031	eb 2d		 jmp	 SHORT $LN2@zlib_error
$LN14@zlib_error:

; 75   :         }
; 76   :     }
; 77   :     if (zmsg == Z_NULL)
; 78   :         PyErr_Format(ZlibError, "Error %d %s", err, msg);

  00033	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZlibError
  0003a	4d 8b c8	 mov	 r9, r8
  0003d	44 8b c2	 mov	 r8d, edx
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@HLHPOCOL@Error?5?$CFd?5?$CFs?$AA@

; 81   : }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	e9 00 00 00 00	 jmp	 PyErr_Format
$LN3@zlib_error:

; 72   :         case Z_DATA_ERROR:
; 73   :             zmsg = "invalid input data";

  00050	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BD@OGFFJDEL@invalid?5input?5data?$AA@

; 74   :             break;

  00057	eb 07		 jmp	 SHORT $LN2@zlib_error
$LN5@zlib_error:

; 66   :         case Z_BUF_ERROR:
; 67   :             zmsg = "incomplete or truncated stream";

  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BP@FLCANBMB@incomplete?5or?5truncated?5stream?$AA@
$LN2@zlib_error:

; 79   :     else
; 80   :         PyErr_Format(ZlibError, "Error %d %s: %.200s", err, msg, zmsg);

  00060	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZlibError
  00067	4d 8b c8	 mov	 r9, r8
  0006a	44 8b c2	 mov	 r8d, edx
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NHAKGGEG@Error?5?$CFd?5?$CFs?3?5?$CF?4200s?$AA@
  00074	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00079	e8 00 00 00 00	 call	 PyErr_Format

; 81   : }

  0007e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00082	c3		 ret	 0
zlib_error ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	PyThread_allocate_lock:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$newcompobject DD imagerel newcompobject
	DD	imagerel newcompobject+151
	DD	imagerel $unwind$newcompobject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newcompobject DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT newcompobject
_TEXT	SEGMENT
type$ = 48
newcompobject PROC					; COMDAT

; 115  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 116  :     compobject *self;
; 117  :     self = PyObject_New(compobject, type);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	48 8b cb	 mov	 rcx, rbx
  00011	85 c0		 test	 eax, eax
  00013	74 07		 je	 SHORT $LN6@newcompobj
  00015	e8 00 00 00 00	 call	 _PxObject_New
  0001a	eb 05		 jmp	 SHORT $LN8@newcompobj
$LN6@newcompobj:
  0001c	e8 00 00 00 00	 call	 _PyObject_New
$LN8@newcompobj:
  00021	48 8b d8	 mov	 rbx, rax

; 118  :     if (self == NULL)
; 119  :         return NULL;

  00024	33 c0		 xor	 eax, eax
  00026	48 85 db	 test	 rbx, rbx
  00029	74 66		 je	 SHORT $LN4@newcompobj

; 120  :     self->eof = 0;
; 121  :     self->is_initialised = 0;
; 122  :     self->zdict = NULL;
; 123  :     self->unused_data = PyBytes_FromStringAndSize("", 0);

  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00032	33 d2		 xor	 edx, edx
  00034	88 83 c8 00 00
	00		 mov	 BYTE PTR [rbx+200], al
  0003a	89 83 cc 00 00
	00		 mov	 DWORD PTR [rbx+204], eax
  00040	48 89 83 d0 00
	00 00		 mov	 QWORD PTR [rbx+208], rax
  00047	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0004c	48 89 83 b8 00
	00 00		 mov	 QWORD PTR [rbx+184], rax

; 124  :     if (self->unused_data == NULL) {

  00053	48 85 c0	 test	 rax, rax
  00056	75 10		 jne	 SHORT $LN2@newcompobj
$LN9@newcompobj:

; 125  :         Py_DECREF(self);

  00058	48 8b cb	 mov	 rcx, rbx
  0005b	e8 00 00 00 00	 call	 _Py_DecRef

; 126  :         return NULL;

  00060	33 c0		 xor	 eax, eax

; 137  : }

  00062	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00066	5b		 pop	 rbx
  00067	c3		 ret	 0
$LN2@newcompobj:

; 127  :     }
; 128  :     self->unconsumed_tail = PyBytes_FromStringAndSize("", 0);

  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0006f	33 d2		 xor	 edx, edx
  00071	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00076	48 89 83 c0 00
	00 00		 mov	 QWORD PTR [rbx+192], rax

; 129  :     if (self->unconsumed_tail == NULL) {

  0007d	48 85 c0	 test	 rax, rax

; 130  :         Py_DECREF(self);
; 131  :         return NULL;

  00080	74 d6		 je	 SHORT $LN9@newcompobj

; 132  :     }
; 133  : #ifdef WITH_THREAD
; 134  :     self->lock = PyThread_allocate_lock();

  00082	e8 00 00 00 00	 call	 PyThread_allocate_lock
  00087	48 89 83 d8 00
	00 00		 mov	 QWORD PTR [rbx+216], rax

; 135  : #endif
; 136  :     return self;

  0008e	48 8b c3	 mov	 rax, rbx
$LN4@newcompobj:

; 137  : }

  00091	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00095	5b		 pop	 rbx
  00096	c3		 ret	 0
newcompobject ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@HLJIHGFN@Out?5of?5memory?5while?5compressing?5@ ; `string'
PUBLIC	??_C@_0BG@OJPCDAJB@Bad?5compression?5level?$AA@	; `string'
PUBLIC	$T21888
PUBLIC	??_C@_0BM@IPDNGAHJ@while?5finishing?5compression?$AA@ ; `string'
PUBLIC	$T21887
PUBLIC	$T21886
PUBLIC	??_C@_0BH@EEBMFEPN@while?5compressing?5data?$AA@ ; `string'
PUBLIC	??_C@_05DFCKICEH@1?42?45?$AA@			; `string'
PUBLIC	??_C@_0CH@PJFMNFII@Can?8t?5allocate?5memory?5to?5compres@ ; `string'
PUBLIC	??_C@_0CF@HNAFKOOJ@Size?5does?5not?5fit?5in?5an?5unsigned@ ; `string'
PUBLIC	??_C@_0O@MGHNPGOH@y?$CK?$HMi?3compress?$AA@	; `string'
EXTRN	__imp_free:PROC
EXTRN	PyBuffer_Release:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_MemoryError:QWORD
EXTRN	PyEval_RestoreThread:PROC
EXTRN	deflate:PROC
EXTRN	PyEval_SaveThread:PROC
EXTRN	deflateEnd:PROC
EXTRN	deflateInit_:PROC
EXTRN	__imp_malloc:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_compress DD imagerel PyZlib_compress
	DD	imagerel PyZlib_compress+649
	DD	imagerel $unwind$PyZlib_compress
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_compress DD 095c01H
	DD	02bc45cH
	DD	02a344bH
	DD	0260110H
	DD	060037004H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0CF@HLJIHGFN@Out?5of?5memory?5while?5compressing?5@
CONST	SEGMENT
??_C@_0CF@HLJIHGFN@Out?5of?5memory?5while?5compressing?5@ DB 'Out of memo'
	DB	'ry while compressing data', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OJPCDAJB@Bad?5compression?5level?$AA@
CONST	SEGMENT
??_C@_0BG@OJPCDAJB@Bad?5compression?5level?$AA@ DB 'Bad compression level'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IPDNGAHJ@while?5finishing?5compression?$AA@
CONST	SEGMENT
??_C@_0BM@IPDNGAHJ@while?5finishing?5compression?$AA@ DB 'while finishing'
	DB	' compression', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EEBMFEPN@while?5compressing?5data?$AA@
CONST	SEGMENT
??_C@_0BH@EEBMFEPN@while?5compressing?5data?$AA@ DB 'while compressing da'
	DB	'ta', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFCKICEH@1?42?45?$AA@
CONST	SEGMENT
??_C@_05DFCKICEH@1?42?45?$AA@ DB '1.2.5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PJFMNFII@Can?8t?5allocate?5memory?5to?5compres@
CONST	SEGMENT
??_C@_0CH@PJFMNFII@Can?8t?5allocate?5memory?5to?5compres@ DB 'Can''t allo'
	DB	'cate memory to compress data', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HNAFKOOJ@Size?5does?5not?5fit?5in?5an?5unsigned@
CONST	SEGMENT
??_C@_0CF@HNAFKOOJ@Size?5does?5not?5fit?5in?5an?5unsigned@ DB 'Size does '
	DB	'not fit in an unsigned int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MGHNPGOH@y?$CK?$HMi?3compress?$AA@
CONST	SEGMENT
??_C@_0O@MGHNPGOH@y?$CK?$HMi?3compress?$AA@ DB 'y*|i:compress', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyZlib_compress
_TEXT	SEGMENT
zst$ = 32
$T21888 = 128
$T21887 = 128
$T21886 = 128
pinput$ = 224
self$ = 336
args$ = 344
level$ = 352
PyZlib_compress PROC					; COMDAT

; 146  : {

  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 8d 6c 24 d0	 lea	 rbp, QWORD PTR [rsp-48]
  00009	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H

; 147  :     PyObject *ReturnVal = NULL;
; 148  :     Py_buffer pinput;
; 149  :     Byte *input, *output = NULL;
; 150  :     unsigned int length;
; 151  :     int level=Z_DEFAULT_COMPRESSION, err;
; 152  :     z_stream zst;
; 153  : 
; 154  :     /* require Python string object, optional 'level' arg */
; 155  :     if (!PyArg_ParseTuple(args, "y*|i:compress", &pinput, &level))

  00010	48 8b ca	 mov	 rcx, rdx
  00013	4c 8d 4d 60	 lea	 r9, QWORD PTR level$[rbp-256]
  00017	4c 8d 45 e0	 lea	 r8, QWORD PTR pinput$[rbp-256]
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@MGHNPGOH@y?$CK?$HMi?3compress?$AA@
  00022	33 f6		 xor	 esi, esi
  00024	c7 45 60 ff ff
	ff ff		 mov	 DWORD PTR level$[rbp-256], -1
  0002b	8b fe		 mov	 edi, esi
  0002d	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00032	85 c0		 test	 eax, eax
  00034	75 0d		 jne	 SHORT $LN12@PyZlib_com

; 156  :         return NULL;

  00036	33 c0		 xor	 eax, eax

; 224  : }

  00038	48 81 c4 30 01
	00 00		 add	 rsp, 304		; 00000130H
  0003f	5f		 pop	 rdi
  00040	5e		 pop	 rsi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
$LN12@PyZlib_com:
  00043	48 89 9c 24 50
	01 00 00	 mov	 QWORD PTR [rsp+336], rbx

; 157  : 
; 158  :     if (pinput.len > UINT_MAX) {

  0004b	48 8b 5d f0	 mov	 rbx, QWORD PTR pinput$[rbp-240]
  0004f	b8 ff ff ff ff	 mov	 eax, -1
  00054	4c 89 a4 24 58
	01 00 00	 mov	 QWORD PTR [rsp+344], r12
  0005c	48 3b d8	 cmp	 rbx, rax
  0005f	7e 13		 jle	 SHORT $LN11@PyZlib_com

; 159  :         PyErr_SetString(PyExc_OverflowError,
; 160  :                         "Size does not fit in an unsigned int");

  00061	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@HNAFKOOJ@Size?5does?5not?5fit?5in?5an?5unsigned@

; 161  :         goto error;

  0006f	e9 e0 01 00 00	 jmp	 $LN15@PyZlib_com
$LN11@PyZlib_com:

; 162  :     }
; 163  :     input = pinput.buf;
; 164  :     length = pinput.len;
; 165  : 
; 166  :     zst.avail_out = length + length/1000 + 12 + 1;

  00074	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00079	f7 e3		 mul	 ebx
  0007b	c1 ea 06	 shr	 edx, 6
  0007e	8d 44 1a 0d	 lea	 eax, DWORD PTR [rdx+rbx+13]

; 167  : 
; 168  :     output = (Byte*)malloc(zst.avail_out);

  00082	8b c8		 mov	 ecx, eax
  00084	89 44 24 38	 mov	 DWORD PTR zst$[rsp+24], eax
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0008e	48 8b f8	 mov	 rdi, rax

; 169  :     if (output == NULL) {

  00091	48 85 c0	 test	 rax, rax
  00094	75 0c		 jne	 SHORT $LN10@PyZlib_com

; 170  :         PyErr_SetString(PyExc_MemoryError,
; 171  :                         "Can't allocate memory to compress data");

  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@PJFMNFII@Can?8t?5allocate?5memory?5to?5compres@

; 172  :         goto error;

  0009d	e9 ab 01 00 00	 jmp	 $LN16@PyZlib_com
$LN10@PyZlib_com:

; 173  :     }
; 174  : 
; 175  :     /* Past the point of no return.  From here on out, we need to make sure
; 176  :        we clean up mallocs & INCREFs. */
; 177  : 
; 178  :     zst.zalloc = (alloc_func)NULL;
; 179  :     zst.zfree = (free_func)Z_NULL;
; 180  :     zst.next_out = (Byte *)output;
; 181  :     zst.next_in = (Byte *)input;
; 182  :     zst.avail_in = length;
; 183  :     err = deflateInit(&zst, level);

  000a2	8b 55 60	 mov	 edx, DWORD PTR level$[rbp-256]
  000a5	48 89 44 24 30	 mov	 QWORD PTR zst$[rsp+16], rax
  000aa	48 8b 45 e0	 mov	 rax, QWORD PTR pinput$[rbp-256]
  000ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05DFCKICEH@1?42?45?$AA@
  000b5	48 8d 4c 24 20	 lea	 rcx, QWORD PTR zst$[rsp]
  000ba	41 b9 58 00 00
	00		 mov	 r9d, 88			; 00000058H
  000c0	48 89 44 24 20	 mov	 QWORD PTR zst$[rsp], rax
  000c5	48 89 74 24 50	 mov	 QWORD PTR zst$[rsp+48], rsi
  000ca	48 89 74 24 58	 mov	 QWORD PTR zst$[rsp+56], rsi
  000cf	89 5c 24 28	 mov	 DWORD PTR zst$[rsp+8], ebx
  000d3	e8 00 00 00 00	 call	 deflateInit_
  000d8	8b d8		 mov	 ebx, eax

; 184  : 
; 185  :     switch(err) {

  000da	83 f8 fc	 cmp	 eax, -4
  000dd	0f 84 63 01 00
	00		 je	 $LN6@PyZlib_com
  000e3	83 f8 fe	 cmp	 eax, -2
  000e6	0f 84 4a 01 00
	00		 je	 $LN5@PyZlib_com
  000ec	85 c0		 test	 eax, eax
  000ee	74 59		 je	 SHORT $LN7@PyZlib_com

; 196  :     default:
; 197  :         deflateEnd(&zst);

  000f0	48 8d 4c 24 20	 lea	 rcx, QWORD PTR zst$[rsp]
  000f5	e8 00 00 00 00	 call	 deflateEnd

; 198  :         zlib_error(zst, err, "while compressing data");

  000fa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@EEBMFEPN@while?5compressing?5data?$AA@
  00101	48 8d 4d 80	 lea	 rcx, QWORD PTR $T21886[rbp-256]
  00105	0f 28 44 24 20	 movaps	 xmm0, XMMWORD PTR zst$[rsp]
  0010a	0f 28 4c 24 30	 movaps	 xmm1, XMMWORD PTR zst$[rsp+16]
  0010f	8b d3		 mov	 edx, ebx
  00111	0f 29 45 80	 movaps	 XMMWORD PTR $T21886[rbp-256], xmm0
  00115	0f 28 44 24 40	 movaps	 xmm0, XMMWORD PTR zst$[rsp+32]
  0011a	0f 29 4d 90	 movaps	 XMMWORD PTR $T21886[rbp-240], xmm1
  0011e	0f 28 4c 24 50	 movaps	 xmm1, XMMWORD PTR zst$[rsp+48]
  00123	0f 29 45 a0	 movaps	 XMMWORD PTR $T21886[rbp-224], xmm0
  00127	0f 28 44 24 60	 movaps	 xmm0, XMMWORD PTR zst$[rsp+64]
  0012c	0f 29 4d b0	 movaps	 XMMWORD PTR $T21886[rbp-208], xmm1
  00130	0f 29 45 c0	 movaps	 XMMWORD PTR $T21886[rbp-192], xmm0
  00134	f2 0f 10 4c 24
	70		 movsdx	 xmm1, QWORD PTR zst$[rsp+80]
  0013a	f2 0f 11 4d d0	 movsdx	 QWORD PTR $T21886[rbp-176], xmm1
  0013f	e8 00 00 00 00	 call	 zlib_error

; 199  :         goto error;

  00144	e9 10 01 00 00	 jmp	 $error$20830
$LN7@PyZlib_com:

; 200  :     }
; 201  : 
; 202  :     Py_BEGIN_ALLOW_THREADS;

  00149	e8 00 00 00 00	 call	 PyEval_SaveThread

; 203  :     err = deflate(&zst, Z_FINISH);

  0014e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR zst$[rsp]
  00153	ba 04 00 00 00	 mov	 edx, 4
  00158	48 8b d8	 mov	 rbx, rax
  0015b	e8 00 00 00 00	 call	 deflate

; 204  :     Py_END_ALLOW_THREADS;

  00160	48 8b cb	 mov	 rcx, rbx
  00163	44 8b e0	 mov	 r12d, eax
  00166	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 205  : 
; 206  :     if (err != Z_STREAM_END) {

  0016b	41 83 fc 01	 cmp	 r12d, 1
  0016f	74 5a		 je	 SHORT $LN3@PyZlib_com

; 207  :         zlib_error(zst, err, "while compressing data");

  00171	0f 28 44 24 20	 movaps	 xmm0, XMMWORD PTR zst$[rsp]
  00176	0f 28 4c 24 30	 movaps	 xmm1, XMMWORD PTR zst$[rsp+16]
  0017b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@EEBMFEPN@while?5compressing?5data?$AA@
  00182	48 8d 4d 80	 lea	 rcx, QWORD PTR $T21887[rbp-256]
  00186	41 8b d4	 mov	 edx, r12d
  00189	0f 29 45 80	 movaps	 XMMWORD PTR $T21887[rbp-256], xmm0
  0018d	0f 28 44 24 40	 movaps	 xmm0, XMMWORD PTR zst$[rsp+32]
  00192	0f 29 4d 90	 movaps	 XMMWORD PTR $T21887[rbp-240], xmm1
  00196	0f 28 4c 24 50	 movaps	 xmm1, XMMWORD PTR zst$[rsp+48]
  0019b	0f 29 45 a0	 movaps	 XMMWORD PTR $T21887[rbp-224], xmm0
  0019f	0f 28 44 24 60	 movaps	 xmm0, XMMWORD PTR zst$[rsp+64]
  001a4	0f 29 4d b0	 movaps	 XMMWORD PTR $T21887[rbp-208], xmm1
  001a8	0f 29 45 c0	 movaps	 XMMWORD PTR $T21887[rbp-192], xmm0
  001ac	f2 0f 10 4c 24
	70		 movsdx	 xmm1, QWORD PTR zst$[rsp+80]
  001b2	f2 0f 11 4d d0	 movsdx	 QWORD PTR $T21887[rbp-176], xmm1
  001b7	e8 00 00 00 00	 call	 zlib_error

; 208  :         deflateEnd(&zst);

  001bc	48 8d 4c 24 20	 lea	 rcx, QWORD PTR zst$[rsp]
  001c1	e8 00 00 00 00	 call	 deflateEnd

; 209  :         goto error;

  001c6	e9 8e 00 00 00	 jmp	 $error$20830
$LN3@PyZlib_com:

; 210  :     }
; 211  : 
; 212  :     err=deflateEnd(&zst);

  001cb	48 8d 4c 24 20	 lea	 rcx, QWORD PTR zst$[rsp]
  001d0	e8 00 00 00 00	 call	 deflateEnd

; 213  :     if (err == Z_OK)

  001d5	85 c0		 test	 eax, eax
  001d7	75 11		 jne	 SHORT $LN2@PyZlib_com

; 214  :         ReturnVal = PyBytes_FromStringAndSize((char *)output,
; 215  :                                               zst.total_out);

  001d9	8b 54 24 3c	 mov	 edx, DWORD PTR zst$[rsp+28]
  001dd	48 8b cf	 mov	 rcx, rdi
  001e0	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  001e5	48 8b f0	 mov	 rsi, rax

; 216  :     else

  001e8	eb 6f		 jmp	 SHORT $error$20830
$LN2@PyZlib_com:

; 217  :         zlib_error(zst, err, "while finishing compression");

  001ea	0f 28 44 24 20	 movaps	 xmm0, XMMWORD PTR zst$[rsp]
  001ef	0f 28 4c 24 30	 movaps	 xmm1, XMMWORD PTR zst$[rsp+16]
  001f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BM@IPDNGAHJ@while?5finishing?5compression?$AA@
  001fb	48 8d 4d 80	 lea	 rcx, QWORD PTR $T21888[rbp-256]
  001ff	8b d0		 mov	 edx, eax
  00201	0f 29 45 80	 movaps	 XMMWORD PTR $T21888[rbp-256], xmm0
  00205	0f 28 44 24 40	 movaps	 xmm0, XMMWORD PTR zst$[rsp+32]
  0020a	0f 29 4d 90	 movaps	 XMMWORD PTR $T21888[rbp-240], xmm1
  0020e	0f 28 4c 24 50	 movaps	 xmm1, XMMWORD PTR zst$[rsp+48]
  00213	0f 29 45 a0	 movaps	 XMMWORD PTR $T21888[rbp-224], xmm0
  00217	0f 28 44 24 60	 movaps	 xmm0, XMMWORD PTR zst$[rsp+64]
  0021c	0f 29 4d b0	 movaps	 XMMWORD PTR $T21888[rbp-208], xmm1
  00220	0f 29 45 c0	 movaps	 XMMWORD PTR $T21888[rbp-192], xmm0
  00224	f2 0f 10 4c 24
	70		 movsdx	 xmm1, QWORD PTR zst$[rsp+80]
  0022a	f2 0f 11 4d d0	 movsdx	 QWORD PTR $T21888[rbp-176], xmm1
  0022f	e8 00 00 00 00	 call	 zlib_error
  00234	eb 23		 jmp	 SHORT $error$20830
$LN5@PyZlib_com:

; 191  :         goto error;
; 192  :     case(Z_STREAM_ERROR):
; 193  :         PyErr_SetString(ZlibError,
; 194  :                         "Bad compression level");

  00236	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZlibError
  0023d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@OJPCDAJB@Bad?5compression?5level?$AA@

; 195  :         goto error;

  00244	eb 0e		 jmp	 SHORT $LN15@PyZlib_com
$LN6@PyZlib_com:

; 186  :     case(Z_OK):
; 187  :         break;
; 188  :     case(Z_MEM_ERROR):
; 189  :         PyErr_SetString(PyExc_MemoryError,
; 190  :                         "Out of memory while compressing data");

  00246	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@HLJIHGFN@Out?5of?5memory?5while?5compressing?5@
$LN16@PyZlib_com:
  0024d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
$LN15@PyZlib_com:
  00254	e8 00 00 00 00	 call	 PyErr_SetString
$error$20830:

; 218  : 
; 219  :  error:
; 220  :     PyBuffer_Release(&pinput);

  00259	48 8d 4d e0	 lea	 rcx, QWORD PTR pinput$[rbp-256]
  0025d	e8 00 00 00 00	 call	 PyBuffer_Release

; 221  :     free(output);

  00262	48 8b cf	 mov	 rcx, rdi
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0026b	4c 8b a4 24 58
	01 00 00	 mov	 r12, QWORD PTR [rsp+344]
  00273	48 8b 9c 24 50
	01 00 00	 mov	 rbx, QWORD PTR [rsp+336]

; 222  : 
; 223  :     return ReturnVal;

  0027b	48 8b c6	 mov	 rax, rsi

; 224  : }

  0027e	48 81 c4 30 01
	00 00		 add	 rsp, 304		; 00000130H
  00285	5f		 pop	 rdi
  00286	5e		 pop	 rsi
  00287	5d		 pop	 rbp
  00288	c3		 ret	 0
PyZlib_compress ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@NLKHKPNC@Out?5of?5memory?5while?5decompressin@ ; `string'
PUBLIC	$T21909
PUBLIC	$T21911
PUBLIC	??_C@_0BO@OCMLNOON@while?5finishing?5decompression?$AA@ ; `string'
PUBLIC	$T21910
PUBLIC	??_C@_0BJ@KAMAGNFL@while?5decompressing?5data?$AA@ ; `string'
PUBLIC	$T21908
PUBLIC	??_C@_0CD@DOIIJEPJ@while?5preparing?5to?5decompress?5da@ ; `string'
PUBLIC	??_C@_0BB@DMFNMDKJ@y?$CK?$HMin?3decompress?$AA@	; `string'
EXTRN	_PyBytes_Resize:PROC
EXTRN	inflate:PROC
EXTRN	inflateEnd:PROC
EXTRN	inflateInit2_:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyZlib_decompress DD imagerel PyZlib_decompress
	DD	imagerel PyZlib_decompress+942
	DD	imagerel $unwind$PyZlib_decompress
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_decompress DD 077301H
	DD	02c3473H
	DD	02d7412H
	DD	02a0112H
	DD	05006H
xdata	ENDS
;	COMDAT ??_C@_0CH@NLKHKPNC@Out?5of?5memory?5while?5decompressin@
CONST	SEGMENT
??_C@_0CH@NLKHKPNC@Out?5of?5memory?5while?5decompressin@ DB 'Out of memor'
	DB	'y while decompressing data', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OCMLNOON@while?5finishing?5decompression?$AA@
CONST	SEGMENT
??_C@_0BO@OCMLNOON@while?5finishing?5decompression?$AA@ DB 'while finishi'
	DB	'ng decompression', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KAMAGNFL@while?5decompressing?5data?$AA@
CONST	SEGMENT
??_C@_0BJ@KAMAGNFL@while?5decompressing?5data?$AA@ DB 'while decompressin'
	DB	'g data', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DOIIJEPJ@while?5preparing?5to?5decompress?5da@
CONST	SEGMENT
??_C@_0CD@DOIIJEPJ@while?5preparing?5to?5decompress?5da@ DB 'while prepar'
	DB	'ing to decompress data', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DMFNMDKJ@y?$CK?$HMin?3decompress?$AA@
CONST	SEGMENT
??_C@_0BB@DMFNMDKJ@y?$CK?$HMin?3decompress?$AA@ DB 'y*|in:decompress', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\zlibmodule.c
CONST	ENDS
;	COMDAT PyZlib_decompress
_TEXT	SEGMENT
result_str$ = 48
zst$ = 64
$T21911 = 160
$T21910 = 160
$T21909 = 160
$T21908 = 160
pinput$ = 256
self$ = 352
args$ = 360
wsize$ = 368
r_strlen$ = 376
PyZlib_decompress PROC					; COMDAT

; 234  : {

  00000	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi
  00005	55		 push	 rbp
  00006	48 8d 6c 24 b0	 lea	 rbp, QWORD PTR [rsp-80]
  0000b	48 81 ec 50 01
	00 00		 sub	 rsp, 336		; 00000150H
  00012	48 8b c2	 mov	 rax, rdx

; 235  :     PyObject *result_str = NULL;
; 236  :     Py_buffer pinput;
; 237  :     Byte *input;
; 238  :     unsigned int length;
; 239  :     int err;
; 240  :     int wsize=DEF_WBITS;
; 241  :     Py_ssize_t r_strlen=DEFAULTALLOC;
; 242  :     z_stream zst;
; 243  : 
; 244  :     if (!PyArg_ParseTuple(args, "y*|in:decompress",
; 245  :                           &pinput, &wsize, &r_strlen))

  00015	48 8d 4d 78	 lea	 rcx, QWORD PTR r_strlen$[rbp-256]
  00019	4c 8d 4d 70	 lea	 r9, QWORD PTR wsize$[rbp-256]
  0001d	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00022	4c 8d 45 00	 lea	 r8, QWORD PTR pinput$[rbp-256]
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@DMFNMDKJ@y?$CK?$HMin?3decompress?$AA@
  0002d	33 ff		 xor	 edi, edi
  0002f	48 8b c8	 mov	 rcx, rax
  00032	c7 45 70 0f 00
	00 00		 mov	 DWORD PTR wsize$[rbp-256], 15
  00039	48 89 7c 24 30	 mov	 QWORD PTR result_str$[rsp], rdi
  0003e	48 c7 45 78 00
	40 00 00	 mov	 QWORD PTR r_strlen$[rbp-256], 16384 ; 00004000H
  00046	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0004b	85 c0		 test	 eax, eax
  0004d	75 13		 jne	 SHORT $LN26@PyZlib_dec

; 246  :         return NULL;

  0004f	33 c0		 xor	 eax, eax

; 338  : }

  00051	48 8b bc 24 68
	01 00 00	 mov	 rdi, QWORD PTR [rsp+360]
  00059	48 81 c4 50 01
	00 00		 add	 rsp, 336		; 00000150H
  00060	5d		 pop	 rbp
  00061	c3		 ret	 0
$LN26@PyZlib_dec:

; 247  : 
; 248  :     if (pinput.len > UINT_MAX) {

  00062	48 8b 45 10	 mov	 rax, QWORD PTR pinput$[rbp-240]
  00066	b9 ff ff ff ff	 mov	 ecx, -1
  0006b	48 89 9c 24 60
	01 00 00	 mov	 QWORD PTR [rsp+352], rbx
  00073	48 3b c1	 cmp	 rax, rcx
  00076	7e 13		 jle	 SHORT $LN25@PyZlib_dec

; 249  :         PyErr_SetString(PyExc_OverflowError,
; 250  :                         "Size does not fit in an unsigned int");

  00078	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@HNAFKOOJ@Size?5does?5not?5fit?5in?5an?5unsigned@

; 251  :         goto error;

  00086	e9 8b 02 00 00	 jmp	 $LN50@PyZlib_dec
$LN25@PyZlib_dec:

; 252  :     }
; 253  :     input = pinput.buf;
; 254  :     length = pinput.len;
; 255  : 
; 256  :     if (r_strlen <= 0)

  0008b	48 8b 55 78	 mov	 rdx, QWORD PTR r_strlen$[rbp-256]
  0008f	48 8b 5d 00	 mov	 rbx, QWORD PTR pinput$[rbp-256]
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	48 85 d2	 test	 rdx, rdx

; 257  :         r_strlen = 1;
; 258  : 
; 259  :     zst.avail_in = length;

  0009b	89 44 24 48	 mov	 DWORD PTR zst$[rsp+8], eax
  0009f	48 0f 4e d1	 cmovle	 rdx, rcx

; 260  :     zst.avail_out = r_strlen;
; 261  : 
; 262  :     if (!(result_str = PyBytes_FromStringAndSize(NULL, r_strlen)))

  000a3	33 c9		 xor	 ecx, ecx
  000a5	48 89 55 78	 mov	 QWORD PTR r_strlen$[rbp-256], rdx
  000a9	89 54 24 58	 mov	 DWORD PTR zst$[rsp+24], edx
  000ad	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000b2	48 89 44 24 30	 mov	 QWORD PTR result_str$[rsp], rax
  000b7	48 85 c0	 test	 rax, rax
  000ba	0f 84 5b 02 00
	00		 je	 $error$20879

; 263  :         goto error;
; 264  : 
; 265  :     zst.zalloc = (alloc_func)NULL;
; 266  :     zst.zfree = (free_func)Z_NULL;
; 267  :     zst.next_out = (Byte *)PyBytes_AS_STRING(result_str);
; 268  :     zst.next_in = (Byte *)input;
; 269  :     err = inflateInit2(&zst, wsize);

  000c0	8b 55 70	 mov	 edx, DWORD PTR wsize$[rbp-256]
  000c3	48 83 c0 78	 add	 rax, 120		; 00000078H
  000c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05DFCKICEH@1?42?45?$AA@
  000ce	48 8d 4c 24 40	 lea	 rcx, QWORD PTR zst$[rsp]
  000d3	41 b9 58 00 00
	00		 mov	 r9d, 88			; 00000058H
  000d9	48 89 7c 24 70	 mov	 QWORD PTR zst$[rsp+48], rdi
  000de	48 89 7c 24 78	 mov	 QWORD PTR zst$[rsp+56], rdi
  000e3	48 89 44 24 50	 mov	 QWORD PTR zst$[rsp+16], rax
  000e8	48 89 5c 24 40	 mov	 QWORD PTR zst$[rsp], rbx
  000ed	e8 00 00 00 00	 call	 inflateInit2_
  000f2	8b d8		 mov	 ebx, eax

; 270  : 
; 271  :     switch(err) {

  000f4	83 f8 fc	 cmp	 eax, -4
  000f7	0f 84 0b 02 00
	00		 je	 $LN19@PyZlib_dec
  000fd	85 c0		 test	 eax, eax
  000ff	74 57		 je	 SHORT $LL17@PyZlib_dec

; 277  :         goto error;
; 278  :     default:
; 279  :         inflateEnd(&zst);

  00101	48 8d 4c 24 40	 lea	 rcx, QWORD PTR zst$[rsp]
  00106	e8 00 00 00 00	 call	 inflateEnd

; 280  :         zlib_error(zst, err, "while preparing to decompress data");

  0010b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CD@DOIIJEPJ@while?5preparing?5to?5decompress?5da@
  00112	48 8d 4d a0	 lea	 rcx, QWORD PTR $T21908[rbp-256]
  00116	0f 28 44 24 40	 movaps	 xmm0, XMMWORD PTR zst$[rsp]
  0011b	0f 28 4c 24 50	 movaps	 xmm1, XMMWORD PTR zst$[rsp+16]
  00120	8b d3		 mov	 edx, ebx
  00122	0f 29 45 a0	 movaps	 XMMWORD PTR $T21908[rbp-256], xmm0
  00126	0f 28 44 24 60	 movaps	 xmm0, XMMWORD PTR zst$[rsp+32]
  0012b	0f 29 4d b0	 movaps	 XMMWORD PTR $T21908[rbp-240], xmm1
  0012f	0f 28 4c 24 70	 movaps	 xmm1, XMMWORD PTR zst$[rsp+48]
  00134	0f 29 45 c0	 movaps	 XMMWORD PTR $T21908[rbp-224], xmm0
  00138	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR zst$[rbp-192]
  0013c	0f 29 4d d0	 movaps	 XMMWORD PTR $T21908[rbp-208], xmm1
  00140	0f 29 45 e0	 movaps	 XMMWORD PTR $T21908[rbp-192], xmm0
  00144	f2 0f 10 4d 90	 movsdx	 xmm1, QWORD PTR zst$[rbp-176]
  00149	f2 0f 11 4d f0	 movsdx	 QWORD PTR $T21908[rbp-176], xmm1
  0014e	e8 00 00 00 00	 call	 zlib_error

; 281  :         goto error;

  00153	e9 c3 01 00 00	 jmp	 $error$20879
$LL17@PyZlib_dec:

; 282  :     }
; 283  : 
; 284  :     do {
; 285  :         Py_BEGIN_ALLOW_THREADS

  00158	e8 00 00 00 00	 call	 PyEval_SaveThread

; 286  :         err=inflate(&zst, Z_FINISH);

  0015d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR zst$[rsp]
  00162	ba 04 00 00 00	 mov	 edx, 4
  00167	48 8b d8	 mov	 rbx, rax
  0016a	e8 00 00 00 00	 call	 inflate

; 287  :         Py_END_ALLOW_THREADS

  0016f	48 8b cb	 mov	 rcx, rbx
  00172	8b f8		 mov	 edi, eax
  00174	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 288  : 
; 289  :         switch(err) {

  00179	83 ff fb	 cmp	 edi, -5
  0017c	74 64		 je	 SHORT $LN11@PyZlib_dec
  0017e	85 ff		 test	 edi, edi
  00180	74 6b		 je	 SHORT $LN10@PyZlib_dec
  00182	83 ff 01	 cmp	 edi, 1
  00185	0f 84 a2 00 00
	00		 je	 $LN42@PyZlib_dec

; 314  :             break;
; 315  :         default:
; 316  :             inflateEnd(&zst);

  0018b	48 8d 4c 24 40	 lea	 rcx, QWORD PTR zst$[rsp]
  00190	e8 00 00 00 00	 call	 inflateEnd

; 317  :             zlib_error(zst, err, "while decompressing data");

  00195	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BJ@KAMAGNFL@while?5decompressing?5data?$AA@
  0019c	48 8d 4d a0	 lea	 rcx, QWORD PTR $T21910[rbp-256]
  001a0	0f 28 44 24 40	 movaps	 xmm0, XMMWORD PTR zst$[rsp]
  001a5	0f 28 4c 24 50	 movaps	 xmm1, XMMWORD PTR zst$[rsp+16]
  001aa	8b d7		 mov	 edx, edi
  001ac	0f 29 45 a0	 movaps	 XMMWORD PTR $T21910[rbp-256], xmm0
  001b0	0f 28 44 24 60	 movaps	 xmm0, XMMWORD PTR zst$[rsp+32]
  001b5	0f 29 4d b0	 movaps	 XMMWORD PTR $T21910[rbp-240], xmm1
  001b9	0f 28 4c 24 70	 movaps	 xmm1, XMMWORD PTR zst$[rsp+48]
  001be	0f 29 45 c0	 movaps	 XMMWORD PTR $T21910[rbp-224], xmm0
  001c2	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR zst$[rbp-192]
  001c6	0f 29 4d d0	 movaps	 XMMWORD PTR $T21910[rbp-208], xmm1
  001ca	0f 29 45 e0	 movaps	 XMMWORD PTR $T21910[rbp-192], xmm0
  001ce	f2 0f 10 4d 90	 movsdx	 xmm1, QWORD PTR zst$[rbp-176]
  001d3	f2 0f 11 4d f0	 movsdx	 QWORD PTR $T21910[rbp-176], xmm1
  001d8	e8 00 00 00 00	 call	 zlib_error

; 318  :             goto error;

  001dd	e9 39 01 00 00	 jmp	 $error$20879
$LN11@PyZlib_dec:

; 290  :         case(Z_STREAM_END):
; 291  :             break;
; 292  :         case(Z_BUF_ERROR):
; 293  :             /*
; 294  :              * If there is at least 1 byte of room according to zst.avail_out
; 295  :              * and we get this error, assume that it means zlib cannot
; 296  :              * process the inflate call() due to an error in the data.
; 297  :              */
; 298  :             if (zst.avail_out > 0) {

  001e2	83 7c 24 58 00	 cmp	 DWORD PTR zst$[rsp+24], 0
  001e7	0f 87 c4 00 00
	00		 ja	 $LN43@PyZlib_dec
$LN10@PyZlib_dec:

; 302  :             }
; 303  :             /* fall through */
; 304  :         case(Z_OK):
; 305  :             /* need more memory */
; 306  :             if (_PyBytes_Resize(&result_str, r_strlen << 1) < 0) {

  001ed	48 8b 55 78	 mov	 rdx, QWORD PTR r_strlen$[rbp-256]
  001f1	48 8d 4c 24 30	 lea	 rcx, QWORD PTR result_str$[rsp]
  001f6	48 03 d2	 add	 rdx, rdx
  001f9	e8 00 00 00 00	 call	 _PyBytes_Resize
  001fe	85 c0		 test	 eax, eax
  00200	0f 88 f6 00 00
	00		 js	 $LN44@PyZlib_dec

; 307  :                 inflateEnd(&zst);
; 308  :                 goto error;
; 309  :             }
; 310  :             zst.next_out =
; 311  :                 (unsigned char *)PyBytes_AS_STRING(result_str) + r_strlen;

  00206	48 8b 55 78	 mov	 rdx, QWORD PTR r_strlen$[rbp-256]
  0020a	48 8b 44 24 30	 mov	 rax, QWORD PTR result_str$[rsp]
  0020f	48 8d 4c 02 78	 lea	 rcx, QWORD PTR [rdx+rax+120]

; 312  :             zst.avail_out = r_strlen;

  00214	89 54 24 58	 mov	 DWORD PTR zst$[rsp+24], edx

; 313  :             r_strlen = r_strlen << 1;

  00218	48 03 d2	 add	 rdx, rdx
  0021b	48 89 4c 24 50	 mov	 QWORD PTR zst$[rsp+16], rcx
  00220	48 89 55 78	 mov	 QWORD PTR r_strlen$[rbp-256], rdx

; 319  :         }
; 320  :     } while (err != Z_STREAM_END);

  00224	83 ff 01	 cmp	 edi, 1
  00227	0f 85 2b ff ff
	ff		 jne	 $LL17@PyZlib_dec
$LN42@PyZlib_dec:

; 321  : 
; 322  :     err = inflateEnd(&zst);

  0022d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR zst$[rsp]
  00232	e8 00 00 00 00	 call	 inflateEnd

; 323  :     if (err != Z_OK) {

  00237	85 c0		 test	 eax, eax
  00239	74 4d		 je	 SHORT $LN6@PyZlib_dec

; 324  :         zlib_error(zst, err, "while finishing decompression");

  0023b	0f 28 44 24 40	 movaps	 xmm0, XMMWORD PTR zst$[rsp]
  00240	0f 28 4c 24 50	 movaps	 xmm1, XMMWORD PTR zst$[rsp+16]
  00245	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BO@OCMLNOON@while?5finishing?5decompression?$AA@
  0024c	48 8d 4d a0	 lea	 rcx, QWORD PTR $T21911[rbp-256]
  00250	8b d0		 mov	 edx, eax
  00252	0f 29 45 a0	 movaps	 XMMWORD PTR $T21911[rbp-256], xmm0
  00256	0f 28 44 24 60	 movaps	 xmm0, XMMWORD PTR zst$[rsp+32]
  0025b	0f 29 4d b0	 movaps	 XMMWORD PTR $T21911[rbp-240], xmm1
  0025f	0f 28 4c 24 70	 movaps	 xmm1, XMMWORD PTR zst$[rsp+48]
  00264	0f 29 45 c0	 movaps	 XMMWORD PTR $T21911[rbp-224], xmm0
  00268	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR zst$[rbp-192]
  0026c	0f 29 4d d0	 movaps	 XMMWORD PTR $T21911[rbp-208], xmm1
  00270	0f 29 45 e0	 movaps	 XMMWORD PTR $T21911[rbp-192], xmm0
  00274	f2 0f 10 4d 90	 movsdx	 xmm1, QWORD PTR zst$[rbp-176]
  00279	f2 0f 11 4d f0	 movsdx	 QWORD PTR $T21911[rbp-176], xmm1
  0027e	e8 00 00 00 00	 call	 zlib_error

; 325  :         goto error;

  00283	e9 93 00 00 00	 jmp	 $error$20879
$LN6@PyZlib_dec:

; 326  :     }
; 327  : 
; 328  :     if (_PyBytes_Resize(&result_str, zst.total_out) < 0)

  00288	8b 54 24 5c	 mov	 edx, DWORD PTR zst$[rsp+28]
  0028c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR result_str$[rsp]
  00291	e8 00 00 00 00	 call	 _PyBytes_Resize
  00296	85 c0		 test	 eax, eax
  00298	0f 88 7d 00 00
	00		 js	 $error$20879

; 329  :         goto error;
; 330  : 
; 331  :     PyBuffer_Release(&pinput);

  0029e	48 8d 4d 00	 lea	 rcx, QWORD PTR pinput$[rbp-256]
  002a2	e8 00 00 00 00	 call	 PyBuffer_Release

; 332  :     return result_str;

  002a7	48 8b 44 24 30	 mov	 rax, QWORD PTR result_str$[rsp]
  002ac	e9 e4 00 00 00	 jmp	 $LN49@PyZlib_dec
$LN43@PyZlib_dec:

; 299  :                 zlib_error(zst, err, "while decompressing data");

  002b1	0f 28 44 24 40	 movaps	 xmm0, XMMWORD PTR zst$[rsp]
  002b6	0f 28 4c 24 50	 movaps	 xmm1, XMMWORD PTR zst$[rsp+16]
  002bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BJ@KAMAGNFL@while?5decompressing?5data?$AA@
  002c2	48 8d 4d a0	 lea	 rcx, QWORD PTR $T21909[rbp-256]
  002c6	ba fb ff ff ff	 mov	 edx, -5
  002cb	0f 29 45 a0	 movaps	 XMMWORD PTR $T21909[rbp-256], xmm0
  002cf	0f 28 44 24 60	 movaps	 xmm0, XMMWORD PTR zst$[rsp+32]
  002d4	0f 29 4d b0	 movaps	 XMMWORD PTR $T21909[rbp-240], xmm1
  002d8	0f 28 4c 24 70	 movaps	 xmm1, XMMWORD PTR zst$[rsp+48]
  002dd	0f 29 45 c0	 movaps	 XMMWORD PTR $T21909[rbp-224], xmm0
  002e1	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR zst$[rbp-192]
  002e5	0f 29 4d d0	 movaps	 XMMWORD PTR $T21909[rbp-208], xmm1
  002e9	0f 29 45 e0	 movaps	 XMMWORD PTR $T21909[rbp-192], xmm0
  002ed	f2 0f 10 4d 90	 movsdx	 xmm1, QWORD PTR zst$[rbp-176]
  002f2	f2 0f 11 4d f0	 movsdx	 QWORD PTR $T21909[rbp-176], xmm1
  002f7	e8 00 00 00 00	 call	 zlib_error
$LN44@PyZlib_dec:

; 300  :                 inflateEnd(&zst);

  002fc	48 8d 4c 24 40	 lea	 rcx, QWORD PTR zst$[rsp]
  00301	e8 00 00 00 00	 call	 inflateEnd

; 301  :                 goto error;

  00306	eb 13		 jmp	 SHORT $error$20879
$LN19@PyZlib_dec:

; 272  :     case(Z_OK):
; 273  :         break;
; 274  :     case(Z_MEM_ERROR):
; 275  :         PyErr_SetString(PyExc_MemoryError,
; 276  :                         "Out of memory while decompressing data");

  00308	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  0030f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@NLKHKPNC@Out?5of?5memory?5while?5decompressin@
$LN50@PyZlib_dec:
  00316	e8 00 00 00 00	 call	 PyErr_SetString
$error$20879:

; 333  : 
; 334  :  error:
; 335  :     PyBuffer_Release(&pinput);

  0031b	48 8d 4d 00	 lea	 rcx, QWORD PTR pinput$[rbp-256]
  0031f	e8 00 00 00 00	 call	 PyBuffer_Release

; 336  :     Py_XDECREF(result_str);

  00324	48 8b 5c 24 30	 mov	 rbx, QWORD PTR result_str$[rsp]
  00329	48 85 db	 test	 rbx, rbx
  0032c	74 65		 je	 SHORT $LN3@PyZlib_dec
  0032e	e8 00 00 00 00	 call	 _Py_PXCTX
  00333	85 c0		 test	 eax, eax
  00335	75 5c		 jne	 SHORT $LN3@PyZlib_dec
  00337	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0033b	a8 20		 test	 al, 32			; 00000020H
  0033d	75 4c		 jne	 SHORT $LN33@PyZlib_dec
  0033f	84 c0		 test	 al, al
  00341	78 48		 js	 SHORT $LN33@PyZlib_dec
  00343	a8 02		 test	 al, 2
  00345	75 4c		 jne	 SHORT $LN3@PyZlib_dec
  00347	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0034b	75 46		 jne	 SHORT $LN3@PyZlib_dec
  0034d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00354	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0035b	4c 8b cb	 mov	 r9, rbx
  0035e	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00364	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0036c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00371	48 8b cb	 mov	 rcx, rbx
  00374	85 c0		 test	 eax, eax
  00376	74 07		 je	 SHORT $LN38@PyZlib_dec
  00378	e8 00 00 00 00	 call	 _Px_Dealloc
  0037d	eb 14		 jmp	 SHORT $LN3@PyZlib_dec
$LN38@PyZlib_dec:
  0037f	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00383	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00389	eb 08		 jmp	 SHORT $LN3@PyZlib_dec
$LN33@PyZlib_dec:
  0038b	48 8b cb	 mov	 rcx, rbx
  0038e	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyZlib_dec:

; 337  :     return NULL;

  00393	33 c0		 xor	 eax, eax
$LN49@PyZlib_dec:
  00395	48 8b 9c 24 60
	01 00 00	 mov	 rbx, QWORD PTR [rsp+352]

; 338  : }

  0039d	48 8b bc 24 68
	01 00 00	 mov	 rdi, QWORD PTR [rsp+360]
  003a5	48 81 c4 50 01
	00 00		 add	 rsp, 336		; 00000150H
  003ac	5d		 pop	 rbp
  003ad	c3		 ret	 0
PyZlib_decompress ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@CAOKBADO@PyZlib_compressobj?$AA@	; `string'
PUBLIC	??_C@_0BI@EJECEJAF@?4?4?2Modules?2zlibmodule?4c?$AA@ ; `string'
PUBLIC	??_C@_0CN@CHBGDHHI@Can?8t?5allocate?5memory?5for?5compre@ ; `string'
PUBLIC	??_C@_0BO@DJJNHAML@Invalid?5initialization?5option?$AA@ ; `string'
PUBLIC	??_C@_0BD@IEFPHEPG@Invalid?5dictionary?$AA@	; `string'
PUBLIC	??_C@_0BH@IIBABCIP@deflateSetDictionary?$CI?$CJ?$AA@ ; `string'
PUBLIC	$T21959
PUBLIC	??_C@_0CC@KFNIIIKD@while?5creating?5compression?5objec@ ; `string'
PUBLIC	??_C@_0BF@IDNBMIDA@?$HMiiiiiy?$CK?3compressobj?$AA@ ; `string'
EXTRN	PyExc_ValueError:QWORD
EXTRN	deflateSetDictionary:PROC
EXTRN	deflateInit2_:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_compressobj DD imagerel PyZlib_compressobj
	DD	imagerel PyZlib_compressobj+611
	DD	imagerel $unwind$PyZlib_compressobj
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_compressobj DD 09c201H
	DD	02574c2H
	DD	02434baH
	DD	0266412H
	DD	0220112H
	DD	05006H
xdata	ENDS
;	COMDAT ??_C@_0BD@CAOKBADO@PyZlib_compressobj?$AA@
CONST	SEGMENT
??_C@_0BD@CAOKBADO@PyZlib_compressobj?$AA@ DB 'PyZlib_compressobj', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EJECEJAF@?4?4?2Modules?2zlibmodule?4c?$AA@
CONST	SEGMENT
??_C@_0BI@EJECEJAF@?4?4?2Modules?2zlibmodule?4c?$AA@ DB '..\Modules\zlibm'
	DB	'odule.c', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CHBGDHHI@Can?8t?5allocate?5memory?5for?5compre@
CONST	SEGMENT
??_C@_0CN@CHBGDHHI@Can?8t?5allocate?5memory?5for?5compre@ DB 'Can''t allo'
	DB	'cate memory for compression object', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DJJNHAML@Invalid?5initialization?5option?$AA@
CONST	SEGMENT
??_C@_0BO@DJJNHAML@Invalid?5initialization?5option?$AA@ DB 'Invalid initi'
	DB	'alization option', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IEFPHEPG@Invalid?5dictionary?$AA@
CONST	SEGMENT
??_C@_0BD@IEFPHEPG@Invalid?5dictionary?$AA@ DB 'Invalid dictionary', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IIBABCIP@deflateSetDictionary?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0BH@IIBABCIP@deflateSetDictionary?$CI?$CJ?$AA@ DB 'deflateSetDictio'
	DB	'nary()', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KFNIIIKD@while?5creating?5compression?5objec@
CONST	SEGMENT
??_C@_0CC@KFNIIIKD@while?5creating?5compression?5objec@ DB 'while creatin'
	DB	'g compression object', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IDNBMIDA@?$HMiiiiiy?$CK?3compressobj?$AA@
CONST	SEGMENT
??_C@_0BF@IDNBMIDA@?$HMiiiiiy?$CK?3compressobj?$AA@ DB '|iiiiiy*:compress'
	DB	'obj', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyZlib_compressobj
_TEXT	SEGMENT
method$ = 80
level$ = 84
wbits$ = 88
memLevel$ = 92
$T21959 = 96
zdict$ = 192
selfptr$ = 288
args$ = 296
kwargs$ = 304
strategy$ = 312
PyZlib_compressobj PROC					; COMDAT

; 342  : {

  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	55		 push	 rbp
  00006	48 8d 6c 24 f0	 lea	 rbp, QWORD PTR [rsp-16]
  0000b	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H

; 343  :     compobject *self;
; 344  :     int level=Z_DEFAULT_COMPRESSION, method=DEFLATED;
; 345  :     int wbits=MAX_WBITS, memLevel=DEF_MEM_LEVEL, strategy=0, err;
; 346  :     Py_buffer zdict;
; 347  :     static char *kwlist[] = {"level", "method", "wbits",
; 348  :                              "memLevel", "strategy", "zdict", NULL};
; 349  : 
; 350  :     zdict.buf = NULL; /* Sentinel, so we can tell whether zdict was supplied. */
; 351  :     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "|iiiiiy*:compressobj",
; 352  :                                      kwlist, &level, &method, &wbits,
; 353  :                                      &memLevel, &strategy, &zdict))

  00012	48 8d 4d c0	 lea	 rcx, QWORD PTR zdict$[rbp-256]
  00016	49 8b c0	 mov	 rax, r8
  00019	4c 8b d2	 mov	 r10, rdx
  0001c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00021	48 8d 4d 38	 lea	 rcx, QWORD PTR strategy$[rbp-256]
  00025	33 f6		 xor	 esi, esi
  00027	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0002c	48 8d 4c 24 5c	 lea	 rcx, QWORD PTR memLevel$[rsp]
  00031	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??PyZlib_compressobj@@9@9
  00038	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0003d	48 8d 4c 24 58	 lea	 rcx, QWORD PTR wbits$[rsp]
  00042	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BF@IDNBMIDA@?$HMiiiiiy?$CK?3compressobj?$AA@
  00049	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0004e	48 8d 4c 24 50	 lea	 rcx, QWORD PTR method$[rsp]
  00053	48 8b d0	 mov	 rdx, rax
  00056	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0005b	48 8d 4c 24 54	 lea	 rcx, QWORD PTR level$[rsp]
  00060	c7 44 24 54 ff
	ff ff ff	 mov	 DWORD PTR level$[rsp], -1
  00068	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0006d	49 8b ca	 mov	 rcx, r10
  00070	c7 44 24 50 08
	00 00 00	 mov	 DWORD PTR method$[rsp], 8
  00078	c7 44 24 58 0f
	00 00 00	 mov	 DWORD PTR wbits$[rsp], 15
  00080	c7 44 24 5c 08
	00 00 00	 mov	 DWORD PTR memLevel$[rsp], 8
  00088	89 75 38	 mov	 DWORD PTR strategy$[rbp-256], esi
  0008b	48 89 75 c0	 mov	 QWORD PTR zdict$[rbp-256], rsi
  0008f	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00094	85 c0		 test	 eax, eax
  00096	75 13		 jne	 SHORT $LN20@PyZlib_com@2

; 354  :         return NULL;

  00098	33 c0		 xor	 eax, eax

; 399  :     return (PyObject*)self;
; 400  : }

  0009a	48 8b b4 24 30
	01 00 00	 mov	 rsi, QWORD PTR [rsp+304]
  000a2	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  000a9	5d		 pop	 rbp
  000aa	c3		 ret	 0
$LN20@PyZlib_com@2:

; 355  : 
; 356  :     self = newcompobject(&Comptype);

  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Comptype
  000b2	48 89 9c 24 20
	01 00 00	 mov	 QWORD PTR [rsp+288], rbx
  000ba	48 89 bc 24 28
	01 00 00	 mov	 QWORD PTR [rsp+296], rdi
  000c2	e8 00 00 00 00	 call	 newcompobject
  000c7	48 8b d8	 mov	 rbx, rax

; 357  :     if (self==NULL)

  000ca	48 85 c0	 test	 rax, rax
  000cd	0f 84 5d 01 00
	00		 je	 $success$20971

; 358  :         goto error;
; 359  :     self->zst.zalloc = (alloc_func)NULL;

  000d3	48 89 b0 90 00
	00 00		 mov	 QWORD PTR [rax+144], rsi

; 360  :     self->zst.zfree = (free_func)Z_NULL;

  000da	48 89 b0 98 00
	00 00		 mov	 QWORD PTR [rax+152], rsi

; 361  :     self->zst.next_in = NULL;

  000e1	48 89 70 60	 mov	 QWORD PTR [rax+96], rsi

; 362  :     self->zst.avail_in = 0;

  000e5	89 70 68	 mov	 DWORD PTR [rax+104], esi

; 363  :     err = deflateInit2(&self->zst, level, method, wbits, memLevel, strategy);

  000e8	8b 4d 38	 mov	 ecx, DWORD PTR strategy$[rbp-256]
  000eb	44 8b 4c 24 58	 mov	 r9d, DWORD PTR wbits$[rsp]
  000f0	44 8b 44 24 50	 mov	 r8d, DWORD PTR method$[rsp]
  000f5	8b 54 24 54	 mov	 edx, DWORD PTR level$[rsp]
  000f9	c7 44 24 38 58
	00 00 00	 mov	 DWORD PTR [rsp+56], 88	; 00000058H
  00101	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05DFCKICEH@1?42?45?$AA@
  00108	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0010d	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00111	8b 4c 24 5c	 mov	 ecx, DWORD PTR memLevel$[rsp]
  00115	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00119	48 8d 4b 60	 lea	 rcx, QWORD PTR [rbx+96]
  0011d	e8 00 00 00 00	 call	 deflateInit2_

; 364  :     switch(err) {

  00122	83 f8 fc	 cmp	 eax, -4
  00125	0f 84 bf 00 00
	00		 je	 $LN12@PyZlib_com@2
  0012b	83 f8 fe	 cmp	 eax, -2
  0012e	0f 84 a6 00 00
	00		 je	 $LN7@PyZlib_com@2
  00134	85 c0		 test	 eax, eax
  00136	74 55		 je	 SHORT $LN16@PyZlib_com@2

; 389  :     default:
; 390  :         zlib_error(self->zst, err, "while creating compression object");

  00138	0f 10 43 60	 movups	 xmm0, XMMWORD PTR [rbx+96]
  0013c	0f 10 4b 70	 movups	 xmm1, XMMWORD PTR [rbx+112]
  00140	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CC@KFNIIIKD@while?5creating?5compression?5objec@
  00147	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T21959[rsp]
  0014c	8b d0		 mov	 edx, eax
  0014e	0f 29 44 24 60	 movaps	 XMMWORD PTR $T21959[rsp], xmm0
  00153	0f 29 4c 24 70	 movaps	 XMMWORD PTR $T21959[rsp+16], xmm1
  00158	0f 10 83 80 00
	00 00		 movups	 xmm0, XMMWORD PTR [rbx+128]
  0015f	0f 10 8b 90 00
	00 00		 movups	 xmm1, XMMWORD PTR [rbx+144]
  00166	0f 29 45 80	 movaps	 XMMWORD PTR $T21959[rbp-224], xmm0
  0016a	0f 29 4d 90	 movaps	 XMMWORD PTR $T21959[rbp-208], xmm1
  0016e	0f 10 83 a0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rbx+160]
  00175	f2 0f 10 8b b0
	00 00 00	 movsdx	 xmm1, QWORD PTR [rbx+176]
  0017d	0f 29 45 a0	 movaps	 XMMWORD PTR $T21959[rbp-192], xmm0
  00181	f2 0f 11 4d b0	 movsdx	 QWORD PTR $T21959[rbp-176], xmm1
  00186	e8 00 00 00 00	 call	 zlib_error

; 391  :         goto error;

  0018b	eb 70		 jmp	 SHORT $error$20958
$LN16@PyZlib_com@2:

; 365  :     case (Z_OK):
; 366  :         self->is_initialised = 1;

  0018d	c7 83 cc 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rbx+204], 1

; 367  :         if (zdict.buf == NULL) {

  00197	48 8b 55 c0	 mov	 rdx, QWORD PTR zdict$[rbp-256]
  0019b	48 85 d2	 test	 rdx, rdx
  0019e	0f 84 9b 00 00
	00		 je	 $LN1@PyZlib_com@2

; 368  :             goto success;
; 369  :         } else {
; 370  :             err = deflateSetDictionary(&self->zst, zdict.buf, zdict.len);

  001a4	44 8b 45 d0	 mov	 r8d, DWORD PTR zdict$[rbp-240]
  001a8	48 8d 4b 60	 lea	 rcx, QWORD PTR [rbx+96]
  001ac	e8 00 00 00 00	 call	 deflateSetDictionary

; 371  :             switch (err) {

  001b1	83 f8 fe	 cmp	 eax, -2
  001b4	74 14		 je	 SHORT $LN10@PyZlib_com@2
  001b6	85 c0		 test	 eax, eax
  001b8	74 76		 je	 SHORT $success$20971

; 377  :             default:
; 378  :                 PyErr_SetString(PyExc_ValueError, "deflateSetDictionary()");

  001ba	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IIBABCIP@deflateSetDictionary?$CI?$CJ?$AA@

; 379  :                 goto error;

  001c8	eb 2e		 jmp	 SHORT $LN23@PyZlib_com@2
$LN10@PyZlib_com@2:

; 372  :             case (Z_OK):
; 373  :                 goto success;
; 374  :             case (Z_STREAM_ERROR):
; 375  :                 PyErr_SetString(PyExc_ValueError, "Invalid dictionary");

  001ca	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@IEFPHEPG@Invalid?5dictionary?$AA@

; 376  :                 goto error;

  001d8	eb 1e		 jmp	 SHORT $LN23@PyZlib_com@2
$LN7@PyZlib_com@2:

; 385  :         goto error;
; 386  :     case(Z_STREAM_ERROR):
; 387  :         PyErr_SetString(PyExc_ValueError, "Invalid initialization option");

  001da	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DJJNHAML@Invalid?5initialization?5option?$AA@

; 388  :         goto error;

  001e8	eb 0e		 jmp	 SHORT $LN23@PyZlib_com@2
$LN12@PyZlib_com@2:

; 380  :             }
; 381  :        }
; 382  :     case (Z_MEM_ERROR):
; 383  :         PyErr_SetString(PyExc_MemoryError,
; 384  :                         "Can't allocate memory for compression object");

  001ea	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  001f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@CHBGDHHI@Can?8t?5allocate?5memory?5for?5compre@
$LN23@PyZlib_com@2:
  001f8	e8 00 00 00 00	 call	 PyErr_SetString
$error$20958:

; 392  :     }
; 393  : 
; 394  :  error:
; 395  :     Py_CLEAR(self);

  001fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@EJECEJAF@?4?4?2Modules?2zlibmodule?4c?$AA@
  00204	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@CAOKBADO@PyZlib_compressobj?$AA@
  0020b	4c 8b cb	 mov	 r9, rbx
  0020e	41 b8 8b 01 00
	00		 mov	 r8d, 395		; 0000018bH
  00214	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0021c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00221	85 c0		 test	 eax, eax
  00223	75 0b		 jne	 SHORT $success$20971
  00225	48 8b cb	 mov	 rcx, rbx
  00228	48 8b de	 mov	 rbx, rsi
  0022b	e8 00 00 00 00	 call	 _Py_DecRef
$success$20971:

; 396  :  success:
; 397  :     if (zdict.buf != NULL)

  00230	48 39 75 c0	 cmp	 QWORD PTR zdict$[rbp-256], rsi
  00234	74 09		 je	 SHORT $LN1@PyZlib_com@2

; 398  :         PyBuffer_Release(&zdict);

  00236	48 8d 4d c0	 lea	 rcx, QWORD PTR zdict$[rbp-256]
  0023a	e8 00 00 00 00	 call	 PyBuffer_Release
$LN1@PyZlib_com@2:

; 399  :     return (PyObject*)self;
; 400  : }

  0023f	48 8b bc 24 28
	01 00 00	 mov	 rdi, QWORD PTR [rsp+296]
  00247	48 8b b4 24 30
	01 00 00	 mov	 rsi, QWORD PTR [rsp+304]
  0024f	48 8b c3	 mov	 rax, rbx
  00252	48 8b 9c 24 20
	01 00 00	 mov	 rbx, QWORD PTR [rsp+288]
  0025a	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  00261	5d		 pop	 rbp
  00262	c3		 ret	 0
PyZlib_compressobj ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@FBGHCAJG@Can?8t?5allocate?5memory?5for?5decomp@ ; `string'
PUBLIC	$T21974
PUBLIC	??_C@_0CE@GIHFBAJB@while?5creating?5decompression?5obj@ ; `string'
PUBLIC	??_C@_0DA@ELPHBDDN@zdict?5argument?5must?5support?5the?5@ ; `string'
PUBLIC	??_C@_0BC@CJNGNBKB@?$HMiO?3decompressobj?$AA@	; `string'
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_decompressobj DD imagerel PyZlib_decompressobj
	DD	imagerel PyZlib_decompressobj+145
	DD	imagerel $unwind$PyZlib_decompressobj
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyZlib_decompressobj DD imagerel PyZlib_decompressobj+145
	DD	imagerel PyZlib_decompressobj+183
	DD	imagerel $chain$0$PyZlib_decompressobj
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyZlib_decompressobj DD imagerel PyZlib_decompressobj+183
	DD	imagerel PyZlib_decompressobj+482
	DD	imagerel $chain$3$PyZlib_decompressobj
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyZlib_decompressobj DD 042221H
	DD	0177422H
	DD	0163400H
	DD	imagerel PyZlib_decompressobj
	DD	imagerel PyZlib_decompressobj+145
	DD	imagerel $unwind$PyZlib_decompressobj
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyZlib_decompressobj DD 020821H
	DD	0163408H
	DD	imagerel PyZlib_decompressobj
	DD	imagerel PyZlib_decompressobj+145
	DD	imagerel $unwind$PyZlib_decompressobj
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_decompressobj DD 030b01H
	DD	014010bH
	DD	06004H
xdata	ENDS
;	COMDAT ??_C@_0CP@FBGHCAJG@Can?8t?5allocate?5memory?5for?5decomp@
CONST	SEGMENT
??_C@_0CP@FBGHCAJG@Can?8t?5allocate?5memory?5for?5decomp@ DB 'Can''t allo'
	DB	'cate memory for decompression object', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GIHFBAJB@while?5creating?5decompression?5obj@
CONST	SEGMENT
??_C@_0CE@GIHFBAJB@while?5creating?5decompression?5obj@ DB 'while creatin'
	DB	'g decompression object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@ELPHBDDN@zdict?5argument?5must?5support?5the?5@
CONST	SEGMENT
??_C@_0DA@ELPHBDDN@zdict?5argument?5must?5support?5the?5@ DB 'zdict argum'
	DB	'ent must support the buffer protocol', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CJNGNBKB@?$HMiO?3decompressobj?$AA@
CONST	SEGMENT
??_C@_0BC@CJNGNBKB@?$HMiO?3decompressobj?$AA@ DB '|iO:decompressobj', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyZlib_decompressobj
_TEXT	SEGMENT
zdict$ = 48
$T21974 = 64
selfptr$ = 176
args$ = 184
kwargs$ = 192
wbits$ = 200
PyZlib_decompressobj PROC				; COMDAT

; 404  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	56		 push	 rsi
  00004	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H

; 405  :     static char *kwlist[] = {"wbits", "zdict", NULL};
; 406  :     int wbits=DEF_WBITS, err;
; 407  :     compobject *self;
; 408  :     PyObject *zdict=NULL;
; 409  : 
; 410  :     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "|iO:decompressobj",
; 411  :                                      kwlist, &wbits, &zdict))

  0000b	49 8d 4b 88	 lea	 rcx, QWORD PTR [r11-120]
  0000f	49 8b c0	 mov	 rax, r8
  00012	4c 8b d2	 mov	 r10, rdx
  00015	49 89 4b 80	 mov	 QWORD PTR [r11-128], rcx
  00019	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??PyZlib_decompressobj@@9@9
  00024	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00029	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@CJNGNBKB@?$HMiO?3decompressobj?$AA@
  00030	33 f6		 xor	 esi, esi
  00032	49 8b ca	 mov	 rcx, r10
  00035	48 8b d0	 mov	 rdx, rax
  00038	41 c7 43 20 0f
	00 00 00	 mov	 DWORD PTR [r11+32], 15
  00040	49 89 73 88	 mov	 QWORD PTR [r11-120], rsi
  00044	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00049	85 c0		 test	 eax, eax

; 412  :         return NULL;

  0004b	74 32		 je	 SHORT $LN18@PyZlib_dec@2

; 413  :     if (zdict != NULL && !PyObject_CheckBuffer(zdict)) {

  0004d	48 8b 44 24 30	 mov	 rax, QWORD PTR zdict$[rsp]
  00052	48 85 c0	 test	 rax, rax
  00055	74 33		 je	 SHORT $LN10@PyZlib_dec@2
  00057	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005b	48 8b 88 f8 00
	00 00		 mov	 rcx, QWORD PTR [rax+248]
  00062	48 85 c9	 test	 rcx, rcx
  00065	74 05		 je	 SHORT $LN9@PyZlib_dec@2
  00067	48 39 31	 cmp	 QWORD PTR [rcx], rsi
  0006a	75 1e		 jne	 SHORT $LN10@PyZlib_dec@2
$LN9@PyZlib_dec@2:

; 414  :         PyErr_SetString(PyExc_TypeError,
; 415  :                         "zdict argument must support the buffer protocol");

  0006c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@ELPHBDDN@zdict?5argument?5must?5support?5the?5@
  0007a	e8 00 00 00 00	 call	 PyErr_SetString
$LN18@PyZlib_dec@2:

; 416  :         return NULL;

  0007f	33 c0		 xor	 eax, eax

; 448  :     }
; 449  : }

  00081	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00088	5e		 pop	 rsi
  00089	c3		 ret	 0
$LN10@PyZlib_dec@2:

; 417  :     }
; 418  : 
; 419  :     self = newcompobject(&Decomptype);

  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Decomptype
  00091	48 89 9c 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rbx
  00099	e8 00 00 00 00	 call	 newcompobject
  0009e	48 8b d8	 mov	 rbx, rax

; 420  :     if (self == NULL)

  000a1	48 85 c0	 test	 rax, rax
  000a4	75 11		 jne	 SHORT $LN8@PyZlib_dec@2
  000a6	48 8b 9c 24 b0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+176]

; 448  :     }
; 449  : }

  000ae	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  000b5	5e		 pop	 rsi
  000b6	c3		 ret	 0
$LN8@PyZlib_dec@2:

; 421  :         return(NULL);
; 422  :     self->zst.zalloc = (alloc_func)NULL;

  000b7	48 89 b0 90 00
	00 00		 mov	 QWORD PTR [rax+144], rsi

; 423  :     self->zst.zfree = (free_func)Z_NULL;

  000be	48 89 b0 98 00
	00 00		 mov	 QWORD PTR [rax+152], rsi

; 424  :     self->zst.next_in = NULL;

  000c5	48 89 70 60	 mov	 QWORD PTR [rax+96], rsi

; 425  :     self->zst.avail_in = 0;

  000c9	89 70 68	 mov	 DWORD PTR [rax+104], esi

; 426  :     if (zdict != NULL) {

  000cc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zdict$[rsp]
  000d1	48 89 bc 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rdi
  000d9	48 85 c9	 test	 rcx, rcx
  000dc	74 11		 je	 SHORT $LN7@PyZlib_dec@2

; 427  :         Py_INCREF(zdict);

  000de	e8 00 00 00 00	 call	 _Py_IncRef

; 428  :         self->zdict = zdict;

  000e3	4c 8b 5c 24 30	 mov	 r11, QWORD PTR zdict$[rsp]
  000e8	4c 89 9b d0 00
	00 00		 mov	 QWORD PTR [rbx+208], r11
$LN7@PyZlib_dec@2:

; 429  :     }
; 430  :     err = inflateInit2(&self->zst, wbits);

  000ef	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR wbits$[rsp]
  000f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05DFCKICEH@1?42?45?$AA@
  000fd	48 8d 4b 60	 lea	 rcx, QWORD PTR [rbx+96]
  00101	41 b9 58 00 00
	00		 mov	 r9d, 88			; 00000058H
  00107	e8 00 00 00 00	 call	 inflateInit2_

; 431  :     switch(err) {

  0010c	83 f8 fc	 cmp	 eax, -4
  0010f	0f 84 97 00 00
	00		 je	 $LN2@PyZlib_dec@2
  00115	83 f8 fe	 cmp	 eax, -2
  00118	74 7a		 je	 SHORT $LN3@PyZlib_dec@2
  0011a	85 c0		 test	 eax, eax
  0011c	74 67		 je	 SHORT $LN4@PyZlib_dec@2

; 444  :     default:
; 445  :         zlib_error(self->zst, err, "while creating decompression object");

  0011e	0f 10 43 60	 movups	 xmm0, XMMWORD PTR [rbx+96]
  00122	0f 10 4b 70	 movups	 xmm1, XMMWORD PTR [rbx+112]
  00126	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CE@GIHFBAJB@while?5creating?5decompression?5obj@
  0012d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T21974[rsp]
  00132	8b d0		 mov	 edx, eax
  00134	0f 29 44 24 40	 movaps	 XMMWORD PTR $T21974[rsp], xmm0
  00139	0f 29 4c 24 50	 movaps	 XMMWORD PTR $T21974[rsp+16], xmm1
  0013e	0f 10 83 80 00
	00 00		 movups	 xmm0, XMMWORD PTR [rbx+128]
  00145	0f 10 8b 90 00
	00 00		 movups	 xmm1, XMMWORD PTR [rbx+144]
  0014c	0f 29 44 24 60	 movaps	 XMMWORD PTR $T21974[rsp+32], xmm0
  00151	0f 29 4c 24 70	 movaps	 XMMWORD PTR $T21974[rsp+48], xmm1
  00156	0f 10 83 a0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rbx+160]
  0015d	f2 0f 10 8b b0
	00 00 00	 movsdx	 xmm1, QWORD PTR [rbx+176]
  00165	0f 29 84 24 80
	00 00 00	 movaps	 XMMWORD PTR $T21974[rsp+64], xmm0
  0016d	f2 0f 11 8c 24
	90 00 00 00	 movsdx	 QWORD PTR $T21974[rsp+80], xmm1
  00176	e8 00 00 00 00	 call	 zlib_error

; 446  :         Py_DECREF(self);

  0017b	48 8b cb	 mov	 rcx, rbx
  0017e	e8 00 00 00 00	 call	 _Py_DecRef

; 447  :         return NULL;

  00183	eb 42		 jmp	 SHORT $LN16@PyZlib_dec@2
$LN4@PyZlib_dec@2:

; 432  :     case (Z_OK):
; 433  :         self->is_initialised = 1;

  00185	c7 83 cc 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rbx+204], 1

; 434  :         return (PyObject*)self;

  0018f	48 8b c3	 mov	 rax, rbx
  00192	eb 35		 jmp	 SHORT $LN15@PyZlib_dec@2
$LN3@PyZlib_dec@2:

; 435  :     case(Z_STREAM_ERROR):
; 436  :         Py_DECREF(self);

  00194	48 8b cb	 mov	 rcx, rbx
  00197	e8 00 00 00 00	 call	 _Py_DecRef

; 437  :         PyErr_SetString(PyExc_ValueError, "Invalid initialization option");

  0019c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DJJNHAML@Invalid?5initialization?5option?$AA@

; 438  :         return NULL;

  001aa	eb 16		 jmp	 SHORT $LN17@PyZlib_dec@2
$LN2@PyZlib_dec@2:

; 439  :     case (Z_MEM_ERROR):
; 440  :         Py_DECREF(self);

  001ac	48 8b cb	 mov	 rcx, rbx
  001af	e8 00 00 00 00	 call	 _Py_DecRef

; 441  :         PyErr_SetString(PyExc_MemoryError,
; 442  :                         "Can't allocate memory for decompression object");

  001b4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  001bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@FBGHCAJG@Can?8t?5allocate?5memory?5for?5decomp@
$LN17@PyZlib_dec@2:
  001c2	e8 00 00 00 00	 call	 PyErr_SetString
$LN16@PyZlib_dec@2:

; 443  :         return NULL;

  001c7	33 c0		 xor	 eax, eax
$LN15@PyZlib_dec@2:
  001c9	48 8b bc 24 b8
	00 00 00	 mov	 rdi, QWORD PTR [rsp+184]
  001d1	48 8b 9c 24 b0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+176]

; 448  :     }
; 449  : }

  001d9	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  001e0	5e		 pop	 rsi
  001e1	c3		 ret	 0
PyZlib_decompressobj ENDP
_TEXT	ENDS
EXTRN	PyObject_Free:PROC
EXTRN	PyThread_free_lock:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$Dealloc DD imagerel Dealloc
	DD	imagerel Dealloc+418
	DD	imagerel $unwind$Dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\zlibmodule.c
xdata	ENDS
;	COMDAT Dealloc
_TEXT	SEGMENT
self$ = 64
Dealloc	PROC						; COMDAT

; 453  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 454  : #ifdef WITH_THREAD
; 455  :     PyThread_free_lock(self->lock);

  0000d	48 8b 89 d8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+216]
  00014	e8 00 00 00 00	 call	 PyThread_free_lock

; 456  : #endif
; 457  :     Py_XDECREF(self->unused_data);

  00019	48 8b 9f b8 00
	00 00		 mov	 rbx, QWORD PTR [rdi+184]
  00020	48 85 db	 test	 rbx, rbx
  00023	74 65		 je	 SHORT $LN11@Dealloc
  00025	e8 00 00 00 00	 call	 _Py_PXCTX
  0002a	85 c0		 test	 eax, eax
  0002c	75 5c		 jne	 SHORT $LN11@Dealloc
  0002e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00032	a8 20		 test	 al, 32			; 00000020H
  00034	75 4c		 jne	 SHORT $LN19@Dealloc
  00036	84 c0		 test	 al, al
  00038	78 48		 js	 SHORT $LN19@Dealloc
  0003a	a8 02		 test	 al, 2
  0003c	75 4c		 jne	 SHORT $LN11@Dealloc
  0003e	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00042	75 46		 jne	 SHORT $LN11@Dealloc
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00052	4c 8b cb	 mov	 r9, rbx
  00055	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0005b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00063	e8 00 00 00 00	 call	 _PyParallel_Guard
  00068	48 8b cb	 mov	 rcx, rbx
  0006b	85 c0		 test	 eax, eax
  0006d	74 07		 je	 SHORT $LN24@Dealloc
  0006f	e8 00 00 00 00	 call	 _Px_Dealloc
  00074	eb 14		 jmp	 SHORT $LN11@Dealloc
$LN24@Dealloc:
  00076	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0007a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00080	eb 08		 jmp	 SHORT $LN11@Dealloc
$LN19@Dealloc:
  00082	48 8b cb	 mov	 rcx, rbx
  00085	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Dealloc:

; 458  :     Py_XDECREF(self->unconsumed_tail);

  0008a	48 8b 9f c0 00
	00 00		 mov	 rbx, QWORD PTR [rdi+192]
  00091	48 85 db	 test	 rbx, rbx
  00094	74 65		 je	 SHORT $LN7@Dealloc
  00096	e8 00 00 00 00	 call	 _Py_PXCTX
  0009b	85 c0		 test	 eax, eax
  0009d	75 5c		 jne	 SHORT $LN7@Dealloc
  0009f	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000a3	a8 20		 test	 al, 32			; 00000020H
  000a5	75 4c		 jne	 SHORT $LN30@Dealloc
  000a7	84 c0		 test	 al, al
  000a9	78 48		 js	 SHORT $LN30@Dealloc
  000ab	a8 02		 test	 al, 2
  000ad	75 4c		 jne	 SHORT $LN7@Dealloc
  000af	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000b3	75 46		 jne	 SHORT $LN7@Dealloc
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c3	4c 8b cb	 mov	 r9, rbx
  000c6	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000cc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d9	48 8b cb	 mov	 rcx, rbx
  000dc	85 c0		 test	 eax, eax
  000de	74 07		 je	 SHORT $LN35@Dealloc
  000e0	e8 00 00 00 00	 call	 _Px_Dealloc
  000e5	eb 14		 jmp	 SHORT $LN7@Dealloc
$LN35@Dealloc:
  000e7	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000eb	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000f1	eb 08		 jmp	 SHORT $LN7@Dealloc
$LN30@Dealloc:
  000f3	48 8b cb	 mov	 rcx, rbx
  000f6	e8 00 00 00 00	 call	 Px_DecRef
$LN7@Dealloc:

; 459  :     Py_XDECREF(self->zdict);

  000fb	48 8b 9f d0 00
	00 00		 mov	 rbx, QWORD PTR [rdi+208]
  00102	48 85 db	 test	 rbx, rbx
  00105	0f 84 85 00 00
	00		 je	 $LN3@Dealloc
  0010b	e8 00 00 00 00	 call	 _Py_PXCTX
  00110	85 c0		 test	 eax, eax
  00112	75 7c		 jne	 SHORT $LN3@Dealloc
  00114	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00118	a8 20		 test	 al, 32			; 00000020H
  0011a	75 6c		 jne	 SHORT $LN41@Dealloc
  0011c	84 c0		 test	 al, al
  0011e	78 68		 js	 SHORT $LN41@Dealloc
  00120	a8 02		 test	 al, 2
  00122	75 6c		 jne	 SHORT $LN3@Dealloc
  00124	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00128	75 66		 jne	 SHORT $LN3@Dealloc
  0012a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00131	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00138	4c 8b cb	 mov	 r9, rbx
  0013b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00141	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00149	e8 00 00 00 00	 call	 _PyParallel_Guard
  0014e	48 8b cb	 mov	 rcx, rbx
  00151	85 c0		 test	 eax, eax
  00153	74 17		 je	 SHORT $LN46@Dealloc
  00155	e8 00 00 00 00	 call	 _Px_Dealloc

; 460  :     PyObject_Del(self);

  0015a	48 8b cf	 mov	 rcx, rdi

; 461  : }

  0015d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00162	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00166	5f		 pop	 rdi
  00167	e9 00 00 00 00	 jmp	 PyObject_Free

; 459  :     Py_XDECREF(self->zdict);

$LN46@Dealloc:
  0016c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00170	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 460  :     PyObject_Del(self);

  00176	48 8b cf	 mov	 rcx, rdi

; 461  : }

  00179	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0017e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00182	5f		 pop	 rdi
  00183	e9 00 00 00 00	 jmp	 PyObject_Free

; 459  :     Py_XDECREF(self->zdict);

$LN41@Dealloc:
  00188	48 8b cb	 mov	 rcx, rbx
  0018b	e8 00 00 00 00	 call	 Px_DecRef
$LN3@Dealloc:

; 460  :     PyObject_Del(self);

  00190	48 8b cf	 mov	 rcx, rdi

; 461  : }

  00193	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00198	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0019c	5f		 pop	 rdi
  0019d	e9 00 00 00 00	 jmp	 PyObject_Free
Dealloc	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Comp_dealloc DD imagerel Comp_dealloc
	DD	imagerel Comp_dealloc+40
	DD	imagerel $unwind$Comp_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Comp_dealloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT Comp_dealloc
_TEXT	SEGMENT
self$ = 48
Comp_dealloc PROC					; COMDAT

; 465  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 466  :     if (self->is_initialised)

  00006	83 b9 cc 00 00
	00 00		 cmp	 DWORD PTR [rcx+204], 0
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	74 09		 je	 SHORT $LN1@Comp_deall

; 467  :         deflateEnd(&self->zst);

  00012	48 83 c1 60	 add	 rcx, 96			; 00000060H
  00016	e8 00 00 00 00	 call	 deflateEnd
$LN1@Comp_deall:

; 468  :     Dealloc(self);

  0001b	48 8b cb	 mov	 rcx, rbx

; 469  : }

  0001e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00022	5b		 pop	 rbx
  00023	e9 00 00 00 00	 jmp	 Dealloc
Comp_dealloc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Decomp_dealloc DD imagerel Decomp_dealloc
	DD	imagerel Decomp_dealloc+40
	DD	imagerel $unwind$Decomp_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Decomp_dealloc DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT Decomp_dealloc
_TEXT	SEGMENT
self$ = 48
Decomp_dealloc PROC					; COMDAT

; 473  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 474  :     if (self->is_initialised)

  00006	83 b9 cc 00 00
	00 00		 cmp	 DWORD PTR [rcx+204], 0
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	74 09		 je	 SHORT $LN1@Decomp_dea

; 475  :         inflateEnd(&self->zst);

  00012	48 83 c1 60	 add	 rcx, 96			; 00000060H
  00016	e8 00 00 00 00	 call	 inflateEnd
$LN1@Decomp_dea:

; 476  :     Dealloc(self);

  0001b	48 8b cb	 mov	 rcx, rbx

; 477  : }

  0001e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00022	5b		 pop	 rbx
  00023	e9 00 00 00 00	 jmp	 Dealloc
Decomp_dealloc ENDP
_TEXT	ENDS
PUBLIC	$T22079
PUBLIC	??_C@_0M@HGACCAGH@y?$CK?3compress?$AA@		; `string'
EXTRN	PyThread_release_lock:PROC
EXTRN	PyThread_acquire_lock:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_objcompress DD imagerel PyZlib_objcompress
	DD	imagerel PyZlib_objcompress+122
	DD	imagerel $unwind$PyZlib_objcompress
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyZlib_objcompress DD imagerel PyZlib_objcompress+122
	DD	imagerel PyZlib_objcompress+152
	DD	imagerel $chain$1$PyZlib_objcompress
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyZlib_objcompress DD imagerel PyZlib_objcompress+152
	DD	imagerel PyZlib_objcompress+524
	DD	imagerel $chain$4$PyZlib_objcompress
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyZlib_objcompress DD imagerel PyZlib_objcompress+524
	DD	imagerel PyZlib_objcompress+532
	DD	imagerel $chain$5$PyZlib_objcompress
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyZlib_objcompress DD imagerel PyZlib_objcompress+532
	DD	imagerel PyZlib_objcompress+564
	DD	imagerel $chain$6$PyZlib_objcompress
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyZlib_objcompress DD 021H
	DD	imagerel PyZlib_objcompress
	DD	imagerel PyZlib_objcompress+122
	DD	imagerel $unwind$PyZlib_objcompress
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyZlib_objcompress DD 021H
	DD	imagerel PyZlib_objcompress+122
	DD	imagerel PyZlib_objcompress+152
	DD	imagerel $chain$1$PyZlib_objcompress
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyZlib_objcompress DD 061821H
	DD	01af418H
	DD	023d410H
	DD	0203408H
	DD	imagerel PyZlib_objcompress+122
	DD	imagerel PyZlib_objcompress+152
	DD	imagerel $chain$1$PyZlib_objcompress
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyZlib_objcompress DD 020821H
	DD	01be408H
	DD	imagerel PyZlib_objcompress
	DD	imagerel PyZlib_objcompress+122
	DD	imagerel $unwind$PyZlib_objcompress
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_objcompress DD 074f01H
	DD	021c44fH
	DD	01c0110H
	DD	060037004H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0M@HGACCAGH@y?$CK?3compress?$AA@
CONST	SEGMENT
??_C@_0M@HGACCAGH@y?$CK?3compress?$AA@ DB 'y*:compress', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyZlib_objcompress
_TEXT	SEGMENT
$T22079 = 32
pinput$ = 128
self$ = 256
args$ = 264
RetVal$ = 272
PyZlib_objcompress PROC					; COMDAT

; 489  : {

  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 8d 6c 24 b9	 lea	 rbp, QWORD PTR [rsp-71]
  00009	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  00010	48 8b c2	 mov	 rax, rdx
  00013	48 8b f9	 mov	 rdi, rcx

; 490  :     int err;
; 491  :     unsigned int inplen;
; 492  :     Py_ssize_t length = DEFAULTALLOC;
; 493  :     PyObject *RetVal = NULL;
; 494  :     Py_buffer pinput;
; 495  :     Byte *input;
; 496  :     unsigned long start_total_out;
; 497  : 
; 498  :     if (!PyArg_ParseTuple(args, "y*:compress", &pinput))

  00016	4c 8d 45 e7	 lea	 r8, QWORD PTR pinput$[rbp-153]
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@HGACCAGH@y?$CK?3compress?$AA@
  00021	48 8b c8	 mov	 rcx, rax
  00024	be 00 40 00 00	 mov	 esi, 16384		; 00004000H
  00029	48 c7 45 77 00
	00 00 00	 mov	 QWORD PTR RetVal$[rbp-153], 0
  00031	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00036	85 c0		 test	 eax, eax
  00038	75 0d		 jne	 SHORT $LN8@PyZlib_obj

; 499  :         return NULL;

  0003a	33 c0		 xor	 eax, eax

; 561  : }

  0003c	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  00043	5f		 pop	 rdi
  00044	5e		 pop	 rsi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
$LN8@PyZlib_obj:
  00047	4c 89 a4 24 08
	01 00 00	 mov	 QWORD PTR [rsp+264], r12

; 500  :     if (pinput.len > UINT_MAX) {

  0004f	4c 8b 65 f7	 mov	 r12, QWORD PTR pinput$[rbp-137]
  00053	b8 ff ff ff ff	 mov	 eax, -1
  00058	4c 3b e0	 cmp	 r12, rax
  0005b	7e 18		 jle	 SHORT $LN7@PyZlib_obj

; 501  :         PyErr_SetString(PyExc_OverflowError,
; 502  :                         "Size does not fit in an unsigned int");

  0005d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@HNAFKOOJ@Size?5does?5not?5fit?5in?5an?5unsigned@
  0006b	e8 00 00 00 00	 call	 PyErr_SetString

; 503  :         goto error_outer;

  00070	e9 9f 01 00 00	 jmp	 $error_outer$21103
$LN7@PyZlib_obj:

; 504  :     }
; 505  :     input = pinput.buf;
; 506  :     inplen = pinput.len;
; 507  : 
; 508  :     if (!(RetVal = PyBytes_FromStringAndSize(NULL, length)))

  00075	48 8b d6	 mov	 rdx, rsi
  00078	33 c9		 xor	 ecx, ecx
  0007a	4c 89 b4 24 d8
	00 00 00	 mov	 QWORD PTR [rsp+216], r14
  00082	4c 8b 75 e7	 mov	 r14, QWORD PTR pinput$[rbp-153]
  00086	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0008b	48 89 45 77	 mov	 QWORD PTR RetVal$[rbp-153], rax
  0008f	48 85 c0	 test	 rax, rax
  00092	0f 84 74 01 00
	00		 je	 $LN15@PyZlib_obj

; 509  :         goto error_outer;
; 510  : 
; 511  :     ENTER_ZLIB(self);

  00098	48 89 9c 24 00
	01 00 00	 mov	 QWORD PTR [rsp+256], rbx
  000a0	4c 89 ac 24 18
	01 00 00	 mov	 QWORD PTR [rsp+280], r13
  000a8	4c 89 bc 24 d0
	00 00 00	 mov	 QWORD PTR [rsp+208], r15
  000b0	e8 00 00 00 00	 call	 PyEval_SaveThread
  000b5	48 8b 8f d8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+216]
  000bc	ba 01 00 00 00	 mov	 edx, 1
  000c1	48 8b d8	 mov	 rbx, rax
  000c4	e8 00 00 00 00	 call	 PyThread_acquire_lock
  000c9	48 8b cb	 mov	 rcx, rbx
  000cc	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 512  : 
; 513  :     start_total_out = self->zst.total_out;
; 514  :     self->zst.avail_in = inplen;
; 515  :     self->zst.next_in = input;
; 516  :     self->zst.avail_out = length;
; 517  :     self->zst.next_out = (unsigned char *)PyBytes_AS_STRING(RetVal);

  000d1	48 8b 45 77	 mov	 rax, QWORD PTR RetVal$[rbp-153]
  000d5	44 8b 7f 7c	 mov	 r15d, DWORD PTR [rdi+124]
  000d9	48 83 c0 78	 add	 rax, 120		; 00000078H
  000dd	44 89 67 68	 mov	 DWORD PTR [rdi+104], r12d
  000e1	4c 89 77 60	 mov	 QWORD PTR [rdi+96], r14
  000e5	48 89 47 70	 mov	 QWORD PTR [rdi+112], rax
  000e9	89 77 78	 mov	 DWORD PTR [rdi+120], esi

; 518  : 
; 519  :     Py_BEGIN_ALLOW_THREADS

  000ec	e8 00 00 00 00	 call	 PyEval_SaveThread

; 520  :     err = deflate(&(self->zst), Z_NO_FLUSH);

  000f1	48 8d 4f 60	 lea	 rcx, QWORD PTR [rdi+96]
  000f5	33 d2		 xor	 edx, edx
  000f7	48 8b d8	 mov	 rbx, rax
  000fa	e8 00 00 00 00	 call	 deflate

; 521  :     Py_END_ALLOW_THREADS

  000ff	48 8b cb	 mov	 rcx, rbx
  00102	44 8b e0	 mov	 r12d, eax
  00105	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 522  : 
; 523  :     /* while Z_OK and the output buffer is full, there might be more output,
; 524  :        so extend the output buffer and try again */
; 525  :     while (err == Z_OK && self->zst.avail_out == 0) {

  0010a	45 85 e4	 test	 r12d, r12d
  0010d	75 5c		 jne	 SHORT $LN14@PyZlib_obj
  0010f	90		 npad	 1
$LL5@PyZlib_obj:
  00110	83 7f 78 00	 cmp	 DWORD PTR [rdi+120], 0
  00114	75 50		 jne	 SHORT $LN4@PyZlib_obj

; 526  :         if (_PyBytes_Resize(&RetVal, length << 1) < 0) {

  00116	48 8d 1c 36	 lea	 rbx, QWORD PTR [rsi+rsi]
  0011a	48 8d 4d 77	 lea	 rcx, QWORD PTR RetVal$[rbp-153]
  0011e	48 8b d3	 mov	 rdx, rbx
  00121	e8 00 00 00 00	 call	 _PyBytes_Resize
  00126	85 c0		 test	 eax, eax
  00128	0f 88 a9 00 00
	00		 js	 $LN12@PyZlib_obj

; 527  :             Py_DECREF(RetVal);
; 528  :             RetVal = NULL;
; 529  :             goto error;
; 530  :         }
; 531  :         self->zst.next_out =
; 532  :             (unsigned char *)PyBytes_AS_STRING(RetVal) + length;

  0012e	48 8b 45 77	 mov	 rax, QWORD PTR RetVal$[rbp-153]

; 533  :         self->zst.avail_out = length;

  00132	89 77 78	 mov	 DWORD PTR [rdi+120], esi
  00135	48 8d 4c 30 78	 lea	 rcx, QWORD PTR [rax+rsi+120]

; 534  :         length = length << 1;

  0013a	48 8b f3	 mov	 rsi, rbx
  0013d	48 89 4f 70	 mov	 QWORD PTR [rdi+112], rcx

; 535  : 
; 536  :         Py_BEGIN_ALLOW_THREADS

  00141	e8 00 00 00 00	 call	 PyEval_SaveThread

; 537  :         err = deflate(&(self->zst), Z_NO_FLUSH);

  00146	48 8d 4f 60	 lea	 rcx, QWORD PTR [rdi+96]
  0014a	33 d2		 xor	 edx, edx
  0014c	48 8b d8	 mov	 rbx, rax
  0014f	e8 00 00 00 00	 call	 deflate

; 538  :         Py_END_ALLOW_THREADS

  00154	48 8b cb	 mov	 rcx, rbx
  00157	44 8b e0	 mov	 r12d, eax
  0015a	e8 00 00 00 00	 call	 PyEval_RestoreThread
  0015f	45 85 e4	 test	 r12d, r12d
  00162	74 ac		 je	 SHORT $LL5@PyZlib_obj

; 526  :         if (_PyBytes_Resize(&RetVal, length << 1) < 0) {

  00164	eb 05		 jmp	 SHORT $LN14@PyZlib_obj
$LN4@PyZlib_obj:

; 539  :     }
; 540  :     /* We will only get Z_BUF_ERROR if the output buffer was full but
; 541  :        there wasn't more output when we tried again, so it is not an error
; 542  :        condition.
; 543  :     */
; 544  : 
; 545  :     if (err != Z_OK && err != Z_BUF_ERROR) {

  00166	45 85 e4	 test	 r12d, r12d
  00169	74 59		 je	 SHORT $LN2@PyZlib_obj
$LN14@PyZlib_obj:
  0016b	41 83 fc fb	 cmp	 r12d, -5
  0016f	74 53		 je	 SHORT $LN2@PyZlib_obj

; 546  :         zlib_error(self->zst, err, "while compressing data");

  00171	0f 10 47 60	 movups	 xmm0, XMMWORD PTR [rdi+96]
  00175	0f 10 4f 70	 movups	 xmm1, XMMWORD PTR [rdi+112]
  00179	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@EEBMFEPN@while?5compressing?5data?$AA@
  00180	48 8d 4d 87	 lea	 rcx, QWORD PTR $T22079[rbp-153]
  00184	41 8b d4	 mov	 edx, r12d
  00187	0f 29 45 87	 movaps	 XMMWORD PTR $T22079[rbp-153], xmm0
  0018b	0f 29 4d 97	 movaps	 XMMWORD PTR $T22079[rbp-137], xmm1
  0018f	0f 10 87 80 00
	00 00		 movups	 xmm0, XMMWORD PTR [rdi+128]
  00196	0f 10 8f 90 00
	00 00		 movups	 xmm1, XMMWORD PTR [rdi+144]
  0019d	0f 29 45 a7	 movaps	 XMMWORD PTR $T22079[rbp-121], xmm0
  001a1	0f 29 4d b7	 movaps	 XMMWORD PTR $T22079[rbp-105], xmm1
  001a5	0f 10 87 a0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rdi+160]
  001ac	f2 0f 10 8f b0
	00 00 00	 movsdx	 xmm1, QWORD PTR [rdi+176]
  001b4	0f 29 45 c7	 movaps	 XMMWORD PTR $T22079[rbp-89], xmm0
  001b8	f2 0f 11 4d d7	 movsdx	 QWORD PTR $T22079[rbp-73], xmm1
  001bd	e8 00 00 00 00	 call	 zlib_error

; 547  :         Py_DECREF(RetVal);
; 548  :         RetVal = NULL;
; 549  :         goto error;

  001c2	eb 13		 jmp	 SHORT $LN12@PyZlib_obj
$LN2@PyZlib_obj:

; 550  :     }
; 551  :     if (_PyBytes_Resize(&RetVal, self->zst.total_out - start_total_out) < 0) {

  001c4	8b 57 7c	 mov	 edx, DWORD PTR [rdi+124]
  001c7	48 8d 4d 77	 lea	 rcx, QWORD PTR RetVal$[rbp-153]
  001cb	41 2b d7	 sub	 edx, r15d
  001ce	e8 00 00 00 00	 call	 _PyBytes_Resize
  001d3	85 c0		 test	 eax, eax
  001d5	79 11		 jns	 SHORT $error$21117
$LN12@PyZlib_obj:

; 552  :         Py_DECREF(RetVal);

  001d7	48 8b 4d 77	 mov	 rcx, QWORD PTR RetVal$[rbp-153]
  001db	e8 00 00 00 00	 call	 _Py_DecRef

; 553  :         RetVal = NULL;

  001e0	48 c7 45 77 00
	00 00 00	 mov	 QWORD PTR RetVal$[rbp-153], 0
$error$21117:

; 554  :     }
; 555  : 
; 556  :  error:
; 557  :     LEAVE_ZLIB(self);

  001e8	48 8b 8f d8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+216]
  001ef	e8 00 00 00 00	 call	 PyThread_release_lock
  001f4	4c 8b bc 24 d0
	00 00 00	 mov	 r15, QWORD PTR [rsp+208]
  001fc	4c 8b ac 24 18
	01 00 00	 mov	 r13, QWORD PTR [rsp+280]
  00204	48 8b 9c 24 00
	01 00 00	 mov	 rbx, QWORD PTR [rsp+256]
$LN15@PyZlib_obj:
  0020c	4c 8b b4 24 d8
	00 00 00	 mov	 r14, QWORD PTR [rsp+216]
$error_outer$21103:

; 558  :  error_outer:
; 559  :     PyBuffer_Release(&pinput);

  00214	48 8d 4d e7	 lea	 rcx, QWORD PTR pinput$[rbp-153]
  00218	e8 00 00 00 00	 call	 PyBuffer_Release

; 560  :     return RetVal;

  0021d	48 8b 45 77	 mov	 rax, QWORD PTR RetVal$[rbp-153]
  00221	4c 8b a4 24 08
	01 00 00	 mov	 r12, QWORD PTR [rsp+264]

; 561  : }

  00229	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  00230	5f		 pop	 rdi
  00231	5e		 pop	 rsi
  00232	5d		 pop	 rbp
  00233	c3		 ret	 0
PyZlib_objcompress ENDP
_TEXT	ENDS
EXTRN	PyErr_NoMemory:PROC
EXTRN	memcpy:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$save_unconsumed_input DD imagerel save_unconsumed_input
	DD	imagerel save_unconsumed_input+528
	DD	imagerel $unwind$save_unconsumed_input
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$save_unconsumed_input DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\zlibmodule.c
xdata	ENDS
;	COMDAT save_unconsumed_input
_TEXT	SEGMENT
self$ = 64
err$ = 72
save_unconsumed_input PROC				; COMDAT

; 567  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b f9	 mov	 rdi, rcx

; 568  :     if (err == Z_STREAM_END) {

  00012	83 fa 01	 cmp	 edx, 1
  00015	0f 85 3f 01 00
	00		 jne	 $LN22@save_uncon

; 569  :         /* The end of the compressed data has been reached. Store the leftover
; 570  :            input data in self->unused_data. */
; 571  :         if (self->zst.avail_in > 0) {

  0001b	8b 49 68	 mov	 ecx, DWORD PTR [rcx+104]
  0001e	85 c9		 test	 ecx, ecx
  00020	0f 84 34 01 00
	00		 je	 $LN22@save_uncon

; 572  :             Py_ssize_t old_size = PyBytes_GET_SIZE(self->unused_data);

  00026	48 8b 87 b8 00
	00 00		 mov	 rax, QWORD PTR [rdi+184]

; 573  :             Py_ssize_t new_size;
; 574  :             PyObject *new_data;
; 575  :             if (self->zst.avail_in > PY_SSIZE_T_MAX - old_size) {

  0002d	8b d1		 mov	 edx, ecx
  0002f	48 8b 58 60	 mov	 rbx, QWORD PTR [rax+96]
  00033	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0003d	48 2b c3	 sub	 rax, rbx
  00040	48 3b c8	 cmp	 rcx, rax
  00043	7e 18		 jle	 SHORT $LN21@save_uncon

; 576  :                 PyErr_NoMemory();

  00045	e8 00 00 00 00	 call	 PyErr_NoMemory
$LN52@save_uncon:

; 577  :                 return -1;

  0004a	83 c8 ff	 or	 eax, -1

; 602  :     }
; 603  :     return 0;
; 604  : }

  0004d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00052	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00057	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005b	5f		 pop	 rdi
  0005c	c3		 ret	 0
$LN21@save_uncon:

; 578  :             }
; 579  :             new_size = old_size + self->zst.avail_in;

  0005d	48 03 d3	 add	 rdx, rbx

; 580  :             new_data = PyBytes_FromStringAndSize(NULL, new_size);

  00060	33 c9		 xor	 ecx, ecx
  00062	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00067	48 8b f0	 mov	 rsi, rax

; 581  :             if (new_data == NULL)

  0006a	48 85 c0	 test	 rax, rax

; 582  :                 return -1;

  0006d	74 db		 je	 SHORT $LN52@save_uncon

; 583  :             Py_MEMCPY(PyBytes_AS_STRING(new_data),
; 584  :                       PyBytes_AS_STRING(self->unused_data), old_size);

  0006f	48 8b 97 b8 00
	00 00		 mov	 rdx, QWORD PTR [rdi+184]
  00076	48 8d 48 78	 lea	 rcx, QWORD PTR [rax+120]
  0007a	48 83 c2 78	 add	 rdx, 120		; 00000078H
  0007e	48 83 fb 10	 cmp	 rbx, 16
  00082	72 0a		 jb	 SHORT $LN16@save_uncon
  00084	4c 8b c3	 mov	 r8, rbx
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	eb 21		 jmp	 SHORT $LN18@save_uncon
$LN16@save_uncon:
  0008e	48 85 db	 test	 rbx, rbx
  00091	74 1c		 je	 SHORT $LN18@save_uncon
  00093	48 2b d1	 sub	 rdx, rcx
  00096	4c 8b c3	 mov	 r8, rbx
  00099	0f 1f 80 00 00
	00 00		 npad	 7
$LL14@save_uncon:
  000a0	0f b6 04 0a	 movzx	 eax, BYTE PTR [rdx+rcx]
  000a4	48 ff c1	 inc	 rcx
  000a7	49 ff c8	 dec	 r8
  000aa	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  000ad	75 f1		 jne	 SHORT $LL14@save_uncon
$LN18@save_uncon:

; 585  :             Py_MEMCPY(PyBytes_AS_STRING(new_data) + old_size,
; 586  :                       self->zst.next_in, self->zst.avail_in);

  000af	44 8b 47 68	 mov	 r8d, DWORD PTR [rdi+104]
  000b3	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  000b7	48 8d 4c 1e 78	 lea	 rcx, QWORD PTR [rsi+rbx+120]
  000bc	49 83 f8 10	 cmp	 r8, 16
  000c0	72 07		 jb	 SHORT $LN8@save_uncon
  000c2	e8 00 00 00 00	 call	 memcpy
  000c7	eb 17		 jmp	 SHORT $LN10@save_uncon
$LN8@save_uncon:
  000c9	4d 85 c0	 test	 r8, r8
  000cc	74 12		 je	 SHORT $LN10@save_uncon
  000ce	48 2b d1	 sub	 rdx, rcx
$LL6@save_uncon:
  000d1	0f b6 04 0a	 movzx	 eax, BYTE PTR [rdx+rcx]
  000d5	48 ff c1	 inc	 rcx
  000d8	49 ff c8	 dec	 r8
  000db	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  000de	75 f1		 jne	 SHORT $LL6@save_uncon
$LN10@save_uncon:

; 587  :             Py_DECREF(self->unused_data);

  000e0	48 8b 9f b8 00
	00 00		 mov	 rbx, QWORD PTR [rdi+184]
  000e7	e8 00 00 00 00	 call	 _Py_PXCTX
  000ec	85 c0		 test	 eax, eax
  000ee	75 5c		 jne	 SHORT $LN36@save_uncon
  000f0	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000f4	a8 20		 test	 al, 32			; 00000020H
  000f6	75 4c		 jne	 SHORT $LN30@save_uncon
  000f8	84 c0		 test	 al, al
  000fa	78 48		 js	 SHORT $LN30@save_uncon
  000fc	a8 02		 test	 al, 2
  000fe	75 4c		 jne	 SHORT $LN36@save_uncon
  00100	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00104	75 46		 jne	 SHORT $LN36@save_uncon
  00106	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0010d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00114	4c 8b cb	 mov	 r9, rbx
  00117	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0011d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00125	e8 00 00 00 00	 call	 _PyParallel_Guard
  0012a	48 8b cb	 mov	 rcx, rbx
  0012d	85 c0		 test	 eax, eax
  0012f	74 07		 je	 SHORT $LN35@save_uncon
  00131	e8 00 00 00 00	 call	 _Px_Dealloc
  00136	eb 14		 jmp	 SHORT $LN36@save_uncon
$LN35@save_uncon:
  00138	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0013c	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00142	eb 08		 jmp	 SHORT $LN36@save_uncon
$LN30@save_uncon:
  00144	48 8b cb	 mov	 rcx, rbx
  00147	e8 00 00 00 00	 call	 Px_DecRef
$LN36@save_uncon:

; 588  :             self->unused_data = new_data;

  0014c	48 89 b7 b8 00
	00 00		 mov	 QWORD PTR [rdi+184], rsi

; 589  :             self->zst.avail_in = 0;

  00153	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [rdi+104], 0
$LN22@save_uncon:

; 590  :         }
; 591  :     }
; 592  :     if (self->zst.avail_in > 0 || PyBytes_GET_SIZE(self->unconsumed_tail)) {

  0015a	8b 4f 68	 mov	 ecx, DWORD PTR [rdi+104]
  0015d	85 c9		 test	 ecx, ecx
  0015f	75 12		 jne	 SHORT $LN2@save_uncon
  00161	48 8b 87 c0 00
	00 00		 mov	 rax, QWORD PTR [rdi+192]
  00168	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0016d	0f 84 8b 00 00
	00		 je	 $LN3@save_uncon
$LN2@save_uncon:

; 593  :         /* This code handles two distinct cases:
; 594  :            1. Output limit was reached. Save leftover input in unconsumed_tail.
; 595  :            2. All input data was consumed. Clear unconsumed_tail. */
; 596  :         PyObject *new_data = PyBytes_FromStringAndSize(
; 597  :                 (char *)self->zst.next_in, self->zst.avail_in);

  00173	48 8b d1	 mov	 rdx, rcx
  00176	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  0017a	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0017f	48 8b f0	 mov	 rsi, rax

; 598  :         if (new_data == NULL)

  00182	48 85 c0	 test	 rax, rax

; 599  :             return -1;

  00185	0f 84 bf fe ff
	ff		 je	 $LN52@save_uncon

; 600  :         Py_DECREF(self->unconsumed_tail);

  0018b	48 8b 9f c0 00
	00 00		 mov	 rbx, QWORD PTR [rdi+192]
  00192	e8 00 00 00 00	 call	 _Py_PXCTX
  00197	85 c0		 test	 eax, eax
  00199	75 5c		 jne	 SHORT $LN47@save_uncon
  0019b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0019f	a8 20		 test	 al, 32			; 00000020H
  001a1	75 4c		 jne	 SHORT $LN41@save_uncon
  001a3	84 c0		 test	 al, al
  001a5	78 48		 js	 SHORT $LN41@save_uncon
  001a7	a8 02		 test	 al, 2
  001a9	75 4c		 jne	 SHORT $LN47@save_uncon
  001ab	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001af	75 46		 jne	 SHORT $LN47@save_uncon
  001b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001bf	4c 8b cb	 mov	 r9, rbx
  001c2	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001c8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001d0	e8 00 00 00 00	 call	 _PyParallel_Guard
  001d5	48 8b cb	 mov	 rcx, rbx
  001d8	85 c0		 test	 eax, eax
  001da	74 07		 je	 SHORT $LN46@save_uncon
  001dc	e8 00 00 00 00	 call	 _Px_Dealloc
  001e1	eb 14		 jmp	 SHORT $LN47@save_uncon
$LN46@save_uncon:
  001e3	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001e7	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001ed	eb 08		 jmp	 SHORT $LN47@save_uncon
$LN41@save_uncon:
  001ef	48 8b cb	 mov	 rcx, rbx
  001f2	e8 00 00 00 00	 call	 Px_DecRef
$LN47@save_uncon:

; 601  :         self->unconsumed_tail = new_data;

  001f7	48 89 b7 c0 00
	00 00		 mov	 QWORD PTR [rdi+192], rsi
$LN3@save_uncon:

; 602  :     }
; 603  :     return 0;
; 604  : }

  001fe	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00203	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00208	33 c0		 xor	 eax, eax
  0020a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0020e	5f		 pop	 rdi
  0020f	c3		 ret	 0
save_unconsumed_input ENDP
_TEXT	ENDS
PUBLIC	$T22179
PUBLIC	$T22178
PUBLIC	??_C@_0CF@LLOIIPJP@max_length?5must?5be?5greater?5than?5@ ; `string'
PUBLIC	??_C@_0BA@MOJLCLOA@y?$CK?$HMi?3decompress?$AA@	; `string'
EXTRN	inflateSetDictionary:PROC
EXTRN	PyObject_GetBuffer:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_objdecompress DD imagerel PyZlib_objdecompress
	DD	imagerel PyZlib_objdecompress+76
	DD	imagerel $unwind$PyZlib_objdecompress
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyZlib_objdecompress DD imagerel PyZlib_objdecompress+76
	DD	imagerel PyZlib_objdecompress+126
	DD	imagerel $chain$0$PyZlib_objdecompress
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyZlib_objdecompress DD imagerel PyZlib_objdecompress+126
	DD	imagerel PyZlib_objdecompress+198
	DD	imagerel $chain$1$PyZlib_objdecompress
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyZlib_objdecompress DD imagerel PyZlib_objdecompress+198
	DD	imagerel PyZlib_objdecompress+738
	DD	imagerel $chain$4$PyZlib_objdecompress
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyZlib_objdecompress DD imagerel PyZlib_objdecompress+738
	DD	imagerel PyZlib_objdecompress+746
	DD	imagerel $chain$5$PyZlib_objdecompress
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyZlib_objdecompress DD imagerel PyZlib_objdecompress+746
	DD	imagerel PyZlib_objdecompress+778
	DD	imagerel $chain$6$PyZlib_objdecompress
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$PyZlib_objdecompress DD imagerel PyZlib_objdecompress+778
	DD	imagerel PyZlib_objdecompress+882
	DD	imagerel $chain$8$PyZlib_objdecompress
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$PyZlib_objdecompress DD 0a0021H
	DD	024f400H
	DD	025e400H
	DD	026d400H
	DD	027c400H
	DD	02c3400H
	DD	imagerel PyZlib_objdecompress
	DD	imagerel PyZlib_objdecompress+76
	DD	imagerel $unwind$PyZlib_objdecompress
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyZlib_objdecompress DD 021H
	DD	imagerel PyZlib_objdecompress+76
	DD	imagerel PyZlib_objdecompress+126
	DD	imagerel $chain$0$PyZlib_objdecompress
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyZlib_objdecompress DD 021H
	DD	imagerel PyZlib_objdecompress+126
	DD	imagerel PyZlib_objdecompress+198
	DD	imagerel $chain$1$PyZlib_objdecompress
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyZlib_objdecompress DD 061821H
	DD	024f418H
	DD	026d410H
	DD	02c3408H
	DD	imagerel PyZlib_objdecompress+126
	DD	imagerel PyZlib_objdecompress+198
	DD	imagerel $chain$1$PyZlib_objdecompress
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyZlib_objdecompress DD 020821H
	DD	025e408H
	DD	imagerel PyZlib_objdecompress+76
	DD	imagerel PyZlib_objdecompress+126
	DD	imagerel $chain$0$PyZlib_objdecompress
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyZlib_objdecompress DD 020821H
	DD	027c408H
	DD	imagerel PyZlib_objdecompress
	DD	imagerel PyZlib_objdecompress+76
	DD	imagerel $unwind$PyZlib_objdecompress
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_objdecompress DD 051001H
	DD	0280110H
	DD	060037004H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0CF@LLOIIPJP@max_length?5must?5be?5greater?5than?5@
CONST	SEGMENT
??_C@_0CF@LLOIIPJP@max_length?5must?5be?5greater?5than?5@ DB 'max_length '
	DB	'must be greater than zero', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MOJLCLOA@y?$CK?$HMi?3decompress?$AA@
CONST	SEGMENT
??_C@_0BA@MOJLCLOA@y?$CK?$HMi?3decompress?$AA@ DB 'y*|i:decompress', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyZlib_objdecompress
_TEXT	SEGMENT
$T22179 = 32
$T22178 = 32
pinput$ = 128
zdict_buf$21225 = 208
self$ = 352
args$ = 360
max_length$ = 368
RetVal$ = 376
PyZlib_objdecompress PROC				; COMDAT

; 619  : {

  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 8d 6c 24 c0	 lea	 rbp, QWORD PTR [rsp-64]
  00009	48 81 ec 40 01
	00 00		 sub	 rsp, 320		; 00000140H
  00010	48 8b f1	 mov	 rsi, rcx

; 620  :     int err, max_length = 0;

  00013	33 c9		 xor	 ecx, ecx
  00015	48 8b c2	 mov	 rax, rdx
  00018	89 4d 70	 mov	 DWORD PTR max_length$[rbp-256], ecx

; 621  :     unsigned int inplen;
; 622  :     Py_ssize_t old_length, length = DEFAULTALLOC;
; 623  :     PyObject *RetVal = NULL;

  0001b	48 89 4d 78	 mov	 QWORD PTR RetVal$[rbp-256], rcx

; 624  :     Py_buffer pinput;
; 625  :     Byte *input;
; 626  :     unsigned long start_total_out;
; 627  : 
; 628  :     if (!PyArg_ParseTuple(args, "y*|i:decompress", &pinput,
; 629  :                           &max_length))

  0001f	4c 8d 4d 70	 lea	 r9, QWORD PTR max_length$[rbp-256]
  00023	4c 8d 45 80	 lea	 r8, QWORD PTR pinput$[rbp-256]
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@MOJLCLOA@y?$CK?$HMi?3decompress?$AA@
  0002e	48 8b c8	 mov	 rcx, rax
  00031	bf 00 40 00 00	 mov	 edi, 16384		; 00004000H
  00036	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0003b	85 c0		 test	 eax, eax
  0003d	75 0d		 jne	 SHORT $LN18@PyZlib_obj@2

; 630  :         return NULL;

  0003f	33 c0		 xor	 eax, eax

; 744  : }

  00041	48 81 c4 40 01
	00 00		 add	 rsp, 320		; 00000140H
  00048	5f		 pop	 rdi
  00049	5e		 pop	 rsi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
$LN18@PyZlib_obj@2:
  0004c	4c 89 a4 24 38
	01 00 00	 mov	 QWORD PTR [rsp+312], r12

; 631  :     if (pinput.len > UINT_MAX) {

  00054	4c 8b 65 90	 mov	 r12, QWORD PTR pinput$[rbp-240]
  00058	b8 ff ff ff ff	 mov	 eax, -1
  0005d	4c 3b e0	 cmp	 r12, rax
  00060	7e 18		 jle	 SHORT $LN17@PyZlib_obj@2

; 632  :         PyErr_SetString(PyExc_OverflowError,
; 633  :                         "Size does not fit in an unsigned int");

  00062	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@HNAFKOOJ@Size?5does?5not?5fit?5in?5an?5unsigned@
  00070	e8 00 00 00 00	 call	 PyErr_SetString

; 634  :         goto error_outer;

  00075	e9 70 02 00 00	 jmp	 $error_outer$21212
$LN17@PyZlib_obj@2:

; 635  :     }
; 636  :     input = pinput.buf;
; 637  :     inplen = pinput.len;
; 638  :     if (max_length < 0) {

  0007a	48 63 45 70	 movsxd	 rax, DWORD PTR max_length$[rbp-256]
  0007e	4c 89 b4 24 28
	01 00 00	 mov	 QWORD PTR [rsp+296], r14
  00086	4c 8b 75 80	 mov	 r14, QWORD PTR pinput$[rbp-256]
  0008a	85 c0		 test	 eax, eax
  0008c	79 18		 jns	 SHORT $LN26@PyZlib_obj@2

; 639  :         PyErr_SetString(PyExc_ValueError,
; 640  :                         "max_length must be greater than zero");

  0008e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@LLOIIPJP@max_length?5must?5be?5greater?5than?5@
  0009c	e8 00 00 00 00	 call	 PyErr_SetString

; 641  :         goto error_outer;

  000a1	e9 3c 02 00 00	 jmp	 $LN25@PyZlib_obj@2
$LN26@PyZlib_obj@2:

; 642  :     }
; 643  : 
; 644  :     /* limit amount of data allocated to max_length */
; 645  :     if (max_length && length > max_length)

  000a6	74 07		 je	 SHORT $LN15@PyZlib_obj@2
  000a8	48 3b c7	 cmp	 rax, rdi
  000ab	48 0f 4c f8	 cmovl	 rdi, rax
$LN15@PyZlib_obj@2:

; 646  :         length = max_length;
; 647  :     if (!(RetVal = PyBytes_FromStringAndSize(NULL, length)))

  000af	48 8b d7	 mov	 rdx, rdi
  000b2	33 c9		 xor	 ecx, ecx
  000b4	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000b9	48 89 45 78	 mov	 QWORD PTR RetVal$[rbp-256], rax
  000bd	48 85 c0	 test	 rax, rax
  000c0	0f 84 1c 02 00
	00		 je	 $LN25@PyZlib_obj@2

; 648  :         goto error_outer;
; 649  : 
; 650  :     ENTER_ZLIB(self);

  000c6	48 89 9c 24 60
	01 00 00	 mov	 QWORD PTR [rsp+352], rbx
  000ce	4c 89 ac 24 30
	01 00 00	 mov	 QWORD PTR [rsp+304], r13
  000d6	4c 89 bc 24 20
	01 00 00	 mov	 QWORD PTR [rsp+288], r15
  000de	e8 00 00 00 00	 call	 PyEval_SaveThread
  000e3	48 8b 8e d8 00
	00 00		 mov	 rcx, QWORD PTR [rsi+216]
  000ea	ba 01 00 00 00	 mov	 edx, 1
  000ef	48 8b d8	 mov	 rbx, rax
  000f2	e8 00 00 00 00	 call	 PyThread_acquire_lock
  000f7	48 8b cb	 mov	 rcx, rbx
  000fa	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 651  : 
; 652  :     start_total_out = self->zst.total_out;
; 653  :     self->zst.avail_in = inplen;
; 654  :     self->zst.next_in = input;
; 655  :     self->zst.avail_out = length;
; 656  :     self->zst.next_out = (unsigned char *)PyBytes_AS_STRING(RetVal);

  000ff	48 8b 45 78	 mov	 rax, QWORD PTR RetVal$[rbp-256]
  00103	44 8b 7e 7c	 mov	 r15d, DWORD PTR [rsi+124]
  00107	48 83 c0 78	 add	 rax, 120		; 00000078H
  0010b	44 89 66 68	 mov	 DWORD PTR [rsi+104], r12d
  0010f	4c 89 76 60	 mov	 QWORD PTR [rsi+96], r14
  00113	48 89 46 70	 mov	 QWORD PTR [rsi+112], rax
  00117	89 7e 78	 mov	 DWORD PTR [rsi+120], edi

; 657  : 
; 658  :     Py_BEGIN_ALLOW_THREADS

  0011a	e8 00 00 00 00	 call	 PyEval_SaveThread

; 659  :     err = inflate(&(self->zst), Z_SYNC_FLUSH);

  0011f	48 8d 4e 60	 lea	 rcx, QWORD PTR [rsi+96]
  00123	ba 02 00 00 00	 mov	 edx, 2
  00128	48 8b d8	 mov	 rbx, rax
  0012b	e8 00 00 00 00	 call	 inflate

; 660  :     Py_END_ALLOW_THREADS

  00130	48 8b cb	 mov	 rcx, rbx
  00133	44 8b e0	 mov	 r12d, eax
  00136	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 661  : 
; 662  :     if (err == Z_NEED_DICT && self->zdict != NULL) {

  0013b	41 83 fc 02	 cmp	 r12d, 2
  0013f	0f 85 c2 00 00
	00		 jne	 $LN21@PyZlib_obj@2
  00145	48 8b 8e d0 00
	00 00		 mov	 rcx, QWORD PTR [rsi+208]
  0014c	48 85 c9	 test	 rcx, rcx
  0014f	0f 84 29 01 00
	00		 je	 $LN9@PyZlib_obj@2

; 663  :         Py_buffer zdict_buf;
; 664  :         if (PyObject_GetBuffer(self->zdict, &zdict_buf, PyBUF_SIMPLE) == -1) {

  00155	48 8d 55 d0	 lea	 rdx, QWORD PTR zdict_buf$21225[rbp-256]
  00159	45 33 c0	 xor	 r8d, r8d
  0015c	e8 00 00 00 00	 call	 PyObject_GetBuffer
  00161	83 f8 ff	 cmp	 eax, -1

; 665  :             Py_DECREF(RetVal);
; 666  :             RetVal = NULL;
; 667  :             goto error;

  00164	0f 84 43 01 00
	00		 je	 $LN27@PyZlib_obj@2

; 668  :         }
; 669  :         err = inflateSetDictionary(&(self->zst), zdict_buf.buf, zdict_buf.len);

  0016a	44 8b 45 e0	 mov	 r8d, DWORD PTR zdict_buf$21225[rbp-240]
  0016e	48 8b 55 d0	 mov	 rdx, QWORD PTR zdict_buf$21225[rbp-256]
  00172	48 8d 4e 60	 lea	 rcx, QWORD PTR [rsi+96]
  00176	e8 00 00 00 00	 call	 inflateSetDictionary

; 670  :         PyBuffer_Release(&zdict_buf);

  0017b	48 8d 4d d0	 lea	 rcx, QWORD PTR zdict_buf$21225[rbp-256]
  0017f	8b d8		 mov	 ebx, eax
  00181	e8 00 00 00 00	 call	 PyBuffer_Release

; 671  :         if (err != Z_OK) {

  00186	85 db		 test	 ebx, ebx
  00188	74 5c		 je	 SHORT $LN11@PyZlib_obj@2

; 672  :             zlib_error(self->zst, err, "while decompressing data");

  0018a	0f 10 46 60	 movups	 xmm0, XMMWORD PTR [rsi+96]
  0018e	0f 10 4e 70	 movups	 xmm1, XMMWORD PTR [rsi+112]
  00192	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BJ@KAMAGNFL@while?5decompressing?5data?$AA@
  00199	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T22178[rsp]
  0019e	8b d3		 mov	 edx, ebx
  001a0	0f 29 44 24 20	 movaps	 XMMWORD PTR $T22178[rsp], xmm0
  001a5	0f 29 4c 24 30	 movaps	 XMMWORD PTR $T22178[rsp+16], xmm1
  001aa	0f 10 86 80 00
	00 00		 movups	 xmm0, XMMWORD PTR [rsi+128]
  001b1	0f 10 8e 90 00
	00 00		 movups	 xmm1, XMMWORD PTR [rsi+144]
  001b8	0f 29 44 24 40	 movaps	 XMMWORD PTR $T22178[rsp+32], xmm0
  001bd	0f 29 4c 24 50	 movaps	 XMMWORD PTR $T22178[rsp+48], xmm1
  001c2	0f 10 86 a0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rsi+160]
  001c9	f2 0f 10 8e b0
	00 00 00	 movsdx	 xmm1, QWORD PTR [rsi+176]
  001d1	0f 29 44 24 60	 movaps	 XMMWORD PTR $T22178[rsp+64], xmm0
  001d6	f2 0f 11 4c 24
	70		 movsdx	 QWORD PTR $T22178[rsp+80], xmm1
  001dc	e8 00 00 00 00	 call	 zlib_error

; 673  :             Py_DECREF(RetVal);
; 674  :             RetVal = NULL;
; 675  :             goto error;

  001e1	e9 c7 00 00 00	 jmp	 $LN27@PyZlib_obj@2
$LN11@PyZlib_obj@2:

; 676  :         }
; 677  :         /* Repeat the call to inflate. */
; 678  :         Py_BEGIN_ALLOW_THREADS

  001e6	e8 00 00 00 00	 call	 PyEval_SaveThread

; 679  :         err = inflate(&(self->zst), Z_SYNC_FLUSH);

  001eb	48 8d 4e 60	 lea	 rcx, QWORD PTR [rsi+96]
  001ef	ba 02 00 00 00	 mov	 edx, 2
  001f4	48 8b d8	 mov	 rbx, rax
  001f7	e8 00 00 00 00	 call	 inflate

; 680  :         Py_END_ALLOW_THREADS

  001fc	48 8b cb	 mov	 rcx, rbx
  001ff	44 8b e0	 mov	 r12d, eax
  00202	e8 00 00 00 00	 call	 PyEval_RestoreThread
$LN21@PyZlib_obj@2:

; 681  :     }
; 682  : 
; 683  :     /* While Z_OK and the output buffer is full, there might be more output.
; 684  :        So extend the output buffer and try again.
; 685  :     */
; 686  :     while (err == Z_OK && self->zst.avail_out == 0) {

  00207	45 85 e4	 test	 r12d, r12d
  0020a	75 72		 jne	 SHORT $LN9@PyZlib_obj@2
  0020c	0f 1f 40 00	 npad	 4
$LL10@PyZlib_obj@2:
  00210	83 7e 78 00	 cmp	 DWORD PTR [rsi+120], 0
  00214	75 68		 jne	 SHORT $LN9@PyZlib_obj@2

; 687  :         /* If max_length set, don't continue decompressing if we've already
; 688  :            reached the limit.
; 689  :         */
; 690  :         if (max_length && length >= max_length)

  00216	48 63 4d 70	 movsxd	 rcx, DWORD PTR max_length$[rbp-256]
  0021a	85 c9		 test	 ecx, ecx
  0021c	74 05		 je	 SHORT $LN8@PyZlib_obj@2
  0021e	48 3b f9	 cmp	 rdi, rcx
  00221	7d 5b		 jge	 SHORT $LN9@PyZlib_obj@2
$LN8@PyZlib_obj@2:

; 691  :             break;
; 692  : 
; 693  :         /* otherwise, ... */
; 694  :         old_length = length;

  00223	48 8b df	 mov	 rbx, rdi

; 695  :         length = length << 1;

  00226	48 03 ff	 add	 rdi, rdi

; 696  :         if (max_length && length > max_length)

  00229	85 c9		 test	 ecx, ecx
  0022b	74 07		 je	 SHORT $LN7@PyZlib_obj@2
  0022d	48 3b f9	 cmp	 rdi, rcx
  00230	48 0f 4f f9	 cmovg	 rdi, rcx
$LN7@PyZlib_obj@2:

; 697  :             length = max_length;
; 698  : 
; 699  :         if (_PyBytes_Resize(&RetVal, length) < 0) {

  00234	48 8d 4d 78	 lea	 rcx, QWORD PTR RetVal$[rbp-256]
  00238	48 8b d7	 mov	 rdx, rdi
  0023b	e8 00 00 00 00	 call	 _PyBytes_Resize
  00240	85 c0		 test	 eax, eax
  00242	78 69		 js	 SHORT $LN27@PyZlib_obj@2

; 700  :             Py_DECREF(RetVal);
; 701  :             RetVal = NULL;
; 702  :             goto error;
; 703  :         }
; 704  :         self->zst.next_out =
; 705  :             (unsigned char *)PyBytes_AS_STRING(RetVal) + old_length;

  00244	48 8b 45 78	 mov	 rax, QWORD PTR RetVal$[rbp-256]
  00248	48 8d 4c 03 78	 lea	 rcx, QWORD PTR [rbx+rax+120]

; 706  :         self->zst.avail_out = length - old_length;

  0024d	8b c7		 mov	 eax, edi
  0024f	2b c3		 sub	 eax, ebx
  00251	48 89 4e 70	 mov	 QWORD PTR [rsi+112], rcx
  00255	89 46 78	 mov	 DWORD PTR [rsi+120], eax

; 707  : 
; 708  :         Py_BEGIN_ALLOW_THREADS

  00258	e8 00 00 00 00	 call	 PyEval_SaveThread

; 709  :         err = inflate(&(self->zst), Z_SYNC_FLUSH);

  0025d	48 8d 4e 60	 lea	 rcx, QWORD PTR [rsi+96]
  00261	ba 02 00 00 00	 mov	 edx, 2
  00266	48 8b d8	 mov	 rbx, rax
  00269	e8 00 00 00 00	 call	 inflate

; 710  :         Py_END_ALLOW_THREADS

  0026e	48 8b cb	 mov	 rcx, rbx
  00271	44 8b e0	 mov	 r12d, eax
  00274	e8 00 00 00 00	 call	 PyEval_RestoreThread
  00279	45 85 e4	 test	 r12d, r12d
  0027c	74 92		 je	 SHORT $LL10@PyZlib_obj@2
$LN9@PyZlib_obj@2:

; 711  :     }
; 712  : 
; 713  :     if (save_unconsumed_input(self, err) < 0) {

  0027e	41 8b d4	 mov	 edx, r12d
  00281	48 8b ce	 mov	 rcx, rsi
  00284	e8 00 00 00 00	 call	 save_unconsumed_input
  00289	85 c0		 test	 eax, eax

; 714  :         Py_DECREF(RetVal);
; 715  :         RetVal = NULL;
; 716  :         goto error;

  0028b	78 20		 js	 SHORT $LN27@PyZlib_obj@2

; 717  :     }
; 718  : 
; 719  :     if (err == Z_STREAM_END) {

  0028d	41 83 fc 01	 cmp	 r12d, 1
  00291	75 77		 jne	 SHORT $LN4@PyZlib_obj@2

; 720  :         /* This is the logical place to call inflateEnd, but the old behaviour
; 721  :            of only calling it on flush() is preserved. */
; 722  :         self->eof = 1;

  00293	44 88 a6 c8 00
	00 00		 mov	 BYTE PTR [rsi+200], r12b
$LN2@PyZlib_obj@2:

; 732  :     }
; 733  : 
; 734  :     if (_PyBytes_Resize(&RetVal, self->zst.total_out - start_total_out) < 0) {

  0029a	8b 56 7c	 mov	 edx, DWORD PTR [rsi+124]
  0029d	48 8d 4d 78	 lea	 rcx, QWORD PTR RetVal$[rbp-256]
  002a1	41 2b d7	 sub	 edx, r15d
  002a4	e8 00 00 00 00	 call	 _PyBytes_Resize
  002a9	85 c0		 test	 eax, eax
  002ab	79 11		 jns	 SHORT $error$21229
$LN27@PyZlib_obj@2:

; 735  :         Py_DECREF(RetVal);

  002ad	48 8b 4d 78	 mov	 rcx, QWORD PTR RetVal$[rbp-256]
  002b1	e8 00 00 00 00	 call	 _Py_DecRef

; 736  :         RetVal = NULL;

  002b6	48 c7 45 78 00
	00 00 00	 mov	 QWORD PTR RetVal$[rbp-256], 0
$error$21229:

; 737  :     }
; 738  : 
; 739  :  error:
; 740  :     LEAVE_ZLIB(self);

  002be	48 8b 8e d8 00
	00 00		 mov	 rcx, QWORD PTR [rsi+216]
  002c5	e8 00 00 00 00	 call	 PyThread_release_lock
  002ca	4c 8b bc 24 20
	01 00 00	 mov	 r15, QWORD PTR [rsp+288]
  002d2	4c 8b ac 24 30
	01 00 00	 mov	 r13, QWORD PTR [rsp+304]
  002da	48 8b 9c 24 60
	01 00 00	 mov	 rbx, QWORD PTR [rsp+352]
$LN25@PyZlib_obj@2:
  002e2	4c 8b b4 24 28
	01 00 00	 mov	 r14, QWORD PTR [rsp+296]
$error_outer$21212:

; 741  :  error_outer:
; 742  :     PyBuffer_Release(&pinput);

  002ea	48 8d 4d 80	 lea	 rcx, QWORD PTR pinput$[rbp-256]
  002ee	e8 00 00 00 00	 call	 PyBuffer_Release

; 743  :     return RetVal;

  002f3	48 8b 45 78	 mov	 rax, QWORD PTR RetVal$[rbp-256]
  002f7	4c 8b a4 24 38
	01 00 00	 mov	 r12, QWORD PTR [rsp+312]

; 744  : }

  002ff	48 81 c4 40 01
	00 00		 add	 rsp, 320		; 00000140H
  00306	5f		 pop	 rdi
  00307	5e		 pop	 rsi
  00308	5d		 pop	 rbp
  00309	c3		 ret	 0
$LN4@PyZlib_obj@2:

; 723  :     } else if (err != Z_OK && err != Z_BUF_ERROR) {

  0030a	45 85 e4	 test	 r12d, r12d
  0030d	74 8b		 je	 SHORT $LN2@PyZlib_obj@2
  0030f	41 83 fc fb	 cmp	 r12d, -5
  00313	74 85		 je	 SHORT $LN2@PyZlib_obj@2

; 724  :         /* We will only get Z_BUF_ERROR if the output buffer was full
; 725  :            but there wasn't more output when we tried again, so it is
; 726  :            not an error condition.
; 727  :         */
; 728  :         zlib_error(self->zst, err, "while decompressing data");

  00315	0f 10 46 60	 movups	 xmm0, XMMWORD PTR [rsi+96]
  00319	0f 10 4e 70	 movups	 xmm1, XMMWORD PTR [rsi+112]
  0031d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BJ@KAMAGNFL@while?5decompressing?5data?$AA@
  00324	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T22179[rsp]
  00329	41 8b d4	 mov	 edx, r12d
  0032c	0f 29 44 24 20	 movaps	 XMMWORD PTR $T22179[rsp], xmm0
  00331	0f 29 4c 24 30	 movaps	 XMMWORD PTR $T22179[rsp+16], xmm1
  00336	0f 10 86 80 00
	00 00		 movups	 xmm0, XMMWORD PTR [rsi+128]
  0033d	0f 10 8e 90 00
	00 00		 movups	 xmm1, XMMWORD PTR [rsi+144]
  00344	0f 29 44 24 40	 movaps	 XMMWORD PTR $T22179[rsp+32], xmm0
  00349	0f 29 4c 24 50	 movaps	 XMMWORD PTR $T22179[rsp+48], xmm1
  0034e	0f 10 86 a0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rsi+160]
  00355	f2 0f 10 8e b0
	00 00 00	 movsdx	 xmm1, QWORD PTR [rsi+176]
  0035d	0f 29 44 24 60	 movaps	 XMMWORD PTR $T22179[rsp+64], xmm0
  00362	f2 0f 11 4c 24
	70		 movsdx	 QWORD PTR $T22179[rsp+80], xmm1
  00368	e8 00 00 00 00	 call	 zlib_error

; 729  :         Py_DECREF(RetVal);
; 730  :         RetVal = NULL;
; 731  :         goto error;

  0036d	e9 3b ff ff ff	 jmp	 $LN27@PyZlib_obj@2
PyZlib_objdecompress ENDP
_TEXT	ENDS
PUBLIC	$T22237
PUBLIC	??_C@_0P@NMFHCCFC@while?5flushing?$AA@		; `string'
PUBLIC	$T22236
PUBLIC	??_C@_08OJMLILBP@?$HMi?3flush?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_flush DD imagerel PyZlib_flush
	DD	imagerel PyZlib_flush+116
	DD	imagerel $unwind$PyZlib_flush
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyZlib_flush DD imagerel PyZlib_flush+116
	DD	imagerel PyZlib_flush+567
	DD	imagerel $chain$4$PyZlib_flush
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyZlib_flush DD imagerel PyZlib_flush+567
	DD	imagerel PyZlib_flush+664
	DD	imagerel $chain$6$PyZlib_flush
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyZlib_flush DD 0a0021H
	DD	010f400H
	DD	011e400H
	DD	012d400H
	DD	0136400H
	DD	0183400H
	DD	imagerel PyZlib_flush
	DD	imagerel PyZlib_flush+116
	DD	imagerel $unwind$PyZlib_flush
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyZlib_flush DD 0a2821H
	DD	010f428H
	DD	011e420H
	DD	012d418H
	DD	0136410H
	DD	0183408H
	DD	imagerel PyZlib_flush
	DD	imagerel PyZlib_flush+116
	DD	imagerel $unwind$PyZlib_flush
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_flush DD 051101H
	DD	0140111H
	DD	07003c005H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0P@NMFHCCFC@while?5flushing?$AA@
CONST	SEGMENT
??_C@_0P@NMFHCCFC@while?5flushing?$AA@ DB 'while flushing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OJMLILBP@?$HMi?3flush?$AA@
CONST	SEGMENT
??_C@_08OJMLILBP@?$HMi?3flush?$AA@ DB '|i:flush', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyZlib_flush
_TEXT	SEGMENT
$T22237 = 32
$T22236 = 32
self$ = 192
args$ = 200
flushmode$ = 208
RetVal$ = 216
PyZlib_flush PROC					; COMDAT

; 756  : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	41 54		 push	 r12
  00005	48 8d 6c 24 b9	 lea	 rbp, QWORD PTR [rsp-71]
  0000a	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00011	48 8b c2	 mov	 rax, rdx
  00014	48 8b f9	 mov	 rdi, rcx

; 757  :     int err, length = DEFAULTALLOC;
; 758  :     PyObject *RetVal;
; 759  :     int flushmode = Z_FINISH;
; 760  :     unsigned long start_total_out;
; 761  : 
; 762  :     if (!PyArg_ParseTuple(args, "|i:flush", &flushmode))

  00017	4c 8d 45 77	 lea	 r8, QWORD PTR flushmode$[rbp-89]
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OJMLILBP@?$HMi?3flush?$AA@
  00022	48 8b c8	 mov	 rcx, rax
  00025	41 bc 00 40 00
	00		 mov	 r12d, 16384		; 00004000H
  0002b	c7 45 77 04 00
	00 00		 mov	 DWORD PTR flushmode$[rbp-89], 4
  00032	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00037	85 c0		 test	 eax, eax
  00039	75 0e		 jne	 SHORT $LN12@PyZlib_flu
$LN20@PyZlib_flu:

; 763  :         return NULL;

  0003b	33 c0		 xor	 eax, eax

; 837  : }

  0003d	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00044	41 5c		 pop	 r12
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
$LN12@PyZlib_flu:

; 764  : 
; 765  :     /* Flushing with Z_NO_FLUSH is a no-op, so there's no point in
; 766  :        doing any work at all; just return an empty string. */
; 767  :     if (flushmode == Z_NO_FLUSH) {
; 768  :         return PyBytes_FromStringAndSize(NULL, 0);

  00049	33 c9		 xor	 ecx, ecx
  0004b	39 4d 77	 cmp	 DWORD PTR flushmode$[rbp-89], ecx
  0004e	75 13		 jne	 SHORT $LN11@PyZlib_flu
  00050	33 d2		 xor	 edx, edx
  00052	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 837  : }

  00057	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  0005e	41 5c		 pop	 r12
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
$LN11@PyZlib_flu:

; 769  :     }
; 770  : 
; 771  :     if (!(RetVal = PyBytes_FromStringAndSize(NULL, length)))

  00063	49 8b d4	 mov	 rdx, r12
  00066	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0006b	48 89 45 7f	 mov	 QWORD PTR RetVal$[rbp-89], rax
  0006f	48 85 c0	 test	 rax, rax

; 772  :         return NULL;

  00072	74 c7		 je	 SHORT $LN20@PyZlib_flu

; 773  : 
; 774  :     ENTER_ZLIB(self);

  00074	48 89 9c 24 c0
	00 00 00	 mov	 QWORD PTR [rsp+192], rbx
  0007c	48 89 b4 24 98
	00 00 00	 mov	 QWORD PTR [rsp+152], rsi
  00084	4c 89 ac 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], r13
  0008c	4c 89 b4 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], r14
  00094	4c 89 bc 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], r15
  0009c	e8 00 00 00 00	 call	 PyEval_SaveThread
  000a1	48 8b 8f d8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+216]
  000a8	ba 01 00 00 00	 mov	 edx, 1
  000ad	48 8b d8	 mov	 rbx, rax
  000b0	e8 00 00 00 00	 call	 PyThread_acquire_lock
  000b5	48 8b cb	 mov	 rcx, rbx
  000b8	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 775  : 
; 776  :     start_total_out = self->zst.total_out;
; 777  :     self->zst.avail_in = 0;
; 778  :     self->zst.avail_out = length;
; 779  :     self->zst.next_out = (unsigned char *)PyBytes_AS_STRING(RetVal);

  000bd	48 8b 45 7f	 mov	 rax, QWORD PTR RetVal$[rbp-89]
  000c1	44 8b 77 7c	 mov	 r14d, DWORD PTR [rdi+124]
  000c5	48 83 c0 78	 add	 rax, 120		; 00000078H
  000c9	45 33 ff	 xor	 r15d, r15d
  000cc	44 89 67 78	 mov	 DWORD PTR [rdi+120], r12d
  000d0	48 89 47 70	 mov	 QWORD PTR [rdi+112], rax
  000d4	44 89 7f 68	 mov	 DWORD PTR [rdi+104], r15d

; 780  : 
; 781  :     Py_BEGIN_ALLOW_THREADS

  000d8	e8 00 00 00 00	 call	 PyEval_SaveThread

; 782  :     err = deflate(&(self->zst), flushmode);

  000dd	8b 55 77	 mov	 edx, DWORD PTR flushmode$[rbp-89]
  000e0	48 8d 4f 60	 lea	 rcx, QWORD PTR [rdi+96]
  000e4	48 8b d8	 mov	 rbx, rax
  000e7	e8 00 00 00 00	 call	 deflate

; 783  :     Py_END_ALLOW_THREADS

  000ec	48 8b cb	 mov	 rcx, rbx
  000ef	44 8b e8	 mov	 r13d, eax
  000f2	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 784  : 
; 785  :     /* while Z_OK and the output buffer is full, there might be more output,
; 786  :        so extend the output buffer and try again */
; 787  :     while (err == Z_OK && self->zst.avail_out == 0) {

  000f7	45 85 ed	 test	 r13d, r13d
  000fa	75 5d		 jne	 SHORT $LN8@PyZlib_flu
  000fc	0f 1f 40 00	 npad	 4
$LL9@PyZlib_flu:
  00100	44 39 7f 78	 cmp	 DWORD PTR [rdi+120], r15d
  00104	75 53		 jne	 SHORT $LN8@PyZlib_flu

; 788  :         if (_PyBytes_Resize(&RetVal, length << 1) < 0) {

  00106	43 8d 1c 24	 lea	 ebx, DWORD PTR [r12+r12]
  0010a	48 8d 4d 7f	 lea	 rcx, QWORD PTR RetVal$[rbp-89]
  0010e	48 63 d3	 movsxd	 rdx, ebx
  00111	e8 00 00 00 00	 call	 _PyBytes_Resize
  00116	85 c0		 test	 eax, eax
  00118	0f 88 c8 00 00
	00		 js	 $LN16@PyZlib_flu

; 789  :             Py_DECREF(RetVal);
; 790  :             RetVal = NULL;
; 791  :             goto error;
; 792  :         }
; 793  :         self->zst.next_out =
; 794  :             (unsigned char *)PyBytes_AS_STRING(RetVal) + length;

  0011e	48 8b 45 7f	 mov	 rax, QWORD PTR RetVal$[rbp-89]
  00122	49 63 cc	 movsxd	 rcx, r12d

; 795  :         self->zst.avail_out = length;

  00125	44 89 67 78	 mov	 DWORD PTR [rdi+120], r12d
  00129	48 8d 4c 01 78	 lea	 rcx, QWORD PTR [rcx+rax+120]

; 796  :         length = length << 1;

  0012e	44 8b e3	 mov	 r12d, ebx
  00131	48 89 4f 70	 mov	 QWORD PTR [rdi+112], rcx

; 797  : 
; 798  :         Py_BEGIN_ALLOW_THREADS

  00135	e8 00 00 00 00	 call	 PyEval_SaveThread

; 799  :         err = deflate(&(self->zst), flushmode);

  0013a	8b 55 77	 mov	 edx, DWORD PTR flushmode$[rbp-89]
  0013d	48 8d 4f 60	 lea	 rcx, QWORD PTR [rdi+96]
  00141	48 8b d8	 mov	 rbx, rax
  00144	e8 00 00 00 00	 call	 deflate

; 800  :         Py_END_ALLOW_THREADS

  00149	48 8b cb	 mov	 rcx, rbx
  0014c	44 8b e8	 mov	 r13d, eax
  0014f	e8 00 00 00 00	 call	 PyEval_RestoreThread
  00154	45 85 ed	 test	 r13d, r13d
  00157	74 a7		 je	 SHORT $LL9@PyZlib_flu
$LN8@PyZlib_flu:

; 801  :     }
; 802  : 
; 803  :     /* If flushmode is Z_FINISH, we also have to call deflateEnd() to free
; 804  :        various data structures. Note we should only get Z_STREAM_END when
; 805  :        flushmode is Z_FINISH, but checking both for safety*/
; 806  :     if (err == Z_STREAM_END && flushmode == Z_FINISH) {

  00159	41 83 fd 01	 cmp	 r13d, 1
  0015d	0f 85 d4 00 00
	00		 jne	 $LN6@PyZlib_flu
  00163	83 7d 77 04	 cmp	 DWORD PTR flushmode$[rbp-89], 4
  00167	0f 85 d5 00 00
	00		 jne	 $LN19@PyZlib_flu

; 807  :         err = deflateEnd(&(self->zst));

  0016d	48 8d 4f 60	 lea	 rcx, QWORD PTR [rdi+96]
  00171	e8 00 00 00 00	 call	 deflateEnd

; 808  :         if (err != Z_OK) {

  00176	85 c0		 test	 eax, eax
  00178	74 52		 je	 SHORT $LN5@PyZlib_flu

; 809  :             zlib_error(self->zst, err, "while finishing compression");

  0017a	0f 10 47 60	 movups	 xmm0, XMMWORD PTR [rdi+96]
  0017e	0f 10 4f 70	 movups	 xmm1, XMMWORD PTR [rdi+112]
  00182	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BM@IPDNGAHJ@while?5finishing?5compression?$AA@
  00189	48 8d 4d c7	 lea	 rcx, QWORD PTR $T22236[rbp-89]
  0018d	8b d0		 mov	 edx, eax
  0018f	0f 29 45 c7	 movaps	 XMMWORD PTR $T22236[rbp-89], xmm0
  00193	0f 29 4d d7	 movaps	 XMMWORD PTR $T22236[rbp-73], xmm1
  00197	0f 10 87 80 00
	00 00		 movups	 xmm0, XMMWORD PTR [rdi+128]
  0019e	0f 10 8f 90 00
	00 00		 movups	 xmm1, XMMWORD PTR [rdi+144]
  001a5	0f 29 45 e7	 movaps	 XMMWORD PTR $T22236[rbp-57], xmm0
  001a9	0f 29 4d f7	 movaps	 XMMWORD PTR $T22236[rbp-41], xmm1
  001ad	0f 10 87 a0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rdi+160]
  001b4	f2 0f 10 8f b0
	00 00 00	 movsdx	 xmm1, QWORD PTR [rdi+176]
  001bc	0f 29 45 07	 movaps	 XMMWORD PTR $T22236[rbp-25], xmm0
  001c0	f2 0f 11 4d 17	 movsdx	 QWORD PTR $T22236[rbp-9], xmm1
  001c5	e8 00 00 00 00	 call	 zlib_error

; 810  :             Py_DECREF(RetVal);
; 811  :             RetVal = NULL;
; 812  :             goto error;

  001ca	eb 1a		 jmp	 SHORT $LN16@PyZlib_flu
$LN5@PyZlib_flu:

; 813  :         }
; 814  :         else
; 815  :             self->is_initialised = 0;

  001cc	44 89 bf cc 00
	00 00		 mov	 DWORD PTR [rdi+204], r15d
$LN2@PyZlib_flu:

; 826  :     }
; 827  : 
; 828  :     if (_PyBytes_Resize(&RetVal, self->zst.total_out - start_total_out) < 0) {

  001d3	8b 57 7c	 mov	 edx, DWORD PTR [rdi+124]
  001d6	48 8d 4d 7f	 lea	 rcx, QWORD PTR RetVal$[rbp-89]
  001da	41 2b d6	 sub	 edx, r14d
  001dd	e8 00 00 00 00	 call	 _PyBytes_Resize
  001e2	85 c0		 test	 eax, eax
  001e4	79 0d		 jns	 SHORT $error$21288
$LN16@PyZlib_flu:

; 829  :         Py_DECREF(RetVal);

  001e6	48 8b 4d 7f	 mov	 rcx, QWORD PTR RetVal$[rbp-89]
  001ea	e8 00 00 00 00	 call	 _Py_DecRef

; 830  :         RetVal = NULL;

  001ef	4c 89 7d 7f	 mov	 QWORD PTR RetVal$[rbp-89], r15
$error$21288:

; 831  :     }
; 832  : 
; 833  :  error:
; 834  :     LEAVE_ZLIB(self);

  001f3	48 8b 8f d8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+216]
  001fa	e8 00 00 00 00	 call	 PyThread_release_lock

; 835  : 
; 836  :     return RetVal;

  001ff	48 8b 45 7f	 mov	 rax, QWORD PTR RetVal$[rbp-89]
  00203	4c 8b bc 24 80
	00 00 00	 mov	 r15, QWORD PTR [rsp+128]
  0020b	4c 8b b4 24 88
	00 00 00	 mov	 r14, QWORD PTR [rsp+136]
  00213	4c 8b ac 24 90
	00 00 00	 mov	 r13, QWORD PTR [rsp+144]
  0021b	48 8b b4 24 98
	00 00 00	 mov	 rsi, QWORD PTR [rsp+152]
  00223	48 8b 9c 24 c0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+192]

; 837  : }

  0022b	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00232	41 5c		 pop	 r12
  00234	5f		 pop	 rdi
  00235	5d		 pop	 rbp
  00236	c3		 ret	 0
$LN6@PyZlib_flu:

; 816  : 
; 817  :         /* We will only get Z_BUF_ERROR if the output buffer was full
; 818  :            but there wasn't more output when we tried again, so it is
; 819  :            not an error condition.
; 820  :         */
; 821  :     } else if (err!=Z_OK && err!=Z_BUF_ERROR) {

  00237	45 85 ed	 test	 r13d, r13d
  0023a	74 97		 je	 SHORT $LN2@PyZlib_flu
  0023c	41 83 fd fb	 cmp	 r13d, -5
  00240	74 91		 je	 SHORT $LN2@PyZlib_flu
$LN19@PyZlib_flu:

; 822  :         zlib_error(self->zst, err, "while flushing");

  00242	0f 10 47 60	 movups	 xmm0, XMMWORD PTR [rdi+96]
  00246	0f 10 4f 70	 movups	 xmm1, XMMWORD PTR [rdi+112]
  0024a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@NMFHCCFC@while?5flushing?$AA@
  00251	48 8d 4d c7	 lea	 rcx, QWORD PTR $T22237[rbp-89]
  00255	41 8b d5	 mov	 edx, r13d
  00258	0f 29 45 c7	 movaps	 XMMWORD PTR $T22237[rbp-89], xmm0
  0025c	0f 29 4d d7	 movaps	 XMMWORD PTR $T22237[rbp-73], xmm1
  00260	0f 10 87 80 00
	00 00		 movups	 xmm0, XMMWORD PTR [rdi+128]
  00267	0f 10 8f 90 00
	00 00		 movups	 xmm1, XMMWORD PTR [rdi+144]
  0026e	0f 29 45 e7	 movaps	 XMMWORD PTR $T22237[rbp-57], xmm0
  00272	0f 29 4d f7	 movaps	 XMMWORD PTR $T22237[rbp-41], xmm1
  00276	0f 10 87 a0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rdi+160]
  0027d	f2 0f 10 8f b0
	00 00 00	 movsdx	 xmm1, QWORD PTR [rdi+176]
  00285	0f 29 45 07	 movaps	 XMMWORD PTR $T22237[rbp-25], xmm0
  00289	f2 0f 11 4d 17	 movsdx	 QWORD PTR $T22237[rbp-9], xmm1
  0028e	e8 00 00 00 00	 call	 zlib_error

; 823  :         Py_DECREF(RetVal);
; 824  :         RetVal = NULL;
; 825  :         goto error;

  00293	e9 4e ff ff ff	 jmp	 $LN16@PyZlib_flu
PyZlib_flush ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@GHDMMOKL@Inconsistent?5stream?5state?$AA@ ; `string'
PUBLIC	$T22270
PUBLIC	??_C@_0CB@PGEPIFEP@while?5copying?5compression?5object@ ; `string'
EXTRN	deflateCopy:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyZlib_copy DD imagerel PyZlib_copy
	DD	imagerel PyZlib_copy+630
	DD	imagerel $unwind$PyZlib_copy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_copy DD 073d01H
	DD	014343dH
	DD	015640dH
	DD	012010dH
	DD	07006H
xdata	ENDS
;	COMDAT ??_C@_0BK@GHDMMOKL@Inconsistent?5stream?5state?$AA@
CONST	SEGMENT
??_C@_0BK@GHDMMOKL@Inconsistent?5stream?5state?$AA@ DB 'Inconsistent stre'
	DB	'am state', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PGEPIFEP@while?5copying?5compression?5object@
CONST	SEGMENT
??_C@_0CB@PGEPIFEP@while?5copying?5compression?5object@ DB 'while copying'
	DB	' compression object', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\zlibmodule.c
CONST	ENDS
;	COMDAT PyZlib_copy
_TEXT	SEGMENT
$T22270 = 48
self$ = 160
PyZlib_copy PROC					; COMDAT

; 845  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  0000d	48 8b f1	 mov	 rsi, rcx

; 846  :     compobject *retval = NULL;
; 847  :     int err;
; 848  : 
; 849  :     retval = newcompobject(&Comptype);

  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Comptype
  00017	e8 00 00 00 00	 call	 newcompobject
  0001c	48 8b f8	 mov	 rdi, rax

; 850  :     if (!retval) return NULL;

  0001f	48 85 c0	 test	 rax, rax
  00022	75 11		 jne	 SHORT $LN27@PyZlib_cop

; 892  : }

  00024	48 8b b4 24 a8
	00 00 00	 mov	 rsi, QWORD PTR [rsp+168]
  0002c	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
$LN27@PyZlib_cop:
  00035	48 89 9c 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rbx

; 851  : 
; 852  :     /* Copy the zstream state
; 853  :      * We use ENTER_ZLIB / LEAVE_ZLIB to make this thread-safe
; 854  :      */
; 855  :     ENTER_ZLIB(self);

  0003d	e8 00 00 00 00	 call	 PyEval_SaveThread
  00042	48 8b 8e d8 00
	00 00		 mov	 rcx, QWORD PTR [rsi+216]
  00049	ba 01 00 00 00	 mov	 edx, 1
  0004e	48 8b d8	 mov	 rbx, rax
  00051	e8 00 00 00 00	 call	 PyThread_acquire_lock
  00056	48 8b cb	 mov	 rcx, rbx
  00059	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 856  :     err = deflateCopy(&retval->zst, &self->zst);

  0005e	48 8d 4f 60	 lea	 rcx, QWORD PTR [rdi+96]
  00062	48 8d 56 60	 lea	 rdx, QWORD PTR [rsi+96]
  00066	e8 00 00 00 00	 call	 deflateCopy

; 857  :     switch(err) {

  0006b	83 f8 fc	 cmp	 eax, -4
  0006e	0f 84 63 01 00
	00		 je	 $LN22@PyZlib_cop
  00074	83 f8 fe	 cmp	 eax, -2
  00077	0f 84 4a 01 00
	00		 je	 $LN23@PyZlib_cop
  0007d	85 c0		 test	 eax, eax
  0007f	74 5f		 je	 SHORT $LN24@PyZlib_cop

; 866  :         goto error;
; 867  :     default:
; 868  :         zlib_error(self->zst, err, "while copying compression object");

  00081	0f 10 46 60	 movups	 xmm0, XMMWORD PTR [rsi+96]
  00085	0f 10 4e 70	 movups	 xmm1, XMMWORD PTR [rsi+112]
  00089	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CB@PGEPIFEP@while?5copying?5compression?5object@
  00090	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T22270[rsp]
  00095	8b d0		 mov	 edx, eax
  00097	0f 29 44 24 30	 movaps	 XMMWORD PTR $T22270[rsp], xmm0
  0009c	0f 29 4c 24 40	 movaps	 XMMWORD PTR $T22270[rsp+16], xmm1
  000a1	0f 10 86 80 00
	00 00		 movups	 xmm0, XMMWORD PTR [rsi+128]
  000a8	0f 10 8e 90 00
	00 00		 movups	 xmm1, XMMWORD PTR [rsi+144]
  000af	0f 29 44 24 50	 movaps	 XMMWORD PTR $T22270[rsp+32], xmm0
  000b4	0f 29 4c 24 60	 movaps	 XMMWORD PTR $T22270[rsp+48], xmm1
  000b9	0f 10 86 a0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rsi+160]
  000c0	f2 0f 10 8e b0
	00 00 00	 movsdx	 xmm1, QWORD PTR [rsi+176]
  000c8	0f 29 44 24 70	 movaps	 XMMWORD PTR $T22270[rsp+64], xmm0
  000cd	f2 0f 11 8c 24
	80 00 00 00	 movsdx	 QWORD PTR $T22270[rsp+80], xmm1
  000d6	e8 00 00 00 00	 call	 zlib_error

; 869  :         goto error;

  000db	e9 0a 01 00 00	 jmp	 $error$21324
$LN24@PyZlib_cop:

; 870  :     }
; 871  :     Py_INCREF(self->unused_data);

  000e0	48 8b 8e b8 00
	00 00		 mov	 rcx, QWORD PTR [rsi+184]
  000e7	e8 00 00 00 00	 call	 _Py_IncRef

; 872  :     Py_INCREF(self->unconsumed_tail);

  000ec	48 8b 8e c0 00
	00 00		 mov	 rcx, QWORD PTR [rsi+192]
  000f3	e8 00 00 00 00	 call	 _Py_IncRef

; 873  :     Py_XINCREF(self->zdict);

  000f8	48 8b 9e d0 00
	00 00		 mov	 rbx, QWORD PTR [rsi+208]
  000ff	48 85 db	 test	 rbx, rbx
  00102	74 3b		 je	 SHORT $LN19@PyZlib_cop
  00104	e8 00 00 00 00	 call	 _Py_PXCTX
  00109	85 c0		 test	 eax, eax
  0010b	75 32		 jne	 SHORT $LN19@PyZlib_cop
  0010d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00114	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0011b	4c 8b cb	 mov	 r9, rbx
  0011e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00124	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0012c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00131	85 c0		 test	 eax, eax
  00133	75 06		 jne	 SHORT $LN30@PyZlib_cop
  00135	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00139	74 04		 je	 SHORT $LN19@PyZlib_cop
$LN30@PyZlib_cop:
  0013b	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN19@PyZlib_cop:

; 874  :     Py_XDECREF(retval->unused_data);

  0013f	48 8b 8f b8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+184]
  00146	48 85 c9	 test	 rcx, rcx
  00149	74 05		 je	 SHORT $LN15@PyZlib_cop
  0014b	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@PyZlib_cop:

; 875  :     Py_XDECREF(retval->unconsumed_tail);

  00150	48 8b 8f c0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+192]
  00157	48 85 c9	 test	 rcx, rcx
  0015a	74 05		 je	 SHORT $LN11@PyZlib_cop
  0015c	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@PyZlib_cop:

; 876  :     Py_XDECREF(retval->zdict);

  00161	48 8b 8f d0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+208]
  00168	48 85 c9	 test	 rcx, rcx
  0016b	74 05		 je	 SHORT $LN7@PyZlib_cop
  0016d	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@PyZlib_cop:

; 877  :     retval->unused_data = self->unused_data;

  00172	48 8b 86 b8 00
	00 00		 mov	 rax, QWORD PTR [rsi+184]
  00179	48 89 87 b8 00
	00 00		 mov	 QWORD PTR [rdi+184], rax

; 878  :     retval->unconsumed_tail = self->unconsumed_tail;

  00180	48 8b 86 c0 00
	00 00		 mov	 rax, QWORD PTR [rsi+192]
  00187	48 89 87 c0 00
	00 00		 mov	 QWORD PTR [rdi+192], rax

; 879  :     retval->zdict = self->zdict;

  0018e	48 8b 86 d0 00
	00 00		 mov	 rax, QWORD PTR [rsi+208]
  00195	48 89 87 d0 00
	00 00		 mov	 QWORD PTR [rdi+208], rax

; 880  :     retval->eof = self->eof;

  0019c	0f b6 86 c8 00
	00 00		 movzx	 eax, BYTE PTR [rsi+200]

; 881  : 
; 882  :     /* Mark it as being initialized */
; 883  :     retval->is_initialised = 1;

  001a3	c7 87 cc 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rdi+204], 1
  001ad	88 87 c8 00 00
	00		 mov	 BYTE PTR [rdi+200], al

; 884  : 
; 885  :     LEAVE_ZLIB(self);

  001b3	48 8b 8e d8 00
	00 00		 mov	 rcx, QWORD PTR [rsi+216]
  001ba	e8 00 00 00 00	 call	 PyThread_release_lock

; 886  :     return (PyObject *)retval;

  001bf	48 8b c7	 mov	 rax, rdi
  001c2	e9 96 00 00 00	 jmp	 $LN45@PyZlib_cop
$LN23@PyZlib_cop:

; 858  :     case(Z_OK):
; 859  :         break;
; 860  :     case(Z_STREAM_ERROR):
; 861  :         PyErr_SetString(PyExc_ValueError, "Inconsistent stream state");

  001c7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@GHDMMOKL@Inconsistent?5stream?5state?$AA@

; 862  :         goto error;

  001d5	eb 0e		 jmp	 SHORT $LN46@PyZlib_cop
$LN22@PyZlib_cop:

; 863  :     case(Z_MEM_ERROR):
; 864  :         PyErr_SetString(PyExc_MemoryError,
; 865  :                         "Can't allocate memory for compression object");

  001d7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  001de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@CHBGDHHI@Can?8t?5allocate?5memory?5for?5compre@
$LN46@PyZlib_cop:
  001e5	e8 00 00 00 00	 call	 PyErr_SetString
$error$21324:

; 887  : 
; 888  : error:
; 889  :     LEAVE_ZLIB(self);

  001ea	48 8b 8e d8 00
	00 00		 mov	 rcx, QWORD PTR [rsi+216]
  001f1	e8 00 00 00 00	 call	 PyThread_release_lock

; 890  :     Py_XDECREF(retval);

  001f6	e8 00 00 00 00	 call	 _Py_PXCTX
  001fb	85 c0		 test	 eax, eax
  001fd	75 5c		 jne	 SHORT $LN3@PyZlib_cop
  001ff	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00203	a8 20		 test	 al, 32			; 00000020H
  00205	75 4c		 jne	 SHORT $LN38@PyZlib_cop
  00207	84 c0		 test	 al, al
  00209	78 48		 js	 SHORT $LN38@PyZlib_cop
  0020b	a8 02		 test	 al, 2
  0020d	75 4c		 jne	 SHORT $LN3@PyZlib_cop
  0020f	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00213	75 46		 jne	 SHORT $LN3@PyZlib_cop
  00215	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0021c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00223	4c 8b cf	 mov	 r9, rdi
  00226	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0022c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00234	e8 00 00 00 00	 call	 _PyParallel_Guard
  00239	48 8b cf	 mov	 rcx, rdi
  0023c	85 c0		 test	 eax, eax
  0023e	74 07		 je	 SHORT $LN43@PyZlib_cop
  00240	e8 00 00 00 00	 call	 _Px_Dealloc
  00245	eb 14		 jmp	 SHORT $LN3@PyZlib_cop
$LN43@PyZlib_cop:
  00247	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0024b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00251	eb 08		 jmp	 SHORT $LN3@PyZlib_cop
$LN38@PyZlib_cop:
  00253	48 8b cf	 mov	 rcx, rdi
  00256	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyZlib_cop:

; 891  :     return NULL;

  0025b	33 c0		 xor	 eax, eax
$LN45@PyZlib_cop:
  0025d	48 8b 9c 24 a0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+160]

; 892  : }

  00265	48 8b b4 24 a8
	00 00 00	 mov	 rsi, QWORD PTR [rsp+168]
  0026d	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00274	5f		 pop	 rdi
  00275	c3		 ret	 0
PyZlib_copy ENDP
_TEXT	ENDS
PUBLIC	$T22307
PUBLIC	??_C@_0CD@OEAPIDFL@while?5copying?5decompression?5obje@ ; `string'
EXTRN	inflateCopy:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyZlib_uncopy DD imagerel PyZlib_uncopy
	DD	imagerel PyZlib_uncopy+630
	DD	imagerel $unwind$PyZlib_uncopy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_uncopy DD 073d01H
	DD	014343dH
	DD	015640dH
	DD	012010dH
	DD	07006H
xdata	ENDS
;	COMDAT ??_C@_0CD@OEAPIDFL@while?5copying?5decompression?5obje@
CONST	SEGMENT
??_C@_0CD@OEAPIDFL@while?5copying?5decompression?5obje@ DB 'while copying'
	DB	' decompression object', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\zlibmodule.c
CONST	ENDS
;	COMDAT PyZlib_uncopy
_TEXT	SEGMENT
$T22307 = 48
self$ = 160
PyZlib_uncopy PROC					; COMDAT

; 899  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  0000d	48 8b f1	 mov	 rsi, rcx

; 900  :     compobject *retval = NULL;
; 901  :     int err;
; 902  : 
; 903  :     retval = newcompobject(&Decomptype);

  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Decomptype
  00017	e8 00 00 00 00	 call	 newcompobject
  0001c	48 8b f8	 mov	 rdi, rax

; 904  :     if (!retval) return NULL;

  0001f	48 85 c0	 test	 rax, rax
  00022	75 11		 jne	 SHORT $LN27@PyZlib_unc

; 947  : }

  00024	48 8b b4 24 a8
	00 00 00	 mov	 rsi, QWORD PTR [rsp+168]
  0002c	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
$LN27@PyZlib_unc:
  00035	48 89 9c 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rbx

; 905  : 
; 906  :     /* Copy the zstream state
; 907  :      * We use ENTER_ZLIB / LEAVE_ZLIB to make this thread-safe
; 908  :      */
; 909  :     ENTER_ZLIB(self);

  0003d	e8 00 00 00 00	 call	 PyEval_SaveThread
  00042	48 8b 8e d8 00
	00 00		 mov	 rcx, QWORD PTR [rsi+216]
  00049	ba 01 00 00 00	 mov	 edx, 1
  0004e	48 8b d8	 mov	 rbx, rax
  00051	e8 00 00 00 00	 call	 PyThread_acquire_lock
  00056	48 8b cb	 mov	 rcx, rbx
  00059	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 910  :     err = inflateCopy(&retval->zst, &self->zst);

  0005e	48 8d 4f 60	 lea	 rcx, QWORD PTR [rdi+96]
  00062	48 8d 56 60	 lea	 rdx, QWORD PTR [rsi+96]
  00066	e8 00 00 00 00	 call	 inflateCopy

; 911  :     switch(err) {

  0006b	83 f8 fc	 cmp	 eax, -4
  0006e	0f 84 63 01 00
	00		 je	 $LN22@PyZlib_unc
  00074	83 f8 fe	 cmp	 eax, -2
  00077	0f 84 4a 01 00
	00		 je	 $LN23@PyZlib_unc
  0007d	85 c0		 test	 eax, eax
  0007f	74 5f		 je	 SHORT $LN24@PyZlib_unc

; 920  :         goto error;
; 921  :     default:
; 922  :         zlib_error(self->zst, err, "while copying decompression object");

  00081	0f 10 46 60	 movups	 xmm0, XMMWORD PTR [rsi+96]
  00085	0f 10 4e 70	 movups	 xmm1, XMMWORD PTR [rsi+112]
  00089	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CD@OEAPIDFL@while?5copying?5decompression?5obje@
  00090	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T22307[rsp]
  00095	8b d0		 mov	 edx, eax
  00097	0f 29 44 24 30	 movaps	 XMMWORD PTR $T22307[rsp], xmm0
  0009c	0f 29 4c 24 40	 movaps	 XMMWORD PTR $T22307[rsp+16], xmm1
  000a1	0f 10 86 80 00
	00 00		 movups	 xmm0, XMMWORD PTR [rsi+128]
  000a8	0f 10 8e 90 00
	00 00		 movups	 xmm1, XMMWORD PTR [rsi+144]
  000af	0f 29 44 24 50	 movaps	 XMMWORD PTR $T22307[rsp+32], xmm0
  000b4	0f 29 4c 24 60	 movaps	 XMMWORD PTR $T22307[rsp+48], xmm1
  000b9	0f 10 86 a0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rsi+160]
  000c0	f2 0f 10 8e b0
	00 00 00	 movsdx	 xmm1, QWORD PTR [rsi+176]
  000c8	0f 29 44 24 70	 movaps	 XMMWORD PTR $T22307[rsp+64], xmm0
  000cd	f2 0f 11 8c 24
	80 00 00 00	 movsdx	 QWORD PTR $T22307[rsp+80], xmm1
  000d6	e8 00 00 00 00	 call	 zlib_error

; 923  :         goto error;

  000db	e9 0a 01 00 00	 jmp	 $error$21374
$LN24@PyZlib_unc:

; 924  :     }
; 925  : 
; 926  :     Py_INCREF(self->unused_data);

  000e0	48 8b 8e b8 00
	00 00		 mov	 rcx, QWORD PTR [rsi+184]
  000e7	e8 00 00 00 00	 call	 _Py_IncRef

; 927  :     Py_INCREF(self->unconsumed_tail);

  000ec	48 8b 8e c0 00
	00 00		 mov	 rcx, QWORD PTR [rsi+192]
  000f3	e8 00 00 00 00	 call	 _Py_IncRef

; 928  :     Py_XINCREF(self->zdict);

  000f8	48 8b 9e d0 00
	00 00		 mov	 rbx, QWORD PTR [rsi+208]
  000ff	48 85 db	 test	 rbx, rbx
  00102	74 3b		 je	 SHORT $LN19@PyZlib_unc
  00104	e8 00 00 00 00	 call	 _Py_PXCTX
  00109	85 c0		 test	 eax, eax
  0010b	75 32		 jne	 SHORT $LN19@PyZlib_unc
  0010d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00114	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0011b	4c 8b cb	 mov	 r9, rbx
  0011e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00124	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0012c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00131	85 c0		 test	 eax, eax
  00133	75 06		 jne	 SHORT $LN30@PyZlib_unc
  00135	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00139	74 04		 je	 SHORT $LN19@PyZlib_unc
$LN30@PyZlib_unc:
  0013b	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN19@PyZlib_unc:

; 929  :     Py_XDECREF(retval->unused_data);

  0013f	48 8b 8f b8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+184]
  00146	48 85 c9	 test	 rcx, rcx
  00149	74 05		 je	 SHORT $LN15@PyZlib_unc
  0014b	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@PyZlib_unc:

; 930  :     Py_XDECREF(retval->unconsumed_tail);

  00150	48 8b 8f c0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+192]
  00157	48 85 c9	 test	 rcx, rcx
  0015a	74 05		 je	 SHORT $LN11@PyZlib_unc
  0015c	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@PyZlib_unc:

; 931  :     Py_XDECREF(retval->zdict);

  00161	48 8b 8f d0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+208]
  00168	48 85 c9	 test	 rcx, rcx
  0016b	74 05		 je	 SHORT $LN7@PyZlib_unc
  0016d	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@PyZlib_unc:

; 932  :     retval->unused_data = self->unused_data;

  00172	48 8b 86 b8 00
	00 00		 mov	 rax, QWORD PTR [rsi+184]
  00179	48 89 87 b8 00
	00 00		 mov	 QWORD PTR [rdi+184], rax

; 933  :     retval->unconsumed_tail = self->unconsumed_tail;

  00180	48 8b 86 c0 00
	00 00		 mov	 rax, QWORD PTR [rsi+192]
  00187	48 89 87 c0 00
	00 00		 mov	 QWORD PTR [rdi+192], rax

; 934  :     retval->zdict = self->zdict;

  0018e	48 8b 86 d0 00
	00 00		 mov	 rax, QWORD PTR [rsi+208]
  00195	48 89 87 d0 00
	00 00		 mov	 QWORD PTR [rdi+208], rax

; 935  :     retval->eof = self->eof;

  0019c	0f b6 86 c8 00
	00 00		 movzx	 eax, BYTE PTR [rsi+200]

; 936  : 
; 937  :     /* Mark it as being initialized */
; 938  :     retval->is_initialised = 1;

  001a3	c7 87 cc 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rdi+204], 1
  001ad	88 87 c8 00 00
	00		 mov	 BYTE PTR [rdi+200], al

; 939  : 
; 940  :     LEAVE_ZLIB(self);

  001b3	48 8b 8e d8 00
	00 00		 mov	 rcx, QWORD PTR [rsi+216]
  001ba	e8 00 00 00 00	 call	 PyThread_release_lock

; 941  :     return (PyObject *)retval;

  001bf	48 8b c7	 mov	 rax, rdi
  001c2	e9 96 00 00 00	 jmp	 $LN45@PyZlib_unc
$LN23@PyZlib_unc:

; 912  :     case(Z_OK):
; 913  :         break;
; 914  :     case(Z_STREAM_ERROR):
; 915  :         PyErr_SetString(PyExc_ValueError, "Inconsistent stream state");

  001c7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@GHDMMOKL@Inconsistent?5stream?5state?$AA@

; 916  :         goto error;

  001d5	eb 0e		 jmp	 SHORT $LN46@PyZlib_unc
$LN22@PyZlib_unc:

; 917  :     case(Z_MEM_ERROR):
; 918  :         PyErr_SetString(PyExc_MemoryError,
; 919  :                         "Can't allocate memory for decompression object");

  001d7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  001de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@FBGHCAJG@Can?8t?5allocate?5memory?5for?5decomp@
$LN46@PyZlib_unc:
  001e5	e8 00 00 00 00	 call	 PyErr_SetString
$error$21374:

; 942  : 
; 943  : error:
; 944  :     LEAVE_ZLIB(self);

  001ea	48 8b 8e d8 00
	00 00		 mov	 rcx, QWORD PTR [rsi+216]
  001f1	e8 00 00 00 00	 call	 PyThread_release_lock

; 945  :     Py_XDECREF(retval);

  001f6	e8 00 00 00 00	 call	 _Py_PXCTX
  001fb	85 c0		 test	 eax, eax
  001fd	75 5c		 jne	 SHORT $LN3@PyZlib_unc
  001ff	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00203	a8 20		 test	 al, 32			; 00000020H
  00205	75 4c		 jne	 SHORT $LN38@PyZlib_unc
  00207	84 c0		 test	 al, al
  00209	78 48		 js	 SHORT $LN38@PyZlib_unc
  0020b	a8 02		 test	 al, 2
  0020d	75 4c		 jne	 SHORT $LN3@PyZlib_unc
  0020f	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00213	75 46		 jne	 SHORT $LN3@PyZlib_unc
  00215	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0021c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00223	4c 8b cf	 mov	 r9, rdi
  00226	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0022c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00234	e8 00 00 00 00	 call	 _PyParallel_Guard
  00239	48 8b cf	 mov	 rcx, rdi
  0023c	85 c0		 test	 eax, eax
  0023e	74 07		 je	 SHORT $LN43@PyZlib_unc
  00240	e8 00 00 00 00	 call	 _Px_Dealloc
  00245	eb 14		 jmp	 SHORT $LN3@PyZlib_unc
$LN43@PyZlib_unc:
  00247	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0024b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00251	eb 08		 jmp	 SHORT $LN3@PyZlib_unc
$LN38@PyZlib_unc:
  00253	48 8b cf	 mov	 rcx, rdi
  00256	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyZlib_unc:

; 946  :     return NULL;

  0025b	33 c0		 xor	 eax, eax
$LN45@PyZlib_unc:
  0025d	48 8b 9c 24 a0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+160]

; 947  : }

  00265	48 8b b4 24 a8
	00 00 00	 mov	 rsi, QWORD PTR [rsp+168]
  0026d	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00274	5f		 pop	 rdi
  00275	c3		 ret	 0
PyZlib_uncopy ENDP
_TEXT	ENDS
PUBLIC	$T22344
PUBLIC	??_C@_0CB@LCINEFBA@length?5must?5be?5greater?5than?5zero@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_unflush DD imagerel PyZlib_unflush
	DD	imagerel PyZlib_unflush+551
	DD	imagerel $unwind$PyZlib_unflush
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_unflush DD 0d9801H
	DD	010d498H
	DD	011c490H
	DD	0176488H
	DD	0163480H
	DD	0120111H
	DD	07003e005H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0CB@LCINEFBA@length?5must?5be?5greater?5than?5zero@
CONST	SEGMENT
??_C@_0CB@LCINEFBA@length?5must?5be?5greater?5than?5zero@ DB 'length must'
	DB	' be greater than zero', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyZlib_unflush
_TEXT	SEGMENT
$T22344 = 32
self$ = 176
args$ = 184
length$ = 192
retval$ = 200
PyZlib_unflush PROC					; COMDAT

; 959  : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	41 56		 push	 r14
  00005	48 8d 6c 24 b9	 lea	 rbp, QWORD PTR [rsp-71]
  0000a	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  00011	48 8b c2	 mov	 rax, rdx
  00014	48 8b f9	 mov	 rdi, rcx

; 960  :     int err, length = DEFAULTALLOC;
; 961  :     PyObject * retval = NULL;
; 962  :     unsigned long start_total_out;
; 963  : 
; 964  :     if (!PyArg_ParseTuple(args, "|i:flush", &length))

  00017	4c 8d 45 77	 lea	 r8, QWORD PTR length$[rbp-73]
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OJMLILBP@?$HMi?3flush?$AA@
  00022	45 33 f6	 xor	 r14d, r14d
  00025	48 8b c8	 mov	 rcx, rax
  00028	c7 45 77 00 40
	00 00		 mov	 DWORD PTR length$[rbp-73], 16384 ; 00004000H
  0002f	4c 89 75 7f	 mov	 QWORD PTR retval$[rbp-73], r14
  00033	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00038	85 c0		 test	 eax, eax

; 965  :         return NULL;

  0003a	74 1b		 je	 SHORT $LN17@PyZlib_unf

; 966  :     if (length <= 0) {

  0003c	48 63 45 77	 movsxd	 rax, DWORD PTR length$[rbp-73]
  00040	85 c0		 test	 eax, eax
  00042	7f 21		 jg	 SHORT $LN10@PyZlib_unf

; 967  :         PyErr_SetString(PyExc_ValueError, "length must be greater than zero");

  00044	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@LCINEFBA@length?5must?5be?5greater?5than?5zero@
  00052	e8 00 00 00 00	 call	 PyErr_SetString
$LN17@PyZlib_unf:

; 968  :         return NULL;

  00057	33 c0		 xor	 eax, eax

; 1032 : }

  00059	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00060	41 5e		 pop	 r14
  00062	5f		 pop	 rdi
  00063	5d		 pop	 rbp
  00064	c3		 ret	 0
$LN10@PyZlib_unf:

; 969  :     }
; 970  :     if (!(retval = PyBytes_FromStringAndSize(NULL, length)))

  00065	48 8b d0	 mov	 rdx, rax
  00068	33 c9		 xor	 ecx, ecx
  0006a	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0006f	48 89 45 7f	 mov	 QWORD PTR retval$[rbp-73], rax
  00073	48 85 c0	 test	 rax, rax

; 971  :         return NULL;

  00076	74 df		 je	 SHORT $LN17@PyZlib_unf

; 972  : 
; 973  : 
; 974  :     ENTER_ZLIB(self);

  00078	48 89 9c 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rbx
  00080	48 89 b4 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rsi
  00088	4c 89 a4 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], r12
  00090	4c 89 ac 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], r13
  00098	e8 00 00 00 00	 call	 PyEval_SaveThread
  0009d	48 8b 8f d8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+216]
  000a4	ba 01 00 00 00	 mov	 edx, 1
  000a9	48 8b d8	 mov	 rbx, rax
  000ac	e8 00 00 00 00	 call	 PyThread_acquire_lock
  000b1	48 8b cb	 mov	 rcx, rbx
  000b4	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 975  : 
; 976  :     start_total_out = self->zst.total_out;
; 977  :     self->zst.avail_in = PyBytes_GET_SIZE(self->unconsumed_tail);

  000b9	48 8b 8f c0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+192]
  000c0	44 8b 6f 7c	 mov	 r13d, DWORD PTR [rdi+124]
  000c4	8b 41 60	 mov	 eax, DWORD PTR [rcx+96]
  000c7	89 47 68	 mov	 DWORD PTR [rdi+104], eax

; 978  :     self->zst.next_in = (Byte *)PyBytes_AS_STRING(self->unconsumed_tail);

  000ca	48 8d 41 78	 lea	 rax, QWORD PTR [rcx+120]
  000ce	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax

; 979  :     self->zst.avail_out = length;

  000d2	8b 45 77	 mov	 eax, DWORD PTR length$[rbp-73]
  000d5	89 47 78	 mov	 DWORD PTR [rdi+120], eax

; 980  :     self->zst.next_out = (Byte *)PyBytes_AS_STRING(retval);

  000d8	48 8b 45 7f	 mov	 rax, QWORD PTR retval$[rbp-73]
  000dc	48 83 c0 78	 add	 rax, 120		; 00000078H
  000e0	48 89 47 70	 mov	 QWORD PTR [rdi+112], rax
$LN16@PyZlib_unf:

; 981  : 
; 982  :     Py_BEGIN_ALLOW_THREADS

  000e4	e8 00 00 00 00	 call	 PyEval_SaveThread

; 983  :     err = inflate(&(self->zst), Z_FINISH);

  000e9	48 8d 4f 60	 lea	 rcx, QWORD PTR [rdi+96]
  000ed	ba 04 00 00 00	 mov	 edx, 4
  000f2	48 8b d8	 mov	 rbx, rax
  000f5	e8 00 00 00 00	 call	 inflate

; 984  :     Py_END_ALLOW_THREADS

  000fa	48 8b cb	 mov	 rcx, rbx
  000fd	8b f0		 mov	 esi, eax
  000ff	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 985  : 
; 986  :     /* while Z_OK and the output buffer is full, there might be more output,
; 987  :        so extend the output buffer and try again */
; 988  :     while ((err == Z_OK || err == Z_BUF_ERROR) && self->zst.avail_out == 0) {

  00104	85 f6		 test	 esi, esi
  00106	74 05		 je	 SHORT $LN6@PyZlib_unf
  00108	83 fe fb	 cmp	 esi, -5
  0010b	75 3a		 jne	 SHORT $LN7@PyZlib_unf
$LN6@PyZlib_unf:
  0010d	44 39 77 78	 cmp	 DWORD PTR [rdi+120], r14d
  00111	75 34		 jne	 SHORT $LN7@PyZlib_unf

; 989  :         if (_PyBytes_Resize(&retval, length << 1) < 0) {

  00113	8b 45 77	 mov	 eax, DWORD PTR length$[rbp-73]
  00116	48 8d 4d 7f	 lea	 rcx, QWORD PTR retval$[rbp-73]
  0011a	03 c0		 add	 eax, eax
  0011c	48 63 d0	 movsxd	 rdx, eax
  0011f	e8 00 00 00 00	 call	 _PyBytes_Resize
  00124	85 c0		 test	 eax, eax
  00126	0f 88 b2 00 00
	00		 js	 $LN15@PyZlib_unf

; 990  :             Py_DECREF(retval);
; 991  :             retval = NULL;
; 992  :             goto error;
; 993  :         }
; 994  :         self->zst.next_out = (Byte *)PyBytes_AS_STRING(retval) + length;

  0012c	48 63 55 77	 movsxd	 rdx, DWORD PTR length$[rbp-73]
  00130	48 8b 45 7f	 mov	 rax, QWORD PTR retval$[rbp-73]
  00134	48 8d 4c 02 78	 lea	 rcx, QWORD PTR [rdx+rax+120]

; 995  :         self->zst.avail_out = length;

  00139	89 57 78	 mov	 DWORD PTR [rdi+120], edx

; 996  :         length = length << 1;

  0013c	03 d2		 add	 edx, edx
  0013e	48 89 4f 70	 mov	 QWORD PTR [rdi+112], rcx
  00142	89 55 77	 mov	 DWORD PTR length$[rbp-73], edx

; 997  : 
; 998  :         Py_BEGIN_ALLOW_THREADS
; 999  :         err = inflate(&(self->zst), Z_FINISH);
; 1000 :         Py_END_ALLOW_THREADS
; 1001 :     }

  00145	eb 9d		 jmp	 SHORT $LN16@PyZlib_unf
$LN7@PyZlib_unf:

; 1002 : 
; 1003 :     if (save_unconsumed_input(self, err) < 0) {

  00147	8b d6		 mov	 edx, esi
  00149	48 8b cf	 mov	 rcx, rdi
  0014c	e8 00 00 00 00	 call	 save_unconsumed_input
  00151	85 c0		 test	 eax, eax

; 1004 :         Py_DECREF(retval);
; 1005 :         retval = NULL;
; 1006 :         goto error;

  00153	0f 88 85 00 00
	00		 js	 $LN15@PyZlib_unf

; 1007 :     }
; 1008 : 
; 1009 :     /* If at end of stream, clean up any memory allocated by zlib. */
; 1010 :     if (err == Z_STREAM_END) {

  00159	83 fe 01	 cmp	 esi, 1
  0015c	75 6d		 jne	 SHORT $LN2@PyZlib_unf

; 1011 :         self->eof = 1;
; 1012 :         self->is_initialised = 0;
; 1013 :         err = inflateEnd(&(self->zst));

  0015e	48 8d 4f 60	 lea	 rcx, QWORD PTR [rdi+96]
  00162	40 88 b7 c8 00
	00 00		 mov	 BYTE PTR [rdi+200], sil
  00169	44 89 b7 cc 00
	00 00		 mov	 DWORD PTR [rdi+204], r14d
  00170	e8 00 00 00 00	 call	 inflateEnd

; 1014 :         if (err != Z_OK) {

  00175	85 c0		 test	 eax, eax
  00177	74 52		 je	 SHORT $LN2@PyZlib_unf

; 1015 :             zlib_error(self->zst, err, "while finishing decompression");

  00179	0f 10 47 60	 movups	 xmm0, XMMWORD PTR [rdi+96]
  0017d	0f 10 4f 70	 movups	 xmm1, XMMWORD PTR [rdi+112]
  00181	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BO@OCMLNOON@while?5finishing?5decompression?$AA@
  00188	48 8d 4d d7	 lea	 rcx, QWORD PTR $T22344[rbp-73]
  0018c	8b d0		 mov	 edx, eax
  0018e	0f 29 45 d7	 movaps	 XMMWORD PTR $T22344[rbp-73], xmm0
  00192	0f 29 4d e7	 movaps	 XMMWORD PTR $T22344[rbp-57], xmm1
  00196	0f 10 87 80 00
	00 00		 movups	 xmm0, XMMWORD PTR [rdi+128]
  0019d	0f 10 8f 90 00
	00 00		 movups	 xmm1, XMMWORD PTR [rdi+144]
  001a4	0f 29 45 f7	 movaps	 XMMWORD PTR $T22344[rbp-41], xmm0
  001a8	0f 29 4d 07	 movaps	 XMMWORD PTR $T22344[rbp-25], xmm1
  001ac	0f 10 87 a0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rdi+160]
  001b3	f2 0f 10 8f b0
	00 00 00	 movsdx	 xmm1, QWORD PTR [rdi+176]
  001bb	0f 29 45 17	 movaps	 XMMWORD PTR $T22344[rbp-9], xmm0
  001bf	f2 0f 11 4d 27	 movsdx	 QWORD PTR $T22344[rbp+7], xmm1
  001c4	e8 00 00 00 00	 call	 zlib_error

; 1016 :             Py_DECREF(retval);
; 1017 :             retval = NULL;
; 1018 :             goto error;

  001c9	eb 13		 jmp	 SHORT $LN15@PyZlib_unf
$LN2@PyZlib_unf:

; 1019 :         }
; 1020 :     }
; 1021 : 
; 1022 :     if (_PyBytes_Resize(&retval, self->zst.total_out - start_total_out) < 0) {

  001cb	8b 57 7c	 mov	 edx, DWORD PTR [rdi+124]
  001ce	48 8d 4d 7f	 lea	 rcx, QWORD PTR retval$[rbp-73]
  001d2	41 2b d5	 sub	 edx, r13d
  001d5	e8 00 00 00 00	 call	 _PyBytes_Resize
  001da	85 c0		 test	 eax, eax
  001dc	79 0d		 jns	 SHORT $error$21444
$LN15@PyZlib_unf:

; 1023 :         Py_DECREF(retval);

  001de	48 8b 4d 7f	 mov	 rcx, QWORD PTR retval$[rbp-73]
  001e2	e8 00 00 00 00	 call	 _Py_DecRef

; 1024 :         retval = NULL;

  001e7	4c 89 75 7f	 mov	 QWORD PTR retval$[rbp-73], r14
$error$21444:

; 1025 :     }
; 1026 : 
; 1027 : error:
; 1028 : 
; 1029 :     LEAVE_ZLIB(self);

  001eb	48 8b 8f d8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+216]
  001f2	e8 00 00 00 00	 call	 PyThread_release_lock

; 1030 : 
; 1031 :     return retval;

  001f7	48 8b 45 7f	 mov	 rax, QWORD PTR retval$[rbp-73]
  001fb	4c 8b ac 24 80
	00 00 00	 mov	 r13, QWORD PTR [rsp+128]
  00203	4c 8b a4 24 88
	00 00 00	 mov	 r12, QWORD PTR [rsp+136]
  0020b	48 8b b4 24 b8
	00 00 00	 mov	 rsi, QWORD PTR [rsp+184]
  00213	48 8b 9c 24 b0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+176]

; 1032 : }

  0021b	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00222	41 5e		 pop	 r14
  00224	5f		 pop	 rdi
  00225	5d		 pop	 rbp
  00226	c3		 ret	 0
PyZlib_unflush ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@FFFDMCPK@y?$CK?$HMI?3adler32?$AA@	; `string'
EXTRN	PyLong_FromUnsignedLong:PROC
EXTRN	adler32:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_adler32 DD imagerel PyZlib_adler32
	DD	imagerel PyZlib_adler32+80
	DD	imagerel $unwind$PyZlib_adler32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyZlib_adler32 DD imagerel PyZlib_adler32+80
	DD	imagerel PyZlib_adler32+134
	DD	imagerel $chain$3$PyZlib_adler32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyZlib_adler32 DD imagerel PyZlib_adler32+134
	DD	imagerel PyZlib_adler32+217
	DD	imagerel $chain$4$PyZlib_adler32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyZlib_adler32 DD imagerel PyZlib_adler32+217
	DD	imagerel PyZlib_adler32+272
	DD	imagerel $chain$5$PyZlib_adler32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyZlib_adler32 DD imagerel PyZlib_adler32+272
	DD	imagerel PyZlib_adler32+337
	DD	imagerel $chain$6$PyZlib_adler32
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyZlib_adler32 DD 021H
	DD	imagerel PyZlib_adler32
	DD	imagerel PyZlib_adler32+80
	DD	imagerel $unwind$PyZlib_adler32
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyZlib_adler32 DD 021H
	DD	imagerel PyZlib_adler32+80
	DD	imagerel PyZlib_adler32+134
	DD	imagerel $chain$3$PyZlib_adler32
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyZlib_adler32 DD 020821H
	DD	0106408H
	DD	imagerel PyZlib_adler32+80
	DD	imagerel PyZlib_adler32+134
	DD	imagerel $chain$3$PyZlib_adler32
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyZlib_adler32 DD 061721H
	DD	0ec417H
	DD	0f740dH
	DD	0135408H
	DD	imagerel PyZlib_adler32
	DD	imagerel PyZlib_adler32+80
	DD	imagerel $unwind$PyZlib_adler32
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_adler32 DD 043e01H
	DD	012343eH
	DD	011010aH
xdata	ENDS
;	COMDAT ??_C@_0N@FFFDMCPK@y?$CK?$HMI?3adler32?$AA@
CONST	SEGMENT
??_C@_0N@FFFDMCPK@y?$CK?$HMI?3adler32?$AA@ DB 'y*|I:adler32', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyZlib_adler32
_TEXT	SEGMENT
pbuf$ = 32
self$ = 144
args$ = 152
adler32val$ = 160
PyZlib_adler32 PROC					; COMDAT

; 1076 : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1077 :     unsigned int adler32val = 1;  /* adler32(0L, Z_NULL, 0) */
; 1078 :     Py_buffer pbuf;
; 1079 : 
; 1080 :     if (!PyArg_ParseTuple(args, "y*|I:adler32", &pbuf, &adler32val))

  0000a	48 8b ca	 mov	 rcx, rdx
  0000d	4c 8d 48 18	 lea	 r9, QWORD PTR [rax+24]
  00011	4c 8d 40 98	 lea	 r8, QWORD PTR [rax-104]
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@FFFDMCPK@y?$CK?$HMI?3adler32?$AA@
  0001c	c7 40 18 01 00
	00 00		 mov	 DWORD PTR [rax+24], 1
  00023	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00028	85 c0		 test	 eax, eax
  0002a	75 0a		 jne	 SHORT $LN5@PyZlib_adl

; 1081 :         return NULL;

  0002c	33 c0		 xor	 eax, eax

; 1103 : }

  0002e	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00035	c3		 ret	 0
$LN5@PyZlib_adl:
  00036	48 89 9c 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rbx

; 1082 :     /* Releasing the GIL for very small buffers is inefficient
; 1083 :        and may lower performance */
; 1084 :     if (pbuf.len > 1024*5) {

  0003e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR pbuf$[rsp+16]
  00043	48 81 fb 00 14
	00 00		 cmp	 rbx, 5120		; 00001400H
  0004a	0f 8e c0 00 00
	00		 jle	 $LN4@PyZlib_adl

; 1085 :         unsigned char *buf = pbuf.buf;

  00050	48 89 ac 24 98
	00 00 00	 mov	 QWORD PTR [rsp+152], rbp
  00058	48 89 7c 24 78	 mov	 QWORD PTR [rsp+120], rdi
  0005d	48 8b 7c 24 20	 mov	 rdi, QWORD PTR pbuf$[rsp]
  00062	4c 89 64 24 70	 mov	 QWORD PTR [rsp+112], r12

; 1086 :         Py_ssize_t len = pbuf.len;
; 1087 : 
; 1088 :         Py_BEGIN_ALLOW_THREADS

  00067	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1089 :         /* Avoid truncation of length for very large buffers. adler32() takes
; 1090 :            length as an unsigned int, which may be narrower than Py_ssize_t. */
; 1091 :         while (len > (size_t) UINT_MAX) {

  0006c	41 bc ff ff ff
	ff		 mov	 r12d, -1		; ffffffffH
  00072	48 8b e8	 mov	 rbp, rax
  00075	49 3b dc	 cmp	 rbx, r12
  00078	76 5f		 jbe	 SHORT $LN10@PyZlib_adl

; 1085 :         unsigned char *buf = pbuf.buf;

  0007a	33 d2		 xor	 edx, edx
  0007c	48 b8 00 00 00
	00 ff ff ff ff	 mov	 rax, -4294967296	; ffffffff00000000H
  00086	48 89 b4 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rsi
  0008e	48 03 c3	 add	 rax, rbx
  00091	49 f7 f4	 div	 r12
  00094	48 8d 70 01	 lea	 rsi, QWORD PTR [rax+1]

; 1089 :         /* Avoid truncation of length for very large buffers. adler32() takes
; 1090 :            length as an unsigned int, which may be narrower than Py_ssize_t. */
; 1091 :         while (len > (size_t) UINT_MAX) {

  00098	48 b8 01 00 00
	00 ff ff ff ff	 mov	 rax, -4294967295	; ffffffff00000001H
  000a2	48 8b ce	 mov	 rcx, rsi
  000a5	48 0f af c8	 imul	 rcx, rax
  000a9	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR adler32val$[rsp]
  000b0	48 03 d9	 add	 rbx, rcx
$LL3@PyZlib_adl:

; 1092 :             adler32val = adler32(adler32val, buf, UINT_MAX);

  000b3	45 8b c4	 mov	 r8d, r12d
  000b6	48 8b d7	 mov	 rdx, rdi
  000b9	8b c8		 mov	 ecx, eax
  000bb	e8 00 00 00 00	 call	 adler32

; 1093 :             buf += (size_t) UINT_MAX;

  000c0	49 03 fc	 add	 rdi, r12
  000c3	48 ff ce	 dec	 rsi
  000c6	89 84 24 a0 00
	00 00		 mov	 DWORD PTR adler32val$[rsp], eax
  000cd	75 e4		 jne	 SHORT $LL3@PyZlib_adl
  000cf	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR [rsp+128]

; 1089 :         /* Avoid truncation of length for very large buffers. adler32() takes
; 1090 :            length as an unsigned int, which may be narrower than Py_ssize_t. */
; 1091 :         while (len > (size_t) UINT_MAX) {

  000d7	eb 07		 jmp	 SHORT $LN2@PyZlib_adl
$LN10@PyZlib_adl:
  000d9	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR adler32val$[rsp]
$LN2@PyZlib_adl:

; 1094 :             len -= (size_t) UINT_MAX;
; 1095 :         }
; 1096 :         adler32val = adler32(adler32val, buf, len);

  000e0	44 8b c3	 mov	 r8d, ebx
  000e3	48 8b d7	 mov	 rdx, rdi
  000e6	8b c8		 mov	 ecx, eax
  000e8	e8 00 00 00 00	 call	 adler32

; 1097 :         Py_END_ALLOW_THREADS

  000ed	48 8b cd	 mov	 rcx, rbp
  000f0	89 84 24 a0 00
	00 00		 mov	 DWORD PTR adler32val$[rsp], eax
  000f7	e8 00 00 00 00	 call	 PyEval_RestoreThread
  000fc	4c 8b 64 24 70	 mov	 r12, QWORD PTR [rsp+112]
  00101	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]
  00106	48 8b ac 24 98
	00 00 00	 mov	 rbp, QWORD PTR [rsp+152]

; 1098 :     } else {

  0010e	eb 1b		 jmp	 SHORT $LN1@PyZlib_adl
$LN4@PyZlib_adl:

; 1099 :         adler32val = adler32(adler32val, pbuf.buf, pbuf.len);

  00110	48 8b 54 24 20	 mov	 rdx, QWORD PTR pbuf$[rsp]
  00115	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR adler32val$[rsp]
  0011c	44 8b c3	 mov	 r8d, ebx
  0011f	e8 00 00 00 00	 call	 adler32
  00124	89 84 24 a0 00
	00 00		 mov	 DWORD PTR adler32val$[rsp], eax
$LN1@PyZlib_adl:

; 1100 :     }
; 1101 :     PyBuffer_Release(&pbuf);

  0012b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00130	e8 00 00 00 00	 call	 PyBuffer_Release

; 1102 :     return PyLong_FromUnsignedLong(adler32val & 0xffffffffU);

  00135	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR adler32val$[rsp]
  0013c	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
  00141	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR [rsp+144]

; 1103 : }

  00149	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00150	c3		 ret	 0
PyZlib_adler32 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@IKICDLGJ@y?$CK?$HMI?3crc32?$AA@	; `string'
EXTRN	crc32:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_crc32 DD imagerel PyZlib_crc32
	DD	imagerel PyZlib_crc32+90
	DD	imagerel $unwind$PyZlib_crc32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyZlib_crc32 DD imagerel PyZlib_crc32+90
	DD	imagerel PyZlib_crc32+134
	DD	imagerel $chain$3$PyZlib_crc32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyZlib_crc32 DD imagerel PyZlib_crc32+134
	DD	imagerel PyZlib_crc32+217
	DD	imagerel $chain$4$PyZlib_crc32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyZlib_crc32 DD imagerel PyZlib_crc32+217
	DD	imagerel PyZlib_crc32+262
	DD	imagerel $chain$5$PyZlib_crc32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyZlib_crc32 DD imagerel PyZlib_crc32+262
	DD	imagerel PyZlib_crc32+322
	DD	imagerel $chain$6$PyZlib_crc32
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyZlib_crc32 DD 021H
	DD	imagerel PyZlib_crc32
	DD	imagerel PyZlib_crc32+90
	DD	imagerel $unwind$PyZlib_crc32
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyZlib_crc32 DD 021H
	DD	imagerel PyZlib_crc32+90
	DD	imagerel PyZlib_crc32+134
	DD	imagerel $chain$3$PyZlib_crc32
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyZlib_crc32 DD 020821H
	DD	0106408H
	DD	imagerel PyZlib_crc32+90
	DD	imagerel PyZlib_crc32+134
	DD	imagerel $chain$3$PyZlib_crc32
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyZlib_crc32 DD 040d21H
	DD	0ec40dH
	DD	0135408H
	DD	imagerel PyZlib_crc32
	DD	imagerel PyZlib_crc32+90
	DD	imagerel $unwind$PyZlib_crc32
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_crc32 DD 064301H
	DD	0f7443H
	DD	012343eH
	DD	011010aH
xdata	ENDS
;	COMDAT ??_C@_0L@IKICDLGJ@y?$CK?$HMI?3crc32?$AA@
CONST	SEGMENT
??_C@_0L@IKICDLGJ@y?$CK?$HMI?3crc32?$AA@ DB 'y*|I:crc32', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyZlib_crc32
_TEXT	SEGMENT
pbuf$ = 32
self$ = 144
args$ = 152
crc32val$ = 160
PyZlib_crc32 PROC					; COMDAT

; 1113 : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1114 :     unsigned int crc32val = 0;  /* crc32(0L, Z_NULL, 0) */
; 1115 :     Py_buffer pbuf;
; 1116 :     int signed_val;
; 1117 : 
; 1118 :     if (!PyArg_ParseTuple(args, "y*|I:crc32", &pbuf, &crc32val))

  0000a	48 8b ca	 mov	 rcx, rdx
  0000d	4c 8d 48 18	 lea	 r9, QWORD PTR [rax+24]
  00011	4c 8d 40 98	 lea	 r8, QWORD PTR [rax-104]
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@IKICDLGJ@y?$CK?$HMI?3crc32?$AA@
  0001c	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [rax+24], 0
  00023	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00028	85 c0		 test	 eax, eax
  0002a	75 0a		 jne	 SHORT $LN5@PyZlib_crc

; 1119 :         return NULL;

  0002c	33 c0		 xor	 eax, eax

; 1141 : }

  0002e	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00035	c3		 ret	 0
$LN5@PyZlib_crc:
  00036	48 89 9c 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rbx
  0003e	48 89 7c 24 78	 mov	 QWORD PTR [rsp+120], rdi

; 1120 :     /* Releasing the GIL for very small buffers is inefficient
; 1121 :        and may lower performance */
; 1122 :     if (pbuf.len > 1024*5) {

  00043	48 8b 7c 24 30	 mov	 rdi, QWORD PTR pbuf$[rsp+16]
  00048	48 81 ff 00 14
	00 00		 cmp	 rdi, 5120		; 00001400H
  0004f	0f 8e b1 00 00
	00		 jle	 $LN4@PyZlib_crc

; 1123 :         unsigned char *buf = pbuf.buf;

  00055	48 8b 5c 24 20	 mov	 rbx, QWORD PTR pbuf$[rsp]
  0005a	48 89 ac 24 98
	00 00 00	 mov	 QWORD PTR [rsp+152], rbp
  00062	4c 89 64 24 70	 mov	 QWORD PTR [rsp+112], r12

; 1124 :         Py_ssize_t len = pbuf.len;
; 1125 : 
; 1126 :         Py_BEGIN_ALLOW_THREADS

  00067	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1127 :         /* Avoid truncation of length for very large buffers. crc32() takes
; 1128 :            length as an unsigned int, which may be narrower than Py_ssize_t. */
; 1129 :         while (len > (size_t) UINT_MAX) {

  0006c	41 bc ff ff ff
	ff		 mov	 r12d, -1		; ffffffffH
  00072	48 8b e8	 mov	 rbp, rax
  00075	49 3b fc	 cmp	 rdi, r12
  00078	76 5f		 jbe	 SHORT $LN10@PyZlib_crc

; 1123 :         unsigned char *buf = pbuf.buf;

  0007a	33 d2		 xor	 edx, edx
  0007c	48 b8 00 00 00
	00 ff ff ff ff	 mov	 rax, -4294967296	; ffffffff00000000H
  00086	48 89 b4 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rsi
  0008e	48 03 c7	 add	 rax, rdi
  00091	49 f7 f4	 div	 r12
  00094	48 8d 70 01	 lea	 rsi, QWORD PTR [rax+1]

; 1127 :         /* Avoid truncation of length for very large buffers. crc32() takes
; 1128 :            length as an unsigned int, which may be narrower than Py_ssize_t. */
; 1129 :         while (len > (size_t) UINT_MAX) {

  00098	48 b8 01 00 00
	00 ff ff ff ff	 mov	 rax, -4294967295	; ffffffff00000001H
  000a2	48 8b ce	 mov	 rcx, rsi
  000a5	48 0f af c8	 imul	 rcx, rax
  000a9	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR crc32val$[rsp]
  000b0	48 03 f9	 add	 rdi, rcx
$LL3@PyZlib_crc:

; 1130 :             crc32val = crc32(crc32val, buf, UINT_MAX);

  000b3	45 8b c4	 mov	 r8d, r12d
  000b6	48 8b d3	 mov	 rdx, rbx
  000b9	8b c8		 mov	 ecx, eax
  000bb	e8 00 00 00 00	 call	 crc32

; 1131 :             buf += (size_t) UINT_MAX;

  000c0	49 03 dc	 add	 rbx, r12
  000c3	48 ff ce	 dec	 rsi
  000c6	89 84 24 a0 00
	00 00		 mov	 DWORD PTR crc32val$[rsp], eax
  000cd	75 e4		 jne	 SHORT $LL3@PyZlib_crc
  000cf	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR [rsp+128]

; 1127 :         /* Avoid truncation of length for very large buffers. crc32() takes
; 1128 :            length as an unsigned int, which may be narrower than Py_ssize_t. */
; 1129 :         while (len > (size_t) UINT_MAX) {

  000d7	eb 07		 jmp	 SHORT $LN2@PyZlib_crc
$LN10@PyZlib_crc:
  000d9	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR crc32val$[rsp]
$LN2@PyZlib_crc:

; 1132 :             len -= (size_t) UINT_MAX;
; 1133 :         }
; 1134 :         signed_val = crc32(crc32val, buf, len);

  000e0	44 8b c7	 mov	 r8d, edi
  000e3	48 8b d3	 mov	 rdx, rbx
  000e6	8b c8		 mov	 ecx, eax
  000e8	e8 00 00 00 00	 call	 crc32

; 1135 :         Py_END_ALLOW_THREADS

  000ed	48 8b cd	 mov	 rcx, rbp
  000f0	8b d8		 mov	 ebx, eax
  000f2	e8 00 00 00 00	 call	 PyEval_RestoreThread
  000f7	4c 8b 64 24 70	 mov	 r12, QWORD PTR [rsp+112]
  000fc	48 8b ac 24 98
	00 00 00	 mov	 rbp, QWORD PTR [rsp+152]

; 1136 :     } else {

  00104	eb 16		 jmp	 SHORT $LN1@PyZlib_crc
$LN4@PyZlib_crc:

; 1137 :         signed_val = crc32(crc32val, pbuf.buf, pbuf.len);

  00106	48 8b 54 24 20	 mov	 rdx, QWORD PTR pbuf$[rsp]
  0010b	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR crc32val$[rsp]
  00112	44 8b c7	 mov	 r8d, edi
  00115	e8 00 00 00 00	 call	 crc32
  0011a	8b d8		 mov	 ebx, eax
$LN1@PyZlib_crc:

; 1138 :     }
; 1139 :     PyBuffer_Release(&pbuf);

  0011c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00121	e8 00 00 00 00	 call	 PyBuffer_Release

; 1140 :     return PyLong_FromUnsignedLong(signed_val & 0xffffffffU);

  00126	8b cb		 mov	 ecx, ebx
  00128	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
  0012d	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]
  00132	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR [rsp+144]

; 1141 : }

  0013a	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00141	c3		 ret	 0
PyZlib_crc32 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@EKHGKOEI@__version__?$AA@		; `string'
PUBLIC	??_C@_03HLLJOCDO@1?40?$AA@			; `string'
PUBLIC	??_C@_0BF@BKLGIFIO@ZLIB_RUNTIME_VERSION?$AA@	; `string'
PUBLIC	??_C@_0N@CEDJGPLC@ZLIB_VERSION?$AA@		; `string'
PUBLIC	??_C@_0N@JBPDPLFF@Z_FULL_FLUSH?$AA@		; `string'
PUBLIC	??_C@_0N@KDLIEJHI@Z_SYNC_FLUSH?$AA@		; `string'
PUBLIC	??_C@_0L@JLINHBLB@Z_NO_FLUSH?$AA@		; `string'
PUBLIC	??_C@_08CKIFHOEP@Z_FINISH?$AA@			; `string'
PUBLIC	??_C@_0BD@BOJLLCPN@Z_DEFAULT_STRATEGY?$AA@	; `string'
PUBLIC	??_C@_0P@MOLNDBMM@Z_HUFFMAN_ONLY?$AA@		; `string'
PUBLIC	??_C@_0L@NKMLDFOL@Z_FILTERED?$AA@		; `string'
PUBLIC	??_C@_0BG@HFLKKCF@Z_DEFAULT_COMPRESSION?$AA@	; `string'
PUBLIC	??_C@_0BD@CKPPBPCJ@Z_BEST_COMPRESSION?$AA@	; `string'
PUBLIC	??_C@_0N@MIKPIAPL@Z_BEST_SPEED?$AA@		; `string'
PUBLIC	??_C@_0O@FGNNGBNA@DEF_MEM_LEVEL?$AA@		; `string'
PUBLIC	??_C@_08GHAMNDKB@DEFLATED?$AA@			; `string'
PUBLIC	??_C@_09MCABNBNK@MAX_WBITS?$AA@			; `string'
PUBLIC	??_C@_05KKCIMGE@error?$AA@			; `string'
PUBLIC	??_C@_0L@PKDNKAFK@zlib?4error?$AA@		; `string'
PUBLIC	PyInit_zlib
EXTRN	PyModule_AddStringConstant:PROC
EXTRN	zlibVersion:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyModule_AddIntConstant:PROC
EXTRN	PyModule_AddObject:PROC
EXTRN	PyErr_NewException:PROC
EXTRN	PyModule_Create2:PROC
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit_zlib DD imagerel $LN11
	DD	imagerel $LN11+55
	DD	imagerel $unwind$PyInit_zlib
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyInit_zlib DD imagerel $LN11+55
	DD	imagerel $LN11+83
	DD	imagerel $chain$0$PyInit_zlib
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyInit_zlib DD imagerel $LN11+83
	DD	imagerel $LN11+513
	DD	imagerel $chain$2$PyInit_zlib
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyInit_zlib DD 020021H
	DD	043400H
	DD	imagerel $LN11
	DD	imagerel $LN11+55
	DD	imagerel $unwind$PyInit_zlib
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyInit_zlib DD 020521H
	DD	043405H
	DD	imagerel $LN11
	DD	imagerel $LN11+55
	DD	imagerel $unwind$PyInit_zlib
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_zlib DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0M@EKHGKOEI@__version__?$AA@
CONST	SEGMENT
??_C@_0M@EKHGKOEI@__version__?$AA@ DB '__version__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HLLJOCDO@1?40?$AA@
CONST	SEGMENT
??_C@_03HLLJOCDO@1?40?$AA@ DB '1.0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BKLGIFIO@ZLIB_RUNTIME_VERSION?$AA@
CONST	SEGMENT
??_C@_0BF@BKLGIFIO@ZLIB_RUNTIME_VERSION?$AA@ DB 'ZLIB_RUNTIME_VERSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CEDJGPLC@ZLIB_VERSION?$AA@
CONST	SEGMENT
??_C@_0N@CEDJGPLC@ZLIB_VERSION?$AA@ DB 'ZLIB_VERSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JBPDPLFF@Z_FULL_FLUSH?$AA@
CONST	SEGMENT
??_C@_0N@JBPDPLFF@Z_FULL_FLUSH?$AA@ DB 'Z_FULL_FLUSH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KDLIEJHI@Z_SYNC_FLUSH?$AA@
CONST	SEGMENT
??_C@_0N@KDLIEJHI@Z_SYNC_FLUSH?$AA@ DB 'Z_SYNC_FLUSH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JLINHBLB@Z_NO_FLUSH?$AA@
CONST	SEGMENT
??_C@_0L@JLINHBLB@Z_NO_FLUSH?$AA@ DB 'Z_NO_FLUSH', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CKIFHOEP@Z_FINISH?$AA@
CONST	SEGMENT
??_C@_08CKIFHOEP@Z_FINISH?$AA@ DB 'Z_FINISH', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BOJLLCPN@Z_DEFAULT_STRATEGY?$AA@
CONST	SEGMENT
??_C@_0BD@BOJLLCPN@Z_DEFAULT_STRATEGY?$AA@ DB 'Z_DEFAULT_STRATEGY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MOLNDBMM@Z_HUFFMAN_ONLY?$AA@
CONST	SEGMENT
??_C@_0P@MOLNDBMM@Z_HUFFMAN_ONLY?$AA@ DB 'Z_HUFFMAN_ONLY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NKMLDFOL@Z_FILTERED?$AA@
CONST	SEGMENT
??_C@_0L@NKMLDFOL@Z_FILTERED?$AA@ DB 'Z_FILTERED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HFLKKCF@Z_DEFAULT_COMPRESSION?$AA@
CONST	SEGMENT
??_C@_0BG@HFLKKCF@Z_DEFAULT_COMPRESSION?$AA@ DB 'Z_DEFAULT_COMPRESSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CKPPBPCJ@Z_BEST_COMPRESSION?$AA@
CONST	SEGMENT
??_C@_0BD@CKPPBPCJ@Z_BEST_COMPRESSION?$AA@ DB 'Z_BEST_COMPRESSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MIKPIAPL@Z_BEST_SPEED?$AA@
CONST	SEGMENT
??_C@_0N@MIKPIAPL@Z_BEST_SPEED?$AA@ DB 'Z_BEST_SPEED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FGNNGBNA@DEF_MEM_LEVEL?$AA@
CONST	SEGMENT
??_C@_0O@FGNNGBNA@DEF_MEM_LEVEL?$AA@ DB 'DEF_MEM_LEVEL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHAMNDKB@DEFLATED?$AA@
CONST	SEGMENT
??_C@_08GHAMNDKB@DEFLATED?$AA@ DB 'DEFLATED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MCABNBNK@MAX_WBITS?$AA@
CONST	SEGMENT
??_C@_09MCABNBNK@MAX_WBITS?$AA@ DB 'MAX_WBITS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKCIMGE@error?$AA@
CONST	SEGMENT
??_C@_05KKCIMGE@error?$AA@ DB 'error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PKDNKAFK@zlib?4error?$AA@
CONST	SEGMENT
??_C@_0L@PKDNKAFK@zlib?4error?$AA@ DB 'zlib.error', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyInit_zlib
_TEXT	SEGMENT
PyInit_zlib PROC					; COMDAT

; 1253 : {

$LN11:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1254 :     PyObject *m, *ver;
; 1255 :     if (PyType_Ready(&Comptype) < 0)

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Comptype
  0000b	e8 00 00 00 00	 call	 PyType_Ready
  00010	85 c0		 test	 eax, eax
  00012	79 07		 jns	 SHORT $LN6@PyInit_zli
$LN10@PyInit_zli:

; 1256 :             return NULL;

  00014	33 c0		 xor	 eax, eax

; 1294 : }

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
$LN6@PyInit_zli:

; 1257 :     if (PyType_Ready(&Decomptype) < 0)

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Decomptype
  00022	e8 00 00 00 00	 call	 PyType_Ready
  00027	85 c0		 test	 eax, eax

; 1258 :             return NULL;

  00029	78 e9		 js	 SHORT $LN10@PyInit_zli

; 1259 :     m = PyModule_Create(&zlibmodule);

  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:zlibmodule
  00032	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00037	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0003c	e8 00 00 00 00	 call	 PyModule_Create2
  00041	48 8b d8	 mov	 rbx, rax

; 1260 :     if (m == NULL)

  00044	48 85 c0	 test	 rax, rax
  00047	75 0a		 jne	 SHORT $LN4@PyInit_zli
  00049	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 1294 : }

  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	c3		 ret	 0
$LN4@PyInit_zli:

; 1261 :         return NULL;
; 1262 : 
; 1263 :     ZlibError = PyErr_NewException("zlib.error", NULL, NULL);

  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PKDNKAFK@zlib?4error?$AA@
  0005a	45 33 c0	 xor	 r8d, r8d
  0005d	33 d2		 xor	 edx, edx
  0005f	e8 00 00 00 00	 call	 PyErr_NewException
  00064	48 89 05 00 00
	00 00		 mov	 QWORD PTR ZlibError, rax

; 1264 :     if (ZlibError != NULL) {

  0006b	48 85 c0	 test	 rax, rax
  0006e	74 1e		 je	 SHORT $LN3@PyInit_zli

; 1265 :         Py_INCREF(ZlibError);

  00070	48 8b c8	 mov	 rcx, rax
  00073	e8 00 00 00 00	 call	 _Py_IncRef

; 1266 :         PyModule_AddObject(m, "error", ZlibError);

  00078	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ZlibError
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KKCIMGE@error?$AA@
  00086	48 8b cb	 mov	 rcx, rbx
  00089	e8 00 00 00 00	 call	 PyModule_AddObject
$LN3@PyInit_zli:

; 1267 :     }
; 1268 :     PyModule_AddIntConstant(m, "MAX_WBITS", MAX_WBITS);

  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09MCABNBNK@MAX_WBITS?$AA@
  00095	41 b8 0f 00 00
	00		 mov	 r8d, 15
  0009b	48 8b cb	 mov	 rcx, rbx
  0009e	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1269 :     PyModule_AddIntConstant(m, "DEFLATED", DEFLATED);

  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08GHAMNDKB@DEFLATED?$AA@
  000aa	41 b8 08 00 00
	00		 mov	 r8d, 8
  000b0	48 8b cb	 mov	 rcx, rbx
  000b3	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1270 :     PyModule_AddIntConstant(m, "DEF_MEM_LEVEL", DEF_MEM_LEVEL);

  000b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@FGNNGBNA@DEF_MEM_LEVEL?$AA@
  000bf	41 b8 08 00 00
	00		 mov	 r8d, 8
  000c5	48 8b cb	 mov	 rcx, rbx
  000c8	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1271 :     PyModule_AddIntConstant(m, "Z_BEST_SPEED", Z_BEST_SPEED);

  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MIKPIAPL@Z_BEST_SPEED?$AA@
  000d4	41 b8 01 00 00
	00		 mov	 r8d, 1
  000da	48 8b cb	 mov	 rcx, rbx
  000dd	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1272 :     PyModule_AddIntConstant(m, "Z_BEST_COMPRESSION", Z_BEST_COMPRESSION);

  000e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@CKPPBPCJ@Z_BEST_COMPRESSION?$AA@
  000e9	41 b8 09 00 00
	00		 mov	 r8d, 9
  000ef	48 8b cb	 mov	 rcx, rbx
  000f2	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1273 :     PyModule_AddIntConstant(m, "Z_DEFAULT_COMPRESSION", Z_DEFAULT_COMPRESSION);

  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HFLKKCF@Z_DEFAULT_COMPRESSION?$AA@
  000fe	41 83 c8 ff	 or	 r8d, -1
  00102	48 8b cb	 mov	 rcx, rbx
  00105	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1274 :     PyModule_AddIntConstant(m, "Z_FILTERED", Z_FILTERED);

  0010a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NKMLDFOL@Z_FILTERED?$AA@
  00111	41 b8 01 00 00
	00		 mov	 r8d, 1
  00117	48 8b cb	 mov	 rcx, rbx
  0011a	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1275 :     PyModule_AddIntConstant(m, "Z_HUFFMAN_ONLY", Z_HUFFMAN_ONLY);

  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@MOLNDBMM@Z_HUFFMAN_ONLY?$AA@
  00126	41 b8 02 00 00
	00		 mov	 r8d, 2
  0012c	48 8b cb	 mov	 rcx, rbx
  0012f	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1276 :     PyModule_AddIntConstant(m, "Z_DEFAULT_STRATEGY", Z_DEFAULT_STRATEGY);

  00134	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BOJLLCPN@Z_DEFAULT_STRATEGY?$AA@
  0013b	45 33 c0	 xor	 r8d, r8d
  0013e	48 8b cb	 mov	 rcx, rbx
  00141	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1277 : 
; 1278 :     PyModule_AddIntConstant(m, "Z_FINISH", Z_FINISH);

  00146	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08CKIFHOEP@Z_FINISH?$AA@
  0014d	41 b8 04 00 00
	00		 mov	 r8d, 4
  00153	48 8b cb	 mov	 rcx, rbx
  00156	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1279 :     PyModule_AddIntConstant(m, "Z_NO_FLUSH", Z_NO_FLUSH);

  0015b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@JLINHBLB@Z_NO_FLUSH?$AA@
  00162	45 33 c0	 xor	 r8d, r8d
  00165	48 8b cb	 mov	 rcx, rbx
  00168	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1280 :     PyModule_AddIntConstant(m, "Z_SYNC_FLUSH", Z_SYNC_FLUSH);

  0016d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@KDLIEJHI@Z_SYNC_FLUSH?$AA@
  00174	41 b8 02 00 00
	00		 mov	 r8d, 2
  0017a	48 8b cb	 mov	 rcx, rbx
  0017d	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1281 :     PyModule_AddIntConstant(m, "Z_FULL_FLUSH", Z_FULL_FLUSH);

  00182	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@JBPDPLFF@Z_FULL_FLUSH?$AA@
  00189	41 b8 03 00 00
	00		 mov	 r8d, 3
  0018f	48 8b cb	 mov	 rcx, rbx
  00192	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1282 : 
; 1283 :     ver = PyUnicode_FromString(ZLIB_VERSION);

  00197	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05DFCKICEH@1?42?45?$AA@
  0019e	e8 00 00 00 00	 call	 PyUnicode_FromString

; 1284 :     if (ver != NULL)

  001a3	48 85 c0	 test	 rax, rax
  001a6	74 12		 je	 SHORT $LN2@PyInit_zli

; 1285 :         PyModule_AddObject(m, "ZLIB_VERSION", ver);

  001a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@CEDJGPLC@ZLIB_VERSION?$AA@
  001af	4c 8b c0	 mov	 r8, rax
  001b2	48 8b cb	 mov	 rcx, rbx
  001b5	e8 00 00 00 00	 call	 PyModule_AddObject
$LN2@PyInit_zli:

; 1286 : 
; 1287 :     ver = PyUnicode_FromString(zlibVersion());

  001ba	e8 00 00 00 00	 call	 zlibVersion
  001bf	48 8b c8	 mov	 rcx, rax
  001c2	e8 00 00 00 00	 call	 PyUnicode_FromString

; 1288 :     if (ver != NULL)

  001c7	48 85 c0	 test	 rax, rax
  001ca	74 12		 je	 SHORT $LN1@PyInit_zli

; 1289 :         PyModule_AddObject(m, "ZLIB_RUNTIME_VERSION", ver);

  001cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@BKLGIFIO@ZLIB_RUNTIME_VERSION?$AA@
  001d3	4c 8b c0	 mov	 r8, rax
  001d6	48 8b cb	 mov	 rcx, rbx
  001d9	e8 00 00 00 00	 call	 PyModule_AddObject
$LN1@PyInit_zli:

; 1290 : 
; 1291 :     PyModule_AddStringConstant(m, "__version__", "1.0");

  001de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03HLLJOCDO@1?40?$AA@
  001e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@EKHGKOEI@__version__?$AA@
  001ec	48 8b cb	 mov	 rcx, rbx
  001ef	e8 00 00 00 00	 call	 PyModule_AddStringConstant

; 1292 : 
; 1293 :     return m;

  001f4	48 8b c3	 mov	 rax, rbx
  001f7	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]

; 1294 : }

  001fc	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00200	c3		 ret	 0
PyInit_zlib ENDP
_TEXT	ENDS
END
