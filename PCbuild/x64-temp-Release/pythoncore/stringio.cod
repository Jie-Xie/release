; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0N@EGKCMCGH@_io?4StringIO?$AA@		; `string'
PUBLIC	??_C@_0P@MGPKIIND@line_buffering?$AA@		; `string'
PUBLIC	??_C@_08EGHAIIMO@newlines?$AA@			; `string'
PUBLIC	??_C@_06IKJOPBFO@closed?$AA@			; `string'
PUBLIC	??_C@_0N@MOOGCAMH@__setstate__?$AA@		; `string'
PUBLIC	??_C@_0N@NAMJJHIO@__getstate__?$AA@		; `string'
PUBLIC	??_C@_08IBOGFJJC@writable?$AA@			; `string'
PUBLIC	??_C@_08INDGGIBD@readable?$AA@			; `string'
PUBLIC	??_C@_08JPFEOKJG@seekable?$AA@			; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_04EDECCOGL@seek?$AA@			; `string'
PUBLIC	??_C@_08MABILMFG@truncate?$AA@			; `string'
PUBLIC	??_C@_04LBPCFPDD@tell?$AA@			; `string'
PUBLIC	??_C@_08KBCDPPMN@readline?$AA@			; `string'
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
PUBLIC	??_C@_08ODLBJABI@getvalue?$AA@			; `string'
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	PyStringIO_Type
;	COMDAT ??_C@_0N@EGKCMCGH@_io?4StringIO?$AA@
CONST	SEGMENT
??_C@_0N@EGKCMCGH@_io?4StringIO?$AA@ DB '_io.StringIO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MGPKIIND@line_buffering?$AA@
CONST	SEGMENT
??_C@_0P@MGPKIIND@line_buffering?$AA@ DB 'line_buffering', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EGHAIIMO@newlines?$AA@
CONST	SEGMENT
??_C@_08EGHAIIMO@newlines?$AA@ DB 'newlines', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKJOPBFO@closed?$AA@
CONST	SEGMENT
??_C@_06IKJOPBFO@closed?$AA@ DB 'closed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOOGCAMH@__setstate__?$AA@
CONST	SEGMENT
??_C@_0N@MOOGCAMH@__setstate__?$AA@ DB '__setstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAMJJHIO@__getstate__?$AA@
CONST	SEGMENT
??_C@_0N@NAMJJHIO@__getstate__?$AA@ DB '__getstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBOGFJJC@writable?$AA@
CONST	SEGMENT
??_C@_08IBOGFJJC@writable?$AA@ DB 'writable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08INDGGIBD@readable?$AA@
CONST	SEGMENT
??_C@_08INDGGIBD@readable?$AA@ DB 'readable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPFEOKJG@seekable?$AA@
CONST	SEGMENT
??_C@_08JPFEOKJG@seekable?$AA@ DB 'seekable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EDECCOGL@seek?$AA@
CONST	SEGMENT
??_C@_04EDECCOGL@seek?$AA@ DB 'seek', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MABILMFG@truncate?$AA@
CONST	SEGMENT
??_C@_08MABILMFG@truncate?$AA@ DB 'truncate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBPCFPDD@tell?$AA@
CONST	SEGMENT
??_C@_04LBPCFPDD@tell?$AA@ DB 'tell', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBCDPPMN@readline?$AA@
CONST	SEGMENT
??_C@_08KBCDPPMN@readline?$AA@ DB 'readline', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ODLBJABI@getvalue?$AA@
CONST	SEGMENT
??_C@_08ODLBJABI@getvalue?$AA@ DB 'getvalue', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
stringio_doc DB	'Text I/O implementation using an in-memory buffer.', 0aH
	DB	0aH, 'The initial_value argument sets the value of object.  Th'
	DB	'e newline', 0aH, 'argument is like the one of TextIOWrapper'''
	DB	's constructor.', 00H
	ORG $+1
stringio_getvalue_doc DB 'Retrieve the entire contents of the object.', 00H
	ORG $+4
stringio_tell_doc DB 'Tell the current file position.', 00H
stringio_read_doc DB 'Read at most n characters, returned as a string.', 0aH
	DB	0aH, 'If the argument is negative or omitted, read until EOF', 0aH
	DB	'is reached. Return an empty string at EOF.', 0aH, 00H
	ORG $+11
stringio_readline_doc DB 'Read until newline or EOF.', 0aH, 0aH, 'Returns'
	DB	' an empty string if EOF is hit immediately.', 0aH, 00H
stringio_truncate_doc DB 'Truncate size to pos.', 0aH, 0aH, 'The pos argu'
	DB	'ment defaults to the current file position, as', 0aH, 'return'
	DB	'ed by tell().  The current file position is unchanged.', 0aH, 'R'
	DB	'eturns the new absolute position.', 0aH, 00H
	ORG $+13
stringio_seek_doc DB 'Change stream position.', 0aH, 0aH, 'Seek to charac'
	DB	'ter offset pos relative to position indicated by whence:', 0aH
	DB	'    0  Start of stream (the default).  pos should be >= 0;', 0aH
	DB	'    1  Current position - pos must be 0;', 0aH, '    2  End o'
	DB	'f stream - pos must be 0.', 0aH, 'Returns the new absolute po'
	DB	'sition.', 0aH, 00H
	ORG $+2
stringio_write_doc DB 'Write string to file.', 0aH, 0aH, 'Returns the num'
	DB	'ber of characters written, which is always equal to', 0aH, 't'
	DB	'he length of the string.', 0aH, 00H
	ORG $+11
stringio_close_doc DB 'Close the IO object. Attempting any further operat'
	DB	'ion after the', 0aH, 'object is closed will raise a ValueErro'
	DB	'r.', 0aH, 0aH, 'This method has no effect if the file is alre'
	DB	'ady closed.', 0aH, 00H
	ORG $+3
stringio_readable_doc DB 'readable() -> bool. Returns True if the IO obje'
	DB	'ct can be read.', 00H
	ORG $+9
stringio_writable_doc DB 'writable() -> bool. Returns True if the IO obje'
	DB	'ct can be written.', 00H
	ORG $+14
stringio_seekable_doc DB 'seekable() -> bool. Returns True if the IO obje'
	DB	'ct can be seeked.', 00H
	ORG $+15
stringio_methods DQ FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:stringio_close
	DD	04H
	ORG $+4
	DQ	FLAT:stringio_close_doc
	DQ	FLAT:??_C@_08ODLBJABI@getvalue?$AA@
	DQ	FLAT:stringio_getvalue
	DD	04H
	ORG $+4
	DQ	FLAT:stringio_getvalue_doc
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:stringio_read
	DD	01H
	ORG $+4
	DQ	FLAT:stringio_read_doc
	DQ	FLAT:??_C@_08KBCDPPMN@readline?$AA@
	DQ	FLAT:stringio_readline
	DD	01H
	ORG $+4
	DQ	FLAT:stringio_readline_doc
	DQ	FLAT:??_C@_04LBPCFPDD@tell?$AA@
	DQ	FLAT:stringio_tell
	DD	04H
	ORG $+4
	DQ	FLAT:stringio_tell_doc
	DQ	FLAT:??_C@_08MABILMFG@truncate?$AA@
	DQ	FLAT:stringio_truncate
	DD	01H
	ORG $+4
	DQ	FLAT:stringio_truncate_doc
	DQ	FLAT:??_C@_04EDECCOGL@seek?$AA@
	DQ	FLAT:stringio_seek
	DD	01H
	ORG $+4
	DQ	FLAT:stringio_seek_doc
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:stringio_write
	DD	08H
	ORG $+4
	DQ	FLAT:stringio_write_doc
	DQ	FLAT:??_C@_08JPFEOKJG@seekable?$AA@
	DQ	FLAT:stringio_seekable
	DD	04H
	ORG $+4
	DQ	FLAT:stringio_seekable_doc
	DQ	FLAT:??_C@_08INDGGIBD@readable?$AA@
	DQ	FLAT:stringio_readable
	DD	04H
	ORG $+4
	DQ	FLAT:stringio_readable_doc
	DQ	FLAT:??_C@_08IBOGFJJC@writable?$AA@
	DQ	FLAT:stringio_writable
	DD	04H
	ORG $+4
	DQ	FLAT:stringio_writable_doc
	DQ	FLAT:??_C@_0N@NAMJJHIO@__getstate__?$AA@
	DQ	FLAT:stringio_getstate
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:stringio_setstate
	DD	08H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
stringio_getset DQ FLAT:??_C@_06IKJOPBFO@closed?$AA@
	DQ	FLAT:stringio_closed
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08EGHAIIMO@newlines?$AA@
	DQ	FLAT:stringio_newlines
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@MGPKIIND@line_buffering?$AA@
	DQ	FLAT:stringio_line_buffering
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyStringIO_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0N@EGKCMCGH@_io?4StringIO?$AA@
	DQ	00000000000000d0H
	DQ	0000000000000000H
	DQ	FLAT:stringio_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:stringio_doc
	DQ	FLAT:stringio_traverse
	DQ	FLAT:stringio_clear
	DQ	0000000000000000H
	DQ	00000000000000c0H
	DQ	0000000000000000H
	DQ	FLAT:stringio_iternext
	DQ	FLAT:stringio_methods
	DQ	0000000000000000H
	DQ	FLAT:stringio_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	00000000000000b8H
	DQ	FLAT:stringio_init
	DQ	0000000000000000H
	DQ	FLAT:stringio_new
	ORG $+72
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@PGPOMJCD@new?5buffer?5size?5too?5large?$AA@ ; `string'
PUBLIC	__real@3ff2000000000000
PUBLIC	__real@43f0000000000000
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyMem_Realloc:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\modules\_io\stringio.c
pdata	SEGMENT
$pdata$resize_buffer DD imagerel resize_buffer
	DD	imagerel resize_buffer+263
	DD	imagerel $unwind$resize_buffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$resize_buffer DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BK@PGPOMJCD@new?5buffer?5size?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BK@PGPOMJCD@new?5buffer?5size?5too?5large?$AA@ DB 'new buffer size'
	DB	' too large', 00H				; `string'
CONST	ENDS
;	COMDAT __real@3ff2000000000000
CONST	SEGMENT
__real@3ff2000000000000 DQ 03ff2000000000000r	; 1.125
CONST	ENDS
;	COMDAT __real@43f0000000000000
CONST	SEGMENT
__real@43f0000000000000 DQ 043f0000000000000r	; 1.84467e+019
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT resize_buffer
_TEXT	SEGMENT
self$ = 48
size$ = 56
resize_buffer PROC					; COMDAT

; 73   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 74   :     /* Here, unsigned types are used to avoid dealing with signed integer
; 75   :        overflow, which is undefined in C. */
; 76   :     size_t alloc = self->buf_size;

  0000a	4c 8b 41 78	 mov	 r8, QWORD PTR [rcx+120]

; 77   :     Py_UCS4 *new_buf = NULL;
; 78   : 
; 79   :     assert(self->buf != NULL);
; 80   : 
; 81   :     /* Reserve one more char for line ending detection. */
; 82   :     size = size + 1;

  0000e	48 ff c2	 inc	 rdx

; 83   :     /* For simplicity, stay in the range of the signed type. Anyway, Python
; 84   :        doesn't allow strings to be longer than this. */
; 85   :     if (size > PY_SSIZE_T_MAX)

  00011	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0001b	48 8b f9	 mov	 rdi, rcx
  0001e	48 3b d0	 cmp	 rdx, rax
  00021	0f 87 bf 00 00
	00		 ja	 $overflow$20397

; 86   :         goto overflow;
; 87   : 
; 88   :     if (size < alloc / 2) {

  00027	49 8b c0	 mov	 rax, r8
  0002a	48 d1 e8	 shr	 rax, 1
  0002d	48 3b d0	 cmp	 rdx, rax

; 89   :         /* Major downsize; resize down to exact size. */
; 90   :         alloc = size + 1;

  00030	72 63		 jb	 SHORT $LN4@resize_buf

; 91   :     }
; 92   :     else if (size < alloc) {

  00032	49 3b d0	 cmp	 rdx, r8

; 93   :         /* Within allocated size; quick exit */
; 94   :         return 0;

  00035	0f 82 9e 00 00
	00		 jb	 $LN15@resize_buf

; 95   :     }
; 96   :     else if (size <= alloc * 1.125) {

  0003b	f2 0f 10 15 00
	00 00 00	 movsdx	 xmm2, QWORD PTR __real@43f0000000000000
  00043	66 0f ef c9	 pxor	 xmm1, xmm1
  00047	f2 48 0f 2a ca	 cvtsi2sd xmm1, rdx
  0004c	48 85 d2	 test	 rdx, rdx
  0004f	79 04		 jns	 SHORT $LN13@resize_buf
  00051	f2 0f 58 ca	 addsd	 xmm1, xmm2
$LN13@resize_buf:
  00055	66 0f ef c0	 pxor	 xmm0, xmm0
  00059	f2 49 0f 2a c0	 cvtsi2sd xmm0, r8
  0005e	4d 85 c0	 test	 r8, r8
  00061	79 04		 jns	 SHORT $LN12@resize_buf
  00063	f2 0f 58 c2	 addsd	 xmm0, xmm2
$LN12@resize_buf:
  00067	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff2000000000000
  0006f	66 0f 2f c1	 comisd	 xmm0, xmm1
  00073	72 20		 jb	 SHORT $LN4@resize_buf

; 97   :         /* Moderate upsize; overallocate similar to list_resize() */
; 98   :         alloc = size + (size >> 3) + (size < 9 ? 3 : 6);

  00075	48 83 fa 09	 cmp	 rdx, 9
  00079	b8 06 00 00 00	 mov	 eax, 6
  0007e	b9 03 00 00 00	 mov	 ecx, 3
  00083	0f 42 c1	 cmovb	 eax, ecx
  00086	48 8b da	 mov	 rbx, rdx
  00089	48 03 c2	 add	 rax, rdx
  0008c	48 c1 eb 03	 shr	 rbx, 3
  00090	48 03 d8	 add	 rbx, rax

; 99   :     }
; 100  :     else {

  00093	eb 04		 jmp	 SHORT $LN3@resize_buf
$LN4@resize_buf:

; 101  :         /* Major upsize; resize up to exact size */
; 102  :         alloc = size + 1;

  00095	48 8d 5a 01	 lea	 rbx, QWORD PTR [rdx+1]
$LN3@resize_buf:

; 103  :     }
; 104  : 
; 105  :     if (alloc > PY_SIZE_MAX / sizeof(Py_UCS4))

  00099	48 b8 ff ff ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427387903 ; 3fffffffffffffffH
  000a3	48 3b d8	 cmp	 rbx, rax
  000a6	77 3e		 ja	 SHORT $overflow$20397

; 106  :         goto overflow;
; 107  :     new_buf = (Py_UCS4 *)PyMem_Realloc(self->buf, alloc * sizeof(Py_UCS4));

  000a8	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  000ac	48 8d 14 9d 00
	00 00 00	 lea	 rdx, QWORD PTR [rbx*4]
  000b4	e8 00 00 00 00	 call	 PyMem_Realloc

; 108  :     if (new_buf == NULL) {

  000b9	48 85 c0	 test	 rax, rax
  000bc	75 13		 jne	 SHORT $LN1@resize_buf

; 109  :         PyErr_NoMemory();

  000be	e8 00 00 00 00	 call	 PyErr_NoMemory

; 120  :     return -1;

  000c3	83 c8 ff	 or	 eax, -1

; 121  : }

  000c6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000cb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cf	5f		 pop	 rdi
  000d0	c3		 ret	 0
$LN1@resize_buf:

; 110  :         return -1;
; 111  :     }
; 112  :     self->buf_size = alloc;

  000d1	48 89 5f 78	 mov	 QWORD PTR [rdi+120], rbx

; 113  :     self->buf = new_buf;

  000d5	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax
$LN15@resize_buf:

; 114  : 
; 115  :     return 0;

  000d9	33 c0		 xor	 eax, eax

; 121  : }

  000db	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000e0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e4	5f		 pop	 rdi
  000e5	c3		 ret	 0
$overflow$20397:

; 116  : 
; 117  :   overflow:
; 118  :     PyErr_SetString(PyExc_OverflowError,
; 119  :                     "new buffer size too large");

  000e6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  000ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@PGPOMJCD@new?5buffer?5size?5too?5large?$AA@
  000f4	e8 00 00 00 00	 call	 PyErr_SetString

; 121  : }

  000f9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000fe	83 c8 ff	 or	 eax, -1
  00101	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00105	5f		 pop	 rdi
  00106	c3		 ret	 0
resize_buffer ENDP
_TEXT	ENDS
EXTRN	_PyAccu_Accumulate:PROC
EXTRN	_PyAccu_Init:PROC
EXTRN	_PyAccu_Finish:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$make_intermediate DD imagerel make_intermediate
	DD	imagerel make_intermediate+138
	DD	imagerel $unwind$make_intermediate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_intermediate DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT make_intermediate
_TEXT	SEGMENT
self$ = 48
make_intermediate PROC					; COMDAT

; 125  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f9	 mov	 rdi, rcx

; 126  :     PyObject *intermediate = _PyAccu_Finish(&self->accu);

  00012	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  00019	e8 00 00 00 00	 call	 _PyAccu_Finish

; 127  :     self->state = STATE_REALIZED;

  0001e	c7 87 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rdi+128], 1
  00028	48 8b d8	 mov	 rbx, rax

; 128  :     if (intermediate == NULL)

  0002b	48 85 c0	 test	 rax, rax

; 129  :         return NULL;

  0002e	74 48		 je	 SHORT $LN6@make_inter

; 130  :     if (_PyAccu_Init(&self->accu) ||
; 131  :         _PyAccu_Accumulate(&self->accu, intermediate)) {

  00030	48 8d 8f 88 00
	00 00		 lea	 rcx, QWORD PTR [rdi+136]
  00037	e8 00 00 00 00	 call	 _PyAccu_Init
  0003c	85 c0		 test	 eax, eax
  0003e	75 30		 jne	 SHORT $LN1@make_inter
  00040	48 8d 8f 88 00
	00 00		 lea	 rcx, QWORD PTR [rdi+136]
  00047	48 8b d3	 mov	 rdx, rbx
  0004a	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  0004f	85 c0		 test	 eax, eax
  00051	75 1d		 jne	 SHORT $LN1@make_inter

; 133  :         return NULL;
; 134  :     }
; 135  :     self->state = STATE_ACCUMULATING;

  00053	c7 87 80 00 00
	00 02 00 00 00	 mov	 DWORD PTR [rdi+128], 2

; 136  :     return intermediate;

  0005d	48 8b c3	 mov	 rax, rbx

; 137  : }

  00060	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00065	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0006a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006e	5f		 pop	 rdi
  0006f	c3		 ret	 0
$LN1@make_inter:

; 132  :         Py_DECREF(intermediate);

  00070	48 8b cb	 mov	 rcx, rbx
  00073	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@make_inter:

; 137  : }

  00078	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00082	33 c0		 xor	 eax, eax
  00084	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00088	5f		 pop	 rdi
  00089	c3		 ret	 0
make_intermediate ENDP
_TEXT	ENDS
EXTRN	PyUnicode_AsUCS4:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$realize DD imagerel realize
	DD	imagerel realize+43
	DD	imagerel $unwind$realize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$realize DD imagerel realize+43
	DD	imagerel realize+75
	DD	imagerel $chain$0$realize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$realize DD imagerel realize+75
	DD	imagerel realize+149
	DD	imagerel $chain$3$realize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$realize DD imagerel realize+149
	DD	imagerel realize+172
	DD	imagerel $chain$5$realize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$realize DD 040021H
	DD	076400H
	DD	063400H
	DD	imagerel realize
	DD	imagerel realize+43
	DD	imagerel $unwind$realize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$realize DD 040521H
	DD	076405H
	DD	063400H
	DD	imagerel realize
	DD	imagerel realize+43
	DD	imagerel $unwind$realize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$realize DD 020521H
	DD	063405H
	DD	imagerel realize
	DD	imagerel realize+43
	DD	imagerel $unwind$realize
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$realize DD 020601H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT realize
_TEXT	SEGMENT
self$ = 48
realize	PROC						; COMDAT

; 141  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 142  :     Py_ssize_t len;
; 143  :     PyObject *intermediate;
; 144  : 
; 145  :     if (self->state == STATE_REALIZED)

  00006	83 b9 80 00 00
	00 01		 cmp	 DWORD PTR [rcx+128], 1
  0000d	48 8b f9	 mov	 rdi, rcx
  00010	75 08		 jne	 SHORT $LN4@realize

; 146  :         return 0;

  00012	33 c0		 xor	 eax, eax

; 169  : }

  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5f		 pop	 rdi
  00019	c3		 ret	 0
$LN4@realize:

; 147  :     assert(self->state == STATE_ACCUMULATING);
; 148  :     self->state = STATE_REALIZED;

  0001a	c7 81 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rcx+128], 1

; 149  : 
; 150  :     intermediate = _PyAccu_Finish(&self->accu);

  00024	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  0002b	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00030	e8 00 00 00 00	 call	 _PyAccu_Finish
  00035	48 8b d8	 mov	 rbx, rax

; 151  :     if (intermediate == NULL)

  00038	48 85 c0	 test	 rax, rax
  0003b	75 0e		 jne	 SHORT $LN3@realize

; 152  :         return -1;

  0003d	83 c8 ff	 or	 eax, -1
  00040	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 169  : }

  00045	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00049	5f		 pop	 rdi
  0004a	c3		 ret	 0
$LN3@realize:
  0004b	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi

; 153  : 
; 154  :     /* Append the intermediate string to the internal buffer.
; 155  :        The length should be equal to the current cursor position.
; 156  :      */
; 157  :     len = PyUnicode_GET_LENGTH(intermediate);

  00050	48 8b 70 60	 mov	 rsi, QWORD PTR [rax+96]

; 158  :     if (resize_buffer(self, len) < 0) {

  00054	48 8b cf	 mov	 rcx, rdi
  00057	48 8b d6	 mov	 rdx, rsi
  0005a	e8 00 00 00 00	 call	 resize_buffer

; 159  :         Py_DECREF(intermediate);

  0005f	48 8b cb	 mov	 rcx, rbx
  00062	85 c0		 test	 eax, eax

; 160  :         return -1;

  00064	78 17		 js	 SHORT $LN9@realize

; 161  :     }
; 162  :     if (!PyUnicode_AsUCS4(intermediate, self->buf, len, 0)) {

  00066	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  0006a	45 33 c9	 xor	 r9d, r9d
  0006d	4c 8b c6	 mov	 r8, rsi
  00070	e8 00 00 00 00	 call	 PyUnicode_AsUCS4

; 163  :         Py_DECREF(intermediate);

  00075	48 8b cb	 mov	 rcx, rbx
  00078	48 85 c0	 test	 rax, rax
  0007b	75 18		 jne	 SHORT $LN1@realize
$LN9@realize:
  0007d	e8 00 00 00 00	 call	 _Py_DecRef
  00082	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00087	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 164  :         return -1;

  0008c	83 c8 ff	 or	 eax, -1

; 169  : }

  0008f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00093	5f		 pop	 rdi
  00094	c3		 ret	 0
$LN1@realize:

; 165  :     }
; 166  : 
; 167  :     Py_DECREF(intermediate);

  00095	e8 00 00 00 00	 call	 _Py_DecRef
  0009a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0009f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 168  :     return 0;

  000a4	33 c0		 xor	 eax, eax

; 169  : }

  000a6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0
realize	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@LKHKGFCB@new?5position?5too?5large?$AA@ ; `string'
EXTRN	_PyUnicode_Ready:PROC
EXTRN	PyUnicode_Replace:PROC
EXTRN	_PyIO_str_nl:QWORD
EXTRN	_PyIncrementalNewlineDecoder_decode:PROC
EXTRN	memset:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$write_str DD imagerel write_str
	DD	imagerel write_str+446
	DD	imagerel $unwind$write_str
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$write_str DD 067301H
	DD	083473H
	DD	09640aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BH@LKHKGFCB@new?5position?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BH@LKHKGFCB@new?5position?5too?5large?$AA@ DB 'new position too la'
	DB	'rge', 00H					; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\stringio.c
CONST	ENDS
;	COMDAT write_str
_TEXT	SEGMENT
self$ = 64
obj$ = 72
write_str PROC						; COMDAT

; 175  : {

  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b f9	 mov	 rdi, rcx

; 176  :     Py_ssize_t len;
; 177  :     PyObject *decoded = NULL;
; 178  : 
; 179  :     assert(self->buf != NULL);
; 180  :     assert(self->pos >= 0);
; 181  : 
; 182  :     if (self->decoder != NULL) {

  0000d	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00014	48 8b f2	 mov	 rsi, rdx
  00017	48 85 c9	 test	 rcx, rcx
  0001a	74 10		 je	 SHORT $LN19@write_str

; 183  :         decoded = _PyIncrementalNewlineDecoder_decode(
; 184  :             self->decoder, obj, 1 /* always final */);

  0001c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00022	e8 00 00 00 00	 call	 _PyIncrementalNewlineDecoder_decode
  00027	48 8b f0	 mov	 rsi, rax

; 185  :     }
; 186  :     else {

  0002a	eb 3b		 jmp	 SHORT $LN25@write_str
$LN19@write_str:

; 187  :         decoded = obj;
; 188  :         Py_INCREF(decoded);

  0002c	e8 00 00 00 00	 call	 _Py_PXCTX
  00031	85 c0		 test	 eax, eax
  00033	75 32		 jne	 SHORT $LN25@write_str
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00043	4c 8b ce	 mov	 r9, rsi
  00046	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0004c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	75 06		 jne	 SHORT $LN24@write_str
  0005d	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  00061	74 04		 je	 SHORT $LN25@write_str
$LN24@write_str:
  00063	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN25@write_str:

; 189  :     }
; 190  :     if (self->writenl) {

  00067	4c 8b 87 b0 00
	00 00		 mov	 r8, QWORD PTR [rdi+176]
  0006e	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00073	4d 85 c0	 test	 r8, r8
  00076	74 21		 je	 SHORT $LN17@write_str

; 191  :         PyObject *translated = PyUnicode_Replace(
; 192  :             decoded, _PyIO_str_nl, self->writenl, -1);

  00078	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_nl
  0007f	49 83 c9 ff	 or	 r9, -1
  00083	48 8b ce	 mov	 rcx, rsi
  00086	e8 00 00 00 00	 call	 PyUnicode_Replace

; 193  :         Py_DECREF(decoded);

  0008b	48 8b ce	 mov	 rcx, rsi
  0008e	48 8b d8	 mov	 rbx, rax
  00091	e8 00 00 00 00	 call	 _Py_DecRef

; 194  :         decoded = translated;

  00096	48 8b f3	 mov	 rsi, rbx
$LN17@write_str:

; 195  :     }
; 196  :     if (decoded == NULL)

  00099	48 85 f6	 test	 rsi, rsi

; 197  :         return -1;

  0009c	74 1a		 je	 SHORT $LN28@write_str

; 198  : 
; 199  :     assert(PyUnicode_Check(decoded));
; 200  :     if (PyUnicode_READY(decoded)) {

  0009e	f6 46 70 80	 test	 BYTE PTR [rsi+112], 128	; 00000080H
  000a2	75 28		 jne	 SHORT $LN15@write_str
  000a4	48 8b ce	 mov	 rcx, rsi
  000a7	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000ac	85 c0		 test	 eax, eax
  000ae	74 1c		 je	 SHORT $LN15@write_str
$fail$20475:

; 201  :         Py_DECREF(decoded);

  000b0	48 8b ce	 mov	 rcx, rsi
  000b3	e8 00 00 00 00	 call	 _Py_DecRef
$LN28@write_str:

; 202  :         return -1;

  000b8	48 83 c8 ff	 or	 rax, -1
  000bc	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 265  : }

  000c1	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000c6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ca	5f		 pop	 rdi
  000cb	c3		 ret	 0
$LN15@write_str:

; 203  :     }
; 204  :     len = PyUnicode_GET_LENGTH(decoded);

  000cc	48 8b 5e 60	 mov	 rbx, QWORD PTR [rsi+96]

; 205  :     assert(len >= 0);
; 206  : 
; 207  :     /* This overflow check is not strictly necessary. However, it avoids us to
; 208  :        deal with funky things like comparing an unsigned and a signed
; 209  :        integer. */
; 210  :     if (self->pos > PY_SSIZE_T_MAX - len) {

  000d0	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  000d4	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  000de	48 2b c3	 sub	 rax, rbx
  000e1	48 3b c8	 cmp	 rcx, rax
  000e4	7e 15		 jle	 SHORT $LN14@write_str

; 211  :         PyErr_SetString(PyExc_OverflowError,
; 212  :                         "new position too large");

  000e6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  000ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@LKHKGFCB@new?5position?5too?5large?$AA@
  000f4	e8 00 00 00 00	 call	 PyErr_SetString

; 213  :         goto fail;

  000f9	eb b5		 jmp	 SHORT $fail$20475
$LN14@write_str:

; 214  :     }
; 215  : 
; 216  :     if (self->state == STATE_ACCUMULATING) {

  000fb	83 bf 80 00 00
	00 02		 cmp	 DWORD PTR [rdi+128], 2
  00102	75 27		 jne	 SHORT $LN10@write_str

; 217  :         if (self->string_size == self->pos) {

  00104	48 39 4f 70	 cmp	 QWORD PTR [rdi+112], rcx
  00108	75 15		 jne	 SHORT $LN12@write_str

; 218  :             if (_PyAccu_Accumulate(&self->accu, decoded))

  0010a	48 8d 8f 88 00
	00 00		 lea	 rcx, QWORD PTR [rdi+136]
  00111	48 8b d6	 mov	 rdx, rsi
  00114	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  00119	85 c0		 test	 eax, eax
  0011b	75 93		 jne	 SHORT $fail$20475

; 219  :                 goto fail;
; 220  :             goto success;

  0011d	eb 73		 jmp	 SHORT $success$20479
$LN12@write_str:

; 221  :         }
; 222  :         if (realize(self))

  0011f	48 8b cf	 mov	 rcx, rdi
  00122	e8 00 00 00 00	 call	 realize
  00127	85 c0		 test	 eax, eax
  00129	75 85		 jne	 SHORT $fail$20475
$LN10@write_str:

; 223  :             goto fail;
; 224  :     }
; 225  : 
; 226  :     if (self->pos + len > self->string_size) {

  0012b	48 8b 57 68	 mov	 rdx, QWORD PTR [rdi+104]
  0012f	48 03 d3	 add	 rdx, rbx
  00132	48 3b 57 70	 cmp	 rdx, QWORD PTR [rdi+112]
  00136	7e 10		 jle	 SHORT $LN8@write_str

; 227  :         if (resize_buffer(self, self->pos + len) < 0)

  00138	48 8b cf	 mov	 rcx, rdi
  0013b	e8 00 00 00 00	 call	 resize_buffer
  00140	85 c0		 test	 eax, eax
  00142	0f 88 68 ff ff
	ff		 js	 $fail$20475
$LN8@write_str:

; 228  :             goto fail;
; 229  :     }
; 230  : 
; 231  :     if (self->pos > self->string_size) {

  00148	4c 8b 47 68	 mov	 r8, QWORD PTR [rdi+104]
  0014c	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  00150	4c 3b c1	 cmp	 r8, rcx
  00153	7e 16		 jle	 SHORT $LN7@write_str

; 232  :         /* In case of overseek, pad with null bytes the buffer region between
; 233  :            the end of stream and the current position.
; 234  : 
; 235  :           0   lo      string_size                           hi
; 236  :           |   |<---used--->|<----------available----------->|
; 237  :           |   |            <--to pad-->|<---to write--->    |
; 238  :           0   buf                   position
; 239  : 
; 240  :         */
; 241  :         memset(self->buf + self->string_size, '\0',
; 242  :                (self->pos - self->string_size) * sizeof(Py_UCS4));

  00155	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00159	4c 2b c1	 sub	 r8, rcx
  0015c	33 d2		 xor	 edx, edx
  0015e	48 8d 0c 88	 lea	 rcx, QWORD PTR [rax+rcx*4]
  00162	49 c1 e0 02	 shl	 r8, 2
  00166	e8 00 00 00 00	 call	 memset
$LN7@write_str:

; 243  :     }
; 244  : 
; 245  :     /* Copy the data to the internal buffer, overwriting some of the
; 246  :        existing data if self->pos < self->string_size. */
; 247  :     if (!PyUnicode_AsUCS4(decoded,
; 248  :                           self->buf + self->pos,
; 249  :                           self->buf_size - self->pos,
; 250  :                           0))

  0016b	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  0016f	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00173	4c 8b 47 78	 mov	 r8, QWORD PTR [rdi+120]
  00177	48 8d 14 88	 lea	 rdx, QWORD PTR [rax+rcx*4]
  0017b	4c 2b c1	 sub	 r8, rcx
  0017e	45 33 c9	 xor	 r9d, r9d
  00181	48 8b ce	 mov	 rcx, rsi
  00184	e8 00 00 00 00	 call	 PyUnicode_AsUCS4
  00189	48 85 c0	 test	 rax, rax

; 260  :     return 0;
; 261  : 
; 262  : fail:
; 263  :     Py_XDECREF(decoded);
; 264  :     return -1;

  0018c	0f 84 1e ff ff
	ff		 je	 $fail$20475
$success$20479:

; 251  :         goto fail;
; 252  : 
; 253  : success:
; 254  :     /* Set the new length of the internal string if it has changed. */
; 255  :     self->pos += len;

  00192	48 01 5f 68	 add	 QWORD PTR [rdi+104], rbx
  00196	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]

; 256  :     if (self->string_size < self->pos)

  0019a	48 39 47 70	 cmp	 QWORD PTR [rdi+112], rax
  0019e	7d 04		 jge	 SHORT $LN5@write_str

; 257  :         self->string_size = self->pos;

  001a0	48 89 47 70	 mov	 QWORD PTR [rdi+112], rax
$LN5@write_str:

; 258  : 
; 259  :     Py_DECREF(decoded);

  001a4	48 8b ce	 mov	 rcx, rsi
  001a7	e8 00 00 00 00	 call	 _Py_DecRef
  001ac	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 265  : }

  001b1	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  001b6	33 c0		 xor	 eax, eax
  001b8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001bc	5f		 pop	 rdi
  001bd	c3		 ret	 0
write_str ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@ ; `string'
PUBLIC	??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@ ; `string'
EXTRN	PyUnicode_FromKindAndData:PROC
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_getvalue DD imagerel stringio_getvalue
	DD	imagerel stringio_getvalue+114
	DD	imagerel $unwind$stringio_getvalue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_getvalue DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
CONST	SEGMENT
??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@ DB 'I/O operati'
	DB	'on on closed file', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
CONST	SEGMENT
??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@ DB 'I/O operati'
	DB	'on on uninitialized object', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringio_getvalue
_TEXT	SEGMENT
self$ = 48
stringio_getvalue PROC					; COMDAT

; 272  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 273  :     CHECK_INITIALIZED(self);

  00004	80 b9 98 00 00
	00 00		 cmp	 BYTE PTR [rcx+152], 0
  0000b	7f 1a		 jg	 SHORT $LN3@stringio_g
  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0001b	e8 00 00 00 00	 call	 PyErr_SetString
  00020	33 c0		 xor	 eax, eax

; 279  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
$LN3@stringio_g:

; 274  :     CHECK_CLOSED(self);

  00027	80 b9 99 00 00
	00 00		 cmp	 BYTE PTR [rcx+153], 0
  0002e	74 1a		 je	 SHORT $LN2@stringio_g
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0003e	e8 00 00 00 00	 call	 PyErr_SetString
  00043	33 c0		 xor	 eax, eax

; 279  : }

  00045	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00049	c3		 ret	 0
$LN2@stringio_g:

; 275  :     if (self->state == STATE_ACCUMULATING)

  0004a	83 b9 80 00 00
	00 02		 cmp	 DWORD PTR [rcx+128], 2
  00051	75 09		 jne	 SHORT $LN1@stringio_g

; 279  : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	e9 00 00 00 00	 jmp	 make_intermediate
$LN1@stringio_g:

; 276  :         return make_intermediate(self);
; 277  :     return PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, self->buf,
; 278  :                                      self->string_size);

  0005c	4c 8b 41 70	 mov	 r8, QWORD PTR [rcx+112]
  00060	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00064	b9 04 00 00 00	 mov	 ecx, 4

; 279  : }

  00069	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006d	e9 00 00 00 00	 jmp	 PyUnicode_FromKindAndData
stringio_getvalue ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_tell DD imagerel stringio_tell
	DD	imagerel stringio_tell+87
	DD	imagerel $unwind$stringio_tell
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_tell DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT stringio_tell
_TEXT	SEGMENT
self$ = 48
stringio_tell PROC					; COMDAT

; 286  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 287  :     CHECK_INITIALIZED(self);

  00004	80 b9 98 00 00
	00 00		 cmp	 BYTE PTR [rcx+152], 0
  0000b	7f 1a		 jg	 SHORT $LN2@stringio_t
  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0001b	e8 00 00 00 00	 call	 PyErr_SetString
  00020	33 c0		 xor	 eax, eax

; 290  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
$LN2@stringio_t:

; 288  :     CHECK_CLOSED(self);

  00027	80 b9 99 00 00
	00 00		 cmp	 BYTE PTR [rcx+153], 0
  0002e	74 1a		 je	 SHORT $LN1@stringio_t
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0003e	e8 00 00 00 00	 call	 PyErr_SetString
  00043	33 c0		 xor	 eax, eax

; 290  : }

  00045	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00049	c3		 ret	 0
$LN1@stringio_t:

; 289  :     return PyLong_FromSsize_t(self->pos);

  0004a	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]

; 290  : }

  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
stringio_tell ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@MLFMOEKB@integer?5argument?5expected?0?5got?5?8@ ; `string'
PUBLIC	??_C@_07LBOODODI@?$HMO?3read?$AA@		; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyErr_Occurred:PROC
EXTRN	PyNumber_AsSsize_t:PROC
EXTRN	PyNumber_Check:PROC
EXTRN	_PyArg_ParseTuple_SizeT:PROC
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_read DD imagerel stringio_read
	DD	imagerel stringio_read+394
	DD	imagerel $unwind$stringio_read
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_read DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CE@MLFMOEKB@integer?5argument?5expected?0?5got?5?8@
CONST	SEGMENT
??_C@_0CE@MLFMOEKB@integer?5argument?5expected?0?5got?5?8@ DB 'integer ar'
	DB	'gument expected, got ''%s''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LBOODODI@?$HMO?3read?$AA@
CONST	SEGMENT
??_C@_07LBOODODI@?$HMO?3read?$AA@ DB '|O:read', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringio_read
_TEXT	SEGMENT
arg$ = 48
self$ = 48
args$ = 56
stringio_read PROC					; COMDAT

; 300  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 301  :     Py_ssize_t size, n;
; 302  :     Py_UCS4 *output;
; 303  :     PyObject *arg = Py_None;
; 304  : 
; 305  :     CHECK_INITIALIZED(self);

  0000a	80 b9 98 00 00
	00 00		 cmp	 BYTE PTR [rcx+152], 0
  00011	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  00018	48 8b c2	 mov	 rax, rdx
  0001b	48 89 7c 24 30	 mov	 QWORD PTR arg$[rsp], rdi
  00020	48 8b d9	 mov	 rbx, rcx
  00023	7f 20		 jg	 SHORT $LN13@stringio_r
  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00033	e8 00 00 00 00	 call	 PyErr_SetString

; 322  :         return NULL;

  00038	33 c0		 xor	 eax, eax

; 344  : }

  0003a	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
$LN13@stringio_r:

; 306  :     if (!PyArg_ParseTuple(args, "|O:read", &arg))

  00045	4c 8d 44 24 30	 lea	 r8, QWORD PTR arg$[rsp]
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07LBOODODI@?$HMO?3read?$AA@
  00051	48 8b c8	 mov	 rcx, rax
  00054	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00059	85 c0		 test	 eax, eax

; 307  :         return NULL;

  0005b	0f 84 1c 01 00
	00		 je	 $LN16@stringio_r

; 308  :     CHECK_CLOSED(self);

  00061	80 bb 99 00 00
	00 00		 cmp	 BYTE PTR [rbx+153], 0
  00068	74 20		 je	 SHORT $LN11@stringio_r
  0006a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  00078	e8 00 00 00 00	 call	 PyErr_SetString

; 322  :         return NULL;

  0007d	33 c0		 xor	 eax, eax

; 344  : }

  0007f	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00084	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00088	5f		 pop	 rdi
  00089	c3		 ret	 0
$LN11@stringio_r:

; 309  : 
; 310  :     if (PyNumber_Check(arg)) {

  0008a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arg$[rsp]
  0008f	e8 00 00 00 00	 call	 PyNumber_Check
  00094	85 c0		 test	 eax, eax
  00096	74 31		 je	 SHORT $LN10@stringio_r

; 311  :         size = PyNumber_AsSsize_t(arg, PyExc_OverflowError);

  00098	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  0009f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arg$[rsp]
  000a4	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  000a9	48 8b f8	 mov	 rdi, rax

; 312  :         if (size == -1 && PyErr_Occurred())

  000ac	48 83 f8 ff	 cmp	 rax, -1
  000b0	75 29		 jne	 SHORT $LN6@stringio_r
  000b2	e8 00 00 00 00	 call	 PyErr_Occurred
  000b7	48 85 c0	 test	 rax, rax
  000ba	74 1f		 je	 SHORT $LN6@stringio_r

; 322  :         return NULL;

  000bc	33 c0		 xor	 eax, eax

; 344  : }

  000be	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000c3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c7	5f		 pop	 rdi
  000c8	c3		 ret	 0
$LN10@stringio_r:

; 313  :             return NULL;
; 314  :     }
; 315  :     else if (arg == Py_None) {

  000c9	4c 8b 44 24 30	 mov	 r8, QWORD PTR arg$[rsp]
  000ce	4c 3b c7	 cmp	 r8, rdi
  000d1	0f 85 8b 00 00
	00		 jne	 $LN7@stringio_r

; 316  :         /* Read until EOF is reached, by default. */
; 317  :         size = -1;

  000d7	48 83 cf ff	 or	 rdi, -1
$LN6@stringio_r:

; 323  :     }
; 324  : 
; 325  :     /* adjust invalid sizes */
; 326  :     n = self->string_size - self->pos;

  000db	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  000df	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  000e3	48 2b c1	 sub	 rax, rcx

; 327  :     if (size < 0 || size > n) {

  000e6	48 85 ff	 test	 rdi, rdi
  000e9	78 05		 js	 SHORT $LN4@stringio_r
  000eb	48 3b f8	 cmp	 rdi, rax
  000ee	7e 0c		 jle	 SHORT $LN3@stringio_r
$LN4@stringio_r:

; 328  :         size = n;
; 329  :         if (size < 0)

  000f0	33 d2		 xor	 edx, edx
  000f2	48 8b f8	 mov	 rdi, rax
  000f5	48 85 c0	 test	 rax, rax
  000f8	48 0f 48 fa	 cmovs	 rdi, rdx
$LN3@stringio_r:

; 330  :             size = 0;
; 331  :     }
; 332  : 
; 333  :     /* Optimization for seek(0); read() */
; 334  :     if (self->state == STATE_ACCUMULATING && self->pos == 0 && size == n) {

  000fc	83 bb 80 00 00
	00 02		 cmp	 DWORD PTR [rbx+128], 2
  00103	75 25		 jne	 SHORT $LN2@stringio_r
  00105	48 85 c9	 test	 rcx, rcx
  00108	75 20		 jne	 SHORT $LN2@stringio_r
  0010a	48 3b f8	 cmp	 rdi, rax
  0010d	75 1b		 jne	 SHORT $LN2@stringio_r

; 335  :         PyObject *result = make_intermediate(self);

  0010f	48 8b cb	 mov	 rcx, rbx
  00112	e8 00 00 00 00	 call	 make_intermediate

; 336  :         self->pos = self->string_size;

  00117	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  0011b	48 89 4b 68	 mov	 QWORD PTR [rbx+104], rcx

; 344  : }

  0011f	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00124	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00128	5f		 pop	 rdi
  00129	c3		 ret	 0
$LN2@stringio_r:

; 337  :         return result;
; 338  :     }
; 339  : 
; 340  :     ENSURE_REALIZED(self);

  0012a	48 8b cb	 mov	 rcx, rbx
  0012d	e8 00 00 00 00	 call	 realize
  00132	85 c0		 test	 eax, eax
  00134	78 47		 js	 SHORT $LN16@stringio_r

; 341  :     output = self->buf + self->pos;

  00136	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  0013a	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]

; 342  :     self->pos += size;
; 343  :     return PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, output, size);

  0013e	4c 8b c7	 mov	 r8, rdi
  00141	48 8d 14 88	 lea	 rdx, QWORD PTR [rax+rcx*4]
  00145	48 8d 04 39	 lea	 rax, QWORD PTR [rcx+rdi]
  00149	b9 04 00 00 00	 mov	 ecx, 4
  0014e	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax
  00152	e8 00 00 00 00	 call	 PyUnicode_FromKindAndData

; 344  : }

  00157	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0015c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00160	5f		 pop	 rdi
  00161	c3		 ret	 0
$LN7@stringio_r:

; 318  :     }
; 319  :     else {
; 320  :         PyErr_Format(PyExc_TypeError, "integer argument expected, got '%s'",
; 321  :                      Py_TYPE(arg)->tp_name);

  00162	4d 8b 40 58	 mov	 r8, QWORD PTR [r8+88]
  00166	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0016d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@MLFMOEKB@integer?5argument?5expected?0?5got?5?8@
  00174	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00178	e8 00 00 00 00	 call	 PyErr_Format
$LN16@stringio_r:

; 322  :         return NULL;

  0017d	33 c0		 xor	 eax, eax

; 344  : }

  0017f	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00184	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00188	5f		 pop	 rdi
  00189	c3		 ret	 0
stringio_read ENDP
_TEXT	ENDS
EXTRN	_PyIO_find_line_ending:PROC
EXTRN	PyUnicode_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_stringio_readline DD imagerel _stringio_readline
	DD	imagerel _stringio_readline+206
	DD	imagerel $unwind$_stringio_readline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_stringio_readline DD 093d01H
	DD	08c43dH
	DD	0e7438H
	DD	0d3433H
	DD	060038207H
	DD	05002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _stringio_readline
_TEXT	SEGMENT
consumed$ = 96
self$ = 96
limit$ = 104
_stringio_readline PROC					; COMDAT

; 349  : {

  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00007	48 8b f2	 mov	 rsi, rdx

; 350  :     Py_UCS4 *start, *end, old_char;
; 351  :     Py_ssize_t len, consumed;
; 352  : 
; 353  :     /* In case of overseek, return the empty string */
; 354  :     if (self->pos >= self->string_size)

  0000a	48 8b 51 68	 mov	 rdx, QWORD PTR [rcx+104]
  0000e	48 8b e9	 mov	 rbp, rcx
  00011	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00015	48 3b d1	 cmp	 rdx, rcx
  00018	7c 10		 jl	 SHORT $LN4@stringio_r@2

; 355  :         return PyUnicode_New(0, 0);

  0001a	33 d2		 xor	 edx, edx
  0001c	33 c9		 xor	 ecx, ecx
  0001e	e8 00 00 00 00	 call	 PyUnicode_New

; 374  : }

  00023	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00027	5e		 pop	 rsi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
$LN4@stringio_r@2:

; 356  : 
; 357  :     start = self->buf + self->pos;

  0002a	48 8b 45 60	 mov	 rax, QWORD PTR [rbp+96]
  0002e	48 89 5c 24 68	 mov	 QWORD PTR [rsp+104], rbx
  00033	48 89 7c 24 70	 mov	 QWORD PTR [rsp+112], rdi
  00038	4c 89 64 24 40	 mov	 QWORD PTR [rsp+64], r12
  0003d	4c 8d 24 90	 lea	 r12, QWORD PTR [rax+rdx*4]

; 358  :     if (limit < 0 || limit > self->string_size - self->pos)

  00041	48 85 f6	 test	 rsi, rsi
  00044	78 0b		 js	 SHORT $LN2@stringio_r@2
  00046	48 8b c1	 mov	 rax, rcx
  00049	48 2b c2	 sub	 rax, rdx
  0004c	48 3b f0	 cmp	 rsi, rax
  0004f	7e 06		 jle	 SHORT $LN3@stringio_r@2
$LN2@stringio_r@2:

; 359  :         limit = self->string_size - self->pos;

  00051	48 8b f1	 mov	 rsi, rcx
  00054	48 2b f2	 sub	 rsi, rdx
$LN3@stringio_r@2:

; 360  : 
; 361  :     end = start + limit;
; 362  :     old_char = *end;

  00057	41 8b 1c b4	 mov	 ebx, DWORD PTR [r12+rsi*4]

; 363  :     *end = '\0';

  0005b	41 c7 04 b4 00
	00 00 00	 mov	 DWORD PTR [r12+rsi*4], 0

; 364  :     len = _PyIO_find_line_ending(
; 365  :         self->readtranslate, self->readuniversal, self->readnl,
; 366  :         PyUnicode_4BYTE_KIND, (char*)start, (char*)end, &consumed);

  00063	0f be 95 9a 00
	00 00		 movsx	 edx, BYTE PTR [rbp+154]
  0006a	0f be 8d 9b 00
	00 00		 movsx	 ecx, BYTE PTR [rbp+155]
  00071	4c 8b 85 a8 00
	00 00		 mov	 r8, QWORD PTR [rbp+168]
  00078	49 8d 3c b4	 lea	 rdi, QWORD PTR [r12+rsi*4]
  0007c	48 8d 44 24 60	 lea	 rax, QWORD PTR consumed$[rsp]
  00081	41 b9 04 00 00
	00		 mov	 r9d, 4
  00087	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0008c	48 89 7c 24 28	 mov	 QWORD PTR [rsp+40], rdi
  00091	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  00096	e8 00 00 00 00	 call	 _PyIO_find_line_ending

; 367  :     *end = old_char;

  0009b	89 1f		 mov	 DWORD PTR [rdi], ebx

; 368  :     /* If we haven't found any line ending, we just return everything
; 369  :        (`consumed` is ignored). */
; 370  :     if (len < 0)
; 371  :         len = limit;
; 372  :     self->pos += len;
; 373  :     return PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, start, len);

  0009d	49 8b d4	 mov	 rdx, r12
  000a0	48 85 c0	 test	 rax, rax
  000a3	b9 04 00 00 00	 mov	 ecx, 4
  000a8	48 0f 48 c6	 cmovs	 rax, rsi
  000ac	48 01 45 68	 add	 QWORD PTR [rbp+104], rax
  000b0	4c 8b c0	 mov	 r8, rax
  000b3	e8 00 00 00 00	 call	 PyUnicode_FromKindAndData
  000b8	4c 8b 64 24 40	 mov	 r12, QWORD PTR [rsp+64]
  000bd	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]
  000c2	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]

; 374  : }

  000c7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000cb	5e		 pop	 rsi
  000cc	5d		 pop	 rbp
  000cd	c3		 ret	 0
_stringio_readline ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@CHNOBOKB@?$HMO?3readline?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_readline DD imagerel stringio_readline
	DD	imagerel stringio_readline+315
	DD	imagerel $unwind$stringio_readline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_readline DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0M@CHNOBOKB@?$HMO?3readline?$AA@
CONST	SEGMENT
??_C@_0M@CHNOBOKB@?$HMO?3readline?$AA@ DB '|O:readline', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringio_readline
_TEXT	SEGMENT
arg$ = 48
self$ = 48
args$ = 56
stringio_readline PROC					; COMDAT

; 383  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 384  :     PyObject *arg = Py_None;

  0000f	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct

; 385  :     Py_ssize_t limit = -1;

  00016	48 83 cf ff	 or	 rdi, -1

; 386  : 
; 387  :     CHECK_INITIALIZED(self);

  0001a	80 b9 98 00 00
	00 00		 cmp	 BYTE PTR [rcx+152], 0
  00021	48 8b c2	 mov	 rax, rdx
  00024	48 8b d9	 mov	 rbx, rcx
  00027	48 89 74 24 30	 mov	 QWORD PTR arg$[rsp], rsi
  0002c	7f 25		 jg	 SHORT $LN8@stringio_r@3
  0002e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0003c	e8 00 00 00 00	 call	 PyErr_SetString
$LN11@stringio_r@3:
  00041	33 c0		 xor	 eax, eax

; 404  : }

  00043	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00048	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
$LN8@stringio_r@3:

; 388  :     if (!PyArg_ParseTuple(args, "|O:readline", &arg))

  00053	4c 8d 44 24 30	 lea	 r8, QWORD PTR arg$[rsp]
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@CHNOBOKB@?$HMO?3readline?$AA@
  0005f	48 8b c8	 mov	 rcx, rax
  00062	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00067	85 c0		 test	 eax, eax

; 389  :         return NULL;

  00069	74 d6		 je	 SHORT $LN11@stringio_r@3

; 390  :     CHECK_CLOSED(self);

  0006b	80 bb 99 00 00
	00 00		 cmp	 BYTE PTR [rbx+153], 0
  00072	74 25		 je	 SHORT $LN6@stringio_r@3
  00074	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  00082	e8 00 00 00 00	 call	 PyErr_SetString
  00087	33 c0		 xor	 eax, eax

; 404  : }

  00089	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0008e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00093	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00097	5f		 pop	 rdi
  00098	c3		 ret	 0
$LN6@stringio_r@3:

; 391  :     ENSURE_REALIZED(self);

  00099	48 8b cb	 mov	 rcx, rbx
  0009c	e8 00 00 00 00	 call	 realize
  000a1	85 c0		 test	 eax, eax
  000a3	78 9c		 js	 SHORT $LN11@stringio_r@3

; 392  : 
; 393  :     if (PyNumber_Check(arg)) {

  000a5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arg$[rsp]
  000aa	e8 00 00 00 00	 call	 PyNumber_Check
  000af	85 c0		 test	 eax, eax
  000b1	74 36		 je	 SHORT $LN4@stringio_r@3

; 394  :         limit = PyNumber_AsSsize_t(arg, PyExc_OverflowError);

  000b3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  000ba	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arg$[rsp]
  000bf	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  000c4	48 8b f8	 mov	 rdi, rax

; 395  :         if (limit == -1 && PyErr_Occurred())

  000c7	48 83 f8 ff	 cmp	 rax, -1
  000cb	75 53		 jne	 SHORT $LN1@stringio_r@3
  000cd	e8 00 00 00 00	 call	 PyErr_Occurred
  000d2	48 85 c0	 test	 rax, rax
  000d5	74 49		 je	 SHORT $LN1@stringio_r@3

; 396  :             return NULL;

  000d7	33 c0		 xor	 eax, eax

; 404  : }

  000d9	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000de	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000e3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e7	5f		 pop	 rdi
  000e8	c3		 ret	 0
$LN4@stringio_r@3:

; 397  :     }
; 398  :     else if (arg != Py_None) {

  000e9	4c 8b 44 24 30	 mov	 r8, QWORD PTR arg$[rsp]
  000ee	4c 3b c6	 cmp	 r8, rsi
  000f1	74 2d		 je	 SHORT $LN1@stringio_r@3

; 399  :         PyErr_Format(PyExc_TypeError, "integer argument expected, got '%s'",
; 400  :                      Py_TYPE(arg)->tp_name);

  000f3	4d 8b 40 58	 mov	 r8, QWORD PTR [r8+88]
  000f7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@MLFMOEKB@integer?5argument?5expected?0?5got?5?8@
  00105	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00109	e8 00 00 00 00	 call	 PyErr_Format

; 401  :         return NULL;

  0010e	33 c0		 xor	 eax, eax

; 404  : }

  00110	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00115	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0011a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0011e	5f		 pop	 rdi
  0011f	c3		 ret	 0
$LN1@stringio_r@3:

; 402  :     }
; 403  :     return _stringio_readline(self, limit);

  00120	48 8b d7	 mov	 rdx, rdi
  00123	48 8b cb	 mov	 rcx, rbx
  00126	e8 00 00 00 00	 call	 _stringio_readline

; 404  : }

  0012b	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00130	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00135	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00139	5f		 pop	 rdi
  0013a	c3		 ret	 0
stringio_readline ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DM@KEHPMFAP@readline?$CI?$CJ?5should?5have?5returned?5@ ; `string'
EXTRN	PyExc_IOError:QWORD
EXTRN	PyObject_CallMethodObjArgs:PROC
EXTRN	_PyIO_str_readline:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_iternext DD imagerel stringio_iternext
	DD	imagerel stringio_iternext+200
	DD	imagerel $unwind$stringio_iternext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_iternext DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0DM@KEHPMFAP@readline?$CI?$CJ?5should?5have?5returned?5@
CONST	SEGMENT
??_C@_0DM@KEHPMFAP@readline?$CI?$CJ?5should?5have?5returned?5@ DB 'readli'
	DB	'ne() should have returned an str object, not ''%.200s''', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringio_iternext
_TEXT	SEGMENT
self$ = 48
stringio_iternext PROC					; COMDAT

; 408  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 409  :     PyObject *line;
; 410  : 
; 411  :     CHECK_INITIALIZED(self);

  00006	80 b9 98 00 00
	00 00		 cmp	 BYTE PTR [rcx+152], 0
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	7f 1b		 jg	 SHORT $LN8@stringio_i
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
$LN13@stringio_i:

; 412  :     CHECK_CLOSED(self);

  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00020	e8 00 00 00 00	 call	 PyErr_SetString
$LN11@stringio_i:

; 433  :         return NULL;

  00025	33 c0		 xor	 eax, eax

; 442  : }

  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5b		 pop	 rbx
  0002c	c3		 ret	 0
$LN8@stringio_i:

; 412  :     CHECK_CLOSED(self);

  0002d	80 b9 99 00 00
	00 00		 cmp	 BYTE PTR [rcx+153], 0
  00034	74 09		 je	 SHORT $LN7@stringio_i
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0003d	eb da		 jmp	 SHORT $LN13@stringio_i
$LN7@stringio_i:

; 413  :     ENSURE_REALIZED(self);

  0003f	e8 00 00 00 00	 call	 realize
  00044	85 c0		 test	 eax, eax
  00046	78 dd		 js	 SHORT $LN11@stringio_i

; 414  : 
; 415  :     if (Py_TYPE(self) == &PyStringIO_Type) {

  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyStringIO_Type

; 416  :         /* Skip method call overhead for speed */
; 417  :         line = _stringio_readline(self, -1);

  0004f	48 8b cb	 mov	 rcx, rbx
  00052	48 39 43 58	 cmp	 QWORD PTR [rbx+88], rax
  00056	75 21		 jne	 SHORT $LN5@stringio_i
  00058	48 83 ca ff	 or	 rdx, -1
  0005c	e8 00 00 00 00	 call	 _stringio_readline
  00061	48 8b d8	 mov	 rbx, rax
$LN3@stringio_i:

; 428  :             return NULL;
; 429  :         }
; 430  :     }
; 431  : 
; 432  :     if (line == NULL)

  00064	48 85 db	 test	 rbx, rbx
  00067	74 bc		 je	 SHORT $LN11@stringio_i

; 434  : 
; 435  :     if (PyUnicode_GET_LENGTH(line) == 0) {

  00069	48 83 7b 60 00	 cmp	 QWORD PTR [rbx+96], 0

; 436  :         /* Reached EOF */
; 437  :         Py_DECREF(line);
; 438  :         return NULL;

  0006e	74 48		 je	 SHORT $LN12@stringio_i

; 439  :     }
; 440  : 
; 441  :     return line;

  00070	48 8b c3	 mov	 rax, rbx

; 442  : }

  00073	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00077	5b		 pop	 rbx
  00078	c3		 ret	 0
$LN5@stringio_i:

; 418  :     }
; 419  :     else {
; 420  :         /* XXX is subclassing StringIO really supported? */
; 421  :         line = PyObject_CallMethodObjArgs((PyObject *)self,
; 422  :                                            _PyIO_str_readline, NULL);

  00079	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readline
  00080	45 33 c0	 xor	 r8d, r8d
  00083	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00088	48 8b d8	 mov	 rbx, rax

; 423  :         if (line && !PyUnicode_Check(line)) {

  0008b	48 85 c0	 test	 rax, rax
  0008e	74 95		 je	 SHORT $LN11@stringio_i
  00090	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00094	41 f7 80 00 01
	00 00 00 00 00
	10		 test	 DWORD PTR [r8+256], 268435456 ; 10000000H
  0009f	75 c3		 jne	 SHORT $LN3@stringio_i

; 424  :             PyErr_Format(PyExc_IOError,
; 425  :                          "readline() should have returned an str object, "
; 426  :                          "not '%.200s'", Py_TYPE(line)->tp_name);

  000a1	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  000a5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@KEHPMFAP@readline?$CI?$CJ?5should?5have?5returned?5@
  000b3	e8 00 00 00 00	 call	 PyErr_Format
$LN12@stringio_i:

; 427  :             Py_DECREF(line);

  000b8	48 8b cb	 mov	 rcx, rbx
  000bb	e8 00 00 00 00	 call	 _Py_DecRef

; 433  :         return NULL;

  000c0	33 c0		 xor	 eax, eax

; 442  : }

  000c2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c6	5b		 pop	 rbx
  000c7	c3		 ret	 0
stringio_iternext ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@GAHNANHP@Negative?5size?5value?5?$CFzd?$AA@ ; `string'
PUBLIC	??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_truncate DD imagerel stringio_truncate
	DD	imagerel stringio_truncate+351
	DD	imagerel $unwind$stringio_truncate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_truncate DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BI@GAHNANHP@Negative?5size?5value?5?$CFzd?$AA@
CONST	SEGMENT
??_C@_0BI@GAHNANHP@Negative?5size?5value?5?$CFzd?$AA@ DB 'Negative size v'
	DB	'alue %zd', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@
CONST	SEGMENT
??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@ DB '|O:truncate', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringio_truncate
_TEXT	SEGMENT
arg$ = 48
self$ = 48
args$ = 56
stringio_truncate PROC					; COMDAT

; 453  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 454  :     Py_ssize_t size;
; 455  :     PyObject *arg = Py_None;
; 456  : 
; 457  :     CHECK_INITIALIZED(self);

  0000a	80 b9 98 00 00
	00 00		 cmp	 BYTE PTR [rcx+152], 0
  00011	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  00018	48 8b c2	 mov	 rax, rdx
  0001b	48 89 5c 24 30	 mov	 QWORD PTR arg$[rsp], rbx
  00020	48 8b f9	 mov	 rdi, rcx
  00023	7f 20		 jg	 SHORT $LN12@stringio_t@2
  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00033	e8 00 00 00 00	 call	 PyErr_SetString

; 474  :         return NULL;

  00038	33 c0		 xor	 eax, eax

; 491  : }

  0003a	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
$LN12@stringio_t@2:

; 458  :     if (!PyArg_ParseTuple(args, "|O:truncate", &arg))

  00045	4c 8d 44 24 30	 lea	 r8, QWORD PTR arg$[rsp]
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@
  00051	48 8b c8	 mov	 rcx, rax
  00054	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00059	85 c0		 test	 eax, eax

; 459  :         return NULL;

  0005b	0f 84 f1 00 00
	00		 je	 $LN16@stringio_t@2

; 460  :     CHECK_CLOSED(self);

  00061	80 bf 99 00 00
	00 00		 cmp	 BYTE PTR [rdi+153], 0
  00068	74 20		 je	 SHORT $LN10@stringio_t@2
  0006a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  00078	e8 00 00 00 00	 call	 PyErr_SetString

; 474  :         return NULL;

  0007d	33 c0		 xor	 eax, eax

; 491  : }

  0007f	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00084	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00088	5f		 pop	 rdi
  00089	c3		 ret	 0
$LN10@stringio_t@2:

; 461  : 
; 462  :     if (PyNumber_Check(arg)) {

  0008a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arg$[rsp]
  0008f	e8 00 00 00 00	 call	 PyNumber_Check
  00094	85 c0		 test	 eax, eax
  00096	74 31		 je	 SHORT $LN9@stringio_t@2

; 463  :         size = PyNumber_AsSsize_t(arg, PyExc_OverflowError);

  00098	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  0009f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arg$[rsp]
  000a4	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  000a9	48 8b d8	 mov	 rbx, rax

; 464  :         if (size == -1 && PyErr_Occurred())

  000ac	48 83 f8 ff	 cmp	 rax, -1
  000b0	75 25		 jne	 SHORT $LN5@stringio_t@2
  000b2	e8 00 00 00 00	 call	 PyErr_Occurred
  000b7	48 85 c0	 test	 rax, rax
  000ba	74 20		 je	 SHORT $LN15@stringio_t@2

; 474  :         return NULL;

  000bc	33 c0		 xor	 eax, eax

; 491  : }

  000be	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000c3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c7	5f		 pop	 rdi
  000c8	c3		 ret	 0
$LN9@stringio_t@2:

; 465  :             return NULL;
; 466  :     }
; 467  :     else if (arg == Py_None) {

  000c9	4c 8b 44 24 30	 mov	 r8, QWORD PTR arg$[rsp]
  000ce	4c 3b c3	 cmp	 r8, rbx
  000d1	75 64		 jne	 SHORT $LN6@stringio_t@2

; 468  :         /* Truncate to current position if no argument is passed. */
; 469  :         size = self->pos;

  000d3	48 8b 5f 68	 mov	 rbx, QWORD PTR [rdi+104]
$LN5@stringio_t@2:

; 475  :     }
; 476  : 
; 477  :     if (size < 0) {

  000d7	48 85 db	 test	 rbx, rbx
  000da	79 23		 jns	 SHORT $LN4@stringio_t@2
$LN15@stringio_t@2:

; 478  :         PyErr_Format(PyExc_ValueError,
; 479  :                      "Negative size value %zd", size);

  000dc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GAHNANHP@Negative?5size?5value?5?$CFzd?$AA@
  000ea	4c 8b c3	 mov	 r8, rbx
  000ed	e8 00 00 00 00	 call	 PyErr_Format
  000f2	33 c0		 xor	 eax, eax

; 491  : }

  000f4	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000f9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000fd	5f		 pop	 rdi
  000fe	c3		 ret	 0
$LN4@stringio_t@2:

; 480  :         return NULL;
; 481  :     }
; 482  : 
; 483  :     if (size < self->string_size) {

  000ff	48 3b 5f 70	 cmp	 rbx, QWORD PTR [rdi+112]
  00103	7d 1f		 jge	 SHORT $LN3@stringio_t@2

; 484  :         ENSURE_REALIZED(self);

  00105	48 8b cf	 mov	 rcx, rdi
  00108	e8 00 00 00 00	 call	 realize
  0010d	85 c0		 test	 eax, eax
  0010f	78 41		 js	 SHORT $LN16@stringio_t@2

; 485  :         if (resize_buffer(self, size) < 0)

  00111	48 8b d3	 mov	 rdx, rbx
  00114	48 8b cf	 mov	 rcx, rdi
  00117	e8 00 00 00 00	 call	 resize_buffer
  0011c	85 c0		 test	 eax, eax

; 486  :             return NULL;

  0011e	78 32		 js	 SHORT $LN16@stringio_t@2

; 487  :         self->string_size = size;

  00120	48 89 5f 70	 mov	 QWORD PTR [rdi+112], rbx
$LN3@stringio_t@2:

; 488  :     }
; 489  : 
; 490  :     return PyLong_FromSsize_t(size);

  00124	48 8b cb	 mov	 rcx, rbx
  00127	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 491  : }

  0012c	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00131	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00135	5f		 pop	 rdi
  00136	c3		 ret	 0
$LN6@stringio_t@2:

; 470  :     }
; 471  :     else {
; 472  :         PyErr_Format(PyExc_TypeError, "integer argument expected, got '%s'",
; 473  :                      Py_TYPE(arg)->tp_name);

  00137	4d 8b 40 58	 mov	 r8, QWORD PTR [r8+88]
  0013b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00142	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@MLFMOEKB@integer?5argument?5expected?0?5got?5?8@
  00149	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0014d	e8 00 00 00 00	 call	 PyErr_Format
$LN16@stringio_t@2:

; 474  :         return NULL;

  00152	33 c0		 xor	 eax, eax

; 491  : }

  00154	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00159	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0015d	5f		 pop	 rdi
  0015e	c3		 ret	 0
stringio_truncate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@EGPJNCAG@Can?8t?5do?5nonzero?5cur?9relative?5se@ ; `string'
PUBLIC	??_C@_0BL@KGECPAH@Negative?5seek?5position?5?$CFzd?$AA@ ; `string'
PUBLIC	??_C@_0CJ@IGFEKKBJ@Invalid?5whence?5?$CI?$CFi?0?5should?5be?50?0@ ; `string'
PUBLIC	??_C@_08LHPIDOMM@n?$HMi?3seek?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_seek DD imagerel stringio_seek
	DD	imagerel stringio_seek+307
	DD	imagerel $unwind$stringio_seek
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_seek DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CE@EGPJNCAG@Can?8t?5do?5nonzero?5cur?9relative?5se@
CONST	SEGMENT
??_C@_0CE@EGPJNCAG@Can?8t?5do?5nonzero?5cur?9relative?5se@ DB 'Can''t do '
	DB	'nonzero cur-relative seeks', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KGECPAH@Negative?5seek?5position?5?$CFzd?$AA@
CONST	SEGMENT
??_C@_0BL@KGECPAH@Negative?5seek?5position?5?$CFzd?$AA@ DB 'Negative seek'
	DB	' position %zd', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IGFEKKBJ@Invalid?5whence?5?$CI?$CFi?0?5should?5be?50?0@
CONST	SEGMENT
??_C@_0CJ@IGFEKKBJ@Invalid?5whence?5?$CI?$CFi?0?5should?5be?50?0@ DB 'Inv'
	DB	'alid whence (%i, should be 0, 1 or 2)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LHPIDOMM@n?$HMi?3seek?$AA@
CONST	SEGMENT
??_C@_08LHPIDOMM@n?$HMi?3seek?$AA@ DB 'n|i:seek', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringio_seek
_TEXT	SEGMENT
mode$ = 48
self$ = 48
args$ = 56
pos$ = 64
stringio_seek PROC					; COMDAT

; 504  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 505  :     Py_ssize_t pos;
; 506  :     int mode = 0;
; 507  : 
; 508  :     CHECK_INITIALIZED(self);

  00006	80 b9 98 00 00
	00 00		 cmp	 BYTE PTR [rcx+152], 0
  0000d	48 8b c2	 mov	 rax, rdx
  00010	48 8b d9	 mov	 rbx, rcx
  00013	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR mode$[rsp], 0
  0001b	7f 1b		 jg	 SHORT $LN11@stringio_s
  0001d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0002b	e8 00 00 00 00	 call	 PyErr_SetString
$LN16@stringio_s:
  00030	33 c0		 xor	 eax, eax

; 542  : }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5b		 pop	 rbx
  00037	c3		 ret	 0
$LN11@stringio_s:

; 509  :     if (!PyArg_ParseTuple(args, "n|i:seek", &pos, &mode))

  00038	4c 8d 4c 24 30	 lea	 r9, QWORD PTR mode$[rsp]
  0003d	4c 8d 44 24 40	 lea	 r8, QWORD PTR pos$[rsp]
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LHPIDOMM@n?$HMi?3seek?$AA@
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00051	85 c0		 test	 eax, eax

; 510  :         return NULL;

  00053	74 db		 je	 SHORT $LN16@stringio_s

; 511  :     CHECK_CLOSED(self);

  00055	80 bb 99 00 00
	00 00		 cmp	 BYTE PTR [rbx+153], 0
  0005c	74 1b		 je	 SHORT $LN9@stringio_s
  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0006c	e8 00 00 00 00	 call	 PyErr_SetString
  00071	33 c0		 xor	 eax, eax

; 542  : }

  00073	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00077	5b		 pop	 rbx
  00078	c3		 ret	 0
$LN9@stringio_s:

; 512  : 
; 513  :     if (mode != 0 && mode != 1 && mode != 2) {

  00079	8b 44 24 30	 mov	 eax, DWORD PTR mode$[rsp]
  0007d	85 c0		 test	 eax, eax
  0007f	74 28		 je	 SHORT $LN8@stringio_s
  00081	83 f8 01	 cmp	 eax, 1
  00084	74 23		 je	 SHORT $LN8@stringio_s
  00086	83 f8 02	 cmp	 eax, 2
  00089	74 1e		 je	 SHORT $LN8@stringio_s

; 514  :         PyErr_Format(PyExc_ValueError,
; 515  :                      "Invalid whence (%i, should be 0, 1 or 2)", mode);

  0008b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00092	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@IGFEKKBJ@Invalid?5whence?5?$CI?$CFi?0?5should?5be?50?0@
  00099	44 8b c0	 mov	 r8d, eax
  0009c	e8 00 00 00 00	 call	 PyErr_Format

; 516  :         return NULL;

  000a1	33 c0		 xor	 eax, eax

; 542  : }

  000a3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a7	5b		 pop	 rbx
  000a8	c3		 ret	 0
$LN8@stringio_s:

; 517  :     }
; 518  :     else if (pos < 0 && mode == 0) {

  000a9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pos$[rsp]
  000ae	48 85 c9	 test	 rcx, rcx
  000b1	79 22		 jns	 SHORT $LN6@stringio_s
  000b3	85 c0		 test	 eax, eax
  000b5	75 22		 jne	 SHORT $LN14@stringio_s

; 519  :         PyErr_Format(PyExc_ValueError,
; 520  :                      "Negative seek position %zd", pos);

  000b7	4c 8b c1	 mov	 r8, rcx
  000ba	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@KGECPAH@Negative?5seek?5position?5?$CFzd?$AA@
  000c8	e8 00 00 00 00	 call	 PyErr_Format

; 521  :         return NULL;

  000cd	33 c0		 xor	 eax, eax

; 542  : }

  000cf	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d3	5b		 pop	 rbx
  000d4	c3		 ret	 0
$LN6@stringio_s:

; 522  :     }
; 523  :     else if (mode != 0 && pos != 0) {

  000d5	85 c0		 test	 eax, eax
  000d7	74 20		 je	 SHORT $LN4@stringio_s
$LN14@stringio_s:
  000d9	48 85 c9	 test	 rcx, rcx
  000dc	74 1b		 je	 SHORT $LN4@stringio_s

; 524  :         PyErr_SetString(PyExc_IOError,
; 525  :                         "Can't do nonzero cur-relative seeks");

  000de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  000e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@EGPJNCAG@Can?8t?5do?5nonzero?5cur?9relative?5se@
  000ec	e8 00 00 00 00	 call	 PyErr_SetString

; 526  :         return NULL;

  000f1	33 c0		 xor	 eax, eax

; 542  : }

  000f3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f7	5b		 pop	 rbx
  000f8	c3		 ret	 0
$LN4@stringio_s:

; 527  :     }
; 528  : 
; 529  :     /* mode 0: offset relative to beginning of the string.
; 530  :        mode 1: no change to current position.
; 531  :        mode 2: change position to end of file. */
; 532  :     if (mode == 1) {

  000f9	83 f8 01	 cmp	 eax, 1
  000fc	75 18		 jne	 SHORT $LN3@stringio_s

; 533  :         pos = self->pos;

  000fe	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]

; 536  :         pos = self->string_size;

  00102	48 89 4c 24 40	 mov	 QWORD PTR pos$[rsp], rcx

; 537  :     }
; 538  : 
; 539  :     self->pos = pos;

  00107	48 89 4b 68	 mov	 QWORD PTR [rbx+104], rcx

; 540  : 
; 541  :     return PyLong_FromSsize_t(self->pos);

  0010b	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 542  : }

  00110	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00114	5b		 pop	 rbx
  00115	c3		 ret	 0
$LN3@stringio_s:

; 534  :     }
; 535  :     else if (mode == 2) {

  00116	83 f8 02	 cmp	 eax, 2
  00119	75 09		 jne	 SHORT $LN1@stringio_s

; 536  :         pos = self->string_size;

  0011b	48 8b 4b 70	 mov	 rcx, QWORD PTR [rbx+112]
  0011f	48 89 4c 24 40	 mov	 QWORD PTR pos$[rsp], rcx
$LN1@stringio_s:

; 537  :     }
; 538  : 
; 539  :     self->pos = pos;

  00124	48 89 4b 68	 mov	 QWORD PTR [rbx+104], rcx

; 540  : 
; 541  :     return PyLong_FromSsize_t(self->pos);

  00128	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 542  : }

  0012d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00131	5b		 pop	 rbx
  00132	c3		 ret	 0
stringio_seek ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@IPDIHMAG@string?5argument?5expected?0?5got?5?8?$CF@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_write DD imagerel stringio_write
	DD	imagerel stringio_write+169
	DD	imagerel $unwind$stringio_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$stringio_write DD imagerel stringio_write+169
	DD	imagerel stringio_write+217
	DD	imagerel $chain$0$stringio_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$stringio_write DD imagerel stringio_write+217
	DD	imagerel stringio_write+240
	DD	imagerel $chain$2$stringio_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$stringio_write DD 020021H
	DD	066400H
	DD	imagerel stringio_write
	DD	imagerel stringio_write+169
	DD	imagerel $unwind$stringio_write
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$stringio_write DD 020521H
	DD	066405H
	DD	imagerel stringio_write
	DD	imagerel stringio_write+169
	DD	imagerel $unwind$stringio_write
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_write DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CD@IPDIHMAG@string?5argument?5expected?0?5got?5?8?$CF@
CONST	SEGMENT
??_C@_0CD@IPDIHMAG@string?5argument?5expected?0?5got?5?8?$CF@ DB 'string '
	DB	'argument expected, got ''%s''', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringio_write
_TEXT	SEGMENT
self$ = 48
obj$ = 56
stringio_write PROC					; COMDAT

; 552  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 553  :     Py_ssize_t size;
; 554  : 
; 555  :     CHECK_INITIALIZED(self);

  0000a	80 b9 98 00 00
	00 00		 cmp	 BYTE PTR [rcx+152], 0
  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f9	 mov	 rdi, rcx
  00017	7f 20		 jg	 SHORT $LN5@stringio_w
  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00027	e8 00 00 00 00	 call	 PyErr_SetString
$LN11@stringio_w:
  0002c	33 c0		 xor	 eax, eax

; 570  : }

  0002e	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
$LN5@stringio_w:

; 556  :     if (!PyUnicode_Check(obj)) {

  00039	4c 8b 42 58	 mov	 r8, QWORD PTR [rdx+88]
  0003d	41 f7 80 00 01
	00 00 00 00 00
	10		 test	 DWORD PTR [r8+256], 268435456 ; 10000000H
  00048	75 24		 jne	 SHORT $LN4@stringio_w

; 557  :         PyErr_Format(PyExc_TypeError, "string argument expected, got '%s'",
; 558  :                      Py_TYPE(obj)->tp_name);

  0004a	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0004e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@IPDIHMAG@string?5argument?5expected?0?5got?5?8?$CF@
  0005c	e8 00 00 00 00	 call	 PyErr_Format

; 559  :         return NULL;

  00061	33 c0		 xor	 eax, eax

; 570  : }

  00063	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00068	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006c	5f		 pop	 rdi
  0006d	c3		 ret	 0
$LN4@stringio_w:

; 560  :     }
; 561  :     if (PyUnicode_READY(obj))

  0006e	f6 42 70 80	 test	 BYTE PTR [rdx+112], 128	; 00000080H
  00072	75 0c		 jne	 SHORT $LN3@stringio_w
  00074	48 8b ca	 mov	 rcx, rdx
  00077	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0007c	85 c0		 test	 eax, eax

; 562  :         return NULL;

  0007e	75 ac		 jne	 SHORT $LN11@stringio_w
$LN3@stringio_w:

; 563  :     CHECK_CLOSED(self);

  00080	80 bf 99 00 00
	00 00		 cmp	 BYTE PTR [rdi+153], 0
  00087	74 20		 je	 SHORT $LN2@stringio_w
  00089	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  00097	e8 00 00 00 00	 call	 PyErr_SetString
  0009c	33 c0		 xor	 eax, eax

; 570  : }

  0009e	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000a3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a7	5f		 pop	 rdi
  000a8	c3		 ret	 0
$LN2@stringio_w:
  000a9	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi

; 564  :     size = PyUnicode_GET_LENGTH(obj);

  000ae	48 8b 73 60	 mov	 rsi, QWORD PTR [rbx+96]

; 565  : 
; 566  :     if (size > 0 && write_str(self, obj) < 0)

  000b2	48 85 f6	 test	 rsi, rsi
  000b5	7e 22		 jle	 SHORT $LN1@stringio_w
  000b7	48 8b d3	 mov	 rdx, rbx
  000ba	48 8b cf	 mov	 rcx, rdi
  000bd	e8 00 00 00 00	 call	 write_str
  000c2	48 85 c0	 test	 rax, rax
  000c5	79 12		 jns	 SHORT $LN1@stringio_w

; 567  :         return NULL;

  000c7	33 c0		 xor	 eax, eax
  000c9	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 570  : }

  000ce	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000d3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d7	5f		 pop	 rdi
  000d8	c3		 ret	 0
$LN1@stringio_w:

; 568  : 
; 569  :     return PyLong_FromSsize_t(size);

  000d9	48 8b ce	 mov	 rcx, rsi
  000dc	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 570  : }

  000e1	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000e6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ea	5f		 pop	 rdi
  000eb	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
stringio_write ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@EBEIBIEC@stringio_close?$AA@		; `string'
PUBLIC	??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@ ; `string'
EXTRN	_PyAccu_Destroy:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stringio_close DD imagerel stringio_close
	DD	imagerel stringio_close+345
	DD	imagerel $unwind$stringio_close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_close DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0P@EBEIBIEC@stringio_close?$AA@
CONST	SEGMENT
??_C@_0P@EBEIBIEC@stringio_close?$AA@ DB 'stringio_close', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
CONST	SEGMENT
??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@ DB '..\Modules\_i'
	DB	'o\stringio.c', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\stringio.c
CONST	ENDS
;	COMDAT stringio_close
_TEXT	SEGMENT
self$ = 64
stringio_close PROC					; COMDAT

; 580  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 581  :     self->closed = 1;
; 582  :     /* Free up some memory */
; 583  :     if (resize_buffer(self, 0) < 0)

  00006	33 d2		 xor	 edx, edx
  00008	48 8b d9	 mov	 rbx, rcx
  0000b	c6 81 99 00 00
	00 01		 mov	 BYTE PTR [rcx+153], 1
  00012	e8 00 00 00 00	 call	 resize_buffer
  00017	85 c0		 test	 eax, eax
  00019	79 08		 jns	 SHORT $LN13@stringio_c

; 584  :         return NULL;

  0001b	33 c0		 xor	 eax, eax

; 590  : }

  0001d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00021	5b		 pop	 rbx
  00022	c3		 ret	 0
$LN13@stringio_c:

; 585  :     _PyAccu_Destroy(&self->accu);

  00023	48 8d 8b 88 00
	00 00		 lea	 rcx, QWORD PTR [rbx+136]
  0002a	e8 00 00 00 00	 call	 _PyAccu_Destroy

; 586  :     Py_CLEAR(self->readnl);

  0002f	4c 8b 8b a8 00
	00 00		 mov	 r9, QWORD PTR [rbx+168]
  00036	4d 85 c9	 test	 r9, r9
  00039	74 3c		 je	 SHORT $LN11@stringio_c
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@EBEIBIEC@stringio_close?$AA@
  00049	41 b8 4a 02 00
	00		 mov	 r8d, 586		; 0000024aH
  0004f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00057	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005c	85 c0		 test	 eax, eax
  0005e	75 17		 jne	 SHORT $LN11@stringio_c
  00060	48 8b 8b a8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+168]
  00067	48 c7 83 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+168], 0
  00072	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@stringio_c:

; 587  :     Py_CLEAR(self->writenl);

  00077	4c 8b 8b b0 00
	00 00		 mov	 r9, QWORD PTR [rbx+176]
  0007e	4d 85 c9	 test	 r9, r9
  00081	74 3c		 je	 SHORT $LN7@stringio_c
  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@EBEIBIEC@stringio_close?$AA@
  00091	41 b8 4b 02 00
	00		 mov	 r8d, 587		; 0000024bH
  00097	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0009f	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a4	85 c0		 test	 eax, eax
  000a6	75 17		 jne	 SHORT $LN7@stringio_c
  000a8	48 8b 8b b0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+176]
  000af	48 c7 83 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+176], 0
  000ba	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@stringio_c:

; 588  :     Py_CLEAR(self->decoder);

  000bf	4c 8b 8b a0 00
	00 00		 mov	 r9, QWORD PTR [rbx+160]
  000c6	4d 85 c9	 test	 r9, r9
  000c9	74 3c		 je	 SHORT $LN3@stringio_c
  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  000d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@EBEIBIEC@stringio_close?$AA@
  000d9	41 b8 4c 02 00
	00		 mov	 r8d, 588		; 0000024cH
  000df	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ec	85 c0		 test	 eax, eax
  000ee	75 17		 jne	 SHORT $LN3@stringio_c
  000f0	48 8b 8b a0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+160]
  000f7	48 c7 83 a0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+160], 0
  00102	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@stringio_c:

; 589  :     Py_RETURN_NONE;

  00107	e8 00 00 00 00	 call	 _Py_PXCTX
  0010c	85 c0		 test	 eax, eax
  0010e	75 3c		 jne	 SHORT $LN17@stringio_c
  00110	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00117	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0011e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00125	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0012b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00133	e8 00 00 00 00	 call	 _PyParallel_Guard
  00138	85 c0		 test	 eax, eax
  0013a	75 09		 jne	 SHORT $LN16@stringio_c
  0013c	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00143	74 07		 je	 SHORT $LN17@stringio_c
$LN16@stringio_c:
  00145	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN17@stringio_c:
  0014c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 590  : }

  00153	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00157	5b		 pop	 rbx
  00158	c3		 ret	 0
stringio_close ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@KHGLMPKH@stringio_traverse?$AA@	; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_traverse DD imagerel stringio_traverse
	DD	imagerel stringio_traverse+100
	DD	imagerel $unwind$stringio_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_traverse DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0BC@KHGLMPKH@stringio_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@KHGLMPKH@stringio_traverse?$AA@ DB 'stringio_traverse', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringio_traverse
_TEXT	SEGMENT
self$ = 48
visit$ = 56
arg$ = 64
stringio_traverse PROC					; COMDAT

; 594  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 595  :     Py_VISIT(self->dict);

  00018	e8 00 00 00 00	 call	 _Py_PXCTX
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $LN3@stringio_t@3
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@KHGLMPKH@stringio_traverse?$AA@
  0002f	45 33 c9	 xor	 r9d, r9d
  00032	41 b8 53 02 00
	00		 mov	 r8d, 595		; 00000253H
  00038	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@stringio_t@3:
  0003d	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  00044	48 85 c9	 test	 rcx, rcx
  00047	74 09		 je	 SHORT $LN5@stringio_t@3
  00049	48 8b d7	 mov	 rdx, rdi
  0004c	ff d6		 call	 rsi
  0004e	85 c0		 test	 eax, eax
  00050	75 02		 jne	 SHORT $LN7@stringio_t@3
$LN5@stringio_t@3:

; 596  :     return 0;

  00052	33 c0		 xor	 eax, eax
$LN7@stringio_t@3:

; 597  : }

  00054	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00059	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00062	5f		 pop	 rdi
  00063	c3		 ret	 0
stringio_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@DENEALKO@stringio_clear?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stringio_clear DD imagerel stringio_clear
	DD	imagerel stringio_clear+66
	DD	imagerel $unwind$stringio_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$stringio_clear DD imagerel stringio_clear+66
	DD	imagerel stringio_clear+181
	DD	imagerel $chain$0$stringio_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$stringio_clear DD imagerel stringio_clear+181
	DD	imagerel stringio_clear+204
	DD	imagerel $chain$2$stringio_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$stringio_clear DD imagerel stringio_clear+204
	DD	imagerel stringio_clear+217
	DD	imagerel $chain$4$stringio_clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$stringio_clear DD imagerel stringio_clear+217
	DD	imagerel stringio_clear+225
	DD	imagerel $chain$5$stringio_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$stringio_clear DD 021H
	DD	imagerel stringio_clear
	DD	imagerel stringio_clear+66
	DD	imagerel $unwind$stringio_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$stringio_clear DD 020021H
	DD	083400H
	DD	imagerel stringio_clear
	DD	imagerel stringio_clear+66
	DD	imagerel $unwind$stringio_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$stringio_clear DD 020021H
	DD	083400H
	DD	imagerel stringio_clear
	DD	imagerel stringio_clear+66
	DD	imagerel $unwind$stringio_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$stringio_clear DD 020521H
	DD	083405H
	DD	imagerel stringio_clear
	DD	imagerel stringio_clear+66
	DD	imagerel $unwind$stringio_clear
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_clear DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT ??_C@_0P@DENEALKO@stringio_clear?$AA@
CONST	SEGMENT
??_C@_0P@DENEALKO@stringio_clear?$AA@ DB 'stringio_clear', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\stringio.c
CONST	ENDS
;	COMDAT stringio_clear
_TEXT	SEGMENT
self$ = 64
stringio_clear PROC					; COMDAT

; 601  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 602  :     Py_CLEAR(self->dict);

  00006	4c 8b 89 b8 00
	00 00		 mov	 r9, QWORD PTR [rcx+184]
  0000d	48 8b f9	 mov	 rdi, rcx
  00010	4d 85 c9	 test	 r9, r9
  00013	0f 84 c0 00 00
	00		 je	 $LN21@stringio_c@2
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@DENEALKO@stringio_clear?$AA@
  00027	41 b8 5a 02 00
	00		 mov	 r8d, 602		; 0000025aH
  0002d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00035	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003a	85 c0		 test	 eax, eax
  0003c	0f 85 97 00 00
	00		 jne	 $LN21@stringio_c@2
  00042	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00047	48 8b 9f b8 00
	00 00		 mov	 rbx, QWORD PTR [rdi+184]
  0004e	48 c7 87 b8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rdi+184], 0
  00059	e8 00 00 00 00	 call	 _Py_PXCTX
  0005e	85 c0		 test	 eax, eax
  00060	75 72		 jne	 SHORT $LN22@stringio_c@2
  00062	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00066	a8 20		 test	 al, 32			; 00000020H
  00068	75 62		 jne	 SHORT $LN11@stringio_c@2
  0006a	84 c0		 test	 al, al
  0006c	78 5e		 js	 SHORT $LN11@stringio_c@2
  0006e	a8 02		 test	 al, 2
  00070	75 62		 jne	 SHORT $LN22@stringio_c@2
  00072	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00076	75 5c		 jne	 SHORT $LN22@stringio_c@2
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00086	4c 8b cb	 mov	 r9, rbx
  00089	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0008f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00097	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009c	48 8b cb	 mov	 rcx, rbx
  0009f	85 c0		 test	 eax, eax
  000a1	74 12		 je	 SHORT $LN16@stringio_c@2
  000a3	e8 00 00 00 00	 call	 _Px_Dealloc
  000a8	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 603  :     return 0;

  000ad	33 c0		 xor	 eax, eax

; 604  : }

  000af	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b3	5f		 pop	 rdi
  000b4	c3		 ret	 0

; 602  :     Py_CLEAR(self->dict);

$LN16@stringio_c@2:
  000b5	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000b9	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000bf	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 603  :     return 0;

  000c4	33 c0		 xor	 eax, eax

; 604  : }

  000c6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ca	5f		 pop	 rdi
  000cb	c3		 ret	 0

; 602  :     Py_CLEAR(self->dict);

$LN11@stringio_c@2:
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	e8 00 00 00 00	 call	 Px_DecRef
$LN22@stringio_c@2:
  000d4	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN21@stringio_c@2:

; 603  :     return 0;

  000d9	33 c0		 xor	 eax, eax

; 604  : }

  000db	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000df	5f		 pop	 rdi
  000e0	c3		 ret	 0
stringio_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@	; `string'
EXTRN	PyObject_ClearWeakRefs:PROC
EXTRN	PyMem_Free:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stringio_dealloc DD imagerel stringio_dealloc
	DD	imagerel stringio_dealloc+32
	DD	imagerel $unwind$stringio_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$stringio_dealloc DD imagerel stringio_dealloc+32
	DD	imagerel stringio_dealloc+868
	DD	imagerel $chain$1$stringio_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$stringio_dealloc DD imagerel stringio_dealloc+868
	DD	imagerel stringio_dealloc+895
	DD	imagerel $chain$2$stringio_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$stringio_dealloc DD 021H
	DD	imagerel stringio_dealloc
	DD	imagerel stringio_dealloc+32
	DD	imagerel $unwind$stringio_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$stringio_dealloc DD 048b21H
	DD	09748bH
	DD	086405H
	DD	imagerel stringio_dealloc
	DD	imagerel stringio_dealloc+32
	DD	imagerel $unwind$stringio_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_dealloc DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@
CONST	SEGMENT
??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@ DB 'stringio_dealloc', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\stringio.c
CONST	ENDS
;	COMDAT stringio_dealloc
_TEXT	SEGMENT
self$ = 64
stringio_dealloc PROC					; COMDAT

; 608  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 609  :     _PyObject_GC_UNTRACK(self);

  00009	4c 8b c9	 mov	 r9, rcx
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@
  0001a	41 b8 61 02 00
	00		 mov	 r8d, 609		; 00000261H
  00020	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00025	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00032	33 f6		 xor	 esi, esi
  00034	85 c0		 test	 eax, eax
  00036	75 4e		 jne	 SHORT $LN19@stringio_d
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@
  00046	4c 8b cb	 mov	 r9, rbx
  00049	41 b8 61 02 00
	00		 mov	 r8d, 609		; 00000261H
  0004f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00057	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005c	8b d6		 mov	 edx, esi
  0005e	85 c0		 test	 eax, eax
  00060	75 04		 jne	 SHORT $LN26@stringio_d
  00062	48 8d 53 e8	 lea	 rdx, QWORD PTR [rbx-24]
$LN26@stringio_d:
  00066	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00069	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0006d	48 c7 42 10 fe
	ff ff ff	 mov	 QWORD PTR [rdx+16], -2
  00075	48 89 01	 mov	 QWORD PTR [rcx], rax
  00078	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0007b	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0007f	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00083	48 89 32	 mov	 QWORD PTR [rdx], rsi
$LN19@stringio_d:

; 610  :     self->ok = 0;
; 611  :     if (self->buf) {

  00086	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0008a	40 88 b3 98 00
	00 00		 mov	 BYTE PTR [rbx+152], sil
  00091	48 85 c9	 test	 rcx, rcx
  00094	74 09		 je	 SHORT $LN18@stringio_d

; 612  :         PyMem_Free(self->buf);

  00096	e8 00 00 00 00	 call	 PyMem_Free

; 613  :         self->buf = NULL;

  0009b	48 89 73 60	 mov	 QWORD PTR [rbx+96], rsi
$LN18@stringio_d:

; 614  :     }
; 615  :     _PyAccu_Destroy(&self->accu);

  0009f	48 8d 8b 88 00
	00 00		 lea	 rcx, QWORD PTR [rbx+136]
  000a6	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  000ab	e8 00 00 00 00	 call	 _PyAccu_Destroy

; 616  :     Py_CLEAR(self->readnl);

  000b0	4c 8b 8b a8 00
	00 00		 mov	 r9, QWORD PTR [rbx+168]
  000b7	4d 85 c9	 test	 r9, r9
  000ba	0f 84 98 00 00
	00		 je	 $LN16@stringio_d
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@
  000ce	41 b8 68 02 00
	00		 mov	 r8d, 616		; 00000268H
  000d4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000dc	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e1	85 c0		 test	 eax, eax
  000e3	75 73		 jne	 SHORT $LN16@stringio_d
  000e5	48 8b bb a8 00
	00 00		 mov	 rdi, QWORD PTR [rbx+168]
  000ec	48 89 b3 a8 00
	00 00		 mov	 QWORD PTR [rbx+168], rsi
  000f3	e8 00 00 00 00	 call	 _Py_PXCTX
  000f8	85 c0		 test	 eax, eax
  000fa	75 5c		 jne	 SHORT $LN16@stringio_d
  000fc	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00100	a8 20		 test	 al, 32			; 00000020H
  00102	75 4c		 jne	 SHORT $LN31@stringio_d
  00104	84 c0		 test	 al, al
  00106	78 48		 js	 SHORT $LN31@stringio_d
  00108	a8 02		 test	 al, 2
  0010a	75 4c		 jne	 SHORT $LN16@stringio_d
  0010c	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00110	75 46		 jne	 SHORT $LN16@stringio_d
  00112	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00120	4c 8b cf	 mov	 r9, rdi
  00123	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00129	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00131	e8 00 00 00 00	 call	 _PyParallel_Guard
  00136	48 8b cf	 mov	 rcx, rdi
  00139	85 c0		 test	 eax, eax
  0013b	74 07		 je	 SHORT $LN36@stringio_d
  0013d	e8 00 00 00 00	 call	 _Px_Dealloc
  00142	eb 14		 jmp	 SHORT $LN16@stringio_d
$LN36@stringio_d:
  00144	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00148	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0014e	eb 08		 jmp	 SHORT $LN16@stringio_d
$LN31@stringio_d:
  00150	48 8b cf	 mov	 rcx, rdi
  00153	e8 00 00 00 00	 call	 Px_DecRef
$LN16@stringio_d:

; 617  :     Py_CLEAR(self->writenl);

  00158	4c 8b 8b b0 00
	00 00		 mov	 r9, QWORD PTR [rbx+176]
  0015f	4d 85 c9	 test	 r9, r9
  00162	0f 84 98 00 00
	00		 je	 $LN12@stringio_d
  00168	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  0016f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@
  00176	41 b8 69 02 00
	00		 mov	 r8d, 617		; 00000269H
  0017c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00184	e8 00 00 00 00	 call	 _PyParallel_Guard
  00189	85 c0		 test	 eax, eax
  0018b	75 73		 jne	 SHORT $LN12@stringio_d
  0018d	48 8b bb b0 00
	00 00		 mov	 rdi, QWORD PTR [rbx+176]
  00194	48 89 b3 b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rsi
  0019b	e8 00 00 00 00	 call	 _Py_PXCTX
  001a0	85 c0		 test	 eax, eax
  001a2	75 5c		 jne	 SHORT $LN12@stringio_d
  001a4	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  001a8	a8 20		 test	 al, 32			; 00000020H
  001aa	75 4c		 jne	 SHORT $LN42@stringio_d
  001ac	84 c0		 test	 al, al
  001ae	78 48		 js	 SHORT $LN42@stringio_d
  001b0	a8 02		 test	 al, 2
  001b2	75 4c		 jne	 SHORT $LN12@stringio_d
  001b4	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  001b8	75 46		 jne	 SHORT $LN12@stringio_d
  001ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001c8	4c 8b cf	 mov	 r9, rdi
  001cb	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001d1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001d9	e8 00 00 00 00	 call	 _PyParallel_Guard
  001de	48 8b cf	 mov	 rcx, rdi
  001e1	85 c0		 test	 eax, eax
  001e3	74 07		 je	 SHORT $LN47@stringio_d
  001e5	e8 00 00 00 00	 call	 _Px_Dealloc
  001ea	eb 14		 jmp	 SHORT $LN12@stringio_d
$LN47@stringio_d:
  001ec	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  001f0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001f6	eb 08		 jmp	 SHORT $LN12@stringio_d
$LN42@stringio_d:
  001f8	48 8b cf	 mov	 rcx, rdi
  001fb	e8 00 00 00 00	 call	 Px_DecRef
$LN12@stringio_d:

; 618  :     Py_CLEAR(self->decoder);

  00200	4c 8b 8b a0 00
	00 00		 mov	 r9, QWORD PTR [rbx+160]
  00207	4d 85 c9	 test	 r9, r9
  0020a	0f 84 98 00 00
	00		 je	 $LN8@stringio_d
  00210	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  00217	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@
  0021e	41 b8 6a 02 00
	00		 mov	 r8d, 618		; 0000026aH
  00224	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0022c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00231	85 c0		 test	 eax, eax
  00233	75 73		 jne	 SHORT $LN8@stringio_d
  00235	48 8b bb a0 00
	00 00		 mov	 rdi, QWORD PTR [rbx+160]
  0023c	48 89 b3 a0 00
	00 00		 mov	 QWORD PTR [rbx+160], rsi
  00243	e8 00 00 00 00	 call	 _Py_PXCTX
  00248	85 c0		 test	 eax, eax
  0024a	75 5c		 jne	 SHORT $LN8@stringio_d
  0024c	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00250	a8 20		 test	 al, 32			; 00000020H
  00252	75 4c		 jne	 SHORT $LN53@stringio_d
  00254	84 c0		 test	 al, al
  00256	78 48		 js	 SHORT $LN53@stringio_d
  00258	a8 02		 test	 al, 2
  0025a	75 4c		 jne	 SHORT $LN8@stringio_d
  0025c	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00260	75 46		 jne	 SHORT $LN8@stringio_d
  00262	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00269	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00270	4c 8b cf	 mov	 r9, rdi
  00273	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00279	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00281	e8 00 00 00 00	 call	 _PyParallel_Guard
  00286	48 8b cf	 mov	 rcx, rdi
  00289	85 c0		 test	 eax, eax
  0028b	74 07		 je	 SHORT $LN58@stringio_d
  0028d	e8 00 00 00 00	 call	 _Px_Dealloc
  00292	eb 14		 jmp	 SHORT $LN8@stringio_d
$LN58@stringio_d:
  00294	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00298	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0029e	eb 08		 jmp	 SHORT $LN8@stringio_d
$LN53@stringio_d:
  002a0	48 8b cf	 mov	 rcx, rdi
  002a3	e8 00 00 00 00	 call	 Px_DecRef
$LN8@stringio_d:

; 619  :     Py_CLEAR(self->dict);

  002a8	4c 8b 8b b8 00
	00 00		 mov	 r9, QWORD PTR [rbx+184]
  002af	4d 85 c9	 test	 r9, r9
  002b2	0f 84 98 00 00
	00		 je	 $LN4@stringio_d
  002b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  002bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@
  002c6	41 b8 6b 02 00
	00		 mov	 r8d, 619		; 0000026bH
  002cc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002d4	e8 00 00 00 00	 call	 _PyParallel_Guard
  002d9	85 c0		 test	 eax, eax
  002db	75 73		 jne	 SHORT $LN4@stringio_d
  002dd	48 8b bb b8 00
	00 00		 mov	 rdi, QWORD PTR [rbx+184]
  002e4	48 89 b3 b8 00
	00 00		 mov	 QWORD PTR [rbx+184], rsi
  002eb	e8 00 00 00 00	 call	 _Py_PXCTX
  002f0	85 c0		 test	 eax, eax
  002f2	75 5c		 jne	 SHORT $LN4@stringio_d
  002f4	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  002f8	a8 20		 test	 al, 32			; 00000020H
  002fa	75 4c		 jne	 SHORT $LN64@stringio_d
  002fc	84 c0		 test	 al, al
  002fe	78 48		 js	 SHORT $LN64@stringio_d
  00300	a8 02		 test	 al, 2
  00302	75 4c		 jne	 SHORT $LN4@stringio_d
  00304	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00308	75 46		 jne	 SHORT $LN4@stringio_d
  0030a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00311	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00318	4c 8b cf	 mov	 r9, rdi
  0031b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00321	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00329	e8 00 00 00 00	 call	 _PyParallel_Guard
  0032e	48 8b cf	 mov	 rcx, rdi
  00331	85 c0		 test	 eax, eax
  00333	74 07		 je	 SHORT $LN69@stringio_d
  00335	e8 00 00 00 00	 call	 _Px_Dealloc
  0033a	eb 14		 jmp	 SHORT $LN4@stringio_d
$LN69@stringio_d:
  0033c	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00340	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00346	eb 08		 jmp	 SHORT $LN4@stringio_d
$LN64@stringio_d:
  00348	48 8b cf	 mov	 rcx, rdi
  0034b	e8 00 00 00 00	 call	 Px_DecRef
$LN4@stringio_d:

; 620  :     if (self->weakreflist != NULL)

  00350	48 83 bb c0 00
	00 00 00	 cmp	 QWORD PTR [rbx+192], 0
  00358	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  0035d	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00362	74 08		 je	 SHORT $LN1@stringio_d

; 621  :         PyObject_ClearWeakRefs((PyObject *) self);

  00364	48 8b cb	 mov	 rcx, rbx
  00367	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN1@stringio_d:

; 622  :     Py_TYPE(self)->tp_free(self);

  0036c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00370	48 8b cb	 mov	 rcx, rbx

; 623  : }

  00373	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00377	5b		 pop	 rbx
  00378	48 ff a0 98 01
	00 00		 rex_jmp QWORD PTR [rax+408]
stringio_dealloc ENDP
_TEXT	ENDS
EXTRN	PyMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_new DD imagerel stringio_new
	DD	imagerel stringio_new+74
	DD	imagerel $unwind$stringio_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_new DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT stringio_new
_TEXT	SEGMENT
type$ = 48
args$ = 56
kwds$ = 64
stringio_new PROC					; COMDAT

; 627  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c1	 mov	 rax, rcx

; 628  :     stringio *self;
; 629  : 
; 630  :     assert(type != NULL && type->tp_alloc != NULL);
; 631  :     self = (stringio *)type->tp_alloc(type, 0);

  00009	33 d2		 xor	 edx, edx
  0000b	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00011	48 8b d8	 mov	 rbx, rax

; 632  :     if (self == NULL)

  00014	48 85 c0	 test	 rax, rax
  00017	75 06		 jne	 SHORT $LN2@stringio_n

; 645  : }

  00019	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001d	5b		 pop	 rbx
  0001e	c3		 ret	 0
$LN2@stringio_n:

; 633  :         return NULL;
; 634  : 
; 635  :     /* tp_alloc initializes all the fields to zero. So we don't have to
; 636  :        initialize them here. */
; 637  : 
; 638  :     self->buf = (Py_UCS4 *)PyMem_Malloc(0);

  0001f	33 c9		 xor	 ecx, ecx
  00021	e8 00 00 00 00	 call	 PyMem_Malloc
  00026	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax

; 639  :     if (self->buf == NULL) {

  0002a	48 85 c0	 test	 rax, rax
  0002d	75 12		 jne	 SHORT $LN1@stringio_n

; 640  :         Py_DECREF(self);

  0002f	48 8b cb	 mov	 rcx, rbx
  00032	e8 00 00 00 00	 call	 _Py_DecRef

; 645  : }

  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5b		 pop	 rbx
  0003c	e9 00 00 00 00	 jmp	 PyErr_NoMemory
$LN1@stringio_n:

; 641  :         return PyErr_NoMemory();
; 642  :     }
; 643  : 
; 644  :     return (PyObject *)self;

  00041	48 8b c3	 mov	 rax, rbx

; 645  : }

  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
stringio_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_02MPEHDMPO@Oi?$AA@			; `string'
PUBLIC	??_C@_0O@NKMPINCD@stringio_init?$AA@		; `string'
PUBLIC	??_C@_0BK@BLBBMCNI@illegal?5newline?5value?3?5?$CFR?$AA@ ; `string'
PUBLIC	??_C@_0CI@JNJCNLJD@newline?5must?5be?5str?5or?5None?0?5not@ ; `string'
PUBLIC	??_C@_0CO@EIJEHAIM@initial_value?5must?5be?5str?5or?5Non@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0N@IPNCKJGL@?$HMOO?3__init__?$AA@		; `string'
PUBLIC	??_C@_07NADKJHCJ@newline?$AA@			; `string'
PUBLIC	??_C@_0O@HFIAAMGD@initial_value?$AA@		; `string'
EXTRN	PyUnicode_GetLength:PROC
EXTRN	_PyObject_CallFunction_SizeT:PROC
EXTRN	PyIncrementalNewlineDecoder_Type:BYTE
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	_PyArg_ParseTupleAndKeywords_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_init DD imagerel stringio_init
	DD	imagerel stringio_init+123
	DD	imagerel $unwind$stringio_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$stringio_init DD imagerel stringio_init+123
	DD	imagerel stringio_init+226
	DD	imagerel $chain$0$stringio_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$stringio_init DD imagerel stringio_init+226
	DD	imagerel stringio_init+286
	DD	imagerel $chain$2$stringio_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$stringio_init DD imagerel stringio_init+286
	DD	imagerel stringio_init+401
	DD	imagerel $chain$4$stringio_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$stringio_init DD imagerel stringio_init+401
	DD	imagerel stringio_init+921
	DD	imagerel $chain$7$stringio_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$stringio_init DD 040c21H
	DD	0e640cH
	DD	0fc400H
	DD	imagerel stringio_init
	DD	imagerel stringio_init+123
	DD	imagerel $unwind$stringio_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$stringio_init DD 020021H
	DD	0fc400H
	DD	imagerel stringio_init
	DD	imagerel stringio_init+123
	DD	imagerel $unwind$stringio_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$stringio_init DD 020021H
	DD	0fc400H
	DD	imagerel stringio_init
	DD	imagerel stringio_init+123
	DD	imagerel $unwind$stringio_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$stringio_init DD 020521H
	DD	0fc405H
	DD	imagerel stringio_init
	DD	imagerel stringio_init+123
	DD	imagerel $unwind$stringio_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_init DD 040a01H
	DD	07006920aH
	DD	030045005H
xdata	ENDS
;	COMDAT ??_C@_02MPEHDMPO@Oi?$AA@
CONST	SEGMENT
??_C@_02MPEHDMPO@Oi?$AA@ DB 'Oi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NKMPINCD@stringio_init?$AA@
CONST	SEGMENT
??_C@_0O@NKMPINCD@stringio_init?$AA@ DB 'stringio_init', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BLBBMCNI@illegal?5newline?5value?3?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0BK@BLBBMCNI@illegal?5newline?5value?3?5?$CFR?$AA@ DB 'illegal newl'
	DB	'ine value: %R', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JNJCNLJD@newline?5must?5be?5str?5or?5None?0?5not@
CONST	SEGMENT
??_C@_0CI@JNJCNLJD@newline?5must?5be?5str?5or?5None?0?5not@ DB 'newline m'
	DB	'ust be str or None, not %.200s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@EIJEHAIM@initial_value?5must?5be?5str?5or?5Non@
CONST	SEGMENT
??_C@_0CO@EIJEHAIM@initial_value?5must?5be?5str?5or?5Non@ DB 'initial_val'
	DB	'ue must be str or None, not %.200s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IPNCKJGL@?$HMOO?3__init__?$AA@
CONST	SEGMENT
??_C@_0N@IPNCKJGL@?$HMOO?3__init__?$AA@ DB '|OO:__init__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NADKJHCJ@newline?$AA@
CONST	SEGMENT
??_C@_07NADKJHCJ@newline?$AA@ DB 'newline', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HFIAAMGD@initial_value?$AA@
CONST	SEGMENT
??_C@_0O@HFIAAMGD@initial_value?$AA@ DB 'initial_value', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringio_init
_TEXT	SEGMENT
value$ = 48
self$ = 112
args$ = 120
kwds$ = 128
newline_obj$ = 136
stringio_init PROC					; COMDAT

; 649  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	49 8b c0	 mov	 rax, r8
  00010	4c 8b d2	 mov	 r10, rdx

; 650  :     char *kwlist[] = {"initial_value", "newline", NULL};

  00013	33 ed		 xor	 ebp, ebp
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@HFIAAMGD@initial_value?$AA@

; 651  :     PyObject *value = NULL;
; 652  :     PyObject *newline_obj = NULL;
; 653  :     char *newline = "\n";
; 654  :     Py_ssize_t value_len;
; 655  : 
; 656  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|OO:__init__", kwlist,
; 657  :                                      &value, &newline_obj))

  0001c	4d 8d 4b d0	 lea	 r9, QWORD PTR [r11-48]
  00020	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07NADKJHCJ@newline?$AA@
  0002b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@IPNCKJGL@?$HMOO?3__init__?$AA@
  00032	49 89 4b d8	 mov	 QWORD PTR [r11-40], rcx
  00036	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0003a	48 8b d0	 mov	 rdx, rax
  0003d	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  00041	49 8d 4b c8	 lea	 rcx, QWORD PTR [r11-56]
  00045	49 89 6b e0	 mov	 QWORD PTR [r11-32], rbp
  00049	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  0004d	49 8b ca	 mov	 rcx, r10
  00050	49 89 6b c8	 mov	 QWORD PTR [r11-56], rbp
  00054	49 89 6b 20	 mov	 QWORD PTR [r11+32], rbp
  00058	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  0005f	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00064	85 c0		 test	 eax, eax
  00066	75 0b		 jne	 SHORT $LN36@stringio_i@2

; 658  :         return -1;

  00068	83 c8 ff	 or	 eax, -1

; 760  : }

  0006b	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	5b		 pop	 rbx
  00072	c3		 ret	 0
$LN36@stringio_i@2:

; 659  : 
; 660  :     /* Parse the newline argument. This used to be done with the 'z'
; 661  :        specifier, however this allowed any object with the buffer interface to
; 662  :        be converted. Thus we have to parse it manually since we only want to
; 663  :        allow unicode objects or None. */
; 664  :     if (newline_obj == Py_None) {

  00073	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR newline_obj$[rsp]
  0007b	4c 89 64 24 78	 mov	 QWORD PTR [rsp+120], r12
  00080	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_Py_NoneStruct
  00087	4d 3b c4	 cmp	 r8, r12
  0008a	75 56		 jne	 SHORT $LN35@stringio_i@2

; 665  :         newline = NULL;

  0008c	48 8b fd	 mov	 rdi, rbp
$LN30@stringio_i@2:

; 686  :     }
; 687  :     if (value && value != Py_None && !PyUnicode_Check(value)) {

  0008f	48 8b 44 24 30	 mov	 rax, QWORD PTR value$[rsp]
  00094	48 85 c0	 test	 rax, rax
  00097	0f 84 f4 00 00
	00		 je	 $LN26@stringio_i@2
  0009d	49 3b c4	 cmp	 rax, r12
  000a0	0f 84 eb 00 00
	00		 je	 $LN26@stringio_i@2
  000a6	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  000aa	41 f7 80 00 01
	00 00 00 00 00
	10		 test	 DWORD PTR [r8+256], 268435456 ; 10000000H
  000b5	0f 85 d6 00 00
	00		 jne	 $LN26@stringio_i@2

; 688  :         PyErr_Format(PyExc_TypeError,
; 689  :                      "initial_value must be str or None, not %.200s",
; 690  :                      Py_TYPE(value)->tp_name);

  000bb	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  000bf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@EIJEHAIM@initial_value?5must?5be?5str?5or?5Non@
  000cd	e8 00 00 00 00	 call	 PyErr_Format
$LN48@stringio_i@2:

; 691  :         return -1;

  000d2	83 c8 ff	 or	 eax, -1
  000d5	4c 8b 64 24 78	 mov	 r12, QWORD PTR [rsp+120]

; 760  : }

  000da	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000de	5f		 pop	 rdi
  000df	5d		 pop	 rbp
  000e0	5b		 pop	 rbx
  000e1	c3		 ret	 0
$LN35@stringio_i@2:

; 666  :     }
; 667  :     else if (newline_obj) {

  000e2	4d 85 c0	 test	 r8, r8
  000e5	74 5e		 je	 SHORT $LN43@stringio_i@2

; 668  :         if (!PyUnicode_Check(newline_obj)) {

  000e7	49 8b 40 58	 mov	 rax, QWORD PTR [r8+88]
  000eb	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  000f5	75 27		 jne	 SHORT $LN32@stringio_i@2

; 669  :             PyErr_Format(PyExc_TypeError,
; 670  :                          "newline must be str or None, not %.200s",
; 671  :                          Py_TYPE(newline_obj)->tp_name);

  000f7	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000fb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00102	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@JNJCNLJD@newline?5must?5be?5str?5or?5None?0?5not@
  00109	e8 00 00 00 00	 call	 PyErr_Format
  0010e	4c 8b 64 24 78	 mov	 r12, QWORD PTR [rsp+120]

; 672  :             return -1;

  00113	83 c8 ff	 or	 eax, -1

; 760  : }

  00116	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0011a	5f		 pop	 rdi
  0011b	5d		 pop	 rbp
  0011c	5b		 pop	 rbx
  0011d	c3		 ret	 0
$LN32@stringio_i@2:

; 673  :         }
; 674  :         newline = _PyUnicode_AsString(newline_obj);

  0011e	49 8b c8	 mov	 rcx, r8
  00121	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00126	48 8b f8	 mov	 rdi, rax

; 675  :         if (newline == NULL)

  00129	48 85 c0	 test	 rax, rax

; 676  :             return -1;

  0012c	74 a4		 je	 SHORT $LN48@stringio_i@2

; 677  :     }
; 678  : 
; 679  :     if (newline && newline[0] != '\0'
; 680  :         && !(newline[0] == '\n' && newline[1] == '\0')
; 681  :         && !(newline[0] == '\r' && newline[1] == '\0')
; 682  :         && !(newline[0] == '\r' && newline[1] == '\n' && newline[2] == '\0')) {

  0012e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00131	84 c0		 test	 al, al
  00133	0f 84 56 ff ff
	ff		 je	 $LN30@stringio_i@2
  00139	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR newline_obj$[rsp]
  00141	3c 0a		 cmp	 al, 10
  00143	75 0a		 jne	 SHORT $LN29@stringio_i@2
$LN43@stringio_i@2:
  00145	40 38 6f 01	 cmp	 BYTE PTR [rdi+1], bpl
  00149	0f 84 40 ff ff
	ff		 je	 $LN30@stringio_i@2
$LN29@stringio_i@2:
  0014f	80 3f 0d	 cmp	 BYTE PTR [rdi], 13
  00152	75 1a		 jne	 SHORT $LN27@stringio_i@2
  00154	0f b6 47 01	 movzx	 eax, BYTE PTR [rdi+1]
  00158	84 c0		 test	 al, al
  0015a	0f 84 2f ff ff
	ff		 je	 $LN30@stringio_i@2
  00160	3c 0a		 cmp	 al, 10
  00162	75 0a		 jne	 SHORT $LN27@stringio_i@2
  00164	40 38 6f 02	 cmp	 BYTE PTR [rdi+2], bpl
  00168	0f 84 21 ff ff
	ff		 je	 $LN30@stringio_i@2
$LN27@stringio_i@2:

; 683  :         PyErr_Format(PyExc_ValueError,
; 684  :                      "illegal newline value: %R", newline_obj);

  0016e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00175	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@BLBBMCNI@illegal?5newline?5value?3?5?$CFR?$AA@
  0017c	e8 00 00 00 00	 call	 PyErr_Format
  00181	4c 8b 64 24 78	 mov	 r12, QWORD PTR [rsp+120]

; 685  :         return -1;

  00186	83 c8 ff	 or	 eax, -1

; 760  : }

  00189	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0018d	5f		 pop	 rdi
  0018e	5d		 pop	 rbp
  0018f	5b		 pop	 rbx
  00190	c3		 ret	 0
$LN26@stringio_i@2:

; 692  :     }
; 693  : 
; 694  :     self->ok = 0;
; 695  : 
; 696  :     _PyAccu_Destroy(&self->accu);

  00191	48 8d 8b 88 00
	00 00		 lea	 rcx, QWORD PTR [rbx+136]
  00198	48 89 74 24 70	 mov	 QWORD PTR [rsp+112], rsi
  0019d	40 88 ab 98 00
	00 00		 mov	 BYTE PTR [rbx+152], bpl
  001a4	e8 00 00 00 00	 call	 _PyAccu_Destroy

; 697  :     Py_CLEAR(self->readnl);

  001a9	4c 8b 8b a8 00
	00 00		 mov	 r9, QWORD PTR [rbx+168]
  001b0	4d 85 c9	 test	 r9, r9
  001b3	74 38		 je	 SHORT $LN24@stringio_i@2
  001b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  001bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NKMPINCD@stringio_init?$AA@
  001c3	41 b8 b9 02 00
	00		 mov	 r8d, 697		; 000002b9H
  001c9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001d1	e8 00 00 00 00	 call	 _PyParallel_Guard
  001d6	85 c0		 test	 eax, eax
  001d8	75 13		 jne	 SHORT $LN24@stringio_i@2
  001da	48 8b 8b a8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+168]
  001e1	48 89 ab a8 00
	00 00		 mov	 QWORD PTR [rbx+168], rbp
  001e8	e8 00 00 00 00	 call	 _Py_DecRef
$LN24@stringio_i@2:

; 698  :     Py_CLEAR(self->writenl);

  001ed	4c 8b 8b b0 00
	00 00		 mov	 r9, QWORD PTR [rbx+176]
  001f4	4d 85 c9	 test	 r9, r9
  001f7	74 38		 je	 SHORT $LN20@stringio_i@2
  001f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  00200	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NKMPINCD@stringio_init?$AA@
  00207	41 b8 ba 02 00
	00		 mov	 r8d, 698		; 000002baH
  0020d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00215	e8 00 00 00 00	 call	 _PyParallel_Guard
  0021a	85 c0		 test	 eax, eax
  0021c	75 13		 jne	 SHORT $LN20@stringio_i@2
  0021e	48 8b 8b b0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+176]
  00225	48 89 ab b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rbp
  0022c	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@stringio_i@2:

; 699  :     Py_CLEAR(self->decoder);

  00231	4c 8b 8b a0 00
	00 00		 mov	 r9, QWORD PTR [rbx+160]
  00238	4d 85 c9	 test	 r9, r9
  0023b	74 38		 je	 SHORT $LN16@stringio_i@2
  0023d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  00244	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NKMPINCD@stringio_init?$AA@
  0024b	41 b8 bb 02 00
	00		 mov	 r8d, 699		; 000002bbH
  00251	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00259	e8 00 00 00 00	 call	 _PyParallel_Guard
  0025e	85 c0		 test	 eax, eax
  00260	75 13		 jne	 SHORT $LN16@stringio_i@2
  00262	48 8b 8b a0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+160]
  00269	48 89 ab a0 00
	00 00		 mov	 QWORD PTR [rbx+160], rbp
  00270	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@stringio_i@2:

; 700  : 
; 701  :     assert((newline != NULL && newline_obj != Py_None) ||
; 702  :            (newline == NULL && newline_obj == Py_None));
; 703  : 
; 704  :     if (newline) {

  00275	48 85 ff	 test	 rdi, rdi
  00278	74 1f		 je	 SHORT $LN39@stringio_i@2

; 705  :         self->readnl = PyUnicode_FromString(newline);

  0027a	48 8b cf	 mov	 rcx, rdi
  0027d	e8 00 00 00 00	 call	 PyUnicode_FromString
  00282	48 89 83 a8 00
	00 00		 mov	 QWORD PTR [rbx+168], rax

; 706  :         if (self->readnl == NULL)

  00289	48 85 c0	 test	 rax, rax

; 707  :             return -1;

  0028c	0f 84 b9 00 00
	00		 je	 $LN47@stringio_i@2

; 708  :     }
; 709  :     self->readuniversal = (newline == NULL || newline[0] == '\0');

  00292	8b c5		 mov	 eax, ebp
  00294	40 38 2f	 cmp	 BYTE PTR [rdi], bpl
  00297	75 05		 jne	 SHORT $LN40@stringio_i@2
$LN39@stringio_i@2:
  00299	b8 01 00 00 00	 mov	 eax, 1
$LN40@stringio_i@2:

; 710  :     self->readtranslate = (newline == NULL);

  0029e	48 85 ff	 test	 rdi, rdi
  002a1	88 83 9a 00 00
	00		 mov	 BYTE PTR [rbx+154], al
  002a7	0f 94 c0	 sete	 al
  002aa	88 83 9b 00 00
	00		 mov	 BYTE PTR [rbx+155], al

; 711  :     /* If newline == "", we don't translate anything.
; 712  :        If newline == "\n" or newline == None, we translate to "\n", which is
; 713  :        a no-op.
; 714  :        (for newline == None, TextIOWrapper translates to os.sepline, but it
; 715  :        is pointless for StringIO)
; 716  :     */
; 717  :     if (newline != NULL && newline[0] == '\r') {

  002b0	48 85 ff	 test	 rdi, rdi
  002b3	74 18		 je	 SHORT $LN11@stringio_i@2
  002b5	80 3f 0d	 cmp	 BYTE PTR [rdi], 13
  002b8	75 13		 jne	 SHORT $LN11@stringio_i@2

; 718  :         self->writenl = self->readnl;

  002ba	48 8b 8b a8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+168]
  002c1	48 89 8b b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rcx

; 719  :         Py_INCREF(self->writenl);

  002c8	e8 00 00 00 00	 call	 _Py_IncRef
$LN11@stringio_i@2:

; 720  :     }
; 721  : 
; 722  :     if (self->readuniversal) {

  002cd	40 38 ab 9a 00
	00 00		 cmp	 BYTE PTR [rbx+154], bpl
  002d4	74 2a		 je	 SHORT $LN9@stringio_i@2

; 723  :         self->decoder = PyObject_CallFunction(
; 724  :             (PyObject *)&PyIncrementalNewlineDecoder_Type,
; 725  :             "Oi", Py_None, (int) self->readtranslate);

  002d6	44 0f be 8b 9b
	00 00 00	 movsx	 r9d, BYTE PTR [rbx+155]
  002de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MPEHDMPO@Oi?$AA@
  002e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyIncrementalNewlineDecoder_Type
  002ec	4d 8b c4	 mov	 r8, r12
  002ef	e8 00 00 00 00	 call	 _PyObject_CallFunction_SizeT
  002f4	48 89 83 a0 00
	00 00		 mov	 QWORD PTR [rbx+160], rax

; 726  :         if (self->decoder == NULL)

  002fb	48 85 c0	 test	 rax, rax

; 727  :             return -1;

  002fe	74 4b		 je	 SHORT $LN47@stringio_i@2
$LN9@stringio_i@2:

; 728  :     }
; 729  : 
; 730  :     /* Now everything is set up, resize buffer to size of initial value,
; 731  :        and copy it */
; 732  :     self->string_size = 0;
; 733  :     if (value && value != Py_None)

  00300	48 8b 4c 24 30	 mov	 rcx, QWORD PTR value$[rsp]
  00305	48 89 6b 70	 mov	 QWORD PTR [rbx+112], rbp
  00309	48 85 c9	 test	 rcx, rcx
  0030c	74 42		 je	 SHORT $LN6@stringio_i@2
  0030e	49 3b cc	 cmp	 rcx, r12
  00311	74 3d		 je	 SHORT $LN6@stringio_i@2

; 734  :         value_len = PyUnicode_GetLength(value);

  00313	e8 00 00 00 00	 call	 PyUnicode_GetLength

; 735  :     else
; 736  :         value_len = 0;
; 737  :     if (value_len > 0) {

  00318	48 85 c0	 test	 rax, rax
  0031b	7e 33		 jle	 SHORT $LN6@stringio_i@2

; 738  :         /* This is a heuristic, for newline translation might change
; 739  :            the string length. */
; 740  :         if (resize_buffer(self, 0) < 0)

  0031d	33 d2		 xor	 edx, edx
  0031f	48 8b cb	 mov	 rcx, rbx
  00322	e8 00 00 00 00	 call	 resize_buffer
  00327	85 c0		 test	 eax, eax

; 741  :             return -1;

  00329	78 20		 js	 SHORT $LN47@stringio_i@2

; 742  :         self->state = STATE_REALIZED;
; 743  :         self->pos = 0;
; 744  :         if (write_str(self, value) < 0)

  0032b	48 8b 54 24 30	 mov	 rdx, QWORD PTR value$[rsp]
  00330	48 8b cb	 mov	 rcx, rbx
  00333	c7 83 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rbx+128], 1
  0033d	48 89 6b 68	 mov	 QWORD PTR [rbx+104], rbp
  00341	e8 00 00 00 00	 call	 write_str
  00346	48 85 c0	 test	 rax, rax
  00349	79 2d		 jns	 SHORT $LN3@stringio_i@2
$LN47@stringio_i@2:

; 745  :             return -1;

  0034b	83 c8 ff	 or	 eax, -1
  0034e	eb 37		 jmp	 SHORT $LN46@stringio_i@2
$LN6@stringio_i@2:

; 746  :     }
; 747  :     else {
; 748  :         /* Empty stringio object, we can start by accumulating */
; 749  :         if (resize_buffer(self, 0) < 0)

  00350	33 d2		 xor	 edx, edx
  00352	48 8b cb	 mov	 rcx, rbx
  00355	e8 00 00 00 00	 call	 resize_buffer
  0035a	85 c0		 test	 eax, eax

; 750  :             return -1;

  0035c	78 ed		 js	 SHORT $LN47@stringio_i@2

; 751  :         if (_PyAccu_Init(&self->accu))

  0035e	48 8d 8b 88 00
	00 00		 lea	 rcx, QWORD PTR [rbx+136]
  00365	e8 00 00 00 00	 call	 _PyAccu_Init
  0036a	85 c0		 test	 eax, eax

; 752  :             return -1;

  0036c	75 dd		 jne	 SHORT $LN47@stringio_i@2

; 753  :         self->state = STATE_ACCUMULATING;

  0036e	c7 83 80 00 00
	00 02 00 00 00	 mov	 DWORD PTR [rbx+128], 2
$LN3@stringio_i@2:

; 754  :     }
; 755  :     self->pos = 0;

  00378	48 89 6b 68	 mov	 QWORD PTR [rbx+104], rbp

; 756  : 
; 757  :     self->closed = 0;

  0037c	66 c7 83 98 00
	00 00 01 00	 mov	 WORD PTR [rbx+152], 1

; 758  :     self->ok = 1;
; 759  :     return 0;

  00385	33 c0		 xor	 eax, eax
$LN46@stringio_i@2:
  00387	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  0038c	4c 8b 64 24 78	 mov	 r12, QWORD PTR [rsp+120]

; 760  : }

  00391	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00395	5f		 pop	 rdi
  00396	5d		 pop	 rbp
  00397	5b		 pop	 rbx
  00398	c3		 ret	 0
stringio_init ENDP
_TEXT	ENDS
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stringio_seekable DD imagerel stringio_seekable
	DD	imagerel stringio_seekable+155
	DD	imagerel $unwind$stringio_seekable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_seekable DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\stringio.c
xdata	ENDS
;	COMDAT stringio_seekable
_TEXT	SEGMENT
self$ = 64
args$ = 72
stringio_seekable PROC					; COMDAT

; 775  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 776  :     CHECK_INITIALIZED(self);

  00004	80 b9 98 00 00
	00 00		 cmp	 BYTE PTR [rcx+152], 0
  0000b	7f 1a		 jg	 SHORT $LN2@stringio_s@2
  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0001b	e8 00 00 00 00	 call	 PyErr_SetString
  00020	33 c0		 xor	 eax, eax

; 779  : }

  00022	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00026	c3		 ret	 0
$LN2@stringio_s@2:

; 777  :     CHECK_CLOSED(self);

  00027	80 b9 99 00 00
	00 00		 cmp	 BYTE PTR [rcx+153], 0
  0002e	74 1a		 je	 SHORT $LN1@stringio_s@2
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0003e	e8 00 00 00 00	 call	 PyErr_SetString
  00043	33 c0		 xor	 eax, eax

; 779  : }

  00045	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00049	c3		 ret	 0
$LN1@stringio_s@2:

; 778  :     Py_RETURN_TRUE;

  0004a	e8 00 00 00 00	 call	 _Py_PXCTX
  0004f	85 c0		 test	 eax, eax
  00051	75 3c		 jne	 SHORT $LN6@stringio_s@2
  00053	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00068	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00076	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007b	85 c0		 test	 eax, eax
  0007d	75 09		 jne	 SHORT $LN5@stringio_s@2
  0007f	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  00086	74 07		 je	 SHORT $LN6@stringio_s@2
$LN5@stringio_s@2:
  00088	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN6@stringio_s@2:
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 779  : }

  00096	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009a	c3		 ret	 0
stringio_seekable ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stringio_readable DD imagerel stringio_readable
	DD	imagerel stringio_readable+155
	DD	imagerel $unwind$stringio_readable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_readable DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\stringio.c
xdata	ENDS
;	COMDAT stringio_readable
_TEXT	SEGMENT
self$ = 64
args$ = 72
stringio_readable PROC					; COMDAT

; 783  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 784  :     CHECK_INITIALIZED(self);

  00004	80 b9 98 00 00
	00 00		 cmp	 BYTE PTR [rcx+152], 0
  0000b	7f 1a		 jg	 SHORT $LN2@stringio_r@4
  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0001b	e8 00 00 00 00	 call	 PyErr_SetString
  00020	33 c0		 xor	 eax, eax

; 787  : }

  00022	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00026	c3		 ret	 0
$LN2@stringio_r@4:

; 785  :     CHECK_CLOSED(self);

  00027	80 b9 99 00 00
	00 00		 cmp	 BYTE PTR [rcx+153], 0
  0002e	74 1a		 je	 SHORT $LN1@stringio_r@4
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0003e	e8 00 00 00 00	 call	 PyErr_SetString
  00043	33 c0		 xor	 eax, eax

; 787  : }

  00045	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00049	c3		 ret	 0
$LN1@stringio_r@4:

; 786  :     Py_RETURN_TRUE;

  0004a	e8 00 00 00 00	 call	 _Py_PXCTX
  0004f	85 c0		 test	 eax, eax
  00051	75 3c		 jne	 SHORT $LN6@stringio_r@4
  00053	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00068	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00076	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007b	85 c0		 test	 eax, eax
  0007d	75 09		 jne	 SHORT $LN5@stringio_r@4
  0007f	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  00086	74 07		 je	 SHORT $LN6@stringio_r@4
$LN5@stringio_r@4:
  00088	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN6@stringio_r@4:
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 787  : }

  00096	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009a	c3		 ret	 0
stringio_readable ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stringio_writable DD imagerel stringio_writable
	DD	imagerel stringio_writable+155
	DD	imagerel $unwind$stringio_writable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_writable DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\stringio.c
xdata	ENDS
;	COMDAT stringio_writable
_TEXT	SEGMENT
self$ = 64
args$ = 72
stringio_writable PROC					; COMDAT

; 791  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 792  :     CHECK_INITIALIZED(self);

  00004	80 b9 98 00 00
	00 00		 cmp	 BYTE PTR [rcx+152], 0
  0000b	7f 1a		 jg	 SHORT $LN2@stringio_w@2
  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0001b	e8 00 00 00 00	 call	 PyErr_SetString
  00020	33 c0		 xor	 eax, eax

; 795  : }

  00022	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00026	c3		 ret	 0
$LN2@stringio_w@2:

; 793  :     CHECK_CLOSED(self);

  00027	80 b9 99 00 00
	00 00		 cmp	 BYTE PTR [rcx+153], 0
  0002e	74 1a		 je	 SHORT $LN1@stringio_w@2
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0003e	e8 00 00 00 00	 call	 PyErr_SetString
  00043	33 c0		 xor	 eax, eax

; 795  : }

  00045	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00049	c3		 ret	 0
$LN1@stringio_w@2:

; 794  :     Py_RETURN_TRUE;

  0004a	e8 00 00 00 00	 call	 _Py_PXCTX
  0004f	85 c0		 test	 eax, eax
  00051	75 3c		 jne	 SHORT $LN6@stringio_w@2
  00053	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00068	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00076	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007b	85 c0		 test	 eax, eax
  0007d	75 09		 jne	 SHORT $LN5@stringio_w@2
  0007f	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  00086	74 07		 je	 SHORT $LN6@stringio_w@2
$LN5@stringio_w@2:
  00088	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN6@stringio_w@2:
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 795  : }

  00096	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009a	c3		 ret	 0
stringio_writable ENDP
_TEXT	ENDS
PUBLIC	??_C@_06FPNHJPEK@?$CIOOnN?$CJ?$AA@		; `string'
EXTRN	PyDict_Copy:PROC
EXTRN	_Py_BuildValue_SizeT:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stringio_getstate DD imagerel stringio_getstate
	DD	imagerel stringio_getstate+44
	DD	imagerel $unwind$stringio_getstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$stringio_getstate DD imagerel stringio_getstate+44
	DD	imagerel stringio_getstate+204
	DD	imagerel $chain$0$stringio_getstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$stringio_getstate DD imagerel stringio_getstate+204
	DD	imagerel stringio_getstate+233
	DD	imagerel $chain$2$stringio_getstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$stringio_getstate DD 020021H
	DD	087400H
	DD	imagerel stringio_getstate
	DD	imagerel stringio_getstate+44
	DD	imagerel $unwind$stringio_getstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$stringio_getstate DD 020521H
	DD	087405H
	DD	imagerel stringio_getstate
	DD	imagerel stringio_getstate+44
	DD	imagerel $unwind$stringio_getstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_getstate DD 040a01H
	DD	09340aH
	DD	06006520aH
xdata	ENDS
;	COMDAT ??_C@_06FPNHJPEK@?$CIOOnN?$CJ?$AA@
CONST	SEGMENT
??_C@_06FPNHJPEK@?$CIOOnN?$CJ?$AA@ DB '(OOnN)', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\stringio.c
CONST	ENDS
;	COMDAT stringio_getstate
_TEXT	SEGMENT
self$ = 64
stringio_getstate PROC					; COMDAT

; 811  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b d9	 mov	 rbx, rcx

; 812  :     PyObject *initvalue = stringio_getvalue(self);

  0000d	e8 00 00 00 00	 call	 stringio_getvalue
  00012	48 8b f0	 mov	 rsi, rax

; 813  :     PyObject *dict;
; 814  :     PyObject *state;
; 815  : 
; 816  :     if (initvalue == NULL)

  00015	48 85 c0	 test	 rax, rax
  00018	75 0b		 jne	 SHORT $LN4@stringio_g@2

; 833  : }

  0001a	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0001f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00023	5e		 pop	 rsi
  00024	c3		 ret	 0
$LN4@stringio_g@2:

; 817  :         return NULL;
; 818  :     if (self->dict == NULL) {

  00025	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  0002c	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00031	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  00038	48 85 c9	 test	 rcx, rcx
  0003b	0f 85 8b 00 00
	00		 jne	 $LN3@stringio_g@2

; 819  :         Py_INCREF(Py_None);

  00041	e8 00 00 00 00	 call	 _Py_PXCTX
  00046	85 c0		 test	 eax, eax
  00048	75 38		 jne	 SHORT $LN10@stringio_g@2
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00058	4c 8b cf	 mov	 r9, rdi
  0005b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00061	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00069	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006e	85 c0		 test	 eax, eax
  00070	75 09		 jne	 SHORT $LN9@stringio_g@2
  00072	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00079	74 07		 je	 SHORT $LN10@stringio_g@2
$LN9@stringio_g@2:
  0007b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN10@stringio_g@2:

; 820  :         dict = Py_None;

  00082	48 8b cf	 mov	 rcx, rdi
$LN1@stringio_g@2:

; 825  :             return NULL;
; 826  :     }
; 827  : 
; 828  :     state = Py_BuildValue("(OOnN)", initvalue,
; 829  :                           self->readnl ? self->readnl : Py_None,
; 830  :                           self->pos, dict);

  00085	48 8b 83 a8 00
	00 00		 mov	 rax, QWORD PTR [rbx+168]
  0008c	4c 8b 4b 68	 mov	 r9, QWORD PTR [rbx+104]
  00090	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00095	48 85 c0	 test	 rax, rax
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FPNHJPEK@?$CIOOnN?$CJ?$AA@
  0009f	48 8b d6	 mov	 rdx, rsi
  000a2	48 0f 45 f8	 cmovne	 rdi, rax
  000a6	4c 8b c7	 mov	 r8, rdi
  000a9	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT

; 831  :     Py_DECREF(initvalue);

  000ae	48 8b ce	 mov	 rcx, rsi
  000b1	48 8b d8	 mov	 rbx, rax
  000b4	e8 00 00 00 00	 call	 _Py_DecRef
  000b9	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 832  :     return state;

  000be	48 8b c3	 mov	 rax, rbx

; 833  : }

  000c1	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000c6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ca	5e		 pop	 rsi
  000cb	c3		 ret	 0
$LN3@stringio_g@2:

; 821  :     }
; 822  :     else {
; 823  :         dict = PyDict_Copy(self->dict);

  000cc	e8 00 00 00 00	 call	 PyDict_Copy
  000d1	48 8b c8	 mov	 rcx, rax

; 824  :         if (dict == NULL)

  000d4	48 85 c0	 test	 rax, rax
  000d7	75 ac		 jne	 SHORT $LN1@stringio_g@2
  000d9	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 833  : }

  000de	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000e3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e7	5e		 pop	 rsi
  000e8	c3		 ret	 0
stringio_getstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DL@OLKILEH@?$CF?4200s?4__setstate__?5argument?5sho@ ; `string'
PUBLIC	??_C@_0DE@JKPKACMP@fourth?5item?5of?5state?5should?5be?5a@ ; `string'
PUBLIC	??_C@_0CC@PHIJAEHN@position?5value?5cannot?5be?5negativ@ ; `string'
PUBLIC	??_C@_0DD@NIONAAAA@third?5item?5of?5state?5must?5be?5an?5i@ ; `string'
EXTRN	PyDict_Update:PROC
EXTRN	PyLong_AsSsize_t:PROC
EXTRN	PyUnicode_AsUCS4Copy:PROC
EXTRN	PyTuple_GetSlice:PROC
EXTRN	memcpy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_setstate DD imagerel stringio_setstate
	DD	imagerel stringio_setstate+94
	DD	imagerel $unwind$stringio_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$stringio_setstate DD imagerel stringio_setstate+94
	DD	imagerel stringio_setstate+160
	DD	imagerel $chain$0$stringio_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$stringio_setstate DD imagerel stringio_setstate+160
	DD	imagerel stringio_setstate+321
	DD	imagerel $chain$3$stringio_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$stringio_setstate DD imagerel stringio_setstate+321
	DD	imagerel stringio_setstate+486
	DD	imagerel $chain$5$stringio_setstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$stringio_setstate DD imagerel stringio_setstate+486
	DD	imagerel stringio_setstate+530
	DD	imagerel $chain$6$stringio_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$stringio_setstate DD 021H
	DD	imagerel stringio_setstate
	DD	imagerel stringio_setstate+94
	DD	imagerel $unwind$stringio_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$stringio_setstate DD 040021H
	DD	076400H
	DD	065400H
	DD	imagerel stringio_setstate
	DD	imagerel stringio_setstate+94
	DD	imagerel $unwind$stringio_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$stringio_setstate DD 040521H
	DD	065405H
	DD	076400H
	DD	imagerel stringio_setstate
	DD	imagerel stringio_setstate+94
	DD	imagerel $unwind$stringio_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$stringio_setstate DD 020521H
	DD	076405H
	DD	imagerel stringio_setstate
	DD	imagerel stringio_setstate+94
	DD	imagerel $unwind$stringio_setstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_setstate DD 040a01H
	DD	08340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0DL@OLKILEH@?$CF?4200s?4__setstate__?5argument?5sho@
CONST	SEGMENT
??_C@_0DL@OLKILEH@?$CF?4200s?4__setstate__?5argument?5sho@ DB '%.200s.__s'
	DB	'etstate__ argument should be 4-tuple, got %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JKPKACMP@fourth?5item?5of?5state?5should?5be?5a@
CONST	SEGMENT
??_C@_0DE@JKPKACMP@fourth?5item?5of?5state?5should?5be?5a@ DB 'fourth ite'
	DB	'm of state should be a dict, got a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PHIJAEHN@position?5value?5cannot?5be?5negativ@
CONST	SEGMENT
??_C@_0CC@PHIJAEHN@position?5value?5cannot?5be?5negativ@ DB 'position val'
	DB	'ue cannot be negative', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@NIONAAAA@third?5item?5of?5state?5must?5be?5an?5i@
CONST	SEGMENT
??_C@_0DD@NIONAAAA@third?5item?5of?5state?5must?5be?5an?5i@ DB 'third ite'
	DB	'm of state must be an integer, got %.200s', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT stringio_setstate
_TEXT	SEGMENT
self$ = 48
state$ = 56
stringio_setstate PROC					; COMDAT

; 837  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 838  :     PyObject *initarg;
; 839  :     PyObject *position_obj;
; 840  :     PyObject *dict;
; 841  :     Py_ssize_t pos;
; 842  : 
; 843  :     assert(state != NULL);
; 844  :     CHECK_CLOSED(self);

  0000a	80 b9 99 00 00
	00 00		 cmp	 BYTE PTR [rcx+153], 0
  00011	48 8b fa	 mov	 rdi, rdx
  00014	48 8b d9	 mov	 rbx, rcx
  00017	74 20		 je	 SHORT $LN15@stringio_s@3
  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  00027	e8 00 00 00 00	 call	 PyErr_SetString
  0002c	33 c0		 xor	 eax, eax

; 934  : }

  0002e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
$LN15@stringio_s@3:

; 845  : 
; 846  :     /* We allow the state tuple to be longer than 4, because we may need
; 847  :        someday to extend the object's state without breaking
; 848  :        backward-compatibility. */
; 849  :     if (!PyTuple_Check(state) || Py_SIZE(state) < 4) {

  00039	4c 8b 4a 58	 mov	 r9, QWORD PTR [rdx+88]
  0003d	41 f7 81 00 01
	00 00 00 00 00
	04		 test	 DWORD PTR [r9+256], 67108864 ; 04000000H
  00048	0f 84 98 01 00
	00		 je	 $LN13@stringio_s@3
  0004e	48 83 7a 60 04	 cmp	 QWORD PTR [rdx+96], 4
  00053	0f 8c 8d 01 00
	00		 jl	 $LN13@stringio_s@3

; 853  :         return NULL;
; 854  :     }
; 855  : 
; 856  :     /* Initialize the object's state. */
; 857  :     initarg = PyTuple_GetSlice(state, 0, 2);

  00059	33 d2		 xor	 edx, edx
  0005b	48 8b cf	 mov	 rcx, rdi
  0005e	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  00063	44 8d 42 02	 lea	 r8d, QWORD PTR [rdx+2]
  00067	e8 00 00 00 00	 call	 PyTuple_GetSlice
  0006c	48 8b f0	 mov	 rsi, rax

; 858  :     if (initarg == NULL)

  0006f	48 85 c0	 test	 rax, rax

; 859  :         return NULL;

  00072	74 1a		 je	 SHORT $LN22@stringio_s@3

; 860  :     if (stringio_init(self, initarg, NULL) < 0) {

  00074	45 33 c0	 xor	 r8d, r8d
  00077	48 8b d0	 mov	 rdx, rax
  0007a	48 8b cb	 mov	 rcx, rbx
  0007d	e8 00 00 00 00	 call	 stringio_init

; 861  :         Py_DECREF(initarg);

  00082	48 8b ce	 mov	 rcx, rsi
  00085	85 c0		 test	 eax, eax
  00087	79 17		 jns	 SHORT $LN11@stringio_s@3
  00089	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@stringio_s@3:

; 862  :         return NULL;

  0008e	33 c0		 xor	 eax, eax
  00090	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]

; 934  : }

  00095	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0009a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009e	5f		 pop	 rdi
  0009f	c3		 ret	 0
$LN11@stringio_s@3:
  000a0	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp

; 863  :     }
; 864  :     Py_DECREF(initarg);

  000a5	e8 00 00 00 00	 call	 _Py_DecRef

; 865  : 
; 866  :     /* Restore the buffer state. Even if __init__ did initialize the buffer,
; 867  :        we have to initialize it again since __init__ may translates the
; 868  :        newlines in the inital_value string. We clearly do not want that
; 869  :        because the string value in the state tuple has already been translated
; 870  :        once by __init__. So we do not take any chance and replace object's
; 871  :        buffer completely. */
; 872  :     {
; 873  :         PyObject *item;
; 874  :         Py_UCS4 *buf;
; 875  :         Py_ssize_t bufsize;
; 876  : 
; 877  :         item = PyTuple_GET_ITEM(state, 0);

  000aa	48 8b 6f 70	 mov	 rbp, QWORD PTR [rdi+112]

; 878  :         buf = PyUnicode_AsUCS4Copy(item);

  000ae	48 8b cd	 mov	 rcx, rbp
  000b1	e8 00 00 00 00	 call	 PyUnicode_AsUCS4Copy
  000b6	48 8b f0	 mov	 rsi, rax

; 879  :         if (buf == NULL)

  000b9	48 85 c0	 test	 rax, rax

; 880  :             return NULL;

  000bc	74 6c		 je	 SHORT $LN21@stringio_s@3

; 881  :         bufsize = PyUnicode_GET_LENGTH(item);

  000be	48 8b 6d 60	 mov	 rbp, QWORD PTR [rbp+96]

; 882  : 
; 883  :         if (resize_buffer(self, bufsize) < 0) {

  000c2	48 8b cb	 mov	 rcx, rbx
  000c5	48 8b d5	 mov	 rdx, rbp
  000c8	e8 00 00 00 00	 call	 resize_buffer
  000cd	85 c0		 test	 eax, eax
  000cf	79 0a		 jns	 SHORT $LN9@stringio_s@3

; 884  :             PyMem_Free(buf);

  000d1	48 8b ce	 mov	 rcx, rsi
  000d4	e8 00 00 00 00	 call	 PyMem_Free

; 885  :             return NULL;

  000d9	eb 4f		 jmp	 SHORT $LN21@stringio_s@3
$LN9@stringio_s@3:

; 886  :         }
; 887  :         memcpy(self->buf, buf, bufsize * sizeof(Py_UCS4));

  000db	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000df	4c 8d 04 ad 00
	00 00 00	 lea	 r8, QWORD PTR [rbp*4]
  000e7	48 8b d6	 mov	 rdx, rsi
  000ea	e8 00 00 00 00	 call	 memcpy

; 888  :         PyMem_Free(buf);

  000ef	48 8b ce	 mov	 rcx, rsi
  000f2	e8 00 00 00 00	 call	 PyMem_Free

; 889  :         self->string_size = bufsize;

  000f7	48 89 6b 70	 mov	 QWORD PTR [rbx+112], rbp

; 890  :     }
; 891  : 
; 892  :     /* Set carefully the position value. Alternatively, we could use the seek
; 893  :        method instead of modifying self->pos directly to better protect the
; 894  :        object internal state against errneous (or malicious) inputs. */
; 895  :     position_obj = PyTuple_GET_ITEM(state, 2);

  000fb	48 8b 8f 80 00
	00 00		 mov	 rcx, QWORD PTR [rdi+128]

; 896  :     if (!PyLong_Check(position_obj)) {

  00102	4c 8b 41 58	 mov	 r8, QWORD PTR [rcx+88]
  00106	41 f7 80 00 01
	00 00 00 00 00
	01		 test	 DWORD PTR [r8+256], 16777216 ; 01000000H
  00111	75 2e		 jne	 SHORT $LN8@stringio_s@3

; 897  :         PyErr_Format(PyExc_TypeError,
; 898  :                      "third item of state must be an integer, got %.200s",
; 899  :                      Py_TYPE(position_obj)->tp_name);

  00113	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00117	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@NIONAAAA@third?5item?5of?5state?5must?5be?5an?5i@
$LN23@stringio_s@3:
  0011e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00125	e8 00 00 00 00	 call	 PyErr_Format
$LN21@stringio_s@3:

; 919  :             return NULL;

  0012a	33 c0		 xor	 eax, eax
$LN20@stringio_s@3:
  0012c	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  00131	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]

; 934  : }

  00136	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0013b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0013f	5f		 pop	 rdi
  00140	c3		 ret	 0
$LN8@stringio_s@3:

; 900  :         return NULL;
; 901  :     }
; 902  :     pos = PyLong_AsSsize_t(position_obj);

  00141	e8 00 00 00 00	 call	 PyLong_AsSsize_t

; 903  :     if (pos == -1 && PyErr_Occurred())

  00146	48 83 f8 ff	 cmp	 rax, -1
  0014a	75 0c		 jne	 SHORT $LN7@stringio_s@3
  0014c	e8 00 00 00 00	 call	 PyErr_Occurred
  00151	48 85 c0	 test	 rax, rax
  00154	74 07		 je	 SHORT $LN18@stringio_s@3

; 904  :         return NULL;

  00156	eb d2		 jmp	 SHORT $LN21@stringio_s@3
$LN7@stringio_s@3:

; 905  :     if (pos < 0) {

  00158	48 85 c0	 test	 rax, rax
  0015b	79 15		 jns	 SHORT $LN6@stringio_s@3
$LN18@stringio_s@3:

; 906  :         PyErr_SetString(PyExc_ValueError,
; 907  :                         "position value cannot be negative");

  0015d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00164	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@PHIJAEHN@position?5value?5cannot?5be?5negativ@
  0016b	e8 00 00 00 00	 call	 PyErr_SetString

; 908  :         return NULL;

  00170	eb b8		 jmp	 SHORT $LN21@stringio_s@3
$LN6@stringio_s@3:

; 909  :     }
; 910  :     self->pos = pos;

  00172	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 911  : 
; 912  :     /* Set the dictionary of the instance variables. */
; 913  :     dict = PyTuple_GET_ITEM(state, 3);

  00176	48 8b bf 88 00
	00 00		 mov	 rdi, QWORD PTR [rdi+136]

; 914  :     if (dict != Py_None) {

  0017d	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:_Py_NoneStruct
  00184	48 3b fe	 cmp	 rdi, rsi
  00187	74 4d		 je	 SHORT $LN1@stringio_s@3

; 915  :         if (!PyDict_Check(dict)) {

  00189	4c 8b 47 58	 mov	 r8, QWORD PTR [rdi+88]
  0018d	41 f7 80 00 01
	00 00 00 00 00
	20		 test	 DWORD PTR [r8+256], 536870912 ; 20000000H
  00198	75 10		 jne	 SHORT $LN4@stringio_s@3

; 916  :             PyErr_Format(PyExc_TypeError,
; 917  :                          "fourth item of state should be a dict, got a %.200s",
; 918  :                          Py_TYPE(dict)->tp_name);

  0019a	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  0019e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@JKPKACMP@fourth?5item?5of?5state?5should?5be?5a@

; 919  :             return NULL;

  001a5	e9 74 ff ff ff	 jmp	 $LN23@stringio_s@3
$LN4@stringio_s@3:

; 920  :         }
; 921  :         if (self->dict) {

  001aa	48 8b 8b b8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+184]
  001b1	48 85 c9	 test	 rcx, rcx
  001b4	74 11		 je	 SHORT $LN3@stringio_s@3

; 922  :             /* Alternatively, we could replace the internal dictionary
; 923  :                completely. However, it seems more practical to just update it. */
; 924  :             if (PyDict_Update(self->dict, dict) < 0)

  001b6	48 8b d7	 mov	 rdx, rdi
  001b9	e8 00 00 00 00	 call	 PyDict_Update
  001be	85 c0		 test	 eax, eax
  001c0	79 14		 jns	 SHORT $LN1@stringio_s@3

; 925  :                 return NULL;

  001c2	e9 63 ff ff ff	 jmp	 $LN21@stringio_s@3
$LN3@stringio_s@3:

; 926  :         }
; 927  :         else {
; 928  :             Py_INCREF(dict);

  001c7	48 8b cf	 mov	 rcx, rdi
  001ca	e8 00 00 00 00	 call	 _Py_IncRef

; 929  :             self->dict = dict;

  001cf	48 89 bb b8 00
	00 00		 mov	 QWORD PTR [rbx+184], rdi
$LN1@stringio_s@3:

; 930  :         }
; 931  :     }
; 932  : 
; 933  :     Py_RETURN_NONE;

  001d6	48 8b ce	 mov	 rcx, rsi
  001d9	e8 00 00 00 00	 call	 _Py_IncRef
  001de	48 8b c6	 mov	 rax, rsi
  001e1	e9 46 ff ff ff	 jmp	 $LN20@stringio_s@3
$LN13@stringio_s@3:

; 850  :         PyErr_Format(PyExc_TypeError,
; 851  :                      "%.200s.__setstate__ argument should be 4-tuple, got %.200s",
; 852  :                      Py_TYPE(self)->tp_name, Py_TYPE(state)->tp_name);

  001e6	4c 8b 41 58	 mov	 r8, QWORD PTR [rcx+88]
  001ea	4d 8b 49 70	 mov	 r9, QWORD PTR [r9+112]
  001ee	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001f5	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  001f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DL@OLKILEH@?$CF?4200s?4__setstate__?5argument?5sho@
  00200	e8 00 00 00 00	 call	 PyErr_Format

; 934  : }

  00205	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0020a	33 c0		 xor	 eax, eax
  0020c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00210	5f		 pop	 rdi
  00211	c3		 ret	 0
stringio_setstate ENDP
_TEXT	ENDS
EXTRN	PyBool_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_closed DD imagerel stringio_closed
	DD	imagerel stringio_closed+55
	DD	imagerel $unwind$stringio_closed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_closed DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT stringio_closed
_TEXT	SEGMENT
self$ = 48
context$ = 56
stringio_closed PROC					; COMDAT

; 939  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 940  :     CHECK_INITIALIZED(self);

  00004	80 b9 98 00 00
	00 00		 cmp	 BYTE PTR [rcx+152], 0
  0000b	7f 1a		 jg	 SHORT $LN1@stringio_c@3
  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0001b	e8 00 00 00 00	 call	 PyErr_SetString
  00020	33 c0		 xor	 eax, eax

; 942  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
$LN1@stringio_c@3:

; 941  :     return PyBool_FromLong(self->closed);

  00027	0f be 89 99 00
	00 00		 movsx	 ecx, BYTE PTR [rcx+153]

; 942  : }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	e9 00 00 00 00	 jmp	 PyBool_FromLong
stringio_closed ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stringio_line_buffering DD imagerel stringio_line_buffering
	DD	imagerel stringio_line_buffering+155
	DD	imagerel $unwind$stringio_line_buffering
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_line_buffering DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\stringio.c
xdata	ENDS
;	COMDAT stringio_line_buffering
_TEXT	SEGMENT
self$ = 64
context$ = 72
stringio_line_buffering PROC				; COMDAT

; 946  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 947  :     CHECK_INITIALIZED(self);

  00004	80 b9 98 00 00
	00 00		 cmp	 BYTE PTR [rcx+152], 0
  0000b	7f 1a		 jg	 SHORT $LN2@stringio_l
  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0001b	e8 00 00 00 00	 call	 PyErr_SetString
  00020	33 c0		 xor	 eax, eax

; 950  : }

  00022	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00026	c3		 ret	 0
$LN2@stringio_l:

; 948  :     CHECK_CLOSED(self);

  00027	80 b9 99 00 00
	00 00		 cmp	 BYTE PTR [rcx+153], 0
  0002e	74 1a		 je	 SHORT $LN1@stringio_l
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0003e	e8 00 00 00 00	 call	 PyErr_SetString
  00043	33 c0		 xor	 eax, eax

; 950  : }

  00045	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00049	c3		 ret	 0
$LN1@stringio_l:

; 949  :     Py_RETURN_FALSE;

  0004a	e8 00 00 00 00	 call	 _Py_PXCTX
  0004f	85 c0		 test	 eax, eax
  00051	75 3c		 jne	 SHORT $LN6@stringio_l
  00053	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00068	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00076	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007b	85 c0		 test	 eax, eax
  0007d	75 09		 jne	 SHORT $LN5@stringio_l
  0007f	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00086	74 07		 je	 SHORT $LN6@stringio_l
$LN5@stringio_l:
  00088	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN6@stringio_l:
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 950  : }

  00096	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009a	c3		 ret	 0
stringio_line_buffering ENDP
_TEXT	ENDS
EXTRN	PyObject_GetAttr:PROC
EXTRN	_PyIO_str_newlines:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$stringio_newlines DD imagerel stringio_newlines
	DD	imagerel stringio_newlines+183
	DD	imagerel $unwind$stringio_newlines
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_newlines DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_io\stringio.c
xdata	ENDS
;	COMDAT stringio_newlines
_TEXT	SEGMENT
self$ = 64
context$ = 72
stringio_newlines PROC					; COMDAT

; 954  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 955  :     CHECK_INITIALIZED(self);

  00004	80 b9 98 00 00
	00 00		 cmp	 BYTE PTR [rcx+152], 0
  0000b	7f 1a		 jg	 SHORT $LN3@stringio_n@2
  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0001b	e8 00 00 00 00	 call	 PyErr_SetString
  00020	33 c0		 xor	 eax, eax

; 960  : }

  00022	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00026	c3		 ret	 0
$LN3@stringio_n@2:

; 956  :     CHECK_CLOSED(self);

  00027	80 b9 99 00 00
	00 00		 cmp	 BYTE PTR [rcx+153], 0
  0002e	74 1a		 je	 SHORT $LN2@stringio_n@2
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0003e	e8 00 00 00 00	 call	 PyErr_SetString
  00043	33 c0		 xor	 eax, eax

; 960  : }

  00045	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00049	c3		 ret	 0
$LN2@stringio_n@2:

; 957  :     if (self->decoder == NULL)

  0004a	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00051	48 85 c9	 test	 rcx, rcx
  00054	75 51		 jne	 SHORT $LN1@stringio_n@2

; 958  :         Py_RETURN_NONE;

  00056	e8 00 00 00 00	 call	 _Py_PXCTX
  0005b	85 c0		 test	 eax, eax
  0005d	75 3c		 jne	 SHORT $LN7@stringio_n@2
  0005f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00066	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00074	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0007a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00082	e8 00 00 00 00	 call	 _PyParallel_Guard
  00087	85 c0		 test	 eax, eax
  00089	75 09		 jne	 SHORT $LN6@stringio_n@2
  0008b	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00092	74 07		 je	 SHORT $LN7@stringio_n@2
$LN6@stringio_n@2:
  00094	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@stringio_n@2:
  0009b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 960  : }

  000a2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a6	c3		 ret	 0
$LN1@stringio_n@2:

; 959  :     return PyObject_GetAttr(self->decoder, _PyIO_str_newlines);

  000a7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_newlines

; 960  : }

  000ae	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b2	e9 00 00 00 00	 jmp	 PyObject_GetAttr
stringio_newlines ENDP
_TEXT	ENDS
END
