; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Py_isspace__doc__
PUBLIC	_Py_isalpha__doc__
PUBLIC	_Py_isalnum__doc__
PUBLIC	_Py_isdigit__doc__
PUBLIC	_Py_islower__doc__
PUBLIC	_Py_isupper__doc__
PUBLIC	_Py_istitle__doc__
PUBLIC	_Py_lower__doc__
PUBLIC	_Py_upper__doc__
PUBLIC	_Py_title__doc__
PUBLIC	_Py_capitalize__doc__
PUBLIC	_Py_swapcase__doc__
PUBLIC	_Py_maketrans__doc__
CONST	SEGMENT
_Py_isspace__doc__ DB 'B.isspace() -> bool', 0aH, 0aH, 'Return True if al'
	DB	'l characters in B are whitespace', 0aH, 'and there is at leas'
	DB	't one character in B, False otherwise.', 00H
	ORG $+14
_Py_isalpha__doc__ DB 'B.isalpha() -> bool', 0aH, 0aH, 'Return True if al'
	DB	'l characters in B are alphabetic', 0aH, 'and there is at leas'
	DB	't one character in B, False otherwise.', 00H
	ORG $+14
_Py_isalnum__doc__ DB 'B.isalnum() -> bool', 0aH, 0aH, 'Return True if al'
	DB	'l characters in B are alphanumeric', 0aH, 'and there is at le'
	DB	'ast one character in B, False otherwise.', 00H
	ORG $+12
_Py_isdigit__doc__ DB 'B.isdigit() -> bool', 0aH, 0aH, 'Return True if al'
	DB	'l characters in B are digits', 0aH, 'and there is at least on'
	DB	'e character in B, False otherwise.', 00H
	ORG $+2
_Py_islower__doc__ DB 'B.islower() -> bool', 0aH, 0aH, 'Return True if al'
	DB	'l cased characters in B are lowercase and there is', 0aH, 'at'
	DB	' least one cased character in B, False otherwise.', 00H
	ORG $+3
_Py_isupper__doc__ DB 'B.isupper() -> bool', 0aH, 0aH, 'Return True if al'
	DB	'l cased characters in B are uppercase and there is', 0aH, 'at'
	DB	' least one cased character in B, False otherwise.', 00H
	ORG $+3
_Py_istitle__doc__ DB 'B.istitle() -> bool', 0aH, 0aH, 'Return True if B '
	DB	'is a titlecased string and there is at least one', 0aH, 'char'
	DB	'acter in B, i.e. uppercase characters may only follow uncased'
	DB	0aH, 'characters and lowercase characters only cased ones. Ret'
	DB	'urn False', 0aH, 'otherwise.', 00H
	ORG $+10
_Py_lower__doc__ DB 'B.lower() -> copy of B', 0aH, 0aH, 'Return a copy of'
	DB	' B with all ASCII characters converted to lowercase.', 00H
	ORG $+3
_Py_upper__doc__ DB 'B.upper() -> copy of B', 0aH, 0aH, 'Return a copy of'
	DB	' B with all ASCII characters converted to uppercase.', 00H
	ORG $+3
_Py_title__doc__ DB 'B.title() -> copy of B', 0aH, 0aH, 'Return a titleca'
	DB	'sed version of B, i.e. ASCII words start with uppercase', 0aH
	DB	'characters, all remaining cased characters have lowercase.', 00H
	ORG $+5
_Py_capitalize__doc__ DB 'B.capitalize() -> copy of B', 0aH, 0aH, 'Return'
	DB	' a copy of B with only its first character capitalized (ASCII'
	DB	')', 0aH, 'and the rest lower-cased.', 00H
	ORG $+4
_Py_swapcase__doc__ DB 'B.swapcase() -> copy of B', 0aH, 0aH, 'Return a c'
	DB	'opy of B with uppercase ASCII characters converted', 0aH, 'to'
	DB	' lowercase ASCII and vice versa.', 00H
	ORG $+5
_Py_maketrans__doc__ DB 'B.maketrans(frm, to) -> translation table', 0aH, 0aH
	DB	'Return a translation table (a bytes object of length 256) sui'
	DB	'table', 0aH, 'for use in the bytes or bytearray translate met'
	DB	'hod where each byte', 0aH, 'in frm is mapped to the byte at t'
	DB	'he same position in to.', 0aH, 'The bytes objects frm and to '
	DB	'must be of the same length.', 00H
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	_Py_bytes_isspace
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_Py_ctype_table:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_bytes_isspace DD imagerel $LN31
	DD	imagerel $LN31+314
	DD	imagerel $unwind$_Py_bytes_isspace
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_bytes_isspace DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytes_methods.c
xdata	ENDS
;	COMDAT _Py_bytes_isspace
_TEXT	SEGMENT
cptr$ = 64
len$ = 72
_Py_bytes_isspace PROC					; COMDAT

; 12   : {

$LN31:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 13   :     register const unsigned char *p
; 14   :         = (unsigned char *) cptr;
; 15   :     register const unsigned char *e;
; 16   : 
; 17   :     /* Shortcut for single character strings */
; 18   :     if (len == 1 && Py_ISSPACE(*p))

  00004	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_ctype_table
  0000b	48 83 fa 01	 cmp	 rdx, 1
  0000f	75 5f		 jne	 SHORT $LN6@Py_bytes_i
  00011	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00014	41 f6 04 80 08	 test	 BYTE PTR [r8+rax*4], 8
  00019	0f 84 a7 00 00
	00		 je	 $LN5@Py_bytes_i
$LN2@Py_bytes_i:

; 29   :     }
; 30   :     Py_RETURN_TRUE;

  0001f	e8 00 00 00 00	 call	 _Py_PXCTX
  00024	85 c0		 test	 eax, eax
  00026	75 3c		 jne	 SHORT $LN22@Py_bytes_i
  00028	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00043	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0004b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00050	85 c0		 test	 eax, eax
  00052	75 09		 jne	 SHORT $LN21@Py_bytes_i
  00054	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  0005b	74 07		 je	 SHORT $LN22@Py_bytes_i
$LN21@Py_bytes_i:
  0005d	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN22@Py_bytes_i:
  00064	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 31   : }

  0006b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006f	c3		 ret	 0
$LN6@Py_bytes_i:

; 19   :         Py_RETURN_TRUE;
; 20   : 
; 21   :     /* Special case for empty strings */
; 22   :     if (len == 0)

  00070	48 85 d2	 test	 rdx, rdx
  00073	75 51		 jne	 SHORT $LN5@Py_bytes_i

; 23   :         Py_RETURN_FALSE;

  00075	e8 00 00 00 00	 call	 _Py_PXCTX
  0007a	85 c0		 test	 eax, eax
  0007c	75 3c		 jne	 SHORT $LN14@Py_bytes_i
  0007e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00093	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00099	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a6	85 c0		 test	 eax, eax
  000a8	75 09		 jne	 SHORT $LN13@Py_bytes_i
  000aa	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  000b1	74 07		 je	 SHORT $LN14@Py_bytes_i
$LN13@Py_bytes_i:
  000b3	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN14@Py_bytes_i:
  000ba	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 31   : }

  000c1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c5	c3		 ret	 0
$LN5@Py_bytes_i:

; 24   : 
; 25   :     e = p + len;

  000c6	48 03 d1	 add	 rdx, rcx

; 26   :     for (; p < e; p++) {

  000c9	48 3b ca	 cmp	 rcx, rdx
  000cc	0f 83 4d ff ff
	ff		 jae	 $LN2@Py_bytes_i
$LL4@Py_bytes_i:

; 27   :         if (!Py_ISSPACE(*p))

  000d2	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  000d5	41 f6 04 80 08	 test	 BYTE PTR [r8+rax*4], 8
  000da	74 0d		 je	 SHORT $LN26@Py_bytes_i

; 26   :     for (; p < e; p++) {

  000dc	48 ff c1	 inc	 rcx
  000df	48 3b ca	 cmp	 rcx, rdx
  000e2	72 ee		 jb	 SHORT $LL4@Py_bytes_i

; 27   :         if (!Py_ISSPACE(*p))

  000e4	e9 36 ff ff ff	 jmp	 $LN2@Py_bytes_i
$LN26@Py_bytes_i:

; 28   :             Py_RETURN_FALSE;

  000e9	e8 00 00 00 00	 call	 _Py_PXCTX
  000ee	85 c0		 test	 eax, eax
  000f0	75 3c		 jne	 SHORT $LN18@Py_bytes_i
  000f2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00100	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00107	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0010d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00115	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011a	85 c0		 test	 eax, eax
  0011c	75 09		 jne	 SHORT $LN17@Py_bytes_i
  0011e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00125	74 07		 je	 SHORT $LN18@Py_bytes_i
$LN17@Py_bytes_i:
  00127	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN18@Py_bytes_i:
  0012e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 31   : }

  00135	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00139	c3		 ret	 0
_Py_bytes_isspace ENDP
_TEXT	ENDS
PUBLIC	_Py_bytes_isalpha
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_bytes_isalpha DD imagerel $LN31
	DD	imagerel $LN31+314
	DD	imagerel $unwind$_Py_bytes_isalpha
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_bytes_isalpha DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytes_methods.c
xdata	ENDS
;	COMDAT _Py_bytes_isalpha
_TEXT	SEGMENT
cptr$ = 64
len$ = 72
_Py_bytes_isalpha PROC					; COMDAT

; 42   : {

$LN31:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 43   :     register const unsigned char *p
; 44   :         = (unsigned char *) cptr;
; 45   :     register const unsigned char *e;
; 46   : 
; 47   :     /* Shortcut for single character strings */
; 48   :     if (len == 1 && Py_ISALPHA(*p))

  00004	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_ctype_table
  0000b	48 83 fa 01	 cmp	 rdx, 1
  0000f	75 5f		 jne	 SHORT $LN6@Py_bytes_i@2
  00011	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00014	41 f6 04 80 03	 test	 BYTE PTR [r8+rax*4], 3
  00019	0f 84 a7 00 00
	00		 je	 $LN5@Py_bytes_i@2
$LN2@Py_bytes_i@2:

; 59   :     }
; 60   :     Py_RETURN_TRUE;

  0001f	e8 00 00 00 00	 call	 _Py_PXCTX
  00024	85 c0		 test	 eax, eax
  00026	75 3c		 jne	 SHORT $LN22@Py_bytes_i@2
  00028	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00043	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0004b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00050	85 c0		 test	 eax, eax
  00052	75 09		 jne	 SHORT $LN21@Py_bytes_i@2
  00054	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  0005b	74 07		 je	 SHORT $LN22@Py_bytes_i@2
$LN21@Py_bytes_i@2:
  0005d	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN22@Py_bytes_i@2:
  00064	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 61   : }

  0006b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006f	c3		 ret	 0
$LN6@Py_bytes_i@2:

; 49   :         Py_RETURN_TRUE;
; 50   : 
; 51   :     /* Special case for empty strings */
; 52   :     if (len == 0)

  00070	48 85 d2	 test	 rdx, rdx
  00073	75 51		 jne	 SHORT $LN5@Py_bytes_i@2

; 53   :         Py_RETURN_FALSE;

  00075	e8 00 00 00 00	 call	 _Py_PXCTX
  0007a	85 c0		 test	 eax, eax
  0007c	75 3c		 jne	 SHORT $LN14@Py_bytes_i@2
  0007e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00093	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00099	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a6	85 c0		 test	 eax, eax
  000a8	75 09		 jne	 SHORT $LN13@Py_bytes_i@2
  000aa	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  000b1	74 07		 je	 SHORT $LN14@Py_bytes_i@2
$LN13@Py_bytes_i@2:
  000b3	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN14@Py_bytes_i@2:
  000ba	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 61   : }

  000c1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c5	c3		 ret	 0
$LN5@Py_bytes_i@2:

; 54   : 
; 55   :     e = p + len;

  000c6	48 03 d1	 add	 rdx, rcx

; 56   :     for (; p < e; p++) {

  000c9	48 3b ca	 cmp	 rcx, rdx
  000cc	0f 83 4d ff ff
	ff		 jae	 $LN2@Py_bytes_i@2
$LL4@Py_bytes_i@2:

; 57   :         if (!Py_ISALPHA(*p))

  000d2	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  000d5	41 f6 04 80 03	 test	 BYTE PTR [r8+rax*4], 3
  000da	74 0d		 je	 SHORT $LN26@Py_bytes_i@2

; 56   :     for (; p < e; p++) {

  000dc	48 ff c1	 inc	 rcx
  000df	48 3b ca	 cmp	 rcx, rdx
  000e2	72 ee		 jb	 SHORT $LL4@Py_bytes_i@2

; 57   :         if (!Py_ISALPHA(*p))

  000e4	e9 36 ff ff ff	 jmp	 $LN2@Py_bytes_i@2
$LN26@Py_bytes_i@2:

; 58   :             Py_RETURN_FALSE;

  000e9	e8 00 00 00 00	 call	 _Py_PXCTX
  000ee	85 c0		 test	 eax, eax
  000f0	75 3c		 jne	 SHORT $LN18@Py_bytes_i@2
  000f2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00100	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00107	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0010d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00115	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011a	85 c0		 test	 eax, eax
  0011c	75 09		 jne	 SHORT $LN17@Py_bytes_i@2
  0011e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00125	74 07		 je	 SHORT $LN18@Py_bytes_i@2
$LN17@Py_bytes_i@2:
  00127	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN18@Py_bytes_i@2:
  0012e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 61   : }

  00135	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00139	c3		 ret	 0
_Py_bytes_isalpha ENDP
_TEXT	ENDS
PUBLIC	_Py_bytes_isalnum
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_bytes_isalnum DD imagerel $LN31
	DD	imagerel $LN31+314
	DD	imagerel $unwind$_Py_bytes_isalnum
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_bytes_isalnum DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytes_methods.c
xdata	ENDS
;	COMDAT _Py_bytes_isalnum
_TEXT	SEGMENT
cptr$ = 64
len$ = 72
_Py_bytes_isalnum PROC					; COMDAT

; 72   : {

$LN31:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 73   :     register const unsigned char *p
; 74   :         = (unsigned char *) cptr;
; 75   :     register const unsigned char *e;
; 76   : 
; 77   :     /* Shortcut for single character strings */
; 78   :     if (len == 1 && Py_ISALNUM(*p))

  00004	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_ctype_table
  0000b	48 83 fa 01	 cmp	 rdx, 1
  0000f	75 5f		 jne	 SHORT $LN6@Py_bytes_i@3
  00011	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00014	41 f6 04 80 07	 test	 BYTE PTR [r8+rax*4], 7
  00019	0f 84 a7 00 00
	00		 je	 $LN5@Py_bytes_i@3
$LN2@Py_bytes_i@3:

; 89   :     }
; 90   :     Py_RETURN_TRUE;

  0001f	e8 00 00 00 00	 call	 _Py_PXCTX
  00024	85 c0		 test	 eax, eax
  00026	75 3c		 jne	 SHORT $LN22@Py_bytes_i@3
  00028	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00043	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0004b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00050	85 c0		 test	 eax, eax
  00052	75 09		 jne	 SHORT $LN21@Py_bytes_i@3
  00054	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  0005b	74 07		 je	 SHORT $LN22@Py_bytes_i@3
$LN21@Py_bytes_i@3:
  0005d	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN22@Py_bytes_i@3:
  00064	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 91   : }

  0006b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006f	c3		 ret	 0
$LN6@Py_bytes_i@3:

; 79   :         Py_RETURN_TRUE;
; 80   : 
; 81   :     /* Special case for empty strings */
; 82   :     if (len == 0)

  00070	48 85 d2	 test	 rdx, rdx
  00073	75 51		 jne	 SHORT $LN5@Py_bytes_i@3

; 83   :         Py_RETURN_FALSE;

  00075	e8 00 00 00 00	 call	 _Py_PXCTX
  0007a	85 c0		 test	 eax, eax
  0007c	75 3c		 jne	 SHORT $LN14@Py_bytes_i@3
  0007e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00093	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00099	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a6	85 c0		 test	 eax, eax
  000a8	75 09		 jne	 SHORT $LN13@Py_bytes_i@3
  000aa	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  000b1	74 07		 je	 SHORT $LN14@Py_bytes_i@3
$LN13@Py_bytes_i@3:
  000b3	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN14@Py_bytes_i@3:
  000ba	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 91   : }

  000c1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c5	c3		 ret	 0
$LN5@Py_bytes_i@3:

; 84   : 
; 85   :     e = p + len;

  000c6	48 03 d1	 add	 rdx, rcx

; 86   :     for (; p < e; p++) {

  000c9	48 3b ca	 cmp	 rcx, rdx
  000cc	0f 83 4d ff ff
	ff		 jae	 $LN2@Py_bytes_i@3
$LL4@Py_bytes_i@3:

; 87   :         if (!Py_ISALNUM(*p))

  000d2	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  000d5	41 f6 04 80 07	 test	 BYTE PTR [r8+rax*4], 7
  000da	74 0d		 je	 SHORT $LN26@Py_bytes_i@3

; 86   :     for (; p < e; p++) {

  000dc	48 ff c1	 inc	 rcx
  000df	48 3b ca	 cmp	 rcx, rdx
  000e2	72 ee		 jb	 SHORT $LL4@Py_bytes_i@3

; 87   :         if (!Py_ISALNUM(*p))

  000e4	e9 36 ff ff ff	 jmp	 $LN2@Py_bytes_i@3
$LN26@Py_bytes_i@3:

; 88   :             Py_RETURN_FALSE;

  000e9	e8 00 00 00 00	 call	 _Py_PXCTX
  000ee	85 c0		 test	 eax, eax
  000f0	75 3c		 jne	 SHORT $LN18@Py_bytes_i@3
  000f2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00100	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00107	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0010d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00115	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011a	85 c0		 test	 eax, eax
  0011c	75 09		 jne	 SHORT $LN17@Py_bytes_i@3
  0011e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00125	74 07		 je	 SHORT $LN18@Py_bytes_i@3
$LN17@Py_bytes_i@3:
  00127	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN18@Py_bytes_i@3:
  0012e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 91   : }

  00135	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00139	c3		 ret	 0
_Py_bytes_isalnum ENDP
_TEXT	ENDS
PUBLIC	_Py_bytes_isdigit
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_bytes_isdigit DD imagerel $LN31
	DD	imagerel $LN31+314
	DD	imagerel $unwind$_Py_bytes_isdigit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_bytes_isdigit DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytes_methods.c
xdata	ENDS
;	COMDAT _Py_bytes_isdigit
_TEXT	SEGMENT
cptr$ = 64
len$ = 72
_Py_bytes_isdigit PROC					; COMDAT

; 102  : {

$LN31:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 103  :     register const unsigned char *p
; 104  :         = (unsigned char *) cptr;
; 105  :     register const unsigned char *e;
; 106  : 
; 107  :     /* Shortcut for single character strings */
; 108  :     if (len == 1 && Py_ISDIGIT(*p))

  00004	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_ctype_table
  0000b	48 83 fa 01	 cmp	 rdx, 1
  0000f	75 5f		 jne	 SHORT $LN6@Py_bytes_i@4
  00011	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00014	41 f6 04 80 04	 test	 BYTE PTR [r8+rax*4], 4
  00019	0f 84 a7 00 00
	00		 je	 $LN5@Py_bytes_i@4
$LN2@Py_bytes_i@4:

; 119  :     }
; 120  :     Py_RETURN_TRUE;

  0001f	e8 00 00 00 00	 call	 _Py_PXCTX
  00024	85 c0		 test	 eax, eax
  00026	75 3c		 jne	 SHORT $LN22@Py_bytes_i@4
  00028	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0003d	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00043	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0004b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00050	85 c0		 test	 eax, eax
  00052	75 09		 jne	 SHORT $LN21@Py_bytes_i@4
  00054	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_TrueStruct+32, 32 ; 00000020H
  0005b	74 07		 je	 SHORT $LN22@Py_bytes_i@4
$LN21@Py_bytes_i@4:
  0005d	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_TrueStruct+80
$LN22@Py_bytes_i@4:
  00064	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct

; 121  : }

  0006b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006f	c3		 ret	 0
$LN6@Py_bytes_i@4:

; 109  :         Py_RETURN_TRUE;
; 110  : 
; 111  :     /* Special case for empty strings */
; 112  :     if (len == 0)

  00070	48 85 d2	 test	 rdx, rdx
  00073	75 51		 jne	 SHORT $LN5@Py_bytes_i@4

; 113  :         Py_RETURN_FALSE;

  00075	e8 00 00 00 00	 call	 _Py_PXCTX
  0007a	85 c0		 test	 eax, eax
  0007c	75 3c		 jne	 SHORT $LN14@Py_bytes_i@4
  0007e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00093	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00099	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a6	85 c0		 test	 eax, eax
  000a8	75 09		 jne	 SHORT $LN13@Py_bytes_i@4
  000aa	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  000b1	74 07		 je	 SHORT $LN14@Py_bytes_i@4
$LN13@Py_bytes_i@4:
  000b3	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN14@Py_bytes_i@4:
  000ba	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 121  : }

  000c1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c5	c3		 ret	 0
$LN5@Py_bytes_i@4:

; 114  : 
; 115  :     e = p + len;

  000c6	48 03 d1	 add	 rdx, rcx

; 116  :     for (; p < e; p++) {

  000c9	48 3b ca	 cmp	 rcx, rdx
  000cc	0f 83 4d ff ff
	ff		 jae	 $LN2@Py_bytes_i@4
$LL4@Py_bytes_i@4:

; 117  :         if (!Py_ISDIGIT(*p))

  000d2	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  000d5	41 f6 04 80 04	 test	 BYTE PTR [r8+rax*4], 4
  000da	74 0d		 je	 SHORT $LN26@Py_bytes_i@4

; 116  :     for (; p < e; p++) {

  000dc	48 ff c1	 inc	 rcx
  000df	48 3b ca	 cmp	 rcx, rdx
  000e2	72 ee		 jb	 SHORT $LL4@Py_bytes_i@4

; 117  :         if (!Py_ISDIGIT(*p))

  000e4	e9 36 ff ff ff	 jmp	 $LN2@Py_bytes_i@4
$LN26@Py_bytes_i@4:

; 118  :             Py_RETURN_FALSE;

  000e9	e8 00 00 00 00	 call	 _Py_PXCTX
  000ee	85 c0		 test	 eax, eax
  000f0	75 3c		 jne	 SHORT $LN18@Py_bytes_i@4
  000f2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00100	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00107	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0010d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00115	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011a	85 c0		 test	 eax, eax
  0011c	75 09		 jne	 SHORT $LN17@Py_bytes_i@4
  0011e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00125	74 07		 je	 SHORT $LN18@Py_bytes_i@4
$LN17@Py_bytes_i@4:
  00127	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN18@Py_bytes_i@4:
  0012e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 121  : }

  00135	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00139	c3		 ret	 0
_Py_bytes_isdigit ENDP
_TEXT	ENDS
PUBLIC	_Py_bytes_islower
EXTRN	PyBool_FromLong:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_bytes_islower DD imagerel $LN23
	DD	imagerel $LN23+268
	DD	imagerel $unwind$_Py_bytes_islower
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_bytes_islower DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytes_methods.c
xdata	ENDS
;	COMDAT _Py_bytes_islower
_TEXT	SEGMENT
cptr$ = 64
len$ = 72
_Py_bytes_islower PROC					; COMDAT

; 132  : {

$LN23:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 133  :     register const unsigned char *p
; 134  :         = (unsigned char *) cptr;
; 135  :     register const unsigned char *e;
; 136  :     int cased;
; 137  : 
; 138  :     /* Shortcut for single character strings */
; 139  :     if (len == 1)

  00004	48 83 fa 01	 cmp	 rdx, 1
  00008	75 19		 jne	 SHORT $LN8@Py_bytes_i@5

; 140  :         return PyBool_FromLong(Py_ISLOWER(*p));

  0000a	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  0000d	4c 8d 15 00 00
	00 00		 lea	 r10, OFFSET FLAT:_Py_ctype_table
  00014	41 8b 0c 82	 mov	 ecx, DWORD PTR [r10+rax*4]
  00018	23 ca		 and	 ecx, edx

; 155  : }

  0001a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0001e	e9 00 00 00 00	 jmp	 PyBool_FromLong
$LN8@Py_bytes_i@5:

; 141  : 
; 142  :     /* Special case for empty strings */
; 143  :     if (len == 0)

  00023	48 85 d2	 test	 rdx, rdx
  00026	75 51		 jne	 SHORT $LN7@Py_bytes_i@5

; 144  :         Py_RETURN_FALSE;

  00028	e8 00 00 00 00	 call	 _Py_PXCTX
  0002d	85 c0		 test	 eax, eax
  0002f	75 3c		 jne	 SHORT $LN12@Py_bytes_i@5
  00031	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00046	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0004c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	75 09		 jne	 SHORT $LN11@Py_bytes_i@5
  0005d	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00064	74 07		 je	 SHORT $LN12@Py_bytes_i@5
$LN11@Py_bytes_i@5:
  00066	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN12@Py_bytes_i@5:
  0006d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 155  : }

  00074	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00078	c3		 ret	 0
$LN7@Py_bytes_i@5:

; 145  : 
; 146  :     e = p + len;

  00079	4c 8d 0c 11	 lea	 r9, QWORD PTR [rcx+rdx]

; 147  :     cased = 0;

  0007d	33 d2		 xor	 edx, edx

; 148  :     for (; p < e; p++) {

  0007f	49 3b c9	 cmp	 rcx, r9
  00082	73 2c		 jae	 SHORT $LN4@Py_bytes_i@5
  00084	4c 8d 15 00 00
	00 00		 lea	 r10, OFFSET FLAT:_Py_ctype_table
  0008b	44 8d 5a 01	 lea	 r11d, QWORD PTR [rdx+1]
  0008f	90		 npad	 1
$LL6@Py_bytes_i@5:

; 149  :         if (Py_ISUPPER(*p))

  00090	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00093	45 8b 04 82	 mov	 r8d, DWORD PTR [r10+rax*4]
  00097	41 f6 c0 02	 test	 r8b, 2
  0009b	75 1e		 jne	 SHORT $LN20@Py_bytes_i@5

; 151  :         else if (!cased && Py_ISLOWER(*p))

  0009d	85 d2		 test	 edx, edx
  0009f	75 07		 jne	 SHORT $LN5@Py_bytes_i@5
  000a1	45 84 c3	 test	 r8b, r11b
  000a4	41 0f 45 d3	 cmovne	 edx, r11d
$LN5@Py_bytes_i@5:

; 148  :     for (; p < e; p++) {

  000a8	48 ff c1	 inc	 rcx
  000ab	49 3b c9	 cmp	 rcx, r9
  000ae	72 e0		 jb	 SHORT $LL6@Py_bytes_i@5
$LN4@Py_bytes_i@5:

; 152  :             cased = 1;
; 153  :     }
; 154  :     return PyBool_FromLong(cased);

  000b0	8b ca		 mov	 ecx, edx

; 155  : }

  000b2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b6	e9 00 00 00 00	 jmp	 PyBool_FromLong
$LN20@Py_bytes_i@5:

; 150  :             Py_RETURN_FALSE;

  000bb	e8 00 00 00 00	 call	 _Py_PXCTX
  000c0	85 c0		 test	 eax, eax
  000c2	75 3c		 jne	 SHORT $LN16@Py_bytes_i@5
  000c4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000d9	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000df	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000e7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ec	85 c0		 test	 eax, eax
  000ee	75 09		 jne	 SHORT $LN15@Py_bytes_i@5
  000f0	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  000f7	74 07		 je	 SHORT $LN16@Py_bytes_i@5
$LN15@Py_bytes_i@5:
  000f9	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN16@Py_bytes_i@5:
  00100	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 155  : }

  00107	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010b	c3		 ret	 0
_Py_bytes_islower ENDP
_TEXT	ENDS
PUBLIC	_Py_bytes_isupper
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_bytes_isupper DD imagerel $LN23
	DD	imagerel $LN23+270
	DD	imagerel $unwind$_Py_bytes_isupper
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_bytes_isupper DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytes_methods.c
xdata	ENDS
;	COMDAT _Py_bytes_isupper
_TEXT	SEGMENT
cptr$ = 64
len$ = 72
_Py_bytes_isupper PROC					; COMDAT

; 166  : {

$LN23:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 167  :     register const unsigned char *p
; 168  :         = (unsigned char *) cptr;
; 169  :     register const unsigned char *e;
; 170  :     int cased;
; 171  : 
; 172  :     /* Shortcut for single character strings */
; 173  :     if (len == 1)

  00004	48 83 fa 01	 cmp	 rdx, 1
  00008	75 1a		 jne	 SHORT $LN8@Py_bytes_i@6

; 174  :         return PyBool_FromLong(Py_ISUPPER(*p));

  0000a	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  0000d	4c 8d 15 00 00
	00 00		 lea	 r10, OFFSET FLAT:_Py_ctype_table
  00014	41 8b 0c 82	 mov	 ecx, DWORD PTR [r10+rax*4]
  00018	83 e1 02	 and	 ecx, 2

; 189  : }

  0001b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0001f	e9 00 00 00 00	 jmp	 PyBool_FromLong
$LN8@Py_bytes_i@6:

; 175  : 
; 176  :     /* Special case for empty strings */
; 177  :     if (len == 0)

  00024	48 85 d2	 test	 rdx, rdx
  00027	75 51		 jne	 SHORT $LN7@Py_bytes_i@6

; 178  :         Py_RETURN_FALSE;

  00029	e8 00 00 00 00	 call	 _Py_PXCTX
  0002e	85 c0		 test	 eax, eax
  00030	75 3c		 jne	 SHORT $LN12@Py_bytes_i@6
  00032	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00047	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0004d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00055	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005a	85 c0		 test	 eax, eax
  0005c	75 09		 jne	 SHORT $LN11@Py_bytes_i@6
  0005e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00065	74 07		 je	 SHORT $LN12@Py_bytes_i@6
$LN11@Py_bytes_i@6:
  00067	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN12@Py_bytes_i@6:
  0006e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 189  : }

  00075	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00079	c3		 ret	 0
$LN7@Py_bytes_i@6:

; 179  : 
; 180  :     e = p + len;

  0007a	4c 8d 0c 11	 lea	 r9, QWORD PTR [rcx+rdx]

; 181  :     cased = 0;

  0007e	33 d2		 xor	 edx, edx

; 182  :     for (; p < e; p++) {

  00080	49 3b c9	 cmp	 rcx, r9
  00083	73 2d		 jae	 SHORT $LN4@Py_bytes_i@6
  00085	4c 8d 15 00 00
	00 00		 lea	 r10, OFFSET FLAT:_Py_ctype_table
  0008c	41 bb 01 00 00
	00		 mov	 r11d, 1
$LL6@Py_bytes_i@6:

; 183  :         if (Py_ISLOWER(*p))

  00092	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00095	45 8b 04 82	 mov	 r8d, DWORD PTR [r10+rax*4]
  00099	45 84 c3	 test	 r8b, r11b
  0009c	75 1f		 jne	 SHORT $LN20@Py_bytes_i@6

; 185  :         else if (!cased && Py_ISUPPER(*p))

  0009e	85 d2		 test	 edx, edx
  000a0	75 08		 jne	 SHORT $LN5@Py_bytes_i@6
  000a2	41 f6 c0 02	 test	 r8b, 2
  000a6	41 0f 45 d3	 cmovne	 edx, r11d
$LN5@Py_bytes_i@6:

; 182  :     for (; p < e; p++) {

  000aa	48 ff c1	 inc	 rcx
  000ad	49 3b c9	 cmp	 rcx, r9
  000b0	72 e0		 jb	 SHORT $LL6@Py_bytes_i@6
$LN4@Py_bytes_i@6:

; 186  :             cased = 1;
; 187  :     }
; 188  :     return PyBool_FromLong(cased);

  000b2	8b ca		 mov	 ecx, edx

; 189  : }

  000b4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b8	e9 00 00 00 00	 jmp	 PyBool_FromLong
$LN20@Py_bytes_i@6:

; 184  :             Py_RETURN_FALSE;

  000bd	e8 00 00 00 00	 call	 _Py_PXCTX
  000c2	85 c0		 test	 eax, eax
  000c4	75 3c		 jne	 SHORT $LN16@Py_bytes_i@6
  000c6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000db	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000e1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000e9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ee	85 c0		 test	 eax, eax
  000f0	75 09		 jne	 SHORT $LN15@Py_bytes_i@6
  000f2	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  000f9	74 07		 je	 SHORT $LN16@Py_bytes_i@6
$LN15@Py_bytes_i@6:
  000fb	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN16@Py_bytes_i@6:
  00102	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 189  : }

  00109	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010d	c3		 ret	 0
_Py_bytes_isupper ENDP
_TEXT	ENDS
PUBLIC	_Py_bytes_istitle
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_bytes_istitle DD imagerel $LN32
	DD	imagerel $LN32+374
	DD	imagerel $unwind$_Py_bytes_istitle
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_bytes_istitle DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\bytes_methods.c
xdata	ENDS
;	COMDAT _Py_bytes_istitle
_TEXT	SEGMENT
cptr$ = 64
len$ = 72
_Py_bytes_istitle PROC					; COMDAT

; 202  : {

$LN32:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	4c 8b c1	 mov	 r8, rcx

; 203  :     register const unsigned char *p
; 204  :         = (unsigned char *) cptr;
; 205  :     register const unsigned char *e;
; 206  :     int cased, previous_is_cased;
; 207  : 
; 208  :     /* Shortcut for single character strings */
; 209  :     if (len == 1)

  00007	48 83 fa 01	 cmp	 rdx, 1
  0000b	75 1a		 jne	 SHORT $LN11@Py_bytes_i@7

; 210  :         return PyBool_FromLong(Py_ISUPPER(*p));

  0000d	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00010	4c 8d 1d 00 00
	00 00		 lea	 r11, OFFSET FLAT:_Py_ctype_table
  00017	41 8b 0c 83	 mov	 ecx, DWORD PTR [r11+rax*4]
  0001b	83 e1 02	 and	 ecx, 2

; 238  : }

  0001e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00022	e9 00 00 00 00	 jmp	 PyBool_FromLong
$LN11@Py_bytes_i@7:

; 211  : 
; 212  :     /* Special case for empty strings */
; 213  :     if (len == 0)

  00027	48 85 d2	 test	 rdx, rdx
  0002a	75 51		 jne	 SHORT $LN10@Py_bytes_i@7

; 214  :         Py_RETURN_FALSE;

  0002c	e8 00 00 00 00	 call	 _Py_PXCTX
  00031	85 c0		 test	 eax, eax
  00033	75 3c		 jne	 SHORT $LN15@Py_bytes_i@7
  00035	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0004a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00050	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	75 09		 jne	 SHORT $LN14@Py_bytes_i@7
  00061	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00068	74 07		 je	 SHORT $LN15@Py_bytes_i@7
$LN14@Py_bytes_i@7:
  0006a	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN15@Py_bytes_i@7:
  00071	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 238  : }

  00078	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007c	c3		 ret	 0
$LN10@Py_bytes_i@7:

; 215  : 
; 216  :     e = p + len;

  0007d	4c 8d 14 11	 lea	 r10, QWORD PTR [rcx+rdx]

; 217  :     cased = 0;

  00081	33 d2		 xor	 edx, edx

; 218  :     previous_is_cased = 0;

  00083	33 c9		 xor	 ecx, ecx

; 219  :     for (; p < e; p++) {

  00085	4d 3b c2	 cmp	 r8, r10
  00088	73 3f		 jae	 SHORT $LN30@Py_bytes_i@7
  0008a	4c 8d 1d 00 00
	00 00		 lea	 r11, OFFSET FLAT:_Py_ctype_table
$LL9@Py_bytes_i@7:

; 220  :         register const unsigned char ch = *p;
; 221  : 
; 222  :         if (Py_ISUPPER(ch)) {

  00091	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  00095	45 8b 0c 83	 mov	 r9d, DWORD PTR [r11+rax*4]
  00099	41 f6 c1 02	 test	 r9b, 2
  0009d	74 0d		 je	 SHORT $LN6@Py_bytes_i@7

; 223  :             if (previous_is_cased)

  0009f	85 c9		 test	 ecx, ecx
  000a1	75 31		 jne	 SHORT $LN27@Py_bytes_i@7

; 225  :             previous_is_cased = 1;

  000a3	b9 01 00 00 00	 mov	 ecx, 1

; 226  :             cased = 1;

  000a8	8b d1		 mov	 edx, ecx
  000aa	eb 15		 jmp	 SHORT $LN8@Py_bytes_i@7
$LN6@Py_bytes_i@7:

; 227  :         }
; 228  :         else if (Py_ISLOWER(ch)) {

  000ac	41 f6 c1 01	 test	 r9b, 1
  000b0	74 0d		 je	 SHORT $LN3@Py_bytes_i@7

; 229  :             if (!previous_is_cased)

  000b2	85 c9		 test	 ecx, ecx
  000b4	74 6f		 je	 SHORT $LN28@Py_bytes_i@7

; 231  :             previous_is_cased = 1;

  000b6	b9 01 00 00 00	 mov	 ecx, 1

; 232  :             cased = 1;

  000bb	8b d1		 mov	 edx, ecx

; 233  :         }
; 234  :         else

  000bd	eb 02		 jmp	 SHORT $LN8@Py_bytes_i@7
$LN3@Py_bytes_i@7:

; 235  :             previous_is_cased = 0;

  000bf	33 c9		 xor	 ecx, ecx
$LN8@Py_bytes_i@7:

; 219  :     for (; p < e; p++) {

  000c1	49 ff c0	 inc	 r8
  000c4	4d 3b c2	 cmp	 r8, r10
  000c7	72 c8		 jb	 SHORT $LL9@Py_bytes_i@7
$LN30@Py_bytes_i@7:

; 236  :     }
; 237  :     return PyBool_FromLong(cased);

  000c9	8b ca		 mov	 ecx, edx

; 238  : }

  000cb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cf	e9 00 00 00 00	 jmp	 PyBool_FromLong
$LN27@Py_bytes_i@7:

; 224  :                 Py_RETURN_FALSE;

  000d4	e8 00 00 00 00	 call	 _Py_PXCTX
  000d9	85 c0		 test	 eax, eax
  000db	75 3c		 jne	 SHORT $LN19@Py_bytes_i@7
  000dd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000f2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000f8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00100	e8 00 00 00 00	 call	 _PyParallel_Guard
  00105	85 c0		 test	 eax, eax
  00107	75 09		 jne	 SHORT $LN18@Py_bytes_i@7
  00109	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00110	74 07		 je	 SHORT $LN19@Py_bytes_i@7
$LN18@Py_bytes_i@7:
  00112	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN19@Py_bytes_i@7:
  00119	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 238  : }

  00120	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00124	c3		 ret	 0
$LN28@Py_bytes_i@7:

; 230  :                 Py_RETURN_FALSE;

  00125	e8 00 00 00 00	 call	 _Py_PXCTX
  0012a	85 c0		 test	 eax, eax
  0012c	75 3c		 jne	 SHORT $LN23@Py_bytes_i@7
  0012e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  00135	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00143	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00149	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00151	e8 00 00 00 00	 call	 _PyParallel_Guard
  00156	85 c0		 test	 eax, eax
  00158	75 09		 jne	 SHORT $LN22@Py_bytes_i@7
  0015a	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_FalseStruct+32, 32 ; 00000020H
  00161	74 07		 je	 SHORT $LN23@Py_bytes_i@7
$LN22@Py_bytes_i@7:
  00163	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_FalseStruct+80
$LN23@Py_bytes_i@7:
  0016a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 238  : }

  00171	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00175	c3		 ret	 0
_Py_bytes_istitle ENDP
_TEXT	ENDS
PUBLIC	_Py_bytes_lower
EXTRN	_Py_ctype_tolower:BYTE
; Function compile flags: /Ogtpy
;	COMDAT _Py_bytes_lower
_TEXT	SEGMENT
result$ = 8
cptr$ = 16
len$ = 24
_Py_bytes_lower PROC					; COMDAT

; 249  :     Py_ssize_t i;
; 250  : 
; 251  :     for (i = 0; i < len; i++) {

  00000	4d 85 c0	 test	 r8, r8
  00003	7e 1f		 jle	 SHORT $LN1@Py_bytes_l
  00005	48 2b d1	 sub	 rdx, rcx
  00008	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_ctype_tolower
  0000f	90		 npad	 1
$LL3@Py_bytes_l:

; 252  :         result[i] = Py_TOLOWER((unsigned char) cptr[i]);

  00010	0f b6 04 0a	 movzx	 eax, BYTE PTR [rdx+rcx]
  00014	48 ff c1	 inc	 rcx
  00017	49 ff c8	 dec	 r8
  0001a	42 0f b6 04 08	 movzx	 eax, BYTE PTR [rax+r9]
  0001f	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  00022	75 ec		 jne	 SHORT $LL3@Py_bytes_l
$LN1@Py_bytes_l:

; 253  :     }
; 254  : }

  00024	f3 c3		 fatret	 0
_Py_bytes_lower ENDP
_TEXT	ENDS
PUBLIC	_Py_bytes_upper
EXTRN	_Py_ctype_toupper:BYTE
; Function compile flags: /Ogtpy
;	COMDAT _Py_bytes_upper
_TEXT	SEGMENT
result$ = 8
cptr$ = 16
len$ = 24
_Py_bytes_upper PROC					; COMDAT

; 265  :     Py_ssize_t i;
; 266  : 
; 267  :     for (i = 0; i < len; i++) {

  00000	4d 85 c0	 test	 r8, r8
  00003	7e 1f		 jle	 SHORT $LN1@Py_bytes_u
  00005	48 2b d1	 sub	 rdx, rcx
  00008	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_ctype_toupper
  0000f	90		 npad	 1
$LL3@Py_bytes_u:

; 268  :         result[i] = Py_TOUPPER((unsigned char) cptr[i]);

  00010	0f b6 04 0a	 movzx	 eax, BYTE PTR [rdx+rcx]
  00014	48 ff c1	 inc	 rcx
  00017	49 ff c8	 dec	 r8
  0001a	42 0f b6 04 08	 movzx	 eax, BYTE PTR [rax+r9]
  0001f	88 41 ff	 mov	 BYTE PTR [rcx-1], al
  00022	75 ec		 jne	 SHORT $LL3@Py_bytes_u
$LN1@Py_bytes_u:

; 269  :     }
; 270  : }

  00024	f3 c3		 fatret	 0
_Py_bytes_upper ENDP
_TEXT	ENDS
PUBLIC	_Py_bytes_title
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_bytes_title DD imagerel $LN14
	DD	imagerel $LN14+17
	DD	imagerel $unwind$_Py_bytes_title
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_Py_bytes_title DD imagerel $LN14+17
	DD	imagerel $LN14+116
	DD	imagerel $chain$0$_Py_bytes_title
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_Py_bytes_title DD imagerel $LN14+116
	DD	imagerel $LN14+121
	DD	imagerel $chain$1$_Py_bytes_title
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_Py_bytes_title DD 021H
	DD	imagerel $LN14
	DD	imagerel $LN14+17
	DD	imagerel $unwind$_Py_bytes_title
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_Py_bytes_title DD 020421H
	DD	03404H
	DD	imagerel $LN14
	DD	imagerel $LN14+17
	DD	imagerel $unwind$_Py_bytes_title
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_bytes_title DD 010401H
	DD	0204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_bytes_title
_TEXT	SEGMENT
result$ = 16
s$ = 24
len$ = 32
_Py_bytes_title PROC					; COMDAT

; 281  : {

$LN14:
  00000	48 83 ec 08	 sub	 rsp, 8

; 282  :     Py_ssize_t i;
; 283  :     int previous_is_cased = 0;

  00004	33 c0		 xor	 eax, eax
  00006	4d 8b d0	 mov	 r10, r8
  00009	4c 8b da	 mov	 r11, rdx

; 284  : 
; 285  :     for (i = 0; i < len; i++) {

  0000c	4d 85 c0	 test	 r8, r8
  0000f	7e 63		 jle	 SHORT $LN7@Py_bytes_t

; 282  :     Py_ssize_t i;
; 283  :     int previous_is_cased = 0;

  00011	48 89 1c 24	 mov	 QWORD PTR [rsp], rbx
  00015	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:__ImageBase
  0001c	0f 1f 40 00	 npad	 4
$LL9@Py_bytes_t:

; 286  :         int c = Py_CHARMASK(*s++);

  00020	45 0f b6 03	 movzx	 r8d, BYTE PTR [r11]
  00024	49 ff c3	 inc	 r11

; 287  :         if (Py_ISLOWER(c)) {

  00027	46 8b 8c 83 00
	00 00 00	 mov	 r9d, DWORD PTR _Py_ctype_table[rbx+r8*4]
  0002f	41 f6 c1 01	 test	 r9b, 1
  00033	74 14		 je	 SHORT $LN6@Py_bytes_t

; 288  :             if (!previous_is_cased)

  00035	85 c0		 test	 eax, eax
  00037	75 09		 jne	 SHORT $LN5@Py_bytes_t

; 289  :                 c = Py_TOUPPER(c);

  00039	45 0f b6 84 18
	00 00 00 00	 movzx	 r8d, BYTE PTR _Py_ctype_toupper[r8+rbx]
$LN5@Py_bytes_t:

; 290  :             previous_is_cased = 1;

  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	eb 1c		 jmp	 SHORT $LN1@Py_bytes_t
$LN6@Py_bytes_t:

; 291  :         } else if (Py_ISUPPER(c)) {

  00049	41 f6 c1 02	 test	 r9b, 2
  0004d	74 14		 je	 SHORT $LN3@Py_bytes_t

; 292  :             if (previous_is_cased)

  0004f	85 c0		 test	 eax, eax
  00051	74 09		 je	 SHORT $LN2@Py_bytes_t

; 293  :                 c = Py_TOLOWER(c);

  00053	45 0f b6 84 18
	00 00 00 00	 movzx	 r8d, BYTE PTR _Py_ctype_tolower[r8+rbx]
$LN2@Py_bytes_t:

; 294  :             previous_is_cased = 1;

  0005c	b8 01 00 00 00	 mov	 eax, 1

; 295  :         } else

  00061	eb 02		 jmp	 SHORT $LN1@Py_bytes_t
$LN3@Py_bytes_t:

; 296  :             previous_is_cased = 0;

  00063	33 c0		 xor	 eax, eax
$LN1@Py_bytes_t:

; 297  :         *result++ = c;

  00065	44 88 01	 mov	 BYTE PTR [rcx], r8b
  00068	48 ff c1	 inc	 rcx
  0006b	49 ff ca	 dec	 r10
  0006e	75 b0		 jne	 SHORT $LL9@Py_bytes_t
  00070	48 8b 1c 24	 mov	 rbx, QWORD PTR [rsp]
$LN7@Py_bytes_t:

; 298  :     }
; 299  : }

  00074	48 83 c4 08	 add	 rsp, 8
  00078	c3		 ret	 0
_Py_bytes_title ENDP
_TEXT	ENDS
PUBLIC	_Py_bytes_capitalize
; Function compile flags: /Ogtpy
;	COMDAT _Py_bytes_capitalize
_TEXT	SEGMENT
result$ = 8
s$ = 16
len$ = 24
_Py_bytes_capitalize PROC				; COMDAT

; 310  : {

  00000	4c 8b ca	 mov	 r9, rdx

; 311  :     Py_ssize_t i;
; 312  : 
; 313  :     if (0 < len) {

  00003	4c 8d 15 00 00
	00 00		 lea	 r10, OFFSET FLAT:__ImageBase
  0000a	4d 85 c0	 test	 r8, r8
  0000d	7e 1f		 jle	 SHORT $LN8@Py_bytes_c

; 314  :         int c = Py_CHARMASK(*s++);

  0000f	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00012	49 ff c1	 inc	 r9

; 315  :         if (Py_ISLOWER(c))

  00015	41 f6 84 82 00
	00 00 00 01	 test	 BYTE PTR _Py_ctype_table[r10+rax*4], 1
  0001e	74 09		 je	 SHORT $LN7@Py_bytes_c

; 316  :             *result = Py_TOUPPER(c);

  00020	42 0f b6 84 10
	00 00 00 00	 movzx	 eax, BYTE PTR _Py_ctype_toupper[rax+r10]
$LN7@Py_bytes_c:

; 317  :         else
; 318  :             *result = c;

  00029	88 01		 mov	 BYTE PTR [rcx], al

; 319  :         result++;

  0002b	48 ff c1	 inc	 rcx
$LN8@Py_bytes_c:

; 320  :     }
; 321  :     for (i = 1; i < len; i++) {

  0002e	49 83 f8 01	 cmp	 r8, 1
  00032	7e 31		 jle	 SHORT $LN3@Py_bytes_c
  00034	49 8d 50 ff	 lea	 rdx, QWORD PTR [r8-1]
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@Py_bytes_c:

; 322  :         int c = Py_CHARMASK(*s++);

  00040	41 0f b6 01	 movzx	 eax, BYTE PTR [r9]
  00044	49 ff c1	 inc	 r9

; 323  :         if (Py_ISUPPER(c))

  00047	41 f6 84 82 00
	00 00 00 02	 test	 BYTE PTR _Py_ctype_table[r10+rax*4], 2
  00050	74 09		 je	 SHORT $LN2@Py_bytes_c

; 324  :             *result = Py_TOLOWER(c);

  00052	42 0f b6 84 10
	00 00 00 00	 movzx	 eax, BYTE PTR _Py_ctype_tolower[rax+r10]
$LN2@Py_bytes_c:

; 325  :         else
; 326  :             *result = c;

  0005b	88 01		 mov	 BYTE PTR [rcx], al

; 327  :         result++;

  0005d	48 ff c1	 inc	 rcx
  00060	48 ff ca	 dec	 rdx
  00063	75 db		 jne	 SHORT $LL5@Py_bytes_c
$LN3@Py_bytes_c:

; 328  :     }
; 329  : }

  00065	f3 c3		 fatret	 0
_Py_bytes_capitalize ENDP
_TEXT	ENDS
PUBLIC	_Py_bytes_swapcase
; Function compile flags: /Ogtpy
;	COMDAT _Py_bytes_swapcase
_TEXT	SEGMENT
result$ = 8
s$ = 16
len$ = 24
_Py_bytes_swapcase PROC					; COMDAT

; 340  : {

  00000	4c 8b d2	 mov	 r10, rdx

; 341  :     Py_ssize_t i;
; 342  : 
; 343  :     for (i = 0; i < len; i++) {

  00003	4d 85 c0	 test	 r8, r8
  00006	7e 3f		 jle	 SHORT $LN5@Py_bytes_s
  00008	4c 8d 1d 00 00
	00 00		 lea	 r11, OFFSET FLAT:__ImageBase
  0000f	90		 npad	 1
$LL7@Py_bytes_s:

; 344  :         int c = Py_CHARMASK(*s++);

  00010	41 0f b6 02	 movzx	 eax, BYTE PTR [r10]
  00014	49 ff c2	 inc	 r10

; 345  :         if (Py_ISLOWER(c)) {

  00017	41 8b 94 83 00
	00 00 00	 mov	 edx, DWORD PTR _Py_ctype_table[r11+rax*4]
  0001f	f6 c2 01	 test	 dl, 1
  00022	74 0b		 je	 SHORT $LN4@Py_bytes_s

; 346  :             *result = Py_TOUPPER(c);

  00024	42 0f b6 84 18
	00 00 00 00	 movzx	 eax, BYTE PTR _Py_ctype_toupper[rax+r11]
  0002d	eb 0e		 jmp	 SHORT $LN2@Py_bytes_s
$LN4@Py_bytes_s:

; 347  :         }
; 348  :         else if (Py_ISUPPER(c)) {

  0002f	f6 c2 02	 test	 dl, 2
  00032	74 09		 je	 SHORT $LN2@Py_bytes_s

; 349  :             *result = Py_TOLOWER(c);

  00034	42 0f b6 84 18
	00 00 00 00	 movzx	 eax, BYTE PTR _Py_ctype_tolower[rax+r11]
$LN2@Py_bytes_s:

; 350  :         }
; 351  :         else
; 352  :             *result = c;

  0003d	88 01		 mov	 BYTE PTR [rcx], al

; 353  :         result++;

  0003f	48 ff c1	 inc	 rcx
  00042	49 ff c8	 dec	 r8
  00045	75 c9		 jne	 SHORT $LL7@Py_bytes_s
$LN5@Py_bytes_s:

; 354  :     }
; 355  : }

  00047	f3 c3		 fatret	 0
_Py_bytes_swapcase ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@HMLNEJOC@Type?5?$CF?4100s?5doesn?8t?5support?5the?5@ ; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_getbuffer DD imagerel _getbuffer
	DD	imagerel _getbuffer+86
	DD	imagerel $unwind$_getbuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_getbuffer DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CL@HMLNEJOC@Type?5?$CF?4100s?5doesn?8t?5support?5the?5@
CONST	SEGMENT
??_C@_0CL@HMLNEJOC@Type?5?$CF?4100s?5doesn?8t?5support?5the?5@ DB 'Type %'
	DB	'.100s doesn''t support the buffer API', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _getbuffer
_TEXT	SEGMENT
obj$ = 48
view$ = 56
_getbuffer PROC						; COMDAT

; 368  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 369  :     PyBufferProcs *buffer = Py_TYPE(obj)->tp_as_buffer;

  00006	4c 8b 41 58	 mov	 r8, QWORD PTR [rcx+88]
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	49 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [r8+248]

; 370  : 
; 371  :     if (buffer == NULL || buffer->bf_getbuffer == NULL)

  00014	48 85 c0	 test	 rax, rax
  00017	74 1c		 je	 SHORT $LN2@getbuffer
  00019	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  0001c	4d 85 c9	 test	 r9, r9
  0001f	74 14		 je	 SHORT $LN2@getbuffer

; 377  :     }
; 378  : 
; 379  :     if (buffer->bf_getbuffer(obj, view, PyBUF_SIMPLE) < 0)

  00021	45 33 c0	 xor	 r8d, r8d
  00024	41 ff d1	 call	 r9
  00027	85 c0		 test	 eax, eax

; 380  :         return -1;

  00029	78 21		 js	 SHORT $LN6@getbuffer

; 381  :     return view->len;

  0002b	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]

; 382  : }

  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5b		 pop	 rbx
  00034	c3		 ret	 0
$LN2@getbuffer:

; 372  :     {
; 373  :         PyErr_Format(PyExc_TypeError,
; 374  :                      "Type %.100s doesn't support the buffer API",
; 375  :                      Py_TYPE(obj)->tp_name);

  00035	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00039	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@HMLNEJOC@Type?5?$CF?4100s?5doesn?8t?5support?5the?5@
  00047	e8 00 00 00 00	 call	 PyErr_Format
$LN6@getbuffer:

; 376  :         return -1;

  0004c	48 83 c8 ff	 or	 rax, -1

; 382  : }

  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5b		 pop	 rbx
  00055	c3		 ret	 0
_getbuffer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@EBIGHGMM@maketrans?5arguments?5must?5have?5sa@ ; `string'
PUBLIC	??_C@_0N@PCKKDHD@OO?3maketrans?$AA@		; `string'
PUBLIC	_Py_bytes_maketrans
EXTRN	PyBuffer_Release:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_bytes_maketrans DD imagerel $LN22
	DD	imagerel $LN22+317
	DD	imagerel $unwind$_Py_bytes_maketrans
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_bytes_maketrans DD 050f01H
	DD	01a340fH
	DD	018010fH
	DD	07008H
xdata	ENDS
;	COMDAT ??_C@_0CK@EBIGHGMM@maketrans?5arguments?5must?5have?5sa@
CONST	SEGMENT
??_C@_0CK@EBIGHGMM@maketrans?5arguments?5must?5have?5sa@ DB 'maketrans ar'
	DB	'guments must have same length', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PCKKDHD@OO?3maketrans?$AA@
CONST	SEGMENT
??_C@_0N@PCKKDHD@OO?3maketrans?$AA@ DB 'OO:maketrans', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_bytes_maketrans
_TEXT	SEGMENT
bfrm$ = 32
bto$ = 112
args$ = 208
frm$ = 216
to$ = 224
_Py_bytes_maketrans PROC				; COMDAT

; 386  : {

$LN22:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	57		 push	 rdi
  00008	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H

; 387  :     PyObject *frm, *to, *res = NULL;
; 388  :     Py_buffer bfrm, bto;
; 389  :     Py_ssize_t i;
; 390  :     char *p;
; 391  : 
; 392  :     bfrm.len = -1;
; 393  :     bto.len = -1;
; 394  : 
; 395  :     if (!PyArg_ParseTuple(args, "OO:maketrans", &frm, &to))

  0000f	4c 8d 48 18	 lea	 r9, QWORD PTR [rax+24]
  00013	4c 8d 40 10	 lea	 r8, QWORD PTR [rax+16]
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@PCKKDHD@OO?3maketrans?$AA@
  0001e	33 db		 xor	 ebx, ebx
  00020	48 c7 44 24 30
	ff ff ff ff	 mov	 QWORD PTR bfrm$[rsp+16], -1
  00029	48 c7 40 b8 ff
	ff ff ff	 mov	 QWORD PTR [rax-72], -1
  00031	8b fb		 mov	 edi, ebx
  00033	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00038	85 c0		 test	 eax, eax
  0003a	75 13		 jne	 SHORT $LN13@Py_bytes_m
$LN21@Py_bytes_m:

; 396  :         return NULL;

  0003c	33 c0		 xor	 eax, eax

; 423  : }

  0003e	48 8b 9c 24 d0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+208]
  00046	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
$LN13@Py_bytes_m:

; 397  :     if (_getbuffer(frm, &bfrm) < 0)

  0004f	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR frm$[rsp]
  00057	48 8d 54 24 20	 lea	 rdx, QWORD PTR bfrm$[rsp]
  0005c	e8 00 00 00 00	 call	 _getbuffer
  00061	48 85 c0	 test	 rax, rax

; 398  :         return NULL;

  00064	78 d6		 js	 SHORT $LN21@Py_bytes_m

; 399  :     if (_getbuffer(to, &bto) < 0)

  00066	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR to$[rsp]
  0006e	48 8d 54 24 70	 lea	 rdx, QWORD PTR bto$[rsp]
  00073	e8 00 00 00 00	 call	 _getbuffer
  00078	48 85 c0	 test	 rax, rax
  0007b	0f 88 81 00 00
	00		 js	 $done$20592

; 400  :         goto done;
; 401  :     if (bfrm.len != bto.len) {

  00081	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR bto$[rsp+16]
  00089	48 39 44 24 30	 cmp	 QWORD PTR bfrm$[rsp+16], rax
  0008e	74 15		 je	 SHORT $LN10@Py_bytes_m

; 402  :         PyErr_Format(PyExc_ValueError,
; 403  :                      "maketrans arguments must have same length");

  00090	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EBIGHGMM@maketrans?5arguments?5must?5have?5sa@
  0009e	e8 00 00 00 00	 call	 PyErr_Format

; 404  :         goto done;

  000a3	eb 5d		 jmp	 SHORT $done$20592
$LN10@Py_bytes_m:

; 405  :     }
; 406  :     res = PyBytes_FromStringAndSize(NULL, 256);

  000a5	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  000aa	33 c9		 xor	 ecx, ecx
  000ac	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000b1	48 8b f8	 mov	 rdi, rax

; 407  :     if (!res) {

  000b4	48 85 c0	 test	 rax, rax
  000b7	74 49		 je	 SHORT $done$20592

; 408  :         goto done;
; 409  :     }
; 410  :     p = PyBytes_AS_STRING(res);
; 411  :     for (i = 0; i < 256; i++)

  000b9	48 8b cb	 mov	 rcx, rbx
  000bc	0f 1f 40 00	 npad	 4
$LL8@Py_bytes_m:

; 412  :         p[i] = (char) i;

  000c0	88 4c 01 78	 mov	 BYTE PTR [rcx+rax+120], cl
  000c4	48 ff c1	 inc	 rcx
  000c7	48 81 f9 00 01
	00 00		 cmp	 rcx, 256		; 00000100H
  000ce	7c f0		 jl	 SHORT $LL8@Py_bytes_m

; 413  :     for (i = 0; i < bfrm.len; i++) {

  000d0	48 39 5c 24 30	 cmp	 QWORD PTR bfrm$[rsp+16], rbx
  000d5	7e 2b		 jle	 SHORT $done$20592
  000d7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL5@Py_bytes_m:

; 414  :         p[((unsigned char *)bfrm.buf)[i]] = ((char *)bto.buf)[i];

  000e0	48 8b 44 24 20	 mov	 rax, QWORD PTR bfrm$[rsp]
  000e5	48 ff c3	 inc	 rbx
  000e8	0f b6 54 18 ff	 movzx	 edx, BYTE PTR [rax+rbx-1]
  000ed	48 8b 44 24 70	 mov	 rax, QWORD PTR bto$[rsp]
  000f2	0f b6 4c 18 ff	 movzx	 ecx, BYTE PTR [rax+rbx-1]
  000f7	88 4c 3a 78	 mov	 BYTE PTR [rdx+rdi+120], cl
  000fb	48 3b 5c 24 30	 cmp	 rbx, QWORD PTR bfrm$[rsp+16]
  00100	7c de		 jl	 SHORT $LL5@Py_bytes_m
$done$20592:

; 415  :     }
; 416  : 
; 417  : done:
; 418  :     if (bfrm.len != -1)

  00102	48 83 7c 24 30
	ff		 cmp	 QWORD PTR bfrm$[rsp+16], -1
  00108	74 0a		 je	 SHORT $LN2@Py_bytes_m

; 419  :         PyBuffer_Release(&bfrm);

  0010a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR bfrm$[rsp]
  0010f	e8 00 00 00 00	 call	 PyBuffer_Release
$LN2@Py_bytes_m:

; 420  :     if (bto.len != -1)

  00114	48 83 bc 24 80
	00 00 00 ff	 cmp	 QWORD PTR bto$[rsp+16], -1
  0011d	74 0a		 je	 SHORT $LN1@Py_bytes_m

; 421  :         PyBuffer_Release(&bto);

  0011f	48 8d 4c 24 70	 lea	 rcx, QWORD PTR bto$[rsp]
  00124	e8 00 00 00 00	 call	 PyBuffer_Release
$LN1@Py_bytes_m:

; 422  :     return res;

  00129	48 8b c7	 mov	 rax, rdi

; 423  : }

  0012c	48 8b 9c 24 d0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+208]
  00134	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0013b	5f		 pop	 rdi
  0013c	c3		 ret	 0
_Py_bytes_maketrans ENDP
_TEXT	ENDS
END
