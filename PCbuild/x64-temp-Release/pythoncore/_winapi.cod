; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07FFLJJADP@_winapi?$AA@			; `string'
PUBLIC	??_C@_09NOIIIIGM@WriteFile?$AA@			; `string'
PUBLIC	??_C@_0BE@CLKLPNNG@WaitForSingleObject?$AA@	; `string'
PUBLIC	??_C@_0BH@LBENJJIP@WaitForMultipleObjects?$AA@	; `string'
PUBLIC	??_C@_0O@LMMPCKDG@WaitNamedPipe?$AA@		; `string'
PUBLIC	??_C@_0BB@LOFPKPFA@TerminateProcess?$AA@	; `string'
PUBLIC	??_C@_0BI@DIHOHPCP@SetNamedPipeHandleState?$AA@	; `string'
PUBLIC	??_C@_08KLCHJOKF@ReadFile?$AA@			; `string'
PUBLIC	??_C@_0O@CBLPJHOM@PeekNamedPipe?$AA@		; `string'
PUBLIC	??_C@_0M@MMCMKPDL@OpenProcess?$AA@		; `string'
PUBLIC	??_C@_0L@LNAOMCPJ@GetVersion?$AA@		; `string'
PUBLIC	??_C@_0N@BKPPPGAL@GetStdHandle?$AA@		; `string'
PUBLIC	??_C@_0BC@PGJLHJFJ@GetModuleFileName?$AA@	; `string'
PUBLIC	??_C@_0N@HICKNDGL@GetLastError?$AA@		; `string'
PUBLIC	??_C@_0BD@OOONFEIA@GetExitCodeProcess?$AA@	; `string'
PUBLIC	??_C@_0BC@PMJGPBJJ@GetCurrentProcess?$AA@	; `string'
PUBLIC	??_C@_0M@LPAKIOHO@ExitProcess?$AA@		; `string'
PUBLIC	??_C@_0BA@KKBHKMMH@DuplicateHandle?$AA@		; `string'
PUBLIC	??_C@_0O@FGHFFHOP@CreateProcess?$AA@		; `string'
PUBLIC	??_C@_0L@FBIDOKLH@CreatePipe?$AA@		; `string'
PUBLIC	??_C@_0BA@JPNEEGJB@CreateNamedPipe?$AA@		; `string'
PUBLIC	??_C@_0L@KLBPNCIB@CreateFile?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BB@JNKPBCBE@ConnectNamedPipe?$AA@	; `string'
PUBLIC	??_C@_0M@JHJNLFGC@CloseHandle?$AA@		; `string'
PUBLIC	??_C@_06HOHPNJLC@buffer?$AA@			; `string'
PUBLIC	??_C@_04IAGNFIBA@size?$AA@			; `string'
PUBLIC	??_C@_0L@GFMJGGB@overlapped?$AA@		; `string'
PUBLIC	??_C@_06NCGDPKCC@handle?$AA@			; `string'
PUBLIC	??_C@_0BN@FALEEJEK@OVERLAPPED?5structure?5wrapper?$AA@ ; `string'
PUBLIC	??_C@_0BD@GGIAODBE@_winapi?4Overlapped?$AA@	; `string'
PUBLIC	??_C@_0BI@DAJGAKJH@overlapped?5event?5handle?$AA@ ; `string'
PUBLIC	??_C@_05GFHEIIDD@event?$AA@			; `string'
PUBLIC	??_C@_06JDKABGKH@cancel?$AA@			; `string'
PUBLIC	??_C@_09NEMCKDC@getbuffer?$AA@			; `string'
PUBLIC	??_C@_0BE@LHCFOKBA@GetOverlappedResult?$AA@	; `string'
PUBLIC	OverlappedType
;	COMDAT ??_C@_07FFLJJADP@_winapi?$AA@
CONST	SEGMENT
??_C@_07FFLJJADP@_winapi?$AA@ DB '_winapi', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NOIIIIGM@WriteFile?$AA@
CONST	SEGMENT
??_C@_09NOIIIIGM@WriteFile?$AA@ DB 'WriteFile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CLKLPNNG@WaitForSingleObject?$AA@
CONST	SEGMENT
??_C@_0BE@CLKLPNNG@WaitForSingleObject?$AA@ DB 'WaitForSingleObject', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LBENJJIP@WaitForMultipleObjects?$AA@
CONST	SEGMENT
??_C@_0BH@LBENJJIP@WaitForMultipleObjects?$AA@ DB 'WaitForMultipleObjects'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LMMPCKDG@WaitNamedPipe?$AA@
CONST	SEGMENT
??_C@_0O@LMMPCKDG@WaitNamedPipe?$AA@ DB 'WaitNamedPipe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LOFPKPFA@TerminateProcess?$AA@
CONST	SEGMENT
??_C@_0BB@LOFPKPFA@TerminateProcess?$AA@ DB 'TerminateProcess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DIHOHPCP@SetNamedPipeHandleState?$AA@
CONST	SEGMENT
??_C@_0BI@DIHOHPCP@SetNamedPipeHandleState?$AA@ DB 'SetNamedPipeHandleSta'
	DB	'te', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08KLCHJOKF@ReadFile?$AA@
CONST	SEGMENT
??_C@_08KLCHJOKF@ReadFile?$AA@ DB 'ReadFile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CBLPJHOM@PeekNamedPipe?$AA@
CONST	SEGMENT
??_C@_0O@CBLPJHOM@PeekNamedPipe?$AA@ DB 'PeekNamedPipe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MMCMKPDL@OpenProcess?$AA@
CONST	SEGMENT
??_C@_0M@MMCMKPDL@OpenProcess?$AA@ DB 'OpenProcess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LNAOMCPJ@GetVersion?$AA@
CONST	SEGMENT
??_C@_0L@LNAOMCPJ@GetVersion?$AA@ DB 'GetVersion', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BKPPPGAL@GetStdHandle?$AA@
CONST	SEGMENT
??_C@_0N@BKPPPGAL@GetStdHandle?$AA@ DB 'GetStdHandle', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PGJLHJFJ@GetModuleFileName?$AA@
CONST	SEGMENT
??_C@_0BC@PGJLHJFJ@GetModuleFileName?$AA@ DB 'GetModuleFileName', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HICKNDGL@GetLastError?$AA@
CONST	SEGMENT
??_C@_0N@HICKNDGL@GetLastError?$AA@ DB 'GetLastError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OOONFEIA@GetExitCodeProcess?$AA@
CONST	SEGMENT
??_C@_0BD@OOONFEIA@GetExitCodeProcess?$AA@ DB 'GetExitCodeProcess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PMJGPBJJ@GetCurrentProcess?$AA@
CONST	SEGMENT
??_C@_0BC@PMJGPBJJ@GetCurrentProcess?$AA@ DB 'GetCurrentProcess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LPAKIOHO@ExitProcess?$AA@
CONST	SEGMENT
??_C@_0M@LPAKIOHO@ExitProcess?$AA@ DB 'ExitProcess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KKBHKMMH@DuplicateHandle?$AA@
CONST	SEGMENT
??_C@_0BA@KKBHKMMH@DuplicateHandle?$AA@ DB 'DuplicateHandle', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FGHFFHOP@CreateProcess?$AA@
CONST	SEGMENT
??_C@_0O@FGHFFHOP@CreateProcess?$AA@ DB 'CreateProcess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FBIDOKLH@CreatePipe?$AA@
CONST	SEGMENT
??_C@_0L@FBIDOKLH@CreatePipe?$AA@ DB 'CreatePipe', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JPNEEGJB@CreateNamedPipe?$AA@
CONST	SEGMENT
??_C@_0BA@JPNEEGJB@CreateNamedPipe?$AA@ DB 'CreateNamedPipe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KLBPNCIB@CreateFile?$AA@
CONST	SEGMENT
??_C@_0L@KLBPNCIB@CreateFile?$AA@ DB 'CreateFile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JNKPBCBE@ConnectNamedPipe?$AA@
CONST	SEGMENT
??_C@_0BB@JNKPBCBE@ConnectNamedPipe?$AA@ DB 'ConnectNamedPipe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JHJNLFGC@CloseHandle?$AA@
CONST	SEGMENT
??_C@_0M@JHJNLFGC@CloseHandle?$AA@ DB 'CloseHandle', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOHPNJLC@buffer?$AA@
CONST	SEGMENT
??_C@_06HOHPNJLC@buffer?$AA@ DB 'buffer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IAGNFIBA@size?$AA@
CONST	SEGMENT
??_C@_04IAGNFIBA@size?$AA@ DB 'size', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GFMJGGB@overlapped?$AA@
CONST	SEGMENT
??_C@_0L@GFMJGGB@overlapped?$AA@ DB 'overlapped', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NCGDPKCC@handle?$AA@
CONST	SEGMENT
??_C@_06NCGDPKCC@handle?$AA@ DB 'handle', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FALEEJEK@OVERLAPPED?5structure?5wrapper?$AA@
CONST	SEGMENT
??_C@_0BN@FALEEJEK@OVERLAPPED?5structure?5wrapper?$AA@ DB 'OVERLAPPED str'
	DB	'ucture wrapper', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GGIAODBE@_winapi?4Overlapped?$AA@
CONST	SEGMENT
??_C@_0BD@GGIAODBE@_winapi?4Overlapped?$AA@ DB '_winapi.Overlapped', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DAJGAKJH@overlapped?5event?5handle?$AA@
CONST	SEGMENT
??_C@_0BI@DAJGAKJH@overlapped?5event?5handle?$AA@ DB 'overlapped event ha'
	DB	'ndle', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFHEIIDD@event?$AA@
CONST	SEGMENT
??_C@_05GFHEIIDD@event?$AA@ DB 'event', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JDKABGKH@cancel?$AA@
CONST	SEGMENT
??_C@_06JDKABGKH@cancel?$AA@ DB 'cancel', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NEMCKDC@getbuffer?$AA@
CONST	SEGMENT
??_C@_09NEMCKDC@getbuffer?$AA@ DB 'getbuffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LHCFOKBA@GetOverlappedResult?$AA@
CONST	SEGMENT
??_C@_0BE@LHCFOKBA@GetOverlappedResult?$AA@ DB 'GetOverlappedResult', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
has_CancelIoEx DD 0ffffffffH
	ORG $+12
overlapped_methods DQ FLAT:??_C@_0BE@LHCFOKBA@GetOverlappedResult?$AA@
	DQ	FLAT:overlapped_GetOverlappedResult
	DD	08H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_09NEMCKDC@getbuffer?$AA@
	DQ	FLAT:overlapped_getbuffer
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_06JDKABGKH@cancel?$AA@
	DQ	FLAT:overlapped_cancel
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+24
overlapped_members DQ FLAT:??_C@_05GFHEIIDD@event?$AA@
	DD	012H
	ORG $+4
	DQ	0000000000000078H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BI@DAJGAKJH@overlapped?5event?5handle?$AA@
	DQ	0000000000000000H
	ORG $+32
OverlappedType DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@GGIAODBE@_winapi?4Overlapped?$AA@
	DQ	00000000000000f0H
	DQ	0000000000000000H
	DQ	FLAT:overlapped_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	FLAT:??_C@_0BN@FALEEJEK@OVERLAPPED?5structure?5wrapper?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:overlapped_methods
	DQ	FLAT:overlapped_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+72
CloseHandle_doc DB 'CloseHandle(handle) -> None', 0aH, 0aH, 'Close handle'
	DB	'.', 00H
	ORG $+5
?kwlist@?1??winapi_ConnectNamedPipe@@9@9 DQ FLAT:??_C@_06NCGDPKCC@handle?$AA@ ; `winapi_ConnectNamedPipe'::`2'::kwlist
	DQ	FLAT:??_C@_0L@GFMJGGB@overlapped?$AA@
	DQ	0000000000000000H
	ORG $+8
CreatePipe_doc DB 'CreatePipe(pipe_attrs, size) -> (read_handle, write_ha'
	DB	'ndle)', 0aH, 0aH, 'Create an anonymous pipe, and return handl'
	DB	'es to the read and', 0aH, 'write ends of the pipe.', 0aH, 0aH
	DB	'pipe_attrs is ignored internally and can be None.', 00H
	ORG $+11
CreateProcess_doc DB 'CreateProcess(app_name, cmd_line, proc_attrs, threa'
	DB	'd_attrs,', 0aH, '               inherit, flags, env_mapping, '
	DB	'curdir,', 0aH, '               startup_info) -> (proc_handle,'
	DB	' thread_handle,', 0aH, '                                 pid,'
	DB	' tid)', 0aH, 0aH, 'Create a new process and its primary threa'
	DB	'd. The return', 0aH, 'value is a tuple of the process handle,'
	DB	' thread handle,', 0aH, 'process ID, and thread ID.', 0aH, 0aH
	DB	'proc_attrs and thread_attrs are ignored internally and can be'
	DB	' None.', 00H
	ORG $+8
DuplicateHandle_doc DB 'DuplicateHandle(source_proc_handle, source_handle'
	DB	',', 0aH, '                 target_proc_handle, target_handle,'
	DB	' access,', 0aH, '                 inherit[, options]) -> hand'
	DB	'le', 0aH, 0aH, 'Return a duplicate handle object.', 0aH, 0aH, 'T'
	DB	'he duplicate handle refers to the same object as the original'
	DB	0aH, 'handle. Therefore, any changes to the object are reflect'
	DB	'ed', 0aH, 'through both handles.', 00H
	ORG $+14
GetCurrentProcess_doc DB 'GetCurrentProcess() -> handle', 0aH, 0aH, 'Retu'
	DB	'rn a handle object for the current process.', 00H
	ORG $+1
GetExitCodeProcess_doc DB 'GetExitCodeProcess(handle) -> Exit code', 0aH, 0aH
	DB	'Return the termination status of the specified process.', 00H
	ORG $+15
GetModuleFileName_doc DB 'GetModuleFileName(module) -> path', 0aH, 0aH, 'R'
	DB	'eturn the fully-qualified path for the file that contains', 0aH
	DB	'the specified module. The module must have been loaded by the'
	DB	0aH, 'current process.', 0aH, 0aH, 'The module parameter shoul'
	DB	'd be a handle to the loaded module', 0aH, 'whose path is bein'
	DB	'g requested. If this parameter is 0, ', 0aH, 'GetModuleFileNa'
	DB	'me retrieves the path of the executable file', 0aH, 'of the c'
	DB	'urrent process.', 00H
	ORG $+9
GetStdHandle_doc DB 'GetStdHandle(handle) -> integer', 0aH, 0aH, 'Return '
	DB	'a handle to the specified standard device', 0aH, '(STD_INPUT_'
	DB	'HANDLE, STD_OUTPUT_HANDLE, STD_ERROR_HANDLE).', 0aH, 'The int'
	DB	'eger associated with the handle object is returned.', 00H
	ORG $+10
GetVersion_doc DB 'GetVersion() -> version', 0aH, 0aH, 'Return the versio'
	DB	'n number of the current operating system.', 00H
	ORG $+4
?kwlist@?1??winapi_ReadFile@@9@9 DQ FLAT:??_C@_06NCGDPKCC@handle?$AA@ ; `winapi_ReadFile'::`2'::kwlist
	DQ	FLAT:??_C@_04IAGNFIBA@size?$AA@
	DQ	FLAT:??_C@_0L@GFMJGGB@overlapped?$AA@
	DQ	0000000000000000H
	ORG $+8
TerminateProcess_doc DB 'TerminateProcess(handle, exit_code) -> None', 0aH
	DB	0aH, 'Terminate the specified process and all of its threads.', 00H
	ORG $+11
WaitForSingleObject_doc DB 'WaitForSingleObject(handle, timeout) -> resul'
	DB	't', 0aH, 0aH, 'Wait until the specified object is in the sign'
	DB	'aled state or', 0aH, 'the time-out interval elapses. The time'
	DB	'out value is specified', 0aH, 'in milliseconds.', 00H
	ORG $+5
?kwlist@?1??winapi_WriteFile@@9@9 DQ FLAT:??_C@_06NCGDPKCC@handle?$AA@ ; `winapi_WriteFile'::`2'::kwlist
	DQ	FLAT:??_C@_06HOHPNJLC@buffer?$AA@
	DQ	FLAT:??_C@_0L@GFMJGGB@overlapped?$AA@
	DQ	0000000000000000H
winapi_functions DQ FLAT:??_C@_0M@JHJNLFGC@CloseHandle?$AA@
	DQ	FLAT:winapi_CloseHandle
	DD	01H
	ORG $+4
	DQ	FLAT:CloseHandle_doc
	DQ	FLAT:??_C@_0BB@JNKPBCBE@ConnectNamedPipe?$AA@
	DQ	FLAT:winapi_ConnectNamedPipe
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0L@KLBPNCIB@CreateFile?$AA@
	DQ	FLAT:winapi_CreateFile
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0BA@JPNEEGJB@CreateNamedPipe?$AA@
	DQ	FLAT:winapi_CreateNamedPipe
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0L@FBIDOKLH@CreatePipe?$AA@
	DQ	FLAT:winapi_CreatePipe
	DD	01H
	ORG $+4
	DQ	FLAT:CreatePipe_doc
	DQ	FLAT:??_C@_0O@FGHFFHOP@CreateProcess?$AA@
	DQ	FLAT:winapi_CreateProcess
	DD	01H
	ORG $+4
	DQ	FLAT:CreateProcess_doc
	DQ	FLAT:??_C@_0BA@KKBHKMMH@DuplicateHandle?$AA@
	DQ	FLAT:winapi_DuplicateHandle
	DD	01H
	ORG $+4
	DQ	FLAT:DuplicateHandle_doc
	DQ	FLAT:??_C@_0M@LPAKIOHO@ExitProcess?$AA@
	DQ	FLAT:winapi_ExitProcess
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0BC@PMJGPBJJ@GetCurrentProcess?$AA@
	DQ	FLAT:winapi_GetCurrentProcess
	DD	01H
	ORG $+4
	DQ	FLAT:GetCurrentProcess_doc
	DQ	FLAT:??_C@_0BD@OOONFEIA@GetExitCodeProcess?$AA@
	DQ	FLAT:winapi_GetExitCodeProcess
	DD	01H
	ORG $+4
	DQ	FLAT:GetExitCodeProcess_doc
	DQ	FLAT:??_C@_0N@HICKNDGL@GetLastError?$AA@
	DQ	FLAT:winapi_GetLastError
	DD	04H
	ORG $+4
	DQ	FLAT:GetCurrentProcess_doc
	DQ	FLAT:??_C@_0BC@PGJLHJFJ@GetModuleFileName?$AA@
	DQ	FLAT:winapi_GetModuleFileName
	DD	01H
	ORG $+4
	DQ	FLAT:GetModuleFileName_doc
	DQ	FLAT:??_C@_0N@BKPPPGAL@GetStdHandle?$AA@
	DQ	FLAT:winapi_GetStdHandle
	DD	01H
	ORG $+4
	DQ	FLAT:GetStdHandle_doc
	DQ	FLAT:??_C@_0L@LNAOMCPJ@GetVersion?$AA@
	DQ	FLAT:winapi_GetVersion
	DD	01H
	ORG $+4
	DQ	FLAT:GetVersion_doc
	DQ	FLAT:??_C@_0M@MMCMKPDL@OpenProcess?$AA@
	DQ	FLAT:winapi_OpenProcess
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0O@CBLPJHOM@PeekNamedPipe?$AA@
	DQ	FLAT:winapi_PeekNamedPipe
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_08KLCHJOKF@ReadFile?$AA@
	DQ	FLAT:winapi_ReadFile
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0BI@DIHOHPCP@SetNamedPipeHandleState?$AA@
	DQ	FLAT:winapi_SetNamedPipeHandleState
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0BB@LOFPKPFA@TerminateProcess?$AA@
	DQ	FLAT:winapi_TerminateProcess
	DD	01H
	ORG $+4
	DQ	FLAT:TerminateProcess_doc
	DQ	FLAT:??_C@_0O@LMMPCKDG@WaitNamedPipe?$AA@
	DQ	FLAT:winapi_WaitNamedPipe
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0BH@LBENJJIP@WaitForMultipleObjects?$AA@
	DQ	FLAT:winapi_WaitForMultipleObjects
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0BE@CLKLPNNG@WaitForSingleObject?$AA@
	DQ	FLAT:winapi_WaitForSingleObject
	DD	01H
	ORG $+4
	DQ	FLAT:WaitForSingleObject_doc
	DQ	FLAT:??_C@_09NOIIIIGM@WriteFile?$AA@
	DQ	FLAT:winapi_WriteFile
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
winapi_module DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07FFLJJADP@_winapi?$AA@
	DQ	0000000000000000H
	DQ	ffffffffffffffffH
	DQ	FLAT:winapi_functions
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@COJLGOAG@CancelIoEx?$AA@		; `string'
PUBLIC	??_C@_08CPNIBGIE@KERNEL32?$AA@			; `string'
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_GetModuleHandleA:PROC
_BSS	SEGMENT
Py_CancelIoEx DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\_winapi.c
pdata	SEGMENT
$pdata$check_CancelIoEx DD imagerel check_CancelIoEx
	DD	imagerel check_CancelIoEx+72
	DD	imagerel $unwind$check_CancelIoEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check_CancelIoEx DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0L@COJLGOAG@CancelIoEx?$AA@
CONST	SEGMENT
??_C@_0L@COJLGOAG@CancelIoEx?$AA@ DB 'CancelIoEx', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CPNIBGIE@KERNEL32?$AA@
CONST	SEGMENT
??_C@_08CPNIBGIE@KERNEL32?$AA@ DB 'KERNEL32', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT check_CancelIoEx
_TEXT	SEGMENT
check_CancelIoEx PROC					; COMDAT

; 71   : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 72   :     if (has_CancelIoEx == -1)

  00004	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR has_CancelIoEx
  0000a	83 f8 ff	 cmp	 eax, -1
  0000d	75 34		 jne	 SHORT $LN4@check_Canc

; 73   :     {
; 74   :         HINSTANCE hKernel32 = GetModuleHandle("KERNEL32");

  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08CPNIBGIE@KERNEL32?$AA@
  00016	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleA

; 75   :         * (FARPROC *) &Py_CancelIoEx = GetProcAddress(hKernel32,
; 76   :                                                       "CancelIoEx");

  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@COJLGOAG@CancelIoEx?$AA@
  00023	48 8b c8	 mov	 rcx, rax
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress

; 77   :         has_CancelIoEx = (Py_CancelIoEx != NULL);

  0002c	33 c9		 xor	 ecx, ecx
  0002e	48 85 c0	 test	 rax, rax
  00031	48 89 05 00 00
	00 00		 mov	 QWORD PTR Py_CancelIoEx, rax
  00038	0f 95 c1	 setne	 cl
  0003b	89 0d 00 00 00
	00		 mov	 DWORD PTR has_CancelIoEx, ecx

; 78   :     }
; 79   :     return has_CancelIoEx;

  00041	8b c1		 mov	 eax, ecx
$LN4@check_Canc:

; 80   : }

  00043	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00047	c3		 ret	 0
check_CancelIoEx ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@KHFACHNK@overlapped_dealloc?$AA@	; `string'
PUBLIC	??_C@_0BF@DPLCPCCK@?4?4?2Modules?2_winapi?4c?$AA@ ; `string'
PUBLIC	??_C@_0FJ@COFIDFEA@I?1O?5operations?5still?5in?5flight?5w@ ; `string'
EXTRN	PyObject_Free:PROC
EXTRN	PyBuffer_Release:PROC
EXTRN	__imp_SetLastError:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	PyErr_WriteUnraisable:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	__imp_GetOverlappedResult:PROC
EXTRN	__imp_GetLastError:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$overlapped_dealloc DD imagerel overlapped_dealloc
	DD	imagerel overlapped_dealloc+50
	DD	imagerel $unwind$overlapped_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$overlapped_dealloc DD imagerel overlapped_dealloc+50
	DD	imagerel overlapped_dealloc+98
	DD	imagerel $chain$0$overlapped_dealloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$overlapped_dealloc DD imagerel overlapped_dealloc+98
	DD	imagerel overlapped_dealloc+393
	DD	imagerel $chain$1$overlapped_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$overlapped_dealloc DD 021H
	DD	imagerel overlapped_dealloc
	DD	imagerel overlapped_dealloc+50
	DD	imagerel $unwind$overlapped_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$overlapped_dealloc DD 020521H
	DD	096405H
	DD	imagerel overlapped_dealloc
	DD	imagerel overlapped_dealloc+50
	DD	imagerel $unwind$overlapped_dealloc
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$overlapped_dealloc DD 040a01H
	DD	0a340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0BD@KHFACHNK@overlapped_dealloc?$AA@
CONST	SEGMENT
??_C@_0BD@KHFACHNK@overlapped_dealloc?$AA@ DB 'overlapped_dealloc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DPLCPCCK@?4?4?2Modules?2_winapi?4c?$AA@
CONST	SEGMENT
??_C@_0BF@DPLCPCCK@?4?4?2Modules?2_winapi?4c?$AA@ DB '..\Modules\_winapi.'
	DB	'c', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0FJ@COFIDFEA@I?1O?5operations?5still?5in?5flight?5w@
CONST	SEGMENT
??_C@_0FJ@COFIDFEA@I?1O?5operations?5still?5in?5flight?5w@ DB 'I/O operat'
	DB	'ions still in flight while destroying Overlapped object, the '
	DB	'process may crash', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_winapi.c
CONST	ENDS
;	COMDAT overlapped_dealloc
_TEXT	SEGMENT
bytes$ = 64
self$ = 64
overlapped_dealloc PROC					; COMDAT

; 105  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b d9	 mov	 rbx, rcx

; 106  :     DWORD bytes;
; 107  :     int err = GetLastError();

  0000d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError

; 108  :     if (self->pending) {

  00013	83 bb 88 00 00
	00 00		 cmp	 DWORD PTR [rbx+136], 0
  0001a	8b f8		 mov	 edi, eax
  0001c	74 5e		 je	 SHORT $LN7@overlapped

; 109  :         /* make it a programming error to deallocate while operation
; 110  :            is pending, even if we can safely cancel it */
; 111  :         if (check_CancelIoEx() &&
; 112  :                 Py_CancelIoEx(self->handle, &self->overlapped))

  0001e	e8 00 00 00 00	 call	 check_CancelIoEx
  00023	85 c0		 test	 eax, eax
  00025	74 3b		 je	 SHORT $LN6@overlapped
  00027	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  0002e	48 8d 53 60	 lea	 rdx, QWORD PTR [rbx+96]
  00032	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR Py_CancelIoEx
  0003d	85 c0		 test	 eax, eax
  0003f	74 1c		 je	 SHORT $LN21@overlapped

; 113  :             GetOverlappedResult(self->handle, &self->overlapped, &bytes, TRUE);

  00041	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  00048	4c 8d 44 24 40	 lea	 r8, QWORD PTR bytes$[rsp]
  0004d	48 8d 53 60	 lea	 rdx, QWORD PTR [rbx+96]
  00051	41 b9 01 00 00
	00		 mov	 r9d, 1
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetOverlappedResult
$LN21@overlapped:
  0005d	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
$LN6@overlapped:

; 114  :         PyErr_SetString(PyExc_RuntimeError,
; 115  :                         "I/O operations still in flight while destroying "
; 116  :                         "Overlapped object, the process may crash");

  00062	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0FJ@COFIDFEA@I?1O?5operations?5still?5in?5flight?5w@
  00070	e8 00 00 00 00	 call	 PyErr_SetString

; 117  :         PyErr_WriteUnraisable(NULL);

  00075	33 c9		 xor	 ecx, ecx
  00077	e8 00 00 00 00	 call	 PyErr_WriteUnraisable
$LN7@overlapped:

; 118  :     }
; 119  :     CloseHandle(self->overlapped.hEvent);

  0007c	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 120  :     SetLastError(err);

  00086	8b cf		 mov	 ecx, edi
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetLastError

; 121  :     if (self->write_buffer.obj)

  0008e	48 83 bb a0 00
	00 00 00	 cmp	 QWORD PTR [rbx+160], 0
  00096	74 0c		 je	 SHORT $LN4@overlapped

; 122  :         PyBuffer_Release(&self->write_buffer);

  00098	48 8d 8b 98 00
	00 00		 lea	 rcx, QWORD PTR [rbx+152]
  0009f	e8 00 00 00 00	 call	 PyBuffer_Release
$LN4@overlapped:

; 123  :     Py_CLEAR(self->read_buffer);

  000a4	4c 8b 8b 90 00
	00 00		 mov	 r9, QWORD PTR [rbx+144]
  000ab	4d 85 c9	 test	 r9, r9
  000ae	0f 84 c2 00 00
	00		 je	 $LN3@overlapped
  000b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@DPLCPCCK@?4?4?2Modules?2_winapi?4c?$AA@
  000bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@KHFACHNK@overlapped_dealloc?$AA@
  000c2	41 b8 7b 00 00
	00		 mov	 r8d, 123		; 0000007bH
  000c8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d5	85 c0		 test	 eax, eax
  000d7	0f 85 99 00 00
	00		 jne	 $LN3@overlapped
  000dd	48 8b bb 90 00
	00 00		 mov	 rdi, QWORD PTR [rbx+144]
  000e4	48 c7 83 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+144], 0
  000ef	e8 00 00 00 00	 call	 _Py_PXCTX
  000f4	85 c0		 test	 eax, eax
  000f6	75 7e		 jne	 SHORT $LN3@overlapped
  000f8	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000fc	a8 20		 test	 al, 32			; 00000020H
  000fe	75 6e		 jne	 SHORT $LN14@overlapped
  00100	84 c0		 test	 al, al
  00102	78 6a		 js	 SHORT $LN14@overlapped
  00104	a8 02		 test	 al, 2
  00106	75 6e		 jne	 SHORT $LN3@overlapped
  00108	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0010c	75 68		 jne	 SHORT $LN3@overlapped
  0010e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0011c	4c 8b cf	 mov	 r9, rdi
  0011f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00125	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0012d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00132	48 8b cf	 mov	 rcx, rdi
  00135	85 c0		 test	 eax, eax
  00137	74 18		 je	 SHORT $LN19@overlapped
  00139	e8 00 00 00 00	 call	 _Px_Dealloc

; 124  :     PyObject_Del(self);

  0013e	48 8b cb	 mov	 rcx, rbx
  00141	e8 00 00 00 00	 call	 PyObject_Free

; 125  : }

  00146	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0014b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0014f	5f		 pop	 rdi
  00150	c3		 ret	 0

; 123  :     Py_CLEAR(self->read_buffer);

$LN19@overlapped:
  00151	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00155	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 124  :     PyObject_Del(self);

  0015b	48 8b cb	 mov	 rcx, rbx
  0015e	e8 00 00 00 00	 call	 PyObject_Free

; 125  : }

  00163	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00168	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0016c	5f		 pop	 rdi
  0016d	c3		 ret	 0

; 123  :     Py_CLEAR(self->read_buffer);

$LN14@overlapped:
  0016e	48 8b cf	 mov	 rcx, rdi
  00171	e8 00 00 00 00	 call	 Px_DecRef
$LN3@overlapped:

; 124  :     PyObject_Del(self);

  00176	48 8b cb	 mov	 rcx, rbx
  00179	e8 00 00 00 00	 call	 PyObject_Free

; 125  : }

  0017e	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00183	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00187	5f		 pop	 rdi
  00188	c3		 ret	 0
overlapped_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_02FOEOGEOO@II?$AA@			; `string'
EXTRN	Py_BuildValue:PROC
EXTRN	_PyBytes_Resize:PROC
EXTRN	PyErr_SetExcFromWindowsErr:PROC
EXTRN	PyExc_IOError:QWORD
EXTRN	PyEval_RestoreThread:PROC
EXTRN	PyEval_SaveThread:PROC
EXTRN	PyObject_IsTrue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$overlapped_GetOverlappedResult DD imagerel overlapped_GetOverlappedResult
	DD	imagerel overlapped_GetOverlappedResult+48
	DD	imagerel $unwind$overlapped_GetOverlappedResult
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$overlapped_GetOverlappedResult DD imagerel overlapped_GetOverlappedResult+48
	DD	imagerel overlapped_GetOverlappedResult+111
	DD	imagerel $chain$0$overlapped_GetOverlappedResult
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$overlapped_GetOverlappedResult DD imagerel overlapped_GetOverlappedResult+111
	DD	imagerel overlapped_GetOverlappedResult+281
	DD	imagerel $chain$1$overlapped_GetOverlappedResult
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$overlapped_GetOverlappedResult DD 021H
	DD	imagerel overlapped_GetOverlappedResult
	DD	imagerel overlapped_GetOverlappedResult+48
	DD	imagerel $unwind$overlapped_GetOverlappedResult
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$overlapped_GetOverlappedResult DD 020521H
	DD	067405H
	DD	imagerel overlapped_GetOverlappedResult
	DD	imagerel overlapped_GetOverlappedResult+48
	DD	imagerel $unwind$overlapped_GetOverlappedResult
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$overlapped_GetOverlappedResult DD 040a01H
	DD	07340aH
	DD	06006320aH
xdata	ENDS
;	COMDAT ??_C@_02FOEOGEOO@II?$AA@
CONST	SEGMENT
??_C@_02FOEOGEOO@II?$AA@ DB 'II', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT overlapped_GetOverlappedResult
_TEXT	SEGMENT
self$ = 48
waitobj$ = 56
transferred$ = 64
overlapped_GetOverlappedResult PROC			; COMDAT

; 129  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f1	 mov	 rsi, rcx

; 130  :     int wait;
; 131  :     BOOL res;
; 132  :     DWORD transferred = 0;
; 133  :     DWORD err;
; 134  : 
; 135  :     wait = PyObject_IsTrue(waitobj);

  0000d	48 8b ca	 mov	 rcx, rdx
  00010	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR transferred$[rsp], 0
  00018	e8 00 00 00 00	 call	 PyObject_IsTrue
  0001d	8b d8		 mov	 ebx, eax

; 136  :     if (wait < 0)

  0001f	85 c0		 test	 eax, eax
  00021	79 0d		 jns	 SHORT $LN8@overlapped@2
$LN14@overlapped@2:

; 137  :         return NULL;

  00023	33 c0		 xor	 eax, eax

; 164  : }

  00025	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5e		 pop	 rsi
  0002f	c3		 ret	 0
$LN8@overlapped@2:
  00030	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi

; 138  :     Py_BEGIN_ALLOW_THREADS

  00035	e8 00 00 00 00	 call	 PyEval_SaveThread

; 139  :     res = GetOverlappedResult(self->handle, &self->overlapped, &transferred,
; 140  :                               wait != 0);

  0003a	48 8b 8e 80 00
	00 00		 mov	 rcx, QWORD PTR [rsi+128]
  00041	45 33 c9	 xor	 r9d, r9d
  00044	85 db		 test	 ebx, ebx
  00046	48 8d 56 60	 lea	 rdx, QWORD PTR [rsi+96]
  0004a	4c 8d 44 24 40	 lea	 r8, QWORD PTR transferred$[rsp]
  0004f	41 0f 95 c1	 setne	 r9b
  00053	48 8b f8	 mov	 rdi, rax
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetOverlappedResult

; 141  :     Py_END_ALLOW_THREADS

  0005c	48 8b cf	 mov	 rcx, rdi
  0005f	8b d8		 mov	 ebx, eax
  00061	e8 00 00 00 00	 call	 PyEval_RestoreThread
  00066	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 142  : 
; 143  :     err = res ? ERROR_SUCCESS : GetLastError();

  0006b	85 db		 test	 ebx, ebx
  0006d	74 04		 je	 SHORT $LN11@overlapped@2
  0006f	33 db		 xor	 ebx, ebx
  00071	eb 08		 jmp	 SHORT $LN12@overlapped@2
$LN11@overlapped@2:
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00079	8b d8		 mov	 ebx, eax
$LN12@overlapped@2:

; 144  :     switch (err) {

  0007b	8b cb		 mov	 ecx, ebx
  0007d	85 db		 test	 ebx, ebx
  0007f	74 37		 je	 SHORT $LN5@overlapped@2
  00081	81 e9 ea 00 00
	00		 sub	 ecx, 234		; 000000eaH
  00087	74 2f		 je	 SHORT $LN5@overlapped@2
  00089	81 e9 f9 02 00
	00		 sub	 ecx, 761		; 000002f9H
  0008f	74 27		 je	 SHORT $LN5@overlapped@2
  00091	ff c9		 dec	 ecx
  00093	74 37		 je	 SHORT $LN6@overlapped@2

; 150  :             break;
; 151  :         case ERROR_IO_INCOMPLETE:
; 152  :             break;
; 153  :         default:
; 154  :             self->pending = 0;

  00095	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rsi+136], 0

; 155  :             return PyErr_SetExcFromWindowsErr(PyExc_IOError, err);

  0009f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  000a6	8b d3		 mov	 edx, ebx
  000a8	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErr

; 164  : }

  000ad	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000b2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b6	5e		 pop	 rsi
  000b7	c3		 ret	 0
$LN5@overlapped@2:

; 145  :         case ERROR_SUCCESS:
; 146  :         case ERROR_MORE_DATA:
; 147  :         case ERROR_OPERATION_ABORTED:
; 148  :             self->completed = 1;

  000b8	c7 86 8c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rsi+140], 1

; 149  :             self->pending = 0;

  000c2	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rsi+136], 0
$LN6@overlapped@2:

; 156  :     }
; 157  :     if (self->completed && self->read_buffer != NULL) {

  000cc	83 be 8c 00 00
	00 00		 cmp	 DWORD PTR [rsi+140], 0
  000d3	74 26		 je	 SHORT $LN13@overlapped@2
  000d5	48 8d 8e 90 00
	00 00		 lea	 rcx, QWORD PTR [rsi+144]
  000dc	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000df	48 85 c0	 test	 rax, rax
  000e2	74 17		 je	 SHORT $LN13@overlapped@2

; 158  :         assert(PyBytes_CheckExact(self->read_buffer));
; 159  :         if (transferred != PyBytes_GET_SIZE(self->read_buffer) &&
; 160  :             _PyBytes_Resize(&self->read_buffer, transferred))

  000e4	8b 54 24 40	 mov	 edx, DWORD PTR transferred$[rsp]
  000e8	48 3b 50 60	 cmp	 rdx, QWORD PTR [rax+96]
  000ec	74 11		 je	 SHORT $LN1@overlapped@2
  000ee	e8 00 00 00 00	 call	 _PyBytes_Resize
  000f3	85 c0		 test	 eax, eax

; 161  :             return NULL;

  000f5	0f 85 28 ff ff
	ff		 jne	 $LN14@overlapped@2
$LN13@overlapped@2:
  000fb	8b 54 24 40	 mov	 edx, DWORD PTR transferred$[rsp]
$LN1@overlapped@2:

; 162  :     }
; 163  :     return Py_BuildValue("II", (unsigned) transferred, (unsigned) err);

  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02FOEOGEOO@II?$AA@
  00106	44 8b c3	 mov	 r8d, ebx
  00109	e8 00 00 00 00	 call	 Py_BuildValue

; 164  : }

  0010e	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00113	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00117	5e		 pop	 rsi
  00118	c3		 ret	 0
overlapped_GetOverlappedResult ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FD@CHCKJHFP@can?8t?5get?5read?5buffer?5before?5Get@ ; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$overlapped_getbuffer DD imagerel overlapped_getbuffer
	DD	imagerel overlapped_getbuffer+137
	DD	imagerel $unwind$overlapped_getbuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$overlapped_getbuffer DD 033301H
	DD	063433H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0FD@CHCKJHFP@can?8t?5get?5read?5buffer?5before?5Get@
CONST	SEGMENT
??_C@_0FD@CHCKJHFP@can?8t?5get?5read?5buffer?5before?5Get@ DB 'can''t get'
	DB	' read buffer before GetOverlappedResult() signals the operati'
	DB	'on completed', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_winapi.c
CONST	ENDS
;	COMDAT overlapped_getbuffer
_TEXT	SEGMENT
self$ = 64
overlapped_getbuffer PROC				; COMDAT

; 168  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 169  :     PyObject *res;
; 170  :     if (!self->completed) {

  00004	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [rcx+140], 0
  0000b	75 1a		 jne	 SHORT $LN1@overlapped@3

; 171  :         PyErr_SetString(PyExc_ValueError,
; 172  :                         "can't get read buffer before GetOverlappedResult() "
; 173  :                         "signals the operation completed");

  0000d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0FD@CHCKJHFP@can?8t?5get?5read?5buffer?5before?5Get@
  0001b	e8 00 00 00 00	 call	 PyErr_SetString

; 174  :         return NULL;

  00020	33 c0		 xor	 eax, eax

; 179  : }

  00022	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00026	c3		 ret	 0
$LN1@overlapped@3:

; 175  :     }
; 176  :     res = self->read_buffer ? self->read_buffer : Py_None;

  00027	48 8b 81 90 00
	00 00		 mov	 rax, QWORD PTR [rcx+144]
  0002e	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00033	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_NoneStruct
  0003a	48 85 c0	 test	 rax, rax
  0003d	48 0f 45 d8	 cmovne	 rbx, rax

; 177  :     Py_INCREF(res);

  00041	e8 00 00 00 00	 call	 _Py_PXCTX
  00046	85 c0		 test	 eax, eax
  00048	75 32		 jne	 SHORT $LN7@overlapped@3
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00058	4c 8b cb	 mov	 r9, rbx
  0005b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00061	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00069	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006e	85 c0		 test	 eax, eax
  00070	75 06		 jne	 SHORT $LN6@overlapped@3
  00072	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  00076	74 04		 je	 SHORT $LN7@overlapped@3
$LN6@overlapped@3:
  00078	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN7@overlapped@3:

; 178  :     return res;

  0007c	48 8b c3	 mov	 rax, rbx
  0007f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 179  : }

  00084	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00088	c3		 ret	 0
overlapped_getbuffer ENDP
_TEXT	ENDS
EXTRN	__imp_CancelIo:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$overlapped_cancel DD imagerel overlapped_cancel
	DD	imagerel overlapped_cancel+18
	DD	imagerel $unwind$overlapped_cancel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$overlapped_cancel DD imagerel overlapped_cancel+18
	DD	imagerel overlapped_cancel+94
	DD	imagerel $chain$1$overlapped_cancel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$overlapped_cancel DD imagerel overlapped_cancel+94
	DD	imagerel overlapped_cancel+218
	DD	imagerel $chain$2$overlapped_cancel
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$overlapped_cancel DD 021H
	DD	imagerel overlapped_cancel
	DD	imagerel overlapped_cancel+18
	DD	imagerel $unwind$overlapped_cancel
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$overlapped_cancel DD 040a21H
	DD	09740aH
	DD	086405H
	DD	imagerel overlapped_cancel
	DD	imagerel overlapped_cancel+18
	DD	imagerel $unwind$overlapped_cancel
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$overlapped_cancel DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_winapi.c
xdata	ENDS
;	COMDAT overlapped_cancel
_TEXT	SEGMENT
self$ = 64
overlapped_cancel PROC					; COMDAT

; 183  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 184  :     BOOL res = TRUE;
; 185  : 
; 186  :     if (self->pending) {

  00006	83 b9 88 00 00
	00 00		 cmp	 DWORD PTR [rcx+136], 0
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	74 6c		 je	 SHORT $LN1@overlapped@4

; 187  :         Py_BEGIN_ALLOW_THREADS

  00012	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00017	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  0001c	e8 00 00 00 00	 call	 PyEval_SaveThread
  00021	48 8b f0	 mov	 rsi, rax

; 188  :         if (check_CancelIoEx())

  00024	e8 00 00 00 00	 call	 check_CancelIoEx

; 189  :             res = Py_CancelIoEx(self->handle, &self->overlapped);

  00029	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  00030	85 c0		 test	 eax, eax
  00032	74 0c		 je	 SHORT $LN3@overlapped@4
  00034	48 8d 53 60	 lea	 rdx, QWORD PTR [rbx+96]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR Py_CancelIoEx

; 190  :         else

  0003e	eb 06		 jmp	 SHORT $LN11@overlapped@4
$LN3@overlapped@4:

; 191  :             res = CancelIo(self->handle);

  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CancelIo
$LN11@overlapped@4:

; 192  :         Py_END_ALLOW_THREADS

  00046	48 8b ce	 mov	 rcx, rsi
  00049	8b f8		 mov	 edi, eax
  0004b	e8 00 00 00 00	 call	 PyEval_RestoreThread
  00050	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]

; 193  :     }
; 194  : 
; 195  :     /* CancelIoEx returns ERROR_NOT_FOUND if the I/O completed in-between */
; 196  :     if (!res && GetLastError() != ERROR_NOT_FOUND)

  00055	85 ff		 test	 edi, edi
  00057	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  0005c	75 20		 jne	 SHORT $LN1@overlapped@4
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00064	3d 90 04 00 00	 cmp	 eax, 1168		; 00000490H
  00069	74 13		 je	 SHORT $LN1@overlapped@4

; 197  :         return PyErr_SetExcFromWindowsErr(PyExc_IOError, 0);

  0006b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00072	33 d2		 xor	 edx, edx

; 200  : }

  00074	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00078	5b		 pop	 rbx
  00079	e9 00 00 00 00	 jmp	 PyErr_SetExcFromWindowsErr
$LN1@overlapped@4:

; 198  :     self->pending = 0;

  0007e	c7 83 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rbx+136], 0

; 199  :     Py_RETURN_NONE;

  00088	e8 00 00 00 00	 call	 _Py_PXCTX
  0008d	85 c0		 test	 eax, eax
  0008f	75 3c		 jne	 SHORT $LN8@overlapped@4
  00091	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a6	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000ac	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b9	85 c0		 test	 eax, eax
  000bb	75 09		 jne	 SHORT $LN7@overlapped@4
  000bd	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000c4	74 07		 je	 SHORT $LN8@overlapped@4
$LN7@overlapped@4:
  000c6	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN8@overlapped@4:
  000cd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 200  : }

  000d4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d8	5b		 pop	 rbx
  000d9	c3		 ret	 0
overlapped_cancel ENDP
_TEXT	ENDS
EXTRN	__imp_CreateEventA:PROC
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	memset:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_overlapped DD imagerel new_overlapped
	DD	imagerel new_overlapped+142
	DD	imagerel $unwind$new_overlapped
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_overlapped DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT new_overlapped
_TEXT	SEGMENT
handle$ = 48
new_overlapped PROC					; COMDAT

; 260  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 261  :     OverlappedObject *self;
; 262  : 
; 263  :     self = PyObject_New(OverlappedObject, &OverlappedType);

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:OverlappedType
  00019	85 c0		 test	 eax, eax
  0001b	74 07		 je	 SHORT $LN4@new_overla
  0001d	e8 00 00 00 00	 call	 _PxObject_New
  00022	eb 05		 jmp	 SHORT $LN6@new_overla
$LN4@new_overla:
  00024	e8 00 00 00 00	 call	 _PyObject_New
$LN6@new_overla:
  00029	48 8b d8	 mov	 rbx, rax

; 264  :     if (!self)
; 265  :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	48 85 db	 test	 rbx, rbx
  00031	74 50		 je	 SHORT $LN2@new_overla

; 266  :     self->handle = handle;

  00033	48 89 bb 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rdi

; 267  :     self->read_buffer = NULL;

  0003a	48 89 83 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rax

; 268  :     self->pending = 0;

  00041	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax

; 269  :     self->completed = 0;
; 270  :     memset(&self->overlapped, 0, sizeof(OVERLAPPED));

  00048	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax
  0004c	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax
  00050	48 89 43 70	 mov	 QWORD PTR [rbx+112], rax

; 271  :     memset(&self->write_buffer, 0, sizeof(Py_buffer));

  00054	48 8d 8b 98 00
	00 00		 lea	 rcx, QWORD PTR [rbx+152]
  0005b	44 8d 40 50	 lea	 r8d, QWORD PTR [rax+80]
  0005f	33 d2		 xor	 edx, edx
  00061	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax
  00065	e8 00 00 00 00	 call	 memset

; 272  :     /* Manual reset, initially non-signalled */
; 273  :     self->overlapped.hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);

  0006a	45 33 c9	 xor	 r9d, r9d
  0006d	41 8d 51 01	 lea	 edx, QWORD PTR [r9+1]
  00071	45 33 c0	 xor	 r8d, r8d
  00074	33 c9		 xor	 ecx, ecx
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateEventA
  0007c	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax

; 274  :     return self;

  00080	48 8b c3	 mov	 rax, rbx
$LN2@new_overla:

; 275  : }

  00083	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00088	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008c	5f		 pop	 rdi
  0008d	c3		 ret	 0
new_overlapped ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@OFEENNP@K?3CloseHandle?$AA@		; `string'
EXTRN	PyErr_SetFromWindowsErr:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$winapi_CloseHandle DD imagerel winapi_CloseHandle
	DD	imagerel winapi_CloseHandle+35
	DD	imagerel $unwind$winapi_CloseHandle
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$winapi_CloseHandle DD imagerel winapi_CloseHandle+35
	DD	imagerel winapi_CloseHandle+88
	DD	imagerel $chain$1$winapi_CloseHandle
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$winapi_CloseHandle DD imagerel winapi_CloseHandle+88
	DD	imagerel winapi_CloseHandle+181
	DD	imagerel $chain$2$winapi_CloseHandle
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$winapi_CloseHandle DD 021H
	DD	imagerel winapi_CloseHandle
	DD	imagerel winapi_CloseHandle+35
	DD	imagerel $unwind$winapi_CloseHandle
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$winapi_CloseHandle DD 040a21H
	DD	06740aH
	DD	083405H
	DD	imagerel winapi_CloseHandle
	DD	imagerel winapi_CloseHandle+35
	DD	imagerel $unwind$winapi_CloseHandle
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_CloseHandle DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0O@OFEENNP@K?3CloseHandle?$AA@
CONST	SEGMENT
??_C@_0O@OFEENNP@K?3CloseHandle?$AA@ DB 'K:CloseHandle', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_winapi.c
CONST	ENDS
;	COMDAT winapi_CloseHandle
_TEXT	SEGMENT
self$ = 64
args$ = 72
hObject$ = 80
winapi_CloseHandle PROC					; COMDAT

; 287  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 288  :     HANDLE hObject;
; 289  :     BOOL success;
; 290  : 
; 291  :     if (!PyArg_ParseTuple(args, F_HANDLE ":CloseHandle", &hObject))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 50	 lea	 r8, QWORD PTR hObject$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@OFEENNP@K?3CloseHandle?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN2@winapi_Clo

; 292  :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 302  : }

  0001e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00022	c3		 ret	 0
$LN2@winapi_Clo:
  00023	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00028	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi

; 293  : 
; 294  :     Py_BEGIN_ALLOW_THREADS

  0002d	e8 00 00 00 00	 call	 PyEval_SaveThread

; 295  :     success = CloseHandle(hObject);

  00032	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hObject$[rsp]
  00037	48 8b f8	 mov	 rdi, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 296  :     Py_END_ALLOW_THREADS

  00040	48 8b cf	 mov	 rcx, rdi
  00043	8b d8		 mov	 ebx, eax
  00045	e8 00 00 00 00	 call	 PyEval_RestoreThread
  0004a	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 297  : 
; 298  :     if (!success)

  0004f	85 db		 test	 ebx, ebx
  00051	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00056	75 0c		 jne	 SHORT $LN1@winapi_Clo

; 299  :         return PyErr_SetFromWindowsErr(0);

  00058	33 c9		 xor	 ecx, ecx
  0005a	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 302  : }

  0005f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00063	c3		 ret	 0
$LN1@winapi_Clo:

; 300  : 
; 301  :     Py_RETURN_NONE;

  00064	e8 00 00 00 00	 call	 _Py_PXCTX
  00069	85 c0		 test	 eax, eax
  0006b	75 3c		 jne	 SHORT $LN6@winapi_Clo
  0006d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00082	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00088	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00090	e8 00 00 00 00	 call	 _PyParallel_Guard
  00095	85 c0		 test	 eax, eax
  00097	75 09		 jne	 SHORT $LN5@winapi_Clo
  00099	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000a0	74 07		 je	 SHORT $LN6@winapi_Clo
$LN5@winapi_Clo:
  000a2	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@winapi_Clo:
  000a9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 302  : }

  000b0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b4	c3		 ret	 0
winapi_CloseHandle ENDP
_TEXT	ENDS
PUBLIC	??_C@_03HLHKLOAF@K?$HMi?$AA@			; `string'
EXTRN	__imp_SetEvent:PROC
EXTRN	__imp_ConnectNamedPipe:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$winapi_ConnectNamedPipe DD imagerel winapi_ConnectNamedPipe
	DD	imagerel winapi_ConnectNamedPipe+110
	DD	imagerel $unwind$winapi_ConnectNamedPipe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$winapi_ConnectNamedPipe DD imagerel winapi_ConnectNamedPipe+110
	DD	imagerel winapi_ConnectNamedPipe+166
	DD	imagerel $chain$0$winapi_ConnectNamedPipe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$winapi_ConnectNamedPipe DD imagerel winapi_ConnectNamedPipe+166
	DD	imagerel winapi_ConnectNamedPipe+371
	DD	imagerel $chain$1$winapi_ConnectNamedPipe
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$winapi_ConnectNamedPipe DD 021H
	DD	imagerel winapi_ConnectNamedPipe
	DD	imagerel winapi_ConnectNamedPipe+110
	DD	imagerel $unwind$winapi_ConnectNamedPipe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$winapi_ConnectNamedPipe DD 020521H
	DD	0a6405H
	DD	imagerel winapi_ConnectNamedPipe
	DD	imagerel winapi_ConnectNamedPipe+110
	DD	imagerel $unwind$winapi_ConnectNamedPipe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_ConnectNamedPipe DD 040a01H
	DD	0b340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT ??_C@_03HLHKLOAF@K?$HMi?$AA@
CONST	SEGMENT
??_C@_03HLHKLOAF@K?$HMi?$AA@ DB 'K|i', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_winapi.c
CONST	ENDS
;	COMDAT winapi_ConnectNamedPipe
_TEXT	SEGMENT
hNamedPipe$ = 48
self$ = 80
args$ = 88
kwds$ = 96
use_overlapped$ = 104
winapi_ConnectNamedPipe PROC				; COMDAT

; 306  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	49 8b c0	 mov	 rax, r8
  0000d	4c 8b d2	 mov	 r10, rdx

; 307  :     HANDLE hNamedPipe;
; 308  :     int use_overlapped = 0;
; 309  :     BOOL success;
; 310  :     OverlappedObject *overlapped = NULL;
; 311  :     static char *kwlist[] = {"handle", "overlapped", NULL};
; 312  : 
; 313  :     if (!PyArg_ParseTupleAndKeywords(args, kwds,
; 314  :                                      F_HANDLE "|" F_BOOL, kwlist,
; 315  :                                      &hNamedPipe, &use_overlapped))

  00010	48 8d 4c 24 68	 lea	 rcx, QWORD PTR use_overlapped$[rsp]
  00015	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0001a	48 8d 4c 24 30	 lea	 rcx, QWORD PTR hNamedPipe$[rsp]
  0001f	33 ff		 xor	 edi, edi
  00021	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00026	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??winapi_ConnectNamedPipe@@9@9
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03HLHKLOAF@K?$HMi?$AA@
  00034	49 8b ca	 mov	 rcx, r10
  00037	48 8b d0	 mov	 rdx, rax
  0003a	89 7c 24 68	 mov	 DWORD PTR use_overlapped$[rsp], edi
  0003e	8b df		 mov	 ebx, edi
  00040	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00045	85 c0		 test	 eax, eax
  00047	75 0d		 jne	 SHORT $LN9@winapi_Con
$LN18@winapi_Con:

; 316  :         return NULL;

  00049	33 c0		 xor	 eax, eax

; 347  : }

  0004b	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00050	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
$LN9@winapi_Con:

; 317  : 
; 318  :     if (use_overlapped) {

  00056	39 5c 24 68	 cmp	 DWORD PTR use_overlapped$[rsp], ebx
  0005a	74 12		 je	 SHORT $LN7@winapi_Con

; 319  :         overlapped = new_overlapped(hNamedPipe);

  0005c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR hNamedPipe$[rsp]
  00061	e8 00 00 00 00	 call	 new_overlapped
  00066	48 8b d8	 mov	 rbx, rax

; 320  :         if (!overlapped)

  00069	48 85 c0	 test	 rax, rax

; 321  :             return NULL;

  0006c	74 db		 je	 SHORT $LN18@winapi_Con
$LN7@winapi_Con:
  0006e	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi

; 322  :     }
; 323  : 
; 324  :     Py_BEGIN_ALLOW_THREADS

  00073	e8 00 00 00 00	 call	 PyEval_SaveThread
  00078	48 8b f0	 mov	 rsi, rax

; 325  :     success = ConnectNamedPipe(hNamedPipe,
; 326  :                                overlapped ? &overlapped->overlapped : NULL);

  0007b	48 85 db	 test	 rbx, rbx
  0007e	74 04		 je	 SHORT $LN12@winapi_Con
  00080	48 8d 7b 60	 lea	 rdi, QWORD PTR [rbx+96]
$LN12@winapi_Con:
  00084	48 8b 4c 24 30	 mov	 rcx, QWORD PTR hNamedPipe$[rsp]
  00089	48 8b d7	 mov	 rdx, rdi
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ConnectNamedPipe

; 327  :     Py_END_ALLOW_THREADS

  00092	48 8b ce	 mov	 rcx, rsi
  00095	8b f8		 mov	 edi, eax
  00097	e8 00 00 00 00	 call	 PyEval_RestoreThread
  0009c	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]

; 328  : 
; 329  :     if (overlapped) {

  000a1	48 85 db	 test	 rbx, rbx
  000a4	74 60		 je	 SHORT $LN6@winapi_Con

; 330  :         int err = GetLastError();

  000a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  000ac	8b f8		 mov	 edi, eax

; 331  :         /* Overlapped ConnectNamedPipe never returns a success code */
; 332  :         assert(success == 0);
; 333  :         if (err == ERROR_IO_PENDING)

  000ae	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  000b3	75 18		 jne	 SHORT $LN5@winapi_Con

; 334  :             overlapped->pending = 1;

  000b5	c7 83 88 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rbx+136], 1

; 340  :         }
; 341  :         return (PyObject *) overlapped;

  000bf	48 8b c3	 mov	 rax, rbx

; 347  : }

  000c2	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  000c7	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000cb	5f		 pop	 rdi
  000cc	c3		 ret	 0
$LN5@winapi_Con:

; 335  :         else if (err == ERROR_PIPE_CONNECTED)

  000cd	3d 17 02 00 00	 cmp	 eax, 535		; 00000217H
  000d2	75 18		 jne	 SHORT $LN3@winapi_Con

; 336  :             SetEvent(overlapped->overlapped.hEvent);

  000d4	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  000d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent

; 340  :         }
; 341  :         return (PyObject *) overlapped;

  000de	48 8b c3	 mov	 rax, rbx

; 347  : }

  000e1	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  000e6	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000ea	5f		 pop	 rdi
  000eb	c3		 ret	 0
$LN3@winapi_Con:

; 337  :         else {
; 338  :             Py_DECREF(overlapped);

  000ec	48 8b cb	 mov	 rcx, rbx
  000ef	e8 00 00 00 00	 call	 _Py_DecRef

; 339  :             return PyErr_SetFromWindowsErr(err);

  000f4	8b cf		 mov	 ecx, edi
  000f6	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 347  : }

  000fb	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00100	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00104	5f		 pop	 rdi
  00105	c3		 ret	 0
$LN6@winapi_Con:

; 342  :     }
; 343  :     if (!success)

  00106	85 ff		 test	 edi, edi
  00108	75 12		 jne	 SHORT $LN1@winapi_Con

; 344  :         return PyErr_SetFromWindowsErr(0);

  0010a	33 c9		 xor	 ecx, ecx
  0010c	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 347  : }

  00111	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00116	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0011a	5f		 pop	 rdi
  0011b	c3		 ret	 0
$LN1@winapi_Con:

; 345  : 
; 346  :     Py_RETURN_NONE;

  0011c	e8 00 00 00 00	 call	 _Py_PXCTX
  00121	85 c0		 test	 eax, eax
  00123	75 3c		 jne	 SHORT $LN15@winapi_Con
  00125	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0012c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00133	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0013a	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00140	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00148	e8 00 00 00 00	 call	 _PyParallel_Guard
  0014d	85 c0		 test	 eax, eax
  0014f	75 09		 jne	 SHORT $LN14@winapi_Con
  00151	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00158	74 07		 je	 SHORT $LN15@winapi_Con
$LN14@winapi_Con:
  0015a	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN15@winapi_Con:
  00161	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 347  : }

  00168	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  0016d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00171	5f		 pop	 rdi
  00172	c3		 ret	 0
winapi_ConnectNamedPipe ENDP
_TEXT	ENDS
PUBLIC	??_C@_01KNKLHLMO@K?$AA@				; `string'
PUBLIC	??_C@_07MHILPKDG@skkKkkK?$AA@			; `string'
EXTRN	__imp_CreateFileA:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_CreateFile DD imagerel winapi_CreateFile
	DD	imagerel winapi_CreateFile+84
	DD	imagerel $unwind$winapi_CreateFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$winapi_CreateFile DD imagerel winapi_CreateFile+84
	DD	imagerel winapi_CreateFile+187
	DD	imagerel $chain$1$winapi_CreateFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$winapi_CreateFile DD imagerel winapi_CreateFile+187
	DD	imagerel winapi_CreateFile+204
	DD	imagerel $chain$2$winapi_CreateFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$winapi_CreateFile DD imagerel winapi_CreateFile+204
	DD	imagerel winapi_CreateFile+229
	DD	imagerel $chain$4$winapi_CreateFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$winapi_CreateFile DD 020021H
	DD	0e7400H
	DD	imagerel winapi_CreateFile
	DD	imagerel winapi_CreateFile+84
	DD	imagerel $unwind$winapi_CreateFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$winapi_CreateFile DD 020021H
	DD	0e7400H
	DD	imagerel winapi_CreateFile
	DD	imagerel winapi_CreateFile+84
	DD	imagerel $unwind$winapi_CreateFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$winapi_CreateFile DD 040d21H
	DD	0e740dH
	DD	0103408H
	DD	imagerel winapi_CreateFile
	DD	imagerel winapi_CreateFile+84
	DD	imagerel $unwind$winapi_CreateFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_CreateFile DD 010701H
	DD	0e207H
xdata	ENDS
;	COMDAT ??_C@_01KNKLHLMO@K?$AA@
CONST	SEGMENT
??_C@_01KNKLHLMO@K?$AA@ DB 'K', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MHILPKDG@skkKkkK?$AA@
CONST	SEGMENT
??_C@_07MHILPKDG@skkKkkK?$AA@ DB 'skkKkkK', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_CreateFile
_TEXT	SEGMENT
dwShareMode$ = 80
dwDesiredAccess$ = 84
hTemplateFile$ = 88
lpSecurityAttributes$ = 96
lpFileName$ = 104
self$ = 128
args$ = 136
dwFlagsAndAttributes$ = 144
dwCreationDisposition$ = 152
winapi_CreateFile PROC					; COMDAT

; 351  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 352  :     LPCTSTR lpFileName;
; 353  :     DWORD dwDesiredAccess;
; 354  :     DWORD dwShareMode;
; 355  :     LPSECURITY_ATTRIBUTES lpSecurityAttributes;
; 356  :     DWORD dwCreationDisposition;
; 357  :     DWORD dwFlagsAndAttributes;
; 358  :     HANDLE hTemplateFile;
; 359  :     HANDLE handle;
; 360  : 
; 361  :     if (!PyArg_ParseTuple(args, "s" F_DWORD F_DWORD F_POINTER
; 362  :                           F_DWORD F_DWORD F_HANDLE,
; 363  :                           &lpFileName, &dwDesiredAccess, &dwShareMode,
; 364  :                           &lpSecurityAttributes, &dwCreationDisposition,
; 365  :                           &dwFlagsAndAttributes, &hTemplateFile))

  00007	49 8d 4b e0	 lea	 rcx, QWORD PTR [r11-32]
  0000b	48 8b c2	 mov	 rax, rdx
  0000e	4d 8d 4b dc	 lea	 r9, QWORD PTR [r11-36]
  00012	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  00016	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0001a	4d 8d 43 f0	 lea	 r8, QWORD PTR [r11-16]
  0001e	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  00022	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07MHILPKDG@skkKkkK?$AA@
  0002d	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  00031	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  00035	49 89 4b b0	 mov	 QWORD PTR [r11-80], rcx
  00039	49 8d 4b d8	 lea	 rcx, QWORD PTR [r11-40]
  0003d	49 89 4b a8	 mov	 QWORD PTR [r11-88], rcx
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00049	85 c0		 test	 eax, eax
  0004b	75 07		 jne	 SHORT $LN2@winapi_Cre

; 366  :         return NULL;

  0004d	33 c0		 xor	 eax, eax

; 379  : }

  0004f	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00053	c3		 ret	 0
$LN2@winapi_Cre:
  00054	48 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbx
  0005c	48 89 7c 24 70	 mov	 QWORD PTR [rsp+112], rdi

; 367  : 
; 368  :     Py_BEGIN_ALLOW_THREADS

  00061	e8 00 00 00 00	 call	 PyEval_SaveThread

; 369  :     handle = CreateFile(lpFileName, dwDesiredAccess,
; 370  :                         dwShareMode, lpSecurityAttributes,
; 371  :                         dwCreationDisposition,
; 372  :                         dwFlagsAndAttributes, hTemplateFile);

  00066	48 8b 4c 24 58	 mov	 rcx, QWORD PTR hTemplateFile$[rsp]
  0006b	4c 8b 4c 24 60	 mov	 r9, QWORD PTR lpSecurityAttributes$[rsp]
  00070	44 8b 44 24 50	 mov	 r8d, DWORD PTR dwShareMode$[rsp]
  00075	8b 54 24 54	 mov	 edx, DWORD PTR dwDesiredAccess$[rsp]
  00079	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0007e	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR dwFlagsAndAttributes$[rsp]
  00085	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00089	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR dwCreationDisposition$[rsp]
  00090	48 8b d8	 mov	 rbx, rax
  00093	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00097	48 8b 4c 24 68	 mov	 rcx, QWORD PTR lpFileName$[rsp]
  0009c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA

; 373  :     Py_END_ALLOW_THREADS

  000a2	48 8b cb	 mov	 rcx, rbx
  000a5	48 8b f8	 mov	 rdi, rax
  000a8	e8 00 00 00 00	 call	 PyEval_RestoreThread
  000ad	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]

; 374  : 
; 375  :     if (handle == INVALID_HANDLE_VALUE)

  000b5	48 83 ff ff	 cmp	 rdi, -1
  000b9	75 11		 jne	 SHORT $LN1@winapi_Cre

; 376  :         return PyErr_SetFromWindowsErr(0);

  000bb	33 c9		 xor	 ecx, ecx
  000bd	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  000c2	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]

; 379  : }

  000c7	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000cb	c3		 ret	 0
$LN1@winapi_Cre:

; 377  : 
; 378  :     return Py_BuildValue(F_HANDLE, handle);

  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01KNKLHLMO@K?$AA@
  000d3	48 8b d7	 mov	 rdx, rdi
  000d6	e8 00 00 00 00	 call	 Py_BuildValue
  000db	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]

; 379  : }

  000e0	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000e4	c3		 ret	 0
winapi_CreateFile ENDP
_TEXT	ENDS
PUBLIC	??_C@_08ODBBMLHL@skkkkkkK?$AA@			; `string'
EXTRN	__imp_CreateNamedPipeA:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_CreateNamedPipe DD imagerel winapi_CreateNamedPipe
	DD	imagerel winapi_CreateNamedPipe+92
	DD	imagerel $unwind$winapi_CreateNamedPipe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$winapi_CreateNamedPipe DD imagerel winapi_CreateNamedPipe+92
	DD	imagerel winapi_CreateNamedPipe+203
	DD	imagerel $chain$1$winapi_CreateNamedPipe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$winapi_CreateNamedPipe DD imagerel winapi_CreateNamedPipe+203
	DD	imagerel winapi_CreateNamedPipe+220
	DD	imagerel $chain$2$winapi_CreateNamedPipe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$winapi_CreateNamedPipe DD imagerel winapi_CreateNamedPipe+220
	DD	imagerel winapi_CreateNamedPipe+245
	DD	imagerel $chain$4$winapi_CreateNamedPipe
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$winapi_CreateNamedPipe DD 020021H
	DD	0e7400H
	DD	imagerel winapi_CreateNamedPipe
	DD	imagerel winapi_CreateNamedPipe+92
	DD	imagerel $unwind$winapi_CreateNamedPipe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$winapi_CreateNamedPipe DD 020021H
	DD	0e7400H
	DD	imagerel winapi_CreateNamedPipe
	DD	imagerel winapi_CreateNamedPipe+92
	DD	imagerel $unwind$winapi_CreateNamedPipe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$winapi_CreateNamedPipe DD 040d21H
	DD	0e740dH
	DD	0103408H
	DD	imagerel winapi_CreateNamedPipe
	DD	imagerel winapi_CreateNamedPipe+92
	DD	imagerel $unwind$winapi_CreateNamedPipe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_CreateNamedPipe DD 010701H
	DD	0e207H
xdata	ENDS
;	COMDAT ??_C@_08ODBBMLHL@skkkkkkK?$AA@
CONST	SEGMENT
??_C@_08ODBBMLHL@skkkkkkK?$AA@ DB 'skkkkkkK', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_CreateNamedPipe
_TEXT	SEGMENT
nOutBufferSize$ = 80
nMaxInstances$ = 84
dwPipeMode$ = 88
dwOpenMode$ = 92
lpSecurityAttributes$ = 96
lpName$ = 104
self$ = 128
args$ = 136
nDefaultTimeOut$ = 144
nInBufferSize$ = 152
winapi_CreateNamedPipe PROC				; COMDAT

; 383  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 384  :     LPCTSTR lpName;
; 385  :     DWORD dwOpenMode;
; 386  :     DWORD dwPipeMode;
; 387  :     DWORD nMaxInstances;
; 388  :     DWORD nOutBufferSize;
; 389  :     DWORD nInBufferSize;
; 390  :     DWORD nDefaultTimeOut;
; 391  :     LPSECURITY_ATTRIBUTES lpSecurityAttributes;
; 392  :     HANDLE handle;
; 393  : 
; 394  :     if (!PyArg_ParseTuple(args, "s" F_DWORD F_DWORD F_DWORD
; 395  :                           F_DWORD F_DWORD F_DWORD F_POINTER,
; 396  :                           &lpName, &dwOpenMode, &dwPipeMode,
; 397  :                           &nMaxInstances, &nOutBufferSize,
; 398  :                           &nInBufferSize, &nDefaultTimeOut,
; 399  :                           &lpSecurityAttributes))

  00007	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  0000b	48 8b c2	 mov	 rax, rdx
  0000e	4d 8d 4b e4	 lea	 r9, QWORD PTR [r11-28]
  00012	49 89 4b d0	 mov	 QWORD PTR [r11-48], rcx
  00016	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0001a	4d 8d 43 f0	 lea	 r8, QWORD PTR [r11-16]
  0001e	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  00022	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08ODBBMLHL@skkkkkkK?$AA@
  0002d	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  00031	49 8d 4b d8	 lea	 rcx, QWORD PTR [r11-40]
  00035	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  00039	49 8d 4b dc	 lea	 rcx, QWORD PTR [r11-36]
  0003d	49 89 4b b0	 mov	 QWORD PTR [r11-80], rcx
  00041	49 8d 4b e0	 lea	 rcx, QWORD PTR [r11-32]
  00045	49 89 4b a8	 mov	 QWORD PTR [r11-88], rcx
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00051	85 c0		 test	 eax, eax
  00053	75 07		 jne	 SHORT $LN2@winapi_Cre@2

; 400  :         return NULL;

  00055	33 c0		 xor	 eax, eax

; 413  : }

  00057	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0005b	c3		 ret	 0
$LN2@winapi_Cre@2:
  0005c	48 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbx
  00064	48 89 7c 24 70	 mov	 QWORD PTR [rsp+112], rdi

; 401  : 
; 402  :     Py_BEGIN_ALLOW_THREADS

  00069	e8 00 00 00 00	 call	 PyEval_SaveThread

; 403  :     handle = CreateNamedPipe(lpName, dwOpenMode, dwPipeMode,
; 404  :                              nMaxInstances, nOutBufferSize,
; 405  :                              nInBufferSize, nDefaultTimeOut,
; 406  :                              lpSecurityAttributes);

  0006e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR lpSecurityAttributes$[rsp]
  00073	44 8b 4c 24 54	 mov	 r9d, DWORD PTR nMaxInstances$[rsp]
  00078	44 8b 44 24 58	 mov	 r8d, DWORD PTR dwPipeMode$[rsp]
  0007d	8b 54 24 5c	 mov	 edx, DWORD PTR dwOpenMode$[rsp]
  00081	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00086	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR nDefaultTimeOut$[rsp]
  0008d	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  00091	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR nInBufferSize$[rsp]
  00098	48 8b d8	 mov	 rbx, rax
  0009b	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  0009f	8b 4c 24 50	 mov	 ecx, DWORD PTR nOutBufferSize$[rsp]
  000a3	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000a7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR lpName$[rsp]
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateNamedPipeA

; 407  :     Py_END_ALLOW_THREADS

  000b2	48 8b cb	 mov	 rcx, rbx
  000b5	48 8b f8	 mov	 rdi, rax
  000b8	e8 00 00 00 00	 call	 PyEval_RestoreThread
  000bd	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]

; 408  : 
; 409  :     if (handle == INVALID_HANDLE_VALUE)

  000c5	48 83 ff ff	 cmp	 rdi, -1
  000c9	75 11		 jne	 SHORT $LN1@winapi_Cre@2

; 410  :         return PyErr_SetFromWindowsErr(0);

  000cb	33 c9		 xor	 ecx, ecx
  000cd	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  000d2	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]

; 413  : }

  000d7	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000db	c3		 ret	 0
$LN1@winapi_Cre@2:

; 411  : 
; 412  :     return Py_BuildValue(F_HANDLE, handle);

  000dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01KNKLHLMO@K?$AA@
  000e3	48 8b d7	 mov	 rdx, rdi
  000e6	e8 00 00 00 00	 call	 Py_BuildValue
  000eb	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]

; 413  : }

  000f0	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000f4	c3		 ret	 0
winapi_CreateNamedPipe ENDP
_TEXT	ENDS
PUBLIC	??_C@_02BEEAOEKM@NN?$AA@			; `string'
PUBLIC	??_C@_0O@OLLGNKAD@Ok?3CreatePipe?$AA@		; `string'
EXTRN	PyLong_FromUnsignedLongLong:PROC
EXTRN	__imp_CreatePipe:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_CreatePipe DD imagerel winapi_CreatePipe
	DD	imagerel winapi_CreatePipe+40
	DD	imagerel $unwind$winapi_CreatePipe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$winapi_CreatePipe DD imagerel winapi_CreatePipe+40
	DD	imagerel winapi_CreatePipe+45
	DD	imagerel $chain$0$winapi_CreatePipe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$winapi_CreatePipe DD imagerel winapi_CreatePipe+45
	DD	imagerel winapi_CreatePipe+101
	DD	imagerel $chain$1$winapi_CreatePipe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$winapi_CreatePipe DD imagerel winapi_CreatePipe+101
	DD	imagerel winapi_CreatePipe+124
	DD	imagerel $chain$2$winapi_CreatePipe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$winapi_CreatePipe DD imagerel winapi_CreatePipe+124
	DD	imagerel winapi_CreatePipe+175
	DD	imagerel $chain$4$winapi_CreatePipe
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$winapi_CreatePipe DD 020021H
	DD	083400H
	DD	imagerel winapi_CreatePipe
	DD	imagerel winapi_CreatePipe+40
	DD	imagerel $unwind$winapi_CreatePipe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$winapi_CreatePipe DD 021H
	DD	imagerel winapi_CreatePipe+40
	DD	imagerel winapi_CreatePipe+45
	DD	imagerel $chain$0$winapi_CreatePipe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$winapi_CreatePipe DD 020521H
	DD	067405H
	DD	imagerel winapi_CreatePipe+40
	DD	imagerel winapi_CreatePipe+45
	DD	imagerel $chain$0$winapi_CreatePipe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$winapi_CreatePipe DD 020521H
	DD	083405H
	DD	imagerel winapi_CreatePipe
	DD	imagerel winapi_CreatePipe+40
	DD	imagerel $unwind$winapi_CreatePipe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_CreatePipe DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_02BEEAOEKM@NN?$AA@
CONST	SEGMENT
??_C@_02BEEAOEKM@NN?$AA@ DB 'NN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OLLGNKAD@Ok?3CreatePipe?$AA@
CONST	SEGMENT
??_C@_0O@OLLGNKAD@Ok?3CreatePipe?$AA@ DB 'Ok:CreatePipe', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_CreatePipe
_TEXT	SEGMENT
read_pipe$ = 32
pipe_attributes$ = 40
self$ = 64
args$ = 72
size$ = 80
write_pipe$ = 88
winapi_CreatePipe PROC					; COMDAT

; 425  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 426  :     HANDLE read_pipe;
; 427  :     HANDLE write_pipe;
; 428  :     BOOL result;
; 429  : 
; 430  :     PyObject* pipe_attributes; /* ignored */
; 431  :     DWORD size;
; 432  : 
; 433  :     if (! PyArg_ParseTuple(args, "O" F_DWORD ":CreatePipe",
; 434  :                            &pipe_attributes, &size))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 50	 lea	 r9, QWORD PTR size$[rsp]
  0000c	4c 8d 44 24 28	 lea	 r8, QWORD PTR pipe_attributes$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@OLLGNKAD@Ok?3CreatePipe?$AA@
  00018	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001d	85 c0		 test	 eax, eax
  0001f	75 07		 jne	 SHORT $LN2@winapi_Cre@3

; 435  :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 446  : }

  00023	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00027	c3		 ret	 0
$LN2@winapi_Cre@3:
  00028	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0002d	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi

; 436  : 
; 437  :     Py_BEGIN_ALLOW_THREADS

  00032	e8 00 00 00 00	 call	 PyEval_SaveThread

; 438  :     result = CreatePipe(&read_pipe, &write_pipe, NULL, size);

  00037	44 8b 4c 24 50	 mov	 r9d, DWORD PTR size$[rsp]
  0003c	48 8d 54 24 58	 lea	 rdx, QWORD PTR write_pipe$[rsp]
  00041	48 8d 4c 24 20	 lea	 rcx, QWORD PTR read_pipe$[rsp]
  00046	45 33 c0	 xor	 r8d, r8d
  00049	48 8b f8	 mov	 rdi, rax
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreatePipe

; 439  :     Py_END_ALLOW_THREADS

  00052	48 8b cf	 mov	 rcx, rdi
  00055	8b d8		 mov	 ebx, eax
  00057	e8 00 00 00 00	 call	 PyEval_RestoreThread
  0005c	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 440  : 
; 441  :     if (! result)

  00061	85 db		 test	 ebx, ebx
  00063	75 17		 jne	 SHORT $LN1@winapi_Cre@3

; 442  :         return PyErr_SetFromWindowsErr(GetLastError());

  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0006b	8b c8		 mov	 ecx, eax
  0006d	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00072	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 446  : }

  00077	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007b	c3		 ret	 0
$LN1@winapi_Cre@3:

; 443  : 
; 444  :     return Py_BuildValue(
; 445  :         "NN", HANDLE_TO_PYNUM(read_pipe), HANDLE_TO_PYNUM(write_pipe));

  0007c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR write_pipe$[rsp]
  00081	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong
  00086	48 8b 4c 24 20	 mov	 rcx, QWORD PTR read_pipe$[rsp]
  0008b	48 8b d8	 mov	 rbx, rax
  0008e	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02BEEAOEKM@NN?$AA@
  0009a	48 8b d0	 mov	 rdx, rax
  0009d	4c 8b c3	 mov	 r8, rbx
  000a0	e8 00 00 00 00	 call	 Py_BuildValue
  000a5	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 446  : }

  000aa	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ae	c3		 ret	 0
winapi_CreatePipe ENDP
_TEXT	ENDS
EXTRN	PyLong_AsUnsignedLong:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyObject_GetAttrString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$getulong DD imagerel getulong
	DD	imagerel getulong+68
	DD	imagerel $unwind$getulong
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getulong DD 042801H
	DD	063428H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT getulong
_TEXT	SEGMENT
obj$ = 48
name$ = 56
getulong PROC						; COMDAT

; 452  : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 453  :     PyObject* value;
; 454  :     unsigned long ret;
; 455  : 
; 456  :     value = PyObject_GetAttrString(obj, name);

  00006	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0000b	48 8b f8	 mov	 rdi, rax

; 457  :     if (! value) {

  0000e	48 85 c0	 test	 rax, rax
  00011	75 0d		 jne	 SHORT $LN1@getulong

; 458  :         PyErr_Clear(); /* FIXME: propagate error? */

  00013	e8 00 00 00 00	 call	 PyErr_Clear

; 459  :         return 0;

  00018	33 c0		 xor	 eax, eax

; 464  : }

  0001a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001e	5f		 pop	 rdi
  0001f	c3		 ret	 0
$LN1@getulong:

; 460  :     }
; 461  :     ret = PyLong_AsUnsignedLong(value);

  00020	48 8b c8	 mov	 rcx, rax
  00023	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00028	e8 00 00 00 00	 call	 PyLong_AsUnsignedLong

; 462  :     Py_DECREF(value);

  0002d	48 8b cf	 mov	 rcx, rdi
  00030	8b d8		 mov	 ebx, eax
  00032	e8 00 00 00 00	 call	 _Py_DecRef

; 463  :     return ret;

  00037	8b c3		 mov	 eax, ebx
  00039	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 464  : }

  0003e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00042	5f		 pop	 rdi
  00043	c3		 ret	 0
getulong ENDP
_TEXT	ENDS
EXTRN	PyLong_AsUnsignedLongLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$gethandle DD imagerel gethandle
	DD	imagerel gethandle+86
	DD	imagerel $unwind$gethandle
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gethandle DD 042c01H
	DD	06742cH
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT gethandle
_TEXT	SEGMENT
obj$ = 48
name$ = 56
gethandle PROC						; COMDAT

; 468  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 469  :     PyObject* value;
; 470  :     HANDLE ret;
; 471  : 
; 472  :     value = PyObject_GetAttrString(obj, name);

  00006	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0000b	48 8b d8	 mov	 rbx, rax

; 473  :     if (! value) {

  0000e	48 85 c0	 test	 rax, rax
  00011	75 0d		 jne	 SHORT $LN3@gethandle

; 474  :         PyErr_Clear(); /* FIXME: propagate error? */

  00013	e8 00 00 00 00	 call	 PyErr_Clear

; 475  :         return NULL;

  00018	33 c0		 xor	 eax, eax

; 483  : }

  0001a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001e	5b		 pop	 rbx
  0001f	c3		 ret	 0
$LN3@gethandle:

; 476  :     }
; 477  :     if (value == Py_None)

  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00027	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0002c	48 3b d8	 cmp	 rbx, rax
  0002f	75 04		 jne	 SHORT $LN2@gethandle

; 478  :         ret = NULL;

  00031	33 ff		 xor	 edi, edi

; 479  :     else

  00033	eb 0b		 jmp	 SHORT $LN1@gethandle
$LN2@gethandle:

; 480  :         ret = PYNUM_TO_HANDLE(value);

  00035	48 8b cb	 mov	 rcx, rbx
  00038	e8 00 00 00 00	 call	 PyLong_AsUnsignedLongLong
  0003d	48 8b f8	 mov	 rdi, rax
$LN1@gethandle:

; 481  :     Py_DECREF(value);

  00040	48 8b cb	 mov	 rcx, rbx
  00043	e8 00 00 00 00	 call	 _Py_DecRef

; 482  :     return ret;

  00048	48 8b c7	 mov	 rax, rdi
  0004b	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 483  : }

  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5b		 pop	 rbx
  00055	c3		 ret	 0
gethandle ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@PGPLICDA@environment?5can?5only?5contain?5str@ ; `string'
PUBLIC	??_C@_0CH@FHCLFMNB@environment?5must?5be?5dictionary?5o@ ; `string'
EXTRN	PyUnicode_FromKindAndData:PROC
EXTRN	PyMem_Free:PROC
EXTRN	PyUnicode_AsUCS4:PROC
EXTRN	PyMem_Malloc:PROC
EXTRN	PyMapping_Values:PROC
EXTRN	PyMapping_Keys:PROC
EXTRN	PyMapping_Size:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyMapping_Check:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$getenvironment DD imagerel getenvironment
	DD	imagerel getenvironment+1018
	DD	imagerel $unwind$getenvironment
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getenvironment DD 0f5501H
	DD	06f455H
	DD	07e450H
	DD	08c448H
	DD	0f7443H
	DD	0e643eH
	DD	0c5439H
	DD	0d0048208H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_0CF@PGPLICDA@environment?5can?5only?5contain?5str@
CONST	SEGMENT
??_C@_0CF@PGPLICDA@environment?5can?5only?5contain?5str@ DB 'environment '
	DB	'can only contain strings', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FHCLFMNB@environment?5must?5be?5dictionary?5o@
CONST	SEGMENT
??_C@_0CH@FHCLFMNB@environment?5must?5be?5dictionary?5o@ DB 'environment '
	DB	'must be dictionary or None', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_winapi.c
CONST	ENDS
;	COMDAT getenvironment
_TEXT	SEGMENT
environment$ = 96
key$1$ = 104
getenvironment PROC					; COMDAT

; 487  : {

  00000	40 53		 push	 rbx
  00002	41 55		 push	 r13
  00004	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00008	48 8b d9	 mov	 rbx, rcx

; 488  :     Py_ssize_t i, envsize, totalsize;
; 489  :     Py_UCS4 *buffer = NULL, *p, *end;

  0000b	45 33 ed	 xor	 r13d, r13d

; 490  :     PyObject *keys, *values, *res;
; 491  : 
; 492  :     /* convert environment dictionary to windows environment string */
; 493  :     if (! PyMapping_Check(environment)) {

  0000e	e8 00 00 00 00	 call	 PyMapping_Check
  00013	85 c0		 test	 eax, eax
  00015	75 1d		 jne	 SHORT $LN30@getenviron

; 494  :         PyErr_SetString(
; 495  :             PyExc_TypeError, "environment must be dictionary or None");

  00017	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@FHCLFMNB@environment?5must?5be?5dictionary?5o@
  00025	e8 00 00 00 00	 call	 PyErr_SetString

; 496  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 555  : }

  0002c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00030	41 5d		 pop	 r13
  00032	5b		 pop	 rbx
  00033	c3		 ret	 0
$LN30@getenviron:
  00034	48 89 6c 24 60	 mov	 QWORD PTR [rsp+96], rbp
  00039	48 89 74 24 70	 mov	 QWORD PTR [rsp+112], rsi
  0003e	48 89 7c 24 78	 mov	 QWORD PTR [rsp+120], rdi
  00043	4c 89 64 24 40	 mov	 QWORD PTR [rsp+64], r12

; 497  :     }
; 498  : 
; 499  :     envsize = PyMapping_Length(environment);

  00048	48 8b cb	 mov	 rcx, rbx
  0004b	4c 89 74 24 38	 mov	 QWORD PTR [rsp+56], r14
  00050	4c 89 7c 24 30	 mov	 QWORD PTR [rsp+48], r15
  00055	e8 00 00 00 00	 call	 PyMapping_Size

; 500  : 
; 501  :     keys = PyMapping_Keys(environment);

  0005a	48 8b cb	 mov	 rcx, rbx
  0005d	4c 8b e0	 mov	 r12, rax
  00060	e8 00 00 00 00	 call	 PyMapping_Keys

; 502  :     values = PyMapping_Values(environment);

  00065	48 8b cb	 mov	 rcx, rbx
  00068	48 8b f0	 mov	 rsi, rax
  0006b	e8 00 00 00 00	 call	 PyMapping_Values
  00070	48 8b f8	 mov	 rdi, rax

; 503  :     if (!keys || !values)

  00073	48 85 f6	 test	 rsi, rsi
  00076	0f 84 b8 01 00
	00		 je	 $error$120797
  0007c	48 85 c0	 test	 rax, rax
  0007f	0f 84 af 01 00
	00		 je	 $error$120797

; 504  :         goto error;
; 505  : 
; 506  :     totalsize = 1; /* trailing null character */
; 507  :     for (i = 0; i < envsize; i++) {

  00085	33 d2		 xor	 edx, edx
  00087	44 8d 52 01	 lea	 r10d, QWORD PTR [rdx+1]
  0008b	4d 85 e4	 test	 r12, r12
  0008e	7e 58		 jle	 SHORT $LN25@getenviron
  00090	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00094	4c 8b 5e 70	 mov	 r11, QWORD PTR [rsi+112]
  00098	4c 2b d9	 sub	 r11, rcx
  0009b	0f 1f 44 00 00	 npad	 5
$LL27@getenviron:

; 508  :         PyObject* key = PyList_GET_ITEM(keys, i);

  000a0	4d 8b 0c 0b	 mov	 r9, QWORD PTR [r11+rcx]

; 509  :         PyObject* value = PyList_GET_ITEM(values, i);

  000a4	4c 8b 01	 mov	 r8, QWORD PTR [rcx]

; 510  : 
; 511  :         if (! PyUnicode_Check(key) || ! PyUnicode_Check(value)) {

  000a7	49 8b 41 58	 mov	 rax, QWORD PTR [r9+88]
  000ab	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  000b5	0f 84 66 01 00
	00		 je	 $LN79@getenviron
  000bb	49 8b 40 58	 mov	 rax, QWORD PTR [r8+88]
  000bf	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  000c9	0f 84 52 01 00
	00		 je	 $LN79@getenviron

; 514  :             goto error;
; 515  :         }
; 516  :         totalsize += PyUnicode_GET_LENGTH(key) + 1;    /* +1 for '=' */
; 517  :         totalsize += PyUnicode_GET_LENGTH(value) + 1;  /* +1 for '\0' */

  000cf	49 8b 40 60	 mov	 rax, QWORD PTR [r8+96]
  000d3	48 ff c2	 inc	 rdx
  000d6	48 83 c1 08	 add	 rcx, 8
  000da	49 03 41 60	 add	 rax, QWORD PTR [r9+96]
  000de	4d 8d 54 02 02	 lea	 r10, QWORD PTR [r10+rax+2]
  000e3	49 3b d4	 cmp	 rdx, r12
  000e6	7c b8		 jl	 SHORT $LL27@getenviron
$LN25@getenviron:

; 518  :     }
; 519  : 
; 520  :     buffer = PyMem_Malloc(totalsize * sizeof(Py_UCS4));

  000e8	4a 8d 2c 95 00
	00 00 00	 lea	 rbp, QWORD PTR [r10*4]
  000f0	48 8b cd	 mov	 rcx, rbp
  000f3	e8 00 00 00 00	 call	 PyMem_Malloc
  000f8	4c 8b e8	 mov	 r13, rax

; 521  :     if (! buffer)

  000fb	48 85 c0	 test	 rax, rax
  000fe	0f 84 30 01 00
	00		 je	 $error$120797

; 522  :         goto error;
; 523  :     p = buffer;
; 524  :     end = buffer + totalsize;

  00104	4c 8d 3c 28	 lea	 r15, QWORD PTR [rax+rbp]

; 525  : 
; 526  :     for (i = 0; i < envsize; i++) {

  00108	33 ed		 xor	 ebp, ebp
  0010a	48 8b d8	 mov	 rbx, rax
  0010d	4d 85 e4	 test	 r12, r12
  00110	0f 8e 95 00 00
	00		 jle	 $LN19@getenviron
  00116	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL21@getenviron:

; 527  :         PyObject* key = PyList_GET_ITEM(keys, i);

  00120	48 8b 46 70	 mov	 rax, QWORD PTR [rsi+112]

; 528  :         PyObject* value = PyList_GET_ITEM(values, i);
; 529  :         if (!PyUnicode_AsUCS4(key, p, end - p, 0))

  00124	4d 8b c7	 mov	 r8, r15
  00127	45 33 c9	 xor	 r9d, r9d
  0012a	48 8b 0c e8	 mov	 rcx, QWORD PTR [rax+rbp*8]
  0012e	48 8b 47 70	 mov	 rax, QWORD PTR [rdi+112]
  00132	4c 2b c3	 sub	 r8, rbx
  00135	4c 8b 34 e8	 mov	 r14, QWORD PTR [rax+rbp*8]
  00139	49 c1 f8 02	 sar	 r8, 2
  0013d	48 8b d3	 mov	 rdx, rbx
  00140	48 89 4c 24 68	 mov	 QWORD PTR key$1$[rsp], rcx
  00145	e8 00 00 00 00	 call	 PyUnicode_AsUCS4
  0014a	48 85 c0	 test	 rax, rax
  0014d	0f 84 e1 00 00
	00		 je	 $error$120797

; 530  :             goto error;
; 531  :         p += PyUnicode_GET_LENGTH(key);

  00153	48 8b 44 24 68	 mov	 rax, QWORD PTR key$1$[rsp]

; 532  :         *p++ = '=';
; 533  :         if (!PyUnicode_AsUCS4(value, p, end - p, 0))

  00158	4d 8b c7	 mov	 r8, r15
  0015b	45 33 c9	 xor	 r9d, r9d
  0015e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00162	c7 04 83 3d 00
	00 00		 mov	 DWORD PTR [rbx+rax*4], 61 ; 0000003dH
  00169	49 8b ce	 mov	 rcx, r14
  0016c	48 8d 1c 83	 lea	 rbx, QWORD PTR [rbx+rax*4]
  00170	48 83 c3 04	 add	 rbx, 4
  00174	4c 2b c3	 sub	 r8, rbx
  00177	48 8b d3	 mov	 rdx, rbx
  0017a	49 c1 f8 02	 sar	 r8, 2
  0017e	e8 00 00 00 00	 call	 PyUnicode_AsUCS4
  00183	48 85 c0	 test	 rax, rax
  00186	0f 84 a8 00 00
	00		 je	 $error$120797

; 534  :             goto error;
; 535  :         p += PyUnicode_GET_LENGTH(value);

  0018c	49 8b 46 60	 mov	 rax, QWORD PTR [r14+96]
  00190	48 ff c5	 inc	 rbp

; 536  :         *p++ = '\0';

  00193	c7 04 83 00 00
	00 00		 mov	 DWORD PTR [rbx+rax*4], 0
  0019a	48 8d 1c 83	 lea	 rbx, QWORD PTR [rbx+rax*4]
  0019e	48 83 c3 04	 add	 rbx, 4
  001a2	49 3b ec	 cmp	 rbp, r12
  001a5	0f 8c 75 ff ff
	ff		 jl	 $LL21@getenviron
$LN19@getenviron:

; 537  :     }
; 538  : 
; 539  :     /* add trailing null byte */
; 540  :     *p++ = '\0';

  001ab	c7 03 00 00 00
	00		 mov	 DWORD PTR [rbx], 0
  001b1	48 83 c3 04	 add	 rbx, 4

; 541  :     assert(p == end);
; 542  : 
; 543  :     Py_XDECREF(keys);

  001b5	e8 00 00 00 00	 call	 _Py_PXCTX
  001ba	85 c0		 test	 eax, eax
  001bc	0f 85 03 01 00
	00		 jne	 $LN15@getenviron
  001c2	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  001c6	a8 20		 test	 al, 32			; 00000020H
  001c8	0f 85 ef 00 00
	00		 jne	 $LN37@getenviron
  001ce	84 c0		 test	 al, al
  001d0	0f 88 e7 00 00
	00		 js	 $LN37@getenviron
  001d6	a8 02		 test	 al, 2
  001d8	0f 85 e7 00 00
	00		 jne	 $LN15@getenviron
  001de	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  001e2	0f 85 dd 00 00
	00		 jne	 $LN15@getenviron
  001e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001f6	4c 8b ce	 mov	 r9, rsi
  001f9	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001ff	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00207	e8 00 00 00 00	 call	 _PyParallel_Guard
  0020c	48 8b ce	 mov	 rcx, rsi
  0020f	85 c0		 test	 eax, eax
  00211	0f 84 9a 00 00
	00		 je	 $LN42@getenviron
  00217	e8 00 00 00 00	 call	 _Px_Dealloc
  0021c	e9 a4 00 00 00	 jmp	 $LN15@getenviron
$LN79@getenviron:

; 512  :             PyErr_SetString(PyExc_TypeError,
; 513  :                 "environment can only contain strings");

  00221	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00228	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@PGPLICDA@environment?5can?5only?5contain?5str@
  0022f	e8 00 00 00 00	 call	 PyErr_SetString
$error$120797:

; 549  : 
; 550  :  error:
; 551  :     PyMem_Free(buffer);

  00234	49 8b cd	 mov	 rcx, r13
  00237	e8 00 00 00 00	 call	 PyMem_Free

; 552  :     Py_XDECREF(keys);

  0023c	48 85 f6	 test	 rsi, rsi
  0023f	0f 84 23 01 00
	00		 je	 $LN7@getenviron
  00245	e8 00 00 00 00	 call	 _Py_PXCTX
  0024a	85 c0		 test	 eax, eax
  0024c	0f 85 16 01 00
	00		 jne	 $LN7@getenviron
  00252	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00256	a8 20		 test	 al, 32			; 00000020H
  00258	0f 85 02 01 00
	00		 jne	 $LN59@getenviron
  0025e	84 c0		 test	 al, al
  00260	0f 88 fa 00 00
	00		 js	 $LN59@getenviron
  00266	a8 02		 test	 al, 2
  00268	0f 85 fa 00 00
	00		 jne	 $LN7@getenviron
  0026e	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  00272	0f 85 f0 00 00
	00		 jne	 $LN7@getenviron
  00278	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0027f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00286	4c 8b ce	 mov	 r9, rsi
  00289	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0028f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00297	e8 00 00 00 00	 call	 _PyParallel_Guard
  0029c	48 8b ce	 mov	 rcx, rsi
  0029f	85 c0		 test	 eax, eax
  002a1	0f 84 ad 00 00
	00		 je	 $LN64@getenviron
  002a7	e8 00 00 00 00	 call	 _Px_Dealloc
  002ac	e9 b7 00 00 00	 jmp	 $LN7@getenviron

; 541  :     assert(p == end);
; 542  : 
; 543  :     Py_XDECREF(keys);

$LN42@getenviron:
  002b1	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  002b5	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002bb	eb 08		 jmp	 SHORT $LN15@getenviron
$LN37@getenviron:
  002bd	48 8b ce	 mov	 rcx, rsi
  002c0	e8 00 00 00 00	 call	 Px_DecRef
$LN15@getenviron:

; 544  :     Py_XDECREF(values);

  002c5	e8 00 00 00 00	 call	 _Py_PXCTX
  002ca	85 c0		 test	 eax, eax
  002cc	75 5c		 jne	 SHORT $LN11@getenviron
  002ce	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  002d2	a8 20		 test	 al, 32			; 00000020H
  002d4	75 4c		 jne	 SHORT $LN48@getenviron
  002d6	84 c0		 test	 al, al
  002d8	78 48		 js	 SHORT $LN48@getenviron
  002da	a8 02		 test	 al, 2
  002dc	75 4c		 jne	 SHORT $LN11@getenviron
  002de	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  002e2	75 46		 jne	 SHORT $LN11@getenviron
  002e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  002f2	4c 8b cf	 mov	 r9, rdi
  002f5	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002fb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00303	e8 00 00 00 00	 call	 _PyParallel_Guard
  00308	48 8b cf	 mov	 rcx, rdi
  0030b	85 c0		 test	 eax, eax
  0030d	74 07		 je	 SHORT $LN53@getenviron
  0030f	e8 00 00 00 00	 call	 _Px_Dealloc
  00314	eb 14		 jmp	 SHORT $LN11@getenviron
$LN53@getenviron:
  00316	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0031a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00320	eb 08		 jmp	 SHORT $LN11@getenviron
$LN48@getenviron:
  00322	48 8b cf	 mov	 rcx, rdi
  00325	e8 00 00 00 00	 call	 Px_DecRef
$LN11@getenviron:

; 545  : 
; 546  :     res = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, buffer, p - buffer);

  0032a	49 2b dd	 sub	 rbx, r13
  0032d	49 8b d5	 mov	 rdx, r13
  00330	b9 04 00 00 00	 mov	 ecx, 4
  00335	48 c1 fb 02	 sar	 rbx, 2
  00339	4c 8b c3	 mov	 r8, rbx
  0033c	e8 00 00 00 00	 call	 PyUnicode_FromKindAndData

; 547  :     PyMem_Free(buffer);

  00341	49 8b cd	 mov	 rcx, r13
  00344	48 8b d8	 mov	 rbx, rax
  00347	e8 00 00 00 00	 call	 PyMem_Free

; 548  :     return res;

  0034c	48 8b c3	 mov	 rax, rbx
  0034f	e9 80 00 00 00	 jmp	 $LN89@getenviron

; 552  :     Py_XDECREF(keys);

$LN64@getenviron:
  00354	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  00358	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0035e	eb 08		 jmp	 SHORT $LN7@getenviron
$LN59@getenviron:
  00360	48 8b ce	 mov	 rcx, rsi
  00363	e8 00 00 00 00	 call	 Px_DecRef
$LN7@getenviron:

; 553  :     Py_XDECREF(values);

  00368	48 85 ff	 test	 rdi, rdi
  0036b	74 65		 je	 SHORT $LN3@getenviron
  0036d	e8 00 00 00 00	 call	 _Py_PXCTX
  00372	85 c0		 test	 eax, eax
  00374	75 5c		 jne	 SHORT $LN3@getenviron
  00376	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0037a	a8 20		 test	 al, 32			; 00000020H
  0037c	75 4c		 jne	 SHORT $LN70@getenviron
  0037e	84 c0		 test	 al, al
  00380	78 48		 js	 SHORT $LN70@getenviron
  00382	a8 02		 test	 al, 2
  00384	75 4c		 jne	 SHORT $LN3@getenviron
  00386	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0038a	75 46		 jne	 SHORT $LN3@getenviron
  0038c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00393	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0039a	4c 8b cf	 mov	 r9, rdi
  0039d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  003a3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003ab	e8 00 00 00 00	 call	 _PyParallel_Guard
  003b0	48 8b cf	 mov	 rcx, rdi
  003b3	85 c0		 test	 eax, eax
  003b5	74 07		 je	 SHORT $LN75@getenviron
  003b7	e8 00 00 00 00	 call	 _Px_Dealloc
  003bc	eb 14		 jmp	 SHORT $LN3@getenviron
$LN75@getenviron:
  003be	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  003c2	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003c8	eb 08		 jmp	 SHORT $LN3@getenviron
$LN70@getenviron:
  003ca	48 8b cf	 mov	 rcx, rdi
  003cd	e8 00 00 00 00	 call	 Px_DecRef
$LN3@getenviron:

; 554  :     return NULL;

  003d2	33 c0		 xor	 eax, eax
$LN89@getenviron:
  003d4	4c 8b 74 24 38	 mov	 r14, QWORD PTR [rsp+56]
  003d9	4c 8b 64 24 40	 mov	 r12, QWORD PTR [rsp+64]
  003de	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]
  003e3	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  003e8	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  003ed	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]

; 555  : }

  003f2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  003f6	41 5d		 pop	 r13
  003f8	5b		 pop	 rbx
  003f9	c3		 ret	 0
getenvironment ENDP
_TEXT	ENDS
PUBLIC	??_C@_04GHFOFHGJ@NNkk?$AA@			; `string'
PUBLIC	??_C@_09IBEKIOCM@hStdError?$AA@			; `string'
PUBLIC	??_C@_0L@ECAKFBIF@hStdOutput?$AA@		; `string'
PUBLIC	??_C@_09LOHKHNHP@hStdInput?$AA@			; `string'
PUBLIC	??_C@_0M@KKOBDLEJ@wShowWindow?$AA@		; `string'
PUBLIC	??_C@_07KIGAHELJ@dwFlags?$AA@			; `string'
PUBLIC	??_C@_0BI@BIAPMBPM@ZZOOikOZO?3CreateProcess?$AA@ ; `string'
EXTRN	__imp_CreateProcessW:PROC
EXTRN	PyUnicode_AsUnicode:PROC
EXTRN	PyErr_Occurred:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_CreateProcess DD imagerel winapi_CreateProcess
	DD	imagerel winapi_CreateProcess+274
	DD	imagerel $unwind$winapi_CreateProcess
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$winapi_CreateProcess DD imagerel winapi_CreateProcess+274
	DD	imagerel winapi_CreateProcess+343
	DD	imagerel $chain$1$winapi_CreateProcess
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$winapi_CreateProcess DD imagerel winapi_CreateProcess+343
	DD	imagerel winapi_CreateProcess+531
	DD	imagerel $chain$2$winapi_CreateProcess
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$winapi_CreateProcess DD imagerel winapi_CreateProcess+531
	DD	imagerel winapi_CreateProcess+556
	DD	imagerel $chain$3$winapi_CreateProcess
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$winapi_CreateProcess DD 021H
	DD	imagerel winapi_CreateProcess+274
	DD	imagerel winapi_CreateProcess+343
	DD	imagerel $chain$1$winapi_CreateProcess
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$winapi_CreateProcess DD 020821H
	DD	0283408H
	DD	imagerel winapi_CreateProcess+274
	DD	imagerel winapi_CreateProcess+343
	DD	imagerel $chain$1$winapi_CreateProcess
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$winapi_CreateProcess DD 041021H
	DD	0247410H
	DD	0256408H
	DD	imagerel winapi_CreateProcess
	DD	imagerel winapi_CreateProcess+274
	DD	imagerel $unwind$winapi_CreateProcess
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_CreateProcess DD 030e01H
	DD	026010eH
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_04GHFOFHGJ@NNkk?$AA@
CONST	SEGMENT
??_C@_04GHFOFHGJ@NNkk?$AA@ DB 'NNkk', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IBEKIOCM@hStdError?$AA@
CONST	SEGMENT
??_C@_09IBEKIOCM@hStdError?$AA@ DB 'hStdError', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ECAKFBIF@hStdOutput?$AA@
CONST	SEGMENT
??_C@_0L@ECAKFBIF@hStdOutput?$AA@ DB 'hStdOutput', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LOHKHNHP@hStdInput?$AA@
CONST	SEGMENT
??_C@_09LOHKHNHP@hStdInput?$AA@ DB 'hStdInput', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KKOBDLEJ@wShowWindow?$AA@
CONST	SEGMENT
??_C@_0M@KKOBDLEJ@wShowWindow?$AA@ DB 'wShowWindow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07KIGAHELJ@dwFlags?$AA@
CONST	SEGMENT
??_C@_07KIGAHELJ@dwFlags?$AA@ DB 'dwFlags', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BIAPMBPM@ZZOOikOZO?3CreateProcess?$AA@
CONST	SEGMENT
??_C@_0BI@BIAPMBPM@ZZOOikOZO?3CreateProcess?$AA@ DB 'ZZOOikOZO:CreateProc'
	DB	'ess', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_CreateProcess
_TEXT	SEGMENT
startup_info$ = 96
application_name$ = 104
command_line$ = 112
env_mapping$ = 120
current_directory$ = 128
pi$ = 136
thread_attributes$ = 160
process_attributes$ = 168
si$ = 176
self$ = 320
args$ = 328
creation_flags$ = 336
inherit_handles$ = 344
winapi_CreateProcess PROC				; COMDAT

; 571  : {

  00000	40 55		 push	 rbp
  00002	48 8d 6c 24 d0	 lea	 rbp, QWORD PTR [rsp-48]
  00007	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H

; 572  :     BOOL result;
; 573  :     PROCESS_INFORMATION pi;
; 574  :     STARTUPINFOW si;
; 575  :     PyObject* environment;
; 576  :     wchar_t *wenvironment;
; 577  : 
; 578  :     wchar_t* application_name;
; 579  :     wchar_t* command_line;
; 580  :     PyObject* process_attributes; /* ignored */
; 581  :     PyObject* thread_attributes; /* ignored */
; 582  :     BOOL inherit_handles;
; 583  :     DWORD creation_flags;
; 584  :     PyObject* env_mapping;
; 585  :     wchar_t* current_directory;
; 586  :     PyObject* startup_info;
; 587  : 
; 588  :     if (! PyArg_ParseTuple(args, "ZZOO" F_BOOL F_DWORD "OZO:CreateProcess",
; 589  :                            &application_name,
; 590  :                            &command_line,
; 591  :                            &process_attributes,
; 592  :                            &thread_attributes,
; 593  :                            &inherit_handles,
; 594  :                            &creation_flags,
; 595  :                            &env_mapping,
; 596  :                            &current_directory,
; 597  :                            &startup_info))

  0000e	48 8d 4c 24 60	 lea	 rcx, QWORD PTR startup_info$[rsp]
  00013	48 8b c2	 mov	 rax, rdx
  00016	4c 8d 4c 24 70	 lea	 r9, QWORD PTR command_line$[rsp]
  0001b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00020	48 8d 4d 80	 lea	 rcx, QWORD PTR current_directory$[rbp-256]
  00024	4c 8d 44 24 68	 lea	 r8, QWORD PTR application_name$[rsp]
  00029	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0002e	48 8d 4c 24 78	 lea	 rcx, QWORD PTR env_mapping$[rsp]
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@BIAPMBPM@ZZOOikOZO?3CreateProcess?$AA@
  0003a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0003f	48 8d 4d 50	 lea	 rcx, QWORD PTR creation_flags$[rbp-256]
  00043	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00048	48 8d 4d 58	 lea	 rcx, QWORD PTR inherit_handles$[rbp-256]
  0004c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00051	48 8d 4d a0	 lea	 rcx, QWORD PTR thread_attributes$[rbp-256]
  00055	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0005a	48 8d 4d a8	 lea	 rcx, QWORD PTR process_attributes$[rbp-256]
  0005e	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0006b	85 c0		 test	 eax, eax
  0006d	75 0b		 jne	 SHORT $LN15@winapi_Cre@4
$LN22@winapi_Cre@4:

; 598  :         return NULL;

  0006f	33 c0		 xor	 eax, eax

; 651  : }

  00071	48 81 c4 30 01
	00 00		 add	 rsp, 304		; 00000130H
  00078	5d		 pop	 rbp
  00079	c3		 ret	 0
$LN15@winapi_Cre@4:

; 599  : 
; 600  :     ZeroMemory(&si, sizeof(si));

  0007a	33 d2		 xor	 edx, edx
  0007c	48 8d 4d b0	 lea	 rcx, QWORD PTR si$[rbp-256]
  00080	44 8d 42 68	 lea	 r8d, QWORD PTR [rdx+104]
  00084	e8 00 00 00 00	 call	 memset

; 601  :     si.cb = sizeof(si);
; 602  : 
; 603  :     /* note: we only support a small subset of all SI attributes */
; 604  :     si.dwFlags = getulong(startup_info, "dwFlags");

  00089	48 8b 4c 24 60	 mov	 rcx, QWORD PTR startup_info$[rsp]
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07KIGAHELJ@dwFlags?$AA@
  00095	c7 45 b0 68 00
	00 00		 mov	 DWORD PTR si$[rbp-256], 104 ; 00000068H
  0009c	e8 00 00 00 00	 call	 getulong

; 605  :     si.wShowWindow = (WORD)getulong(startup_info, "wShowWindow");

  000a1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR startup_info$[rsp]
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@KKOBDLEJ@wShowWindow?$AA@
  000ad	89 45 ec	 mov	 DWORD PTR si$[rbp-196], eax
  000b0	e8 00 00 00 00	 call	 getulong

; 606  :     si.hStdInput = gethandle(startup_info, "hStdInput");

  000b5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR startup_info$[rsp]
  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09LOHKHNHP@hStdInput?$AA@
  000c1	66 89 45 f0	 mov	 WORD PTR si$[rbp-192], ax
  000c5	e8 00 00 00 00	 call	 gethandle

; 607  :     si.hStdOutput = gethandle(startup_info, "hStdOutput");

  000ca	48 8b 4c 24 60	 mov	 rcx, QWORD PTR startup_info$[rsp]
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@ECAKFBIF@hStdOutput?$AA@
  000d6	48 89 45 00	 mov	 QWORD PTR si$[rbp-176], rax
  000da	e8 00 00 00 00	 call	 gethandle

; 608  :     si.hStdError = gethandle(startup_info, "hStdError");

  000df	48 8b 4c 24 60	 mov	 rcx, QWORD PTR startup_info$[rsp]
  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09IBEKIOCM@hStdError?$AA@
  000eb	48 89 45 08	 mov	 QWORD PTR si$[rbp-168], rax
  000ef	e8 00 00 00 00	 call	 gethandle
  000f4	48 89 45 10	 mov	 QWORD PTR si$[rbp-160], rax

; 609  :     if (PyErr_Occurred())

  000f8	e8 00 00 00 00	 call	 PyErr_Occurred
  000fd	48 85 c0	 test	 rax, rax

; 610  :         return NULL;

  00100	0f 85 69 ff ff
	ff		 jne	 $LN22@winapi_Cre@4

; 611  : 
; 612  :     if (env_mapping != Py_None) {

  00106	48 8b 4c 24 78	 mov	 rcx, QWORD PTR env_mapping$[rsp]
  0010b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00112	48 89 b4 24 28
	01 00 00	 mov	 QWORD PTR [rsp+296], rsi
  0011a	48 89 bc 24 20
	01 00 00	 mov	 QWORD PTR [rsp+288], rdi
  00122	48 3b c8	 cmp	 rcx, rax
  00125	74 2c		 je	 SHORT $LN13@winapi_Cre@4

; 613  :         environment = getenvironment(env_mapping);

  00127	e8 00 00 00 00	 call	 getenvironment
  0012c	48 8b f8	 mov	 rdi, rax

; 614  :         if (! environment)

  0012f	48 85 c0	 test	 rax, rax

; 615  :             return NULL;

  00132	74 18		 je	 SHORT $LN21@winapi_Cre@4

; 616  :         wenvironment = PyUnicode_AsUnicode(environment);

  00134	48 8b c8	 mov	 rcx, rax
  00137	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  0013c	48 8b f0	 mov	 rsi, rax

; 617  :         if (wenvironment == NULL)

  0013f	48 85 c0	 test	 rax, rax
  00142	75 13		 jne	 SHORT $LN6@winapi_Cre@4

; 618  :         {
; 619  :             Py_XDECREF(environment);

  00144	48 8b cf	 mov	 rcx, rdi
  00147	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@winapi_Cre@4:

; 620  :             return NULL;

  0014c	33 c0		 xor	 eax, eax
  0014e	e9 c0 00 00 00	 jmp	 $LN19@winapi_Cre@4
$LN13@winapi_Cre@4:

; 621  :         }
; 622  :     }
; 623  :     else {
; 624  :         environment = NULL;

  00153	33 ff		 xor	 edi, edi

; 625  :         wenvironment = NULL;

  00155	8b f7		 mov	 esi, edi
$LN6@winapi_Cre@4:

; 626  :     }
; 627  : 
; 628  :     Py_BEGIN_ALLOW_THREADS

  00157	48 89 9c 24 40
	01 00 00	 mov	 QWORD PTR [rsp+320], rbx
  0015f	e8 00 00 00 00	 call	 PyEval_SaveThread

; 629  :     result = CreateProcessW(application_name,
; 630  :                            command_line,
; 631  :                            NULL,
; 632  :                            NULL,
; 633  :                            inherit_handles,
; 634  :                            creation_flags | CREATE_UNICODE_ENVIRONMENT,
; 635  :                            wenvironment,
; 636  :                            current_directory,
; 637  :                            &si,
; 638  :                            &pi);

  00164	48 8b 4d 80	 mov	 rcx, QWORD PTR current_directory$[rbp-256]
  00168	8b 55 50	 mov	 edx, DWORD PTR creation_flags$[rbp-256]
  0016b	48 8b d8	 mov	 rbx, rax
  0016e	48 8d 45 88	 lea	 rax, QWORD PTR pi$[rbp-256]
  00172	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00177	0f ba ea 0a	 bts	 edx, 10
  0017b	48 8d 45 b0	 lea	 rax, QWORD PTR si$[rbp-256]
  0017f	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00184	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00189	8b 4d 58	 mov	 ecx, DWORD PTR inherit_handles$[rbp-256]
  0018c	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00191	89 54 24 28	 mov	 DWORD PTR [rsp+40], edx
  00195	48 8b 54 24 70	 mov	 rdx, QWORD PTR command_line$[rsp]
  0019a	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0019e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR application_name$[rsp]
  001a3	45 33 c9	 xor	 r9d, r9d
  001a6	45 33 c0	 xor	 r8d, r8d
  001a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateProcessW

; 639  :     Py_END_ALLOW_THREADS

  001af	48 8b cb	 mov	 rcx, rbx
  001b2	8b f0		 mov	 esi, eax
  001b4	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 640  : 
; 641  :     Py_XDECREF(environment);

  001b9	48 85 ff	 test	 rdi, rdi
  001bc	74 08		 je	 SHORT $LN4@winapi_Cre@4
  001be	48 8b cf	 mov	 rcx, rdi
  001c1	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@winapi_Cre@4:

; 642  : 
; 643  :     if (! result)

  001c6	85 f6		 test	 esi, esi
  001c8	75 0f		 jne	 SHORT $LN1@winapi_Cre@4

; 644  :         return PyErr_SetFromWindowsErr(GetLastError());

  001ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  001d0	8b c8		 mov	 ecx, eax
  001d2	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  001d7	eb 32		 jmp	 SHORT $LN20@winapi_Cre@4
$LN1@winapi_Cre@4:

; 645  : 
; 646  :     return Py_BuildValue("NNkk",
; 647  :                          HANDLE_TO_PYNUM(pi.hProcess),
; 648  :                          HANDLE_TO_PYNUM(pi.hThread),
; 649  :                          pi.dwProcessId,
; 650  :                          pi.dwThreadId);

  001d9	48 8b 4d 90	 mov	 rcx, QWORD PTR pi$[rbp-248]
  001dd	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong
  001e2	48 8b 4d 88	 mov	 rcx, QWORD PTR pi$[rbp-256]
  001e6	48 8b d8	 mov	 rbx, rax
  001e9	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong
  001ee	8b 4d 9c	 mov	 ecx, DWORD PTR pi$[rbp-236]
  001f1	44 8b 4d 98	 mov	 r9d, DWORD PTR pi$[rbp-240]
  001f5	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  001f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHFOFHGJ@NNkk?$AA@
  00200	48 8b d0	 mov	 rdx, rax
  00203	4c 8b c3	 mov	 r8, rbx
  00206	e8 00 00 00 00	 call	 Py_BuildValue
$LN20@winapi_Cre@4:
  0020b	48 8b 9c 24 40
	01 00 00	 mov	 rbx, QWORD PTR [rsp+320]
$LN19@winapi_Cre@4:
  00213	48 8b b4 24 28
	01 00 00	 mov	 rsi, QWORD PTR [rsp+296]
  0021b	48 8b bc 24 20
	01 00 00	 mov	 rdi, QWORD PTR [rsp+288]

; 651  : }

  00223	48 81 c4 30 01
	00 00		 add	 rsp, 304		; 00000130H
  0022a	5d		 pop	 rbp
  0022b	c3		 ret	 0
winapi_CreateProcess ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@BOJJGNHK@KKKkik?3DuplicateHandle?$AA@	; `string'
EXTRN	__imp_DuplicateHandle:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_DuplicateHandle DD imagerel winapi_DuplicateHandle
	DD	imagerel winapi_DuplicateHandle+84
	DD	imagerel $unwind$winapi_DuplicateHandle
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$winapi_DuplicateHandle DD imagerel winapi_DuplicateHandle+84
	DD	imagerel winapi_DuplicateHandle+188
	DD	imagerel $chain$1$winapi_DuplicateHandle
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$winapi_DuplicateHandle DD imagerel winapi_DuplicateHandle+188
	DD	imagerel winapi_DuplicateHandle+221
	DD	imagerel $chain$2$winapi_DuplicateHandle
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$winapi_DuplicateHandle DD 021H
	DD	imagerel winapi_DuplicateHandle
	DD	imagerel winapi_DuplicateHandle+84
	DD	imagerel $unwind$winapi_DuplicateHandle
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$winapi_DuplicateHandle DD 040d21H
	DD	0e740dH
	DD	0103408H
	DD	imagerel winapi_DuplicateHandle
	DD	imagerel winapi_DuplicateHandle+84
	DD	imagerel $unwind$winapi_DuplicateHandle
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_DuplicateHandle DD 010701H
	DD	0e207H
xdata	ENDS
;	COMDAT ??_C@_0BH@BOJJGNHK@KKKkik?3DuplicateHandle?$AA@
CONST	SEGMENT
??_C@_0BH@BOJJGNHK@KKKkik?3DuplicateHandle?$AA@ DB 'KKKkik:DuplicateHandl'
	DB	'e', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_DuplicateHandle
_TEXT	SEGMENT
desired_access$ = 64
target_process_handle$ = 72
source_handle$ = 80
source_process_handle$ = 88
target_handle$ = 96
self$ = 128
args$ = 136
options$ = 144
inherit_handle$ = 152
winapi_DuplicateHandle PROC				; COMDAT

; 666  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 667  :     HANDLE target_handle;
; 668  :     BOOL result;
; 669  : 
; 670  :     HANDLE source_process_handle;
; 671  :     HANDLE source_handle;
; 672  :     HANDLE target_process_handle;
; 673  :     DWORD desired_access;
; 674  :     BOOL inherit_handle;
; 675  :     DWORD options = 0;
; 676  : 
; 677  :     if (! PyArg_ParseTuple(args,
; 678  :                            F_HANDLE F_HANDLE F_HANDLE F_DWORD F_BOOL F_DWORD
; 679  :                            ":DuplicateHandle",
; 680  :                            &source_process_handle,
; 681  :                            &source_handle,
; 682  :                            &target_process_handle,
; 683  :                            &desired_access,
; 684  :                            &inherit_handle,
; 685  :                            &options))

  00007	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0000b	48 8b c2	 mov	 rax, rdx
  0000e	4d 8d 4b d8	 lea	 r9, QWORD PTR [r11-40]
  00012	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  00016	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0001a	4d 8d 43 e0	 lea	 r8, QWORD PTR [r11-32]
  0001e	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  00022	49 8d 4b c8	 lea	 rcx, QWORD PTR [r11-56]
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@BOJJGNHK@KKKkik?3DuplicateHandle?$AA@
  0002d	49 89 4b b0	 mov	 QWORD PTR [r11-80], rcx
  00031	49 8d 4b d0	 lea	 rcx, QWORD PTR [r11-48]
  00035	41 c7 43 18 00
	00 00 00	 mov	 DWORD PTR [r11+24], 0
  0003d	49 89 4b a8	 mov	 QWORD PTR [r11-88], rcx
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00049	85 c0		 test	 eax, eax
  0004b	75 07		 jne	 SHORT $LN2@winapi_Dup

; 686  :         return NULL;

  0004d	33 c0		 xor	 eax, eax

; 704  : }

  0004f	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00053	c3		 ret	 0
$LN2@winapi_Dup:
  00054	48 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbx
  0005c	48 89 7c 24 70	 mov	 QWORD PTR [rsp+112], rdi

; 687  : 
; 688  :     Py_BEGIN_ALLOW_THREADS

  00061	e8 00 00 00 00	 call	 PyEval_SaveThread

; 689  :     result = DuplicateHandle(
; 690  :         source_process_handle,
; 691  :         source_handle,
; 692  :         target_process_handle,
; 693  :         &target_handle,
; 694  :         desired_access,
; 695  :         inherit_handle,
; 696  :         options
; 697  :     );

  00066	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR options$[rsp]
  0006d	4c 8b 44 24 48	 mov	 r8, QWORD PTR target_process_handle$[rsp]
  00072	48 8b 54 24 50	 mov	 rdx, QWORD PTR source_handle$[rsp]
  00077	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  0007b	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR inherit_handle$[rsp]
  00082	4c 8d 4c 24 60	 lea	 r9, QWORD PTR target_handle$[rsp]
  00087	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  0008b	8b 4c 24 40	 mov	 ecx, DWORD PTR desired_access$[rsp]
  0008f	48 8b f8	 mov	 rdi, rax
  00092	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00096	48 8b 4c 24 58	 mov	 rcx, QWORD PTR source_process_handle$[rsp]
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DuplicateHandle

; 698  :     Py_END_ALLOW_THREADS

  000a1	48 8b cf	 mov	 rcx, rdi
  000a4	8b d8		 mov	 ebx, eax
  000a6	e8 00 00 00 00	 call	 PyEval_RestoreThread
  000ab	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]

; 699  : 
; 700  :     if (! result)

  000b0	85 db		 test	 ebx, ebx
  000b2	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  000ba	75 12		 jne	 SHORT $LN1@winapi_Dup

; 701  :         return PyErr_SetFromWindowsErr(GetLastError());

  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  000c2	8b c8		 mov	 ecx, eax
  000c4	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 704  : }

  000c9	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000cd	c3		 ret	 0
$LN1@winapi_Dup:

; 702  : 
; 703  :     return HANDLE_TO_PYNUM(target_handle);

  000ce	48 8b 4c 24 60	 mov	 rcx, QWORD PTR target_handle$[rsp]
  000d3	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong

; 704  : }

  000d8	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000dc	c3		 ret	 0
winapi_DuplicateHandle ENDP
_TEXT	ENDS
PUBLIC	??_C@_01JPJNBJEM@I?$AA@				; `string'
EXTRN	__imp_ExitProcess:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_ExitProcess DD imagerel winapi_ExitProcess
	DD	imagerel winapi_ExitProcess+46
	DD	imagerel $unwind$winapi_ExitProcess
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_ExitProcess DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_01JPJNBJEM@I?$AA@
CONST	SEGMENT
??_C@_01JPJNBJEM@I?$AA@ DB 'I', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_ExitProcess
_TEXT	SEGMENT
self$ = 48
args$ = 56
uExitCode$ = 64
winapi_ExitProcess PROC					; COMDAT

; 708  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 709  :     UINT uExitCode;
; 710  : 
; 711  :     if (!PyArg_ParseTuple(args, F_UINT, &uExitCode))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 40	 lea	 r8, QWORD PTR uExitCode$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01JPJNBJEM@I?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN1@winapi_Exi

; 712  :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 721  : 
; 722  :     return NULL;
; 723  : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
$LN1@winapi_Exi:

; 713  : 
; 714  :     #if defined(Py_DEBUG)
; 715  :         SetErrorMode(SEM_FAILCRITICALERRORS|SEM_NOALIGNMENTFAULTEXCEPT|
; 716  :                      SEM_NOGPFAULTERRORBOX|SEM_NOOPENFILEERRORBOX);
; 717  :         _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_DEBUG);
; 718  :     #endif
; 719  : 
; 720  :     ExitProcess(uExitCode);

  00023	8b 4c 24 40	 mov	 ecx, DWORD PTR uExitCode$[rsp]
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExitProcess
  0002d	cc		 int	 3
$LN4@winapi_Exi:
winapi_ExitProcess ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@JFGKBNB@?3GetCurrentProcess?$AA@	; `string'
EXTRN	__imp_GetCurrentProcess:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_GetCurrentProcess DD imagerel winapi_GetCurrentProcess
	DD	imagerel winapi_GetCurrentProcess+48
	DD	imagerel $unwind$winapi_GetCurrentProcess
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_GetCurrentProcess DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BD@JFGKBNB@?3GetCurrentProcess?$AA@
CONST	SEGMENT
??_C@_0BD@JFGKBNB@?3GetCurrentProcess?$AA@ DB ':GetCurrentProcess', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_GetCurrentProcess
_TEXT	SEGMENT
self$ = 48
args$ = 56
winapi_GetCurrentProcess PROC				; COMDAT

; 732  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 733  :     if (! PyArg_ParseTuple(args, ":GetCurrentProcess"))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@JFGKBNB@?3GetCurrentProcess?$AA@
  0000e	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00013	85 c0		 test	 eax, eax
  00015	75 07		 jne	 SHORT $LN1@winapi_Get

; 734  :         return NULL;

  00017	33 c0		 xor	 eax, eax

; 737  : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
$LN1@winapi_Get:

; 735  : 
; 736  :     return HANDLE_TO_PYNUM(GetCurrentProcess());

  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcess
  00024	48 8b c8	 mov	 rcx, rax

; 737  : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	e9 00 00 00 00	 jmp	 PyLong_FromUnsignedLongLong
winapi_GetCurrentProcess ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@HCMDMFBA@K?3GetExitCodeProcess?$AA@	; `string'
EXTRN	PyLong_FromUnsignedLong:PROC
EXTRN	__imp_GetExitCodeProcess:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_GetExitCodeProcess DD imagerel winapi_GetExitCodeProcess
	DD	imagerel winapi_GetExitCodeProcess+87
	DD	imagerel $unwind$winapi_GetExitCodeProcess
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_GetExitCodeProcess DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BF@HCMDMFBA@K?3GetExitCodeProcess?$AA@
CONST	SEGMENT
??_C@_0BF@HCMDMFBA@K?3GetExitCodeProcess?$AA@ DB 'K:GetExitCodeProcess', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_GetExitCodeProcess
_TEXT	SEGMENT
self$ = 48
args$ = 56
exit_code$ = 64
process$ = 72
winapi_GetExitCodeProcess PROC				; COMDAT

; 746  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 747  :     DWORD exit_code;
; 748  :     BOOL result;
; 749  : 
; 750  :     HANDLE process;
; 751  :     if (! PyArg_ParseTuple(args, F_HANDLE ":GetExitCodeProcess", &process))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 48	 lea	 r8, QWORD PTR process$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@HCMDMFBA@K?3GetExitCodeProcess?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN2@winapi_Get@2

; 752  :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 760  : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
$LN2@winapi_Get@2:

; 753  : 
; 754  :     result = GetExitCodeProcess(process, &exit_code);

  00023	48 8b 4c 24 48	 mov	 rcx, QWORD PTR process$[rsp]
  00028	48 8d 54 24 40	 lea	 rdx, QWORD PTR exit_code$[rsp]
  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetExitCodeProcess

; 755  : 
; 756  :     if (! result)

  00033	85 c0		 test	 eax, eax
  00035	75 12		 jne	 SHORT $LN1@winapi_Get@2

; 757  :         return PyErr_SetFromWindowsErr(GetLastError());

  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0003d	8b c8		 mov	 ecx, eax
  0003f	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 760  : }

  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	c3		 ret	 0
$LN1@winapi_Get@2:

; 758  : 
; 759  :     return PyLong_FromUnsignedLong(exit_code);

  00049	8b 4c 24 40	 mov	 ecx, DWORD PTR exit_code$[rsp]
  0004d	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong

; 760  : }

  00052	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00056	c3		 ret	 0
winapi_GetExitCodeProcess ENDP
_TEXT	ENDS
PUBLIC	??_C@_01DICPFPGM@k?$AA@				; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_GetLastError DD imagerel winapi_GetLastError
	DD	imagerel winapi_GetLastError+28
	DD	imagerel $unwind$winapi_GetLastError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_GetLastError DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_01DICPFPGM@k?$AA@
CONST	SEGMENT
??_C@_01DICPFPGM@k?$AA@ DB 'k', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_GetLastError
_TEXT	SEGMENT
self$ = 48
args$ = 56
winapi_GetLastError PROC				; COMDAT

; 764  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 765  :     return Py_BuildValue(F_DWORD, GetLastError());

  00004	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00011	8b d0		 mov	 edx, eax

; 766  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	e9 00 00 00 00	 jmp	 Py_BuildValue
winapi_GetLastError ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@NBAMEAJN@K?3GetModuleFileName?$AA@	; `string'
EXTRN	PyUnicode_FromWideChar:PROC
EXTRN	__imp_GetModuleFileNameW:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_GetModuleFileName DD imagerel winapi_GetModuleFileName
	DD	imagerel winapi_GetModuleFileName+159
	DD	imagerel $unwind$winapi_GetModuleFileName
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_GetModuleFileName DD 047401H
	DD	0467474H
	DD	0470107H
xdata	ENDS
;	COMDAT ??_C@_0BE@NBAMEAJN@K?3GetModuleFileName?$AA@
CONST	SEGMENT
??_C@_0BE@NBAMEAJN@K?3GetModuleFileName?$AA@ DB 'K:GetModuleFileName', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_GetModuleFileName
_TEXT	SEGMENT
filename$ = 32
self$ = 576
args$ = 584
module$ = 592
winapi_GetModuleFileName PROC				; COMDAT

; 782  : {

  00000	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H

; 783  :     BOOL result;
; 784  :     HMODULE module;
; 785  :     WCHAR filename[MAX_PATH];
; 786  : 
; 787  :     if (! PyArg_ParseTuple(args, F_HANDLE ":GetModuleFileName",
; 788  :                            &module))

  00007	48 8b ca	 mov	 rcx, rdx
  0000a	4c 8d 84 24 50
	02 00 00	 lea	 r8, QWORD PTR module$[rsp]
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NBAMEAJN@K?3GetModuleFileName?$AA@
  00019	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001e	85 c0		 test	 eax, eax
  00020	75 0a		 jne	 SHORT $LN2@winapi_Get@3

; 789  :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 798  : }

  00024	48 81 c4 38 02
	00 00		 add	 rsp, 568		; 00000238H
  0002b	c3		 ret	 0
$LN2@winapi_Get@3:

; 790  : 
; 791  :     result = GetModuleFileNameW(module, filename, MAX_PATH);

  0002c	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR module$[rsp]
  00034	48 8d 54 24 20	 lea	 rdx, QWORD PTR filename$[rsp]
  00039	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleFileNameW

; 792  :     filename[MAX_PATH-1] = '\0';

  00045	33 c9		 xor	 ecx, ecx
  00047	66 89 8c 24 26
	02 00 00	 mov	 WORD PTR filename$[rsp+518], cx

; 793  : 
; 794  :     if (! result)

  0004f	85 c0		 test	 eax, eax
  00051	75 15		 jne	 SHORT $LN1@winapi_Get@3

; 795  :         return PyErr_SetFromWindowsErr(GetLastError());

  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00059	8b c8		 mov	 ecx, eax
  0005b	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 798  : }

  00060	48 81 c4 38 02
	00 00		 add	 rsp, 568		; 00000238H
  00067	c3		 ret	 0
$LN1@winapi_Get@3:

; 796  : 
; 797  :     return PyUnicode_FromWideChar(filename, wcslen(filename));

  00068	48 83 c9 ff	 or	 rcx, -1
  0006c	48 89 bc 24 30
	02 00 00	 mov	 QWORD PTR [rsp+560], rdi
  00074	33 c0		 xor	 eax, eax
  00076	48 8d 7c 24 20	 lea	 rdi, QWORD PTR filename$[rsp]
  0007b	66 f2 af	 repne scasw
  0007e	48 f7 d1	 not	 rcx
  00081	48 8d 51 ff	 lea	 rdx, QWORD PTR [rcx-1]
  00085	48 8d 4c 24 20	 lea	 rcx, QWORD PTR filename$[rsp]
  0008a	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  0008f	48 8b bc 24 30
	02 00 00	 mov	 rdi, QWORD PTR [rsp+560]

; 798  : }

  00097	48 81 c4 38 02
	00 00		 add	 rsp, 568		; 00000238H
  0009e	c3		 ret	 0
winapi_GetModuleFileName ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@CHHDMOFM@k?3GetStdHandle?$AA@		; `string'
EXTRN	__imp_GetStdHandle:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$winapi_GetStdHandle DD imagerel winapi_GetStdHandle
	DD	imagerel winapi_GetStdHandle+35
	DD	imagerel $unwind$winapi_GetStdHandle
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$winapi_GetStdHandle DD imagerel winapi_GetStdHandle+35
	DD	imagerel winapi_GetStdHandle+85
	DD	imagerel $chain$1$winapi_GetStdHandle
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$winapi_GetStdHandle DD imagerel winapi_GetStdHandle+85
	DD	imagerel winapi_GetStdHandle+108
	DD	imagerel $chain$2$winapi_GetStdHandle
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$winapi_GetStdHandle DD imagerel winapi_GetStdHandle+108
	DD	imagerel winapi_GetStdHandle+199
	DD	imagerel $chain$4$winapi_GetStdHandle
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$winapi_GetStdHandle DD imagerel winapi_GetStdHandle+199
	DD	imagerel winapi_GetStdHandle+217
	DD	imagerel $chain$6$winapi_GetStdHandle
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$winapi_GetStdHandle DD 020021H
	DD	067400H
	DD	imagerel winapi_GetStdHandle
	DD	imagerel winapi_GetStdHandle+35
	DD	imagerel $unwind$winapi_GetStdHandle
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$winapi_GetStdHandle DD 020021H
	DD	067400H
	DD	imagerel winapi_GetStdHandle
	DD	imagerel winapi_GetStdHandle+35
	DD	imagerel $unwind$winapi_GetStdHandle
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$winapi_GetStdHandle DD 020021H
	DD	067400H
	DD	imagerel winapi_GetStdHandle
	DD	imagerel winapi_GetStdHandle+35
	DD	imagerel $unwind$winapi_GetStdHandle
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$winapi_GetStdHandle DD 040a21H
	DD	06740aH
	DD	083405H
	DD	imagerel winapi_GetStdHandle
	DD	imagerel winapi_GetStdHandle+35
	DD	imagerel $unwind$winapi_GetStdHandle
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_GetStdHandle DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0P@CHHDMOFM@k?3GetStdHandle?$AA@
CONST	SEGMENT
??_C@_0P@CHHDMOFM@k?3GetStdHandle?$AA@ DB 'k:GetStdHandle', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_winapi.c
CONST	ENDS
;	COMDAT winapi_GetStdHandle
_TEXT	SEGMENT
self$ = 64
args$ = 72
std_handle$ = 80
winapi_GetStdHandle PROC				; COMDAT

; 809  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 810  :     HANDLE handle;
; 811  :     DWORD std_handle;
; 812  : 
; 813  :     if (! PyArg_ParseTuple(args, F_DWORD ":GetStdHandle", &std_handle))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 44 24 50	 lea	 r8, QWORD PTR std_handle$[rsp]
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@CHHDMOFM@k?3GetStdHandle?$AA@
  00013	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN3@winapi_Get@4

; 814  :         return NULL;

  0001c	33 c0		 xor	 eax, eax

; 830  : }

  0001e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00022	c3		 ret	 0
$LN3@winapi_Get@4:
  00023	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00028	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi

; 815  : 
; 816  :     Py_BEGIN_ALLOW_THREADS

  0002d	e8 00 00 00 00	 call	 PyEval_SaveThread

; 817  :     handle = GetStdHandle(std_handle);

  00032	8b 4c 24 50	 mov	 ecx, DWORD PTR std_handle$[rsp]
  00036	48 8b d8	 mov	 rbx, rax
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetStdHandle

; 818  :     Py_END_ALLOW_THREADS

  0003f	48 8b cb	 mov	 rcx, rbx
  00042	48 8b f8	 mov	 rdi, rax
  00045	e8 00 00 00 00	 call	 PyEval_RestoreThread
  0004a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 819  : 
; 820  :     if (handle == INVALID_HANDLE_VALUE)

  0004f	48 83 ff ff	 cmp	 rdi, -1
  00053	75 17		 jne	 SHORT $LN2@winapi_Get@4

; 821  :         return PyErr_SetFromWindowsErr(GetLastError());

  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0005b	8b c8		 mov	 ecx, eax
  0005d	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00062	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 830  : }

  00067	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006b	c3		 ret	 0
$LN2@winapi_Get@4:

; 822  : 
; 823  :     if (! handle) {

  0006c	48 85 ff	 test	 rdi, rdi
  0006f	75 56		 jne	 SHORT $LN1@winapi_Get@4

; 824  :         Py_INCREF(Py_None);

  00071	e8 00 00 00 00	 call	 _Py_PXCTX
  00076	85 c0		 test	 eax, eax
  00078	75 3c		 jne	 SHORT $LN7@winapi_Get@4
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0008f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00095	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0009d	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a2	85 c0		 test	 eax, eax
  000a4	75 09		 jne	 SHORT $LN6@winapi_Get@4
  000a6	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000ad	74 07		 je	 SHORT $LN7@winapi_Get@4
$LN6@winapi_Get@4:
  000af	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN7@winapi_Get@4:

; 825  :         return Py_None;

  000b6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000bd	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 830  : }

  000c2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c6	c3		 ret	 0
$LN1@winapi_Get@4:

; 826  :     }
; 827  : 
; 828  :     /* note: returns integer, not handle object */
; 829  :     return HANDLE_TO_PYNUM(handle);

  000c7	48 8b cf	 mov	 rcx, rdi
  000ca	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong
  000cf	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 830  : }

  000d4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d8	c3		 ret	 0
winapi_GetStdHandle ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@FDECGLBP@?3GetVersion?$AA@		; `string'
EXTRN	__imp_GetVersion:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_GetVersion DD imagerel winapi_GetVersion
	DD	imagerel winapi_GetVersion+47
	DD	imagerel $unwind$winapi_GetVersion
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_GetVersion DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0M@FDECGLBP@?3GetVersion?$AA@
CONST	SEGMENT
??_C@_0M@FDECGLBP@?3GetVersion?$AA@ DB ':GetVersion', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_GetVersion
_TEXT	SEGMENT
self$ = 48
args$ = 56
winapi_GetVersion PROC					; COMDAT

; 839  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 840  :     if (! PyArg_ParseTuple(args, ":GetVersion"))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@FDECGLBP@?3GetVersion?$AA@
  0000e	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00013	85 c0		 test	 eax, eax
  00015	75 07		 jne	 SHORT $LN1@winapi_Get@5

; 841  :         return NULL;

  00017	33 c0		 xor	 eax, eax

; 844  : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
$LN1@winapi_Get@5:

; 842  : 
; 843  :     return PyLong_FromUnsignedLong(GetVersion());

  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetVersion
  00024	8b c8		 mov	 ecx, eax

; 844  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	e9 00 00 00 00	 jmp	 PyLong_FromUnsignedLong
winapi_GetVersion ENDP
_TEXT	ENDS
PUBLIC	??_C@_03PDJDBCCC@kik?$AA@			; `string'
EXTRN	__imp_OpenProcess:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_OpenProcess DD imagerel winapi_OpenProcess
	DD	imagerel winapi_OpenProcess+109
	DD	imagerel $unwind$winapi_OpenProcess
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_OpenProcess DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_03PDJDBCCC@kik?$AA@
CONST	SEGMENT
??_C@_03PDJDBCCC@kik?$AA@ DB 'kik', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_OpenProcess
_TEXT	SEGMENT
dwDesiredAccess$ = 48
self$ = 80
args$ = 88
dwProcessId$ = 96
bInheritHandle$ = 104
winapi_OpenProcess PROC					; COMDAT

; 848  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00004	48 8b c2	 mov	 rax, rdx

; 849  :     DWORD dwDesiredAccess;
; 850  :     BOOL bInheritHandle;
; 851  :     DWORD dwProcessId;
; 852  :     HANDLE handle;
; 853  : 
; 854  :     if (!PyArg_ParseTuple(args, F_DWORD F_BOOL F_DWORD,
; 855  :                           &dwDesiredAccess, &bInheritHandle, &dwProcessId))

  00007	48 8d 4c 24 60	 lea	 rcx, QWORD PTR dwProcessId$[rsp]
  0000c	4c 8d 4c 24 68	 lea	 r9, QWORD PTR bInheritHandle$[rsp]
  00011	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00016	4c 8d 44 24 30	 lea	 r8, QWORD PTR dwDesiredAccess$[rsp]
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PDJDBCCC@kik?$AA@
  00022	48 8b c8	 mov	 rcx, rax
  00025	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002a	85 c0		 test	 eax, eax
  0002c	75 07		 jne	 SHORT $LN2@winapi_Ope

; 856  :         return NULL;

  0002e	33 c0		 xor	 eax, eax

; 863  : }

  00030	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00034	c3		 ret	 0
$LN2@winapi_Ope:

; 857  : 
; 858  :     handle = OpenProcess(dwDesiredAccess, bInheritHandle, dwProcessId);

  00035	44 8b 44 24 60	 mov	 r8d, DWORD PTR dwProcessId$[rsp]
  0003a	8b 54 24 68	 mov	 edx, DWORD PTR bInheritHandle$[rsp]
  0003e	8b 4c 24 30	 mov	 ecx, DWORD PTR dwDesiredAccess$[rsp]
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OpenProcess

; 859  :     if (handle == NULL)

  00048	48 85 c0	 test	 rax, rax
  0004b	75 0c		 jne	 SHORT $LN1@winapi_Ope

; 860  :         return PyErr_SetFromWindowsErr(0);

  0004d	33 c9		 xor	 ecx, ecx
  0004f	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 863  : }

  00054	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00058	c3		 ret	 0
$LN1@winapi_Ope:

; 861  : 
; 862  :     return Py_BuildValue(F_HANDLE, handle);

  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01KNKLHLMO@K?$AA@
  00060	48 8b d0	 mov	 rdx, rax
  00063	e8 00 00 00 00	 call	 Py_BuildValue

; 863  : }

  00068	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006c	c3		 ret	 0
winapi_OpenProcess ENDP
_TEXT	ENDS
PUBLIC	??_C@_02PDIHAGKM@ii?$AA@			; `string'
PUBLIC	??_C@_03FGEJCPKM@Nii?$AA@			; `string'
PUBLIC	??_C@_0O@LFIBEFCP@negative?5size?$AA@		; `string'
PUBLIC	??_C@_0BC@GOHLNLNE@K?$HMi?3PeekNamedPipe?$AA@	; `string'
EXTRN	__imp_PeekNamedPipe:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_PeekNamedPipe DD imagerel winapi_PeekNamedPipe
	DD	imagerel winapi_PeekNamedPipe+82
	DD	imagerel $unwind$winapi_PeekNamedPipe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$winapi_PeekNamedPipe DD imagerel winapi_PeekNamedPipe+82
	DD	imagerel winapi_PeekNamedPipe+235
	DD	imagerel $chain$1$winapi_PeekNamedPipe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$winapi_PeekNamedPipe DD imagerel winapi_PeekNamedPipe+235
	DD	imagerel winapi_PeekNamedPipe+270
	DD	imagerel $chain$3$winapi_PeekNamedPipe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$winapi_PeekNamedPipe DD imagerel winapi_PeekNamedPipe+270
	DD	imagerel winapi_PeekNamedPipe+312
	DD	imagerel $chain$5$winapi_PeekNamedPipe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$winapi_PeekNamedPipe DD imagerel winapi_PeekNamedPipe+312
	DD	imagerel winapi_PeekNamedPipe+413
	DD	imagerel $chain$7$winapi_PeekNamedPipe
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$winapi_PeekNamedPipe DD 040021H
	DD	0a7400H
	DD	0c3400H
	DD	imagerel winapi_PeekNamedPipe
	DD	imagerel winapi_PeekNamedPipe+82
	DD	imagerel $unwind$winapi_PeekNamedPipe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$winapi_PeekNamedPipe DD 040021H
	DD	0a7400H
	DD	0c3400H
	DD	imagerel winapi_PeekNamedPipe
	DD	imagerel winapi_PeekNamedPipe+82
	DD	imagerel $unwind$winapi_PeekNamedPipe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$winapi_PeekNamedPipe DD 040021H
	DD	0a7400H
	DD	0c3400H
	DD	imagerel winapi_PeekNamedPipe
	DD	imagerel winapi_PeekNamedPipe+82
	DD	imagerel $unwind$winapi_PeekNamedPipe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$winapi_PeekNamedPipe DD 040a21H
	DD	0a740aH
	DD	0c3405H
	DD	imagerel winapi_PeekNamedPipe
	DD	imagerel winapi_PeekNamedPipe+82
	DD	imagerel $unwind$winapi_PeekNamedPipe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_PeekNamedPipe DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT ??_C@_02PDIHAGKM@ii?$AA@
CONST	SEGMENT
??_C@_02PDIHAGKM@ii?$AA@ DB 'ii', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FGEJCPKM@Nii?$AA@
CONST	SEGMENT
??_C@_03FGEJCPKM@Nii?$AA@ DB 'Nii', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LFIBEFCP@negative?5size?$AA@
CONST	SEGMENT
??_C@_0O@LFIBEFCP@negative?5size?$AA@ DB 'negative size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GOHLNLNE@K?$HMi?3PeekNamedPipe?$AA@
CONST	SEGMENT
??_C@_0BC@GOHLNLNE@K?$HMi?3PeekNamedPipe?$AA@ DB 'K|i:PeekNamedPipe', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_PeekNamedPipe
_TEXT	SEGMENT
navail$ = 48
nread$ = 52
buf$ = 56
handle$ = 64
self$ = 96
args$ = 104
size$ = 112
nleft$ = 120
winapi_PeekNamedPipe PROC				; COMDAT

; 867  : {

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 868  :     HANDLE handle;
; 869  :     int size = 0;

  00004	33 c9		 xor	 ecx, ecx
  00006	48 8b c2	 mov	 rax, rdx

; 870  :     PyObject *buf = NULL;
; 871  :     DWORD nread, navail, nleft;
; 872  :     BOOL ret;
; 873  : 
; 874  :     if (!PyArg_ParseTuple(args, F_HANDLE "|i:PeekNamedPipe" , &handle, &size))

  00009	4c 8d 4c 24 70	 lea	 r9, QWORD PTR size$[rsp]
  0000e	89 4c 24 70	 mov	 DWORD PTR size$[rsp], ecx
  00012	48 89 4c 24 38	 mov	 QWORD PTR buf$[rsp], rcx
  00017	4c 8d 44 24 40	 lea	 r8, QWORD PTR handle$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@GOHLNLNE@K?$HMi?3PeekNamedPipe?$AA@
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002b	85 c0		 test	 eax, eax

; 875  :         return NULL;

  0002d	74 1c		 je	 SHORT $LN15@winapi_Pee

; 876  : 
; 877  :     if (size < 0) {

  0002f	48 63 44 24 70	 movsxd	 rax, DWORD PTR size$[rsp]
  00034	85 c0		 test	 eax, eax
  00036	79 1a		 jns	 SHORT $LN7@winapi_Pee

; 878  :         PyErr_SetString(PyExc_ValueError, "negative size");

  00038	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@LFIBEFCP@negative?5size?$AA@
  00046	e8 00 00 00 00	 call	 PyErr_SetString
$LN15@winapi_Pee:

; 879  :         return NULL;

  0004b	33 c0		 xor	 eax, eax

; 906  :     }
; 907  : }

  0004d	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00051	c3		 ret	 0
$LN7@winapi_Pee:
  00052	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  00057	48 89 7c 24 50	 mov	 QWORD PTR [rsp+80], rdi

; 880  :     }
; 881  : 
; 882  :     if (size) {

  0005c	85 c0		 test	 eax, eax
  0005e	0f 84 d4 00 00
	00		 je	 $LN6@winapi_Pee

; 883  :         buf = PyBytes_FromStringAndSize(NULL, size);

  00064	48 8b d0	 mov	 rdx, rax
  00067	33 c9		 xor	 ecx, ecx
  00069	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0006e	48 89 44 24 38	 mov	 QWORD PTR buf$[rsp], rax

; 884  :         if (!buf)

  00073	48 85 c0	 test	 rax, rax

; 885  :             return NULL;

  00076	0f 84 81 00 00
	00		 je	 $LN14@winapi_Pee

; 886  :         Py_BEGIN_ALLOW_THREADS

  0007c	e8 00 00 00 00	 call	 PyEval_SaveThread

; 887  :         ret = PeekNamedPipe(handle, PyBytes_AS_STRING(buf), size, &nread,
; 888  :                             &navail, &nleft);

  00081	48 8b 54 24 38	 mov	 rdx, QWORD PTR buf$[rsp]
  00086	44 8b 44 24 70	 mov	 r8d, DWORD PTR size$[rsp]
  0008b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR handle$[rsp]
  00090	48 8b f8	 mov	 rdi, rax
  00093	48 8d 44 24 78	 lea	 rax, QWORD PTR nleft$[rsp]
  00098	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0009d	48 8d 44 24 30	 lea	 rax, QWORD PTR navail$[rsp]
  000a2	4c 8d 4c 24 34	 lea	 r9, QWORD PTR nread$[rsp]
  000a7	48 83 c2 78	 add	 rdx, 120		; 00000078H
  000ab	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekNamedPipe

; 889  :         Py_END_ALLOW_THREADS

  000b6	48 8b cf	 mov	 rcx, rdi
  000b9	8b d8		 mov	 ebx, eax
  000bb	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 890  :         if (!ret) {

  000c0	85 db		 test	 ebx, ebx
  000c2	75 27		 jne	 SHORT $LN4@winapi_Pee

; 891  :             Py_DECREF(buf);

  000c4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR buf$[rsp]
  000c9	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@winapi_Pee:

; 892  :             return PyErr_SetExcFromWindowsErr(PyExc_IOError, 0);

  000ce	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  000d5	33 d2		 xor	 edx, edx
  000d7	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErr
  000dc	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  000e1	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 906  :     }
; 907  : }

  000e6	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000ea	c3		 ret	 0
$LN4@winapi_Pee:

; 893  :         }
; 894  :         if (_PyBytes_Resize(&buf, nread))

  000eb	8b 54 24 34	 mov	 edx, DWORD PTR nread$[rsp]
  000ef	48 8d 4c 24 38	 lea	 rcx, QWORD PTR buf$[rsp]
  000f4	e8 00 00 00 00	 call	 _PyBytes_Resize
  000f9	85 c0		 test	 eax, eax
  000fb	74 11		 je	 SHORT $LN3@winapi_Pee
$LN14@winapi_Pee:
  000fd	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00102	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 895  :             return NULL;

  00107	33 c0		 xor	 eax, eax

; 906  :     }
; 907  : }

  00109	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0010d	c3		 ret	 0
$LN3@winapi_Pee:

; 896  :         return Py_BuildValue("Nii", buf, navail, nleft);

  0010e	44 8b 4c 24 78	 mov	 r9d, DWORD PTR nleft$[rsp]
  00113	44 8b 44 24 30	 mov	 r8d, DWORD PTR navail$[rsp]
  00118	48 8b 54 24 38	 mov	 rdx, QWORD PTR buf$[rsp]
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03FGEJCPKM@Nii?$AA@
  00124	e8 00 00 00 00	 call	 Py_BuildValue
  00129	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0012e	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 906  :     }
; 907  : }

  00133	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00137	c3		 ret	 0
$LN6@winapi_Pee:

; 897  :     }
; 898  :     else {
; 899  :         Py_BEGIN_ALLOW_THREADS

  00138	e8 00 00 00 00	 call	 PyEval_SaveThread

; 900  :         ret = PeekNamedPipe(handle, NULL, 0, NULL, &navail, &nleft);

  0013d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR handle$[rsp]
  00142	45 33 c9	 xor	 r9d, r9d
  00145	48 8b f8	 mov	 rdi, rax
  00148	48 8d 44 24 78	 lea	 rax, QWORD PTR nleft$[rsp]
  0014d	45 33 c0	 xor	 r8d, r8d
  00150	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00155	48 8d 44 24 30	 lea	 rax, QWORD PTR navail$[rsp]
  0015a	33 d2		 xor	 edx, edx
  0015c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00161	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekNamedPipe

; 901  :         Py_END_ALLOW_THREADS

  00167	48 8b cf	 mov	 rcx, rdi
  0016a	8b d8		 mov	 ebx, eax
  0016c	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 902  :         if (!ret) {

  00171	85 db		 test	 ebx, ebx

; 903  :             return PyErr_SetExcFromWindowsErr(PyExc_IOError, 0);

  00173	0f 84 55 ff ff
	ff		 je	 $LN13@winapi_Pee

; 904  :         }
; 905  :         return Py_BuildValue("ii", navail, nleft);

  00179	44 8b 44 24 78	 mov	 r8d, DWORD PTR nleft$[rsp]
  0017e	8b 54 24 30	 mov	 edx, DWORD PTR navail$[rsp]
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02PDIHAGKM@ii?$AA@
  00189	e8 00 00 00 00	 call	 Py_BuildValue
  0018e	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00193	48 8b 7c 24 50	 mov	 rdi, QWORD PTR [rsp+80]

; 906  :     }
; 907  : }

  00198	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0019c	c3		 ret	 0
winapi_PeekNamedPipe ENDP
_TEXT	ENDS
PUBLIC	??_C@_02FLABHCGL@NI?$AA@			; `string'
PUBLIC	??_C@_0O@GOHKJJFP@Ki?$HMi?3ReadFile?$AA@	; `string'
EXTRN	__imp_ReadFile:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_ReadFile DD imagerel winapi_ReadFile
	DD	imagerel winapi_ReadFile+166
	DD	imagerel $unwind$winapi_ReadFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$winapi_ReadFile DD imagerel winapi_ReadFile+166
	DD	imagerel winapi_ReadFile+250
	DD	imagerel $chain$1$winapi_ReadFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$winapi_ReadFile DD imagerel winapi_ReadFile+250
	DD	imagerel winapi_ReadFile+358
	DD	imagerel $chain$2$winapi_ReadFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$winapi_ReadFile DD imagerel winapi_ReadFile+358
	DD	imagerel winapi_ReadFile+397
	DD	imagerel $chain$4$winapi_ReadFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$winapi_ReadFile DD imagerel winapi_ReadFile+397
	DD	imagerel winapi_ReadFile+436
	DD	imagerel $chain$6$winapi_ReadFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$winapi_ReadFile DD 020021H
	DD	0f6400H
	DD	imagerel winapi_ReadFile
	DD	imagerel winapi_ReadFile+166
	DD	imagerel $unwind$winapi_ReadFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$winapi_ReadFile DD 020021H
	DD	0f6400H
	DD	imagerel winapi_ReadFile
	DD	imagerel winapi_ReadFile+166
	DD	imagerel $unwind$winapi_ReadFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$winapi_ReadFile DD 020021H
	DD	0f6400H
	DD	imagerel winapi_ReadFile
	DD	imagerel winapi_ReadFile+166
	DD	imagerel $unwind$winapi_ReadFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$winapi_ReadFile DD 040a21H
	DD	0f640aH
	DD	0e5405H
	DD	imagerel winapi_ReadFile
	DD	imagerel winapi_ReadFile+166
	DD	imagerel $unwind$winapi_ReadFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_ReadFile DD 040c01H
	DD	010340cH
	DD	07008b20cH
xdata	ENDS
;	COMDAT ??_C@_02FLABHCGL@NI?$AA@
CONST	SEGMENT
??_C@_02FLABHCGL@NI?$AA@ DB 'NI', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GOHKJJFP@Ki?$HMi?3ReadFile?$AA@
CONST	SEGMENT
??_C@_0O@GOHKJJFP@Ki?$HMi?3ReadFile?$AA@ DB 'Ki|i:ReadFile', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_ReadFile
_TEXT	SEGMENT
size$ = 64
nread$ = 68
buf$ = 72
handle$ = 80
self$ = 112
args$ = 120
kwds$ = 128
use_overlapped$ = 136
winapi_ReadFile PROC					; COMDAT

; 911  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 18	 mov	 QWORD PTR [r11+24], rbx
  00007	57		 push	 rdi
  00008	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 912  :     HANDLE handle;
; 913  :     int size;
; 914  :     DWORD nread;
; 915  :     PyObject *buf;
; 916  :     BOOL ret;
; 917  :     int use_overlapped = 0;
; 918  :     DWORD err;
; 919  :     OverlappedObject *overlapped = NULL;
; 920  :     static char *kwlist[] = {"handle", "size", "overlapped", NULL};
; 921  : 
; 922  :     if (!PyArg_ParseTupleAndKeywords(args, kwds,
; 923  :                                      F_HANDLE "i|i:ReadFile", kwlist,
; 924  :                                      &handle, &size, &use_overlapped))

  0000c	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  00010	49 8b c0	 mov	 rax, r8
  00013	4c 8b d2	 mov	 r10, rdx
  00016	49 89 4b c8	 mov	 QWORD PTR [r11-56], rcx
  0001a	49 8d 4b d8	 lea	 rcx, QWORD PTR [r11-40]
  0001e	33 ff		 xor	 edi, edi
  00020	49 89 4b c0	 mov	 QWORD PTR [r11-64], rcx
  00024	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  00028	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??winapi_ReadFile@@9@9
  0002f	49 89 4b b8	 mov	 QWORD PTR [r11-72], rcx
  00033	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@GOHKJJFP@Ki?$HMi?3ReadFile?$AA@
  0003a	48 8b d0	 mov	 rdx, rax
  0003d	49 8b ca	 mov	 rcx, r10
  00040	41 89 7b 20	 mov	 DWORD PTR [r11+32], edi
  00044	8b df		 mov	 ebx, edi
  00046	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0004b	85 c0		 test	 eax, eax

; 925  :         return NULL;

  0004d	74 3b		 je	 SHORT $LN21@winapi_Rea

; 926  : 
; 927  :     buf = PyBytes_FromStringAndSize(NULL, size);

  0004f	48 63 54 24 40	 movsxd	 rdx, DWORD PTR size$[rsp]
  00054	33 c9		 xor	 ecx, ecx
  00056	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0005b	48 89 44 24 48	 mov	 QWORD PTR buf$[rsp], rax

; 928  :     if (!buf)

  00060	48 85 c0	 test	 rax, rax

; 929  :         return NULL;

  00063	74 25		 je	 SHORT $LN21@winapi_Rea

; 930  :     if (use_overlapped) {

  00065	39 9c 24 88 00
	00 00		 cmp	 DWORD PTR use_overlapped$[rsp], ebx
  0006c	74 38		 je	 SHORT $LN9@winapi_Rea

; 931  :         overlapped = new_overlapped(handle);

  0006e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR handle$[rsp]
  00073	e8 00 00 00 00	 call	 new_overlapped
  00078	48 8b d8	 mov	 rbx, rax

; 932  :         if (!overlapped) {

  0007b	48 85 c0	 test	 rax, rax
  0007e	75 1a		 jne	 SHORT $LN8@winapi_Rea

; 933  :             Py_DECREF(buf);

  00080	48 8b 4c 24 48	 mov	 rcx, QWORD PTR buf$[rsp]
  00085	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@winapi_Rea:

; 934  :             return NULL;

  0008a	33 c0		 xor	 eax, eax

; 966  : }

  0008c	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  00094	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00098	5f		 pop	 rdi
  00099	c3		 ret	 0
$LN8@winapi_Rea:

; 935  :         }
; 936  :         /* Steals reference to buf */
; 937  :         overlapped->read_buffer = buf;

  0009a	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  0009f	48 89 83 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rax
$LN9@winapi_Rea:

; 938  :     }
; 939  : 
; 940  :     Py_BEGIN_ALLOW_THREADS

  000a6	48 89 6c 24 70	 mov	 QWORD PTR [rsp+112], rbp
  000ab	48 89 74 24 78	 mov	 QWORD PTR [rsp+120], rsi
  000b0	e8 00 00 00 00	 call	 PyEval_SaveThread

; 941  :     ret = ReadFile(handle, PyBytes_AS_STRING(buf), size, &nread,
; 942  :                    overlapped ? &overlapped->overlapped : NULL);

  000b5	48 8d 4b 60	 lea	 rcx, QWORD PTR [rbx+96]
  000b9	48 8b e8	 mov	 rbp, rax
  000bc	48 85 db	 test	 rbx, rbx
  000bf	75 03		 jne	 SHORT $LN15@winapi_Rea
  000c1	48 8b cf	 mov	 rcx, rdi
$LN15@winapi_Rea:
  000c4	48 8b 54 24 48	 mov	 rdx, QWORD PTR buf$[rsp]
  000c9	44 8b 44 24 40	 mov	 r8d, DWORD PTR size$[rsp]
  000ce	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000d3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR handle$[rsp]
  000d8	4c 8d 4c 24 44	 lea	 r9, QWORD PTR nread$[rsp]
  000dd	48 83 c2 78	 add	 rdx, 120		; 00000078H
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile

; 943  :     Py_END_ALLOW_THREADS

  000e7	48 8b cd	 mov	 rcx, rbp
  000ea	8b f0		 mov	 esi, eax
  000ec	e8 00 00 00 00	 call	 PyEval_RestoreThread
  000f1	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]

; 944  : 
; 945  :     err = ret ? 0 : GetLastError();

  000f6	85 f6		 test	 esi, esi
  000f8	75 08		 jne	 SHORT $LN17@winapi_Rea
  000fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00100	8b f8		 mov	 edi, eax
$LN17@winapi_Rea:

; 946  : 
; 947  :     if (overlapped) {

  00102	48 85 db	 test	 rbx, rbx
  00105	74 28		 je	 SHORT $LN7@winapi_Rea

; 948  :         if (!ret) {

  00107	85 f6		 test	 esi, esi
  00109	75 12		 jne	 SHORT $LN3@winapi_Rea

; 949  :             if (err == ERROR_IO_PENDING)

  0010b	81 ff e5 03 00
	00		 cmp	 edi, 997		; 000003e5H
  00111	75 0f		 jne	 SHORT $LN5@winapi_Rea

; 950  :                 overlapped->pending = 1;

  00113	c7 83 88 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rbx+136], 1
$LN3@winapi_Rea:

; 954  :             }
; 955  :         }
; 956  :         return Py_BuildValue("NI", (PyObject *) overlapped, err);

  0011d	48 8b d3	 mov	 rdx, rbx
  00120	eb 70		 jmp	 SHORT $LN19@winapi_Rea
$LN5@winapi_Rea:

; 951  :             else if (err != ERROR_MORE_DATA) {

  00122	81 ff ea 00 00
	00		 cmp	 edi, 234		; 000000eaH
  00128	74 f3		 je	 SHORT $LN3@winapi_Rea

; 952  :                 Py_DECREF(overlapped);

  0012a	48 8b cb	 mov	 rcx, rbx

; 953  :                 return PyErr_SetExcFromWindowsErr(PyExc_IOError, 0);

  0012d	eb 11		 jmp	 SHORT $LN20@winapi_Rea
$LN7@winapi_Rea:

; 957  :     }
; 958  : 
; 959  :     if (!ret && err != ERROR_MORE_DATA) {

  0012f	85 f6		 test	 esi, esi
  00131	75 33		 jne	 SHORT $LN2@winapi_Rea
  00133	81 ff ea 00 00
	00		 cmp	 edi, 234		; 000000eaH
  00139	74 2b		 je	 SHORT $LN2@winapi_Rea

; 960  :         Py_DECREF(buf);

  0013b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR buf$[rsp]
$LN20@winapi_Rea:
  00140	e8 00 00 00 00	 call	 _Py_DecRef

; 961  :         return PyErr_SetExcFromWindowsErr(PyExc_IOError, 0);

  00145	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  0014c	33 d2		 xor	 edx, edx
  0014e	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErr
  00153	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]

; 966  : }

  00158	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  00160	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00164	5f		 pop	 rdi
  00165	c3		 ret	 0
$LN2@winapi_Rea:

; 962  :     }
; 963  :     if (_PyBytes_Resize(&buf, nread))

  00166	8b 54 24 44	 mov	 edx, DWORD PTR nread$[rsp]
  0016a	48 8d 4c 24 48	 lea	 rcx, QWORD PTR buf$[rsp]
  0016f	e8 00 00 00 00	 call	 _PyBytes_Resize
  00174	85 c0		 test	 eax, eax
  00176	74 15		 je	 SHORT $LN1@winapi_Rea

; 964  :         return NULL;

  00178	33 c0		 xor	 eax, eax
  0017a	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]

; 966  : }

  0017f	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  00187	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0018b	5f		 pop	 rdi
  0018c	c3		 ret	 0
$LN1@winapi_Rea:

; 965  :     return Py_BuildValue("NI", buf, err);

  0018d	48 8b 54 24 48	 mov	 rdx, QWORD PTR buf$[rsp]
$LN19@winapi_Rea:
  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02FLABHCGL@NI?$AA@
  00199	44 8b c7	 mov	 r8d, edi
  0019c	e8 00 00 00 00	 call	 Py_BuildValue
  001a1	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]

; 966  : }

  001a6	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  001ae	48 83 c4 60	 add	 rsp, 96			; 00000060H
  001b2	5f		 pop	 rdi
  001b3	c3		 ret	 0
winapi_ReadFile ENDP
_TEXT	ENDS
PUBLIC	??_C@_04NJKOLAOG@KOOO?$AA@			; `string'
EXTRN	__imp_SetNamedPipeHandleState:PROC
EXTRN	PyLong_AsUnsignedLongMask:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$winapi_SetNamedPipeHandleState DD imagerel winapi_SetNamedPipeHandleState
	DD	imagerel winapi_SetNamedPipeHandleState+327
	DD	imagerel $unwind$winapi_SetNamedPipeHandleState
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_SetNamedPipeHandleState DD 086401H
	DD	0137464H
	DD	011645cH
	DD	0105454H
	DD	03004d208H
xdata	ENDS
;	COMDAT ??_C@_04NJKOLAOG@KOOO?$AA@
CONST	SEGMENT
??_C@_04NJKOLAOG@KOOO?$AA@ DB 'KOOO', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_winapi.c
CONST	ENDS
;	COMDAT winapi_SetNamedPipeHandleState
_TEXT	SEGMENT
dwArgs$ = 48
pArgs$ = 64
oArgs$ = 88
self$ = 128
args$ = 136
hNamedPipe$ = 144
winapi_SetNamedPipeHandleState PROC			; COMDAT

; 970  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	48 83 ec 70	 sub	 rsp, 112		; 00000070H

; 971  :     HANDLE hNamedPipe;
; 972  :     PyObject *oArgs[3];
; 973  :     DWORD dwArgs[3], *pArgs[3] = {NULL, NULL, NULL};
; 974  :     int i;
; 975  : 
; 976  :     if (!PyArg_ParseTuple(args, F_HANDLE "OOO",
; 977  :                           &hNamedPipe, &oArgs[0], &oArgs[1], &oArgs[2]))

  00008	49 8d 4b f0	 lea	 rcx, QWORD PTR [r11-16]
  0000c	48 8b c2	 mov	 rax, rdx
  0000f	33 db		 xor	 ebx, ebx
  00011	49 89 4b b0	 mov	 QWORD PTR [r11-80], rcx
  00015	49 8d 4b e8	 lea	 rcx, QWORD PTR [r11-24]
  00019	4d 8d 4b e0	 lea	 r9, QWORD PTR [r11-32]
  0001d	49 89 4b a8	 mov	 QWORD PTR [r11-88], rcx
  00021	4d 8d 43 18	 lea	 r8, QWORD PTR [r11+24]
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04NJKOLAOG@KOOO?$AA@
  0002c	48 8b c8	 mov	 rcx, rax
  0002f	49 89 5b c8	 mov	 QWORD PTR [r11-56], rbx
  00033	49 89 5b d0	 mov	 QWORD PTR [r11-48], rbx
  00037	49 89 5b d8	 mov	 QWORD PTR [r11-40], rbx
  0003b	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00040	85 c0		 test	 eax, eax
  00042	75 08		 jne	 SHORT $LN7@winapi_Set

; 978  :         return NULL;

  00044	33 c0		 xor	 eax, eax

; 995  : }

  00046	48 83 c4 70	 add	 rsp, 112		; 00000070H
  0004a	5b		 pop	 rbx
  0004b	c3		 ret	 0
$LN7@winapi_Set:
  0004c	48 89 ac 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbp
  00054	48 89 b4 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rsi
  0005c	48 89 bc 24 98
	00 00 00	 mov	 QWORD PTR [rsp+152], rdi

; 979  : 
; 980  :     PyErr_Clear();

  00064	e8 00 00 00 00	 call	 PyErr_Clear
  00069	48 8d 74 24 30	 lea	 rsi, QWORD PTR dwArgs$[rsp]

; 981  : 
; 982  :     for (i = 0 ; i < 3 ; i++) {

  0006e	48 8b fb	 mov	 rdi, rbx
  00071	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_Py_NoneStruct
  00078	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL6@winapi_Set:

; 983  :         if (oArgs[i] != Py_None) {

  00080	48 8b 4c 3c 58	 mov	 rcx, QWORD PTR oArgs$[rsp+rdi]
  00085	48 3b cd	 cmp	 rcx, rbp
  00088	74 1e		 je	 SHORT $LN5@winapi_Set

; 984  :             dwArgs[i] = PyLong_AsUnsignedLongMask(oArgs[i]);

  0008a	e8 00 00 00 00	 call	 PyLong_AsUnsignedLongMask
  0008f	89 06		 mov	 DWORD PTR [rsi], eax

; 985  :             if (PyErr_Occurred())

  00091	e8 00 00 00 00	 call	 PyErr_Occurred
  00096	48 85 c0	 test	 rax, rax
  00099	75 46		 jne	 SHORT $LN15@winapi_Set

; 987  :             pArgs[i] = &dwArgs[i];

  0009b	48 63 c3	 movsxd	 rax, ebx
  0009e	48 8d 4c 84 30	 lea	 rcx, QWORD PTR dwArgs$[rsp+rax*4]
  000a3	48 89 4c 3c 40	 mov	 QWORD PTR pArgs$[rsp+rdi], rcx
$LN5@winapi_Set:

; 981  : 
; 982  :     for (i = 0 ; i < 3 ; i++) {

  000a8	ff c3		 inc	 ebx
  000aa	48 83 c6 04	 add	 rsi, 4
  000ae	48 83 c7 08	 add	 rdi, 8
  000b2	83 fb 03	 cmp	 ebx, 3
  000b5	7c c9		 jl	 SHORT $LL6@winapi_Set

; 988  :         }
; 989  :     }
; 990  : 
; 991  :     if (!SetNamedPipeHandleState(hNamedPipe, pArgs[0], pArgs[1], pArgs[2]))

  000b7	4c 8b 4c 24 50	 mov	 r9, QWORD PTR pArgs$[rsp+16]
  000bc	4c 8b 44 24 48	 mov	 r8, QWORD PTR pArgs$[rsp+8]
  000c1	48 8b 54 24 40	 mov	 rdx, QWORD PTR pArgs$[rsp]
  000c6	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR hNamedPipe$[rsp]
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetNamedPipeHandleState
  000d4	85 c0		 test	 eax, eax
  000d6	75 0d		 jne	 SHORT $LN1@winapi_Set

; 992  :         return PyErr_SetFromWindowsErr(0);

  000d8	33 c9		 xor	 ecx, ecx
  000da	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  000df	eb 48		 jmp	 SHORT $LN20@winapi_Set
$LN15@winapi_Set:

; 986  :                 return NULL;

  000e1	33 c0		 xor	 eax, eax
  000e3	eb 44		 jmp	 SHORT $LN20@winapi_Set
$LN1@winapi_Set:

; 993  : 
; 994  :     Py_RETURN_NONE;

  000e5	e8 00 00 00 00	 call	 _Py_PXCTX
  000ea	85 c0		 test	 eax, eax
  000ec	75 38		 jne	 SHORT $LN11@winapi_Set
  000ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000fc	4c 8b cd	 mov	 r9, rbp
  000ff	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00105	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0010d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00112	85 c0		 test	 eax, eax
  00114	75 09		 jne	 SHORT $LN10@winapi_Set
  00116	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  0011d	74 07		 je	 SHORT $LN11@winapi_Set
$LN10@winapi_Set:
  0011f	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN11@winapi_Set:
  00126	48 8b c5	 mov	 rax, rbp
$LN20@winapi_Set:
  00129	48 8b b4 24 88
	00 00 00	 mov	 rsi, QWORD PTR [rsp+136]
  00131	48 8b ac 24 80
	00 00 00	 mov	 rbp, QWORD PTR [rsp+128]
  00139	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR [rsp+152]

; 995  : }

  00141	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00145	5b		 pop	 rbx
  00146	c3		 ret	 0
winapi_SetNamedPipeHandleState ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@INMEKOFM@KI?3TerminateProcess?$AA@	; `string'
EXTRN	__imp_TerminateProcess:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$winapi_TerminateProcess DD imagerel winapi_TerminateProcess
	DD	imagerel winapi_TerminateProcess+158
	DD	imagerel $unwind$winapi_TerminateProcess
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_TerminateProcess DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BE@INMEKOFM@KI?3TerminateProcess?$AA@
CONST	SEGMENT
??_C@_0BE@INMEKOFM@KI?3TerminateProcess?$AA@ DB 'KI:TerminateProcess', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_winapi.c
CONST	ENDS
;	COMDAT winapi_TerminateProcess
_TEXT	SEGMENT
self$ = 64
args$ = 72
exit_code$ = 80
process$ = 88
winapi_TerminateProcess PROC				; COMDAT

; 1004 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1005 :     BOOL result;
; 1006 : 
; 1007 :     HANDLE process;
; 1008 :     UINT exit_code;
; 1009 :     if (! PyArg_ParseTuple(args, F_HANDLE F_UINT ":TerminateProcess",
; 1010 :                            &process, &exit_code))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 50	 lea	 r9, QWORD PTR exit_code$[rsp]
  0000c	4c 8d 44 24 58	 lea	 r8, QWORD PTR process$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@INMEKOFM@KI?3TerminateProcess?$AA@
  00018	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001d	85 c0		 test	 eax, eax
  0001f	75 07		 jne	 SHORT $LN2@winapi_Ter

; 1011 :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 1020 : }

  00023	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00027	c3		 ret	 0
$LN2@winapi_Ter:

; 1012 : 
; 1013 :     result = TerminateProcess(process, exit_code);

  00028	8b 54 24 50	 mov	 edx, DWORD PTR exit_code$[rsp]
  0002c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR process$[rsp]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TerminateProcess

; 1014 : 
; 1015 :     if (! result)

  00037	85 c0		 test	 eax, eax
  00039	75 12		 jne	 SHORT $LN1@winapi_Ter

; 1016 :         return PyErr_SetFromWindowsErr(GetLastError());

  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 1020 : }

  00048	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004c	c3		 ret	 0
$LN1@winapi_Ter:

; 1017 : 
; 1018 :     Py_INCREF(Py_None);

  0004d	e8 00 00 00 00	 call	 _Py_PXCTX
  00052	85 c0		 test	 eax, eax
  00054	75 3c		 jne	 SHORT $LN6@winapi_Ter
  00056	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0006b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00071	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00079	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007e	85 c0		 test	 eax, eax
  00080	75 09		 jne	 SHORT $LN5@winapi_Ter
  00082	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00089	74 07		 je	 SHORT $LN6@winapi_Ter
$LN5@winapi_Ter:
  0008b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@winapi_Ter:

; 1019 :     return Py_None;

  00092	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1020 : }

  00099	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009d	c3		 ret	 0
winapi_TerminateProcess ENDP
_TEXT	ENDS
PUBLIC	??_C@_02NAAAECII@sk?$AA@			; `string'
EXTRN	__imp_WaitNamedPipeA:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$winapi_WaitNamedPipe DD imagerel winapi_WaitNamedPipe
	DD	imagerel winapi_WaitNamedPipe+40
	DD	imagerel $unwind$winapi_WaitNamedPipe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$winapi_WaitNamedPipe DD imagerel winapi_WaitNamedPipe+40
	DD	imagerel winapi_WaitNamedPipe+97
	DD	imagerel $chain$1$winapi_WaitNamedPipe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$winapi_WaitNamedPipe DD imagerel winapi_WaitNamedPipe+97
	DD	imagerel winapi_WaitNamedPipe+190
	DD	imagerel $chain$2$winapi_WaitNamedPipe
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$winapi_WaitNamedPipe DD 021H
	DD	imagerel winapi_WaitNamedPipe
	DD	imagerel winapi_WaitNamedPipe+40
	DD	imagerel $unwind$winapi_WaitNamedPipe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$winapi_WaitNamedPipe DD 040a21H
	DD	06740aH
	DD	083405H
	DD	imagerel winapi_WaitNamedPipe
	DD	imagerel winapi_WaitNamedPipe+40
	DD	imagerel $unwind$winapi_WaitNamedPipe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_WaitNamedPipe DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_02NAAAECII@sk?$AA@
CONST	SEGMENT
??_C@_02NAAAECII@sk?$AA@ DB 'sk', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\_winapi.c
CONST	ENDS
;	COMDAT winapi_WaitNamedPipe
_TEXT	SEGMENT
self$ = 64
args$ = 72
nTimeOut$ = 80
lpNamedPipeName$ = 88
winapi_WaitNamedPipe PROC				; COMDAT

; 1024 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1025 :     LPCTSTR lpNamedPipeName;
; 1026 :     DWORD nTimeOut;
; 1027 :     BOOL success;
; 1028 : 
; 1029 :     if (!PyArg_ParseTuple(args, "s" F_DWORD, &lpNamedPipeName, &nTimeOut))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 50	 lea	 r9, QWORD PTR nTimeOut$[rsp]
  0000c	4c 8d 44 24 58	 lea	 r8, QWORD PTR lpNamedPipeName$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02NAAAECII@sk?$AA@
  00018	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001d	85 c0		 test	 eax, eax
  0001f	75 07		 jne	 SHORT $LN2@winapi_Wai

; 1030 :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 1040 : }

  00023	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00027	c3		 ret	 0
$LN2@winapi_Wai:
  00028	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0002d	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi

; 1031 : 
; 1032 :     Py_BEGIN_ALLOW_THREADS

  00032	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1033 :     success = WaitNamedPipe(lpNamedPipeName, nTimeOut);

  00037	8b 54 24 50	 mov	 edx, DWORD PTR nTimeOut$[rsp]
  0003b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR lpNamedPipeName$[rsp]
  00040	48 8b f8	 mov	 rdi, rax
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitNamedPipeA

; 1034 :     Py_END_ALLOW_THREADS

  00049	48 8b cf	 mov	 rcx, rdi
  0004c	8b d8		 mov	 ebx, eax
  0004e	e8 00 00 00 00	 call	 PyEval_RestoreThread
  00053	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 1035 : 
; 1036 :     if (!success)

  00058	85 db		 test	 ebx, ebx
  0005a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0005f	75 0c		 jne	 SHORT $LN1@winapi_Wai

; 1037 :         return PyErr_SetFromWindowsErr(0);

  00061	33 c9		 xor	 ecx, ecx
  00063	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 1040 : }

  00068	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006c	c3		 ret	 0
$LN1@winapi_Wai:

; 1038 : 
; 1039 :     Py_RETURN_NONE;

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	85 c0		 test	 eax, eax
  00074	75 3c		 jne	 SHORT $LN6@winapi_Wai
  00076	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00084	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0008b	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00091	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00099	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009e	85 c0		 test	 eax, eax
  000a0	75 09		 jne	 SHORT $LN5@winapi_Wai
  000a2	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  000a9	74 07		 je	 SHORT $LN6@winapi_Wai
$LN5@winapi_Wai:
  000ab	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN6@winapi_Wai:
  000b2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1040 : }

  000b9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bd	c3		 ret	 0
winapi_WaitNamedPipe ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DH@HEKFKPEM@need?5at?5most?5?$CFzd?5handles?0?5got?5a?5@ ; `string'
PUBLIC	??_C@_0CB@HMCKAPPK@sequence?5type?5expected?0?5got?5?8?$CFs?8@ ; `string'
PUBLIC	??_C@_0BM@JDIOBABC@Oi?$HMk?3WaitForMultipleObjects?$AA@ ; `string'
EXTRN	PyLong_FromLong:PROC
EXTRN	PyErr_SetFromErrno:PROC
EXTRN	__imp__errno:PROC
EXTRN	__imp_WaitForMultipleObjects:PROC
EXTRN	__imp_ResetEvent:PROC
EXTRN	_PyOS_SigintEvent:PROC
EXTRN	_PyOS_IsMainThread:PROC
EXTRN	PyArg_Parse:PROC
EXTRN	PySequence_GetItem:PROC
EXTRN	PySequence_Size:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PySequence_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_WaitForMultipleObjects DD imagerel winapi_WaitForMultipleObjects
	DD	imagerel winapi_WaitForMultipleObjects+123
	DD	imagerel $unwind$winapi_WaitForMultipleObjects
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$winapi_WaitForMultipleObjects DD imagerel winapi_WaitForMultipleObjects+123
	DD	imagerel winapi_WaitForMultipleObjects+418
	DD	imagerel $chain$2$winapi_WaitForMultipleObjects
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$winapi_WaitForMultipleObjects DD imagerel winapi_WaitForMultipleObjects+418
	DD	imagerel winapi_WaitForMultipleObjects+479
	DD	imagerel $chain$4$winapi_WaitForMultipleObjects
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$winapi_WaitForMultipleObjects DD imagerel winapi_WaitForMultipleObjects+479
	DD	imagerel winapi_WaitForMultipleObjects+526
	DD	imagerel $chain$5$winapi_WaitForMultipleObjects
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$winapi_WaitForMultipleObjects DD 020021H
	DD	0487400H
	DD	imagerel winapi_WaitForMultipleObjects
	DD	imagerel winapi_WaitForMultipleObjects+123
	DD	imagerel $unwind$winapi_WaitForMultipleObjects
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$winapi_WaitForMultipleObjects DD 060021H
	DD	0487400H
	DD	0496400H
	DD	04c3400H
	DD	imagerel winapi_WaitForMultipleObjects
	DD	imagerel winapi_WaitForMultipleObjects+123
	DD	imagerel $unwind$winapi_WaitForMultipleObjects
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$winapi_WaitForMultipleObjects DD 063421H
	DD	0496434H
	DD	04c342cH
	DD	0487408H
	DD	imagerel winapi_WaitForMultipleObjects
	DD	imagerel winapi_WaitForMultipleObjects+123
	DD	imagerel $unwind$winapi_WaitForMultipleObjects
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_WaitForMultipleObjects DD 030b01H
	DD	04a010bH
	DD	05004H
xdata	ENDS
;	COMDAT ??_C@_0DH@HEKFKPEM@need?5at?5most?5?$CFzd?5handles?0?5got?5a?5@
CONST	SEGMENT
??_C@_0DH@HEKFKPEM@need?5at?5most?5?$CFzd?5handles?0?5got?5a?5@ DB 'need '
	DB	'at most %zd handles, got a sequence of length %zd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HMCKAPPK@sequence?5type?5expected?0?5got?5?8?$CFs?8@
CONST	SEGMENT
??_C@_0CB@HMCKAPPK@sequence?5type?5expected?0?5got?5?8?$CFs?8@ DB 'sequen'
	DB	'ce type expected, got ''%s''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JDIOBABC@Oi?$HMk?3WaitForMultipleObjects?$AA@
CONST	SEGMENT
??_C@_0BM@JDIOBABC@Oi?$HMk?3WaitForMultipleObjects?$AA@ DB 'Oi|k:WaitForM'
	DB	'ultipleObjects', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_WaitForMultipleObjects
_TEXT	SEGMENT
handle_seq$ = 48
h$121206 = 56
handles$ = 64
self$ = 608
args$ = 616
milliseconds$ = 624
wait_flag$ = 632
winapi_WaitForMultipleObjects PROC			; COMDAT

; 1044 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	55		 push	 rbp
  00004	48 81 ec 50 02
	00 00		 sub	 rsp, 592		; 00000250H

; 1045 :     DWORD result;
; 1046 :     PyObject *handle_seq;
; 1047 :     HANDLE handles[MAXIMUM_WAIT_OBJECTS];
; 1048 :     HANDLE sigint_event = NULL;
; 1049 :     Py_ssize_t nhandles, i;
; 1050 :     BOOL wait_flag;
; 1051 :     DWORD milliseconds = INFINITE;
; 1052 : 
; 1053 :     if (!PyArg_ParseTuple(args, "O" F_BOOL "|" F_DWORD
; 1054 :                           ":WaitForMultipleObjects",
; 1055 :                           &handle_seq, &wait_flag, &milliseconds))

  0000b	49 8d 4b 18	 lea	 rcx, QWORD PTR [r11+24]
  0000f	48 8b c2	 mov	 rax, rdx
  00012	4d 8d 4b 20	 lea	 r9, QWORD PTR [r11+32]
  00016	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0001b	4c 8d 44 24 30	 lea	 r8, QWORD PTR handle_seq$[rsp]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@JDIOBABC@Oi?$HMk?3WaitForMultipleObjects?$AA@
  00027	48 8b c8	 mov	 rcx, rax
  0002a	33 ed		 xor	 ebp, ebp
  0002c	41 c7 43 18 ff
	ff ff ff	 mov	 DWORD PTR [r11+24], -1	; ffffffffH
  00034	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00039	85 c0		 test	 eax, eax

; 1056 :         return NULL;

  0003b	74 2e		 je	 SHORT $LN26@winapi_Wai@2

; 1057 : 
; 1058 :     if (!PySequence_Check(handle_seq)) {

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR handle_seq$[rsp]
  00042	e8 00 00 00 00	 call	 PySequence_Check
  00047	85 c0		 test	 eax, eax
  00049	75 2b		 jne	 SHORT $LN14@winapi_Wai@2

; 1059 :         PyErr_Format(PyExc_TypeError,
; 1060 :                      "sequence type expected, got '%s'",
; 1061 :                      Py_TYPE(handle_seq)->tp_name);

  0004b	48 8b 44 24 30	 mov	 rax, QWORD PTR handle_seq$[rsp]
  00050	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@HMCKAPPK@sequence?5type?5expected?0?5got?5?8?$CFs?8@
  0005e	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00062	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00066	e8 00 00 00 00	 call	 PyErr_Format
$LN26@winapi_Wai@2:

; 1062 :         return NULL;

  0006b	33 c0		 xor	 eax, eax

; 1108 : }

  0006d	48 81 c4 50 02
	00 00		 add	 rsp, 592		; 00000250H
  00074	5d		 pop	 rbp
  00075	c3		 ret	 0
$LN14@winapi_Wai@2:

; 1063 :     }
; 1064 :     nhandles = PySequence_Length(handle_seq);

  00076	48 8b 4c 24 30	 mov	 rcx, QWORD PTR handle_seq$[rsp]
  0007b	48 89 bc 24 40
	02 00 00	 mov	 QWORD PTR [rsp+576], rdi
  00083	e8 00 00 00 00	 call	 PySequence_Size
  00088	48 8b f8	 mov	 rdi, rax

; 1065 :     if (nhandles == -1)

  0008b	48 83 f8 ff	 cmp	 rax, -1

; 1066 :         return NULL;

  0008f	0f 84 66 01 00
	00		 je	 $LN25@winapi_Wai@2

; 1067 :     if (nhandles < 0 || nhandles >= MAXIMUM_WAIT_OBJECTS - 1) {

  00095	48 83 f8 3e	 cmp	 rax, 62			; 0000003eH
  00099	0f 87 40 01 00
	00		 ja	 $LN11@winapi_Wai@2

; 1072 :     }
; 1073 :     for (i = 0; i < nhandles; i++) {

  0009f	48 89 9c 24 60
	02 00 00	 mov	 QWORD PTR [rsp+608], rbx
  000a7	48 89 b4 24 48
	02 00 00	 mov	 QWORD PTR [rsp+584], rsi
  000af	48 8b dd	 mov	 rbx, rbp
  000b2	48 85 c0	 test	 rax, rax
  000b5	7e 58		 jle	 SHORT $LN8@winapi_Wai@2
  000b7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL10@winapi_Wai@2:

; 1074 :         HANDLE h;
; 1075 :         PyObject *v = PySequence_GetItem(handle_seq, i);

  000c0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR handle_seq$[rsp]
  000c5	48 8b d3	 mov	 rdx, rbx
  000c8	e8 00 00 00 00	 call	 PySequence_GetItem
  000cd	48 8b f0	 mov	 rsi, rax

; 1076 :         if (v == NULL)

  000d0	48 85 c0	 test	 rax, rax
  000d3	0f 84 d1 00 00
	00		 je	 $LN19@winapi_Wai@2

; 1077 :             return NULL;
; 1078 :         if (!PyArg_Parse(v, F_HANDLE, &h)) {

  000d9	4c 8d 44 24 38	 lea	 r8, QWORD PTR h$121206[rsp]
  000de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01KNKLHLMO@K?$AA@
  000e5	48 8b c8	 mov	 rcx, rax
  000e8	e8 00 00 00 00	 call	 PyArg_Parse
  000ed	85 c0		 test	 eax, eax
  000ef	0f 84 ad 00 00
	00		 je	 $LN20@winapi_Wai@2

; 1081 :         }
; 1082 :         handles[i] = h;

  000f5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR h$121206[rsp]
  000fa	48 89 4c dc 40	 mov	 QWORD PTR handles$[rsp+rbx*8], rcx

; 1083 :         Py_DECREF(v);

  000ff	48 8b ce	 mov	 rcx, rsi
  00102	e8 00 00 00 00	 call	 _Py_DecRef
  00107	48 ff c3	 inc	 rbx
  0010a	48 3b df	 cmp	 rbx, rdi
  0010d	7c b1		 jl	 SHORT $LL10@winapi_Wai@2
$LN8@winapi_Wai@2:

; 1084 :     }
; 1085 :     /* If this is the main thread then make the wait interruptible
; 1086 :        by Ctrl-C unless we are waiting for *all* handles */
; 1087 :     if (!wait_flag && _PyOS_IsMainThread()) {

  0010f	39 ac 24 78 02
	00 00		 cmp	 DWORD PTR wait_flag$[rsp], ebp
  00116	75 19		 jne	 SHORT $LN5@winapi_Wai@2
  00118	e8 00 00 00 00	 call	 _PyOS_IsMainThread
  0011d	85 c0		 test	 eax, eax
  0011f	74 10		 je	 SHORT $LN5@winapi_Wai@2

; 1088 :         sigint_event = _PyOS_SigintEvent();

  00121	e8 00 00 00 00	 call	 _PyOS_SigintEvent

; 1089 :         assert(sigint_event != NULL);
; 1090 :         handles[nhandles++] = sigint_event;

  00126	48 ff c7	 inc	 rdi
  00129	48 89 44 fc 38	 mov	 QWORD PTR handles$[rsp+rdi*8-8], rax
  0012e	48 8b e8	 mov	 rbp, rax
$LN5@winapi_Wai@2:

; 1091 :     }
; 1092 : 
; 1093 :     Py_BEGIN_ALLOW_THREADS

  00131	e8 00 00 00 00	 call	 PyEval_SaveThread
  00136	48 8b f0	 mov	 rsi, rax

; 1094 :     if (sigint_event != NULL)

  00139	48 85 ed	 test	 rbp, rbp
  0013c	74 09		 je	 SHORT $LN4@winapi_Wai@2

; 1095 :         ResetEvent(sigint_event);

  0013e	48 8b cd	 mov	 rcx, rbp
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ResetEvent
$LN4@winapi_Wai@2:

; 1096 :     result = WaitForMultipleObjects((DWORD) nhandles, handles,
; 1097 :                                     wait_flag, milliseconds);

  00147	44 8b 8c 24 70
	02 00 00	 mov	 r9d, DWORD PTR milliseconds$[rsp]
  0014f	44 8b 84 24 78
	02 00 00	 mov	 r8d, DWORD PTR wait_flag$[rsp]
  00157	48 8d 54 24 40	 lea	 rdx, QWORD PTR handles$[rsp]
  0015c	8b cf		 mov	 ecx, edi
  0015e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForMultipleObjects

; 1098 :     Py_END_ALLOW_THREADS

  00164	48 8b ce	 mov	 rcx, rsi
  00167	8b d8		 mov	 ebx, eax
  00169	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 1099 : 
; 1100 :     if (result == WAIT_FAILED)

  0016e	83 fb ff	 cmp	 ebx, -1			; ffffffffH
  00171	75 3b		 jne	 SHORT $LN3@winapi_Wai@2

; 1101 :         return PyErr_SetExcFromWindowsErr(PyExc_IOError, 0);

  00173	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  0017a	33 d2		 xor	 edx, edx
  0017c	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErr
$LN24@winapi_Wai@2:
  00181	48 8b b4 24 48
	02 00 00	 mov	 rsi, QWORD PTR [rsp+584]
  00189	48 8b 9c 24 60
	02 00 00	 mov	 rbx, QWORD PTR [rsp+608]
  00191	48 8b bc 24 40
	02 00 00	 mov	 rdi, QWORD PTR [rsp+576]

; 1108 : }

  00199	48 81 c4 50 02
	00 00		 add	 rsp, 592		; 00000250H
  001a0	5d		 pop	 rbp
  001a1	c3		 ret	 0
$LN20@winapi_Wai@2:

; 1079 :             Py_DECREF(v);

  001a2	48 8b ce	 mov	 rcx, rsi
  001a5	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@winapi_Wai@2:

; 1080 :             return NULL;

  001aa	33 c0		 xor	 eax, eax
  001ac	eb d3		 jmp	 SHORT $LN24@winapi_Wai@2
$LN3@winapi_Wai@2:

; 1102 :     else if (sigint_event != NULL && result == WAIT_OBJECT_0 + nhandles - 1) {

  001ae	48 85 ed	 test	 rbp, rbp
  001b1	74 23		 je	 SHORT $LN1@winapi_Wai@2
  001b3	48 8d 4f ff	 lea	 rcx, QWORD PTR [rdi-1]
  001b7	48 3b d9	 cmp	 rbx, rcx
  001ba	75 1a		 jne	 SHORT $LN1@winapi_Wai@2

; 1103 :         errno = EINTR;

  001bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  001c2	c7 00 04 00 00
	00		 mov	 DWORD PTR [rax], 4

; 1104 :         return PyErr_SetFromErrno(PyExc_IOError);

  001c8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  001cf	e8 00 00 00 00	 call	 PyErr_SetFromErrno
  001d4	eb ab		 jmp	 SHORT $LN24@winapi_Wai@2
$LN1@winapi_Wai@2:

; 1105 :     }
; 1106 : 
; 1107 :     return PyLong_FromLong((int) result);

  001d6	8b cb		 mov	 ecx, ebx
  001d8	e8 00 00 00 00	 call	 PyLong_FromLong
  001dd	eb a2		 jmp	 SHORT $LN24@winapi_Wai@2
$LN11@winapi_Wai@2:

; 1068 :         PyErr_Format(PyExc_ValueError,
; 1069 :                      "need at most %zd handles, got a sequence of length %zd",
; 1070 :                      MAXIMUM_WAIT_OBJECTS - 1, nhandles);

  001df	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@HEKFKPEM@need?5at?5most?5?$CFzd?5handles?0?5got?5a?5@
  001ed	4c 8b c8	 mov	 r9, rax
  001f0	41 b8 3f 00 00
	00		 mov	 r8d, 63			; 0000003fH
  001f6	e8 00 00 00 00	 call	 PyErr_Format
$LN25@winapi_Wai@2:

; 1071 :         return NULL;

  001fb	33 c0		 xor	 eax, eax
  001fd	48 8b bc 24 40
	02 00 00	 mov	 rdi, QWORD PTR [rsp+576]

; 1108 : }

  00205	48 81 c4 50 02
	00 00		 add	 rsp, 592		; 00000250H
  0020c	5d		 pop	 rbp
  0020d	c3		 ret	 0
winapi_WaitForMultipleObjects ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@PKLICEEP@Kk?3WaitForSingleObject?$AA@	; `string'
EXTRN	__imp_WaitForSingleObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_WaitForSingleObject DD imagerel winapi_WaitForSingleObject
	DD	imagerel winapi_WaitForSingleObject+40
	DD	imagerel $unwind$winapi_WaitForSingleObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$winapi_WaitForSingleObject DD imagerel winapi_WaitForSingleObject+40
	DD	imagerel winapi_WaitForSingleObject+93
	DD	imagerel $chain$1$winapi_WaitForSingleObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$winapi_WaitForSingleObject DD imagerel winapi_WaitForSingleObject+93
	DD	imagerel winapi_WaitForSingleObject+116
	DD	imagerel $chain$2$winapi_WaitForSingleObject
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$winapi_WaitForSingleObject DD imagerel winapi_WaitForSingleObject+116
	DD	imagerel winapi_WaitForSingleObject+133
	DD	imagerel $chain$4$winapi_WaitForSingleObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$winapi_WaitForSingleObject DD 020021H
	DD	047400H
	DD	imagerel winapi_WaitForSingleObject
	DD	imagerel winapi_WaitForSingleObject+40
	DD	imagerel $unwind$winapi_WaitForSingleObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$winapi_WaitForSingleObject DD 020021H
	DD	047400H
	DD	imagerel winapi_WaitForSingleObject
	DD	imagerel winapi_WaitForSingleObject+40
	DD	imagerel $unwind$winapi_WaitForSingleObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$winapi_WaitForSingleObject DD 040a21H
	DD	04740aH
	DD	063405H
	DD	imagerel winapi_WaitForSingleObject
	DD	imagerel winapi_WaitForSingleObject+40
	DD	imagerel $unwind$winapi_WaitForSingleObject
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_WaitForSingleObject DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BH@PKLICEEP@Kk?3WaitForSingleObject?$AA@
CONST	SEGMENT
??_C@_0BH@PKLICEEP@Kk?3WaitForSingleObject?$AA@ DB 'Kk:WaitForSingleObjec'
	DB	't', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_WaitForSingleObject
_TEXT	SEGMENT
self$ = 48
args$ = 56
milliseconds$ = 64
handle$ = 72
winapi_WaitForSingleObject PROC				; COMDAT

; 1119 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1120 :     DWORD result;
; 1121 : 
; 1122 :     HANDLE handle;
; 1123 :     DWORD milliseconds;
; 1124 :     if (! PyArg_ParseTuple(args, F_HANDLE F_DWORD ":WaitForSingleObject",
; 1125 :                                  &handle,
; 1126 :                                  &milliseconds))

  00004	48 8b ca	 mov	 rcx, rdx
  00007	4c 8d 4c 24 40	 lea	 r9, QWORD PTR milliseconds$[rsp]
  0000c	4c 8d 44 24 48	 lea	 r8, QWORD PTR handle$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PKLICEEP@Kk?3WaitForSingleObject?$AA@
  00018	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001d	85 c0		 test	 eax, eax
  0001f	75 07		 jne	 SHORT $LN2@winapi_Wai@3

; 1127 :         return NULL;

  00021	33 c0		 xor	 eax, eax

; 1137 : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
$LN2@winapi_Wai@3:
  00028	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0002d	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi

; 1128 : 
; 1129 :     Py_BEGIN_ALLOW_THREADS

  00032	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1130 :     result = WaitForSingleObject(handle, milliseconds);

  00037	8b 54 24 40	 mov	 edx, DWORD PTR milliseconds$[rsp]
  0003b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  00040	48 8b d8	 mov	 rbx, rax
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForSingleObject

; 1131 :     Py_END_ALLOW_THREADS

  00049	48 8b cb	 mov	 rcx, rbx
  0004c	8b f8		 mov	 edi, eax
  0004e	e8 00 00 00 00	 call	 PyEval_RestoreThread
  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1132 : 
; 1133 :     if (result == WAIT_FAILED)

  00058	83 ff ff	 cmp	 edi, -1			; ffffffffH
  0005b	75 17		 jne	 SHORT $LN1@winapi_Wai@3

; 1134 :         return PyErr_SetFromWindowsErr(GetLastError());

  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00063	8b c8		 mov	 ecx, eax
  00065	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0006a	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 1137 : }

  0006f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00073	c3		 ret	 0
$LN1@winapi_Wai@3:

; 1135 : 
; 1136 :     return PyLong_FromUnsignedLong(result);

  00074	8b cf		 mov	 ecx, edi
  00076	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
  0007b	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 1137 : }

  00080	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00084	c3		 ret	 0
winapi_WaitForSingleObject ENDP
_TEXT	ENDS
PUBLIC	??_C@_02DEPFLJBK@y?$CK?$AA@			; `string'
PUBLIC	??_C@_0P@LGIDPNAH@KO?$HMi?3WriteFile?$AA@	; `string'
EXTRN	__imp_WriteFile:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_WriteFile DD imagerel winapi_WriteFile
	DD	imagerel winapi_WriteFile+94
	DD	imagerel $unwind$winapi_WriteFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$winapi_WriteFile DD imagerel winapi_WriteFile+94
	DD	imagerel winapi_WriteFile+200
	DD	imagerel $chain$0$winapi_WriteFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$winapi_WriteFile DD imagerel winapi_WriteFile+200
	DD	imagerel winapi_WriteFile+208
	DD	imagerel $chain$3$winapi_WriteFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$winapi_WriteFile DD imagerel winapi_WriteFile+208
	DD	imagerel winapi_WriteFile+286
	DD	imagerel $chain$4$winapi_WriteFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$winapi_WriteFile DD imagerel winapi_WriteFile+286
	DD	imagerel winapi_WriteFile+422
	DD	imagerel $chain$5$winapi_WriteFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$winapi_WriteFile DD 021H
	DD	imagerel winapi_WriteFile+200
	DD	imagerel winapi_WriteFile+208
	DD	imagerel $chain$3$winapi_WriteFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$winapi_WriteFile DD 020821H
	DD	016c408H
	DD	imagerel winapi_WriteFile+200
	DD	imagerel winapi_WriteFile+208
	DD	imagerel $chain$3$winapi_WriteFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$winapi_WriteFile DD 040821H
	DD	01a5408H
	DD	01b7400H
	DD	imagerel winapi_WriteFile
	DD	imagerel winapi_WriteFile+94
	DD	imagerel $unwind$winapi_WriteFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$winapi_WriteFile DD 020821H
	DD	01b7408H
	DD	imagerel winapi_WriteFile
	DD	imagerel winapi_WriteFile+94
	DD	imagerel $unwind$winapi_WriteFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_WriteFile DD 040c01H
	DD	017010cH
	DD	030046005H
xdata	ENDS
;	COMDAT ??_C@_02DEPFLJBK@y?$CK?$AA@
CONST	SEGMENT
??_C@_02DEPFLJBK@y?$CK?$AA@ DB 'y*', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LGIDPNAH@KO?$HMi?3WriteFile?$AA@
CONST	SEGMENT
??_C@_0P@LGIDPNAH@KO?$HMi?3WriteFile?$AA@ DB 'KO|i:WriteFile', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT winapi_WriteFile
_TEXT	SEGMENT
written$ = 64
handle$ = 72
bufobj$ = 80
_buf$ = 96
self$ = 208
args$ = 216
kwds$ = 224
use_overlapped$ = 232
winapi_WriteFile PROC					; COMDAT

; 1141 : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	53		 push	 rbx
  00004	56		 push	 rsi
  00005	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 1142 :     HANDLE handle;
; 1143 :     Py_buffer _buf, *buf;
; 1144 :     PyObject *bufobj;
; 1145 :     DWORD written;
; 1146 :     BOOL ret;
; 1147 :     int use_overlapped = 0;
; 1148 :     DWORD err;
; 1149 :     OverlappedObject *overlapped = NULL;
; 1150 :     static char *kwlist[] = {"handle", "buffer", "overlapped", NULL};
; 1151 : 
; 1152 :     /* First get handle and use_overlapped to know which Py_buffer to use */
; 1153 :     if (!PyArg_ParseTupleAndKeywords(args, kwds,
; 1154 :                                      F_HANDLE "O|i:WriteFile", kwlist,
; 1155 :                                      &handle, &bufobj, &use_overlapped))

  0000c	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  00010	49 8b c0	 mov	 rax, r8
  00013	4c 8b d2	 mov	 r10, rdx
  00016	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0001b	49 8d 4b 88	 lea	 rcx, QWORD PTR [r11-120]
  0001f	33 f6		 xor	 esi, esi
  00021	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00026	49 8d 4b 80	 lea	 rcx, QWORD PTR [r11-128]
  0002a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??winapi_WriteFile@@9@9
  00031	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00036	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@LGIDPNAH@KO?$HMi?3WriteFile?$AA@
  0003d	48 8b d0	 mov	 rdx, rax
  00040	49 8b ca	 mov	 rcx, r10
  00043	41 89 73 20	 mov	 DWORD PTR [r11+32], esi
  00047	8b de		 mov	 ebx, esi
  00049	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0004e	85 c0		 test	 eax, eax
  00050	75 0c		 jne	 SHORT $LN14@winapi_Wri

; 1156 :         return NULL;

  00052	33 c0		 xor	 eax, eax

; 1195 : }

  00054	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0005b	5e		 pop	 rsi
  0005c	5b		 pop	 rbx
  0005d	c3		 ret	 0
$LN14@winapi_Wri:
  0005e	48 89 bc 24 d8
	00 00 00	 mov	 QWORD PTR [rsp+216], rdi

; 1157 : 
; 1158 :     if (use_overlapped) {

  00066	39 9c 24 e8 00
	00 00		 cmp	 DWORD PTR use_overlapped$[rsp], ebx
  0006d	74 1b		 je	 SHORT $LN13@winapi_Wri

; 1159 :         overlapped = new_overlapped(handle);

  0006f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  00074	e8 00 00 00 00	 call	 new_overlapped
  00079	48 8b d8	 mov	 rbx, rax

; 1160 :         if (!overlapped)

  0007c	48 85 c0	 test	 rax, rax

; 1161 :             return NULL;

  0007f	74 33		 je	 SHORT $LN8@winapi_Wri

; 1162 :         buf = &overlapped->write_buffer;

  00081	48 8d b8 98 00
	00 00		 lea	 rdi, QWORD PTR [rax+152]

; 1163 :     }
; 1164 :     else

  00088	eb 05		 jmp	 SHORT $LN11@winapi_Wri
$LN13@winapi_Wri:

; 1165 :         buf = &_buf;

  0008a	48 8d 7c 24 60	 lea	 rdi, QWORD PTR _buf$[rsp]
$LN11@winapi_Wri:

; 1166 : 
; 1167 :     if (!PyArg_Parse(bufobj, "y*", buf)) {

  0008f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR bufobj$[rsp]
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DEPFLJBK@y?$CK?$AA@
  0009b	4c 8b c7	 mov	 r8, rdi
  0009e	e8 00 00 00 00	 call	 PyArg_Parse
  000a3	85 c0		 test	 eax, eax
  000a5	75 21		 jne	 SHORT $LN10@winapi_Wri

; 1168 :         Py_XDECREF(overlapped);

  000a7	48 85 db	 test	 rbx, rbx
  000aa	74 08		 je	 SHORT $LN8@winapi_Wri
  000ac	48 8b cb	 mov	 rcx, rbx
  000af	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@winapi_Wri:

; 1169 :         return NULL;

  000b4	33 c0		 xor	 eax, eax
  000b6	48 8b bc 24 d8
	00 00 00	 mov	 rdi, QWORD PTR [rsp+216]

; 1195 : }

  000be	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  000c5	5e		 pop	 rsi
  000c6	5b		 pop	 rbx
  000c7	c3		 ret	 0
$LN10@winapi_Wri:
  000c8	48 89 ac 24 d0
	00 00 00	 mov	 QWORD PTR [rsp+208], rbp
  000d0	4c 89 a4 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], r12

; 1170 :     }
; 1171 : 
; 1172 :     Py_BEGIN_ALLOW_THREADS

  000d8	e8 00 00 00 00	 call	 PyEval_SaveThread

; 1173 :     ret = WriteFile(handle, buf->buf, buf->len, &written,
; 1174 :                     overlapped ? &overlapped->overlapped : NULL);

  000dd	48 8d 4b 60	 lea	 rcx, QWORD PTR [rbx+96]
  000e1	4c 8b e0	 mov	 r12, rax
  000e4	48 85 db	 test	 rbx, rbx
  000e7	75 03		 jne	 SHORT $LN18@winapi_Wri
  000e9	48 8b ce	 mov	 rcx, rsi
$LN18@winapi_Wri:
  000ec	44 8b 47 10	 mov	 r8d, DWORD PTR [rdi+16]
  000f0	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  000f3	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000f8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  000fd	4c 8d 4c 24 40	 lea	 r9, QWORD PTR written$[rsp]
  00102	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WriteFile

; 1175 :     Py_END_ALLOW_THREADS

  00108	49 8b cc	 mov	 rcx, r12
  0010b	8b e8		 mov	 ebp, eax
  0010d	e8 00 00 00 00	 call	 PyEval_RestoreThread
  00112	4c 8b a4 24 b0
	00 00 00	 mov	 r12, QWORD PTR [rsp+176]

; 1176 : 
; 1177 :     err = ret ? 0 : GetLastError();

  0011a	85 ed		 test	 ebp, ebp
  0011c	75 08		 jne	 SHORT $LN20@winapi_Wri
  0011e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00124	8b f0		 mov	 esi, eax
$LN20@winapi_Wri:

; 1178 : 
; 1179 :     if (overlapped) {

  00126	48 85 db	 test	 rbx, rbx
  00129	74 42		 je	 SHORT $LN5@winapi_Wri

; 1180 :         if (!ret) {

  0012b	85 ed		 test	 ebp, ebp
  0012d	75 12		 jne	 SHORT $LN2@winapi_Wri

; 1181 :             if (err == ERROR_IO_PENDING)

  0012f	81 fe e5 03 00
	00		 cmp	 esi, 997		; 000003e5H
  00135	75 1e		 jne	 SHORT $LN3@winapi_Wri

; 1182 :                 overlapped->pending = 1;

  00137	c7 83 88 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rbx+136], 1
$LN2@winapi_Wri:

; 1186 :             }
; 1187 :         }
; 1188 :         return Py_BuildValue("NI", (PyObject *) overlapped, err);

  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02FLABHCGL@NI?$AA@
  00148	44 8b c6	 mov	 r8d, esi
  0014b	48 8b d3	 mov	 rdx, rbx
  0014e	e8 00 00 00 00	 call	 Py_BuildValue
  00153	eb 37		 jmp	 SHORT $LN22@winapi_Wri
$LN3@winapi_Wri:

; 1183 :             else {
; 1184 :                 Py_DECREF(overlapped);

  00155	48 8b cb	 mov	 rcx, rbx
  00158	e8 00 00 00 00	 call	 _Py_DecRef
$LN23@winapi_Wri:

; 1185 :                 return PyErr_SetExcFromWindowsErr(PyExc_IOError, 0);

  0015d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00164	33 d2		 xor	 edx, edx
  00166	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErr
  0016b	eb 1f		 jmp	 SHORT $LN22@winapi_Wri
$LN5@winapi_Wri:

; 1189 :     }
; 1190 : 
; 1191 :     PyBuffer_Release(buf);

  0016d	48 8b cf	 mov	 rcx, rdi
  00170	e8 00 00 00 00	 call	 PyBuffer_Release

; 1192 :     if (!ret)

  00175	85 ed		 test	 ebp, ebp

; 1193 :         return PyErr_SetExcFromWindowsErr(PyExc_IOError, 0);

  00177	74 e4		 je	 SHORT $LN23@winapi_Wri

; 1194 :     return Py_BuildValue("II", written, err);

  00179	8b 54 24 40	 mov	 edx, DWORD PTR written$[rsp]
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02FOEOGEOO@II?$AA@
  00184	44 8b c6	 mov	 r8d, esi
  00187	e8 00 00 00 00	 call	 Py_BuildValue
$LN22@winapi_Wri:
  0018c	48 8b ac 24 d0
	00 00 00	 mov	 rbp, QWORD PTR [rsp+208]
  00194	48 8b bc 24 d8
	00 00 00	 mov	 rdi, QWORD PTR [rsp+216]

; 1195 : }

  0019c	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  001a3	5e		 pop	 rsi
  001a4	5b		 pop	 rbx
  001a5	c3		 ret	 0
winapi_WriteFile ENDP
_TEXT	ENDS
PUBLIC	??_C@_04HIBGFPH@NULL?$AA@			; `string'
PUBLIC	??_C@_01KBJDNOO@i?$AA@				; `string'
PUBLIC	??_C@_0N@MLFIMDEJ@WAIT_TIMEOUT?$AA@		; `string'
PUBLIC	??_C@_0O@BHMMAMPF@WAIT_OBJECT_0?$AA@		; `string'
PUBLIC	??_C@_07CONMCDML@SW_HIDE?$AA@			; `string'
PUBLIC	??_C@_0N@EDJFMDHN@STILL_ACTIVE?$AA@		; `string'
PUBLIC	??_C@_0BB@FJBFBONB@STD_ERROR_HANDLE?$AA@	; `string'
PUBLIC	??_C@_0BC@PDBIEEGD@STD_OUTPUT_HANDLE?$AA@	; `string'
PUBLIC	??_C@_0BB@NBEHNGDN@STD_INPUT_HANDLE?$AA@	; `string'
PUBLIC	??_C@_0BF@KPBHCKBG@STARTF_USESTDHANDLES?$AA@	; `string'
PUBLIC	??_C@_0BF@EKLPBPPK@STARTF_USESHOWWINDOW?$AA@	; `string'
PUBLIC	??_C@_0BD@FNKPIEBO@PROCESS_DUP_HANDLE?$AA@	; `string'
PUBLIC	??_C@_0BD@COCJCFIN@PROCESS_ALL_ACCESS?$AA@	; `string'
PUBLIC	??_C@_09GBJKLFDL@PIPE_WAIT?$AA@			; `string'
PUBLIC	??_C@_0BJ@KDCCODEA@PIPE_UNLIMITED_INSTANCES?$AA@ ; `string'
PUBLIC	??_C@_0BC@DPNGHAPK@PIPE_TYPE_MESSAGE?$AA@	; `string'
PUBLIC	??_C@_0BG@NOJMDBGL@PIPE_READMODE_MESSAGE?$AA@	; `string'
PUBLIC	??_C@_0BE@JNPGDFFP@PIPE_ACCESS_INBOUND?$AA@	; `string'
PUBLIC	??_C@_0BD@FFBOJLDP@PIPE_ACCESS_DUPLEX?$AA@	; `string'
PUBLIC	??_C@_0O@PDPODOPO@OPEN_EXISTING?$AA@		; `string'
PUBLIC	??_C@_0BF@JONJFBOM@NMPWAIT_WAIT_FOREVER?$AA@	; `string'
PUBLIC	??_C@_08LPDIFJIG@INFINITE?$AA@			; `string'
PUBLIC	??_C@_0O@DKHPBJPE@GENERIC_WRITE?$AA@		; `string'
PUBLIC	??_C@_0N@INABCMMB@GENERIC_READ?$AA@		; `string'
PUBLIC	??_C@_0BD@OFPOCHAM@FILE_GENERIC_WRITE?$AA@	; `string'
PUBLIC	??_C@_0BC@GMNABHGN@FILE_GENERIC_READ?$AA@	; `string'
PUBLIC	??_C@_0BF@IKEPHOOJ@FILE_FLAG_OVERLAPPED?$AA@	; `string'
PUBLIC	??_C@_0BO@PKHOEDGF@FILE_FLAG_FIRST_PIPE_INSTANCE?$AA@ ; `string'
PUBLIC	??_C@_0BC@BPAFPFHD@ERROR_SEM_TIMEOUT?$AA@	; `string'
PUBLIC	??_C@_0BF@PHEPDDDD@ERROR_PIPE_CONNECTED?$AA@	; `string'
PUBLIC	??_C@_0BA@KIGJMOFJ@ERROR_PIPE_BUSY?$AA@		; `string'
PUBLIC	??_C@_0BI@EDIDNLB@ERROR_OPERATION_ABORTED?$AA@	; `string'
PUBLIC	??_C@_0O@HIPCDKGC@ERROR_NO_DATA?$AA@		; `string'
PUBLIC	??_C@_0BK@FPFJCKNG@ERROR_NO_SYSTEM_RESOURCES?$AA@ ; `string'
PUBLIC	??_C@_0BG@JJLAGMLA@ERROR_NETNAME_DELETED?$AA@	; `string'
PUBLIC	??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@		; `string'
PUBLIC	??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@	; `string'
PUBLIC	??_C@_0BC@BJHNEMJG@ERROR_BROKEN_PIPE?$AA@	; `string'
PUBLIC	??_C@_0BF@ONPBHKDO@ERROR_ALREADY_EXISTS?$AA@	; `string'
PUBLIC	??_C@_0BH@MMLBEHAM@DUPLICATE_CLOSE_SOURCE?$AA@	; `string'
PUBLIC	??_C@_0BG@KAIAGNIF@DUPLICATE_SAME_ACCESS?$AA@	; `string'
PUBLIC	??_C@_0BJ@CNJAILLO@CREATE_NEW_PROCESS_GROUP?$AA@ ; `string'
PUBLIC	??_C@_0BD@HMIPFELD@CREATE_NEW_CONSOLE?$AA@	; `string'
PUBLIC	??_C@_0L@IAMABJLG@Overlapped?$AA@		; `string'
PUBLIC	PyInit__winapi
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_Create2:PROC
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit__winapi DD imagerel $LN6
	DD	imagerel $LN6+39
	DD	imagerel $unwind$PyInit__winapi
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyInit__winapi DD imagerel $LN6+39
	DD	imagerel $LN6+67
	DD	imagerel $chain$0$PyInit__winapi
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyInit__winapi DD imagerel $LN6+67
	DD	imagerel $LN6+1682
	DD	imagerel $chain$3$PyInit__winapi
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyInit__winapi DD 040821H
	DD	063408H
	DD	047400H
	DD	imagerel $LN6
	DD	imagerel $LN6+39
	DD	imagerel $unwind$PyInit__winapi
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyInit__winapi DD 020521H
	DD	047405H
	DD	imagerel $LN6
	DD	imagerel $LN6+39
	DD	imagerel $unwind$PyInit__winapi
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__winapi DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_04HIBGFPH@NULL?$AA@
CONST	SEGMENT
??_C@_04HIBGFPH@NULL?$AA@ DB 'NULL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i?$AA@
CONST	SEGMENT
??_C@_01KBJDNOO@i?$AA@ DB 'i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MLFIMDEJ@WAIT_TIMEOUT?$AA@
CONST	SEGMENT
??_C@_0N@MLFIMDEJ@WAIT_TIMEOUT?$AA@ DB 'WAIT_TIMEOUT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BHMMAMPF@WAIT_OBJECT_0?$AA@
CONST	SEGMENT
??_C@_0O@BHMMAMPF@WAIT_OBJECT_0?$AA@ DB 'WAIT_OBJECT_0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CONMCDML@SW_HIDE?$AA@
CONST	SEGMENT
??_C@_07CONMCDML@SW_HIDE?$AA@ DB 'SW_HIDE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EDJFMDHN@STILL_ACTIVE?$AA@
CONST	SEGMENT
??_C@_0N@EDJFMDHN@STILL_ACTIVE?$AA@ DB 'STILL_ACTIVE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FJBFBONB@STD_ERROR_HANDLE?$AA@
CONST	SEGMENT
??_C@_0BB@FJBFBONB@STD_ERROR_HANDLE?$AA@ DB 'STD_ERROR_HANDLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PDBIEEGD@STD_OUTPUT_HANDLE?$AA@
CONST	SEGMENT
??_C@_0BC@PDBIEEGD@STD_OUTPUT_HANDLE?$AA@ DB 'STD_OUTPUT_HANDLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NBEHNGDN@STD_INPUT_HANDLE?$AA@
CONST	SEGMENT
??_C@_0BB@NBEHNGDN@STD_INPUT_HANDLE?$AA@ DB 'STD_INPUT_HANDLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KPBHCKBG@STARTF_USESTDHANDLES?$AA@
CONST	SEGMENT
??_C@_0BF@KPBHCKBG@STARTF_USESTDHANDLES?$AA@ DB 'STARTF_USESTDHANDLES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EKLPBPPK@STARTF_USESHOWWINDOW?$AA@
CONST	SEGMENT
??_C@_0BF@EKLPBPPK@STARTF_USESHOWWINDOW?$AA@ DB 'STARTF_USESHOWWINDOW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FNKPIEBO@PROCESS_DUP_HANDLE?$AA@
CONST	SEGMENT
??_C@_0BD@FNKPIEBO@PROCESS_DUP_HANDLE?$AA@ DB 'PROCESS_DUP_HANDLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@COCJCFIN@PROCESS_ALL_ACCESS?$AA@
CONST	SEGMENT
??_C@_0BD@COCJCFIN@PROCESS_ALL_ACCESS?$AA@ DB 'PROCESS_ALL_ACCESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GBJKLFDL@PIPE_WAIT?$AA@
CONST	SEGMENT
??_C@_09GBJKLFDL@PIPE_WAIT?$AA@ DB 'PIPE_WAIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KDCCODEA@PIPE_UNLIMITED_INSTANCES?$AA@
CONST	SEGMENT
??_C@_0BJ@KDCCODEA@PIPE_UNLIMITED_INSTANCES?$AA@ DB 'PIPE_UNLIMITED_INSTA'
	DB	'NCES', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DPNGHAPK@PIPE_TYPE_MESSAGE?$AA@
CONST	SEGMENT
??_C@_0BC@DPNGHAPK@PIPE_TYPE_MESSAGE?$AA@ DB 'PIPE_TYPE_MESSAGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NOJMDBGL@PIPE_READMODE_MESSAGE?$AA@
CONST	SEGMENT
??_C@_0BG@NOJMDBGL@PIPE_READMODE_MESSAGE?$AA@ DB 'PIPE_READMODE_MESSAGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JNPGDFFP@PIPE_ACCESS_INBOUND?$AA@
CONST	SEGMENT
??_C@_0BE@JNPGDFFP@PIPE_ACCESS_INBOUND?$AA@ DB 'PIPE_ACCESS_INBOUND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FFBOJLDP@PIPE_ACCESS_DUPLEX?$AA@
CONST	SEGMENT
??_C@_0BD@FFBOJLDP@PIPE_ACCESS_DUPLEX?$AA@ DB 'PIPE_ACCESS_DUPLEX', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PDPODOPO@OPEN_EXISTING?$AA@
CONST	SEGMENT
??_C@_0O@PDPODOPO@OPEN_EXISTING?$AA@ DB 'OPEN_EXISTING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JONJFBOM@NMPWAIT_WAIT_FOREVER?$AA@
CONST	SEGMENT
??_C@_0BF@JONJFBOM@NMPWAIT_WAIT_FOREVER?$AA@ DB 'NMPWAIT_WAIT_FOREVER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LPDIFJIG@INFINITE?$AA@
CONST	SEGMENT
??_C@_08LPDIFJIG@INFINITE?$AA@ DB 'INFINITE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DKHPBJPE@GENERIC_WRITE?$AA@
CONST	SEGMENT
??_C@_0O@DKHPBJPE@GENERIC_WRITE?$AA@ DB 'GENERIC_WRITE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@INABCMMB@GENERIC_READ?$AA@
CONST	SEGMENT
??_C@_0N@INABCMMB@GENERIC_READ?$AA@ DB 'GENERIC_READ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OFPOCHAM@FILE_GENERIC_WRITE?$AA@
CONST	SEGMENT
??_C@_0BD@OFPOCHAM@FILE_GENERIC_WRITE?$AA@ DB 'FILE_GENERIC_WRITE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GMNABHGN@FILE_GENERIC_READ?$AA@
CONST	SEGMENT
??_C@_0BC@GMNABHGN@FILE_GENERIC_READ?$AA@ DB 'FILE_GENERIC_READ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IKEPHOOJ@FILE_FLAG_OVERLAPPED?$AA@
CONST	SEGMENT
??_C@_0BF@IKEPHOOJ@FILE_FLAG_OVERLAPPED?$AA@ DB 'FILE_FLAG_OVERLAPPED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PKHOEDGF@FILE_FLAG_FIRST_PIPE_INSTANCE?$AA@
CONST	SEGMENT
??_C@_0BO@PKHOEDGF@FILE_FLAG_FIRST_PIPE_INSTANCE?$AA@ DB 'FILE_FLAG_FIRST'
	DB	'_PIPE_INSTANCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BPAFPFHD@ERROR_SEM_TIMEOUT?$AA@
CONST	SEGMENT
??_C@_0BC@BPAFPFHD@ERROR_SEM_TIMEOUT?$AA@ DB 'ERROR_SEM_TIMEOUT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHEPDDDD@ERROR_PIPE_CONNECTED?$AA@
CONST	SEGMENT
??_C@_0BF@PHEPDDDD@ERROR_PIPE_CONNECTED?$AA@ DB 'ERROR_PIPE_CONNECTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KIGJMOFJ@ERROR_PIPE_BUSY?$AA@
CONST	SEGMENT
??_C@_0BA@KIGJMOFJ@ERROR_PIPE_BUSY?$AA@ DB 'ERROR_PIPE_BUSY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EDIDNLB@ERROR_OPERATION_ABORTED?$AA@
CONST	SEGMENT
??_C@_0BI@EDIDNLB@ERROR_OPERATION_ABORTED?$AA@ DB 'ERROR_OPERATION_ABORTE'
	DB	'D', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HIPCDKGC@ERROR_NO_DATA?$AA@
CONST	SEGMENT
??_C@_0O@HIPCDKGC@ERROR_NO_DATA?$AA@ DB 'ERROR_NO_DATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FPFJCKNG@ERROR_NO_SYSTEM_RESOURCES?$AA@
CONST	SEGMENT
??_C@_0BK@FPFJCKNG@ERROR_NO_SYSTEM_RESOURCES?$AA@ DB 'ERROR_NO_SYSTEM_RES'
	DB	'OURCES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JJLAGMLA@ERROR_NETNAME_DELETED?$AA@
CONST	SEGMENT
??_C@_0BG@JJLAGMLA@ERROR_NETNAME_DELETED?$AA@ DB 'ERROR_NETNAME_DELETED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@
CONST	SEGMENT
??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@ DB 'ERROR_MORE_DATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@
CONST	SEGMENT
??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@ DB 'ERROR_IO_PENDING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BJHNEMJG@ERROR_BROKEN_PIPE?$AA@
CONST	SEGMENT
??_C@_0BC@BJHNEMJG@ERROR_BROKEN_PIPE?$AA@ DB 'ERROR_BROKEN_PIPE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ONPBHKDO@ERROR_ALREADY_EXISTS?$AA@
CONST	SEGMENT
??_C@_0BF@ONPBHKDO@ERROR_ALREADY_EXISTS?$AA@ DB 'ERROR_ALREADY_EXISTS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MMLBEHAM@DUPLICATE_CLOSE_SOURCE?$AA@
CONST	SEGMENT
??_C@_0BH@MMLBEHAM@DUPLICATE_CLOSE_SOURCE?$AA@ DB 'DUPLICATE_CLOSE_SOURCE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KAIAGNIF@DUPLICATE_SAME_ACCESS?$AA@
CONST	SEGMENT
??_C@_0BG@KAIAGNIF@DUPLICATE_SAME_ACCESS?$AA@ DB 'DUPLICATE_SAME_ACCESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CNJAILLO@CREATE_NEW_PROCESS_GROUP?$AA@
CONST	SEGMENT
??_C@_0BJ@CNJAILLO@CREATE_NEW_PROCESS_GROUP?$AA@ DB 'CREATE_NEW_PROCESS_G'
	DB	'ROUP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HMIPFELD@CREATE_NEW_CONSOLE?$AA@
CONST	SEGMENT
??_C@_0BD@HMIPFELD@CREATE_NEW_CONSOLE?$AA@ DB 'CREATE_NEW_CONSOLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IAMABJLG@Overlapped?$AA@
CONST	SEGMENT
??_C@_0L@IAMABJLG@Overlapped?$AA@ DB 'Overlapped', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyInit__winapi
_TEXT	SEGMENT
PyInit__winapi PROC					; COMDAT

; 1265 : {

$LN6:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1266 :     PyObject *d;
; 1267 :     PyObject *m;
; 1268 : 
; 1269 :     if (PyType_Ready(&OverlappedType) < 0)

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:OverlappedType
  0000b	e8 00 00 00 00	 call	 PyType_Ready
  00010	85 c0		 test	 eax, eax
  00012	79 07		 jns	 SHORT $LN2@PyInit__wi

; 1270 :         return NULL;

  00014	33 c0		 xor	 eax, eax

; 1328 : }

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
$LN2@PyInit__wi:

; 1271 : 
; 1272 :     m = PyModule_Create(&winapi_module);

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:winapi_module
  00022	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00027	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0002c	e8 00 00 00 00	 call	 PyModule_Create2
  00031	48 8b f8	 mov	 rdi, rax

; 1273 :     if (m == NULL)

  00034	48 85 c0	 test	 rax, rax
  00037	75 0a		 jne	 SHORT $LN1@PyInit__wi
  00039	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 1328 : }

  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
$LN1@PyInit__wi:

; 1274 :         return NULL;
; 1275 :     d = PyModule_GetDict(m);

  00043	48 8b c8	 mov	 rcx, rax
  00046	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0004b	e8 00 00 00 00	 call	 PyModule_GetDict

; 1276 : 
; 1277 :     PyDict_SetItemString(d, "Overlapped", (PyObject *) &OverlappedType);

  00050	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:OverlappedType
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@IAMABJLG@Overlapped?$AA@
  0005e	48 8b c8	 mov	 rcx, rax
  00061	48 8b d8	 mov	 rbx, rax
  00064	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1278 : 
; 1279 :     /* constants */
; 1280 :     WINAPI_CONSTANT(F_DWORD, CREATE_NEW_CONSOLE);

  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00070	ba 10 00 00 00	 mov	 edx, 16
  00075	e8 00 00 00 00	 call	 Py_BuildValue
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@HMIPFELD@CREATE_NEW_CONSOLE?$AA@
  00081	48 8b cb	 mov	 rcx, rbx
  00084	4c 8b c0	 mov	 r8, rax
  00087	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1281 :     WINAPI_CONSTANT(F_DWORD, CREATE_NEW_PROCESS_GROUP);

  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00093	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00098	e8 00 00 00 00	 call	 Py_BuildValue
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CNJAILLO@CREATE_NEW_PROCESS_GROUP?$AA@
  000a4	48 8b cb	 mov	 rcx, rbx
  000a7	4c 8b c0	 mov	 r8, rax
  000aa	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1282 :     WINAPI_CONSTANT(F_DWORD, DUPLICATE_SAME_ACCESS);

  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  000b6	ba 02 00 00 00	 mov	 edx, 2
  000bb	e8 00 00 00 00	 call	 Py_BuildValue
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@KAIAGNIF@DUPLICATE_SAME_ACCESS?$AA@
  000c7	48 8b cb	 mov	 rcx, rbx
  000ca	4c 8b c0	 mov	 r8, rax
  000cd	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1283 :     WINAPI_CONSTANT(F_DWORD, DUPLICATE_CLOSE_SOURCE);

  000d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  000d9	ba 01 00 00 00	 mov	 edx, 1
  000de	e8 00 00 00 00	 call	 Py_BuildValue
  000e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MMLBEHAM@DUPLICATE_CLOSE_SOURCE?$AA@
  000ea	48 8b cb	 mov	 rcx, rbx
  000ed	4c 8b c0	 mov	 r8, rax
  000f0	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1284 :     WINAPI_CONSTANT(F_DWORD, ERROR_ALREADY_EXISTS);

  000f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  000fc	ba b7 00 00 00	 mov	 edx, 183		; 000000b7H
  00101	e8 00 00 00 00	 call	 Py_BuildValue
  00106	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@ONPBHKDO@ERROR_ALREADY_EXISTS?$AA@
  0010d	48 8b cb	 mov	 rcx, rbx
  00110	4c 8b c0	 mov	 r8, rax
  00113	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1285 :     WINAPI_CONSTANT(F_DWORD, ERROR_BROKEN_PIPE);

  00118	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0011f	ba 6d 00 00 00	 mov	 edx, 109		; 0000006dH
  00124	e8 00 00 00 00	 call	 Py_BuildValue
  00129	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@BJHNEMJG@ERROR_BROKEN_PIPE?$AA@
  00130	48 8b cb	 mov	 rcx, rbx
  00133	4c 8b c0	 mov	 r8, rax
  00136	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1286 :     WINAPI_CONSTANT(F_DWORD, ERROR_IO_PENDING);

  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00142	ba e5 03 00 00	 mov	 edx, 997		; 000003e5H
  00147	e8 00 00 00 00	 call	 Py_BuildValue
  0014c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@
  00153	48 8b cb	 mov	 rcx, rbx
  00156	4c 8b c0	 mov	 r8, rax
  00159	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1287 :     WINAPI_CONSTANT(F_DWORD, ERROR_MORE_DATA);

  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00165	ba ea 00 00 00	 mov	 edx, 234		; 000000eaH
  0016a	e8 00 00 00 00	 call	 Py_BuildValue
  0016f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@
  00176	48 8b cb	 mov	 rcx, rbx
  00179	4c 8b c0	 mov	 r8, rax
  0017c	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1288 :     WINAPI_CONSTANT(F_DWORD, ERROR_NETNAME_DELETED);

  00181	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00188	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0018d	e8 00 00 00 00	 call	 Py_BuildValue
  00192	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@JJLAGMLA@ERROR_NETNAME_DELETED?$AA@
  00199	48 8b cb	 mov	 rcx, rbx
  0019c	4c 8b c0	 mov	 r8, rax
  0019f	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1289 :     WINAPI_CONSTANT(F_DWORD, ERROR_NO_SYSTEM_RESOURCES);

  001a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  001ab	ba aa 05 00 00	 mov	 edx, 1450		; 000005aaH
  001b0	e8 00 00 00 00	 call	 Py_BuildValue
  001b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@FPFJCKNG@ERROR_NO_SYSTEM_RESOURCES?$AA@
  001bc	48 8b cb	 mov	 rcx, rbx
  001bf	4c 8b c0	 mov	 r8, rax
  001c2	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1290 :     WINAPI_CONSTANT(F_DWORD, ERROR_MORE_DATA);

  001c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  001ce	ba ea 00 00 00	 mov	 edx, 234		; 000000eaH
  001d3	e8 00 00 00 00	 call	 Py_BuildValue
  001d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@
  001df	4c 8b c0	 mov	 r8, rax
  001e2	48 8b cb	 mov	 rcx, rbx
  001e5	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1291 :     WINAPI_CONSTANT(F_DWORD, ERROR_NETNAME_DELETED);

  001ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  001f1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  001f6	e8 00 00 00 00	 call	 Py_BuildValue
  001fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@JJLAGMLA@ERROR_NETNAME_DELETED?$AA@
  00202	48 8b cb	 mov	 rcx, rbx
  00205	4c 8b c0	 mov	 r8, rax
  00208	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1292 :     WINAPI_CONSTANT(F_DWORD, ERROR_NO_DATA);

  0020d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00214	ba e8 00 00 00	 mov	 edx, 232		; 000000e8H
  00219	e8 00 00 00 00	 call	 Py_BuildValue
  0021e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@HIPCDKGC@ERROR_NO_DATA?$AA@
  00225	48 8b cb	 mov	 rcx, rbx
  00228	4c 8b c0	 mov	 r8, rax
  0022b	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1293 :     WINAPI_CONSTANT(F_DWORD, ERROR_NO_SYSTEM_RESOURCES);

  00230	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00237	ba aa 05 00 00	 mov	 edx, 1450		; 000005aaH
  0023c	e8 00 00 00 00	 call	 Py_BuildValue
  00241	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@FPFJCKNG@ERROR_NO_SYSTEM_RESOURCES?$AA@
  00248	48 8b cb	 mov	 rcx, rbx
  0024b	4c 8b c0	 mov	 r8, rax
  0024e	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1294 :     WINAPI_CONSTANT(F_DWORD, ERROR_OPERATION_ABORTED);

  00253	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0025a	ba e3 03 00 00	 mov	 edx, 995		; 000003e3H
  0025f	e8 00 00 00 00	 call	 Py_BuildValue
  00264	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@EDIDNLB@ERROR_OPERATION_ABORTED?$AA@
  0026b	48 8b cb	 mov	 rcx, rbx
  0026e	4c 8b c0	 mov	 r8, rax
  00271	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1295 :     WINAPI_CONSTANT(F_DWORD, ERROR_PIPE_BUSY);

  00276	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0027d	ba e7 00 00 00	 mov	 edx, 231		; 000000e7H
  00282	e8 00 00 00 00	 call	 Py_BuildValue
  00287	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@KIGJMOFJ@ERROR_PIPE_BUSY?$AA@
  0028e	48 8b cb	 mov	 rcx, rbx
  00291	4c 8b c0	 mov	 r8, rax
  00294	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1296 :     WINAPI_CONSTANT(F_DWORD, ERROR_PIPE_CONNECTED);

  00299	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  002a0	ba 17 02 00 00	 mov	 edx, 535		; 00000217H
  002a5	e8 00 00 00 00	 call	 Py_BuildValue
  002aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@PHEPDDDD@ERROR_PIPE_CONNECTED?$AA@
  002b1	48 8b cb	 mov	 rcx, rbx
  002b4	4c 8b c0	 mov	 r8, rax
  002b7	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1297 :     WINAPI_CONSTANT(F_DWORD, ERROR_SEM_TIMEOUT);

  002bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  002c3	ba 79 00 00 00	 mov	 edx, 121		; 00000079H
  002c8	e8 00 00 00 00	 call	 Py_BuildValue
  002cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@BPAFPFHD@ERROR_SEM_TIMEOUT?$AA@
  002d4	48 8b cb	 mov	 rcx, rbx
  002d7	4c 8b c0	 mov	 r8, rax
  002da	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1298 :     WINAPI_CONSTANT(F_DWORD, FILE_FLAG_FIRST_PIPE_INSTANCE);

  002df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  002e6	ba 00 00 08 00	 mov	 edx, 524288		; 00080000H
  002eb	e8 00 00 00 00	 call	 Py_BuildValue
  002f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@PKHOEDGF@FILE_FLAG_FIRST_PIPE_INSTANCE?$AA@
  002f7	48 8b cb	 mov	 rcx, rbx
  002fa	4c 8b c0	 mov	 r8, rax
  002fd	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1299 :     WINAPI_CONSTANT(F_DWORD, FILE_FLAG_OVERLAPPED);

  00302	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00309	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  0030e	e8 00 00 00 00	 call	 Py_BuildValue
  00313	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@IKEPHOOJ@FILE_FLAG_OVERLAPPED?$AA@
  0031a	48 8b cb	 mov	 rcx, rbx
  0031d	4c 8b c0	 mov	 r8, rax
  00320	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1300 :     WINAPI_CONSTANT(F_DWORD, FILE_GENERIC_READ);

  00325	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0032c	ba 89 00 12 00	 mov	 edx, 1179785		; 00120089H
  00331	e8 00 00 00 00	 call	 Py_BuildValue
  00336	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@GMNABHGN@FILE_GENERIC_READ?$AA@
  0033d	48 8b cb	 mov	 rcx, rbx
  00340	4c 8b c0	 mov	 r8, rax
  00343	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1301 :     WINAPI_CONSTANT(F_DWORD, FILE_GENERIC_WRITE);

  00348	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0034f	ba 16 01 12 00	 mov	 edx, 1179926		; 00120116H
  00354	e8 00 00 00 00	 call	 Py_BuildValue
  00359	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@OFPOCHAM@FILE_GENERIC_WRITE?$AA@
  00360	48 8b cb	 mov	 rcx, rbx
  00363	4c 8b c0	 mov	 r8, rax
  00366	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1302 :     WINAPI_CONSTANT(F_DWORD, GENERIC_READ);

  0036b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00372	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  00377	e8 00 00 00 00	 call	 Py_BuildValue
  0037c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@INABCMMB@GENERIC_READ?$AA@
  00383	48 8b cb	 mov	 rcx, rbx
  00386	4c 8b c0	 mov	 r8, rax
  00389	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1303 :     WINAPI_CONSTANT(F_DWORD, GENERIC_WRITE);

  0038e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00395	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  0039a	e8 00 00 00 00	 call	 Py_BuildValue
  0039f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@DKHPBJPE@GENERIC_WRITE?$AA@
  003a6	48 8b cb	 mov	 rcx, rbx
  003a9	4c 8b c0	 mov	 r8, rax
  003ac	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1304 :     WINAPI_CONSTANT(F_DWORD, INFINITE);

  003b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  003b8	83 ca ff	 or	 edx, -1			; ffffffffH
  003bb	e8 00 00 00 00	 call	 Py_BuildValue
  003c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LPDIFJIG@INFINITE?$AA@
  003c7	48 8b cb	 mov	 rcx, rbx
  003ca	4c 8b c0	 mov	 r8, rax
  003cd	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1305 :     WINAPI_CONSTANT(F_DWORD, NMPWAIT_WAIT_FOREVER);

  003d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  003d9	83 ca ff	 or	 edx, -1			; ffffffffH
  003dc	e8 00 00 00 00	 call	 Py_BuildValue
  003e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@JONJFBOM@NMPWAIT_WAIT_FOREVER?$AA@
  003e8	48 8b cb	 mov	 rcx, rbx
  003eb	4c 8b c0	 mov	 r8, rax
  003ee	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1306 :     WINAPI_CONSTANT(F_DWORD, OPEN_EXISTING);

  003f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  003fa	ba 03 00 00 00	 mov	 edx, 3
  003ff	e8 00 00 00 00	 call	 Py_BuildValue
  00404	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@PDPODOPO@OPEN_EXISTING?$AA@
  0040b	48 8b cb	 mov	 rcx, rbx
  0040e	4c 8b c0	 mov	 r8, rax
  00411	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1307 :     WINAPI_CONSTANT(F_DWORD, PIPE_ACCESS_DUPLEX);

  00416	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0041d	ba 03 00 00 00	 mov	 edx, 3
  00422	e8 00 00 00 00	 call	 Py_BuildValue
  00427	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@FFBOJLDP@PIPE_ACCESS_DUPLEX?$AA@
  0042e	48 8b cb	 mov	 rcx, rbx
  00431	4c 8b c0	 mov	 r8, rax
  00434	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1308 :     WINAPI_CONSTANT(F_DWORD, PIPE_ACCESS_INBOUND);

  00439	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00440	ba 01 00 00 00	 mov	 edx, 1
  00445	e8 00 00 00 00	 call	 Py_BuildValue
  0044a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@JNPGDFFP@PIPE_ACCESS_INBOUND?$AA@
  00451	48 8b cb	 mov	 rcx, rbx
  00454	4c 8b c0	 mov	 r8, rax
  00457	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1309 :     WINAPI_CONSTANT(F_DWORD, PIPE_READMODE_MESSAGE);

  0045c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00463	ba 02 00 00 00	 mov	 edx, 2
  00468	e8 00 00 00 00	 call	 Py_BuildValue
  0046d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@NOJMDBGL@PIPE_READMODE_MESSAGE?$AA@
  00474	48 8b cb	 mov	 rcx, rbx
  00477	4c 8b c0	 mov	 r8, rax
  0047a	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1310 :     WINAPI_CONSTANT(F_DWORD, PIPE_TYPE_MESSAGE);

  0047f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00486	ba 04 00 00 00	 mov	 edx, 4
  0048b	e8 00 00 00 00	 call	 Py_BuildValue
  00490	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DPNGHAPK@PIPE_TYPE_MESSAGE?$AA@
  00497	48 8b cb	 mov	 rcx, rbx
  0049a	4c 8b c0	 mov	 r8, rax
  0049d	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1311 :     WINAPI_CONSTANT(F_DWORD, PIPE_UNLIMITED_INSTANCES);

  004a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  004a9	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
  004ae	e8 00 00 00 00	 call	 Py_BuildValue
  004b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@KDCCODEA@PIPE_UNLIMITED_INSTANCES?$AA@
  004ba	48 8b cb	 mov	 rcx, rbx
  004bd	4c 8b c0	 mov	 r8, rax
  004c0	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1312 :     WINAPI_CONSTANT(F_DWORD, PIPE_WAIT);

  004c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  004cc	33 d2		 xor	 edx, edx
  004ce	e8 00 00 00 00	 call	 Py_BuildValue
  004d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09GBJKLFDL@PIPE_WAIT?$AA@
  004da	48 8b cb	 mov	 rcx, rbx
  004dd	4c 8b c0	 mov	 r8, rax
  004e0	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1313 :     WINAPI_CONSTANT(F_DWORD, PROCESS_ALL_ACCESS);

  004e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  004ec	ba ff ff 1f 00	 mov	 edx, 2097151		; 001fffffH
  004f1	e8 00 00 00 00	 call	 Py_BuildValue
  004f6	4c 8b c0	 mov	 r8, rax
  004f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@COCJCFIN@PROCESS_ALL_ACCESS?$AA@
  00500	48 8b cb	 mov	 rcx, rbx
  00503	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1314 :     WINAPI_CONSTANT(F_DWORD, PROCESS_DUP_HANDLE);

  00508	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0050f	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00514	e8 00 00 00 00	 call	 Py_BuildValue
  00519	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@FNKPIEBO@PROCESS_DUP_HANDLE?$AA@
  00520	48 8b cb	 mov	 rcx, rbx
  00523	4c 8b c0	 mov	 r8, rax
  00526	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1315 :     WINAPI_CONSTANT(F_DWORD, STARTF_USESHOWWINDOW);

  0052b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00532	ba 01 00 00 00	 mov	 edx, 1
  00537	e8 00 00 00 00	 call	 Py_BuildValue
  0053c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@EKLPBPPK@STARTF_USESHOWWINDOW?$AA@
  00543	48 8b cb	 mov	 rcx, rbx
  00546	4c 8b c0	 mov	 r8, rax
  00549	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1316 :     WINAPI_CONSTANT(F_DWORD, STARTF_USESTDHANDLES);

  0054e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00555	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0055a	e8 00 00 00 00	 call	 Py_BuildValue
  0055f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KPBHCKBG@STARTF_USESTDHANDLES?$AA@
  00566	48 8b cb	 mov	 rcx, rbx
  00569	4c 8b c0	 mov	 r8, rax
  0056c	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1317 :     WINAPI_CONSTANT(F_DWORD, STD_INPUT_HANDLE);

  00571	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00578	ba f6 ff ff ff	 mov	 edx, -10		; fffffff6H
  0057d	e8 00 00 00 00	 call	 Py_BuildValue
  00582	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@NBEHNGDN@STD_INPUT_HANDLE?$AA@
  00589	48 8b cb	 mov	 rcx, rbx
  0058c	4c 8b c0	 mov	 r8, rax
  0058f	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1318 :     WINAPI_CONSTANT(F_DWORD, STD_OUTPUT_HANDLE);

  00594	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0059b	ba f5 ff ff ff	 mov	 edx, -11		; fffffff5H
  005a0	e8 00 00 00 00	 call	 Py_BuildValue
  005a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@PDBIEEGD@STD_OUTPUT_HANDLE?$AA@
  005ac	48 8b cb	 mov	 rcx, rbx
  005af	4c 8b c0	 mov	 r8, rax
  005b2	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1319 :     WINAPI_CONSTANT(F_DWORD, STD_ERROR_HANDLE);

  005b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  005be	ba f4 ff ff ff	 mov	 edx, -12		; fffffff4H
  005c3	e8 00 00 00 00	 call	 Py_BuildValue
  005c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@FJBFBONB@STD_ERROR_HANDLE?$AA@
  005cf	48 8b cb	 mov	 rcx, rbx
  005d2	4c 8b c0	 mov	 r8, rax
  005d5	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1320 :     WINAPI_CONSTANT(F_DWORD, STILL_ACTIVE);

  005da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  005e1	ba 03 01 00 00	 mov	 edx, 259		; 00000103H
  005e6	e8 00 00 00 00	 call	 Py_BuildValue
  005eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@EDJFMDHN@STILL_ACTIVE?$AA@
  005f2	48 8b cb	 mov	 rcx, rbx
  005f5	4c 8b c0	 mov	 r8, rax
  005f8	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1321 :     WINAPI_CONSTANT(F_DWORD, SW_HIDE);

  005fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00604	33 d2		 xor	 edx, edx
  00606	e8 00 00 00 00	 call	 Py_BuildValue
  0060b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07CONMCDML@SW_HIDE?$AA@
  00612	48 8b cb	 mov	 rcx, rbx
  00615	4c 8b c0	 mov	 r8, rax
  00618	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1322 :     WINAPI_CONSTANT(F_DWORD, WAIT_OBJECT_0);

  0061d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00624	33 d2		 xor	 edx, edx
  00626	e8 00 00 00 00	 call	 Py_BuildValue
  0062b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@BHMMAMPF@WAIT_OBJECT_0?$AA@
  00632	48 8b cb	 mov	 rcx, rbx
  00635	4c 8b c0	 mov	 r8, rax
  00638	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1323 :     WINAPI_CONSTANT(F_DWORD, WAIT_TIMEOUT);

  0063d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00644	ba 02 01 00 00	 mov	 edx, 258		; 00000102H
  00649	e8 00 00 00 00	 call	 Py_BuildValue
  0064e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MLFIMDEJ@WAIT_TIMEOUT?$AA@
  00655	48 8b cb	 mov	 rcx, rbx
  00658	4c 8b c0	 mov	 r8, rax
  0065b	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1324 : 
; 1325 :     WINAPI_CONSTANT("i", NULL);

  00660	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01KBJDNOO@i?$AA@
  00667	33 d2		 xor	 edx, edx
  00669	e8 00 00 00 00	 call	 Py_BuildValue
  0066e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04HIBGFPH@NULL?$AA@
  00675	48 8b cb	 mov	 rcx, rbx
  00678	4c 8b c0	 mov	 r8, rax
  0067b	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1326 : 
; 1327 :     return m;

  00680	48 8b c7	 mov	 rax, rdi
  00683	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00688	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]

; 1328 : }

  0068d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00691	c3		 ret	 0
PyInit__winapi ENDP
_TEXT	ENDS
END
