; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04NDFOBODE@code?$AA@			; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_0BC@GKIFBIPI@px_heapsize_total?$AA@	; `string'
PUBLIC	??_C@_0BB@NHEDMCIP@px_heapsize_hint?$AA@	; `string'
PUBLIC	??_C@_0BA@KCMIMEEK@px_heapsize_avg?$AA@		; `string'
PUBLIC	??_C@_0M@NMKIGMIF@px_execount?$AA@		; `string'
PUBLIC	??_C@_09LGHALADL@co_lnotab?$AA@			; `string'
PUBLIC	??_C@_0P@JJJJHJMP@co_firstlineno?$AA@		; `string'
PUBLIC	??_C@_07LJICJPDL@co_name?$AA@			; `string'
PUBLIC	??_C@_0M@FJDKFNEO@co_filename?$AA@		; `string'
PUBLIC	??_C@_0M@DIHPNBFP@co_cellvars?$AA@		; `string'
PUBLIC	??_C@_0M@LGABLIDJ@co_freevars?$AA@		; `string'
PUBLIC	??_C@_0M@KBDENPNM@co_varnames?$AA@		; `string'
PUBLIC	??_C@_08LFKAEBIO@co_names?$AA@			; `string'
PUBLIC	??_C@_09GCOHEAPF@co_consts?$AA@			; `string'
PUBLIC	??_C@_07KOBMBHDG@co_code?$AA@			; `string'
PUBLIC	??_C@_08OIDBGMIE@co_flags?$AA@			; `string'
PUBLIC	??_C@_0N@DPJPCAAC@co_stacksize?$AA@		; `string'
PUBLIC	??_C@_0L@LIELMDGN@co_nlocals?$AA@		; `string'
PUBLIC	??_C@_0BC@OGOCOIDC@co_kwonlyargcount?$AA@	; `string'
PUBLIC	??_C@_0M@HLFANOCM@co_argcount?$AA@		; `string'
PUBLIC	??_C@_0EA@KMGMBIME@0123456789ABCDEFGHIJKLMNOPQRSTUV@ ; `string'
PUBLIC	PyCode_Type
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
?emptystring@?1??PyCode_NewEmpty@@9@9 DQ 01H DUP (?)	; `PyCode_NewEmpty'::`2'::emptystring
?nulltuple@?1??PyCode_NewEmpty@@9@9 DQ 01H DUP (?)	; `PyCode_NewEmpty'::`2'::nulltuple
_BSS	ENDS
;	COMDAT ??_C@_04NDFOBODE@code?$AA@
CONST	SEGMENT
??_C@_04NDFOBODE@code?$AA@ DB 'code', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GKIFBIPI@px_heapsize_total?$AA@
CONST	SEGMENT
??_C@_0BC@GKIFBIPI@px_heapsize_total?$AA@ DB 'px_heapsize_total', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NHEDMCIP@px_heapsize_hint?$AA@
CONST	SEGMENT
??_C@_0BB@NHEDMCIP@px_heapsize_hint?$AA@ DB 'px_heapsize_hint', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KCMIMEEK@px_heapsize_avg?$AA@
CONST	SEGMENT
??_C@_0BA@KCMIMEEK@px_heapsize_avg?$AA@ DB 'px_heapsize_avg', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NMKIGMIF@px_execount?$AA@
CONST	SEGMENT
??_C@_0M@NMKIGMIF@px_execount?$AA@ DB 'px_execount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LGHALADL@co_lnotab?$AA@
CONST	SEGMENT
??_C@_09LGHALADL@co_lnotab?$AA@ DB 'co_lnotab', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JJJJHJMP@co_firstlineno?$AA@
CONST	SEGMENT
??_C@_0P@JJJJHJMP@co_firstlineno?$AA@ DB 'co_firstlineno', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LJICJPDL@co_name?$AA@
CONST	SEGMENT
??_C@_07LJICJPDL@co_name?$AA@ DB 'co_name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FJDKFNEO@co_filename?$AA@
CONST	SEGMENT
??_C@_0M@FJDKFNEO@co_filename?$AA@ DB 'co_filename', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DIHPNBFP@co_cellvars?$AA@
CONST	SEGMENT
??_C@_0M@DIHPNBFP@co_cellvars?$AA@ DB 'co_cellvars', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LGABLIDJ@co_freevars?$AA@
CONST	SEGMENT
??_C@_0M@LGABLIDJ@co_freevars?$AA@ DB 'co_freevars', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KBDENPNM@co_varnames?$AA@
CONST	SEGMENT
??_C@_0M@KBDENPNM@co_varnames?$AA@ DB 'co_varnames', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LFKAEBIO@co_names?$AA@
CONST	SEGMENT
??_C@_08LFKAEBIO@co_names?$AA@ DB 'co_names', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GCOHEAPF@co_consts?$AA@
CONST	SEGMENT
??_C@_09GCOHEAPF@co_consts?$AA@ DB 'co_consts', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KOBMBHDG@co_code?$AA@
CONST	SEGMENT
??_C@_07KOBMBHDG@co_code?$AA@ DB 'co_code', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OIDBGMIE@co_flags?$AA@
CONST	SEGMENT
??_C@_08OIDBGMIE@co_flags?$AA@ DB 'co_flags', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DPJPCAAC@co_stacksize?$AA@
CONST	SEGMENT
??_C@_0N@DPJPCAAC@co_stacksize?$AA@ DB 'co_stacksize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LIELMDGN@co_nlocals?$AA@
CONST	SEGMENT
??_C@_0L@LIELMDGN@co_nlocals?$AA@ DB 'co_nlocals', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OGOCOIDC@co_kwonlyargcount?$AA@
CONST	SEGMENT
??_C@_0BC@OGOCOIDC@co_kwonlyargcount?$AA@ DB 'co_kwonlyargcount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HLFANOCM@co_argcount?$AA@
CONST	SEGMENT
??_C@_0M@HLFANOCM@co_argcount?$AA@ DB 'co_argcount', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?name_chars@?1??all_name_chars@@9@9 DQ FLAT:??_C@_0EA@KMGMBIME@0123456789ABCDEFGHIJKLMNOPQRSTUV@ ; `all_name_chars'::`2'::name_chars
	ORG $+8
code_memberlist DQ FLAT:??_C@_0M@HLFANOCM@co_argcount?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BC@OGOCOIDC@co_kwonlyargcount?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000064H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@LIELMDGN@co_nlocals?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@DPJPCAAC@co_stacksize?$AA@
	DD	01H
	ORG $+4
	DQ	000000000000006cH
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08OIDBGMIE@co_flags?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07KOBMBHDG@co_code?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000078H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_09GCOHEAPF@co_consts?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000080H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08LFKAEBIO@co_names?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000088H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@KBDENPNM@co_varnames?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000090H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@LGABLIDJ@co_freevars?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000098H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@DIHPNBFP@co_cellvars?$AA@
	DD	06H
	ORG $+4
	DQ	00000000000000a0H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@FJDKFNEO@co_filename?$AA@
	DD	06H
	ORG $+4
	DQ	00000000000000b0H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07LJICJPDL@co_name?$AA@
	DD	06H
	ORG $+4
	DQ	00000000000000b8H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@JJJJHJMP@co_firstlineno?$AA@
	DD	01H
	ORG $+4
	DQ	00000000000000c0H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_09LGHALADL@co_lnotab?$AA@
	DD	06H
	ORG $+4
	DQ	00000000000000c8H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@NMKIGMIF@px_execount?$AA@
	DD	013H
	ORG $+4
	DQ	00000000000000e0H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BA@KCMIMEEK@px_heapsize_avg?$AA@
	DD	013H
	ORG $+4
	DQ	00000000000000e8H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@NHEDMCIP@px_heapsize_hint?$AA@
	DD	013H
	ORG $+4
	DQ	00000000000000f0H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BC@GKIFBIPI@px_heapsize_total?$AA@
	DD	013H
	ORG $+4
	DQ	00000000000000f8H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
code_doc DB	'code(argcount, kwonlyargcount, nlocals, stacksize, flags'
	DB	', codestring,', 0aH, '      constants, names, varnames, filen'
	DB	'ame, name, firstlineno,', 0aH, '      lnotab[, freevars[, cel'
	DB	'lvars]])', 0aH, 0aH, 'Create a code object.  Not for the fain'
	DB	't of heart.', 00H
	ORG $+1
code_methods DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:code_sizeof
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyCode_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04NDFOBODE@code?$AA@
	DQ	0000000000000110H
	DQ	0000000000000000H
	DQ	FLAT:code_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:code_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:code_hash
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	FLAT:code_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:code_richcompare
	DQ	00000000000000d8H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:code_methods
	DQ	FLAT:code_memberlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:code_new
	ORG $+72
_DATA	ENDS
;	COMDAT ??_C@_0EA@KMGMBIME@0123456789ABCDEFGHIJKLMNOPQRSTUV@
CONST	SEGMENT
??_C@_0EA@KMGMBIME@0123456789ABCDEFGHIJKLMNOPQRSTUV@ DB '0123456789ABCDEF'
	DB	'GHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz', 00H ; `string'
CONST	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyObject_Init:PROC
EXTRN	PyObject_Malloc:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$_PyObject_NEW DD imagerel _PyObject_NEW
	DD	imagerel _PyObject_NEW+56
	DD	imagerel $unwind$_PyObject_NEW
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_NEW DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyObject_NEW
_TEXT	SEGMENT
tp$ = 48
_PyObject_NEW PROC					; COMDAT

; 293  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 294  :     Px_RETURN(_PxObject_New(tp))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 0d		 je	 SHORT $LN1@PyObject_N
  00012	48 8b cb	 mov	 rcx, rbx

; 296  : }

  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5b		 pop	 rbx
  0001a	e9 00 00 00 00	 jmp	 _PxObject_New
$LN1@PyObject_N:

; 295  :     return PyObject_Init((PyObject *)PyObject_MALLOC(_PyObject_SIZE(tp)), tp);

  0001f	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  00023	e8 00 00 00 00	 call	 PyObject_Malloc
  00028	48 8b d3	 mov	 rdx, rbx
  0002b	48 8b c8	 mov	 rcx, rax

; 296  : }

  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5b		 pop	 rbx
  00033	e9 00 00 00 00	 jmp	 PyObject_Init
_PyObject_NEW ENDP
_TEXT	ENDS
EXTRN	_PyUnicode_Ready:PROC
_BSS	SEGMENT
?ok_name_char@?1??all_name_chars@@9@9 DB 0100H DUP (?)	; `all_name_chars'::`2'::ok_name_char
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\codeobject.c
pdata	SEGMENT
$pdata$all_name_chars DD imagerel all_name_chars
	DD	imagerel all_name_chars+230
	DD	imagerel $unwind$all_name_chars
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$all_name_chars DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT all_name_chars
_TEXT	SEGMENT
o$ = 48
all_name_chars PROC					; COMDAT

; 12   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 13   :     static char ok_name_char[256];
; 14   :     static unsigned char *name_chars = (unsigned char *)NAME_CHARS;
; 15   :     PyUnicodeObject *u = (PyUnicodeObject *)o;
; 16   :     const unsigned char *s;
; 17   : 
; 18   :     if (!PyUnicode_Check(o) || PyUnicode_READY(u) == -1 ||
; 19   :         PyUnicode_MAX_CHAR_VALUE(u) >= 128)

  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00017	0f 84 c1 00 00
	00		 je	 $LN8@all_name_c
  0001d	f6 41 70 80	 test	 BYTE PTR [rcx+112], 128	; 00000080H
  00021	75 0e		 jne	 SHORT $LN26@all_name_c
  00023	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00028	83 f8 ff	 cmp	 eax, -1
  0002b	0f 84 ad 00 00
	00		 je	 $LN8@all_name_c
$LN26@all_name_c:
  00031	8b 4b 70	 mov	 ecx, DWORD PTR [rbx+112]
  00034	f6 c1 40	 test	 cl, 64			; 00000040H
  00037	75 26		 jne	 SHORT $LN27@all_name_c
  00039	c1 e9 02	 shr	 ecx, 2
  0003c	83 e1 07	 and	 ecx, 7
  0003f	83 f9 01	 cmp	 ecx, 1
  00042	0f 84 96 00 00
	00		 je	 $LN8@all_name_c
  00048	83 f9 02	 cmp	 ecx, 2
  0004b	b8 ff ff 10 00	 mov	 eax, 1114111		; 0010ffffH
  00050	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00055	0f 44 c2	 cmove	 eax, edx
  00058	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0005d	73 7f		 jae	 SHORT $LN8@all_name_c
$LN27@all_name_c:

; 21   : 
; 22   :     if (ok_name_char[*name_chars] == 0) {

  0005f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?name_chars@?1??all_name_chars@@9@9
  00066	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ok_name_char@?1??all_name_chars@@9@9
  0006d	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00070	80 3c 10 00	 cmp	 BYTE PTR [rax+rdx], 0
  00074	75 1b		 jne	 SHORT $LN4@all_name_c

; 23   :         unsigned char *p;
; 24   :         for (p = name_chars; *p; p++)

  00076	84 c0		 test	 al, al
  00078	74 17		 je	 SHORT $LN4@all_name_c
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL6@all_name_c:

; 25   :             ok_name_char[*p] = 1;

  00080	0f b6 c0	 movzx	 eax, al
  00083	48 ff c1	 inc	 rcx
  00086	c6 04 10 01	 mov	 BYTE PTR [rax+rdx], 1
  0008a	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  0008d	84 c0		 test	 al, al
  0008f	75 ef		 jne	 SHORT $LL6@all_name_c
$LN4@all_name_c:

; 26   :     }
; 27   :     s = PyUnicode_1BYTE_DATA(u);

  00091	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  00094	a8 20		 test	 al, 32			; 00000020H
  00096	74 16		 je	 SHORT $LN20@all_name_c
  00098	a8 40		 test	 al, 64			; 00000040H
  0009a	74 09		 je	 SHORT $LN18@all_name_c
  0009c	48 8d 8b 80 00
	00 00		 lea	 rcx, QWORD PTR [rbx+128]
  000a3	eb 10		 jmp	 SHORT $LN21@all_name_c
$LN18@all_name_c:
  000a5	48 8d 8b a0 00
	00 00		 lea	 rcx, QWORD PTR [rbx+160]
  000ac	eb 07		 jmp	 SHORT $LN21@all_name_c
$LN20@all_name_c:
  000ae	48 8b 8b a0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+160]
$LN21@all_name_c:

; 28   :     while (*s) {

  000b5	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  000b8	84 c0		 test	 al, al
  000ba	74 17		 je	 SHORT $LN2@all_name_c
  000bc	0f 1f 40 00	 npad	 4
$LL3@all_name_c:

; 29   :         if (ok_name_char[*s++] == 0)

  000c0	0f b6 c0	 movzx	 eax, al
  000c3	48 ff c1	 inc	 rcx
  000c6	80 3c 10 00	 cmp	 BYTE PTR [rax+rdx], 0
  000ca	74 12		 je	 SHORT $LN8@all_name_c

; 28   :     while (*s) {

  000cc	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  000cf	84 c0		 test	 al, al
  000d1	75 ed		 jne	 SHORT $LL3@all_name_c
$LN2@all_name_c:

; 30   :             return 0;
; 31   :     }
; 32   :     return 1;

  000d3	b8 01 00 00 00	 mov	 eax, 1

; 33   : }

  000d8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000dc	5b		 pop	 rbx
  000dd	c3		 ret	 0
$LN8@all_name_c:

; 20   :         return 0;

  000de	33 c0		 xor	 eax, eax

; 33   : }

  000e0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e4	5b		 pop	 rbx
  000e5	c3		 ret	 0
all_name_chars ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@PIFEGBLP@non?9string?5found?5in?5code?5slot?$AA@ ; `string'
EXTRN	PyUnicode_InternInPlace:PROC
EXTRN	Py_FatalError:PROC
EXTRN	PyUnicode_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$intern_strings DD imagerel intern_strings
	DD	imagerel intern_strings+15
	DD	imagerel $unwind$intern_strings
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$intern_strings DD imagerel intern_strings+15
	DD	imagerel intern_strings+90
	DD	imagerel $chain$1$intern_strings
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$intern_strings DD imagerel intern_strings+90
	DD	imagerel intern_strings+96
	DD	imagerel $chain$2$intern_strings
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$intern_strings DD 021H
	DD	imagerel intern_strings
	DD	imagerel intern_strings+15
	DD	imagerel $unwind$intern_strings
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$intern_strings DD 040a21H
	DD	07640aH
	DD	063405H
	DD	imagerel intern_strings
	DD	imagerel intern_strings+15
	DD	imagerel $unwind$intern_strings
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$intern_strings DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT ??_C@_0BO@PIFEGBLP@non?9string?5found?5in?5code?5slot?$AA@
CONST	SEGMENT
??_C@_0BO@PIFEGBLP@non?9string?5found?5in?5code?5slot?$AA@ DB 'non-string'
	DB	' found in code slot', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT intern_strings
_TEXT	SEGMENT
tuple$ = 48
intern_strings PROC					; COMDAT

; 37   : {

  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 38   :     Py_ssize_t i;
; 39   : 
; 40   :     for (i = PyTuple_GET_SIZE(tuple); --i >= 0; ) {

  00006	48 8b 79 60	 mov	 rdi, QWORD PTR [rcx+96]
  0000a	48 ff cf	 dec	 rdi
  0000d	78 4b		 js	 SHORT $LN3@intern_str
  0000f	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00014	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  00019	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:PyUnicode_Type
  00020	48 8d 5c f9 70	 lea	 rbx, QWORD PTR [rcx+rdi*8+112]
$LL4@intern_str:

; 41   :         PyObject *v = PyTuple_GET_ITEM(tuple, i);

  00025	48 8b 03	 mov	 rax, QWORD PTR [rbx]

; 42   :         if (v == NULL || !PyUnicode_CheckExact(v)) {

  00028	48 85 c0	 test	 rax, rax
  0002b	74 06		 je	 SHORT $LN1@intern_str
  0002d	48 39 70 58	 cmp	 QWORD PTR [rax+88], rsi
  00031	74 0c		 je	 SHORT $LN2@intern_str
$LN1@intern_str:

; 43   :             Py_FatalError("non-string found in code slot");

  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@PIFEGBLP@non?9string?5found?5in?5code?5slot?$AA@
  0003a	e8 00 00 00 00	 call	 Py_FatalError
$LN2@intern_str:

; 44   :         }
; 45   :         PyUnicode_InternInPlace(&PyTuple_GET_ITEM(tuple, i));

  0003f	48 8b cb	 mov	 rcx, rbx
  00042	e8 00 00 00 00	 call	 PyUnicode_InternInPlace
  00047	48 83 eb 08	 sub	 rbx, 8
  0004b	48 ff cf	 dec	 rdi
  0004e	79 d5		 jns	 SHORT $LL4@intern_str
  00050	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00055	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN3@intern_str:

; 46   :     }
; 47   : }

  0005a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005e	5f		 pop	 rdi
  0005f	c3		 ret	 0
intern_strings ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@MAGENHEB@PyCode_New?$AA@		; `string'
PUBLIC	??_C@_0BI@MOGPFDIH@?4?4?2Objects?2codeobject?4c?$AA@ ; `string'
PUBLIC	PyCode_New
EXTRN	_PyErr_BadInternalCall:PROC
EXTRN	__imp_free:PROC
EXTRN	_PxMem_Free:PROC
EXTRN	PyUnicode_Compare:PROC
EXTRN	__imp_malloc:PROC
EXTRN	_PxMem_Malloc:PROC
EXTRN	PyTuple_GetItem:PROC
EXTRN	PyObject_CheckReadBuffer:PROC
EXTRN	_PyParallel_ContextGuardFailure:PROC
EXTRN	memset:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$PyCode_New DD imagerel $LN47
	DD	imagerel $LN47+444
	DD	imagerel $unwind$PyCode_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PyCode_New DD imagerel $LN47+444
	DD	imagerel $LN47+949
	DD	imagerel $chain$3$PyCode_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PyCode_New DD imagerel $LN47+949
	DD	imagerel $LN47+975
	DD	imagerel $chain$4$PyCode_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$PyCode_New DD imagerel $LN47+975
	DD	imagerel $LN47+1290
	DD	imagerel $chain$5$PyCode_New
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$PyCode_New DD imagerel $LN47+1290
	DD	imagerel $LN47+1314
	DD	imagerel $chain$6$PyCode_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$PyCode_New DD 021H
	DD	imagerel $LN47
	DD	imagerel $LN47+444
	DD	imagerel $unwind$PyCode_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$PyCode_New DD 020021H
	DD	07f400H
	DD	imagerel $LN47
	DD	imagerel $LN47+444
	DD	imagerel $unwind$PyCode_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PyCode_New DD 021H
	DD	imagerel $LN47
	DD	imagerel $LN47+444
	DD	imagerel $unwind$PyCode_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PyCode_New DD 020521H
	DD	07f405H
	DD	imagerel $LN47
	DD	imagerel $LN47+444
	DD	imagerel $unwind$PyCode_New
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCode_New DD 0b5901H
	DD	08c459H
	DD	096454H
	DD	0a544fH
	DD	0e018a21cH
	DD	07014d016H
	DD	03013H
xdata	ENDS
;	COMDAT ??_C@_0L@MAGENHEB@PyCode_New?$AA@
CONST	SEGMENT
??_C@_0L@MAGENHEB@PyCode_New?$AA@ DB 'PyCode_New', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MOGPFDIH@?4?4?2Objects?2codeobject?4c?$AA@
CONST	SEGMENT
??_C@_0BI@MOGPFDIH@?4?4?2Objects?2codeobject?4c?$AA@ DB '..\Objects\codeo'
	DB	'bject.c', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\codeobject.c
CONST	ENDS
;	COMDAT PyCode_New
_TEXT	SEGMENT
used_cell2arg$1$ = 32
argcount$ = 128
kwonlyargcount$ = 136
nlocals$ = 144
stacksize$ = 152
flags$ = 160
code$ = 168
consts$ = 176
names$ = 184
varnames$ = 192
freevars$ = 200
cellvars$ = 208
filename$ = 216
name$ = 224
firstlineno$ = 232
lnotab$ = 240
PyCode_New PROC						; COMDAT

; 57   : {

$LN47:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	53		 push	 rbx
  00013	57		 push	 rdi
  00014	41 55		 push	 r13
  00016	41 56		 push	 r14
  00018	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0001c	41 8b f8	 mov	 edi, r8d
  0001f	44 8b f2	 mov	 r14d, edx
  00022	8b d9		 mov	 ebx, ecx

; 58   :     PyCodeObject *co;
; 59   :     unsigned char *cell2arg = NULL;

  00024	45 33 ed	 xor	 r13d, r13d

; 60   :     Py_ssize_t i, n_cellvars;
; 61   : 
; 62   :     Py_GUARD

  00027	e8 00 00 00 00	 call	 _Py_PXCTX
  0002c	85 c0		 test	 eax, eax
  0002e	74 1a		 je	 SHORT $LN18@PyCode_New
  00030	45 8d 45 3e	 lea	 r8d, QWORD PTR [r13+62]
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@MOGPFDIH@?4?4?2Objects?2codeobject?4c?$AA@
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@MAGENHEB@PyCode_New?$AA@
  00042	45 33 c9	 xor	 r9d, r9d
  00045	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN18@PyCode_New:

; 63   : 
; 64   :     /* Check argument types */
; 65   :     if (argcount < 0 || kwonlyargcount < 0 || nlocals < 0 ||
; 66   :         code == NULL ||
; 67   :         consts == NULL || !PyTuple_Check(consts) ||
; 68   :         names == NULL || !PyTuple_Check(names) ||
; 69   :         varnames == NULL || !PyTuple_Check(varnames) ||
; 70   :         freevars == NULL || !PyTuple_Check(freevars) ||
; 71   :         cellvars == NULL || !PyTuple_Check(cellvars) ||
; 72   :         name == NULL || !PyUnicode_Check(name) ||
; 73   :         filename == NULL || !PyUnicode_Check(filename) ||
; 74   :         lnotab == NULL || !PyBytes_Check(lnotab) ||
; 75   :         !PyObject_CheckReadBuffer(code)) {

  0004a	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  0004f	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  00054	4c 89 64 24 40	 mov	 QWORD PTR [rsp+64], r12
  00059	85 db		 test	 ebx, ebx
  0005b	0f 88 a9 04 00
	00		 js	 $LN16@PyCode_New
  00061	45 85 f6	 test	 r14d, r14d
  00064	0f 88 a0 04 00
	00		 js	 $LN16@PyCode_New
  0006a	85 ff		 test	 edi, edi
  0006c	0f 88 98 04 00
	00		 js	 $LN16@PyCode_New
  00072	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  0007a	48 85 c9	 test	 rcx, rcx
  0007d	0f 84 87 04 00
	00		 je	 $LN16@PyCode_New
  00083	48 8b b4 24 b0
	00 00 00	 mov	 rsi, QWORD PTR consts$[rsp]
  0008b	48 85 f6	 test	 rsi, rsi
  0008e	0f 84 76 04 00
	00		 je	 $LN16@PyCode_New
  00094	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  00098	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  000a2	0f 84 62 04 00
	00		 je	 $LN16@PyCode_New
  000a8	48 8b bc 24 b8
	00 00 00	 mov	 rdi, QWORD PTR names$[rsp]
  000b0	48 85 ff	 test	 rdi, rdi
  000b3	0f 84 51 04 00
	00		 je	 $LN16@PyCode_New
  000b9	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000bd	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  000c7	0f 84 3d 04 00
	00		 je	 $LN16@PyCode_New
  000cd	48 8b ac 24 c0
	00 00 00	 mov	 rbp, QWORD PTR varnames$[rsp]
  000d5	48 85 ed	 test	 rbp, rbp
  000d8	0f 84 2c 04 00
	00		 je	 $LN16@PyCode_New
  000de	48 8b 45 58	 mov	 rax, QWORD PTR [rbp+88]
  000e2	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  000ec	0f 84 18 04 00
	00		 je	 $LN16@PyCode_New
  000f2	48 8b 9c 24 c8
	00 00 00	 mov	 rbx, QWORD PTR freevars$[rsp]
  000fa	48 85 db	 test	 rbx, rbx
  000fd	0f 84 07 04 00
	00		 je	 $LN16@PyCode_New
  00103	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00107	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00111	0f 84 f3 03 00
	00		 je	 $LN16@PyCode_New
  00117	4c 8b a4 24 d0
	00 00 00	 mov	 r12, QWORD PTR cellvars$[rsp]
  0011f	4d 85 e4	 test	 r12, r12
  00122	0f 84 e2 03 00
	00		 je	 $LN16@PyCode_New
  00128	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]
  0012d	f7 80 00 01 00
	00 00 00 00 04	 test	 DWORD PTR [rax+256], 67108864 ; 04000000H
  00137	0f 84 cd 03 00
	00		 je	 $LN16@PyCode_New
  0013d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00145	48 85 c0	 test	 rax, rax
  00148	0f 84 bc 03 00
	00		 je	 $LN16@PyCode_New
  0014e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00152	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0015c	0f 84 a8 03 00
	00		 je	 $LN16@PyCode_New
  00162	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  0016a	48 85 c0	 test	 rax, rax
  0016d	0f 84 97 03 00
	00		 je	 $LN16@PyCode_New
  00173	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00177	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00181	0f 84 83 03 00
	00		 je	 $LN16@PyCode_New
  00187	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR lnotab$[rsp]
  0018f	48 85 c0	 test	 rax, rax
  00192	0f 84 72 03 00
	00		 je	 $LN16@PyCode_New
  00198	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0019c	f7 80 00 01 00
	00 00 00 00 08	 test	 DWORD PTR [rax+256], 134217728 ; 08000000H
  001a6	0f 84 5e 03 00
	00		 je	 $LN16@PyCode_New
  001ac	e8 00 00 00 00	 call	 PyObject_CheckReadBuffer
  001b1	85 c0		 test	 eax, eax
  001b3	0f 84 51 03 00
	00		 je	 $LN16@PyCode_New

; 80   :     intern_strings(names);

  001b9	48 8b cf	 mov	 rcx, rdi
  001bc	4c 89 7c 24 38	 mov	 QWORD PTR [rsp+56], r15
  001c1	4d 8b 7c 24 60	 mov	 r15, QWORD PTR [r12+96]
  001c6	e8 00 00 00 00	 call	 intern_strings

; 81   :     intern_strings(varnames);

  001cb	48 8b cd	 mov	 rcx, rbp
  001ce	e8 00 00 00 00	 call	 intern_strings

; 82   :     intern_strings(freevars);

  001d3	48 8b cb	 mov	 rcx, rbx
  001d6	e8 00 00 00 00	 call	 intern_strings

; 83   :     intern_strings(cellvars);

  001db	49 8b cc	 mov	 rcx, r12
  001de	e8 00 00 00 00	 call	 intern_strings

; 84   :     /* Intern selected string constants */
; 85   :     for (i = PyTuple_GET_SIZE(consts); --i >= 0; ) {

  001e3	48 8b 5e 60	 mov	 rbx, QWORD PTR [rsi+96]
  001e7	48 ff cb	 dec	 rbx
  001ea	78 2d		 js	 SHORT $LN14@PyCode_New

; 78   :     }
; 79   :     n_cellvars = PyTuple_GET_SIZE(cellvars);

  001ec	48 8d 7c de 70	 lea	 rdi, QWORD PTR [rsi+rbx*8+112]
$LL15@PyCode_New:

; 86   :         PyObject *v = PyTuple_GetItem(consts, i);

  001f1	48 8b d3	 mov	 rdx, rbx
  001f4	48 8b ce	 mov	 rcx, rsi
  001f7	e8 00 00 00 00	 call	 PyTuple_GetItem

; 87   :         if (!all_name_chars(v))

  001fc	48 8b c8	 mov	 rcx, rax
  001ff	e8 00 00 00 00	 call	 all_name_chars
  00204	85 c0		 test	 eax, eax
  00206	74 08		 je	 SHORT $LN37@PyCode_New

; 88   :             continue;
; 89   :         PyUnicode_InternInPlace(&PyTuple_GET_ITEM(consts, i));

  00208	48 8b cf	 mov	 rcx, rdi
  0020b	e8 00 00 00 00	 call	 PyUnicode_InternInPlace
$LN37@PyCode_New:

; 84   :     /* Intern selected string constants */
; 85   :     for (i = PyTuple_GET_SIZE(consts); --i >= 0; ) {

  00210	48 83 ef 08	 sub	 rdi, 8
  00214	48 ff cb	 dec	 rbx
  00217	79 d8		 jns	 SHORT $LL15@PyCode_New
$LN14@PyCode_New:

; 90   :     }
; 91   :     /* Create mapping between cells and arguments if needed. */
; 92   :     if (n_cellvars) {

  00219	4d 85 ff	 test	 r15, r15
  0021c	0f 84 31 01 00
	00		 je	 $LN43@PyCode_New

; 93   :         Py_ssize_t total_args = argcount + kwonlyargcount +
; 94   :             ((flags & CO_VARARGS) != 0) + ((flags & CO_VARKEYWORDS) != 0);

  00222	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR flags$[rsp]
  00229	8b c1		 mov	 eax, ecx
  0022b	c1 e9 02	 shr	 ecx, 2
  0022e	c1 e8 03	 shr	 eax, 3
  00231	83 e1 01	 and	 ecx, 1
  00234	83 e0 01	 and	 eax, 1
  00237	03 84 24 80 00
	00 00		 add	 eax, DWORD PTR argcount$[rsp]
  0023e	03 c8		 add	 ecx, eax
  00240	41 03 ce	 add	 ecx, r14d

; 95   :         Py_ssize_t alloc_size = sizeof(unsigned char) * n_cellvars;
; 96   :         int used_cell2arg = 0;

  00243	45 33 f6	 xor	 r14d, r14d
  00246	41 8b fe	 mov	 edi, r14d
  00249	44 89 74 24 20	 mov	 DWORD PTR used_cell2arg$1$[rsp], r14d
  0024e	48 63 f1	 movsxd	 rsi, ecx

; 97   :         cell2arg = PyMem_MALLOC(alloc_size);

  00251	e8 00 00 00 00	 call	 _Py_PXCTX
  00256	85 c0		 test	 eax, eax
  00258	74 0a		 je	 SHORT $LN23@PyCode_New
  0025a	49 8b cf	 mov	 rcx, r15
  0025d	e8 00 00 00 00	 call	 _PxMem_Malloc
  00262	eb 1c		 jmp	 SHORT $LN45@PyCode_New
$LN23@PyCode_New:
  00264	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0026e	4c 3b f8	 cmp	 r15, rax
  00271	0f 87 37 01 00
	00		 ja	 $LN28@PyCode_New
  00277	49 8b cf	 mov	 rcx, r15
  0027a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
$LN45@PyCode_New:
  00280	4c 8b e8	 mov	 r13, rax

; 98   :         if (cell2arg == NULL)

  00283	48 85 c0	 test	 rax, rax
  00286	0f 84 22 01 00
	00		 je	 $LN28@PyCode_New

; 99   :             return NULL;
; 100  :         memset(cell2arg, CO_CELL_NOT_AN_ARG, alloc_size);

  0028c	4d 8b c7	 mov	 r8, r15
  0028f	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
  00294	48 8b c8	 mov	 rcx, rax
  00297	e8 00 00 00 00	 call	 memset

; 101  :         /* Find cells which are also arguments. */
; 102  :         for (i = 0; i < n_cellvars; i++) {

  0029c	49 8b ee	 mov	 rbp, r14
  0029f	4d 85 ff	 test	 r15, r15
  002a2	7e 6e		 jle	 SHORT $LN41@PyCode_New

; 99   :             return NULL;
; 100  :         memset(cell2arg, CO_CELL_NOT_AN_ARG, alloc_size);

  002a4	4d 8d 74 24 70	 lea	 r14, QWORD PTR [r12+112]
  002a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@PyCode_New:

; 103  :             Py_ssize_t j;
; 104  :             PyObject *cell = PyTuple_GET_ITEM(cellvars, i);

  002b0	4d 8b 26	 mov	 r12, QWORD PTR [r14]

; 105  :             for (j = 0; j < total_args; j++) {

  002b3	33 db		 xor	 ebx, ebx
  002b5	48 85 f6	 test	 rsi, rsi
  002b8	7e 45		 jle	 SHORT $LN9@PyCode_New

; 103  :             Py_ssize_t j;
; 104  :             PyObject *cell = PyTuple_GET_ITEM(cellvars, i);

  002ba	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR varnames$[rsp]
  002c2	48 83 c7 70	 add	 rdi, 112		; 00000070H
  002c6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL7@PyCode_New:

; 106  :                 PyObject *arg = PyTuple_GET_ITEM(varnames, j);
; 107  :                 if (!PyUnicode_Compare(cell, arg)) {

  002d0	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  002d3	49 8b cc	 mov	 rcx, r12
  002d6	e8 00 00 00 00	 call	 PyUnicode_Compare
  002db	85 c0		 test	 eax, eax
  002dd	74 12		 je	 SHORT $LN36@PyCode_New

; 105  :             for (j = 0; j < total_args; j++) {

  002df	48 ff c3	 inc	 rbx
  002e2	48 83 c7 08	 add	 rdi, 8
  002e6	48 3b de	 cmp	 rbx, rsi
  002e9	7c e5		 jl	 SHORT $LL7@PyCode_New

; 106  :                 PyObject *arg = PyTuple_GET_ITEM(varnames, j);
; 107  :                 if (!PyUnicode_Compare(cell, arg)) {

  002eb	8b 7c 24 20	 mov	 edi, DWORD PTR used_cell2arg$1$[rsp]
  002ef	eb 0e		 jmp	 SHORT $LN9@PyCode_New
$LN36@PyCode_New:

; 108  :                     cell2arg[i] = j;
; 109  :                     used_cell2arg = 1;

  002f1	bf 01 00 00 00	 mov	 edi, 1
  002f6	41 88 5c 2d 00	 mov	 BYTE PTR [r13+rbp], bl
  002fb	89 7c 24 20	 mov	 DWORD PTR used_cell2arg$1$[rsp], edi
$LN9@PyCode_New:

; 101  :         /* Find cells which are also arguments. */
; 102  :         for (i = 0; i < n_cellvars; i++) {

  002ff	48 ff c5	 inc	 rbp
  00302	49 83 c6 08	 add	 r14, 8
  00306	49 3b ef	 cmp	 rbp, r15
  00309	7c a5		 jl	 SHORT $LL10@PyCode_New

; 110  :                     break;
; 111  :                 }
; 112  :             }
; 113  :         }
; 114  :         if (!used_cell2arg) {

  0030b	45 33 f6	 xor	 r14d, r14d
  0030e	85 ff		 test	 edi, edi
  00310	75 2f		 jne	 SHORT $LN42@PyCode_New
$LN41@PyCode_New:

; 115  :             PyMem_FREE(cell2arg);

  00312	e8 00 00 00 00	 call	 _Py_PXCTX
  00317	49 8b cd	 mov	 rcx, r13
  0031a	85 c0		 test	 eax, eax
  0031c	74 1a		 je	 SHORT $LN25@PyCode_New
  0031e	e8 00 00 00 00	 call	 _PxMem_Free

; 116  :             cell2arg = NULL;

  00323	48 8b b4 24 b0
	00 00 00	 mov	 rsi, QWORD PTR consts$[rsp]
  0032b	48 8b ac 24 c0
	00 00 00	 mov	 rbp, QWORD PTR varnames$[rsp]
  00333	4d 8b ee	 mov	 r13, r14
  00336	eb 1e		 jmp	 SHORT $LN3@PyCode_New
$LN25@PyCode_New:

; 115  :             PyMem_FREE(cell2arg);

  00338	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 116  :             cell2arg = NULL;

  0033e	4d 8b ee	 mov	 r13, r14
$LN42@PyCode_New:
  00341	48 8b b4 24 b0
	00 00 00	 mov	 rsi, QWORD PTR consts$[rsp]
  00349	48 8b ac 24 c0
	00 00 00	 mov	 rbp, QWORD PTR varnames$[rsp]
  00351	eb 03		 jmp	 SHORT $LN3@PyCode_New
$LN43@PyCode_New:

; 126  :     co->co_kwonlyargcount = kwonlyargcount;
; 127  :     co->co_nlocals = nlocals;
; 128  :     co->co_stacksize = stacksize;

  00353	45 33 f6	 xor	 r14d, r14d
$LN3@PyCode_New:

; 117  :         }
; 118  :     }
; 119  :     co = PyObject_NEW(PyCodeObject, &PyCode_Type);

  00356	e8 00 00 00 00	 call	 _Py_PXCTX
  0035b	85 c0		 test	 eax, eax
  0035d	74 0e		 je	 SHORT $LN29@PyCode_New
  0035f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCode_Type
  00366	e8 00 00 00 00	 call	 _PxObject_New
  0036b	eb 1b		 jmp	 SHORT $LN46@PyCode_New
$LN29@PyCode_New:
  0036d	48 8b 0d 78 00
	00 00		 mov	 rcx, QWORD PTR PyCode_Type+120
  00374	e8 00 00 00 00	 call	 PyObject_Malloc
  00379	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyCode_Type
  00380	48 8b c8	 mov	 rcx, rax
  00383	e8 00 00 00 00	 call	 PyObject_Init
$LN46@PyCode_New:
  00388	48 8b d8	 mov	 rbx, rax

; 120  :     if (co == NULL) {

  0038b	48 85 c0	 test	 rax, rax
  0038e	75 3f		 jne	 SHORT $LN2@PyCode_New

; 121  :         if (cell2arg)

  00390	4d 85 ed	 test	 r13, r13
  00393	74 19		 je	 SHORT $LN28@PyCode_New

; 122  :             PyMem_FREE(cell2arg);

  00395	e8 00 00 00 00	 call	 _Py_PXCTX
  0039a	49 8b cd	 mov	 rcx, r13
  0039d	85 c0		 test	 eax, eax
  0039f	74 07		 je	 SHORT $LN27@PyCode_New
  003a1	e8 00 00 00 00	 call	 _PxMem_Free
  003a6	eb 06		 jmp	 SHORT $LN28@PyCode_New
$LN27@PyCode_New:
  003a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN28@PyCode_New:

; 123  :         return NULL;

  003ae	33 c0		 xor	 eax, eax
$LN44@PyCode_New:
  003b0	4c 8b 7c 24 38	 mov	 r15, QWORD PTR [rsp+56]
$LN19@PyCode_New:
  003b5	4c 8b 64 24 40	 mov	 r12, QWORD PTR [rsp+64]
  003ba	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  003bf	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]

; 160  : }

  003c4	48 83 c4 58	 add	 rsp, 88			; 00000058H
  003c8	41 5e		 pop	 r14
  003ca	41 5d		 pop	 r13
  003cc	5f		 pop	 rdi
  003cd	5b		 pop	 rbx
  003ce	c3		 ret	 0
$LN2@PyCode_New:

; 124  :     }
; 125  :     co->co_argcount = argcount;

  003cf	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR argcount$[rsp]

; 129  :     co->co_flags = flags;
; 130  :     Py_INCREF(code);

  003d6	48 8b bc 24 a8
	00 00 00	 mov	 rdi, QWORD PTR code$[rsp]
  003de	89 43 60	 mov	 DWORD PTR [rbx+96], eax
  003e1	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR kwonlyargcount$[rsp]
  003e8	48 8b cf	 mov	 rcx, rdi
  003eb	89 43 64	 mov	 DWORD PTR [rbx+100], eax
  003ee	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR nlocals$[rsp]
  003f5	89 43 68	 mov	 DWORD PTR [rbx+104], eax
  003f8	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR stacksize$[rsp]
  003ff	89 43 6c	 mov	 DWORD PTR [rbx+108], eax
  00402	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  00409	89 43 70	 mov	 DWORD PTR [rbx+112], eax
  0040c	e8 00 00 00 00	 call	 _Py_IncRef

; 131  :     co->co_code = code;
; 132  :     Py_INCREF(consts);

  00411	48 8b ce	 mov	 rcx, rsi
  00414	48 89 7b 78	 mov	 QWORD PTR [rbx+120], rdi
  00418	e8 00 00 00 00	 call	 _Py_IncRef

; 133  :     co->co_consts = consts;
; 134  :     Py_INCREF(names);

  0041d	48 8b bc 24 b8
	00 00 00	 mov	 rdi, QWORD PTR names$[rsp]
  00425	48 8b cf	 mov	 rcx, rdi
  00428	48 89 b3 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rsi
  0042f	e8 00 00 00 00	 call	 _Py_IncRef

; 135  :     co->co_names = names;
; 136  :     Py_INCREF(varnames);

  00434	48 8b cd	 mov	 rcx, rbp
  00437	48 89 bb 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rdi
  0043e	e8 00 00 00 00	 call	 _Py_IncRef

; 137  :     co->co_varnames = varnames;
; 138  :     Py_INCREF(freevars);

  00443	48 8b bc 24 c8
	00 00 00	 mov	 rdi, QWORD PTR freevars$[rsp]
  0044b	48 89 ab 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rbp
  00452	48 8b cf	 mov	 rcx, rdi
  00455	e8 00 00 00 00	 call	 _Py_IncRef

; 139  :     co->co_freevars = freevars;

  0045a	48 89 bb 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rdi

; 140  :     Py_INCREF(cellvars);

  00461	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR cellvars$[rsp]
  00469	48 8b cf	 mov	 rcx, rdi
  0046c	e8 00 00 00 00	 call	 _Py_IncRef

; 141  :     co->co_cellvars = cellvars;

  00471	48 89 bb a0 00
	00 00		 mov	 QWORD PTR [rbx+160], rdi

; 142  :     co->co_cell2arg = cell2arg;
; 143  :     Py_INCREF(filename);

  00478	48 8b bc 24 d8
	00 00 00	 mov	 rdi, QWORD PTR filename$[rsp]
  00480	48 8b cf	 mov	 rcx, rdi
  00483	4c 89 ab a8 00
	00 00		 mov	 QWORD PTR [rbx+168], r13
  0048a	e8 00 00 00 00	 call	 _Py_IncRef

; 144  :     co->co_filename = filename;

  0048f	48 89 bb b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rdi

; 145  :     Py_INCREF(name);

  00496	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR name$[rsp]
  0049e	48 8b cf	 mov	 rcx, rdi
  004a1	e8 00 00 00 00	 call	 _Py_IncRef

; 146  :     co->co_name = name;
; 147  :     co->co_firstlineno = firstlineno;

  004a6	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR firstlineno$[rsp]
  004ad	48 89 bb b8 00
	00 00		 mov	 QWORD PTR [rbx+184], rdi

; 148  :     Py_INCREF(lnotab);

  004b4	48 8b bc 24 f0
	00 00 00	 mov	 rdi, QWORD PTR lnotab$[rsp]
  004bc	89 83 c0 00 00
	00		 mov	 DWORD PTR [rbx+192], eax
  004c2	48 8b cf	 mov	 rcx, rdi
  004c5	e8 00 00 00 00	 call	 _Py_IncRef

; 149  :     co->co_lnotab = lnotab;

  004ca	48 89 bb c8 00
	00 00		 mov	 QWORD PTR [rbx+200], rdi

; 150  :     co->co_zombieframe = NULL;

  004d1	4c 89 b3 d0 00
	00 00		 mov	 QWORD PTR [rbx+208], r14

; 151  :     co->co_weakreflist = NULL;

  004d8	4c 89 b3 d8 00
	00 00		 mov	 QWORD PTR [rbx+216], r14

; 152  : #ifdef WITH_PARALLEL
; 153  :     co->px_execount       = 0;

  004df	4c 89 b3 e0 00
	00 00		 mov	 QWORD PTR [rbx+224], r14

; 154  :     co->px_heapsize_avg   = 0;

  004e6	4c 89 b3 e8 00
	00 00		 mov	 QWORD PTR [rbx+232], r14

; 155  :     co->px_heapsize_hint  = 0;

  004ed	4c 89 b3 f0 00
	00 00		 mov	 QWORD PTR [rbx+240], r14

; 156  :     co->px_heapsize_total = 0;

  004f4	4c 89 b3 f8 00
	00 00		 mov	 QWORD PTR [rbx+248], r14

; 157  :     co->px = NULL;

  004fb	4c 89 b3 00 01
	00 00		 mov	 QWORD PTR [rbx+256], r14

; 158  : #endif
; 159  :     return co;

  00502	48 8b c3	 mov	 rax, rbx
  00505	e9 a6 fe ff ff	 jmp	 $LN44@PyCode_New
$LN16@PyCode_New:

; 76   :         PyErr_BadInternalCall();

  0050a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@MOGPFDIH@?4?4?2Objects?2codeobject?4c?$AA@
  00511	ba 4c 00 00 00	 mov	 edx, 76			; 0000004cH
  00516	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 77   :         return NULL;

  0051b	33 c0		 xor	 eax, eax
  0051d	e9 93 fe ff ff	 jmp	 $LN19@PyCode_New
PyCode_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	PyCode_NewEmpty
EXTRN	PyUnicode_DecodeFSDefault:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyTuple_New:PROC
EXTRN	PyBytes_FromString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyCode_NewEmpty DD imagerel $LN40
	DD	imagerel $LN40+108
	DD	imagerel $unwind$PyCode_NewEmpty
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyCode_NewEmpty DD imagerel $LN40+108
	DD	imagerel $LN40+452
	DD	imagerel $chain$0$PyCode_NewEmpty
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PyCode_NewEmpty DD imagerel $LN40+452
	DD	imagerel $LN40+481
	DD	imagerel $chain$1$PyCode_NewEmpty
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PyCode_NewEmpty DD 021H
	DD	imagerel $LN40
	DD	imagerel $LN40+108
	DD	imagerel $unwind$PyCode_NewEmpty
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyCode_NewEmpty DD 020821H
	DD	0127408H
	DD	imagerel $LN40
	DD	imagerel $LN40+108
	DD	imagerel $unwind$PyCode_NewEmpty
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCode_NewEmpty DD 081801H
	DD	0156418H
	DD	0145418H
	DD	0133418H
	DD	0c011f218H
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\codeobject.c
CONST	ENDS
;	COMDAT PyCode_NewEmpty
_TEXT	SEGMENT
filename$ = 144
funcname$ = 152
firstlineno$ = 160
PyCode_NewEmpty PROC					; COMDAT

; 164  : {

$LN40:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	41 54		 push	 r12
  00011	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H

; 165  :     static PyObject *emptystring = NULL;
; 166  :     static PyObject *nulltuple = NULL;
; 167  :     PyObject *filename_ob = NULL;
; 168  :     PyObject *funcname_ob = NULL;
; 169  :     PyCodeObject *result = NULL;

  00018	45 33 e4	 xor	 r12d, r12d
  0001b	41 8b e8	 mov	 ebp, r8d
  0001e	48 8b da	 mov	 rbx, rdx

; 170  :     if (emptystring == NULL) {

  00021	4c 39 25 00 00
	00 00		 cmp	 QWORD PTR ?emptystring@?1??PyCode_NewEmpty@@9@9, r12
  00028	48 8b f1	 mov	 rsi, rcx
  0002b	75 1c		 jne	 SHORT $LN13@PyCode_New@2

; 171  :         emptystring = PyBytes_FromString("");

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00034	e8 00 00 00 00	 call	 PyBytes_FromString
  00039	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?emptystring@?1??PyCode_NewEmpty@@9@9, rax

; 172  :         if (emptystring == NULL)

  00040	48 85 c0	 test	 rax, rax
  00043	0f 84 7b 01 00
	00		 je	 $LN3@PyCode_New@2
$LN13@PyCode_New@2:

; 173  :             goto failed;
; 174  :     }
; 175  :     if (nulltuple == NULL) {

  00049	4c 39 25 00 00
	00 00		 cmp	 QWORD PTR ?nulltuple@?1??PyCode_NewEmpty@@9@9, r12
  00050	75 17		 jne	 SHORT $LN11@PyCode_New@2

; 176  :         nulltuple = PyTuple_New(0);

  00052	33 c9		 xor	 ecx, ecx
  00054	e8 00 00 00 00	 call	 PyTuple_New
  00059	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?nulltuple@?1??PyCode_NewEmpty@@9@9, rax

; 177  :         if (nulltuple == NULL)

  00060	48 85 c0	 test	 rax, rax
  00063	0f 84 5b 01 00
	00		 je	 $LN3@PyCode_New@2
$LN11@PyCode_New@2:

; 178  :             goto failed;
; 179  :     }
; 180  :     funcname_ob = PyUnicode_FromString(funcname);

  00069	48 8b cb	 mov	 rcx, rbx
  0006c	48 89 bc 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rdi
  00074	e8 00 00 00 00	 call	 PyUnicode_FromString
  00079	48 8b f8	 mov	 rdi, rax

; 181  :     if (funcname_ob == NULL)

  0007c	48 85 c0	 test	 rax, rax
  0007f	0f 84 37 01 00
	00		 je	 $LN39@PyCode_New@2

; 182  :         goto failed;
; 183  :     filename_ob = PyUnicode_DecodeFSDefault(filename);

  00085	48 8b ce	 mov	 rcx, rsi
  00088	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  0008d	48 8b d8	 mov	 rbx, rax

; 184  :     if (filename_ob == NULL)

  00090	48 85 c0	 test	 rax, rax
  00093	74 56		 je	 SHORT $failed$20424

; 185  :         goto failed;
; 186  : 
; 187  :     result = PyCode_New(0,                      /* argcount */
; 188  :                 0,                              /* kwonlyargcount */
; 189  :                 0,                              /* nlocals */
; 190  :                 0,                              /* stacksize */
; 191  :                 0,                              /* flags */
; 192  :                 emptystring,                    /* code */
; 193  :                 nulltuple,                      /* consts */
; 194  :                 nulltuple,                      /* names */
; 195  :                 nulltuple,                      /* varnames */
; 196  :                 nulltuple,                      /* freevars */
; 197  :                 nulltuple,                      /* cellvars */
; 198  :                 filename_ob,                    /* filename */
; 199  :                 funcname_ob,                    /* name */
; 200  :                 firstlineno,                    /* firstlineno */
; 201  :                 emptystring                     /* lnotab */
; 202  :                 );

  00095	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?nulltuple@?1??PyCode_NewEmpty@@9@9
  0009c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?emptystring@?1??PyCode_NewEmpty@@9@9
  000a3	45 33 c9	 xor	 r9d, r9d
  000a6	48 89 54 24 70	 mov	 QWORD PTR [rsp+112], rdx
  000ab	89 6c 24 68	 mov	 DWORD PTR [rsp+104], ebp
  000af	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  000b4	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  000b9	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  000be	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000c3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000c8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000cd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000d2	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  000d7	45 33 c0	 xor	 r8d, r8d
  000da	33 c9		 xor	 ecx, ecx
  000dc	33 d2		 xor	 edx, edx
  000de	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  000e3	e8 00 00 00 00	 call	 PyCode_New
  000e8	4c 8b e0	 mov	 r12, rax
$failed$20424:

; 203  : 
; 204  : failed:
; 205  :     Py_XDECREF(funcname_ob);

  000eb	e8 00 00 00 00	 call	 _Py_PXCTX
  000f0	85 c0		 test	 eax, eax
  000f2	75 5e		 jne	 SHORT $LN7@PyCode_New@2
  000f4	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  000f8	f6 c1 20	 test	 cl, 32			; 00000020H
  000fb	75 4d		 jne	 SHORT $LN21@PyCode_New@2
  000fd	84 c9		 test	 cl, cl
  000ff	78 49		 js	 SHORT $LN21@PyCode_New@2
  00101	f6 c1 02	 test	 cl, 2
  00104	75 4c		 jne	 SHORT $LN7@PyCode_New@2
  00106	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0010a	75 46		 jne	 SHORT $LN7@PyCode_New@2
  0010c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0011a	4c 8b cf	 mov	 r9, rdi
  0011d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00123	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0012b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00130	48 8b cf	 mov	 rcx, rdi
  00133	85 c0		 test	 eax, eax
  00135	74 07		 je	 SHORT $LN26@PyCode_New@2
  00137	e8 00 00 00 00	 call	 _Px_Dealloc
  0013c	eb 14		 jmp	 SHORT $LN7@PyCode_New@2
$LN26@PyCode_New@2:
  0013e	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00142	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00148	eb 08		 jmp	 SHORT $LN7@PyCode_New@2
$LN21@PyCode_New@2:
  0014a	48 8b cf	 mov	 rcx, rdi
  0014d	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyCode_New@2:

; 206  :     Py_XDECREF(filename_ob);

  00152	48 85 db	 test	 rbx, rbx
  00155	74 65		 je	 SHORT $LN39@PyCode_New@2
  00157	e8 00 00 00 00	 call	 _Py_PXCTX
  0015c	85 c0		 test	 eax, eax
  0015e	75 5c		 jne	 SHORT $LN39@PyCode_New@2
  00160	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00164	a8 20		 test	 al, 32			; 00000020H
  00166	75 4c		 jne	 SHORT $LN32@PyCode_New@2
  00168	84 c0		 test	 al, al
  0016a	78 48		 js	 SHORT $LN32@PyCode_New@2
  0016c	a8 02		 test	 al, 2
  0016e	75 4c		 jne	 SHORT $LN39@PyCode_New@2
  00170	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00174	75 46		 jne	 SHORT $LN39@PyCode_New@2
  00176	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00184	4c 8b cb	 mov	 r9, rbx
  00187	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0018d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00195	e8 00 00 00 00	 call	 _PyParallel_Guard
  0019a	48 8b cb	 mov	 rcx, rbx
  0019d	85 c0		 test	 eax, eax
  0019f	74 07		 je	 SHORT $LN37@PyCode_New@2
  001a1	e8 00 00 00 00	 call	 _Px_Dealloc
  001a6	eb 14		 jmp	 SHORT $LN39@PyCode_New@2
$LN37@PyCode_New@2:
  001a8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001ac	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001b2	eb 08		 jmp	 SHORT $LN39@PyCode_New@2
$LN32@PyCode_New@2:
  001b4	48 8b cb	 mov	 rcx, rbx
  001b7	e8 00 00 00 00	 call	 Px_DecRef
$LN39@PyCode_New@2:
  001bc	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR [rsp+144]
$LN3@PyCode_New@2:

; 207  :     return result;
; 208  : }

  001c4	4c 8d 9c 24 80
	00 00 00	 lea	 r11, QWORD PTR [rsp+128]
  001cc	49 8b c4	 mov	 rax, r12
  001cf	49 8b 5b 18	 mov	 rbx, QWORD PTR [r11+24]
  001d3	49 8b 6b 20	 mov	 rbp, QWORD PTR [r11+32]
  001d7	49 8b 73 28	 mov	 rsi, QWORD PTR [r11+40]
  001db	49 8b e3	 mov	 rsp, r11
  001de	41 5c		 pop	 r12
  001e0	c3		 ret	 0
PyCode_NewEmpty ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@BEDCFPIK@name?5tuples?5must?5contain?5only?5st@ ; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	_PyUnicode_Copy:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$validate_and_copy_tuple DD imagerel validate_and_copy_tuple
	DD	imagerel validate_and_copy_tuple+43
	DD	imagerel $unwind$validate_and_copy_tuple
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$validate_and_copy_tuple DD imagerel validate_and_copy_tuple+43
	DD	imagerel validate_and_copy_tuple+247
	DD	imagerel $chain$3$validate_and_copy_tuple
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$validate_and_copy_tuple DD imagerel validate_and_copy_tuple+247
	DD	imagerel validate_and_copy_tuple+282
	DD	imagerel $chain$5$validate_and_copy_tuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$validate_and_copy_tuple DD 080021H
	DD	0de400H
	DD	0c7400H
	DD	0b6400H
	DD	0a3400H
	DD	imagerel validate_and_copy_tuple
	DD	imagerel validate_and_copy_tuple+43
	DD	imagerel $unwind$validate_and_copy_tuple
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$validate_and_copy_tuple DD 081621H
	DD	0de416H
	DD	0c7411H
	DD	0b640aH
	DD	0a3405H
	DD	imagerel validate_and_copy_tuple
	DD	imagerel validate_and_copy_tuple+43
	DD	imagerel $unwind$validate_and_copy_tuple
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_and_copy_tuple DD 040a01H
	DD	0d006520aH
	DD	05002c004H
xdata	ENDS
;	COMDAT ??_C@_0DE@BEDCFPIK@name?5tuples?5must?5contain?5only?5st@
CONST	SEGMENT
??_C@_0DE@BEDCFPIK@name?5tuples?5must?5contain?5only?5st@ DB 'name tuples'
	DB	' must contain only strings, not ''%.500s''', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\codeobject.c
CONST	ENDS
;	COMDAT validate_and_copy_tuple
_TEXT	SEGMENT
tup$ = 80
validate_and_copy_tuple PROC				; COMDAT

; 242  : {

  00000	40 55		 push	 rbp
  00002	41 54		 push	 r12
  00004	41 55		 push	 r13
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 243  :     PyObject *newtuple;
; 244  :     PyObject *item;
; 245  :     Py_ssize_t i, len;
; 246  : 
; 247  :     len = PyTuple_GET_SIZE(tup);

  0000a	4c 8b 61 60	 mov	 r12, QWORD PTR [rcx+96]
  0000e	4c 8b e9	 mov	 r13, rcx

; 248  :     newtuple = PyTuple_New(len);

  00011	49 8b cc	 mov	 rcx, r12
  00014	e8 00 00 00 00	 call	 PyTuple_New
  00019	48 8b e8	 mov	 rbp, rax

; 249  :     if (newtuple == NULL)

  0001c	48 85 c0	 test	 rax, rax
  0001f	75 0a		 jne	 SHORT $LN9@validate_a

; 277  : }

  00021	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00025	41 5d		 pop	 r13
  00027	41 5c		 pop	 r12
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
$LN9@validate_a:
  0002b	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00030	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi

; 250  :         return NULL;
; 251  : 
; 252  :     for (i = 0; i < len; i++) {

  00035	33 f6		 xor	 esi, esi
  00037	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  0003c	4c 89 74 24 68	 mov	 QWORD PTR [rsp+104], r14
  00041	4d 85 e4	 test	 r12, r12
  00044	0f 8e 8c 00 00
	00		 jle	 $LN6@validate_a
  0004a	48 8d 78 70	 lea	 rdi, QWORD PTR [rax+112]
  0004e	4c 2b e8	 sub	 r13, rax
  00051	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:PyUnicode_Type
  00058	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL8@validate_a:

; 253  :         item = PyTuple_GET_ITEM(tup, i);

  00060	49 8b 5c 3d 00	 mov	 rbx, QWORD PTR [r13+rdi]

; 254  :         if (PyUnicode_CheckExact(item)) {

  00065	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00069	49 3b c6	 cmp	 rax, r14
  0006c	75 3d		 jne	 SHORT $LN5@validate_a

; 255  :             Py_INCREF(item);

  0006e	e8 00 00 00 00	 call	 _Py_PXCTX
  00073	85 c0		 test	 eax, eax
  00075	75 50		 jne	 SHORT $LN1@validate_a
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00085	4c 8b cb	 mov	 r9, rbx
  00088	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0008e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00096	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009b	85 c0		 test	 eax, eax
  0009d	75 06		 jne	 SHORT $LN12@validate_a
  0009f	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  000a3	74 22		 je	 SHORT $LN1@validate_a
$LN12@validate_a:
  000a5	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
  000a9	eb 1c		 jmp	 SHORT $LN1@validate_a
$LN5@validate_a:

; 256  :         }
; 257  :         else if (!PyUnicode_Check(item)) {

  000ab	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  000b5	74 40		 je	 SHORT $LN17@validate_a

; 265  :         }
; 266  :         else {
; 267  :             item = _PyUnicode_Copy(item);

  000b7	48 8b cb	 mov	 rcx, rbx
  000ba	e8 00 00 00 00	 call	 _PyUnicode_Copy
  000bf	48 8b d8	 mov	 rbx, rax

; 268  :             if (item == NULL) {

  000c2	48 85 c0	 test	 rax, rax
  000c5	74 47		 je	 SHORT $LN18@validate_a
$LN1@validate_a:

; 250  :         return NULL;
; 251  : 
; 252  :     for (i = 0; i < len; i++) {

  000c7	48 ff c6	 inc	 rsi

; 269  :                 Py_DECREF(newtuple);
; 270  :                 return NULL;
; 271  :             }
; 272  :         }
; 273  :         PyTuple_SET_ITEM(newtuple, i, item);

  000ca	48 89 1f	 mov	 QWORD PTR [rdi], rbx
  000cd	48 83 c7 08	 add	 rdi, 8
  000d1	49 3b f4	 cmp	 rsi, r12
  000d4	7c 8a		 jl	 SHORT $LL8@validate_a
$LN6@validate_a:

; 274  :     }
; 275  : 
; 276  :     return newtuple;

  000d6	48 8b c5	 mov	 rax, rbp
$LN23@validate_a:
  000d9	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
  000de	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  000e3	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000e8	4c 8b 74 24 68	 mov	 r14, QWORD PTR [rsp+104]

; 277  : }

  000ed	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000f1	41 5d		 pop	 r13
  000f3	41 5c		 pop	 r12
  000f5	5d		 pop	 rbp
  000f6	c3		 ret	 0
$LN17@validate_a:

; 258  :             PyErr_Format(
; 259  :                 PyExc_TypeError,
; 260  :                 "name tuples must contain only "
; 261  :                 "strings, not '%.500s'",
; 262  :                 item->ob_type->tp_name);

  000f7	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000fb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00102	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@BEDCFPIK@name?5tuples?5must?5contain?5only?5st@
  00109	e8 00 00 00 00	 call	 PyErr_Format
$LN18@validate_a:

; 263  :             Py_DECREF(newtuple);

  0010e	48 8b cd	 mov	 rcx, rbp
  00111	e8 00 00 00 00	 call	 _Py_DecRef

; 264  :             return NULL;

  00116	33 c0		 xor	 eax, eax
  00118	eb bf		 jmp	 SHORT $LN23@validate_a
validate_and_copy_tuple ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@CHEMDFMN@code?3?5nlocals?5must?5not?5be?5negati@ ; `string'
PUBLIC	??_C@_0CK@ENINDD@code?3?5kwonlyargcount?5must?5not?5be@ ; `string'
PUBLIC	??_C@_0CE@NPPBPEPC@code?3?5argcount?5must?5not?5be?5negat@ ; `string'
PUBLIC	??_C@_0BL@DMCDCODB@iiiiiSO?$CBO?$CBO?$CBUUiS?$HMO?$CBO?$CB?3code?$AA@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyArg_ParseTuple:PROC
EXTRN	PyTuple_Type:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$code_new DD imagerel code_new
	DD	imagerel code_new+325
	DD	imagerel $unwind$code_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$code_new DD imagerel code_new+325
	DD	imagerel code_new+354
	DD	imagerel $chain$0$code_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$code_new DD imagerel code_new+354
	DD	imagerel code_new+767
	DD	imagerel $chain$1$code_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$code_new DD imagerel code_new+767
	DD	imagerel code_new+982
	DD	imagerel $chain$2$code_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$code_new DD imagerel code_new+982
	DD	imagerel code_new+1005
	DD	imagerel $chain$3$code_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$code_new DD 021H
	DD	imagerel code_new
	DD	imagerel code_new+325
	DD	imagerel $unwind$code_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$code_new DD 021H
	DD	imagerel code_new+325
	DD	imagerel code_new+354
	DD	imagerel $chain$0$code_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$code_new DD 020821H
	DD	0266408H
	DD	imagerel code_new+325
	DD	imagerel code_new+354
	DD	imagerel $chain$0$code_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$code_new DD 020821H
	DD	027c408H
	DD	imagerel code_new
	DD	imagerel code_new+325
	DD	imagerel $unwind$code_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$code_new DD 071601H
	DD	0283416H
	DD	0220116H
	DD	07009d00bH
	DD	05008H
xdata	ENDS
;	COMDAT ??_C@_0CD@CHEMDFMN@code?3?5nlocals?5must?5not?5be?5negati@
CONST	SEGMENT
??_C@_0CD@CHEMDFMN@code?3?5nlocals?5must?5not?5be?5negati@ DB 'code: nloc'
	DB	'als must not be negative', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@ENINDD@code?3?5kwonlyargcount?5must?5not?5be@
CONST	SEGMENT
??_C@_0CK@ENINDD@code?3?5kwonlyargcount?5must?5not?5be@ DB 'code: kwonlya'
	DB	'rgcount must not be negative', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NPPBPEPC@code?3?5argcount?5must?5not?5be?5negat@
CONST	SEGMENT
??_C@_0CE@NPPBPEPC@code?3?5argcount?5must?5not?5be?5negat@ DB 'code: argc'
	DB	'ount must not be negative', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DMCDCODB@iiiiiSO?$CBO?$CBO?$CBUUiS?$HMO?$CBO?$CB?3code?$AA@
CONST	SEGMENT
??_C@_0BL@DMCDCODB@iiiiiSO?$CBO?$CBO?$CBUUiS?$HMO?$CBO?$CB?3code?$AA@ DB 'i'
	DB	'iiiiSO!O!O!UUiS|O!O!:code', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\codeobject.c
CONST	ENDS
;	COMDAT code_new
_TEXT	SEGMENT
kwonlyargcount$ = 176
argcount$ = 180
firstlineno$ = 184
flags$ = 188
stacksize$ = 192
cellvars$ = 200
freevars$ = 208
lnotab$ = 216
name$ = 224
filename$ = 232
names$ = 240
consts$ = 248
varnames$ = 256
code$ = 264
type$ = 304
args$ = 312
kw$ = 320
nlocals$ = 328
code_new PROC						; COMDAT

; 288  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 18	 mov	 QWORD PTR [r11+24], rbx
  00007	55		 push	 rbp
  00008	57		 push	 rdi
  00009	41 55		 push	 r13
  0000b	49 8d 6b 08	 lea	 rbp, QWORD PTR [r11+8]
  0000f	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H
  00016	48 8b c2	 mov	 rax, rdx

; 289  :     int argcount;
; 290  :     int kwonlyargcount;
; 291  :     int nlocals;
; 292  :     int stacksize;
; 293  :     int flags;
; 294  :     PyObject *co = NULL;
; 295  :     PyObject *code;
; 296  :     PyObject *consts;
; 297  :     PyObject *names, *ournames = NULL;
; 298  :     PyObject *varnames, *ourvarnames = NULL;
; 299  :     PyObject *freevars = NULL, *ourfreevars = NULL;
; 300  :     PyObject *cellvars = NULL, *ourcellvars = NULL;
; 301  :     PyObject *filename;
; 302  :     PyObject *name;
; 303  :     int firstlineno;
; 304  :     PyObject *lnotab;
; 305  : 
; 306  :     if (!PyArg_ParseTuple(args, "iiiiiSO!O!O!UUiS|O!O!:code",
; 307  :                           &argcount, &kwonlyargcount,
; 308  :                               &nlocals, &stacksize, &flags,
; 309  :                           &code,
; 310  :                           &PyTuple_Type, &consts,
; 311  :                           &PyTuple_Type, &names,
; 312  :                           &PyTuple_Type, &varnames,
; 313  :                           &filename, &name,
; 314  :                           &firstlineno, &lnotab,
; 315  :                           &PyTuple_Type, &freevars,
; 316  :                           &PyTuple_Type, &cellvars))

  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyTuple_Type
  00020	48 8d 4d 98	 lea	 rcx, QWORD PTR cellvars$[rbp-304]
  00024	49 89 4b 80	 mov	 QWORD PTR [r11-128], rcx
  00028	49 89 93 78 ff
	ff ff		 mov	 QWORD PTR [r11-136], rdx
  0002f	48 8d 4d a0	 lea	 rcx, QWORD PTR freevars$[rbp-304]
  00033	49 89 8b 70 ff
	ff ff		 mov	 QWORD PTR [r11-144], rcx
  0003a	49 89 93 68 ff
	ff ff		 mov	 QWORD PTR [r11-152], rdx
  00041	48 8d 4d a8	 lea	 rcx, QWORD PTR lnotab$[rbp-304]
  00045	49 89 8b 60 ff
	ff ff		 mov	 QWORD PTR [r11-160], rcx
  0004c	45 33 ed	 xor	 r13d, r13d
  0004f	48 8d 4d 88	 lea	 rcx, QWORD PTR firstlineno$[rbp-304]
  00053	49 89 8b 58 ff
	ff ff		 mov	 QWORD PTR [r11-168], rcx
  0005a	48 8d 4d b0	 lea	 rcx, QWORD PTR name$[rbp-304]
  0005e	4c 8d 4d 80	 lea	 r9, QWORD PTR kwonlyargcount$[rbp-304]
  00062	48 89 4c 24 78	 mov	 QWORD PTR [rsp+120], rcx
  00067	48 8d 4d b8	 lea	 rcx, QWORD PTR filename$[rbp-304]
  0006b	4c 8d 45 84	 lea	 r8, QWORD PTR argcount$[rbp-304]
  0006f	48 89 4c 24 70	 mov	 QWORD PTR [rsp+112], rcx
  00074	48 8d 4d d0	 lea	 rcx, QWORD PTR varnames$[rbp-304]
  00078	4c 89 6d a0	 mov	 QWORD PTR freevars$[rbp-304], r13
  0007c	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00081	48 89 54 24 60	 mov	 QWORD PTR [rsp+96], rdx
  00086	48 8d 4d c0	 lea	 rcx, QWORD PTR names$[rbp-304]
  0008a	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0008f	48 89 54 24 50	 mov	 QWORD PTR [rsp+80], rdx
  00094	48 8d 4d c8	 lea	 rcx, QWORD PTR consts$[rbp-304]
  00098	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0009d	48 89 54 24 40	 mov	 QWORD PTR [rsp+64], rdx
  000a2	48 8d 4d d8	 lea	 rcx, QWORD PTR code$[rbp-304]
  000a6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ab	48 8d 4d 8c	 lea	 rcx, QWORD PTR flags$[rbp-304]
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@DMCDCODB@iiiiiSO?$CBO?$CBO?$CBUUiS?$HMO?$CBO?$CB?3code?$AA@
  000b6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000bb	48 8d 4d 90	 lea	 rcx, QWORD PTR stacksize$[rbp-304]
  000bf	41 8b fd	 mov	 edi, r13d
  000c2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c7	48 8d 4d 18	 lea	 rcx, QWORD PTR nlocals$[rbp-304]
  000cb	4c 89 6d 98	 mov	 QWORD PTR cellvars$[rbp-304], r13
  000cf	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000d4	48 8b c8	 mov	 rcx, rax
  000d7	41 8b dd	 mov	 ebx, r13d
  000da	e8 00 00 00 00	 call	 PyArg_ParseTuple
  000df	85 c0		 test	 eax, eax
  000e1	75 07		 jne	 SHORT $LN28@code_new

; 317  :         return NULL;

  000e3	33 c0		 xor	 eax, eax
  000e5	e9 ef 02 00 00	 jmp	 $LN29@code_new
$LN28@code_new:

; 318  : 
; 319  :     if (argcount < 0) {

  000ea	39 5d 84	 cmp	 DWORD PTR argcount$[rbp-304], ebx
  000ed	7d 18		 jge	 SHORT $LN27@code_new

; 320  :         PyErr_SetString(
; 321  :             PyExc_ValueError,
; 322  :             "code: argcount must not be negative");

  000ef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@NPPBPEPC@code?3?5argcount?5must?5not?5be?5negat@
  000fd	e8 00 00 00 00	 call	 PyErr_SetString

; 323  :         goto cleanup;

  00102	e9 cf 02 00 00	 jmp	 $LN3@code_new
$LN27@code_new:

; 324  :     }
; 325  : 
; 326  :     if (kwonlyargcount < 0) {

  00107	39 5d 80	 cmp	 DWORD PTR kwonlyargcount$[rbp-304], ebx
  0010a	7d 18		 jge	 SHORT $LN26@code_new

; 327  :         PyErr_SetString(
; 328  :             PyExc_ValueError,
; 329  :             "code: kwonlyargcount must not be negative");

  0010c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00113	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@ENINDD@code?3?5kwonlyargcount?5must?5not?5be@
  0011a	e8 00 00 00 00	 call	 PyErr_SetString

; 330  :         goto cleanup;

  0011f	e9 b2 02 00 00	 jmp	 $LN3@code_new
$LN26@code_new:

; 331  :     }
; 332  :     if (nlocals < 0) {

  00124	39 5d 18	 cmp	 DWORD PTR nlocals$[rbp-304], ebx
  00127	7d 18		 jge	 SHORT $LN25@code_new

; 333  :         PyErr_SetString(
; 334  :             PyExc_ValueError,
; 335  :             "code: nlocals must not be negative");

  00129	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00130	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@CHEMDFMN@code?3?5nlocals?5must?5not?5be?5negati@
  00137	e8 00 00 00 00	 call	 PyErr_SetString

; 336  :         goto cleanup;

  0013c	e9 95 02 00 00	 jmp	 $LN3@code_new
$LN25@code_new:

; 337  :     }
; 338  : 
; 339  :     ournames = validate_and_copy_tuple(names);

  00141	48 8b 4d c0	 mov	 rcx, QWORD PTR names$[rbp-304]
  00145	4c 89 a4 24 38
	01 00 00	 mov	 QWORD PTR [rsp+312], r12
  0014d	e8 00 00 00 00	 call	 validate_and_copy_tuple
  00152	4c 8b e0	 mov	 r12, rax

; 340  :     if (ournames == NULL)

  00155	48 85 c0	 test	 rax, rax
  00158	0f 84 70 02 00
	00		 je	 $LN75@code_new

; 341  :         goto cleanup;
; 342  :     ourvarnames = validate_and_copy_tuple(varnames);

  0015e	48 8b 4d d0	 mov	 rcx, QWORD PTR varnames$[rbp-304]
  00162	48 89 b4 24 30
	01 00 00	 mov	 QWORD PTR [rsp+304], rsi
  0016a	e8 00 00 00 00	 call	 validate_and_copy_tuple
  0016f	48 8b f0	 mov	 rsi, rax

; 343  :     if (ourvarnames == NULL)

  00172	48 85 c0	 test	 rax, rax
  00175	0f 84 a3 00 00
	00		 je	 $cleanup$20594

; 344  :         goto cleanup;
; 345  :     if (freevars)

  0017b	48 8b 4d a0	 mov	 rcx, QWORD PTR freevars$[rbp-304]
  0017f	48 85 c9	 test	 rcx, rcx
  00182	74 07		 je	 SHORT $LN22@code_new

; 346  :         ourfreevars = validate_and_copy_tuple(freevars);

  00184	e8 00 00 00 00	 call	 validate_and_copy_tuple

; 347  :     else

  00189	eb 05		 jmp	 SHORT $LN76@code_new
$LN22@code_new:

; 348  :         ourfreevars = PyTuple_New(0);

  0018b	e8 00 00 00 00	 call	 PyTuple_New
$LN76@code_new:
  00190	48 8b f8	 mov	 rdi, rax

; 349  :     if (ourfreevars == NULL)

  00193	48 85 c0	 test	 rax, rax
  00196	0f 84 82 00 00
	00		 je	 $cleanup$20594

; 350  :         goto cleanup;
; 351  :     if (cellvars)

  0019c	48 8b 4d 98	 mov	 rcx, QWORD PTR cellvars$[rbp-304]
  001a0	48 85 c9	 test	 rcx, rcx
  001a3	74 07		 je	 SHORT $LN19@code_new

; 352  :         ourcellvars = validate_and_copy_tuple(cellvars);

  001a5	e8 00 00 00 00	 call	 validate_and_copy_tuple

; 353  :     else

  001aa	eb 05		 jmp	 SHORT $LN77@code_new
$LN19@code_new:

; 354  :         ourcellvars = PyTuple_New(0);

  001ac	e8 00 00 00 00	 call	 PyTuple_New
$LN77@code_new:
  001b1	48 8b d8	 mov	 rbx, rax

; 355  :     if (ourcellvars == NULL)

  001b4	48 85 c0	 test	 rax, rax
  001b7	74 65		 je	 SHORT $cleanup$20594

; 356  :         goto cleanup;
; 357  : 
; 358  :     co = (PyObject *)PyCode_New(argcount, kwonlyargcount,
; 359  :                                 nlocals, stacksize, flags,
; 360  :                                 code, consts, ournames, ourvarnames,
; 361  :                                 ourfreevars, ourcellvars, filename,
; 362  :                                 name, firstlineno, lnotab);

  001b9	48 8b 45 a8	 mov	 rax, QWORD PTR lnotab$[rbp-304]
  001bd	44 8b 4d 90	 mov	 r9d, DWORD PTR stacksize$[rbp-304]
  001c1	44 8b 45 18	 mov	 r8d, DWORD PTR nlocals$[rbp-304]
  001c5	8b 55 80	 mov	 edx, DWORD PTR kwonlyargcount$[rbp-304]
  001c8	8b 4d 84	 mov	 ecx, DWORD PTR argcount$[rbp-304]
  001cb	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  001d0	8b 45 88	 mov	 eax, DWORD PTR firstlineno$[rbp-304]
  001d3	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  001d7	48 8b 45 b0	 mov	 rax, QWORD PTR name$[rbp-304]
  001db	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  001e0	48 8b 45 b8	 mov	 rax, QWORD PTR filename$[rbp-304]
  001e4	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  001e9	48 8b 45 c8	 mov	 rax, QWORD PTR consts$[rbp-304]
  001ed	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  001f2	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  001f7	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  001fc	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12
  00201	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00206	48 8b 45 d8	 mov	 rax, QWORD PTR code$[rbp-304]
  0020a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0020f	8b 45 8c	 mov	 eax, DWORD PTR flags$[rbp-304]
  00212	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00216	e8 00 00 00 00	 call	 PyCode_New
  0021b	4c 8b e8	 mov	 r13, rax
$cleanup$20594:

; 363  :   cleanup:
; 364  :     Py_XDECREF(ournames);

  0021e	e8 00 00 00 00	 call	 _Py_PXCTX
  00223	85 c0		 test	 eax, eax
  00225	75 61		 jne	 SHORT $LN15@code_new
  00227	49 8b 4c 24 20	 mov	 rcx, QWORD PTR [r12+32]
  0022c	f6 c1 20	 test	 cl, 32			; 00000020H
  0022f	75 4f		 jne	 SHORT $LN35@code_new
  00231	84 c9		 test	 cl, cl
  00233	78 4b		 js	 SHORT $LN35@code_new
  00235	f6 c1 02	 test	 cl, 2
  00238	75 4e		 jne	 SHORT $LN15@code_new
  0023a	49 ff 4c 24 50	 dec	 QWORD PTR [r12+80]
  0023f	75 47		 jne	 SHORT $LN15@code_new
  00241	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00248	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0024f	4d 8b cc	 mov	 r9, r12
  00252	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00258	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00260	e8 00 00 00 00	 call	 _PyParallel_Guard
  00265	49 8b cc	 mov	 rcx, r12
  00268	85 c0		 test	 eax, eax
  0026a	74 07		 je	 SHORT $LN40@code_new
  0026c	e8 00 00 00 00	 call	 _Px_Dealloc
  00271	eb 15		 jmp	 SHORT $LN15@code_new
$LN40@code_new:
  00273	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]
  00278	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0027e	eb 08		 jmp	 SHORT $LN15@code_new
$LN35@code_new:
  00280	49 8b cc	 mov	 rcx, r12
  00283	e8 00 00 00 00	 call	 Px_DecRef
$LN15@code_new:

; 365  :     Py_XDECREF(ourvarnames);

  00288	48 85 f6	 test	 rsi, rsi
  0028b	74 65		 je	 SHORT $LN11@code_new
  0028d	e8 00 00 00 00	 call	 _Py_PXCTX
  00292	85 c0		 test	 eax, eax
  00294	75 5c		 jne	 SHORT $LN11@code_new
  00296	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  0029a	a8 20		 test	 al, 32			; 00000020H
  0029c	75 4c		 jne	 SHORT $LN46@code_new
  0029e	84 c0		 test	 al, al
  002a0	78 48		 js	 SHORT $LN46@code_new
  002a2	a8 02		 test	 al, 2
  002a4	75 4c		 jne	 SHORT $LN11@code_new
  002a6	48 ff 4e 50	 dec	 QWORD PTR [rsi+80]
  002aa	75 46		 jne	 SHORT $LN11@code_new
  002ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  002ba	4c 8b ce	 mov	 r9, rsi
  002bd	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002c3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002cb	e8 00 00 00 00	 call	 _PyParallel_Guard
  002d0	48 8b ce	 mov	 rcx, rsi
  002d3	85 c0		 test	 eax, eax
  002d5	74 07		 je	 SHORT $LN51@code_new
  002d7	e8 00 00 00 00	 call	 _Px_Dealloc
  002dc	eb 14		 jmp	 SHORT $LN11@code_new
$LN51@code_new:
  002de	48 8b 46 58	 mov	 rax, QWORD PTR [rsi+88]
  002e2	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002e8	eb 08		 jmp	 SHORT $LN11@code_new
$LN46@code_new:
  002ea	48 8b ce	 mov	 rcx, rsi
  002ed	e8 00 00 00 00	 call	 Px_DecRef
$LN11@code_new:

; 366  :     Py_XDECREF(ourfreevars);

  002f2	48 8b b4 24 30
	01 00 00	 mov	 rsi, QWORD PTR [rsp+304]
  002fa	48 85 ff	 test	 rdi, rdi
  002fd	74 65		 je	 SHORT $LN7@code_new
  002ff	e8 00 00 00 00	 call	 _Py_PXCTX
  00304	85 c0		 test	 eax, eax
  00306	75 5c		 jne	 SHORT $LN7@code_new
  00308	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0030c	a8 20		 test	 al, 32			; 00000020H
  0030e	75 4c		 jne	 SHORT $LN57@code_new
  00310	84 c0		 test	 al, al
  00312	78 48		 js	 SHORT $LN57@code_new
  00314	a8 02		 test	 al, 2
  00316	75 4c		 jne	 SHORT $LN7@code_new
  00318	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0031c	75 46		 jne	 SHORT $LN7@code_new
  0031e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00325	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0032c	4c 8b cf	 mov	 r9, rdi
  0032f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00335	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0033d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00342	48 8b cf	 mov	 rcx, rdi
  00345	85 c0		 test	 eax, eax
  00347	74 07		 je	 SHORT $LN62@code_new
  00349	e8 00 00 00 00	 call	 _Px_Dealloc
  0034e	eb 14		 jmp	 SHORT $LN7@code_new
$LN62@code_new:
  00350	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00354	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0035a	eb 08		 jmp	 SHORT $LN7@code_new
$LN57@code_new:
  0035c	48 8b cf	 mov	 rcx, rdi
  0035f	e8 00 00 00 00	 call	 Px_DecRef
$LN7@code_new:

; 367  :     Py_XDECREF(ourcellvars);

  00364	48 85 db	 test	 rbx, rbx
  00367	74 65		 je	 SHORT $LN75@code_new
  00369	e8 00 00 00 00	 call	 _Py_PXCTX
  0036e	85 c0		 test	 eax, eax
  00370	75 5c		 jne	 SHORT $LN75@code_new
  00372	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00376	a8 20		 test	 al, 32			; 00000020H
  00378	75 4c		 jne	 SHORT $LN68@code_new
  0037a	84 c0		 test	 al, al
  0037c	78 48		 js	 SHORT $LN68@code_new
  0037e	a8 02		 test	 al, 2
  00380	75 4c		 jne	 SHORT $LN75@code_new
  00382	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00386	75 46		 jne	 SHORT $LN75@code_new
  00388	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0038f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00396	4c 8b cb	 mov	 r9, rbx
  00399	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0039f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003a7	e8 00 00 00 00	 call	 _PyParallel_Guard
  003ac	48 8b cb	 mov	 rcx, rbx
  003af	85 c0		 test	 eax, eax
  003b1	74 07		 je	 SHORT $LN73@code_new
  003b3	e8 00 00 00 00	 call	 _Px_Dealloc
  003b8	eb 14		 jmp	 SHORT $LN75@code_new
$LN73@code_new:
  003ba	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  003be	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003c4	eb 08		 jmp	 SHORT $LN75@code_new
$LN68@code_new:
  003c6	48 8b cb	 mov	 rcx, rbx
  003c9	e8 00 00 00 00	 call	 Px_DecRef
$LN75@code_new:
  003ce	4c 8b a4 24 38
	01 00 00	 mov	 r12, QWORD PTR [rsp+312]
$LN3@code_new:

; 368  :     return co;

  003d6	49 8b c5	 mov	 rax, r13
$LN29@code_new:

; 369  : }

  003d9	48 8b 9c 24 40
	01 00 00	 mov	 rbx, QWORD PTR [rsp+320]
  003e1	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  003e8	41 5d		 pop	 r13
  003ea	5f		 pop	 rdi
  003eb	5d		 pop	 rbp
  003ec	c3		 ret	 0
code_new ENDP
_TEXT	ENDS
EXTRN	PyObject_Free:PROC
EXTRN	PyObject_ClearWeakRefs:PROC
EXTRN	PyObject_GC_Del:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$code_dealloc DD imagerel code_dealloc
	DD	imagerel code_dealloc+1119
	DD	imagerel $unwind$code_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$code_dealloc DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\codeobject.c
xdata	ENDS
;	COMDAT code_dealloc
_TEXT	SEGMENT
co$ = 64
code_dealloc PROC					; COMDAT

; 373  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 374  :     Py_XDECREF(co->co_code);

  0000a	48 8b 59 78	 mov	 rbx, QWORD PTR [rcx+120]
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	48 85 db	 test	 rbx, rbx
  00014	74 65		 je	 SHORT $LN38@code_deall
  00016	e8 00 00 00 00	 call	 _Py_PXCTX
  0001b	85 c0		 test	 eax, eax
  0001d	75 5c		 jne	 SHORT $LN38@code_deall
  0001f	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00023	a8 20		 test	 al, 32			; 00000020H
  00025	75 4c		 jne	 SHORT $LN48@code_deall
  00027	84 c0		 test	 al, al
  00029	78 48		 js	 SHORT $LN48@code_deall
  0002b	a8 02		 test	 al, 2
  0002d	75 4c		 jne	 SHORT $LN38@code_deall
  0002f	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00033	75 46		 jne	 SHORT $LN38@code_deall
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00043	4c 8b cb	 mov	 r9, rbx
  00046	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	48 8b cb	 mov	 rcx, rbx
  0005c	85 c0		 test	 eax, eax
  0005e	74 07		 je	 SHORT $LN53@code_deall
  00060	e8 00 00 00 00	 call	 _Px_Dealloc
  00065	eb 14		 jmp	 SHORT $LN38@code_deall
$LN53@code_deall:
  00067	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0006b	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00071	eb 08		 jmp	 SHORT $LN38@code_deall
$LN48@code_deall:
  00073	48 8b cb	 mov	 rcx, rbx
  00076	e8 00 00 00 00	 call	 Px_DecRef
$LN38@code_deall:

; 375  :     Py_XDECREF(co->co_consts);

  0007b	48 8b 9f 80 00
	00 00		 mov	 rbx, QWORD PTR [rdi+128]
  00082	48 85 db	 test	 rbx, rbx
  00085	74 65		 je	 SHORT $LN34@code_deall
  00087	e8 00 00 00 00	 call	 _Py_PXCTX
  0008c	85 c0		 test	 eax, eax
  0008e	75 5c		 jne	 SHORT $LN34@code_deall
  00090	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00094	a8 20		 test	 al, 32			; 00000020H
  00096	75 4c		 jne	 SHORT $LN59@code_deall
  00098	84 c0		 test	 al, al
  0009a	78 48		 js	 SHORT $LN59@code_deall
  0009c	a8 02		 test	 al, 2
  0009e	75 4c		 jne	 SHORT $LN34@code_deall
  000a0	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a4	75 46		 jne	 SHORT $LN34@code_deall
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b4	4c 8b cb	 mov	 r9, rbx
  000b7	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	48 8b cb	 mov	 rcx, rbx
  000cd	85 c0		 test	 eax, eax
  000cf	74 07		 je	 SHORT $LN64@code_deall
  000d1	e8 00 00 00 00	 call	 _Px_Dealloc
  000d6	eb 14		 jmp	 SHORT $LN34@code_deall
$LN64@code_deall:
  000d8	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000dc	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e2	eb 08		 jmp	 SHORT $LN34@code_deall
$LN59@code_deall:
  000e4	48 8b cb	 mov	 rcx, rbx
  000e7	e8 00 00 00 00	 call	 Px_DecRef
$LN34@code_deall:

; 376  :     Py_XDECREF(co->co_names);

  000ec	48 8b 9f 88 00
	00 00		 mov	 rbx, QWORD PTR [rdi+136]
  000f3	48 85 db	 test	 rbx, rbx
  000f6	74 65		 je	 SHORT $LN30@code_deall
  000f8	e8 00 00 00 00	 call	 _Py_PXCTX
  000fd	85 c0		 test	 eax, eax
  000ff	75 5c		 jne	 SHORT $LN30@code_deall
  00101	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00105	a8 20		 test	 al, 32			; 00000020H
  00107	75 4c		 jne	 SHORT $LN70@code_deall
  00109	84 c0		 test	 al, al
  0010b	78 48		 js	 SHORT $LN70@code_deall
  0010d	a8 02		 test	 al, 2
  0010f	75 4c		 jne	 SHORT $LN30@code_deall
  00111	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00115	75 46		 jne	 SHORT $LN30@code_deall
  00117	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0011e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00125	4c 8b cb	 mov	 r9, rbx
  00128	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0012e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00136	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013b	48 8b cb	 mov	 rcx, rbx
  0013e	85 c0		 test	 eax, eax
  00140	74 07		 je	 SHORT $LN75@code_deall
  00142	e8 00 00 00 00	 call	 _Px_Dealloc
  00147	eb 14		 jmp	 SHORT $LN30@code_deall
$LN75@code_deall:
  00149	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0014d	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00153	eb 08		 jmp	 SHORT $LN30@code_deall
$LN70@code_deall:
  00155	48 8b cb	 mov	 rcx, rbx
  00158	e8 00 00 00 00	 call	 Px_DecRef
$LN30@code_deall:

; 377  :     Py_XDECREF(co->co_varnames);

  0015d	48 8b 9f 90 00
	00 00		 mov	 rbx, QWORD PTR [rdi+144]
  00164	48 85 db	 test	 rbx, rbx
  00167	74 65		 je	 SHORT $LN26@code_deall
  00169	e8 00 00 00 00	 call	 _Py_PXCTX
  0016e	85 c0		 test	 eax, eax
  00170	75 5c		 jne	 SHORT $LN26@code_deall
  00172	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00176	a8 20		 test	 al, 32			; 00000020H
  00178	75 4c		 jne	 SHORT $LN81@code_deall
  0017a	84 c0		 test	 al, al
  0017c	78 48		 js	 SHORT $LN81@code_deall
  0017e	a8 02		 test	 al, 2
  00180	75 4c		 jne	 SHORT $LN26@code_deall
  00182	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00186	75 46		 jne	 SHORT $LN26@code_deall
  00188	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00196	4c 8b cb	 mov	 r9, rbx
  00199	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0019f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001a7	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ac	48 8b cb	 mov	 rcx, rbx
  001af	85 c0		 test	 eax, eax
  001b1	74 07		 je	 SHORT $LN86@code_deall
  001b3	e8 00 00 00 00	 call	 _Px_Dealloc
  001b8	eb 14		 jmp	 SHORT $LN26@code_deall
$LN86@code_deall:
  001ba	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  001be	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  001c4	eb 08		 jmp	 SHORT $LN26@code_deall
$LN81@code_deall:
  001c6	48 8b cb	 mov	 rcx, rbx
  001c9	e8 00 00 00 00	 call	 Px_DecRef
$LN26@code_deall:

; 378  :     Py_XDECREF(co->co_freevars);

  001ce	48 8b 9f 98 00
	00 00		 mov	 rbx, QWORD PTR [rdi+152]
  001d5	48 85 db	 test	 rbx, rbx
  001d8	74 65		 je	 SHORT $LN22@code_deall
  001da	e8 00 00 00 00	 call	 _Py_PXCTX
  001df	85 c0		 test	 eax, eax
  001e1	75 5c		 jne	 SHORT $LN22@code_deall
  001e3	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001e7	a8 20		 test	 al, 32			; 00000020H
  001e9	75 4c		 jne	 SHORT $LN92@code_deall
  001eb	84 c0		 test	 al, al
  001ed	78 48		 js	 SHORT $LN92@code_deall
  001ef	a8 02		 test	 al, 2
  001f1	75 4c		 jne	 SHORT $LN22@code_deall
  001f3	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001f7	75 46		 jne	 SHORT $LN22@code_deall
  001f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00200	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00207	4c 8b cb	 mov	 r9, rbx
  0020a	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00210	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00218	e8 00 00 00 00	 call	 _PyParallel_Guard
  0021d	48 8b cb	 mov	 rcx, rbx
  00220	85 c0		 test	 eax, eax
  00222	74 07		 je	 SHORT $LN97@code_deall
  00224	e8 00 00 00 00	 call	 _Px_Dealloc
  00229	eb 14		 jmp	 SHORT $LN22@code_deall
$LN97@code_deall:
  0022b	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0022f	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00235	eb 08		 jmp	 SHORT $LN22@code_deall
$LN92@code_deall:
  00237	48 8b cb	 mov	 rcx, rbx
  0023a	e8 00 00 00 00	 call	 Px_DecRef
$LN22@code_deall:

; 379  :     Py_XDECREF(co->co_cellvars);

  0023f	48 8b 9f a0 00
	00 00		 mov	 rbx, QWORD PTR [rdi+160]
  00246	48 85 db	 test	 rbx, rbx
  00249	74 65		 je	 SHORT $LN18@code_deall
  0024b	e8 00 00 00 00	 call	 _Py_PXCTX
  00250	85 c0		 test	 eax, eax
  00252	75 5c		 jne	 SHORT $LN18@code_deall
  00254	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00258	a8 20		 test	 al, 32			; 00000020H
  0025a	75 4c		 jne	 SHORT $LN103@code_deall
  0025c	84 c0		 test	 al, al
  0025e	78 48		 js	 SHORT $LN103@code_deall
  00260	a8 02		 test	 al, 2
  00262	75 4c		 jne	 SHORT $LN18@code_deall
  00264	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00268	75 46		 jne	 SHORT $LN18@code_deall
  0026a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00271	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00278	4c 8b cb	 mov	 r9, rbx
  0027b	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00281	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00289	e8 00 00 00 00	 call	 _PyParallel_Guard
  0028e	48 8b cb	 mov	 rcx, rbx
  00291	85 c0		 test	 eax, eax
  00293	74 07		 je	 SHORT $LN108@code_deall
  00295	e8 00 00 00 00	 call	 _Px_Dealloc
  0029a	eb 14		 jmp	 SHORT $LN18@code_deall
$LN108@code_deall:
  0029c	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  002a0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002a6	eb 08		 jmp	 SHORT $LN18@code_deall
$LN103@code_deall:
  002a8	48 8b cb	 mov	 rcx, rbx
  002ab	e8 00 00 00 00	 call	 Px_DecRef
$LN18@code_deall:

; 380  :     Py_XDECREF(co->co_filename);

  002b0	48 8b 9f b0 00
	00 00		 mov	 rbx, QWORD PTR [rdi+176]
  002b7	48 85 db	 test	 rbx, rbx
  002ba	74 65		 je	 SHORT $LN14@code_deall
  002bc	e8 00 00 00 00	 call	 _Py_PXCTX
  002c1	85 c0		 test	 eax, eax
  002c3	75 5c		 jne	 SHORT $LN14@code_deall
  002c5	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  002c9	a8 20		 test	 al, 32			; 00000020H
  002cb	75 4c		 jne	 SHORT $LN114@code_deall
  002cd	84 c0		 test	 al, al
  002cf	78 48		 js	 SHORT $LN114@code_deall
  002d1	a8 02		 test	 al, 2
  002d3	75 4c		 jne	 SHORT $LN14@code_deall
  002d5	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  002d9	75 46		 jne	 SHORT $LN14@code_deall
  002db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  002e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  002e9	4c 8b cb	 mov	 r9, rbx
  002ec	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  002f2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002fa	e8 00 00 00 00	 call	 _PyParallel_Guard
  002ff	48 8b cb	 mov	 rcx, rbx
  00302	85 c0		 test	 eax, eax
  00304	74 07		 je	 SHORT $LN119@code_deall
  00306	e8 00 00 00 00	 call	 _Px_Dealloc
  0030b	eb 14		 jmp	 SHORT $LN14@code_deall
$LN119@code_deall:
  0030d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00311	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00317	eb 08		 jmp	 SHORT $LN14@code_deall
$LN114@code_deall:
  00319	48 8b cb	 mov	 rcx, rbx
  0031c	e8 00 00 00 00	 call	 Px_DecRef
$LN14@code_deall:

; 381  :     Py_XDECREF(co->co_name);

  00321	48 8b 9f b8 00
	00 00		 mov	 rbx, QWORD PTR [rdi+184]
  00328	48 85 db	 test	 rbx, rbx
  0032b	74 65		 je	 SHORT $LN10@code_deall
  0032d	e8 00 00 00 00	 call	 _Py_PXCTX
  00332	85 c0		 test	 eax, eax
  00334	75 5c		 jne	 SHORT $LN10@code_deall
  00336	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0033a	a8 20		 test	 al, 32			; 00000020H
  0033c	75 4c		 jne	 SHORT $LN125@code_deall
  0033e	84 c0		 test	 al, al
  00340	78 48		 js	 SHORT $LN125@code_deall
  00342	a8 02		 test	 al, 2
  00344	75 4c		 jne	 SHORT $LN10@code_deall
  00346	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0034a	75 46		 jne	 SHORT $LN10@code_deall
  0034c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00353	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0035a	4c 8b cb	 mov	 r9, rbx
  0035d	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00363	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0036b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00370	48 8b cb	 mov	 rcx, rbx
  00373	85 c0		 test	 eax, eax
  00375	74 07		 je	 SHORT $LN130@code_deall
  00377	e8 00 00 00 00	 call	 _Px_Dealloc
  0037c	eb 14		 jmp	 SHORT $LN10@code_deall
$LN130@code_deall:
  0037e	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00382	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00388	eb 08		 jmp	 SHORT $LN10@code_deall
$LN125@code_deall:
  0038a	48 8b cb	 mov	 rcx, rbx
  0038d	e8 00 00 00 00	 call	 Px_DecRef
$LN10@code_deall:

; 382  :     Py_XDECREF(co->co_lnotab);

  00392	48 8b 9f c8 00
	00 00		 mov	 rbx, QWORD PTR [rdi+200]
  00399	48 85 db	 test	 rbx, rbx
  0039c	74 65		 je	 SHORT $LN6@code_deall
  0039e	e8 00 00 00 00	 call	 _Py_PXCTX
  003a3	85 c0		 test	 eax, eax
  003a5	75 5c		 jne	 SHORT $LN6@code_deall
  003a7	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  003ab	a8 20		 test	 al, 32			; 00000020H
  003ad	75 4c		 jne	 SHORT $LN136@code_deall
  003af	84 c0		 test	 al, al
  003b1	78 48		 js	 SHORT $LN136@code_deall
  003b3	a8 02		 test	 al, 2
  003b5	75 4c		 jne	 SHORT $LN6@code_deall
  003b7	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  003bb	75 46		 jne	 SHORT $LN6@code_deall
  003bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  003cb	4c 8b cb	 mov	 r9, rbx
  003ce	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  003d4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003dc	e8 00 00 00 00	 call	 _PyParallel_Guard
  003e1	48 8b cb	 mov	 rcx, rbx
  003e4	85 c0		 test	 eax, eax
  003e6	74 07		 je	 SHORT $LN141@code_deall
  003e8	e8 00 00 00 00	 call	 _Px_Dealloc
  003ed	eb 14		 jmp	 SHORT $LN6@code_deall
$LN141@code_deall:
  003ef	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  003f3	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003f9	eb 08		 jmp	 SHORT $LN6@code_deall
$LN136@code_deall:
  003fb	48 8b cb	 mov	 rcx, rbx
  003fe	e8 00 00 00 00	 call	 Px_DecRef
$LN6@code_deall:

; 383  :     if (co->co_cell2arg != NULL)

  00403	48 83 bf a8 00
	00 00 00	 cmp	 QWORD PTR [rdi+168], 0
  0040b	74 1d		 je	 SHORT $LN43@code_deall

; 384  :         PyMem_FREE(co->co_cell2arg);

  0040d	e8 00 00 00 00	 call	 _Py_PXCTX
  00412	48 8b 8f a8 00
	00 00		 mov	 rcx, QWORD PTR [rdi+168]
  00419	85 c0		 test	 eax, eax
  0041b	74 07		 je	 SHORT $LN42@code_deall
  0041d	e8 00 00 00 00	 call	 _PxMem_Free
  00422	eb 06		 jmp	 SHORT $LN43@code_deall
$LN42@code_deall:
  00424	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN43@code_deall:

; 385  :     if (co->co_zombieframe != NULL)

  0042a	48 8b 8f d0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+208]
  00431	48 85 c9	 test	 rcx, rcx
  00434	74 05		 je	 SHORT $LN2@code_deall

; 386  :         PyObject_GC_Del(co->co_zombieframe);

  00436	e8 00 00 00 00	 call	 PyObject_GC_Del
$LN2@code_deall:

; 387  :     if (co->co_weakreflist != NULL)

  0043b	48 83 bf d8 00
	00 00 00	 cmp	 QWORD PTR [rdi+216], 0
  00443	74 08		 je	 SHORT $LN1@code_deall

; 388  :         PyObject_ClearWeakRefs((PyObject*)co);

  00445	48 8b cf	 mov	 rcx, rdi
  00448	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN1@code_deall:

; 389  :     PyObject_DEL(co);

  0044d	48 8b cf	 mov	 rcx, rdi

; 390  : }

  00450	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00455	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00459	5f		 pop	 rdi
  0045a	e9 00 00 00 00	 jmp	 PyObject_Free
code_dealloc ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
; Function compile flags: /Ogtpy
;	COMDAT code_sizeof
_TEXT	SEGMENT
co$ = 8
unused$ = 16
code_sizeof PROC					; COMDAT

; 394  : {

  00000	48 8b c1	 mov	 rax, rcx

; 395  :     Py_ssize_t res;
; 396  : 
; 397  :     res = sizeof(PyCodeObject);

  00003	b9 10 01 00 00	 mov	 ecx, 272		; 00000110H

; 398  :     if (co->co_cell2arg != NULL && co->co_cellvars != NULL)

  00008	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  00010	74 13		 je	 SHORT $LN1@code_sizeo
  00012	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00019	48 85 c0	 test	 rax, rax
  0001c	74 07		 je	 SHORT $LN1@code_sizeo

; 399  :         res += PyTuple_GET_SIZE(co->co_cellvars) * sizeof(unsigned char);

  0001e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00022	48 03 c8	 add	 rcx, rax
$LN1@code_sizeo:

; 400  :     return PyLong_FromSsize_t(res);
; 401  : }

  00025	e9 00 00 00 00	 jmp	 PyLong_FromSsize_t
code_sizeof ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@BNKFAJCC@?$DMcode?5object?5?$CFU?5at?5?$CFp?0?5file?5?$DP?$DP?$DP?0@ ; `string'
PUBLIC	??_C@_0CL@FMPDHGJG@?$DMcode?5object?5?$CFU?5at?5?$CFp?0?5file?5?$CC?$CFU?$CC@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$code_repr DD imagerel code_repr
	DD	imagerel code_repr+106
	DD	imagerel $unwind$code_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$code_repr DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0CK@BNKFAJCC@?$DMcode?5object?5?$CFU?5at?5?$CFp?0?5file?5?$DP?$DP?$DP?0@
CONST	SEGMENT
??_C@_0CK@BNKFAJCC@?$DMcode?5object?5?$CFU?5at?5?$CFp?0?5file?5?$DP?$DP?$DP?0@ DB '<'
	DB	'code object %U at %p, file ???, line %d>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FMPDHGJG@?$DMcode?5object?5?$CFU?5at?5?$CFp?0?5file?5?$CC?$CFU?$CC@
CONST	SEGMENT
??_C@_0CL@FMPDHGJG@?$DMcode?5object?5?$CFU?5at?5?$CFp?0?5file?5?$CC?$CFU?$CC@ DB '<'
	DB	'code object %U at %p, file "%U", line %d>', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT code_repr
_TEXT	SEGMENT
co$ = 64
code_repr PROC						; COMDAT

; 405  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 406  :     int lineno;
; 407  :     if (co->co_firstlineno != 0)

  00004	8b 81 c0 00 00
	00		 mov	 eax, DWORD PTR [rcx+192]

; 408  :         lineno = co->co_firstlineno;
; 409  :     else
; 410  :         lineno = -1;
; 411  :     if (co->co_filename && PyUnicode_Check(co->co_filename)) {

  0000a	4c 8b 89 b0 00
	00 00		 mov	 r9, QWORD PTR [rcx+176]
  00011	83 ca ff	 or	 edx, -1
  00014	85 c0		 test	 eax, eax
  00016	0f 45 d0	 cmovne	 edx, eax
  00019	4d 85 c9	 test	 r9, r9
  0001c	74 2f		 je	 SHORT $LN2@code_repr
  0001e	49 8b 41 58	 mov	 rax, QWORD PTR [r9+88]
  00022	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0002c	74 1f		 je	 SHORT $LN2@code_repr

; 412  :         return PyUnicode_FromFormat(
; 413  :             "<code object %U at %p, file \"%U\", line %d>",
; 414  :             co->co_name, co, co->co_filename, lineno);

  0002e	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00032	48 8b 91 b8 00
	00 00		 mov	 rdx, QWORD PTR [rcx+184]
  00039	4c 8b c1	 mov	 r8, rcx
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@FMPDHGJG@?$DMcode?5object?5?$CFU?5at?5?$CFp?0?5file?5?$CC?$CFU?$CC@
  00043	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 419  :     }
; 420  : }

  00048	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004c	c3		 ret	 0
$LN2@code_repr:

; 415  :     } else {
; 416  :         return PyUnicode_FromFormat(
; 417  :             "<code object %U at %p, file ???, line %d>",
; 418  :             co->co_name, co, lineno);

  0004d	44 8b ca	 mov	 r9d, edx
  00050	48 8b 91 b8 00
	00 00		 mov	 rdx, QWORD PTR [rcx+184]
  00057	4c 8b c1	 mov	 r8, rcx
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CK@BNKFAJCC@?$DMcode?5object?5?$CFU?5at?5?$CFp?0?5file?5?$DP?$DP?$DP?0@

; 419  :     }
; 420  : }

  00061	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00065	e9 00 00 00 00	 jmp	 PyUnicode_FromFormat
code_repr ENDP
_TEXT	ENDS
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_Py_FalseStruct:BYTE
EXTRN	PyObject_RichCompareBool:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$code_richcompare DD imagerel code_richcompare
	DD	imagerel code_richcompare+581
	DD	imagerel $unwind$code_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$code_richcompare DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\objects\codeobject.c
xdata	ENDS
;	COMDAT code_richcompare
_TEXT	SEGMENT
self$ = 64
other$ = 72
op$ = 80
code_richcompare PROC					; COMDAT

; 424  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	41 8b f0	 mov	 esi, r8d
  00012	48 8b da	 mov	 rbx, rdx
  00015	48 8b f9	 mov	 rdi, rcx

; 425  :     PyCodeObject *co, *cp;
; 426  :     int eq;
; 427  :     PyObject *res;
; 428  : 
; 429  :     if ((op != Py_EQ && op != Py_NE) ||
; 430  :         !PyCode_Check(self) ||
; 431  :         !PyCode_Check(other)) {

  00018	41 83 f8 02	 cmp	 r8d, 2
  0001c	74 0a		 je	 SHORT $LN18@code_richc
  0001e	41 83 f8 03	 cmp	 r8d, 3
  00022	0f 85 c1 01 00
	00		 jne	 $LN19@code_richc
$LN18@code_richc:
  00028	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  0002f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00033	0f 85 b0 01 00
	00		 jne	 $LN19@code_richc
  00039	48 39 42 58	 cmp	 QWORD PTR [rdx+88], rax
  0003d	0f 85 a6 01 00
	00		 jne	 $LN19@code_richc

; 433  :     }
; 434  : 
; 435  :     co = (PyCodeObject *)self;
; 436  :     cp = (PyCodeObject *)other;
; 437  : 
; 438  :     eq = PyObject_RichCompareBool(co->co_name, cp->co_name, Py_EQ);

  00043	48 8b 92 b8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+184]
  0004a	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00051	41 b8 02 00 00
	00		 mov	 r8d, 2
  00057	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0005c	44 8b d8	 mov	 r11d, eax

; 439  :     if (eq <= 0) goto unequal;

  0005f	85 c0		 test	 eax, eax
  00061	0f 8e 3b 01 00
	00		 jle	 $unequal$20734

; 440  :     eq = co->co_argcount == cp->co_argcount;

  00067	8b 43 60	 mov	 eax, DWORD PTR [rbx+96]
  0006a	45 33 db	 xor	 r11d, r11d
  0006d	39 47 60	 cmp	 DWORD PTR [rdi+96], eax
  00070	41 0f 94 c3	 sete	 r11b

; 441  :     if (!eq) goto unequal;

  00074	45 85 db	 test	 r11d, r11d
  00077	0f 84 28 01 00
	00		 je	 $LN27@code_richc

; 442  :     eq = co->co_kwonlyargcount == cp->co_kwonlyargcount;

  0007d	8b 43 64	 mov	 eax, DWORD PTR [rbx+100]
  00080	45 33 db	 xor	 r11d, r11d
  00083	39 47 64	 cmp	 DWORD PTR [rdi+100], eax
  00086	41 0f 94 c3	 sete	 r11b

; 443  :     if (!eq) goto unequal;

  0008a	45 85 db	 test	 r11d, r11d
  0008d	0f 84 12 01 00
	00		 je	 $LN27@code_richc

; 444  :     eq = co->co_nlocals == cp->co_nlocals;

  00093	8b 43 68	 mov	 eax, DWORD PTR [rbx+104]
  00096	45 33 db	 xor	 r11d, r11d
  00099	39 47 68	 cmp	 DWORD PTR [rdi+104], eax
  0009c	41 0f 94 c3	 sete	 r11b

; 445  :     if (!eq) goto unequal;

  000a0	45 85 db	 test	 r11d, r11d
  000a3	0f 84 fc 00 00
	00		 je	 $LN27@code_richc

; 446  :     eq = co->co_flags == cp->co_flags;

  000a9	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  000ac	45 33 db	 xor	 r11d, r11d
  000af	39 47 70	 cmp	 DWORD PTR [rdi+112], eax
  000b2	41 0f 94 c3	 sete	 r11b

; 447  :     if (!eq) goto unequal;

  000b6	45 85 db	 test	 r11d, r11d
  000b9	0f 84 e6 00 00
	00		 je	 $LN27@code_richc

; 448  :     eq = co->co_firstlineno == cp->co_firstlineno;

  000bf	8b 83 c0 00 00
	00		 mov	 eax, DWORD PTR [rbx+192]
  000c5	45 33 db	 xor	 r11d, r11d
  000c8	39 87 c0 00 00
	00		 cmp	 DWORD PTR [rdi+192], eax
  000ce	41 0f 94 c3	 sete	 r11b

; 449  :     if (!eq) goto unequal;

  000d2	45 85 db	 test	 r11d, r11d
  000d5	0f 84 ca 00 00
	00		 je	 $LN27@code_richc

; 450  :     eq = PyObject_RichCompareBool(co->co_code, cp->co_code, Py_EQ);

  000db	48 8b 53 78	 mov	 rdx, QWORD PTR [rbx+120]
  000df	48 8b 4f 78	 mov	 rcx, QWORD PTR [rdi+120]
  000e3	41 b8 02 00 00
	00		 mov	 r8d, 2
  000e9	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  000ee	44 8b d8	 mov	 r11d, eax

; 451  :     if (eq <= 0) goto unequal;

  000f1	85 c0		 test	 eax, eax
  000f3	0f 8e a9 00 00
	00		 jle	 $unequal$20734

; 452  :     eq = PyObject_RichCompareBool(co->co_consts, cp->co_consts, Py_EQ);

  000f9	48 8b 93 80 00
	00 00		 mov	 rdx, QWORD PTR [rbx+128]
  00100	48 8b 8f 80 00
	00 00		 mov	 rcx, QWORD PTR [rdi+128]
  00107	41 b8 02 00 00
	00		 mov	 r8d, 2
  0010d	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00112	44 8b d8	 mov	 r11d, eax

; 453  :     if (eq <= 0) goto unequal;

  00115	85 c0		 test	 eax, eax
  00117	0f 8e 85 00 00
	00		 jle	 $unequal$20734

; 454  :     eq = PyObject_RichCompareBool(co->co_names, cp->co_names, Py_EQ);

  0011d	48 8b 93 88 00
	00 00		 mov	 rdx, QWORD PTR [rbx+136]
  00124	48 8b 8f 88 00
	00 00		 mov	 rcx, QWORD PTR [rdi+136]
  0012b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00131	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00136	44 8b d8	 mov	 r11d, eax

; 455  :     if (eq <= 0) goto unequal;

  00139	85 c0		 test	 eax, eax
  0013b	7e 65		 jle	 SHORT $unequal$20734

; 456  :     eq = PyObject_RichCompareBool(co->co_varnames, cp->co_varnames, Py_EQ);

  0013d	48 8b 93 90 00
	00 00		 mov	 rdx, QWORD PTR [rbx+144]
  00144	48 8b 8f 90 00
	00 00		 mov	 rcx, QWORD PTR [rdi+144]
  0014b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00151	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00156	44 8b d8	 mov	 r11d, eax

; 457  :     if (eq <= 0) goto unequal;

  00159	85 c0		 test	 eax, eax
  0015b	7e 45		 jle	 SHORT $unequal$20734

; 458  :     eq = PyObject_RichCompareBool(co->co_freevars, cp->co_freevars, Py_EQ);

  0015d	48 8b 93 98 00
	00 00		 mov	 rdx, QWORD PTR [rbx+152]
  00164	48 8b 8f 98 00
	00 00		 mov	 rcx, QWORD PTR [rdi+152]
  0016b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00171	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00176	44 8b d8	 mov	 r11d, eax

; 459  :     if (eq <= 0) goto unequal;

  00179	85 c0		 test	 eax, eax
  0017b	7e 25		 jle	 SHORT $unequal$20734

; 460  :     eq = PyObject_RichCompareBool(co->co_cellvars, cp->co_cellvars, Py_EQ);

  0017d	48 8b 93 a0 00
	00 00		 mov	 rdx, QWORD PTR [rbx+160]
  00184	48 8b 8f a0 00
	00 00		 mov	 rcx, QWORD PTR [rdi+160]
  0018b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00191	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00196	44 8b d8	 mov	 r11d, eax

; 461  :     if (eq <= 0) goto unequal;

  00199	85 c0		 test	 eax, eax
  0019b	7e 05		 jle	 SHORT $unequal$20734

; 462  : 
; 463  :     if (op == Py_EQ)

  0019d	83 fe 02	 cmp	 esi, 2
  001a0	eb 1a		 jmp	 SHORT $LN28@code_richc
$unequal$20734:

; 464  :         res = Py_True;
; 465  :     else
; 466  :         res = Py_False;
; 467  :     goto done;
; 468  : 
; 469  :   unequal:
; 470  :     if (eq < 0)

  001a2	45 85 db	 test	 r11d, r11d
$LN27@code_richc:
  001a5	79 12		 jns	 SHORT $LN3@code_richc

; 471  :         return NULL;

  001a7	33 c0		 xor	 eax, eax

; 480  : }

  001a9	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001ae	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  001b3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001b7	5f		 pop	 rdi
  001b8	c3		 ret	 0
$LN3@code_richc:

; 472  :     if (op == Py_NE)

  001b9	83 fe 03	 cmp	 esi, 3
$LN28@code_richc:
  001bc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  001c3	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:_Py_TrueStruct
$done$20750:
  001ca	48 0f 45 d8	 cmovne	 rbx, rax

; 473  :         res = Py_True;
; 474  :     else
; 475  :         res = Py_False;
; 476  : 
; 477  :   done:
; 478  :     Py_INCREF(res);

  001ce	48 8b cb	 mov	 rcx, rbx
  001d1	e8 00 00 00 00	 call	 _Py_IncRef

; 479  :     return res;

  001d6	48 8b c3	 mov	 rax, rbx

; 480  : }

  001d9	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001de	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  001e3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001e7	5f		 pop	 rdi
  001e8	c3		 ret	 0
$LN19@code_richc:

; 432  :         Py_RETURN_NOTIMPLEMENTED;

  001e9	e8 00 00 00 00	 call	 _Py_PXCTX
  001ee	85 c0		 test	 eax, eax
  001f0	75 3c		 jne	 SHORT $LN24@code_richc
  001f2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NotImplementedStruct
  001f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00200	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00207	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0020d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00215	e8 00 00 00 00	 call	 _PyParallel_Guard
  0021a	85 c0		 test	 eax, eax
  0021c	75 09		 jne	 SHORT $LN23@code_richc
  0021e	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NotImplementedStruct+32, 32 ; 00000020H
  00225	74 07		 je	 SHORT $LN24@code_richc
$LN23@code_richc:
  00227	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NotImplementedStruct+80
$LN24@code_richc:

; 480  : }

  0022e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00233	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00238	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0023f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00243	5f		 pop	 rdi
  00244	c3		 ret	 0
code_richcompare ENDP
_TEXT	ENDS
EXTRN	PyObject_Hash:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$code_hash DD imagerel code_hash
	DD	imagerel code_hash+45
	DD	imagerel $unwind$code_hash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$code_hash DD imagerel code_hash+45
	DD	imagerel code_hash+79
	DD	imagerel $chain$0$code_hash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$code_hash DD imagerel code_hash+79
	DD	imagerel code_hash+125
	DD	imagerel $chain$3$code_hash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$code_hash DD imagerel code_hash+125
	DD	imagerel code_hash+166
	DD	imagerel $chain$6$code_hash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$code_hash DD imagerel code_hash+166
	DD	imagerel code_hash+197
	DD	imagerel $chain$7$code_hash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$code_hash DD imagerel code_hash+197
	DD	imagerel code_hash+312
	DD	imagerel $chain$8$code_hash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$code_hash DD imagerel code_hash+312
	DD	imagerel code_hash+317
	DD	imagerel $chain$9$code_hash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$code_hash DD imagerel code_hash+317
	DD	imagerel code_hash+339
	DD	imagerel $chain$10$code_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$code_hash DD 021H
	DD	imagerel code_hash+125
	DD	imagerel code_hash+166
	DD	imagerel $chain$6$code_hash
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$code_hash DD 021H
	DD	imagerel code_hash+166
	DD	imagerel code_hash+197
	DD	imagerel $chain$7$code_hash
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$code_hash DD 020521H
	DD	04e405H
	DD	imagerel code_hash+166
	DD	imagerel code_hash+197
	DD	imagerel $chain$7$code_hash
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$code_hash DD 020521H
	DD	0bd405H
	DD	imagerel code_hash+125
	DD	imagerel code_hash+166
	DD	imagerel $chain$6$code_hash
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$code_hash DD 060c21H
	DD	0ac40cH
	DD	097400H
	DD	085400H
	DD	imagerel code_hash
	DD	imagerel code_hash+45
	DD	imagerel $unwind$code_hash
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$code_hash DD 040c21H
	DD	08540cH
	DD	097400H
	DD	imagerel code_hash
	DD	imagerel code_hash+45
	DD	imagerel $unwind$code_hash
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$code_hash DD 020521H
	DD	097405H
	DD	imagerel code_hash
	DD	imagerel code_hash+45
	DD	imagerel $unwind$code_hash
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$code_hash DD 030701H
	DD	060034207H
	DD	03002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT code_hash
_TEXT	SEGMENT
co$ = 64
code_hash PROC						; COMDAT

; 484  : {

  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00007	48 8b d9	 mov	 rbx, rcx

; 485  :     Py_hash_t h, h0, h1, h2, h3, h4, h5, h6;
; 486  :     h0 = PyObject_Hash(co->co_name);

  0000a	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00011	e8 00 00 00 00	 call	 PyObject_Hash
  00016	48 8b f0	 mov	 rsi, rax

; 487  :     if (h0 == -1) return -1;

  00019	48 83 f8 ff	 cmp	 rax, -1
  0001d	75 0a		 jne	 SHORT $LN8@code_hash
  0001f	48 0b c0	 or	 rax, rax

; 505  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	5e		 pop	 rsi
  00027	5b		 pop	 rbx
  00028	c3		 ret	 0
$LN8@code_hash:

; 488  :     h1 = PyObject_Hash(co->co_code);

  00029	48 8b 4b 78	 mov	 rcx, QWORD PTR [rbx+120]
  0002d	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00032	e8 00 00 00 00	 call	 PyObject_Hash
  00037	48 8b f8	 mov	 rdi, rax

; 489  :     if (h1 == -1) return -1;

  0003a	48 83 f8 ff	 cmp	 rax, -1
  0003e	75 0f		 jne	 SHORT $LN7@code_hash
  00040	48 0b c0	 or	 rax, rax
  00043	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 505  : }

  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5e		 pop	 rsi
  0004d	5b		 pop	 rbx
  0004e	c3		 ret	 0
$LN7@code_hash:

; 490  :     h2 = PyObject_Hash(co->co_consts);

  0004f	48 8b 8b 80 00
	00 00		 mov	 rcx, QWORD PTR [rbx+128]
  00056	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  0005b	e8 00 00 00 00	 call	 PyObject_Hash
  00060	48 8b e8	 mov	 rbp, rax

; 491  :     if (h2 == -1) return -1;

  00063	48 83 f8 ff	 cmp	 rax, -1
  00067	75 14		 jne	 SHORT $LN6@code_hash
  00069	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0006e	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00073	48 0b c0	 or	 rax, rax

; 505  : }

  00076	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007a	5e		 pop	 rsi
  0007b	5b		 pop	 rbx
  0007c	c3		 ret	 0
$LN6@code_hash:

; 492  :     h3 = PyObject_Hash(co->co_names);

  0007d	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  00084	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12
  00089	e8 00 00 00 00	 call	 PyObject_Hash
  0008e	4c 8b e0	 mov	 r12, rax

; 493  :     if (h3 == -1) return -1;

  00091	48 83 f8 ff	 cmp	 rax, -1
  00095	75 08		 jne	 SHORT $LN5@code_hash
  00097	48 0b c0	 or	 rax, rax
  0009a	e9 9e 00 00 00	 jmp	 $LN13@code_hash
$LN5@code_hash:

; 494  :     h4 = PyObject_Hash(co->co_varnames);

  0009f	48 8b 8b 90 00
	00 00		 mov	 rcx, QWORD PTR [rbx+144]
  000a6	4c 89 6c 24 58	 mov	 QWORD PTR [rsp+88], r13
  000ab	e8 00 00 00 00	 call	 PyObject_Hash
  000b0	4c 8b e8	 mov	 r13, rax

; 495  :     if (h4 == -1) return -1;

  000b3	48 83 f8 ff	 cmp	 rax, -1
  000b7	75 05		 jne	 SHORT $LN4@code_hash
  000b9	48 0b c0	 or	 rax, rax
  000bc	eb 7a		 jmp	 SHORT $LN14@code_hash
$LN4@code_hash:

; 496  :     h5 = PyObject_Hash(co->co_freevars);

  000be	48 8b 8b 98 00
	00 00		 mov	 rcx, QWORD PTR [rbx+152]
  000c5	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  000ca	e8 00 00 00 00	 call	 PyObject_Hash
  000cf	4c 8b f0	 mov	 r14, rax

; 497  :     if (h5 == -1) return -1;

  000d2	48 83 f8 ff	 cmp	 rax, -1
  000d6	74 15		 je	 SHORT $LN16@code_hash

; 498  :     h6 = PyObject_Hash(co->co_cellvars);

  000d8	48 8b 8b a0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+160]
  000df	e8 00 00 00 00	 call	 PyObject_Hash
  000e4	4c 8b d8	 mov	 r11, rax

; 499  :     if (h6 == -1) return -1;

  000e7	48 83 f8 ff	 cmp	 rax, -1
  000eb	75 06		 jne	 SHORT $LN2@code_hash
$LN16@code_hash:
  000ed	48 83 c8 ff	 or	 rax, -1
  000f1	eb 40		 jmp	 SHORT $LN15@code_hash
$LN2@code_hash:

; 500  :     h = h0 ^ h1 ^ h2 ^ h3 ^ h4 ^ h5 ^ h6 ^
; 501  :         co->co_argcount ^ co->co_kwonlyargcount ^
; 502  :         co->co_nlocals ^ co->co_flags;

  000f3	48 63 43 68	 movsxd	 rax, DWORD PTR [rbx+104]
  000f7	48 63 4b 70	 movsxd	 rcx, DWORD PTR [rbx+112]
  000fb	48 33 c8	 xor	 rcx, rax
  000fe	48 63 43 64	 movsxd	 rax, DWORD PTR [rbx+100]
  00102	48 33 c8	 xor	 rcx, rax
  00105	48 63 43 60	 movsxd	 rax, DWORD PTR [rbx+96]
  00109	48 33 c8	 xor	 rcx, rax

; 503  :     if (h == -1) h = -2;

  0010c	48 c7 c0 fe ff
	ff ff		 mov	 rax, -2
  00113	49 33 cb	 xor	 rcx, r11
  00116	49 33 ce	 xor	 rcx, r14
  00119	49 33 cd	 xor	 rcx, r13
  0011c	49 33 cc	 xor	 rcx, r12
  0011f	48 33 cd	 xor	 rcx, rbp
  00122	48 33 cf	 xor	 rcx, rdi
  00125	48 33 ce	 xor	 rcx, rsi
  00128	48 83 f9 ff	 cmp	 rcx, -1
  0012c	48 0f 44 c8	 cmove	 rcx, rax

; 504  :     return h;

  00130	48 8b c1	 mov	 rax, rcx
$LN15@code_hash:
  00133	4c 8b 74 24 20	 mov	 r14, QWORD PTR [rsp+32]
$LN14@code_hash:
  00138	4c 8b 6c 24 58	 mov	 r13, QWORD PTR [rsp+88]
$LN13@code_hash:
  0013d	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]
  00142	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00147	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]

; 505  : }

  0014c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00150	5e		 pop	 rsi
  00151	5b		 pop	 rbx
  00152	c3		 ret	 0
code_hash ENDP
_TEXT	ENDS
PUBLIC	PyCode_Addr2Line
EXTRN	PyBytes_AsString:PROC
EXTRN	PyBytes_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCode_Addr2Line DD imagerel $LN11
	DD	imagerel $LN11+113
	DD	imagerel $unwind$PyCode_Addr2Line
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCode_Addr2Line DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyCode_Addr2Line
_TEXT	SEGMENT
co$ = 48
addrq$ = 56
PyCode_Addr2Line PROC					; COMDAT

; 561  : {

$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b d9	 mov	 rbx, rcx

; 562  :     Py_ssize_t size = PyBytes_Size(co->co_lnotab) / 2;

  00012	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00019	8b f2		 mov	 esi, edx
  0001b	e8 00 00 00 00	 call	 PyBytes_Size

; 563  :     unsigned char *p = (unsigned char*)PyBytes_AsString(co->co_lnotab);

  00020	48 8b 8b c8 00
	00 00		 mov	 rcx, QWORD PTR [rbx+200]
  00027	48 99		 cdq
  00029	48 2b c2	 sub	 rax, rdx
  0002c	48 d1 f8	 sar	 rax, 1
  0002f	48 8b f8	 mov	 rdi, rax
  00032	e8 00 00 00 00	 call	 PyBytes_AsString

; 564  :     int line = co->co_firstlineno;

  00037	8b 93 c0 00 00
	00		 mov	 edx, DWORD PTR [rbx+192]

; 565  :     int addr = 0;

  0003d	45 33 c0	 xor	 r8d, r8d

; 566  :     while (--size >= 0) {

  00040	48 ff cf	 dec	 rdi
  00043	78 1a		 js	 SHORT $LN10@PyCode_Add
$LL3@PyCode_Add:

; 567  :         addr += *p++;

  00045	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00048	44 03 c1	 add	 r8d, ecx

; 568  :         if (addr > addrq)

  0004b	44 3b c6	 cmp	 r8d, esi
  0004e	7f 0f		 jg	 SHORT $LN10@PyCode_Add

; 569  :             break;
; 570  :         line += *p++;

  00050	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00054	48 83 c0 02	 add	 rax, 2
  00058	03 d1		 add	 edx, ecx
  0005a	48 ff cf	 dec	 rdi
  0005d	79 e6		 jns	 SHORT $LL3@PyCode_Add
$LN10@PyCode_Add:

; 571  :     }
; 572  :     return line;
; 573  : }

  0005f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00064	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00069	8b c2		 mov	 eax, edx
  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
PyCode_Addr2Line ENDP
_TEXT	ENDS
PUBLIC	_PyCode_CheckLineNumber
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyCode_CheckLineNumber DD imagerel $LN19
	DD	imagerel $LN19+165
	DD	imagerel $unwind$_PyCode_CheckLineNumber
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyCode_CheckLineNumber DD 020501H
	DD	013405H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyCode_CheckLineNumber
_TEXT	SEGMENT
co$ = 8
lasti$ = 16
bounds$ = 24
_PyCode_CheckLineNumber PROC				; COMDAT

; 579  : {

$LN19:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx

; 580  :     Py_ssize_t size;
; 581  :     int addr, line;
; 582  :     unsigned char* p;
; 583  : 
; 584  :     p = (unsigned char*)PyBytes_AS_STRING(co->co_lnotab);

  00005	48 8b 81 c8 00
	00 00		 mov	 rax, QWORD PTR [rcx+200]
  0000c	8b da		 mov	 ebx, edx

; 585  :     size = PyBytes_GET_SIZE(co->co_lnotab) / 2;
; 586  : 
; 587  :     addr = 0;

  0000e	45 33 db	 xor	 r11d, r11d
  00011	4c 8d 48 78	 lea	 r9, QWORD PTR [rax+120]
  00015	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00019	48 99		 cdq
  0001b	48 2b c2	 sub	 rax, rdx

; 588  :     line = co->co_firstlineno;

  0001e	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [rcx+192]

; 589  :     assert(line > 0);
; 590  : 
; 591  :     /* possible optimization: if f->f_lasti == instr_ub
; 592  :        (likely to be a common case) then we already know
; 593  :        instr_lb -- if we stored the matching value of p
; 594  :        somwhere we could skip the first while loop. */
; 595  : 
; 596  :     /* See lnotab_notes.txt for the description of
; 597  :        co_lnotab.  A point to remember: increments to p
; 598  :        come in (addr, line) pairs. */
; 599  : 
; 600  :     bounds->ap_lower = 0;

  00024	45 89 18	 mov	 DWORD PTR [r8], r11d
  00027	48 d1 f8	 sar	 rax, 1
  0002a	4c 8b d0	 mov	 r10, rax

; 601  :     while (size > 0) {

  0002d	48 85 c0	 test	 rax, rax
  00030	7e 2b		 jle	 SHORT $LN5@PyCode_Che
$LL9@PyCode_Che:

; 602  :         if (addr + *p > lasti)

  00032	41 0f b6 01	 movzx	 eax, BYTE PTR [r9]
  00036	41 03 c3	 add	 eax, r11d
  00039	3b c3		 cmp	 eax, ebx
  0003b	7f 30		 jg	 SHORT $LN14@PyCode_Che

; 603  :             break;
; 604  :         addr += *p++;
; 605  :         if (*p)

  0003d	41 80 79 01 00	 cmp	 BYTE PTR [r9+1], 0
  00042	44 8b d8	 mov	 r11d, eax
  00045	74 03		 je	 SHORT $LN6@PyCode_Che

; 606  :             bounds->ap_lower = addr;

  00047	41 89 00	 mov	 DWORD PTR [r8], eax
$LN6@PyCode_Che:

; 607  :         line += *p++;

  0004a	41 0f b6 41 01	 movzx	 eax, BYTE PTR [r9+1]

; 608  :         --size;

  0004f	49 ff ca	 dec	 r10
  00052	49 83 c1 02	 add	 r9, 2
  00056	03 d0		 add	 edx, eax
  00058	4d 85 d2	 test	 r10, r10
  0005b	7f d5		 jg	 SHORT $LL9@PyCode_Che
$LN5@PyCode_Che:

; 615  :                 break;
; 616  :         }
; 617  :         bounds->ap_upper = addr;
; 618  :     }
; 619  :     else {
; 620  :         bounds->ap_upper = INT_MAX;

  0005d	41 c7 40 04 ff
	ff ff 7f	 mov	 DWORD PTR [r8+4], 2147483647 ; 7fffffffH

; 621  :     }
; 622  : 
; 623  :     return line;

  00065	8b c2		 mov	 eax, edx

; 624  : }

  00067	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  0006c	c3		 ret	 0
$LN14@PyCode_Che:

; 609  :     }
; 610  : 
; 611  :     if (size > 0) {

  0006d	4d 85 d2	 test	 r10, r10
  00070	7e eb		 jle	 SHORT $LN5@PyCode_Che

; 612  :         while (--size >= 0) {

  00072	49 ff ca	 dec	 r10
  00075	78 22		 js	 SHORT $LN17@PyCode_Che
  00077	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@PyCode_Che:

; 613  :             addr += *p++;

  00080	41 0f b6 09	 movzx	 ecx, BYTE PTR [r9]

; 614  :             if (*p++)

  00084	49 83 c1 02	 add	 r9, 2
  00088	44 03 d9	 add	 r11d, ecx
  0008b	41 0f b6 49 ff	 movzx	 ecx, BYTE PTR [r9-1]
  00090	84 c9		 test	 cl, cl
  00092	75 05		 jne	 SHORT $LN17@PyCode_Che

; 612  :         while (--size >= 0) {

  00094	49 ff ca	 dec	 r10
  00097	79 e7		 jns	 SHORT $LL4@PyCode_Che
$LN17@PyCode_Che:

; 624  : }

  00099	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  0009e	45 89 58 04	 mov	 DWORD PTR [r8+4], r11d
  000a2	8b c2		 mov	 eax, edx
  000a4	c3		 ret	 0
_PyCode_CheckLineNumber ENDP
_TEXT	ENDS
END
