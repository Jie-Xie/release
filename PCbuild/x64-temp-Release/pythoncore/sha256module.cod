; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07HKDAFOKE@_sha256?$AA@			; `string'
PUBLIC	??_C@_06DJABMLNO@sha224?$AA@			; `string'
PUBLIC	??_C@_06OHILPNJ@sha256?$AA@			; `string'
PUBLIC	??_C@_06ICGJLFIM@string?$AA@			; `string'
PUBLIC	??_C@_0P@KANEIJLI@_sha256?4sha256?$AA@		; `string'
PUBLIC	??_C@_0P@JHKNPNLP@_sha256?4sha224?$AA@		; `string'
PUBLIC	??_C@_0M@NPLIJFCD@digest_size?$AA@		; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_0L@EHHMJOPG@block_size?$AA@		; `string'
PUBLIC	??_C@_06HDLLMMEJ@update?$AA@			; `string'
PUBLIC	??_C@_09NNAIGNDA@hexdigest?$AA@			; `string'
PUBLIC	??_C@_06IJPNAHC@digest?$AA@			; `string'
PUBLIC	??_C@_04COAGEIMF@copy?$AA@			; `string'
;	COMDAT ??_C@_07HKDAFOKE@_sha256?$AA@
CONST	SEGMENT
??_C@_07HKDAFOKE@_sha256?$AA@ DB '_sha256', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJABMLNO@sha224?$AA@
CONST	SEGMENT
??_C@_06DJABMLNO@sha224?$AA@ DB 'sha224', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHILPNJ@sha256?$AA@
CONST	SEGMENT
??_C@_06OHILPNJ@sha256?$AA@ DB 'sha256', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICGJLFIM@string?$AA@
CONST	SEGMENT
??_C@_06ICGJLFIM@string?$AA@ DB 'string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KANEIJLI@_sha256?4sha256?$AA@
CONST	SEGMENT
??_C@_0P@KANEIJLI@_sha256?4sha256?$AA@ DB '_sha256.sha256', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JHKNPNLP@_sha256?4sha224?$AA@
CONST	SEGMENT
??_C@_0P@JHKNPNLP@_sha256?4sha224?$AA@ DB '_sha256.sha224', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NPLIJFCD@digest_size?$AA@
CONST	SEGMENT
??_C@_0M@NPLIJFCD@digest_size?$AA@ DB 'digest_size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EHHMJOPG@block_size?$AA@
CONST	SEGMENT
??_C@_0L@EHHMJOPG@block_size?$AA@ DB 'block_size', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HDLLMMEJ@update?$AA@
CONST	SEGMENT
??_C@_06HDLLMMEJ@update?$AA@ DB 'update', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NNAIGNDA@hexdigest?$AA@
CONST	SEGMENT
??_C@_09NNAIGNDA@hexdigest?$AA@ DB 'hexdigest', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IJPNAHC@digest?$AA@
CONST	SEGMENT
??_C@_06IJPNAHC@digest?$AA@ DB 'digest', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04COAGEIMF@copy?$AA@
CONST	SEGMENT
??_C@_04COAGEIMF@copy?$AA@ DB 'copy', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
SHA256_copy__doc__ DB 'Return a copy of the hash object.', 00H
	ORG $+6
SHA256_digest__doc__ DB 'Return the digest value as a string of binary da'
	DB	'ta.', 00H
	ORG $+4
SHA256_hexdigest__doc__ DB 'Return the digest value as a string of hexade'
	DB	'cimal digits.', 00H
	ORG $+5
SHA256_update__doc__ DB 'Update this hash object''s state with the provid'
	DB	'ed string.', 00H
	ORG $+6
SHA_methods DQ	FLAT:??_C@_04COAGEIMF@copy?$AA@
	DQ	FLAT:SHA256_copy
	DD	04H
	ORG $+4
	DQ	FLAT:SHA256_copy__doc__
	DQ	FLAT:??_C@_06IJPNAHC@digest?$AA@
	DQ	FLAT:SHA256_digest
	DD	04H
	ORG $+4
	DQ	FLAT:SHA256_digest__doc__
	DQ	FLAT:??_C@_09NNAIGNDA@hexdigest?$AA@
	DQ	FLAT:SHA256_hexdigest
	DD	04H
	ORG $+4
	DQ	FLAT:SHA256_hexdigest__doc__
	DQ	FLAT:??_C@_06HDLLMMEJ@update?$AA@
	DQ	FLAT:SHA256_update
	DD	01H
	ORG $+4
	DQ	FLAT:SHA256_update__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
SHA_getseters DQ FLAT:??_C@_0L@EHHMJOPG@block_size?$AA@
	DQ	FLAT:SHA256_get_block_size
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:SHA256_get_name
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
SHA_members DQ	FLAT:??_C@_0M@NPLIJFCD@digest_size?$AA@
	DD	01H
	ORG $+4
	DQ	00000000000000d0H
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+32
SHA224type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@JHKNPNLP@_sha256?4sha224?$AA@
	DQ	00000000000000e0H
	DQ	0000000000000000H
	DQ	FLAT:SHA_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:SHA_methods
	DQ	FLAT:SHA_members
	DQ	FLAT:SHA_getseters
	ORG $+136
SHA256type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@KANEIJLI@_sha256?4sha256?$AA@
	DQ	00000000000000e0H
	DQ	0000000000000000H
	DQ	FLAT:SHA_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:SHA_methods
	DQ	FLAT:SHA_members
	DQ	FLAT:SHA_getseters
	ORG $+136
SHA256_new__doc__ DB 'Return a new SHA-256 hash object; optionally initia'
	DB	'lized with a string.', 00H
?kwlist@?1??SHA256_new@@9@9 DQ FLAT:??_C@_06ICGJLFIM@string?$AA@ ; `SHA256_new'::`2'::kwlist
	DQ	0000000000000000H
	ORG $+8
SHA224_new__doc__ DB 'Return a new SHA-224 hash object; optionally initia'
	DB	'lized with a string.', 00H
?kwlist@?1??SHA224_new@@9@9 DQ FLAT:??_C@_06ICGJLFIM@string?$AA@ ; `SHA224_new'::`2'::kwlist
	DQ	0000000000000000H
	ORG $+8
SHA_functions DQ FLAT:??_C@_06OHILPNJ@sha256?$AA@
	DQ	FLAT:SHA256_new
	DD	03H
	ORG $+4
	DQ	FLAT:SHA256_new__doc__
	DQ	FLAT:??_C@_06DJABMLNO@sha224?$AA@
	DQ	FLAT:SHA224_new
	DD	03H
	ORG $+4
	DQ	FLAT:SHA224_new__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_sha256module DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07HKDAFOKE@_sha256?$AA@
	DQ	0000000000000000H
	DQ	ffffffffffffffffH
	DQ	FLAT:SHA_functions
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\sha256module.c
_TEXT	ENDS
;	COMDAT longReverse
_TEXT	SEGMENT
buffer$ = 8
byteCount$ = 16
Endianness$ = 24
longReverse PROC					; COMDAT

; 62   : {

  00000	4c 8b c9	 mov	 r9, rcx

; 63   :     SHA_INT32 value;
; 64   : 
; 65   :     if ( Endianness == PCT_BIG_ENDIAN )

  00003	45 85 c0	 test	 r8d, r8d
  00006	74 42		 je	 SHORT $LN7@longRevers

; 66   :         return;
; 67   : 
; 68   :     byteCount /= sizeof(*buffer);

  00008	4c 63 c2	 movsxd	 r8, edx
  0000b	49 c1 e8 02	 shr	 r8, 2

; 69   :     while (byteCount--) {

  0000f	45 85 c0	 test	 r8d, r8d
  00012	74 36		 je	 SHORT $LN7@longRevers
  00014	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL2@longRevers:

; 70   :         value = *buffer;

  00020	41 8b 09	 mov	 ecx, DWORD PTR [r9]

; 71   :         value = ( ( value & 0xFF00FF00L ) >> 8  ) | \
; 72   :                 ( ( value & 0x00FF00FFL ) << 8 );
; 73   :         *buffer++ = ( value << 16 ) | ( value >> 16 );

  00023	49 83 c1 04	 add	 r9, 4
  00027	8b d1		 mov	 edx, ecx
  00029	8b c1		 mov	 eax, ecx
  0002b	c1 e1 08	 shl	 ecx, 8
  0002e	c1 ea 08	 shr	 edx, 8
  00031	c1 e0 08	 shl	 eax, 8
  00034	33 d0		 xor	 edx, eax
  00036	81 e2 ff 00 ff
	00		 and	 edx, 16711935		; 00ff00ffH
  0003c	33 d1		 xor	 edx, ecx
  0003e	c1 c2 10	 rol	 edx, 16
  00041	41 ff c8	 dec	 r8d
  00044	41 89 51 fc	 mov	 DWORD PTR [r9-4], edx
  00048	75 d6		 jne	 SHORT $LL2@longRevers
$LN7@longRevers:

; 74   :     }
; 75   : }

  0004a	f3 c3		 fatret	 0
longReverse ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT SHAcopy
_TEXT	SEGMENT
src$ = 8
dest$ = 16
SHAcopy	PROC						; COMDAT

; 79   :     dest->Endianness = src->Endianness;

  00000	8b 81 c8 00 00
	00		 mov	 eax, DWORD PTR [rcx+200]
  00006	89 82 c8 00 00
	00		 mov	 DWORD PTR [rdx+200], eax

; 80   :     dest->local = src->local;

  0000c	8b 81 cc 00 00
	00		 mov	 eax, DWORD PTR [rcx+204]
  00012	89 82 cc 00 00
	00		 mov	 DWORD PTR [rdx+204], eax

; 81   :     dest->digestsize = src->digestsize;

  00018	8b 81 d0 00 00
	00		 mov	 eax, DWORD PTR [rcx+208]
  0001e	89 82 d0 00 00
	00		 mov	 DWORD PTR [rdx+208], eax

; 82   :     dest->count_lo = src->count_lo;

  00024	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [rcx+128]
  0002a	89 82 80 00 00
	00		 mov	 DWORD PTR [rdx+128], eax

; 83   :     dest->count_hi = src->count_hi;

  00030	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [rcx+132]
  00036	89 82 84 00 00
	00		 mov	 DWORD PTR [rdx+132], eax

; 84   :     memcpy(dest->digest, src->digest, sizeof(src->digest));

  0003c	8b 41 60	 mov	 eax, DWORD PTR [rcx+96]
  0003f	89 42 60	 mov	 DWORD PTR [rdx+96], eax
  00042	8b 41 64	 mov	 eax, DWORD PTR [rcx+100]
  00045	89 42 64	 mov	 DWORD PTR [rdx+100], eax
  00048	8b 41 68	 mov	 eax, DWORD PTR [rcx+104]
  0004b	89 42 68	 mov	 DWORD PTR [rdx+104], eax
  0004e	8b 41 6c	 mov	 eax, DWORD PTR [rcx+108]
  00051	89 42 6c	 mov	 DWORD PTR [rdx+108], eax
  00054	8b 41 70	 mov	 eax, DWORD PTR [rcx+112]
  00057	89 42 70	 mov	 DWORD PTR [rdx+112], eax
  0005a	8b 41 74	 mov	 eax, DWORD PTR [rcx+116]
  0005d	89 42 74	 mov	 DWORD PTR [rdx+116], eax
  00060	8b 41 78	 mov	 eax, DWORD PTR [rcx+120]
  00063	89 42 78	 mov	 DWORD PTR [rdx+120], eax
  00066	8b 41 7c	 mov	 eax, DWORD PTR [rcx+124]
  00069	89 42 7c	 mov	 DWORD PTR [rdx+124], eax

; 85   :     memcpy(dest->data, src->data, sizeof(src->data));

  0006c	48 8b 81 88 00
	00 00		 mov	 rax, QWORD PTR [rcx+136]
  00073	48 89 82 88 00
	00 00		 mov	 QWORD PTR [rdx+136], rax
  0007a	48 8b 81 90 00
	00 00		 mov	 rax, QWORD PTR [rcx+144]
  00081	48 89 82 90 00
	00 00		 mov	 QWORD PTR [rdx+144], rax
  00088	48 8b 81 98 00
	00 00		 mov	 rax, QWORD PTR [rcx+152]
  0008f	48 89 82 98 00
	00 00		 mov	 QWORD PTR [rdx+152], rax
  00096	48 8b 81 a0 00
	00 00		 mov	 rax, QWORD PTR [rcx+160]
  0009d	48 89 82 a0 00
	00 00		 mov	 QWORD PTR [rdx+160], rax
  000a4	48 8b 81 a8 00
	00 00		 mov	 rax, QWORD PTR [rcx+168]
  000ab	48 89 82 a8 00
	00 00		 mov	 QWORD PTR [rdx+168], rax
  000b2	48 8b 81 b0 00
	00 00		 mov	 rax, QWORD PTR [rcx+176]
  000b9	48 89 82 b0 00
	00 00		 mov	 QWORD PTR [rdx+176], rax
  000c0	48 8b 81 b8 00
	00 00		 mov	 rax, QWORD PTR [rcx+184]
  000c7	48 89 82 b8 00
	00 00		 mov	 QWORD PTR [rdx+184], rax
  000ce	48 8b 81 c0 00
	00 00		 mov	 rax, QWORD PTR [rcx+192]
  000d5	48 89 82 c0 00
	00 00		 mov	 QWORD PTR [rdx+192], rax

; 86   : }

  000dc	c3		 ret	 0
SHAcopy	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sha_transform DD imagerel sha_transform
	DD	imagerel sha_transform+6376
	DD	imagerel $unwind$sha_transform
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sha_transform DD 0b2101H
	DD	02e3421H
	DD	0240121H
	DD	0e013f015H
	DD	0c00fd011H
	DD	0600c700dH
	DD	0500bH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT sha_transform
_TEXT	SEGMENT
W$ = 32
sha_info$ = 352
S$53$ = 360
sha_transform PROC					; COMDAT

; 129  : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	41 54		 push	 r12
  0000f	41 55		 push	 r13
  00011	41 56		 push	 r14
  00013	41 57		 push	 r15
  00015	48 8d 6c 24 e0	 lea	 rbp, QWORD PTR [rsp-32]
  0001a	48 81 ec 20 01
	00 00		 sub	 rsp, 288		; 00000120H

; 130  :     int i;
; 131  :         SHA_INT32 S[8], W[64], t0, t1;
; 132  : 
; 133  :     memcpy(W, sha_info->data, sizeof(sha_info->data));

  00021	0f 10 81 88 00
	00 00		 movups	 xmm0, XMMWORD PTR [rcx+136]
  00028	0f 10 89 98 00
	00 00		 movups	 xmm1, XMMWORD PTR [rcx+152]

; 134  :     longReverse(W, (int)sizeof(sha_info->data), sha_info->Endianness);

  0002f	44 8b 81 c8 00
	00 00		 mov	 r8d, DWORD PTR [rcx+200]
  00036	4c 8b e1	 mov	 r12, rcx
  00039	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0003e	0f 29 44 24 20	 movaps	 XMMWORD PTR W$[rsp], xmm0
  00043	0f 29 4c 24 30	 movaps	 XMMWORD PTR W$[rsp+16], xmm1
  00048	0f 10 81 a8 00
	00 00		 movups	 xmm0, XMMWORD PTR [rcx+168]
  0004f	0f 10 89 b8 00
	00 00		 movups	 xmm1, XMMWORD PTR [rcx+184]
  00056	48 8d 4c 24 20	 lea	 rcx, QWORD PTR W$[rsp]
  0005b	0f 29 44 24 40	 movaps	 XMMWORD PTR W$[rsp+32], xmm0
  00060	0f 29 4c 24 50	 movaps	 XMMWORD PTR W$[rsp+48], xmm1
  00065	e8 00 00 00 00	 call	 longReverse
  0006a	48 8d 5c 24 20	 lea	 rbx, QWORD PTR W$[rsp]
  0006f	bf 0c 00 00 00	 mov	 edi, 12
  00074	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL9@sha_transf:

; 135  : 
; 136  :     for (i = 16; i < 64; ++i) {
; 137  :                 W[i] = Gamma1(W[i - 2]) + W[i - 7] + Gamma0(W[i - 15]) + W[i - 16];

  00080	44 8b 4b 04	 mov	 r9d, DWORD PTR [rbx+4]
  00084	44 8b 43 08	 mov	 r8d, DWORD PTR [rbx+8]
  00088	8b 53 38	 mov	 edx, DWORD PTR [rbx+56]
  0008b	8b ca		 mov	 ecx, edx
  0008d	45 8b d9	 mov	 r11d, r9d
  00090	41 8b c1	 mov	 eax, r9d
  00093	41 c1 c3 0e	 rol	 r11d, 14
  00097	c1 c8 07	 ror	 eax, 7
  0009a	45 8b d0	 mov	 r10d, r8d
  0009d	44 33 d8	 xor	 r11d, eax
  000a0	41 8b c1	 mov	 eax, r9d
  000a3	c1 e8 03	 shr	 eax, 3
  000a6	44 33 d8	 xor	 r11d, eax
  000a9	c1 c1 0f	 rol	 ecx, 15
  000ac	8b c2		 mov	 eax, edx
  000ae	c1 ea 0a	 shr	 edx, 10
  000b1	c1 c0 0d	 rol	 eax, 13
  000b4	33 c8		 xor	 ecx, eax
  000b6	41 8b c0	 mov	 eax, r8d
  000b9	33 ca		 xor	 ecx, edx
  000bb	8b 53 3c	 mov	 edx, DWORD PTR [rbx+60]
  000be	44 03 d9	 add	 r11d, ecx
  000c1	8b ca		 mov	 ecx, edx
  000c3	44 03 5b 24	 add	 r11d, DWORD PTR [rbx+36]
  000c7	44 03 1b	 add	 r11d, DWORD PTR [rbx]
  000ca	41 c1 c2 0e	 rol	 r10d, 14
  000ce	c1 c8 07	 ror	 eax, 7
  000d1	44 33 d0	 xor	 r10d, eax
  000d4	41 8b c0	 mov	 eax, r8d
  000d7	44 89 5b 40	 mov	 DWORD PTR [rbx+64], r11d
  000db	c1 e8 03	 shr	 eax, 3
  000de	44 33 d0	 xor	 r10d, eax
  000e1	c1 c1 0f	 rol	 ecx, 15
  000e4	8b c2		 mov	 eax, edx
  000e6	c1 ea 0a	 shr	 edx, 10
  000e9	c1 c0 0d	 rol	 eax, 13
  000ec	33 c8		 xor	 ecx, eax
  000ee	33 ca		 xor	 ecx, edx
  000f0	44 03 d1	 add	 r10d, ecx
  000f3	41 8b cb	 mov	 ecx, r11d
  000f6	44 03 53 28	 add	 r10d, DWORD PTR [rbx+40]
  000fa	45 03 d1	 add	 r10d, r9d
  000fd	44 8b 4b 0c	 mov	 r9d, DWORD PTR [rbx+12]
  00101	41 8b d1	 mov	 edx, r9d
  00104	41 8b c1	 mov	 eax, r9d
  00107	44 89 53 44	 mov	 DWORD PTR [rbx+68], r10d
  0010b	c1 c2 0e	 rol	 edx, 14
  0010e	c1 c8 07	 ror	 eax, 7
  00111	33 d0		 xor	 edx, eax
  00113	41 8b c1	 mov	 eax, r9d
  00116	c1 e8 03	 shr	 eax, 3
  00119	33 d0		 xor	 edx, eax
  0011b	c1 c1 0f	 rol	 ecx, 15
  0011e	41 8b c3	 mov	 eax, r11d
  00121	c1 c0 0d	 rol	 eax, 13
  00124	41 c1 eb 0a	 shr	 r11d, 10
  00128	33 c8		 xor	 ecx, eax
  0012a	41 33 cb	 xor	 ecx, r11d
  0012d	03 d1		 add	 edx, ecx
  0012f	8b 4b 10	 mov	 ecx, DWORD PTR [rbx+16]
  00132	03 53 2c	 add	 edx, DWORD PTR [rbx+44]
  00135	8b c1		 mov	 eax, ecx
  00137	41 03 d0	 add	 edx, r8d
  0013a	89 53 48	 mov	 DWORD PTR [rbx+72], edx
  0013d	8b d1		 mov	 edx, ecx
  0013f	c1 e9 03	 shr	 ecx, 3
  00142	c1 c2 0e	 rol	 edx, 14
  00145	c1 c8 07	 ror	 eax, 7
  00148	33 d0		 xor	 edx, eax
  0014a	41 8b c2	 mov	 eax, r10d
  0014d	33 d1		 xor	 edx, ecx
  0014f	41 8b ca	 mov	 ecx, r10d
  00152	41 c1 ea 0a	 shr	 r10d, 10
  00156	c1 c1 0f	 rol	 ecx, 15
  00159	c1 c0 0d	 rol	 eax, 13
  0015c	33 c8		 xor	 ecx, eax
  0015e	41 33 ca	 xor	 ecx, r10d
  00161	03 d1		 add	 edx, ecx
  00163	03 53 30	 add	 edx, DWORD PTR [rbx+48]
  00166	41 03 d1	 add	 edx, r9d
  00169	89 53 4c	 mov	 DWORD PTR [rbx+76], edx
  0016c	48 83 c3 10	 add	 rbx, 16
  00170	48 ff cf	 dec	 rdi
  00173	0f 85 07 ff ff
	ff		 jne	 $LL9@sha_transf

; 138  :     }
; 139  :     for (i = 0; i < 8; ++i) {
; 140  :         S[i] = sha_info->digest[i];

  00179	45 8b 6c 24 60	 mov	 r13d, DWORD PTR [r12+96]
  0017e	45 8b 5c 24 70	 mov	 r11d, DWORD PTR [r12+112]
  00183	45 8b 4c 24 78	 mov	 r9d, DWORD PTR [r12+120]
  00188	45 8b 54 24 74	 mov	 r10d, DWORD PTR [r12+116]
  0018d	41 8b 74 24 64	 mov	 esi, DWORD PTR [r12+100]
  00192	45 8b 44 24 7c	 mov	 r8d, DWORD PTR [r12+124]
  00197	41 8b 5c 24 6c	 mov	 ebx, DWORD PTR [r12+108]
  0019c	41 8b 7c 24 68	 mov	 edi, DWORD PTR [r12+104]

; 141  :     }
; 142  : 
; 143  :     /* Compress */
; 144  : #define RND(a,b,c,d,e,f,g,h,i,ki)                    \
; 145  :      t0 = h + Sigma1(e) + Ch(e, f, g) + ki + W[i];   \
; 146  :      t1 = Sigma0(a) + Maj(a, b, c);                  \
; 147  :      d += t0;                                        \
; 148  :      h  = t0 + t1;
; 149  : 
; 150  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],0,0x428a2f98);

  001a1	41 8b cb	 mov	 ecx, r11d
  001a4	c1 c9 0b	 ror	 ecx, 11
  001a7	41 8b c3	 mov	 eax, r11d
  001aa	41 8b d2	 mov	 edx, r10d
  001ad	c1 c0 07	 rol	 eax, 7
  001b0	41 33 d1	 xor	 edx, r9d
  001b3	44 8b e6	 mov	 r12d, esi
  001b6	33 c8		 xor	 ecx, eax
  001b8	41 23 d3	 and	 edx, r11d
  001bb	45 0b e5	 or	 r12d, r13d
  001be	41 33 d1	 xor	 edx, r9d
  001c1	44 23 e7	 and	 r12d, edi
  001c4	41 8b c3	 mov	 eax, r11d
  001c7	c1 c8 06	 ror	 eax, 6
  001ca	33 c8		 xor	 ecx, eax
  001cc	41 8b c5	 mov	 eax, r13d
  001cf	03 4c 24 20	 add	 ecx, DWORD PTR W$[rsp]
  001d3	03 d1		 add	 edx, ecx
  001d5	41 8b cd	 mov	 ecx, r13d
  001d8	46 8d 84 02 98
	2f 8a 42	 lea	 r8d, DWORD PTR [rdx+r8+1116352408]

; 151  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],1,0x71374491);

  001e0	41 8b d2	 mov	 edx, r10d
  001e3	41 03 d8	 add	 ebx, r8d
  001e6	c1 c9 0d	 ror	 ecx, 13
  001e9	c1 c0 0a	 rol	 eax, 10
  001ec	33 c8		 xor	 ecx, eax
  001ee	41 33 d3	 xor	 edx, r11d
  001f1	41 8b c5	 mov	 eax, r13d
  001f4	c1 c8 02	 ror	 eax, 2
  001f7	23 d3		 and	 edx, ebx
  001f9	33 c8		 xor	 ecx, eax
  001fb	41 33 d2	 xor	 edx, r10d
  001fe	8b c6		 mov	 eax, esi
  00200	41 23 c5	 and	 eax, r13d
  00203	44 0b e0	 or	 r12d, eax
  00206	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  0020a	8b cb		 mov	 ecx, ebx
  0020c	44 03 e0	 add	 r12d, eax
  0020f	c1 c9 0b	 ror	 ecx, 11
  00212	8b c3		 mov	 eax, ebx
  00214	c1 c0 07	 rol	 eax, 7
  00217	33 c8		 xor	 ecx, eax
  00219	8b c3		 mov	 eax, ebx
  0021b	c1 c8 06	 ror	 eax, 6
  0021e	33 c8		 xor	 ecx, eax
  00220	41 8b c4	 mov	 eax, r12d
  00223	03 4c 24 24	 add	 ecx, DWORD PTR W$[rsp+4]
  00227	03 d1		 add	 edx, ecx
  00229	41 8b cc	 mov	 ecx, r12d
  0022c	46 8d 84 0a 91
	44 37 71	 lea	 r8d, DWORD PTR [rdx+r9+1899447441]
  00234	45 8b cd	 mov	 r9d, r13d

; 152  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],2,0xb5c0fbcf);

  00237	8b d3		 mov	 edx, ebx
  00239	41 03 f8	 add	 edi, r8d
  0023c	c1 c9 0d	 ror	 ecx, 13
  0023f	c1 c0 0a	 rol	 eax, 10
  00242	33 c8		 xor	 ecx, eax
  00244	45 0b cc	 or	 r9d, r12d
  00247	41 8b c4	 mov	 eax, r12d
  0024a	c1 c8 02	 ror	 eax, 2
  0024d	44 23 ce	 and	 r9d, esi
  00250	33 c8		 xor	 ecx, eax
  00252	41 8b c5	 mov	 eax, r13d
  00255	41 23 c4	 and	 eax, r12d
  00258	44 0b c8	 or	 r9d, eax
  0025b	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  0025f	8b cf		 mov	 ecx, edi
  00261	44 03 c8	 add	 r9d, eax
  00264	c1 c9 0b	 ror	 ecx, 11
  00267	8b c7		 mov	 eax, edi
  00269	c1 c0 07	 rol	 eax, 7
  0026c	33 c8		 xor	 ecx, eax
  0026e	8b c7		 mov	 eax, edi
  00270	c1 c8 06	 ror	 eax, 6
  00273	33 c8		 xor	 ecx, eax
  00275	03 4c 24 28	 add	 ecx, DWORD PTR W$[rsp+8]
  00279	41 33 d3	 xor	 edx, r11d
  0027c	41 8b c1	 mov	 eax, r9d
  0027f	23 d7		 and	 edx, edi
  00281	41 33 d3	 xor	 edx, r11d
  00284	03 d1		 add	 edx, ecx
  00286	41 8b c9	 mov	 ecx, r9d
  00289	46 8d 84 12 cf
	fb c0 b5	 lea	 r8d, DWORD PTR [rdx+r10-1245643825]

; 153  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],3,0xe9b5dba5);

  00291	8b d3		 mov	 edx, ebx
  00293	45 8b d1	 mov	 r10d, r9d
  00296	41 03 f0	 add	 esi, r8d
  00299	c1 c9 0d	 ror	 ecx, 13
  0029c	c1 c0 0a	 rol	 eax, 10
  0029f	33 c8		 xor	 ecx, eax
  002a1	33 d7		 xor	 edx, edi
  002a3	45 0b d4	 or	 r10d, r12d
  002a6	23 d6		 and	 edx, esi
  002a8	45 23 d5	 and	 r10d, r13d
  002ab	41 8b c1	 mov	 eax, r9d
  002ae	c1 c8 02	 ror	 eax, 2
  002b1	33 d3		 xor	 edx, ebx
  002b3	33 c8		 xor	 ecx, eax
  002b5	41 8b c1	 mov	 eax, r9d
  002b8	41 23 c4	 and	 eax, r12d
  002bb	44 0b d0	 or	 r10d, eax
  002be	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  002c2	8b ce		 mov	 ecx, esi
  002c4	44 03 d0	 add	 r10d, eax
  002c7	c1 c9 0b	 ror	 ecx, 11
  002ca	8b c6		 mov	 eax, esi
  002cc	c1 c0 07	 rol	 eax, 7
  002cf	33 c8		 xor	 ecx, eax
  002d1	8b c6		 mov	 eax, esi
  002d3	c1 c8 06	 ror	 eax, 6
  002d6	33 c8		 xor	 ecx, eax
  002d8	41 8b c2	 mov	 eax, r10d
  002db	03 4c 24 2c	 add	 ecx, DWORD PTR W$[rsp+12]
  002df	03 d1		 add	 edx, ecx
  002e1	41 8b ca	 mov	 ecx, r10d
  002e4	46 8d 84 1a a5
	db b5 e9	 lea	 r8d, DWORD PTR [rdx+r11-373957723]
  002ec	45 8b da	 mov	 r11d, r10d

; 154  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],4,0x3956c25b);

  002ef	8b d7		 mov	 edx, edi
  002f1	45 03 e8	 add	 r13d, r8d
  002f4	c1 c9 0d	 ror	 ecx, 13
  002f7	c1 c0 0a	 rol	 eax, 10
  002fa	33 c8		 xor	 ecx, eax
  002fc	45 0b d9	 or	 r11d, r9d
  002ff	33 d6		 xor	 edx, esi
  00301	45 23 dc	 and	 r11d, r12d
  00304	41 23 d5	 and	 edx, r13d
  00307	41 8b c2	 mov	 eax, r10d
  0030a	c1 c8 02	 ror	 eax, 2
  0030d	33 d7		 xor	 edx, edi
  0030f	33 c8		 xor	 ecx, eax
  00311	41 8b c2	 mov	 eax, r10d
  00314	41 23 c1	 and	 eax, r9d
  00317	44 0b d8	 or	 r11d, eax
  0031a	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  0031e	41 8b cd	 mov	 ecx, r13d
  00321	44 03 d8	 add	 r11d, eax
  00324	c1 c9 0b	 ror	 ecx, 11
  00327	41 8b c5	 mov	 eax, r13d
  0032a	c1 c0 07	 rol	 eax, 7
  0032d	33 c8		 xor	 ecx, eax
  0032f	41 8b c5	 mov	 eax, r13d
  00332	c1 c8 06	 ror	 eax, 6
  00335	33 c8		 xor	 ecx, eax
  00337	41 8b c3	 mov	 eax, r11d
  0033a	03 4c 24 30	 add	 ecx, DWORD PTR W$[rsp+16]
  0033e	03 d1		 add	 edx, ecx
  00340	41 8b cb	 mov	 ecx, r11d
  00343	44 8d 84 1a 5b
	c2 56 39	 lea	 r8d, DWORD PTR [rdx+rbx+961987163]
  0034b	41 8b da	 mov	 ebx, r10d
  0034e	45 03 e0	 add	 r12d, r8d
  00351	c1 c9 0d	 ror	 ecx, 13
  00354	c1 c0 0a	 rol	 eax, 10
  00357	33 c8		 xor	 ecx, eax
  00359	41 8b c3	 mov	 eax, r11d
  0035c	c1 c8 02	 ror	 eax, 2
  0035f	33 c8		 xor	 ecx, eax
  00361	41 0b db	 or	 ebx, r11d
  00364	41 23 d9	 and	 ebx, r9d

; 155  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],5,0x59f111f1);

  00367	8b d6		 mov	 edx, esi
  00369	41 8b c2	 mov	 eax, r10d
  0036c	41 23 c3	 and	 eax, r11d
  0036f	41 33 d5	 xor	 edx, r13d
  00372	0b d8		 or	 ebx, eax
  00374	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00378	41 23 d4	 and	 edx, r12d
  0037b	03 d8		 add	 ebx, eax
  0037d	33 d6		 xor	 edx, esi
  0037f	41 8b cc	 mov	 ecx, r12d
  00382	c1 c9 0b	 ror	 ecx, 11
  00385	41 8b c4	 mov	 eax, r12d
  00388	c1 c0 07	 rol	 eax, 7
  0038b	33 c8		 xor	 ecx, eax
  0038d	41 8b c4	 mov	 eax, r12d
  00390	c1 c8 06	 ror	 eax, 6
  00393	33 c8		 xor	 ecx, eax
  00395	8b c3		 mov	 eax, ebx
  00397	03 4c 24 34	 add	 ecx, DWORD PTR W$[rsp+20]
  0039b	03 d1		 add	 edx, ecx
  0039d	8b cb		 mov	 ecx, ebx
  0039f	44 8d 84 3a f1
	11 f1 59	 lea	 r8d, DWORD PTR [rdx+rdi+1508970993]
  003a7	8b fb		 mov	 edi, ebx

; 156  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],6,0x923f82a4);

  003a9	41 8b d5	 mov	 edx, r13d
  003ac	45 03 c8	 add	 r9d, r8d
  003af	c1 c9 0d	 ror	 ecx, 13
  003b2	c1 c0 0a	 rol	 eax, 10
  003b5	33 c8		 xor	 ecx, eax
  003b7	41 0b fb	 or	 edi, r11d
  003ba	41 33 d4	 xor	 edx, r12d
  003bd	41 23 fa	 and	 edi, r10d
  003c0	41 23 d1	 and	 edx, r9d
  003c3	8b c3		 mov	 eax, ebx
  003c5	c1 c8 02	 ror	 eax, 2
  003c8	41 33 d5	 xor	 edx, r13d
  003cb	33 c8		 xor	 ecx, eax
  003cd	8b c3		 mov	 eax, ebx
  003cf	41 23 c3	 and	 eax, r11d
  003d2	0b f8		 or	 edi, eax
  003d4	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  003d8	41 8b c9	 mov	 ecx, r9d
  003db	03 f8		 add	 edi, eax
  003dd	c1 c9 0b	 ror	 ecx, 11
  003e0	41 8b c1	 mov	 eax, r9d
  003e3	c1 c0 07	 rol	 eax, 7
  003e6	33 c8		 xor	 ecx, eax
  003e8	41 8b c1	 mov	 eax, r9d
  003eb	c1 c8 06	 ror	 eax, 6
  003ee	33 c8		 xor	 ecx, eax
  003f0	8b c7		 mov	 eax, edi
  003f2	03 4c 24 38	 add	 ecx, DWORD PTR W$[rsp+24]
  003f6	03 d1		 add	 edx, ecx
  003f8	8b cf		 mov	 ecx, edi
  003fa	44 8d 84 32 a4
	82 3f 92	 lea	 r8d, DWORD PTR [rdx+rsi-1841331548]
  00402	8b f3		 mov	 esi, ebx

; 157  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],7,0xab1c5ed5);

  00404	41 8b d1	 mov	 edx, r9d
  00407	45 03 d0	 add	 r10d, r8d
  0040a	c1 c9 0d	 ror	 ecx, 13
  0040d	c1 c0 0a	 rol	 eax, 10
  00410	33 c8		 xor	 ecx, eax
  00412	0b f7		 or	 esi, edi
  00414	8b c7		 mov	 eax, edi
  00416	c1 c8 02	 ror	 eax, 2
  00419	41 23 f3	 and	 esi, r11d
  0041c	41 33 d4	 xor	 edx, r12d
  0041f	33 c8		 xor	 ecx, eax
  00421	8b c3		 mov	 eax, ebx
  00423	23 c7		 and	 eax, edi
  00425	0b f0		 or	 esi, eax
  00427	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  0042b	41 8b ca	 mov	 ecx, r10d
  0042e	03 f0		 add	 esi, eax
  00430	c1 c9 0b	 ror	 ecx, 11
  00433	41 8b c2	 mov	 eax, r10d
  00436	c1 c0 07	 rol	 eax, 7
  00439	33 c8		 xor	 ecx, eax
  0043b	41 8b c2	 mov	 eax, r10d
  0043e	c1 c8 06	 ror	 eax, 6
  00441	33 c8		 xor	 ecx, eax
  00443	41 23 d2	 and	 edx, r10d
  00446	03 4c 24 3c	 add	 ecx, DWORD PTR W$[rsp+28]
  0044a	41 33 d4	 xor	 edx, r12d
  0044d	8b c6		 mov	 eax, esi
  0044f	03 d1		 add	 edx, ecx
  00451	8b ce		 mov	 ecx, esi
  00453	46 8d 84 2a d5
	5e 1c ab	 lea	 r8d, DWORD PTR [rdx+r13-1424204075]
  0045b	44 8b ef	 mov	 r13d, edi

; 158  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],8,0xd807aa98);

  0045e	41 8b d2	 mov	 edx, r10d
  00461	45 03 d8	 add	 r11d, r8d
  00464	c1 c9 0d	 ror	 ecx, 13
  00467	c1 c0 0a	 rol	 eax, 10
  0046a	33 c8		 xor	 ecx, eax
  0046c	41 33 d1	 xor	 edx, r9d
  0046f	44 0b ee	 or	 r13d, esi
  00472	41 23 d3	 and	 edx, r11d
  00475	44 23 eb	 and	 r13d, ebx
  00478	8b c6		 mov	 eax, esi
  0047a	c1 c8 02	 ror	 eax, 2
  0047d	41 33 d1	 xor	 edx, r9d
  00480	33 c8		 xor	 ecx, eax
  00482	8b c7		 mov	 eax, edi
  00484	23 c6		 and	 eax, esi
  00486	44 0b e8	 or	 r13d, eax
  00489	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  0048d	41 8b cb	 mov	 ecx, r11d
  00490	44 03 e8	 add	 r13d, eax
  00493	c1 c9 0b	 ror	 ecx, 11
  00496	41 8b c3	 mov	 eax, r11d
  00499	c1 c0 07	 rol	 eax, 7
  0049c	33 c8		 xor	 ecx, eax
  0049e	41 8b c3	 mov	 eax, r11d
  004a1	c1 c8 06	 ror	 eax, 6
  004a4	33 c8		 xor	 ecx, eax
  004a6	41 8b c5	 mov	 eax, r13d
  004a9	03 4c 24 40	 add	 ecx, DWORD PTR W$[rsp+32]
  004ad	03 d1		 add	 edx, ecx
  004af	41 8b cd	 mov	 ecx, r13d
  004b2	46 8d 84 22 98
	aa 07 d8	 lea	 r8d, DWORD PTR [rdx+r12-670586216]
  004ba	44 8b e6	 mov	 r12d, esi

; 159  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],9,0x12835b01);

  004bd	41 8b d2	 mov	 edx, r10d
  004c0	41 03 d8	 add	 ebx, r8d
  004c3	c1 c9 0d	 ror	 ecx, 13
  004c6	c1 c0 0a	 rol	 eax, 10
  004c9	33 c8		 xor	 ecx, eax
  004cb	45 0b e5	 or	 r12d, r13d
  004ce	41 33 d3	 xor	 edx, r11d
  004d1	44 23 e7	 and	 r12d, edi
  004d4	23 d3		 and	 edx, ebx
  004d6	41 8b c5	 mov	 eax, r13d
  004d9	c1 c8 02	 ror	 eax, 2
  004dc	41 33 d2	 xor	 edx, r10d
  004df	33 c8		 xor	 ecx, eax
  004e1	8b c6		 mov	 eax, esi
  004e3	41 23 c5	 and	 eax, r13d
  004e6	44 0b e0	 or	 r12d, eax
  004e9	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  004ed	8b cb		 mov	 ecx, ebx
  004ef	44 03 e0	 add	 r12d, eax
  004f2	c1 c9 0b	 ror	 ecx, 11
  004f5	8b c3		 mov	 eax, ebx
  004f7	c1 c0 07	 rol	 eax, 7
  004fa	33 c8		 xor	 ecx, eax
  004fc	8b c3		 mov	 eax, ebx
  004fe	c1 c8 06	 ror	 eax, 6
  00501	33 c8		 xor	 ecx, eax
  00503	41 8b c4	 mov	 eax, r12d
  00506	03 4c 24 44	 add	 ecx, DWORD PTR W$[rsp+36]
  0050a	03 d1		 add	 edx, ecx
  0050c	41 8b cc	 mov	 ecx, r12d
  0050f	46 8d 84 0a 01
	5b 83 12	 lea	 r8d, DWORD PTR [rdx+r9+310598401]
  00517	45 8b cd	 mov	 r9d, r13d
  0051a	41 03 f8	 add	 edi, r8d
  0051d	c1 c9 0d	 ror	 ecx, 13
  00520	c1 c0 0a	 rol	 eax, 10
  00523	33 c8		 xor	 ecx, eax
  00525	41 8b c4	 mov	 eax, r12d
  00528	45 0b cc	 or	 r9d, r12d
  0052b	c1 c8 02	 ror	 eax, 2
  0052e	33 c8		 xor	 ecx, eax
  00530	44 23 ce	 and	 r9d, esi
  00533	41 8b c5	 mov	 eax, r13d
  00536	41 23 c4	 and	 eax, r12d

; 160  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],10,0x243185be);

  00539	8b d3		 mov	 edx, ebx
  0053b	44 0b c8	 or	 r9d, eax
  0053e	41 33 d3	 xor	 edx, r11d
  00541	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00545	44 03 c8	 add	 r9d, eax
  00548	23 d7		 and	 edx, edi
  0054a	8b cf		 mov	 ecx, edi
  0054c	c1 c9 0b	 ror	 ecx, 11
  0054f	41 33 d3	 xor	 edx, r11d
  00552	8b c7		 mov	 eax, edi
  00554	c1 c0 07	 rol	 eax, 7
  00557	33 c8		 xor	 ecx, eax
  00559	8b c7		 mov	 eax, edi
  0055b	c1 c8 06	 ror	 eax, 6
  0055e	33 c8		 xor	 ecx, eax
  00560	41 8b c1	 mov	 eax, r9d
  00563	03 4c 24 48	 add	 ecx, DWORD PTR W$[rsp+40]
  00567	03 d1		 add	 edx, ecx
  00569	41 8b c9	 mov	 ecx, r9d
  0056c	46 8d 84 12 be
	85 31 24	 lea	 r8d, DWORD PTR [rdx+r10+607225278]
  00574	45 8b d1	 mov	 r10d, r9d

; 161  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],11,0x550c7dc3);

  00577	8b d3		 mov	 edx, ebx
  00579	41 03 f0	 add	 esi, r8d
  0057c	c1 c9 0d	 ror	 ecx, 13
  0057f	c1 c0 0a	 rol	 eax, 10
  00582	33 c8		 xor	 ecx, eax
  00584	33 d7		 xor	 edx, edi
  00586	45 0b d4	 or	 r10d, r12d
  00589	45 23 d5	 and	 r10d, r13d
  0058c	23 d6		 and	 edx, esi
  0058e	41 8b c1	 mov	 eax, r9d
  00591	c1 c8 02	 ror	 eax, 2
  00594	33 d3		 xor	 edx, ebx
  00596	33 c8		 xor	 ecx, eax
  00598	41 8b c1	 mov	 eax, r9d
  0059b	41 23 c4	 and	 eax, r12d
  0059e	44 0b d0	 or	 r10d, eax
  005a1	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  005a5	8b ce		 mov	 ecx, esi
  005a7	44 03 d0	 add	 r10d, eax
  005aa	c1 c9 0b	 ror	 ecx, 11
  005ad	8b c6		 mov	 eax, esi
  005af	c1 c0 07	 rol	 eax, 7
  005b2	33 c8		 xor	 ecx, eax
  005b4	8b c6		 mov	 eax, esi
  005b6	c1 c8 06	 ror	 eax, 6
  005b9	33 c8		 xor	 ecx, eax
  005bb	41 8b c2	 mov	 eax, r10d
  005be	03 4c 24 4c	 add	 ecx, DWORD PTR W$[rsp+44]
  005c2	03 d1		 add	 edx, ecx
  005c4	41 8b ca	 mov	 ecx, r10d
  005c7	46 8d 84 1a c3
	7d 0c 55	 lea	 r8d, DWORD PTR [rdx+r11+1426881987]
  005cf	45 8b da	 mov	 r11d, r10d

; 162  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],12,0x72be5d74);

  005d2	8b d7		 mov	 edx, edi
  005d4	45 03 e8	 add	 r13d, r8d
  005d7	c1 c9 0d	 ror	 ecx, 13
  005da	c1 c0 0a	 rol	 eax, 10
  005dd	33 c8		 xor	 ecx, eax
  005df	45 0b d9	 or	 r11d, r9d
  005e2	33 d6		 xor	 edx, esi
  005e4	45 23 dc	 and	 r11d, r12d
  005e7	41 8b c2	 mov	 eax, r10d
  005ea	41 23 d5	 and	 edx, r13d
  005ed	c1 c8 02	 ror	 eax, 2
  005f0	33 d7		 xor	 edx, edi
  005f2	33 c8		 xor	 ecx, eax
  005f4	41 8b c2	 mov	 eax, r10d
  005f7	41 23 c1	 and	 eax, r9d
  005fa	44 0b d8	 or	 r11d, eax
  005fd	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00601	41 8b cd	 mov	 ecx, r13d
  00604	44 03 d8	 add	 r11d, eax
  00607	c1 c9 0b	 ror	 ecx, 11
  0060a	41 8b c5	 mov	 eax, r13d
  0060d	c1 c0 07	 rol	 eax, 7
  00610	33 c8		 xor	 ecx, eax
  00612	41 8b c5	 mov	 eax, r13d
  00615	c1 c8 06	 ror	 eax, 6
  00618	33 c8		 xor	 ecx, eax
  0061a	03 4c 24 50	 add	 ecx, DWORD PTR W$[rsp+48]
  0061e	03 d1		 add	 edx, ecx
  00620	41 8b cb	 mov	 ecx, r11d
  00623	41 8b c3	 mov	 eax, r11d
  00626	44 8d 84 1a 74
	5d be 72	 lea	 r8d, DWORD PTR [rdx+rbx+1925078388]

; 163  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],13,0x80deb1fe);

  0062e	8b d6		 mov	 edx, esi
  00630	41 8b da	 mov	 ebx, r10d
  00633	45 03 e0	 add	 r12d, r8d
  00636	c1 c9 0d	 ror	 ecx, 13
  00639	c1 c0 0a	 rol	 eax, 10
  0063c	33 c8		 xor	 ecx, eax
  0063e	41 33 d5	 xor	 edx, r13d
  00641	41 0b db	 or	 ebx, r11d
  00644	41 23 d4	 and	 edx, r12d
  00647	41 23 d9	 and	 ebx, r9d
  0064a	41 8b c3	 mov	 eax, r11d
  0064d	c1 c8 02	 ror	 eax, 2
  00650	33 d6		 xor	 edx, esi
  00652	33 c8		 xor	 ecx, eax
  00654	41 8b c2	 mov	 eax, r10d
  00657	41 23 c3	 and	 eax, r11d
  0065a	0b d8		 or	 ebx, eax
  0065c	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00660	41 8b cc	 mov	 ecx, r12d
  00663	03 d8		 add	 ebx, eax
  00665	c1 c9 0b	 ror	 ecx, 11
  00668	41 8b c4	 mov	 eax, r12d
  0066b	c1 c0 07	 rol	 eax, 7
  0066e	33 c8		 xor	 ecx, eax
  00670	41 8b c4	 mov	 eax, r12d
  00673	c1 c8 06	 ror	 eax, 6
  00676	33 c8		 xor	 ecx, eax
  00678	8b c3		 mov	 eax, ebx
  0067a	03 4c 24 54	 add	 ecx, DWORD PTR W$[rsp+52]
  0067e	03 d1		 add	 edx, ecx
  00680	8b cb		 mov	 ecx, ebx
  00682	44 8d 84 3a fe
	b1 de 80	 lea	 r8d, DWORD PTR [rdx+rdi-2132889090]
  0068a	8b fb		 mov	 edi, ebx

; 164  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],14,0x9bdc06a7);

  0068c	41 8b d5	 mov	 edx, r13d
  0068f	45 03 c8	 add	 r9d, r8d
  00692	c1 c9 0d	 ror	 ecx, 13
  00695	c1 c0 0a	 rol	 eax, 10
  00698	33 c8		 xor	 ecx, eax
  0069a	41 0b fb	 or	 edi, r11d
  0069d	41 33 d4	 xor	 edx, r12d
  006a0	41 23 fa	 and	 edi, r10d
  006a3	41 23 d1	 and	 edx, r9d
  006a6	8b c3		 mov	 eax, ebx
  006a8	c1 c8 02	 ror	 eax, 2
  006ab	41 33 d5	 xor	 edx, r13d
  006ae	33 c8		 xor	 ecx, eax
  006b0	8b c3		 mov	 eax, ebx
  006b2	41 23 c3	 and	 eax, r11d
  006b5	0b f8		 or	 edi, eax
  006b7	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  006bb	41 8b c9	 mov	 ecx, r9d
  006be	03 f8		 add	 edi, eax
  006c0	c1 c9 0b	 ror	 ecx, 11
  006c3	41 8b c1	 mov	 eax, r9d
  006c6	c1 c0 07	 rol	 eax, 7
  006c9	33 c8		 xor	 ecx, eax
  006cb	41 8b c1	 mov	 eax, r9d
  006ce	c1 c8 06	 ror	 eax, 6
  006d1	33 c8		 xor	 ecx, eax
  006d3	8b c7		 mov	 eax, edi
  006d5	03 4c 24 58	 add	 ecx, DWORD PTR W$[rsp+56]
  006d9	03 d1		 add	 edx, ecx
  006db	8b cf		 mov	 ecx, edi
  006dd	44 8d 84 32 a7
	06 dc 9b	 lea	 r8d, DWORD PTR [rdx+rsi-1680079193]
  006e5	8b f3		 mov	 esi, ebx
  006e7	45 03 d0	 add	 r10d, r8d
  006ea	c1 c9 0d	 ror	 ecx, 13
  006ed	c1 c0 0a	 rol	 eax, 10
  006f0	33 c8		 xor	 ecx, eax
  006f2	0b f7		 or	 esi, edi
  006f4	8b c7		 mov	 eax, edi
  006f6	c1 c8 02	 ror	 eax, 2
  006f9	41 23 f3	 and	 esi, r11d
  006fc	33 c8		 xor	 ecx, eax
  006fe	8b c3		 mov	 eax, ebx
  00700	23 c7		 and	 eax, edi
  00702	0b f0		 or	 esi, eax
  00704	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]

; 165  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],15,0xc19bf174);

  00708	41 8b ca	 mov	 ecx, r10d
  0070b	41 8b d1	 mov	 edx, r9d
  0070e	03 f0		 add	 esi, eax
  00710	c1 c9 0b	 ror	 ecx, 11
  00713	41 33 d4	 xor	 edx, r12d
  00716	41 23 d2	 and	 edx, r10d
  00719	41 8b c2	 mov	 eax, r10d
  0071c	c1 c0 07	 rol	 eax, 7
  0071f	41 33 d4	 xor	 edx, r12d
  00722	33 c8		 xor	 ecx, eax
  00724	41 8b c2	 mov	 eax, r10d
  00727	c1 c8 06	 ror	 eax, 6
  0072a	33 c8		 xor	 ecx, eax
  0072c	8b c6		 mov	 eax, esi
  0072e	03 4c 24 5c	 add	 ecx, DWORD PTR W$[rsp+60]
  00732	03 d1		 add	 edx, ecx
  00734	8b ce		 mov	 ecx, esi
  00736	46 8d 84 2a 74
	f1 9b c1	 lea	 r8d, DWORD PTR [rdx+r13-1046744716]
  0073e	44 8b ef	 mov	 r13d, edi

; 166  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],16,0xe49b69c1);

  00741	41 8b d2	 mov	 edx, r10d
  00744	45 03 d8	 add	 r11d, r8d
  00747	c1 c9 0d	 ror	 ecx, 13
  0074a	c1 c0 0a	 rol	 eax, 10
  0074d	33 c8		 xor	 ecx, eax
  0074f	41 33 d1	 xor	 edx, r9d
  00752	44 0b ee	 or	 r13d, esi
  00755	44 23 eb	 and	 r13d, ebx
  00758	41 23 d3	 and	 edx, r11d
  0075b	8b c6		 mov	 eax, esi
  0075d	c1 c8 02	 ror	 eax, 2
  00760	41 33 d1	 xor	 edx, r9d
  00763	33 c8		 xor	 ecx, eax
  00765	8b c7		 mov	 eax, edi
  00767	23 c6		 and	 eax, esi
  00769	44 0b e8	 or	 r13d, eax
  0076c	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00770	41 8b cb	 mov	 ecx, r11d
  00773	44 03 e8	 add	 r13d, eax
  00776	c1 c9 0b	 ror	 ecx, 11
  00779	41 8b c3	 mov	 eax, r11d
  0077c	c1 c0 07	 rol	 eax, 7
  0077f	33 c8		 xor	 ecx, eax
  00781	41 8b c3	 mov	 eax, r11d
  00784	c1 c8 06	 ror	 eax, 6
  00787	33 c8		 xor	 ecx, eax
  00789	41 8b c5	 mov	 eax, r13d
  0078c	03 4c 24 60	 add	 ecx, DWORD PTR W$[rsp+64]
  00790	03 d1		 add	 edx, ecx
  00792	41 8b cd	 mov	 ecx, r13d
  00795	46 8d 84 22 c1
	69 9b e4	 lea	 r8d, DWORD PTR [rdx+r12-459576895]
  0079d	44 8b e6	 mov	 r12d, esi

; 167  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],17,0xefbe4786);

  007a0	41 8b d2	 mov	 edx, r10d
  007a3	41 03 d8	 add	 ebx, r8d
  007a6	c1 c9 0d	 ror	 ecx, 13
  007a9	c1 c0 0a	 rol	 eax, 10
  007ac	33 c8		 xor	 ecx, eax
  007ae	45 0b e5	 or	 r12d, r13d
  007b1	41 33 d3	 xor	 edx, r11d
  007b4	44 23 e7	 and	 r12d, edi
  007b7	41 8b c5	 mov	 eax, r13d
  007ba	23 d3		 and	 edx, ebx
  007bc	c1 c8 02	 ror	 eax, 2
  007bf	41 33 d2	 xor	 edx, r10d
  007c2	33 c8		 xor	 ecx, eax
  007c4	8b c6		 mov	 eax, esi
  007c6	41 23 c5	 and	 eax, r13d
  007c9	44 0b e0	 or	 r12d, eax
  007cc	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  007d0	8b cb		 mov	 ecx, ebx
  007d2	44 03 e0	 add	 r12d, eax
  007d5	c1 c9 0b	 ror	 ecx, 11
  007d8	8b c3		 mov	 eax, ebx
  007da	c1 c0 07	 rol	 eax, 7
  007dd	33 c8		 xor	 ecx, eax
  007df	8b c3		 mov	 eax, ebx
  007e1	c1 c8 06	 ror	 eax, 6
  007e4	33 c8		 xor	 ecx, eax
  007e6	03 4c 24 64	 add	 ecx, DWORD PTR W$[rsp+68]
  007ea	03 d1		 add	 edx, ecx
  007ec	46 8d 84 0a 86
	47 be ef	 lea	 r8d, DWORD PTR [rdx+r9-272742522]
  007f4	41 03 f8	 add	 edi, r8d
  007f7	45 8b cd	 mov	 r9d, r13d
  007fa	41 8b cc	 mov	 ecx, r12d
  007fd	c1 c9 0d	 ror	 ecx, 13
  00800	45 0b cc	 or	 r9d, r12d
  00803	41 8b c4	 mov	 eax, r12d
  00806	c1 c0 0a	 rol	 eax, 10
  00809	44 23 ce	 and	 r9d, esi

; 168  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],18,0x0fc19dc6);

  0080c	8b d3		 mov	 edx, ebx
  0080e	33 c8		 xor	 ecx, eax
  00810	41 33 d3	 xor	 edx, r11d
  00813	41 8b c4	 mov	 eax, r12d
  00816	c1 c8 02	 ror	 eax, 2
  00819	23 d7		 and	 edx, edi
  0081b	33 c8		 xor	 ecx, eax
  0081d	41 33 d3	 xor	 edx, r11d
  00820	41 8b c5	 mov	 eax, r13d
  00823	41 23 c4	 and	 eax, r12d
  00826	44 0b c8	 or	 r9d, eax
  00829	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  0082d	8b cf		 mov	 ecx, edi
  0082f	44 03 c8	 add	 r9d, eax
  00832	c1 c9 0b	 ror	 ecx, 11
  00835	8b c7		 mov	 eax, edi
  00837	c1 c0 07	 rol	 eax, 7
  0083a	33 c8		 xor	 ecx, eax
  0083c	8b c7		 mov	 eax, edi
  0083e	c1 c8 06	 ror	 eax, 6
  00841	33 c8		 xor	 ecx, eax
  00843	41 8b c1	 mov	 eax, r9d
  00846	03 4c 24 68	 add	 ecx, DWORD PTR W$[rsp+72]
  0084a	03 d1		 add	 edx, ecx
  0084c	41 8b c9	 mov	 ecx, r9d
  0084f	46 8d 84 12 c6
	9d c1 0f	 lea	 r8d, DWORD PTR [rdx+r10+264347078]
  00857	45 8b d1	 mov	 r10d, r9d

; 169  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],19,0x240ca1cc);

  0085a	8b d3		 mov	 edx, ebx
  0085c	41 03 f0	 add	 esi, r8d
  0085f	c1 c9 0d	 ror	 ecx, 13
  00862	c1 c0 0a	 rol	 eax, 10
  00865	33 c8		 xor	 ecx, eax
  00867	45 0b d4	 or	 r10d, r12d
  0086a	33 d7		 xor	 edx, edi
  0086c	45 23 d5	 and	 r10d, r13d
  0086f	23 d6		 and	 edx, esi
  00871	41 8b c1	 mov	 eax, r9d
  00874	c1 c8 02	 ror	 eax, 2
  00877	33 d3		 xor	 edx, ebx
  00879	33 c8		 xor	 ecx, eax
  0087b	41 8b c1	 mov	 eax, r9d
  0087e	41 23 c4	 and	 eax, r12d
  00881	44 0b d0	 or	 r10d, eax
  00884	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00888	8b ce		 mov	 ecx, esi
  0088a	44 03 d0	 add	 r10d, eax
  0088d	c1 c9 0b	 ror	 ecx, 11
  00890	8b c6		 mov	 eax, esi
  00892	c1 c0 07	 rol	 eax, 7
  00895	33 c8		 xor	 ecx, eax
  00897	8b c6		 mov	 eax, esi
  00899	c1 c8 06	 ror	 eax, 6
  0089c	33 c8		 xor	 ecx, eax
  0089e	41 8b c2	 mov	 eax, r10d
  008a1	03 4c 24 6c	 add	 ecx, DWORD PTR W$[rsp+76]
  008a5	03 d1		 add	 edx, ecx
  008a7	41 8b ca	 mov	 ecx, r10d
  008aa	46 8d 84 1a cc
	a1 0c 24	 lea	 r8d, DWORD PTR [rdx+r11+604807628]
  008b2	45 8b da	 mov	 r11d, r10d
  008b5	45 03 e8	 add	 r13d, r8d
  008b8	c1 c9 0d	 ror	 ecx, 13
  008bb	c1 c0 0a	 rol	 eax, 10
  008be	33 c8		 xor	 ecx, eax
  008c0	45 0b d9	 or	 r11d, r9d
  008c3	41 8b c2	 mov	 eax, r10d
  008c6	c1 c8 02	 ror	 eax, 2
  008c9	45 23 dc	 and	 r11d, r12d
  008cc	33 c8		 xor	 ecx, eax
  008ce	41 8b c2	 mov	 eax, r10d
  008d1	41 23 c1	 and	 eax, r9d
  008d4	44 0b d8	 or	 r11d, eax
  008d7	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  008db	44 03 d8	 add	 r11d, eax

; 170  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],20,0x2de92c6f);

  008de	8b d7		 mov	 edx, edi
  008e0	41 8b cd	 mov	 ecx, r13d
  008e3	41 8b c5	 mov	 eax, r13d
  008e6	c1 c9 0b	 ror	 ecx, 11
  008e9	c1 c0 07	 rol	 eax, 7
  008ec	33 d6		 xor	 edx, esi
  008ee	33 c8		 xor	 ecx, eax
  008f0	41 23 d5	 and	 edx, r13d
  008f3	41 8b c5	 mov	 eax, r13d
  008f6	33 d7		 xor	 edx, edi
  008f8	c1 c8 06	 ror	 eax, 6
  008fb	33 c8		 xor	 ecx, eax
  008fd	41 8b c3	 mov	 eax, r11d
  00900	03 4c 24 70	 add	 ecx, DWORD PTR W$[rsp+80]
  00904	03 d1		 add	 edx, ecx
  00906	41 8b cb	 mov	 ecx, r11d
  00909	44 8d 84 1a 6f
	2c e9 2d	 lea	 r8d, DWORD PTR [rdx+rbx+770255983]
  00911	41 8b da	 mov	 ebx, r10d

; 171  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],21,0x4a7484aa);

  00914	8b d6		 mov	 edx, esi
  00916	45 03 e0	 add	 r12d, r8d
  00919	c1 c9 0d	 ror	 ecx, 13
  0091c	c1 c0 0a	 rol	 eax, 10
  0091f	33 c8		 xor	 ecx, eax
  00921	41 33 d5	 xor	 edx, r13d
  00924	41 0b db	 or	 ebx, r11d
  00927	41 23 d4	 and	 edx, r12d
  0092a	41 23 d9	 and	 ebx, r9d
  0092d	41 8b c3	 mov	 eax, r11d
  00930	c1 c8 02	 ror	 eax, 2
  00933	33 d6		 xor	 edx, esi
  00935	33 c8		 xor	 ecx, eax
  00937	41 8b c2	 mov	 eax, r10d
  0093a	41 23 c3	 and	 eax, r11d
  0093d	0b d8		 or	 ebx, eax
  0093f	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00943	41 8b cc	 mov	 ecx, r12d
  00946	03 d8		 add	 ebx, eax
  00948	c1 c9 0b	 ror	 ecx, 11
  0094b	41 8b c4	 mov	 eax, r12d
  0094e	c1 c0 07	 rol	 eax, 7
  00951	33 c8		 xor	 ecx, eax
  00953	41 8b c4	 mov	 eax, r12d
  00956	c1 c8 06	 ror	 eax, 6
  00959	33 c8		 xor	 ecx, eax
  0095b	8b c3		 mov	 eax, ebx
  0095d	03 4c 24 74	 add	 ecx, DWORD PTR W$[rsp+84]
  00961	03 d1		 add	 edx, ecx
  00963	8b cb		 mov	 ecx, ebx
  00965	44 8d 84 3a aa
	84 74 4a	 lea	 r8d, DWORD PTR [rdx+rdi+1249150122]
  0096d	8b fb		 mov	 edi, ebx

; 172  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],22,0x5cb0a9dc);

  0096f	41 8b d5	 mov	 edx, r13d
  00972	45 03 c8	 add	 r9d, r8d
  00975	c1 c9 0d	 ror	 ecx, 13
  00978	c1 c0 0a	 rol	 eax, 10
  0097b	33 c8		 xor	 ecx, eax
  0097d	41 0b fb	 or	 edi, r11d
  00980	41 33 d4	 xor	 edx, r12d
  00983	41 23 fa	 and	 edi, r10d
  00986	41 23 d1	 and	 edx, r9d
  00989	8b c3		 mov	 eax, ebx
  0098b	c1 c8 02	 ror	 eax, 2
  0098e	41 33 d5	 xor	 edx, r13d
  00991	33 c8		 xor	 ecx, eax
  00993	8b c3		 mov	 eax, ebx
  00995	41 23 c3	 and	 eax, r11d
  00998	0b f8		 or	 edi, eax
  0099a	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  0099e	41 8b c9	 mov	 ecx, r9d
  009a1	03 f8		 add	 edi, eax
  009a3	c1 c9 0b	 ror	 ecx, 11
  009a6	41 8b c1	 mov	 eax, r9d
  009a9	c1 c0 07	 rol	 eax, 7
  009ac	33 c8		 xor	 ecx, eax
  009ae	41 8b c1	 mov	 eax, r9d
  009b1	c1 c8 06	 ror	 eax, 6
  009b4	33 c8		 xor	 ecx, eax
  009b6	03 4c 24 78	 add	 ecx, DWORD PTR W$[rsp+88]
  009ba	03 d1		 add	 edx, ecx
  009bc	8b cf		 mov	 ecx, edi
  009be	44 8d 84 32 dc
	a9 b0 5c	 lea	 r8d, DWORD PTR [rdx+rsi+1555081692]
  009c6	45 03 d0	 add	 r10d, r8d
  009c9	c1 c9 0d	 ror	 ecx, 13
  009cc	8b f3		 mov	 esi, ebx
  009ce	8b c7		 mov	 eax, edi
  009d0	c1 c0 0a	 rol	 eax, 10
  009d3	0b f7		 or	 esi, edi

; 173  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],23,0x76f988da);

  009d5	41 8b d1	 mov	 edx, r9d
  009d8	33 c8		 xor	 ecx, eax
  009da	41 33 d4	 xor	 edx, r12d
  009dd	41 23 f3	 and	 esi, r11d
  009e0	41 23 d2	 and	 edx, r10d
  009e3	8b c7		 mov	 eax, edi
  009e5	c1 c8 02	 ror	 eax, 2
  009e8	41 33 d4	 xor	 edx, r12d
  009eb	33 c8		 xor	 ecx, eax
  009ed	8b c3		 mov	 eax, ebx
  009ef	23 c7		 and	 eax, edi
  009f1	0b f0		 or	 esi, eax
  009f3	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  009f7	41 8b ca	 mov	 ecx, r10d
  009fa	03 f0		 add	 esi, eax
  009fc	c1 c9 0b	 ror	 ecx, 11
  009ff	41 8b c2	 mov	 eax, r10d
  00a02	c1 c0 07	 rol	 eax, 7
  00a05	33 c8		 xor	 ecx, eax
  00a07	41 8b c2	 mov	 eax, r10d
  00a0a	c1 c8 06	 ror	 eax, 6
  00a0d	33 c8		 xor	 ecx, eax
  00a0f	8b c6		 mov	 eax, esi
  00a11	03 4c 24 7c	 add	 ecx, DWORD PTR W$[rsp+92]
  00a15	03 d1		 add	 edx, ecx
  00a17	8b ce		 mov	 ecx, esi
  00a19	46 8d 84 2a da
	88 f9 76	 lea	 r8d, DWORD PTR [rdx+r13+1996064986]
  00a21	44 8b ef	 mov	 r13d, edi

; 174  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],24,0x983e5152);

  00a24	41 8b d2	 mov	 edx, r10d
  00a27	45 03 d8	 add	 r11d, r8d
  00a2a	c1 c9 0d	 ror	 ecx, 13
  00a2d	c1 c0 0a	 rol	 eax, 10
  00a30	33 c8		 xor	 ecx, eax
  00a32	44 0b ee	 or	 r13d, esi
  00a35	41 33 d1	 xor	 edx, r9d
  00a38	44 23 eb	 and	 r13d, ebx
  00a3b	41 23 d3	 and	 edx, r11d
  00a3e	8b c6		 mov	 eax, esi
  00a40	c1 c8 02	 ror	 eax, 2
  00a43	41 33 d1	 xor	 edx, r9d
  00a46	33 c8		 xor	 ecx, eax
  00a48	8b c7		 mov	 eax, edi
  00a4a	23 c6		 and	 eax, esi
  00a4c	44 0b e8	 or	 r13d, eax
  00a4f	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00a53	41 8b cb	 mov	 ecx, r11d
  00a56	44 03 e8	 add	 r13d, eax
  00a59	c1 c9 0b	 ror	 ecx, 11
  00a5c	41 8b c3	 mov	 eax, r11d
  00a5f	c1 c0 07	 rol	 eax, 7
  00a62	33 c8		 xor	 ecx, eax
  00a64	41 8b c3	 mov	 eax, r11d
  00a67	c1 c8 06	 ror	 eax, 6
  00a6a	33 c8		 xor	 ecx, eax
  00a6c	41 8b c5	 mov	 eax, r13d
  00a6f	03 4d 80	 add	 ecx, DWORD PTR W$[rbp-160]
  00a72	03 d1		 add	 edx, ecx
  00a74	41 8b cd	 mov	 ecx, r13d
  00a77	46 8d 84 22 52
	51 3e 98	 lea	 r8d, DWORD PTR [rdx+r12-1740746414]
  00a7f	44 8b e6	 mov	 r12d, esi
  00a82	41 03 d8	 add	 ebx, r8d
  00a85	c1 c9 0d	 ror	 ecx, 13
  00a88	c1 c0 0a	 rol	 eax, 10
  00a8b	33 c8		 xor	 ecx, eax
  00a8d	45 0b e5	 or	 r12d, r13d
  00a90	41 8b c5	 mov	 eax, r13d
  00a93	c1 c8 02	 ror	 eax, 2
  00a96	44 23 e7	 and	 r12d, edi
  00a99	33 c8		 xor	 ecx, eax
  00a9b	8b c6		 mov	 eax, esi
  00a9d	41 23 c5	 and	 eax, r13d
  00aa0	44 0b e0	 or	 r12d, eax
  00aa3	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]

; 175  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],25,0xa831c66d);

  00aa7	8b cb		 mov	 ecx, ebx
  00aa9	44 03 e0	 add	 r12d, eax
  00aac	c1 c9 0b	 ror	 ecx, 11
  00aaf	41 8b d2	 mov	 edx, r10d
  00ab2	8b c3		 mov	 eax, ebx
  00ab4	c1 c0 07	 rol	 eax, 7
  00ab7	41 33 d3	 xor	 edx, r11d
  00aba	33 c8		 xor	 ecx, eax
  00abc	23 d3		 and	 edx, ebx
  00abe	8b c3		 mov	 eax, ebx
  00ac0	c1 c8 06	 ror	 eax, 6
  00ac3	41 33 d2	 xor	 edx, r10d
  00ac6	33 c8		 xor	 ecx, eax
  00ac8	41 8b c4	 mov	 eax, r12d
  00acb	03 4d 84	 add	 ecx, DWORD PTR W$[rbp-156]
  00ace	03 d1		 add	 edx, ecx
  00ad0	41 8b cc	 mov	 ecx, r12d
  00ad3	46 8d 84 0a 6d
	c6 31 a8	 lea	 r8d, DWORD PTR [rdx+r9-1473132947]
  00adb	45 8b cd	 mov	 r9d, r13d

; 176  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],26,0xb00327c8);

  00ade	8b d3		 mov	 edx, ebx
  00ae0	41 03 f8	 add	 edi, r8d
  00ae3	c1 c9 0d	 ror	 ecx, 13
  00ae6	c1 c0 0a	 rol	 eax, 10
  00ae9	33 c8		 xor	 ecx, eax
  00aeb	41 33 d3	 xor	 edx, r11d
  00aee	45 0b cc	 or	 r9d, r12d
  00af1	23 d7		 and	 edx, edi
  00af3	44 23 ce	 and	 r9d, esi
  00af6	41 8b c4	 mov	 eax, r12d
  00af9	c1 c8 02	 ror	 eax, 2
  00afc	41 33 d3	 xor	 edx, r11d
  00aff	33 c8		 xor	 ecx, eax
  00b01	41 8b c5	 mov	 eax, r13d
  00b04	41 23 c4	 and	 eax, r12d
  00b07	44 0b c8	 or	 r9d, eax
  00b0a	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00b0e	8b cf		 mov	 ecx, edi
  00b10	44 03 c8	 add	 r9d, eax
  00b13	c1 c9 0b	 ror	 ecx, 11
  00b16	8b c7		 mov	 eax, edi
  00b18	c1 c0 07	 rol	 eax, 7
  00b1b	33 c8		 xor	 ecx, eax
  00b1d	8b c7		 mov	 eax, edi
  00b1f	c1 c8 06	 ror	 eax, 6
  00b22	33 c8		 xor	 ecx, eax
  00b24	41 8b c1	 mov	 eax, r9d
  00b27	03 4d 88	 add	 ecx, DWORD PTR W$[rbp-152]
  00b2a	03 d1		 add	 edx, ecx
  00b2c	41 8b c9	 mov	 ecx, r9d
  00b2f	46 8d 84 12 c8
	27 03 b0	 lea	 r8d, DWORD PTR [rdx+r10-1341970488]
  00b37	45 8b d1	 mov	 r10d, r9d

; 177  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],27,0xbf597fc7);

  00b3a	8b d3		 mov	 edx, ebx
  00b3c	41 03 f0	 add	 esi, r8d
  00b3f	c1 c9 0d	 ror	 ecx, 13
  00b42	c1 c0 0a	 rol	 eax, 10
  00b45	33 c8		 xor	 ecx, eax
  00b47	45 0b d4	 or	 r10d, r12d
  00b4a	33 d7		 xor	 edx, edi
  00b4c	45 23 d5	 and	 r10d, r13d
  00b4f	23 d6		 and	 edx, esi
  00b51	41 8b c1	 mov	 eax, r9d
  00b54	c1 c8 02	 ror	 eax, 2
  00b57	33 d3		 xor	 edx, ebx
  00b59	33 c8		 xor	 ecx, eax
  00b5b	41 8b c1	 mov	 eax, r9d
  00b5e	41 23 c4	 and	 eax, r12d
  00b61	44 0b d0	 or	 r10d, eax
  00b64	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00b68	8b ce		 mov	 ecx, esi
  00b6a	44 03 d0	 add	 r10d, eax
  00b6d	c1 c9 0b	 ror	 ecx, 11
  00b70	8b c6		 mov	 eax, esi
  00b72	c1 c0 07	 rol	 eax, 7
  00b75	33 c8		 xor	 ecx, eax
  00b77	8b c6		 mov	 eax, esi
  00b79	c1 c8 06	 ror	 eax, 6
  00b7c	33 c8		 xor	 ecx, eax
  00b7e	41 8b c2	 mov	 eax, r10d
  00b81	03 4d 8c	 add	 ecx, DWORD PTR W$[rbp-148]
  00b84	03 d1		 add	 edx, ecx
  00b86	41 8b ca	 mov	 ecx, r10d
  00b89	46 8d 84 1a c7
	7f 59 bf	 lea	 r8d, DWORD PTR [rdx+r11-1084653625]
  00b91	45 03 e8	 add	 r13d, r8d
  00b94	c1 c9 0d	 ror	 ecx, 13
  00b97	c1 c0 0a	 rol	 eax, 10

; 178  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],28,0xc6e00bf3);

  00b9a	8b d7		 mov	 edx, edi
  00b9c	45 8b da	 mov	 r11d, r10d
  00b9f	33 c8		 xor	 ecx, eax
  00ba1	33 d6		 xor	 edx, esi
  00ba3	45 0b d9	 or	 r11d, r9d
  00ba6	41 23 d5	 and	 edx, r13d
  00ba9	45 23 dc	 and	 r11d, r12d
  00bac	41 8b c2	 mov	 eax, r10d
  00baf	c1 c8 02	 ror	 eax, 2
  00bb2	33 d7		 xor	 edx, edi
  00bb4	33 c8		 xor	 ecx, eax
  00bb6	41 8b c2	 mov	 eax, r10d
  00bb9	41 23 c1	 and	 eax, r9d
  00bbc	44 0b d8	 or	 r11d, eax
  00bbf	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00bc3	41 8b cd	 mov	 ecx, r13d
  00bc6	44 03 d8	 add	 r11d, eax
  00bc9	c1 c9 0b	 ror	 ecx, 11
  00bcc	41 8b c5	 mov	 eax, r13d
  00bcf	c1 c0 07	 rol	 eax, 7
  00bd2	33 c8		 xor	 ecx, eax
  00bd4	41 8b c5	 mov	 eax, r13d
  00bd7	c1 c8 06	 ror	 eax, 6
  00bda	33 c8		 xor	 ecx, eax
  00bdc	41 8b c3	 mov	 eax, r11d
  00bdf	03 4d 90	 add	 ecx, DWORD PTR W$[rbp-144]
  00be2	03 d1		 add	 edx, ecx
  00be4	41 8b cb	 mov	 ecx, r11d
  00be7	44 8d 84 1a f3
	0b e0 c6	 lea	 r8d, DWORD PTR [rdx+rbx-958395405]
  00bef	41 8b da	 mov	 ebx, r10d

; 179  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],29,0xd5a79147);

  00bf2	8b d6		 mov	 edx, esi
  00bf4	45 03 e0	 add	 r12d, r8d
  00bf7	c1 c9 0d	 ror	 ecx, 13
  00bfa	c1 c0 0a	 rol	 eax, 10
  00bfd	33 c8		 xor	 ecx, eax
  00bff	41 0b db	 or	 ebx, r11d
  00c02	41 33 d5	 xor	 edx, r13d
  00c05	41 23 d9	 and	 ebx, r9d
  00c08	41 23 d4	 and	 edx, r12d
  00c0b	41 8b c3	 mov	 eax, r11d
  00c0e	c1 c8 02	 ror	 eax, 2
  00c11	33 d6		 xor	 edx, esi
  00c13	33 c8		 xor	 ecx, eax
  00c15	41 8b c2	 mov	 eax, r10d
  00c18	41 23 c3	 and	 eax, r11d
  00c1b	0b d8		 or	 ebx, eax
  00c1d	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00c21	41 8b cc	 mov	 ecx, r12d
  00c24	03 d8		 add	 ebx, eax
  00c26	c1 c9 0b	 ror	 ecx, 11
  00c29	41 8b c4	 mov	 eax, r12d
  00c2c	c1 c0 07	 rol	 eax, 7
  00c2f	33 c8		 xor	 ecx, eax
  00c31	41 8b c4	 mov	 eax, r12d
  00c34	c1 c8 06	 ror	 eax, 6
  00c37	33 c8		 xor	 ecx, eax
  00c39	8b c3		 mov	 eax, ebx
  00c3b	03 4d 94	 add	 ecx, DWORD PTR W$[rbp-140]
  00c3e	03 d1		 add	 edx, ecx
  00c40	8b cb		 mov	 ecx, ebx
  00c42	44 8d 84 3a 47
	91 a7 d5	 lea	 r8d, DWORD PTR [rdx+rdi-710438585]
  00c4a	8b fb		 mov	 edi, ebx
  00c4c	45 03 c8	 add	 r9d, r8d
  00c4f	c1 c9 0d	 ror	 ecx, 13
  00c52	c1 c0 0a	 rol	 eax, 10
  00c55	33 c8		 xor	 ecx, eax
  00c57	41 0b fb	 or	 edi, r11d
  00c5a	8b c3		 mov	 eax, ebx
  00c5c	c1 c8 02	 ror	 eax, 2
  00c5f	41 23 fa	 and	 edi, r10d
  00c62	33 c8		 xor	 ecx, eax
  00c64	8b c3		 mov	 eax, ebx
  00c66	41 23 c3	 and	 eax, r11d
  00c69	0b f8		 or	 edi, eax
  00c6b	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]

; 180  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],30,0x06ca6351);

  00c6f	41 8b c9	 mov	 ecx, r9d
  00c72	03 f8		 add	 edi, eax
  00c74	41 8b c1	 mov	 eax, r9d
  00c77	c1 c9 0b	 ror	 ecx, 11
  00c7a	c1 c0 07	 rol	 eax, 7
  00c7d	33 c8		 xor	 ecx, eax
  00c7f	41 8b d5	 mov	 edx, r13d
  00c82	41 8b c1	 mov	 eax, r9d
  00c85	c1 c8 06	 ror	 eax, 6
  00c88	41 33 d4	 xor	 edx, r12d
  00c8b	33 c8		 xor	 ecx, eax
  00c8d	41 23 d1	 and	 edx, r9d
  00c90	8b c7		 mov	 eax, edi
  00c92	03 4d 98	 add	 ecx, DWORD PTR W$[rbp-136]
  00c95	41 33 d5	 xor	 edx, r13d
  00c98	03 d1		 add	 edx, ecx
  00c9a	8b cf		 mov	 ecx, edi
  00c9c	44 8d 84 32 51
	63 ca 06	 lea	 r8d, DWORD PTR [rdx+rsi+113926993]
  00ca4	8b f3		 mov	 esi, ebx

; 181  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],31,0x14292967);

  00ca6	41 8b d1	 mov	 edx, r9d
  00ca9	45 03 d0	 add	 r10d, r8d
  00cac	c1 c9 0d	 ror	 ecx, 13
  00caf	c1 c0 0a	 rol	 eax, 10
  00cb2	33 c8		 xor	 ecx, eax
  00cb4	41 33 d4	 xor	 edx, r12d
  00cb7	0b f7		 or	 esi, edi
  00cb9	41 23 d2	 and	 edx, r10d
  00cbc	41 23 f3	 and	 esi, r11d
  00cbf	8b c7		 mov	 eax, edi
  00cc1	c1 c8 02	 ror	 eax, 2
  00cc4	41 33 d4	 xor	 edx, r12d
  00cc7	33 c8		 xor	 ecx, eax
  00cc9	8b c3		 mov	 eax, ebx
  00ccb	23 c7		 and	 eax, edi
  00ccd	0b f0		 or	 esi, eax
  00ccf	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00cd3	41 8b ca	 mov	 ecx, r10d
  00cd6	03 f0		 add	 esi, eax
  00cd8	c1 c9 0b	 ror	 ecx, 11
  00cdb	41 8b c2	 mov	 eax, r10d
  00cde	c1 c0 07	 rol	 eax, 7
  00ce1	33 c8		 xor	 ecx, eax
  00ce3	41 8b c2	 mov	 eax, r10d
  00ce6	c1 c8 06	 ror	 eax, 6
  00ce9	33 c8		 xor	 ecx, eax
  00ceb	8b c6		 mov	 eax, esi
  00ced	03 4d 9c	 add	 ecx, DWORD PTR W$[rbp-132]
  00cf0	03 d1		 add	 edx, ecx
  00cf2	8b ce		 mov	 ecx, esi
  00cf4	46 8d 84 2a 67
	29 29 14	 lea	 r8d, DWORD PTR [rdx+r13+338241895]
  00cfc	44 8b ef	 mov	 r13d, edi

; 182  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],32,0x27b70a85);

  00cff	41 8b d2	 mov	 edx, r10d
  00d02	45 03 d8	 add	 r11d, r8d
  00d05	c1 c9 0d	 ror	 ecx, 13
  00d08	c1 c0 0a	 rol	 eax, 10
  00d0b	33 c8		 xor	 ecx, eax
  00d0d	44 0b ee	 or	 r13d, esi
  00d10	41 33 d1	 xor	 edx, r9d
  00d13	44 23 eb	 and	 r13d, ebx
  00d16	41 23 d3	 and	 edx, r11d
  00d19	8b c6		 mov	 eax, esi
  00d1b	c1 c8 02	 ror	 eax, 2
  00d1e	41 33 d1	 xor	 edx, r9d
  00d21	33 c8		 xor	 ecx, eax
  00d23	8b c7		 mov	 eax, edi
  00d25	23 c6		 and	 eax, esi
  00d27	44 0b e8	 or	 r13d, eax
  00d2a	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00d2e	41 8b cb	 mov	 ecx, r11d
  00d31	44 03 e8	 add	 r13d, eax
  00d34	c1 c9 0b	 ror	 ecx, 11
  00d37	41 8b c3	 mov	 eax, r11d
  00d3a	c1 c0 07	 rol	 eax, 7
  00d3d	33 c8		 xor	 ecx, eax
  00d3f	41 8b c3	 mov	 eax, r11d
  00d42	c1 c8 06	 ror	 eax, 6
  00d45	33 c8		 xor	 ecx, eax
  00d47	41 8b c5	 mov	 eax, r13d
  00d4a	03 4d a0	 add	 ecx, DWORD PTR W$[rbp-128]
  00d4d	03 d1		 add	 edx, ecx
  00d4f	41 8b cd	 mov	 ecx, r13d
  00d52	46 8d 84 22 85
	0a b7 27	 lea	 r8d, DWORD PTR [rdx+r12+666307205]
  00d5a	41 03 d8	 add	 ebx, r8d
  00d5d	c1 c9 0d	 ror	 ecx, 13
  00d60	c1 c0 0a	 rol	 eax, 10
  00d63	33 c8		 xor	 ecx, eax

; 183  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],33,0x2e1b2138);

  00d65	41 8b d2	 mov	 edx, r10d
  00d68	44 8b e6	 mov	 r12d, esi
  00d6b	41 8b c5	 mov	 eax, r13d
  00d6e	c1 c8 02	 ror	 eax, 2
  00d71	41 33 d3	 xor	 edx, r11d
  00d74	45 0b e5	 or	 r12d, r13d
  00d77	33 c8		 xor	 ecx, eax
  00d79	23 d3		 and	 edx, ebx
  00d7b	44 23 e7	 and	 r12d, edi
  00d7e	41 33 d2	 xor	 edx, r10d
  00d81	8b c6		 mov	 eax, esi
  00d83	41 23 c5	 and	 eax, r13d
  00d86	44 0b e0	 or	 r12d, eax
  00d89	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00d8d	8b cb		 mov	 ecx, ebx
  00d8f	44 03 e0	 add	 r12d, eax
  00d92	c1 c9 0b	 ror	 ecx, 11
  00d95	8b c3		 mov	 eax, ebx
  00d97	c1 c0 07	 rol	 eax, 7
  00d9a	33 c8		 xor	 ecx, eax
  00d9c	8b c3		 mov	 eax, ebx
  00d9e	c1 c8 06	 ror	 eax, 6
  00da1	33 c8		 xor	 ecx, eax
  00da3	41 8b c4	 mov	 eax, r12d
  00da6	03 4d a4	 add	 ecx, DWORD PTR W$[rbp-124]
  00da9	03 d1		 add	 edx, ecx
  00dab	41 8b cc	 mov	 ecx, r12d
  00dae	46 8d 84 0a 38
	21 1b 2e	 lea	 r8d, DWORD PTR [rdx+r9+773529912]
  00db6	45 8b cd	 mov	 r9d, r13d

; 184  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],34,0x4d2c6dfc);

  00db9	8b d3		 mov	 edx, ebx
  00dbb	41 03 f8	 add	 edi, r8d
  00dbe	c1 c9 0d	 ror	 ecx, 13
  00dc1	c1 c0 0a	 rol	 eax, 10
  00dc4	33 c8		 xor	 ecx, eax
  00dc6	45 0b cc	 or	 r9d, r12d
  00dc9	41 33 d3	 xor	 edx, r11d
  00dcc	44 23 ce	 and	 r9d, esi
  00dcf	23 d7		 and	 edx, edi
  00dd1	41 8b c4	 mov	 eax, r12d
  00dd4	c1 c8 02	 ror	 eax, 2
  00dd7	41 33 d3	 xor	 edx, r11d
  00dda	33 c8		 xor	 ecx, eax
  00ddc	41 8b c5	 mov	 eax, r13d
  00ddf	41 23 c4	 and	 eax, r12d
  00de2	44 0b c8	 or	 r9d, eax
  00de5	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00de9	8b cf		 mov	 ecx, edi
  00deb	44 03 c8	 add	 r9d, eax
  00dee	c1 c9 0b	 ror	 ecx, 11
  00df1	8b c7		 mov	 eax, edi
  00df3	c1 c0 07	 rol	 eax, 7
  00df6	33 c8		 xor	 ecx, eax
  00df8	8b c7		 mov	 eax, edi
  00dfa	c1 c8 06	 ror	 eax, 6
  00dfd	33 c8		 xor	 ecx, eax
  00dff	41 8b c1	 mov	 eax, r9d
  00e02	03 4d a8	 add	 ecx, DWORD PTR W$[rbp-120]
  00e05	03 d1		 add	 edx, ecx
  00e07	41 8b c9	 mov	 ecx, r9d
  00e0a	46 8d 84 12 fc
	6d 2c 4d	 lea	 r8d, DWORD PTR [rdx+r10+1294757372]
  00e12	45 8b d1	 mov	 r10d, r9d
  00e15	41 03 f0	 add	 esi, r8d
  00e18	c1 c9 0d	 ror	 ecx, 13
  00e1b	c1 c0 0a	 rol	 eax, 10
  00e1e	33 c8		 xor	 ecx, eax
  00e20	45 0b d4	 or	 r10d, r12d
  00e23	41 8b c1	 mov	 eax, r9d
  00e26	c1 c8 02	 ror	 eax, 2
  00e29	45 23 d5	 and	 r10d, r13d
  00e2c	33 c8		 xor	 ecx, eax
  00e2e	41 8b c1	 mov	 eax, r9d
  00e31	41 23 c4	 and	 eax, r12d
  00e34	44 0b d0	 or	 r10d, eax
  00e37	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]

; 185  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],35,0x53380d13);

  00e3b	8b ce		 mov	 ecx, esi
  00e3d	44 03 d0	 add	 r10d, eax
  00e40	c1 c9 0b	 ror	 ecx, 11
  00e43	8b c6		 mov	 eax, esi
  00e45	c1 c0 07	 rol	 eax, 7
  00e48	33 c8		 xor	 ecx, eax
  00e4a	8b c6		 mov	 eax, esi
  00e4c	c1 c8 06	 ror	 eax, 6
  00e4f	8b d3		 mov	 edx, ebx
  00e51	33 c8		 xor	 ecx, eax
  00e53	33 d7		 xor	 edx, edi
  00e55	41 8b c2	 mov	 eax, r10d
  00e58	03 4d ac	 add	 ecx, DWORD PTR W$[rbp-116]
  00e5b	23 d6		 and	 edx, esi
  00e5d	33 d3		 xor	 edx, ebx
  00e5f	03 d1		 add	 edx, ecx
  00e61	41 8b ca	 mov	 ecx, r10d
  00e64	46 8d 84 1a 13
	0d 38 53	 lea	 r8d, DWORD PTR [rdx+r11+1396182291]
  00e6c	45 8b da	 mov	 r11d, r10d

; 186  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],36,0x650a7354);

  00e6f	8b d7		 mov	 edx, edi
  00e71	45 03 e8	 add	 r13d, r8d
  00e74	c1 c9 0d	 ror	 ecx, 13
  00e77	c1 c0 0a	 rol	 eax, 10
  00e7a	33 c8		 xor	 ecx, eax
  00e7c	33 d6		 xor	 edx, esi
  00e7e	45 0b d9	 or	 r11d, r9d
  00e81	41 23 d5	 and	 edx, r13d
  00e84	45 23 dc	 and	 r11d, r12d
  00e87	41 8b c2	 mov	 eax, r10d
  00e8a	c1 c8 02	 ror	 eax, 2
  00e8d	33 d7		 xor	 edx, edi
  00e8f	33 c8		 xor	 ecx, eax
  00e91	41 8b c2	 mov	 eax, r10d
  00e94	41 23 c1	 and	 eax, r9d
  00e97	44 0b d8	 or	 r11d, eax
  00e9a	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00e9e	41 8b cd	 mov	 ecx, r13d
  00ea1	44 03 d8	 add	 r11d, eax
  00ea4	c1 c9 0b	 ror	 ecx, 11
  00ea7	41 8b c5	 mov	 eax, r13d
  00eaa	c1 c0 07	 rol	 eax, 7
  00ead	33 c8		 xor	 ecx, eax
  00eaf	41 8b c5	 mov	 eax, r13d
  00eb2	c1 c8 06	 ror	 eax, 6
  00eb5	33 c8		 xor	 ecx, eax
  00eb7	41 8b c3	 mov	 eax, r11d
  00eba	03 4d b0	 add	 ecx, DWORD PTR W$[rbp-112]
  00ebd	03 d1		 add	 edx, ecx
  00ebf	41 8b cb	 mov	 ecx, r11d
  00ec2	44 8d 84 1a 54
	73 0a 65	 lea	 r8d, DWORD PTR [rdx+rbx+1695183700]
  00eca	41 8b da	 mov	 ebx, r10d

; 187  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],37,0x766a0abb);

  00ecd	8b d6		 mov	 edx, esi
  00ecf	45 03 e0	 add	 r12d, r8d
  00ed2	c1 c9 0d	 ror	 ecx, 13
  00ed5	c1 c0 0a	 rol	 eax, 10
  00ed8	33 c8		 xor	 ecx, eax
  00eda	41 0b db	 or	 ebx, r11d
  00edd	41 33 d5	 xor	 edx, r13d
  00ee0	41 23 d9	 and	 ebx, r9d
  00ee3	41 23 d4	 and	 edx, r12d
  00ee6	41 8b c3	 mov	 eax, r11d
  00ee9	c1 c8 02	 ror	 eax, 2
  00eec	33 d6		 xor	 edx, esi
  00eee	33 c8		 xor	 ecx, eax
  00ef0	41 8b c2	 mov	 eax, r10d
  00ef3	41 23 c3	 and	 eax, r11d
  00ef6	0b d8		 or	 ebx, eax
  00ef8	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00efc	41 8b cc	 mov	 ecx, r12d
  00eff	03 d8		 add	 ebx, eax
  00f01	c1 c9 0b	 ror	 ecx, 11
  00f04	41 8b c4	 mov	 eax, r12d
  00f07	c1 c0 07	 rol	 eax, 7
  00f0a	33 c8		 xor	 ecx, eax
  00f0c	41 8b c4	 mov	 eax, r12d
  00f0f	c1 c8 06	 ror	 eax, 6
  00f12	33 c8		 xor	 ecx, eax
  00f14	8b c3		 mov	 eax, ebx
  00f16	03 4d b4	 add	 ecx, DWORD PTR W$[rbp-108]
  00f19	03 d1		 add	 edx, ecx
  00f1b	8b cb		 mov	 ecx, ebx
  00f1d	44 8d 84 3a bb
	0a 6a 76	 lea	 r8d, DWORD PTR [rdx+rdi+1986661051]
  00f25	45 03 c8	 add	 r9d, r8d
  00f28	c1 c9 0d	 ror	 ecx, 13
  00f2b	c1 c0 0a	 rol	 eax, 10
  00f2e	33 c8		 xor	 ecx, eax
  00f30	8b c3		 mov	 eax, ebx
  00f32	c1 c8 02	 ror	 eax, 2
  00f35	33 c8		 xor	 ecx, eax

; 188  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],38,0x81c2c92e);

  00f37	41 8b d5	 mov	 edx, r13d
  00f3a	8b fb		 mov	 edi, ebx
  00f3c	41 33 d4	 xor	 edx, r12d
  00f3f	41 0b fb	 or	 edi, r11d
  00f42	8b c3		 mov	 eax, ebx
  00f44	41 23 c3	 and	 eax, r11d
  00f47	41 23 d1	 and	 edx, r9d
  00f4a	41 23 fa	 and	 edi, r10d
  00f4d	0b f8		 or	 edi, eax
  00f4f	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00f53	41 33 d5	 xor	 edx, r13d
  00f56	03 f8		 add	 edi, eax
  00f58	41 8b c9	 mov	 ecx, r9d
  00f5b	41 8b c1	 mov	 eax, r9d
  00f5e	c1 c9 0b	 ror	 ecx, 11
  00f61	c1 c0 07	 rol	 eax, 7
  00f64	33 c8		 xor	 ecx, eax
  00f66	41 8b c1	 mov	 eax, r9d
  00f69	c1 c8 06	 ror	 eax, 6
  00f6c	33 c8		 xor	 ecx, eax
  00f6e	8b c7		 mov	 eax, edi
  00f70	03 4d b8	 add	 ecx, DWORD PTR W$[rbp-104]
  00f73	03 d1		 add	 edx, ecx
  00f75	8b cf		 mov	 ecx, edi
  00f77	44 8d 84 32 2e
	c9 c2 81	 lea	 r8d, DWORD PTR [rdx+rsi-2117940946]
  00f7f	8b f3		 mov	 esi, ebx

; 189  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],39,0x92722c85);

  00f81	41 8b d1	 mov	 edx, r9d
  00f84	45 03 d0	 add	 r10d, r8d
  00f87	c1 c9 0d	 ror	 ecx, 13
  00f8a	c1 c0 0a	 rol	 eax, 10
  00f8d	33 c8		 xor	 ecx, eax
  00f8f	0b f7		 or	 esi, edi
  00f91	41 33 d4	 xor	 edx, r12d
  00f94	41 23 f3	 and	 esi, r11d
  00f97	41 23 d2	 and	 edx, r10d
  00f9a	8b c7		 mov	 eax, edi
  00f9c	c1 c8 02	 ror	 eax, 2
  00f9f	41 33 d4	 xor	 edx, r12d
  00fa2	33 c8		 xor	 ecx, eax
  00fa4	8b c3		 mov	 eax, ebx
  00fa6	23 c7		 and	 eax, edi
  00fa8	0b f0		 or	 esi, eax
  00faa	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  00fae	41 8b ca	 mov	 ecx, r10d
  00fb1	03 f0		 add	 esi, eax
  00fb3	c1 c9 0b	 ror	 ecx, 11
  00fb6	41 8b c2	 mov	 eax, r10d
  00fb9	c1 c0 07	 rol	 eax, 7
  00fbc	33 c8		 xor	 ecx, eax
  00fbe	41 8b c2	 mov	 eax, r10d
  00fc1	c1 c8 06	 ror	 eax, 6
  00fc4	33 c8		 xor	 ecx, eax
  00fc6	8b c6		 mov	 eax, esi
  00fc8	03 4d bc	 add	 ecx, DWORD PTR W$[rbp-100]
  00fcb	03 d1		 add	 edx, ecx
  00fcd	8b ce		 mov	 ecx, esi
  00fcf	46 8d 84 2a 85
	2c 72 92	 lea	 r8d, DWORD PTR [rdx+r13-1838011259]
  00fd7	44 8b ef	 mov	 r13d, edi
  00fda	45 03 d8	 add	 r11d, r8d
  00fdd	c1 c9 0d	 ror	 ecx, 13
  00fe0	c1 c0 0a	 rol	 eax, 10
  00fe3	33 c8		 xor	 ecx, eax
  00fe5	44 0b ee	 or	 r13d, esi
  00fe8	8b c6		 mov	 eax, esi
  00fea	c1 c8 02	 ror	 eax, 2
  00fed	44 23 eb	 and	 r13d, ebx
  00ff0	33 c8		 xor	 ecx, eax
  00ff2	8b c7		 mov	 eax, edi
  00ff4	23 c6		 and	 eax, esi
  00ff6	44 0b e8	 or	 r13d, eax
  00ff9	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]

; 190  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],40,0xa2bfe8a1);

  00ffd	41 8b cb	 mov	 ecx, r11d
  01000	44 03 e8	 add	 r13d, eax
  01003	c1 c9 0b	 ror	 ecx, 11
  01006	41 8b c3	 mov	 eax, r11d
  01009	c1 c0 07	 rol	 eax, 7
  0100c	33 c8		 xor	 ecx, eax
  0100e	41 8b c3	 mov	 eax, r11d
  01011	c1 c8 06	 ror	 eax, 6
  01014	33 c8		 xor	 ecx, eax
  01016	03 4d c0	 add	 ecx, DWORD PTR W$[rbp-96]
  01019	41 8b d2	 mov	 edx, r10d
  0101c	41 8b c5	 mov	 eax, r13d
  0101f	41 33 d1	 xor	 edx, r9d
  01022	41 23 d3	 and	 edx, r11d
  01025	41 33 d1	 xor	 edx, r9d
  01028	03 d1		 add	 edx, ecx
  0102a	41 8b cd	 mov	 ecx, r13d
  0102d	46 8d 84 22 a1
	e8 bf a2	 lea	 r8d, DWORD PTR [rdx+r12-1564481375]
  01035	44 8b e6	 mov	 r12d, esi

; 191  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],41,0xa81a664b);

  01038	41 8b d2	 mov	 edx, r10d
  0103b	41 03 d8	 add	 ebx, r8d
  0103e	c1 c9 0d	 ror	 ecx, 13
  01041	c1 c0 0a	 rol	 eax, 10
  01044	33 c8		 xor	 ecx, eax
  01046	41 33 d3	 xor	 edx, r11d
  01049	45 0b e5	 or	 r12d, r13d
  0104c	23 d3		 and	 edx, ebx
  0104e	44 23 e7	 and	 r12d, edi
  01051	41 8b c5	 mov	 eax, r13d
  01054	c1 c8 02	 ror	 eax, 2
  01057	41 33 d2	 xor	 edx, r10d
  0105a	33 c8		 xor	 ecx, eax
  0105c	8b c6		 mov	 eax, esi
  0105e	41 23 c5	 and	 eax, r13d
  01061	44 0b e0	 or	 r12d, eax
  01064	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  01068	8b cb		 mov	 ecx, ebx
  0106a	44 03 e0	 add	 r12d, eax
  0106d	c1 c9 0b	 ror	 ecx, 11
  01070	8b c3		 mov	 eax, ebx
  01072	c1 c0 07	 rol	 eax, 7
  01075	33 c8		 xor	 ecx, eax
  01077	8b c3		 mov	 eax, ebx
  01079	c1 c8 06	 ror	 eax, 6
  0107c	33 c8		 xor	 ecx, eax
  0107e	41 8b c4	 mov	 eax, r12d
  01081	03 4d c4	 add	 ecx, DWORD PTR W$[rbp-92]
  01084	03 d1		 add	 edx, ecx
  01086	41 8b cc	 mov	 ecx, r12d
  01089	46 8d 84 0a 4b
	66 1a a8	 lea	 r8d, DWORD PTR [rdx+r9-1474664885]
  01091	45 8b cd	 mov	 r9d, r13d

; 192  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],42,0xc24b8b70);

  01094	8b d3		 mov	 edx, ebx
  01096	41 03 f8	 add	 edi, r8d
  01099	c1 c9 0d	 ror	 ecx, 13
  0109c	c1 c0 0a	 rol	 eax, 10
  0109f	33 c8		 xor	 ecx, eax
  010a1	45 0b cc	 or	 r9d, r12d
  010a4	41 33 d3	 xor	 edx, r11d
  010a7	44 23 ce	 and	 r9d, esi
  010aa	23 d7		 and	 edx, edi
  010ac	41 8b c4	 mov	 eax, r12d
  010af	c1 c8 02	 ror	 eax, 2
  010b2	41 33 d3	 xor	 edx, r11d
  010b5	33 c8		 xor	 ecx, eax
  010b7	41 8b c5	 mov	 eax, r13d
  010ba	41 23 c4	 and	 eax, r12d
  010bd	44 0b c8	 or	 r9d, eax
  010c0	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  010c4	8b cf		 mov	 ecx, edi
  010c6	44 03 c8	 add	 r9d, eax
  010c9	c1 c9 0b	 ror	 ecx, 11
  010cc	8b c7		 mov	 eax, edi
  010ce	c1 c0 07	 rol	 eax, 7
  010d1	33 c8		 xor	 ecx, eax
  010d3	8b c7		 mov	 eax, edi
  010d5	c1 c8 06	 ror	 eax, 6
  010d8	33 c8		 xor	 ecx, eax
  010da	41 8b c1	 mov	 eax, r9d
  010dd	03 4d c8	 add	 ecx, DWORD PTR W$[rbp-88]
  010e0	03 d1		 add	 edx, ecx
  010e2	41 8b c9	 mov	 ecx, r9d
  010e5	46 8d 84 12 70
	8b 4b c2	 lea	 r8d, DWORD PTR [rdx+r10-1035236496]
  010ed	45 8b d1	 mov	 r10d, r9d
  010f0	41 03 f0	 add	 esi, r8d
  010f3	c1 c9 0d	 ror	 ecx, 13
  010f6	c1 c0 0a	 rol	 eax, 10
  010f9	33 c8		 xor	 ecx, eax
  010fb	41 8b c1	 mov	 eax, r9d
  010fe	c1 c8 02	 ror	 eax, 2
  01101	33 c8		 xor	 ecx, eax
  01103	45 0b d4	 or	 r10d, r12d

; 193  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],43,0xc76c51a3);

  01106	8b d3		 mov	 edx, ebx
  01108	41 8b c1	 mov	 eax, r9d
  0110b	41 23 c4	 and	 eax, r12d
  0110e	33 d7		 xor	 edx, edi
  01110	45 23 d5	 and	 r10d, r13d
  01113	44 0b d0	 or	 r10d, eax
  01116	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  0111a	23 d6		 and	 edx, esi
  0111c	44 03 d0	 add	 r10d, eax
  0111f	33 d3		 xor	 edx, ebx
  01121	8b ce		 mov	 ecx, esi
  01123	c1 c9 0b	 ror	 ecx, 11
  01126	8b c6		 mov	 eax, esi
  01128	c1 c0 07	 rol	 eax, 7
  0112b	33 c8		 xor	 ecx, eax
  0112d	8b c6		 mov	 eax, esi
  0112f	c1 c8 06	 ror	 eax, 6
  01132	33 c8		 xor	 ecx, eax
  01134	41 8b c2	 mov	 eax, r10d
  01137	03 4d cc	 add	 ecx, DWORD PTR W$[rbp-84]
  0113a	03 d1		 add	 edx, ecx
  0113c	41 8b ca	 mov	 ecx, r10d
  0113f	46 8d 84 1a a3
	51 6c c7	 lea	 r8d, DWORD PTR [rdx+r11-949202525]
  01147	45 8b da	 mov	 r11d, r10d

; 194  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],44,0xd192e819);

  0114a	8b d7		 mov	 edx, edi
  0114c	45 03 e8	 add	 r13d, r8d
  0114f	c1 c9 0d	 ror	 ecx, 13
  01152	c1 c0 0a	 rol	 eax, 10
  01155	33 c8		 xor	 ecx, eax
  01157	45 0b d9	 or	 r11d, r9d
  0115a	33 d6		 xor	 edx, esi
  0115c	45 23 dc	 and	 r11d, r12d
  0115f	41 23 d5	 and	 edx, r13d
  01162	41 8b c2	 mov	 eax, r10d
  01165	c1 c8 02	 ror	 eax, 2
  01168	33 d7		 xor	 edx, edi
  0116a	33 c8		 xor	 ecx, eax
  0116c	41 8b c2	 mov	 eax, r10d
  0116f	41 23 c1	 and	 eax, r9d
  01172	44 0b d8	 or	 r11d, eax
  01175	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  01179	41 8b cd	 mov	 ecx, r13d
  0117c	44 03 d8	 add	 r11d, eax
  0117f	c1 c9 0b	 ror	 ecx, 11
  01182	41 8b c5	 mov	 eax, r13d
  01185	c1 c0 07	 rol	 eax, 7
  01188	33 c8		 xor	 ecx, eax
  0118a	41 8b c5	 mov	 eax, r13d
  0118d	c1 c8 06	 ror	 eax, 6
  01190	33 c8		 xor	 ecx, eax
  01192	41 8b c3	 mov	 eax, r11d
  01195	03 4d d0	 add	 ecx, DWORD PTR W$[rbp-80]
  01198	03 d1		 add	 edx, ecx
  0119a	41 8b cb	 mov	 ecx, r11d
  0119d	44 8d 84 1a 19
	e8 92 d1	 lea	 r8d, DWORD PTR [rdx+rbx-778901479]
  011a5	41 8b da	 mov	 ebx, r10d

; 195  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],45,0xd6990624);

  011a8	8b d6		 mov	 edx, esi
  011aa	45 03 e0	 add	 r12d, r8d
  011ad	c1 c9 0d	 ror	 ecx, 13
  011b0	c1 c0 0a	 rol	 eax, 10
  011b3	33 c8		 xor	 ecx, eax
  011b5	41 0b db	 or	 ebx, r11d
  011b8	41 8b c3	 mov	 eax, r11d
  011bb	c1 c8 02	 ror	 eax, 2
  011be	41 23 d9	 and	 ebx, r9d
  011c1	33 c8		 xor	 ecx, eax
  011c3	41 8b c2	 mov	 eax, r10d
  011c6	41 23 c3	 and	 eax, r11d
  011c9	0b d8		 or	 ebx, eax
  011cb	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  011cf	41 8b cc	 mov	 ecx, r12d
  011d2	03 d8		 add	 ebx, eax
  011d4	c1 c9 0b	 ror	 ecx, 11
  011d7	41 8b c4	 mov	 eax, r12d
  011da	c1 c0 07	 rol	 eax, 7
  011dd	33 c8		 xor	 ecx, eax
  011df	41 8b c4	 mov	 eax, r12d
  011e2	c1 c8 06	 ror	 eax, 6
  011e5	33 c8		 xor	 ecx, eax
  011e7	41 33 d5	 xor	 edx, r13d
  011ea	03 4d d4	 add	 ecx, DWORD PTR W$[rbp-76]
  011ed	41 23 d4	 and	 edx, r12d
  011f0	8b c3		 mov	 eax, ebx
  011f2	33 d6		 xor	 edx, esi
  011f4	03 d1		 add	 edx, ecx
  011f6	8b cb		 mov	 ecx, ebx
  011f8	44 8d 84 3a 24
	06 99 d6	 lea	 r8d, DWORD PTR [rdx+rdi-694614492]

; 196  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],46,0xf40e3585);

  01200	41 8b d5	 mov	 edx, r13d
  01203	8b fb		 mov	 edi, ebx
  01205	45 03 c8	 add	 r9d, r8d
  01208	c1 c9 0d	 ror	 ecx, 13
  0120b	c1 c0 0a	 rol	 eax, 10
  0120e	33 c8		 xor	 ecx, eax
  01210	41 33 d4	 xor	 edx, r12d
  01213	41 0b fb	 or	 edi, r11d
  01216	41 23 d1	 and	 edx, r9d
  01219	41 23 fa	 and	 edi, r10d
  0121c	8b c3		 mov	 eax, ebx
  0121e	c1 c8 02	 ror	 eax, 2
  01221	41 33 d5	 xor	 edx, r13d
  01224	33 c8		 xor	 ecx, eax
  01226	8b c3		 mov	 eax, ebx
  01228	41 23 c3	 and	 eax, r11d
  0122b	0b f8		 or	 edi, eax
  0122d	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  01231	41 8b c9	 mov	 ecx, r9d
  01234	03 f8		 add	 edi, eax
  01236	c1 c9 0b	 ror	 ecx, 11
  01239	41 8b c1	 mov	 eax, r9d
  0123c	c1 c0 07	 rol	 eax, 7
  0123f	33 c8		 xor	 ecx, eax
  01241	41 8b c1	 mov	 eax, r9d
  01244	c1 c8 06	 ror	 eax, 6
  01247	33 c8		 xor	 ecx, eax
  01249	8b c7		 mov	 eax, edi
  0124b	03 4d d8	 add	 ecx, DWORD PTR W$[rbp-72]
  0124e	03 d1		 add	 edx, ecx
  01250	8b cf		 mov	 ecx, edi
  01252	44 8d 84 32 85
	35 0e f4	 lea	 r8d, DWORD PTR [rdx+rsi-200395387]
  0125a	8b f3		 mov	 esi, ebx

; 197  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],47,0x106aa070);

  0125c	41 8b d1	 mov	 edx, r9d
  0125f	45 03 d0	 add	 r10d, r8d
  01262	c1 c9 0d	 ror	 ecx, 13
  01265	c1 c0 0a	 rol	 eax, 10
  01268	33 c8		 xor	 ecx, eax
  0126a	0b f7		 or	 esi, edi
  0126c	41 33 d4	 xor	 edx, r12d
  0126f	41 23 f3	 and	 esi, r11d
  01272	41 23 d2	 and	 edx, r10d
  01275	8b c7		 mov	 eax, edi
  01277	c1 c8 02	 ror	 eax, 2
  0127a	41 33 d4	 xor	 edx, r12d
  0127d	33 c8		 xor	 ecx, eax
  0127f	8b c3		 mov	 eax, ebx
  01281	23 c7		 and	 eax, edi
  01283	0b f0		 or	 esi, eax
  01285	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  01289	41 8b ca	 mov	 ecx, r10d
  0128c	03 f0		 add	 esi, eax
  0128e	c1 c9 0b	 ror	 ecx, 11
  01291	41 8b c2	 mov	 eax, r10d
  01294	c1 c0 07	 rol	 eax, 7
  01297	33 c8		 xor	 ecx, eax
  01299	41 8b c2	 mov	 eax, r10d
  0129c	c1 c8 06	 ror	 eax, 6
  0129f	33 c8		 xor	 ecx, eax
  012a1	8b c6		 mov	 eax, esi
  012a3	03 4d dc	 add	 ecx, DWORD PTR W$[rbp-68]
  012a6	03 d1		 add	 edx, ecx
  012a8	8b ce		 mov	 ecx, esi
  012aa	46 8d 84 2a 70
	a0 6a 10	 lea	 r8d, DWORD PTR [rdx+r13+275423344]
  012b2	44 8b ef	 mov	 r13d, edi
  012b5	45 03 d8	 add	 r11d, r8d
  012b8	c1 c9 0d	 ror	 ecx, 13
  012bb	c1 c0 0a	 rol	 eax, 10
  012be	33 c8		 xor	 ecx, eax
  012c0	8b c6		 mov	 eax, esi
  012c2	44 0b ee	 or	 r13d, esi
  012c5	c1 c8 02	 ror	 eax, 2
  012c8	33 c8		 xor	 ecx, eax
  012ca	44 23 eb	 and	 r13d, ebx
  012cd	8b c7		 mov	 eax, edi

; 198  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],48,0x19a4c116);

  012cf	41 8b d2	 mov	 edx, r10d
  012d2	23 c6		 and	 eax, esi
  012d4	41 33 d1	 xor	 edx, r9d
  012d7	44 0b e8	 or	 r13d, eax
  012da	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  012de	41 23 d3	 and	 edx, r11d
  012e1	44 03 e8	 add	 r13d, eax
  012e4	41 33 d1	 xor	 edx, r9d
  012e7	41 8b cb	 mov	 ecx, r11d
  012ea	c1 c9 0b	 ror	 ecx, 11
  012ed	41 8b c3	 mov	 eax, r11d
  012f0	c1 c0 07	 rol	 eax, 7
  012f3	33 c8		 xor	 ecx, eax
  012f5	41 8b c3	 mov	 eax, r11d
  012f8	c1 c8 06	 ror	 eax, 6
  012fb	33 c8		 xor	 ecx, eax
  012fd	41 8b c5	 mov	 eax, r13d
  01300	03 4d e0	 add	 ecx, DWORD PTR W$[rbp-64]
  01303	03 d1		 add	 edx, ecx
  01305	41 8b cd	 mov	 ecx, r13d
  01308	46 8d 84 22 16
	c1 a4 19	 lea	 r8d, DWORD PTR [rdx+r12+430227734]
  01310	44 8b e6	 mov	 r12d, esi

; 199  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],49,0x1e376c08);

  01313	41 8b d2	 mov	 edx, r10d
  01316	41 03 d8	 add	 ebx, r8d
  01319	c1 c9 0d	 ror	 ecx, 13
  0131c	c1 c0 0a	 rol	 eax, 10
  0131f	33 c8		 xor	 ecx, eax
  01321	45 0b e5	 or	 r12d, r13d
  01324	41 33 d3	 xor	 edx, r11d
  01327	44 23 e7	 and	 r12d, edi
  0132a	23 d3		 and	 edx, ebx
  0132c	41 8b c5	 mov	 eax, r13d
  0132f	c1 c8 02	 ror	 eax, 2
  01332	41 33 d2	 xor	 edx, r10d
  01335	33 c8		 xor	 ecx, eax
  01337	8b c6		 mov	 eax, esi
  01339	41 23 c5	 and	 eax, r13d
  0133c	44 0b e0	 or	 r12d, eax
  0133f	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  01343	8b cb		 mov	 ecx, ebx
  01345	44 03 e0	 add	 r12d, eax
  01348	c1 c9 0b	 ror	 ecx, 11
  0134b	8b c3		 mov	 eax, ebx
  0134d	c1 c0 07	 rol	 eax, 7
  01350	33 c8		 xor	 ecx, eax
  01352	8b c3		 mov	 eax, ebx
  01354	c1 c8 06	 ror	 eax, 6
  01357	33 c8		 xor	 ecx, eax
  01359	41 8b c4	 mov	 eax, r12d
  0135c	03 4d e4	 add	 ecx, DWORD PTR W$[rbp-60]
  0135f	03 d1		 add	 edx, ecx
  01361	41 8b cc	 mov	 ecx, r12d
  01364	46 8d 84 0a 08
	6c 37 1e	 lea	 r8d, DWORD PTR [rdx+r9+506948616]
  0136c	45 8b cd	 mov	 r9d, r13d

; 200  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],50,0x2748774c);

  0136f	8b d3		 mov	 edx, ebx
  01371	41 03 f8	 add	 edi, r8d
  01374	c1 c9 0d	 ror	 ecx, 13
  01377	c1 c0 0a	 rol	 eax, 10
  0137a	33 c8		 xor	 ecx, eax
  0137c	45 0b cc	 or	 r9d, r12d
  0137f	41 33 d3	 xor	 edx, r11d
  01382	44 23 ce	 and	 r9d, esi
  01385	41 8b c4	 mov	 eax, r12d
  01388	23 d7		 and	 edx, edi
  0138a	c1 c8 02	 ror	 eax, 2
  0138d	33 c8		 xor	 ecx, eax
  0138f	41 8b c5	 mov	 eax, r13d
  01392	41 23 c4	 and	 eax, r12d
  01395	44 0b c8	 or	 r9d, eax
  01398	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  0139c	8b cf		 mov	 ecx, edi
  0139e	44 03 c8	 add	 r9d, eax
  013a1	c1 c9 0b	 ror	 ecx, 11
  013a4	8b c7		 mov	 eax, edi
  013a6	c1 c0 07	 rol	 eax, 7
  013a9	33 c8		 xor	 ecx, eax
  013ab	8b c7		 mov	 eax, edi
  013ad	c1 c8 06	 ror	 eax, 6
  013b0	33 c8		 xor	 ecx, eax
  013b2	41 33 d3	 xor	 edx, r11d
  013b5	03 4d e8	 add	 ecx, DWORD PTR W$[rbp-56]
  013b8	41 8b c1	 mov	 eax, r9d
  013bb	03 d1		 add	 edx, ecx
  013bd	41 8b c9	 mov	 ecx, r9d
  013c0	46 8d 84 12 4c
	77 48 27	 lea	 r8d, DWORD PTR [rdx+r10+659060556]
  013c8	45 8b d1	 mov	 r10d, r9d

; 201  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],51,0x34b0bcb5);

  013cb	8b d3		 mov	 edx, ebx
  013cd	41 03 f0	 add	 esi, r8d
  013d0	c1 c9 0d	 ror	 ecx, 13
  013d3	c1 c0 0a	 rol	 eax, 10
  013d6	33 c8		 xor	 ecx, eax
  013d8	33 d7		 xor	 edx, edi
  013da	45 0b d4	 or	 r10d, r12d
  013dd	23 d6		 and	 edx, esi
  013df	45 23 d5	 and	 r10d, r13d
  013e2	41 8b c1	 mov	 eax, r9d
  013e5	c1 c8 02	 ror	 eax, 2
  013e8	33 d3		 xor	 edx, ebx
  013ea	33 c8		 xor	 ecx, eax
  013ec	41 8b c1	 mov	 eax, r9d
  013ef	41 23 c4	 and	 eax, r12d
  013f2	44 0b d0	 or	 r10d, eax
  013f5	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  013f9	8b ce		 mov	 ecx, esi
  013fb	44 03 d0	 add	 r10d, eax
  013fe	c1 c9 0b	 ror	 ecx, 11
  01401	8b c6		 mov	 eax, esi
  01403	c1 c0 07	 rol	 eax, 7

; 202  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],52,0x391c0cb3);

  01406	45 8b f2	 mov	 r14d, r10d
  01409	33 c8		 xor	 ecx, eax
  0140b	8b c6		 mov	 eax, esi
  0140d	c1 c8 06	 ror	 eax, 6
  01410	33 c8		 xor	 ecx, eax
  01412	41 8b c2	 mov	 eax, r10d
  01415	03 4d ec	 add	 ecx, DWORD PTR W$[rbp-52]
  01418	03 d1		 add	 edx, ecx
  0141a	41 8b ca	 mov	 ecx, r10d
  0141d	46 8d 84 1a b5
	bc b0 34	 lea	 r8d, DWORD PTR [rdx+r11+883997877]
  01425	45 8b da	 mov	 r11d, r10d
  01428	8b d7		 mov	 edx, edi
  0142a	45 03 e8	 add	 r13d, r8d
  0142d	c1 c9 0d	 ror	 ecx, 13
  01430	c1 c0 0a	 rol	 eax, 10
  01433	33 c8		 xor	 ecx, eax
  01435	45 0b d9	 or	 r11d, r9d
  01438	33 d6		 xor	 edx, esi
  0143a	45 23 dc	 and	 r11d, r12d
  0143d	41 23 d5	 and	 edx, r13d
  01440	41 8b c2	 mov	 eax, r10d
  01443	c1 c8 02	 ror	 eax, 2
  01446	33 d7		 xor	 edx, edi
  01448	33 c8		 xor	 ecx, eax
  0144a	41 8b c2	 mov	 eax, r10d
  0144d	41 23 c1	 and	 eax, r9d
  01450	44 0b d8	 or	 r11d, eax
  01453	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  01457	41 8b cd	 mov	 ecx, r13d
  0145a	44 03 d8	 add	 r11d, eax
  0145d	c1 c9 0b	 ror	 ecx, 11
  01460	41 8b c5	 mov	 eax, r13d
  01463	c1 c0 07	 rol	 eax, 7
  01466	45 0b f3	 or	 r14d, r11d
  01469	33 c8		 xor	 ecx, eax
  0146b	41 8b c5	 mov	 eax, r13d
  0146e	45 23 f1	 and	 r14d, r9d
  01471	c1 c8 06	 ror	 eax, 6
  01474	33 c8		 xor	 ecx, eax
  01476	41 8b c3	 mov	 eax, r11d
  01479	03 4d f0	 add	 ecx, DWORD PTR W$[rbp-48]
  0147c	03 d1		 add	 edx, ecx
  0147e	41 8b cb	 mov	 ecx, r11d
  01481	44 8d 84 1a b3
	0c 1c 39	 lea	 r8d, DWORD PTR [rdx+rbx+958139571]
  01489	45 03 e0	 add	 r12d, r8d
  0148c	c1 c9 0d	 ror	 ecx, 13
  0148f	c1 c0 0a	 rol	 eax, 10
  01492	33 c8		 xor	 ecx, eax
  01494	41 8b c3	 mov	 eax, r11d
  01497	c1 c8 02	 ror	 eax, 2
  0149a	33 c8		 xor	 ecx, eax
  0149c	41 8b c2	 mov	 eax, r10d
  0149f	41 23 c3	 and	 eax, r11d
  014a2	44 0b f0	 or	 r14d, eax
  014a5	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]

; 203  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],53,0x4ed8aa4a);

  014a9	41 8b cc	 mov	 ecx, r12d
  014ac	44 03 f0	 add	 r14d, eax
  014af	c1 c9 0b	 ror	 ecx, 11
  014b2	41 8b c4	 mov	 eax, r12d
  014b5	c1 c0 07	 rol	 eax, 7
  014b8	8b d6		 mov	 edx, esi
  014ba	45 8b fe	 mov	 r15d, r14d
  014bd	33 c8		 xor	 ecx, eax
  014bf	41 33 d5	 xor	 edx, r13d
  014c2	45 0b fb	 or	 r15d, r11d
  014c5	41 23 d4	 and	 edx, r12d
  014c8	45 23 fa	 and	 r15d, r10d
  014cb	41 8b c4	 mov	 eax, r12d
  014ce	c1 c8 06	 ror	 eax, 6
  014d1	33 d6		 xor	 edx, esi

; 204  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],54,0x5b9cca4f);

  014d3	41 8b de	 mov	 ebx, r14d
  014d6	33 c8		 xor	 ecx, eax
  014d8	41 8b c6	 mov	 eax, r14d
  014db	03 4d f4	 add	 ecx, DWORD PTR W$[rbp-44]
  014de	03 d1		 add	 edx, ecx
  014e0	41 8b ce	 mov	 ecx, r14d
  014e3	44 8d 84 3a 4a
	aa d8 4e	 lea	 r8d, DWORD PTR [rdx+rdi+1322822218]
  014eb	41 8b d5	 mov	 edx, r13d
  014ee	45 03 c8	 add	 r9d, r8d
  014f1	c1 c9 0d	 ror	 ecx, 13
  014f4	c1 c0 0a	 rol	 eax, 10
  014f7	33 c8		 xor	 ecx, eax
  014f9	41 33 d4	 xor	 edx, r12d
  014fc	41 8b c6	 mov	 eax, r14d
  014ff	c1 c8 02	 ror	 eax, 2
  01502	41 23 d1	 and	 edx, r9d
  01505	33 c8		 xor	 ecx, eax
  01507	41 33 d5	 xor	 edx, r13d
  0150a	41 8b c6	 mov	 eax, r14d
  0150d	41 23 c3	 and	 eax, r11d
  01510	44 0b f8	 or	 r15d, eax
  01513	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  01517	41 8b c9	 mov	 ecx, r9d
  0151a	44 03 f8	 add	 r15d, eax
  0151d	c1 c9 0b	 ror	 ecx, 11
  01520	41 8b c1	 mov	 eax, r9d
  01523	c1 c0 07	 rol	 eax, 7
  01526	41 0b df	 or	 ebx, r15d
  01529	33 c8		 xor	 ecx, eax
  0152b	41 23 db	 and	 ebx, r11d
  0152e	41 8b c1	 mov	 eax, r9d
  01531	c1 c8 06	 ror	 eax, 6
  01534	33 c8		 xor	 ecx, eax
  01536	41 8b c7	 mov	 eax, r15d
  01539	03 4d f8	 add	 ecx, DWORD PTR W$[rbp-40]
  0153c	03 d1		 add	 edx, ecx
  0153e	41 8b cf	 mov	 ecx, r15d
  01541	44 8d 84 32 4f
	ca 9c 5b	 lea	 r8d, DWORD PTR [rdx+rsi+1537002063]

; 205  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],55,0x682e6ff3);

  01549	41 8b d1	 mov	 edx, r9d
  0154c	45 03 d0	 add	 r10d, r8d
  0154f	c1 c9 0d	 ror	 ecx, 13
  01552	c1 c0 0a	 rol	 eax, 10
  01555	33 c8		 xor	 ecx, eax
  01557	41 33 d4	 xor	 edx, r12d
  0155a	41 8b c7	 mov	 eax, r15d
  0155d	c1 c8 02	 ror	 eax, 2
  01560	41 23 d2	 and	 edx, r10d
  01563	33 c8		 xor	 ecx, eax
  01565	41 8b c6	 mov	 eax, r14d
  01568	41 33 d4	 xor	 edx, r12d
  0156b	41 23 c7	 and	 eax, r15d
  0156e	0b d8		 or	 ebx, eax
  01570	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  01574	41 8b ca	 mov	 ecx, r10d
  01577	03 d8		 add	 ebx, eax
  01579	c1 c9 0b	 ror	 ecx, 11
  0157c	41 8b c2	 mov	 eax, r10d
  0157f	c1 c0 07	 rol	 eax, 7
  01582	33 c8		 xor	 ecx, eax
  01584	41 8b c2	 mov	 eax, r10d
  01587	c1 c8 06	 ror	 eax, 6
  0158a	33 c8		 xor	 ecx, eax
  0158c	03 4d fc	 add	 ecx, DWORD PTR W$[rbp-36]
  0158f	03 d1		 add	 edx, ecx
  01591	46 8d 84 2a f3
	6f 2e 68	 lea	 r8d, DWORD PTR [rdx+r13+1747873779]
  01599	45 8b ef	 mov	 r13d, r15d
  0159c	8b cb		 mov	 ecx, ebx
  0159e	45 03 d8	 add	 r11d, r8d
  015a1	c1 c9 0d	 ror	 ecx, 13
  015a4	44 0b eb	 or	 r13d, ebx
  015a7	45 23 ee	 and	 r13d, r14d
  015aa	8b c3		 mov	 eax, ebx

; 206  :     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],56,0x748f82ee);

  015ac	41 8b d2	 mov	 edx, r10d
  015af	c1 c0 0a	 rol	 eax, 10
  015b2	41 33 d1	 xor	 edx, r9d
  015b5	33 c8		 xor	 ecx, eax
  015b7	41 23 d3	 and	 edx, r11d
  015ba	8b c3		 mov	 eax, ebx
  015bc	c1 c8 02	 ror	 eax, 2
  015bf	41 33 d1	 xor	 edx, r9d
  015c2	33 c8		 xor	 ecx, eax
  015c4	41 8b c7	 mov	 eax, r15d
  015c7	23 c3		 and	 eax, ebx
  015c9	44 0b e8	 or	 r13d, eax
  015cc	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  015d0	41 8b cb	 mov	 ecx, r11d
  015d3	44 03 e8	 add	 r13d, eax
  015d6	c1 c9 0b	 ror	 ecx, 11
  015d9	41 8b c3	 mov	 eax, r11d
  015dc	c1 c0 07	 rol	 eax, 7

; 207  :     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],57,0x78a5636f);

  015df	41 8b f5	 mov	 esi, r13d
  015e2	33 c8		 xor	 ecx, eax
  015e4	41 8b c3	 mov	 eax, r11d
  015e7	c1 c8 06	 ror	 eax, 6
  015ea	33 c8		 xor	 ecx, eax
  015ec	41 8b c5	 mov	 eax, r13d
  015ef	03 4d 00	 add	 ecx, DWORD PTR W$[rbp-32]
  015f2	03 d1		 add	 edx, ecx
  015f4	41 8b cd	 mov	 ecx, r13d
  015f7	46 8d 84 22 ee
	82 8f 74	 lea	 r8d, DWORD PTR [rdx+r12+1955562222]
  015ff	44 8b e3	 mov	 r12d, ebx
  01602	41 8b d2	 mov	 edx, r10d
  01605	45 03 f0	 add	 r14d, r8d
  01608	c1 c9 0d	 ror	 ecx, 13
  0160b	c1 c0 0a	 rol	 eax, 10
  0160e	33 c8		 xor	 ecx, eax
  01610	45 0b e5	 or	 r12d, r13d
  01613	41 33 d3	 xor	 edx, r11d
  01616	45 23 e7	 and	 r12d, r15d
  01619	41 23 d6	 and	 edx, r14d
  0161c	41 8b c5	 mov	 eax, r13d
  0161f	c1 c8 02	 ror	 eax, 2
  01622	41 33 d2	 xor	 edx, r10d
  01625	33 c8		 xor	 ecx, eax
  01627	8b c3		 mov	 eax, ebx
  01629	41 23 c5	 and	 eax, r13d
  0162c	44 0b e0	 or	 r12d, eax
  0162f	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  01633	41 8b ce	 mov	 ecx, r14d
  01636	44 03 e0	 add	 r12d, eax
  01639	c1 c9 0b	 ror	 ecx, 11
  0163c	41 8b c6	 mov	 eax, r14d
  0163f	c1 c0 07	 rol	 eax, 7
  01642	41 0b f4	 or	 esi, r12d
  01645	33 c8		 xor	 ecx, eax
  01647	41 8b c6	 mov	 eax, r14d
  0164a	23 f3		 and	 esi, ebx
  0164c	c1 c8 06	 ror	 eax, 6
  0164f	33 c8		 xor	 ecx, eax
  01651	41 8b c4	 mov	 eax, r12d
  01654	03 4d 04	 add	 ecx, DWORD PTR W$[rbp-28]
  01657	03 d1		 add	 edx, ecx
  01659	41 8b cc	 mov	 ecx, r12d
  0165c	46 8d 84 0a 6f
	63 a5 78	 lea	 r8d, DWORD PTR [rdx+r9+2024104815]
  01664	45 03 f8	 add	 r15d, r8d
  01667	c1 c9 0d	 ror	 ecx, 13
  0166a	c1 c0 0a	 rol	 eax, 10
  0166d	33 c8		 xor	 ecx, eax
  0166f	41 8b c4	 mov	 eax, r12d
  01672	c1 c8 02	 ror	 eax, 2
  01675	33 c8		 xor	 ecx, eax
  01677	41 8b c5	 mov	 eax, r13d
  0167a	41 23 c4	 and	 eax, r12d
  0167d	0b f0		 or	 esi, eax
  0167f	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  01683	03 f0		 add	 esi, eax

; 208  :     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],58,0x84c87814);

  01685	41 8b cf	 mov	 ecx, r15d
  01688	41 8b c7	 mov	 eax, r15d
  0168b	c1 c9 0b	 ror	 ecx, 11
  0168e	c1 c0 07	 rol	 eax, 7
  01691	41 8b d6	 mov	 edx, r14d
  01694	33 c8		 xor	 ecx, eax
  01696	41 33 d3	 xor	 edx, r11d
  01699	41 8b c7	 mov	 eax, r15d
  0169c	c1 c8 06	 ror	 eax, 6
  0169f	41 23 d7	 and	 edx, r15d
  016a2	8b fe		 mov	 edi, esi
  016a4	33 c8		 xor	 ecx, eax
  016a6	41 33 d3	 xor	 edx, r11d
  016a9	41 0b fc	 or	 edi, r12d
  016ac	03 4d 08	 add	 ecx, DWORD PTR W$[rbp-24]
  016af	41 23 fd	 and	 edi, r13d
  016b2	8b c6		 mov	 eax, esi
  016b4	03 d1		 add	 edx, ecx
  016b6	8b ce		 mov	 ecx, esi
  016b8	46 8d 84 12 14
	78 c8 84	 lea	 r8d, DWORD PTR [rdx+r10-2067236844]

; 209  :     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],59,0x8cc70208);

  016c0	41 8b d6	 mov	 edx, r14d
  016c3	41 03 d8	 add	 ebx, r8d
  016c6	c1 c9 0d	 ror	 ecx, 13
  016c9	c1 c0 0a	 rol	 eax, 10
  016cc	33 c8		 xor	 ecx, eax
  016ce	41 33 d7	 xor	 edx, r15d
  016d1	89 5d 68	 mov	 DWORD PTR S$53$[rbp-256], ebx

; 210  :     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],60,0x90befffa);

  016d4	44 8b 4d 68	 mov	 r9d, DWORD PTR S$53$[rbp-256]
  016d8	23 d3		 and	 edx, ebx
  016da	8b c6		 mov	 eax, esi
  016dc	c1 c8 02	 ror	 eax, 2
  016df	41 33 d6	 xor	 edx, r14d
  016e2	33 c8		 xor	 ecx, eax
  016e4	8b c6		 mov	 eax, esi
  016e6	41 23 c4	 and	 eax, r12d
  016e9	0b f8		 or	 edi, eax
  016eb	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  016ef	8b cb		 mov	 ecx, ebx
  016f1	03 f8		 add	 edi, eax
  016f3	c1 c9 0b	 ror	 ecx, 11
  016f6	8b c3		 mov	 eax, ebx
  016f8	c1 c0 07	 rol	 eax, 7
  016fb	33 c8		 xor	 ecx, eax
  016fd	8b c3		 mov	 eax, ebx
  016ff	8b df		 mov	 ebx, edi
  01701	c1 c8 06	 ror	 eax, 6
  01704	0b de		 or	 ebx, esi
  01706	33 c8		 xor	 ecx, eax
  01708	41 23 dc	 and	 ebx, r12d
  0170b	8b c7		 mov	 eax, edi
  0170d	03 4d 0c	 add	 ecx, DWORD PTR W$[rbp-20]
  01710	03 d1		 add	 edx, ecx
  01712	8b cf		 mov	 ecx, edi
  01714	46 8d 84 1a 08
	02 c7 8c	 lea	 r8d, DWORD PTR [rdx+r11-1933114872]
  0171c	41 8b d7	 mov	 edx, r15d
  0171f	45 03 e8	 add	 r13d, r8d
  01722	c1 c9 0d	 ror	 ecx, 13
  01725	c1 c0 0a	 rol	 eax, 10
  01728	33 c8		 xor	 ecx, eax
  0172a	41 33 d1	 xor	 edx, r9d
  0172d	8b c7		 mov	 eax, edi
  0172f	c1 c8 02	 ror	 eax, 2
  01732	41 23 d5	 and	 edx, r13d
  01735	33 c8		 xor	 ecx, eax
  01737	8b c7		 mov	 eax, edi
  01739	41 33 d7	 xor	 edx, r15d
  0173c	23 c6		 and	 eax, esi
  0173e	0b d8		 or	 ebx, eax
  01740	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  01744	41 8b cd	 mov	 ecx, r13d
  01747	03 d8		 add	 ebx, eax
  01749	c1 c9 0b	 ror	 ecx, 11
  0174c	41 8b c5	 mov	 eax, r13d
  0174f	c1 c0 07	 rol	 eax, 7
  01752	33 c8		 xor	 ecx, eax
  01754	41 8b c5	 mov	 eax, r13d
  01757	c1 c8 06	 ror	 eax, 6
  0175a	33 c8		 xor	 ecx, eax
  0175c	03 4d 10	 add	 ecx, DWORD PTR W$[rbp-16]
  0175f	03 d1		 add	 edx, ecx
  01761	46 8d 84 32 fa
	ff be 90	 lea	 r8d, DWORD PTR [rdx+r14-1866530822]

; 211  :     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],61,0xa4506ceb);

  01769	41 8b d1	 mov	 edx, r9d
  0176c	44 8b df	 mov	 r11d, edi
  0176f	45 03 e0	 add	 r12d, r8d
  01772	41 33 d5	 xor	 edx, r13d
  01775	44 0b db	 or	 r11d, ebx
  01778	41 23 d4	 and	 edx, r12d
  0177b	44 23 de	 and	 r11d, esi
  0177e	8b cb		 mov	 ecx, ebx
  01780	c1 c9 0d	 ror	 ecx, 13
  01783	41 33 d1	 xor	 edx, r9d
  01786	8b c3		 mov	 eax, ebx
  01788	c1 c0 0a	 rol	 eax, 10
  0178b	33 c8		 xor	 ecx, eax
  0178d	8b c3		 mov	 eax, ebx
  0178f	c1 c8 02	 ror	 eax, 2
  01792	33 c8		 xor	 ecx, eax
  01794	8b c7		 mov	 eax, edi
  01796	23 c3		 and	 eax, ebx
  01798	44 0b d8	 or	 r11d, eax
  0179b	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  0179f	41 8b cc	 mov	 ecx, r12d
  017a2	44 03 d8	 add	 r11d, eax
  017a5	c1 c9 0b	 ror	 ecx, 11
  017a8	41 8b c4	 mov	 eax, r12d
  017ab	c1 c0 07	 rol	 eax, 7
  017ae	45 8b d3	 mov	 r10d, r11d
  017b1	33 c8		 xor	 ecx, eax
  017b3	44 0b d3	 or	 r10d, ebx
  017b6	41 8b c4	 mov	 eax, r12d
  017b9	c1 c8 06	 ror	 eax, 6
  017bc	44 23 d7	 and	 r10d, edi
  017bf	33 c8		 xor	 ecx, eax
  017c1	41 8b c3	 mov	 eax, r11d
  017c4	03 4d 14	 add	 ecx, DWORD PTR W$[rbp-12]
  017c7	03 d1		 add	 edx, ecx
  017c9	41 8b cb	 mov	 ecx, r11d
  017cc	46 8d 84 3a eb
	6c 50 a4	 lea	 r8d, DWORD PTR [rdx+r15-1538233109]

; 212  :     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],62,0xbef9a3f7);

  017d4	41 8b d5	 mov	 edx, r13d
  017d7	41 03 f0	 add	 esi, r8d
  017da	c1 c9 0d	 ror	 ecx, 13
  017dd	c1 c0 0a	 rol	 eax, 10
  017e0	33 c8		 xor	 ecx, eax
  017e2	41 33 d4	 xor	 edx, r12d
  017e5	41 8b c3	 mov	 eax, r11d
  017e8	c1 c8 02	 ror	 eax, 2
  017eb	23 d6		 and	 edx, esi
  017ed	33 c8		 xor	 ecx, eax
  017ef	41 33 d5	 xor	 edx, r13d
  017f2	41 8b c3	 mov	 eax, r11d
  017f5	23 c3		 and	 eax, ebx
  017f7	44 0b d0	 or	 r10d, eax
  017fa	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  017fe	8b ce		 mov	 ecx, esi
  01800	44 03 d0	 add	 r10d, eax
  01803	c1 c9 0b	 ror	 ecx, 11
  01806	8b c6		 mov	 eax, esi
  01808	c1 c0 07	 rol	 eax, 7
  0180b	33 c8		 xor	 ecx, eax
  0180d	8b c6		 mov	 eax, esi
  0180f	c1 c8 06	 ror	 eax, 6
  01812	33 c8		 xor	 ecx, eax
  01814	41 8b c2	 mov	 eax, r10d
  01817	03 4d 18	 add	 ecx, DWORD PTR W$[rbp-8]
  0181a	03 d1		 add	 edx, ecx
  0181c	41 8b ca	 mov	 ecx, r10d
  0181f	46 8d 84 0a f7
	a3 f9 be	 lea	 r8d, DWORD PTR [rdx+r9-1090935817]
  01827	45 8b cb	 mov	 r9d, r11d
  0182a	41 03 f8	 add	 edi, r8d
  0182d	c1 c9 0d	 ror	 ecx, 13
  01830	c1 c0 0a	 rol	 eax, 10
  01833	33 c8		 xor	 ecx, eax
  01835	45 0b ca	 or	 r9d, r10d
  01838	41 8b c2	 mov	 eax, r10d
  0183b	c1 c8 02	 ror	 eax, 2
  0183e	44 23 cb	 and	 r9d, ebx
  01841	33 c8		 xor	 ecx, eax
  01843	41 8b c3	 mov	 eax, r11d
  01846	41 23 c2	 and	 eax, r10d
  01849	44 0b c8	 or	 r9d, eax
  0184c	41 8d 04 08	 lea	 eax, DWORD PTR [r8+rcx]
  01850	44 03 c8	 add	 r9d, eax

; 213  :     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],63,0xc67178f2);

  01853	8b c7		 mov	 eax, edi
  01855	8b cf		 mov	 ecx, edi
  01857	c1 c9 0b	 ror	 ecx, 11
  0185a	c1 c0 07	 rol	 eax, 7
  0185d	8b d6		 mov	 edx, esi
  0185f	33 c8		 xor	 ecx, eax
  01861	41 33 d4	 xor	 edx, r12d
  01864	8b c7		 mov	 eax, edi
  01866	c1 c8 06	 ror	 eax, 6
  01869	23 d7		 and	 edx, edi
  0186b	33 c8		 xor	 ecx, eax
  0186d	41 33 d4	 xor	 edx, r12d
  01870	41 8b c1	 mov	 eax, r9d
  01873	03 4d 1c	 add	 ecx, DWORD PTR W$[rbp-4]
  01876	03 d1		 add	 edx, ecx
  01878	41 8b ca	 mov	 ecx, r10d
  0187b	46 8d 84 2a f2
	78 71 c6	 lea	 r8d, DWORD PTR [rdx+r13-965641998]
  01883	41 0b c9	 or	 ecx, r9d
  01886	41 8b d1	 mov	 edx, r9d
  01889	41 03 d8	 add	 ebx, r8d
  0188c	c1 ca 0d	 ror	 edx, 13
  0188f	c1 c0 0a	 rol	 eax, 10
  01892	33 d0		 xor	 edx, eax
  01894	41 23 cb	 and	 ecx, r11d
  01897	41 8b c1	 mov	 eax, r9d
  0189a	c1 c8 02	 ror	 eax, 2
  0189d	33 d0		 xor	 edx, eax
  0189f	41 8b c2	 mov	 eax, r10d
  018a2	41 23 c1	 and	 eax, r9d
  018a5	0b c8		 or	 ecx, eax
  018a7	41 8d 04 10	 lea	 eax, DWORD PTR [r8+rdx]
  018ab	03 c8		 add	 ecx, eax

; 214  : 
; 215  : #undef RND
; 216  : 
; 217  :     /* feedback */
; 218  :     for (i = 0; i < 8; i++) {
; 219  :         sha_info->digest[i] = sha_info->digest[i] + S[i];

  018ad	48 8b 45 60	 mov	 rax, QWORD PTR sha_info$[rbp-256]
  018b1	01 58 70	 add	 DWORD PTR [rax+112], ebx
  018b4	01 48 60	 add	 DWORD PTR [rax+96], ecx
  018b7	44 01 48 64	 add	 DWORD PTR [rax+100], r9d
  018bb	44 01 50 68	 add	 DWORD PTR [rax+104], r10d
  018bf	44 01 58 6c	 add	 DWORD PTR [rax+108], r11d
  018c3	01 78 74	 add	 DWORD PTR [rax+116], edi
  018c6	01 70 78	 add	 DWORD PTR [rax+120], esi

; 220  :     }
; 221  : 
; 222  : }

  018c9	48 8b 9c 24 70
	01 00 00	 mov	 rbx, QWORD PTR [rsp+368]
  018d1	44 01 60 7c	 add	 DWORD PTR [rax+124], r12d
  018d5	48 81 c4 20 01
	00 00		 add	 rsp, 288		; 00000120H
  018dc	41 5f		 pop	 r15
  018de	41 5e		 pop	 r14
  018e0	41 5d		 pop	 r13
  018e2	41 5c		 pop	 r12
  018e4	5f		 pop	 rdi
  018e5	5e		 pop	 rsi
  018e6	5d		 pop	 rbp
  018e7	c3		 ret	 0
sha_transform ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT sha_init
_TEXT	SEGMENT
sha_info$ = 8
sha_init PROC						; COMDAT

; 231  :     TestEndianness(sha_info->Endianness)
; 232  :     sha_info->digest[0] = 0x6A09E667L;
; 233  :     sha_info->digest[1] = 0xBB67AE85L;
; 234  :     sha_info->digest[2] = 0x3C6EF372L;
; 235  :     sha_info->digest[3] = 0xA54FF53AL;
; 236  :     sha_info->digest[4] = 0x510E527FL;
; 237  :     sha_info->digest[5] = 0x9B05688CL;
; 238  :     sha_info->digest[6] = 0x1F83D9ABL;
; 239  :     sha_info->digest[7] = 0x5BE0CD19L;
; 240  :     sha_info->count_lo = 0L;

  00000	33 c0		 xor	 eax, eax
  00002	c7 41 60 67 e6
	09 6a		 mov	 DWORD PTR [rcx+96], 1779033703 ; 6a09e667H
  00009	c7 41 64 85 ae
	67 bb		 mov	 DWORD PTR [rcx+100], -1150833019 ; bb67ae85H
  00010	c7 41 68 72 f3
	6e 3c		 mov	 DWORD PTR [rcx+104], 1013904242 ; 3c6ef372H
  00017	c7 41 6c 3a f5
	4f a5		 mov	 DWORD PTR [rcx+108], -1521486534 ; a54ff53aH
  0001e	c7 41 70 7f 52
	0e 51		 mov	 DWORD PTR [rcx+112], 1359893119 ; 510e527fH

; 241  :     sha_info->count_hi = 0L;

  00025	89 81 84 00 00
	00		 mov	 DWORD PTR [rcx+132], eax
  0002b	c7 41 74 8c 68
	05 9b		 mov	 DWORD PTR [rcx+116], -1694144372 ; 9b05688cH
  00032	c7 41 78 ab d9
	83 1f		 mov	 DWORD PTR [rcx+120], 528734635 ; 1f83d9abH
  00039	48 c7 41 7c 19
	cd e0 5b	 mov	 QWORD PTR [rcx+124], 1541459225 ; 5be0cd19H
  00041	48 c7 81 c8 00
	00 00 01 00 00
	00		 mov	 QWORD PTR [rcx+200], 1

; 242  :     sha_info->local = 0;
; 243  :     sha_info->digestsize = 32;

  0004c	c7 81 d0 00 00
	00 20 00 00 00	 mov	 DWORD PTR [rcx+208], 32	; 00000020H

; 244  : }

  00056	c3		 ret	 0
sha_init ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT sha224_init
_TEXT	SEGMENT
sha_info$ = 8
sha224_init PROC					; COMDAT

; 249  :     TestEndianness(sha_info->Endianness)
; 250  :     sha_info->digest[0] = 0xc1059ed8L;
; 251  :     sha_info->digest[1] = 0x367cd507L;
; 252  :     sha_info->digest[2] = 0x3070dd17L;
; 253  :     sha_info->digest[3] = 0xf70e5939L;
; 254  :     sha_info->digest[4] = 0xffc00b31L;
; 255  :     sha_info->digest[5] = 0x68581511L;
; 256  :     sha_info->digest[6] = 0x64f98fa7L;
; 257  :     sha_info->digest[7] = 0xbefa4fa4L;
; 258  :     sha_info->count_lo = 0L;

  00000	33 c0		 xor	 eax, eax
  00002	c7 41 60 d8 9e
	05 c1		 mov	 DWORD PTR [rcx+96], -1056596264 ; c1059ed8H
  00009	c7 41 64 07 d5
	7c 36		 mov	 DWORD PTR [rcx+100], 914150663 ; 367cd507H
  00010	c7 41 68 17 dd
	70 30		 mov	 DWORD PTR [rcx+104], 812702999 ; 3070dd17H
  00017	c7 41 6c 39 59
	0e f7		 mov	 DWORD PTR [rcx+108], -150054599 ; f70e5939H
  0001e	c7 41 70 31 0b
	c0 ff		 mov	 DWORD PTR [rcx+112], -4191439 ; ffc00b31H
  00025	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax
  0002c	c7 41 74 11 15
	58 68		 mov	 DWORD PTR [rcx+116], 1750603025 ; 68581511H
  00033	c7 41 78 a7 8f
	f9 64		 mov	 DWORD PTR [rcx+120], 1694076839 ; 64f98fa7H
  0003a	c7 41 7c a4 4f
	fa be		 mov	 DWORD PTR [rcx+124], -1090891868 ; befa4fa4H
  00041	48 c7 81 c8 00
	00 00 01 00 00
	00		 mov	 QWORD PTR [rcx+200], 1

; 259  :     sha_info->count_hi = 0L;
; 260  :     sha_info->local = 0;
; 261  :     sha_info->digestsize = 28;

  0004c	c7 81 d0 00 00
	00 1c 00 00 00	 mov	 DWORD PTR [rcx+208], 28

; 262  : }

  00056	c3		 ret	 0
sha224_init ENDP
_TEXT	ENDS
EXTRN	memcpy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sha_update DD imagerel sha_update
	DD	imagerel sha_update+326
	DD	imagerel $unwind$sha_update
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sha_update DD 084301H
	DD	063443H
	DD	08640fH
	DD	07540fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT sha_update
_TEXT	SEGMENT
sha_info$ = 48
buffer$ = 56
count$ = 64
sha_update PROC						; COMDAT

; 269  : {

  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 270  :     Py_ssize_t i;
; 271  :     SHA_INT32 clo;
; 272  : 
; 273  :     clo = sha_info->count_lo + ((SHA_INT32) count << 3);

  0000f	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [rcx+128]
  00015	48 8b f9	 mov	 rdi, rcx
  00018	49 8b f0	 mov	 rsi, r8
  0001b	42 8d 0c c0	 lea	 ecx, DWORD PTR [rax+r8*8]
  0001f	48 8b ea	 mov	 rbp, rdx

; 274  :     if (clo < sha_info->count_lo) {

  00022	3b c8		 cmp	 ecx, eax
  00024	73 06		 jae	 SHORT $LN7@sha_update

; 275  :         ++sha_info->count_hi;

  00026	ff 87 84 00 00
	00		 inc	 DWORD PTR [rdi+132]
$LN7@sha_update:

; 276  :     }
; 277  :     sha_info->count_lo = clo;

  0002c	89 8f 80 00 00
	00		 mov	 DWORD PTR [rdi+128], ecx

; 278  :     sha_info->count_hi += (SHA_INT32) count >> 29;
; 279  :     if (sha_info->local) {

  00032	8b 8f cc 00 00
	00		 mov	 ecx, DWORD PTR [rdi+204]
  00038	41 8b c0	 mov	 eax, r8d
  0003b	c1 e8 1d	 shr	 eax, 29
  0003e	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00043	01 87 84 00 00
	00		 add	 DWORD PTR [rdi+132], eax
  00049	85 c9		 test	 ecx, ecx
  0004b	74 45		 je	 SHORT $LN10@sha_update

; 280  :         i = SHA_BLOCKSIZE - sha_info->local;

  0004d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00052	2b c1		 sub	 eax, ecx
  00054	48 63 d8	 movsxd	 rbx, eax

; 281  :         if (i > count) {
; 282  :             i = count;
; 283  :         }
; 284  :         memcpy(((SHA_BYTE *) sha_info->data) + sha_info->local, buffer, i);

  00057	48 63 c1	 movsxd	 rax, ecx
  0005a	49 3b d8	 cmp	 rbx, r8
  0005d	48 8d 8c 38 88
	00 00 00	 lea	 rcx, QWORD PTR [rax+rdi+136]
  00065	49 0f 4f d8	 cmovg	 rbx, r8
  00069	4c 8b c3	 mov	 r8, rbx
  0006c	e8 00 00 00 00	 call	 memcpy

; 285  :         count -= i;
; 286  :         buffer += i;
; 287  :         sha_info->local += i;

  00071	01 9f cc 00 00
	00		 add	 DWORD PTR [rdi+204], ebx
  00077	48 2b f3	 sub	 rsi, rbx
  0007a	48 03 eb	 add	 rbp, rbx

; 288  :         if (sha_info->local == SHA_BLOCKSIZE) {

  0007d	83 bf cc 00 00
	00 40		 cmp	 DWORD PTR [rdi+204], 64	; 00000040H
  00084	0f 85 a7 00 00
	00		 jne	 $LN8@sha_update

; 289  :             sha_transform(sha_info);

  0008a	48 8b cf	 mov	 rcx, rdi
  0008d	e8 00 00 00 00	 call	 sha_transform
$LN10@sha_update:

; 290  :         }
; 291  :         else {
; 292  :             return;
; 293  :         }
; 294  :     }
; 295  :     while (count >= SHA_BLOCKSIZE) {

  00092	48 83 fe 40	 cmp	 rsi, 64			; 00000040H
  00096	0f 8c 7d 00 00
	00		 jl	 $LN1@sha_update
  0009c	48 8b de	 mov	 rbx, rsi
  0009f	48 c1 eb 06	 shr	 rbx, 6
  000a3	48 8b c3	 mov	 rax, rbx
  000a6	48 f7 d8	 neg	 rax
  000a9	48 c1 e0 06	 shl	 rax, 6
  000ad	48 03 f0	 add	 rsi, rax
$LL2@sha_update:

; 296  :         memcpy(sha_info->data, buffer, SHA_BLOCKSIZE);

  000b0	48 8b 45 00	 mov	 rax, QWORD PTR [rbp]

; 297  :         buffer += SHA_BLOCKSIZE;
; 298  :         count -= SHA_BLOCKSIZE;
; 299  :         sha_transform(sha_info);

  000b4	48 8b cf	 mov	 rcx, rdi
  000b7	48 83 c5 40	 add	 rbp, 64			; 00000040H
  000bb	48 89 87 88 00
	00 00		 mov	 QWORD PTR [rdi+136], rax
  000c2	48 8b 45 c8	 mov	 rax, QWORD PTR [rbp-56]
  000c6	48 89 87 90 00
	00 00		 mov	 QWORD PTR [rdi+144], rax
  000cd	48 8b 45 d0	 mov	 rax, QWORD PTR [rbp-48]
  000d1	48 89 87 98 00
	00 00		 mov	 QWORD PTR [rdi+152], rax
  000d8	48 8b 45 d8	 mov	 rax, QWORD PTR [rbp-40]
  000dc	48 89 87 a0 00
	00 00		 mov	 QWORD PTR [rdi+160], rax
  000e3	48 8b 45 e0	 mov	 rax, QWORD PTR [rbp-32]
  000e7	48 89 87 a8 00
	00 00		 mov	 QWORD PTR [rdi+168], rax
  000ee	48 8b 45 e8	 mov	 rax, QWORD PTR [rbp-24]
  000f2	48 89 87 b0 00
	00 00		 mov	 QWORD PTR [rdi+176], rax
  000f9	48 8b 45 f0	 mov	 rax, QWORD PTR [rbp-16]
  000fd	48 89 87 b8 00
	00 00		 mov	 QWORD PTR [rdi+184], rax
  00104	48 8b 45 f8	 mov	 rax, QWORD PTR [rbp-8]
  00108	48 89 87 c0 00
	00 00		 mov	 QWORD PTR [rdi+192], rax
  0010f	e8 00 00 00 00	 call	 sha_transform
  00114	48 ff cb	 dec	 rbx
  00117	75 97		 jne	 SHORT $LL2@sha_update
$LN1@sha_update:

; 300  :     }
; 301  :     memcpy(sha_info->data, buffer, count);

  00119	48 8d 8f 88 00
	00 00		 lea	 rcx, QWORD PTR [rdi+136]
  00120	4c 8b c6	 mov	 r8, rsi
  00123	48 8b d5	 mov	 rdx, rbp
  00126	e8 00 00 00 00	 call	 memcpy

; 302  :     sha_info->local = count;

  0012b	89 b7 cc 00 00
	00		 mov	 DWORD PTR [rdi+204], esi
$LN8@sha_update:

; 303  : }

  00131	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00136	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0013b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00140	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00144	5f		 pop	 rdi
  00145	c3		 ret	 0
sha_update ENDP
_TEXT	ENDS
EXTRN	memset:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sha_final DD imagerel sha_final
	DD	imagerel sha_final+515
	DD	imagerel $unwind$sha_final
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sha_final DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT sha_final
_TEXT	SEGMENT
digest$ = 48
sha_info$ = 56
sha_final PROC						; COMDAT

; 309  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 310  :     int count;
; 311  :     SHA_INT32 lo_bit_count, hi_bit_count;
; 312  : 
; 313  :     lo_bit_count = sha_info->count_lo;

  00014	8b ba 80 00 00
	00		 mov	 edi, DWORD PTR [rdx+128]

; 314  :     hi_bit_count = sha_info->count_hi;

  0001a	8b aa 84 00 00
	00		 mov	 ebp, DWORD PTR [rdx+132]
  00020	48 8b da	 mov	 rbx, rdx

; 315  :     count = (int) ((lo_bit_count >> 3) & 0x3f);

  00023	8b d7		 mov	 edx, edi
  00025	48 8b f1	 mov	 rsi, rcx
  00028	c1 ea 03	 shr	 edx, 3
  0002b	83 e2 3f	 and	 edx, 63			; 0000003fH

; 316  :     ((SHA_BYTE *) sha_info->data)[count++] = 0x80;

  0002e	48 63 c2	 movsxd	 rax, edx
  00031	ff c2		 inc	 edx
  00033	c6 84 18 88 00
	00 00 80	 mov	 BYTE PTR [rax+rbx+136], 128 ; 00000080H

; 317  :     if (count > SHA_BLOCKSIZE - 8) {

  0003b	83 fa 38	 cmp	 edx, 56			; 00000038H
  0003e	7e 59		 jle	 SHORT $LN2@sha_final

; 318  :         memset(((SHA_BYTE *) sha_info->data) + count, 0,
; 319  :                SHA_BLOCKSIZE - count);

  00040	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00045	2b c2		 sub	 eax, edx
  00047	4c 63 c0	 movsxd	 r8, eax
  0004a	48 63 c2	 movsxd	 rax, edx
  0004d	33 d2		 xor	 edx, edx
  0004f	48 8d 8c 18 88
	00 00 00	 lea	 rcx, QWORD PTR [rax+rbx+136]
  00057	e8 00 00 00 00	 call	 memset

; 320  :         sha_transform(sha_info);

  0005c	48 8b cb	 mov	 rcx, rbx
  0005f	e8 00 00 00 00	 call	 sha_transform

; 321  :         memset((SHA_BYTE *) sha_info->data, 0, SHA_BLOCKSIZE - 8);

  00064	33 c0		 xor	 eax, eax
  00066	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax
  0006d	48 89 83 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rax
  00074	48 89 83 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rax
  0007b	48 89 83 a0 00
	00 00		 mov	 QWORD PTR [rbx+160], rax
  00082	48 89 83 a8 00
	00 00		 mov	 QWORD PTR [rbx+168], rax
  00089	48 89 83 b0 00
	00 00		 mov	 QWORD PTR [rbx+176], rax
  00090	48 89 83 b8 00
	00 00		 mov	 QWORD PTR [rbx+184], rax

; 322  :     }
; 323  :     else {

  00097	eb 1c		 jmp	 SHORT $LN1@sha_final
$LN2@sha_final:

; 324  :         memset(((SHA_BYTE *) sha_info->data) + count, 0,
; 325  :                SHA_BLOCKSIZE - 8 - count);

  00099	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  0009e	2b c2		 sub	 eax, edx
  000a0	4c 63 c0	 movsxd	 r8, eax
  000a3	48 63 c2	 movsxd	 rax, edx
  000a6	33 d2		 xor	 edx, edx
  000a8	48 8d 8c 18 88
	00 00 00	 lea	 rcx, QWORD PTR [rax+rbx+136]
  000b0	e8 00 00 00 00	 call	 memset
$LN1@sha_final:

; 326  :     }
; 327  : 
; 328  :     /* GJS: note that we add the hi/lo in big-endian. sha_transform will
; 329  :        swap these values into host-order. */
; 330  :     sha_info->data[56] = (hi_bit_count >> 24) & 0xff;

  000b5	8b c5		 mov	 eax, ebp

; 331  :     sha_info->data[57] = (hi_bit_count >> 16) & 0xff;
; 332  :     sha_info->data[58] = (hi_bit_count >>  8) & 0xff;
; 333  :     sha_info->data[59] = (hi_bit_count >>  0) & 0xff;
; 334  :     sha_info->data[60] = (lo_bit_count >> 24) & 0xff;
; 335  :     sha_info->data[61] = (lo_bit_count >> 16) & 0xff;
; 336  :     sha_info->data[62] = (lo_bit_count >>  8) & 0xff;
; 337  :     sha_info->data[63] = (lo_bit_count >>  0) & 0xff;
; 338  :     sha_transform(sha_info);

  000b7	48 8b cb	 mov	 rcx, rbx
  000ba	40 88 ab c3 00
	00 00		 mov	 BYTE PTR [rbx+195], bpl
  000c1	c1 e8 18	 shr	 eax, 24
  000c4	40 88 bb c7 00
	00 00		 mov	 BYTE PTR [rbx+199], dil
  000cb	88 83 c0 00 00
	00		 mov	 BYTE PTR [rbx+192], al
  000d1	8b c5		 mov	 eax, ebp
  000d3	c1 e8 10	 shr	 eax, 16
  000d6	88 83 c1 00 00
	00		 mov	 BYTE PTR [rbx+193], al
  000dc	8b c5		 mov	 eax, ebp
  000de	c1 e8 08	 shr	 eax, 8
  000e1	88 83 c2 00 00
	00		 mov	 BYTE PTR [rbx+194], al
  000e7	8b c7		 mov	 eax, edi
  000e9	c1 e8 18	 shr	 eax, 24
  000ec	88 83 c4 00 00
	00		 mov	 BYTE PTR [rbx+196], al
  000f2	8b c7		 mov	 eax, edi
  000f4	c1 e8 10	 shr	 eax, 16
  000f7	88 83 c5 00 00
	00		 mov	 BYTE PTR [rbx+197], al
  000fd	8b c7		 mov	 eax, edi
  000ff	c1 e8 08	 shr	 eax, 8
  00102	88 83 c6 00 00
	00		 mov	 BYTE PTR [rbx+198], al
  00108	e8 00 00 00 00	 call	 sha_transform

; 339  :     digest[ 0] = (unsigned char) ((sha_info->digest[0] >> 24) & 0xff);

  0010d	44 0f b6 5b 63	 movzx	 r11d, BYTE PTR [rbx+99]
  00112	44 88 1e	 mov	 BYTE PTR [rsi], r11b

; 340  :     digest[ 1] = (unsigned char) ((sha_info->digest[0] >> 16) & 0xff);

  00115	0f b6 43 62	 movzx	 eax, BYTE PTR [rbx+98]
  00119	88 46 01	 mov	 BYTE PTR [rsi+1], al

; 341  :     digest[ 2] = (unsigned char) ((sha_info->digest[0] >>  8) & 0xff);

  0011c	0f b6 43 61	 movzx	 eax, BYTE PTR [rbx+97]
  00120	88 46 02	 mov	 BYTE PTR [rsi+2], al

; 342  :     digest[ 3] = (unsigned char) ((sha_info->digest[0]      ) & 0xff);

  00123	0f b6 43 60	 movzx	 eax, BYTE PTR [rbx+96]
  00127	88 46 03	 mov	 BYTE PTR [rsi+3], al

; 343  :     digest[ 4] = (unsigned char) ((sha_info->digest[1] >> 24) & 0xff);

  0012a	0f b6 43 67	 movzx	 eax, BYTE PTR [rbx+103]
  0012e	88 46 04	 mov	 BYTE PTR [rsi+4], al

; 344  :     digest[ 5] = (unsigned char) ((sha_info->digest[1] >> 16) & 0xff);

  00131	0f b6 43 66	 movzx	 eax, BYTE PTR [rbx+102]
  00135	88 46 05	 mov	 BYTE PTR [rsi+5], al

; 345  :     digest[ 6] = (unsigned char) ((sha_info->digest[1] >>  8) & 0xff);

  00138	0f b6 43 65	 movzx	 eax, BYTE PTR [rbx+101]
  0013c	88 46 06	 mov	 BYTE PTR [rsi+6], al

; 346  :     digest[ 7] = (unsigned char) ((sha_info->digest[1]      ) & 0xff);

  0013f	0f b6 43 64	 movzx	 eax, BYTE PTR [rbx+100]
  00143	88 46 07	 mov	 BYTE PTR [rsi+7], al

; 347  :     digest[ 8] = (unsigned char) ((sha_info->digest[2] >> 24) & 0xff);

  00146	0f b6 43 6b	 movzx	 eax, BYTE PTR [rbx+107]
  0014a	88 46 08	 mov	 BYTE PTR [rsi+8], al

; 348  :     digest[ 9] = (unsigned char) ((sha_info->digest[2] >> 16) & 0xff);

  0014d	0f b6 43 6a	 movzx	 eax, BYTE PTR [rbx+106]
  00151	88 46 09	 mov	 BYTE PTR [rsi+9], al

; 349  :     digest[10] = (unsigned char) ((sha_info->digest[2] >>  8) & 0xff);

  00154	0f b6 43 69	 movzx	 eax, BYTE PTR [rbx+105]
  00158	88 46 0a	 mov	 BYTE PTR [rsi+10], al

; 350  :     digest[11] = (unsigned char) ((sha_info->digest[2]      ) & 0xff);

  0015b	0f b6 43 68	 movzx	 eax, BYTE PTR [rbx+104]
  0015f	88 46 0b	 mov	 BYTE PTR [rsi+11], al

; 351  :     digest[12] = (unsigned char) ((sha_info->digest[3] >> 24) & 0xff);

  00162	0f b6 43 6f	 movzx	 eax, BYTE PTR [rbx+111]
  00166	88 46 0c	 mov	 BYTE PTR [rsi+12], al

; 352  :     digest[13] = (unsigned char) ((sha_info->digest[3] >> 16) & 0xff);

  00169	0f b6 43 6e	 movzx	 eax, BYTE PTR [rbx+110]
  0016d	88 46 0d	 mov	 BYTE PTR [rsi+13], al

; 353  :     digest[14] = (unsigned char) ((sha_info->digest[3] >>  8) & 0xff);

  00170	0f b6 43 6d	 movzx	 eax, BYTE PTR [rbx+109]
  00174	88 46 0e	 mov	 BYTE PTR [rsi+14], al

; 354  :     digest[15] = (unsigned char) ((sha_info->digest[3]      ) & 0xff);

  00177	0f b6 43 6c	 movzx	 eax, BYTE PTR [rbx+108]
  0017b	88 46 0f	 mov	 BYTE PTR [rsi+15], al

; 355  :     digest[16] = (unsigned char) ((sha_info->digest[4] >> 24) & 0xff);

  0017e	0f b6 43 73	 movzx	 eax, BYTE PTR [rbx+115]
  00182	88 46 10	 mov	 BYTE PTR [rsi+16], al

; 356  :     digest[17] = (unsigned char) ((sha_info->digest[4] >> 16) & 0xff);

  00185	0f b6 43 72	 movzx	 eax, BYTE PTR [rbx+114]
  00189	88 46 11	 mov	 BYTE PTR [rsi+17], al

; 357  :     digest[18] = (unsigned char) ((sha_info->digest[4] >>  8) & 0xff);

  0018c	0f b6 43 71	 movzx	 eax, BYTE PTR [rbx+113]
  00190	88 46 12	 mov	 BYTE PTR [rsi+18], al

; 358  :     digest[19] = (unsigned char) ((sha_info->digest[4]      ) & 0xff);

  00193	0f b6 43 70	 movzx	 eax, BYTE PTR [rbx+112]
  00197	88 46 13	 mov	 BYTE PTR [rsi+19], al

; 359  :     digest[20] = (unsigned char) ((sha_info->digest[5] >> 24) & 0xff);

  0019a	0f b6 43 77	 movzx	 eax, BYTE PTR [rbx+119]
  0019e	88 46 14	 mov	 BYTE PTR [rsi+20], al

; 360  :     digest[21] = (unsigned char) ((sha_info->digest[5] >> 16) & 0xff);

  001a1	0f b6 43 76	 movzx	 eax, BYTE PTR [rbx+118]
  001a5	88 46 15	 mov	 BYTE PTR [rsi+21], al

; 361  :     digest[22] = (unsigned char) ((sha_info->digest[5] >>  8) & 0xff);

  001a8	0f b6 43 75	 movzx	 eax, BYTE PTR [rbx+117]
  001ac	88 46 16	 mov	 BYTE PTR [rsi+22], al

; 362  :     digest[23] = (unsigned char) ((sha_info->digest[5]      ) & 0xff);

  001af	0f b6 43 74	 movzx	 eax, BYTE PTR [rbx+116]
  001b3	88 46 17	 mov	 BYTE PTR [rsi+23], al

; 363  :     digest[24] = (unsigned char) ((sha_info->digest[6] >> 24) & 0xff);

  001b6	0f b6 43 7b	 movzx	 eax, BYTE PTR [rbx+123]
  001ba	88 46 18	 mov	 BYTE PTR [rsi+24], al

; 364  :     digest[25] = (unsigned char) ((sha_info->digest[6] >> 16) & 0xff);

  001bd	0f b6 43 7a	 movzx	 eax, BYTE PTR [rbx+122]
  001c1	88 46 19	 mov	 BYTE PTR [rsi+25], al

; 365  :     digest[26] = (unsigned char) ((sha_info->digest[6] >>  8) & 0xff);

  001c4	0f b6 43 79	 movzx	 eax, BYTE PTR [rbx+121]
  001c8	88 46 1a	 mov	 BYTE PTR [rsi+26], al

; 366  :     digest[27] = (unsigned char) ((sha_info->digest[6]      ) & 0xff);

  001cb	0f b6 43 78	 movzx	 eax, BYTE PTR [rbx+120]
  001cf	88 46 1b	 mov	 BYTE PTR [rsi+27], al

; 367  :     digest[28] = (unsigned char) ((sha_info->digest[7] >> 24) & 0xff);

  001d2	0f b6 43 7f	 movzx	 eax, BYTE PTR [rbx+127]
  001d6	88 46 1c	 mov	 BYTE PTR [rsi+28], al

; 368  :     digest[29] = (unsigned char) ((sha_info->digest[7] >> 16) & 0xff);

  001d9	0f b6 43 7e	 movzx	 eax, BYTE PTR [rbx+126]

; 369  :     digest[30] = (unsigned char) ((sha_info->digest[7] >>  8) & 0xff);
; 370  :     digest[31] = (unsigned char) ((sha_info->digest[7]      ) & 0xff);
; 371  : }

  001dd	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  001e2	88 46 1d	 mov	 BYTE PTR [rsi+29], al
  001e5	0f b6 43 7d	 movzx	 eax, BYTE PTR [rbx+125]
  001e9	88 46 1e	 mov	 BYTE PTR [rsi+30], al
  001ec	0f b6 43 7c	 movzx	 eax, BYTE PTR [rbx+124]
  001f0	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001f5	88 46 1f	 mov	 BYTE PTR [rsi+31], al
  001f8	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  001fd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00201	5f		 pop	 rdi
  00202	c3		 ret	 0
sha_final ENDP
_TEXT	ENDS
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$newSHA224object DD imagerel newSHA224object
	DD	imagerel newSHA224object+38
	DD	imagerel $unwind$newSHA224object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newSHA224object DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT newSHA224object
_TEXT	SEGMENT
newSHA224object PROC					; COMDAT

; 385  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 386  :     return (SHAobject *)PyObject_New(SHAobject, &SHA224type);

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:SHA224type
  00010	85 c0		 test	 eax, eax
  00012	74 09		 je	 SHORT $LN3@newSHA224o

; 387  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	e9 00 00 00 00	 jmp	 _PxObject_New
$LN3@newSHA224o:
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	e9 00 00 00 00	 jmp	 _PyObject_New
newSHA224object ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$newSHA256object DD imagerel newSHA256object
	DD	imagerel newSHA256object+38
	DD	imagerel $unwind$newSHA256object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newSHA256object DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT newSHA256object
_TEXT	SEGMENT
newSHA256object PROC					; COMDAT

; 391  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 392  :     return (SHAobject *)PyObject_New(SHAobject, &SHA256type);

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:SHA256type
  00010	85 c0		 test	 eax, eax
  00012	74 09		 je	 SHORT $LN3@newSHA256o

; 393  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	e9 00 00 00 00	 jmp	 _PxObject_New
$LN3@newSHA256o:
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	e9 00 00 00 00	 jmp	 _PyObject_New
newSHA256object ENDP
_TEXT	ENDS
EXTRN	PyObject_Free:PROC
; Function compile flags: /Ogtpy
;	COMDAT SHA_dealloc
_TEXT	SEGMENT
ptr$ = 8
SHA_dealloc PROC					; COMDAT

; 400  :     PyObject_Del(ptr);
; 401  : }

  00000	e9 00 00 00 00	 jmp	 PyObject_Free
SHA_dealloc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SHA256_copy DD imagerel SHA256_copy
	DD	imagerel SHA256_copy+77
	DD	imagerel $unwind$SHA256_copy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SHA256_copy DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT SHA256_copy
_TEXT	SEGMENT
self$ = 48
unused$ = 56
SHA256_copy PROC					; COMDAT

; 410  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 411  :     SHAobject *newobj;
; 412  : 
; 413  :     if (Py_TYPE(self) == &SHA256type) {

  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:SHA256type
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00014	75 13		 jne	 SHORT $LN4@SHA256_cop

; 414  :         if ( (newobj = newSHA256object())==NULL)

  00016	e8 00 00 00 00	 call	 newSHA256object
  0001b	48 8b d0	 mov	 rdx, rax
  0001e	48 85 c0	 test	 rax, rax
  00021	75 19		 jne	 SHORT $LN1@SHA256_cop

; 423  : }

  00023	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00027	5b		 pop	 rbx
  00028	c3		 ret	 0
$LN4@SHA256_cop:

; 415  :             return NULL;
; 416  :     } else {
; 417  :         if ( (newobj = newSHA224object())==NULL)

  00029	e8 00 00 00 00	 call	 newSHA224object
  0002e	48 8b d0	 mov	 rdx, rax
  00031	48 85 c0	 test	 rax, rax
  00034	75 06		 jne	 SHORT $LN1@SHA256_cop

; 423  : }

  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5b		 pop	 rbx
  0003b	c3		 ret	 0
$LN1@SHA256_cop:

; 418  :             return NULL;
; 419  :     }
; 420  : 
; 421  :     SHAcopy(self, newobj);

  0003c	48 8b cb	 mov	 rcx, rbx
  0003f	e8 00 00 00 00	 call	 SHAcopy

; 422  :     return (PyObject *)newobj;

  00044	48 8b c2	 mov	 rax, rdx

; 423  : }

  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5b		 pop	 rbx
  0004c	c3		 ret	 0
SHA256_copy ENDP
_TEXT	ENDS
EXTRN	PyBytes_FromStringAndSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$SHA256_digest DD imagerel SHA256_digest
	DD	imagerel SHA256_digest+63
	DD	imagerel $unwind$SHA256_digest
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SHA256_digest DD 030901H
	DD	0240109H
	DD	03002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT SHA256_digest
_TEXT	SEGMENT
digest$ = 32
temp$ = 64
self$ = 304
unused$ = 312
SHA256_digest PROC					; COMDAT

; 430  : {

  00000	40 53		 push	 rbx
  00002	48 81 ec 20 01
	00 00		 sub	 rsp, 288		; 00000120H

; 431  :     unsigned char digest[SHA_DIGESTSIZE];
; 432  :     SHAobject temp;
; 433  : 
; 434  :     SHAcopy(self, &temp);

  00009	48 8d 54 24 40	 lea	 rdx, QWORD PTR temp$[rsp]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	e8 00 00 00 00	 call	 SHAcopy

; 435  :     sha_final(digest, &temp);

  00016	48 8d 54 24 40	 lea	 rdx, QWORD PTR temp$[rsp]
  0001b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR digest$[rsp]
  00020	e8 00 00 00 00	 call	 sha_final

; 436  :     return PyBytes_FromStringAndSize((const char *)digest, self->digestsize);

  00025	48 63 93 d0 00
	00 00		 movsxd	 rdx, DWORD PTR [rbx+208]
  0002c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR digest$[rsp]
  00031	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 437  : }

  00036	48 81 c4 20 01
	00 00		 add	 rsp, 288		; 00000120H
  0003d	5b		 pop	 rbx
  0003e	c3		 ret	 0
SHA256_digest ENDP
_TEXT	ENDS
EXTRN	Py_hexdigits:QWORD
EXTRN	PyUnicode_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$SHA256_hexdigest DD imagerel SHA256_hexdigest
	DD	imagerel SHA256_hexdigest+202
	DD	imagerel $unwind$SHA256_hexdigest
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SHA256_hexdigest DD 030901H
	DD	0240109H
	DD	03002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT SHA256_hexdigest
_TEXT	SEGMENT
digest$ = 32
temp$ = 64
self$ = 304
unused$ = 312
SHA256_hexdigest PROC					; COMDAT

; 444  : {

  00000	40 53		 push	 rbx
  00002	48 81 ec 20 01
	00 00		 sub	 rsp, 288		; 00000120H

; 445  :     unsigned char digest[SHA_DIGESTSIZE];
; 446  :     SHAobject temp;
; 447  :     PyObject *retval;
; 448  :     Py_UCS1 *hex_digest;
; 449  :     int i, j;
; 450  : 
; 451  :     /* Get the raw (binary) digest value */
; 452  :     SHAcopy(self, &temp);

  00009	48 8d 54 24 40	 lea	 rdx, QWORD PTR temp$[rsp]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	e8 00 00 00 00	 call	 SHAcopy

; 453  :     sha_final(digest, &temp);

  00016	48 8d 54 24 40	 lea	 rdx, QWORD PTR temp$[rsp]
  0001b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR digest$[rsp]
  00020	e8 00 00 00 00	 call	 sha_final

; 454  : 
; 455  :     /* Create a new string */
; 456  :     retval = PyUnicode_New(self->digestsize * 2, 127);

  00025	8b 83 d0 00 00
	00		 mov	 eax, DWORD PTR [rbx+208]
  0002b	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00030	03 c0		 add	 eax, eax
  00032	48 63 c8	 movsxd	 rcx, eax
  00035	e8 00 00 00 00	 call	 PyUnicode_New
  0003a	4c 8b d8	 mov	 r11, rax

; 457  :     if (!retval)

  0003d	48 85 c0	 test	 rax, rax
  00040	75 09		 jne	 SHORT $LN4@SHA256_hex

; 473  : }

  00042	48 81 c4 20 01
	00 00		 add	 rsp, 288		; 00000120H
  00049	5b		 pop	 rbx
  0004a	c3		 ret	 0
$LN4@SHA256_hex:

; 458  :             return NULL;
; 459  :     hex_digest = PyUnicode_1BYTE_DATA(retval);

  0004b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0004e	a8 20		 test	 al, 32			; 00000020H
  00050	74 16		 je	 SHORT $LN9@SHA256_hex
  00052	a8 40		 test	 al, 64			; 00000040H
  00054	74 09		 je	 SHORT $LN7@SHA256_hex
  00056	4d 8d 83 80 00
	00 00		 lea	 r8, QWORD PTR [r11+128]
  0005d	eb 10		 jmp	 SHORT $LN10@SHA256_hex
$LN7@SHA256_hex:
  0005f	4d 8d 83 a0 00
	00 00		 lea	 r8, QWORD PTR [r11+160]
  00066	eb 07		 jmp	 SHORT $LN10@SHA256_hex
$LN9@SHA256_hex:
  00068	4d 8b 83 a0 00
	00 00		 mov	 r8, QWORD PTR [r11+160]
$LN10@SHA256_hex:

; 460  : 
; 461  :     /* Make hex version of the digest */
; 462  :     for(i=j=0; i<self->digestsize; i++) {

  0006f	45 33 c9	 xor	 r9d, r9d
  00072	44 39 8b d0 00
	00 00		 cmp	 DWORD PTR [rbx+208], r9d
  00079	7e 43		 jle	 SHORT $LN1@SHA256_hex
  0007b	4c 8d 54 24 20	 lea	 r10, QWORD PTR digest$[rsp]
$LL3@SHA256_hex:

; 463  :         unsigned char c;
; 464  :         c = (digest[i] >> 4) & 0xf;
; 465  :         hex_digest[j++] = Py_hexdigits[c];

  00080	41 0f b6 12	 movzx	 edx, BYTE PTR [r10]
  00084	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Py_hexdigits
  0008b	41 ff c1	 inc	 r9d
  0008e	8b ca		 mov	 ecx, edx

; 466  :         c = (digest[i] & 0xf);

  00090	83 e2 0f	 and	 edx, 15

; 467  :         hex_digest[j++] = Py_hexdigits[c];

  00093	49 83 c0 02	 add	 r8, 2
  00097	48 c1 e9 04	 shr	 rcx, 4
  0009b	49 ff c2	 inc	 r10
  0009e	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  000a2	41 88 48 fe	 mov	 BYTE PTR [r8-2], cl
  000a6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Py_hexdigits
  000ad	0f b6 0c 02	 movzx	 ecx, BYTE PTR [rdx+rax]
  000b1	41 88 48 ff	 mov	 BYTE PTR [r8-1], cl
  000b5	44 3b 8b d0 00
	00 00		 cmp	 r9d, DWORD PTR [rbx+208]
  000bc	7c c2		 jl	 SHORT $LL3@SHA256_hex
$LN1@SHA256_hex:

; 468  :     }
; 469  : #ifdef Py_DEBUG
; 470  :     assert(_PyUnicode_CheckConsistency(retval, 1));
; 471  : #endif
; 472  :     return retval;

  000be	49 8b c3	 mov	 rax, r11

; 473  : }

  000c1	48 81 c4 20 01
	00 00		 add	 rsp, 288		; 00000120H
  000c8	5b		 pop	 rbx
  000c9	c3		 ret	 0
SHA256_hexdigest ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@ ; `string'
PUBLIC	??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@ ; `string'
PUBLIC	??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@ ; `string'
PUBLIC	??_C@_08BNPIIEPK@O?3update?$AA@			; `string'
EXTRN	PyExc_TypeError:QWORD
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyBuffer_Release:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_BufferError:QWORD
EXTRN	PyObject_GetBuffer:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$SHA256_update DD imagerel SHA256_update
	DD	imagerel SHA256_update+320
	DD	imagerel $unwind$SHA256_update
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SHA256_update DD 020901H
	DD	03002f209H
xdata	ENDS
;	COMDAT ??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@
CONST	SEGMENT
??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@ DB 'object suppo'
	DB	'rting the buffer API required', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
CONST	SEGMENT
??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@ DB 'Buffer mus'
	DB	't be single dimension', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@
CONST	SEGMENT
??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@ DB 'Unicode-obj'
	DB	'ects must be encoded before hashing', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BNPIIEPK@O?3update?$AA@
CONST	SEGMENT
??_C@_08BNPIIEPK@O?3update?$AA@ DB 'O:update', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\sha256module.c
CONST	ENDS
;	COMDAT SHA256_update
_TEXT	SEGMENT
buf$ = 48
self$ = 144
args$ = 152
obj$ = 160
SHA256_update PROC					; COMDAT

; 480  : {

  00000	40 53		 push	 rbx
  00002	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00009	48 8b c2	 mov	 rax, rdx
  0000c	48 8b d9	 mov	 rbx, rcx

; 481  :     PyObject *obj;
; 482  :     Py_buffer buf;
; 483  : 
; 484  :     if (!PyArg_ParseTuple(args, "O:update", &obj))

  0000f	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR obj$[rsp]
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BNPIIEPK@O?3update?$AA@
  0001e	48 8b c8	 mov	 rcx, rax
  00021	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00026	85 c0		 test	 eax, eax

; 485  :         return NULL;

  00028	0f 84 07 01 00
	00		 je	 $LN16@SHA256_upd

; 486  : 
; 487  :     GET_BUFFER_VIEW_OR_ERROUT(obj, &buf);

  0002e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00036	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0003a	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  00044	74 0c		 je	 SHORT $LN5@SHA256_upd
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@
  0004d	e9 d7 00 00 00	 jmp	 $LN17@SHA256_upd
$LN5@SHA256_upd:
  00052	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  00059	48 85 c0	 test	 rax, rax
  0005c	0f 84 c0 00 00
	00		 je	 $LN3@SHA256_upd
  00062	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00066	0f 84 b6 00 00
	00		 je	 $LN3@SHA256_upd
  0006c	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$[rsp]
  00071	45 33 c0	 xor	 r8d, r8d
  00074	e8 00 00 00 00	 call	 PyObject_GetBuffer
  00079	83 f8 ff	 cmp	 eax, -1
  0007c	0f 84 b3 00 00
	00		 je	 $LN16@SHA256_upd
  00082	83 7c 24 54 01	 cmp	 DWORD PTR buf$[rsp+36], 1
  00087	7e 28		 jle	 SHORT $LN7@SHA256_upd
  00089	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BufferError
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
  00097	e8 00 00 00 00	 call	 PyErr_SetString
  0009c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  000a1	e8 00 00 00 00	 call	 PyBuffer_Release
  000a6	33 c0		 xor	 eax, eax

; 494  : }

  000a8	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  000af	5b		 pop	 rbx
  000b0	c3		 ret	 0
$LN7@SHA256_upd:

; 488  : 
; 489  :     sha_update(self, buf.buf, buf.len);

  000b1	4c 8b 44 24 40	 mov	 r8, QWORD PTR buf$[rsp+16]
  000b6	48 8b 54 24 30	 mov	 rdx, QWORD PTR buf$[rsp]
  000bb	48 8b cb	 mov	 rcx, rbx
  000be	e8 00 00 00 00	 call	 sha_update

; 490  : 
; 491  :     PyBuffer_Release(&buf);

  000c3	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  000c8	e8 00 00 00 00	 call	 PyBuffer_Release

; 492  :     Py_INCREF(Py_None);

  000cd	e8 00 00 00 00	 call	 _Py_PXCTX
  000d2	85 c0		 test	 eax, eax
  000d4	75 3c		 jne	 SHORT $LN13@SHA256_upd
  000d6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000eb	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000f1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000f9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fe	85 c0		 test	 eax, eax
  00100	75 09		 jne	 SHORT $LN12@SHA256_upd
  00102	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00109	74 07		 je	 SHORT $LN13@SHA256_upd
$LN12@SHA256_upd:
  0010b	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN13@SHA256_upd:

; 493  :     return Py_None;

  00112	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 494  : }

  00119	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  00120	5b		 pop	 rbx
  00121	c3		 ret	 0
$LN3@SHA256_upd:

; 486  : 
; 487  :     GET_BUFFER_VIEW_OR_ERROUT(obj, &buf);

  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@
$LN17@SHA256_upd:
  00129	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00130	e8 00 00 00 00	 call	 PyErr_SetString
$LN16@SHA256_upd:
  00135	33 c0		 xor	 eax, eax

; 494  : }

  00137	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0013e	5b		 pop	 rbx
  0013f	c3		 ret	 0
SHA256_update ENDP
_TEXT	ENDS
EXTRN	PyLong_FromLong:PROC
; Function compile flags: /Ogtpy
;	COMDAT SHA256_get_block_size
_TEXT	SEGMENT
self$ = 8
closure$ = 16
SHA256_get_block_size PROC				; COMDAT

; 507  :     return PyLong_FromLong(SHA_BLOCKSIZE);

  00000	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H

; 508  : }

  00005	e9 00 00 00 00	 jmp	 PyLong_FromLong
SHA256_get_block_size ENDP
_TEXT	ENDS
PUBLIC	??_C@_06DANBNIHA@SHA224?$AA@			; `string'
PUBLIC	??_C@_06HKIKMHH@SHA256?$AA@			; `string'
EXTRN	PyUnicode_FromStringAndSize:PROC
;	COMDAT ??_C@_06DANBNIHA@SHA224?$AA@
CONST	SEGMENT
??_C@_06DANBNIHA@SHA224?$AA@ DB 'SHA224', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HKIKMHH@SHA256?$AA@
CONST	SEGMENT
??_C@_06HKIKMHH@SHA256?$AA@ DB 'SHA256', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT SHA256_get_name
_TEXT	SEGMENT
self$ = 8
closure$ = 16
SHA256_get_name PROC					; COMDAT

; 513  :     if (((SHAobject *)self)->digestsize == 32)

  00000	83 b9 d0 00 00
	00 20		 cmp	 DWORD PTR [rcx+208], 32	; 00000020H

; 514  :         return PyUnicode_FromStringAndSize("SHA256", 6);

  00007	ba 06 00 00 00	 mov	 edx, 6
  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06HKIKMHH@SHA256?$AA@
  00013	74 07		 je	 SHORT $LN5@SHA256_get

; 515  :     else
; 516  :         return PyUnicode_FromStringAndSize("SHA224", 6);

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DANBNIHA@SHA224?$AA@
$LN5@SHA256_get:

; 517  : }

  0001c	e9 00 00 00 00	 jmp	 PyUnicode_FromStringAndSize
SHA256_get_name ENDP
_TEXT	ENDS
PUBLIC	??_C@_06KJFPOEIK@?$HMO?3new?$AA@		; `string'
EXTRN	PyErr_Occurred:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$SHA256_new DD imagerel SHA256_new
	DD	imagerel SHA256_new+234
	DD	imagerel $unwind$SHA256_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$SHA256_new DD imagerel SHA256_new+234
	DD	imagerel SHA256_new+320
	DD	imagerel $chain$0$SHA256_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$SHA256_new DD imagerel SHA256_new+320
	DD	imagerel SHA256_new+378
	DD	imagerel $chain$2$SHA256_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$SHA256_new DD 020021H
	DD	0103400H
	DD	imagerel SHA256_new
	DD	imagerel SHA256_new+234
	DD	imagerel $unwind$SHA256_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$SHA256_new DD 020821H
	DD	0103408H
	DD	imagerel SHA256_new
	DD	imagerel SHA256_new+234
	DD	imagerel $unwind$SHA256_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SHA256_new DD 020a01H
	DD	011010aH
xdata	ENDS
;	COMDAT ??_C@_06KJFPOEIK@?$HMO?3new?$AA@
CONST	SEGMENT
??_C@_06KJFPOEIK@?$HMO?3new?$AA@ DB '|O:new', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT SHA256_new
_TEXT	SEGMENT
buf$ = 48
self$ = 144
args$ = 152
kwdict$ = 160
data_obj$ = 168
SHA256_new PROC						; COMDAT

; 612  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 613  :     static char *kwlist[] = {"string", NULL};
; 614  :     SHAobject *new;
; 615  :     PyObject *data_obj = NULL;
; 616  :     Py_buffer buf;
; 617  : 
; 618  :     if (!PyArg_ParseTupleAndKeywords(args, kwdict, "|O:new", kwlist,
; 619  :                                      &data_obj)) {

  0000a	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0000e	49 8b c0	 mov	 rax, r8
  00011	4c 8b d2	 mov	 r10, rdx
  00014	49 89 4b 98	 mov	 QWORD PTR [r11-104], rcx
  00018	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??SHA256_new@@9@9
  0001f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06KJFPOEIK@?$HMO?3new?$AA@
  00026	49 8b ca	 mov	 rcx, r10
  00029	48 8b d0	 mov	 rdx, rax
  0002c	49 c7 43 20 00
	00 00 00	 mov	 QWORD PTR [r11+32], 0
  00034	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00039	85 c0		 test	 eax, eax

; 620  :         return NULL;

  0003b	74 34		 je	 SHORT $LN20@SHA256_new

; 621  :     }
; 622  : 
; 623  :     if (data_obj)

  0003d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR data_obj$[rsp]
  00045	48 85 c9	 test	 rcx, rcx
  00048	0f 84 9c 00 00
	00		 je	 $LN11@SHA256_new

; 624  :         GET_BUFFER_VIEW_OR_ERROUT(data_obj, &buf);

  0004e	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00052	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0005c	74 1d		 je	 SHORT $LN10@SHA256_new
  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@
  0006c	e8 00 00 00 00	 call	 PyErr_SetString
$LN20@SHA256_new:
  00071	33 c0		 xor	 eax, eax

; 646  : }

  00073	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0007a	c3		 ret	 0
$LN10@SHA256_new:

; 624  :         GET_BUFFER_VIEW_OR_ERROUT(data_obj, &buf);

  0007b	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  00082	48 85 c0	 test	 rax, rax
  00085	74 46		 je	 SHORT $LN8@SHA256_new
  00087	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0008b	74 40		 je	 SHORT $LN8@SHA256_new
  0008d	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$[rsp]
  00092	45 33 c0	 xor	 r8d, r8d
  00095	e8 00 00 00 00	 call	 PyObject_GetBuffer
  0009a	83 f8 ff	 cmp	 eax, -1
  0009d	74 d2		 je	 SHORT $LN20@SHA256_new
  0009f	83 7c 24 54 01	 cmp	 DWORD PTR buf$[rsp+36], 1
  000a4	7e 44		 jle	 SHORT $LN11@SHA256_new
  000a6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BufferError
  000ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
  000b4	e8 00 00 00 00	 call	 PyErr_SetString
  000b9	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  000be	e8 00 00 00 00	 call	 PyBuffer_Release
  000c3	33 c0		 xor	 eax, eax

; 646  : }

  000c5	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000cc	c3		 ret	 0
$LN8@SHA256_new:

; 624  :         GET_BUFFER_VIEW_OR_ERROUT(data_obj, &buf);

  000cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@
  000db	e8 00 00 00 00	 call	 PyErr_SetString
  000e0	33 c0		 xor	 eax, eax

; 646  : }

  000e2	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000e9	c3		 ret	 0
$LN11@SHA256_new:
  000ea	48 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbx

; 625  : 
; 626  :     if ((new = newSHA256object()) == NULL) {

  000f2	e8 00 00 00 00	 call	 newSHA256object
  000f7	48 8b d8	 mov	 rbx, rax
  000fa	48 85 c0	 test	 rax, rax

; 627  :         if (data_obj)
; 628  :             PyBuffer_Release(&buf);
; 629  :         return NULL;

  000fd	74 1a		 je	 SHORT $LN19@SHA256_new

; 630  :     }
; 631  : 
; 632  :     sha_init(new);

  000ff	48 8b c8	 mov	 rcx, rax
  00102	e8 00 00 00 00	 call	 sha_init

; 633  : 
; 634  :     if (PyErr_Occurred()) {

  00107	e8 00 00 00 00	 call	 PyErr_Occurred
  0010c	48 85 c0	 test	 rax, rax
  0010f	74 2f		 je	 SHORT $LN3@SHA256_new

; 635  :         Py_DECREF(new);

  00111	48 8b cb	 mov	 rcx, rbx
  00114	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@SHA256_new:

; 636  :         if (data_obj)

  00119	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR data_obj$[rsp], 0
  00122	74 0a		 je	 SHORT $LN2@SHA256_new

; 637  :             PyBuffer_Release(&buf);

  00124	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  00129	e8 00 00 00 00	 call	 PyBuffer_Release
$LN2@SHA256_new:

; 638  :         return NULL;

  0012e	33 c0		 xor	 eax, eax
  00130	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]

; 646  : }

  00138	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0013f	c3		 ret	 0
$LN3@SHA256_new:

; 639  :     }
; 640  :     if (data_obj) {

  00140	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR data_obj$[rsp], 0
  00149	74 1c		 je	 SHORT $LN1@SHA256_new

; 641  :         sha_update(new, buf.buf, buf.len);

  0014b	4c 8b 44 24 40	 mov	 r8, QWORD PTR buf$[rsp+16]
  00150	48 8b 54 24 30	 mov	 rdx, QWORD PTR buf$[rsp]
  00155	48 8b cb	 mov	 rcx, rbx
  00158	e8 00 00 00 00	 call	 sha_update

; 642  :         PyBuffer_Release(&buf);

  0015d	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  00162	e8 00 00 00 00	 call	 PyBuffer_Release
$LN1@SHA256_new:

; 643  :     }
; 644  : 
; 645  :     return (PyObject *)new;

  00167	48 8b c3	 mov	 rax, rbx
  0016a	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]

; 646  : }

  00172	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00179	c3		 ret	 0
SHA256_new ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SHA224_new DD imagerel SHA224_new
	DD	imagerel SHA224_new+234
	DD	imagerel $unwind$SHA224_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$SHA224_new DD imagerel SHA224_new+234
	DD	imagerel SHA224_new+320
	DD	imagerel $chain$0$SHA224_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$SHA224_new DD imagerel SHA224_new+320
	DD	imagerel SHA224_new+378
	DD	imagerel $chain$2$SHA224_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$SHA224_new DD 020021H
	DD	0103400H
	DD	imagerel SHA224_new
	DD	imagerel SHA224_new+234
	DD	imagerel $unwind$SHA224_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$SHA224_new DD 020821H
	DD	0103408H
	DD	imagerel SHA224_new
	DD	imagerel SHA224_new+234
	DD	imagerel $unwind$SHA224_new
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SHA224_new DD 020a01H
	DD	011010aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT SHA224_new
_TEXT	SEGMENT
buf$ = 48
self$ = 144
args$ = 152
kwdict$ = 160
data_obj$ = 168
SHA224_new PROC						; COMDAT

; 653  : {

  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 654  :     static char *kwlist[] = {"string", NULL};
; 655  :     SHAobject *new;
; 656  :     PyObject *data_obj = NULL;
; 657  :     Py_buffer buf;
; 658  : 
; 659  :     if (!PyArg_ParseTupleAndKeywords(args, kwdict, "|O:new", kwlist,
; 660  :                                      &data_obj)) {

  0000a	49 8d 4b 20	 lea	 rcx, QWORD PTR [r11+32]
  0000e	49 8b c0	 mov	 rax, r8
  00011	4c 8b d2	 mov	 r10, rdx
  00014	49 89 4b 98	 mov	 QWORD PTR [r11-104], rcx
  00018	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??SHA224_new@@9@9
  0001f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06KJFPOEIK@?$HMO?3new?$AA@
  00026	49 8b ca	 mov	 rcx, r10
  00029	48 8b d0	 mov	 rdx, rax
  0002c	49 c7 43 20 00
	00 00 00	 mov	 QWORD PTR [r11+32], 0
  00034	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00039	85 c0		 test	 eax, eax

; 661  :         return NULL;

  0003b	74 34		 je	 SHORT $LN20@SHA224_new

; 662  :     }
; 663  : 
; 664  :     if (data_obj)

  0003d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR data_obj$[rsp]
  00045	48 85 c9	 test	 rcx, rcx
  00048	0f 84 9c 00 00
	00		 je	 $LN11@SHA224_new

; 665  :         GET_BUFFER_VIEW_OR_ERROUT(data_obj, &buf);

  0004e	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  00052	f7 80 00 01 00
	00 00 00 00 10	 test	 DWORD PTR [rax+256], 268435456 ; 10000000H
  0005c	74 1d		 je	 SHORT $LN10@SHA224_new
  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@
  0006c	e8 00 00 00 00	 call	 PyErr_SetString
$LN20@SHA224_new:
  00071	33 c0		 xor	 eax, eax

; 687  : }

  00073	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0007a	c3		 ret	 0
$LN10@SHA224_new:

; 665  :         GET_BUFFER_VIEW_OR_ERROUT(data_obj, &buf);

  0007b	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  00082	48 85 c0	 test	 rax, rax
  00085	74 46		 je	 SHORT $LN8@SHA224_new
  00087	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0008b	74 40		 je	 SHORT $LN8@SHA224_new
  0008d	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$[rsp]
  00092	45 33 c0	 xor	 r8d, r8d
  00095	e8 00 00 00 00	 call	 PyObject_GetBuffer
  0009a	83 f8 ff	 cmp	 eax, -1
  0009d	74 d2		 je	 SHORT $LN20@SHA224_new
  0009f	83 7c 24 54 01	 cmp	 DWORD PTR buf$[rsp+36], 1
  000a4	7e 44		 jle	 SHORT $LN11@SHA224_new
  000a6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BufferError
  000ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
  000b4	e8 00 00 00 00	 call	 PyErr_SetString
  000b9	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  000be	e8 00 00 00 00	 call	 PyBuffer_Release
  000c3	33 c0		 xor	 eax, eax

; 687  : }

  000c5	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000cc	c3		 ret	 0
$LN8@SHA224_new:

; 665  :         GET_BUFFER_VIEW_OR_ERROUT(data_obj, &buf);

  000cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@
  000db	e8 00 00 00 00	 call	 PyErr_SetString
  000e0	33 c0		 xor	 eax, eax

; 687  : }

  000e2	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000e9	c3		 ret	 0
$LN11@SHA224_new:
  000ea	48 89 9c 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbx

; 666  : 
; 667  :     if ((new = newSHA224object()) == NULL) {

  000f2	e8 00 00 00 00	 call	 newSHA224object
  000f7	48 8b d8	 mov	 rbx, rax
  000fa	48 85 c0	 test	 rax, rax

; 668  :         if (data_obj)
; 669  :             PyBuffer_Release(&buf);
; 670  :         return NULL;

  000fd	74 1a		 je	 SHORT $LN19@SHA224_new

; 671  :     }
; 672  : 
; 673  :     sha224_init(new);

  000ff	48 8b c8	 mov	 rcx, rax
  00102	e8 00 00 00 00	 call	 sha224_init

; 674  : 
; 675  :     if (PyErr_Occurred()) {

  00107	e8 00 00 00 00	 call	 PyErr_Occurred
  0010c	48 85 c0	 test	 rax, rax
  0010f	74 2f		 je	 SHORT $LN3@SHA224_new

; 676  :         Py_DECREF(new);

  00111	48 8b cb	 mov	 rcx, rbx
  00114	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@SHA224_new:

; 677  :         if (data_obj)

  00119	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR data_obj$[rsp], 0
  00122	74 0a		 je	 SHORT $LN2@SHA224_new

; 678  :             PyBuffer_Release(&buf);

  00124	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  00129	e8 00 00 00 00	 call	 PyBuffer_Release
$LN2@SHA224_new:

; 679  :         return NULL;

  0012e	33 c0		 xor	 eax, eax
  00130	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]

; 687  : }

  00138	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0013f	c3		 ret	 0
$LN3@SHA224_new:

; 680  :     }
; 681  :     if (data_obj) {

  00140	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR data_obj$[rsp], 0
  00149	74 1c		 je	 SHORT $LN1@SHA224_new

; 682  :         sha_update(new, buf.buf, buf.len);

  0014b	4c 8b 44 24 40	 mov	 r8, QWORD PTR buf$[rsp+16]
  00150	48 8b 54 24 30	 mov	 rdx, QWORD PTR buf$[rsp]
  00155	48 8b cb	 mov	 rcx, rbx
  00158	e8 00 00 00 00	 call	 sha_update

; 683  :         PyBuffer_Release(&buf);

  0015d	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  00162	e8 00 00 00 00	 call	 PyBuffer_Release
$LN1@SHA224_new:

; 684  :     }
; 685  : 
; 686  :     return (PyObject *)new;

  00167	48 8b c3	 mov	 rax, rbx
  0016a	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]

; 687  : }

  00172	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00179	c3		 ret	 0
SHA224_new ENDP
_TEXT	ENDS
PUBLIC	PyInit__sha256
EXTRN	PyModule_Create2:PROC
EXTRN	PyType_Ready:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit__sha256 DD imagerel $LN6
	DD	imagerel $LN6+89
	DD	imagerel $unwind$PyInit__sha256
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__sha256 DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyInit__sha256
_TEXT	SEGMENT
PyInit__sha256 PROC					; COMDAT

; 718  : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 719  :     Py_TYPE(&SHA224type) = &PyType_Type;

  00006	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:PyType_Type

; 720  :     if (PyType_Ready(&SHA224type) < 0)

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:SHA224type
  00014	48 89 1d 58 00
	00 00		 mov	 QWORD PTR SHA224type+88, rbx
  0001b	e8 00 00 00 00	 call	 PyType_Ready
  00020	85 c0		 test	 eax, eax
  00022	79 08		 jns	 SHORT $LN2@PyInit__sh
$LN5@PyInit__sh:

; 721  :         return NULL;

  00024	33 c0		 xor	 eax, eax

; 726  : }

  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5b		 pop	 rbx
  0002b	c3		 ret	 0
$LN2@PyInit__sh:

; 722  :     Py_TYPE(&SHA256type) = &PyType_Type;
; 723  :     if (PyType_Ready(&SHA256type) < 0)

  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:SHA256type
  00033	48 89 1d 58 00
	00 00		 mov	 QWORD PTR SHA256type+88, rbx
  0003a	e8 00 00 00 00	 call	 PyType_Ready
  0003f	85 c0		 test	 eax, eax

; 724  :         return NULL;

  00041	78 e1		 js	 SHORT $LN5@PyInit__sh

; 725  :     return PyModule_Create(&_sha256module);

  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_sha256module
  0004a	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H

; 726  : }

  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5b		 pop	 rbx
  00054	e9 00 00 00 00	 jmp	 PyModule_Create2
PyInit__sha256 ENDP
_TEXT	ENDS
END
