; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_09DNDNKKCN@xxsubtype?$AA@			; `string'
PUBLIC	??_C@_05GGJPBMNG@bench?$AA@			; `string'
PUBLIC	??_C@_0BD@LPHMOIOI@xxsubtype?4spamdict?$AA@	; `string'
PUBLIC	??_C@_0BD@JDCKAAFJ@xxsubtype?4spamlist?$AA@	; `string'
PUBLIC	??_C@_0CL@JIOEMMEE@an?5int?5variable?5for?5demonstratio@ ; `string'
PUBLIC	??_C@_05HDBKIDE@state?$AA@			; `string'
PUBLIC	??_C@_0BI@ONGJBLEK@staticmeth?$CI?$CKargs?0?5?$CK?$CKkw?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0L@GMNALEKC@staticmeth?$AA@		; `string'
PUBLIC	??_C@_0BH@CECAENAO@classmeth?$CI?$CKargs?0?5?$CK?$CKkw?$CJ?$AA@ ; `string'
PUBLIC	??_C@_09EDADNKFI@classmeth?$AA@			; `string'
PUBLIC	??_C@_0BA@BCBLHFND@setstate?$CIstate?$CJ?$AA@	; `string'
PUBLIC	??_C@_08BJPILIMO@setstate?$AA@			; `string'
PUBLIC	??_C@_0BE@EHPGDDIO@getstate?$CI?$CJ?5?9?$DO?5state?$AA@ ; `string'
PUBLIC	??_C@_08OINEKLLD@getstate?$AA@			; `string'
;	COMDAT ??_C@_09DNDNKKCN@xxsubtype?$AA@
CONST	SEGMENT
??_C@_09DNDNKKCN@xxsubtype?$AA@ DB 'xxsubtype', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GGJPBMNG@bench?$AA@
CONST	SEGMENT
??_C@_05GGJPBMNG@bench?$AA@ DB 'bench', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LPHMOIOI@xxsubtype?4spamdict?$AA@
CONST	SEGMENT
??_C@_0BD@LPHMOIOI@xxsubtype?4spamdict?$AA@ DB 'xxsubtype.spamdict', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JDCKAAFJ@xxsubtype?4spamlist?$AA@
CONST	SEGMENT
??_C@_0BD@JDCKAAFJ@xxsubtype?4spamlist?$AA@ DB 'xxsubtype.spamlist', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@JIOEMMEE@an?5int?5variable?5for?5demonstratio@
CONST	SEGMENT
??_C@_0CL@JIOEMMEE@an?5int?5variable?5for?5demonstratio@ DB 'an int varia'
	DB	'ble for demonstration purposes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HDBKIDE@state?$AA@
CONST	SEGMENT
??_C@_05HDBKIDE@state?$AA@ DB 'state', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ONGJBLEK@staticmeth?$CI?$CKargs?0?5?$CK?$CKkw?$CJ?$AA@
CONST	SEGMENT
??_C@_0BI@ONGJBLEK@staticmeth?$CI?$CKargs?0?5?$CK?$CKkw?$CJ?$AA@ DB 'stat'
	DB	'icmeth(*args, **kw)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GMNALEKC@staticmeth?$AA@
CONST	SEGMENT
??_C@_0L@GMNALEKC@staticmeth?$AA@ DB 'staticmeth', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CECAENAO@classmeth?$CI?$CKargs?0?5?$CK?$CKkw?$CJ?$AA@
CONST	SEGMENT
??_C@_0BH@CECAENAO@classmeth?$CI?$CKargs?0?5?$CK?$CKkw?$CJ?$AA@ DB 'class'
	DB	'meth(*args, **kw)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09EDADNKFI@classmeth?$AA@
CONST	SEGMENT
??_C@_09EDADNKFI@classmeth?$AA@ DB 'classmeth', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BCBLHFND@setstate?$CIstate?$CJ?$AA@
CONST	SEGMENT
??_C@_0BA@BCBLHFND@setstate?$CIstate?$CJ?$AA@ DB 'setstate(state)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BJPILIMO@setstate?$AA@
CONST	SEGMENT
??_C@_08BJPILIMO@setstate?$AA@ DB 'setstate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EHPGDDIO@getstate?$CI?$CJ?5?9?$DO?5state?$AA@
CONST	SEGMENT
??_C@_0BE@EHPGDDIO@getstate?$CI?$CJ?5?9?$DO?5state?$AA@ DB 'getstate() ->'
	DB	' state', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08OINEKLLD@getstate?$AA@
CONST	SEGMENT
??_C@_08OINEKLLD@getstate?$AA@ DB 'getstate', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
xxsubtype__doc__ DB 'xxsubtype is an example module showing how to subtyp'
	DB	'e builtin types from C.', 0aH, 'test_descr.py in the standard'
	DB	' test suite requires it in order to complete.', 0aH, 'If you '
	DB	'don''t care about the examples, and don''t intend to run the '
	DB	'Python', 0aH, 'test suite, you can recompile Python without M'
	DB	'odules/xxsubtype.c.', 00H
	ORG $+14
spamlist_methods DQ FLAT:??_C@_08OINEKLLD@getstate?$AA@
	DQ	FLAT:spamlist_getstate
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BE@EHPGDDIO@getstate?$CI?$CJ?5?9?$DO?5state?$AA@
	DQ	FLAT:??_C@_08BJPILIMO@setstate?$AA@
	DQ	FLAT:spamlist_setstate
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BA@BCBLHFND@setstate?$CIstate?$CJ?$AA@
	DQ	FLAT:??_C@_09EDADNKFI@classmeth?$AA@
	DQ	FLAT:spamlist_specialmeth
	DD	013H
	ORG $+4
	DQ	FLAT:??_C@_0BH@CECAENAO@classmeth?$CI?$CKargs?0?5?$CK?$CKkw?$CJ?$AA@
	DQ	FLAT:??_C@_0L@GMNALEKC@staticmeth?$AA@
	DQ	FLAT:spamlist_specialmeth
	DD	023H
	ORG $+4
	DQ	FLAT:??_C@_0BI@ONGJBLEK@staticmeth?$CI?$CKargs?0?5?$CK?$CKkw?$CJ?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
spamlist_getsets DQ FLAT:??_C@_05HDBKIDE@state?$AA@
	DQ	FLAT:spamlist_state_get
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0CL@JIOEMMEE@an?5int?5variable?5for?5demonstratio@
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
spamlist_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@JDCKAAFJ@xxsubtype?4spamlist?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040400H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:spamlist_methods
	DQ	0000000000000000H
	DQ	FLAT:spamlist_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:spamlist_init
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+72
spamdict_methods DQ FLAT:??_C@_08OINEKLLD@getstate?$AA@
	DQ	FLAT:spamdict_getstate
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BE@EHPGDDIO@getstate?$CI?$CJ?5?9?$DO?5state?$AA@
	DQ	FLAT:??_C@_08BJPILIMO@setstate?$AA@
	DQ	FLAT:spamdict_setstate
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BA@BCBLHFND@setstate?$CIstate?$CJ?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
spamdict_members DQ FLAT:??_C@_05HDBKIDE@state?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000080H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CL@JIOEMMEE@an?5int?5variable?5for?5demonstratio@
	DQ	0000000000000000H
	ORG $+32
spamdict_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@LPHMOIOI@xxsubtype?4spamdict?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040400H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:spamdict_methods
	DQ	FLAT:spamdict_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:spamdict_init
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+72
xxsubtype_functions DQ FLAT:??_C@_05GGJPBMNG@bench?$AA@
	DQ	FLAT:spam_bench
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
xxsubtypemodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09DNDNKKCN@xxsubtype?$AA@
	DQ	FLAT:xxsubtype__doc__
	DQ	ffffffffffffffffH
	DQ	FLAT:xxsubtype_functions
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_09JCIGMFJK@?3getstate?$AA@		; `string'
EXTRN	PyLong_FromLong:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\xxsubtype.c
pdata	SEGMENT
$pdata$spamlist_getstate DD imagerel spamlist_getstate
	DD	imagerel spamlist_getstate+55
	DD	imagerel $unwind$spamlist_getstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spamlist_getstate DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_09JCIGMFJK@?3getstate?$AA@
CONST	SEGMENT
??_C@_09JCIGMFJK@?3getstate?$AA@ DB ':getstate', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT spamlist_getstate
_TEXT	SEGMENT
self$ = 48
args$ = 56
spamlist_getstate PROC					; COMDAT

; 28   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 29   :     if (!PyArg_ParseTuple(args, ":getstate"))

  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09JCIGMFJK@?3getstate?$AA@
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001b	85 c0		 test	 eax, eax
  0001d	75 08		 jne	 SHORT $LN1@spamlist_g

; 30   :         return NULL;

  0001f	33 c0		 xor	 eax, eax

; 32   : }

  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5b		 pop	 rbx
  00026	c3		 ret	 0
$LN1@spamlist_g:

; 31   :     return PyLong_FromLong(self->state);

  00027	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]

; 32   : }

  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5b		 pop	 rbx
  00032	e9 00 00 00 00	 jmp	 PyLong_FromLong
spamlist_getstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@MADOKHMA@i?3setstate?$AA@		; `string'
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$spamlist_setstate DD imagerel spamlist_setstate
	DD	imagerel spamlist_setstate+136
	DD	imagerel $unwind$spamlist_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spamlist_setstate DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@MADOKHMA@i?3setstate?$AA@
CONST	SEGMENT
??_C@_0L@MADOKHMA@i?3setstate?$AA@ DB 'i:setstate', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\xxsubtype.c
CONST	ENDS
;	COMDAT spamlist_setstate
_TEXT	SEGMENT
self$ = 64
args$ = 72
state$ = 80
spamlist_setstate PROC					; COMDAT

; 36   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 37   :     int state;
; 38   : 
; 39   :     if (!PyArg_ParseTuple(args, "i:setstate", &state))

  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR state$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@MADOKHMA@i?3setstate?$AA@
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00020	85 c0		 test	 eax, eax
  00022	75 08		 jne	 SHORT $LN1@spamlist_s

; 40   :         return NULL;

  00024	33 c0		 xor	 eax, eax

; 44   : }

  00026	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002a	5b		 pop	 rbx
  0002b	c3		 ret	 0
$LN1@spamlist_s:

; 41   :     self->state = state;

  0002c	8b 44 24 50	 mov	 eax, DWORD PTR state$[rsp]
  00030	89 83 80 00 00
	00		 mov	 DWORD PTR [rbx+128], eax

; 42   :     Py_INCREF(Py_None);

  00036	e8 00 00 00 00	 call	 _Py_PXCTX
  0003b	85 c0		 test	 eax, eax
  0003d	75 3c		 jne	 SHORT $LN5@spamlist_s
  0003f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00054	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00062	e8 00 00 00 00	 call	 _PyParallel_Guard
  00067	85 c0		 test	 eax, eax
  00069	75 09		 jne	 SHORT $LN4@spamlist_s
  0006b	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00072	74 07		 je	 SHORT $LN5@spamlist_s
$LN4@spamlist_s:
  00074	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@spamlist_s:

; 43   :     return Py_None;

  0007b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 44   : }

  00082	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00086	5b		 pop	 rbx
  00087	c3		 ret	 0
spamlist_setstate ENDP
_TEXT	ENDS
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$spamlist_specialmeth DD imagerel spamlist_specialmeth
	DD	imagerel spamlist_specialmeth+45
	DD	imagerel $unwind$spamlist_specialmeth
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$spamlist_specialmeth DD imagerel spamlist_specialmeth+45
	DD	imagerel spamlist_specialmeth+156
	DD	imagerel $chain$1$spamlist_specialmeth
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$spamlist_specialmeth DD imagerel spamlist_specialmeth+156
	DD	imagerel spamlist_specialmeth+284
	DD	imagerel $chain$2$spamlist_specialmeth
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$spamlist_specialmeth DD imagerel spamlist_specialmeth+284
	DD	imagerel spamlist_specialmeth+299
	DD	imagerel $chain$3$spamlist_specialmeth
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$spamlist_specialmeth DD 021H
	DD	imagerel spamlist_specialmeth
	DD	imagerel spamlist_specialmeth+45
	DD	imagerel $unwind$spamlist_specialmeth
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$spamlist_specialmeth DD 020021H
	DD	0b7400H
	DD	imagerel spamlist_specialmeth
	DD	imagerel spamlist_specialmeth+45
	DD	imagerel $unwind$spamlist_specialmeth
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$spamlist_specialmeth DD 040a21H
	DD	0b740aH
	DD	0a5405H
	DD	imagerel spamlist_specialmeth
	DD	imagerel spamlist_specialmeth+45
	DD	imagerel $unwind$spamlist_specialmeth
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spamlist_specialmeth DD 060e01H
	DD	0c340eH
	DD	0d00a520eH
	DD	06006c008H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\xxsubtype.c
xdata	ENDS
;	COMDAT spamlist_specialmeth
_TEXT	SEGMENT
self$ = 80
args$ = 88
kw$ = 96
spamlist_specialmeth PROC				; COMDAT

; 48   : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000e	4c 8b e9	 mov	 r13, rcx

; 49   :     PyObject *result = PyTuple_New(3);

  00011	b9 03 00 00 00	 mov	 ecx, 3
  00016	4d 8b e0	 mov	 r12, r8
  00019	48 8b f2	 mov	 rsi, rdx
  0001c	e8 00 00 00 00	 call	 PyTuple_New
  00021	48 8b d8	 mov	 rbx, rax

; 50   : 
; 51   :     if (result != NULL) {

  00024	48 85 c0	 test	 rax, rax
  00027	0f 84 ef 00 00
	00		 je	 $LN3@spamlist_s@2

; 52   :         if (self == NULL)

  0002d	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  00032	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  00037	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:_Py_NoneStruct
  0003e	48 8b ef	 mov	 rbp, rdi
  00041	4d 85 ed	 test	 r13, r13
  00044	49 0f 45 ed	 cmovne	 rbp, r13

; 53   :             self = Py_None;
; 54   :         if (kw == NULL)

  00048	4d 85 e4	 test	 r12, r12
  0004b	49 0f 45 fc	 cmovne	 rdi, r12

; 55   :             kw = Py_None;
; 56   :         Py_INCREF(self);

  0004f	e8 00 00 00 00	 call	 _Py_PXCTX
  00054	85 c0		 test	 eax, eax
  00056	75 32		 jne	 SHORT $LN7@spamlist_s@2
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00066	4c 8b cd	 mov	 r9, rbp
  00069	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0006f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00077	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007c	85 c0		 test	 eax, eax
  0007e	75 06		 jne	 SHORT $LN6@spamlist_s@2
  00080	f6 45 20 20	 test	 BYTE PTR [rbp+32], 32	; 00000020H
  00084	74 04		 je	 SHORT $LN7@spamlist_s@2
$LN6@spamlist_s@2:
  00086	48 ff 45 50	 inc	 QWORD PTR [rbp+80]
$LN7@spamlist_s@2:

; 57   :         PyTuple_SET_ITEM(result, 0, self);

  0008a	48 89 6b 70	 mov	 QWORD PTR [rbx+112], rbp

; 58   :         Py_INCREF(args);

  0008e	e8 00 00 00 00	 call	 _Py_PXCTX
  00093	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00098	85 c0		 test	 eax, eax
  0009a	75 32		 jne	 SHORT $LN11@spamlist_s@2
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000aa	4c 8b ce	 mov	 r9, rsi
  000ad	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000b3	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000bb	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c0	85 c0		 test	 eax, eax
  000c2	75 06		 jne	 SHORT $LN10@spamlist_s@2
  000c4	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  000c8	74 04		 je	 SHORT $LN11@spamlist_s@2
$LN10@spamlist_s@2:
  000ca	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN11@spamlist_s@2:

; 59   :         PyTuple_SET_ITEM(result, 1, args);

  000ce	48 89 73 78	 mov	 QWORD PTR [rbx+120], rsi

; 60   :         Py_INCREF(kw);

  000d2	e8 00 00 00 00	 call	 _Py_PXCTX
  000d7	85 c0		 test	 eax, eax
  000d9	75 32		 jne	 SHORT $LN15@spamlist_s@2
  000db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000e9	4c 8b cf	 mov	 r9, rdi
  000ec	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000f2	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000fa	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ff	85 c0		 test	 eax, eax
  00101	75 06		 jne	 SHORT $LN14@spamlist_s@2
  00103	f6 47 20 20	 test	 BYTE PTR [rdi+32], 32	; 00000020H
  00107	74 04		 je	 SHORT $LN15@spamlist_s@2
$LN14@spamlist_s@2:
  00109	48 ff 47 50	 inc	 QWORD PTR [rdi+80]
$LN15@spamlist_s@2:

; 61   :         PyTuple_SET_ITEM(result, 2, kw);

  0010d	48 89 bb 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rdi
  00114	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 62   :     }
; 63   :     return result;

  00119	48 8b c3	 mov	 rax, rbx
$LN3@spamlist_s@2:

; 64   : }

  0011c	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00121	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00125	41 5d		 pop	 r13
  00127	41 5c		 pop	 r12
  00129	5e		 pop	 rsi
  0012a	c3		 ret	 0
spamlist_specialmeth ENDP
_TEXT	ENDS
EXTRN	PyList_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$spamlist_init DD imagerel spamlist_init
	DD	imagerel spamlist_init+46
	DD	imagerel $unwind$spamlist_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spamlist_init DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT spamlist_init
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwds$ = 64
spamlist_init PROC					; COMDAT

; 84   : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 85   :     if (PyList_Type.tp_init((PyObject *)self, args, kwds) < 0)

  00009	ff 15 80 01 00
	00		 call	 QWORD PTR PyList_Type+384
  0000f	85 c0		 test	 eax, eax
  00011	79 09		 jns	 SHORT $LN1@spamlist_i

; 86   :         return -1;

  00013	83 c8 ff	 or	 eax, -1

; 89   : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	c3		 ret	 0
$LN1@spamlist_i:

; 87   :     self->state = 0;

  0001c	c7 83 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rbx+128], 0

; 88   :     return 0;

  00026	33 c0		 xor	 eax, eax

; 89   : }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
spamlist_init ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT spamlist_state_get
_TEXT	SEGMENT
self$ = 8
spamlist_state_get PROC					; COMDAT

; 94   :     return PyLong_FromLong(self->state);

  00000	8b 89 80 00 00
	00		 mov	 ecx, DWORD PTR [rcx+128]

; 95   : }

  00006	e9 00 00 00 00	 jmp	 PyLong_FromLong
spamlist_state_get ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$spamdict_getstate DD imagerel spamdict_getstate
	DD	imagerel spamdict_getstate+55
	DD	imagerel $unwind$spamdict_getstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spamdict_getstate DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT spamdict_getstate
_TEXT	SEGMENT
self$ = 48
args$ = 56
spamdict_getstate PROC					; COMDAT

; 153  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 154  :     if (!PyArg_ParseTuple(args, ":getstate"))

  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09JCIGMFJK@?3getstate?$AA@
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001b	85 c0		 test	 eax, eax
  0001d	75 08		 jne	 SHORT $LN1@spamdict_g

; 155  :         return NULL;

  0001f	33 c0		 xor	 eax, eax

; 157  : }

  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5b		 pop	 rbx
  00026	c3		 ret	 0
$LN1@spamdict_g:

; 156  :     return PyLong_FromLong(self->state);

  00027	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]

; 157  : }

  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5b		 pop	 rbx
  00032	e9 00 00 00 00	 jmp	 PyLong_FromLong
spamdict_getstate ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$spamdict_setstate DD imagerel spamdict_setstate
	DD	imagerel spamdict_setstate+136
	DD	imagerel $unwind$spamdict_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spamdict_setstate DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\xxsubtype.c
xdata	ENDS
;	COMDAT spamdict_setstate
_TEXT	SEGMENT
self$ = 64
args$ = 72
state$ = 80
spamdict_setstate PROC					; COMDAT

; 161  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b c2	 mov	 rax, rdx
  00009	48 8b d9	 mov	 rbx, rcx

; 162  :     int state;
; 163  : 
; 164  :     if (!PyArg_ParseTuple(args, "i:setstate", &state))

  0000c	4c 8d 44 24 50	 lea	 r8, QWORD PTR state$[rsp]
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@MADOKHMA@i?3setstate?$AA@
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00020	85 c0		 test	 eax, eax
  00022	75 08		 jne	 SHORT $LN1@spamdict_s

; 165  :         return NULL;

  00024	33 c0		 xor	 eax, eax

; 169  : }

  00026	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002a	5b		 pop	 rbx
  0002b	c3		 ret	 0
$LN1@spamdict_s:

; 166  :     self->state = state;

  0002c	8b 44 24 50	 mov	 eax, DWORD PTR state$[rsp]
  00030	89 83 80 00 00
	00		 mov	 DWORD PTR [rbx+128], eax

; 167  :     Py_INCREF(Py_None);

  00036	e8 00 00 00 00	 call	 _Py_PXCTX
  0003b	85 c0		 test	 eax, eax
  0003d	75 3c		 jne	 SHORT $LN5@spamdict_s
  0003f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00054	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  0005a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00062	e8 00 00 00 00	 call	 _PyParallel_Guard
  00067	85 c0		 test	 eax, eax
  00069	75 09		 jne	 SHORT $LN4@spamdict_s
  0006b	f6 05 20 00 00
	00 20		 test	 BYTE PTR _Py_NoneStruct+32, 32 ; 00000020H
  00072	74 07		 je	 SHORT $LN5@spamdict_s
$LN4@spamdict_s:
  00074	48 ff 05 50 00
	00 00		 inc	 QWORD PTR _Py_NoneStruct+80
$LN5@spamdict_s:

; 168  :     return Py_None;

  0007b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 169  : }

  00082	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00086	5b		 pop	 rbx
  00087	c3		 ret	 0
spamdict_setstate ENDP
_TEXT	ENDS
EXTRN	PyDict_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$spamdict_init DD imagerel spamdict_init
	DD	imagerel spamdict_init+46
	DD	imagerel $unwind$spamdict_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spamdict_init DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT spamdict_init
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwds$ = 64
spamdict_init PROC					; COMDAT

; 181  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 182  :     if (PyDict_Type.tp_init((PyObject *)self, args, kwds) < 0)

  00009	ff 15 80 01 00
	00		 call	 QWORD PTR PyDict_Type+384
  0000f	85 c0		 test	 eax, eax
  00011	79 09		 jns	 SHORT $LN1@spamdict_i

; 183  :         return -1;

  00013	83 c8 ff	 or	 eax, -1

; 186  : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	c3		 ret	 0
$LN1@spamdict_i:

; 184  :     self->state = 0;

  0001c	c7 83 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rbx+128], 0

; 185  :     return 0;

  00026	33 c0		 xor	 eax, eax

; 186  : }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
spamdict_init ENDP
_TEXT	ENDS
PUBLIC	__real@408f400000000000
PUBLIC	??_C@_04NDBCCGOM@OS?$HMi?$AA@			; `string'
EXTRN	PyFloat_FromDouble:PROC
EXTRN	PyObject_GetAttr:PROC
EXTRN	__imp_clock:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$spam_bench DD imagerel spam_bench
	DD	imagerel spam_bench+61
	DD	imagerel $unwind$spam_bench
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$spam_bench DD imagerel spam_bench+61
	DD	imagerel spam_bench+283
	DD	imagerel $chain$1$spam_bench
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$spam_bench DD imagerel spam_bench+283
	DD	imagerel spam_bench+298
	DD	imagerel $chain$3$spam_bench
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$spam_bench DD 040021H
	DD	087400H
	DD	0a3400H
	DD	imagerel spam_bench
	DD	imagerel spam_bench+61
	DD	imagerel $unwind$spam_bench
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$spam_bench DD 040a21H
	DD	08740aH
	DD	0a3405H
	DD	imagerel spam_bench
	DD	imagerel spam_bench+61
	DD	imagerel $unwind$spam_bench
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spam_bench DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT ??_C@_04NDBCCGOM@OS?$HMi?$AA@
CONST	SEGMENT
??_C@_04NDBCCGOM@OS?$HMi?$AA@ DB 'OS|i', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\xxsubtype.c
CONST	ENDS
;	COMDAT spam_bench
_TEXT	SEGMENT
obj$ = 48
self$ = 80
args$ = 88
n$ = 96
name$ = 104
spam_bench PROC						; COMDAT

; 237  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00004	48 8b c2	 mov	 rax, rdx

; 238  :     PyObject *obj, *name, *res;
; 239  :     int n = 1000;
; 240  :     time_t t0, t1;
; 241  : 
; 242  :     if (!PyArg_ParseTuple(args, "OS|i", &obj, &name, &n))

  00007	48 8d 4c 24 60	 lea	 rcx, QWORD PTR n$[rsp]
  0000c	4c 8d 4c 24 68	 lea	 r9, QWORD PTR name$[rsp]
  00011	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00016	4c 8d 44 24 30	 lea	 r8, QWORD PTR obj$[rsp]
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04NDBCCGOM@OS?$HMi?$AA@
  00022	48 8b c8	 mov	 rcx, rax
  00025	c7 44 24 60 e8
	03 00 00	 mov	 DWORD PTR n$[rsp], 1000	; 000003e8H
  0002d	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN4@spam_bench

; 243  :         return NULL;

  00036	33 c0		 xor	 eax, eax

; 253  : }

  00038	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0003c	c3		 ret	 0
$LN4@spam_bench:
  0003d	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00042	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 244  :     t0 = clock();

  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_clock

; 245  :     while (--n >= 0) {

  0004d	ff 4c 24 60	 dec	 DWORD PTR n$[rsp]
  00051	48 63 f8	 movsxd	 rdi, eax
  00054	0f 88 90 00 00
	00		 js	 $LN2@spam_bench
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL3@spam_bench:

; 246  :         res = PyObject_GetAttr(obj, name);

  00060	48 8b 54 24 68	 mov	 rdx, QWORD PTR name$[rsp]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  0006a	e8 00 00 00 00	 call	 PyObject_GetAttr
  0006f	48 8b d8	 mov	 rbx, rax

; 247  :         if (res == NULL)

  00072	48 85 c0	 test	 rax, rax
  00075	0f 84 a0 00 00
	00		 je	 $LN19@spam_bench

; 248  :             return NULL;
; 249  :         Py_DECREF(res);

  0007b	e8 00 00 00 00	 call	 _Py_PXCTX
  00080	85 c0		 test	 eax, eax
  00082	75 5c		 jne	 SHORT $LN17@spam_bench
  00084	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00088	a8 20		 test	 al, 32			; 00000020H
  0008a	75 4c		 jne	 SHORT $LN11@spam_bench
  0008c	84 c0		 test	 al, al
  0008e	78 48		 js	 SHORT $LN11@spam_bench
  00090	a8 02		 test	 al, 2
  00092	75 4c		 jne	 SHORT $LN17@spam_bench
  00094	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00098	75 46		 jne	 SHORT $LN17@spam_bench
  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000a8	4c 8b cb	 mov	 r9, rbx
  000ab	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000b1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000be	48 8b cb	 mov	 rcx, rbx
  000c1	85 c0		 test	 eax, eax
  000c3	74 07		 je	 SHORT $LN16@spam_bench
  000c5	e8 00 00 00 00	 call	 _Px_Dealloc
  000ca	eb 14		 jmp	 SHORT $LN17@spam_bench
$LN16@spam_bench:
  000cc	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000d0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000d6	eb 08		 jmp	 SHORT $LN17@spam_bench
$LN11@spam_bench:
  000d8	48 8b cb	 mov	 rcx, rbx
  000db	e8 00 00 00 00	 call	 Px_DecRef
$LN17@spam_bench:

; 245  :     while (--n >= 0) {

  000e0	ff 4c 24 60	 dec	 DWORD PTR n$[rsp]
  000e4	0f 89 76 ff ff
	ff		 jns	 $LL3@spam_bench
$LN2@spam_bench:

; 250  :     }
; 251  :     t1 = clock();

  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_clock
  000f0	48 63 c8	 movsxd	 rcx, eax

; 252  :     return PyFloat_FromDouble((double)(t1-t0) / CLOCKS_PER_SEC);

  000f3	48 2b cf	 sub	 rcx, rdi
  000f6	66 0f ef c0	 pxor	 xmm0, xmm0
  000fa	f2 48 0f 2a c1	 cvtsi2sd xmm0, rcx
  000ff	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  00107	e8 00 00 00 00	 call	 PyFloat_FromDouble
  0010c	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00111	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 253  : }

  00116	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0011a	c3		 ret	 0
$LN19@spam_bench:
  0011b	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00120	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  00125	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00129	c3		 ret	 0
spam_bench ENDP
_TEXT	ENDS
PUBLIC	??_C@_08MOHNHOIL@spamdict?$AA@			; `string'
PUBLIC	??_C@_08OCCLJGDK@spamlist?$AA@			; `string'
PUBLIC	PyInit_xxsubtype
EXTRN	PyModule_AddObject:PROC
EXTRN	PyModule_Create2:PROC
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyInit_xxsubtype DD imagerel $LN21
	DD	imagerel $LN21+83
	DD	imagerel $unwind$PyInit_xxsubtype
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PyInit_xxsubtype DD imagerel $LN21+83
	DD	imagerel $LN21+240
	DD	imagerel $chain$0$PyInit_xxsubtype
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PyInit_xxsubtype DD imagerel $LN21+240
	DD	imagerel $LN21+352
	DD	imagerel $chain$2$PyInit_xxsubtype
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PyInit_xxsubtype DD 020021H
	DD	063400H
	DD	imagerel $LN21
	DD	imagerel $LN21+83
	DD	imagerel $unwind$PyInit_xxsubtype
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PyInit_xxsubtype DD 020521H
	DD	063405H
	DD	imagerel $LN21
	DD	imagerel $LN21+83
	DD	imagerel $unwind$PyInit_xxsubtype
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_xxsubtype DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_08MOHNHOIL@spamdict?$AA@
CONST	SEGMENT
??_C@_08MOHNHOIL@spamdict?$AA@ DB 'spamdict', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OCCLJGDK@spamlist?$AA@
CONST	SEGMENT
??_C@_08OCCLJGDK@spamlist?$AA@ DB 'spamlist', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\modules\xxsubtype.c
CONST	ENDS
;	COMDAT PyInit_xxsubtype
_TEXT	SEGMENT
PyInit_xxsubtype PROC					; COMDAT

; 275  : {

$LN21:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 276  :     PyObject *m;
; 277  : 
; 278  :     /* Fill in deferred data addresses.  This must be done before
; 279  :        PyType_Ready() is called.  Note that PyType_Ready() automatically
; 280  :        initializes the ob.ob_type field to &PyType_Type if it's NULL,
; 281  :        so it's not necessary to fill in ob_type first. */
; 282  :     spamdict_type.tp_base = &PyDict_Type;

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type

; 283  :     if (PyType_Ready(&spamdict_type) < 0)

  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:spamdict_type
  00012	48 89 05 58 01
	00 00		 mov	 QWORD PTR spamdict_type+344, rax
  00019	e8 00 00 00 00	 call	 PyType_Ready
  0001e	85 c0		 test	 eax, eax
  00020	79 07		 jns	 SHORT $LN7@PyInit_xxs
$LN20@PyInit_xxs:

; 284  :         return NULL;

  00022	33 c0		 xor	 eax, eax

; 307  :         return NULL;
; 308  :     return m;
; 309  : }

  00024	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00028	c3		 ret	 0
$LN7@PyInit_xxs:

; 285  : 
; 286  :     spamlist_type.tp_base = &PyList_Type;

  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyList_Type

; 287  :     if (PyType_Ready(&spamlist_type) < 0)

  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:spamlist_type
  00037	48 89 05 58 01
	00 00		 mov	 QWORD PTR spamlist_type+344, rax
  0003e	e8 00 00 00 00	 call	 PyType_Ready
  00043	85 c0		 test	 eax, eax

; 288  :         return NULL;

  00045	78 db		 js	 SHORT $LN20@PyInit_xxs

; 289  : 
; 290  :     m = PyModule_Create(&xxsubtypemodule);

  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:xxsubtypemodule
  0004e	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00053	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00058	e8 00 00 00 00	 call	 PyModule_Create2
  0005d	48 8b d8	 mov	 rbx, rax

; 291  :     if (m == NULL)

  00060	48 85 c0	 test	 rax, rax

; 292  :         return NULL;

  00063	74 7f		 je	 SHORT $LN19@PyInit_xxs

; 293  : 
; 294  :     if (PyType_Ready(&spamlist_type) < 0)

  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:spamlist_type
  0006c	e8 00 00 00 00	 call	 PyType_Ready
  00071	85 c0		 test	 eax, eax

; 295  :         return NULL;

  00073	78 6f		 js	 SHORT $LN19@PyInit_xxs

; 296  :     if (PyType_Ready(&spamdict_type) < 0)

  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:spamdict_type
  0007c	e8 00 00 00 00	 call	 PyType_Ready
  00081	85 c0		 test	 eax, eax

; 297  :         return NULL;

  00083	78 5f		 js	 SHORT $LN19@PyInit_xxs

; 298  : 
; 299  :     Py_INCREF(&spamlist_type);

  00085	e8 00 00 00 00	 call	 _Py_PXCTX
  0008a	85 c0		 test	 eax, eax
  0008c	75 3c		 jne	 SHORT $LN11@PyInit_xxs
  0008e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:spamlist_type
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a3	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000a9	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b6	85 c0		 test	 eax, eax
  000b8	75 09		 jne	 SHORT $LN10@PyInit_xxs
  000ba	f6 05 20 00 00
	00 20		 test	 BYTE PTR spamlist_type+32, 32 ; 00000020H
  000c1	74 07		 je	 SHORT $LN11@PyInit_xxs
$LN10@PyInit_xxs:
  000c3	48 ff 05 50 00
	00 00		 inc	 QWORD PTR spamlist_type+80
$LN11@PyInit_xxs:

; 300  :     if (PyModule_AddObject(m, "spamlist",
; 301  :                            (PyObject *) &spamlist_type) < 0)

  000ca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:spamlist_type
  000d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCCLJGDK@spamlist?$AA@
  000d8	48 8b cb	 mov	 rcx, rbx
  000db	e8 00 00 00 00	 call	 PyModule_AddObject
  000e0	85 c0		 test	 eax, eax
  000e2	79 0c		 jns	 SHORT $LN2@PyInit_xxs
$LN19@PyInit_xxs:

; 302  :         return NULL;

  000e4	33 c0		 xor	 eax, eax
  000e6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 307  :         return NULL;
; 308  :     return m;
; 309  : }

  000eb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ef	c3		 ret	 0
$LN2@PyInit_xxs:

; 303  : 
; 304  :     Py_INCREF(&spamdict_type);

  000f0	e8 00 00 00 00	 call	 _Py_PXCTX
  000f5	85 c0		 test	 eax, eax
  000f7	75 3c		 jne	 SHORT $LN15@PyInit_xxs
  000f9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:spamdict_type
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  0010e	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00114	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0011c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00121	85 c0		 test	 eax, eax
  00123	75 09		 jne	 SHORT $LN14@PyInit_xxs
  00125	f6 05 20 00 00
	00 20		 test	 BYTE PTR spamdict_type+32, 32 ; 00000020H
  0012c	74 07		 je	 SHORT $LN15@PyInit_xxs
$LN14@PyInit_xxs:
  0012e	48 ff 05 50 00
	00 00		 inc	 QWORD PTR spamdict_type+80
$LN15@PyInit_xxs:

; 305  :     if (PyModule_AddObject(m, "spamdict",
; 306  :                            (PyObject *) &spamdict_type) < 0)

  00135	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:spamdict_type
  0013c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08MOHNHOIL@spamdict?$AA@
  00143	48 8b cb	 mov	 rcx, rbx
  00146	e8 00 00 00 00	 call	 PyModule_AddObject
  0014b	33 c9		 xor	 ecx, ecx
  0014d	85 c0		 test	 eax, eax
  0014f	48 0f 48 d9	 cmovs	 rbx, rcx
  00153	48 8b c3	 mov	 rax, rbx
  00156	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 307  :         return NULL;
; 308  :     return m;
; 309  : }

  0015b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0015f	c3		 ret	 0
PyInit_xxsubtype ENDP
_TEXT	ENDS
END
