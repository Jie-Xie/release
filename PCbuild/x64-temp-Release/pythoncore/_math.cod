; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
ln2	DQ	03fe62e42fefa39efr		; 0.693147
two_pow_m28 DQ	03e30000000000000r		; 3.72529e-009
two_pow_p28 DQ	041b0000000000000r		; 2.68435e+008
zero	DQ	00000000000000000r		; 0
CONST	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__mask@@AbsDouble@
PUBLIC	__real@3fe6666666666666
PUBLIC	_Py_expm1
EXTRN	_fltused:DWORD
EXTRN	log:PROC
EXTRN	exp:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_math.c
pdata	SEGMENT
$pdata$_Py_expm1 DD imagerel $LN7
	DD	imagerel $LN7+74
	DD	imagerel $unwind$_Py_expm1
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_Py_expm1 DD imagerel $LN7+74
	DD	imagerel $LN7+119
	DD	imagerel $chain$0$_Py_expm1
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_Py_expm1 DD imagerel $LN7+119
	DD	imagerel $LN7+142
	DD	imagerel $chain$1$_Py_expm1
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_Py_expm1 DD 021H
	DD	imagerel $LN7
	DD	imagerel $LN7+74
	DD	imagerel $unwind$_Py_expm1
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_Py_expm1 DD 020521H
	DD	036805H
	DD	imagerel $LN7
	DD	imagerel $LN7+74
	DD	imagerel $unwind$_Py_expm1
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_expm1 DD 031501H
	DD	027815H
	DD	08204H
xdata	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __mask@@AbsDouble@
CONST	SEGMENT
__mask@@AbsDouble@ DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@3fe6666666666666
CONST	SEGMENT
__real@3fe6666666666666 DQ 03fe6666666666666r	; 0.7
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_expm1
_TEXT	SEGMENT
x$ = 80
_Py_expm1 PROC						; COMDAT

; 168  : {

$LN7:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 169  :     /* For abs(x) >= log(2), it's safe to evaluate exp(x) - 1 directly; this
; 170  :        also works fine for infinities and nans.
; 171  : 
; 172  :        For smaller x, we can use a method due to Kahan that achieves close to
; 173  :        full accuracy.
; 174  :     */
; 175  : 
; 176  :     if (fabs(x) < 0.7) {

  00004	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3fe6666666666666
  0000c	66 0f 28 d0	 movapd	 xmm2, xmm0
  00010	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  00015	66 0f 54 15 00
	00 00 00	 andpd	 xmm2, QWORD PTR __mask@@AbsDouble@
  0001d	66 0f 28 f8	 movapd	 xmm7, xmm0
  00021	66 0f 2f ca	 comisd	 xmm1, xmm2
  00025	76 50		 jbe	 SHORT $LN4@Py_expm1

; 177  :         double u;
; 178  :         u = exp(x);

  00027	e8 00 00 00 00	 call	 exp

; 179  :         if (u == 1.0)

  0002c	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3ff0000000000000
  00034	66 0f 2e c1	 ucomisd xmm0, xmm1
  00038	7a 10		 jp	 SHORT $LN3@Py_expm1
  0003a	75 0e		 jne	 SHORT $LN3@Py_expm1

; 180  :             return x;

  0003c	66 0f 28 c7	 movapd	 xmm0, xmm7

; 186  : }

  00040	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  00045	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00049	c3		 ret	 0
$LN3@Py_expm1:
  0004a	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6

; 181  :         else
; 182  :             return (u - 1.0) * x / log(u);

  0004f	66 0f 28 f0	 movapd	 xmm6, xmm0
  00053	f2 0f 5c f1	 subsd	 xmm6, xmm1
  00057	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  0005b	e8 00 00 00 00	 call	 log
  00060	f2 0f 5e f0	 divsd	 xmm6, xmm0
  00064	66 0f 28 c6	 movapd	 xmm0, xmm6
  00068	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]

; 186  : }

  0006d	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  00072	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00076	c3		 ret	 0
$LN4@Py_expm1:

; 183  :     }
; 184  :     else
; 185  :         return exp(x) - 1.0;

  00077	e8 00 00 00 00	 call	 exp

; 186  : }

  0007c	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  00081	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00089	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0008d	c3		 ret	 0
_Py_expm1 ENDP
_TEXT	ENDS
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@3ca0000000000000
PUBLIC	_Py_log1p
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_log1p DD imagerel $LN8
	DD	imagerel $LN8+47
	DD	imagerel $unwind$_Py_log1p
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_Py_log1p DD imagerel $LN8+47
	DD	imagerel $LN8+136
	DD	imagerel $chain$1$_Py_log1p
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_Py_log1p DD imagerel $LN8+136
	DD	imagerel $LN8+156
	DD	imagerel $chain$3$_Py_log1p
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_Py_log1p DD imagerel $LN8+156
	DD	imagerel $LN8+166
	DD	imagerel $chain$4$_Py_log1p
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_Py_log1p DD 021H
	DD	imagerel $LN8
	DD	imagerel $LN8+47
	DD	imagerel $unwind$_Py_log1p
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_Py_log1p DD 020021H
	DD	028800H
	DD	imagerel $LN8
	DD	imagerel $LN8+47
	DD	imagerel $unwind$_Py_log1p
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_Py_log1p DD 041d21H
	DD	04681dH
	DD	028806H
	DD	imagerel $LN8
	DD	imagerel $LN8+47
	DD	imagerel $unwind$_Py_log1p
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_log1p DD 031501H
	DD	037815H
	DD	0a204H
xdata	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@3ca0000000000000
CONST	SEGMENT
__real@3ca0000000000000 DQ 03ca0000000000000r	; 1.11022e-016
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_log1p
_TEXT	SEGMENT
x$ = 96
_Py_log1p PROC						; COMDAT

; 215  : {

$LN8:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 216  :     /* For x small, we use the following approach.  Let y be the nearest float
; 217  :        to 1+x, then
; 218  : 
; 219  :          1+x = y * (1 - (y-1-x)/y)
; 220  : 
; 221  :        so log(1+x) = log(y) + log(1-(y-1-x)/y).  Since (y-1-x)/y is tiny, the
; 222  :        second term is well approximated by (y-1-x)/y.  If abs(x) >=
; 223  :        DBL_EPSILON/2 or the rounding-mode is some form of round-to-nearest
; 224  :        then y-1-x will be exactly representable, and is computed exactly by
; 225  :        (y-1)-x.
; 226  : 
; 227  :        If abs(x) < DBL_EPSILON/2 and the rounding mode is not known to be
; 228  :        round-to-nearest then this method is slightly dangerous: 1+x could be
; 229  :        rounded up to 1+DBL_EPSILON instead of down to 1, and in that case
; 230  :        y-1-x will not be exactly representable any more and the result can be
; 231  :        off by many ulps.  But this is easily fixed: for a floating-point
; 232  :        number |x| < DBL_EPSILON/2., the closest floating-point number to
; 233  :        log(1+x) is exactly x.
; 234  :     */
; 235  : 
; 236  :     double y;
; 237  :     if (fabs(x) < DBL_EPSILON/2.) {

  00004	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3ca0000000000000
  0000c	66 0f 28 d0	 movapd	 xmm2, xmm0
  00010	0f 29 7c 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm7
  00015	66 0f 54 15 00
	00 00 00	 andpd	 xmm2, QWORD PTR __mask@@AbsDouble@
  0001d	66 0f 28 f8	 movapd	 xmm7, xmm0
  00021	66 0f 2f ca	 comisd	 xmm1, xmm2

; 238  :         return x;

  00025	77 75		 ja	 SHORT $LN1@Py_log1p

; 239  :     }
; 240  :     else if (-0.5 <= x && x <= 1.) {

  00027	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bfe0000000000000
  0002f	44 0f 29 44 24
	20		 movaps	 XMMWORD PTR [rsp+32], xmm8
  00035	f2 44 0f 10 05
	00 00 00 00	 movsdx	 xmm8, QWORD PTR __real@3ff0000000000000
  0003e	72 48		 jb	 SHORT $LN2@Py_log1p
  00040	66 44 0f 2f c0	 comisd	 xmm8, xmm0
  00045	72 41		 jb	 SHORT $LN2@Py_log1p

; 241  :         /* WARNING: it's possible than an overeager compiler
; 242  :            will incorrectly optimize the following two lines
; 243  :            to the equivalent of "return log(1.+x)". If this
; 244  :            happens, then results from log1p will be inaccurate
; 245  :            for small x. */
; 246  :         y = 1.+x;

  00047	0f 29 74 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm6
  0004c	66 0f 28 f0	 movapd	 xmm6, xmm0
  00050	f2 41 0f 58 f0	 addsd	 xmm6, xmm8

; 247  :         return log(y)-((y-1.)-x)/y;

  00055	66 0f 28 c6	 movapd	 xmm0, xmm6
  00059	e8 00 00 00 00	 call	 log
  0005e	66 0f 28 ce	 movapd	 xmm1, xmm6
  00062	f2 41 0f 5c c8	 subsd	 xmm1, xmm8
  00067	44 0f 28 44 24
	20		 movaps	 xmm8, XMMWORD PTR [rsp+32]
  0006d	f2 0f 5c cf	 subsd	 xmm1, xmm7
  00071	f2 0f 5e ce	 divsd	 xmm1, xmm6
  00075	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]
  0007a	f2 0f 5c c1	 subsd	 xmm0, xmm1

; 252  :     }
; 253  : }

  0007e	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  00083	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00087	c3		 ret	 0
$LN2@Py_log1p:

; 248  :     }
; 249  :     else {
; 250  :         /* NaNs and infinities should end up here */
; 251  :         return log(1.+x);

  00088	f2 41 0f 58 f8	 addsd	 xmm7, xmm8
  0008d	66 0f 28 c7	 movapd	 xmm0, xmm7
  00091	e8 00 00 00 00	 call	 log
  00096	44 0f 28 44 24
	20		 movaps	 xmm8, XMMWORD PTR [rsp+32]
$LN1@Py_log1p:

; 252  :     }
; 253  : }

  0009c	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  000a1	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000a5	c3		 ret	 0
_Py_log1p ENDP
_TEXT	ENDS
PUBLIC	__real@4000000000000000
PUBLIC	__real@0000000000000000
PUBLIC	_Py_acosh
EXTRN	__imp__finite:PROC
EXTRN	__imp__HUGE:QWORD
EXTRN	__imp__errno:PROC
EXTRN	__imp__isnan:PROC
EXTRN	sqrt:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_acosh DD imagerel $LN15
	DD	imagerel $LN15+41
	DD	imagerel $unwind$_Py_acosh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$_Py_acosh DD imagerel $LN15+41
	DD	imagerel $LN15+110
	DD	imagerel $chain$0$_Py_acosh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_Py_acosh DD imagerel $LN15+110
	DD	imagerel $LN15+172
	DD	imagerel $chain$2$_Py_acosh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$_Py_acosh DD imagerel $LN15+172
	DD	imagerel $LN15+205
	DD	imagerel $chain$4$_Py_acosh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$_Py_acosh DD imagerel $LN15+205
	DD	imagerel $LN15+234
	DD	imagerel $chain$6$_Py_acosh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$_Py_acosh DD imagerel $LN15+234
	DD	imagerel $LN15+322
	DD	imagerel $chain$9$_Py_acosh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$_Py_acosh DD imagerel $LN15+322
	DD	imagerel $LN15+376
	DD	imagerel $chain$11$_Py_acosh
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$_Py_acosh DD 020021H
	DD	028800H
	DD	imagerel $LN15
	DD	imagerel $LN15+41
	DD	imagerel $unwind$_Py_acosh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$_Py_acosh DD 041321H
	DD	046813H
	DD	028800H
	DD	imagerel $LN15
	DD	imagerel $LN15+41
	DD	imagerel $unwind$_Py_acosh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$_Py_acosh DD 020021H
	DD	028800H
	DD	imagerel $LN15
	DD	imagerel $LN15+41
	DD	imagerel $unwind$_Py_acosh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$_Py_acosh DD 020021H
	DD	028800H
	DD	imagerel $LN15
	DD	imagerel $LN15+41
	DD	imagerel $unwind$_Py_acosh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_Py_acosh DD 020021H
	DD	028800H
	DD	imagerel $LN15
	DD	imagerel $LN15+41
	DD	imagerel $unwind$_Py_acosh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$_Py_acosh DD 020621H
	DD	028806H
	DD	imagerel $LN15
	DD	imagerel $LN15+41
	DD	imagerel $unwind$_Py_acosh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_acosh DD 030901H
	DD	037809H
	DD	0a204H
xdata	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_acosh
_TEXT	SEGMENT
x$ = 96
_Py_acosh PROC						; COMDAT

; 43   : {

$LN15:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00004	0f 29 7c 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm7
  00009	66 0f 28 f8	 movapd	 xmm7, xmm0

; 44   :     if (Py_IS_NAN(x)) {

  0000d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00013	85 c0		 test	 eax, eax
  00015	74 12		 je	 SHORT $LN11@Py_acosh

; 45   :         return x+x;

  00017	f2 0f 58 ff	 addsd	 xmm7, xmm7
  0001b	66 0f 28 c7	 movapd	 xmm0, xmm7

; 73   :     }
; 74   : }

  0001f	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  00024	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00028	c3		 ret	 0
$LN11@Py_acosh:
  00029	44 0f 29 44 24
	20		 movaps	 XMMWORD PTR [rsp+32], xmm8

; 46   :     }
; 47   :     if (x < 1.) {                       /* x < 1;  return a signaling NaN */

  0002f	f2 44 0f 10 05
	00 00 00 00	 movsdx	 xmm8, QWORD PTR __real@3ff0000000000000
  00038	66 44 0f 2f c7	 comisd	 xmm8, xmm7
  0003d	76 2f		 jbe	 SHORT $LN10@Py_acosh

; 48   :         errno = EDOM;

  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00045	44 0f 28 44 24
	20		 movaps	 xmm8, XMMWORD PTR [rsp+32]
  0004b	c7 00 21 00 00
	00		 mov	 DWORD PTR [rax], 33	; 00000021H

; 49   : #ifdef Py_NAN
; 50   :         return Py_NAN;

  00051	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  00058	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0005c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@0000000000000000

; 73   :     }
; 74   : }

  00064	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  00069	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0006d	c3		 ret	 0
$LN10@Py_acosh:

; 51   : #else
; 52   :         return (x-x)/(x-x);
; 53   : #endif
; 54   :     }
; 55   :     else if (x >= two_pow_p28) {        /* x > 2**28 */

  0006e	66 0f 2f 3d 00
	00 00 00	 comisd	 xmm7, QWORD PTR two_pow_p28
  00076	72 55		 jb	 SHORT $LN8@Py_acosh

; 56   :         if (Py_IS_INFINITY(x)) {

  00078	66 0f 28 c7	 movapd	 xmm0, xmm7
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00082	85 c0		 test	 eax, eax
  00084	75 26		 jne	 SHORT $LN7@Py_acosh
  00086	66 0f 28 c7	 movapd	 xmm0, xmm7
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00090	85 c0		 test	 eax, eax
  00092	75 18		 jne	 SHORT $LN7@Py_acosh

; 57   :             return x+x;

  00094	44 0f 28 44 24
	20		 movaps	 xmm8, XMMWORD PTR [rsp+32]
  0009a	f2 0f 58 ff	 addsd	 xmm7, xmm7
  0009e	66 0f 28 c7	 movapd	 xmm0, xmm7

; 73   :     }
; 74   : }

  000a2	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  000a7	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000ab	c3		 ret	 0
$LN7@Py_acosh:

; 58   :         }
; 59   :         else {
; 60   :             return log(x)+ln2;          /* acosh(huge)=log(2x) */

  000ac	66 0f 28 c7	 movapd	 xmm0, xmm7
  000b0	e8 00 00 00 00	 call	 log
  000b5	44 0f 28 44 24
	20		 movaps	 xmm8, XMMWORD PTR [rsp+32]
  000bb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ln2

; 73   :     }
; 74   : }

  000c3	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  000c8	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000cc	c3		 ret	 0
$LN8@Py_acosh:

; 61   :         }
; 62   :     }
; 63   :     else if (x == 1.) {

  000cd	66 41 0f 2e f8	 ucomisd xmm7, xmm8
  000d2	7a 16		 jp	 SHORT $LN4@Py_acosh
  000d4	75 14		 jne	 SHORT $LN4@Py_acosh

; 64   :         return 0.0;                     /* acosh(1) = 0 */

  000d6	66 0f 57 c0	 xorpd	 xmm0, xmm0
  000da	44 0f 28 44 24
	20		 movaps	 xmm8, XMMWORD PTR [rsp+32]

; 73   :     }
; 74   : }

  000e0	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  000e5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000e9	c3		 ret	 0
$LN4@Py_acosh:

; 65   :     }
; 66   :     else if (x > 2.) {                  /* 2 < x < 2**28 */

  000ea	f2 0f 10 15 00
	00 00 00	 movsdx	 xmm2, QWORD PTR __real@4000000000000000
  000f2	66 0f 2f fa	 comisd	 xmm7, xmm2
  000f6	76 4a		 jbe	 SHORT $LN2@Py_acosh

; 67   :         double t = x*x;

  000f8	0f 29 74 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm6
  000fd	66 0f 28 c7	 movapd	 xmm0, xmm7

; 68   :         return log(2.0*x - 1.0 / (x + sqrt(t - 1.0)));

  00101	66 0f 28 f7	 movapd	 xmm6, xmm7
  00105	f2 0f 59 c7	 mulsd	 xmm0, xmm7
  00109	f2 0f 59 f2	 mulsd	 xmm6, xmm2
  0010d	f2 41 0f 5c c0	 subsd	 xmm0, xmm8
  00112	e8 00 00 00 00	 call	 sqrt
  00117	f2 0f 58 c7	 addsd	 xmm0, xmm7
  0011b	f2 44 0f 5e c0	 divsd	 xmm8, xmm0
  00120	f2 41 0f 5c f0	 subsd	 xmm6, xmm8
  00125	66 0f 28 c6	 movapd	 xmm0, xmm6
  00129	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]
  0012e	44 0f 28 44 24
	20		 movaps	 xmm8, XMMWORD PTR [rsp+32]

; 73   :     }
; 74   : }

  00134	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  00139	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0013d	e9 00 00 00 00	 jmp	 log
$LN2@Py_acosh:

; 69   :     }
; 70   :     else {                              /* 1 < x <= 2 */
; 71   :         double t = x - 1.0;

  00142	f2 41 0f 5c f8	 subsd	 xmm7, xmm8

; 72   :         return m_log1p(t + sqrt(2.0*t + t*t));

  00147	66 0f 28 cf	 movapd	 xmm1, xmm7
  0014b	66 0f 28 c7	 movapd	 xmm0, xmm7
  0014f	f2 0f 59 c7	 mulsd	 xmm0, xmm7
  00153	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00157	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0015b	e8 00 00 00 00	 call	 sqrt
  00160	f2 0f 58 c7	 addsd	 xmm0, xmm7
  00164	44 0f 28 44 24
	20		 movaps	 xmm8, XMMWORD PTR [rsp+32]

; 73   :     }
; 74   : }

  0016a	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  0016f	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00173	e9 00 00 00 00	 jmp	 _Py_log1p
_Py_acosh ENDP
_TEXT	ENDS
PUBLIC	_Py_asinh
EXTRN	__imp__copysign:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_asinh DD imagerel $LN13
	DD	imagerel $LN13+159
	DD	imagerel $unwind$_Py_asinh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$_Py_asinh DD imagerel $LN13+159
	DD	imagerel $LN13+332
	DD	imagerel $chain$1$_Py_asinh
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$_Py_asinh DD imagerel $LN13+332
	DD	imagerel $LN13+359
	DD	imagerel $chain$2$_Py_asinh
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$_Py_asinh DD 021H
	DD	imagerel $LN13
	DD	imagerel $LN13+159
	DD	imagerel $unwind$_Py_asinh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$_Py_asinh DD 040a21H
	DD	04780aH
	DD	056805H
	DD	imagerel $LN13
	DD	imagerel $LN13+159
	DD	imagerel $unwind$_Py_asinh
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_asinh DD 051001H
	DD	029810H
	DD	03880aH
	DD	0c204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _Py_asinh
_TEXT	SEGMENT
x$ = 112
_Py_asinh PROC						; COMDAT

; 90   : {

$LN13:
  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  00004	44 0f 29 44 24
	30		 movaps	 XMMWORD PTR [rsp+48], xmm8
  0000a	44 0f 29 4c 24
	20		 movaps	 XMMWORD PTR [rsp+32], xmm9

; 91   :     double w;
; 92   :     double absx = fabs(x);

  00010	66 44 0f 28 c8	 movapd	 xmm9, xmm0
  00015	66 44 0f 28 c0	 movapd	 xmm8, xmm0
  0001a	66 44 0f 54 0d
	00 00 00 00	 andpd	 xmm9, QWORD PTR __mask@@AbsDouble@

; 93   : 
; 94   :     if (Py_IS_NAN(x) || Py_IS_INFINITY(x)) {

  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00029	85 c0		 test	 eax, eax
  0002b	0f 85 1b 01 00
	00		 jne	 $LN6@Py_asinh
  00031	66 41 0f 28 c0	 movapd	 xmm0, xmm8
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0003c	85 c0		 test	 eax, eax
  0003e	75 13		 jne	 SHORT $LN7@Py_asinh
  00040	66 41 0f 28 c0	 movapd	 xmm0, xmm8
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  0004b	85 c0		 test	 eax, eax
  0004d	0f 84 f9 00 00
	00		 je	 $LN6@Py_asinh
$LN7@Py_asinh:

; 96   :     }
; 97   :     if (absx < two_pow_m28) {           /* |x| < 2**-28 */

  00053	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR two_pow_m28
  0005b	66 41 0f 2f c1	 comisd	 xmm0, xmm9

; 98   :         return x;                       /* return x inexact except 0 */

  00060	0f 87 eb 00 00
	00		 ja	 $LN12@Py_asinh

; 99   :     }
; 100  :     if (absx > two_pow_p28) {           /* |x| > 2**28 */

  00066	66 44 0f 2f 0d
	00 00 00 00	 comisd	 xmm9, QWORD PTR two_pow_p28
  0006f	76 2e		 jbe	 SHORT $LN4@Py_asinh

; 101  :         w = log(absx)+ln2;

  00071	66 41 0f 28 c1	 movapd	 xmm0, xmm9
  00076	e8 00 00 00 00	 call	 log

; 109  :     }
; 110  :     return copysign(w, x);

  0007b	66 41 0f 28 c8	 movapd	 xmm1, xmm8
  00080	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ln2

; 111  : 
; 112  : }

  00088	44 0f 28 44 24
	30		 movaps	 xmm8, XMMWORD PTR [rsp+48]
  0008e	44 0f 28 4c 24
	20		 movaps	 xmm9, XMMWORD PTR [rsp+32]
  00094	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00098	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__copysign
$LN4@Py_asinh:
  0009f	0f 29 74 24 50	 movaps	 XMMWORD PTR [rsp+80], xmm6
  000a4	0f 29 7c 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm7

; 102  :     }
; 103  :     else if (absx > 2.0) {              /* 2 < |x| < 2**28 */

  000a9	f2 0f 10 3d 00
	00 00 00	 movsdx	 xmm7, QWORD PTR __real@4000000000000000
  000b1	66 44 0f 2f cf	 comisd	 xmm9, xmm7
  000b6	76 39		 jbe	 SHORT $LN2@Py_asinh

; 104  :         w = log(2.0*absx + 1.0 / (sqrt(x*x + 1.0) + absx));

  000b8	f2 0f 10 35 00
	00 00 00	 movsdx	 xmm6, QWORD PTR __real@3ff0000000000000
  000c0	66 41 0f 28 c0	 movapd	 xmm0, xmm8
  000c5	f2 41 0f 59 c0	 mulsd	 xmm0, xmm8
  000ca	f2 0f 58 c6	 addsd	 xmm0, xmm6
  000ce	e8 00 00 00 00	 call	 sqrt
  000d3	f2 41 0f 58 c1	 addsd	 xmm0, xmm9
  000d8	f2 44 0f 59 cf	 mulsd	 xmm9, xmm7
  000dd	f2 0f 5e f0	 divsd	 xmm6, xmm0
  000e1	f2 41 0f 58 f1	 addsd	 xmm6, xmm9
  000e6	66 0f 28 c6	 movapd	 xmm0, xmm6
  000ea	e8 00 00 00 00	 call	 log

; 105  :     }
; 106  :     else {                              /* 2**-28 <= |x| < 2= */

  000ef	eb 35		 jmp	 SHORT $LN11@Py_asinh
$LN2@Py_asinh:

; 107  :         double t = x*x;

  000f1	66 41 0f 28 f8	 movapd	 xmm7, xmm8
  000f6	f2 41 0f 59 f8	 mulsd	 xmm7, xmm8

; 108  :         w = m_log1p(absx + t / (1.0 + sqrt(1.0 + t)));

  000fb	66 0f 28 c7	 movapd	 xmm0, xmm7
  000ff	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00107	e8 00 00 00 00	 call	 sqrt
  0010c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00114	f2 0f 5e f8	 divsd	 xmm7, xmm0
  00118	f2 41 0f 58 f9	 addsd	 xmm7, xmm9
  0011d	66 0f 28 c7	 movapd	 xmm0, xmm7
  00121	e8 00 00 00 00	 call	 _Py_log1p
$LN11@Py_asinh:

; 109  :     }
; 110  :     return copysign(w, x);

  00126	0f 28 74 24 50	 movaps	 xmm6, XMMWORD PTR [rsp+80]
  0012b	0f 28 7c 24 40	 movaps	 xmm7, XMMWORD PTR [rsp+64]
  00130	66 41 0f 28 c8	 movapd	 xmm1, xmm8

; 111  : 
; 112  : }

  00135	44 0f 28 44 24
	30		 movaps	 xmm8, XMMWORD PTR [rsp+48]
  0013b	44 0f 28 4c 24
	20		 movaps	 xmm9, XMMWORD PTR [rsp+32]
  00141	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00145	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__copysign
$LN6@Py_asinh:

; 95   :         return x+x;

  0014c	f2 45 0f 58 c0	 addsd	 xmm8, xmm8
$LN12@Py_asinh:

; 111  : 
; 112  : }

  00151	44 0f 28 4c 24
	20		 movaps	 xmm9, XMMWORD PTR [rsp+32]
  00157	66 41 0f 28 c0	 movapd	 xmm0, xmm8
  0015c	44 0f 28 44 24
	30		 movaps	 xmm8, XMMWORD PTR [rsp+48]
  00162	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00166	c3		 ret	 0
_Py_asinh ENDP
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
PUBLIC	_Py_atanh
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_atanh DD imagerel $LN10
	DD	imagerel $LN10+217
	DD	imagerel $unwind$_Py_atanh
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_atanh DD 057f01H
	DD	02787fH
	DD	036809H
	DD	08204H
xdata	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_atanh
_TEXT	SEGMENT
x$ = 80
_Py_atanh PROC						; COMDAT

; 133  : {

$LN10:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00004	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  00009	66 0f 28 f0	 movapd	 xmm6, xmm0

; 134  :     double absx;
; 135  :     double t;
; 136  : 
; 137  :     if (Py_IS_NAN(x)) {

  0000d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00013	85 c0		 test	 eax, eax
  00015	74 12		 je	 SHORT $LN5@Py_atanh

; 138  :         return x+x;

  00017	f2 0f 58 f6	 addsd	 xmm6, xmm6
$LN9@Py_atanh:
  0001b	66 0f 28 c6	 movapd	 xmm0, xmm6

; 160  : }

  0001f	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  00024	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00028	c3		 ret	 0
$LN5@Py_atanh:

; 139  :     }
; 140  :     absx = fabs(x);
; 141  :     if (absx >= 1.) {                   /* |x| >= 1 */

  00029	f2 0f 10 1d 00
	00 00 00	 movsdx	 xmm3, QWORD PTR __real@3ff0000000000000
  00031	66 0f 28 d6	 movapd	 xmm2, xmm6
  00035	66 0f 54 15 00
	00 00 00	 andpd	 xmm2, QWORD PTR __mask@@AbsDouble@
  0003d	66 0f 2f d3	 comisd	 xmm2, xmm3
  00041	72 29		 jb	 SHORT $LN4@Py_atanh

; 142  :         errno = EDOM;

  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00049	c7 00 21 00 00
	00		 mov	 DWORD PTR [rax], 33	; 00000021H

; 143  : #ifdef Py_NAN
; 144  :         return Py_NAN;

  0004f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  00056	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0005a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@0000000000000000

; 160  : }

  00062	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  00067	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006b	c3		 ret	 0
$LN4@Py_atanh:

; 145  : #else
; 146  :         return x/zero;
; 147  : #endif
; 148  :     }
; 149  :     if (absx < two_pow_m28) {           /* |x| < 2**-28 */

  0006c	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR two_pow_m28
  00074	66 0f 2f c2	 comisd	 xmm0, xmm2

; 150  :         return x;

  00078	77 a1		 ja	 SHORT $LN9@Py_atanh

; 151  :     }
; 152  :     if (absx < 0.5) {                   /* |x| < 0.5 */

  0007a	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  0007f	f2 0f 10 3d 00
	00 00 00	 movsdx	 xmm7, QWORD PTR __real@3fe0000000000000

; 154  :         t = 0.5 * m_log1p(t + t*absx / (1.0 - absx));

  00087	f2 0f 5c da	 subsd	 xmm3, xmm2
  0008b	66 0f 2f fa	 comisd	 xmm7, xmm2
  0008f	76 1a		 jbe	 SHORT $LN2@Py_atanh

; 153  :         t = absx+absx;

  00091	66 0f 28 ca	 movapd	 xmm1, xmm2
  00095	f2 0f 58 ca	 addsd	 xmm1, xmm2

; 154  :         t = 0.5 * m_log1p(t + t*absx / (1.0 - absx));

  00099	66 0f 28 c1	 movapd	 xmm0, xmm1
  0009d	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  000a1	f2 0f 5e c3	 divsd	 xmm0, xmm3
  000a5	f2 0f 58 c1	 addsd	 xmm0, xmm1

; 155  :     }
; 156  :     else {                              /* 0.5 <= |x| <= 1.0 */

  000a9	eb 0c		 jmp	 SHORT $LN8@Py_atanh
$LN2@Py_atanh:

; 157  :         t = 0.5 * m_log1p((absx + absx) / (1.0 - absx));

  000ab	66 0f 28 c2	 movapd	 xmm0, xmm2
  000af	f2 0f 58 c2	 addsd	 xmm0, xmm2
  000b3	f2 0f 5e c3	 divsd	 xmm0, xmm3
$LN8@Py_atanh:
  000b7	e8 00 00 00 00	 call	 _Py_log1p

; 158  :     }
; 159  :     return copysign(t, x);

  000bc	66 0f 28 ce	 movapd	 xmm1, xmm6
  000c0	f2 0f 59 c7	 mulsd	 xmm0, xmm7
  000c4	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]

; 160  : }

  000c9	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  000ce	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d2	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__copysign
_Py_atanh ENDP
_TEXT	ENDS
END
