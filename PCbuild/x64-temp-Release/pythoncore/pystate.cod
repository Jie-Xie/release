; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_PyThreadState_Current
PUBLIC	_PyThreadState_GetFrame
_BSS	SEGMENT
head_mutex DQ	01H DUP (?)
autoInterpreterState DQ 01H DUP (?)
autoTLSkey DD	01H DUP (?)
	ALIGN	8

interp_head DQ	01H DUP (?)
_PyThreadState_Current DQ 01H DUP (?)
_PyThreadState_GetFrame DQ 01H DUP (?)
_BSS	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
PUBLIC	_Py_IncRef
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 32		 jne	 SHORT $LN2@Py_IncRef
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00020	4c 8b cb	 mov	 r9, rbx
  00023	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00029	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 06		 jne	 SHORT $LN1@Py_IncRef
  0003a	f6 43 20 20	 test	 BYTE PTR [rbx+32], 32	; 00000020H
  0003e	74 04		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;
; 907  :         (((PyObject*)(op))->ob_refcnt++);

  00040	48 ff 43 50	 inc	 QWORD PTR [rbx+80]
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  00044	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00048	5b		 pop	 rbx
  00049	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	_Py_DecRef
EXTRN	Px_DecRef:PROC
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
op$ = 64
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b d9	 mov	 rbx, rcx

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 63		 jne	 SHORT $LN11@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00012	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00016	a8 20		 test	 al, 32			; 00000020H
  00018	75 53		 jne	 SHORT $LN5@Py_DecRef
  0001a	84 c0		 test	 al, al
  0001c	78 4f		 js	 SHORT $LN5@Py_DecRef

; 927  :         else if (!Px_ISPX(op)) {

  0001e	a8 02		 test	 al, 2
  00020	75 53		 jne	 SHORT $LN11@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;
; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  00022	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00026	75 4d		 jne	 SHORT $LN11@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00036	4c 8b cb	 mov	 r9, rbx
  00039	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0003f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004c	48 8b cb	 mov	 rcx, rbx
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN10@Py_DecRef

; 933  :         }
; 934  :     }
; 935  : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5b		 pop	 rbx
  00058	e9 00 00 00 00	 jmp	 _Px_Dealloc
$LN10@Py_DecRef:

; 930  :                 _Py_CHECK_REFCNT(op);
; 931  :             } else
; 932  :                 _Py_Dealloc((PyObject *)(op));

  0005d	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 933  :         }
; 934  :     }
; 935  : }

  00061	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00065	5b		 pop	 rbx
  00066	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]
$LN5@Py_DecRef:

; 926  :             Px_DECREF(op);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	e8 00 00 00 00	 call	 Px_DecRef
$LN11@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@FJGDJPCA@Can?8t?5initialize?5threads?5for?5int@ ; `string'
PUBLIC	PyInterpreterState_New
EXTRN	PyThread_release_lock:PROC
EXTRN	PyThread_acquire_lock:PROC
EXTRN	Py_FatalError:PROC
EXTRN	PyThread_allocate_lock:PROC
EXTRN	__imp_malloc:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pystate.c
pdata	SEGMENT
$pdata$PyInterpreterState_New DD imagerel $LN7
	DD	imagerel $LN7+168
	DD	imagerel $unwind$PyInterpreterState_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInterpreterState_New DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CJ@FJGDJPCA@Can?8t?5initialize?5threads?5for?5int@
CONST	SEGMENT
??_C@_0CJ@FJGDJPCA@Can?8t?5initialize?5threads?5for?5int@ DB 'Can''t init'
	DB	'ialize threads for interpreter', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyInterpreterState_New
_TEXT	SEGMENT
PyInterpreterState_New PROC				; COMDAT

; 61   : {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 62   :     PyInterpreterState *interp = (PyInterpreterState *)
; 63   :                                  malloc(sizeof(PyInterpreterState));

  00006	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00011	48 8b d8	 mov	 rbx, rax

; 64   : 
; 65   :     if (interp != NULL) {

  00014	48 85 c0	 test	 rax, rax
  00017	0f 84 85 00 00
	00		 je	 $LN2@PyInterpre

; 66   :         HEAD_INIT();

  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR head_mutex
  00024	48 85 c0	 test	 rax, rax
  00027	75 24		 jne	 SHORT $LN1@PyInterpre
  00029	e8 00 00 00 00	 call	 PyThread_allocate_lock
  0002e	48 89 05 00 00
	00 00		 mov	 QWORD PTR head_mutex, rax

; 67   : #ifdef WITH_THREAD
; 68   :         if (head_mutex == NULL)

  00035	48 85 c0	 test	 rax, rax
  00038	75 13		 jne	 SHORT $LN1@PyInterpre

; 69   :             Py_FatalError("Can't initialize threads for interpreter");

  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@FJGDJPCA@Can?8t?5initialize?5threads?5for?5int@
  00041	e8 00 00 00 00	 call	 Py_FatalError
  00046	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR head_mutex
$LN1@PyInterpre:

; 70   : #endif
; 71   :         interp->modules = NULL;

  0004d	33 c9		 xor	 ecx, ecx
  0004f	48 89 4b 10	 mov	 QWORD PTR [rbx+16], rcx

; 72   :         interp->modules_by_index = NULL;

  00053	48 89 4b 18	 mov	 QWORD PTR [rbx+24], rcx

; 73   :         interp->sysdict = NULL;

  00057	48 89 4b 20	 mov	 QWORD PTR [rbx+32], rcx

; 74   :         interp->builtins = NULL;
; 75   :         interp->tstate_head = NULL;
; 76   :         interp->codec_search_path = NULL;
; 77   :         interp->codec_search_cache = NULL;
; 78   :         interp->codec_error_registry = NULL;
; 79   :         interp->codecs_initialized = 0;
; 80   :         interp->fscodec_initialized = 0;
; 81   :         interp->importlib = NULL;
; 82   : #ifdef HAVE_DLOPEN
; 83   : #ifdef RTLD_NOW
; 84   :         interp->dlopenflags = RTLD_NOW;
; 85   : #else
; 86   :         interp->dlopenflags = RTLD_LAZY;
; 87   : #endif
; 88   : #endif
; 89   : #ifdef WITH_TSC
; 90   :         interp->tscdump = 0;
; 91   : #endif
; 92   : 
; 93   :         HEAD_LOCK();

  0005b	8d 51 01	 lea	 edx, QWORD PTR [rcx+1]
  0005e	48 89 4b 28	 mov	 QWORD PTR [rbx+40], rcx
  00062	48 89 4b 08	 mov	 QWORD PTR [rbx+8], rcx
  00066	48 89 4b 38	 mov	 QWORD PTR [rbx+56], rcx
  0006a	48 89 4b 40	 mov	 QWORD PTR [rbx+64], rcx
  0006e	48 89 4b 48	 mov	 QWORD PTR [rbx+72], rcx
  00072	48 89 4b 50	 mov	 QWORD PTR [rbx+80], rcx
  00076	48 89 4b 30	 mov	 QWORD PTR [rbx+48], rcx
  0007a	48 8b c8	 mov	 rcx, rax
  0007d	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 94   :         interp->next = interp_head;

  00082	4c 8b 1d 00 00
	00 00		 mov	 r11, QWORD PTR interp_head

; 95   :         interp_head = interp;
; 96   :         HEAD_UNLOCK();

  00089	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  00090	4c 89 1b	 mov	 QWORD PTR [rbx], r11
  00093	48 89 1d 00 00
	00 00		 mov	 QWORD PTR interp_head, rbx
  0009a	e8 00 00 00 00	 call	 PyThread_release_lock

; 97   :     }
; 98   : 
; 99   :     return interp;

  0009f	48 8b c3	 mov	 rax, rbx
$LN2@PyInterpre:

; 100  : }

  000a2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a6	5b		 pop	 rbx
  000a7	c3		 ret	 0
PyInterpreterState_New ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT threadstate_getframe
_TEXT	SEGMENT
self$ = 8
threadstate_getframe PROC				; COMDAT

; 168  :     return self->frame;

  00000	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]

; 169  : }

  00004	c3		 ret	 0
threadstate_getframe ENDP
_TEXT	ENDS
PUBLIC	PyState_FindModule
EXTRN	_Py_NoneStruct:BYTE
EXTRN	_PyParallel_GetThreadState:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyState_FindModule DD imagerel $LN9
	DD	imagerel $LN9+95
	DD	imagerel $unwind$PyState_FindModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyState_FindModule DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyState_FindModule
_TEXT	SEGMENT
module$ = 48
PyState_FindModule PROC					; COMDAT

; 263  : {

$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 264  :     Py_ssize_t index = module->m_base.m_index;

  00006	48 8b 59 68	 mov	 rbx, QWORD PTR [rcx+104]

; 265  :     PyInterpreterState *state = PyThreadState_GET()->interp;

  0000a	e8 00 00 00 00	 call	 _Py_PXCTX
  0000f	85 c0		 test	 eax, eax
  00011	74 07		 je	 SHORT $LN6@PyState_Fi
  00013	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00018	eb 07		 jmp	 SHORT $LN7@PyState_Fi
$LN6@PyState_Fi:
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN7@PyState_Fi:
  00021	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 266  :     PyObject *res;
; 267  :     if (index == 0)

  00025	48 85 db	 test	 rbx, rbx
  00028	75 08		 jne	 SHORT $LN3@PyState_Fi
$LN8@PyState_Fi:

; 268  :         return NULL;

  0002a	33 c0		 xor	 eax, eax

; 275  : }

  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5b		 pop	 rbx
  00031	c3		 ret	 0
$LN3@PyState_Fi:

; 269  :     if (state->modules_by_index == NULL)

  00032	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00036	48 85 c0	 test	 rax, rax

; 270  :         return NULL;

  00039	74 ef		 je	 SHORT $LN8@PyState_Fi

; 271  :     if (index >= PyList_GET_SIZE(state->modules_by_index))

  0003b	48 3b 58 60	 cmp	 rbx, QWORD PTR [rax+96]

; 272  :         return NULL;

  0003f	7d e9		 jge	 SHORT $LN8@PyState_Fi

; 273  :     res = PyList_GET_ITEM(state->modules_by_index, index);

  00041	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]

; 274  :     return res==Py_None ? NULL : res;

  00045	33 c9		 xor	 ecx, ecx
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  0004e	48 8b 04 d8	 mov	 rax, QWORD PTR [rax+rbx*8]
  00052	48 3b c2	 cmp	 rax, rdx
  00055	48 0f 44 c1	 cmove	 rax, rcx

; 275  : }

  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5b		 pop	 rbx
  0005e	c3		 ret	 0
PyState_FindModule ENDP
_TEXT	ENDS
PUBLIC	_PyState_AddModule
EXTRN	PyList_SetItem:PROC
EXTRN	PyList_Append:PROC
EXTRN	PyList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyState_AddModule DD imagerel $LN14
	DD	imagerel $LN14+185
	DD	imagerel $unwind$_PyState_AddModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyState_AddModule DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyState_AddModule
_TEXT	SEGMENT
module$ = 48
def$ = 56
_PyState_AddModule PROC					; COMDAT

; 279  : {

$LN14:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fa	 mov	 rdi, rdx
  00012	48 8b f1	 mov	 rsi, rcx

; 280  :     PyInterpreterState *state = PyThreadState_GET()->interp;

  00015	e8 00 00 00 00	 call	 _Py_PXCTX
  0001a	85 c0		 test	 eax, eax
  0001c	74 07		 je	 SHORT $LN9@PyState_Ad
  0001e	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00023	eb 07		 jmp	 SHORT $LN10@PyState_Ad
$LN9@PyState_Ad:
  00025	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN10@PyState_Ad:
  0002c	48 8b 58 08	 mov	 rbx, QWORD PTR [rax+8]

; 281  :     if (!def)

  00030	48 85 ff	 test	 rdi, rdi
  00033	75 13		 jne	 SHORT $LN6@PyState_Ad
$LN13@PyState_Ad:

; 282  :         return -1;

  00035	83 c8 ff	 or	 eax, -1

; 294  : }

  00038	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
$LN6@PyState_Ad:

; 283  :     if (!state->modules_by_index) {

  00048	48 83 7b 18 00	 cmp	 QWORD PTR [rbx+24], 0
  0004d	75 10		 jne	 SHORT $LN11@PyState_Ad

; 284  :         state->modules_by_index = PyList_New(0);

  0004f	33 c9		 xor	 ecx, ecx
  00051	e8 00 00 00 00	 call	 PyList_New
  00056	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax

; 285  :         if (!state->modules_by_index)

  0005a	48 85 c0	 test	 rax, rax

; 286  :             return -1;

  0005d	74 d6		 je	 SHORT $LN13@PyState_Ad
$LN11@PyState_Ad:

; 287  :     }
; 288  :     while(PyList_GET_SIZE(state->modules_by_index) <= def->m_base.m_index)

  0005f	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  00063	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  00067	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  0006b	7f 25		 jg	 SHORT $LN2@PyState_Ad
  0006d	0f 1f 00	 npad	 3
$LL3@PyState_Ad:

; 289  :         if (PyList_Append(state->modules_by_index, Py_None) < 0)

  00070	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  0007b	e8 00 00 00 00	 call	 PyList_Append
  00080	85 c0		 test	 eax, eax
  00082	78 b1		 js	 SHORT $LN13@PyState_Ad

; 287  :     }
; 288  :     while(PyList_GET_SIZE(state->modules_by_index) <= def->m_base.m_index)

  00084	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  00088	48 8b 47 68	 mov	 rax, QWORD PTR [rdi+104]
  0008c	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  00090	7e de		 jle	 SHORT $LL3@PyState_Ad
$LN2@PyState_Ad:

; 290  :             return -1;
; 291  :     Py_INCREF(module);

  00092	48 8b ce	 mov	 rcx, rsi
  00095	e8 00 00 00 00	 call	 _Py_IncRef

; 292  :     return PyList_SetItem(state->modules_by_index,
; 293  :                           def->m_base.m_index, module);

  0009a	48 8b 57 68	 mov	 rdx, QWORD PTR [rdi+104]
  0009e	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  000a2	4c 8b c6	 mov	 r8, rsi

; 294  : }

  000a5	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000aa	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000af	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b3	5f		 pop	 rdi
  000b4	e9 00 00 00 00	 jmp	 PyList_SetItem
_PyState_AddModule ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@DAMJNHLL@PyState_AddModule?3?5Module?5alread@ ; `string'
PUBLIC	??_C@_0CN@JCEKIGBO@PyState_AddModule?3?5Module?5Defini@ ; `string'
PUBLIC	PyState_AddModule
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyState_AddModule DD imagerel $LN9
	DD	imagerel $LN9+150
	DD	imagerel $unwind$PyState_AddModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyState_AddModule DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CJ@DAMJNHLL@PyState_AddModule?3?5Module?5alread@
CONST	SEGMENT
??_C@_0CJ@DAMJNHLL@PyState_AddModule?3?5Module?5alread@ DB 'PyState_AddMo'
	DB	'dule: Module already added!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JCEKIGBO@PyState_AddModule?3?5Module?5Defini@
CONST	SEGMENT
??_C@_0CN@JCEKIGBO@PyState_AddModule?3?5Module?5Defini@ DB 'PyState_AddMo'
	DB	'dule: Module Definition is NULL', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyState_AddModule
_TEXT	SEGMENT
module$ = 48
def$ = 56
PyState_AddModule PROC					; COMDAT

; 298  : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 299  :     Py_ssize_t index;
; 300  :     PyInterpreterState *state = PyThreadState_GET()->interp;

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 07		 je	 SHORT $LN7@PyState_Ad@2
  00019	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  0001e	eb 07		 jmp	 SHORT $LN8@PyState_Ad@2
$LN7@PyState_Ad@2:
  00020	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN8@PyState_Ad@2:
  00027	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 301  :     if (!def) {

  0002b	48 85 db	 test	 rbx, rbx
  0002e	75 1a		 jne	 SHORT $LN4@PyState_Ad@2

; 302  :         Py_FatalError("PyState_AddModule: Module Definition is NULL");

  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@JCEKIGBO@PyState_AddModule?3?5Module?5Defini@
  00037	e8 00 00 00 00	 call	 Py_FatalError

; 303  :         return -1;

  0003c	83 c8 ff	 or	 eax, -1

; 315  : }

  0003f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
$LN4@PyState_Ad@2:

; 304  :     }
; 305  :     index = def->m_base.m_index;
; 306  :     if (state->modules_by_index) {

  0004a	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0004e	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00052	48 85 c0	 test	 rax, rax
  00055	74 2a		 je	 SHORT $LN1@PyState_Ad@2

; 307  :         if(PyList_GET_SIZE(state->modules_by_index) >= index) {

  00057	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  0005b	7c 24		 jl	 SHORT $LN1@PyState_Ad@2

; 308  :             if(module == PyList_GET_ITEM(state->modules_by_index, index)) {

  0005d	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00061	48 3b 3c c8	 cmp	 rdi, QWORD PTR [rax+rcx*8]
  00065	75 1a		 jne	 SHORT $LN1@PyState_Ad@2

; 309  :                 Py_FatalError("PyState_AddModule: Module already added!");

  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@DAMJNHLL@PyState_AddModule?3?5Module?5alread@
  0006e	e8 00 00 00 00	 call	 Py_FatalError

; 310  :                 return -1;

  00073	83 c8 ff	 or	 eax, -1

; 315  : }

  00076	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007f	5f		 pop	 rdi
  00080	c3		 ret	 0
$LN1@PyState_Ad@2:

; 311  :             }
; 312  :         }
; 313  :     }
; 314  :     return _PyState_AddModule(module, def);

  00081	48 8b d3	 mov	 rdx, rbx
  00084	48 8b cf	 mov	 rcx, rdi

; 315  : }

  00087	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00090	5f		 pop	 rdi
  00091	e9 00 00 00 00	 jmp	 _PyState_AddModule
PyState_AddModule ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DC@NPLJAGMG@PyState_RemoveModule?3?5Module?5ind@ ; `string'
PUBLIC	??_C@_0DO@GMPBODCD@PyState_RemoveModule?3?5Interprete@ ; `string'
PUBLIC	??_C@_0CM@KMNLLHD@PyState_RemoveModule?3?5Module?5ind@ ; `string'
PUBLIC	PyState_RemoveModule
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyState_RemoveModule DD imagerel $LN8
	DD	imagerel $LN8+140
	DD	imagerel $unwind$PyState_RemoveModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyState_RemoveModule DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0DC@NPLJAGMG@PyState_RemoveModule?3?5Module?5ind@
CONST	SEGMENT
??_C@_0DC@NPLJAGMG@PyState_RemoveModule?3?5Module?5ind@ DB 'PyState_Remov'
	DB	'eModule: Module index out of bounds.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@GMPBODCD@PyState_RemoveModule?3?5Interprete@
CONST	SEGMENT
??_C@_0DO@GMPBODCD@PyState_RemoveModule?3?5Interprete@ DB 'PyState_Remove'
	DB	'Module: Interpreters module-list not acessible.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@KMNLLHD@PyState_RemoveModule?3?5Module?5ind@
CONST	SEGMENT
??_C@_0CM@KMNLLHD@PyState_RemoveModule?3?5Module?5ind@ DB 'PyState_Remove'
	DB	'Module: Module index invalid.', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyState_RemoveModule
_TEXT	SEGMENT
def$ = 48
PyState_RemoveModule PROC				; COMDAT

; 319  : {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 320  :     Py_ssize_t index = def->m_base.m_index;

  00006	48 8b 59 68	 mov	 rbx, QWORD PTR [rcx+104]

; 321  :     PyInterpreterState *state = PyThreadState_GET()->interp;

  0000a	e8 00 00 00 00	 call	 _Py_PXCTX
  0000f	85 c0		 test	 eax, eax
  00011	74 07		 je	 SHORT $LN6@PyState_Re
  00013	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00018	eb 07		 jmp	 SHORT $LN7@PyState_Re
$LN6@PyState_Re:
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN7@PyState_Re:
  00021	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]

; 322  :     if (index == 0) {

  00025	48 85 db	 test	 rbx, rbx
  00028	75 15		 jne	 SHORT $LN3@PyState_Re

; 323  :         Py_FatalError("PyState_RemoveModule: Module index invalid.");

  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@KMNLLHD@PyState_RemoveModule?3?5Module?5ind@
  00031	e8 00 00 00 00	 call	 Py_FatalError

; 324  :         return -1;

  00036	83 c8 ff	 or	 eax, -1

; 335  : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5b		 pop	 rbx
  0003e	c3		 ret	 0
$LN3@PyState_Re:

; 325  :     }
; 326  :     if (state->modules_by_index == NULL) {

  0003f	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00043	48 85 c9	 test	 rcx, rcx
  00046	75 15		 jne	 SHORT $LN2@PyState_Re

; 327  :         Py_FatalError("PyState_RemoveModule: Interpreters module-list not acessible.");

  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DO@GMPBODCD@PyState_RemoveModule?3?5Interprete@
  0004f	e8 00 00 00 00	 call	 Py_FatalError

; 328  :         return -1;

  00054	83 c8 ff	 or	 eax, -1

; 335  : }

  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5b		 pop	 rbx
  0005c	c3		 ret	 0
$LN2@PyState_Re:

; 329  :     }
; 330  :     if (index > PyList_GET_SIZE(state->modules_by_index)) {

  0005d	48 3b 59 60	 cmp	 rbx, QWORD PTR [rcx+96]
  00061	7e 15		 jle	 SHORT $LN1@PyState_Re

; 331  :         Py_FatalError("PyState_RemoveModule: Module index out of bounds.");

  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DC@NPLJAGMG@PyState_RemoveModule?3?5Module?5ind@
  0006a	e8 00 00 00 00	 call	 Py_FatalError

; 332  :         return -1;

  0006f	83 c8 ff	 or	 eax, -1

; 335  : }

  00072	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00076	5b		 pop	 rbx
  00077	c3		 ret	 0
$LN1@PyState_Re:

; 333  :     }
; 334  :     return PyList_SetItem(state->modules_by_index, index, Py_None);

  00078	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  0007f	48 8b d3	 mov	 rdx, rbx

; 335  : }

  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	5b		 pop	 rbx
  00087	e9 00 00 00 00	 jmp	 PyList_SetItem
PyState_RemoveModule ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@	; `string'
PUBLIC	??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@	; `string'
PUBLIC	??_C@_0DI@DNBDENBA@PyThreadState_Clear?3?5warning?3?5th@ ; `string'
PUBLIC	PyThreadState_Clear
EXTRN	_PyParallel_ClearingThreadState:PROC
EXTRN	__imp_fprintf:PROC
EXTRN	__imp___iob_func:PROC
EXTRN	Py_VerboseFlag:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyThreadState_Clear DD imagerel $LN169
	DD	imagerel $LN169+1880
	DD	imagerel $unwind$PyThreadState_Clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_Clear DD 063c01H
	DD	08743cH
	DD	09340aH
	DD	06006520aH
xdata	ENDS
;	COMDAT ??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
CONST	SEGMENT
??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@ DB 'PyThreadState_Clear', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
CONST	SEGMENT
??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@ DB '..\Python\pystate.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@DNBDENBA@PyThreadState_Clear?3?5warning?3?5th@
CONST	SEGMENT
??_C@_0DI@DNBDENBA@PyThreadState_Clear?3?5warning?3?5th@ DB 'PyThreadStat'
	DB	'e_Clear: warning: thread still has a frame', 0aH, 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pystate.c
CONST	ENDS
;	COMDAT PyThreadState_Clear
_TEXT	SEGMENT
tstate$ = 64
PyThreadState_Clear PROC				; COMDAT

; 339  : {

$LN169:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 340  :     if (Py_VerboseFlag && tstate->frame != NULL)

  0000a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00011	48 8b d9	 mov	 rbx, rcx
  00014	74 1e		 je	 SHORT $LN45@PyThreadSt
  00016	48 83 79 10 00	 cmp	 QWORD PTR [rcx+16], 0
  0001b	74 17		 je	 SHORT $LN45@PyThreadSt

; 341  :         fprintf(stderr,
; 342  :           "PyThreadState_Clear: warning: thread still has a frame\n");

  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@DNBDENBA@PyThreadState_Clear?3?5warning?3?5th@
  0002a	48 8d 48 60	 lea	 rcx, QWORD PTR [rax+96]
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
$LN45@PyThreadSt:

; 343  : 
; 344  : #ifdef WITH_PARALLEL
; 345  :     _PyParallel_ClearingThreadState(tstate);

  00034	48 8b cb	 mov	 rcx, rbx
  00037	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0003c	e8 00 00 00 00	 call	 _PyParallel_ClearingThreadState

; 346  : #endif
; 347  : 
; 348  :     Py_CLEAR(tstate->frame);

  00041	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  00045	33 f6		 xor	 esi, esi
  00047	4d 85 c9	 test	 r9, r9
  0004a	0f 84 92 00 00
	00		 je	 $LN43@PyThreadSt
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  0005e	41 b8 5c 01 00
	00		 mov	 r8d, 348		; 0000015cH
  00064	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0006c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00071	85 c0		 test	 eax, eax
  00073	75 6d		 jne	 SHORT $LN43@PyThreadSt
  00075	48 8b 7b 10	 mov	 rdi, QWORD PTR [rbx+16]
  00079	48 89 73 10	 mov	 QWORD PTR [rbx+16], rsi
  0007d	e8 00 00 00 00	 call	 _Py_PXCTX
  00082	85 c0		 test	 eax, eax
  00084	75 5c		 jne	 SHORT $LN43@PyThreadSt
  00086	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0008a	a8 20		 test	 al, 32			; 00000020H
  0008c	75 4c		 jne	 SHORT $LN52@PyThreadSt
  0008e	84 c0		 test	 al, al
  00090	78 48		 js	 SHORT $LN52@PyThreadSt
  00092	a8 02		 test	 al, 2
  00094	75 4c		 jne	 SHORT $LN43@PyThreadSt
  00096	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0009a	75 46		 jne	 SHORT $LN43@PyThreadSt
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000aa	4c 8b cf	 mov	 r9, rdi
  000ad	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000b3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000bb	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c0	48 8b cf	 mov	 rcx, rdi
  000c3	85 c0		 test	 eax, eax
  000c5	74 07		 je	 SHORT $LN57@PyThreadSt
  000c7	e8 00 00 00 00	 call	 _Px_Dealloc
  000cc	eb 14		 jmp	 SHORT $LN43@PyThreadSt
$LN57@PyThreadSt:
  000ce	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  000d2	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000d8	eb 08		 jmp	 SHORT $LN43@PyThreadSt
$LN52@PyThreadSt:
  000da	48 8b cf	 mov	 rcx, rdi
  000dd	e8 00 00 00 00	 call	 Px_DecRef
$LN43@PyThreadSt:

; 349  : 
; 350  :     Py_CLEAR(tstate->dict);

  000e2	4c 8b 4b 78	 mov	 r9, QWORD PTR [rbx+120]
  000e6	4d 85 c9	 test	 r9, r9
  000e9	0f 84 92 00 00
	00		 je	 $LN39@PyThreadSt
  000ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  000fd	41 b8 5e 01 00
	00		 mov	 r8d, 350		; 0000015eH
  00103	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0010b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00110	85 c0		 test	 eax, eax
  00112	75 6d		 jne	 SHORT $LN39@PyThreadSt
  00114	48 8b 7b 78	 mov	 rdi, QWORD PTR [rbx+120]
  00118	48 89 73 78	 mov	 QWORD PTR [rbx+120], rsi
  0011c	e8 00 00 00 00	 call	 _Py_PXCTX
  00121	85 c0		 test	 eax, eax
  00123	75 5c		 jne	 SHORT $LN39@PyThreadSt
  00125	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00129	a8 20		 test	 al, 32			; 00000020H
  0012b	75 4c		 jne	 SHORT $LN63@PyThreadSt
  0012d	84 c0		 test	 al, al
  0012f	78 48		 js	 SHORT $LN63@PyThreadSt
  00131	a8 02		 test	 al, 2
  00133	75 4c		 jne	 SHORT $LN39@PyThreadSt
  00135	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00139	75 46		 jne	 SHORT $LN39@PyThreadSt
  0013b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00149	4c 8b cf	 mov	 r9, rdi
  0014c	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00152	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0015a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0015f	48 8b cf	 mov	 rcx, rdi
  00162	85 c0		 test	 eax, eax
  00164	74 07		 je	 SHORT $LN68@PyThreadSt
  00166	e8 00 00 00 00	 call	 _Px_Dealloc
  0016b	eb 14		 jmp	 SHORT $LN39@PyThreadSt
$LN68@PyThreadSt:
  0016d	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00171	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00177	eb 08		 jmp	 SHORT $LN39@PyThreadSt
$LN63@PyThreadSt:
  00179	48 8b cf	 mov	 rcx, rdi
  0017c	e8 00 00 00 00	 call	 Px_DecRef
$LN39@PyThreadSt:

; 351  :     Py_CLEAR(tstate->async_exc);

  00181	4c 8b 8b 88 00
	00 00		 mov	 r9, QWORD PTR [rbx+136]
  00188	4d 85 c9	 test	 r9, r9
  0018b	0f 84 98 00 00
	00		 je	 $LN35@PyThreadSt
  00191	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  00198	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  0019f	41 b8 5f 01 00
	00		 mov	 r8d, 351		; 0000015fH
  001a5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001ad	e8 00 00 00 00	 call	 _PyParallel_Guard
  001b2	85 c0		 test	 eax, eax
  001b4	75 73		 jne	 SHORT $LN35@PyThreadSt
  001b6	48 8b bb 88 00
	00 00		 mov	 rdi, QWORD PTR [rbx+136]
  001bd	48 89 b3 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rsi
  001c4	e8 00 00 00 00	 call	 _Py_PXCTX
  001c9	85 c0		 test	 eax, eax
  001cb	75 5c		 jne	 SHORT $LN35@PyThreadSt
  001cd	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  001d1	a8 20		 test	 al, 32			; 00000020H
  001d3	75 4c		 jne	 SHORT $LN74@PyThreadSt
  001d5	84 c0		 test	 al, al
  001d7	78 48		 js	 SHORT $LN74@PyThreadSt
  001d9	a8 02		 test	 al, 2
  001db	75 4c		 jne	 SHORT $LN35@PyThreadSt
  001dd	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  001e1	75 46		 jne	 SHORT $LN35@PyThreadSt
  001e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001f1	4c 8b cf	 mov	 r9, rdi
  001f4	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001fa	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00202	e8 00 00 00 00	 call	 _PyParallel_Guard
  00207	48 8b cf	 mov	 rcx, rdi
  0020a	85 c0		 test	 eax, eax
  0020c	74 07		 je	 SHORT $LN79@PyThreadSt
  0020e	e8 00 00 00 00	 call	 _Px_Dealloc
  00213	eb 14		 jmp	 SHORT $LN35@PyThreadSt
$LN79@PyThreadSt:
  00215	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00219	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0021f	eb 08		 jmp	 SHORT $LN35@PyThreadSt
$LN74@PyThreadSt:
  00221	48 8b cf	 mov	 rcx, rdi
  00224	e8 00 00 00 00	 call	 Px_DecRef
$LN35@PyThreadSt:

; 352  : 
; 353  :     Py_CLEAR(tstate->curexc_type);

  00229	4c 8b 4b 48	 mov	 r9, QWORD PTR [rbx+72]
  0022d	4d 85 c9	 test	 r9, r9
  00230	0f 84 92 00 00
	00		 je	 $LN31@PyThreadSt
  00236	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  0023d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  00244	41 b8 61 01 00
	00		 mov	 r8d, 353		; 00000161H
  0024a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00252	e8 00 00 00 00	 call	 _PyParallel_Guard
  00257	85 c0		 test	 eax, eax
  00259	75 6d		 jne	 SHORT $LN31@PyThreadSt
  0025b	48 8b 7b 48	 mov	 rdi, QWORD PTR [rbx+72]
  0025f	48 89 73 48	 mov	 QWORD PTR [rbx+72], rsi
  00263	e8 00 00 00 00	 call	 _Py_PXCTX
  00268	85 c0		 test	 eax, eax
  0026a	75 5c		 jne	 SHORT $LN31@PyThreadSt
  0026c	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00270	a8 20		 test	 al, 32			; 00000020H
  00272	75 4c		 jne	 SHORT $LN85@PyThreadSt
  00274	84 c0		 test	 al, al
  00276	78 48		 js	 SHORT $LN85@PyThreadSt
  00278	a8 02		 test	 al, 2
  0027a	75 4c		 jne	 SHORT $LN31@PyThreadSt
  0027c	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00280	75 46		 jne	 SHORT $LN31@PyThreadSt
  00282	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00289	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00290	4c 8b cf	 mov	 r9, rdi
  00293	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00299	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002a1	e8 00 00 00 00	 call	 _PyParallel_Guard
  002a6	48 8b cf	 mov	 rcx, rdi
  002a9	85 c0		 test	 eax, eax
  002ab	74 07		 je	 SHORT $LN90@PyThreadSt
  002ad	e8 00 00 00 00	 call	 _Px_Dealloc
  002b2	eb 14		 jmp	 SHORT $LN31@PyThreadSt
$LN90@PyThreadSt:
  002b4	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  002b8	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002be	eb 08		 jmp	 SHORT $LN31@PyThreadSt
$LN85@PyThreadSt:
  002c0	48 8b cf	 mov	 rcx, rdi
  002c3	e8 00 00 00 00	 call	 Px_DecRef
$LN31@PyThreadSt:

; 354  :     Py_CLEAR(tstate->curexc_value);

  002c8	4c 8b 4b 50	 mov	 r9, QWORD PTR [rbx+80]
  002cc	4d 85 c9	 test	 r9, r9
  002cf	0f 84 92 00 00
	00		 je	 $LN27@PyThreadSt
  002d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  002dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  002e3	41 b8 62 01 00
	00		 mov	 r8d, 354		; 00000162H
  002e9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002f1	e8 00 00 00 00	 call	 _PyParallel_Guard
  002f6	85 c0		 test	 eax, eax
  002f8	75 6d		 jne	 SHORT $LN27@PyThreadSt
  002fa	48 8b 7b 50	 mov	 rdi, QWORD PTR [rbx+80]
  002fe	48 89 73 50	 mov	 QWORD PTR [rbx+80], rsi
  00302	e8 00 00 00 00	 call	 _Py_PXCTX
  00307	85 c0		 test	 eax, eax
  00309	75 5c		 jne	 SHORT $LN27@PyThreadSt
  0030b	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0030f	a8 20		 test	 al, 32			; 00000020H
  00311	75 4c		 jne	 SHORT $LN96@PyThreadSt
  00313	84 c0		 test	 al, al
  00315	78 48		 js	 SHORT $LN96@PyThreadSt
  00317	a8 02		 test	 al, 2
  00319	75 4c		 jne	 SHORT $LN27@PyThreadSt
  0031b	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0031f	75 46		 jne	 SHORT $LN27@PyThreadSt
  00321	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00328	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0032f	4c 8b cf	 mov	 r9, rdi
  00332	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00338	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00340	e8 00 00 00 00	 call	 _PyParallel_Guard
  00345	48 8b cf	 mov	 rcx, rdi
  00348	85 c0		 test	 eax, eax
  0034a	74 07		 je	 SHORT $LN101@PyThreadSt
  0034c	e8 00 00 00 00	 call	 _Px_Dealloc
  00351	eb 14		 jmp	 SHORT $LN27@PyThreadSt
$LN101@PyThreadSt:
  00353	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00357	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0035d	eb 08		 jmp	 SHORT $LN27@PyThreadSt
$LN96@PyThreadSt:
  0035f	48 8b cf	 mov	 rcx, rdi
  00362	e8 00 00 00 00	 call	 Px_DecRef
$LN27@PyThreadSt:

; 355  :     Py_CLEAR(tstate->curexc_traceback);

  00367	4c 8b 4b 58	 mov	 r9, QWORD PTR [rbx+88]
  0036b	4d 85 c9	 test	 r9, r9
  0036e	0f 84 92 00 00
	00		 je	 $LN23@PyThreadSt
  00374	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  0037b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  00382	41 b8 63 01 00
	00		 mov	 r8d, 355		; 00000163H
  00388	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00390	e8 00 00 00 00	 call	 _PyParallel_Guard
  00395	85 c0		 test	 eax, eax
  00397	75 6d		 jne	 SHORT $LN23@PyThreadSt
  00399	48 8b 7b 58	 mov	 rdi, QWORD PTR [rbx+88]
  0039d	48 89 73 58	 mov	 QWORD PTR [rbx+88], rsi
  003a1	e8 00 00 00 00	 call	 _Py_PXCTX
  003a6	85 c0		 test	 eax, eax
  003a8	75 5c		 jne	 SHORT $LN23@PyThreadSt
  003aa	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  003ae	a8 20		 test	 al, 32			; 00000020H
  003b0	75 4c		 jne	 SHORT $LN107@PyThreadSt
  003b2	84 c0		 test	 al, al
  003b4	78 48		 js	 SHORT $LN107@PyThreadSt
  003b6	a8 02		 test	 al, 2
  003b8	75 4c		 jne	 SHORT $LN23@PyThreadSt
  003ba	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  003be	75 46		 jne	 SHORT $LN23@PyThreadSt
  003c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  003ce	4c 8b cf	 mov	 r9, rdi
  003d1	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  003d7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003df	e8 00 00 00 00	 call	 _PyParallel_Guard
  003e4	48 8b cf	 mov	 rcx, rdi
  003e7	85 c0		 test	 eax, eax
  003e9	74 07		 je	 SHORT $LN112@PyThreadSt
  003eb	e8 00 00 00 00	 call	 _Px_Dealloc
  003f0	eb 14		 jmp	 SHORT $LN23@PyThreadSt
$LN112@PyThreadSt:
  003f2	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  003f6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003fc	eb 08		 jmp	 SHORT $LN23@PyThreadSt
$LN107@PyThreadSt:
  003fe	48 8b cf	 mov	 rcx, rdi
  00401	e8 00 00 00 00	 call	 Px_DecRef
$LN23@PyThreadSt:

; 356  : 
; 357  :     Py_CLEAR(tstate->exc_type);

  00406	4c 8b 4b 60	 mov	 r9, QWORD PTR [rbx+96]
  0040a	4d 85 c9	 test	 r9, r9
  0040d	0f 84 92 00 00
	00		 je	 $LN19@PyThreadSt
  00413	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  0041a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  00421	41 b8 65 01 00
	00		 mov	 r8d, 357		; 00000165H
  00427	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0042f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00434	85 c0		 test	 eax, eax
  00436	75 6d		 jne	 SHORT $LN19@PyThreadSt
  00438	48 8b 7b 60	 mov	 rdi, QWORD PTR [rbx+96]
  0043c	48 89 73 60	 mov	 QWORD PTR [rbx+96], rsi
  00440	e8 00 00 00 00	 call	 _Py_PXCTX
  00445	85 c0		 test	 eax, eax
  00447	75 5c		 jne	 SHORT $LN19@PyThreadSt
  00449	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0044d	a8 20		 test	 al, 32			; 00000020H
  0044f	75 4c		 jne	 SHORT $LN118@PyThreadSt
  00451	84 c0		 test	 al, al
  00453	78 48		 js	 SHORT $LN118@PyThreadSt
  00455	a8 02		 test	 al, 2
  00457	75 4c		 jne	 SHORT $LN19@PyThreadSt
  00459	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0045d	75 46		 jne	 SHORT $LN19@PyThreadSt
  0045f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00466	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0046d	4c 8b cf	 mov	 r9, rdi
  00470	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00476	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0047e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00483	48 8b cf	 mov	 rcx, rdi
  00486	85 c0		 test	 eax, eax
  00488	74 07		 je	 SHORT $LN123@PyThreadSt
  0048a	e8 00 00 00 00	 call	 _Px_Dealloc
  0048f	eb 14		 jmp	 SHORT $LN19@PyThreadSt
$LN123@PyThreadSt:
  00491	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00495	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0049b	eb 08		 jmp	 SHORT $LN19@PyThreadSt
$LN118@PyThreadSt:
  0049d	48 8b cf	 mov	 rcx, rdi
  004a0	e8 00 00 00 00	 call	 Px_DecRef
$LN19@PyThreadSt:

; 358  :     Py_CLEAR(tstate->exc_value);

  004a5	4c 8b 4b 68	 mov	 r9, QWORD PTR [rbx+104]
  004a9	4d 85 c9	 test	 r9, r9
  004ac	0f 84 92 00 00
	00		 je	 $LN15@PyThreadSt
  004b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  004b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  004c0	41 b8 66 01 00
	00		 mov	 r8d, 358		; 00000166H
  004c6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004ce	e8 00 00 00 00	 call	 _PyParallel_Guard
  004d3	85 c0		 test	 eax, eax
  004d5	75 6d		 jne	 SHORT $LN15@PyThreadSt
  004d7	48 8b 7b 68	 mov	 rdi, QWORD PTR [rbx+104]
  004db	48 89 73 68	 mov	 QWORD PTR [rbx+104], rsi
  004df	e8 00 00 00 00	 call	 _Py_PXCTX
  004e4	85 c0		 test	 eax, eax
  004e6	75 5c		 jne	 SHORT $LN15@PyThreadSt
  004e8	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  004ec	a8 20		 test	 al, 32			; 00000020H
  004ee	75 4c		 jne	 SHORT $LN129@PyThreadSt
  004f0	84 c0		 test	 al, al
  004f2	78 48		 js	 SHORT $LN129@PyThreadSt
  004f4	a8 02		 test	 al, 2
  004f6	75 4c		 jne	 SHORT $LN15@PyThreadSt
  004f8	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  004fc	75 46		 jne	 SHORT $LN15@PyThreadSt
  004fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00505	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0050c	4c 8b cf	 mov	 r9, rdi
  0050f	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00515	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0051d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00522	48 8b cf	 mov	 rcx, rdi
  00525	85 c0		 test	 eax, eax
  00527	74 07		 je	 SHORT $LN134@PyThreadSt
  00529	e8 00 00 00 00	 call	 _Px_Dealloc
  0052e	eb 14		 jmp	 SHORT $LN15@PyThreadSt
$LN134@PyThreadSt:
  00530	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00534	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0053a	eb 08		 jmp	 SHORT $LN15@PyThreadSt
$LN129@PyThreadSt:
  0053c	48 8b cf	 mov	 rcx, rdi
  0053f	e8 00 00 00 00	 call	 Px_DecRef
$LN15@PyThreadSt:

; 359  :     Py_CLEAR(tstate->exc_traceback);

  00544	4c 8b 4b 70	 mov	 r9, QWORD PTR [rbx+112]
  00548	4d 85 c9	 test	 r9, r9
  0054b	0f 84 92 00 00
	00		 je	 $LN11@PyThreadSt
  00551	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  00558	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  0055f	41 b8 67 01 00
	00		 mov	 r8d, 359		; 00000167H
  00565	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0056d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00572	85 c0		 test	 eax, eax
  00574	75 6d		 jne	 SHORT $LN11@PyThreadSt
  00576	48 8b 7b 70	 mov	 rdi, QWORD PTR [rbx+112]
  0057a	48 89 73 70	 mov	 QWORD PTR [rbx+112], rsi
  0057e	e8 00 00 00 00	 call	 _Py_PXCTX
  00583	85 c0		 test	 eax, eax
  00585	75 5c		 jne	 SHORT $LN11@PyThreadSt
  00587	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0058b	a8 20		 test	 al, 32			; 00000020H
  0058d	75 4c		 jne	 SHORT $LN140@PyThreadSt
  0058f	84 c0		 test	 al, al
  00591	78 48		 js	 SHORT $LN140@PyThreadSt
  00593	a8 02		 test	 al, 2
  00595	75 4c		 jne	 SHORT $LN11@PyThreadSt
  00597	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  0059b	75 46		 jne	 SHORT $LN11@PyThreadSt
  0059d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  005a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  005ab	4c 8b cf	 mov	 r9, rdi
  005ae	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  005b4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  005bc	e8 00 00 00 00	 call	 _PyParallel_Guard
  005c1	48 8b cf	 mov	 rcx, rdi
  005c4	85 c0		 test	 eax, eax
  005c6	74 07		 je	 SHORT $LN145@PyThreadSt
  005c8	e8 00 00 00 00	 call	 _Px_Dealloc
  005cd	eb 14		 jmp	 SHORT $LN11@PyThreadSt
$LN145@PyThreadSt:
  005cf	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  005d3	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  005d9	eb 08		 jmp	 SHORT $LN11@PyThreadSt
$LN140@PyThreadSt:
  005db	48 8b cf	 mov	 rcx, rdi
  005de	e8 00 00 00 00	 call	 Px_DecRef
$LN11@PyThreadSt:

; 360  : 
; 361  :     tstate->c_profilefunc = NULL;
; 362  :     tstate->c_tracefunc = NULL;
; 363  :     Py_CLEAR(tstate->c_profileobj);

  005e3	4c 8b 4b 38	 mov	 r9, QWORD PTR [rbx+56]
  005e7	48 89 73 28	 mov	 QWORD PTR [rbx+40], rsi
  005eb	48 89 73 30	 mov	 QWORD PTR [rbx+48], rsi
  005ef	4d 85 c9	 test	 r9, r9
  005f2	0f 84 92 00 00
	00		 je	 $LN7@PyThreadSt
  005f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  005ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  00606	41 b8 6b 01 00
	00		 mov	 r8d, 363		; 0000016bH
  0060c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00614	e8 00 00 00 00	 call	 _PyParallel_Guard
  00619	85 c0		 test	 eax, eax
  0061b	75 6d		 jne	 SHORT $LN7@PyThreadSt
  0061d	48 8b 7b 38	 mov	 rdi, QWORD PTR [rbx+56]
  00621	48 89 73 38	 mov	 QWORD PTR [rbx+56], rsi
  00625	e8 00 00 00 00	 call	 _Py_PXCTX
  0062a	85 c0		 test	 eax, eax
  0062c	75 5c		 jne	 SHORT $LN7@PyThreadSt
  0062e	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  00632	a8 20		 test	 al, 32			; 00000020H
  00634	75 4c		 jne	 SHORT $LN151@PyThreadSt
  00636	84 c0		 test	 al, al
  00638	78 48		 js	 SHORT $LN151@PyThreadSt
  0063a	a8 02		 test	 al, 2
  0063c	75 4c		 jne	 SHORT $LN7@PyThreadSt
  0063e	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00642	75 46		 jne	 SHORT $LN7@PyThreadSt
  00644	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0064b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00652	4c 8b cf	 mov	 r9, rdi
  00655	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0065b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00663	e8 00 00 00 00	 call	 _PyParallel_Guard
  00668	48 8b cf	 mov	 rcx, rdi
  0066b	85 c0		 test	 eax, eax
  0066d	74 07		 je	 SHORT $LN156@PyThreadSt
  0066f	e8 00 00 00 00	 call	 _Px_Dealloc
  00674	eb 14		 jmp	 SHORT $LN7@PyThreadSt
$LN156@PyThreadSt:
  00676	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0067a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00680	eb 08		 jmp	 SHORT $LN7@PyThreadSt
$LN151@PyThreadSt:
  00682	48 8b cf	 mov	 rcx, rdi
  00685	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyThreadSt:

; 364  :     Py_CLEAR(tstate->c_traceobj);

  0068a	4c 8b 4b 40	 mov	 r9, QWORD PTR [rbx+64]
  0068e	4d 85 c9	 test	 r9, r9
  00691	0f 84 b1 00 00
	00		 je	 $LN3@PyThreadSt
  00697	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  0069e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  006a5	41 b8 6c 01 00
	00		 mov	 r8d, 364		; 0000016cH
  006ab	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  006b3	e8 00 00 00 00	 call	 _PyParallel_Guard
  006b8	85 c0		 test	 eax, eax
  006ba	0f 85 88 00 00
	00		 jne	 $LN3@PyThreadSt
  006c0	48 8b 7b 40	 mov	 rdi, QWORD PTR [rbx+64]
  006c4	48 89 73 40	 mov	 QWORD PTR [rbx+64], rsi
  006c8	e8 00 00 00 00	 call	 _Py_PXCTX
  006cd	85 c0		 test	 eax, eax
  006cf	75 77		 jne	 SHORT $LN3@PyThreadSt
  006d1	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  006d5	a8 20		 test	 al, 32			; 00000020H
  006d7	75 67		 jne	 SHORT $LN162@PyThreadSt
  006d9	84 c0		 test	 al, al
  006db	78 63		 js	 SHORT $LN162@PyThreadSt
  006dd	a8 02		 test	 al, 2
  006df	75 67		 jne	 SHORT $LN3@PyThreadSt
  006e1	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  006e5	75 61		 jne	 SHORT $LN3@PyThreadSt
  006e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  006ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  006f5	4c 8b cf	 mov	 r9, rdi
  006f8	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  006fe	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00706	e8 00 00 00 00	 call	 _PyParallel_Guard
  0070b	48 8b cf	 mov	 rcx, rdi
  0070e	85 c0		 test	 eax, eax
  00710	74 14		 je	 SHORT $LN167@PyThreadSt
  00712	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 365  : 
; 366  : }

  00717	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0071c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00720	5e		 pop	 rsi
  00721	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 364  :     Py_CLEAR(tstate->c_traceobj);

$LN167@PyThreadSt:
  00726	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  0072a	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 365  : 
; 366  : }

  0072f	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00734	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00738	5e		 pop	 rsi
  00739	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 364  :     Py_CLEAR(tstate->c_traceobj);

$LN162@PyThreadSt:
  00740	48 8b cf	 mov	 rcx, rdi
  00743	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyThreadSt:
  00748	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]

; 365  : 
; 366  : }

  0074d	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00752	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00756	5e		 pop	 rsi
  00757	c3		 ret	 0
PyThreadState_Clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DN@HCOPHJKM@PyThreadState_Delete?3?5circular?5l@ ; `string'
PUBLIC	??_C@_0ED@HMJHEGFJ@PyThreadState_Delete?3?5small?5circ@ ; `string'
PUBLIC	??_C@_0CF@JIOGOBAC@PyThreadState_Delete?3?5invalid?5ts@ ; `string'
PUBLIC	??_C@_0CC@KDKMJKDP@PyThreadState_Delete?3?5NULL?5inter@ ; `string'
PUBLIC	??_C@_0CC@KGLHHLIF@PyThreadState_Delete?3?5NULL?5tstat@ ; `string'
EXTRN	__imp_free:PROC
EXTRN	_PyParallel_DeletingThreadState:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tstate_delete_common DD imagerel tstate_delete_common
	DD	imagerel tstate_delete_common+216
	DD	imagerel $unwind$tstate_delete_common
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tstate_delete_common DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0DN@HCOPHJKM@PyThreadState_Delete?3?5circular?5l@
CONST	SEGMENT
??_C@_0DN@HCOPHJKM@PyThreadState_Delete?3?5circular?5l@ DB 'PyThreadState'
	DB	'_Delete: circular list(!) and tstate not found.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@HMJHEGFJ@PyThreadState_Delete?3?5small?5circ@
CONST	SEGMENT
??_C@_0ED@HMJHEGFJ@PyThreadState_Delete?3?5small?5circ@ DB 'PyThreadState'
	DB	'_Delete: small circular list(!) and tstate not found.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JIOGOBAC@PyThreadState_Delete?3?5invalid?5ts@
CONST	SEGMENT
??_C@_0CF@JIOGOBAC@PyThreadState_Delete?3?5invalid?5ts@ DB 'PyThreadState'
	DB	'_Delete: invalid tstate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KDKMJKDP@PyThreadState_Delete?3?5NULL?5inter@
CONST	SEGMENT
??_C@_0CC@KDKMJKDP@PyThreadState_Delete?3?5NULL?5inter@ DB 'PyThreadState'
	DB	'_Delete: NULL interp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KGLHHLIF@PyThreadState_Delete?3?5NULL?5tstat@
CONST	SEGMENT
??_C@_0CC@KGLHHLIF@PyThreadState_Delete?3?5NULL?5tstat@ DB 'PyThreadState'
	DB	'_Delete: NULL tstate', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT tstate_delete_common
_TEXT	SEGMENT
tstate$ = 48
tstate_delete_common PROC				; COMDAT

; 372  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 373  :     PyInterpreterState *interp;
; 374  :     PyThreadState **p;
; 375  :     PyThreadState *prev_p = NULL;

  00014	33 f6		 xor	 esi, esi
  00016	48 8b f9	 mov	 rdi, rcx

; 376  :     if (tstate == NULL)

  00019	48 85 c9	 test	 rcx, rcx
  0001c	75 0c		 jne	 SHORT $LN9@tstate_del

; 377  :         Py_FatalError("PyThreadState_Delete: NULL tstate");

  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@KGLHHLIF@PyThreadState_Delete?3?5NULL?5tstat@
  00025	e8 00 00 00 00	 call	 Py_FatalError
$LN9@tstate_del:

; 378  :     interp = tstate->interp;

  0002a	48 8b 5f 08	 mov	 rbx, QWORD PTR [rdi+8]

; 379  :     if (interp == NULL)

  0002e	48 85 db	 test	 rbx, rbx
  00031	75 0c		 jne	 SHORT $LN8@tstate_del

; 380  :         Py_FatalError("PyThreadState_Delete: NULL interp");

  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@KDKMJKDP@PyThreadState_Delete?3?5NULL?5inter@
  0003a	e8 00 00 00 00	 call	 Py_FatalError
$LN8@tstate_del:

; 381  : #ifdef WITH_PARALLEL
; 382  :     _PyParallel_DeletingThreadState(tstate);

  0003f	48 8b cf	 mov	 rcx, rdi
  00042	e8 00 00 00 00	 call	 _PyParallel_DeletingThreadState

; 383  : #endif
; 384  :     HEAD_LOCK();

  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  0004e	ba 01 00 00 00	 mov	 edx, 1
  00053	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 385  :     for (p = &interp->tstate_head; ; p = &(*p)->next) {

  00058	48 8d 6b 08	 lea	 rbp, QWORD PTR [rbx+8]
  0005c	48 8b dd	 mov	 rbx, rbp
  0005f	90		 npad	 1
$LL7@tstate_del:

; 386  :         if (*p == NULL)

  00060	48 83 3b 00	 cmp	 QWORD PTR [rbx], 0
  00064	75 0c		 jne	 SHORT $LN4@tstate_del

; 387  :             Py_FatalError(
; 388  :                 "PyThreadState_Delete: invalid tstate");

  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@JIOGOBAC@PyThreadState_Delete?3?5invalid?5ts@
  0006d	e8 00 00 00 00	 call	 Py_FatalError
$LN4@tstate_del:

; 389  :         if (*p == tstate)

  00072	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00075	48 3b c7	 cmp	 rax, rdi
  00078	74 2e		 je	 SHORT $LN14@tstate_del

; 390  :             break;
; 391  :         /* Sanity check.  These states should never happen but if
; 392  :          * they do we must abort.  Otherwise we'll end up spinning in
; 393  :          * in a tight loop with the lock held.  A similar check is done
; 394  :          * in thread.c find_key().  */
; 395  :         if (*p == prev_p)

  0007a	48 3b c6	 cmp	 rax, rsi
  0007d	75 0c		 jne	 SHORT $LN2@tstate_del

; 396  :             Py_FatalError(
; 397  :                 "PyThreadState_Delete: small circular list(!)"
; 398  :                 " and tstate not found.");

  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0ED@HMJHEGFJ@PyThreadState_Delete?3?5small?5circ@
  00086	e8 00 00 00 00	 call	 Py_FatalError
$LN2@tstate_del:

; 399  :         prev_p = *p;

  0008b	48 8b 33	 mov	 rsi, QWORD PTR [rbx]

; 400  :         if ((*p)->next == interp->tstate_head)

  0008e	48 8b 45 00	 mov	 rax, QWORD PTR [rbp]
  00092	48 39 06	 cmp	 QWORD PTR [rsi], rax
  00095	75 0c		 jne	 SHORT $LN6@tstate_del

; 401  :             Py_FatalError(
; 402  :                 "PyThreadState_Delete: circular list(!) and"
; 403  :                 " tstate not found.");

  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DN@HCOPHJKM@PyThreadState_Delete?3?5circular?5l@
  0009e	e8 00 00 00 00	 call	 Py_FatalError
$LN6@tstate_del:

; 385  :     for (p = &interp->tstate_head; ; p = &(*p)->next) {

  000a3	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  000a6	eb b8		 jmp	 SHORT $LL7@tstate_del
$LN14@tstate_del:

; 404  :     }
; 405  :     *p = tstate->next;

  000a8	48 8b 07	 mov	 rax, QWORD PTR [rdi]

; 406  :     HEAD_UNLOCK();

  000ab	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  000b2	48 89 03	 mov	 QWORD PTR [rbx], rax
  000b5	e8 00 00 00 00	 call	 PyThread_release_lock

; 407  :     free(tstate);

  000ba	48 8b cf	 mov	 rcx, rdi

; 408  : }

  000bd	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c2	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000c7	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000cc	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d0	5f		 pop	 rdi
  000d1	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_free
tstate_delete_common ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@DPDPLJDG@PyThreadState_Delete?3?5tstate?5is?5@ ; `string'
PUBLIC	PyThreadState_Delete
EXTRN	PyThread_delete_key_value:PROC
EXTRN	PyThread_get_key_value:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyThreadState_Delete DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$PyThreadState_Delete
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_Delete DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CO@DPDPLJDG@PyThreadState_Delete?3?5tstate?5is?5@
CONST	SEGMENT
??_C@_0CO@DPDPLJDG@PyThreadState_Delete?3?5tstate?5is?5@ DB 'PyThreadStat'
	DB	'e_Delete: tstate is still current', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyThreadState_Delete
_TEXT	SEGMENT
tstate$ = 48
PyThreadState_Delete PROC				; COMDAT

; 413  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 414  :     if (tstate == _Py_atomic_load_relaxed(&_PyThreadState_Current))

  00006	48 3b 0d 00 00
	00 00		 cmp	 rcx, QWORD PTR _PyThreadState_Current
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	75 0c		 jne	 SHORT $LN2@PyThreadSt@2

; 415  :         Py_FatalError("PyThreadState_Delete: tstate is still current");

  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@DPDPLJDG@PyThreadState_Delete?3?5tstate?5is?5@
  00019	e8 00 00 00 00	 call	 Py_FatalError
$LN2@PyThreadSt@2:

; 416  : #ifdef WITH_THREAD
; 417  :     if (autoInterpreterState && PyThread_get_key_value(autoTLSkey) == tstate)

  0001e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR autoInterpreterState, 0
  00026	74 1b		 je	 SHORT $LN1@PyThreadSt@2
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  0002e	e8 00 00 00 00	 call	 PyThread_get_key_value
  00033	48 3b c3	 cmp	 rax, rbx
  00036	75 0b		 jne	 SHORT $LN1@PyThreadSt@2

; 418  :         PyThread_delete_key_value(autoTLSkey);

  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  0003e	e8 00 00 00 00	 call	 PyThread_delete_key_value
$LN1@PyThreadSt@2:

; 419  : #endif /* WITH_THREAD */
; 420  :     tstate_delete_common(tstate);

  00043	48 8b cb	 mov	 rcx, rbx

; 421  : }

  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5b		 pop	 rbx
  0004b	e9 00 00 00 00	 jmp	 tstate_delete_common
PyThreadState_Delete ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@BCCBJFCH@PyThreadState_DeleteCurrent?3?5no?5@ ; `string'
PUBLIC	PyThreadState_DeleteCurrent
EXTRN	PyEval_ReleaseLock:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyThreadState_DeleteCurrent DD imagerel $LN5
	DD	imagerel $LN5+96
	DD	imagerel $unwind$PyThreadState_DeleteCurrent
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_DeleteCurrent DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CP@BCCBJFCH@PyThreadState_DeleteCurrent?3?5no?5@
CONST	SEGMENT
??_C@_0CP@BCCBJFCH@PyThreadState_DeleteCurrent?3?5no?5@ DB 'PyThreadState'
	DB	'_DeleteCurrent: no current tstate', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyThreadState_DeleteCurrent
_TEXT	SEGMENT
PyThreadState_DeleteCurrent PROC			; COMDAT

; 427  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 428  :     PyThreadState *tstate = (PyThreadState*)_Py_atomic_load_relaxed(
; 429  :         &_PyThreadState_Current);

  00006	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR _PyThreadState_Current

; 430  :     if (tstate == NULL)

  0000d	48 85 db	 test	 rbx, rbx
  00010	75 0c		 jne	 SHORT $LN2@PyThreadSt@3

; 431  :         Py_FatalError(
; 432  :             "PyThreadState_DeleteCurrent: no current tstate");

  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CP@BCCBJFCH@PyThreadState_DeleteCurrent?3?5no?5@
  00019	e8 00 00 00 00	 call	 Py_FatalError
$LN2@PyThreadSt@3:

; 433  :     _Py_atomic_store_relaxed(&_PyThreadState_Current, NULL);
; 434  :     if (autoInterpreterState && PyThread_get_key_value(autoTLSkey) == tstate)

  0001e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR autoInterpreterState, 0
  00026	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR _PyThreadState_Current, 0
  00031	74 1b		 je	 SHORT $LN1@PyThreadSt@3
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  00039	e8 00 00 00 00	 call	 PyThread_get_key_value
  0003e	48 3b c3	 cmp	 rax, rbx
  00041	75 0b		 jne	 SHORT $LN1@PyThreadSt@3

; 435  :         PyThread_delete_key_value(autoTLSkey);

  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  00049	e8 00 00 00 00	 call	 PyThread_delete_key_value
$LN1@PyThreadSt@3:

; 436  :     tstate_delete_common(tstate);

  0004e	48 8b cb	 mov	 rcx, rbx
  00051	e8 00 00 00 00	 call	 tstate_delete_common

; 437  :     PyEval_ReleaseLock();
; 438  : }

  00056	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005a	5b		 pop	 rbx
  0005b	e9 00 00 00 00	 jmp	 PyEval_ReleaseLock
PyThreadState_DeleteCurrent ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@HHNGIJOJ@PyThreadState_Get?3?5no?5current?5th@ ; `string'
PUBLIC	PyThreadState_Get
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyThreadState_Get DD imagerel $LN7
	DD	imagerel $LN7+58
	DD	imagerel $unwind$PyThreadState_Get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_Get DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CF@HHNGIJOJ@PyThreadState_Get?3?5no?5current?5th@
CONST	SEGMENT
??_C@_0CF@HHNGIJOJ@PyThreadState_Get?3?5no?5current?5th@ DB 'PyThreadStat'
	DB	'e_Get: no current thread', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyThreadState_Get
_TEXT	SEGMENT
PyThreadState_Get PROC					; COMDAT

; 444  : {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 445  :     PyThreadState *tstate = _PyThreadState_XGET();

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	74 0a		 je	 SHORT $LN4@PyThreadSt@4
  0000f	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00014	48 8b d8	 mov	 rbx, rax
  00017	eb 07		 jmp	 SHORT $LN5@PyThreadSt@4
$LN4@PyThreadSt@4:
  00019	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR _PyThreadState_Current
$LN5@PyThreadSt@4:

; 446  :     if (tstate == NULL)

  00020	48 85 db	 test	 rbx, rbx
  00023	75 0c		 jne	 SHORT $LN6@PyThreadSt@4

; 447  :         Py_FatalError("PyThreadState_Get: no current thread");

  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@HHNGIJOJ@PyThreadState_Get?3?5no?5current?5th@
  0002c	e8 00 00 00 00	 call	 Py_FatalError
$LN6@PyThreadSt@4:

; 448  : 
; 449  :     return tstate;

  00031	48 8b c3	 mov	 rax, rbx

; 450  : }

  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5b		 pop	 rbx
  00039	c3		 ret	 0
PyThreadState_Get ENDP
_TEXT	ENDS
PUBLIC	PyThreadState_XGet
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyThreadState_XGet DD imagerel $LN5
	DD	imagerel $LN5+34
	DD	imagerel $unwind$PyThreadState_XGet
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_XGet DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyThreadState_XGet
_TEXT	SEGMENT
PyThreadState_XGet PROC					; COMDAT

; 454  : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 455  :     return _PyThreadState_XGET();

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 09		 je	 SHORT $LN3@PyThreadSt@5

; 456  : }

  0000d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00011	e9 00 00 00 00	 jmp	 _PyParallel_GetThreadState
$LN3@PyThreadSt@5:

; 455  :     return _PyThreadState_XGET();

  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current

; 456  : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
PyThreadState_XGet ENDP
_TEXT	ENDS
PUBLIC	PyThreadState_Swap
; Function compile flags: /Ogtpy
;	COMDAT PyThreadState_Swap
_TEXT	SEGMENT
newts$ = 8
PyThreadState_Swap PROC					; COMDAT

; 461  :     PyThreadState *oldts = (PyThreadState*)_Py_atomic_load_relaxed(
; 462  :         &_PyThreadState_Current);

  00000	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current

; 463  : #ifdef WITH_PARALLEL
; 464  :     /* Make sure oldts and newts aren't parallel. */
; 465  :     if (oldts) {
; 466  :         assert(oldts->is_parallel_thread == 0);
; 467  :         assert(oldts->thread_id == _Py_get_current_thread_id());
; 468  :     }
; 469  :     if (newts)
; 470  :         assert(newts->is_parallel_thread == 0);
; 471  : #endif
; 472  : 
; 473  :     _Py_atomic_store_relaxed(&_PyThreadState_Current, newts);

  00007	48 89 0d 00 00
	00 00		 mov	 QWORD PTR _PyThreadState_Current, rcx

; 474  :     /* It should not be possible for more than one thread state
; 475  :        to be used for a thread.  Check this the best we can in debug
; 476  :        builds.
; 477  :     */
; 478  : #if defined(Py_DEBUG) && defined(WITH_THREAD)
; 479  :     if (newts) {
; 480  :         /* This can be called from PyEval_RestoreThread(). Similar
; 481  :            to it, we need to ensure errno doesn't change.
; 482  :         */
; 483  :         int err = errno;
; 484  :         PyThreadState *check = PyGILState_GetThisThreadState();
; 485  :         if (check && check->interp == newts->interp && check != newts)
; 486  :             Py_FatalError("Invalid thread state for this thread");
; 487  :         errno = err;
; 488  :     }
; 489  : #endif
; 490  :     return oldts;
; 491  : }

  0000e	c3		 ret	 0
PyThreadState_Swap ENDP
_TEXT	ENDS
PUBLIC	PyThreadState_GetDict
EXTRN	PyErr_Clear:PROC
EXTRN	PyDict_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyThreadState_GetDict DD imagerel $LN8
	DD	imagerel $LN8+81
	DD	imagerel $unwind$PyThreadState_GetDict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_GetDict DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT PyThreadState_GetDict
_TEXT	SEGMENT
PyThreadState_GetDict PROC				; COMDAT

; 501  : {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 502  :     PyThreadState *tstate = PyThreadState_XGET();

  00006	e8 00 00 00 00	 call	 _Py_PXCTX
  0000b	85 c0		 test	 eax, eax
  0000d	74 0a		 je	 SHORT $LN6@PyThreadSt@6
  0000f	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00014	48 8b d8	 mov	 rbx, rax
  00017	eb 07		 jmp	 SHORT $LN7@PyThreadSt@6
$LN6@PyThreadSt@6:
  00019	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR _PyThreadState_Current
$LN7@PyThreadSt@6:

; 503  :     if (tstate == NULL)

  00020	48 85 db	 test	 rbx, rbx
  00023	75 08		 jne	 SHORT $LN3@PyThreadSt@6

; 504  :         return NULL;

  00025	33 c0		 xor	 eax, eax

; 513  : }

  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5b		 pop	 rbx
  0002c	c3		 ret	 0
$LN3@PyThreadSt@6:

; 505  : 
; 506  :     if (tstate->dict == NULL) {

  0002d	48 83 7b 78 00	 cmp	 QWORD PTR [rbx+120], 0
  00032	75 13		 jne	 SHORT $LN1@PyThreadSt@6

; 507  :         PyObject *d;
; 508  :         tstate->dict = d = PyDict_New();

  00034	e8 00 00 00 00	 call	 PyDict_New
  00039	48 89 43 78	 mov	 QWORD PTR [rbx+120], rax

; 509  :         if (d == NULL)

  0003d	48 85 c0	 test	 rax, rax
  00040	75 05		 jne	 SHORT $LN1@PyThreadSt@6

; 510  :             PyErr_Clear();

  00042	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@PyThreadSt@6:

; 511  :     }
; 512  :     return tstate->dict;

  00047	48 8b 43 78	 mov	 rax, QWORD PTR [rbx+120]

; 513  : }

  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5b		 pop	 rbx
  00050	c3		 ret	 0
PyThreadState_GetDict ENDP
_TEXT	ENDS
PUBLIC	PyThreadState_SetAsyncExc
EXTRN	_PyEval_SignalAsyncExc:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyThreadState_SetAsyncExc DD imagerel $LN35
	DD	imagerel $LN35+404
	DD	imagerel $unwind$PyThreadState_SetAsyncExc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_SetAsyncExc DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pystate.c
xdata	ENDS
;	COMDAT PyThreadState_SetAsyncExc
_TEXT	SEGMENT
id$ = 64
exc$ = 72
PyThreadState_SetAsyncExc PROC				; COMDAT

; 525  : PyThreadState_SetAsyncExc(long id, PyObject *exc) {

$LN35:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b f2	 mov	 rsi, rdx
  00012	8b f9		 mov	 edi, ecx

; 526  :     PyThreadState *tstate = PyThreadState_GET();

  00014	e8 00 00 00 00	 call	 _Py_PXCTX
  00019	85 c0		 test	 eax, eax
  0001b	74 07		 je	 SHORT $LN15@PyThreadSt@7
  0001d	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00022	eb 07		 jmp	 SHORT $LN16@PyThreadSt@7
$LN15@PyThreadSt@7:
  00024	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
$LN16@PyThreadSt@7:

; 527  :     PyInterpreterState *interp = tstate->interp;
; 528  :     PyThreadState *p;
; 529  : 
; 530  :     /* Although the GIL is held, a few C API functions can be called
; 531  :      * without the GIL held, and in particular some that create and
; 532  :      * destroy thread and interpreter states.  Those can mutate the
; 533  :      * list of thread states we're traversing, so to prevent that we lock
; 534  :      * head_mutex for the duration.
; 535  :      */
; 536  :     HEAD_LOCK();

  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  00032	48 8b 58 08	 mov	 rbx, QWORD PTR [rax+8]
  00036	ba 01 00 00 00	 mov	 edx, 1
  0003b	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 537  :     for (p = interp->tstate_head; p != NULL; p = p->next) {

  00040	48 8b 5b 08	 mov	 rbx, QWORD PTR [rbx+8]
  00044	48 85 db	 test	 rbx, rbx
  00047	74 17		 je	 SHORT $LN10@PyThreadSt@7
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL12@PyThreadSt@7:

; 538  :         if (p->thread_id == id) {

  00050	39 bb 90 00 00
	00		 cmp	 DWORD PTR [rbx+144], edi
  00056	74 26		 je	 SHORT $LN33@PyThreadSt@7

; 537  :     for (p = interp->tstate_head; p != NULL; p = p->next) {

  00058	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  0005b	48 85 db	 test	 rbx, rbx
  0005e	75 f0		 jne	 SHORT $LL12@PyThreadSt@7
$LN10@PyThreadSt@7:

; 553  :         }
; 554  :     }
; 555  :     HEAD_UNLOCK();

  00060	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  00067	e8 00 00 00 00	 call	 PyThread_release_lock

; 556  :     return 0;

  0006c	33 c0		 xor	 eax, eax

; 557  : }

  0006e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00073	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00078	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007c	5f		 pop	 rdi
  0007d	c3		 ret	 0
$LN33@PyThreadSt@7:

; 539  :             /* Tricky:  we need to decref the current value
; 540  :              * (if any) in p->async_exc, but that can in turn
; 541  :              * allow arbitrary Python code to run, including
; 542  :              * perhaps calls to this function.  To prevent
; 543  :              * deadlock, we need to release head_mutex before
; 544  :              * the decref.
; 545  :              */
; 546  :             PyObject *old_exc = p->async_exc;

  0007e	48 8b bb 88 00
	00 00		 mov	 rdi, QWORD PTR [rbx+136]

; 547  :             Py_XINCREF(exc);

  00085	48 85 f6	 test	 rsi, rsi
  00088	74 3b		 je	 SHORT $LN7@PyThreadSt@7
  0008a	e8 00 00 00 00	 call	 _Py_PXCTX
  0008f	85 c0		 test	 eax, eax
  00091	75 32		 jne	 SHORT $LN7@PyThreadSt@7
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  000a1	4c 8b ce	 mov	 r9, rsi
  000a4	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  000aa	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b2	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b7	85 c0		 test	 eax, eax
  000b9	75 06		 jne	 SHORT $LN17@PyThreadSt@7
  000bb	f6 46 20 20	 test	 BYTE PTR [rsi+32], 32	; 00000020H
  000bf	74 04		 je	 SHORT $LN7@PyThreadSt@7
$LN17@PyThreadSt@7:
  000c1	48 ff 46 50	 inc	 QWORD PTR [rsi+80]
$LN7@PyThreadSt@7:

; 548  :             p->async_exc = exc;
; 549  :             HEAD_UNLOCK();

  000c5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  000cc	48 89 b3 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rsi
  000d3	e8 00 00 00 00	 call	 PyThread_release_lock

; 550  :             Py_XDECREF(old_exc);

  000d8	48 85 ff	 test	 rdi, rdi
  000db	0f 84 99 00 00
	00		 je	 $LN3@PyThreadSt@7
  000e1	e8 00 00 00 00	 call	 _Py_PXCTX
  000e6	85 c0		 test	 eax, eax
  000e8	0f 85 8c 00 00
	00		 jne	 $LN3@PyThreadSt@7
  000ee	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  000f2	a8 20		 test	 al, 32			; 00000020H
  000f4	75 7c		 jne	 SHORT $LN25@PyThreadSt@7
  000f6	84 c0		 test	 al, al
  000f8	78 78		 js	 SHORT $LN25@PyThreadSt@7
  000fa	a8 02		 test	 al, 2
  000fc	75 7c		 jne	 SHORT $LN3@PyThreadSt@7
  000fe	48 ff 4f 50	 dec	 QWORD PTR [rdi+80]
  00102	75 76		 jne	 SHORT $LN3@PyThreadSt@7
  00104	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00112	4c 8b cf	 mov	 r9, rdi
  00115	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0011b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00123	e8 00 00 00 00	 call	 _PyParallel_Guard
  00128	48 8b cf	 mov	 rcx, rdi
  0012b	85 c0		 test	 eax, eax
  0012d	74 1f		 je	 SHORT $LN30@PyThreadSt@7
  0012f	e8 00 00 00 00	 call	 _Px_Dealloc

; 551  :             _PyEval_SignalAsyncExc();

  00134	e8 00 00 00 00	 call	 _PyEval_SignalAsyncExc

; 552  :             return 1;

  00139	b8 01 00 00 00	 mov	 eax, 1

; 557  : }

  0013e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00143	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00148	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0014c	5f		 pop	 rdi
  0014d	c3		 ret	 0

; 550  :             Py_XDECREF(old_exc);

$LN30@PyThreadSt@7:
  0014e	48 8b 47 58	 mov	 rax, QWORD PTR [rdi+88]
  00152	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 551  :             _PyEval_SignalAsyncExc();

  00158	e8 00 00 00 00	 call	 _PyEval_SignalAsyncExc

; 552  :             return 1;

  0015d	b8 01 00 00 00	 mov	 eax, 1

; 557  : }

  00162	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00167	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0016c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00170	5f		 pop	 rdi
  00171	c3		 ret	 0

; 550  :             Py_XDECREF(old_exc);

$LN25@PyThreadSt@7:
  00172	48 8b cf	 mov	 rcx, rdi
  00175	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyThreadSt@7:

; 551  :             _PyEval_SignalAsyncExc();

  0017a	e8 00 00 00 00	 call	 _PyEval_SignalAsyncExc

; 557  : }

  0017f	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00184	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00189	b8 01 00 00 00	 mov	 eax, 1
  0018e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00192	5f		 pop	 rdi
  00193	c3		 ret	 0
PyThreadState_SetAsyncExc ENDP
_TEXT	ENDS
PUBLIC	PyInterpreterState_Head
; Function compile flags: /Ogtpy
;	COMDAT PyInterpreterState_Head
_TEXT	SEGMENT
PyInterpreterState_Head PROC				; COMDAT

; 566  :     return interp_head;

  00000	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR interp_head

; 567  : }

  00007	c3		 ret	 0
PyInterpreterState_Head ENDP
_TEXT	ENDS
PUBLIC	PyInterpreterState_Next
; Function compile flags: /Ogtpy
;	COMDAT PyInterpreterState_Next
_TEXT	SEGMENT
interp$ = 8
PyInterpreterState_Next PROC				; COMDAT

; 571  :     return interp->next;

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 572  : }

  00003	c3		 ret	 0
PyInterpreterState_Next ENDP
_TEXT	ENDS
PUBLIC	PyInterpreterState_ThreadHead
; Function compile flags: /Ogtpy
;	COMDAT PyInterpreterState_ThreadHead
_TEXT	SEGMENT
interp$ = 8
PyInterpreterState_ThreadHead PROC			; COMDAT

; 576  :     return interp->tstate_head;

  00000	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]

; 577  : }

  00004	c3		 ret	 0
PyInterpreterState_ThreadHead ENDP
_TEXT	ENDS
PUBLIC	PyThreadState_Next
; Function compile flags: /Ogtpy
;	COMDAT PyThreadState_Next
_TEXT	SEGMENT
tstate$ = 8
PyThreadState_Next PROC					; COMDAT

; 581  :     return tstate->next;

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 582  : }

  00003	c3		 ret	 0
PyThreadState_Next ENDP
_TEXT	ENDS
PUBLIC	_PyThread_CurrentFrames
EXTRN	PyDict_SetItem:PROC
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_PyThread_CurrentFrames DD imagerel $LN46
	DD	imagerel $LN46+33
	DD	imagerel $unwind$_PyThread_CurrentFrames
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$_PyThread_CurrentFrames DD imagerel $LN46+33
	DD	imagerel $LN46+322
	DD	imagerel $chain$3$_PyThread_CurrentFrames
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$_PyThread_CurrentFrames DD imagerel $LN46+322
	DD	imagerel $LN46+452
	DD	imagerel $chain$5$_PyThread_CurrentFrames
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$_PyThread_CurrentFrames DD 080021H
	DD	0b7400H
	DD	0a6400H
	DD	095400H
	DD	083400H
	DD	imagerel $LN46
	DD	imagerel $LN46+33
	DD	imagerel $unwind$_PyThread_CurrentFrames
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$_PyThread_CurrentFrames DD 081921H
	DD	0b7419H
	DD	0a6414H
	DD	09540aH
	DD	083405H
	DD	imagerel $LN46
	DD	imagerel $LN46+33
	DD	imagerel $unwind$_PyThread_CurrentFrames
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyThread_CurrentFrames DD 020601H
	DD	0c0025206H
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pystate.c
xdata	ENDS
;	COMDAT _PyThread_CurrentFrames
_TEXT	SEGMENT
_PyThread_CurrentFrames PROC				; COMDAT

; 591  : {

$LN46:
  00000	41 54		 push	 r12
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 592  :     PyObject *result;
; 593  :     PyInterpreterState *i;
; 594  : 
; 595  :     result = PyDict_New();

  00006	e8 00 00 00 00	 call	 PyDict_New
  0000b	4c 8b e0	 mov	 r12, rax

; 596  :     if (result == NULL)

  0000e	48 85 c0	 test	 rax, rax
  00011	75 07		 jne	 SHORT $LN10@PyThread_C

; 630  : }

  00013	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00017	41 5c		 pop	 r12
  00019	c3		 ret	 0
$LN10@PyThread_C:

; 597  :         return NULL;
; 598  : 
; 599  :     /* for i in all interpreters:
; 600  :      *     for t in all of i's thread states:
; 601  :      *          if t's frame isn't NULL, map t's id to its frame
; 602  :      * Because these lists can mutate even when the GIL is held, we
; 603  :      * need to grab head_mutex for the duration.
; 604  :      */
; 605  :     HEAD_LOCK();

  0001a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  00021	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00026	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  0002b	ba 01 00 00 00	 mov	 edx, 1
  00030	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  00035	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  0003a	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 606  :     for (i = interp_head; i != NULL; i = i->next) {

  0003f	48 8b 2d 00 00
	00 00		 mov	 rbp, QWORD PTR interp_head
  00046	48 85 ed	 test	 rbp, rbp
  00049	0f 84 c9 00 00
	00		 je	 $LN41@PyThread_C
  0004f	90		 npad	 1
$LL9@PyThread_C:

; 607  :         PyThreadState *t;
; 608  :         for (t = i->tstate_head; t != NULL; t = t->next) {

  00050	48 8b 7d 08	 mov	 rdi, QWORD PTR [rbp+8]
  00054	48 85 ff	 test	 rdi, rdi
  00057	0f 84 ae 00 00
	00		 je	 $LN8@PyThread_C
  0005d	0f 1f 00	 npad	 3
$LL6@PyThread_C:

; 609  :             PyObject *id;
; 610  :             int stat;
; 611  :             struct _frame *frame = t->frame;

  00060	48 8b 77 10	 mov	 rsi, QWORD PTR [rdi+16]

; 612  :             if (frame == NULL)

  00064	48 85 f6	 test	 rsi, rsi
  00067	0f 84 92 00 00
	00		 je	 $LN5@PyThread_C

; 613  :                 continue;
; 614  :             id = PyLong_FromLong(t->thread_id);

  0006d	8b 8f 90 00 00
	00		 mov	 ecx, DWORD PTR [rdi+144]
  00073	e8 00 00 00 00	 call	 PyLong_FromLong
  00078	48 8b d8	 mov	 rbx, rax

; 615  :             if (id == NULL)

  0007b	48 85 c0	 test	 rax, rax
  0007e	0f 84 be 00 00
	00		 je	 $Fail$20708

; 616  :                 goto Fail;
; 617  :             stat = PyDict_SetItem(result, id, (PyObject *)frame);

  00084	4c 8b c6	 mov	 r8, rsi
  00087	48 8b d0	 mov	 rdx, rax
  0008a	49 8b cc	 mov	 rcx, r12
  0008d	e8 00 00 00 00	 call	 PyDict_SetItem
  00092	8b f0		 mov	 esi, eax

; 618  :             Py_DECREF(id);

  00094	e8 00 00 00 00	 call	 _Py_PXCTX
  00099	85 c0		 test	 eax, eax
  0009b	75 5e		 jne	 SHORT $LN23@PyThread_C
  0009d	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  000a1	f6 c1 20	 test	 cl, 32			; 00000020H
  000a4	75 4d		 jne	 SHORT $LN17@PyThread_C
  000a6	84 c9		 test	 cl, cl
  000a8	78 49		 js	 SHORT $LN17@PyThread_C
  000aa	f6 c1 02	 test	 cl, 2
  000ad	75 4c		 jne	 SHORT $LN23@PyThread_C
  000af	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000b3	75 46		 jne	 SHORT $LN23@PyThread_C
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c3	4c 8b cb	 mov	 r9, rbx
  000c6	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000cc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d9	48 8b cb	 mov	 rcx, rbx
  000dc	85 c0		 test	 eax, eax
  000de	74 07		 je	 SHORT $LN22@PyThread_C
  000e0	e8 00 00 00 00	 call	 _Px_Dealloc
  000e5	eb 14		 jmp	 SHORT $LN23@PyThread_C
$LN22@PyThread_C:
  000e7	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000eb	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000f1	eb 08		 jmp	 SHORT $LN23@PyThread_C
$LN17@PyThread_C:
  000f3	48 8b cb	 mov	 rcx, rbx
  000f6	e8 00 00 00 00	 call	 Px_DecRef
$LN23@PyThread_C:

; 619  :             if (stat < 0)

  000fb	85 f6		 test	 esi, esi
  000fd	78 43		 js	 SHORT $Fail$20708
$LN5@PyThread_C:

; 607  :         PyThreadState *t;
; 608  :         for (t = i->tstate_head; t != NULL; t = t->next) {

  000ff	48 8b 3f	 mov	 rdi, QWORD PTR [rdi]
  00102	48 85 ff	 test	 rdi, rdi
  00105	0f 85 55 ff ff
	ff		 jne	 $LL6@PyThread_C
$LN8@PyThread_C:

; 606  :     for (i = interp_head; i != NULL; i = i->next) {

  0010b	48 8b 6d 00	 mov	 rbp, QWORD PTR [rbp]
  0010f	48 85 ed	 test	 rbp, rbp
  00112	0f 85 38 ff ff
	ff		 jne	 $LL9@PyThread_C
$LN41@PyThread_C:

; 620  :                 goto Fail;
; 621  :         }
; 622  :     }
; 623  :     HEAD_UNLOCK();

  00118	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  0011f	e8 00 00 00 00	 call	 PyThread_release_lock

; 624  :     return result;

  00124	49 8b c4	 mov	 rax, r12
$LN45@PyThread_C:
  00127	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0012c	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00131	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00136	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 630  : }

  0013b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0013f	41 5c		 pop	 r12
  00141	c3		 ret	 0
$Fail$20708:

; 625  : 
; 626  :  Fail:
; 627  :     HEAD_UNLOCK();

  00142	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  00149	e8 00 00 00 00	 call	 PyThread_release_lock

; 628  :     Py_DECREF(result);

  0014e	e8 00 00 00 00	 call	 _Py_PXCTX
  00153	85 c0		 test	 eax, eax
  00155	75 66		 jne	 SHORT $LN34@PyThread_C
  00157	49 8b 44 24 20	 mov	 rax, QWORD PTR [r12+32]
  0015c	a8 20		 test	 al, 32			; 00000020H
  0015e	75 55		 jne	 SHORT $LN28@PyThread_C
  00160	84 c0		 test	 al, al
  00162	78 51		 js	 SHORT $LN28@PyThread_C
  00164	a8 02		 test	 al, 2
  00166	75 55		 jne	 SHORT $LN34@PyThread_C
  00168	49 ff 4c 24 50	 dec	 QWORD PTR [r12+80]
  0016d	75 4e		 jne	 SHORT $LN34@PyThread_C
  0016f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00176	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0017d	4d 8b cc	 mov	 r9, r12
  00180	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00186	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0018e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00193	49 8b cc	 mov	 rcx, r12
  00196	85 c0		 test	 eax, eax
  00198	74 09		 je	 SHORT $LN33@PyThread_C
  0019a	e8 00 00 00 00	 call	 _Px_Dealloc

; 629  :     return NULL;

  0019f	33 c0		 xor	 eax, eax
  001a1	eb 84		 jmp	 SHORT $LN45@PyThread_C

; 628  :     Py_DECREF(result);

$LN33@PyThread_C:
  001a3	49 8b 44 24 58	 mov	 rax, QWORD PTR [r12+88]
  001a8	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 629  :     return NULL;

  001ae	33 c0		 xor	 eax, eax
  001b0	e9 72 ff ff ff	 jmp	 $LN45@PyThread_C

; 628  :     Py_DECREF(result);

$LN28@PyThread_C:
  001b5	49 8b cc	 mov	 rcx, r12
  001b8	e8 00 00 00 00	 call	 Px_DecRef
$LN34@PyThread_C:

; 629  :     return NULL;

  001bd	33 c0		 xor	 eax, eax
  001bf	e9 63 ff ff ff	 jmp	 $LN45@PyThread_C
_PyThread_CurrentFrames ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT PyThreadState_IsCurrent
_TEXT	SEGMENT
tstate$ = 8
PyThreadState_IsCurrent PROC				; COMDAT

; 646  :     /* Must be the tstate for this thread */
; 647  :     assert(PyGILState_GetThisThreadState()==tstate);
; 648  :     return tstate == _Py_atomic_load_relaxed(&_PyThreadState_Current);

  00000	33 c0		 xor	 eax, eax
  00002	48 3b 0d 00 00
	00 00		 cmp	 rcx, QWORD PTR _PyThreadState_Current
  00009	0f 94 c0	 sete	 al

; 649  : }

  0000c	c3		 ret	 0
PyThreadState_IsCurrent ENDP
_TEXT	ENDS
PUBLIC	_PyGILState_Fini
EXTRN	PyThread_delete_key:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyGILState_Fini DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$_PyGILState_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyGILState_Fini DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyGILState_Fini
_TEXT	SEGMENT
_PyGILState_Fini PROC					; COMDAT

; 670  : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 671  :     PyThread_delete_key(autoTLSkey);

  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  0000a	e8 00 00 00 00	 call	 PyThread_delete_key

; 672  :     autoInterpreterState = NULL;

  0000f	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR autoInterpreterState, 0

; 673  : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
_PyGILState_Fini ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@IEEAKDBK@Couldn?8t?5create?5autoTLSkey?5mappi@ ; `string'
EXTRN	PyThread_set_key_value:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyGILState_NoteThreadState DD imagerel _PyGILState_NoteThreadState
	DD	imagerel _PyGILState_NoteThreadState+65
	DD	imagerel $unwind$_PyGILState_NoteThreadState
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyGILState_NoteThreadState DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CD@IEEAKDBK@Couldn?8t?5create?5autoTLSkey?5mappi@
CONST	SEGMENT
??_C@_0CD@IEEAKDBK@Couldn?8t?5create?5autoTLSkey?5mappi@ DB 'Couldn''t cr'
	DB	'eate autoTLSkey mapping', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyGILState_NoteThreadState
_TEXT	SEGMENT
tstate$ = 48
_PyGILState_NoteThreadState PROC			; COMDAT

; 700  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 701  :     /* If autoTLSkey isn't initialized, this must be the very first
; 702  :        threadstate created in Py_Initialize().  Don't do anything for now
; 703  :        (we'll be back here when _PyGILState_Init is called). */
; 704  :     if (!autoInterpreterState)

  00006	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR autoInterpreterState, 0
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	74 28		 je	 SHORT $LN3@PyGILState

; 705  :         return;
; 706  : 
; 707  :     /* Stick the thread state for this thread in thread local storage.
; 708  : 
; 709  :        The only situation where you can legitimately have more than one
; 710  :        thread state for an OS level thread is when there are multiple
; 711  :        interpreters, when:
; 712  : 
; 713  :            a) You shouldn't really be using the PyGILState_ APIs anyway,
; 714  :           and:
; 715  : 
; 716  :            b) The slightly odd way PyThread_set_key_value works (see
; 717  :           comments by its implementation) means that the first thread
; 718  :           state created for that given OS level thread will "win",
; 719  :           which seems reasonable behaviour.
; 720  :     */
; 721  :     if (PyThread_set_key_value(autoTLSkey, (void *)tstate) < 0)

  00013	48 8b d1	 mov	 rdx, rcx
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  0001c	e8 00 00 00 00	 call	 PyThread_set_key_value
  00021	85 c0		 test	 eax, eax
  00023	79 0c		 jns	 SHORT $LN1@PyGILState

; 722  :         Py_FatalError("Couldn't create autoTLSkey mapping");

  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@IEEAKDBK@Couldn?8t?5create?5autoTLSkey?5mappi@
  0002c	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyGILState:

; 723  : 
; 724  :     /* PyGILState_Release must not try to delete this thread state. */
; 725  :     tstate->gilstate_counter = 1;

  00031	c7 83 84 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rbx+132], 1
$LN3@PyGILState:

; 726  : }

  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5b		 pop	 rbx
  00040	c3		 ret	 0
_PyGILState_NoteThreadState ENDP
_TEXT	ENDS
PUBLIC	PyGILState_GetThisThreadState
; Function compile flags: /Ogtpy
;	COMDAT PyGILState_GetThisThreadState
_TEXT	SEGMENT
PyGILState_GetThisThreadState PROC			; COMDAT

; 732  :     if (autoInterpreterState == NULL)

  00000	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR autoInterpreterState, 0
  00008	75 03		 jne	 SHORT $LN1@PyGILState@2

; 733  :         return NULL;

  0000a	33 c0		 xor	 eax, eax

; 735  : }

  0000c	c3		 ret	 0
$LN1@PyGILState@2:

; 734  :     return (PyThreadState *)PyThread_get_key_value(autoTLSkey);

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey

; 735  : }

  00013	e9 00 00 00 00	 jmp	 PyThread_get_key_value
PyGILState_GetThisThreadState ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@OENECCGK@This?5thread?5state?5must?5be?5curren@ ; `string'
PUBLIC	??_C@_0EB@DNGILOPL@auto?9releasing?5thread?9state?0?5but@ ; `string'
PUBLIC	PyGILState_Release
EXTRN	PyEval_SaveThread:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyGILState_Release DD imagerel $LN8
	DD	imagerel $LN8+119
	DD	imagerel $unwind$PyGILState_Release
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyGILState_Release DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0DB@OENECCGK@This?5thread?5state?5must?5be?5curren@
CONST	SEGMENT
??_C@_0DB@OENECCGK@This?5thread?5state?5must?5be?5curren@ DB 'This thread'
	DB	' state must be current when releasing', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@DNGILOPL@auto?9releasing?5thread?9state?0?5but@
CONST	SEGMENT
??_C@_0EB@DNGILOPL@auto?9releasing?5thread?9state?0?5but@ DB 'auto-releas'
	DB	'ing thread-state, but no thread-state for this thread', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyGILState_Release
_TEXT	SEGMENT
oldstate$ = 48
PyGILState_Release PROC					; COMDAT

; 774  : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b f9		 mov	 edi, ecx

; 775  :     PyThreadState *tcur = (PyThreadState *)PyThread_get_key_value(
; 776  :                                                             autoTLSkey);

  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  00012	e8 00 00 00 00	 call	 PyThread_get_key_value
  00017	48 8b d8	 mov	 rbx, rax

; 777  :     if (tcur == NULL)

  0001a	48 85 c0	 test	 rax, rax
  0001d	75 0c		 jne	 SHORT $LN5@PyGILState@3

; 778  :         Py_FatalError("auto-releasing thread-state, "
; 779  :                       "but no thread-state for this thread");

  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EB@DNGILOPL@auto?9releasing?5thread?9state?0?5but@
  00026	e8 00 00 00 00	 call	 Py_FatalError
$LN5@PyGILState@3:

; 780  :     /* We must hold the GIL and have our thread state current */
; 781  :     /* XXX - remove the check - the assert should be fine,
; 782  :        but while this is very new (April 2003), the extra check
; 783  :        by release-only users can't hurt.
; 784  :     */
; 785  :     if (! PyThreadState_IsCurrent(tcur))

  0002b	48 8b cb	 mov	 rcx, rbx
  0002e	e8 00 00 00 00	 call	 PyThreadState_IsCurrent
  00033	85 c0		 test	 eax, eax
  00035	75 0c		 jne	 SHORT $LN4@PyGILState@3

; 786  :         Py_FatalError("This thread state must be current when releasing");

  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@OENECCGK@This?5thread?5state?5must?5be?5curren@
  0003e	e8 00 00 00 00	 call	 Py_FatalError
$LN4@PyGILState@3:

; 787  :     assert(PyThreadState_IsCurrent(tcur));
; 788  :     --tcur->gilstate_counter;

  00043	ff 8b 84 00 00
	00		 dec	 DWORD PTR [rbx+132]

; 789  :     assert(tcur->gilstate_counter >= 0); /* illegal counter value */
; 790  : 
; 791  :     /* If we're going to destroy this thread-state, we must
; 792  :      * clear it while the GIL is held, as destructors may run.
; 793  :      */
; 794  :     if (tcur->gilstate_counter == 0) {

  00049	75 17		 jne	 SHORT $LN3@PyGILState@3

; 795  :         /* can't have been locked when we created it */
; 796  :         assert(oldstate == PyGILState_UNLOCKED);
; 797  :         PyThreadState_Clear(tcur);

  0004b	48 8b cb	 mov	 rcx, rbx
  0004e	e8 00 00 00 00	 call	 PyThreadState_Clear

; 808  : }

  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
  0005d	e9 00 00 00 00	 jmp	 PyThreadState_DeleteCurrent
$LN3@PyGILState@3:

; 798  :         /* Delete the thread-state.  Note this releases the GIL too!
; 799  :          * It's vital that the GIL be held here, to avoid shutdown
; 800  :          * races; see bugs 225673 and 1061968 (that nasty bug has a
; 801  :          * habit of coming back).
; 802  :          */
; 803  :         PyThreadState_DeleteCurrent();
; 804  :     }
; 805  :     /* Release the lock if necessary */
; 806  :     else if (oldstate == PyGILState_UNLOCKED)

  00062	83 ff 01	 cmp	 edi, 1
  00065	75 05		 jne	 SHORT $LN1@PyGILState@3

; 807  :         PyEval_SaveThread();

  00067	e8 00 00 00 00	 call	 PyEval_SaveThread
$LN1@PyGILState@3:

; 808  : }

  0006c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00071	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00075	5f		 pop	 rdi
  00076	c3		 ret	 0
PyGILState_Release ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@ ; `string'
PUBLIC	PyInterpreterState_Clear
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$PyInterpreterState_Clear DD imagerel $LN128
	DD	imagerel $LN128+1395
	DD	imagerel $unwind$PyInterpreterState_Clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInterpreterState_Clear DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
CONST	SEGMENT
??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@ DB 'PyInterpreterState_C'
	DB	'lear', 00H					; `string'
; Function compile flags: /Ogtpy
; File c:\src\pyparallel\python\pystate.c
CONST	ENDS
;	COMDAT PyInterpreterState_Clear
_TEXT	SEGMENT
interp$ = 64
PyInterpreterState_Clear PROC				; COMDAT

; 105  : {

$LN128:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b f9	 mov	 rdi, rcx

; 106  :     PyThreadState *p;
; 107  :     HEAD_LOCK();

  00012	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  00019	ba 01 00 00 00	 mov	 edx, 1
  0001e	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 108  :     for (p = interp->tstate_head; p != NULL; p = p->next)

  00023	48 8b 5f 08	 mov	 rbx, QWORD PTR [rdi+8]
  00027	48 85 db	 test	 rbx, rbx
  0002a	74 14		 je	 SHORT $LN33@PyInterpre@2
  0002c	0f 1f 40 00	 npad	 4
$LL35@PyInterpre@2:

; 109  :         PyThreadState_Clear(p);

  00030	48 8b cb	 mov	 rcx, rbx
  00033	e8 00 00 00 00	 call	 PyThreadState_Clear
  00038	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  0003b	48 85 db	 test	 rbx, rbx
  0003e	75 f0		 jne	 SHORT $LL35@PyInterpre@2
$LN33@PyInterpre@2:

; 110  :     HEAD_UNLOCK();

  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  00047	e8 00 00 00 00	 call	 PyThread_release_lock

; 111  :     Py_CLEAR(interp->codec_search_path);

  0004c	4c 8b 4f 38	 mov	 r9, QWORD PTR [rdi+56]
  00050	33 f6		 xor	 esi, esi
  00052	4d 85 c9	 test	 r9, r9
  00055	0f 84 90 00 00
	00		 je	 $LN31@PyInterpre@2
  0005b	44 8d 46 6f	 lea	 r8d, QWORD PTR [rsi+111]
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
  0006d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00075	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007a	85 c0		 test	 eax, eax
  0007c	75 6d		 jne	 SHORT $LN31@PyInterpre@2
  0007e	48 8b 5f 38	 mov	 rbx, QWORD PTR [rdi+56]
  00082	48 89 77 38	 mov	 QWORD PTR [rdi+56], rsi
  00086	e8 00 00 00 00	 call	 _Py_PXCTX
  0008b	85 c0		 test	 eax, eax
  0008d	75 5c		 jne	 SHORT $LN31@PyInterpre@2
  0008f	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00093	a8 20		 test	 al, 32			; 00000020H
  00095	75 4c		 jne	 SHORT $LN42@PyInterpre@2
  00097	84 c0		 test	 al, al
  00099	78 48		 js	 SHORT $LN42@PyInterpre@2
  0009b	a8 02		 test	 al, 2
  0009d	75 4c		 jne	 SHORT $LN31@PyInterpre@2
  0009f	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  000a3	75 46		 jne	 SHORT $LN31@PyInterpre@2
  000a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000b3	4c 8b cb	 mov	 r9, rbx
  000b6	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  000bc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c9	48 8b cb	 mov	 rcx, rbx
  000cc	85 c0		 test	 eax, eax
  000ce	74 07		 je	 SHORT $LN47@PyInterpre@2
  000d0	e8 00 00 00 00	 call	 _Px_Dealloc
  000d5	eb 14		 jmp	 SHORT $LN31@PyInterpre@2
$LN47@PyInterpre@2:
  000d7	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  000db	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e1	eb 08		 jmp	 SHORT $LN31@PyInterpre@2
$LN42@PyInterpre@2:
  000e3	48 8b cb	 mov	 rcx, rbx
  000e6	e8 00 00 00 00	 call	 Px_DecRef
$LN31@PyInterpre@2:

; 112  :     Py_CLEAR(interp->codec_search_cache);

  000eb	4c 8b 4f 40	 mov	 r9, QWORD PTR [rdi+64]
  000ef	4d 85 c9	 test	 r9, r9
  000f2	0f 84 92 00 00
	00		 je	 $LN27@PyInterpre@2
  000f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
  00106	41 b8 70 00 00
	00		 mov	 r8d, 112		; 00000070H
  0010c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00114	e8 00 00 00 00	 call	 _PyParallel_Guard
  00119	85 c0		 test	 eax, eax
  0011b	75 6d		 jne	 SHORT $LN27@PyInterpre@2
  0011d	48 8b 5f 40	 mov	 rbx, QWORD PTR [rdi+64]
  00121	48 89 77 40	 mov	 QWORD PTR [rdi+64], rsi
  00125	e8 00 00 00 00	 call	 _Py_PXCTX
  0012a	85 c0		 test	 eax, eax
  0012c	75 5c		 jne	 SHORT $LN27@PyInterpre@2
  0012e	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00132	a8 20		 test	 al, 32			; 00000020H
  00134	75 4c		 jne	 SHORT $LN53@PyInterpre@2
  00136	84 c0		 test	 al, al
  00138	78 48		 js	 SHORT $LN53@PyInterpre@2
  0013a	a8 02		 test	 al, 2
  0013c	75 4c		 jne	 SHORT $LN27@PyInterpre@2
  0013e	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00142	75 46		 jne	 SHORT $LN27@PyInterpre@2
  00144	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0014b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00152	4c 8b cb	 mov	 r9, rbx
  00155	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  0015b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00163	e8 00 00 00 00	 call	 _PyParallel_Guard
  00168	48 8b cb	 mov	 rcx, rbx
  0016b	85 c0		 test	 eax, eax
  0016d	74 07		 je	 SHORT $LN58@PyInterpre@2
  0016f	e8 00 00 00 00	 call	 _Px_Dealloc
  00174	eb 14		 jmp	 SHORT $LN27@PyInterpre@2
$LN58@PyInterpre@2:
  00176	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  0017a	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00180	eb 08		 jmp	 SHORT $LN27@PyInterpre@2
$LN53@PyInterpre@2:
  00182	48 8b cb	 mov	 rcx, rbx
  00185	e8 00 00 00 00	 call	 Px_DecRef
$LN27@PyInterpre@2:

; 113  :     Py_CLEAR(interp->codec_error_registry);

  0018a	4c 8b 4f 48	 mov	 r9, QWORD PTR [rdi+72]
  0018e	4d 85 c9	 test	 r9, r9
  00191	0f 84 92 00 00
	00		 je	 $LN23@PyInterpre@2
  00197	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  0019e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
  001a5	41 b8 71 00 00
	00		 mov	 r8d, 113		; 00000071H
  001ab	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001b3	e8 00 00 00 00	 call	 _PyParallel_Guard
  001b8	85 c0		 test	 eax, eax
  001ba	75 6d		 jne	 SHORT $LN23@PyInterpre@2
  001bc	48 8b 5f 48	 mov	 rbx, QWORD PTR [rdi+72]
  001c0	48 89 77 48	 mov	 QWORD PTR [rdi+72], rsi
  001c4	e8 00 00 00 00	 call	 _Py_PXCTX
  001c9	85 c0		 test	 eax, eax
  001cb	75 5c		 jne	 SHORT $LN23@PyInterpre@2
  001cd	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  001d1	a8 20		 test	 al, 32			; 00000020H
  001d3	75 4c		 jne	 SHORT $LN64@PyInterpre@2
  001d5	84 c0		 test	 al, al
  001d7	78 48		 js	 SHORT $LN64@PyInterpre@2
  001d9	a8 02		 test	 al, 2
  001db	75 4c		 jne	 SHORT $LN23@PyInterpre@2
  001dd	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  001e1	75 46		 jne	 SHORT $LN23@PyInterpre@2
  001e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  001ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  001f1	4c 8b cb	 mov	 r9, rbx
  001f4	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  001fa	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00202	e8 00 00 00 00	 call	 _PyParallel_Guard
  00207	48 8b cb	 mov	 rcx, rbx
  0020a	85 c0		 test	 eax, eax
  0020c	74 07		 je	 SHORT $LN69@PyInterpre@2
  0020e	e8 00 00 00 00	 call	 _Px_Dealloc
  00213	eb 14		 jmp	 SHORT $LN23@PyInterpre@2
$LN69@PyInterpre@2:
  00215	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00219	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0021f	eb 08		 jmp	 SHORT $LN23@PyInterpre@2
$LN64@PyInterpre@2:
  00221	48 8b cb	 mov	 rcx, rbx
  00224	e8 00 00 00 00	 call	 Px_DecRef
$LN23@PyInterpre@2:

; 114  :     Py_CLEAR(interp->modules);

  00229	4c 8b 4f 10	 mov	 r9, QWORD PTR [rdi+16]
  0022d	4d 85 c9	 test	 r9, r9
  00230	0f 84 92 00 00
	00		 je	 $LN19@PyInterpre@2
  00236	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  0023d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
  00244	41 b8 72 00 00
	00		 mov	 r8d, 114		; 00000072H
  0024a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00252	e8 00 00 00 00	 call	 _PyParallel_Guard
  00257	85 c0		 test	 eax, eax
  00259	75 6d		 jne	 SHORT $LN19@PyInterpre@2
  0025b	48 8b 5f 10	 mov	 rbx, QWORD PTR [rdi+16]
  0025f	48 89 77 10	 mov	 QWORD PTR [rdi+16], rsi
  00263	e8 00 00 00 00	 call	 _Py_PXCTX
  00268	85 c0		 test	 eax, eax
  0026a	75 5c		 jne	 SHORT $LN19@PyInterpre@2
  0026c	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00270	a8 20		 test	 al, 32			; 00000020H
  00272	75 4c		 jne	 SHORT $LN75@PyInterpre@2
  00274	84 c0		 test	 al, al
  00276	78 48		 js	 SHORT $LN75@PyInterpre@2
  00278	a8 02		 test	 al, 2
  0027a	75 4c		 jne	 SHORT $LN19@PyInterpre@2
  0027c	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00280	75 46		 jne	 SHORT $LN19@PyInterpre@2
  00282	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00289	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00290	4c 8b cb	 mov	 r9, rbx
  00293	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00299	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002a1	e8 00 00 00 00	 call	 _PyParallel_Guard
  002a6	48 8b cb	 mov	 rcx, rbx
  002a9	85 c0		 test	 eax, eax
  002ab	74 07		 je	 SHORT $LN80@PyInterpre@2
  002ad	e8 00 00 00 00	 call	 _Px_Dealloc
  002b2	eb 14		 jmp	 SHORT $LN19@PyInterpre@2
$LN80@PyInterpre@2:
  002b4	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  002b8	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  002be	eb 08		 jmp	 SHORT $LN19@PyInterpre@2
$LN75@PyInterpre@2:
  002c0	48 8b cb	 mov	 rcx, rbx
  002c3	e8 00 00 00 00	 call	 Px_DecRef
$LN19@PyInterpre@2:

; 115  :     Py_CLEAR(interp->modules_by_index);

  002c8	4c 8b 4f 18	 mov	 r9, QWORD PTR [rdi+24]
  002cc	4d 85 c9	 test	 r9, r9
  002cf	0f 84 92 00 00
	00		 je	 $LN15@PyInterpre@2
  002d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  002dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
  002e3	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  002e9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002f1	e8 00 00 00 00	 call	 _PyParallel_Guard
  002f6	85 c0		 test	 eax, eax
  002f8	75 6d		 jne	 SHORT $LN15@PyInterpre@2
  002fa	48 8b 5f 18	 mov	 rbx, QWORD PTR [rdi+24]
  002fe	48 89 77 18	 mov	 QWORD PTR [rdi+24], rsi
  00302	e8 00 00 00 00	 call	 _Py_PXCTX
  00307	85 c0		 test	 eax, eax
  00309	75 5c		 jne	 SHORT $LN15@PyInterpre@2
  0030b	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0030f	a8 20		 test	 al, 32			; 00000020H
  00311	75 4c		 jne	 SHORT $LN86@PyInterpre@2
  00313	84 c0		 test	 al, al
  00315	78 48		 js	 SHORT $LN86@PyInterpre@2
  00317	a8 02		 test	 al, 2
  00319	75 4c		 jne	 SHORT $LN15@PyInterpre@2
  0031b	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0031f	75 46		 jne	 SHORT $LN15@PyInterpre@2
  00321	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00328	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0032f	4c 8b cb	 mov	 r9, rbx
  00332	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00338	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00340	e8 00 00 00 00	 call	 _PyParallel_Guard
  00345	48 8b cb	 mov	 rcx, rbx
  00348	85 c0		 test	 eax, eax
  0034a	74 07		 je	 SHORT $LN91@PyInterpre@2
  0034c	e8 00 00 00 00	 call	 _Px_Dealloc
  00351	eb 14		 jmp	 SHORT $LN15@PyInterpre@2
$LN91@PyInterpre@2:
  00353	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00357	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0035d	eb 08		 jmp	 SHORT $LN15@PyInterpre@2
$LN86@PyInterpre@2:
  0035f	48 8b cb	 mov	 rcx, rbx
  00362	e8 00 00 00 00	 call	 Px_DecRef
$LN15@PyInterpre@2:

; 116  :     Py_CLEAR(interp->sysdict);

  00367	4c 8b 4f 20	 mov	 r9, QWORD PTR [rdi+32]
  0036b	4d 85 c9	 test	 r9, r9
  0036e	0f 84 92 00 00
	00		 je	 $LN11@PyInterpre@2
  00374	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  0037b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
  00382	41 b8 74 00 00
	00		 mov	 r8d, 116		; 00000074H
  00388	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00390	e8 00 00 00 00	 call	 _PyParallel_Guard
  00395	85 c0		 test	 eax, eax
  00397	75 6d		 jne	 SHORT $LN11@PyInterpre@2
  00399	48 8b 5f 20	 mov	 rbx, QWORD PTR [rdi+32]
  0039d	48 89 77 20	 mov	 QWORD PTR [rdi+32], rsi
  003a1	e8 00 00 00 00	 call	 _Py_PXCTX
  003a6	85 c0		 test	 eax, eax
  003a8	75 5c		 jne	 SHORT $LN11@PyInterpre@2
  003aa	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  003ae	a8 20		 test	 al, 32			; 00000020H
  003b0	75 4c		 jne	 SHORT $LN97@PyInterpre@2
  003b2	84 c0		 test	 al, al
  003b4	78 48		 js	 SHORT $LN97@PyInterpre@2
  003b6	a8 02		 test	 al, 2
  003b8	75 4c		 jne	 SHORT $LN11@PyInterpre@2
  003ba	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  003be	75 46		 jne	 SHORT $LN11@PyInterpre@2
  003c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  003c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  003ce	4c 8b cb	 mov	 r9, rbx
  003d1	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  003d7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003df	e8 00 00 00 00	 call	 _PyParallel_Guard
  003e4	48 8b cb	 mov	 rcx, rbx
  003e7	85 c0		 test	 eax, eax
  003e9	74 07		 je	 SHORT $LN102@PyInterpre@2
  003eb	e8 00 00 00 00	 call	 _Px_Dealloc
  003f0	eb 14		 jmp	 SHORT $LN11@PyInterpre@2
$LN102@PyInterpre@2:
  003f2	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  003f6	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  003fc	eb 08		 jmp	 SHORT $LN11@PyInterpre@2
$LN97@PyInterpre@2:
  003fe	48 8b cb	 mov	 rcx, rbx
  00401	e8 00 00 00 00	 call	 Px_DecRef
$LN11@PyInterpre@2:

; 117  :     Py_CLEAR(interp->builtins);

  00406	4c 8b 4f 28	 mov	 r9, QWORD PTR [rdi+40]
  0040a	4d 85 c9	 test	 r9, r9
  0040d	0f 84 92 00 00
	00		 je	 $LN7@PyInterpre@2
  00413	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  0041a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
  00421	41 b8 75 00 00
	00		 mov	 r8d, 117		; 00000075H
  00427	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0042f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00434	85 c0		 test	 eax, eax
  00436	75 6d		 jne	 SHORT $LN7@PyInterpre@2
  00438	48 8b 5f 28	 mov	 rbx, QWORD PTR [rdi+40]
  0043c	48 89 77 28	 mov	 QWORD PTR [rdi+40], rsi
  00440	e8 00 00 00 00	 call	 _Py_PXCTX
  00445	85 c0		 test	 eax, eax
  00447	75 5c		 jne	 SHORT $LN7@PyInterpre@2
  00449	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  0044d	a8 20		 test	 al, 32			; 00000020H
  0044f	75 4c		 jne	 SHORT $LN108@PyInterpre@2
  00451	84 c0		 test	 al, al
  00453	78 48		 js	 SHORT $LN108@PyInterpre@2
  00455	a8 02		 test	 al, 2
  00457	75 4c		 jne	 SHORT $LN7@PyInterpre@2
  00459	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  0045d	75 46		 jne	 SHORT $LN7@PyInterpre@2
  0045f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00466	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  0046d	4c 8b cb	 mov	 r9, rbx
  00470	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00476	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0047e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00483	48 8b cb	 mov	 rcx, rbx
  00486	85 c0		 test	 eax, eax
  00488	74 07		 je	 SHORT $LN113@PyInterpre@2
  0048a	e8 00 00 00 00	 call	 _Px_Dealloc
  0048f	eb 14		 jmp	 SHORT $LN7@PyInterpre@2
$LN113@PyInterpre@2:
  00491	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00495	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0049b	eb 08		 jmp	 SHORT $LN7@PyInterpre@2
$LN108@PyInterpre@2:
  0049d	48 8b cb	 mov	 rcx, rbx
  004a0	e8 00 00 00 00	 call	 Px_DecRef
$LN7@PyInterpre@2:

; 118  :     Py_CLEAR(interp->importlib);

  004a5	4c 8b 4f 30	 mov	 r9, QWORD PTR [rdi+48]
  004a9	4d 85 c9	 test	 r9, r9
  004ac	0f 84 b1 00 00
	00		 je	 $LN3@PyInterpre@2
  004b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  004b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
  004c0	41 b8 76 00 00
	00		 mov	 r8d, 118		; 00000076H
  004c6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004ce	e8 00 00 00 00	 call	 _PyParallel_Guard
  004d3	85 c0		 test	 eax, eax
  004d5	0f 85 88 00 00
	00		 jne	 $LN3@PyInterpre@2
  004db	48 8b 5f 30	 mov	 rbx, QWORD PTR [rdi+48]
  004df	48 89 77 30	 mov	 QWORD PTR [rdi+48], rsi
  004e3	e8 00 00 00 00	 call	 _Py_PXCTX
  004e8	85 c0		 test	 eax, eax
  004ea	75 77		 jne	 SHORT $LN3@PyInterpre@2
  004ec	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  004f0	a8 20		 test	 al, 32			; 00000020H
  004f2	75 67		 jne	 SHORT $LN119@PyInterpre@2
  004f4	84 c0		 test	 al, al
  004f6	78 63		 js	 SHORT $LN119@PyInterpre@2
  004f8	a8 02		 test	 al, 2
  004fa	75 67		 jne	 SHORT $LN3@PyInterpre@2
  004fc	48 ff 4b 50	 dec	 QWORD PTR [rbx+80]
  00500	75 61		 jne	 SHORT $LN3@PyInterpre@2
  00502	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  00509	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  00510	4c 8b cb	 mov	 r9, rbx
  00513	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00519	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00521	e8 00 00 00 00	 call	 _PyParallel_Guard
  00526	48 8b cb	 mov	 rcx, rbx
  00529	85 c0		 test	 eax, eax
  0052b	74 14		 je	 SHORT $LN124@PyInterpre@2

; 119  : }

  0052d	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00532	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00537	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0053b	5f		 pop	 rdi
  0053c	e9 00 00 00 00	 jmp	 _Px_Dealloc

; 118  :     Py_CLEAR(interp->importlib);

$LN124@PyInterpre@2:
  00541	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]

; 119  : }

  00545	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0054a	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0054f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00553	5f		 pop	 rdi
  00554	48 ff a0 88 00
	00 00		 rex_jmp QWORD PTR [rax+136]

; 118  :     Py_CLEAR(interp->importlib);

$LN119@PyInterpre@2:
  0055b	48 8b cb	 mov	 rcx, rbx
  0055e	e8 00 00 00 00	 call	 Px_DecRef
$LN3@PyInterpre@2:

; 119  : }

  00563	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00568	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0056d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00571	5f		 pop	 rdi
  00572	c3		 ret	 0
PyInterpreterState_Clear ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zapthreads DD imagerel zapthreads
	DD	imagerel zapthreads+41
	DD	imagerel $unwind$zapthreads
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zapthreads DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT zapthreads
_TEXT	SEGMENT
interp$ = 48
zapthreads PROC						; COMDAT

; 124  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 125  :     PyThreadState *p;
; 126  :     /* No need to lock the mutex here because this should only happen
; 127  :        when the threads are all really dead (XXX famous last words). */
; 128  :     while ((p = interp->tstate_head) != NULL) {

  00006	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 85 c0	 test	 rax, rax
  00010	74 11		 je	 SHORT $LN1@zapthreads
$LL2@zapthreads:

; 129  :         PyThreadState_Delete(p);

  00012	48 8b c8	 mov	 rcx, rax
  00015	e8 00 00 00 00	 call	 PyThreadState_Delete
  0001a	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0001e	48 85 c0	 test	 rax, rax
  00021	75 ef		 jne	 SHORT $LL2@zapthreads
$LN1@zapthreads:

; 130  :     }
; 131  : }

  00023	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00027	5b		 pop	 rbx
  00028	c3		 ret	 0
zapthreads ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@NINALOJI@PyInterpreterState_Delete?3?5remai@ ; `string'
PUBLIC	??_C@_0CK@KOPFEEPG@PyInterpreterState_Delete?3?5inval@ ; `string'
PUBLIC	PyInterpreterState_Delete
EXTRN	PyThread_free_lock:PROC
EXTRN	_PyParallel_DeletingInterpreterState:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInterpreterState_Delete DD imagerel $LN13
	DD	imagerel $LN13+182
	DD	imagerel $unwind$PyInterpreterState_Delete
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInterpreterState_Delete DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CN@NINALOJI@PyInterpreterState_Delete?3?5remai@
CONST	SEGMENT
??_C@_0CN@NINALOJI@PyInterpreterState_Delete?3?5remai@ DB 'PyInterpreterS'
	DB	'tate_Delete: remaining threads', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KOPFEEPG@PyInterpreterState_Delete?3?5inval@
CONST	SEGMENT
??_C@_0CK@KOPFEEPG@PyInterpreterState_Delete?3?5inval@ DB 'PyInterpreterS'
	DB	'tate_Delete: invalid interp', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyInterpreterState_Delete
_TEXT	SEGMENT
interp$ = 48
PyInterpreterState_Delete PROC				; COMDAT

; 136  : {

$LN13:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 137  :     PyInterpreterState **p;
; 138  :     zapthreads(interp);

  0000d	e8 00 00 00 00	 call	 zapthreads

; 139  :     HEAD_LOCK();

  00012	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  00019	ba 01 00 00 00	 mov	 edx, 1
  0001e	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 140  :     for (p = &interp_head; ; p = &(*p)->next) {

  00023	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:interp_head
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL7@PyInterpre@3:

; 141  :         if (*p == NULL)

  00030	48 83 3b 00	 cmp	 QWORD PTR [rbx], 0
  00034	75 0c		 jne	 SHORT $LN4@PyInterpre@3

; 142  :             Py_FatalError(
; 143  :                 "PyInterpreterState_Delete: invalid interp");

  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CK@KOPFEEPG@PyInterpreterState_Delete?3?5inval@
  0003d	e8 00 00 00 00	 call	 Py_FatalError
$LN4@PyInterpre@3:

; 144  :         if (*p == interp)

  00042	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00045	48 3b c7	 cmp	 rax, rdi
  00048	74 05		 je	 SHORT $LN12@PyInterpre@3

; 140  :     for (p = &interp_head; ; p = &(*p)->next) {

  0004a	48 8b d8	 mov	 rbx, rax
  0004d	eb e1		 jmp	 SHORT $LL7@PyInterpre@3
$LN12@PyInterpre@3:

; 145  :             break;
; 146  :     }
; 147  :     if (interp->tstate_head != NULL)

  0004f	48 83 7f 08 00	 cmp	 QWORD PTR [rdi+8], 0
  00054	74 0c		 je	 SHORT $LN2@PyInterpre@3

; 148  :         Py_FatalError("PyInterpreterState_Delete: remaining threads");

  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@NINALOJI@PyInterpreterState_Delete?3?5remai@
  0005d	e8 00 00 00 00	 call	 Py_FatalError
$LN2@PyInterpre@3:

; 149  : #ifdef WITH_PARALLEL
; 150  :     _PyParallel_DeletingInterpreterState(interp);

  00062	48 8b cf	 mov	 rcx, rdi
  00065	e8 00 00 00 00	 call	 _PyParallel_DeletingInterpreterState

; 151  : #endif
; 152  :     *p = interp->next;

  0006a	4c 8b 1f	 mov	 r11, QWORD PTR [rdi]

; 153  :     HEAD_UNLOCK();

  0006d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  00074	4c 89 1b	 mov	 QWORD PTR [rbx], r11
  00077	e8 00 00 00 00	 call	 PyThread_release_lock

; 154  :     free(interp);

  0007c	48 8b cf	 mov	 rcx, rdi
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 155  : #ifdef WITH_THREAD
; 156  :     if (interp_head == NULL && head_mutex != NULL) {

  00085	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR interp_head, 0
  0008d	75 1c		 jne	 SHORT $LN1@PyInterpre@3
  0008f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  00096	48 85 c9	 test	 rcx, rcx
  00099	74 10		 je	 SHORT $LN1@PyInterpre@3

; 157  :         PyThread_free_lock(head_mutex);

  0009b	e8 00 00 00 00	 call	 PyThread_free_lock

; 158  :         head_mutex = NULL;

  000a0	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR head_mutex, 0
$LN1@PyInterpre@3:

; 159  :     }
; 160  : #endif
; 161  : }

  000ab	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b4	5f		 pop	 rdi
  000b5	c3		 ret	 0
PyInterpreterState_Delete ENDP
_TEXT	ENDS
PUBLIC	_PyThreadState_Init
EXTRN	_PyParallel_InitializedThreadState:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyThreadState_Init DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$_PyThreadState_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyThreadState_Init DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyThreadState_Init
_TEXT	SEGMENT
tstate$ = 48
_PyThreadState_Init PROC				; COMDAT

; 251  : {

$LN3:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 252  : #ifdef WITH_THREAD
; 253  :     _PyGILState_NoteThreadState(tstate);

  00009	e8 00 00 00 00	 call	 _PyGILState_NoteThreadState

; 254  : #endif
; 255  : #ifdef WITH_PARALLEL
; 256  :     _PyParallel_InitializedThreadState(tstate);

  0000e	48 8b cb	 mov	 rcx, rbx

; 257  : #endif
; 258  : 
; 259  : }

  00011	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00015	5b		 pop	 rbx
  00016	e9 00 00 00 00	 jmp	 _PyParallel_InitializedThreadState
_PyThreadState_Init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@ODJKKAJF@Could?5not?5allocate?5TLS?5entry?$AA@ ; `string'
PUBLIC	_PyGILState_Init
EXTRN	PyThread_create_key:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyGILState_Init DD imagerel $LN4
	DD	imagerel $LN4+69
	DD	imagerel $unwind$_PyGILState_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyGILState_Init DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BN@ODJKKAJF@Could?5not?5allocate?5TLS?5entry?$AA@
CONST	SEGMENT
??_C@_0BN@ODJKKAJF@Could?5not?5allocate?5TLS?5entry?$AA@ DB 'Could not al'
	DB	'locate TLS entry', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PyGILState_Init
_TEXT	SEGMENT
i$ = 48
t$ = 56
_PyGILState_Init PROC					; COMDAT

; 656  : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 657  :     assert(i && t); /* must init with valid states */
; 658  :     autoTLSkey = PyThread_create_key();

  00010	e8 00 00 00 00	 call	 PyThread_create_key
  00015	89 05 00 00 00
	00		 mov	 DWORD PTR autoTLSkey, eax

; 659  :     if (autoTLSkey == -1)

  0001b	83 f8 ff	 cmp	 eax, -1
  0001e	75 0c		 jne	 SHORT $LN1@PyGILState@4

; 660  :         Py_FatalError("Could not allocate TLS entry");

  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@ODJKKAJF@Could?5not?5allocate?5TLS?5entry?$AA@
  00027	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyGILState@4:

; 661  :     autoInterpreterState = i;
; 662  :     assert(PyThread_get_key_value(autoTLSkey) == NULL);
; 663  :     assert(t->gilstate_counter == 0);
; 664  : 
; 665  :     _PyGILState_NoteThreadState(t);

  0002c	48 8b cb	 mov	 rcx, rbx
  0002f	48 89 3d 00 00
	00 00		 mov	 QWORD PTR autoInterpreterState, rdi

; 666  : }

  00036	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	e9 00 00 00 00	 jmp	 _PyGILState_NoteThreadState
_PyGILState_Init ENDP
_TEXT	ENDS
PUBLIC	_PyGILState_Reinit
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyGILState_Reinit DD imagerel $LN5
	DD	imagerel $LN5+96
	DD	imagerel $unwind$_PyGILState_Reinit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyGILState_Reinit DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _PyGILState_Reinit
_TEXT	SEGMENT
_PyGILState_Reinit PROC					; COMDAT

; 681  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 682  :     PyThreadState *tstate = PyGILState_GetThisThreadState();

  00006	e8 00 00 00 00	 call	 PyGILState_GetThisThreadState

; 683  :     PyThread_delete_key(autoTLSkey);

  0000b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  00011	48 8b d8	 mov	 rbx, rax
  00014	e8 00 00 00 00	 call	 PyThread_delete_key

; 684  :     if ((autoTLSkey = PyThread_create_key()) == -1)

  00019	e8 00 00 00 00	 call	 PyThread_create_key
  0001e	89 05 00 00 00
	00		 mov	 DWORD PTR autoTLSkey, eax
  00024	83 f8 ff	 cmp	 eax, -1
  00027	75 12		 jne	 SHORT $LN2@PyGILState@5

; 685  :         Py_FatalError("Could not allocate TLS entry");

  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@ODJKKAJF@Could?5not?5allocate?5TLS?5entry?$AA@
  00030	e8 00 00 00 00	 call	 Py_FatalError
  00035	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR autoTLSkey
$LN2@PyGILState@5:

; 686  : 
; 687  :     /* If the thread had an associated auto thread state, reassociate it with
; 688  :      * the new key. */
; 689  :     if (tstate && PyThread_set_key_value(autoTLSkey, (void *)tstate) < 0)

  0003b	48 85 db	 test	 rbx, rbx
  0003e	74 1a		 je	 SHORT $LN1@PyGILState@5
  00040	48 8b d3	 mov	 rdx, rbx
  00043	8b c8		 mov	 ecx, eax
  00045	e8 00 00 00 00	 call	 PyThread_set_key_value
  0004a	85 c0		 test	 eax, eax
  0004c	79 0c		 jns	 SHORT $LN1@PyGILState@5

; 690  :         Py_FatalError("Couldn't create autoTLSkey mapping");

  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@IEEAKDBK@Couldn?8t?5create?5autoTLSkey?5mappi@
  00055	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyGILState@5:

; 691  : }

  0005a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005e	5b		 pop	 rbx
  0005f	c3		 ret	 0
_PyGILState_Reinit ENDP
_TEXT	ENDS
EXTRN	PyThread_get_thread_ident:PROC
EXTRN	_PyParallel_CreatedNewThreadState:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_threadstate DD imagerel new_threadstate
	DD	imagerel new_threadstate+74
	DD	imagerel $unwind$new_threadstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$new_threadstate DD imagerel new_threadstate+74
	DD	imagerel new_threadstate+123
	DD	imagerel $chain$0$new_threadstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$new_threadstate DD imagerel new_threadstate+123
	DD	imagerel new_threadstate+286
	DD	imagerel $chain$2$new_threadstate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$new_threadstate DD imagerel new_threadstate+286
	DD	imagerel new_threadstate+305
	DD	imagerel $chain$3$new_threadstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$new_threadstate DD 021H
	DD	imagerel new_threadstate
	DD	imagerel new_threadstate+74
	DD	imagerel $unwind$new_threadstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$new_threadstate DD 020021H
	DD	067400H
	DD	imagerel new_threadstate
	DD	imagerel new_threadstate+74
	DD	imagerel $unwind$new_threadstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$new_threadstate DD 020521H
	DD	067405H
	DD	imagerel new_threadstate
	DD	imagerel new_threadstate+74
	DD	imagerel $unwind$new_threadstate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_threadstate DD 060f01H
	DD	08540fH
	DD	07340fH
	DD	0600b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT new_threadstate
_TEXT	SEGMENT
interp$ = 48
init$ = 56
new_threadstate PROC					; COMDAT

; 174  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f1	 mov	 rsi, rcx

; 175  :     PyThreadState *tstate = (PyThreadState *)malloc(sizeof(PyThreadState));

  00012	b9 b0 00 00 00	 mov	 ecx, 176		; 000000b0H
  00017	8b ea		 mov	 ebp, edx
  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc

; 176  : 
; 177  :     if (_PyThreadState_GetFrame == NULL)

  0001f	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR _PyThreadState_GetFrame
  00026	48 8b d8	 mov	 rbx, rax
  00029	4d 85 c0	 test	 r8, r8
  0002c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:threadstate_getframe
  00033	4c 0f 44 c0	 cmove	 r8, rax
  00037	4c 89 05 00 00
	00 00		 mov	 QWORD PTR _PyThreadState_GetFrame, r8

; 178  :         _PyThreadState_GetFrame = threadstate_getframe;
; 179  : 
; 180  : #ifdef WITH_PARALLEL
; 181  :     if (tstate != NULL) {

  0003e	48 85 db	 test	 rbx, rbx
  00041	0f 84 d7 00 00
	00		 je	 $LN8@new_thread

; 182  :         if (!_PyParallel_CreatedNewThreadState(tstate)) {

  00047	48 8b cb	 mov	 rcx, rbx
  0004a	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0004f	e8 00 00 00 00	 call	 _PyParallel_CreatedNewThreadState
  00054	48 85 c0	 test	 rax, rax
  00057	75 22		 jne	 SHORT $LN3@new_thread

; 183  :             free(tstate);

  00059	48 8b cb	 mov	 rcx, rbx
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 184  :             tstate = NULL;

  00062	33 ff		 xor	 edi, edi

; 232  :     }
; 233  : 
; 234  :     return tstate;

  00064	8b c7		 mov	 eax, edi
$LN9@new_thread:
  00066	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 235  : }

  0006b	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00070	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00075	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00079	5e		 pop	 rsi
  0007a	c3		 ret	 0
$LN3@new_thread:

; 185  :         }
; 186  :     }
; 187  : #endif
; 188  : 
; 189  :     if (tstate != NULL) {
; 190  :         tstate->interp = interp;
; 191  : 
; 192  :         tstate->frame = NULL;

  0007b	33 ff		 xor	 edi, edi
  0007d	48 89 73 08	 mov	 QWORD PTR [rbx+8], rsi
  00081	48 89 7b 10	 mov	 QWORD PTR [rbx+16], rdi

; 193  :         tstate->recursion_depth = 0;

  00085	89 7b 18	 mov	 DWORD PTR [rbx+24], edi

; 194  :         tstate->overflowed = 0;

  00088	66 89 7b 1c	 mov	 WORD PTR [rbx+28], di

; 195  :         tstate->recursion_critical = 0;
; 196  :         tstate->tracing = 0;

  0008c	48 89 7b 20	 mov	 QWORD PTR [rbx+32], rdi

; 197  :         tstate->use_tracing = 0;
; 198  :         tstate->tick_counter = 0;

  00090	48 89 bb 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rdi

; 199  :         tstate->gilstate_counter = 0;
; 200  :         tstate->async_exc = NULL;

  00097	48 89 bb 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rdi

; 201  : #ifdef WITH_THREAD
; 202  :         tstate->thread_id = PyThread_get_thread_ident();

  0009e	e8 00 00 00 00	 call	 PyThread_get_thread_ident

; 203  : #else
; 204  :         tstate->thread_id = 0;
; 205  : #endif
; 206  : 
; 207  :         tstate->dict = NULL;

  000a3	48 89 7b 78	 mov	 QWORD PTR [rbx+120], rdi

; 208  : 
; 209  :         tstate->curexc_type = NULL;

  000a7	48 89 7b 48	 mov	 QWORD PTR [rbx+72], rdi

; 210  :         tstate->curexc_value = NULL;

  000ab	48 89 7b 50	 mov	 QWORD PTR [rbx+80], rdi

; 211  :         tstate->curexc_traceback = NULL;

  000af	48 89 7b 58	 mov	 QWORD PTR [rbx+88], rdi

; 212  : 
; 213  :         tstate->exc_type = NULL;

  000b3	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
  000b7	89 83 90 00 00
	00		 mov	 DWORD PTR [rbx+144], eax

; 214  :         tstate->exc_value = NULL;

  000bd	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi

; 215  :         tstate->exc_traceback = NULL;

  000c1	48 89 7b 70	 mov	 QWORD PTR [rbx+112], rdi

; 216  : 
; 217  :         tstate->c_profilefunc = NULL;

  000c5	48 89 7b 28	 mov	 QWORD PTR [rbx+40], rdi

; 218  :         tstate->c_tracefunc = NULL;

  000c9	48 89 7b 30	 mov	 QWORD PTR [rbx+48], rdi

; 219  :         tstate->c_profileobj = NULL;

  000cd	48 89 7b 38	 mov	 QWORD PTR [rbx+56], rdi

; 220  :         tstate->c_traceobj = NULL;

  000d1	48 89 7b 40	 mov	 QWORD PTR [rbx+64], rdi

; 221  : 
; 222  :         tstate->trash_delete_nesting = 0;

  000d5	89 bb 94 00 00
	00		 mov	 DWORD PTR [rbx+148], edi

; 223  :         tstate->trash_delete_later = NULL;

  000db	48 89 bb 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rdi

; 224  : 
; 225  :         if (init)

  000e2	85 ed		 test	 ebp, ebp
  000e4	74 08		 je	 SHORT $LN1@new_thread

; 226  :             _PyThreadState_Init(tstate);

  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	e8 00 00 00 00	 call	 _PyThreadState_Init
$LN1@new_thread:

; 227  : 
; 228  :         HEAD_LOCK();

  000ee	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  000f5	ba 01 00 00 00	 mov	 edx, 1
  000fa	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 229  :         tstate->next = interp->tstate_head;

  000ff	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]

; 230  :         interp->tstate_head = tstate;
; 231  :         HEAD_UNLOCK();

  00103	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  0010a	48 89 03	 mov	 QWORD PTR [rbx], rax
  0010d	48 89 5e 08	 mov	 QWORD PTR [rsi+8], rbx
  00111	e8 00 00 00 00	 call	 PyThread_release_lock

; 232  :     }
; 233  : 
; 234  :     return tstate;

  00116	48 8b c3	 mov	 rax, rbx
  00119	e9 48 ff ff ff	 jmp	 $LN9@new_thread
$LN8@new_thread:

; 235  : }

  0011e	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00123	48 8b c3	 mov	 rax, rbx
  00126	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0012b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0012f	5e		 pop	 rsi
  00130	c3		 ret	 0
new_threadstate ENDP
_TEXT	ENDS
PUBLIC	PyThreadState_New
; Function compile flags: /Ogtpy
;	COMDAT PyThreadState_New
_TEXT	SEGMENT
interp$ = 8
PyThreadState_New PROC					; COMDAT

; 240  :     return new_threadstate(interp, 1);

  00000	ba 01 00 00 00	 mov	 edx, 1

; 241  : }

  00005	e9 00 00 00 00	 jmp	 new_threadstate
PyThreadState_New ENDP
_TEXT	ENDS
PUBLIC	_PyThreadState_Prealloc
; Function compile flags: /Ogtpy
;	COMDAT _PyThreadState_Prealloc
_TEXT	SEGMENT
interp$ = 8
_PyThreadState_Prealloc PROC				; COMDAT

; 246  :     return new_threadstate(interp, 0);

  00000	33 d2		 xor	 edx, edx

; 247  : }

  00002	e9 00 00 00 00	 jmp	 new_threadstate
_PyThreadState_Prealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@FFMKDLNJ@Couldn?8t?5create?5thread?9state?5for@ ; `string'
PUBLIC	PyGILState_Ensure
EXTRN	PyEval_RestoreThread:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyGILState_Ensure DD imagerel $LN8
	DD	imagerel $LN8+130
	DD	imagerel $unwind$PyGILState_Ensure
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyGILState_Ensure DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0CM@FFMKDLNJ@Couldn?8t?5create?5thread?9state?5for@
CONST	SEGMENT
??_C@_0CM@FFMKDLNJ@Couldn?8t?5create?5thread?9state?5for@ DB 'Couldn''t c'
	DB	'reate thread-state for new thread', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT PyGILState_Ensure
_TEXT	SEGMENT
PyGILState_Ensure PROC					; COMDAT

; 739  : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 740  :     int current;
; 741  :     PyThreadState *tcur;
; 742  :     /* Note that we do not auto-init Python here - apart from
; 743  :        potential races with 2 threads auto-initializing, pep-311
; 744  :        spells out other issues.  Embedders are expected to have
; 745  :        called Py_Initialize() and usually PyEval_InitThreads().
; 746  :     */
; 747  :     assert(autoInterpreterState); /* Py_Initialize() hasn't been called! */
; 748  :     tcur = (PyThreadState *)PyThread_get_key_value(autoTLSkey);

  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  00015	e8 00 00 00 00	 call	 PyThread_get_key_value

; 749  :     if (tcur == NULL) {

  0001a	33 ff		 xor	 edi, edi
  0001c	48 8b d8	 mov	 rbx, rax
  0001f	48 85 c0	 test	 rax, rax
  00022	75 2a		 jne	 SHORT $LN4@PyGILState@6

; 750  :         /* Create a new thread state for this thread */
; 751  :         tcur = PyThreadState_New(autoInterpreterState);

  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR autoInterpreterState
  0002b	e8 00 00 00 00	 call	 PyThreadState_New
  00030	48 8b d8	 mov	 rbx, rax

; 752  :         if (tcur == NULL)

  00033	48 85 c0	 test	 rax, rax
  00036	75 0c		 jne	 SHORT $LN3@PyGILState@6

; 753  :             Py_FatalError("Couldn't create thread-state for new thread");

  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@FFMKDLNJ@Couldn?8t?5create?5thread?9state?5for@
  0003f	e8 00 00 00 00	 call	 Py_FatalError
$LN3@PyGILState@6:

; 754  :         /* This is our thread state!  We'll need to delete it in the
; 755  :            matching call to PyGILState_Release(). */
; 756  :         tcur->gilstate_counter = 0;

  00044	89 bb 84 00 00
	00		 mov	 DWORD PTR [rbx+132], edi

; 757  :         current = 0; /* new thread state is never current */

  0004a	8b f7		 mov	 esi, edi

; 758  :     }
; 759  :     else

  0004c	eb 0e		 jmp	 SHORT $LN7@PyGILState@6
$LN4@PyGILState@6:

; 760  :         current = PyThreadState_IsCurrent(tcur);

  0004e	48 8b c8	 mov	 rcx, rax
  00051	e8 00 00 00 00	 call	 PyThreadState_IsCurrent
  00056	8b f0		 mov	 esi, eax

; 761  :     if (current == 0)

  00058	85 c0		 test	 eax, eax
  0005a	75 08		 jne	 SHORT $LN1@PyGILState@6
$LN7@PyGILState@6:

; 762  :         PyEval_RestoreThread(tcur);

  0005c	48 8b cb	 mov	 rcx, rbx
  0005f	e8 00 00 00 00	 call	 PyEval_RestoreThread
$LN1@PyGILState@6:

; 763  :     /* Update our counter in the thread-state - no need for locks:
; 764  :        - tcur will remain valid as we hold the GIL.
; 765  :        - the counter is safe as we are the only thread "allowed"
; 766  :          to modify this value
; 767  :     */
; 768  :     ++tcur->gilstate_counter;

  00064	ff 83 84 00 00
	00		 inc	 DWORD PTR [rbx+132]

; 769  :     return current ? PyGILState_LOCKED : PyGILState_UNLOCKED;
; 770  : }

  0006a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006f	85 f6		 test	 esi, esi
  00071	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00076	40 0f 94 c7	 sete	 dil
  0007a	8b c7		 mov	 eax, edi
  0007c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00080	5f		 pop	 rdi
  00081	c3		 ret	 0
PyGILState_Ensure ENDP
_TEXT	ENDS
END
