!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABS	marshal.c	14;"	d	file:
ABSOLUTE_JUMP	peephole.c	16;"	d	file:
ADDOP	compile.c	1169;"	d	file:
ADDOP_I	compile.c	1191;"	d	file:
ADDOP_IN_SCOPE	compile.c	1174;"	d	file:
ADDOP_JABS	compile.c	1196;"	d	file:
ADDOP_JREL	compile.c	1201;"	d	file:
ADDOP_NAME	compile.c	1186;"	d	file:
ADDOP_O	compile.c	1181;"	d	file:
ADD_TO_ALL	bltinmodule.c	2428;"	d	file:
ADD_TO_ALL	bltinmodule.c	2477;"	d	file:
ALIGNMENT	pyarena.c	14;"	d	file:
AST_object	Python-ast.c	/^} AST_object;$/;"	t	typeref:struct:__anon15	file:
AST_type	Python-ast.c	/^static PyTypeObject AST_type = {$/;"	v	file:
AST_type	Python-ast.c	/^static PyTypeObject AST_type;$/;"	v	file:
AcceptEx	pyparallel_private.h	1261;"	d
Add_singleton	Python-ast.c	/^static PyObject *Add_singleton, *Sub_singleton, *Mult_singleton,$/;"	v	file:
Add_type	Python-ast.c	/^static PyTypeObject *Add_type;$/;"	v	file:
AllocNonRecursiveMutex	thread_nt.h	/^AllocNonRecursiveMutex()$/;"	f
And_singleton	Python-ast.c	/^static PyObject *And_singleton, *Or_singleton;$/;"	v	file:
And_type	Python-ast.c	/^static PyTypeObject *And_type;$/;"	v	file:
AnnotateBarrierDestroy	dynamic_annotations.c	/^void AnnotateBarrierDestroy(const char *file, int line,$/;"	f
AnnotateBarrierInit	dynamic_annotations.c	/^void AnnotateBarrierInit(const char *file, int line,$/;"	f
AnnotateBarrierWaitAfter	dynamic_annotations.c	/^void AnnotateBarrierWaitAfter(const char *file, int line,$/;"	f
AnnotateBarrierWaitBefore	dynamic_annotations.c	/^void AnnotateBarrierWaitBefore(const char *file, int line,$/;"	f
AnnotateBenignRace	dynamic_annotations.c	/^void AnnotateBenignRace(const char *file, int line,$/;"	f
AnnotateBenignRaceSized	dynamic_annotations.c	/^void AnnotateBenignRaceSized(const char *file, int line,$/;"	f
AnnotateCondVarSignal	dynamic_annotations.c	/^void AnnotateCondVarSignal(const char *file, int line,$/;"	f
AnnotateCondVarSignalAll	dynamic_annotations.c	/^void AnnotateCondVarSignalAll(const char *file, int line,$/;"	f
AnnotateCondVarWait	dynamic_annotations.c	/^void AnnotateCondVarWait(const char *file, int line,$/;"	f
AnnotateEnableRaceDetection	dynamic_annotations.c	/^void AnnotateEnableRaceDetection(const char *file, int line, int enable){}$/;"	f
AnnotateExpectRace	dynamic_annotations.c	/^void AnnotateExpectRace(const char *file, int line,$/;"	f
AnnotateFlushState	dynamic_annotations.c	/^void AnnotateFlushState(const char *file, int line){}$/;"	f
AnnotateIgnoreReadsBegin	dynamic_annotations.c	/^void AnnotateIgnoreReadsBegin(const char *file, int line){}$/;"	f
AnnotateIgnoreReadsEnd	dynamic_annotations.c	/^void AnnotateIgnoreReadsEnd(const char *file, int line){}$/;"	f
AnnotateIgnoreSyncBegin	dynamic_annotations.c	/^void AnnotateIgnoreSyncBegin(const char *file, int line){}$/;"	f
AnnotateIgnoreSyncEnd	dynamic_annotations.c	/^void AnnotateIgnoreSyncEnd(const char *file, int line){}$/;"	f
AnnotateIgnoreWritesBegin	dynamic_annotations.c	/^void AnnotateIgnoreWritesBegin(const char *file, int line){}$/;"	f
AnnotateIgnoreWritesEnd	dynamic_annotations.c	/^void AnnotateIgnoreWritesEnd(const char *file, int line){}$/;"	f
AnnotateMutexIsUsedAsCondVar	dynamic_annotations.c	/^void AnnotateMutexIsUsedAsCondVar(const char *file, int line,$/;"	f
AnnotateNewMemory	dynamic_annotations.c	/^void AnnotateNewMemory(const char *file, int line,$/;"	f
AnnotateNoOp	dynamic_annotations.c	/^void AnnotateNoOp(const char *file, int line,$/;"	f
AnnotatePCQCreate	dynamic_annotations.c	/^void AnnotatePCQCreate(const char *file, int line,$/;"	f
AnnotatePCQDestroy	dynamic_annotations.c	/^void AnnotatePCQDestroy(const char *file, int line,$/;"	f
AnnotatePCQGet	dynamic_annotations.c	/^void AnnotatePCQGet(const char *file, int line,$/;"	f
AnnotatePCQPut	dynamic_annotations.c	/^void AnnotatePCQPut(const char *file, int line,$/;"	f
AnnotatePublishMemoryRange	dynamic_annotations.c	/^void AnnotatePublishMemoryRange(const char *file, int line,$/;"	f
AnnotateRWLockAcquired	dynamic_annotations.c	/^void AnnotateRWLockAcquired(const char *file, int line,$/;"	f
AnnotateRWLockCreate	dynamic_annotations.c	/^void AnnotateRWLockCreate(const char *file, int line,$/;"	f
AnnotateRWLockDestroy	dynamic_annotations.c	/^void AnnotateRWLockDestroy(const char *file, int line,$/;"	f
AnnotateRWLockReleased	dynamic_annotations.c	/^void AnnotateRWLockReleased(const char *file, int line,$/;"	f
AnnotateThreadName	dynamic_annotations.c	/^void AnnotateThreadName(const char *file, int line,$/;"	f
AnnotateTraceMemory	dynamic_annotations.c	/^void AnnotateTraceMemory(const char *file, int line,$/;"	f
AnnotateUnpublishMemoryRange	dynamic_annotations.c	/^void AnnotateUnpublishMemoryRange(const char *file, int line,$/;"	f
Assert	Python-ast.c	/^Assert(expr_ty test, expr_ty msg, int lineno, int col_offset, PyArena *arena)$/;"	f
Assert_fields	Python-ast.c	/^static char *Assert_fields[]={$/;"	v	file:
Assert_type	Python-ast.c	/^static PyTypeObject *Assert_type;$/;"	v	file:
Assign	Python-ast.c	/^Assign(asdl_seq * targets, expr_ty value, int lineno, int col_offset, PyArena$/;"	f
Assign_fields	Python-ast.c	/^static char *Assign_fields[]={$/;"	v	file:
Assign_type	Python-ast.c	/^static PyTypeObject *Assign_type;$/;"	v	file:
Attribute	Python-ast.c	/^Attribute(expr_ty value, identifier attr, expr_context_ty ctx, int lineno, int$/;"	f
Attribute_fields	Python-ast.c	/^static char *Attribute_fields[]={$/;"	v	file:
Attribute_type	Python-ast.c	/^static PyTypeObject *Attribute_type;$/;"	v	file:
AugAssign	Python-ast.c	/^AugAssign(expr_ty target, operator_ty op, expr_ty value, int lineno, int$/;"	f
AugAssign_fields	Python-ast.c	/^static char *AugAssign_fields[]={$/;"	v	file:
AugAssign_type	Python-ast.c	/^static PyTypeObject *AugAssign_type;$/;"	v	file:
AugLoad_singleton	Python-ast.c	/^*AugLoad_singleton, *AugStore_singleton, *Param_singleton;$/;"	v	file:
AugLoad_type	Python-ast.c	/^static PyTypeObject *AugLoad_type;$/;"	v	file:
AugStore_singleton	Python-ast.c	/^*AugLoad_singleton, *AugStore_singleton, *Param_singleton;$/;"	v	file:
AugStore_type	Python-ast.c	/^static PyTypeObject *AugStore_type;$/;"	v	file:
B2S	pyparallel_private.h	221;"	d
BADEXIT	dup2.c	17;"	d	file:
BASIC_POP	ceval.c	1102;"	d	file:
BASIC_PUSH	ceval.c	1101;"	d	file:
BASIC_STACKADJ	ceval.c	1100;"	d	file:
BCinfo	dtoa.c	/^BCinfo {$/;"	s	file:
BCinfo	dtoa.c	/^typedef struct BCinfo BCinfo;$/;"	t	typeref:struct:BCinfo	file:
BUFFER_LEN	getargs.c	1252;"	d	file:
BUFFER_LEN	getargs.c	568;"	d	file:
BYTE	pythonrun.c	33;"	d	file:
Balloc	dtoa.c	/^Balloc(int k)$/;"	f	file:
Bcopy	dtoa.c	449;"	d	file:
Bfree	dtoa.c	/^Bfree(Bigint *v)$/;"	f	file:
Bias	dtoa.c	252;"	d	file:
Big0	dtoa.c	282;"	d	file:
Big1	dtoa.c	283;"	d	file:
Bigint	dtoa.c	/^Bigint {$/;"	s	file:
Bigint	dtoa.c	/^typedef struct Bigint Bigint;$/;"	t	typeref:struct:Bigint	file:
BinOp	Python-ast.c	/^BinOp(expr_ty left, operator_ty op, expr_ty right, int lineno, int col_offset,$/;"	f
BinOp_fields	Python-ast.c	/^static char *BinOp_fields[]={$/;"	v	file:
BinOp_type	Python-ast.c	/^static PyTypeObject *BinOp_type;$/;"	v	file:
BitAnd_singleton	Python-ast.c	/^*RShift_singleton, *BitOr_singleton, *BitXor_singleton, *BitAnd_singleton,$/;"	v	file:
BitAnd_type	Python-ast.c	/^static PyTypeObject *BitAnd_type;$/;"	v	file:
BitOr_singleton	Python-ast.c	/^*RShift_singleton, *BitOr_singleton, *BitXor_singleton, *BitAnd_singleton,$/;"	v	file:
BitOr_type	Python-ast.c	/^static PyTypeObject *BitOr_type;$/;"	v	file:
BitXor_singleton	Python-ast.c	/^*RShift_singleton, *BitOr_singleton, *BitXor_singleton, *BitAnd_singleton,$/;"	v	file:
BitXor_type	Python-ast.c	/^static PyTypeObject *BitXor_type;$/;"	v	file:
Bletch	dtoa.c	262;"	d	file:
Bndry_mask	dtoa.c	263;"	d	file:
Bndry_mask1	dtoa.c	264;"	d	file:
BoolOp	Python-ast.c	/^BoolOp(boolop_ty op, asdl_seq * values, int lineno, int col_offset, PyArena$/;"	f
BoolOp_fields	Python-ast.c	/^static char *BoolOp_fields[]={$/;"	v	file:
BoolOp_type	Python-ast.c	/^static PyTypeObject *BoolOp_type;$/;"	v	file:
Break	Python-ast.c	/^Break(int lineno, int col_offset, PyArena *arena)$/;"	f
Break_type	Python-ast.c	/^static PyTypeObject *Break_type;$/;"	v	file:
Bug	dtoa.c	175;"	d	file:
Bytes	Python-ast.c	/^Bytes(bytes s, int lineno, int col_offset, PyArena *arena)$/;"	f
Bytes_fields	Python-ast.c	/^static char *Bytes_fields[]={$/;"	v	file:
Bytes_type	Python-ast.c	/^static PyTypeObject *Bytes_type;$/;"	v	file:
CACHEDIR	import.c	30;"	d	file:
CACHE_LINE_SIZE	parallelmodule.c	160;"	d	file:
CALL_FLAG_KW	ceval.c	124;"	d	file:
CALL_FLAG_VAR	ceval.c	123;"	d	file:
CANNOT_CATCH_MSG	ceval.c	4488;"	d	file:
CHECKEXC	ceval.c	105;"	d	file:
CHECK_STATUS	thread_pth.h	31;"	d
CHECK_STATUS	thread_pthread.h	145;"	d
CODESIZE	peephole.c	22;"	d	file:
COMP	ast.c	212;"	d	file:
COMP	ast.c	219;"	d	file:
COMPILER	getcompiler.c	17;"	d	file:
COMPILER	getcompiler.c	19;"	d	file:
COMPILER	getcompiler.c	9;"	d	file:
COMPILER_CAPSULE_NAME_COMPILER_UNIT	compile.c	208;"	d	file:
COMPILER_SCOPE_CLASS	compile.c	/^    COMPILER_SCOPE_CLASS,$/;"	e	enum:__anon6	file:
COMPILER_SCOPE_COMPREHENSION	compile.c	/^    COMPILER_SCOPE_COMPREHENSION,$/;"	e	enum:__anon6	file:
COMPILER_SCOPE_FUNCTION	compile.c	/^    COMPILER_SCOPE_FUNCTION,$/;"	e	enum:__anon6	file:
COMPILER_SCOPE_MODULE	compile.c	/^    COMPILER_SCOPE_MODULE,$/;"	e	enum:__anon6	file:
COMPILER_STACK_FRAME_SCALE	symtable.c	233;"	d	file:
COMPUTE_EVAL_BREAKER	ceval.c	233;"	d	file:
COMP_DICTCOMP	compile.c	43;"	d	file:
COMP_GENEXP	ast.c	523;"	d	file:
COMP_GENEXP	compile.c	40;"	d	file:
COMP_LISTCOMP	ast.c	524;"	d	file:
COMP_LISTCOMP	compile.c	41;"	d	file:
COMP_SETCOMP	ast.c	525;"	d	file:
COMP_SETCOMP	compile.c	42;"	d	file:
CONDITIONAL_JUMP	peephole.c	14;"	d	file:
COND_FINI	ceval_gil.h	85;"	d
COND_INIT	ceval_gil.h	82;"	d
COND_SIGNAL	ceval_gil.h	88;"	d
COND_T	ceval_gil.h	81;"	d
COND_TIMED_WAIT	ceval_gil.h	94;"	d
COND_WAIT	ceval_gil.h	91;"	d
CONST_STACK_CREATE	peephole.c	27;"	d	file:
CONST_STACK_DELETE	peephole.c	37;"	d	file:
CONST_STACK_LASTN	peephole.c	72;"	d	file:
CONST_STACK_LEN	peephole.c	44;"	d	file:
CONST_STACK_OP_LASTN	peephole.c	80;"	d	file:
CONST_STACK_POP	peephole.c	75;"	d	file:
CONST_STACK_PUSH_OP	peephole.c	46;"	d	file:
CONST_STACK_RESET	peephole.c	65;"	d	file:
CONST_STACK_TOP	peephole.c	69;"	d	file:
CONV_UNICODE	getargs.c	524;"	d	file:
CRYPTACQUIRECONTEXTA	random.c	/^typedef BOOL (WINAPI *CRYPTACQUIRECONTEXTA)(HCRYPTPROV *phProv,\\$/;"	t	file:
CRYPTGENRANDOM	random.c	/^typedef BOOL (WINAPI *CRYPTGENRANDOM)(HCRYPTPROV hProv, DWORD dwLen,\\$/;"	t	file:
CS_SOCK_SPINCOUNT	pyparallel.c	22;"	d	file:
C_TRACE	ceval.c	4060;"	d	file:
Call	Python-ast.c	/^Call(expr_ty func, asdl_seq * args, asdl_seq * keywords, expr_ty starargs,$/;"	f
Call_fields	Python-ast.c	/^static char *Call_fields[]={$/;"	v	file:
Call_type	Python-ast.c	/^static PyTypeObject *Call_type;$/;"	v	file:
Callback	pyparallel_private.h	/^typedef struct _PyParallelCallback PyParallelCallback, Callback;$/;"	t	typeref:struct:
ClassDef	Python-ast.c	/^ClassDef(identifier name, asdl_seq * bases, asdl_seq * keywords, expr_ty$/;"	f
ClassDef_fields	Python-ast.c	/^static char *ClassDef_fields[]={$/;"	v	file:
ClassDef_type	Python-ast.c	/^static PyTypeObject *ClassDef_type;$/;"	v	file:
Compare	Python-ast.c	/^Compare(expr_ty left, asdl_int_seq * ops, asdl_seq * comparators, int lineno,$/;"	f
Compare_fields	Python-ast.c	/^static char *Compare_fields[]={$/;"	v	file:
Compare_type	Python-ast.c	/^static PyTypeObject *Compare_type;$/;"	v	file:
ConnectEx	pyparallel_private.h	1262;"	d
Context	pyparallel_private.h	/^typedef struct _PyParallelContext PyParallelContext, WorkContext, Context;$/;"	t	typeref:struct:
Context	pyparallel_private.h	/^} PyParallelContext, Context;$/;"	t	typeref:struct:_PyParallelContext
Continue	Python-ast.c	/^Continue(int lineno, int col_offset, PyArena *arena)$/;"	f
Continue_type	Python-ast.c	/^static PyTypeObject *Continue_type;$/;"	v	file:
DEBUG	dtoa.c	167;"	d	file:
DEBUG	dtoa.c	169;"	d	file:
DEFAULT_BLOCKS	compile.c	36;"	d	file:
DEFAULT_BLOCK_SIZE	compile.c	35;"	d	file:
DEFAULT_BLOCK_SIZE	pyarena.c	13;"	d	file:
DEFAULT_CODE_SIZE	compile.c	37;"	d	file:
DEFAULT_INTERVAL	ceval_gil.h	12;"	d
DEFAULT_LNOTAB_SIZE	compile.c	38;"	d	file:
DISPATCH	ceval.c	949;"	d	file:
DUPLICATE_ARGUMENT	symtable.c	196;"	d	file:
DWORD_AT	dynload_win.c	66;"	d	file:
Del_singleton	Python-ast.c	/^static PyObject *Load_singleton, *Store_singleton, *Del_singleton,$/;"	v	file:
Del_type	Python-ast.c	/^static PyTypeObject *Del_type;$/;"	v	file:
Delete	Python-ast.c	/^Delete(asdl_seq * targets, int lineno, int col_offset, PyArena *arena)$/;"	f
Delete_fields	Python-ast.c	/^static char *Delete_fields[]={$/;"	v	file:
Delete_type	Python-ast.c	/^static PyTypeObject *Delete_type;$/;"	v	file:
Dict	Python-ast.c	/^Dict(asdl_seq * keys, asdl_seq * values, int lineno, int col_offset, PyArena$/;"	f
DictComp	Python-ast.c	/^DictComp(expr_ty key, expr_ty value, asdl_seq * generators, int lineno, int$/;"	f
DictComp_fields	Python-ast.c	/^static char *DictComp_fields[]={$/;"	v	file:
DictComp_type	Python-ast.c	/^static PyTypeObject *DictComp_type;$/;"	v	file:
Dict_fields	Python-ast.c	/^static char *Dict_fields[]={$/;"	v	file:
Dict_type	Python-ast.c	/^static PyTypeObject *Dict_type;$/;"	v	file:
DisconnectEx	pyparallel_private.h	1265;"	d
Div_singleton	Python-ast.c	/^*Div_singleton, *Mod_singleton, *Pow_singleton, *LShift_singleton,$/;"	v	file:
Div_type	Python-ast.c	/^static PyTypeObject *Div_type;$/;"	v	file:
E2I	pxlist.c	22;"	d	file:
EMPTY	ceval.c	1089;"	d	file:
ENTERED_CALLBACK	pyparallel_private.h	1308;"	d
ENTERED_IO_CALLBACK	pyparallel_private.h	1300;"	d
ERRBUF_APPEND	dynload_aix.c	129;"	d	file:
ERR_LATE_FUTURE	future.c	10;"	d	file:
EXCEPT	compile.c	/^enum fblocktype { LOOP, EXCEPT, FINALLY_TRY, FINALLY_END };$/;"	e	enum:fblocktype	file:
EXT_POP	ceval.c	1113;"	d	file:
Ebits	dtoa.c	258;"	d	file:
Ellipsis	Python-ast.c	/^Ellipsis(int lineno, int col_offset, PyArena *arena)$/;"	f
Ellipsis_type	Python-ast.c	/^static PyTypeObject *Ellipsis_type;$/;"	v	file:
Emax	dtoa.c	253;"	d	file:
Emin	dtoa.c	254;"	d	file:
EnterNonRecursiveMutex	thread_nt.h	/^EnterNonRecursiveMutex(PNRMUTEX mutex, DWORD milliseconds)$/;"	f
Eq_singleton	Python-ast.c	/^static PyObject *Eq_singleton, *NotEq_singleton, *Lt_singleton, *LtE_singleton,$/;"	v	file:
Eq_type	Python-ast.c	/^static PyTypeObject *Eq_type;$/;"	v	file:
Etiny	dtoa.c	255;"	d	file:
ExceptHandler	Python-ast.c	/^ExceptHandler(expr_ty type, identifier name, asdl_seq * body, int lineno, int$/;"	f
ExceptHandler_fields	Python-ast.c	/^static char *ExceptHandler_fields[]={$/;"	v	file:
ExceptHandler_type	Python-ast.c	/^static PyTypeObject *ExceptHandler_type;$/;"	v	file:
Exp_1	dtoa.c	256;"	d	file:
Exp_11	dtoa.c	257;"	d	file:
Exp_mask	dtoa.c	249;"	d	file:
Exp_msk1	dtoa.c	247;"	d	file:
Exp_msk11	dtoa.c	248;"	d	file:
Exp_shift	dtoa.c	245;"	d	file:
Exp_shift1	dtoa.c	246;"	d	file:
Expr	Python-ast.c	/^Expr(expr_ty value, int lineno, int col_offset, PyArena *arena)$/;"	f
Expr_fields	Python-ast.c	/^static char *Expr_fields[]={$/;"	v	file:
Expr_type	Python-ast.c	/^static PyTypeObject *Expr_type;$/;"	v	file:
Expression	Python-ast.c	/^Expression(expr_ty body, PyArena *arena)$/;"	f
Expression_fields	Python-ast.c	/^static char *Expression_fields[]={$/;"	v	file:
Expression_type	Python-ast.c	/^static PyTypeObject *Expression_type;$/;"	v	file:
ExtSlice	Python-ast.c	/^ExtSlice(asdl_seq * dims, PyArena *arena)$/;"	f
ExtSlice_fields	Python-ast.c	/^static char *ExtSlice_fields[]={$/;"	v	file:
ExtSlice_type	Python-ast.c	/^static PyTypeObject *ExtSlice_type;$/;"	v	file:
FAST_DISPATCH	ceval.c	958;"	d	file:
FETCH_SIZE	getargs.c	1250;"	d	file:
FETCH_SIZE	getargs.c	554;"	d	file:
FFFFFFFF	dtoa.c	303;"	d	file:
FINALLY_END	compile.c	/^enum fblocktype { LOOP, EXCEPT, FINALLY_TRY, FINALLY_END };$/;"	e	enum:fblocktype	file:
FINALLY_TRY	compile.c	/^enum fblocktype { LOOP, EXCEPT, FINALLY_TRY, FINALLY_END };$/;"	e	enum:fblocktype	file:
FLAG_COMPAT	getargs.c	33;"	d	file:
FLAG_SIZE_T	getargs.c	34;"	d	file:
FLAG_SIZE_T	modsupport.c	6;"	d	file:
FLOAT_FORMATBUFLEN	pystrtod.c	621;"	d	file:
FORBIDDEN	ast.c	/^static const char* FORBIDDEN[] = {$/;"	v	file:
FORCE_SWITCHING	ceval_gil.h	17;"	d
FORCE_SWITCHING	ceval_gil.h	18;"	d
FOURTH	ceval.c	1093;"	d	file:
FREE	dtoa.c	126;"	d	file:
FUNCNAME_PATTERN	dynload_hpux.c	11;"	d	file:
FUNCNAME_PATTERN	dynload_hpux.c	13;"	d	file:
FlagsType	sysmodule.c	/^static PyTypeObject FlagsType;$/;"	v	file:
FloorDiv_singleton	Python-ast.c	/^*FloorDiv_singleton;$/;"	v	file:
FloorDiv_type	Python-ast.c	/^static PyTypeObject *FloorDiv_type;$/;"	v	file:
Flt_Rounds	dtoa.c	274;"	d	file:
Flt_Rounds	dtoa.c	276;"	d	file:
For	Python-ast.c	/^For(expr_ty target, expr_ty iter, asdl_seq * body, asdl_seq * orelse, int$/;"	f
For_fields	Python-ast.c	/^static char *For_fields[]={$/;"	v	file:
For_type	Python-ast.c	/^static PyTypeObject *For_type;$/;"	v	file:
Frac_mask	dtoa.c	259;"	d	file:
Frac_mask1	dtoa.c	260;"	d	file:
FreeNonRecursiveMutex	thread_nt.h	/^FreeNonRecursiveMutex(PNRMUTEX mutex)$/;"	f
FunctionDef	Python-ast.c	/^FunctionDef(identifier name, arguments_ty args, asdl_seq * body, asdl_seq *$/;"	f
FunctionDef_fields	Python-ast.c	/^static char *FunctionDef_fields[]={$/;"	v	file:
FunctionDef_type	Python-ast.c	/^static PyTypeObject *FunctionDef_type;$/;"	v	file:
GETARG	peephole.c	12;"	d	file:
GETITEM	ceval.c	992;"	d	file:
GETJUMPTGT	peephole.c	20;"	d	file:
GETLOCAL	ceval.c	1125;"	d	file:
GETTIMEOFDAY	thread_pthread.h	105;"	d
GETTIMEOFDAY	thread_pthread.h	107;"	d
GET_IDENTIFIER	symtable.c	193;"	d	file:
GIL_REQUEST	ceval.c	225;"	d	file:
GIL_REQUEST	ceval.c	227;"	d	file:
GLOBAL_AFTER_ASSIGN	symtable.c	8;"	d	file:
GLOBAL_AFTER_USE	symtable.c	14;"	d	file:
GLOBAL_NAME_ERROR_MSG	ceval.c	149;"	d	file:
GeneratorExp	Python-ast.c	/^GeneratorExp(expr_ty elt, asdl_seq * generators, int lineno, int col_offset,$/;"	f
GeneratorExp_fields	Python-ast.c	/^static char *GeneratorExp_fields[]={$/;"	v	file:
GeneratorExp_type	Python-ast.c	/^static PyTypeObject *GeneratorExp_type;$/;"	v	file:
GetAcceptExSockaddrs	pyparallel_private.h	1268;"	d
GetPythonImport	dynload_win.c	/^static char *GetPythonImport (HINSTANCE hModule)$/;"	f	file:
GetRunningOnValgrind	dynamic_annotations.c	/^static int GetRunningOnValgrind(void) {$/;"	f	file:
Global	Python-ast.c	/^Global(asdl_seq * names, int lineno, int col_offset, PyArena *arena)$/;"	f
Global_fields	Python-ast.c	/^static char *Global_fields[]={$/;"	v	file:
Global_type	Python-ast.c	/^static PyTypeObject *Global_type;$/;"	v	file:
GtE_singleton	Python-ast.c	/^*Gt_singleton, *GtE_singleton, *Is_singleton, *IsNot_singleton, *In_singleton,$/;"	v	file:
GtE_type	Python-ast.c	/^static PyTypeObject *GtE_type;$/;"	v	file:
Gt_singleton	Python-ast.c	/^*Gt_singleton, *GtE_singleton, *Is_singleton, *IsNot_singleton, *In_singleton,$/;"	v	file:
Gt_type	Python-ast.c	/^static PyTypeObject *Gt_type;$/;"	v	file:
HASH_DEBUG	pyparallel_private.h	412;"	d
HAVE_BROKEN_POSIX_SEMAPHORES	thread_pthread.h	52;"	d
HAVE_FTIME	pytime.c	13;"	d	file:
HEAD_INIT	pystate.c	32;"	d	file:
HEAD_INIT	pystate.c	42;"	d	file:
HEAD_LOCK	pystate.c	33;"	d	file:
HEAD_LOCK	pystate.c	43;"	d	file:
HEAD_UNLOCK	pystate.c	34;"	d	file:
HEAD_UNLOCK	pystate.c	44;"	d	file:
Hash_InfoType	sysmodule.c	/^static PyTypeObject Hash_InfoType;$/;"	v	file:
Heap	pyparallel_private.h	/^typedef struct _PyParallelHeap PyParallelHeap, Heap;$/;"	t	typeref:struct:
Heap	pyparallel_private.h	/^} PyParallelHeap, Heap;$/;"	t	typeref:struct:_PyParallelHeap
Heap_Init	pyparallel.c	/^Heap_Init(Context *c, size_t n, int page_size)$/;"	f
I2E	pxlist.c	15;"	d	file:
I2E	pxlist.c	23;"	d	file:
I2E	pxlist.c	9;"	d	file:
I2S	pyparallel_private.h	1069;"	d
IEEE_8087	dtoa.c	132;"	d	file:
IEEE_MC68k	dtoa.c	136;"	d	file:
IMPORT_STAR_WARNING	symtable.c	20;"	d	file:
INCL_DOSERRORS	dynload_os2.c	4;"	d	file:
INCL_DOSMODULEMGR	dynload_os2.c	5;"	d	file:
INCL_DOSPROCESS	thread_os2.h	3;"	d
INCL_DOSSEMAPHORES	thread_os2.h	4;"	d
INSTR_OFFSET	ceval.c	1039;"	d	file:
INTERVAL	ceval_gil.h	14;"	d
INVALID_INITIAL_BYTES	pyparallel.c	8020;"	d	file:
IOContext	pyparallel_private.h	/^typedef struct _PyParallelIOContext PyParallelIOContext, IOContext;$/;"	t	typeref:struct:
IOContext	pyparallel_private.h	/^} PyParallelIOContext, IOContext;$/;"	t	typeref:struct:_PyParallelIOContext
IOStats	pyparallel_private.h	/^typedef struct _PyParallelIOContextStats PyParallelIOContextStats, IOStats;$/;"	t	typeref:struct:
ISBASICBLOCK	peephole.c	23;"	d	file:
IS_END_OF_FORMAT	getargs.c	1411;"	d	file:
IS_SBUF	pyparallel_private.h	936;"	d
If	Python-ast.c	/^If(expr_ty test, asdl_seq * body, asdl_seq * orelse, int lineno, int$/;"	f
IfExp	Python-ast.c	/^IfExp(expr_ty test, expr_ty body, expr_ty orelse, int lineno, int col_offset,$/;"	f
IfExp_fields	Python-ast.c	/^static char *IfExp_fields[]={$/;"	v	file:
IfExp_type	Python-ast.c	/^static PyTypeObject *IfExp_type;$/;"	v	file:
If_fields	Python-ast.c	/^static char *If_fields[]={$/;"	v	file:
If_type	Python-ast.c	/^static PyTypeObject *If_type;$/;"	v	file:
Import	Python-ast.c	/^Import(asdl_seq * names, int lineno, int col_offset, PyArena *arena)$/;"	f
ImportFrom	Python-ast.c	/^ImportFrom(identifier module, asdl_seq * names, int level, int lineno, int$/;"	f
ImportFrom_fields	Python-ast.c	/^static char *ImportFrom_fields[]={$/;"	v	file:
ImportFrom_type	Python-ast.c	/^static PyTypeObject *ImportFrom_type;$/;"	v	file:
Import_fields	Python-ast.c	/^static char *Import_fields[]={$/;"	v	file:
Import_type	Python-ast.c	/^static PyTypeObject *Import_type;$/;"	v	file:
In_singleton	Python-ast.c	/^*Gt_singleton, *GtE_singleton, *Is_singleton, *IsNot_singleton, *In_singleton,$/;"	v	file:
In_type	Python-ast.c	/^static PyTypeObject *In_type;$/;"	v	file:
Index	Python-ast.c	/^Index(expr_ty value, PyArena *arena)$/;"	f
Index_fields	Python-ast.c	/^static char *Index_fields[]={$/;"	v	file:
Index_type	Python-ast.c	/^static PyTypeObject *Index_type;$/;"	v	file:
Int_max	dtoa.c	270;"	d	file:
Interactive	Python-ast.c	/^Interactive(asdl_seq * body, PyArena *arena)$/;"	f
Interactive_fields	Python-ast.c	/^static char *Interactive_fields[]={$/;"	v	file:
Interactive_type	Python-ast.c	/^static PyTypeObject *Interactive_type;$/;"	v	file:
InternalFormatSpec	formatter_unicode.c	/^} InternalFormatSpec;$/;"	t	typeref:struct:__anon9	file:
Invert_singleton	Python-ast.c	/^static PyObject *Invert_singleton, *Not_singleton, *UAdd_singleton,$/;"	v	file:
Invert_type	Python-ast.c	/^static PyTypeObject *Invert_type;$/;"	v	file:
IsNot_singleton	Python-ast.c	/^*Gt_singleton, *GtE_singleton, *Is_singleton, *IsNot_singleton, *In_singleton,$/;"	v	file:
IsNot_type	Python-ast.c	/^static PyTypeObject *IsNot_type;$/;"	v	file:
Is_singleton	Python-ast.c	/^*Gt_singleton, *GtE_singleton, *Is_singleton, *IsNot_singleton, *In_singleton,$/;"	v	file:
Is_type	Python-ast.c	/^static PyTypeObject *Is_type;$/;"	v	file:
JUMPBY	ceval.c	1044;"	d	file:
JUMPS_ON_TRUE	peephole.c	19;"	d	file:
JUMPTO	ceval.c	1043;"	d	file:
Kmax	dtoa.c	305;"	d	file:
L	dtoa.c	/^typedef union { double d; ULong L[2]; } U;$/;"	m	union:__anon7	file:
LEAD_UNDERSCORE	dynload_shlib.c	28;"	d	file:
LEAD_UNDERSCORE	dynload_shlib.c	30;"	d	file:
LINKOPTIONS	dynload_next.c	25;"	d	file:
LINKOPTIONS	dynload_next.c	27;"	d	file:
LLTRACE	ceval.c	104;"	d	file:
LOOP	compile.c	/^enum fblocktype { LOOP, EXCEPT, FINALLY_TRY, FINALLY_END };$/;"	e	enum:fblocktype	file:
LShift_singleton	Python-ast.c	/^*Div_singleton, *Mod_singleton, *Pow_singleton, *LShift_singleton,$/;"	v	file:
LShift_type	Python-ast.c	/^static PyTypeObject *LShift_type;$/;"	v	file:
LT_CURRENT_LOCALE	formatter_unicode.c	348;"	d	file:
LT_DEFAULT_LOCALE	formatter_unicode.c	349;"	d	file:
LT_NO_LOCALE	formatter_unicode.c	350;"	d	file:
Lambda	Python-ast.c	/^Lambda(arguments_ty args, expr_ty body, int lineno, int col_offset, PyArena$/;"	f
Lambda_fields	Python-ast.c	/^static char *Lambda_fields[]={$/;"	v	file:
Lambda_type	Python-ast.c	/^static PyTypeObject *Lambda_type;$/;"	v	file:
LeaveNonRecursiveMutex	thread_nt.h	/^LeaveNonRecursiveMutex(PNRMUTEX mutex)$/;"	f
List	Python-ast.c	/^List(asdl_seq * elts, expr_context_ty ctx, int lineno, int col_offset, PyArena$/;"	f
ListComp	Python-ast.c	/^ListComp(expr_ty elt, asdl_seq * generators, int lineno, int col_offset,$/;"	f
ListComp_fields	Python-ast.c	/^static char *ListComp_fields[]={$/;"	v	file:
ListComp_type	Python-ast.c	/^static PyTypeObject *ListComp_type;$/;"	v	file:
List_fields	Python-ast.c	/^static char *List_fields[]={$/;"	v	file:
List_type	Python-ast.c	/^static PyTypeObject *List_type;$/;"	v	file:
Load_singleton	Python-ast.c	/^static PyObject *Load_singleton, *Store_singleton, *Del_singleton,$/;"	v	file:
Load_type	Python-ast.c	/^static PyTypeObject *Load_type;$/;"	v	file:
LocaleInfo	formatter_unicode.c	/^} LocaleInfo;$/;"	t	typeref:struct:__anon10	file:
Log2P	dtoa.c	266;"	d	file:
Long	dtoa.c	/^typedef PY_INT32_T Long;$/;"	t	file:
LtE_singleton	Python-ast.c	/^static PyObject *Eq_singleton, *NotEq_singleton, *Lt_singleton, *LtE_singleton,$/;"	v	file:
LtE_type	Python-ast.c	/^static PyTypeObject *LtE_type;$/;"	v	file:
Lt_singleton	Python-ast.c	/^static PyObject *Eq_singleton, *NotEq_singleton, *Lt_singleton, *LtE_singleton,$/;"	v	file:
Lt_type	Python-ast.c	/^static PyTypeObject *Lt_type;$/;"	v	file:
MAJOR	sysmodule.c	1490;"	d	file:
MAJOR	sysmodule.c	1497;"	d	file:
MALLOC	dtoa.c	125;"	d	file:
MAXPATHLEN	getcwd.c	18;"	d	file:
MAXPATHLEN	getcwd.c	20;"	d	file:
MAXSUFFIXSIZE	importdl.h	15;"	d
MAX_ABS_EXP	dtoa.c	207;"	d	file:
MAX_DIGITS	dtoa.c	215;"	d	file:
MAX_FRAME_DEPTH	traceback.c	18;"	d	file:
MAX_MARSHAL_STACK_DEPTH	marshal.c	22;"	d	file:
MAX_MARSHAL_STACK_DEPTH	marshal.c	24;"	d	file:
MAX_NTHREADS	traceback.c	19;"	d	file:
MAX_STRING_LENGTH	traceback.c	17;"	d	file:
MICROSECONDS_TO_TIMESPEC	thread_pthread.h	110;"	d
MINOR	sysmodule.c	1491;"	d	file:
MINOR	sysmodule.c	1498;"	d	file:
MIN_EXPONENT_DIGITS	pystrtod.c	412;"	d	file:
MODULE_NAME	_warnings.c	4;"	d	file:
MUTEX_FINI	ceval_gil.h	71;"	d
MUTEX_INIT	ceval_gil.h	68;"	d
MUTEX_LOCK	ceval_gil.h	74;"	d
MUTEX_T	ceval_gil.h	67;"	d
MUTEX_UNLOCK	ceval_gil.h	77;"	d
M___hello__	frozen.c	/^static unsigned char M___hello__[] = {$/;"	v	file:
Mod_singleton	Python-ast.c	/^*Div_singleton, *Mod_singleton, *Pow_singleton, *LShift_singleton,$/;"	v	file:
Mod_type	Python-ast.c	/^static PyTypeObject *Mod_type;$/;"	v	file:
Module	Python-ast.c	/^Module(asdl_seq * body, PyArena *arena)$/;"	f
Module	dynload_aix.c	/^typedef struct Module {$/;"	s	file:
Module	dynload_aix.c	/^} Module, *ModulePtr;$/;"	t	typeref:struct:Module	file:
ModulePtr	dynload_aix.c	/^} Module, *ModulePtr;$/;"	t	typeref:struct:Module	file:
Module_fields	Python-ast.c	/^static char *Module_fields[]={$/;"	v	file:
Module_type	Python-ast.c	/^static PyTypeObject *Module_type;$/;"	v	file:
Mult_singleton	Python-ast.c	/^static PyObject *Add_singleton, *Sub_singleton, *Mult_singleton,$/;"	v	file:
Mult_type	Python-ast.c	/^static PyTypeObject *Mult_type;$/;"	v	file:
NAME	sysmodule.c	1486;"	d	file:
NAME	sysmodule.c	1494;"	d	file:
NAME_ERROR_MSG	ceval.c	147;"	d	file:
NAN_WORD0	dtoa.c	287;"	d	file:
NAN_WORD1	dtoa.c	288;"	d	file:
NARGS	compile.c	951;"	d	file:
NARGS	compile.c	963;"	d	file:
NEW_BLOCK	compile.c	1159;"	d	file:
NEW_IDENTIFIER	ast.c	574;"	d	file:
NEXITFUNCS	pythonrun.c	2473;"	d	file:
NEXTARG	ceval.c	1041;"	d	file:
NEXTOP	ceval.c	1040;"	d	file:
NEXT_BLOCK	compile.c	1164;"	d	file:
NONLOCAL_AFTER_ASSIGN	symtable.c	11;"	d	file:
NONLOCAL_AFTER_USE	symtable.c	17;"	d	file:
NPENDINGCALLS	ceval.c	527;"	d	file:
NPENDINGCALLS	ceval.c	655;"	d	file:
NRMUTEX	thread_nt.h	/^} NRMUTEX;$/;"	t	typeref:struct:_NRMUTEX
Name	Python-ast.c	/^Name(identifier id, expr_context_ty ctx, int lineno, int col_offset, PyArena$/;"	f
Name_fields	Python-ast.c	/^static char *Name_fields[]={$/;"	v	file:
Name_type	Python-ast.c	/^static PyTypeObject *Name_type;$/;"	v	file:
Nbits	dtoa.c	251;"	d	file:
Nonlocal	Python-ast.c	/^Nonlocal(asdl_seq * names, int lineno, int col_offset, PyArena *arena)$/;"	f
Nonlocal_fields	Python-ast.c	/^static char *Nonlocal_fields[]={$/;"	v	file:
Nonlocal_type	Python-ast.c	/^static PyTypeObject *Nonlocal_type;$/;"	v	file:
NotEq_singleton	Python-ast.c	/^static PyObject *Eq_singleton, *NotEq_singleton, *Lt_singleton, *LtE_singleton,$/;"	v	file:
NotEq_type	Python-ast.c	/^static PyTypeObject *NotEq_type;$/;"	v	file:
NotIn_singleton	Python-ast.c	/^*NotIn_singleton;$/;"	v	file:
NotIn_type	Python-ast.c	/^static PyTypeObject *NotIn_type;$/;"	v	file:
Not_singleton	Python-ast.c	/^static PyObject *Invert_singleton, *Not_singleton, *UAdd_singleton,$/;"	v	file:
Not_type	Python-ast.c	/^static PyTypeObject *Not_type;$/;"	v	file:
Num	Python-ast.c	/^Num(object n, int lineno, int col_offset, PyArena *arena)$/;"	f
Num_fields	Python-ast.c	/^static char *Num_fields[]={$/;"	v	file:
Num_type	Python-ast.c	/^static PyTypeObject *Num_type;$/;"	v	file:
NumberFieldWidths	formatter_unicode.c	/^} NumberFieldWidths;$/;"	t	typeref:struct:__anon11	file:
O2E	pxlist.c	16;"	d	file:
O2E	pxlist.c	24;"	d	file:
OFF	symtable.c	108;"	d	file:
OFF	traceback.c	14;"	d	file:
OFS_E	pystrtod.c	881;"	d	file:
OFS_INF	pystrtod.c	879;"	d	file:
OFS_NAN	pystrtod.c	880;"	d	file:
OL2PxIO	pyparallel_private.h	452;"	d
OL2PxSocket	pyparallel_private.h	1239;"	d
OL2R	pyparallel_private.h	218;"	d
OL2S	pyparallel_private.h	192;"	d
OL2T	pyparallel_private.h	176;"	d
OS2_STACKSIZE	thread_os2.h	22;"	d
Object	pyparallel_private.h	/^typedef struct _Object Object;$/;"	t	typeref:struct:_Object
Object	pyparallel_private.h	/^} Object;$/;"	t	typeref:struct:_Object
Object_Init	pyparallel.c	/^Object_Init(PyObject *op, PyTypeObject *tp, Context *c)$/;"	f
Object_New	pyparallel.c	/^Object_New(PyTypeObject *tp, Context *c)$/;"	f
Objects	pyparallel_private.h	/^} Objects;$/;"	t	typeref:struct:_Objects
Or_singleton	Python-ast.c	/^static PyObject *And_singleton, *Or_singleton;$/;"	v	file:
Or_type	Python-ast.c	/^static PyTypeObject *Or_type;$/;"	v	file:
P	dtoa.c	250;"	d	file:
PARSER_FLAGS	pythonrun.c	/^static int PARSER_FLAGS(PyCompilerFlags *flags)$/;"	f	file:
PATH_MAX	pythonrun.c	35;"	d	file:
PCALL	ceval.c	202;"	d	file:
PCALL	ceval.c	213;"	d	file:
PCALL_ALL	ceval.c	172;"	d	file:
PCALL_BOUND_METHOD	ceval.c	177;"	d	file:
PCALL_CFUNCTION	ceval.c	178;"	d	file:
PCALL_FASTER_FUNCTION	ceval.c	175;"	d	file:
PCALL_FAST_FUNCTION	ceval.c	174;"	d	file:
PCALL_FUNCTION	ceval.c	173;"	d	file:
PCALL_GENERATOR	ceval.c	180;"	d	file:
PCALL_METHOD	ceval.c	176;"	d	file:
PCALL_NUM	ceval.c	169;"	d	file:
PCALL_OTHER	ceval.c	181;"	d	file:
PCALL_POP	ceval.c	182;"	d	file:
PCALL_TYPE	ceval.c	179;"	d	file:
PEEK	ceval.c	1094;"	d	file:
PEEKARG	ceval.c	1042;"	d	file:
PLATFORM	getplatform.c	5;"	d	file:
PNRMUTEX	thread_nt.h	/^typedef NRMUTEX *PNRMUTEX;$/;"	t
PNRMUTEX	thread_nt.h	115;"	d
POP	ceval.c	1108;"	d	file:
POSINF_WORD0	dtoa.c	292;"	d	file:
POSINF_WORD1	dtoa.c	293;"	d	file:
PREDICT	ceval.c	1074;"	d	file:
PREDICTED	ceval.c	1075;"	d	file:
PREDICTED_WITH_ARG	ceval.c	1076;"	d	file:
PREVENT_PARALLEL_IMPORT	ceval.c	2352;"	d	file:
PRINT_TOTAL_REFS	pythonrun.c	39;"	d	file:
PRINT_TOTAL_REFS	pythonrun.c	41;"	d	file:
PRIVATE_MEM	dtoa.c	179;"	d	file:
PRIVATE_mem	dtoa.c	181;"	d	file:
PTHREAD_SYSTEM_SCHED_SUPPORTED	thread_pthread.h	65;"	d
PUSH	ceval.c	1105;"	d	file:
PUTS	traceback.c	16;"	d	file:
PWD_CMD	getcwd.c	54;"	d	file:
PXCTX	parallelmodule.c	/^} PXCTX, ParallelContext;$/;"	t	typeref:struct:_ParallelContext	file:
PXCTX2	parallelmodule.c	/^} PXCTX2;$/;"	t	typeref:struct:ParallelContext2	file:
PXCTX3	parallelmodule.c	/^} PXCTX3;$/;"	t	typeref:struct:ParallelContext3	file:
PXCTX4	parallelmodule.c	/^} PXCTX4;$/;"	t	typeref:struct:ParallelContext4	file:
PXS2S	pyparallel_private.h	1277;"	d
PXSTATE	pyparallel.c	/^PXSTATE(void)$/;"	f	file:
PYPARALLEL_PRIVATE_H	pyparallel_private.h	2;"	d
PYTHREAD_NAME	thread.c	85;"	d	file:
PYTHREAD_NAME	thread.c	90;"	d	file:
PYTHREAD_NAME	thread.c	95;"	d	file:
PY_ABS_LONG_MIN	mystrtoul.c	260;"	d	file:
PY_LOCAL_AGGRESSIVE	ceval.c	10;"	d	file:
PY_SSIZE_T_CLEAN	marshal.c	7;"	d	file:
ParallelContext	parallelmodule.c	/^} PXCTX, ParallelContext;$/;"	t	typeref:struct:_ParallelContext	file:
ParallelContext2	parallelmodule.c	/^typedef struct ParallelContext2 {$/;"	s	file:
ParallelContext3	parallelmodule.c	/^typedef struct ParallelContext3 {$/;"	s	file:
ParallelContext4	parallelmodule.c	/^typedef struct ParallelContext4 {$/;"	s	file:
Param_singleton	Python-ast.c	/^*AugLoad_singleton, *AugStore_singleton, *Param_singleton;$/;"	v	file:
Param_type	Python-ast.c	/^static PyTypeObject *Param_type;$/;"	v	file:
Pass	Python-ast.c	/^Pass(int lineno, int col_offset, PyArena *arena)$/;"	f
Pass_type	Python-ast.c	/^static PyTypeObject *Pass_type;$/;"	v	file:
Pow_singleton	Python-ast.c	/^*Div_singleton, *Mod_singleton, *Pow_singleton, *LShift_singleton,$/;"	v	file:
Pow_type	Python-ast.c	/^static PyTypeObject *Pow_type;$/;"	v	file:
PxAddrInfo	pyparallel_private.h	/^} PxAddrInfo;$/;"	t	typeref:struct:_PxAddrInfo
PxClientSocket	pyparallel_private.h	/^} PxClientSocket;$/;"	t	typeref:struct:_PxClientSocket
PxClientSocket_Check	pyparallel_private.h	1274;"	d
PxClientSocket_Type	pyparallel_private.h	/^static PyTypeObject PxClientSocket_Type;$/;"	v
PxContext	pyparallel_private.h	/^} PxContext;$/;"	t	typeref:struct:_PxContext
PxContext_HEAD	pyparallel_private.h	586;"	d
PxContext_HandleError	pyparallel.c	/^PxContext_HandleError(Context *c)$/;"	f
PxContext_HeapSnapshot	pyparallel.c	/^PxContext_HeapSnapshot(Context *c, Heap *prev)$/;"	f
PxContext_RollbackHeap	pyparallel.c	/^PxContext_RollbackHeap(Context *c, Heap **snapshot)$/;"	f
PxHeap	pyparallel_private.h	/^typedef struct _PxHeap PxHeap;$/;"	t	typeref:struct:_PxHeap
PxHeap	pyparallel_private.h	/^} PxHeap;$/;"	t	typeref:struct:_PxHeap
PxHeap_HEAD	pyparallel_private.h	321;"	d
PxHeap_SNAPSHOT_COPY_SIZE	pyparallel_private.h	343;"	d
PxIO	pyparallel_private.h	/^typedef struct _PxIO PxIO;$/;"	t	typeref:struct:_PxIO
PxIO	pyparallel_private.h	/^} PxIO;$/;"	t	typeref:struct:_PxIO
PxIO2WSABUF	pyparallel_private.h	451;"	d
PxIO_FLAGS	pyparallel_private.h	430;"	d
PxIO_IS_ONDEMAND	pyparallel_private.h	432;"	d
PxIO_IS_PREALLOC	pyparallel_private.h	431;"	d
PxIO_ONDEMAND	pyparallel_private.h	428;"	d
PxIO_PREALLOCATED	pyparallel_private.h	427;"	d
PxListItem_SIZE	pxlist.c	/^C_ASSERT(sizeof(PxListItem) == PxListItem_SIZE);$/;"	v
PxList_Clear	pxlist.c	/^PxList_Clear(PxListHead *head)$/;"	f
PxList_CountItems	pxlist.c	/^PxList_CountItems(PxListItem *start)$/;"	f
PxList_Delete	pxlist.c	/^PxList_Delete(PxListHead *head)$/;"	f
PxList_Flush	pxlist.c	/^PxList_Flush(PxListHead *head)$/;"	f
PxList_FlushWithDepthHint	pxlist.c	/^PxList_FlushWithDepthHint(PxListHead *head,$/;"	f
PxList_Free	pxlist.c	/^PxList_Free(void *p)$/;"	f
PxList_FreeAllListItems	pxlist.c	/^PxList_FreeAllListItems(PxListItem *start)$/;"	f
PxList_FreeList	pxlist.c	/^PxList_FreeList(PxListHead *head)$/;"	f
PxList_FreeListHead	pxlist.c	/^PxList_FreeListHead(PxListHead *head)$/;"	f
PxList_FreeListItem	pxlist.c	/^PxList_FreeListItem(PxListItem *item)$/;"	f
PxList_FreeListItemAfterNext	pxlist.c	/^PxList_FreeListItemAfterNext(PxListItem *item)$/;"	f
PxList_Malloc	pxlist.c	/^PxList_Malloc(Py_ssize_t size)$/;"	f
PxList_MallocFromHeap	pxlist.c	/^PxList_MallocFromHeap(HANDLE heap_handle, Py_ssize_t size)$/;"	f
PxList_New	pxlist.c	/^PxList_New(void)$/;"	f
PxList_NewFromHeap	pxlist.c	/^PxList_NewFromHeap(HANDLE heap_handle)$/;"	f
PxList_NewItem	pxlist.c	/^PxList_NewItem(void)$/;"	f
PxList_Next	pxlist.c	/^PxList_Next(PxListItem *item)$/;"	f
PxList_Pop	pxlist.c	/^PxList_Pop(PxListHead *head)$/;"	f
PxList_PopObject	pxlist.c	249;"	d	file:
PxList_PopSocket	pyparallel_private.h	/^PxList_PopSocket(PxListHead *head)$/;"	f
PxList_Push	pxlist.c	/^PxList_Push(PxListHead *head, PxListItem *item)$/;"	f
PxList_PushList	pxlist.c	/^PxList_PushList(PxListHead *head,$/;"	f
PxList_PushObject	pxlist.c	/^PxList_PushObject(PxListHead *head, PyObject *op)$/;"	f
PxList_PushSocket	pyparallel_private.h	/^PxList_PushSocket(PxListHead *head, PxSocket *s)$/;"	f
PxList_QueryDepth	pxlist.c	/^PxList_QueryDepth(PxListHead *head)$/;"	f
PxList_SeverFromNext	pxlist.c	/^PxList_SeverFromNext(PxListItem *item)$/;"	f
PxList_TimestampItem	pxlist.c	/^PxList_TimestampItem(PxListItem *item)$/;"	f
PxList_Transfer	pxlist.c	/^PxList_Transfer(PxListHead *head, PxListItem *item)$/;"	f
PxObject	pyparallel_private.h	/^} PxObject;$/;"	t	typeref:struct:_PxObject
PxOverlapped_IsNull	pyparallel.c	/^PxOverlapped_IsNull(void *ol)$/;"	f	file:
PxOverlapped_Reset	pyparallel.c	/^PxOverlapped_Reset(void *olp, const char *src, int try_close)$/;"	f
PxPages	pyparallel_private.h	/^} PxPages;$/;"	t	typeref:struct:_PxPages
PxPages_Dump	pyparallel.c	/^PxPages_Dump(PxPages *pages)$/;"	f
PxPages_Find	pyparallel.c	/^PxPages_Find(PxPages *pages, void *p)$/;"	f
PxServerSocket	pyparallel_private.h	/^} PxServerSocket;$/;"	t	typeref:struct:_PxServerSocket
PxServerSocket_Check	pyparallel_private.h	1275;"	d
PxServerSocket_ClientClosed	pyparallel.c	/^PxServerSocket_ClientClosed(PxSocket *o)$/;"	f
PxServerSocket_Type	pyparallel_private.h	/^static PyTypeObject PxServerSocket_Type;$/;"	v
PxSocket	pyparallel_private.h	/^typedef struct _PxSocket PxSocket;$/;"	t	typeref:struct:_PxSocket
PxSocket	pyparallel_private.h	/^} PxSocket;$/;"	t	typeref:struct:_PxSocket
PxSocket2WSABUF	pyparallel_private.h	1237;"	d
PxSocket2WSABUF	pyparallel_private.h	923;"	d
PxSocketBuf	pyparallel_private.h	/^typedef struct _PxSocketBuf PxSocketBuf;$/;"	t	typeref:struct:_PxSocketBuf
PxSocketBuf	pyparallel_private.h	/^} PxSocketBuf;$/;"	t	typeref:struct:_PxSocketBuf
PxSocketBuf2PyBytesObject	pyparallel_private.h	924;"	d
PxSocketBufList	pyparallel_private.h	/^typedef struct _PxSocketBufList PxSocketBufList;$/;"	t	typeref:struct:_PxSocketBufList
PxSocketBufList	pyparallel_private.h	/^} PxSocketBufList;$/;"	t	typeref:struct:_PxSocketBufList
PxSocketBuf_Type	pyparallel_private.h	/^static PyTypeObject PxSocketBuf_Type;$/;"	v
PxSocketClient_Callback	pyparallel.c	/^PxSocketClient_Callback($/;"	f
PxSocketIO_Check	pyparallel.c	4796;"	d	file:
PxSocketListItem	pyparallel_private.h	/^} PxSocketListItem;$/;"	t	typeref:struct:_PxSocketListItem
PxSocketMembers	pyparallel.c	/^static PyMemberDef PxSocketMembers[] = {$/;"	v	file:
PxSocketMethods	pyparallel.c	/^static PyMethodDef PxSocketMethods[] = {$/;"	v	file:
PxSocketServer_AcceptCallback	pyparallel.c	/^PxSocketServer_AcceptCallback($/;"	f
PxSocketServer_AcceptEx	pyparallel.c	/^PxSocketServer_AcceptEx($/;"	f
PxSocketServer_AllocClientSockets	pyparallel.c	/^PxSocketServer_AllocClientSockets(PxSocket *s)$/;"	f
PxSocketServer_CreateClientSocket	pyparallel.c	/^PxSocketServer_CreateClientSocket(PxSocket *s)$/;"	f
PxSocketServer_Start	pyparallel.c	/^PxSocketServer_Start(PTP_CALLBACK_INSTANCE instance, void *context)$/;"	f
PxSocket_CAN_RECV	pyparallel_private.h	808;"	d
PxSocket_CBFLAGS	pyparallel_private.h	781;"	d
PxSocket_CBFLAGS_CONNECTION_CLOSED	pyparallel_private.h	785;"	d
PxSocket_CBFLAGS_RECV_FAILED	pyparallel_private.h	787;"	d
PxSocket_CBFLAGS_SEND_COMPLETE	pyparallel_private.h	784;"	d
PxSocket_CBFLAGS_SEND_FAILED	pyparallel_private.h	783;"	d
PxSocket_CBFLAGS_SHUTDOWN_SEND	pyparallel_private.h	786;"	d
PxSocket_CB_CONNECTION_LOST	pyparallel_private.h	868;"	d
PxSocket_CB_CONNECTION_MADE	pyparallel_private.h	864;"	d
PxSocket_CB_EOF_RECEIVED	pyparallel_private.h	867;"	d
PxSocket_CB_LINES_RECEIVED	pyparallel_private.h	866;"	d
PxSocket_CLOSE	pyparallel_private.h	1246;"	d
PxSocket_CONCURRENCY	pyparallel_private.h	805;"	d
PxSocket_CallbackComplete	pyparallel.c	/^PxSocket_CallbackComplete(Context *c)$/;"	f
PxSocket_Check	pyparallel_private.h	1270;"	d
PxSocket_Connect	pyparallel.c	/^PxSocket_Connect(PTP_CALLBACK_INSTANCE instance, void *context)$/;"	f
PxSocket_EXCEPTION	pyparallel_private.h	1214;"	d
PxSocket_ErrbackComplete	pyparallel.c	/^PxSocket_ErrbackComplete(Context *c)$/;"	f
PxSocket_FATAL	pyparallel_private.h	1207;"	d
PxSocket_GET_ATTR	pyparallel_private.h	1071;"	d
PxSocket_HAS_CONNECTION_CLOSED	pyparallel_private.h	841;"	d
PxSocket_HAS_DATA_RECEIVED	pyparallel_private.h	826;"	d
PxSocket_HAS_INITIAL_BYTES	pyparallel_private.h	820;"	d
PxSocket_HAS_LINES_RECEIVED	pyparallel_private.h	829;"	d
PxSocket_HAS_RECV_FAILED	pyparallel_private.h	835;"	d
PxSocket_HAS_SEND_COMPLETE	pyparallel_private.h	823;"	d
PxSocket_HAS_SEND_FAILED	pyparallel_private.h	832;"	d
PxSocket_HAS_SHUTDOWN_SEND	pyparallel_private.h	847;"	d
PxSocket_HandleCallback	pyparallel.c	/^PxSocket_HandleCallback($/;"	f
PxSocket_HandleError	pyparallel.c	/^PxSocket_HandleError($/;"	f
PxSocket_HandleException	pyparallel.c	/^PxSocket_HandleException(Context *c, const char *syscall, int fatal)$/;"	f
PxSocket_HasAttr	pyparallel_private.h	/^PxSocket_HasAttr(PxSocket *s, const char *callback)$/;"	f
PxSocket_IOLoop	pyparallel.c	/^PxSocket_IOLoop(PxSocket *s)$/;"	f
PxSocket_IO_ACCEPT	pyparallel_private.h	871;"	d
PxSocket_IO_CLOSE	pyparallel_private.h	875;"	d
PxSocket_IO_CONNECT	pyparallel_private.h	870;"	d
PxSocket_IO_DISCONNECT	pyparallel_private.h	874;"	d
PxSocket_IO_RECV	pyparallel_private.h	872;"	d
PxSocket_IO_SEND	pyparallel_private.h	873;"	d
PxSocket_IO_SENDFILE	pyparallel_private.h	876;"	d
PxSocket_IS_BOUND	pyparallel_private.h	792;"	d
PxSocket_IS_CLIENT	pyparallel_private.h	790;"	d
PxSocket_IS_CONNECTED	pyparallel_private.h	793;"	d
PxSocket_IS_DISCONNECTED	pyparallel_private.h	859;"	d
PxSocket_IS_HOG	pyparallel_private.h	789;"	d
PxSocket_IS_PENDING_DISCONNECT	pyparallel_private.h	856;"	d
PxSocket_IS_PERSISTENT	pyparallel_private.h	797;"	d
PxSocket_IS_SENDFILE_SCHEDULED	pyparallel_private.h	794;"	d
PxSocket_IS_SERVER	pyparallel_private.h	791;"	d
PxSocket_IS_SERVERCLIENT	pyparallel_private.h	853;"	d
PxSocket_InitExceptionHandler	pyparallel.c	/^PxSocket_InitExceptionHandler(PxSocket *s)$/;"	f
PxSocket_InitInitialBytes	pyparallel.c	/^PxSocket_InitInitialBytes(PxSocket *s)$/;"	f
PxSocket_InitProtocol	pyparallel.c	/^PxSocket_InitProtocol(PxSocket *s)$/;"	f
PxSocket_LINES_MODE_ACTIVE	pyparallel_private.h	799;"	d
PxSocket_LoadInitialBytes	pyparallel.c	/^PxSocket_LoadInitialBytes(PxSocket *s)$/;"	f
PxSocket_MAX_SYNC_RECV_ATTEMPTS	pyparallel_private.h	817;"	d
PxSocket_MAX_SYNC_SEND_ATTEMPTS	pyparallel_private.h	814;"	d
PxSocket_NEW_SBUF	pyparallel.c	/^PxSocket_NEW_SBUF($/;"	f
PxSocket_PARSE_ARGS	pyparallel_private.h	1385;"	d
PxSocket_RECV_MORE	pyparallel_private.h	862;"	d
PxSocket_ResetOverlapped	pyparallel.c	/^PxSocket_ResetOverlapped(PxSocket *s, const char *src)$/;"	f
PxSocket_ResetOverlapped_PreAsyncRecv	pyparallel.c	/^PxSocket_ResetOverlapped_PreAsyncRecv(PxSocket *s)$/;"	f
PxSocket_ResetOverlapped_PreTransmitFile	pyparallel.c	/^PxSocket_ResetOverlapped_PreTransmitFile(PxSocket *s)$/;"	f
PxSocket_SET_CONNECTION_CLOSED	pyparallel_private.h	844;"	d
PxSocket_SET_DISCONNECTED	pyparallel_private.h	1241;"	d
PxSocket_SET_SEND_FAILED	pyparallel_private.h	838;"	d
PxSocket_SET_SHUTDOWN_SEND	pyparallel_private.h	850;"	d
PxSocket_SHUTDOWN_SEND	pyparallel_private.h	811;"	d
PxSocket_SOCKERROR	pyparallel_private.h	1232;"	d
PxSocket_SYSERROR	pyparallel_private.h	1220;"	d
PxSocket_SetProtocolType	pyparallel.c	/^PxSocket_SetProtocolType(PxSocket *s, PyObject *protocol_type)$/;"	f
PxSocket_THROUGHPUT	pyparallel_private.h	802;"	d
PxSocket_Type	pyparallel.c	/^static PyTypeObject PxSocket_Type = {$/;"	v	file:
PxSocket_Type	pyparallel_private.h	/^static PyTypeObject PxSocket_Type;$/;"	v
PxSocket_UpdateConnectTime	pyparallel.c	/^PxSocket_UpdateConnectTime(PxSocket *s)$/;"	f	file:
PxSocket_WSAERROR	pyparallel_private.h	1226;"	d
PxState	pyparallel_private.h	/^typedef struct _PxState PxState;$/;"	t	typeref:struct:_PxState
PxState	pyparallel_private.h	/^} PxState;$/;"	t	typeref:struct:_PxState
PxState_SetError	pyparallel.c	/^PxState_SetError(Context *c)$/;"	f
PxThreadLocalState	pyparallel_private.h	/^} PxThreadLocalState, TLS;$/;"	t	typeref:struct:_PxThreadLocalState
Px_ALIGN	pyparallel_private.h	52;"	d
Px_ALIGNED_FREE	pyparallel_private.h	80;"	d
Px_ALIGNED_MALLOC	pyparallel_private.h	76;"	d
Px_ALIGN_DOWN	pyparallel_private.h	57;"	d
Px_CACHE_ALIGN	pyparallel_private.h	63;"	d
Px_CACHE_ALIGN_SIZE	pyparallel_private.h	50;"	d
Px_CTXFLAGS	pyparallel_private.h	720;"	d
Px_CTXFLAGS_DISASSOCIATED	pyparallel_private.h	726;"	d
Px_CTXFLAGS_HAS_STATS	pyparallel_private.h	727;"	d
Px_CTXFLAGS_IS_PERSISTED	pyparallel_private.h	722;"	d
Px_CTXFLAGS_IS_WORK_CTX	pyparallel_private.h	725;"	d
Px_CTXFLAGS_REUSED	pyparallel_private.h	724;"	d
Px_CTXFLAGS_TLS_HEAP_ACTIVE	pyparallel_private.h	728;"	d
Px_CTXFLAGS_WAS_PERSISTED	pyparallel_private.h	723;"	d
Px_CTXTYPE	pyparallel_private.h	134;"	d
Px_CTXTYPE_FILE	pyparallel_private.h	139;"	d
Px_CTXTYPE_SOCK	pyparallel_private.h	138;"	d
Px_CTXTYPE_WAIT	pyparallel_private.h	137;"	d
Px_CTXTYPE_WORK	pyparallel_private.h	136;"	d
Px_CTX_HAS_STATS	pyparallel_private.h	735;"	d
Px_CTX_IS_DISASSOCIATED	pyparallel_private.h	734;"	d
Px_CTX_IS_PERSISTED	pyparallel_private.h	730;"	d
Px_CTX_REUSED	pyparallel_private.h	732;"	d
Px_CTX_WAS_PERSISTED	pyparallel_private.h	731;"	d
Px_DECCTX	pyparallel.c	/^Px_DECCTX(Context *c)$/;"	f
Px_DEFAULT_HEAP_SIZE	pyparallel_private.h	86;"	d
Px_DEFAULT_TLS_HEAP_SIZE	pyparallel_private.h	87;"	d
Px_DecRef	pyparallel.c	/^Px_DecRef(PyObject *o)$/;"	f
Px_GET_ALIGNMENT	pyparallel_private.h	/^Px_GET_ALIGNMENT(void *p)$/;"	f
Px_INCCTX	pyparallel.c	/^Px_INCCTX(Context *c)$/;"	f
Px_INTPTR	pyparallel_private.h	31;"	d
Px_INTPTR	pyparallel_private.h	40;"	d
Px_INTPTR_BITS	pyparallel_private.h	33;"	d
Px_INTPTR_BITS	pyparallel_private.h	41;"	d
Px_IOTYPE_FILE	pyparallel_private.h	434;"	d
Px_IOTYPE_SOCKET	pyparallel_private.h	435;"	d
Px_IS_WORK_CTX	pyparallel_private.h	733;"	d
Px_LARGE_PAGE_SIZE	pyparallel_private.h	34;"	d
Px_LARGE_PAGE_SIZE	pyparallel_private.h	36;"	d
Px_MAX	pyparallel_private.h	84;"	d
Px_MAX_SEM	pyparallel_private.h	88;"	d
Px_MEM_ALIGN	pyparallel_private.h	62;"	d
Px_MEM_ALIGN_RAW	pyparallel_private.h	47;"	d
Px_MEM_ALIGN_SIZE	pyparallel_private.h	48;"	d
Px_NEW_HEAP_SIZE	pyparallel.c	1844;"	d	file:
Px_NUM_TLS_WSABUFS	pyparallel_private.h	144;"	d
Px_NUM_TLS_WSABUFS	pyparallel_private.h	146;"	d
Px_PAGESIZE_ALIGN_DOWN	pyparallel_private.h	68;"	d
Px_PAGESIZE_ALIGN_UP	pyparallel_private.h	67;"	d
Px_PAGE_ALIGN	pyparallel_private.h	64;"	d
Px_PAGE_ALIGN_DOWN	pyparallel_private.h	65;"	d
Px_PAGE_ALIGN_SIZE	pyparallel_private.h	49;"	d
Px_PAGE_SHIFT	pyparallel_private.h	46;"	d
Px_PAGE_SIZE	pyparallel_private.h	44;"	d
Px_PERSISTENCE_GUARD	pyparallel_private.h	1292;"	d
Px_PROTECTION_GUARD	pyparallel_private.h	1284;"	d
Px_PTR	pyparallel_private.h	70;"	d
Px_PTR_ADD	pyparallel_private.h	71;"	d
Px_PTR_ALIGN	pyparallel_private.h	61;"	d
Px_PTR_ALIGNED_ADD	pyparallel_private.h	73;"	d
Px_PTR_ALIGN_RAW	pyparallel_private.h	29;"	d
Px_PTR_ALIGN_RAW	pyparallel_private.h	38;"	d
Px_PTR_ALIGN_SIZE	pyparallel_private.h	28;"	d
Px_PTR_ALIGN_SIZE	pyparallel_private.h	37;"	d
Px_PTR_IN_HEAP	pyparallel_private.h	90;"	d
Px_SIZEOF_HEAP	pyparallel.c	1842;"	d	file:
Px_SMALL_PAGE_SIZE	pyparallel_private.h	45;"	d
Px_SOCKFLAGS	pyparallel_private.h	740;"	d
Px_SOCKFLAGS_	pyparallel_private.h	779;"	d
Px_SOCKFLAGS_ACCEPT_CALLBACK_SEEN	pyparallel_private.h	775;"	d
Px_SOCKFLAGS_BOTH_SHUTDOWN	pyparallel_private.h	766;"	d
Px_SOCKFLAGS_CALLED_CONNECTION_MADE	pyparallel_private.h	773;"	d
Px_SOCKFLAGS_CAN_RECV	pyparallel_private.h	762;"	d
Px_SOCKFLAGS_CHECKED_DR_UNREACHABLE	pyparallel_private.h	756;"	d
Px_SOCKFLAGS_CLEAN_DISCONNECT	pyparallel_private.h	747;"	d
Px_SOCKFLAGS_CLIENT	pyparallel_private.h	742;"	d
Px_SOCKFLAGS_CLOSED	pyparallel_private.h	771;"	d
Px_SOCKFLAGS_CLOSE_SCHEDULED	pyparallel_private.h	770;"	d
Px_SOCKFLAGS_CONCURRENCY	pyparallel_private.h	754;"	d
Px_SOCKFLAGS_CONNECTED	pyparallel_private.h	746;"	d
Px_SOCKFLAGS_HOG	pyparallel_private.h	744;"	d
Px_SOCKFLAGS_INITIAL_BYTES	pyparallel_private.h	751;"	d
Px_SOCKFLAGS_INITIAL_BYTES_CALLABLE	pyparallel_private.h	753;"	d
Px_SOCKFLAGS_INITIAL_BYTES_STATIC	pyparallel_private.h	752;"	d
Px_SOCKFLAGS_IS_WAITING_ON_FD_ACCEPT	pyparallel_private.h	774;"	d
Px_SOCKFLAGS_LINES_MODE_ACTIVE	pyparallel_private.h	758;"	d
Px_SOCKFLAGS_MAX_SYNC_RECV_ATTEMPTS	pyparallel_private.h	776;"	d
Px_SOCKFLAGS_MAX_SYNC_SEND_ATTEMPTS	pyparallel_private.h	768;"	d
Px_SOCKFLAGS_RECV_MORE	pyparallel_private.h	745;"	d
Px_SOCKFLAGS_RECV_SHUTDOWN	pyparallel_private.h	765;"	d
Px_SOCKFLAGS_SENDFILE_SCHEDULED	pyparallel_private.h	778;"	d
Px_SOCKFLAGS_SENDING_INITIAL_BYTES	pyparallel_private.h	757;"	d
Px_SOCKFLAGS_SEND_SCHEDULED	pyparallel_private.h	767;"	d
Px_SOCKFLAGS_SEND_SHUTDOWN	pyparallel_private.h	764;"	d
Px_SOCKFLAGS_SERVER	pyparallel_private.h	743;"	d
Px_SOCKFLAGS_SERVERCLIENT	pyparallel_private.h	750;"	d
Px_SOCKFLAGS_SHUTDOWN_SEND	pyparallel_private.h	760;"	d
Px_SOCKFLAGS_THROUGHPUT	pyparallel_private.h	748;"	d
Px_SOCKFLAGS_TIMEDOUT	pyparallel_private.h	772;"	d
Px_SOCKFLAGS_can_recv	pyparallel_private.h	763;"	d
Px_SOCKFLAGS_concurrency	pyparallel_private.h	755;"	d
Px_SOCKFLAGS_lines_mode_active	pyparallel_private.h	759;"	d
Px_SOCKFLAGS_max_sync_recv_attempts	pyparallel_private.h	777;"	d
Px_SOCKFLAGS_max_sync_send_attempts	pyparallel_private.h	769;"	d
Px_SOCKFLAGS_shutdown_send	pyparallel_private.h	761;"	d
Px_SOCKFLAGS_throughput	pyparallel_private.h	749;"	d
Px_TLS_HEAP_ACTIVE	pyparallel.c	119;"	d	file:
Px_UINTPTR	pyparallel_private.h	30;"	d
Px_UINTPTR	pyparallel_private.h	39;"	d
Px_UINTPTR_1	pyparallel_private.h	32;"	d
Px_UINTPTR_1	pyparallel_private.h	42;"	d
Px_USEABLE_HEAP_SIZE	pyparallel.c	1843;"	d	file:
Px_XISPX	pyparallel.c	761;"	d	file:
PyAST_Check	Python-ast.c	/^int PyAST_Check(PyObject* obj)$/;"	f
PyAST_Compile	compile.c	/^PyAST_Compile(mod_ty mod, const char *filename, PyCompilerFlags *flags,$/;"	f
PyAST_Compile	compile.c	4254;"	d	file:
PyAST_CompileEx	compile.c	/^PyAST_CompileEx(mod_ty mod, const char *filename, PyCompilerFlags *flags,$/;"	f
PyAST_FromNode	ast.c	/^PyAST_FromNode(const node *n, PyCompilerFlags *flags, const char *filename,$/;"	f
PyAST_Validate	ast.c	/^PyAST_Validate(mod_ty mod)$/;"	f
PyAST_mod2obj	Python-ast.c	/^PyObject* PyAST_mod2obj(mod_ty t)$/;"	f
PyAST_obj2mod	Python-ast.c	/^mod_ty PyAST_obj2mod(PyObject* ast, PyArena* arena, int mode)$/;"	f
PyArena_AddPyObject	pyarena.c	/^PyArena_AddPyObject(PyArena *arena, PyObject *obj)$/;"	f
PyArena_Free	pyarena.c	/^PyArena_Free(PyArena *arena)$/;"	f
PyArena_Malloc	pyarena.c	/^PyArena_Malloc(PyArena *arena, size_t size)$/;"	f
PyArena_New	pyarena.c	/^PyArena_New()$/;"	f
PyArg_Parse	getargs.c	/^PyArg_Parse(PyObject *args, const char *format, ...)$/;"	f
PyArg_ParseTuple	getargs.c	/^PyArg_ParseTuple(PyObject *args, const char *format, ...)$/;"	f
PyArg_ParseTupleAndKeywords	getargs.c	/^PyArg_ParseTupleAndKeywords(PyObject *args,$/;"	f
PyArg_UnpackTuple	getargs.c	/^PyArg_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, ...)$/;"	f
PyArg_VaParse	getargs.c	/^PyArg_VaParse(PyObject *args, const char *format, va_list va)$/;"	f
PyArg_VaParseTupleAndKeywords	getargs.c	/^PyArg_VaParseTupleAndKeywords(PyObject *args,$/;"	f
PyArg_ValidateKeywordArguments	getargs.c	/^PyArg_ValidateKeywordArguments(PyObject *kwargs)$/;"	f
PyAsync_IO_BUFSIZE	pyparallel_private.h	423;"	d
PyAsync_IO_READ	pyparallel_private.h	131;"	d
PyAsync_IO_WRITE	pyparallel_private.h	132;"	d
PyAsync_NUM_BUFS	pyparallel_private.h	425;"	d
PyBytesObject2PxSocketBuf	pyparallel_private.h	927;"	d
PyBytesObject2PxSocketBufSignature	pyparallel_private.h	933;"	d
PyCOND_ADD_MICROSECONDS	condvar.h	62;"	d
PyCOND_BROADCAST	condvar.h	/^PyCOND_BROADCAST(PyCOND_T *cv)$/;"	f
PyCOND_BROADCAST	condvar.h	87;"	d
PyCOND_FINI	condvar.h	/^PyCOND_FINI(PyCOND_T *cv)$/;"	f
PyCOND_FINI	condvar.h	85;"	d
PyCOND_GETTIMEOFDAY	condvar.h	71;"	d
PyCOND_GETTIMEOFDAY	condvar.h	73;"	d
PyCOND_INIT	condvar.h	/^PyCOND_INIT(PyCOND_T *cv)$/;"	f
PyCOND_INIT	condvar.h	84;"	d
PyCOND_SIGNAL	condvar.h	/^PyCOND_SIGNAL(PyCOND_T *cv)$/;"	f
PyCOND_SIGNAL	condvar.h	86;"	d
PyCOND_T	condvar.h	/^typedef CONDITION_VARIABLE  PyCOND_T;$/;"	t
PyCOND_T	condvar.h	/^} PyCOND_T;$/;"	t	typeref:struct:_PyCOND_T
PyCOND_T	condvar.h	83;"	d
PyCOND_TIMEDWAIT	condvar.h	/^PyCOND_TIMEDWAIT(PyCOND_T *cond, PyMUTEX_T *mut, long us)$/;"	f
PyCOND_TIMEDWAIT	condvar.h	/^PyCOND_TIMEDWAIT(PyCOND_T *cv, PyMUTEX_T *cs, long us)$/;"	f
PyCOND_WAIT	condvar.h	/^PyCOND_WAIT(PyCOND_T *cv, PyMUTEX_T *cs)$/;"	f
PyCOND_WAIT	condvar.h	88;"	d
PyCode_Optimize	peephole.c	/^PyCode_Optimize(PyObject *code, PyObject* consts, PyObject *names,$/;"	f
PyCodec_BackslashReplaceErrors	codecs.c	/^PyObject *PyCodec_BackslashReplaceErrors(PyObject *exc)$/;"	f
PyCodec_Decode	codecs.c	/^PyObject *PyCodec_Decode(PyObject *object,$/;"	f
PyCodec_Decoder	codecs.c	/^PyObject *PyCodec_Decoder(const char *encoding)$/;"	f
PyCodec_Encode	codecs.c	/^PyObject *PyCodec_Encode(PyObject *object,$/;"	f
PyCodec_Encoder	codecs.c	/^PyObject *PyCodec_Encoder(const char *encoding)$/;"	f
PyCodec_IgnoreErrors	codecs.c	/^PyObject *PyCodec_IgnoreErrors(PyObject *exc)$/;"	f
PyCodec_IncrementalDecoder	codecs.c	/^PyObject *PyCodec_IncrementalDecoder(const char *encoding,$/;"	f
PyCodec_IncrementalEncoder	codecs.c	/^PyObject *PyCodec_IncrementalEncoder(const char *encoding,$/;"	f
PyCodec_KnownEncoding	codecs.c	/^int PyCodec_KnownEncoding(const char *encoding)$/;"	f
PyCodec_LookupError	codecs.c	/^PyObject *PyCodec_LookupError(const char *name)$/;"	f
PyCodec_Register	codecs.c	/^int PyCodec_Register(PyObject *search_function)$/;"	f
PyCodec_RegisterError	codecs.c	/^int PyCodec_RegisterError(const char *name, PyObject *error)$/;"	f
PyCodec_ReplaceErrors	codecs.c	/^PyObject *PyCodec_ReplaceErrors(PyObject *exc)$/;"	f
PyCodec_StreamReader	codecs.c	/^PyObject *PyCodec_StreamReader(const char *encoding,$/;"	f
PyCodec_StreamWriter	codecs.c	/^PyObject *PyCodec_StreamWriter(const char *encoding,$/;"	f
PyCodec_StrictErrors	codecs.c	/^PyObject *PyCodec_StrictErrors(PyObject *exc)$/;"	f
PyCodec_SurrogateEscapeErrors	codecs.c	/^PyCodec_SurrogateEscapeErrors(PyObject *exc)$/;"	f	file:
PyCodec_SurrogatePassErrors	codecs.c	/^PyCodec_SurrogatePassErrors(PyObject *exc)$/;"	f	file:
PyCodec_XMLCharRefReplaceErrors	codecs.c	/^PyObject *PyCodec_XMLCharRefReplaceErrors(PyObject *exc)$/;"	f
PyCompileString	pythonrun.c	/^PyCompileString(const char *str, const char *filename, int start)$/;"	f
PyErr_BadArgument	errors.c	/^PyErr_BadArgument(void)$/;"	f
PyErr_BadInternalCall	errors.c	/^PyErr_BadInternalCall(void)$/;"	f
PyErr_BadInternalCall	errors.c	669;"	d	file:
PyErr_BadInternalCall	errors.c	676;"	d	file:
PyErr_CheckSignals	sigcheck.c	/^PyErr_CheckSignals(void)$/;"	f
PyErr_Clear	errors.c	/^PyErr_Clear(void)$/;"	f
PyErr_Display	pythonrun.c	/^PyErr_Display(PyObject *exception, PyObject *value, PyObject *tb)$/;"	f
PyErr_ExceptionMatches	errors.c	/^PyErr_ExceptionMatches(PyObject *exc)$/;"	f
PyErr_Fetch	errors.c	/^PyErr_Fetch(PyObject **p_type, PyObject **p_value, PyObject **p_traceback)$/;"	f
PyErr_Format	errors.c	/^PyErr_Format(PyObject *exception, const char *format, ...)$/;"	f
PyErr_GetExcInfo	errors.c	/^PyErr_GetExcInfo(PyObject **p_type, PyObject **p_value, PyObject **p_traceback)$/;"	f
PyErr_GivenExceptionMatches	errors.c	/^PyErr_GivenExceptionMatches(PyObject *err, PyObject *exc)$/;"	f
PyErr_NewException	errors.c	/^PyErr_NewException(const char *name, PyObject *base, PyObject *dict)$/;"	f
PyErr_NewExceptionWithDoc	errors.c	/^PyErr_NewExceptionWithDoc(const char *name, const char *doc,$/;"	f
PyErr_NoMemory	errors.c	/^PyErr_NoMemory(void)$/;"	f
PyErr_NormalizeException	errors.c	/^PyErr_NormalizeException(PyObject **exc, PyObject **val, PyObject **tb)$/;"	f
PyErr_Occurred	errors.c	/^PyErr_Occurred(void)$/;"	f
PyErr_Print	pythonrun.c	/^PyErr_Print(void)$/;"	f
PyErr_PrintEx	pythonrun.c	/^PyErr_PrintEx(int set_sys_last_vars)$/;"	f
PyErr_ProgramText	errors.c	/^PyErr_ProgramText(const char *filename, int lineno)$/;"	f
PyErr_Restore	errors.c	/^PyErr_Restore(PyObject *type, PyObject *value, PyObject *traceback)$/;"	f
PyErr_SetExcFromWindowsErr	errors.c	/^PyObject *PyErr_SetExcFromWindowsErr(PyObject *exc, int ierr)$/;"	f
PyErr_SetExcFromWindowsErrWithFilename	errors.c	/^PyObject *PyErr_SetExcFromWindowsErrWithFilename($/;"	f
PyErr_SetExcFromWindowsErrWithFilenameObject	errors.c	/^PyObject *PyErr_SetExcFromWindowsErrWithFilenameObject($/;"	f
PyErr_SetExcFromWindowsErrWithUnicodeFilename	errors.c	/^PyObject *PyErr_SetExcFromWindowsErrWithUnicodeFilename($/;"	f
PyErr_SetExcInfo	errors.c	/^PyErr_SetExcInfo(PyObject *p_type, PyObject *p_value, PyObject *p_traceback)$/;"	f
PyErr_SetFromErrno	errors.c	/^PyErr_SetFromErrno(PyObject *exc)$/;"	f
PyErr_SetFromErrnoWithFilename	errors.c	/^PyErr_SetFromErrnoWithFilename(PyObject *exc, const char *filename)$/;"	f
PyErr_SetFromErrnoWithFilenameObject	errors.c	/^PyErr_SetFromErrnoWithFilenameObject(PyObject *exc, PyObject *filenameObject)$/;"	f
PyErr_SetFromErrnoWithUnicodeFilename	errors.c	/^PyErr_SetFromErrnoWithUnicodeFilename(PyObject *exc, const Py_UNICODE *filename)$/;"	f
PyErr_SetFromWindowsErr	errors.c	/^PyObject *PyErr_SetFromWindowsErr(int ierr)$/;"	f
PyErr_SetFromWindowsErrWithFilename	errors.c	/^PyObject *PyErr_SetFromWindowsErrWithFilename($/;"	f
PyErr_SetFromWindowsErrWithUnicodeFilename	errors.c	/^PyObject *PyErr_SetFromWindowsErrWithUnicodeFilename($/;"	f
PyErr_SetImportError	errors.c	/^PyErr_SetImportError(PyObject *msg, PyObject *name, PyObject *path)$/;"	f
PyErr_SetNone	errors.c	/^PyErr_SetNone(PyObject *exception)$/;"	f
PyErr_SetObject	errors.c	/^PyErr_SetObject(PyObject *exception, PyObject *value)$/;"	f
PyErr_SetString	errors.c	/^PyErr_SetString(PyObject *exception, const char *string)$/;"	f
PyErr_SyntaxLocation	errors.c	/^PyErr_SyntaxLocation(const char *filename, int lineno) {$/;"	f
PyErr_SyntaxLocationEx	errors.c	/^PyErr_SyntaxLocationEx(const char *filename, int lineno, int col_offset)$/;"	f
PyErr_Warn	_warnings.c	/^PyErr_Warn(PyObject *category, char *text)$/;"	f
PyErr_Warn	_warnings.c	779;"	d	file:
PyErr_WarnEx	_warnings.c	/^PyErr_WarnEx(PyObject *category, const char *text, Py_ssize_t stack_level)$/;"	f
PyErr_WarnExplicit	_warnings.c	/^PyErr_WarnExplicit(PyObject *category, const char *text,$/;"	f
PyErr_WarnFormat	_warnings.c	/^PyErr_WarnFormat(PyObject *category, Py_ssize_t stack_level,$/;"	f
PyErr_WriteUnraisable	errors.c	/^PyErr_WriteUnraisable(PyObject *obj)$/;"	f
PyEval_AcquireLock	ceval.c	/^PyEval_AcquireLock(void)$/;"	f
PyEval_AcquireThread	ceval.c	/^PyEval_AcquireThread(PyThreadState *tstate)$/;"	f
PyEval_CallFunction	modsupport.c	/^PyEval_CallFunction(PyObject *obj, const char *format, ...)$/;"	f
PyEval_CallMethod	modsupport.c	/^PyEval_CallMethod(PyObject *obj, const char *methodname, const char *format, ...)$/;"	f
PyEval_CallObjectWithKeywords	ceval.c	/^PyEval_CallObjectWithKeywords(PyObject *func, PyObject *arg, PyObject *kw)$/;"	f
PyEval_EvalCode	ceval.c	/^PyEval_EvalCode(PyObject *co, PyObject *globals, PyObject *locals)$/;"	f
PyEval_EvalCodeEx	ceval.c	/^PyEval_EvalCodeEx(PyObject *_co, PyObject *globals, PyObject *locals,$/;"	f
PyEval_EvalFrame	ceval.c	/^PyEval_EvalFrame(PyFrameObject *f) {$/;"	f
PyEval_EvalFrameEx	ceval.c	/^PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)$/;"	f
PyEval_GetBuiltins	ceval.c	/^PyEval_GetBuiltins(void)$/;"	f
PyEval_GetCallStats	ceval.c	/^PyEval_GetCallStats(PyObject *self)$/;"	f
PyEval_GetFrame	ceval.c	/^PyEval_GetFrame(void)$/;"	f
PyEval_GetFuncDesc	ceval.c	/^PyEval_GetFuncDesc(PyObject *func)$/;"	f
PyEval_GetFuncName	ceval.c	/^PyEval_GetFuncName(PyObject *func)$/;"	f
PyEval_GetGlobals	ceval.c	/^PyEval_GetGlobals(void)$/;"	f
PyEval_GetLocals	ceval.c	/^PyEval_GetLocals(void)$/;"	f
PyEval_InitThreads	ceval.c	/^PyEval_InitThreads(void)$/;"	f
PyEval_MergeCompilerFlags	ceval.c	/^PyEval_MergeCompilerFlags(PyCompilerFlags *cf)$/;"	f
PyEval_ReInitThreads	ceval.c	/^PyEval_ReInitThreads(void)$/;"	f
PyEval_ReleaseLock	ceval.c	/^PyEval_ReleaseLock(void)$/;"	f
PyEval_ReleaseThread	ceval.c	/^PyEval_ReleaseThread(PyThreadState *tstate)$/;"	f
PyEval_RestoreThread	ceval.c	/^PyEval_RestoreThread(PyThreadState *tstate)$/;"	f
PyEval_SaveThread	ceval.c	/^PyEval_SaveThread(void)$/;"	f
PyEval_SetProfile	ceval.c	/^PyEval_SetProfile(Py_tracefunc func, PyObject *arg)$/;"	f
PyEval_SetTrace	ceval.c	/^PyEval_SetTrace(Py_tracefunc func, PyObject *arg)$/;"	f
PyEval_ThreadsInitialized	ceval.c	/^PyEval_ThreadsInitialized(void)$/;"	f
PyEvent	pyparallel_private.h	114;"	d
PyEventType	pyparallel_private.h	115;"	d
PyEvent_CREATE	pyparallel_private.h	118;"	d
PyEvent_DESTROY	pyparallel_private.h	121;"	d
PyEvent_INIT	pyparallel_private.h	119;"	d
PyEvent_SIGNAL	pyparallel_private.h	120;"	d
PyExc_AssignmentError	pyparallel.c	/^static PyObject *PyExc_AssignmentError;$/;"	v	file:
PyExc_AsyncError	pyparallel.c	/^static PyObject *PyExc_AsyncError;$/;"	v	file:
PyExc_AsyncIOBuffersExhaustedError	pyparallel.c	/^static PyObject *PyExc_AsyncIOBuffersExhaustedError;$/;"	v	file:
PyExc_NoWaitersError	pyparallel.c	/^static PyObject *PyExc_NoWaitersError;$/;"	v	file:
PyExc_PersistenceError	pyparallel.c	/^static PyObject *PyExc_PersistenceError;$/;"	v	file:
PyExc_ProtectionError	pyparallel.c	/^static PyObject *PyExc_ProtectionError;$/;"	v	file:
PyExc_UnprotectedError	pyparallel.c	/^static PyObject *PyExc_UnprotectedError;$/;"	v	file:
PyExc_WaitError	pyparallel.c	/^static PyObject *PyExc_WaitError;$/;"	v	file:
PyExc_WaitTimeoutError	pyparallel.c	/^static PyObject *PyExc_WaitTimeoutError;$/;"	v	file:
PyFPE_counter	pyfpe.c	/^int PyFPE_counter = 0;$/;"	v
PyFPE_dummy	pyfpe.c	/^PyFPE_dummy(void *dummy)$/;"	f
PyFPE_jbuf	pyfpe.c	/^jmp_buf PyFPE_jbuf;$/;"	v
PyFilter_Type	bltinmodule.c	/^PyTypeObject PyFilter_Type = {$/;"	v
PyFuture_FromAST	future.c	/^PyFuture_FromAST(mod_ty mod, const char *filename)$/;"	f
PyGILState_Ensure	pystate.c	/^PyGILState_Ensure(void)$/;"	f
PyGILState_GetThisThreadState	pystate.c	/^PyGILState_GetThisThreadState(void)$/;"	f
PyGILState_Release	pystate.c	/^PyGILState_Release(PyGILState_STATE oldstate)$/;"	f
PyImport_AddModule	import.c	/^PyImport_AddModule(const char *name)$/;"	f
PyImport_AddModuleObject	import.c	/^PyImport_AddModuleObject(PyObject *name)$/;"	f
PyImport_AppendInittab	import.c	/^PyImport_AppendInittab(const char *name, PyObject* (*initfunc)(void))$/;"	f
PyImport_Cleanup	import.c	/^PyImport_Cleanup(void)$/;"	f
PyImport_ExecCodeModule	import.c	/^PyImport_ExecCodeModule(char *name, PyObject *co)$/;"	f
PyImport_ExecCodeModuleEx	import.c	/^PyImport_ExecCodeModuleEx(char *name, PyObject *co, char *pathname)$/;"	f
PyImport_ExecCodeModuleObject	import.c	/^PyImport_ExecCodeModuleObject(PyObject *name, PyObject *co, PyObject *pathname,$/;"	f
PyImport_ExecCodeModuleWithPathnames	import.c	/^PyImport_ExecCodeModuleWithPathnames(char *name, PyObject *co, char *pathname,$/;"	f
PyImport_ExtendInittab	import.c	/^PyImport_ExtendInittab(struct _inittab *newtab)$/;"	f
PyImport_FrozenModules	frozen.c	/^struct _frozen *PyImport_FrozenModules = _PyImport_FrozenModules;$/;"	v	typeref:struct:_frozen
PyImport_GetImporter	import.c	/^PyImport_GetImporter(PyObject *path) {$/;"	f
PyImport_GetMagicNumber	import.c	/^PyImport_GetMagicNumber(void)$/;"	f
PyImport_GetMagicTag	import.c	/^PyImport_GetMagicTag(void)$/;"	f
PyImport_GetModuleDict	import.c	/^PyImport_GetModuleDict(void)$/;"	f
PyImport_Import	import.c	/^PyImport_Import(PyObject *module_name)$/;"	f
PyImport_ImportFrozenModule	import.c	/^PyImport_ImportFrozenModule(char *name)$/;"	f
PyImport_ImportFrozenModuleObject	import.c	/^PyImport_ImportFrozenModuleObject(PyObject *name)$/;"	f
PyImport_ImportModule	import.c	/^PyImport_ImportModule(const char *name)$/;"	f
PyImport_ImportModuleLevel	import.c	/^PyImport_ImportModuleLevel(const char *name, PyObject *globals, PyObject *locals,$/;"	f
PyImport_ImportModuleLevelObject	import.c	/^PyImport_ImportModuleLevelObject(PyObject *name, PyObject *given_globals,$/;"	f
PyImport_ImportModuleNoBlock	import.c	/^PyImport_ImportModuleNoBlock(const char *name)$/;"	f
PyImport_Inittab	import.c	/^struct _inittab *PyImport_Inittab = _PyImport_Inittab;$/;"	v	typeref:struct:_inittab
PyImport_ReloadModule	import.c	/^PyImport_ReloadModule(PyObject *m)$/;"	f
PyInit__ast	Python-ast.c	/^PyInit__ast(void)$/;"	f
PyInit_imp	import.c	/^PyInit_imp(void)$/;"	f
PyInterpreterState_Clear	pystate.c	/^PyInterpreterState_Clear(PyInterpreterState *interp)$/;"	f
PyInterpreterState_Delete	pystate.c	/^PyInterpreterState_Delete(PyInterpreterState *interp)$/;"	f
PyInterpreterState_Head	pystate.c	/^PyInterpreterState_Head(void)$/;"	f
PyInterpreterState_New	pystate.c	/^PyInterpreterState_New(void)$/;"	f
PyInterpreterState_Next	pystate.c	/^PyInterpreterState_Next(PyInterpreterState *interp) {$/;"	f
PyInterpreterState_ThreadHead	pystate.c	/^PyInterpreterState_ThreadHead(PyInterpreterState *interp) {$/;"	f
PyLong_MARSHAL_BASE	marshal.c	154;"	d	file:
PyLong_MARSHAL_MASK	marshal.c	155;"	d	file:
PyLong_MARSHAL_RATIO	marshal.c	159;"	d	file:
PyLong_MARSHAL_SHIFT	marshal.c	153;"	d	file:
PyMUTEX_FINI	condvar.h	/^PyMUTEX_FINI(PyMUTEX_T *cs)$/;"	f
PyMUTEX_FINI	condvar.h	79;"	d
PyMUTEX_INIT	condvar.h	/^PyMUTEX_INIT(PyMUTEX_T *cs)$/;"	f
PyMUTEX_INIT	condvar.h	78;"	d
PyMUTEX_LOCK	condvar.h	/^PyMUTEX_LOCK(PyMUTEX_T *cs)$/;"	f
PyMUTEX_LOCK	condvar.h	80;"	d
PyMUTEX_T	condvar.h	/^typedef CRITICAL_SECTION PyMUTEX_T;$/;"	t
PyMUTEX_T	condvar.h	/^typedef SRWLOCK PyMUTEX_T;$/;"	t
PyMUTEX_T	condvar.h	77;"	d
PyMUTEX_UNLOCK	condvar.h	/^PyMUTEX_UNLOCK(PyMUTEX_T *cs)$/;"	f
PyMUTEX_UNLOCK	condvar.h	81;"	d
PyMap_Type	bltinmodule.c	/^PyTypeObject PyMap_Type = {$/;"	v
PyMarshal_Init	marshal.c	/^PyMarshal_Init(void)$/;"	f
PyMarshal_ReadLastObjectFromFile	marshal.c	/^PyMarshal_ReadLastObjectFromFile(FILE *fp)$/;"	f
PyMarshal_ReadLongFromFile	marshal.c	/^PyMarshal_ReadLongFromFile(FILE *fp)$/;"	f
PyMarshal_ReadObjectFromFile	marshal.c	/^PyMarshal_ReadObjectFromFile(FILE *fp)$/;"	f
PyMarshal_ReadObjectFromString	marshal.c	/^PyMarshal_ReadObjectFromString(char *str, Py_ssize_t len)$/;"	f
PyMarshal_ReadShortFromFile	marshal.c	/^PyMarshal_ReadShortFromFile(FILE *fp)$/;"	f
PyMarshal_WriteLongToFile	marshal.c	/^PyMarshal_WriteLongToFile(long x, FILE *fp, int version)$/;"	f
PyMarshal_WriteObjectToFile	marshal.c	/^PyMarshal_WriteObjectToFile(PyObject *x, FILE *fp, int version)$/;"	f
PyMarshal_WriteObjectToString	marshal.c	/^PyMarshal_WriteObjectToString(PyObject *x, int version)$/;"	f
PyMember_GetOne	structmember.c	/^PyMember_GetOne(const char *addr, PyMemberDef *l)$/;"	f
PyMember_SetOne	structmember.c	/^PyMember_SetOne(char *addr, PyMemberDef *l, PyObject *v)$/;"	f
PyModule_AddIntConstant	modsupport.c	/^PyModule_AddIntConstant(PyObject *m, const char *name, long value)$/;"	f
PyModule_AddObject	modsupport.c	/^PyModule_AddObject(PyObject *m, const char *name, PyObject *o)$/;"	f
PyModule_AddStringConstant	modsupport.c	/^PyModule_AddStringConstant(PyObject *m, const char *name, const char *value)$/;"	f
PyModule_GetWarningsModule	pythonrun.c	/^PyModule_GetWarningsModule(void)$/;"	f
PyNode_Compile	compile.c	/^PyNode_Compile(struct _node *n, const char *filename)$/;"	f
PyOS_CheckStack	pythonrun.c	/^PyOS_CheckStack(void)$/;"	f
PyOS_double_to_string	pystrtod.c	/^PyAPI_FUNC(char *) PyOS_double_to_string(double val,$/;"	f
PyOS_getsig	pythonrun.c	/^PyOS_getsig(int sig)$/;"	f
PyOS_mystricmp	pystrcmp.c	/^PyOS_mystricmp(const char *s1, const char *s2)$/;"	f
PyOS_mystrnicmp	pystrcmp.c	/^PyOS_mystrnicmp(const char *s1, const char *s2, Py_ssize_t size)$/;"	f
PyOS_setsig	pythonrun.c	/^PyOS_setsig(int sig, PyOS_sighandler_t handler)$/;"	f
PyOS_snprintf	mysnprintf.c	/^PyOS_snprintf(char *str, size_t size, const  char  *format, ...)$/;"	f
PyOS_string_to_double	pystrtod.c	/^PyOS_string_to_double(const char *s,$/;"	f
PyOS_strtol	mystrtoul.c	/^PyOS_strtol(char *str, char **ptr, int base)$/;"	f
PyOS_strtoul	mystrtoul.c	/^PyOS_strtoul(register char *str, char **ptr, int base)$/;"	f
PyOS_vsnprintf	mysnprintf.c	/^PyOS_vsnprintf(char *str, size_t size, const char  *format, va_list va)$/;"	f
PyObject2WSABUF	pyparallel.c	/^PyObject2WSABUF(PyObject *o, WSABUF *w)$/;"	f	file:
PyObject_Clone	pyparallel.c	/^PyObject_Clone(PyObject *src, const char *errmsg)$/;"	f
PyParallelCallback	pyparallel_private.h	/^typedef struct _PyParallelCallback PyParallelCallback, Callback;$/;"	t	typeref:struct:_PyParallelCallback
PyParallelContext	pyparallel_private.h	/^typedef struct _PyParallelContext PyParallelContext, WorkContext, Context;$/;"	t	typeref:struct:_PyParallelContext
PyParallelContext	pyparallel_private.h	/^} PyParallelContext, Context;$/;"	t	typeref:struct:_PyParallelContext
PyParallelContextStats	pyparallel_private.h	/^typedef struct _PyParallelContextStats PyParallelContextStats, Stats;$/;"	t	typeref:struct:_PyParallelContextStats
PyParallelContextStats	pyparallel_private.h	/^} PyParallelContextStats, Stats;$/;"	t	typeref:struct:_PyParallelContextStats
PyParallelHeap	pyparallel_private.h	/^typedef struct _PyParallelHeap PyParallelHeap, Heap;$/;"	t	typeref:struct:_PyParallelHeap
PyParallelHeap	pyparallel_private.h	/^} PyParallelHeap, Heap;$/;"	t	typeref:struct:_PyParallelHeap
PyParallelIOContext	pyparallel_private.h	/^typedef struct _PyParallelIOContext PyParallelIOContext, IOContext;$/;"	t	typeref:struct:_PyParallelIOContext
PyParallelIOContext	pyparallel_private.h	/^} PyParallelIOContext, IOContext;$/;"	t	typeref:struct:_PyParallelIOContext
PyParallelIOContextStats	pyparallel_private.h	/^typedef struct _PyParallelIOContextStats PyParallelIOContextStats, IOStats;$/;"	t	typeref:struct:_PyParallelIOContextStats
PyParser_ASTFromFile	pythonrun.c	/^PyParser_ASTFromFile(FILE *fp, const char *filename, const char* enc,$/;"	f
PyParser_ASTFromString	pythonrun.c	/^PyParser_ASTFromString(const char *s, const char *filename, int start,$/;"	f
PyParser_ClearError	pythonrun.c	/^PyParser_ClearError(perrdetail *err)$/;"	f
PyParser_SetError	pythonrun.c	/^PyParser_SetError(perrdetail *err)$/;"	f
PyParser_SimpleParseFile	pythonrun.c	/^PyParser_SimpleParseFile(FILE *fp, const char *filename, int start)$/;"	f
PyParser_SimpleParseFile	pythonrun.c	2665;"	d	file:
PyParser_SimpleParseFileFlags	pythonrun.c	/^PyParser_SimpleParseFileFlags(FILE *fp, const char *filename, int start, int flags)$/;"	f
PyParser_SimpleParseString	pythonrun.c	/^PyParser_SimpleParseString(const char *str, int start)$/;"	f
PyParser_SimpleParseString	pythonrun.c	2672;"	d	file:
PyParser_SimpleParseStringFilename	pythonrun.c	/^PyParser_SimpleParseStringFilename(const char *str, const char *filename, int start)$/;"	f
PyParser_SimpleParseStringFlags	pythonrun.c	/^PyParser_SimpleParseStringFlags(const char *str, int start, int flags)$/;"	f
PyParser_SimpleParseStringFlagsFilename	pythonrun.c	/^PyParser_SimpleParseStringFlagsFilename(const char *str, const char *filename,$/;"	f
PyRWLock	pyparallel_private.h	123;"	d
PyRWLock_CREATE	pyparallel_private.h	126;"	d
PyRWLock_DESTROY	pyparallel_private.h	128;"	d
PyRWLock_INIT	pyparallel_private.h	127;"	d
PyRun_AnyFile	pythonrun.c	/^PyRun_AnyFile(FILE *fp, const char *name)$/;"	f
PyRun_AnyFile	pythonrun.c	2679;"	d	file:
PyRun_AnyFileEx	pythonrun.c	/^PyRun_AnyFileEx(FILE *fp, const char *name, int closeit)$/;"	f
PyRun_AnyFileEx	pythonrun.c	2686;"	d	file:
PyRun_AnyFileExFlags	pythonrun.c	/^PyRun_AnyFileExFlags(FILE *fp, const char *filename, int closeit,$/;"	f
PyRun_AnyFileFlags	pythonrun.c	/^PyRun_AnyFileFlags(FILE *fp, const char *name, PyCompilerFlags *flags)$/;"	f
PyRun_AnyFileFlags	pythonrun.c	2693;"	d	file:
PyRun_File	pythonrun.c	/^PyRun_File(FILE *fp, const char *p, int s, PyObject *g, PyObject *l)$/;"	f
PyRun_File	pythonrun.c	2700;"	d	file:
PyRun_FileEx	pythonrun.c	/^PyRun_FileEx(FILE *fp, const char *p, int s, PyObject *g, PyObject *l, int c)$/;"	f
PyRun_FileEx	pythonrun.c	2707;"	d	file:
PyRun_FileExFlags	pythonrun.c	/^PyRun_FileExFlags(FILE *fp, const char *filename, int start, PyObject *globals,$/;"	f
PyRun_FileFlags	pythonrun.c	/^PyRun_FileFlags(FILE *fp, const char *p, int s, PyObject *g, PyObject *l,$/;"	f
PyRun_FileFlags	pythonrun.c	2714;"	d	file:
PyRun_InteractiveLoop	pythonrun.c	/^PyRun_InteractiveLoop(FILE *f, const char *p)$/;"	f
PyRun_InteractiveLoop	pythonrun.c	2773;"	d	file:
PyRun_InteractiveLoopFlags	pythonrun.c	/^PyRun_InteractiveLoopFlags(FILE *fp, const char *filename, PyCompilerFlags *flags)$/;"	f
PyRun_InteractiveOne	pythonrun.c	/^PyRun_InteractiveOne(FILE *f, const char *p)$/;"	f
PyRun_InteractiveOne	pythonrun.c	2766;"	d	file:
PyRun_InteractiveOneFlags	pythonrun.c	/^PyRun_InteractiveOneFlags(FILE *fp, const char *filename, PyCompilerFlags *flags)$/;"	f
PyRun_SimpleFile	pythonrun.c	/^PyRun_SimpleFile(FILE *f, const char *p)$/;"	f
PyRun_SimpleFile	pythonrun.c	2722;"	d	file:
PyRun_SimpleFileEx	pythonrun.c	/^PyRun_SimpleFileEx(FILE *f, const char *p, int c)$/;"	f
PyRun_SimpleFileEx	pythonrun.c	2729;"	d	file:
PyRun_SimpleFileExFlags	pythonrun.c	/^PyRun_SimpleFileExFlags(FILE *fp, const char *filename, int closeit,$/;"	f
PyRun_SimpleString	pythonrun.c	/^PyRun_SimpleString(const char *s)$/;"	f
PyRun_SimpleString	pythonrun.c	2744;"	d	file:
PyRun_SimpleStringFlags	pythonrun.c	/^PyRun_SimpleStringFlags(const char *command, PyCompilerFlags *flags)$/;"	f
PyRun_String	pythonrun.c	/^PyRun_String(const char *str, int s, PyObject *g, PyObject *l)$/;"	f
PyRun_String	pythonrun.c	2737;"	d	file:
PyRun_StringFlags	pythonrun.c	/^PyRun_StringFlags(const char *str, int start, PyObject *globals,$/;"	f
PySTEntry_Type	symtable.c	/^PyTypeObject PySTEntry_Type = {$/;"	v
PyST_GetScope	symtable.c	/^PyST_GetScope(PySTEntryObject *ste, PyObject *name)$/;"	f
PySocketModule	pyparallel_private.h	/^static PySocketModule_APIObject PySocketModule;$/;"	v
PySocket_Type	pyparallel_private.h	1257;"	d
PyState_AddModule	pystate.c	/^PyState_AddModule(PyObject* module, struct PyModuleDef* def)$/;"	f
PyState_FindModule	pystate.c	/^PyState_FindModule(struct PyModuleDef* module)$/;"	f
PyState_RemoveModule	pystate.c	/^PyState_RemoveModule(struct PyModuleDef* def)$/;"	f
PySymtable_Build	symtable.c	/^PySymtable_Build(mod_ty mod, const char *filename, PyFutureFeatures *future)$/;"	f
PySymtable_Free	symtable.c	/^PySymtable_Free(struct symtable *st)$/;"	f
PySymtable_Lookup	symtable.c	/^PySymtable_Lookup(struct symtable *st, void *key)$/;"	f
PySys_AddWarnOption	sysmodule.c	/^PySys_AddWarnOption(const wchar_t *s)$/;"	f
PySys_AddWarnOptionUnicode	sysmodule.c	/^PySys_AddWarnOptionUnicode(PyObject *unicode)$/;"	f
PySys_AddXOption	sysmodule.c	/^PySys_AddXOption(const wchar_t *s)$/;"	f
PySys_FormatStderr	sysmodule.c	/^PySys_FormatStderr(const char *format, ...)$/;"	f
PySys_FormatStdout	sysmodule.c	/^PySys_FormatStdout(const char *format, ...)$/;"	f
PySys_GetObject	sysmodule.c	/^PySys_GetObject(const char *name)$/;"	f
PySys_GetXOptions	sysmodule.c	/^PySys_GetXOptions(void)$/;"	f
PySys_HasWarnOptions	sysmodule.c	/^PySys_HasWarnOptions(void)$/;"	f
PySys_ResetWarnOptions	sysmodule.c	/^PySys_ResetWarnOptions(void)$/;"	f
PySys_SetArgv	sysmodule.c	/^PySys_SetArgv(int argc, wchar_t **argv)$/;"	f
PySys_SetArgvEx	sysmodule.c	/^PySys_SetArgvEx(int argc, wchar_t **argv, int updatepath)$/;"	f
PySys_SetObject	sysmodule.c	/^PySys_SetObject(const char *name, PyObject *v)$/;"	f
PySys_SetPath	sysmodule.c	/^PySys_SetPath(const wchar_t *path)$/;"	f
PySys_WriteStderr	sysmodule.c	/^PySys_WriteStderr(const char *format, ...)$/;"	f
PySys_WriteStdout	sysmodule.c	/^PySys_WriteStdout(const char *format, ...)$/;"	f
PyThreadState_Clear	pystate.c	/^PyThreadState_Clear(PyThreadState *tstate)$/;"	f
PyThreadState_Delete	pystate.c	/^PyThreadState_Delete(PyThreadState *tstate)$/;"	f
PyThreadState_DeleteCurrent	pystate.c	/^PyThreadState_DeleteCurrent()$/;"	f
PyThreadState_Get	pystate.c	/^PyThreadState_Get(void)$/;"	f
PyThreadState_GetDict	pystate.c	/^PyThreadState_GetDict(void)$/;"	f
PyThreadState_IsCurrent	pystate.c	/^PyThreadState_IsCurrent(PyThreadState *tstate)$/;"	f	file:
PyThreadState_New	pystate.c	/^PyThreadState_New(PyInterpreterState *interp)$/;"	f
PyThreadState_Next	pystate.c	/^PyThreadState_Next(PyThreadState *tstate) {$/;"	f
PyThreadState_SetAsyncExc	pystate.c	/^PyThreadState_SetAsyncExc(long id, PyObject *exc) {$/;"	f
PyThreadState_Swap	pystate.c	/^PyThreadState_Swap(PyThreadState *newts)$/;"	f
PyThreadState_XGet	pystate.c	/^PyThreadState_XGet(void)$/;"	f
PyThread_GetInfo	thread.c	/^PyThread_GetInfo(void)$/;"	f
PyThread_ReInitTLS	thread.c	/^PyThread_ReInitTLS(void)$/;"	f
PyThread_ReInitTLS	thread_nt.h	/^PyThread_ReInitTLS(void)$/;"	f
PyThread_ReInitTLS	thread_pthread.h	/^PyThread_ReInitTLS(void)$/;"	f
PyThread__init_thread	thread_foobar.h	/^PyThread__init_thread(void)$/;"	f
PyThread__init_thread	thread_nt.h	/^PyThread__init_thread(void)$/;"	f
PyThread__init_thread	thread_os2.h	/^PyThread__init_thread(void)$/;"	f
PyThread__init_thread	thread_pth.h	/^static void PyThread__init_thread(void)$/;"	f
PyThread__init_thread	thread_pthread.h	/^PyThread__init_thread(void)$/;"	f
PyThread_acquire_lock	thread_foobar.h	/^PyThread_acquire_lock(PyThread_type_lock lock, int waitflag)$/;"	f
PyThread_acquire_lock	thread_nt.h	/^PyThread_acquire_lock(PyThread_type_lock aLock, int waitflag)$/;"	f
PyThread_acquire_lock	thread_os2.h	/^PyThread_acquire_lock(PyThread_type_lock aLock, int waitflag)$/;"	f
PyThread_acquire_lock	thread_pth.h	/^int PyThread_acquire_lock(PyThread_type_lock lock, int waitflag)$/;"	f
PyThread_acquire_lock	thread_pthread.h	/^PyThread_acquire_lock(PyThread_type_lock lock, int waitflag)$/;"	f
PyThread_acquire_lock_timed	thread_nt.h	/^PyThread_acquire_lock_timed(PyThread_type_lock aLock,$/;"	f
PyThread_acquire_lock_timed	thread_pthread.h	/^PyThread_acquire_lock_timed(PyThread_type_lock lock, PY_TIMEOUT_T microseconds,$/;"	f
PyThread_allocate_lock	thread_foobar.h	/^PyThread_allocate_lock(void)$/;"	f
PyThread_allocate_lock	thread_nt.h	/^PyThread_allocate_lock(void)$/;"	f
PyThread_allocate_lock	thread_os2.h	/^PyThread_allocate_lock(void)$/;"	f
PyThread_allocate_lock	thread_pth.h	/^PyThread_type_lock PyThread_allocate_lock(void)$/;"	f
PyThread_allocate_lock	thread_pthread.h	/^PyThread_allocate_lock(void)$/;"	f
PyThread_attr	thread_pth.h	/^pth_attr_t PyThread_attr;$/;"	v
PyThread_create_key	thread.c	/^PyThread_create_key(void)$/;"	f
PyThread_create_key	thread_nt.h	/^PyThread_create_key(void)$/;"	f
PyThread_create_key	thread_pthread.h	/^PyThread_create_key(void)$/;"	f
PyThread_delete_key	thread.c	/^PyThread_delete_key(int key)$/;"	f
PyThread_delete_key	thread_nt.h	/^PyThread_delete_key(int key)$/;"	f
PyThread_delete_key	thread_pthread.h	/^PyThread_delete_key(int key)$/;"	f
PyThread_delete_key_value	thread.c	/^PyThread_delete_key_value(int key)$/;"	f
PyThread_delete_key_value	thread_nt.h	/^PyThread_delete_key_value(int key)$/;"	f
PyThread_delete_key_value	thread_pthread.h	/^PyThread_delete_key_value(int key)$/;"	f
PyThread_exit_thread	thread_foobar.h	/^PyThread_exit_thread(void)$/;"	f
PyThread_exit_thread	thread_nt.h	/^PyThread_exit_thread(void)$/;"	f
PyThread_exit_thread	thread_os2.h	/^PyThread_exit_thread(void)$/;"	f
PyThread_exit_thread	thread_pth.h	/^void PyThread_exit_thread(void)$/;"	f
PyThread_exit_thread	thread_pthread.h	/^PyThread_exit_thread(void)$/;"	f
PyThread_free_lock	thread_foobar.h	/^PyThread_free_lock(PyThread_type_lock lock)$/;"	f
PyThread_free_lock	thread_nt.h	/^PyThread_free_lock(PyThread_type_lock aLock)$/;"	f
PyThread_free_lock	thread_os2.h	/^PyThread_free_lock(PyThread_type_lock aLock)$/;"	f
PyThread_free_lock	thread_pth.h	/^void PyThread_free_lock(PyThread_type_lock lock)$/;"	f
PyThread_free_lock	thread_pthread.h	/^PyThread_free_lock(PyThread_type_lock lock)$/;"	f
PyThread_get_key_value	thread.c	/^PyThread_get_key_value(int key)$/;"	f
PyThread_get_key_value	thread_nt.h	/^PyThread_get_key_value(int key)$/;"	f
PyThread_get_key_value	thread_pthread.h	/^PyThread_get_key_value(int key)$/;"	f
PyThread_get_stacksize	thread.c	/^PyThread_get_stacksize(void)$/;"	f
PyThread_get_thread_ident	thread_foobar.h	/^PyThread_get_thread_ident(void)$/;"	f
PyThread_get_thread_ident	thread_nt.h	/^PyThread_get_thread_ident(void)$/;"	f
PyThread_get_thread_ident	thread_os2.h	/^PyThread_get_thread_ident(void)$/;"	f
PyThread_get_thread_ident	thread_pth.h	/^long PyThread_get_thread_ident(void)$/;"	f
PyThread_get_thread_ident	thread_pthread.h	/^PyThread_get_thread_ident(void)$/;"	f
PyThread_init_thread	thread.c	/^PyThread_init_thread(void)$/;"	f
PyThread_release_lock	thread_foobar.h	/^PyThread_release_lock(PyThread_type_lock lock)$/;"	f
PyThread_release_lock	thread_nt.h	/^PyThread_release_lock(PyThread_type_lock aLock)$/;"	f
PyThread_release_lock	thread_os2.h	/^PyThread_release_lock(PyThread_type_lock aLock)$/;"	f
PyThread_release_lock	thread_pth.h	/^void PyThread_release_lock(PyThread_type_lock lock)$/;"	f
PyThread_release_lock	thread_pthread.h	/^PyThread_release_lock(PyThread_type_lock lock)$/;"	f
PyThread_set_key_value	thread.c	/^PyThread_set_key_value(int key, void *value)$/;"	f
PyThread_set_key_value	thread_nt.h	/^PyThread_set_key_value(int key, void *value)$/;"	f
PyThread_set_key_value	thread_pthread.h	/^PyThread_set_key_value(int key, void *value)$/;"	f
PyThread_set_stacksize	thread.c	/^PyThread_set_stacksize(size_t size)$/;"	f
PyThread_start_new_thread	thread_foobar.h	/^PyThread_start_new_thread(void (*func)(void *), void *arg)$/;"	f
PyThread_start_new_thread	thread_nt.h	/^PyThread_start_new_thread(void (*func)(void *), void *arg)$/;"	f
PyThread_start_new_thread	thread_os2.h	/^PyThread_start_new_thread(void (*func)(void *), void *arg)$/;"	f
PyThread_start_new_thread	thread_pth.h	/^long PyThread_start_new_thread(void (*func)(void *), void *arg)$/;"	f
PyThread_start_new_thread	thread_pthread.h	/^PyThread_start_new_thread(void (*func)(void *), void *arg)$/;"	f
PyTraceBack_Here	traceback.c	/^PyTraceBack_Here(PyFrameObject *frame)$/;"	f
PyTraceBack_LIMIT	traceback.c	389;"	d	file:
PyTraceBack_Print	traceback.c	/^PyTraceBack_Print(PyObject *v, PyObject *f)$/;"	f
PyTraceBack_Type	traceback.c	/^PyTypeObject PyTraceBack_Type = {$/;"	v
PyXListObject	pyparallel_private.h	/^} PyXListObject;$/;"	t	typeref:struct:_PyXList
PyXList_Check	pyparallel_private.h	1432;"	d
PyXList_CheckExact	pyparallel_private.h	1433;"	d
PyXList_Length	pyparallel.c	/^PyXList_Length(PyObject *self)$/;"	f
PyXList_New	pyparallel.c	/^PyXList_New(void)$/;"	f
PyXList_Pop	pyparallel.c	/^PyXList_Pop(PyObject *xlist)$/;"	f
PyXList_Type	pyparallel.c	/^static PyTypeObject PyXList_Type = {$/;"	v	file:
PyZip_Type	bltinmodule.c	/^PyTypeObject PyZip_Type = {$/;"	v
Py_ASPX	pyparallel_private.h	111;"	d
Py_AddPendingCall	ceval.c	/^Py_AddPendingCall(int (*func)(void *), void *arg)$/;"	f
Py_AtExit	pythonrun.c	/^int Py_AtExit(void (*func)(void))$/;"	f
Py_BuildValue	modsupport.c	/^Py_BuildValue(const char *format, ...)$/;"	f
Py_BytesWarningFlag	pythonrun.c	/^int Py_BytesWarningFlag; \/* Warn on str(bytes) and str(buffer) *\/$/;"	v
Py_CompileString	pythonrun.c	/^Py_CompileString(const char *str, const char *p, int s)$/;"	f
Py_CompileString	pythonrun.c	2089;"	d	file:
Py_CompileString	pythonrun.c	2751;"	d	file:
Py_CompileStringExFlags	pythonrun.c	/^Py_CompileStringExFlags(const char *str, const char *filename, int start,$/;"	f
Py_CompileStringFlags	pythonrun.c	/^Py_CompileStringFlags(const char *str, const char *p, int s,$/;"	f
Py_CompileStringFlags	pythonrun.c	2758;"	d	file:
Py_DEFAULT_RECURSION_LIMIT	ceval.c	724;"	d	file:
Py_DebugFlag	pythonrun.c	/^int Py_DebugFlag; \/* Needed by parser.c *\/$/;"	v
Py_DontWriteBytecodeFlag	pythonrun.c	/^int Py_DontWriteBytecodeFlag; \/* Suppress writing bytecode files (*.py[co]) *\/$/;"	v
Py_EVENT	pyparallel_private.h	117;"	d
Py_EndInterpreter	pythonrun.c	/^Py_EndInterpreter(PyThreadState *tstate)$/;"	f
Py_Exit	pythonrun.c	/^Py_Exit(int sts)$/;"	f
Py_FatalError	pythonrun.c	/^Py_FatalError(const char *msg)$/;"	f
Py_FdIsInteractive	pythonrun.c	/^Py_FdIsInteractive(FILE *fp, const char *filename)$/;"	f
Py_FileSystemDefaultEncoding	bltinmodule.c	/^const char *Py_FileSystemDefaultEncoding = "mbcs";$/;"	v
Py_FileSystemDefaultEncoding	bltinmodule.c	/^const char *Py_FileSystemDefaultEncoding = "utf-8";$/;"	v
Py_FileSystemDefaultEncoding	bltinmodule.c	/^const char *Py_FileSystemDefaultEncoding = NULL; \/* set by initfsencoding() *\/$/;"	v
Py_Finalize	pythonrun.c	/^Py_Finalize(void)$/;"	f
Py_FrozenFlag	pythonrun.c	/^int Py_FrozenFlag; \/* Needed by getpath.c *\/$/;"	v
Py_FrozenMain	frozenmain.c	/^Py_FrozenMain(int argc, char **argv)$/;"	f
Py_GetCompiler	getcompiler.c	/^Py_GetCompiler(void)$/;"	f
Py_GetCopyright	getcopyright.c	/^Py_GetCopyright(void)$/;"	f
Py_GetPlatform	getplatform.c	/^Py_GetPlatform(void)$/;"	f
Py_GetProgramName	pythonrun.c	/^Py_GetProgramName(void)$/;"	f
Py_GetPythonHome	pythonrun.c	/^Py_GetPythonHome(void)$/;"	f
Py_GetRecursionLimit	ceval.c	/^Py_GetRecursionLimit(void)$/;"	f
Py_GetVersion	getversion.c	/^Py_GetVersion(void)$/;"	f
Py_HAVE_CONDVAR	condvar.h	119;"	d
Py_HAVE_CONDVAR	condvar.h	58;"	d
Py_HAVE_NATIVE_TLS	thread_nt.h	374;"	d
Py_HAVE_NATIVE_TLS	thread_pthread.h	604;"	d
Py_HasFileSystemDefaultEncoding	bltinmodule.c	/^int Py_HasFileSystemDefaultEncoding = 0;$/;"	v
Py_HasFileSystemDefaultEncoding	bltinmodule.c	/^int Py_HasFileSystemDefaultEncoding = 1;$/;"	v
Py_HashRandomizationFlag	pythonrun.c	/^int Py_HashRandomizationFlag = 0; \/* for -R and PYTHONHASHSEED *\/$/;"	v
Py_IMPORTDL_H	importdl.h	2;"	d
Py_IgnoreEnvironmentFlag	pythonrun.c	/^int Py_IgnoreEnvironmentFlag; \/* e.g. PYTHONPATH, PYTHONHOME *\/$/;"	v
Py_Initialize	pythonrun.c	/^Py_Initialize(void)$/;"	f
Py_InitializeEx	pythonrun.c	/^Py_InitializeEx(int install_sigs)$/;"	f
Py_InspectFlag	pythonrun.c	/^int Py_InspectFlag; \/* Needed to determine whether to exit at SystemExit *\/$/;"	v
Py_InteractiveFlag	pythonrun.c	/^int Py_InteractiveFlag; \/* Needed by Py_FdIsInteractive() below *\/$/;"	v
Py_IsInitialized	pythonrun.c	/^Py_IsInitialized(void)$/;"	f
Py_MainProcessId	pyparallel.c	/^long Py_MainProcessId = -1;$/;"	v
Py_MainThreadId	pyparallel.c	/^long Py_MainThreadId  = -1;$/;"	v
Py_MakePendingCalls	ceval.c	/^Py_MakePendingCalls(void)$/;"	f
Py_NewInterpreter	pythonrun.c	/^Py_NewInterpreter(void)$/;"	f
Py_NoSiteFlag	pythonrun.c	/^int Py_NoSiteFlag; \/* Suppress 'import site' *\/$/;"	v
Py_NoUserSiteDirectory	pythonrun.c	/^int Py_NoUserSiteDirectory = 0; \/* for -s and site.py *\/$/;"	v
Py_OptimizeFlag	compile.c	/^int Py_OptimizeFlag = 0;$/;"	v
Py_PXCB	pyparallel.c	760;"	d	file:
Py_ParallelContextsEnabled	pyparallel.c	/^long Py_ParallelContextsEnabled = -1;$/;"	v
Py_QuietFlag	pythonrun.c	/^int Py_QuietFlag; \/* Needed by sysmodule.c *\/$/;"	v
Py_RETURN_BOOL	pyparallel_private.h	1279;"	d
Py_RWLOCK	pyparallel_private.h	124;"	d
Py_SetProgramName	pythonrun.c	/^Py_SetProgramName(wchar_t *pn)$/;"	f
Py_SetPythonHome	pythonrun.c	/^Py_SetPythonHome(wchar_t *home)$/;"	f
Py_SetRecursionLimit	ceval.c	/^Py_SetRecursionLimit(int new_limit)$/;"	f
Py_SymtableString	pythonrun.c	/^Py_SymtableString(const char *str, const char *filename, int start)$/;"	f
Py_UnbufferedStdioFlag	pythonrun.c	/^int Py_UnbufferedStdioFlag = 0; \/* Unbuffered binary std{in,out,err} *\/$/;"	v
Py_UseClassExceptionsFlag	pythonrun.c	/^int Py_UseClassExceptionsFlag = 1; \/* Needed by bltinmodule.c: deprecated *\/$/;"	v
Py_VaBuildValue	modsupport.c	/^Py_VaBuildValue(const char *format, va_list va)$/;"	f
Py_VerboseFlag	pythonrun.c	/^int Py_VerboseFlag; \/* Needed by import.c *\/$/;"	v
Py_hexdigits	codecs.c	/^const char *Py_hexdigits = "0123456789abcdef";$/;"	v
QUOTE	sysmodule.c	1488;"	d	file:
QUOTE	sysmodule.c	1495;"	d	file:
Quick_max	dtoa.c	269;"	d	file:
R2B	pyparallel_private.h	220;"	d
R2OL	pyparallel_private.h	219;"	d
R2W	pyparallel_private.h	216;"	d
RBUF	pyparallel_private.h	/^typedef struct _RBUF RBUF;$/;"	t	typeref:struct:_RBUF
RBUF	pyparallel_private.h	/^} RBUF;$/;"	t	typeref:struct:_RBUF
RBUF_ALIGNED_SIZE	pyparallel_private.h	214;"	d
READ_LOCK	pyparallel_private.h	1162;"	d
READ_TIMESTAMP	ceval.c	23;"	d	file:
READ_TIMESTAMP	ceval.c	35;"	d	file:
READ_TIMESTAMP	ceval.c	58;"	d	file:
READ_TIMESTAMP	ceval.c	68;"	d	file:
READ_TIMESTAMP	ceval.c	75;"	d	file:
READ_UNLOCK	pyparallel_private.h	1171;"	d
READ_spec	formatter_unicode.c	155;"	d	file:
REASONABLE_FILE_LIMIT	marshal.c	1184;"	d	file:
REASONABLE_FILE_LIMIT	marshal.c	1204;"	d	file:
RESET_GIL_DROP_REQUEST	ceval.c	248;"	d	file:
RETURN_ERR_OCCURRED	getargs.c	1253;"	d	file:
RETURN_ERR_OCCURRED	getargs.c	569;"	d	file:
RFILE	marshal.c	/^typedef WFILE RFILE; \/* Same struct with different invariants *\/$/;"	t	file:
RShift_singleton	Python-ast.c	/^*RShift_singleton, *BitOr_singleton, *BitXor_singleton, *BitAnd_singleton,$/;"	v	file:
RShift_type	Python-ast.c	/^static PyTypeObject *RShift_type;$/;"	v	file:
RTLD_LAZY	pystate.c	21;"	d	file:
Raise	Python-ast.c	/^Raise(expr_ty exc, expr_ty cause, int lineno, int col_offset, PyArena *arena)$/;"	f
Raise_fields	Python-ast.c	/^static char *Raise_fields[]={$/;"	v	file:
Raise_type	Python-ast.c	/^static PyTypeObject *Raise_type;$/;"	v	file:
Return	Python-ast.c	/^Return(expr_ty value, int lineno, int col_offset, PyArena *arena)$/;"	f
Return_fields	Python-ast.c	/^static char *Return_fields[]={$/;"	v	file:
Return_type	Python-ast.c	/^static PyTypeObject *Return_type;$/;"	v	file:
Rounding	dtoa.c	280;"	d	file:
RunningOnValgrind	dynamic_annotations.c	/^int RunningOnValgrind(void) {$/;"	f
S2OL	pyparallel_private.h	193;"	d
S2W	pyparallel_private.h	190;"	d
SBUF	pyparallel_private.h	/^} SBUF;$/;"	t	typeref:struct:_SBUF
SBUF_ALIGNED_SIZE	pyparallel_private.h	188;"	d
SECOND	ceval.c	1091;"	d	file:
SETARG	peephole.c	21;"	d	file:
SETBUILTIN	bltinmodule.c	2433;"	d	file:
SETBUILTIN	bltinmodule.c	2478;"	d	file:
SETLOCAL	ceval.c	1133;"	d	file:
SET_FOURTH	ceval.c	1098;"	d	file:
SET_GIL_DROP_REQUEST	ceval.c	242;"	d	file:
SET_SCOPE	symtable.c	395;"	d	file:
SET_SCOPE	symtable.c	495;"	d	file:
SET_SECOND	ceval.c	1096;"	d	file:
SET_SYS_FROM_STRING	sysmodule.c	1574;"	d	file:
SET_SYS_FROM_STRING	sysmodule.c	1727;"	d	file:
SET_THIRD	ceval.c	1097;"	d	file:
SET_THREAD_SIGMASK	thread_pthread.h	97;"	d
SET_THREAD_SIGMASK	thread_pthread.h	99;"	d
SET_TOP	ceval.c	1095;"	d	file:
SET_VALUE	ceval.c	1099;"	d	file:
SIGNAL_ASYNC_EXC	ceval.c	269;"	d	file:
SIGNAL_PENDING_CALLS	ceval.c	257;"	d	file:
SIZE	frozen.c	29;"	d	file:
SIZE32_MAX	marshal.c	127;"	d	file:
STACKADJ	ceval.c	1110;"	d	file:
STACK_LEVEL	ceval.c	1088;"	d	file:
STATIC_LOCALE_INFO_INIT	formatter_unicode.c	361;"	d	file:
STATS	pyparallel_private.h	737;"	d
STORE_SIZE	getargs.c	1251;"	d	file:
STORE_SIZE	getargs.c	557;"	d	file:
STRIFY	sysmodule.c	1489;"	d	file:
STRIFY	sysmodule.c	1496;"	d	file:
STRTOD_DIGLIM	dtoa.c	200;"	d	file:
Scale_Bit	dtoa.c	1221;"	d	file:
Set	Python-ast.c	/^Set(asdl_seq * elts, int lineno, int col_offset, PyArena *arena)$/;"	f
SetComp	Python-ast.c	/^SetComp(expr_ty elt, asdl_seq * generators, int lineno, int col_offset, PyArena$/;"	f
SetComp_fields	Python-ast.c	/^static char *SetComp_fields[]={$/;"	v	file:
SetComp_type	Python-ast.c	/^static PyTypeObject *SetComp_type;$/;"	v	file:
SetFlag	sysmodule.c	1387;"	d	file:
SetFlag	sysmodule.c	1407;"	d	file:
SetIntItem	sysmodule.c	1465;"	d	file:
SetIntItem	sysmodule.c	1475;"	d	file:
SetStrItem	sysmodule.c	1467;"	d	file:
SetStrItem	sysmodule.c	1476;"	d	file:
Set_fields	Python-ast.c	/^static char *Set_fields[]={$/;"	v	file:
Set_type	Python-ast.c	/^static PyTypeObject *Set_type;$/;"	v	file:
Sign_bit	dtoa.c	265;"	d	file:
Slice	Python-ast.c	/^Slice(expr_ty lower, expr_ty upper, expr_ty step, PyArena *arena)$/;"	f
Slice_fields	Python-ast.c	/^static char *Slice_fields[]={$/;"	v	file:
Slice_type	Python-ast.c	/^static PyTypeObject *Slice_type;$/;"	v	file:
Starred	Python-ast.c	/^Starred(expr_ty value, expr_context_ty ctx, int lineno, int col_offset, PyArena$/;"	f
Starred_fields	Python-ast.c	/^static char *Starred_fields[]={$/;"	v	file:
Starred_type	Python-ast.c	/^static PyTypeObject *Starred_type;$/;"	v	file:
Stats	pyparallel_private.h	/^typedef struct _PyParallelContextStats PyParallelContextStats, Stats;$/;"	t	typeref:struct:
Stats	pyparallel_private.h	/^} PyParallelContextStats, Stats;$/;"	t	typeref:struct:_PyParallelContextStats
Store_singleton	Python-ast.c	/^static PyObject *Load_singleton, *Store_singleton, *Del_singleton,$/;"	v	file:
Store_type	Python-ast.c	/^static PyTypeObject *Store_type;$/;"	v	file:
Storeinc	dtoa.c	232;"	d	file:
Storeinc	dtoa.c	235;"	d	file:
Str	Python-ast.c	/^Str(string s, int lineno, int col_offset, PyArena *arena)$/;"	f
Str_fields	Python-ast.c	/^static char *Str_fields[]={$/;"	v	file:
Str_type	Python-ast.c	/^static PyTypeObject *Str_type;$/;"	v	file:
Sub_singleton	Python-ast.c	/^static PyObject *Add_singleton, *Sub_singleton, *Mult_singleton,$/;"	v	file:
Sub_type	Python-ast.c	/^static PyTypeObject *Sub_type;$/;"	v	file:
Subscript	Python-ast.c	/^Subscript(expr_ty value, slice_ty slice, expr_context_ty ctx, int lineno, int$/;"	f
Subscript_fields	Python-ast.c	/^static char *Subscript_fields[]={$/;"	v	file:
Subscript_type	Python-ast.c	/^static PyTypeObject *Subscript_type;$/;"	v	file:
Suite	Python-ast.c	/^Suite(asdl_seq * body, PyArena *arena)$/;"	f
Suite_fields	Python-ast.c	/^static char *Suite_fields[]={$/;"	v	file:
Suite_type	Python-ast.c	/^static PyTypeObject *Suite_type;$/;"	v	file:
T2OL	pyparallel_private.h	177;"	d
T2W	pyparallel_private.h	174;"	d
TAG	sysmodule.c	1492;"	d	file:
TAG	sysmodule.c	1499;"	d	file:
TARGET	ceval.c	941;"	d	file:
TARGET	pyparallel.c	5758;"	d	file:
TARGET_WITH_IMPL	ceval.c	933;"	d	file:
THIRD	ceval.c	1092;"	d	file:
THREAD_MAX_STACKSIZE	thread_nt.h	347;"	d
THREAD_MAX_STACKSIZE	thread_os2.h	244;"	d
THREAD_MIN_STACKSIZE	thread_nt.h	346;"	d
THREAD_MIN_STACKSIZE	thread_os2.h	243;"	d
THREAD_SET_STACKSIZE	thread_nt.h	370;"	d
THREAD_SET_STACKSIZE	thread_os2.h	267;"	d
THREAD_SET_STACKSIZE	thread_pthread.h	602;"	d
THREAD_STACK_MIN	thread_pthread.h	38;"	d
THREAD_STACK_SIZE	thread_os2.h	19;"	d
THREAD_STACK_SIZE	thread_pthread.h	19;"	d
THREAD_STACK_SIZE	thread_pthread.h	30;"	d
THREAD_STACK_SIZE	thread_pthread.h	31;"	d
THREAD_STACK_SIZE	thread_pthread.h	34;"	d
THREAD_STACK_SIZE	thread_pthread.h	35;"	d
TLS	pyparallel_private.h	/^typedef struct _PxThreadLocalState TLS;$/;"	t	typeref:struct:_PxThreadLocalState
TLS	pyparallel_private.h	/^} PxThreadLocalState, TLS;$/;"	t	typeref:struct:_PxThreadLocalState
TLSBUF	pyparallel_private.h	/^} TLSBUF;$/;"	t	typeref:struct:_TLSBUF
TLS_BUF_SPINCOUNT	pyparallel.c	401;"	d	file:
TOP	ceval.c	1090;"	d	file:
TRY_READ_LOCK	pyparallel_private.h	1179;"	d
TRY_WRITE_LOCK	pyparallel_private.h	1205;"	d
TSTATE	pyparallel.c	/^Py_TLS PyThreadState *TSTATE;$/;"	v
TYPE_BINARY_COMPLEX	marshal.c	41;"	d	file:
TYPE_BINARY_FLOAT	marshal.c	39;"	d	file:
TYPE_CODE	marshal.c	47;"	d	file:
TYPE_COMPLEX	marshal.c	40;"	d	file:
TYPE_DICT	marshal.c	46;"	d	file:
TYPE_ELLIPSIS	marshal.c	32;"	d	file:
TYPE_FALSE	marshal.c	29;"	d	file:
TYPE_FLOAT	marshal.c	38;"	d	file:
TYPE_FROZENSET	marshal.c	51;"	d	file:
TYPE_INT	marshal.c	33;"	d	file:
TYPE_INT64	marshal.c	37;"	d	file:
TYPE_LIST	marshal.c	45;"	d	file:
TYPE_LONG	marshal.c	42;"	d	file:
TYPE_NONE	marshal.c	28;"	d	file:
TYPE_NULL	marshal.c	27;"	d	file:
TYPE_SET	marshal.c	50;"	d	file:
TYPE_STOPITER	marshal.c	31;"	d	file:
TYPE_STRING	marshal.c	43;"	d	file:
TYPE_TRUE	marshal.c	30;"	d	file:
TYPE_TUPLE	marshal.c	44;"	d	file:
TYPE_UNICODE	marshal.c	48;"	d	file:
TYPE_UNKNOWN	marshal.c	49;"	d	file:
Ten_pmax	dtoa.c	261;"	d	file:
ThreadInfoType	thread.c	/^static PyTypeObject ThreadInfoType;$/;"	v	file:
Tiny0	dtoa.c	267;"	d	file:
Tiny1	dtoa.c	268;"	d	file:
TransmitFile	pyparallel_private.h	1266;"	d
TransmitPackets	pyparallel_private.h	1267;"	d
Try	Python-ast.c	/^Try(asdl_seq * body, asdl_seq * handlers, asdl_seq * orelse, asdl_seq *$/;"	f
Try_fields	Python-ast.c	/^static char *Try_fields[]={$/;"	v	file:
Try_type	Python-ast.c	/^static PyTypeObject *Try_type;$/;"	v	file:
Tuple	Python-ast.c	/^Tuple(asdl_seq * elts, expr_context_ty ctx, int lineno, int col_offset, PyArena$/;"	f
Tuple_fields	Python-ast.c	/^static char *Tuple_fields[]={$/;"	v	file:
Tuple_type	Python-ast.c	/^static PyTypeObject *Tuple_type;$/;"	v	file:
U	dtoa.c	/^typedef union { double d; ULong L[2]; } U;$/;"	t	typeref:union:__anon7	file:
UAdd_singleton	Python-ast.c	/^static PyObject *Invert_singleton, *Not_singleton, *UAdd_singleton,$/;"	v	file:
UAdd_type	Python-ast.c	/^static PyTypeObject *UAdd_type;$/;"	v	file:
ULLong	dtoa.c	162;"	d	file:
ULLong	dtoa.c	164;"	d	file:
ULbits	dtoa.c	1224;"	d	file:
ULong	dtoa.c	/^typedef PY_UINT32_T ULong;$/;"	t	file:
UNBOUNDFREE_ERROR_MSG	ceval.c	153;"	d	file:
UNBOUNDLOCAL_ERROR_MSG	ceval.c	151;"	d	file:
UNCONDITIONAL_JUMP	peephole.c	13;"	d	file:
UNDEFINED_FUTURE_FEATURE	future.c	9;"	d	file:
UNICODE	pyparallel_private.h	9;"	d
UNSIGNAL_ASYNC_EXC	ceval.c	275;"	d	file:
UNSIGNAL_PENDING_CALLS	ceval.c	263;"	d	file:
UNWIND_BLOCK	ceval.c	1138;"	d	file:
UNWIND_EXCEPT_HANDLER	ceval.c	1144;"	d	file:
USE_COMPUTED_GOTOS	ceval.c	911;"	d	file:
USE_COMPUTED_GOTOS	ceval.c	912;"	d	file:
USE_COMPUTED_GOTOS	ceval.c	917;"	d	file:
USE_SEMAPHORES	thread_pthread.h	85;"	d
USE_SEMAPHORES	thread_pthread.h	87;"	d
USub_singleton	Python-ast.c	/^*USub_singleton;$/;"	v	file:
USub_type	Python-ast.c	/^static PyTypeObject *USub_type;$/;"	v	file:
UnaryOp	Python-ast.c	/^UnaryOp(unaryop_ty op, expr_ty operand, int lineno, int col_offset, PyArena$/;"	f
UnaryOp_fields	Python-ast.c	/^static char *UnaryOp_fields[]={$/;"	v	file:
UnaryOp_type	Python-ast.c	/^static PyTypeObject *UnaryOp_type;$/;"	v	file:
VISIT	compile.c	1210;"	d	file:
VISIT	symtable.c	1051;"	d	file:
VISIT_IN_SCOPE	compile.c	1215;"	d	file:
VISIT_KWONLYDEFAULTS	symtable.c	1075;"	d	file:
VISIT_QUIT	symtable.c	1048;"	d	file:
VISIT_SEQ	compile.c	1227;"	d	file:
VISIT_SEQ	symtable.c	1055;"	d	file:
VISIT_SEQ_IN_SCOPE	compile.c	1237;"	d	file:
VISIT_SEQ_TAIL	symtable.c	1065;"	d	file:
VISIT_SLICE	compile.c	1222;"	d	file:
VarObject_Init	pyparallel.c	/^VarObject_Init(PyVarObject *v, PyTypeObject *tp, Py_ssize_t nitems, Context *c)$/;"	f
VarObject_New	pyparallel.c	/^VarObject_New(PyTypeObject *tp, Py_ssize_t nitems, Context *c)$/;"	f
VarObject_Resize	pyparallel.c	/^VarObject_Resize(PyObject *v, Py_ssize_t nitems, Context *c)$/;"	f
VersionInfoType	sysmodule.c	/^static PyTypeObject VersionInfoType;$/;"	v	file:
W2R	pyparallel_private.h	217;"	d
W2S	pyparallel_private.h	191;"	d
W2T	pyparallel_private.h	175;"	d
WARN	structmember.c	96;"	d	file:
WFERR_NESTEDTOODEEP	marshal.c	55;"	d	file:
WFERR_NOMEMORY	marshal.c	56;"	d	file:
WFERR_OK	marshal.c	53;"	d	file:
WFERR_UNMARSHALLABLE	marshal.c	54;"	d	file:
WFILE	marshal.c	/^} WFILE;$/;"	t	typeref:struct:__anon14	file:
WHY_BREAK	ceval.c	/^        WHY_BREAK =     0x0010, \/* 'break' statement *\/$/;"	e	enum:why_code	file:
WHY_CONTINUE	ceval.c	/^        WHY_CONTINUE =  0x0020, \/* 'continue' statement *\/$/;"	e	enum:why_code	file:
WHY_EXCEPTION	ceval.c	/^        WHY_EXCEPTION = 0x0002, \/* Exception occurred *\/$/;"	e	enum:why_code	file:
WHY_NOT	ceval.c	/^        WHY_NOT =       0x0001, \/* No error *\/$/;"	e	enum:why_code	file:
WHY_RERAISE	ceval.c	/^        WHY_RERAISE =   0x0004, \/* Exception re-raised by 'finally' *\/$/;"	e	enum:why_code	file:
WHY_RETURN	ceval.c	/^        WHY_RETURN =    0x0008, \/* 'return' statement *\/$/;"	e	enum:why_code	file:
WHY_SILENCED	ceval.c	/^        WHY_SILENCED =  0x0080  \/* Exception silenced by 'with' *\/$/;"	e	enum:why_code	file:
WHY_YIELD	ceval.c	/^        WHY_YIELD =     0x0040, \/* 'yield' operator *\/$/;"	e	enum:why_code	file:
WIN32_LEAN_AND_MEAN	condvar.h	123;"	d
WIN32_LEAN_AND_MEAN	sysmodule.c	25;"	d	file:
WORD_AT	dynload_win.c	67;"	d	file:
WRITE_LOCK	pyparallel_private.h	1188;"	d
WRITE_UNLOCK	pyparallel_private.h	1197;"	d
WSARecvMsg	pyparallel_private.h	1263;"	d
WSASendMsg	pyparallel_private.h	1264;"	d
W_SIZE	marshal.c	130;"	d	file:
W_SIZE	marshal.c	139;"	d	file:
While	Python-ast.c	/^While(expr_ty test, asdl_seq * body, asdl_seq * orelse, int lineno, int$/;"	f
While_fields	Python-ast.c	/^static char *While_fields[]={$/;"	v	file:
While_type	Python-ast.c	/^static PyTypeObject *While_type;$/;"	v	file:
WindowsVersionType	sysmodule.c	/^static PyTypeObject WindowsVersionType = {0, 0, 0, 0, 0, 0};$/;"	v	file:
With	Python-ast.c	/^With(asdl_seq * items, asdl_seq * body, int lineno, int col_offset, PyArena$/;"	f
With_fields	Python-ast.c	/^static char *With_fields[]={$/;"	v	file:
With_type	Python-ast.c	/^static PyTypeObject *With_type;$/;"	v	file:
WorkContext	pyparallel_private.h	/^typedef struct _PyParallelContext PyParallelContext, WorkContext, Context;$/;"	t	typeref:struct:
Yield	Python-ast.c	/^Yield(expr_ty value, int lineno, int col_offset, PyArena *arena)$/;"	f
Yield	import.c	7;"	d	file:
Yield	pythonrun.c	7;"	d	file:
YieldFrom	Python-ast.c	/^YieldFrom(expr_ty value, int lineno, int col_offset, PyArena *arena)$/;"	f
YieldFrom_fields	Python-ast.c	/^static char *YieldFrom_fields[]={$/;"	v	file:
YieldFrom_type	Python-ast.c	/^static PyTypeObject *YieldFrom_type;$/;"	v	file:
Yield_fields	Python-ast.c	/^static char *Yield_fields[]={$/;"	v	file:
Yield_type	Python-ast.c	/^static PyTypeObject *Yield_type;$/;"	v	file:
_ASYNC	pyparallel.c	8857;"	d	file:
_ASYNC_K	pyparallel.c	8861;"	d	file:
_ASYNC_N	pyparallel.c	8858;"	d	file:
_ASYNC_O	pyparallel.c	8859;"	d	file:
_ASYNC_V	pyparallel.c	8860;"	d	file:
_ASYNC_WRAP	pyparallel.c	5497;"	d	file:
_CONDVAR_H_	condvar.h	41;"	d
_HAVE_SCRIPT_ARGUMENT	sysmodule.c	1818;"	d	file:
_INIT_INIT	pyparallel.c	2240;"	d	file:
_INIT_NEW	pyparallel.c	2239;"	d	file:
_INIT_RESIZE	pyparallel.c	2241;"	d	file:
_MEMBER	pyparallel.c	8599;"	d	file:
_MEMSIG_INVALID	pyparallel.c	1492;"	d	file:
_MEMSIG_NOT_READY	pyparallel.c	1493;"	d	file:
_MEMSIG_NULL	pyparallel.c	1494;"	d	file:
_MEMSIG_PX	pyparallel.c	1497;"	d	file:
_MEMSIG_PY	pyparallel.c	1496;"	d	file:
_MEMSIG_UNKNOWN	pyparallel.c	1495;"	d	file:
_METHOD	pyparallel.c	3499;"	d	file:
_NRMUTEX	thread_nt.h	/^typedef struct _NRMUTEX$/;"	s
_OBJSIG_INVALID	pyparallel.c	1499;"	d	file:
_OBJSIG_NULL	pyparallel.c	1500;"	d	file:
_OBJSIG_PX	pyparallel.c	1503;"	d	file:
_OBJSIG_PY	pyparallel.c	1502;"	d	file:
_OBJSIG_UNKNOWN	pyparallel.c	1501;"	d	file:
_Object	pyparallel_private.h	/^typedef struct _Object {$/;"	s
_Objects	pyparallel_private.h	/^typedef struct _Objects {$/;"	s
_PARALLEL	pyparallel.c	3500;"	d	file:
_PARALLEL_N	pyparallel.c	3501;"	d	file:
_PARALLEL_O	pyparallel.c	3502;"	d	file:
_PARALLEL_V	pyparallel.c	3503;"	d	file:
_POSIX_THREADS	thread.c	39;"	d	file:
_PXSOCKET	pyparallel.c	8587;"	d	file:
_PXSOCKETMEM	pyparallel.c	8600;"	d	file:
_PXSOCKET_ATTR_B	pyparallel.c	8606;"	d	file:
_PXSOCKET_ATTR_BR	pyparallel.c	8607;"	d	file:
_PXSOCKET_ATTR_D	pyparallel.c	8608;"	d	file:
_PXSOCKET_ATTR_DR	pyparallel.c	8609;"	d	file:
_PXSOCKET_ATTR_I	pyparallel.c	8604;"	d	file:
_PXSOCKET_ATTR_IR	pyparallel.c	8605;"	d	file:
_PXSOCKET_ATTR_O	pyparallel.c	8602;"	d	file:
_PXSOCKET_ATTR_OR	pyparallel.c	8603;"	d	file:
_PXSOCKET_ATTR_S	pyparallel.c	8610;"	d	file:
_PXSOCKET_CB	pyparallel.c	8601;"	d	file:
_PXSOCKET_N	pyparallel.c	8588;"	d	file:
_PXSOCKET_O	pyparallel.c	8589;"	d	file:
_PXSOCKET_V	pyparallel.c	8590;"	d	file:
_PX_TMPBUF_SIZE	pyparallel_private.h	410;"	d
_PY_EMULATED_WIN_CV	condvar.h	131;"	d
_PY_EMULATED_WIN_CV	condvar.h	136;"	d
_PY_EMULATED_WIN_CV	condvar.h	137;"	d
_PY_USE_CV_LOCKS	thread_nt.h	14;"	d
_ParallelContext	parallelmodule.c	/^typedef struct _ParallelContext {$/;"	s	file:
_PxAddrInfo	pyparallel_private.h	/^typedef struct _PxAddrInfo {$/;"	s
_PxBlockingCallsThreshold	pyparallel.c	/^int _PxBlockingCallsThreshold = 20;$/;"	v
_PxClientSocket	pyparallel_private.h	/^typedef struct _PxClientSocket {$/;"	s
_PxContext	pyparallel_private.h	/^typedef struct _PxContext {$/;"	s
_PxContext_HEAD_EXTRA	pyparallel_private.h	574;"	d
_PxContext_UnregisterHeaps	pyparallel.c	/^_PxContext_UnregisterHeaps(Context *c)$/;"	f
_PxHeap	pyparallel_private.h	/^typedef struct _PxHeap {$/;"	s
_PxHeap_HEAD_EXTRA	pyparallel_private.h	305;"	d
_PxIO	pyparallel_private.h	/^typedef struct _PxIO {$/;"	s
_PxMem_Free	pyparallel.c	/^_PxMem_Free(void *p)$/;"	f
_PxMem_Malloc	pyparallel.c	/^_PxMem_Malloc(size_t n)$/;"	f
_PxMem_Realloc	pyparallel.c	/^_PxMem_Realloc(void *p, size_t n)$/;"	f
_PxNewThread	pyparallel.c	/^Py_TLS static int _PxNewThread = 1;$/;"	v	file:
_PxObject	pyparallel_private.h	/^typedef struct _PxObject {$/;"	s
_PxObjectSignature	pyparallel.c	/^size_t _PxObjectSignature = -1;$/;"	v
_PxObject_Free	pyparallel.c	/^_PxObject_Free(void *p)$/;"	f
_PxObject_Init	pyparallel.c	/^_PxObject_Init(PyObject *op, PyTypeObject *tp)$/;"	f
_PxObject_InitVar	pyparallel.c	/^_PxObject_InitVar(PyVarObject *op, PyTypeObject *tp, Py_ssize_t nitems)$/;"	f
_PxObject_New	pyparallel.c	/^_PxObject_New(PyTypeObject *tp)$/;"	f
_PxObject_NewVar	pyparallel.c	/^_PxObject_NewVar(PyTypeObject *tp, Py_ssize_t nitems)$/;"	f
_PxObject_Realloc	pyparallel.c	/^_PxObject_Realloc(void *p, size_t nbytes)$/;"	f
_PxObject_Resize	pyparallel.c	/^_PxObject_Resize(PyVarObject *op, Py_ssize_t nitems)$/;"	f
_PxPages	pyparallel_private.h	/^typedef struct _PxPages {$/;"	s
_PxPages_AddHeapPage	pyparallel.c	/^_PxPages_AddHeapPage(PxPages **pages, Px_UINTPTR *value, Heap *h)$/;"	f
_PxPages_LookupHeapPage	pyparallel.c	/^_PxPages_LookupHeapPage(PxPages *pages, Px_UINTPTR *value, void *p)$/;"	f
_PxPages_MAX_HEAPS	pyparallel_private.h	415;"	d
_PxPages_RemoveHeapPage	pyparallel.c	/^_PxPages_RemoveHeapPage(PxPages **pages, Px_UINTPTR *value, Heap *h)$/;"	f
_PxServerSocket	pyparallel_private.h	/^typedef struct _PxServerSocket {$/;"	s
_PxSocket	pyparallel_private.h	/^typedef struct _PxSocket {$/;"	s
_PxSocketBuf	pyparallel_private.h	/^typedef struct _PxSocketBuf {$/;"	s
_PxSocketBufList	pyparallel_private.h	/^typedef struct _PxSocketBufList {$/;"	s
_PxSocketBufSignature	pyparallel.c	/^size_t _PxSocketBufSignature = -1;$/;"	v
_PxSocketFlags_RESOLVE_BOOL	pyparallel.c	7828;"	d	file:
_PxSocketFlags_RESOLVE_INT	pyparallel.c	7841;"	d	file:
_PxSocketFlags_RESOLVE_OBJECT	pyparallel.c	7813;"	d	file:
_PxSocketListItem	pyparallel_private.h	/^typedef struct _PxSocketListItem {$/;"	s
_PxSocketServer_PreallocatedSockets	pyparallel.c	/^int _PxSocketServer_PreallocatedSockets = 4;$/;"	v
_PxSocketSignature	pyparallel.c	/^size_t _PxSocketSignature = -1;$/;"	v
_PxSocket_ActiveHogs	pyparallel.c	/^volatile int _PxSocket_ActiveHogs = 0;$/;"	v
_PxSocket_ActiveIOLoops	pyparallel.c	/^volatile int _PxSocket_ActiveIOLoops = 0;$/;"	v
_PxSocket_MaxRecvBufSize	pyparallel.c	/^int _PxSocket_MaxRecvBufSize = 65536;$/;"	v
_PxSocket_MaxSyncRecvAttempts	pyparallel.c	/^int _PxSocket_MaxSyncRecvAttempts = 3;$/;"	v
_PxSocket_MaxSyncSendAttempts	pyparallel.c	/^int _PxSocket_MaxSyncSendAttempts = 3;$/;"	v
_PxSocket_RESOLVE_BOOL	pyparallel.c	7891;"	d	file:
_PxSocket_RESOLVE_INT	pyparallel.c	7902;"	d	file:
_PxSocket_RESOLVE_OBJECT	pyparallel.c	7876;"	d	file:
_PxSocket_SendListSize	pyparallel.c	/^int _PxSocket_SendListSize = 30;$/;"	v
_PxSocket__disconnectex_tf_reuse	pyparallel.c	/^int _PxSocket__disconnectex_tf_reuse = 1;$/;"	v
_PxSocket__initial_accepts	pyparallel.c	/^int _PxSocket__initial_accepts = 1000;$/;"	v
_PxSocket__max_sockets	pyparallel.c	/^int _PxSocket__max_sockets = 10000;$/;"	v
_PxSocket__monitor_fd_accept	pyparallel.c	/^int _PxSocket__monitor_fd_accept = 0;$/;"	v
_PxSocket__try_close_existing_socket_when_resetting_overlapped	pyparallel.c	/^int _PxSocket__try_close_existing_socket_when_resetting_overlapped = 1;$/;"	v
_PxState	pyparallel_private.h	/^typedef struct _PxState {$/;"	s
_PxState_AllocIOBufs	pyparallel.c	/^_PxState_AllocIOBufs(PxState *px, Context *c, int count, int size)$/;"	f
_PxState_FreeContext	pyparallel.c	/^_PxState_FreeContext(PxState *px, Context *c)$/;"	f
_PxState_InitPxPages	pyparallel.c	/^_PxState_InitPxPages(PxState *px)$/;"	f
_PxState_PurgeContexts	pyparallel.c	/^_PxState_PurgeContexts(PxState *px)$/;"	f
_PxState_RegisterHeap	pyparallel.c	/^_PxState_RegisterHeap(PxState *px, Heap *h, Context *c)$/;"	f
_PxState_ReleaseContext	pyparallel.c	/^_PxState_ReleaseContext(PxState *px, Context *c)$/;"	f
_PxThreadLocalState	pyparallel_private.h	/^typedef struct _PxThreadLocalState {$/;"	s
_PxWarn_PyMemUnknown	pyparallel.c	/^_PxWarn_PyMemUnknown(void)$/;"	f
_Px_Dealloc	pyparallel.c	/^_Px_Dealloc(PyObject *op)$/;"	f
_Px_ForgetReference	pyparallel.c	/^_Px_ForgetReference(PyObject *op)$/;"	f
_Px_MemorySignature	pyparallel.c	/^_Px_MemorySignature(void *m)$/;"	f
_Px_NegativePersistedCount	pyparallel.c	/^_Px_NegativePersistedCount(const char *fname, int lineno, Context *c, int count)$/;"	f
_Px_NewReference	pyparallel.c	/^_Px_NewReference(PyObject *op)$/;"	f
_Px_O_OFFSET	pyparallel.c	2194;"	d	file:
_Px_O_PTR	pyparallel.c	2200;"	d	file:
_Px_ObjectSignature	pyparallel.c	/^_Px_ObjectSignature(void *m)$/;"	f
_Px_ObjectSignature_CallDepth	pyparallel.c	/^Py_TLS int _Px_ObjectSignature_CallDepth = 0;$/;"	v
_Px_READ_LOCK	pyparallel.c	755;"	d	file:
_Px_READ_UNLOCK	pyparallel.c	756;"	d	file:
_Px_SZ	pyparallel.c	2203;"	d	file:
_Px_SafeObjectSignatureTest	pyparallel.c	/^_Px_SafeObjectSignatureTest(void *m)$/;"	f
_Px_SafeObjectSignatureTest_CallDepth	pyparallel.c	/^Py_TLS int _Px_SafeObjectSignatureTest_CallDepth = 0;$/;"	v
_Px_TEST	pyparallel.c	/^_Px_TEST(void *p)$/;"	f
_Px_TryPersist	pyparallel.c	/^_Px_TryPersist(PyObject *o)$/;"	f
_Px_VSZ	pyparallel.c	2209;"	d	file:
_Px_WRITE_LOCK	pyparallel.c	757;"	d	file:
_Px_WRITE_UNLOCK	pyparallel.c	758;"	d	file:
_Px_X_OFFSET	pyparallel.c	2193;"	d	file:
_Px_X_PTR	pyparallel.c	2197;"	d	file:
_Px_mp_ass_subscript	pyparallel.c	/^_Px_mp_ass_subscript(PyObject *o, PyObject *k, PyObject *v)$/;"	f
_Px_mp_length	pyparallel.c	/^_Px_mp_length(PyObject *o)$/;"	f
_Px_mp_subcript	pyparallel.c	/^_Px_mp_subcript(PyObject *o, PyObject *k)$/;"	f
_Px_objobjargproc_ass	pyparallel.c	/^_Px_objobjargproc_ass(PyObject *o, PyObject *k, PyObject *v)$/;"	f
_Px_sq_length	pyparallel.c	/^_Px_sq_length(PyObject *o)$/;"	f
_PyArg_NoKeywords	getargs.c	/^_PyArg_NoKeywords(const char *funcname, PyObject *kw)$/;"	f
_PyArg_ParseTupleAndKeywords_SizeT	getargs.c	/^_PyArg_ParseTupleAndKeywords_SizeT(PyObject *args,$/;"	f
_PyArg_ParseTuple_SizeT	getargs.c	/^_PyArg_ParseTuple_SizeT(PyObject *args, char *format, ...)$/;"	f
_PyArg_Parse_SizeT	getargs.c	/^_PyArg_Parse_SizeT(PyObject *args, char *format, ...)$/;"	f
_PyArg_VaParseTupleAndKeywords_SizeT	getargs.c	/^_PyArg_VaParseTupleAndKeywords_SizeT(PyObject *args,$/;"	f
_PyArg_VaParse_SizeT	getargs.c	/^_PyArg_VaParse_SizeT(PyObject *args, char *format, va_list va)$/;"	f
_PyAsync_ModInit	pyparallel.c	/^_PyAsync_ModInit(void)$/;"	f
_PyBuiltin_Init	bltinmodule.c	/^_PyBuiltin_Init(void)$/;"	f
_PyCOND_T	condvar.h	/^typedef struct _PyCOND_T$/;"	s
_PyCOND_WAIT_MS	condvar.h	/^_PyCOND_WAIT_MS(PyCOND_T *cv, PyMUTEX_T *cs, DWORD ms)$/;"	f
_PyCodecInfo_GetIncrementalDecoder	codecs.c	/^PyObject *_PyCodecInfo_GetIncrementalDecoder(PyObject *codec_info,$/;"	f
_PyCodecInfo_GetIncrementalEncoder	codecs.c	/^PyObject *_PyCodecInfo_GetIncrementalEncoder(PyObject *codec_info,$/;"	f
_PyCodecRegistry_Init	codecs.c	/^static int _PyCodecRegistry_Init(void)$/;"	f	file:
_PyCodec_DecodeInternal	codecs.c	/^_PyCodec_DecodeInternal(PyObject *object,$/;"	f	file:
_PyCodec_DecodeText	codecs.c	/^PyObject *_PyCodec_DecodeText(PyObject *object,$/;"	f
_PyCodec_EncodeInternal	codecs.c	/^_PyCodec_EncodeInternal(PyObject *object,$/;"	f	file:
_PyCodec_EncodeText	codecs.c	/^PyObject *_PyCodec_EncodeText(PyObject *object,$/;"	f
_PyCodec_Lookup	codecs.c	/^PyObject *_PyCodec_Lookup(const char *encoding)$/;"	f
_PyCodec_LookupTextEncoding	codecs.c	/^PyObject * _PyCodec_LookupTextEncoding(const char *encoding,$/;"	f
_PyCodec_TextDecoder	codecs.c	/^static PyObject * _PyCodec_TextDecoder(const char *encoding)$/;"	f	file:
_PyCodec_TextEncoder	codecs.c	/^static PyObject * _PyCodec_TextEncoder(const char *encoding)$/;"	f	file:
_PyComplex_FormatAdvancedWriter	formatter_unicode.c	/^_PyComplex_FormatAdvancedWriter(_PyUnicodeWriter *writer,$/;"	f
_PyErr_BadInternalCall	errors.c	/^_PyErr_BadInternalCall(const char *filename, int lineno)$/;"	f
_PyEval_CallTracing	ceval.c	/^_PyEval_CallTracing(PyObject *func, PyObject *args)$/;"	f
_PyEval_FiniThreads	ceval.c	/^_PyEval_FiniThreads(void)$/;"	f
_PyEval_GetSwitchInterval	ceval_gil.h	/^unsigned long _PyEval_GetSwitchInterval()$/;"	f
_PyEval_SetSwitchInterval	ceval_gil.h	/^void _PyEval_SetSwitchInterval(unsigned long microseconds)$/;"	f
_PyEval_SignalAsyncExc	ceval.c	/^_PyEval_SignalAsyncExc(void)$/;"	f
_PyEval_SliceIndex	ceval.c	/^_PyEval_SliceIndex(PyObject *v, Py_ssize_t *pi)$/;"	f
_PyEvent_TryCreate	pyparallel.c	/^_PyEvent_TryCreate(PyObject *o)$/;"	f
_PyFloat_FormatAdvancedWriter	formatter_unicode.c	/^_PyFloat_FormatAdvancedWriter(_PyUnicodeWriter *writer,$/;"	f
_PyGILState_Fini	pystate.c	/^_PyGILState_Fini(void)$/;"	f
_PyGILState_Init	pystate.c	/^_PyGILState_Init(PyInterpreterState *i, PyThreadState *t)$/;"	f
_PyGILState_NoteThreadState	pystate.c	/^_PyGILState_NoteThreadState(PyThreadState* tstate)$/;"	f	file:
_PyGILState_Reinit	pystate.c	/^_PyGILState_Reinit(void)$/;"	f
_PyHeapOverride_Malloc	pyparallel.c	/^_PyHeapOverride_Malloc(size_t n, size_t align)$/;"	f
_PyHeap_FastFree	pyparallel.c	/^_PyHeap_FastFree(Heap *h, Stats *s, void *p)$/;"	f
_PyHeap_Free	pyparallel.c	/^_PyHeap_Free(Context *c, void *p)$/;"	f
_PyHeap_Init	pyparallel.c	/^_PyHeap_Init(Context *c, Py_ssize_t n)$/;"	f
_PyHeap_Malloc	pyparallel.c	/^_PyHeap_Malloc(Context *c, size_t n, size_t align, int no_realloc)$/;"	f
_PyHeap_MemAlignedMalloc	pyparallel.c	/^_PyHeap_MemAlignedMalloc(Context *c, size_t n)$/;"	f
_PyHeap_NewList	pyparallel.c	/^_PyHeap_NewList(Context *c)$/;"	f
_PyHeap_NewListItem	pyparallel.c	/^_PyHeap_NewListItem(Context *c)$/;"	f
_PyHeap_NewObject	pyparallel.c	/^_PyHeap_NewObject(Context *c)$/;"	f
_PyHeap_Realloc	pyparallel.c	/^_PyHeap_Realloc(Context *c, void *p, size_t n)$/;"	f
_PyImportHooks_Init	import.c	/^_PyImportHooks_Init(void)$/;"	f
_PyImportZip_Init	import.c	/^_PyImportZip_Init(void)$/;"	f
_PyImport_AcquireLock	import.c	/^_PyImport_AcquireLock(void)$/;"	f
_PyImport_DynLoadFiletab	dynload_aix.c	/^const char *_PyImport_DynLoadFiletab[] = {".so", NULL};$/;"	v
_PyImport_DynLoadFiletab	dynload_dl.c	/^const char *_PyImport_DynLoadFiletab[] = {".o", NULL};$/;"	v
_PyImport_DynLoadFiletab	dynload_hpux.c	/^const char *_PyImport_DynLoadFiletab[] = {SHLIB_EXT, NULL};$/;"	v
_PyImport_DynLoadFiletab	dynload_next.c	/^const char *_PyImport_DynLoadFiletab[] = {".so", NULL};$/;"	v
_PyImport_DynLoadFiletab	dynload_os2.c	/^const char *_PyImport_DynLoadFiletab[] = {".pyd", ".dll", NULL};$/;"	v
_PyImport_DynLoadFiletab	dynload_shlib.c	/^const char *_PyImport_DynLoadFiletab[] = {$/;"	v
_PyImport_DynLoadFiletab	dynload_stub.c	/^const char *_PyImport_DynLoadFiletab[] = {NULL};$/;"	v
_PyImport_DynLoadFiletab	dynload_win.c	/^const char *_PyImport_DynLoadFiletab[] = {$/;"	v
_PyImport_FindBuiltin	import.c	/^_PyImport_FindBuiltin(const char *name)$/;"	f
_PyImport_FindExtensionObject	import.c	/^_PyImport_FindExtensionObject(PyObject *name, PyObject *filename)$/;"	f
_PyImport_Fini	import.c	/^_PyImport_Fini(void)$/;"	f
_PyImport_FixupBuiltin	import.c	/^_PyImport_FixupBuiltin(PyObject *mod, char *name)$/;"	f
_PyImport_FixupExtensionObject	import.c	/^_PyImport_FixupExtensionObject(PyObject *mod, PyObject *name,$/;"	f
_PyImport_FrozenModules	frozen.c	/^static struct _frozen _PyImport_FrozenModules[] = {$/;"	v	typeref:struct:_frozen	file:
_PyImport_GetDynLoadFunc	dynload_aix.c	/^dl_funcptr _PyImport_GetDynLoadFunc(const char *shortname,$/;"	f
_PyImport_GetDynLoadFunc	dynload_dl.c	/^dl_funcptr _PyImport_GetDynLoadFunc(const char *shortname,$/;"	f
_PyImport_GetDynLoadFunc	dynload_hpux.c	/^dl_funcptr _PyImport_GetDynLoadFunc(const char *shortname,$/;"	f
_PyImport_GetDynLoadFunc	dynload_next.c	/^dl_funcptr _PyImport_GetDynLoadFunc(const char *shortname,$/;"	f
_PyImport_GetDynLoadFunc	dynload_os2.c	/^dl_funcptr _PyImport_GetDynLoadFunc(const char *shortname,$/;"	f
_PyImport_GetDynLoadFunc	dynload_shlib.c	/^dl_funcptr _PyImport_GetDynLoadFunc(const char *shortname,$/;"	f
_PyImport_GetDynLoadWindows	dynload_win.c	/^dl_funcptr _PyImport_GetDynLoadWindows(const char *shortname,$/;"	f
_PyImport_Init	import.c	/^_PyImport_Init(void)$/;"	f
_PyImport_LoadDynamicModule	importdl.c	/^_PyImport_LoadDynamicModule(PyObject *name, PyObject *path, FILE *fp)$/;"	f
_PyImport_ReInitLock	import.c	/^_PyImport_ReInitLock(void)$/;"	f
_PyImport_ReleaseLock	import.c	/^_PyImport_ReleaseLock(void)$/;"	f
_PyLong_AsTime_t	pytime.c	/^_PyLong_AsTime_t(PyObject *obj)$/;"	f
_PyLong_FormatAdvancedWriter	formatter_unicode.c	/^_PyLong_FormatAdvancedWriter(_PyUnicodeWriter *writer,$/;"	f
_PyLong_FromTime_t	pytime.c	/^_PyLong_FromTime_t(time_t t)$/;"	f
_PyOS_GetOpt	getopt.c	/^int _PyOS_GetOpt(int argc, wchar_t **argv, wchar_t *optstring)$/;"	f
_PyOS_ResetGetOpt	getopt.c	/^void _PyOS_ResetGetOpt(void)$/;"	f
_PyOS_URandom	random.c	/^_PyOS_URandom(void *buffer, Py_ssize_t size)$/;"	f
_PyOS_ascii_formatd	pystrtod.c	/^_PyOS_ascii_formatd(char       *buffer,$/;"	f	file:
_PyOS_ascii_strtod	pystrtod.c	/^_PyOS_ascii_strtod(const char *nptr, char **endptr)$/;"	f	file:
_PyOS_mystrnicmp_hack	pythonrun.c	/^int (*_PyOS_mystrnicmp_hack)(const char *, const char *, Py_ssize_t) = \\$/;"	v
_PyOS_optarg	getopt.c	/^wchar_t *_PyOS_optarg = NULL;     \/* optional argument       *\/$/;"	v
_PyOS_opterr	getopt.c	/^int _PyOS_opterr = 1;          \/* generate error messages *\/$/;"	v
_PyOS_optind	getopt.c	/^int _PyOS_optind = 1;          \/* index into argv array   *\/$/;"	v
_PyOS_vsnprintf_EXTRA_SPACE	mysnprintf.c	103;"	d	file:
_PyOS_vsnprintf_EXTRA_SPACE	mysnprintf.c	57;"	d	file:
_PyObject_Dealloc	pyparallel.c	/^_PyObject_Dealloc(PyObject *o)$/;"	f
_PyObject_GenericGetAttr	pyparallel.c	/^_PyObject_GenericGetAttr(PyObject *o, PyObject *n)$/;"	f
_PyObject_GenericSetAttr	pyparallel.c	/^_PyObject_GenericSetAttr(PyObject *o, PyObject *n, PyObject *v)$/;"	f
_PyObject_GetAttrString	pyparallel.c	/^_PyObject_GetAttrString(PyObject *o, char *n)$/;"	f
_PyObject_PrepOrigType	pyparallel.c	/^_PyObject_PrepOrigType(PyObject *o, PyObject *kwds)$/;"	f
_PyObject_SetAttrString	pyparallel.c	/^_PyObject_SetAttrString(PyObject *o, char *n, PyObject *v)$/;"	f
_PyParallelContext	pyparallel_private.h	/^typedef struct _PyParallelContext {$/;"	s
_PyParallelContextStats	pyparallel_private.h	/^typedef struct _PyParallelContextStats {$/;"	s
_PyParallelHeap	pyparallel_private.h	/^typedef struct _PyParallelHeap {$/;"	s
_PyParallelIOContext	pyparallel_private.h	/^typedef struct _PyParallelIOContext {$/;"	s
_PyParallel_AboutToDropGIL	pyparallel.c	/^_PyParallel_AboutToDropGIL(void)$/;"	f
_PyParallel_BlockingCall	pyparallel.c	/^_PyParallel_BlockingCall(void)$/;"	f
_PyParallel_ClearMainProcessId	pyparallel.c	/^_PyParallel_ClearMainProcessId(void)$/;"	f
_PyParallel_ClearMainThreadId	pyparallel.c	/^_PyParallel_ClearMainThreadId(void)$/;"	f
_PyParallel_ClearingThreadState	pyparallel.c	/^_PyParallel_ClearingThreadState(PyThreadState *tstate)$/;"	f
_PyParallel_ContextGuardFailure	pyparallel.c	/^_PyParallel_ContextGuardFailure(const char *function,$/;"	f
_PyParallel_CreatedGIL	pyparallel.c	/^_PyParallel_CreatedGIL(void)$/;"	f
_PyParallel_CreatedNewThreadState	pyparallel.c	/^_PyParallel_CreatedNewThreadState(PyThreadState *tstate)$/;"	f
_PyParallel_DeletingInterpreterState	pyparallel.c	/^_PyParallel_DeletingInterpreterState(PyInterpreterState *interp)$/;"	f
_PyParallel_DeletingThreadState	pyparallel.c	/^_PyParallel_DeletingThreadState(PyThreadState *tstate)$/;"	f
_PyParallel_DestroyedGIL	pyparallel.c	/^_PyParallel_DestroyedGIL(void)$/;"	f
_PyParallel_DisableParallelContexts	pyparallel.c	/^_PyParallel_DisableParallelContexts(void)$/;"	f
_PyParallel_DisableTLSHeap	pyparallel.c	/^_PyParallel_DisableTLSHeap(void)$/;"	f
_PyParallel_DisassociateCurrentThreadFromCallback	pyparallel.c	/^_PyParallel_DisassociateCurrentThreadFromCallback(void)$/;"	f
_PyParallel_DoesContextHaveActiveHeapSnapshot	pyparallel.c	/^_PyParallel_DoesContextHaveActiveHeapSnapshot(void)$/;"	f
_PyParallel_EnableParallelContexts	pyparallel.c	/^_PyParallel_EnableParallelContexts(void)$/;"	f
_PyParallel_EnableTLSHeap	pyparallel.c	/^_PyParallel_EnableTLSHeap(void)$/;"	f
_PyParallel_EnteredCallback	pyparallel.c	/^_PyParallel_EnteredCallback(Context *c, PTP_CALLBACK_INSTANCE instance)$/;"	f
_PyParallel_EnteredIOCallback	pyparallel.c	/^_PyParallel_EnteredIOCallback($/;"	f
_PyParallel_ExecutingCallbackFromMainThread	pyparallel.c	/^_PyParallel_ExecutingCallbackFromMainThread(void)$/;"	f
_PyParallel_ExitingCallback	pyparallel.c	/^_PyParallel_ExitingCallback(Context *c)$/;"	f
_PyParallel_ExitingIOCallback	pyparallel.c	/^_PyParallel_ExitingIOCallback(Context *c)$/;"	f
_PyParallel_Finalize	pyparallel.c	/^_PyParallel_Finalize(void)$/;"	f
_PyParallel_Finalized	pyparallel.c	/^int _PyParallel_Finalized = 0;$/;"	v
_PyParallel_GetCurrentThreadState	pyparallel.c	/^_PyParallel_GetCurrentThreadState(void)$/;"	f
_PyParallel_GetHeapOverride	pyparallel.c	/^_PyParallel_GetHeapOverride(void)$/;"	f	file:
_PyParallel_GetTLSHeapDepth	pyparallel.c	/^_PyParallel_GetTLSHeapDepth(void)$/;"	f
_PyParallel_GetThreadState	pyparallel.c	/^_PyParallel_GetThreadState(void)$/;"	f
_PyParallel_Guard	pyparallel.c	/^_PyParallel_Guard(const char *function,$/;"	f
_PyParallel_GuardMem	pyparallel.c	/^_PyParallel_GuardMem(const char *function,$/;"	f
_PyParallel_GuardObj	pyparallel.c	/^_PyParallel_GuardObj(const char *function,$/;"	f
_PyParallel_IOCallback	pyparallel.c	/^_PyParallel_IOCallback($/;"	f
_PyParallel_Init	pyparallel.c	/^_PyParallel_Init(void)$/;"	f
_PyParallel_InitTLS	pyparallel.c	/^_PyParallel_InitTLS(void)$/;"	f
_PyParallel_InitializedThreadState	pyparallel.c	/^_PyParallel_InitializedThreadState(PyThreadState *pstate)$/;"	f
_PyParallel_IsHeapOverrideActive	pyparallel.c	/^_PyParallel_IsHeapOverrideActive(void)$/;"	f	file:
_PyParallel_IsTLSHeapActive	pyparallel.c	/^_PyParallel_IsTLSHeapActive(void)$/;"	f
_PyParallel_JustAcquiredGIL	pyparallel.c	/^_PyParallel_JustAcquiredGIL(void)$/;"	f
_PyParallel_ModInit	parallelmodule.c	/^_PyParallel_ModInit(void)$/;"	f
_PyParallel_ModInit	pyparallel.c	/^_PyParallel_ModInit(void)$/;"	f
_PyParallel_NewThreadState	pyparallel.c	/^_PyParallel_NewThreadState(PyThreadState *tstate)$/;"	f
_PyParallel_NumCPUs	pyparallel.c	/^int _PyParallel_NumCPUs = 0;$/;"	v
_PyParallel_RemoveHeapOverride	pyparallel.c	/^_PyParallel_RemoveHeapOverride(void)$/;"	f	file:
_PyParallel_RestoreMainProcessId	pyparallel.c	/^_PyParallel_RestoreMainProcessId(void)$/;"	f
_PyParallel_SchedulePyNoneDecref	pyparallel.c	/^_PyParallel_SchedulePyNoneDecref(long refs)$/;"	f
_PyParallel_SetHeapOverride	pyparallel.c	/^_PyParallel_SetHeapOverride(HANDLE heap_handle)$/;"	f	file:
_PyParallel_SetMainProcessId	pyparallel.c	/^_PyParallel_SetMainProcessId(long id)$/;"	f
_PyParallel_WaitCallback	pyparallel.c	/^_PyParallel_WaitCallback($/;"	f
_PyParallel_WorkCallback	pyparallel.c	/^_PyParallel_WorkCallback(PTP_CALLBACK_INSTANCE instance, void *context)$/;"	f
_PyParser_Grammar	graminit.c	/^grammar _PyParser_Grammar = {$/;"	v
_PyRandom_Init	random.c	/^_PyRandom_Init(void)$/;"	f
_PyState_AddModule	pystate.c	/^_PyState_AddModule(PyObject* module, struct PyModuleDef* def)$/;"	f
_PySys_ImplCacheTag	sysmodule.c	/^const char *_PySys_ImplCacheTag = TAG;$/;"	v
_PySys_ImplName	sysmodule.c	/^const char *_PySys_ImplName = NAME;$/;"	v
_PySys_Init	sysmodule.c	/^_PySys_Init(void)$/;"	f
_PyTLSHeap_DefaultSize	pyparallel.c	/^int _PyTLSHeap_DefaultSize = Px_DEFAULT_TLS_HEAP_SIZE;$/;"	v
_PyTLSHeap_Init	pyparallel.c	/^_PyTLSHeap_Init(size_t n, int page_size)$/;"	f
_PyTLSHeap_Malloc	pyparallel.c	/^_PyTLSHeap_Malloc(size_t n, size_t align)$/;"	f
_PyTLSHeap_Realloc	pyparallel.c	/^_PyTLSHeap_Realloc(void *p, size_t n)$/;"	f
_PyThreadState_Current	pystate.c	/^_Py_atomic_address _PyThreadState_Current = {NULL};$/;"	v
_PyThreadState_GetFrame	pystate.c	/^PyThreadFrameGetter _PyThreadState_GetFrame = NULL;$/;"	v
_PyThreadState_Init	pystate.c	/^_PyThreadState_Init(PyThreadState *tstate)$/;"	f
_PyThreadState_Prealloc	pystate.c	/^_PyThreadState_Prealloc(PyInterpreterState *interp)$/;"	f
_PyThread_CurrentFrames	pystate.c	/^_PyThread_CurrentFrames(void)$/;"	f
_PyTime_Init	pytime.c	/^_PyTime_Init()$/;"	f
_PyTime_ObjectToDenominator	pytime.c	/^_PyTime_ObjectToDenominator(PyObject *obj, time_t *sec, long *numerator,$/;"	f	file:
_PyTime_ObjectToTime_t	pytime.c	/^_PyTime_ObjectToTime_t(PyObject *obj, time_t *sec)$/;"	f
_PyTime_ObjectToTimespec	pytime.c	/^_PyTime_ObjectToTimespec(PyObject *obj, time_t *sec, long *nsec)$/;"	f
_PyTime_ObjectToTimeval	pytime.c	/^_PyTime_ObjectToTimeval(PyObject *obj, time_t *sec, long *usec)$/;"	f
_PyTime_gettimeofday	pytime.c	/^_PyTime_gettimeofday(_PyTime_timeval *tp)$/;"	f
_PyTime_gettimeofday_info	pytime.c	/^_PyTime_gettimeofday_info(_PyTime_timeval *tp, _Py_clock_info_t *info)$/;"	f
_PyUnicode_FormatAdvancedWriter	formatter_unicode.c	/^_PyUnicode_FormatAdvancedWriter(_PyUnicodeWriter *writer,$/;"	f
_PyWarnings_Init	_warnings.c	/^_PyWarnings_Init(void)$/;"	f
_PyXList	pyparallel_private.h	/^typedef struct _PyXList {$/;"	s
_Py_BuildValue_SizeT	modsupport.c	/^_Py_BuildValue_SizeT(const char *format, ...)$/;"	f
_Py_CheckCtrlC	pyparallel.c	/^_Py_CheckCtrlC(void)$/;"	f
_Py_CheckRecursionLimit	ceval.c	/^int _Py_CheckRecursionLimit = Py_DEFAULT_RECURSION_LIMIT;$/;"	v
_Py_CheckRecursiveCall	ceval.c	/^_Py_CheckRecursiveCall(char *where)$/;"	f
_Py_CtrlCHandlerRoutine	pyparallel.c	/^PHANDLER_ROUTINE _Py_CtrlCHandlerRoutine = (PHANDLER_ROUTINE)_Py_HandleCtrlC;$/;"	v
_Py_CtrlCPressed	pyparallel.c	/^int _Py_CtrlCPressed = 0;$/;"	v
_Py_DisplaySourceLine	traceback.c	/^_Py_DisplaySourceLine(PyObject *f, PyObject *filename, int lineno, int indent)$/;"	f
_Py_DumpTraceback	traceback.c	/^_Py_DumpTraceback(int fd, PyThreadState *tstate)$/;"	f
_Py_DumpTracebackThreads	traceback.c	/^_Py_DumpTracebackThreads(int fd, PyInterpreterState *interp,$/;"	f
_Py_Finalizing	pythonrun.c	/^PyThreadState *_Py_Finalizing = NULL;$/;"	v
_Py_FindSourceFile	traceback.c	/^_Py_FindSourceFile(PyObject *filename, char* namebuf, size_t namelen, PyObject *io)$/;"	f	file:
_Py_GetDXProfile	ceval.c	/^_Py_GetDXProfile(PyObject *self, PyObject *args)$/;"	f
_Py_HandleCtrlC	pyparallel.c	/^_Py_HandleCtrlC(DWORD ctrltype)$/;"	f
_Py_HashSecret_Initialized	random.c	/^int _Py_HashSecret_Initialized = 0;$/;"	v
_Py_HashSecret_Initialized	random.c	/^static int _Py_HashSecret_Initialized = 0;$/;"	v	file:
_Py_InitializeEx_Private	pythonrun.c	/^_Py_InitializeEx_Private(int install_sigs, int install_importlib)$/;"	f
_Py_InstalledCtrlCHandler	pyparallel.c	/^int _Py_InstalledCtrlCHandler = 0;$/;"	v
_Py_M__importlib	importlib.h	/^unsigned char _Py_M__importlib[] = {$/;"	v
_Py_Mangle	compile.c	/^_Py_Mangle(PyObject *privateobj, PyObject *ident)$/;"	f
_Py_PXCTX	pyparallel.c	/^_Py_PXCTX(void)$/;"	f
_Py_PackageContext	modsupport.c	/^char *_Py_PackageContext = NULL;$/;"	v
_Py_PyAtExit	pythonrun.c	/^void _Py_PyAtExit(void (*func)(void))$/;"	f
_Py_RestoreSignals	pythonrun.c	/^_Py_RestoreSignals(void)$/;"	f
_Py_TracingPossible	ceval.c	/^static int _Py_TracingPossible = 0;$/;"	v	file:
_Py_VaBuildValue_SizeT	modsupport.c	/^_Py_VaBuildValue_SizeT(const char *format, va_list va)$/;"	f
_Py_char2wchar	fileutils.c	/^_Py_char2wchar(const char* arg, size_t *size)$/;"	f
_Py_ctype_table	pyctype.c	/^const unsigned int _Py_ctype_table[256] = {$/;"	v
_Py_ctype_tolower	pyctype.c	/^const unsigned char _Py_ctype_tolower[256] = {$/;"	v
_Py_ctype_toupper	pyctype.c	/^const unsigned char _Py_ctype_toupper[256] = {$/;"	v
_Py_device_encoding	fileutils.c	/^_Py_device_encoding(int fd)$/;"	f
_Py_dg_dtoa	dtoa.c	/^_Py_dg_dtoa(double dd, int mode, int ndigits,$/;"	f
_Py_dg_freedtoa	dtoa.c	/^_Py_dg_freedtoa(char *s)$/;"	f
_Py_dg_infinity	dtoa.c	/^_Py_dg_infinity(int sign)$/;"	f
_Py_dg_stdnan	dtoa.c	/^_Py_dg_stdnan(int sign)$/;"	f
_Py_dg_strtod	dtoa.c	/^_Py_dg_strtod(const char *s00, char **se)$/;"	f
_Py_fopen	fileutils.c	/^_Py_fopen(PyObject *path, const char *mode)$/;"	f
_Py_force_double	pymath.c	/^double _Py_force_double(double x)$/;"	f
_Py_get_387controlword	pymath.c	/^unsigned short _Py_get_387controlword(void) {$/;"	f
_Py_parse_inf_or_nan	pystrtod.c	/^_Py_parse_inf_or_nan(const char *p, char **endptr)$/;"	f
_Py_set_387controlword	pymath.c	/^void _Py_set_387controlword(unsigned short cw) {$/;"	f
_Py_stat	fileutils.c	/^_Py_stat(PyObject *path, struct stat *statbuf)$/;"	f
_Py_wchar2char	fileutils.c	/^_Py_wchar2char(const wchar_t *text, size_t *error_pos)$/;"	f
_Py_wfopen	fileutils.c	/^_Py_wfopen(const wchar_t *path, const wchar_t *mode)$/;"	f
_Py_wgetcwd	fileutils.c	/^_Py_wgetcwd(wchar_t *buf, size_t size)$/;"	f
_Py_wreadlink	fileutils.c	/^_Py_wreadlink(const wchar_t *path, wchar_t *buf, size_t bufsiz)$/;"	f
_Py_wrealpath	fileutils.c	/^_Py_wrealpath(const wchar_t *path,$/;"	f
_Py_wstat	fileutils.c	/^_Py_wstat(const wchar_t* path, struct stat *buf)$/;"	f
_RBUF	pyparallel_private.h	/^typedef struct _RBUF {$/;"	s
_SBUF	pyparallel_private.h	/^typedef struct _SBUF {$/;"	s
_SGI_MP_SOURCE	mystrtoul.c	5;"	d	file:
_SIG_INVALID	pyparallel.c	1505;"	d	file:
_SIG_NULL	pyparallel.c	1506;"	d	file:
_SIG_PX	pyparallel.c	1509;"	d	file:
_SIG_PY	pyparallel.c	1508;"	d	file:
_SIG_UNKNOWN	pyparallel.c	1507;"	d	file:
_TLSBUF	pyparallel_private.h	/^typedef struct _TLSBUF {$/;"	s
_TMPBUF_SIZE	pyparallel.c	181;"	d	file:
_XLIST	pyparallel.c	3715;"	d	file:
_XLIST_K	pyparallel.c	3719;"	d	file:
_XLIST_N	pyparallel.c	3716;"	d	file:
_XLIST_O	pyparallel.c	3717;"	d	file:
_XLIST_V	pyparallel.c	3718;"	d	file:
__class__	symtable.c	/^    __class__ = NULL, __locals__ = NULL;$/;"	v	file:
__doc__	compile.c	/^static PyObject *__doc__;$/;"	v	file:
__locals__	symtable.c	/^    __class__ = NULL, __locals__ = NULL;$/;"	v	file:
_arena	pyarena.c	/^struct _arena {$/;"	s	file:
_astmodule	Python-ast.c	/^static struct PyModuleDef _astmodule = {$/;"	v	typeref:struct:PyModuleDef	file:
_async__address	pyparallel.c	/^_async__address(PyObject *self, PyObject *o)$/;"	f
_async__close	pyparallel.c	/^_async__close(PyObject *self, PyObject *obj)$/;"	f
_async__dbg_address	pyparallel.c	/^_async__dbg_address(PyObject *self, PyObject *addr)$/;"	f
_async__post_open	pyparallel.c	/^_async__post_open(PyObject *self, PyObject *args)$/;"	f
_async__rawfile	pyparallel.c	/^_async__rawfile(PyObject *self, PyObject *obj)$/;"	f
_async_active_contexts	pyparallel.c	/^_async_active_contexts(PyObject *self, PyObject *args)$/;"	f
_async_active_count	pyparallel.c	/^_async_active_count(PyObject *self, PyObject *args)$/;"	f
_async_call_from_main_thread	pyparallel.c	/^_async_call_from_main_thread(PyObject *self, PyObject *args)$/;"	f
_async_call_from_main_thread_and_wait	pyparallel.c	/^_async_call_from_main_thread_and_wait(PyObject *self, PyObject *args)$/;"	f
_async_client	pyparallel.c	/^_async_client(PyObject *self, PyObject *args, PyObject *kwds)$/;"	f
_async_client_or_server	pyparallel.c	/^_async_client_or_server(PyObject *self, PyObject *args,$/;"	f
_async_cpu_count	pyparallel.c	/^_async_cpu_count(PyObject *self)$/;"	f
_async_enabled	pyparallel.c	/^_async_enabled(PyObject *self, PyObject *args)$/;"	f
_async_filecloser	pyparallel.c	/^_async_filecloser(PyObject *self, PyObject *args)$/;"	f
_async_fileopener	pyparallel.c	/^_async_fileopener(PyObject *self, PyObject *args)$/;"	f
_async_is_active	pyparallel.c	/^_async_is_active(PyObject *self, PyObject *args)$/;"	f
_async_is_active_ex	pyparallel.c	/^_async_is_active_ex(PyObject *self, PyObject *args)$/;"	f
_async_is_parallel_thread	pyparallel.c	/^_async_is_parallel_thread(void)$/;"	f
_async_map	pyparallel.c	/^_async_map(PyObject *self, PyObject *args)$/;"	f
_async_methods	pyparallel.c	/^PyMethodDef _async_methods[] = {$/;"	v
_async_persisted_contexts	pyparallel.c	/^_async_persisted_contexts(PyObject *self, PyObject *args)$/;"	f
_async_prewait	pyparallel.c	/^_async_prewait(PyObject *self, PyObject *o)$/;"	f
_async_print	pyparallel.c	/^_async_print(PyObject *self, PyObject *args)$/;"	f
_async_protect	pyparallel.c	/^_async_protect(PyObject *self, PyObject *obj)$/;"	f
_async_protected	pyparallel.c	/^_async_protected(PyObject *self, PyObject *obj)$/;"	f
_async_rdtsc	pyparallel.c	/^_async_rdtsc(void)$/;"	f
_async_read	pyparallel.c	/^_async_read(PyObject *self, PyObject *args, PyObject *kwds)$/;"	f
_async_read_lock	pyparallel.c	/^_async_read_lock(PyObject *self, PyObject *obj)$/;"	f
_async_read_unlock	pyparallel.c	/^_async_read_unlock(PyObject *self, PyObject *obj)$/;"	f
_async_refresh_memory_stats	pyparallel.c	/^_async_refresh_memory_stats(PyObject *obj, PyObject *args)$/;"	f
_async_register	pyparallel.c	/^_async_register(PyObject *self, PyObject *args, PyObject *kwds)$/;"	f
_async_run	pyparallel.c	/^_async_run(PyObject *self, PyObject *args)$/;"	f
_async_run_once	pyparallel.c	/^_async_run_once(PyObject *self, PyObject *args)$/;"	f
_async_server	pyparallel.c	/^_async_server(PyObject *self, PyObject *args, PyObject *kwds)$/;"	f
_async_signal	pyparallel.c	/^_async_signal(PyObject *self, PyObject *o)$/;"	f
_async_signal_and_wait	pyparallel.c	/^_async_signal_and_wait(PyObject *self, PyObject *args)$/;"	f
_async_stderr	pyparallel.c	/^_async_stderr(PyObject *self, PyObject *o)$/;"	f
_async_stdout	pyparallel.c	/^_async_stdout(PyObject *self, PyObject *o)$/;"	f
_async_submit_class	pyparallel.c	/^_async_submit_class(PyObject *self, PyObject *args)$/;"	f
_async_submit_client	pyparallel.c	/^_async_submit_client(PyObject *self, PyObject *args)$/;"	f
_async_submit_io	pyparallel.c	/^_async_submit_io(PyObject *self, PyObject *args)$/;"	f
_async_submit_read_io	pyparallel.c	/^_async_submit_read_io(PyObject *self, PyObject *args)$/;"	f
_async_submit_server	pyparallel.c	/^_async_submit_server(PyObject *self, PyObject *args)$/;"	f
_async_submit_timer	pyparallel.c	/^_async_submit_timer(PyObject *self, PyObject *args)$/;"	f
_async_submit_wait	pyparallel.c	/^_async_submit_wait(PyObject *self, PyObject *args)$/;"	f
_async_submit_work	pyparallel.c	/^_async_submit_work(PyObject *self, PyObject *args)$/;"	f
_async_submit_write_io	pyparallel.c	/^_async_submit_write_io(PyObject *self, PyObject *args)$/;"	f
_async_try_read_lock	pyparallel.c	/^_async_try_read_lock(PyObject *self, PyObject *obj)$/;"	f
_async_try_write_lock	pyparallel.c	/^_async_try_write_lock(PyObject *self, PyObject *obj)$/;"	f
_async_unprotect	pyparallel.c	/^_async_unprotect(PyObject *self, PyObject *obj)$/;"	f
_async_wait	pyparallel.c	/^_async_wait(PyObject *self, PyObject *o)$/;"	f
_async_write	pyparallel.c	/^_async_write(PyObject *self, PyObject *args, PyObject *kwds)$/;"	f
_async_write_lock	pyparallel.c	/^_async_write_lock(PyObject *self, PyObject *obj)$/;"	f
_async_write_unlock	pyparallel.c	/^_async_write_unlock(PyObject *self, PyObject *obj)$/;"	f
_asyncmodule	pyparallel.c	/^struct PyModuleDef _asyncmodule = {$/;"	v	typeref:struct:PyModuleDef
_asyncmodule_obj	pyparallel.c	/^static PyObject *_asyncmodule_obj;$/;"	v	file:
_block	pyarena.c	/^typedef struct _block {$/;"	s	file:
_bsd_cpu_count	pyparallel.c	/^_bsd_cpu_count(void)$/;"	f
_cache	pyparallel_private.h	/^    struct _cache {$/;"	s	struct:_cpuinfo
_call_from_main_thread	pyparallel.c	/^_call_from_main_thread(PyObject *self, PyObject *targs, int wait)$/;"	f
_check_interval	sysmodule.c	/^static int _check_interval = 100;$/;"	v	file:
_core	pyparallel_private.h	/^    struct _core {$/;"	s	struct:_cpuinfo
_cpu_count	pyparallel.c	/^_cpu_count(void)$/;"	f
_cpuinfo	pyparallel_private.h	/^typedef struct _cpuinfo {$/;"	s
_default_action	_warnings.c	/^static PyObject *_default_action; \/* String *\/$/;"	v	file:
_disabled_parallel_map	parallelmodule.c	/^_disabled_parallel_map(PyObject *self, PyObject *args)$/;"	f	file:
_disconnectex_tf_reuse	pyparallel.c	/^_Py_IDENTIFIER(_disconnectex_tf_reuse);$/;"	v
_disconnectex_tf_reuse	pyparallel_private.h	/^    int _disconnectex_tf_reuse;$/;"	m	struct:_PxSocket
_filters	_warnings.c	/^static PyObject *_filters;  \/* List *\/$/;"	v	file:
_initial_accepts	pyparallel.c	/^_Py_IDENTIFIER(_initial_accepts);$/;"	v
_initial_accepts	pyparallel_private.h	/^    int _initial_accepts;$/;"	m	struct:_PxSocket
_is_active	pyparallel.c	/^_is_active(void)$/;"	f
_is_active_ex	pyparallel.c	/^_is_active_ex(void)$/;"	f
_is_parallel_thread	pyparallel.c	/^_is_parallel_thread(void)$/;"	f
_max_sockets	pyparallel.c	/^_Py_IDENTIFIER(_max_sockets);$/;"	v
_max_sockets	pyparallel_private.h	/^    int _max_sockets;$/;"	m	struct:_PxSocket
_monitor_fd_accept	pyparallel.c	/^_Py_IDENTIFIER(_monitor_fd_accept);$/;"	v
_monitor_fd_accept	pyparallel_private.h	/^    int _monitor_fd_accept;$/;"	m	struct:_PxSocket
_noop	thread_pthread.h	/^void _noop(void)$/;"	f
_once_registry	_warnings.c	/^static PyObject *_once_registry;  \/* Dict *\/$/;"	v	file:
_parallel_map	pyparallel.c	/^_parallel_map(PyObject *self, PyObject *args)$/;"	f
_parallel_methods	pyparallel.c	/^static PyMethodDef _parallel_methods[] = {$/;"	v	file:
_parallelmodule	pyparallel.c	/^static struct PyModuleDef _parallelmodule = {$/;"	v	typeref:struct:PyModuleDef	file:
_protect	pyparallel.c	/^_protect(PyObject *obj)$/;"	f
_protected	pyparallel.c	/^_protected(PyObject *obj)$/;"	f
_pxsocket	pyparallel_private.h	/^    PxSocket _pxsocket;$/;"	m	struct:_PxClientSocket
_pxsocket	pyparallel_private.h	/^    PxSocket _pxsocket;$/;"	m	struct:_PxServerSocket
_pxsocket_initial_bytes_to_send	pyparallel.c	/^_pxsocket_initial_bytes_to_send(Context *c, PxSocket *s)$/;"	f
_pythread_nt_set_stacksize	thread_nt.h	/^_pythread_nt_set_stacksize(size_t size)$/;"	f
_pythread_os2_set_stacksize	thread_os2.h	/^_pythread_os2_set_stacksize(size_t size)$/;"	f
_pythread_pthread_set_stacksize	thread_pthread.h	/^_pythread_pthread_set_stacksize(size_t size)$/;"	f
_pythread_stacksize	thread.c	/^static size_t _pythread_stacksize = 0;$/;"	v	file:
_rdtsc	pyparallel.c	/^_rdtsc(void)$/;"	f
_read_lock	pyparallel_private.h	/^_read_lock(PyObject *obj)$/;"	f
_read_unlock	pyparallel_private.h	/^_read_unlock(PyObject *obj)$/;"	f
_refresh	pyparallel.c	8839;"	d	file:
_tls_bitscan_fwd	pyparallel.c	184;"	d	file:
_tls_bitscan_fwd	pyparallel.c	190;"	d	file:
_tls_bitscan_rev	pyparallel.c	185;"	d	file:
_tls_bitscan_rev	pyparallel.c	191;"	d	file:
_tls_interlocked_and	pyparallel.c	187;"	d	file:
_tls_interlocked_and	pyparallel.c	193;"	d	file:
_tls_interlocked_or	pyparallel.c	186;"	d	file:
_tls_interlocked_or	pyparallel.c	192;"	d	file:
_tls_popcnt	pyparallel.c	188;"	d	file:
_tls_popcnt	pyparallel.c	194;"	d	file:
_try_close_existing_socket_when_resetting_overlapped	pyparallel.c	/^_Py_IDENTIFIER(_try_close_existing_socket_when_resetting_overlapped);$/;"	v
_try_close_existing_socket_when_resetting_overlapped	pyparallel_private.h	/^    int _try_close_existing_socket_when_resetting_overlapped;$/;"	m	struct:_PxSocket
_try_extract_something_sendable_from_object	pyparallel.c	/^_try_extract_something_sendable_from_object($/;"	f
_try_read_lock	pyparallel_private.h	/^_try_read_lock(PyObject *obj)$/;"	f
_try_write_lock	pyparallel_private.h	/^_try_write_lock(PyObject *obj)$/;"	f
_unprotect	pyparallel.c	/^_unprotect(PyObject *obj)$/;"	f
_wrap	pyparallel.c	/^_wrap(PyTypeObject *tp, PyObject *args, PyObject *kwds)$/;"	f
_write_lock	pyparallel_private.h	/^_write_lock(PyObject *obj)$/;"	f
_write_unlock	pyparallel_private.h	/^_write_unlock(PyObject *obj)$/;"	f
a_bytecode	compile.c	/^    PyObject *a_bytecode;  \/* string containing bytecode *\/$/;"	m	struct:assembler	file:
a_cur	pyarena.c	/^    block *a_cur;$/;"	m	struct:_arena	file:
a_head	pyarena.c	/^    block *a_head;$/;"	m	struct:_arena	file:
a_lineno	compile.c	/^    int a_lineno;              \/* last lineno of emitted instruction *\/$/;"	m	struct:assembler	file:
a_lineno_off	compile.c	/^    int a_lineno_off;      \/* bytecode offset of last lineno *\/$/;"	m	struct:assembler	file:
a_lnotab	compile.c	/^    PyObject *a_lnotab;    \/* string containing lnotab *\/$/;"	m	struct:assembler	file:
a_lnotab_off	compile.c	/^    int a_lnotab_off;      \/* offset into lnotab *\/$/;"	m	struct:assembler	file:
a_nblocks	compile.c	/^    int a_nblocks;             \/* number of reachable blocks *\/$/;"	m	struct:assembler	file:
a_objects	pyarena.c	/^    PyObject *a_objects;$/;"	m	struct:_arena	file:
a_offset	compile.c	/^    int a_offset;              \/* offset into bytecode *\/$/;"	m	struct:assembler	file:
a_postorder	compile.c	/^    basicblock **a_postorder; \/* list of blocks in dfs postorder *\/$/;"	m	struct:assembler	file:
ab_mem	pyarena.c	/^    void *ab_mem;$/;"	m	struct:_block	file:
ab_next	pyarena.c	/^    struct _block *ab_next;$/;"	m	struct:_block	typeref:struct:_block::_block	file:
ab_offset	pyarena.c	/^    size_t ab_offset;$/;"	m	struct:_block	file:
ab_size	pyarena.c	/^    size_t ab_size;$/;"	m	struct:_block	file:
acceptex	pyparallel_private.h	/^    TP_WORK  *acceptex;$/;"	m	struct:_PxSocket
acceptex_cs	pyparallel_private.h	/^    CRITICAL_SECTION acceptex_cs;$/;"	m	struct:_PxSocket
active	pyparallel_private.h	/^    volatile long active;$/;"	m	struct:_PxState
add_ast_fields	Python-ast.c	/^static int add_ast_fields(void)$/;"	f	file:
add_attributes	Python-ast.c	/^static int add_attributes(PyTypeObject* type, char**attrs, int num_fields)$/;"	f	file:
add_flag	pythonrun.c	/^add_flag(int flag, const char *envs)$/;"	f	file:
addcleanup	getargs.c	/^addcleanup(void *ptr, freelist_t *freelist, destr_t destructor)$/;"	f	file:
aix_getoldmodules	dynload_aix.c	/^aix_getoldmodules(void **modlistptr)$/;"	f	file:
aix_load	dynload_aix.c	15;"	d	file:
aix_load	dynload_aix.c	17;"	d	file:
aix_loaderror	dynload_aix.c	/^aix_loaderror(const char *pathname)$/;"	f	file:
alias	Python-ast.c	/^alias(identifier name, identifier asname, PyArena *arena)$/;"	f
alias_fields	Python-ast.c	/^static char *alias_fields[]={$/;"	v	file:
alias_for_import_name	ast.c	/^alias_for_import_name(struct compiling *c, const node *n, int store)$/;"	f	file:
alias_type	Python-ast.c	/^static PyTypeObject *alias_type;$/;"	v	file:
align	formatter_unicode.c	/^    Py_UCS4 align;$/;"	m	struct:__anon9	file:
alignment_mismatches	pyparallel_private.h	/^    size_t  alignment_mismatches;$/;"	m	struct:_PyParallelHeap
alignment_mismatches	pyparallel_private.h	/^    size_t alignment_mismatches;$/;"	m	struct:_PyParallelContextStats
allocated	pyparallel_private.h	/^    Py_ssize_t allocated;$/;"	m	struct:_PxSocketBufList
allocated	pyparallel_private.h	/^    size_t allocated;$/;"	m	struct:_PyParallelContextStats
already_warned	_warnings.c	/^already_warned(PyObject *registry, PyObject *key, int should_set)$/;"	f	file:
alternate	formatter_unicode.c	/^    int alternate;$/;"	m	struct:__anon9	file:
analyze_block	symtable.c	/^analyze_block(PySTEntryObject *ste, PyObject *bound, PyObject *free,$/;"	f	file:
analyze_cells	symtable.c	/^analyze_cells(PyObject *scopes, PyObject *free, const char *restricted)$/;"	f	file:
analyze_child_block	symtable.c	/^analyze_child_block(PySTEntryObject *entry, PyObject *bound, PyObject *free,$/;"	f	file:
analyze_name	symtable.c	/^analyze_name(PySTEntryObject *ste, PyObject *scopes, PyObject *name, long flags,$/;"	f	file:
annotation	Python-ast.c	/^_Py_IDENTIFIER(annotation);$/;"	v
append_object	pyparallel_private.h	/^append_object(Objects *list, Object *o)$/;"	f
arcs_0_0	graminit.c	/^static arc arcs_0_0[3] = {$/;"	v	file:
arcs_0_1	graminit.c	/^static arc arcs_0_1[1] = {$/;"	v	file:
arcs_0_2	graminit.c	/^static arc arcs_0_2[1] = {$/;"	v	file:
arcs_10_0	graminit.c	/^static arc arcs_10_0[3] = {$/;"	v	file:
arcs_10_1	graminit.c	/^static arc arcs_10_1[3] = {$/;"	v	file:
arcs_10_10	graminit.c	/^static arc arcs_10_10[3] = {$/;"	v	file:
arcs_10_11	graminit.c	/^static arc arcs_10_11[3] = {$/;"	v	file:
arcs_10_12	graminit.c	/^static arc arcs_10_12[3] = {$/;"	v	file:
arcs_10_13	graminit.c	/^static arc arcs_10_13[2] = {$/;"	v	file:
arcs_10_14	graminit.c	/^static arc arcs_10_14[2] = {$/;"	v	file:
arcs_10_15	graminit.c	/^static arc arcs_10_15[1] = {$/;"	v	file:
arcs_10_16	graminit.c	/^static arc arcs_10_16[3] = {$/;"	v	file:
arcs_10_17	graminit.c	/^static arc arcs_10_17[1] = {$/;"	v	file:
arcs_10_2	graminit.c	/^static arc arcs_10_2[3] = {$/;"	v	file:
arcs_10_3	graminit.c	/^static arc arcs_10_3[1] = {$/;"	v	file:
arcs_10_4	graminit.c	/^static arc arcs_10_4[1] = {$/;"	v	file:
arcs_10_5	graminit.c	/^static arc arcs_10_5[4] = {$/;"	v	file:
arcs_10_6	graminit.c	/^static arc arcs_10_6[2] = {$/;"	v	file:
arcs_10_7	graminit.c	/^static arc arcs_10_7[2] = {$/;"	v	file:
arcs_10_8	graminit.c	/^static arc arcs_10_8[1] = {$/;"	v	file:
arcs_10_9	graminit.c	/^static arc arcs_10_9[2] = {$/;"	v	file:
arcs_11_0	graminit.c	/^static arc arcs_11_0[1] = {$/;"	v	file:
arcs_11_1	graminit.c	/^static arc arcs_11_1[1] = {$/;"	v	file:
arcs_12_0	graminit.c	/^static arc arcs_12_0[2] = {$/;"	v	file:
arcs_12_1	graminit.c	/^static arc arcs_12_1[1] = {$/;"	v	file:
arcs_13_0	graminit.c	/^static arc arcs_13_0[1] = {$/;"	v	file:
arcs_13_1	graminit.c	/^static arc arcs_13_1[2] = {$/;"	v	file:
arcs_13_2	graminit.c	/^static arc arcs_13_2[2] = {$/;"	v	file:
arcs_13_3	graminit.c	/^static arc arcs_13_3[1] = {$/;"	v	file:
arcs_14_0	graminit.c	/^static arc arcs_14_0[8] = {$/;"	v	file:
arcs_14_1	graminit.c	/^static arc arcs_14_1[1] = {$/;"	v	file:
arcs_15_0	graminit.c	/^static arc arcs_15_0[1] = {$/;"	v	file:
arcs_15_1	graminit.c	/^static arc arcs_15_1[3] = {$/;"	v	file:
arcs_15_2	graminit.c	/^static arc arcs_15_2[2] = {$/;"	v	file:
arcs_15_3	graminit.c	/^static arc arcs_15_3[2] = {$/;"	v	file:
arcs_15_4	graminit.c	/^static arc arcs_15_4[1] = {$/;"	v	file:
arcs_15_5	graminit.c	/^static arc arcs_15_5[2] = {$/;"	v	file:
arcs_16_0	graminit.c	/^static arc arcs_16_0[2] = {$/;"	v	file:
arcs_16_1	graminit.c	/^static arc arcs_16_1[2] = {$/;"	v	file:
arcs_16_2	graminit.c	/^static arc arcs_16_2[3] = {$/;"	v	file:
arcs_17_0	graminit.c	/^static arc arcs_17_0[12] = {$/;"	v	file:
arcs_17_1	graminit.c	/^static arc arcs_17_1[1] = {$/;"	v	file:
arcs_18_0	graminit.c	/^static arc arcs_18_0[1] = {$/;"	v	file:
arcs_18_1	graminit.c	/^static arc arcs_18_1[1] = {$/;"	v	file:
arcs_18_2	graminit.c	/^static arc arcs_18_2[1] = {$/;"	v	file:
arcs_19_0	graminit.c	/^static arc arcs_19_0[1] = {$/;"	v	file:
arcs_19_1	graminit.c	/^static arc arcs_19_1[1] = {$/;"	v	file:
arcs_1_0	graminit.c	/^static arc arcs_1_0[3] = {$/;"	v	file:
arcs_1_1	graminit.c	/^static arc arcs_1_1[1] = {$/;"	v	file:
arcs_20_0	graminit.c	/^static arc arcs_20_0[5] = {$/;"	v	file:
arcs_20_1	graminit.c	/^static arc arcs_20_1[1] = {$/;"	v	file:
arcs_21_0	graminit.c	/^static arc arcs_21_0[1] = {$/;"	v	file:
arcs_21_1	graminit.c	/^static arc arcs_21_1[1] = {$/;"	v	file:
arcs_22_0	graminit.c	/^static arc arcs_22_0[1] = {$/;"	v	file:
arcs_22_1	graminit.c	/^static arc arcs_22_1[1] = {$/;"	v	file:
arcs_23_0	graminit.c	/^static arc arcs_23_0[1] = {$/;"	v	file:
arcs_23_1	graminit.c	/^static arc arcs_23_1[2] = {$/;"	v	file:
arcs_23_2	graminit.c	/^static arc arcs_23_2[1] = {$/;"	v	file:
arcs_24_0	graminit.c	/^static arc arcs_24_0[1] = {$/;"	v	file:
arcs_24_1	graminit.c	/^static arc arcs_24_1[1] = {$/;"	v	file:
arcs_25_0	graminit.c	/^static arc arcs_25_0[1] = {$/;"	v	file:
arcs_25_1	graminit.c	/^static arc arcs_25_1[2] = {$/;"	v	file:
arcs_25_2	graminit.c	/^static arc arcs_25_2[2] = {$/;"	v	file:
arcs_25_3	graminit.c	/^static arc arcs_25_3[1] = {$/;"	v	file:
arcs_25_4	graminit.c	/^static arc arcs_25_4[1] = {$/;"	v	file:
arcs_26_0	graminit.c	/^static arc arcs_26_0[2] = {$/;"	v	file:
arcs_26_1	graminit.c	/^static arc arcs_26_1[1] = {$/;"	v	file:
arcs_27_0	graminit.c	/^static arc arcs_27_0[1] = {$/;"	v	file:
arcs_27_1	graminit.c	/^static arc arcs_27_1[1] = {$/;"	v	file:
arcs_27_2	graminit.c	/^static arc arcs_27_2[1] = {$/;"	v	file:
arcs_28_0	graminit.c	/^static arc arcs_28_0[1] = {$/;"	v	file:
arcs_28_1	graminit.c	/^static arc arcs_28_1[3] = {$/;"	v	file:
arcs_28_2	graminit.c	/^static arc arcs_28_2[4] = {$/;"	v	file:
arcs_28_3	graminit.c	/^static arc arcs_28_3[1] = {$/;"	v	file:
arcs_28_4	graminit.c	/^static arc arcs_28_4[3] = {$/;"	v	file:
arcs_28_5	graminit.c	/^static arc arcs_28_5[1] = {$/;"	v	file:
arcs_28_6	graminit.c	/^static arc arcs_28_6[1] = {$/;"	v	file:
arcs_28_7	graminit.c	/^static arc arcs_28_7[1] = {$/;"	v	file:
arcs_29_0	graminit.c	/^static arc arcs_29_0[1] = {$/;"	v	file:
arcs_29_1	graminit.c	/^static arc arcs_29_1[2] = {$/;"	v	file:
arcs_29_2	graminit.c	/^static arc arcs_29_2[1] = {$/;"	v	file:
arcs_29_3	graminit.c	/^static arc arcs_29_3[1] = {$/;"	v	file:
arcs_2_0	graminit.c	/^static arc arcs_2_0[1] = {$/;"	v	file:
arcs_2_1	graminit.c	/^static arc arcs_2_1[2] = {$/;"	v	file:
arcs_2_2	graminit.c	/^static arc arcs_2_2[1] = {$/;"	v	file:
arcs_30_0	graminit.c	/^static arc arcs_30_0[1] = {$/;"	v	file:
arcs_30_1	graminit.c	/^static arc arcs_30_1[2] = {$/;"	v	file:
arcs_30_2	graminit.c	/^static arc arcs_30_2[1] = {$/;"	v	file:
arcs_30_3	graminit.c	/^static arc arcs_30_3[1] = {$/;"	v	file:
arcs_31_0	graminit.c	/^static arc arcs_31_0[1] = {$/;"	v	file:
arcs_31_1	graminit.c	/^static arc arcs_31_1[2] = {$/;"	v	file:
arcs_31_2	graminit.c	/^static arc arcs_31_2[2] = {$/;"	v	file:
arcs_32_0	graminit.c	/^static arc arcs_32_0[1] = {$/;"	v	file:
arcs_32_1	graminit.c	/^static arc arcs_32_1[2] = {$/;"	v	file:
arcs_33_0	graminit.c	/^static arc arcs_33_0[1] = {$/;"	v	file:
arcs_33_1	graminit.c	/^static arc arcs_33_1[2] = {$/;"	v	file:
arcs_34_0	graminit.c	/^static arc arcs_34_0[1] = {$/;"	v	file:
arcs_34_1	graminit.c	/^static arc arcs_34_1[1] = {$/;"	v	file:
arcs_34_2	graminit.c	/^static arc arcs_34_2[2] = {$/;"	v	file:
arcs_35_0	graminit.c	/^static arc arcs_35_0[1] = {$/;"	v	file:
arcs_35_1	graminit.c	/^static arc arcs_35_1[1] = {$/;"	v	file:
arcs_35_2	graminit.c	/^static arc arcs_35_2[2] = {$/;"	v	file:
arcs_36_0	graminit.c	/^static arc arcs_36_0[1] = {$/;"	v	file:
arcs_36_1	graminit.c	/^static arc arcs_36_1[1] = {$/;"	v	file:
arcs_36_2	graminit.c	/^static arc arcs_36_2[2] = {$/;"	v	file:
arcs_36_3	graminit.c	/^static arc arcs_36_3[1] = {$/;"	v	file:
arcs_36_4	graminit.c	/^static arc arcs_36_4[1] = {$/;"	v	file:
arcs_37_0	graminit.c	/^static arc arcs_37_0[8] = {$/;"	v	file:
arcs_37_1	graminit.c	/^static arc arcs_37_1[1] = {$/;"	v	file:
arcs_38_0	graminit.c	/^static arc arcs_38_0[1] = {$/;"	v	file:
arcs_38_1	graminit.c	/^static arc arcs_38_1[1] = {$/;"	v	file:
arcs_38_2	graminit.c	/^static arc arcs_38_2[1] = {$/;"	v	file:
arcs_38_3	graminit.c	/^static arc arcs_38_3[1] = {$/;"	v	file:
arcs_38_4	graminit.c	/^static arc arcs_38_4[3] = {$/;"	v	file:
arcs_38_5	graminit.c	/^static arc arcs_38_5[1] = {$/;"	v	file:
arcs_38_6	graminit.c	/^static arc arcs_38_6[1] = {$/;"	v	file:
arcs_38_7	graminit.c	/^static arc arcs_38_7[1] = {$/;"	v	file:
arcs_39_0	graminit.c	/^static arc arcs_39_0[1] = {$/;"	v	file:
arcs_39_1	graminit.c	/^static arc arcs_39_1[1] = {$/;"	v	file:
arcs_39_2	graminit.c	/^static arc arcs_39_2[1] = {$/;"	v	file:
arcs_39_3	graminit.c	/^static arc arcs_39_3[1] = {$/;"	v	file:
arcs_39_4	graminit.c	/^static arc arcs_39_4[2] = {$/;"	v	file:
arcs_39_5	graminit.c	/^static arc arcs_39_5[1] = {$/;"	v	file:
arcs_39_6	graminit.c	/^static arc arcs_39_6[1] = {$/;"	v	file:
arcs_39_7	graminit.c	/^static arc arcs_39_7[1] = {$/;"	v	file:
arcs_3_0	graminit.c	/^static arc arcs_3_0[1] = {$/;"	v	file:
arcs_3_1	graminit.c	/^static arc arcs_3_1[1] = {$/;"	v	file:
arcs_3_2	graminit.c	/^static arc arcs_3_2[2] = {$/;"	v	file:
arcs_3_3	graminit.c	/^static arc arcs_3_3[2] = {$/;"	v	file:
arcs_3_4	graminit.c	/^static arc arcs_3_4[1] = {$/;"	v	file:
arcs_3_5	graminit.c	/^static arc arcs_3_5[1] = {$/;"	v	file:
arcs_3_6	graminit.c	/^static arc arcs_3_6[1] = {$/;"	v	file:
arcs_40_0	graminit.c	/^static arc arcs_40_0[1] = {$/;"	v	file:
arcs_40_1	graminit.c	/^static arc arcs_40_1[1] = {$/;"	v	file:
arcs_40_2	graminit.c	/^static arc arcs_40_2[1] = {$/;"	v	file:
arcs_40_3	graminit.c	/^static arc arcs_40_3[1] = {$/;"	v	file:
arcs_40_4	graminit.c	/^static arc arcs_40_4[1] = {$/;"	v	file:
arcs_40_5	graminit.c	/^static arc arcs_40_5[1] = {$/;"	v	file:
arcs_40_6	graminit.c	/^static arc arcs_40_6[2] = {$/;"	v	file:
arcs_40_7	graminit.c	/^static arc arcs_40_7[1] = {$/;"	v	file:
arcs_40_8	graminit.c	/^static arc arcs_40_8[1] = {$/;"	v	file:
arcs_40_9	graminit.c	/^static arc arcs_40_9[1] = {$/;"	v	file:
arcs_41_0	graminit.c	/^static arc arcs_41_0[1] = {$/;"	v	file:
arcs_41_1	graminit.c	/^static arc arcs_41_1[1] = {$/;"	v	file:
arcs_41_10	graminit.c	/^static arc arcs_41_10[1] = {$/;"	v	file:
arcs_41_11	graminit.c	/^static arc arcs_41_11[1] = {$/;"	v	file:
arcs_41_12	graminit.c	/^static arc arcs_41_12[2] = {$/;"	v	file:
arcs_41_2	graminit.c	/^static arc arcs_41_2[1] = {$/;"	v	file:
arcs_41_3	graminit.c	/^static arc arcs_41_3[2] = {$/;"	v	file:
arcs_41_4	graminit.c	/^static arc arcs_41_4[1] = {$/;"	v	file:
arcs_41_5	graminit.c	/^static arc arcs_41_5[1] = {$/;"	v	file:
arcs_41_6	graminit.c	/^static arc arcs_41_6[1] = {$/;"	v	file:
arcs_41_7	graminit.c	/^static arc arcs_41_7[1] = {$/;"	v	file:
arcs_41_8	graminit.c	/^static arc arcs_41_8[4] = {$/;"	v	file:
arcs_41_9	graminit.c	/^static arc arcs_41_9[1] = {$/;"	v	file:
arcs_42_0	graminit.c	/^static arc arcs_42_0[1] = {$/;"	v	file:
arcs_42_1	graminit.c	/^static arc arcs_42_1[1] = {$/;"	v	file:
arcs_42_2	graminit.c	/^static arc arcs_42_2[2] = {$/;"	v	file:
arcs_42_3	graminit.c	/^static arc arcs_42_3[1] = {$/;"	v	file:
arcs_42_4	graminit.c	/^static arc arcs_42_4[1] = {$/;"	v	file:
arcs_43_0	graminit.c	/^static arc arcs_43_0[1] = {$/;"	v	file:
arcs_43_1	graminit.c	/^static arc arcs_43_1[2] = {$/;"	v	file:
arcs_43_2	graminit.c	/^static arc arcs_43_2[1] = {$/;"	v	file:
arcs_43_3	graminit.c	/^static arc arcs_43_3[1] = {$/;"	v	file:
arcs_44_0	graminit.c	/^static arc arcs_44_0[1] = {$/;"	v	file:
arcs_44_1	graminit.c	/^static arc arcs_44_1[2] = {$/;"	v	file:
arcs_44_2	graminit.c	/^static arc arcs_44_2[2] = {$/;"	v	file:
arcs_44_3	graminit.c	/^static arc arcs_44_3[1] = {$/;"	v	file:
arcs_44_4	graminit.c	/^static arc arcs_44_4[1] = {$/;"	v	file:
arcs_45_0	graminit.c	/^static arc arcs_45_0[2] = {$/;"	v	file:
arcs_45_1	graminit.c	/^static arc arcs_45_1[1] = {$/;"	v	file:
arcs_45_2	graminit.c	/^static arc arcs_45_2[1] = {$/;"	v	file:
arcs_45_3	graminit.c	/^static arc arcs_45_3[1] = {$/;"	v	file:
arcs_45_4	graminit.c	/^static arc arcs_45_4[2] = {$/;"	v	file:
arcs_46_0	graminit.c	/^static arc arcs_46_0[2] = {$/;"	v	file:
arcs_46_1	graminit.c	/^static arc arcs_46_1[2] = {$/;"	v	file:
arcs_46_2	graminit.c	/^static arc arcs_46_2[1] = {$/;"	v	file:
arcs_46_3	graminit.c	/^static arc arcs_46_3[1] = {$/;"	v	file:
arcs_46_4	graminit.c	/^static arc arcs_46_4[1] = {$/;"	v	file:
arcs_46_5	graminit.c	/^static arc arcs_46_5[1] = {$/;"	v	file:
arcs_47_0	graminit.c	/^static arc arcs_47_0[2] = {$/;"	v	file:
arcs_47_1	graminit.c	/^static arc arcs_47_1[1] = {$/;"	v	file:
arcs_48_0	graminit.c	/^static arc arcs_48_0[1] = {$/;"	v	file:
arcs_48_1	graminit.c	/^static arc arcs_48_1[2] = {$/;"	v	file:
arcs_48_2	graminit.c	/^static arc arcs_48_2[1] = {$/;"	v	file:
arcs_48_3	graminit.c	/^static arc arcs_48_3[1] = {$/;"	v	file:
arcs_48_4	graminit.c	/^static arc arcs_48_4[1] = {$/;"	v	file:
arcs_49_0	graminit.c	/^static arc arcs_49_0[1] = {$/;"	v	file:
arcs_49_1	graminit.c	/^static arc arcs_49_1[2] = {$/;"	v	file:
arcs_49_2	graminit.c	/^static arc arcs_49_2[1] = {$/;"	v	file:
arcs_49_3	graminit.c	/^static arc arcs_49_3[1] = {$/;"	v	file:
arcs_49_4	graminit.c	/^static arc arcs_49_4[1] = {$/;"	v	file:
arcs_4_0	graminit.c	/^static arc arcs_4_0[1] = {$/;"	v	file:
arcs_4_1	graminit.c	/^static arc arcs_4_1[2] = {$/;"	v	file:
arcs_50_0	graminit.c	/^static arc arcs_50_0[1] = {$/;"	v	file:
arcs_50_1	graminit.c	/^static arc arcs_50_1[2] = {$/;"	v	file:
arcs_51_0	graminit.c	/^static arc arcs_51_0[1] = {$/;"	v	file:
arcs_51_1	graminit.c	/^static arc arcs_51_1[2] = {$/;"	v	file:
arcs_52_0	graminit.c	/^static arc arcs_52_0[2] = {$/;"	v	file:
arcs_52_1	graminit.c	/^static arc arcs_52_1[1] = {$/;"	v	file:
arcs_52_2	graminit.c	/^static arc arcs_52_2[1] = {$/;"	v	file:
arcs_53_0	graminit.c	/^static arc arcs_53_0[1] = {$/;"	v	file:
arcs_53_1	graminit.c	/^static arc arcs_53_1[2] = {$/;"	v	file:
arcs_54_0	graminit.c	/^static arc arcs_54_0[10] = {$/;"	v	file:
arcs_54_1	graminit.c	/^static arc arcs_54_1[1] = {$/;"	v	file:
arcs_54_2	graminit.c	/^static arc arcs_54_2[1] = {$/;"	v	file:
arcs_54_3	graminit.c	/^static arc arcs_54_3[2] = {$/;"	v	file:
arcs_55_0	graminit.c	/^static arc arcs_55_0[1] = {$/;"	v	file:
arcs_55_1	graminit.c	/^static arc arcs_55_1[1] = {$/;"	v	file:
arcs_55_2	graminit.c	/^static arc arcs_55_2[1] = {$/;"	v	file:
arcs_56_0	graminit.c	/^static arc arcs_56_0[1] = {$/;"	v	file:
arcs_56_1	graminit.c	/^static arc arcs_56_1[2] = {$/;"	v	file:
arcs_57_0	graminit.c	/^static arc arcs_57_0[1] = {$/;"	v	file:
arcs_57_1	graminit.c	/^static arc arcs_57_1[2] = {$/;"	v	file:
arcs_58_0	graminit.c	/^static arc arcs_58_0[1] = {$/;"	v	file:
arcs_58_1	graminit.c	/^static arc arcs_58_1[2] = {$/;"	v	file:
arcs_59_0	graminit.c	/^static arc arcs_59_0[1] = {$/;"	v	file:
arcs_59_1	graminit.c	/^static arc arcs_59_1[3] = {$/;"	v	file:
arcs_5_0	graminit.c	/^static arc arcs_5_0[1] = {$/;"	v	file:
arcs_5_1	graminit.c	/^static arc arcs_5_1[2] = {$/;"	v	file:
arcs_5_2	graminit.c	/^static arc arcs_5_2[1] = {$/;"	v	file:
arcs_60_0	graminit.c	/^static arc arcs_60_0[1] = {$/;"	v	file:
arcs_60_1	graminit.c	/^static arc arcs_60_1[3] = {$/;"	v	file:
arcs_61_0	graminit.c	/^static arc arcs_61_0[1] = {$/;"	v	file:
arcs_61_1	graminit.c	/^static arc arcs_61_1[5] = {$/;"	v	file:
arcs_62_0	graminit.c	/^static arc arcs_62_0[4] = {$/;"	v	file:
arcs_62_1	graminit.c	/^static arc arcs_62_1[1] = {$/;"	v	file:
arcs_62_2	graminit.c	/^static arc arcs_62_2[1] = {$/;"	v	file:
arcs_63_0	graminit.c	/^static arc arcs_63_0[1] = {$/;"	v	file:
arcs_63_1	graminit.c	/^static arc arcs_63_1[3] = {$/;"	v	file:
arcs_63_2	graminit.c	/^static arc arcs_63_2[1] = {$/;"	v	file:
arcs_63_3	graminit.c	/^static arc arcs_63_3[1] = {$/;"	v	file:
arcs_64_0	graminit.c	/^static arc arcs_64_0[10] = {$/;"	v	file:
arcs_64_1	graminit.c	/^static arc arcs_64_1[3] = {$/;"	v	file:
arcs_64_2	graminit.c	/^static arc arcs_64_2[2] = {$/;"	v	file:
arcs_64_3	graminit.c	/^static arc arcs_64_3[2] = {$/;"	v	file:
arcs_64_4	graminit.c	/^static arc arcs_64_4[1] = {$/;"	v	file:
arcs_64_5	graminit.c	/^static arc arcs_64_5[2] = {$/;"	v	file:
arcs_64_6	graminit.c	/^static arc arcs_64_6[1] = {$/;"	v	file:
arcs_64_7	graminit.c	/^static arc arcs_64_7[1] = {$/;"	v	file:
arcs_64_8	graminit.c	/^static arc arcs_64_8[1] = {$/;"	v	file:
arcs_65_0	graminit.c	/^static arc arcs_65_0[2] = {$/;"	v	file:
arcs_65_1	graminit.c	/^static arc arcs_65_1[3] = {$/;"	v	file:
arcs_65_2	graminit.c	/^static arc arcs_65_2[1] = {$/;"	v	file:
arcs_65_3	graminit.c	/^static arc arcs_65_3[3] = {$/;"	v	file:
arcs_65_4	graminit.c	/^static arc arcs_65_4[2] = {$/;"	v	file:
arcs_66_0	graminit.c	/^static arc arcs_66_0[3] = {$/;"	v	file:
arcs_66_1	graminit.c	/^static arc arcs_66_1[2] = {$/;"	v	file:
arcs_66_2	graminit.c	/^static arc arcs_66_2[1] = {$/;"	v	file:
arcs_66_3	graminit.c	/^static arc arcs_66_3[1] = {$/;"	v	file:
arcs_66_4	graminit.c	/^static arc arcs_66_4[1] = {$/;"	v	file:
arcs_66_5	graminit.c	/^static arc arcs_66_5[1] = {$/;"	v	file:
arcs_66_6	graminit.c	/^static arc arcs_66_6[1] = {$/;"	v	file:
arcs_67_0	graminit.c	/^static arc arcs_67_0[1] = {$/;"	v	file:
arcs_67_1	graminit.c	/^static arc arcs_67_1[2] = {$/;"	v	file:
arcs_67_2	graminit.c	/^static arc arcs_67_2[2] = {$/;"	v	file:
arcs_68_0	graminit.c	/^static arc arcs_68_0[2] = {$/;"	v	file:
arcs_68_1	graminit.c	/^static arc arcs_68_1[2] = {$/;"	v	file:
arcs_68_2	graminit.c	/^static arc arcs_68_2[3] = {$/;"	v	file:
arcs_68_3	graminit.c	/^static arc arcs_68_3[2] = {$/;"	v	file:
arcs_68_4	graminit.c	/^static arc arcs_68_4[1] = {$/;"	v	file:
arcs_69_0	graminit.c	/^static arc arcs_69_0[1] = {$/;"	v	file:
arcs_69_1	graminit.c	/^static arc arcs_69_1[2] = {$/;"	v	file:
arcs_69_2	graminit.c	/^static arc arcs_69_2[1] = {$/;"	v	file:
arcs_6_0	graminit.c	/^static arc arcs_6_0[1] = {$/;"	v	file:
arcs_6_1	graminit.c	/^static arc arcs_6_1[1] = {$/;"	v	file:
arcs_6_2	graminit.c	/^static arc arcs_6_2[1] = {$/;"	v	file:
arcs_6_3	graminit.c	/^static arc arcs_6_3[2] = {$/;"	v	file:
arcs_6_4	graminit.c	/^static arc arcs_6_4[1] = {$/;"	v	file:
arcs_6_5	graminit.c	/^static arc arcs_6_5[1] = {$/;"	v	file:
arcs_6_6	graminit.c	/^static arc arcs_6_6[1] = {$/;"	v	file:
arcs_6_7	graminit.c	/^static arc arcs_6_7[1] = {$/;"	v	file:
arcs_70_0	graminit.c	/^static arc arcs_70_0[2] = {$/;"	v	file:
arcs_70_1	graminit.c	/^static arc arcs_70_1[2] = {$/;"	v	file:
arcs_70_2	graminit.c	/^static arc arcs_70_2[3] = {$/;"	v	file:
arcs_71_0	graminit.c	/^static arc arcs_71_0[1] = {$/;"	v	file:
arcs_71_1	graminit.c	/^static arc arcs_71_1[2] = {$/;"	v	file:
arcs_71_2	graminit.c	/^static arc arcs_71_2[2] = {$/;"	v	file:
arcs_72_0	graminit.c	/^static arc arcs_72_0[1] = {$/;"	v	file:
arcs_72_1	graminit.c	/^static arc arcs_72_1[4] = {$/;"	v	file:
arcs_72_10	graminit.c	/^static arc arcs_72_10[2] = {$/;"	v	file:
arcs_72_2	graminit.c	/^static arc arcs_72_2[1] = {$/;"	v	file:
arcs_72_3	graminit.c	/^static arc arcs_72_3[1] = {$/;"	v	file:
arcs_72_4	graminit.c	/^static arc arcs_72_4[2] = {$/;"	v	file:
arcs_72_5	graminit.c	/^static arc arcs_72_5[3] = {$/;"	v	file:
arcs_72_6	graminit.c	/^static arc arcs_72_6[2] = {$/;"	v	file:
arcs_72_7	graminit.c	/^static arc arcs_72_7[2] = {$/;"	v	file:
arcs_72_8	graminit.c	/^static arc arcs_72_8[1] = {$/;"	v	file:
arcs_72_9	graminit.c	/^static arc arcs_72_9[1] = {$/;"	v	file:
arcs_73_0	graminit.c	/^static arc arcs_73_0[1] = {$/;"	v	file:
arcs_73_1	graminit.c	/^static arc arcs_73_1[1] = {$/;"	v	file:
arcs_73_2	graminit.c	/^static arc arcs_73_2[2] = {$/;"	v	file:
arcs_73_3	graminit.c	/^static arc arcs_73_3[2] = {$/;"	v	file:
arcs_73_4	graminit.c	/^static arc arcs_73_4[1] = {$/;"	v	file:
arcs_73_5	graminit.c	/^static arc arcs_73_5[1] = {$/;"	v	file:
arcs_73_6	graminit.c	/^static arc arcs_73_6[1] = {$/;"	v	file:
arcs_73_7	graminit.c	/^static arc arcs_73_7[1] = {$/;"	v	file:
arcs_74_0	graminit.c	/^static arc arcs_74_0[3] = {$/;"	v	file:
arcs_74_1	graminit.c	/^static arc arcs_74_1[2] = {$/;"	v	file:
arcs_74_2	graminit.c	/^static arc arcs_74_2[1] = {$/;"	v	file:
arcs_74_3	graminit.c	/^static arc arcs_74_3[1] = {$/;"	v	file:
arcs_74_4	graminit.c	/^static arc arcs_74_4[4] = {$/;"	v	file:
arcs_74_5	graminit.c	/^static arc arcs_74_5[2] = {$/;"	v	file:
arcs_74_6	graminit.c	/^static arc arcs_74_6[1] = {$/;"	v	file:
arcs_74_7	graminit.c	/^static arc arcs_74_7[2] = {$/;"	v	file:
arcs_75_0	graminit.c	/^static arc arcs_75_0[1] = {$/;"	v	file:
arcs_75_1	graminit.c	/^static arc arcs_75_1[3] = {$/;"	v	file:
arcs_75_2	graminit.c	/^static arc arcs_75_2[1] = {$/;"	v	file:
arcs_75_3	graminit.c	/^static arc arcs_75_3[1] = {$/;"	v	file:
arcs_76_0	graminit.c	/^static arc arcs_76_0[2] = {$/;"	v	file:
arcs_76_1	graminit.c	/^static arc arcs_76_1[1] = {$/;"	v	file:
arcs_77_0	graminit.c	/^static arc arcs_77_0[1] = {$/;"	v	file:
arcs_77_1	graminit.c	/^static arc arcs_77_1[1] = {$/;"	v	file:
arcs_77_2	graminit.c	/^static arc arcs_77_2[1] = {$/;"	v	file:
arcs_77_3	graminit.c	/^static arc arcs_77_3[1] = {$/;"	v	file:
arcs_77_4	graminit.c	/^static arc arcs_77_4[2] = {$/;"	v	file:
arcs_77_5	graminit.c	/^static arc arcs_77_5[1] = {$/;"	v	file:
arcs_78_0	graminit.c	/^static arc arcs_78_0[1] = {$/;"	v	file:
arcs_78_1	graminit.c	/^static arc arcs_78_1[1] = {$/;"	v	file:
arcs_78_2	graminit.c	/^static arc arcs_78_2[2] = {$/;"	v	file:
arcs_78_3	graminit.c	/^static arc arcs_78_3[1] = {$/;"	v	file:
arcs_79_0	graminit.c	/^static arc arcs_79_0[1] = {$/;"	v	file:
arcs_79_1	graminit.c	/^static arc arcs_79_1[1] = {$/;"	v	file:
arcs_7_0	graminit.c	/^static arc arcs_7_0[1] = {$/;"	v	file:
arcs_7_1	graminit.c	/^static arc arcs_7_1[2] = {$/;"	v	file:
arcs_7_2	graminit.c	/^static arc arcs_7_2[1] = {$/;"	v	file:
arcs_7_3	graminit.c	/^static arc arcs_7_3[1] = {$/;"	v	file:
arcs_80_0	graminit.c	/^static arc arcs_80_0[1] = {$/;"	v	file:
arcs_80_1	graminit.c	/^static arc arcs_80_1[2] = {$/;"	v	file:
arcs_80_2	graminit.c	/^static arc arcs_80_2[1] = {$/;"	v	file:
arcs_81_0	graminit.c	/^static arc arcs_81_0[2] = {$/;"	v	file:
arcs_81_1	graminit.c	/^static arc arcs_81_1[1] = {$/;"	v	file:
arcs_81_2	graminit.c	/^static arc arcs_81_2[1] = {$/;"	v	file:
arcs_8_0	graminit.c	/^static arc arcs_8_0[3] = {$/;"	v	file:
arcs_8_1	graminit.c	/^static arc arcs_8_1[3] = {$/;"	v	file:
arcs_8_10	graminit.c	/^static arc arcs_8_10[3] = {$/;"	v	file:
arcs_8_11	graminit.c	/^static arc arcs_8_11[3] = {$/;"	v	file:
arcs_8_12	graminit.c	/^static arc arcs_8_12[3] = {$/;"	v	file:
arcs_8_13	graminit.c	/^static arc arcs_8_13[2] = {$/;"	v	file:
arcs_8_14	graminit.c	/^static arc arcs_8_14[2] = {$/;"	v	file:
arcs_8_15	graminit.c	/^static arc arcs_8_15[1] = {$/;"	v	file:
arcs_8_16	graminit.c	/^static arc arcs_8_16[3] = {$/;"	v	file:
arcs_8_17	graminit.c	/^static arc arcs_8_17[1] = {$/;"	v	file:
arcs_8_2	graminit.c	/^static arc arcs_8_2[3] = {$/;"	v	file:
arcs_8_3	graminit.c	/^static arc arcs_8_3[1] = {$/;"	v	file:
arcs_8_4	graminit.c	/^static arc arcs_8_4[1] = {$/;"	v	file:
arcs_8_5	graminit.c	/^static arc arcs_8_5[4] = {$/;"	v	file:
arcs_8_6	graminit.c	/^static arc arcs_8_6[2] = {$/;"	v	file:
arcs_8_7	graminit.c	/^static arc arcs_8_7[2] = {$/;"	v	file:
arcs_8_8	graminit.c	/^static arc arcs_8_8[1] = {$/;"	v	file:
arcs_8_9	graminit.c	/^static arc arcs_8_9[2] = {$/;"	v	file:
arcs_9_0	graminit.c	/^static arc arcs_9_0[1] = {$/;"	v	file:
arcs_9_1	graminit.c	/^static arc arcs_9_1[2] = {$/;"	v	file:
arcs_9_2	graminit.c	/^static arc arcs_9_2[1] = {$/;"	v	file:
arcs_9_3	graminit.c	/^static arc arcs_9_3[1] = {$/;"	v	file:
arg	Python-ast.c	/^_Py_IDENTIFIER(arg);$/;"	v
arg	Python-ast.c	/^arg(identifier arg, expr_ty annotation, PyArena *arena)$/;"	f
arg	ceval.c	/^    void *arg;$/;"	m	struct:__anon4	file:
arg	ceval.c	/^    void *arg;$/;"	m	struct:__anon5	file:
arg	parallelmodule.c	/^    PyObject   *arg;$/;"	m	struct:ParallelContext4	file:
arg	thread_nt.h	/^    void *arg;$/;"	m	struct:__anon16
arg_fields	Python-ast.c	/^static char *arg_fields[]={$/;"	v	file:
arg_type	Python-ast.c	/^static PyTypeObject *arg_type;$/;"	v	file:
argc	parallelmodule.c	/^    Py_ssize_t argc;$/;"	m	struct:_ParallelContext	file:
args	Python-ast.c	/^_Py_IDENTIFIER(args);$/;"	v
args	parallelmodule.c	/^    PyObject **args;$/;"	m	struct:_ParallelContext	file:
args	parallelmodule.c	/^    PyObject *args;$/;"	m	struct:ParallelContext2	file:
args	parallelmodule.c	/^    PyObject *args;$/;"	m	struct:ParallelContext3	file:
args	pyparallel_private.h	/^    PyObject *args;$/;"	m	struct:_PyParallelContext
args_tuple	codecs.c	/^PyObject *args_tuple(PyObject *object,$/;"	f	file:
arguments	Python-ast.c	/^arguments(asdl_seq * args, identifier vararg, expr_ty varargannotation,$/;"	f
arguments_fields	Python-ast.c	/^static char *arguments_fields[]={$/;"	v	file:
arguments_type	Python-ast.c	/^static PyTypeObject *arguments_type;$/;"	v	file:
ascii_lower	_warnings.c	513;"	d	file:
asdl_int_seq_new	asdl.c	/^asdl_int_seq_new(Py_ssize_t size, PyArena *arena)$/;"	f
asdl_seq_new	asdl.c	/^asdl_seq_new(Py_ssize_t size, PyArena *arena)$/;"	f
asname	Python-ast.c	/^_Py_IDENTIFIER(asname);$/;"	v
assemble	compile.c	/^assemble(struct compiler *c, int addNone)$/;"	f	file:
assemble_emit	compile.c	/^assemble_emit(struct assembler *a, struct instr *i)$/;"	f	file:
assemble_free	compile.c	/^assemble_free(struct assembler *a)$/;"	f	file:
assemble_init	compile.c	/^assemble_init(struct assembler *a, int nblocks, int firstlineno)$/;"	f	file:
assemble_jump_offsets	compile.c	/^assemble_jump_offsets(struct assembler *a, struct compiler *c)$/;"	f	file:
assemble_lnotab	compile.c	/^assemble_lnotab(struct assembler *a, struct instr *i)$/;"	f	file:
assembler	compile.c	/^struct assembler {$/;"	s	file:
ast2obj_alias	Python-ast.c	/^ast2obj_alias(void* _o)$/;"	f
ast2obj_arg	Python-ast.c	/^ast2obj_arg(void* _o)$/;"	f
ast2obj_arguments	Python-ast.c	/^ast2obj_arguments(void* _o)$/;"	f
ast2obj_boolop	Python-ast.c	/^PyObject* ast2obj_boolop(boolop_ty o)$/;"	f
ast2obj_bytes	Python-ast.c	678;"	d	file:
ast2obj_cmpop	Python-ast.c	/^PyObject* ast2obj_cmpop(cmpop_ty o)$/;"	f
ast2obj_comprehension	Python-ast.c	/^ast2obj_comprehension(void* _o)$/;"	f
ast2obj_excepthandler	Python-ast.c	/^ast2obj_excepthandler(void* _o)$/;"	f
ast2obj_expr	Python-ast.c	/^ast2obj_expr(void* _o)$/;"	f
ast2obj_expr_context	Python-ast.c	/^PyObject* ast2obj_expr_context(expr_context_ty o)$/;"	f
ast2obj_identifier	Python-ast.c	676;"	d	file:
ast2obj_int	Python-ast.c	/^static PyObject* ast2obj_int(long b)$/;"	f	file:
ast2obj_keyword	Python-ast.c	/^ast2obj_keyword(void* _o)$/;"	f
ast2obj_list	Python-ast.c	/^static PyObject* ast2obj_list(asdl_seq *seq, PyObject* (*func)(void*))$/;"	f	file:
ast2obj_mod	Python-ast.c	/^ast2obj_mod(void* _o)$/;"	f
ast2obj_object	Python-ast.c	/^static PyObject* ast2obj_object(void *o)$/;"	f	file:
ast2obj_operator	Python-ast.c	/^PyObject* ast2obj_operator(operator_ty o)$/;"	f
ast2obj_slice	Python-ast.c	/^ast2obj_slice(void* _o)$/;"	f
ast2obj_stmt	Python-ast.c	/^ast2obj_stmt(void* _o)$/;"	f
ast2obj_string	Python-ast.c	677;"	d	file:
ast2obj_unaryop	Python-ast.c	/^PyObject* ast2obj_unaryop(unaryop_ty o)$/;"	f
ast2obj_withitem	Python-ast.c	/^ast2obj_withitem(void* _o)$/;"	f
ast_clear	Python-ast.c	/^ast_clear(AST_object *self)$/;"	f	file:
ast_dealloc	Python-ast.c	/^ast_dealloc(AST_object *self)$/;"	f	file:
ast_error	ast.c	/^ast_error(struct compiling *c, const node *n, const char *errmsg)$/;"	f	file:
ast_for_arg	ast.c	/^ast_for_arg(struct compiling *c, const node *n)$/;"	f	file:
ast_for_arguments	ast.c	/^ast_for_arguments(struct compiling *c, const node *n)$/;"	f	file:
ast_for_assert_stmt	ast.c	/^ast_for_assert_stmt(struct compiling *c, const node *n)$/;"	f	file:
ast_for_atom	ast.c	/^ast_for_atom(struct compiling *c, const node *n)$/;"	f	file:
ast_for_augassign	ast.c	/^ast_for_augassign(struct compiling *c, const node *n)$/;"	f	file:
ast_for_binop	ast.c	/^ast_for_binop(struct compiling *c, const node *n)$/;"	f	file:
ast_for_call	ast.c	/^ast_for_call(struct compiling *c, const node *n, expr_ty func)$/;"	f	file:
ast_for_classdef	ast.c	/^ast_for_classdef(struct compiling *c, const node *n, asdl_seq *decorator_seq)$/;"	f	file:
ast_for_comp_op	ast.c	/^ast_for_comp_op(struct compiling *c, const node *n)$/;"	f	file:
ast_for_comprehension	ast.c	/^ast_for_comprehension(struct compiling *c, const node *n)$/;"	f	file:
ast_for_decorated	ast.c	/^ast_for_decorated(struct compiling *c, const node *n)$/;"	f	file:
ast_for_decorator	ast.c	/^ast_for_decorator(struct compiling *c, const node *n)$/;"	f	file:
ast_for_decorators	ast.c	/^ast_for_decorators(struct compiling *c, const node *n)$/;"	f	file:
ast_for_del_stmt	ast.c	/^ast_for_del_stmt(struct compiling *c, const node *n)$/;"	f	file:
ast_for_dictcomp	ast.c	/^ast_for_dictcomp(struct compiling *c, const node *n)$/;"	f	file:
ast_for_dotted_name	ast.c	/^ast_for_dotted_name(struct compiling *c, const node *n)$/;"	f	file:
ast_for_except_clause	ast.c	/^ast_for_except_clause(struct compiling *c, const node *exc, node *body)$/;"	f	file:
ast_for_expr	ast.c	/^ast_for_expr(struct compiling *c, const node *n)$/;"	f	file:
ast_for_expr_stmt	ast.c	/^ast_for_expr_stmt(struct compiling *c, const node *n)$/;"	f	file:
ast_for_exprlist	ast.c	/^ast_for_exprlist(struct compiling *c, const node *n, expr_context_ty context)$/;"	f	file:
ast_for_factor	ast.c	/^ast_for_factor(struct compiling *c, const node *n)$/;"	f	file:
ast_for_flow_stmt	ast.c	/^ast_for_flow_stmt(struct compiling *c, const node *n)$/;"	f	file:
ast_for_for_stmt	ast.c	/^ast_for_for_stmt(struct compiling *c, const node *n)$/;"	f	file:
ast_for_funcdef	ast.c	/^ast_for_funcdef(struct compiling *c, const node *n, asdl_seq *decorator_seq)$/;"	f	file:
ast_for_genexp	ast.c	/^ast_for_genexp(struct compiling *c, const node *n)$/;"	f	file:
ast_for_global_stmt	ast.c	/^ast_for_global_stmt(struct compiling *c, const node *n)$/;"	f	file:
ast_for_if_stmt	ast.c	/^ast_for_if_stmt(struct compiling *c, const node *n)$/;"	f	file:
ast_for_ifexpr	ast.c	/^ast_for_ifexpr(struct compiling *c, const node *n)$/;"	f	file:
ast_for_import_stmt	ast.c	/^ast_for_import_stmt(struct compiling *c, const node *n)$/;"	f	file:
ast_for_itercomp	ast.c	/^ast_for_itercomp(struct compiling *c, const node *n, int type)$/;"	f	file:
ast_for_lambdef	ast.c	/^ast_for_lambdef(struct compiling *c, const node *n)$/;"	f	file:
ast_for_listcomp	ast.c	/^ast_for_listcomp(struct compiling *c, const node *n)$/;"	f	file:
ast_for_nonlocal_stmt	ast.c	/^ast_for_nonlocal_stmt(struct compiling *c, const node *n)$/;"	f	file:
ast_for_power	ast.c	/^ast_for_power(struct compiling *c, const node *n)$/;"	f	file:
ast_for_setcomp	ast.c	/^ast_for_setcomp(struct compiling *c, const node *n)$/;"	f	file:
ast_for_slice	ast.c	/^ast_for_slice(struct compiling *c, const node *n)$/;"	f	file:
ast_for_starred	ast.c	/^ast_for_starred(struct compiling *c, const node *n)$/;"	f	file:
ast_for_stmt	ast.c	/^ast_for_stmt(struct compiling *c, const node *n)$/;"	f	file:
ast_for_suite	ast.c	/^ast_for_suite(struct compiling *c, const node *n)$/;"	f	file:
ast_for_testlist	ast.c	/^ast_for_testlist(struct compiling *c, const node* n)$/;"	f	file:
ast_for_trailer	ast.c	/^ast_for_trailer(struct compiling *c, const node *n, expr_ty left_expr)$/;"	f	file:
ast_for_try_stmt	ast.c	/^ast_for_try_stmt(struct compiling *c, const node *n)$/;"	f	file:
ast_for_while_stmt	ast.c	/^ast_for_while_stmt(struct compiling *c, const node *n)$/;"	f	file:
ast_for_with_item	ast.c	/^ast_for_with_item(struct compiling *c, const node *n)$/;"	f	file:
ast_for_with_stmt	ast.c	/^ast_for_with_stmt(struct compiling *c, const node *n)$/;"	f	file:
ast_traverse	Python-ast.c	/^ast_traverse(AST_object *self, visitproc visit, void *arg)$/;"	f	file:
ast_type_getsets	Python-ast.c	/^static PyGetSetDef ast_type_getsets[] = {$/;"	v	file:
ast_type_init	Python-ast.c	/^ast_type_init(PyObject *self, PyObject *args, PyObject *kw)$/;"	f	file:
ast_type_methods	Python-ast.c	/^static PyMethodDef ast_type_methods[] = {$/;"	v	file:
ast_type_reduce	Python-ast.c	/^ast_type_reduce(PyObject *self, PyObject *unused)$/;"	f	file:
async_reads_completed_synchronously	pyparallel_private.h	/^    volatile long long  async_reads_completed_synchronously;$/;"	m	struct:_PxState
async_writes_completed_synchronously	pyparallel_private.h	/^    volatile long long  async_writes_completed_synchronously;$/;"	m	struct:_PxState
attr	Python-ast.c	/^_Py_IDENTIFIER(attr);$/;"	v
autoInterpreterState	pystate.c	/^static PyInterpreterState *autoInterpreterState = NULL;$/;"	v	file:
autoTLSkey	pystate.c	/^static int autoTLSkey = 0;$/;"	v	file:
auto_reconnect	pyparallel_private.h	/^    int auto_reconnect;$/;"	m	struct:_PxClientSocket
auto_reconnect	pyparallel_private.h	/^    int auto_reconnect;$/;"	m	struct:_PxServerSocket
b2d	dtoa.c	/^b2d(Bigint *a, int *e)$/;"	f	file:
b_ialloc	compile.c	/^    int b_ialloc;$/;"	m	struct:basicblock_	file:
b_instr	compile.c	/^    struct instr *b_instr;$/;"	m	struct:basicblock_	typeref:struct:basicblock_::instr	file:
b_iused	compile.c	/^    int b_iused;$/;"	m	struct:basicblock_	file:
b_list	compile.c	/^    struct basicblock_ *b_list;$/;"	m	struct:basicblock_	typeref:struct:basicblock_::basicblock_	file:
b_next	compile.c	/^    struct basicblock_ *b_next;$/;"	m	struct:basicblock_	typeref:struct:basicblock_::basicblock_	file:
b_offset	compile.c	/^    int b_offset;$/;"	m	struct:basicblock_	file:
b_return	compile.c	/^    unsigned b_return : 1;$/;"	m	struct:basicblock_	file:
b_seen	compile.c	/^    unsigned b_seen : 1;$/;"	m	struct:basicblock_	file:
b_startdepth	compile.c	/^    int b_startdepth;$/;"	m	struct:basicblock_	file:
backslashreplace_errors	codecs.c	/^static PyObject *backslashreplace_errors(PyObject *self, PyObject *exc)$/;"	f	file:
base	pyparallel_private.h	/^    Px_UINTPTR  base;$/;"	m	struct:_PxPages
bases	Python-ast.c	/^_Py_IDENTIFIER(bases);$/;"	v
basicblock	compile.c	/^} basicblock;$/;"	t	typeref:struct:basicblock_	file:
basicblock_	compile.c	/^typedef struct basicblock_ {$/;"	s	file:
bigcomp	dtoa.c	/^bigcomp(U *rv, const char *s0, BCinfo *bc)$/;"	f	file:
bigtens	dtoa.c	/^bigtens[] = { 1e16, 1e32, 1e64, 1e128, 1e256 };$/;"	v	file:
binop	compile.c	/^binop(struct compiler *c, operator_ty op)$/;"	f	file:
bitmap_index	pyparallel_private.h	/^    char            bitmap_index;$/;"	m	struct:_TLSBUF
bitmap_index	pyparallel_private.h	/^    char    bitmap_index;$/;"	m	struct:_PyParallelHeap
block	pyarena.c	/^} block;$/;"	t	typeref:struct:_block	file:
block_alloc	pyarena.c	/^block_alloc(block *b, size_t size)$/;"	f	file:
block_free	pyarena.c	/^block_free(block *b) {$/;"	f	file:
block_new	pyarena.c	/^block_new(size_t size)$/;"	f	file:
blocking_calls	pyparallel_private.h	/^    int blocking_calls;$/;"	m	struct:_PyParallelContextStats
blocksize	compile.c	/^blocksize(basicblock *b)$/;"	f	file:
body	Python-ast.c	/^_Py_IDENTIFIER(body);$/;"	v
boolop_type	Python-ast.c	/^static PyTypeObject *boolop_type;$/;"	v	file:
bootstrap	thread_nt.h	/^bootstrap(void *call)$/;"	f
buf	pyparallel_private.h	/^    char FAR   *buf;$/;"	m	struct:_PxIO
builtin___build_class__	bltinmodule.c	/^builtin___build_class__(PyObject *self, PyObject *args, PyObject *kwds)$/;"	f	file:
builtin___import__	bltinmodule.c	/^builtin___import__(PyObject *self, PyObject *args, PyObject *kwds)$/;"	f	file:
builtin_abs	bltinmodule.c	/^builtin_abs(PyObject *self, PyObject *v)$/;"	f	file:
builtin_all	bltinmodule.c	/^builtin_all(PyObject *self, PyObject *v)$/;"	f	file:
builtin_any	bltinmodule.c	/^builtin_any(PyObject *self, PyObject *v)$/;"	f	file:
builtin_ascii	bltinmodule.c	/^builtin_ascii(PyObject *self, PyObject *v)$/;"	f	file:
builtin_bin	bltinmodule.c	/^builtin_bin(PyObject *self, PyObject *v)$/;"	f	file:
builtin_callable	bltinmodule.c	/^builtin_callable(PyObject *self, PyObject *v)$/;"	f	file:
builtin_chr	bltinmodule.c	/^builtin_chr(PyObject *self, PyObject *args)$/;"	f	file:
builtin_compile	bltinmodule.c	/^builtin_compile(PyObject *self, PyObject *args, PyObject *kwds)$/;"	f	file:
builtin_delattr	bltinmodule.c	/^builtin_delattr(PyObject *self, PyObject *args)$/;"	f	file:
builtin_dir	bltinmodule.c	/^builtin_dir(PyObject *self, PyObject *args)$/;"	f	file:
builtin_divmod	bltinmodule.c	/^builtin_divmod(PyObject *self, PyObject *args)$/;"	f	file:
builtin_eval	bltinmodule.c	/^builtin_eval(PyObject *self, PyObject *args)$/;"	f	file:
builtin_exec	bltinmodule.c	/^builtin_exec(PyObject *self, PyObject *args)$/;"	f	file:
builtin_format	bltinmodule.c	/^builtin_format(PyObject *self, PyObject *args)$/;"	f	file:
builtin_getattr	bltinmodule.c	/^builtin_getattr(PyObject *self, PyObject *args)$/;"	f	file:
builtin_globals	bltinmodule.c	/^builtin_globals(PyObject *self)$/;"	f	file:
builtin_hasattr	bltinmodule.c	/^builtin_hasattr(PyObject *self, PyObject *args)$/;"	f	file:
builtin_hash	bltinmodule.c	/^builtin_hash(PyObject *self, PyObject *v)$/;"	f	file:
builtin_hex	bltinmodule.c	/^builtin_hex(PyObject *self, PyObject *v)$/;"	f	file:
builtin_id	bltinmodule.c	/^builtin_id(PyObject *self, PyObject *v)$/;"	f	file:
builtin_input	bltinmodule.c	/^builtin_input(PyObject *self, PyObject *args)$/;"	f	file:
builtin_isinstance	bltinmodule.c	/^builtin_isinstance(PyObject *self, PyObject *args)$/;"	f	file:
builtin_issubclass	bltinmodule.c	/^builtin_issubclass(PyObject *self, PyObject *args)$/;"	f	file:
builtin_iter	bltinmodule.c	/^builtin_iter(PyObject *self, PyObject *args)$/;"	f	file:
builtin_len	bltinmodule.c	/^builtin_len(PyObject *self, PyObject *v)$/;"	f	file:
builtin_locals	bltinmodule.c	/^builtin_locals(PyObject *self)$/;"	f	file:
builtin_max	bltinmodule.c	/^builtin_max(PyObject *self, PyObject *args, PyObject *kwds)$/;"	f	file:
builtin_methods	bltinmodule.c	/^static PyMethodDef builtin_methods[] = {$/;"	v	file:
builtin_min	bltinmodule.c	/^builtin_min(PyObject *self, PyObject *args, PyObject *kwds)$/;"	f	file:
builtin_next	bltinmodule.c	/^builtin_next(PyObject *self, PyObject *args)$/;"	f	file:
builtin_oct	bltinmodule.c	/^builtin_oct(PyObject *self, PyObject *v)$/;"	f	file:
builtin_ord	bltinmodule.c	/^builtin_ord(PyObject *self, PyObject* obj)$/;"	f	file:
builtin_pow	bltinmodule.c	/^builtin_pow(PyObject *self, PyObject *args)$/;"	f	file:
builtin_print	bltinmodule.c	/^builtin_print(PyObject *self, PyObject *args, PyObject *kwds)$/;"	f	file:
builtin_repr	bltinmodule.c	/^builtin_repr(PyObject *self, PyObject *v)$/;"	f	file:
builtin_round	bltinmodule.c	/^builtin_round(PyObject *self, PyObject *args, PyObject *kwds)$/;"	f	file:
builtin_setattr	bltinmodule.c	/^builtin_setattr(PyObject *self, PyObject *args)$/;"	f	file:
builtin_sorted	bltinmodule.c	/^builtin_sorted(PyObject *self, PyObject *args, PyObject *kwds)$/;"	f	file:
builtin_sum	bltinmodule.c	/^builtin_sum(PyObject *self, PyObject *args)$/;"	f	file:
builtin_vars	bltinmodule.c	/^builtin_vars(PyObject *self, PyObject *args)$/;"	f	file:
builtinsmodule	bltinmodule.c	/^static struct PyModuleDef builtinsmodule = {$/;"	v	typeref:struct:PyModuleDef	file:
bytes_wasted	pyparallel_private.h	/^    size_t  bytes_wasted;$/;"	m	struct:_PyParallelHeap
bytes_wasted	pyparallel_private.h	/^    size_t bytes_wasted;$/;"	m	struct:_PyParallelContextStats
c_arena	ast.c	/^    PyArena *c_arena; \/* arena for allocating memeory *\/$/;"	m	struct:compiling	file:
c_arena	compile.c	/^    PyArena *c_arena;            \/* pointer to memory allocation arena *\/$/;"	m	struct:compiler	file:
c_encoding	ast.c	/^    char *c_encoding; \/* source encoding *\/$/;"	m	struct:compiling	file:
c_filename	ast.c	/^    const char *c_filename; \/* filename *\/$/;"	m	struct:compiling	file:
c_filename	compile.c	/^    const char *c_filename;$/;"	m	struct:compiler	file:
c_filename_obj	compile.c	/^    PyObject *c_filename_obj;$/;"	m	struct:compiler	file:
c_flags	compile.c	/^    PyCompilerFlags *c_flags;$/;"	m	struct:compiler	file:
c_future	compile.c	/^    PyFutureFeatures *c_future; \/* pointer to module's __future__ *\/$/;"	m	struct:compiler	file:
c_interactive	compile.c	/^    int c_interactive;           \/* true if in interactive mode *\/$/;"	m	struct:compiler	file:
c_nestlevel	compile.c	/^    int c_nestlevel;$/;"	m	struct:compiler	file:
c_normalize	ast.c	/^    PyObject *c_normalize; \/* Normalization function from unicodedata. *\/$/;"	m	struct:compiling	file:
c_normalize_args	ast.c	/^    PyObject *c_normalize_args; \/* Normalization argument tuple. *\/$/;"	m	struct:compiling	file:
c_optimize	compile.c	/^    int c_optimize;              \/* optimization level *\/$/;"	m	struct:compiler	file:
c_st	compile.c	/^    struct symtable *c_st;$/;"	m	struct:compiler	typeref:struct:compiler::symtable	file:
c_stack	compile.c	/^    PyObject *c_stack;           \/* Python list holding compiler_unit ptrs *\/$/;"	m	struct:compiler	file:
cache	pyparallel_private.h	/^    } cache;$/;"	m	struct:_cpuinfo	typeref:struct:_cpuinfo::_cache
calc_number_widths	formatter_unicode.c	/^calc_number_widths(NumberFieldWidths *spec, Py_ssize_t n_prefix,$/;"	f	file:
calc_padding	formatter_unicode.c	/^calc_padding(Py_ssize_t nchars, Py_ssize_t width, Py_UCS4 align,$/;"	f	file:
call_exc_trace	ceval.c	/^call_exc_trace(Py_tracefunc func, PyObject *self, PyFrameObject *f)$/;"	f	file:
call_function	ceval.c	/^call_function(PyObject ***pp_stack, int oparg$/;"	f	file:
call_ll_exitfuncs	pythonrun.c	/^call_ll_exitfuncs(void)$/;"	f	file:
call_py_exitfuncs	pythonrun.c	/^call_py_exitfuncs(void)$/;"	f	file:
call_trace	ceval.c	/^call_trace(Py_tracefunc func, PyObject *obj, PyFrameObject *frame,$/;"	f	file:
call_trace_protected	ceval.c	/^call_trace_protected(Py_tracefunc func, PyObject *obj, PyFrameObject *frame,$/;"	f	file:
call_trampoline	sysmodule.c	/^call_trampoline(PyThreadState *tstate, PyObject* callback,$/;"	f	file:
callback	pyparallel_private.h	/^    PyObject *callback;$/;"	m	struct:_PyParallelContext
callback_completed	pyparallel_private.h	/^    PxListItem *callback_completed;$/;"	m	struct:_PyParallelContext
callobj	thread_nt.h	/^} callobj;$/;"	t	typeref:struct:__anon16
callproc	ceval.c	/^typedef PyObject *(*callproc)(PyObject *, PyObject *, PyObject *);$/;"	t	file:
case_insensitive_match	pystrtod.c	/^case_insensitive_match(const char *s, const char *t)$/;"	f	file:
cause	Python-ast.c	/^_Py_IDENTIFIER(cause);$/;"	v
cause_message	pythonrun.c	/^static const char *cause_message =$/;"	v	file:
cb_flags	pyparallel_private.h	/^    int   cb_flags;$/;"	m	struct:_PxSocket
change_decimal_from_locale_to_dot	pystrtod.c	/^change_decimal_from_locale_to_dot(char* buffer)$/;"	f
changed	thread_os2.h	/^    HEV changed;$/;"	m	struct:os2_lock_t
check_force_ascii	fileutils.c	/^check_force_ascii(void)$/;"	f	file:
check_matched	_warnings.c	/^check_matched(PyObject *obj, PyObject *arg)$/;"	f	file:
check_unoptimized	symtable.c	/^check_unoptimized(const PySTEntryObject* ste) {$/;"	f	file:
child_id	pyparallel_private.h	/^    int child_id;$/;"	m	struct:_PxSocket
cleanreturn	getargs.c	/^cleanreturn(int retval, freelist_t *freelist)$/;"	f	file:
cleanup_buffer	getargs.c	/^cleanup_buffer(PyObject *self, void *ptr)$/;"	f	file:
cleanup_ptr	getargs.c	/^cleanup_ptr(PyObject *self, void *ptr)$/;"	f	file:
cmp	dtoa.c	/^cmp(Bigint *a, Bigint *b)$/;"	f	file:
cmp_outcome	ceval.c	/^cmp_outcome(int op, register PyObject *v, register PyObject *w)$/;"	f	file:
cmpop	compile.c	/^cmpop(cmpop_ty op)$/;"	f	file:
cmpop_type	Python-ast.c	/^static PyTypeObject *cmpop_type;$/;"	v	file:
codec_getincrementalcodec	codecs.c	/^PyObject *codec_getincrementalcodec(const char *encoding,$/;"	f	file:
codec_getitem	codecs.c	/^PyObject *codec_getitem(const char *encoding, int index)$/;"	f	file:
codec_getitem_checked	codecs.c	/^PyObject *codec_getitem_checked(const char *encoding,$/;"	f	file:
codec_getstreamcodec	codecs.c	/^PyObject *codec_getstreamcodec(const char *encoding,$/;"	f	file:
codec_makeincrementalcodec	codecs.c	/^PyObject *codec_makeincrementalcodec(PyObject *codec_info,$/;"	f	file:
col_offset	Python-ast.c	/^_Py_IDENTIFIER(col_offset);$/;"	v
comparators	Python-ast.c	/^_Py_IDENTIFIER(comparators);$/;"	v
compiler	compile.c	/^struct compiler {$/;"	s	file:
compiler_add_o	compile.c	/^compiler_add_o(struct compiler *c, PyObject *dict, PyObject *o)$/;"	f	file:
compiler_addop	compile.c	/^compiler_addop(struct compiler *c, int opcode)$/;"	f	file:
compiler_addop_i	compile.c	/^compiler_addop_i(struct compiler *c, int opcode, int oparg)$/;"	f	file:
compiler_addop_j	compile.c	/^compiler_addop_j(struct compiler *c, int opcode, basicblock *b, int absolute)$/;"	f	file:
compiler_addop_name	compile.c	/^compiler_addop_name(struct compiler *c, int opcode, PyObject *dict,$/;"	f	file:
compiler_addop_o	compile.c	/^compiler_addop_o(struct compiler *c, int opcode, PyObject *dict,$/;"	f	file:
compiler_assert	compile.c	/^compiler_assert(struct compiler *c, stmt_ty s)$/;"	f	file:
compiler_augassign	compile.c	/^compiler_augassign(struct compiler *c, stmt_ty s)$/;"	f	file:
compiler_body	compile.c	/^compiler_body(struct compiler *c, asdl_seq *stmts)$/;"	f	file:
compiler_boolop	compile.c	/^compiler_boolop(struct compiler *c, expr_ty e)$/;"	f	file:
compiler_call	compile.c	/^compiler_call(struct compiler *c, expr_ty e)$/;"	f	file:
compiler_call_helper	compile.c	/^compiler_call_helper(struct compiler *c,$/;"	f	file:
compiler_class	compile.c	/^compiler_class(struct compiler *c, stmt_ty s)$/;"	f	file:
compiler_compare	compile.c	/^compiler_compare(struct compiler *c, expr_ty e)$/;"	f	file:
compiler_comprehension	compile.c	/^compiler_comprehension(struct compiler *c, expr_ty e, int type, identifier name,$/;"	f	file:
compiler_comprehension_generator	compile.c	/^compiler_comprehension_generator(struct compiler *c,$/;"	f	file:
compiler_continue	compile.c	/^compiler_continue(struct compiler *c)$/;"	f	file:
compiler_decorators	compile.c	/^compiler_decorators(struct compiler *c, asdl_seq* decos)$/;"	f	file:
compiler_dictcomp	compile.c	/^compiler_dictcomp(struct compiler *c, expr_ty e)$/;"	f	file:
compiler_enter_scope	compile.c	/^compiler_enter_scope(struct compiler *c, identifier name,$/;"	f	file:
compiler_error	compile.c	/^compiler_error(struct compiler *c, const char *errstr)$/;"	f	file:
compiler_exit_scope	compile.c	/^compiler_exit_scope(struct compiler *c)$/;"	f	file:
compiler_for	compile.c	/^compiler_for(struct compiler *c, stmt_ty s)$/;"	f	file:
compiler_free	compile.c	/^compiler_free(struct compiler *c)$/;"	f	file:
compiler_from_import	compile.c	/^compiler_from_import(struct compiler *c, stmt_ty s)$/;"	f	file:
compiler_function	compile.c	/^compiler_function(struct compiler *c, stmt_ty s)$/;"	f	file:
compiler_genexp	compile.c	/^compiler_genexp(struct compiler *c, expr_ty e)$/;"	f	file:
compiler_handle_subscr	compile.c	/^compiler_handle_subscr(struct compiler *c, const char *kind,$/;"	f	file:
compiler_if	compile.c	/^compiler_if(struct compiler *c, stmt_ty s)$/;"	f	file:
compiler_ifexp	compile.c	/^compiler_ifexp(struct compiler *c, expr_ty e)$/;"	f	file:
compiler_import	compile.c	/^compiler_import(struct compiler *c, stmt_ty s)$/;"	f	file:
compiler_import_as	compile.c	/^compiler_import_as(struct compiler *c, identifier name, identifier asname)$/;"	f	file:
compiler_in_loop	compile.c	/^compiler_in_loop(struct compiler *c) {$/;"	f	file:
compiler_init	compile.c	/^compiler_init(struct compiler *c)$/;"	f	file:
compiler_isdocstring	compile.c	/^compiler_isdocstring(stmt_ty s)$/;"	f	file:
compiler_lambda	compile.c	/^compiler_lambda(struct compiler *c, expr_ty e)$/;"	f	file:
compiler_list	compile.c	/^compiler_list(struct compiler *c, expr_ty e)$/;"	f	file:
compiler_listcomp	compile.c	/^compiler_listcomp(struct compiler *c, expr_ty e)$/;"	f	file:
compiler_lookup_arg	compile.c	/^compiler_lookup_arg(PyObject *dict, PyObject *name)$/;"	f	file:
compiler_make_closure	compile.c	/^compiler_make_closure(struct compiler *c, PyCodeObject *co, int args, PyObject *qualname)$/;"	f	file:
compiler_mod	compile.c	/^compiler_mod(struct compiler *c, mod_ty mod)$/;"	f	file:
compiler_nameop	compile.c	/^compiler_nameop(struct compiler *c, identifier name, expr_context_ty ctx)$/;"	f	file:
compiler_new_block	compile.c	/^compiler_new_block(struct compiler *c)$/;"	f	file:
compiler_next_block	compile.c	/^compiler_next_block(struct compiler *c)$/;"	f	file:
compiler_next_instr	compile.c	/^compiler_next_instr(struct compiler *c, basicblock *b)$/;"	f	file:
compiler_pop_fblock	compile.c	/^compiler_pop_fblock(struct compiler *c, enum fblocktype t, basicblock *b)$/;"	f	file:
compiler_push_fblock	compile.c	/^compiler_push_fblock(struct compiler *c, enum fblocktype t, basicblock *b)$/;"	f	file:
compiler_scope_qualname	compile.c	/^compiler_scope_qualname(struct compiler *c)$/;"	f	file:
compiler_set_lineno	compile.c	/^compiler_set_lineno(struct compiler *c, int off)$/;"	f	file:
compiler_setcomp	compile.c	/^compiler_setcomp(struct compiler *c, expr_ty e)$/;"	f	file:
compiler_slice	compile.c	/^compiler_slice(struct compiler *c, slice_ty s, expr_context_ty ctx)$/;"	f	file:
compiler_try	compile.c	/^compiler_try(struct compiler *c, stmt_ty s) {$/;"	f	file:
compiler_try_except	compile.c	/^compiler_try_except(struct compiler *c, stmt_ty s)$/;"	f	file:
compiler_try_finally	compile.c	/^compiler_try_finally(struct compiler *c, stmt_ty s)$/;"	f	file:
compiler_tuple	compile.c	/^compiler_tuple(struct compiler *c, expr_ty e)$/;"	f	file:
compiler_unit	compile.c	/^struct compiler_unit {$/;"	s	file:
compiler_unit_check	compile.c	/^compiler_unit_check(struct compiler_unit *u)$/;"	f	file:
compiler_unit_free	compile.c	/^compiler_unit_free(struct compiler_unit *u)$/;"	f	file:
compiler_use_new_block	compile.c	/^compiler_use_new_block(struct compiler *c)$/;"	f	file:
compiler_use_next_block	compile.c	/^compiler_use_next_block(struct compiler *c, basicblock *block)$/;"	f	file:
compiler_visit_annotations	compile.c	/^compiler_visit_annotations(struct compiler *c, arguments_ty args,$/;"	f	file:
compiler_visit_argannotation	compile.c	/^compiler_visit_argannotation(struct compiler *c, identifier id,$/;"	f	file:
compiler_visit_argannotations	compile.c	/^compiler_visit_argannotations(struct compiler *c, asdl_seq* args,$/;"	f	file:
compiler_visit_expr	compile.c	/^compiler_visit_expr(struct compiler *c, expr_ty e)$/;"	f	file:
compiler_visit_keyword	compile.c	/^compiler_visit_keyword(struct compiler *c, keyword_ty k)$/;"	f	file:
compiler_visit_kwonlydefaults	compile.c	/^compiler_visit_kwonlydefaults(struct compiler *c, asdl_seq *kwonlyargs,$/;"	f	file:
compiler_visit_nested_slice	compile.c	/^compiler_visit_nested_slice(struct compiler *c, slice_ty s,$/;"	f	file:
compiler_visit_slice	compile.c	/^compiler_visit_slice(struct compiler *c, slice_ty s, expr_context_ty ctx)$/;"	f	file:
compiler_visit_stmt	compile.c	/^compiler_visit_stmt(struct compiler *c, stmt_ty s)$/;"	f	file:
compiler_while	compile.c	/^compiler_while(struct compiler *c, stmt_ty s)$/;"	f	file:
compiler_with	compile.c	/^compiler_with(struct compiler *c, stmt_ty s, int pos)$/;"	f	file:
compiling	ast.c	/^struct compiling {$/;"	s	file:
completed_callbacks	pyparallel_private.h	/^    PxListHead *completed_callbacks;$/;"	m	struct:_PxState
completed_errbacks	pyparallel_private.h	/^    PxListHead *completed_errbacks;$/;"	m	struct:_PxState
comprehension	Python-ast.c	/^comprehension(expr_ty target, expr_ty iter, asdl_seq * ifs, PyArena *arena)$/;"	f
comprehension_fields	Python-ast.c	/^static char *comprehension_fields[]={$/;"	v	file:
comprehension_type	Python-ast.c	/^static PyTypeObject *comprehension_type;$/;"	v	file:
compute_code_flags	compile.c	/^compute_code_flags(struct compiler *c)$/;"	f	file:
concurrency	pyparallel.c	/^_Py_IDENTIFIER(concurrency);$/;"	v
connect_time	pyparallel_private.h	/^    int connect_time; \/* seconds *\/$/;"	m	struct:_PxSocket
connection_closed	pyparallel.c	/^_Py_IDENTIFIER(connection_closed);$/;"	v
connection_closed	pyparallel_private.h	/^    PyObject *connection_closed;$/;"	m	struct:_PxSocket
connection_made	pyparallel.c	/^_Py_IDENTIFIER(connection_made);$/;"	v
connection_made	pyparallel_private.h	/^    PyObject *connection_made;$/;"	m	struct:_PxSocket
context_expr	Python-ast.c	/^_Py_IDENTIFIER(context_expr);$/;"	v
context_message	pythonrun.c	/^static const char *context_message =$/;"	v	file:
contexts_active	pyparallel_private.h	/^    long contexts_active;$/;"	m	struct:_PxState
contexts_created	pyparallel_private.h	/^    long long contexts_created;$/;"	m	struct:_PxState
contexts_destroyed	pyparallel_private.h	/^    long long contexts_destroyed;$/;"	m	struct:_PxState
contexts_persisted	pyparallel_private.h	/^    long contexts_persisted;$/;"	m	struct:_PxState
convertbuffer	getargs.c	/^convertbuffer(PyObject *arg, void **p, char **errmsg)$/;"	f	file:
converterr	getargs.c	/^converterr(const char *expected, PyObject *arg, char *msgbuf, size_t bufsize)$/;"	f	file:
convertitem	getargs.c	/^convertitem(PyObject *arg, const char **p_format, va_list *p_va, int flags,$/;"	f	file:
convertsimple	getargs.c	/^convertsimple(PyObject *arg, const char **p_format, va_list *p_va, int flags,$/;"	f	file:
converttuple	getargs.c	/^converttuple(PyObject *arg, const char **p_format, va_list *p_va, int flags,$/;"	f	file:
copysign	pymath.c	/^copysign(double x, double y)$/;"	f
core	pyparallel_private.h	/^    } core;$/;"	m	struct:_cpuinfo	typeref:struct:_cpuinfo::_core
count	pyparallel_private.h	/^    short       count;$/;"	m	struct:_PxPages
count_comp_fors	ast.c	/^count_comp_fors(struct compiling *c, const node *n)$/;"	f	file:
count_comp_ifs	ast.c	/^count_comp_ifs(struct compiling *c, const node *n)$/;"	f	file:
countformat	modsupport.c	/^countformat(const char *format, int endchar)$/;"	f	file:
cprt	getcopyright.c	/^static const char cprt[] =$/;"	v	file:
cpuinfo	pyparallel_private.h	/^} cpuinfo;$/;"	t	typeref:struct:_cpuinfo
create_filter	_warnings.c	/^create_filter(PyObject *category, const char *action)$/;"	f	file:
create_gil	ceval_gil.h	/^static void create_gil(void)$/;"	f
create_pxsocket	pyparallel.c	/^create_pxsocket($/;"	f
create_stdio	pythonrun.c	/^create_stdio(PyObject* io,$/;"	f	file:
cs	pyparallel_private.h	/^    CRITICAL_SECTION cs;$/;"	m	struct:_PxSocket
cs	pyparallel_private.h	/^    CRITICAL_SECTION cs;$/;"	m	struct:_PxState
cs	pyparallel_private.h	/^    CRITICAL_SECTION cs;$/;"	m	struct:_PyXList
cs	thread_nt.h	/^    PyMUTEX_T cs;$/;"	m	struct:_NRMUTEX
ctx	Python-ast.c	/^_Py_IDENTIFIER(ctx);$/;"	v
ctx	pyparallel.c	/^Py_TLS Context *ctx = NULL;$/;"	v
ctx	pyparallel_private.h	/^    Context        *ctx;$/;"	m	struct:_RBUF
ctx	pyparallel_private.h	/^    Context        *ctx;$/;"	m	struct:_SBUF
ctx	pyparallel_private.h	/^    Context     *ctx;$/;"	m	struct:_PxObject
ctx	pyparallel_private.h	/^    Context *ctx;$/;"	m	struct:_PxSocket
ctx_curfree	pyparallel_private.h	/^    unsigned short ctx_curfree;$/;"	m	struct:_PxState
ctx_first	pyparallel_private.h	/^    Context *ctx_first;$/;"	m	struct:_PxState
ctx_heap	pyparallel_private.h	/^    Heap       *ctx_heap;$/;"	m	struct:_PxThreadLocalState
ctx_last	pyparallel_private.h	/^    Context *ctx_last;$/;"	m	struct:_PxState
ctx_maxfree	pyparallel_private.h	/^    unsigned short ctx_maxfree;$/;"	m	struct:_PxState
ctx_minfree	pyparallel_private.h	/^    unsigned short ctx_minfree;$/;"	m	struct:_PxState
ctx_ttl	pyparallel_private.h	/^    unsigned short ctx_ttl;$/;"	m	struct:_PxState
current_filename	marshal.c	/^    PyObject *current_filename;$/;"	m	struct:__anon14	file:
cv	pyparallel_private.h	/^    CONDITION_VARIABLE cv;$/;"	m	struct:_PyXList
cv	thread_nt.h	/^    PyCOND_T cv;$/;"	m	struct:_NRMUTEX
d	dtoa.c	/^typedef union { double d; ULong L[2]; } U;$/;"	m	union:__anon7	file:
d2b	dtoa.c	/^d2b(U *d, int *e, int *bits)$/;"	f	file:
d2printf	thread.c	49;"	d	file:
d2printf	thread.c	52;"	d	file:
data_received	pyparallel.c	/^_Py_IDENTIFIER(data_received);$/;"	v
data_received	pyparallel_private.h	/^    PyObject *data_received;$/;"	m	struct:_PxSocket
deallocs	pyparallel_private.h	/^    size_t  deallocs;$/;"	m	struct:_PyParallelHeap
deallocs	pyparallel_private.h	/^    size_t deallocs;$/;"	m	struct:_PyParallelContextStats
decimal_point	formatter_unicode.c	/^    PyObject *decimal_point;$/;"	m	struct:__anon10	file:
decode_ascii_surrogateescape	fileutils.c	/^decode_ascii_surrogateescape(const char *arg, size_t *size)$/;"	f	file:
decode_unicode	ast.c	/^decode_unicode(struct compiling *c, const char *s, size_t len, int rawmode, const char *encoding)$/;"	f	file:
decode_utf8	ast.c	/^decode_utf8(struct compiling *c, const char **sPtr, const char *end)$/;"	f	file:
decorator_list	Python-ast.c	/^_Py_IDENTIFIER(decorator_list);$/;"	v
decref	pyparallel_private.h	/^    PxListItem *decref;$/;"	m	struct:_PyParallelContext
decref_args	pyparallel.c	/^decref_args(Context *c)$/;"	f
decref_waitobj_args	pyparallel.c	/^decref_waitobj_args(Context *c)$/;"	f
decrefs	pyparallel_private.h	/^    PxListHead *decrefs;$/;"	m	struct:_PyParallelContext
default_home	pythonrun.c	/^static wchar_t *default_home = NULL;$/;"	v	file:
defaults	Python-ast.c	/^_Py_IDENTIFIER(defaults);$/;"	v
depth	marshal.c	/^    int depth;$/;"	m	struct:__anon14	file:
destr_t	getargs.c	/^typedef int (*destr_t)(PyObject *, void *);$/;"	t	file:
destroy_gil	ceval_gil.h	/^static void destroy_gil(void)$/;"	f
destructor	getargs.c	/^  destr_t destructor;$/;"	m	struct:__anon12	file:
destructor	thread_pthread.h	11;"	d
destructor	thread_pthread.h	7;"	d
dev	dynload_shlib.c	/^    dev_t dev;$/;"	m	struct:__anon8	file:
dev_urandom_noraise	random.c	/^dev_urandom_noraise(char *buffer, Py_ssize_t size)$/;"	f	file:
dev_urandom_python	random.c	/^dev_urandom_python(char *buffer, Py_ssize_t size)$/;"	f	file:
dfas	graminit.c	/^static dfa dfas[82] = {$/;"	v	file:
dfs	compile.c	/^dfs(struct compiler *c, basicblock *b, struct assembler *a)$/;"	f	file:
dict	Python-ast.c	/^    PyObject *dict;$/;"	m	struct:__anon15	file:
dict_keys_inorder	compile.c	/^dict_keys_inorder(PyObject *dict, int offset)$/;"	f	file:
dictbytype	compile.c	/^dictbytype(PyObject *src, int scope_type, int flag, int offset)$/;"	f	file:
dictcomp	symtable.c	/^    listcomp = NULL, setcomp = NULL, dictcomp = NULL,$/;"	v	file:
diff	dtoa.c	/^diff(Bigint *a, Bigint *b)$/;"	f	file:
digitlimit	mystrtoul.c	/^static int digitlimit[] = {$/;"	v	file:
dims	Python-ast.c	/^_Py_IDENTIFIER(dims);$/;"	v
dl_funcptr	importdl.h	/^typedef FARPROC dl_funcptr;$/;"	t
dl_funcptr	importdl.h	/^typedef int (* APIENTRY dl_funcptr)();$/;"	t
dl_funcptr	importdl.h	/^typedef void (*dl_funcptr)(void);$/;"	t
dlerror	dynload_shlib.c	15;"	d	file:
do_call	ceval.c	/^do_call(PyObject *func, PyObject ***pp_stack, int na, int nk)$/;"	f	file:
do_mkdict	modsupport.c	/^do_mkdict(const char **p_format, va_list *p_va, int endchar, int n, int flags)$/;"	f	file:
do_mklist	modsupport.c	/^do_mklist(const char **p_format, va_list *p_va, int endchar, int n, int flags)$/;"	f	file:
do_mktuple	modsupport.c	/^do_mktuple(const char **p_format, va_list *p_va, int endchar, int n, int flags)$/;"	f	file:
do_mkvalue	modsupport.c	/^do_mkvalue(const char **p_format, va_list *p_va, int flags)$/;"	f	file:
do_raise	ceval.c	/^do_raise(PyObject *exc, PyObject *cause)$/;"	f	file:
do_warn	_warnings.c	/^do_warn(PyObject *message, PyObject *category, Py_ssize_t stack_level)$/;"	f	file:
done	parallelmodule.c	/^    HANDLE      done;$/;"	m	struct:ParallelContext4	file:
done	parallelmodule.c	/^    HANDLE    done;$/;"	m	struct:ParallelContext3	file:
done	pyparallel_private.h	/^    long done;$/;"	m	struct:_PyParallelContext
done	pyparallel_private.h	/^    volatile long long  done;$/;"	m	struct:_PxState
dprintf	thread.c	48;"	d	file:
dprintf	thread.c	51;"	d	file:
drop_gil	ceval_gil.h	/^static void drop_gil(PyThreadState *tstate)$/;"	f
dshift	dtoa.c	/^dshift(Bigint *b, int p2)$/;"	f	file:
dump_ascii	traceback.c	/^dump_ascii(int fd, PyObject *text)$/;"	f	file:
dump_decimal	traceback.c	/^dump_decimal(int fd, int value)$/;"	f	file:
dump_frame	traceback.c	/^dump_frame(int fd, PyFrameObject *frame)$/;"	f	file:
dump_hexadecimal	traceback.c	/^dump_hexadecimal(int width, unsigned long value, int fd)$/;"	f	file:
dump_traceback	traceback.c	/^dump_traceback(int fd, PyThreadState *tstate, int write_header)$/;"	f	file:
dump_tsc	ceval.c	/^void dump_tsc(int opcode, int ticked, uint64 inst0, uint64 inst1,$/;"	f
dup2	dup2.c	/^dup2(int fd1, int fd2)$/;"	f
dval	dtoa.c	197;"	d	file:
dxp	ceval.c	/^static long dxp[256];$/;"	v	file:
dxp	ceval.c	161;"	d	file:
dxpairs	ceval.c	/^static long dxpairs[257][256];$/;"	v	file:
e0	dtoa.c	/^    int e0, nd, nd0, scale;$/;"	m	struct:BCinfo	file:
elt	Python-ast.c	/^_Py_IDENTIFIER(elt);$/;"	v
elts	Python-ast.c	/^_Py_IDENTIFIER(elts);$/;"	v
encode_ascii_surrogateescape	fileutils.c	/^encode_ascii_surrogateescape(const wchar_t *text, size_t *error_pos)$/;"	f	file:
end	marshal.c	/^    char *end;$/;"	m	struct:__anon14	file:
end	pyparallel_private.h	/^    unsigned __int64 end;$/;"	m	struct:_PyParallelContextStats
ensure_decimal_point	pystrtod.c	/^ensure_decimal_point(char* buffer, size_t buf_size, int precision)$/;"	f
ensure_minimum_exponent_length	pystrtod.c	/^ensure_minimum_exponent_length(char* buffer, size_t buf_size)$/;"	f
entered	pyparallel_private.h	/^    unsigned __int64 entered;$/;"	m	struct:_PyParallelContextStats
entries	getargs.c	/^  freelistentry_t *entries;$/;"	m	struct:__anon13	file:
entry	dynload_aix.c	/^    void          *entry;$/;"	m	struct:Module	file:
entry	pyparallel_private.h	/^    PxListEntry entry;$/;"	m	struct:_PxIO
env_home	pythonrun.c	/^static wchar_t env_home[PATH_MAX+1];$/;"	v	file:
err_args	ceval.c	/^err_args(PyObject *func, int flags, int nargs)$/;"	f	file:
err_free	pythonrun.c	/^err_free(perrdetail *err)$/;"	f	file:
err_input	pythonrun.c	/^err_input(perrdetail *err)$/;"	f	file:
errback	pyparallel_private.h	/^    PyObject *errback;$/;"	m	struct:_PyParallelContext
errback_completed	pyparallel_private.h	/^    PxListItem *errback_completed;$/;"	m	struct:_PyParallelContext
error	marshal.c	/^    int error;  \/* see WFERR_* values *\/$/;"	m	struct:__anon14	file:
error	pyparallel_private.h	/^    PxListItem *error;$/;"	m	struct:_PyParallelContext
error_occurred	pyparallel_private.h	/^    int   error_occurred;$/;"	m	struct:_PxSocket
error_time_t_overflow	pytime.c	/^error_time_t_overflow(void)$/;"	f	file:
errorhandler	pyparallel_private.h	/^    PyObject *(*errorhandler)(void); \/* Error handler; checks$/;"	m	struct:_PxSocket
errors	pyparallel_private.h	/^    PxListHead *errors;$/;"	m	struct:_PxState
errors_tuple	pyparallel_private.h	/^    PyObject *errors_tuple;$/;"	m	struct:_PyParallelContext
ev	parallelmodule.c	/^    HANDLE ev;$/;"	m	struct:_ParallelContext	file:
eval_breaker	ceval.c	/^static _Py_atomic_int eval_breaker = {0};$/;"	v	file:
events	pyparallel_private.h	/^    Objects events;$/;"	m	struct:_PyParallelContext
exc	Python-ast.c	/^_Py_IDENTIFIER(exc);$/;"	v
exc_traceback	pyparallel_private.h	/^    PyObject    *exc_traceback;$/;"	m	struct:_PyParallelContext
exc_type	pyparallel_private.h	/^    PyObject    *exc_type;$/;"	m	struct:_PyParallelContext
exc_value	pyparallel_private.h	/^    PyObject    *exc_value;$/;"	m	struct:_PyParallelContext
excepthandler_attributes	Python-ast.c	/^static char *excepthandler_attributes[] = {$/;"	v	file:
excepthandler_type	Python-ast.c	/^static PyTypeObject *excepthandler_type;$/;"	v	file:
exception_handler	pyparallel.c	/^_Py_IDENTIFIER(exception_handler);$/;"	v
exception_handler	pyparallel_private.h	/^    PyObject *exception_handler;$/;"	m	struct:_PxSocket
exited	pyparallel_private.h	/^    unsigned __int64 exited;$/;"	m	struct:_PyParallelContextStats
exitfuncs	pythonrun.c	/^static void (*exitfuncs[NEXITFUNCS])(void);$/;"	v	file:
expr_attributes	Python-ast.c	/^static char *expr_attributes[] = {$/;"	v	file:
expr_constant	compile.c	/^expr_constant(struct compiler *c, expr_ty e)$/;"	f	file:
expr_context_name	ast.c	/^expr_context_name(expr_context_ty ctx)$/;"	f	file:
expr_context_type	Python-ast.c	/^static PyTypeObject *expr_context_type;$/;"	v	file:
expr_type	Python-ast.c	/^static PyTypeObject *expr_type;$/;"	v	file:
ext_do_call	ceval.c	/^ext_do_call(PyObject *func, PyObject ***pp_stack, int flags, int na, int nk)$/;"	f	file:
extensions	import.c	/^static PyObject *extensions = NULL;$/;"	v	file:
extract_args	pyparallel.c	/^extract_args(PyObject *args, Context *c)$/;"	f
extract_waitobj_args	pyparallel.c	/^extract_waitobj_args(PyObject *args, Context *c)$/;"	f
f	makeopcodetargets.py	/^    f = open(target, "w")$/;"	v
f	parallelmodule.c	/^    PyFunctionObject *f;$/;"	m	struct:_ParallelContext	file:
fast_function	ceval.c	/^fast_function(PyObject *func, PyObject ***pp_stack, int n, int na, int nk)$/;"	f	file:
fb_block	compile.c	/^    basicblock *fb_block;$/;"	m	struct:fblockinfo	file:
fb_type	compile.c	/^    enum fblocktype fb_type;$/;"	m	struct:fblockinfo	typeref:enum:fblockinfo::fblocktype	file:
fblockinfo	compile.c	/^struct fblockinfo {$/;"	s	file:
fblocktype	compile.c	/^enum fblocktype { LOOP, EXCEPT, FINALLY_TRY, FINALLY_END };$/;"	g	file:
fd_accept	pyparallel_private.h	/^    WSAEVENT  fd_accept;$/;"	m	struct:_PxSocket
file_is_closed	pythonrun.c	/^file_is_closed(PyObject *fobj)$/;"	f	file:
fileno	bltinmodule.c	/^_Py_IDENTIFIER(fileno);$/;"	v
filesize	pyparallel_private.h	/^    LARGE_INTEGER filesize;$/;"	m	struct:_PyParallelContext
fill_char	formatter_unicode.c	/^    Py_UCS4 fill_char;$/;"	m	struct:__anon9	file:
fill_number	formatter_unicode.c	/^fill_number(_PyUnicodeWriter *writer, const NumberFieldWidths *spec,$/;"	f	file:
fill_padding	formatter_unicode.c	/^fill_padding(_PyUnicodeWriter *writer,$/;"	f	file:
filter_dealloc	bltinmodule.c	/^filter_dealloc(filterobject *lz)$/;"	f	file:
filter_methods	bltinmodule.c	/^static PyMethodDef filter_methods[] = {$/;"	v	file:
filter_new	bltinmodule.c	/^filter_new(PyTypeObject *type, PyObject *args, PyObject *kwds)$/;"	f	file:
filter_next	bltinmodule.c	/^filter_next(filterobject *lz)$/;"	f	file:
filter_reduce	bltinmodule.c	/^filter_reduce(filterobject *lz)$/;"	f	file:
filter_traverse	bltinmodule.c	/^filter_traverse(filterobject *lz, visitproc visit, void *arg)$/;"	f	file:
filterobject	bltinmodule.c	/^} filterobject;$/;"	t	typeref:struct:__anon1	file:
finalbody	Python-ast.c	/^_Py_IDENTIFIER(finalbody);$/;"	v
find_frozen	import.c	/^find_frozen(PyObject *name)$/;"	f	file:
find_key	thread.c	/^find_key(int key, void *value)$/;"	f	file:
find_module	makeopcodetargets.py	/^def find_module(modname):$/;"	f
finished	pyparallel_private.h	/^    PxListHead *finished;$/;"	m	struct:_PxState
finished_sockets	pyparallel_private.h	/^    PxListHead *finished_sockets;$/;"	m	struct:_PxState
first	pyparallel_private.h	/^    Object *first;$/;"	m	struct:_Objects
first	pyparallel_private.h	/^    PxSocket *first;$/;"	m	struct:_PxSocket
first_available	getargs.c	/^  int first_available;$/;"	m	struct:__anon13	file:
fix_status	thread_pthread.h	/^fix_status(int status)$/;"	f
flags	pyparallel_private.h	/^    int         flags;$/;"	m	struct:_PxIO
flags	pyparallel_private.h	/^    int   flags;$/;"	m	struct:_PxSocket
flags	pyparallel_private.h	/^    int flags;$/;"	m	struct:_PxSocketBufList
flags_desc	sysmodule.c	/^static PyStructSequence_Desc flags_desc = {$/;"	v	file:
flags_fields	sysmodule.c	/^static PyStructSequence_Field flags_fields[] = {$/;"	v	file:
float_argument_error	getargs.c	/^float_argument_error(PyObject *arg)$/;"	f	file:
flush	bltinmodule.c	/^_Py_IDENTIFIER(flush);$/;"	v
flush_io	pythonrun.c	/^flush_io(void)$/;"	f	file:
flush_std_files	pythonrun.c	/^flush_std_files(void)$/;"	f	file:
fold_binops_on_constants	peephole.c	/^fold_binops_on_constants(unsigned char *codestr, PyObject *consts, PyObject **objs)$/;"	f	file:
fold_unaryops_on_constants	peephole.c	/^fold_unaryops_on_constants(unsigned char *codestr, PyObject *consts, PyObject *v)$/;"	f	file:
forbidden_name	ast.c	/^forbidden_name(struct compiling *c, identifier name, const node *n, int full_checks)$/;"	f	file:
force_ascii	fileutils.c	/^static int force_ascii = -1;$/;"	v	file:
forgetrefs	pyparallel_private.h	/^    size_t forgetrefs;$/;"	m	struct:_PyParallelContextStats
format_complex_internal	formatter_unicode.c	/^format_complex_internal(PyObject *value,$/;"	f	file:
format_exc_check_arg	ceval.c	/^format_exc_check_arg(PyObject *exc, const char *format_str, PyObject *obj)$/;"	f	file:
format_exc_unbound	ceval.c	/^format_exc_unbound(PyCodeObject *co, int oparg)$/;"	f	file:
format_float_internal	formatter_unicode.c	/^format_float_internal(PyObject *value,$/;"	f	file:
format_float_short	pystrtod.c	/^format_float_short(double d, char format_code,$/;"	f	file:
format_long_internal	formatter_unicode.c	/^format_long_internal(PyObject *value, const InternalFormatSpec *format,$/;"	f	file:
format_missing	ceval.c	/^format_missing(const char *kind, PyCodeObject *co, PyObject *names)$/;"	f	file:
format_obj	formatter_unicode.c	/^format_obj(PyObject *obj, _PyUnicodeWriter *writer)$/;"	f	file:
format_string_internal	formatter_unicode.c	/^format_string_internal(PyObject *value, const InternalFormatSpec *format,$/;"	f	file:
fp	marshal.c	/^    FILE *fp;$/;"	m	struct:__anon14	file:
free_locale_info	formatter_unicode.c	/^free_locale_info(LocaleInfo *locale_info)$/;"	f	file:
freelist	dtoa.c	/^static Bigint *freelist[Kmax+1];$/;"	v	file:
freelist	pyparallel_private.h	/^    PxListHead *freelist;$/;"	m	struct:_PxSocket
freelist_t	getargs.c	/^} freelist_t;$/;"	t	typeref:struct:__anon13	file:
freelistentry_t	getargs.c	/^} freelistentry_t;$/;"	t	typeref:struct:__anon12	file:
frees	pyparallel_private.h	/^    size_t  frees;$/;"	m	struct:_PyParallelHeap
frees	pyparallel_private.h	/^    size_t frees;$/;"	m	struct:_PyParallelContextStats
func	Python-ast.c	/^_Py_IDENTIFIER(func);$/;"	v
func	bltinmodule.c	/^    PyObject *func;$/;"	m	struct:__anon1	file:
func	bltinmodule.c	/^    PyObject *func;$/;"	m	struct:__anon2	file:
func	ceval.c	/^    int (*func)(void *);$/;"	m	struct:__anon4	file:
func	ceval.c	/^    int (*func)(void *);$/;"	m	struct:__anon5	file:
func	parallelmodule.c	/^    PyObject   *func;$/;"	m	struct:ParallelContext4	file:
func	parallelmodule.c	/^    PyObject *func;$/;"	m	struct:ParallelContext2	file:
func	parallelmodule.c	/^    PyObject *func;$/;"	m	struct:ParallelContext3	file:
func	pyparallel_private.h	/^    PyObject *func;$/;"	m	struct:_PyParallelContext
func	thread_nt.h	/^    void (*func)(void*);$/;"	m	struct:__anon16
future_check_features	future.c	/^future_check_features(PyFutureFeatures *ff, stmt_ty s, const char *filename)$/;"	f	file:
future_parse	future.c	/^future_parse(PyFutureFeatures *ff, mod_ty mod, const char *filename)$/;"	f	file:
generators	Python-ast.c	/^_Py_IDENTIFIER(generators);$/;"	v
genexpr	symtable.c	/^static identifier top = NULL, lambda = NULL, genexpr = NULL,$/;"	v	file:
get_category	_warnings.c	/^get_category(PyObject *message, PyObject *category)$/;"	f	file:
get_codec_name	pythonrun.c	/^get_codec_name(const char *encoding)$/;"	f	file:
get_default_action	_warnings.c	/^get_default_action(void)$/;"	f	file:
get_filter	_warnings.c	/^get_filter(PyObject *category, PyObject *text, Py_ssize_t lineno,$/;"	f	file:
get_frozen_object	import.c	/^get_frozen_object(PyObject *name)$/;"	f	file:
get_hash_info	sysmodule.c	/^get_hash_info(void)$/;"	f	file:
get_integer	formatter_unicode.c	/^get_integer(PyObject *str, Py_ssize_t *pos, Py_ssize_t end,$/;"	f	file:
get_locale_encoding	pythonrun.c	/^get_locale_encoding(void)$/;"	f	file:
get_locale_info	formatter_unicode.c	/^get_locale_info(int type, LocaleInfo *locale_info)$/;"	f	file:
get_main_thread_state	pyparallel.c	/^get_main_thread_state(void)$/;"	f	file:
get_main_thread_state_old	pyparallel.c	/^get_main_thread_state_old(void)$/;"	f	file:
get_once_registry	_warnings.c	/^get_once_registry(void)$/;"	f	file:
get_operator	ast.c	/^get_operator(const node *n)$/;"	f	file:
get_path_importer	import.c	/^get_path_importer(PyObject *path_importer_cache, PyObject *path_hooks,$/;"	f	file:
get_ref_type	compile.c	/^get_ref_type(struct compiler *c, PyObject *name)$/;"	f	file:
get_warnings_attr	_warnings.c	/^get_warnings_attr(const char *attr)$/;"	f	file:
get_xoptions	sysmodule.c	/^get_xoptions(void)$/;"	f	file:
getarray	ceval.c	/^getarray(long a[256])$/;"	f	file:
getbuffer	getargs.c	/^getbuffer(PyObject *arg, Py_buffer *view, char **errmsg)$/;"	f	file:
getcwd	getcwd.c	/^getcwd(char *buf, int size)$/;"	f
getfilesize	marshal.c	/^getfilesize(FILE *fp)$/;"	f	file:
getsockaddrarg	pyparallel_private.h	1258;"	d
getsockaddrlen	pyparallel_private.h	1259;"	d
gil_cond	ceval_gil.h	/^static COND_T gil_cond;$/;"	v
gil_created	ceval_gil.h	/^static int gil_created(void)$/;"	f
gil_drop_request	ceval.c	/^static _Py_atomic_int gil_drop_request = {0};$/;"	v	file:
gil_interval	ceval_gil.h	/^static unsigned long gil_interval = DEFAULT_INTERVAL;$/;"	v
gil_last_holder	ceval_gil.h	/^static _Py_atomic_address gil_last_holder = {NULL};$/;"	v
gil_locked	ceval_gil.h	/^static _Py_atomic_int gil_locked = {-1};$/;"	v
gil_mutex	ceval_gil.h	/^static MUTEX_T gil_mutex;$/;"	v
gil_switch_number	ceval_gil.h	/^static unsigned long gil_switch_number = 0;$/;"	v
grouping	formatter_unicode.c	/^    const char *grouping;$/;"	m	struct:__anon10	file:
h	pyparallel_private.h	/^    Heap       *h;$/;"	m	struct:_PxThreadLocalState
hCryptProv	random.c	/^static HCRYPTPROV hCryptProv = 0;$/;"	v	file:
handle	dynload_shlib.c	/^    void *handle;$/;"	m	struct:__anon8	file:
handle	pyparallel_private.h	/^    HANDLE      handle;$/;"	m	struct:_PxThreadLocalState
handle_keywordonly_args	ast.c	/^handle_keywordonly_args(struct compiling *c, const node *n, int start,$/;"	f	file:
handle_system_exit	pythonrun.c	/^handle_system_exit(void)$/;"	f	file:
handlers	Python-ast.c	/^_Py_IDENTIFIER(handlers);$/;"	v
handles	dynload_shlib.c	/^} handles[128];$/;"	v	typeref:struct:__anon8	file:
hash_info_desc	sysmodule.c	/^static PyStructSequence_Desc hash_info_desc = {$/;"	v	file:
hash_info_fields	sysmodule.c	/^static PyStructSequence_Field hash_info_fields[] = {$/;"	v	file:
head	pyparallel_private.h	/^    PxListHead *head;$/;"	m	struct:_PyXList
head_mutex	pystate.c	/^static PyThread_type_lock head_mutex = NULL; \/* Protects interp->tstate_head *\/$/;"	v	file:
heap	pyparallel_private.h	/^    Heap        heap;$/;"	m	struct:_PxThreadLocalState
heap_cs	pyparallel_private.h	/^    CRITICAL_SECTION    heap_cs;$/;"	m	struct:_PyParallelContext
heap_depth	pyparallel_private.h	/^    int         heap_depth;$/;"	m	struct:_PxThreadLocalState
heap_handle	pyparallel_private.h	/^    HANDLE heap_handle;$/;"	m	struct:_PyXList
heap_override	pyparallel.c	/^Py_TLS HANDLE heap_override;$/;"	v
heaps	pyparallel_private.h	/^    Heap       *heaps[_PxPages_MAX_HEAPS];$/;"	m	struct:_PxPages
heaps	pyparallel_private.h	/^    size_t heaps;$/;"	m	struct:_PyParallelContextStats
hh	pyparallel_private.h	/^    UT_hash_handle hh;$/;"	m	struct:_PxPages
hi0bits	dtoa.c	/^hi0bits(ULong x)$/;"	f	file:
hijacked_for_errors_tuple	pyparallel_private.h	/^    int hijacked_for_errors_tuple;$/;"	m	struct:_PyParallelContext
host	pyparallel_private.h	/^    char *host;$/;"	m	struct:_PxSocket
hypot	pymath.c	/^double hypot(double x, double y)$/;"	f
i2b	dtoa.c	/^i2b(int i)$/;"	f	file:
iInc	dtoa.c	2786;"	d	file:
i_hasarg	compile.c	/^    unsigned i_hasarg : 1;$/;"	m	struct:instr	file:
i_jabs	compile.c	/^    unsigned i_jabs : 1;$/;"	m	struct:instr	file:
i_jrel	compile.c	/^    unsigned i_jrel : 1;$/;"	m	struct:instr	file:
i_lineno	compile.c	/^    int i_lineno;$/;"	m	struct:instr	file:
i_oparg	compile.c	/^    int i_oparg;$/;"	m	struct:instr	file:
i_opcode	compile.c	/^    unsigned char i_opcode;$/;"	m	struct:instr	file:
i_target	compile.c	/^    struct basicblock_ *i_target; \/* target block (if jump instruction) *\/$/;"	m	struct:instr	typeref:struct:instr::basicblock_	file:
id	Python-ast.c	/^_Py_IDENTIFIER(id);$/;"	v
id	thread.c	/^    long id;$/;"	m	struct:key	file:
ifs	Python-ast.c	/^_Py_IDENTIFIER(ifs);$/;"	v
ignore_errors	codecs.c	/^static PyObject *ignore_errors(PyObject *self, PyObject *exc)$/;"	f	file:
imp	makeopcodetargets.py	/^import imp$/;"	i
imp_acquire_lock	import.c	/^imp_acquire_lock(PyObject *self, PyObject *noargs)$/;"	f	file:
imp_extension_suffixes	import.c	/^imp_extension_suffixes(PyObject *self, PyObject *noargs)$/;"	f	file:
imp_fix_co_filename	import.c	/^imp_fix_co_filename(PyObject *self, PyObject *args)$/;"	f	file:
imp_get_frozen_object	import.c	/^imp_get_frozen_object(PyObject *self, PyObject *args)$/;"	f	file:
imp_init_builtin	import.c	/^imp_init_builtin(PyObject *self, PyObject *args)$/;"	f	file:
imp_init_frozen	import.c	/^imp_init_frozen(PyObject *self, PyObject *args)$/;"	f	file:
imp_is_builtin	import.c	/^imp_is_builtin(PyObject *self, PyObject *args)$/;"	f	file:
imp_is_frozen	import.c	/^imp_is_frozen(PyObject *self, PyObject *args)$/;"	f	file:
imp_is_frozen_package	import.c	/^imp_is_frozen_package(PyObject *self, PyObject *args)$/;"	f	file:
imp_load_dynamic	import.c	/^imp_load_dynamic(PyObject *self, PyObject *args)$/;"	f	file:
imp_lock_held	import.c	/^imp_lock_held(PyObject *self, PyObject *noargs)$/;"	f	file:
imp_methods	import.c	/^static PyMethodDef imp_methods[] = {$/;"	v	file:
imp_release_lock	import.c	/^imp_release_lock(PyObject *self, PyObject *noargs)$/;"	f	file:
impmodule	import.c	/^static struct PyModuleDef impmodule = {$/;"	v	typeref:struct:PyModuleDef	file:
import_all_from	ceval.c	/^import_all_from(PyObject *locals, PyObject *v)$/;"	f	file:
import_from	ceval.c	/^import_from(PyObject *v, PyObject *name)$/;"	f	file:
import_init	pythonrun.c	/^import_init(PyInterpreterState *interp, PyObject *sysmod)$/;"	f	file:
import_lock	import.c	/^static PyThread_type_lock import_lock = 0;$/;"	v	file:
import_lock_level	import.c	/^static int import_lock_level = 0;$/;"	v	file:
import_lock_thread	import.c	/^static long import_lock_thread = -1;$/;"	v	file:
incoming	pyparallel_private.h	/^    PxListHead *incoming;$/;"	m	struct:_PxState
incoming_pynone_decrefs	pyparallel_private.h	/^    volatile long incoming_pynone_decrefs;$/;"	m	struct:_PxState
incref_args	pyparallel.c	/^incref_args(Context *c)$/;"	f
incref_waitobj_args	pyparallel.c	/^incref_waitobj_args(Context *c)$/;"	f
inflight	pyparallel_private.h	/^    volatile long       inflight;$/;"	m	struct:_PxState
init_builtin	import.c	/^init_builtin(PyObject *name)$/;"	f	file:
init_filters	_warnings.c	/^init_filters(void)$/;"	f	file:
init_normalization	ast.c	/^init_normalization(struct compiling *c)$/;"	f	file:
init_object	pyparallel.c	/^init_object(Context *c, PyObject *p, PyTypeObject *tp, Py_ssize_t nitems)$/;"	f
init_types	Python-ast.c	/^static int init_types(void)$/;"	f	file:
initfsencoding	pythonrun.c	/^initfsencoding(PyInterpreterState *interp)$/;"	f	file:
initial_bytes	pyparallel_private.h	/^    WSABUF    initial_bytes;$/;"	m	struct:_PxSocket
initial_bytes_callable	pyparallel_private.h	/^    PyObject *initial_bytes_callable;$/;"	m	struct:_PxSocket
initial_bytes_to_send	pyparallel.c	/^_Py_IDENTIFIER(initial_bytes_to_send);$/;"	v
initial_bytes_to_send	pyparallel_private.h	/^    PyObject *initial_bytes_to_send;$/;"	m	struct:_PxSocket
initialized	pythonrun.c	/^static int initialized = 0;$/;"	v	file:
initialized	thread.c	/^static int initialized;$/;"	v	file:
initmain	pythonrun.c	/^initmain(PyInterpreterState *interp)$/;"	f	file:
initsigs	pythonrun.c	/^initsigs(void)$/;"	f	file:
initsite	pythonrun.c	/^initsite(void)$/;"	f	file:
initstdio	pythonrun.c	/^initstdio(void)$/;"	f	file:
initstr	import.c	/^static PyObject *initstr = NULL;$/;"	v	file:
ino	dynload_shlib.c	/^    ino_t ino;$/;"	m	struct:__anon8	file:
ino	dynload_shlib.c	/^    ino_t ino[3];$/;"	m	struct:__anon8	file:
inplace_binop	compile.c	/^inplace_binop(struct compiler *c, operator_ty op)$/;"	f	file:
instr	compile.c	/^struct instr {$/;"	s	file:
instrsize	compile.c	/^instrsize(struct instr *instr)$/;"	f	file:
interp_head	pystate.c	/^static PyInterpreterState *interp_head = NULL;$/;"	v	file:
invalid_comma_type	formatter_unicode.c	/^invalid_comma_type(Py_UCS4 presentation_type)$/;"	f	file:
io	pyparallel_private.h	/^    PxIO       *io;$/;"	m	struct:_PyParallelContext
io_done	pyparallel_private.h	/^    volatile long long  io_done;$/;"	m	struct:_PxState
io_free	pyparallel_private.h	/^    PxListHead *io_free;$/;"	m	struct:_PxState
io_free_wakeup	pyparallel_private.h	/^    HANDLE      io_free_wakeup;$/;"	m	struct:_PxState
io_inflight	pyparallel_private.h	/^    volatile long       io_inflight;$/;"	m	struct:_PxState
io_nbytes	pyparallel_private.h	/^    ULONG_PTR   io_nbytes;$/;"	m	struct:_PyParallelContext
io_obj	pyparallel_private.h	/^    PyObject   *io_obj;$/;"	m	struct:_PyParallelContext
io_ondemand	pyparallel_private.h	/^    PxListHead *io_ondemand;$/;"	m	struct:_PxState
io_op	pyparallel_private.h	/^    int     io_op;$/;"	m	struct:_PxSocket
io_pending	pyparallel_private.h	/^    volatile long       io_pending;$/;"	m	struct:_PxState
io_result	pyparallel_private.h	/^    ULONG       io_result;$/;"	m	struct:_PyParallelContext
io_stalls	pyparallel_private.h	/^    volatile long long io_stalls;$/;"	m	struct:_PxState
io_status	pyparallel_private.h	/^    DWORD       io_status;$/;"	m	struct:_PyParallelContext
io_submitted	pyparallel_private.h	/^    volatile long long  io_submitted;$/;"	m	struct:_PxState
io_type	pyparallel_private.h	/^    int         io_type;$/;"	m	struct:_PyParallelContext
iob_ctx	pyparallel_private.h	/^    Context    *iob_ctx;$/;"	m	struct:_PxState
ioctx_first	pyparallel_private.h	/^    IOContext *ioctx_first;$/;"	m	struct:_PxState
ioctx_last	pyparallel_private.h	/^    IOContext *ioctx_last;$/;"	m	struct:_PxState
ioloops	pyparallel_private.h	/^    int ioloops;$/;"	m	struct:_PxSocket
ip	pyparallel_private.h	/^    char  ip[16];$/;"	m	struct:_PxSocket
is_alignment_token	formatter_unicode.c	/^is_alignment_token(Py_UCS4 c)$/;"	f
is_builtin	import.c	/^is_builtin(PyObject *name)$/;"	f	file:
is_frozen_package	import.c	/^is_frozen_package(PyObject *name)$/;"	f	file:
is_persisted	pyparallel_private.h	/^    char is_persisted;$/;"	m	struct:_PyParallelContext
is_set	thread_os2.h	/^    int is_set;$/;"	m	struct:os2_lock_t
is_sign_element	formatter_unicode.c	/^is_sign_element(Py_UCS4 c)$/;"	f
is_valid_fd	pythonrun.c	/^is_valid_fd(int fd)$/;"	f	file:
it	bltinmodule.c	/^    PyObject *it;$/;"	m	struct:__anon1	file:
item	getargs.c	/^  void *item;$/;"	m	struct:__anon12	file:
items	Python-ast.c	/^_Py_IDENTIFIER(items);$/;"	v
iter	Python-ast.c	/^_Py_IDENTIFIER(iter);$/;"	v
iters	bltinmodule.c	/^    PyObject *iters;$/;"	m	struct:__anon2	file:
ittuple	bltinmodule.c	/^    PyObject *ittuple;                  \/* tuple of iterators *\/$/;"	m	struct:__anon3	file:
ix	parallelmodule.c	/^    Py_ssize_t  ix;$/;"	m	struct:ParallelContext4	file:
k	dtoa.c	/^    int k, maxwds, sign, wds;$/;"	m	struct:Bigint	file:
key	Python-ast.c	/^_Py_IDENTIFIER(key);$/;"	v
key	thread.c	/^    int key;$/;"	m	struct:key	file:
key	thread.c	/^struct key {$/;"	s	file:
keyhead	thread.c	/^static struct key *keyhead = NULL;$/;"	v	typeref:struct:key	file:
keymutex	thread.c	/^static PyThread_type_lock keymutex = NULL;$/;"	v	file:
keys	Python-ast.c	/^_Py_IDENTIFIER(keys);$/;"	v
keyword	Python-ast.c	/^keyword(identifier arg, expr_ty value, PyArena *arena)$/;"	f
keyword_fields	Python-ast.c	/^static char *keyword_fields[]={$/;"	v	file:
keyword_type	Python-ast.c	/^static PyTypeObject *keyword_type;$/;"	v	file:
keywords	Python-ast.c	/^_Py_IDENTIFIER(keywords);$/;"	v
kmask	dtoa.c	1226;"	d	file:
kshift	dtoa.c	1225;"	d	file:
kw_defaults	Python-ast.c	/^_Py_IDENTIFIER(kw_defaults);$/;"	v
kwarg	Python-ast.c	/^_Py_IDENTIFIER(kwarg);$/;"	v
kwargannotation	Python-ast.c	/^_Py_IDENTIFIER(kwargannotation);$/;"	v
kwargs	Python-ast.c	/^_Py_IDENTIFIER(kwargs);$/;"	v
kwds	pyparallel_private.h	/^    PyObject *kwds;$/;"	m	struct:_PyParallelContext
kwonlyargs	Python-ast.c	/^_Py_IDENTIFIER(kwonlyargs);$/;"	v
l1	pyparallel_private.h	/^        int l1;$/;"	m	struct:_cpuinfo::_cache
l2	pyparallel_private.h	/^        int l2;$/;"	m	struct:_cpuinfo::_cache
labels	graminit.c	/^static label labels[169] = {$/;"	v	file:
lambda	symtable.c	/^static identifier top = NULL, lambda = NULL, genexpr = NULL,$/;"	v	file:
last	pyparallel_private.h	/^    Object *last;$/;"	m	struct:_Objects
last	pyparallel_private.h	/^    PxSocket *last;$/;"	m	struct:_PxSocket
last_context_heap_malloc_addr	pyparallel.c	/^Py_TLS void *last_context_heap_malloc_addr;$/;"	v
last_done_count	pyparallel_private.h	/^    long long last_done_count;$/;"	m	struct:_PxState
last_heap_override_malloc_addr	pyparallel.c	/^Py_TLS void *last_heap_override_malloc_addr;$/;"	v
last_leak	pyparallel_private.h	/^    void *last_leak;$/;"	m	struct:_PyParallelContext
last_submitted_count	pyparallel_private.h	/^    long long last_submitted_count;$/;"	m	struct:_PxState
last_sync_nowait_done_count	pyparallel_private.h	/^    long long last_sync_nowait_done_count;$/;"	m	struct:_PxState
last_sync_nowait_submitted_count	pyparallel_private.h	/^    long long last_sync_nowait_submitted_count;$/;"	m	struct:_PxState
last_sync_wait_done_count	pyparallel_private.h	/^    long long last_sync_wait_done_count;$/;"	m	struct:_PxState
last_sync_wait_submitted_count	pyparallel_private.h	/^    long long last_sync_wait_submitted_count;$/;"	m	struct:_PxState
last_thread_id	pyparallel_private.h	/^    DWORD           last_thread_id;$/;"	m	struct:_RBUF
last_thread_id	pyparallel_private.h	/^    DWORD           last_thread_id;$/;"	m	struct:_SBUF
last_thread_id	pyparallel_private.h	/^    int last_thread_id;$/;"	m	struct:_PxSocket
lc_float_strings	pystrtod.c	/^static char *lc_float_strings[] = {$/;"	v	file:
lcg_urandom	random.c	/^lcg_urandom(unsigned int x0, unsigned char *buffer, size_t size)$/;"	f	file:
leak_count	pyparallel_private.h	/^    size_t leak_count;$/;"	m	struct:_PyParallelContext
leaked_bytes	pyparallel_private.h	/^    size_t leaked_bytes;$/;"	m	struct:_PyParallelContext
left	Python-ast.c	/^_Py_IDENTIFIER(left);$/;"	v
len	pyparallel_private.h	/^    ULONG       len;$/;"	m	struct:_PxIO
level	Python-ast.c	/^_Py_IDENTIFIER(level);$/;"	v
lineno	Python-ast.c	/^_Py_IDENTIFIER(lineno);$/;"	v
lines_mode	pyparallel.c	/^_Py_IDENTIFIER(lines_mode);$/;"	v
lines_mode	pyparallel_private.h	/^    PyObject *lines_mode;$/;"	m	struct:_PxSocket
lines_mode_active	pyparallel_private.h	/^    int       lines_mode_active;$/;"	m	struct:_PxSocket
lines_received	pyparallel.c	/^_Py_IDENTIFIER(lines_received);$/;"	v
lines_received	pyparallel_private.h	/^    PyObject *lines_received;$/;"	m	struct:_PxSocket
list2dict	compile.c	/^list2dict(PyObject *list)$/;"	f	file:
list_builtin_module_names	sysmodule.c	/^list_builtin_module_names(void)$/;"	f	file:
listcomp	symtable.c	/^    listcomp = NULL, setcomp = NULL, dictcomp = NULL,$/;"	v	file:
lltrace	ceval.c	/^static int lltrace;$/;"	v	file:
lo0bits	dtoa.c	/^lo0bits(ULong *y)$/;"	f	file:
load_args	ceval.c	/^load_args(PyObject ***pp_stack, int na)$/;"	f	file:
load_global	peephole.c	/^load_global(unsigned char *codestr, Py_ssize_t i, char *name, PyObject *consts)$/;"	f	file:
local_addr	pyparallel_private.h	/^    sock_addr_t  local_addr;$/;"	m	struct:_PxSocket
local_addr_len	pyparallel_private.h	/^    int          local_addr_len;$/;"	m	struct:_PxSocket
local_addrinfo	pyparallel_private.h	/^    struct addrinfo local_addrinfo;$/;"	m	struct:_PxSocket	typeref:struct:_PxSocket::addrinfo
lock_released	thread_pth.h	/^    pth_cond_t   lock_released;$/;"	m	struct:__anon17
lock_released	thread_pthread.h	/^    pthread_cond_t   lock_released;$/;"	m	struct:__anon18
locked	thread_nt.h	/^    int locked;$/;"	m	struct:_NRMUTEX
locked	thread_pth.h	/^    char             locked; \/* 0=unlocked, 1=locked *\/$/;"	m	struct:__anon17
locked	thread_pthread.h	/^    char             locked; \/* 0=unlocked, 1=locked *\/$/;"	m	struct:__anon18
logical	pyparallel_private.h	/^        int logical;$/;"	m	struct:_cpuinfo::_core
lower	Python-ast.c	/^_Py_IDENTIFIER(lower);$/;"	v
lshift	dtoa.c	/^lshift(Bigint *b, int k)$/;"	f	file:
main_thread	ceval.c	/^static long main_thread = 0;$/;"	v	file:
make_flags	sysmodule.c	/^make_flags(void)$/;"	f	file:
make_impl_info	sysmodule.c	/^make_impl_info(PyObject *version_info)$/;"	f	file:
make_type	Python-ast.c	/^static PyTypeObject* make_type(char *type, PyTypeObject* base, char**fields, int num_fields)$/;"	f	file:
make_version_info	sysmodule.c	/^make_version_info(void)$/;"	f	file:
makeargvobject	sysmodule.c	/^makeargvobject(int argc, wchar_t **argv)$/;"	f	file:
makecode	compile.c	/^makecode(struct compiler *c, struct assembler *a)$/;"	f	file:
makepathobject	sysmodule.c	/^makepathobject(const wchar_t *path, wchar_t delim)$/;"	f	file:
makesockaddr	pyparallel_private.h	1260;"	d
mallocs	pyparallel_private.h	/^    size_t  mallocs;$/;"	m	struct:_PyParallelHeap
mallocs	pyparallel_private.h	/^    size_t mallocs;$/;"	m	struct:_PyParallelContextStats
map_dealloc	bltinmodule.c	/^map_dealloc(mapobject *lz)$/;"	f	file:
map_methods	bltinmodule.c	/^static PyMethodDef map_methods[] = {$/;"	v	file:
map_new	bltinmodule.c	/^map_new(PyTypeObject *type, PyObject *args, PyObject *kwds)$/;"	f	file:
map_next	bltinmodule.c	/^map_next(mapobject *lz)$/;"	f	file:
map_reduce	bltinmodule.c	/^map_reduce(mapobject *lz)$/;"	f	file:
map_traverse	bltinmodule.c	/^map_traverse(mapobject *lz, visitproc visit, void *arg)$/;"	f	file:
mapobject	bltinmodule.c	/^} mapobject;$/;"	t	typeref:struct:__anon2	file:
markblocks	peephole.c	/^markblocks(unsigned char *code, Py_ssize_t len)$/;"	f	file:
marshal_dump	marshal.c	/^marshal_dump(PyObject *self, PyObject *args)$/;"	f	file:
marshal_dumps	marshal.c	/^marshal_dumps(PyObject *self, PyObject *args)$/;"	f	file:
marshal_load	marshal.c	/^marshal_load(PyObject *self, PyObject *f)$/;"	f	file:
marshal_loads	marshal.c	/^marshal_loads(PyObject *self, PyObject *args)$/;"	f	file:
marshal_methods	marshal.c	/^static PyMethodDef marshal_methods[] = {$/;"	v	file:
marshalmodule	marshal.c	/^static struct PyModuleDef marshalmodule = {$/;"	v	typeref:struct:PyModuleDef	file:
max_sync_recv_attempts	pyparallel.c	/^_Py_IDENTIFIER(max_sync_recv_attempts);$/;"	v
max_sync_recv_attempts	pyparallel_private.h	/^    int       max_sync_recv_attempts;$/;"	m	struct:_PxSocket
max_sync_send_attempts	pyparallel.c	/^_Py_IDENTIFIER(max_sync_send_attempts);$/;"	v
max_sync_send_attempts	pyparallel_private.h	/^    int       max_sync_send_attempts;$/;"	m	struct:_PxSocket
maxwds	dtoa.c	/^    int k, maxwds, sign, wds;$/;"	m	struct:Bigint	file:
maybe_call_line_trace	ceval.c	/^maybe_call_line_trace(Py_tracefunc func, PyObject *obj,$/;"	f	file:
maybe_pyc_file	pythonrun.c	/^maybe_pyc_file(FILE *fp, const char* filename, const char* ext, int closeit)$/;"	f	file:
mem_reallocs	pyparallel_private.h	/^    size_t  mem_reallocs;$/;"	m	struct:_PyParallelHeap
mem_reallocs	pyparallel_private.h	/^    size_t mem_reallocs;$/;"	m	struct:_PyParallelContextStats
min_max	bltinmodule.c	/^min_max(PyObject *args, PyObject *kwds, int op)$/;"	f	file:
missing_arguments	ceval.c	/^missing_arguments(PyCodeObject *co, int missing, int defcount,$/;"	f	file:
mod_type	Python-ast.c	/^static PyTypeObject *mod_type;$/;"	v	file:
mode_t	import.c	/^typedef unsigned short mode_t;$/;"	t	file:
module	Python-ast.c	/^_Py_IDENTIFIER(module);$/;"	v
more_accepts	pyparallel_private.h	/^    HANDLE  more_accepts;$/;"	m	struct:_PxSocket
msg	Python-ast.c	/^_Py_IDENTIFIER(msg);$/;"	v
mult	dtoa.c	/^mult(Bigint *a, Bigint *b)$/;"	f	file:
multadd	dtoa.c	/^multadd(Bigint *b, int m, int a)       \/* multiply by m and add a *\/$/;"	f	file:
mut	thread_pth.h	/^    pth_mutex_t  mut;$/;"	m	struct:__anon17
mut	thread_pthread.h	/^    pthread_mutex_t  mut;$/;"	m	struct:__anon18
n	Python-ast.c	/^_Py_IDENTIFIER(n);$/;"	v
n_bigtens	dtoa.c	1222;"	d	file:
n_decimal	formatter_unicode.c	/^    Py_ssize_t n_decimal;   \/* 0 if only an integer *\/$/;"	m	struct:__anon11	file:
n_digits	formatter_unicode.c	/^    Py_ssize_t n_digits;    \/* The number of digits before a decimal$/;"	m	struct:__anon11	file:
n_grouped_digits	formatter_unicode.c	/^    Py_ssize_t n_grouped_digits; \/* Space taken up by the digits, including$/;"	m	struct:__anon11	file:
n_lpadding	formatter_unicode.c	/^    Py_ssize_t n_lpadding;$/;"	m	struct:__anon11	file:
n_min_width	formatter_unicode.c	/^    Py_ssize_t n_min_width; \/* The min_width we used when we computed$/;"	m	struct:__anon11	file:
n_prefix	formatter_unicode.c	/^    Py_ssize_t n_prefix;$/;"	m	struct:__anon11	file:
n_remainder	formatter_unicode.c	/^    Py_ssize_t n_remainder; \/* Digits in decimal and\/or exponent part,$/;"	m	struct:__anon11	file:
n_rpadding	formatter_unicode.c	/^    Py_ssize_t n_rpadding;$/;"	m	struct:__anon11	file:
n_sign	formatter_unicode.c	/^    Py_ssize_t n_sign;      \/* number of digits needed for sign (0\/1) *\/$/;"	m	struct:__anon11	file:
n_spadding	formatter_unicode.c	/^    Py_ssize_t n_spadding;$/;"	m	struct:__anon11	file:
name	Python-ast.c	/^_Py_IDENTIFIER(name);$/;"	v
names	Python-ast.c	/^_Py_IDENTIFIER(names);$/;"	v
nbufs	pyparallel_private.h	/^    int nbufs;$/;"	m	struct:_PxSocketBufList
nchildren	pyparallel_private.h	/^    volatile int nchildren;$/;"	m	struct:_PxSocket
nd	dtoa.c	/^    int e0, nd, nd0, scale;$/;"	m	struct:BCinfo	file:
nd0	dtoa.c	/^    int e0, nd, nd0, scale;$/;"	m	struct:BCinfo	file:
new_context	pyparallel.c	/^new_context(size_t heapsize, int init_heap_snapshots)$/;"	f
new_context_for_socket	pyparallel.c	/^new_context_for_socket(PxSocket *s)$/;"	f
new_identifier	ast.c	/^new_identifier(const char *n, struct compiling *c)$/;"	f	file:
new_pxsocketbuf	pyparallel.c	/^new_pxsocketbuf(Context *c, size_t nbytes)$/;"	f
new_pxsocketbuf_from_bytes	pyparallel.c	/^new_pxsocketbuf_from_bytes(Context *c, PyBytesObject *o)$/;"	f
new_pxsocketbuf_from_unicode	pyparallel.c	/^new_pxsocketbuf_from_unicode(Context *c, PyUnicodeObject *o)$/;"	f
new_threadpool_work	pyparallel_private.h	/^    PxListHead *new_threadpool_work;$/;"	m	struct:_PxState
new_threadstate	pystate.c	/^new_threadstate(PyInterpreterState *interp, int init)$/;"	f	file:
newrefs	pyparallel_private.h	/^    size_t newrefs;$/;"	m	struct:_PyParallelContextStats
newtracebackobject	traceback.c	/^newtracebackobject(PyTracebackObject *next, PyFrameObject *frame)$/;"	f	file:
nexitfuncs	pythonrun.c	/^static int nexitfuncs = 0;$/;"	v	file:
next	dtoa.c	/^    struct Bigint *next;$/;"	m	struct:Bigint	typeref:struct:Bigint::Bigint	file:
next	dynload_aix.c	/^    struct Module *next;$/;"	m	struct:Module	typeref:struct:Module::Module	file:
next	pyparallel_private.h	/^    Context *next;$/;"	m	struct:_PyParallelContext
next	pyparallel_private.h	/^    Object   *next;$/;"	m	struct:_Object
next	pyparallel_private.h	/^    PxSocket *next;$/;"	m	struct:_PxSocket
next	pyparallel_private.h	/^    PxSocketBuf *next;$/;"	m	struct:_PxSocketBuf
next	pyparallel_private.h	/^    RBUF           *next;$/;"	m	struct:_RBUF
next	thread.c	/^    struct key *next;$/;"	m	struct:key	typeref:struct:key::key	file:
next_child_id	pyparallel_private.h	/^    volatile int next_child_id;$/;"	m	struct:_PxSocket
next_read_offset	pyparallel_private.h	/^    LARGE_INTEGER next_read_offset;$/;"	m	struct:_PyParallelContext
nhandles	dynload_shlib.c	/^static int nhandles = 0;$/;"	v	file:
nkeys	thread.c	/^static int nkeys = 0;  \/* PyThread_create_key() hands out nkeys+1 next *\/$/;"	v	file:
no_grouping	formatter_unicode.c	/^static char no_grouping[1] = {CHAR_MAX};$/;"	v	file:
normalize_module	_warnings.c	/^normalize_module(PyObject *filename)$/;"	f	file:
normalizestring	codecs.c	/^PyObject *normalizestring(const char *string)$/;"	f	file:
nrv_alloc	dtoa.c	/^nrv_alloc(char *s, char **rve, int n)$/;"	f	file:
null_or_non_none_return_type	pyparallel.c	/^null_or_non_none_return_type(PyObject *op)$/;"	f
null_with_exc_or_non_none_return_type	pyparallel.c	/^null_with_exc_or_non_none_return_type(PyObject *op, PyThreadState *tstate)$/;"	f
num_accepts_wanted	pyparallel_private.h	/^    volatile long num_accepts_wanted;$/;"	m	struct:_PxSocket
num_rbufs	pyparallel_private.h	/^    int     num_rbufs;$/;"	m	struct:_PxSocket
num_stmts	ast.c	/^num_stmts(const node *n)$/;"	f	file:
o	pyparallel_private.h	/^    PyObject        *o;$/;"	m	struct:_PyParallelIOContext
ob_first	pyparallel_private.h	/^    PyObject *ob_first;$/;"	m	struct:_PyParallelContext
ob_item	pyparallel_private.h	/^    PyObject **ob_item;$/;"	m	struct:_PxSocketBufList
ob_last	pyparallel_private.h	/^    PyObject *ob_last;$/;"	m	struct:_PyParallelContext
ob_shash	pyparallel_private.h	/^    Py_hash_t ob_shash;$/;"	m	struct:_PxSocketBuf
ob_shash	pyparallel_private.h	/^    Py_hash_t ob_shash;$/;"	m	struct:_RBUF
ob_sval	pyparallel_private.h	/^    char ob_sval[1];$/;"	m	struct:_PxSocketBuf
ob_sval	pyparallel_private.h	/^    char ob_sval[1];$/;"	m	struct:_RBUF
obj	pyparallel_private.h	/^    PyObject   *obj;$/;"	m	struct:_PxIO
obj2ast_alias	Python-ast.c	/^obj2ast_alias(PyObject* obj, alias_ty* out, PyArena* arena)$/;"	f
obj2ast_arg	Python-ast.c	/^obj2ast_arg(PyObject* obj, arg_ty* out, PyArena* arena)$/;"	f
obj2ast_arguments	Python-ast.c	/^obj2ast_arguments(PyObject* obj, arguments_ty* out, PyArena* arena)$/;"	f
obj2ast_boolop	Python-ast.c	/^obj2ast_boolop(PyObject* obj, boolop_ty* out, PyArena* arena)$/;"	f
obj2ast_bytes	Python-ast.c	/^static int obj2ast_bytes(PyObject* obj, PyObject** out, PyArena* arena)$/;"	f	file:
obj2ast_cmpop	Python-ast.c	/^obj2ast_cmpop(PyObject* obj, cmpop_ty* out, PyArena* arena)$/;"	f
obj2ast_comprehension	Python-ast.c	/^obj2ast_comprehension(PyObject* obj, comprehension_ty* out, PyArena* arena)$/;"	f
obj2ast_excepthandler	Python-ast.c	/^obj2ast_excepthandler(PyObject* obj, excepthandler_ty* out, PyArena* arena)$/;"	f
obj2ast_expr	Python-ast.c	/^obj2ast_expr(PyObject* obj, expr_ty* out, PyArena* arena)$/;"	f
obj2ast_expr_context	Python-ast.c	/^obj2ast_expr_context(PyObject* obj, expr_context_ty* out, PyArena* arena)$/;"	f
obj2ast_identifier	Python-ast.c	/^static int obj2ast_identifier(PyObject* obj, PyObject** out, PyArena* arena)$/;"	f	file:
obj2ast_int	Python-ast.c	/^static int obj2ast_int(PyObject* obj, int* out, PyArena* arena)$/;"	f	file:
obj2ast_keyword	Python-ast.c	/^obj2ast_keyword(PyObject* obj, keyword_ty* out, PyArena* arena)$/;"	f
obj2ast_mod	Python-ast.c	/^obj2ast_mod(PyObject* obj, mod_ty* out, PyArena* arena)$/;"	f
obj2ast_object	Python-ast.c	/^static int obj2ast_object(PyObject* obj, PyObject** out, PyArena* arena)$/;"	f	file:
obj2ast_operator	Python-ast.c	/^obj2ast_operator(PyObject* obj, operator_ty* out, PyArena* arena)$/;"	f
obj2ast_slice	Python-ast.c	/^obj2ast_slice(PyObject* obj, slice_ty* out, PyArena* arena)$/;"	f
obj2ast_stmt	Python-ast.c	/^obj2ast_stmt(PyObject* obj, stmt_ty* out, PyArena* arena)$/;"	f
obj2ast_string	Python-ast.c	/^static int obj2ast_string(PyObject* obj, PyObject** out, PyArena* arena)$/;"	f	file:
obj2ast_unaryop	Python-ast.c	/^obj2ast_unaryop(PyObject* obj, unaryop_ty* out, PyArena* arena)$/;"	f
obj2ast_withitem	Python-ast.c	/^obj2ast_withitem(PyObject* obj, withitem_ty* out, PyArena* arena)$/;"	f
obj_reallocs	pyparallel_private.h	/^    size_t  obj_reallocs;$/;"	m	struct:_PyParallelHeap
obj_reallocs	pyparallel_private.h	/^    size_t obj_reallocs;$/;"	m	struct:_PyParallelContextStats
objects	pyparallel_private.h	/^    Objects objects;$/;"	m	struct:_PyParallelContext
objects	pyparallel_private.h	/^    size_t objects;$/;"	m	struct:_PyParallelContextStats
ol	pyparallel_private.h	/^    OVERLAPPED      ol;$/;"	m	struct:_RBUF
ol	pyparallel_private.h	/^    OVERLAPPED      ol;$/;"	m	struct:_SBUF
ol	pyparallel_private.h	/^    OVERLAPPED      ol;$/;"	m	struct:_TLSBUF
ol	pyparallel_private.h	/^    OVERLAPPED *ol;$/;"	m	struct:_PxSocket
ol	pyparallel_private.h	/^    OVERLAPPED *ol;$/;"	m	struct:_PyParallelContext
op	Python-ast.c	/^_Py_IDENTIFIER(op);$/;"	v
op	pyparallel_private.h	/^    PyObject *op;$/;"	m	struct:_Object
op	pyparallel_private.h	/^PyAPI_FUNC(int) PyXList_Clear(PyObject *op);$/;"	v
opcode_stack_effect	compile.c	/^opcode_stack_effect(int opcode, int oparg)$/;"	f	file:
opcode_targets	opcode_targets.h	/^static void *opcode_targets[256] = {$/;"	v
operand	Python-ast.c	/^_Py_IDENTIFIER(operand);$/;"	v
operator_type	Python-ast.c	/^static PyTypeObject *operator_type;$/;"	v	file:
ops	Python-ast.c	/^_Py_IDENTIFIER(ops);$/;"	v
opt_ptr	getopt.c	/^static wchar_t *opt_ptr = L"";$/;"	v	file:
optional_vars	Python-ast.c	/^_Py_IDENTIFIER(optional_vars);$/;"	v
ord_doc	bltinmodule.c	/^PyDoc_VAR(ord_doc) = PyDoc_STR($/;"	v
orelse	Python-ast.c	/^_Py_IDENTIFIER(orelse);$/;"	v
os	makeopcodetargets.py	/^import os$/;"	i
os2_lock_t	thread_os2.h	/^typedef struct os2_lock_t {$/;"	s
outgoing	pyparallel_private.h	/^    PxListHead *outgoing;$/;"	m	struct:_PyParallelContext
overlapped	pyparallel_private.h	/^    OVERLAPPED  overlapped;$/;"	m	struct:_PxIO
overlapped	pyparallel_private.h	/^    OVERLAPPED  overlapped;$/;"	m	struct:_PyParallelContext
p5s	dtoa.c	/^static Bigint *p5s;$/;"	v	file:
pCryptGenRandom	random.c	/^static CRYPTGENRANDOM pCryptGenRandom = NULL;$/;"	v	file:
pages	pyparallel_private.h	/^    PxPages    *pages;$/;"	m	struct:_PxState
pages_srwlock	pyparallel_private.h	/^    SRWLOCK     pages_srwlock;$/;"	m	struct:_PxState
parallel_map	parallelmodule.c	/^parallel_map(PyObject *self, PyObject *args)$/;"	f	file:
parallel_methods	parallelmodule.c	/^static PyMethodDef parallel_methods[] = {$/;"	v	file:
parallel_run	parallelmodule.c	/^parallel_run(PyObject *self, PyObject *args)$/;"	f	file:
parallel_run_once	parallelmodule.c	/^parallel_run_once(PyObject *self, PyObject *args)$/;"	f	file:
parallel_t1	parallelmodule.c	/^parallel_t1(PyObject *self, PyObject *args)$/;"	f	file:
parallel_t2	parallelmodule.c	/^parallel_t2(PyObject *self, PyObject *args)$/;"	f	file:
parallel_t3	parallelmodule.c	/^parallel_t3(PyObject *self, PyObject *args)$/;"	f	file:
parallel_t4	parallelmodule.c	/^parallel_t4(PyObject *self, PyObject *args)$/;"	f	file:
parallelmodule	parallelmodule.c	/^static struct PyModuleDef parallelmodule = {$/;"	v	typeref:struct:PyModuleDef	file:
parent	pyparallel_private.h	/^    PxSocket *parent;$/;"	m	struct:_PxSocket
parse_internal_render_format_spec	formatter_unicode.c	/^parse_internal_render_format_spec(PyObject *format_spec,$/;"	f	file:
parse_number	formatter_unicode.c	/^parse_number(PyObject *s, Py_ssize_t pos, Py_ssize_t end,$/;"	f	file:
parse_syntax_error	pythonrun.c	/^parse_syntax_error(PyObject *err, PyObject **message, const char **filename,$/;"	f	file:
parsenumber	ast.c	/^parsenumber(struct compiling *c, const char *s)$/;"	f	file:
parsestr	ast.c	/^parsestr(struct compiling *c, const node *n, int *bytesmode)$/;"	f	file:
parsestrplus	ast.c	/^parsestrplus(struct compiling *c, const node *n, int *bytesmode)$/;"	f	file:
pcall	ceval.c	/^static int pcall[PCALL_NUM];$/;"	v	file:
pending	pyparallel_private.h	/^    volatile long       pending;$/;"	m	struct:_PxState
pending_async_exc	ceval.c	/^static int pending_async_exc = 0;$/;"	v	file:
pending_lock	ceval.c	/^static PyThread_type_lock pending_lock = 0; \/* for pending calls *\/$/;"	v	file:
pendingcalls	ceval.c	/^} pendingcalls[NPENDINGCALLS];$/;"	v	typeref:struct:__anon4	file:
pendingcalls	ceval.c	/^} pendingcalls[NPENDINGCALLS];$/;"	v	typeref:struct:__anon5	file:
pendingcalls_to_do	ceval.c	/^static _Py_atomic_int pendingcalls_to_do = {0};$/;"	v	file:
pendingfirst	ceval.c	/^static int pendingfirst = 0;$/;"	v	file:
pendingfirst	ceval.c	/^static volatile int pendingfirst = 0;$/;"	v	file:
pendinglast	ceval.c	/^static int pendinglast = 0;$/;"	v	file:
pendinglast	ceval.c	/^static volatile int pendinglast = 0;$/;"	v	file:
persist	pyparallel_private.h	/^    INIT_ONCE    persist;$/;"	m	struct:_PxObject
persisted_count	pyparallel_private.h	/^    int persisted_count;$/;"	m	struct:_PyParallelContext
persistent	pyparallel_private.h	/^    volatile long persistent;$/;"	m	struct:_PxState
physical	pyparallel_private.h	/^        int physical;$/;"	m	struct:_cpuinfo::_core
pmem_next	dtoa.c	/^static double private_mem[PRIVATE_mem], *pmem_next = private_mem;$/;"	v	file:
port	pyparallel_private.h	/^    int   port;$/;"	m	struct:_PxSocket
pow5mult	dtoa.c	/^pow5mult(Bigint *b, int k)$/;"	f	file:
ppc_getcounter	ceval.c	/^ppc_getcounter(uint64 *v)$/;"	f	file:
precision	formatter_unicode.c	/^    Py_ssize_t precision;$/;"	m	struct:__anon9	file:
prev	pyparallel_private.h	/^    Context *prev;$/;"	m	struct:_PyParallelContext
prev	pyparallel_private.h	/^    Object   *prev;$/;"	m	struct:_Object
prev	pyparallel_private.h	/^    PxSocket *prev;$/;"	m	struct:_PxSocket
prev	pyparallel_private.h	/^    PxSocketBuf *prev;$/;"	m	struct:_PxSocketBuf
prev	pyparallel_private.h	/^    RBUF           *prev;$/;"	m	struct:_RBUF
print_error_text	pythonrun.c	/^print_error_text(PyObject *f, int offset, const char *text)$/;"	f	file:
print_exception	pythonrun.c	/^print_exception(PyObject *f, PyObject *value)$/;"	f	file:
print_exception_recursive	pythonrun.c	/^print_exception_recursive(PyObject *f, PyObject *value, PyObject *seen)$/;"	f	file:
private_mem	dtoa.c	/^static double private_mem[PRIVATE_mem], *pmem_next = private_mem;$/;"	v	file:
process_id	pyparallel_private.h	/^    long process_id;$/;"	m	struct:_PyParallelContextStats
processing_callback	pyparallel_private.h	/^    int processing_callback;$/;"	m	struct:_PxState
profile_trampoline	sysmodule.c	/^profile_trampoline(PyObject *self, PyFrameObject *frame,$/;"	f	file:
progname	pythonrun.c	/^static wchar_t *progname = L"python";$/;"	v	file:
progname	pythonrun.c	/^static wchar_t *progname = L"python3";$/;"	v	file:
protocol	pyparallel_private.h	/^    PyObject *protocol;$/;"	m	struct:_PxSocket
protocol_type	pyparallel_private.h	/^    PyObject *protocol_type;$/;"	m	struct:_PxSocket
prtrace	ceval.c	/^prtrace(PyObject *v, char *str)$/;"	f	file:
pth_lock	thread_pth.h	/^} pth_lock;$/;"	t	typeref:struct:__anon17
pthread_attr_default	thread_pthread.h	70;"	d
pthread_condattr_default	thread_pthread.h	76;"	d
pthread_lock	thread_pthread.h	/^} pthread_lock;$/;"	t	typeref:struct:__anon18
pthread_mutexattr_default	thread_pthread.h	73;"	d
ptr	marshal.c	/^    char *ptr;$/;"	m	struct:__anon14	file:
px	pyparallel_private.h	/^    PxState    *px;$/;"	m	struct:_PxThreadLocalState
px_callback	parallelmodule.c	/^px_callback(PTP_CALLBACK_INSTANCE instance, void *context)$/;"	f
px_cb1	parallelmodule.c	/^px_cb1(void *instance, void *context)$/;"	f	file:
px_cb2	parallelmodule.c	/^px_cb2(void *instance, void *context)$/;"	f
px_cb3	parallelmodule.c	/^px_cb3(PTP_CALLBACK_INSTANCE instance, void *context)$/;"	f
px_cb4	parallelmodule.c	/^px_cb4(PTP_CALLBACK_INSTANCE instance, void *context)$/;"	f
pxsock_close_	pyparallel_private.h	888;"	d
pxsock_connection_made_callback	pyparallel_private.h	883;"	d
pxsock_data_received_callback	pyparallel_private.h	884;"	d
pxsock_handle_error	pyparallel_private.h	882;"	d
pxsock_init_line_mode	pyparallel_private.h	890;"	d
pxsock_maybe_shutdown_send_or_recv	pyparallel_private.h	881;"	d
pxsock_nop	pyparallel_private.h	879;"	d
pxsock_overlapped_recv_callback	pyparallel_private.h	892;"	d
pxsock_post_callback_that_does_not_support_sending_retval	pyparallel_private.h	887;"	d
pxsock_post_callback_that_supports_sending_retval	pyparallel_private.h	886;"	d
pxsock_reload_protocol	pyparallel_private.h	880;"	d
pxsock_send_complete_callback	pyparallel_private.h	885;"	d
pxsock_try_recv	pyparallel_private.h	891;"	d
pxsock_try_send	pyparallel_private.h	889;"	d
pxsocket_accept	pyparallel.c	/^pxsocket_accept(PxSocket *s, PyObject *args)$/;"	f
pxsocket_close	pyparallel.c	/^pxsocket_close(PxSocket *s, PyObject *args)$/;"	f
pxsocket_dealloc	pyparallel.c	/^pxsocket_dealloc(PxSocket *s)$/;"	f
pxsocket_kwlist	pyparallel_private.h	/^static const char *pxsocket_kwlist[] = {$/;"	v
pxsocket_kwlist_formatstring	pyparallel_private.h	/^static const char *pxsocket_kwlist_formatstring = \\$/;"	v
pxsocket_next_send_id	pyparallel.c	/^pxsocket_next_send_id(PxSocket *s, PyObject *args)$/;"	f
pxsocket_protocol_attrs	pyparallel_private.h	/^static const char *pxsocket_protocol_attrs[] = {$/;"	v
pxsocket_sendfile	pyparallel.c	/^pxsocket_sendfile(PxSocket *s, PyObject *args)$/;"	f
pyexitfunc	pythonrun.c	/^static void (*pyexitfunc)(void) = NULL;$/;"	v	file:
pygettimeofday	pytime.c	/^pygettimeofday(_PyTime_timeval *tp, _Py_clock_info_t *info)$/;"	f	file:
quorem	dtoa.c	/^quorem(Bigint *b, Bigint *S)$/;"	f	file:
r_PyLong	marshal.c	/^r_PyLong(RFILE *p)$/;"	f	file:
r_byte	marshal.c	/^r_byte(RFILE *p)$/;"	f	file:
r_long	marshal.c	/^r_long(RFILE *p)$/;"	f	file:
r_long64	marshal.c	/^r_long64(RFILE *p)$/;"	f	file:
r_object	marshal.c	/^r_object(RFILE *p)$/;"	f	file:
r_short	marshal.c	/^r_short(RFILE *p)$/;"	f	file:
r_string	marshal.c	/^r_string(char *s, Py_ssize_t n, RFILE *p)$/;"	f	file:
ratio	dtoa.c	/^ratio(Bigint *a, Bigint *b)$/;"	f	file:
rbuf	pyparallel_private.h	/^    RBUF   *rbuf;$/;"	m	struct:_PxSocket
rbuf	pyparallel_private.h	/^    TLSBUF                  rbuf[Px_NUM_TLS_WSABUFS];$/;"	m	struct:_PxThreadLocalState
rbuf_bitmap	pyparallel_private.h	/^    volatile Px_INTPTR      rbuf_bitmap;$/;"	m	struct:_PxThreadLocalState
rbuf_cs	pyparallel_private.h	/^    CRITICAL_SECTION        rbuf_cs;$/;"	m	struct:_PxThreadLocalState
rbufs	pyparallel_private.h	/^    WSABUF                 *rbufs[Px_NUM_TLS_WSABUFS];$/;"	m	struct:_PxThreadLocalState
rbytes	pyparallel_private.h	/^    DWORD     rbytes;$/;"	m	struct:_PxSocket
read_object	marshal.c	/^read_object(RFILE *p)$/;"	f	file:
readable	marshal.c	/^    PyObject *readable;    \/* Stream-like object being read from *\/$/;"	m	struct:__anon14	file:
recreate_gil	ceval_gil.h	/^static void recreate_gil(void)$/;"	f
recursion_limit	ceval.c	/^static int recursion_limit = Py_DEFAULT_RECURSION_LIMIT;$/;"	v	file:
recv_failed	pyparallel.c	/^_Py_IDENTIFIER(recv_failed);$/;"	v
recv_failed	pyparallel_private.h	/^    PyObject *recv_failed;$/;"	m	struct:_PxSocket
recv_id	pyparallel_private.h	/^    size_t recv_id;$/;"	m	struct:_PxSocket
recv_nbytes	pyparallel_private.h	/^    Py_ssize_t  recv_nbytes;$/;"	m	struct:_PxSocket
recv_shutdown	pyparallel.c	/^_Py_IDENTIFIER(recv_shutdown);$/;"	v
recv_shutdown	pyparallel_private.h	/^    PyObject *recv_shutdown;$/;"	m	struct:_PxSocket
recvbuf_size	pyparallel_private.h	/^    int       recvbuf_size;$/;"	m	struct:_PxSocket
refcnt	pyparallel_private.h	/^    volatile long refcnt;$/;"	m	struct:_PyParallelContext
remaining	pyparallel_private.h	/^    size_t remaining;$/;"	m	struct:_PyParallelContextStats
remote_addr	pyparallel_private.h	/^    sock_addr_t  remote_addr;$/;"	m	struct:_PxSocket
remote_addr_len	pyparallel_private.h	/^    int          remote_addr_len;$/;"	m	struct:_PxSocket
remote_addrinfo	pyparallel_private.h	/^    struct addrinfo remote_addrinfo;$/;"	m	struct:_PxSocket	typeref:struct:_PxSocket::addrinfo
remove_importlib_frames	import.c	/^remove_importlib_frames(void)$/;"	f	file:
remove_module	import.c	/^remove_module(PyObject *name)$/;"	f	file:
remove_object	pyparallel_private.h	/^remove_object(Objects *list, Object *o)$/;"	f
remove_trailing_zeros	pystrtod.c	/^remove_trailing_zeros(char *buffer)$/;"	f
replace_errors	codecs.c	/^static PyObject *replace_errors(PyObject *self, PyObject *exc)$/;"	f	file:
resized_from	pyparallel_private.h	/^    PyObject    *resized_from;$/;"	m	struct:_PxObject
resized_to	pyparallel_private.h	/^    PyObject    *resized_to;$/;"	m	struct:_PxObject
resizes	pyparallel_private.h	/^    size_t  resizes;$/;"	m	struct:_PyParallelHeap
resizes	pyparallel_private.h	/^    size_t resizes;$/;"	m	struct:_PyParallelContextStats
restore_and_clear_exc_state	ceval.c	/^restore_and_clear_exc_state(PyThreadState *tstate, PyFrameObject *f)$/;"	f	file:
result	bltinmodule.c	/^    PyObject *result;$/;"	m	struct:__anon3	file:
result	parallelmodule.c	/^    PyObject  **result;$/;"	m	struct:ParallelContext4	file:
result	parallelmodule.c	/^    PyObject **result;$/;"	m	struct:ParallelContext2	file:
result	parallelmodule.c	/^    PyObject **result;$/;"	m	struct:ParallelContext3	file:
result	pyparallel_private.h	/^    PyObject *result;$/;"	m	struct:_PyParallelContext
results	parallelmodule.c	/^    PyObject **results;$/;"	m	struct:_ParallelContext	file:
retired_contexts	pyparallel_private.h	/^    PxListHead *retired_contexts;$/;"	m	struct:_PxState
returns	Python-ast.c	/^_Py_IDENTIFIER(returns);$/;"	v
reverse_string	traceback.c	/^reverse_string(char *text, const size_t len)$/;"	f	file:
right	Python-ast.c	/^_Py_IDENTIFIER(right);$/;"	v
round	pymath.c	/^round(double x)$/;"	f
rs_byte	marshal.c	460;"	d	file:
run_mod	pythonrun.c	/^run_mod(mod_ty mod, const char *filename, PyObject *globals, PyObject *locals,$/;"	f	file:
run_pyc_file	pythonrun.c	/^run_pyc_file(FILE *fp, const char *filename, PyObject *globals,$/;"	f	file:
runtime	pyparallel_private.h	/^    double runtime;$/;"	m	struct:_PyParallelContextStats
rv_alloc	dtoa.c	/^rv_alloc(int i)$/;"	f	file:
s	Python-ast.c	/^_Py_IDENTIFIER(s);$/;"	v
s	pyparallel_private.h	/^    PxSocket       *s;$/;"	m	struct:_RBUF
s	pyparallel_private.h	/^    PxSocket       *s;$/;"	m	struct:_SBUF
s	pyparallel_private.h	/^    PxSocket       *s;$/;"	m	struct:_TLSBUF
s2b	dtoa.c	/^s2b(const char *s, int nd0, int nd, ULong y9)$/;"	f	file:
save_exc_state	ceval.c	/^save_exc_state(PyThreadState *tstate, PyFrameObject *f)$/;"	f	file:
sbuf	pyparallel_private.h	/^    SBUF   *sbuf;$/;"	m	struct:_PxSocket
sbuf	pyparallel_private.h	/^    TLSBUF                  sbuf[Px_NUM_TLS_WSABUFS];$/;"	m	struct:_PxThreadLocalState
sbuf_bitmap	pyparallel_private.h	/^    volatile Px_INTPTR      sbuf_bitmap;$/;"	m	struct:_PxThreadLocalState
sbuf_cs	pyparallel_private.h	/^    CRITICAL_SECTION        sbuf_cs;$/;"	m	struct:_PxThreadLocalState
sbufs	pyparallel_private.h	/^    WSABUF                 *sbufs[Px_NUM_TLS_WSABUFS];$/;"	m	struct:_PxThreadLocalState
scale	dtoa.c	/^    int e0, nd, nd0, scale;$/;"	m	struct:BCinfo	file:
sd2b	dtoa.c	/^sd2b(U *d, int scale, int *e)$/;"	f	file:
sem	condvar.h	/^    HANDLE sem;$/;"	m	struct:_PyCOND_T
send_complete	pyparallel.c	/^_Py_IDENTIFIER(send_complete);$/;"	v
send_complete	pyparallel_private.h	/^    PyObject *send_complete;$/;"	m	struct:_PxSocket
send_failed	pyparallel.c	/^_Py_IDENTIFIER(send_failed);$/;"	v
send_failed	pyparallel_private.h	/^    PyObject *send_failed;$/;"	m	struct:_PxSocket
send_id	pyparallel_private.h	/^    size_t send_id;$/;"	m	struct:_PxSocket
send_nbytes	pyparallel_private.h	/^    Py_ssize_t  send_nbytes;$/;"	m	struct:_PxSocket
send_shutdown	pyparallel.c	/^_Py_IDENTIFIER(send_shutdown);$/;"	v
send_shutdown	pyparallel_private.h	/^    PyObject *send_shutdown;$/;"	m	struct:_PxSocket
sendbuf_size	pyparallel_private.h	/^    int       sendbuf_size;$/;"	m	struct:_PxSocket
sendfile_handle	pyparallel_private.h	/^    HANDLE sendfile_handle;$/;"	m	struct:_PxSocket
sendfile_nbytes	pyparallel_private.h	/^    DWORD  sendfile_nbytes;$/;"	m	struct:_PxSocket
sendfile_snapshot	pyparallel_private.h	/^    Heap  *sendfile_snapshot;$/;"	m	struct:_PxSocket
sendfile_tfbuf	pyparallel_private.h	/^    TRANSMIT_FILE_BUFFERS sendfile_tfbuf;$/;"	m	struct:_PxSocket
seq_for_testlist	ast.c	/^seq_for_testlist(struct compiling *c, const node *n)$/;"	f	file:
set_context	ast.c	/^set_context(struct compiling *c, expr_ty e, expr_context_ty ctx, const node *n)$/;"	f	file:
set_main_loader	pythonrun.c	/^static set_main_loader(PyObject *d, const char *filename, const char *loader_name)$/;"	f	file:
setcomp	symtable.c	/^    listcomp = NULL, setcomp = NULL, dictcomp = NULL,$/;"	v	file:
seterror	getargs.c	/^seterror(int iarg, const char *msg, int *levels, const char *fname,$/;"	f	file:
setup_context	_warnings.c	/^setup_context(Py_ssize_t stack_level, PyObject **filename, int *lineno,$/;"	f	file:
show_warning	_warnings.c	/^show_warning(PyObject *filename, int lineno, PyObject *text, PyObject$/;"	f	file:
shutdown	pyparallel_private.h	/^    HANDLE  shutdown;$/;"	m	struct:_PxSocket
shutdown_send	pyparallel.c	/^_Py_IDENTIFIER(shutdown_send);$/;"	v
sign	dtoa.c	/^    int k, maxwds, sign, wds;$/;"	m	struct:Bigint	file:
sign	formatter_unicode.c	/^    Py_UCS4 sign;$/;"	m	struct:__anon9	file:
sign	formatter_unicode.c	/^    char sign;$/;"	m	struct:__anon11	file:
signature	pyparallel_private.h	/^    size_t          signature;$/;"	m	struct:_RBUF
signature	pyparallel_private.h	/^    size_t       signature;$/;"	m	struct:_PxObject
signature	pyparallel_private.h	/^    size_t signature;$/;"	m	struct:_PxSocketBuf
size	pyparallel_private.h	/^    ULONG       size;$/;"	m	struct:_PxIO
size	pyparallel_private.h	/^    size_t       size;$/;"	m	struct:_PxObject
size	pyparallel_private.h	/^    size_t size;$/;"	m	struct:_PyParallelContextStats
size_before_hijack	pyparallel_private.h	/^    size_t size_before_hijack;$/;"	m	struct:_PyParallelContext
skipitem	getargs.c	/^skipitem(const char **p_format, va_list *p_va, int flags)$/;"	f	file:
slice	Python-ast.c	/^_Py_IDENTIFIER(slice);$/;"	v
slice_type	Python-ast.c	/^static PyTypeObject *slice_type;$/;"	v	file:
slist_entry	pyparallel_private.h	/^    __declspec(align(16)) SLIST_ENTRY slist_entry;$/;"	m	struct:_PxSocketListItem
smallmax	mystrtoul.c	/^static unsigned long smallmax[] = {$/;"	v	file:
snapshot	pyparallel_private.h	/^    Heap                    snapshot[Px_NUM_TLS_WSABUFS];$/;"	m	struct:_PxThreadLocalState
snapshot	pyparallel_private.h	/^    Heap                snapshot[Px_INTPTR_BITS];$/;"	m	struct:_PyParallelContext
snapshot	pyparallel_private.h	/^    Heap           *snapshot;$/;"	m	struct:_RBUF
snapshot	pyparallel_private.h	/^    Heap           *snapshot;$/;"	m	struct:_SBUF
snapshot	pyparallel_private.h	/^    Heap           *snapshot;$/;"	m	struct:_TLSBUF
snapshot_id	pyparallel_private.h	/^    size_t                  snapshot_id;$/;"	m	struct:_PxThreadLocalState
snapshot_id	pyparallel_private.h	/^    size_t              snapshot_id;$/;"	m	struct:_PyParallelContext
snapshot_id	pyparallel_private.h	/^    size_t  snapshot_id;$/;"	m	struct:_PyParallelHeap
snapshots	pyparallel_private.h	/^    Heap                   *snapshots[Px_NUM_TLS_WSABUFS];$/;"	m	struct:_PxThreadLocalState
snapshots	pyparallel_private.h	/^    Heap               *snapshots[Px_INTPTR_BITS];$/;"	m	struct:_PyParallelContext
snapshots_bitmap	pyparallel_private.h	/^    volatile Px_INTPTR      snapshots_bitmap;$/;"	m	struct:_PxThreadLocalState
snapshots_bitmap	pyparallel_private.h	/^    volatile Px_INTPTR  snapshots_bitmap;$/;"	m	struct:_PyParallelContext
snapshots_cs	pyparallel_private.h	/^    CRITICAL_SECTION        snapshots_cs;$/;"	m	struct:_PxThreadLocalState
snapshots_cs	pyparallel_private.h	/^    CRITICAL_SECTION    snapshots_cs;$/;"	m	struct:_PyParallelContext
sock_family	pyparallel_private.h	/^    int sock_family;            \/* Address family, e.g., AF_INET *\/$/;"	m	struct:_PxSocket
sock_fd	pyparallel_private.h	/^    SOCKET_T sock_fd;           \/* Socket file descriptor *\/$/;"	m	struct:_PxSocket
sock_fd	pyparallel_private.h	/^    SOCKET_T sock_fd;$/;"	m	struct:_PxSocketListItem
sock_proto	pyparallel_private.h	/^    int sock_proto;             \/* Protocol type, usually 0 *\/$/;"	m	struct:_PxSocket
sock_timeout	pyparallel_private.h	/^    double sock_timeout;                 \/* Operation timeout in seconds;$/;"	m	struct:_PxSocket
sock_type	pyparallel_private.h	/^    int sock_type;              \/* Socket type, e.g., SOCK_STREAM *\/$/;"	m	struct:_PxSocket
sockcb_t	pyparallel_private.h	/^typedef void (*sockcb_t)(Context *c);$/;"	t
source_as_string	bltinmodule.c	/^source_as_string(PyObject *cmd, char *funcname, char *what, PyCompilerFlags *cf)$/;"	f	file:
special_lookup	ceval.c	/^special_lookup(PyObject *o, _Py_Identifier *id)$/;"	f	file:
stackdepth	compile.c	/^stackdepth(struct compiler *c)$/;"	f	file:
stackdepth_walk	compile.c	/^stackdepth_walk(struct compiler *c, basicblock *b, int depth, int maxdepth)$/;"	f	file:
starargs	Python-ast.c	/^_Py_IDENTIFIER(starargs);$/;"	v
start	pyparallel_private.h	/^    PxListItem *start;$/;"	m	struct:_PxSocket
start	pyparallel_private.h	/^    unsigned __int64 start;$/;"	m	struct:_PyParallelContextStats
startup_size	pyparallel_private.h	/^    size_t startup_size;$/;"	m	struct:_PyParallelContextStats
states_0	graminit.c	/^static state states_0[3] = {$/;"	v	file:
states_1	graminit.c	/^static state states_1[2] = {$/;"	v	file:
states_10	graminit.c	/^static state states_10[18] = {$/;"	v	file:
states_11	graminit.c	/^static state states_11[2] = {$/;"	v	file:
states_12	graminit.c	/^static state states_12[2] = {$/;"	v	file:
states_13	graminit.c	/^static state states_13[4] = {$/;"	v	file:
states_14	graminit.c	/^static state states_14[2] = {$/;"	v	file:
states_15	graminit.c	/^static state states_15[6] = {$/;"	v	file:
states_16	graminit.c	/^static state states_16[3] = {$/;"	v	file:
states_17	graminit.c	/^static state states_17[2] = {$/;"	v	file:
states_18	graminit.c	/^static state states_18[3] = {$/;"	v	file:
states_19	graminit.c	/^static state states_19[2] = {$/;"	v	file:
states_2	graminit.c	/^static state states_2[3] = {$/;"	v	file:
states_20	graminit.c	/^static state states_20[2] = {$/;"	v	file:
states_21	graminit.c	/^static state states_21[2] = {$/;"	v	file:
states_22	graminit.c	/^static state states_22[2] = {$/;"	v	file:
states_23	graminit.c	/^static state states_23[3] = {$/;"	v	file:
states_24	graminit.c	/^static state states_24[2] = {$/;"	v	file:
states_25	graminit.c	/^static state states_25[5] = {$/;"	v	file:
states_26	graminit.c	/^static state states_26[2] = {$/;"	v	file:
states_27	graminit.c	/^static state states_27[3] = {$/;"	v	file:
states_28	graminit.c	/^static state states_28[8] = {$/;"	v	file:
states_29	graminit.c	/^static state states_29[4] = {$/;"	v	file:
states_3	graminit.c	/^static state states_3[7] = {$/;"	v	file:
states_30	graminit.c	/^static state states_30[4] = {$/;"	v	file:
states_31	graminit.c	/^static state states_31[3] = {$/;"	v	file:
states_32	graminit.c	/^static state states_32[2] = {$/;"	v	file:
states_33	graminit.c	/^static state states_33[2] = {$/;"	v	file:
states_34	graminit.c	/^static state states_34[3] = {$/;"	v	file:
states_35	graminit.c	/^static state states_35[3] = {$/;"	v	file:
states_36	graminit.c	/^static state states_36[5] = {$/;"	v	file:
states_37	graminit.c	/^static state states_37[2] = {$/;"	v	file:
states_38	graminit.c	/^static state states_38[8] = {$/;"	v	file:
states_39	graminit.c	/^static state states_39[8] = {$/;"	v	file:
states_4	graminit.c	/^static state states_4[2] = {$/;"	v	file:
states_40	graminit.c	/^static state states_40[10] = {$/;"	v	file:
states_41	graminit.c	/^static state states_41[13] = {$/;"	v	file:
states_42	graminit.c	/^static state states_42[5] = {$/;"	v	file:
states_43	graminit.c	/^static state states_43[4] = {$/;"	v	file:
states_44	graminit.c	/^static state states_44[5] = {$/;"	v	file:
states_45	graminit.c	/^static state states_45[5] = {$/;"	v	file:
states_46	graminit.c	/^static state states_46[6] = {$/;"	v	file:
states_47	graminit.c	/^static state states_47[2] = {$/;"	v	file:
states_48	graminit.c	/^static state states_48[5] = {$/;"	v	file:
states_49	graminit.c	/^static state states_49[5] = {$/;"	v	file:
states_5	graminit.c	/^static state states_5[3] = {$/;"	v	file:
states_50	graminit.c	/^static state states_50[2] = {$/;"	v	file:
states_51	graminit.c	/^static state states_51[2] = {$/;"	v	file:
states_52	graminit.c	/^static state states_52[3] = {$/;"	v	file:
states_53	graminit.c	/^static state states_53[2] = {$/;"	v	file:
states_54	graminit.c	/^static state states_54[4] = {$/;"	v	file:
states_55	graminit.c	/^static state states_55[3] = {$/;"	v	file:
states_56	graminit.c	/^static state states_56[2] = {$/;"	v	file:
states_57	graminit.c	/^static state states_57[2] = {$/;"	v	file:
states_58	graminit.c	/^static state states_58[2] = {$/;"	v	file:
states_59	graminit.c	/^static state states_59[2] = {$/;"	v	file:
states_6	graminit.c	/^static state states_6[8] = {$/;"	v	file:
states_60	graminit.c	/^static state states_60[2] = {$/;"	v	file:
states_61	graminit.c	/^static state states_61[2] = {$/;"	v	file:
states_62	graminit.c	/^static state states_62[3] = {$/;"	v	file:
states_63	graminit.c	/^static state states_63[4] = {$/;"	v	file:
states_64	graminit.c	/^static state states_64[9] = {$/;"	v	file:
states_65	graminit.c	/^static state states_65[5] = {$/;"	v	file:
states_66	graminit.c	/^static state states_66[7] = {$/;"	v	file:
states_67	graminit.c	/^static state states_67[3] = {$/;"	v	file:
states_68	graminit.c	/^static state states_68[5] = {$/;"	v	file:
states_69	graminit.c	/^static state states_69[3] = {$/;"	v	file:
states_7	graminit.c	/^static state states_7[4] = {$/;"	v	file:
states_70	graminit.c	/^static state states_70[3] = {$/;"	v	file:
states_71	graminit.c	/^static state states_71[3] = {$/;"	v	file:
states_72	graminit.c	/^static state states_72[11] = {$/;"	v	file:
states_73	graminit.c	/^static state states_73[8] = {$/;"	v	file:
states_74	graminit.c	/^static state states_74[8] = {$/;"	v	file:
states_75	graminit.c	/^static state states_75[4] = {$/;"	v	file:
states_76	graminit.c	/^static state states_76[2] = {$/;"	v	file:
states_77	graminit.c	/^static state states_77[6] = {$/;"	v	file:
states_78	graminit.c	/^static state states_78[4] = {$/;"	v	file:
states_79	graminit.c	/^static state states_79[2] = {$/;"	v	file:
states_8	graminit.c	/^static state states_8[18] = {$/;"	v	file:
states_80	graminit.c	/^static state states_80[3] = {$/;"	v	file:
states_81	graminit.c	/^static state states_81[3] = {$/;"	v	file:
states_9	graminit.c	/^static state states_9[4] = {$/;"	v	file:
stats	pyparallel_private.h	/^    Stats       stats;$/;"	m	struct:_PxThreadLocalState
stats	pyparallel_private.h	/^    Stats     stats;$/;"	m	struct:_PyParallelContext
ste_dealloc	symtable.c	/^ste_dealloc(PySTEntryObject *ste)$/;"	f	file:
ste_memberlist	symtable.c	/^static PyMemberDef ste_memberlist[] = {$/;"	v	file:
ste_new	symtable.c	/^ste_new(struct symtable *st, identifier name, _Py_block_ty block,$/;"	f	file:
ste_repr	symtable.c	/^ste_repr(PySTEntryObject *ste)$/;"	f	file:
step	Python-ast.c	/^_Py_IDENTIFIER(step);$/;"	v
stmt_attributes	Python-ast.c	/^static char *stmt_attributes[] = {$/;"	v	file:
stmt_type	Python-ast.c	/^static PyTypeObject *stmt_type;$/;"	v	file:
str	marshal.c	/^    PyObject *str;$/;"	m	struct:__anon14	file:
strcasecmp	dynload_win.c	/^static int strcasecmp (char *string1, char *string2)$/;"	f	file:
strdup	strdup.c	/^strdup(const char *str)$/;"	f
strict_errors	codecs.c	/^static PyObject *strict_errors(PyObject *self, PyObject *exc)$/;"	f	file:
submit_work	pyparallel.c	/^submit_work(Context *c)$/;"	f
submitted	pyparallel_private.h	/^    unsigned __int64 submitted;$/;"	m	struct:_PyParallelContextStats
submitted	pyparallel_private.h	/^    volatile long long  submitted;$/;"	m	struct:_PxState
sulp	dtoa.c	/^sulp(U *x, BCinfo *bc)$/;"	f	file:
surrogateescape_errors	codecs.c	/^static PyObject *surrogateescape_errors(PyObject *self, PyObject *exc)$/;"	f	file:
surrogatepass_errors	codecs.c	/^static PyObject *surrogatepass_errors(PyObject *self, PyObject *exc)$/;"	f	file:
swap_exc_state	ceval.c	/^swap_exc_state(PyThreadState *tstate, PyFrameObject *f)$/;"	f	file:
switch_cond	ceval_gil.h	/^static COND_T switch_cond;$/;"	v
switch_mutex	ceval_gil.h	/^static MUTEX_T switch_mutex;$/;"	v
symtable_add_def	symtable.c	/^symtable_add_def(struct symtable *st, PyObject *name, int flag)$/;"	f	file:
symtable_analyze	symtable.c	/^symtable_analyze(struct symtable *st)$/;"	f	file:
symtable_enter_block	symtable.c	/^symtable_enter_block(struct symtable *st, identifier name, _Py_block_ty block,$/;"	f	file:
symtable_exit_block	symtable.c	/^symtable_exit_block(struct symtable *st, void *ast)$/;"	f	file:
symtable_handle_comprehension	symtable.c	/^symtable_handle_comprehension(struct symtable *st, expr_ty e,$/;"	f	file:
symtable_implicit_arg	symtable.c	/^symtable_implicit_arg(struct symtable *st, int pos)$/;"	f	file:
symtable_lookup	symtable.c	/^symtable_lookup(struct symtable *st, PyObject *name)$/;"	f	file:
symtable_new	symtable.c	/^symtable_new(void)$/;"	f	file:
symtable_new_tmpname	symtable.c	/^symtable_new_tmpname(struct symtable *st)$/;"	f	file:
symtable_visit_alias	symtable.c	/^symtable_visit_alias(struct symtable *st, alias_ty a)$/;"	f	file:
symtable_visit_annotations	symtable.c	/^symtable_visit_annotations(struct symtable *st, stmt_ty s)$/;"	f	file:
symtable_visit_argannotations	symtable.c	/^symtable_visit_argannotations(struct symtable *st, asdl_seq *args)$/;"	f	file:
symtable_visit_arguments	symtable.c	/^symtable_visit_arguments(struct symtable *st, arguments_ty a)$/;"	f	file:
symtable_visit_comprehension	symtable.c	/^symtable_visit_comprehension(struct symtable *st, comprehension_ty lc)$/;"	f	file:
symtable_visit_dictcomp	symtable.c	/^symtable_visit_dictcomp(struct symtable *st, expr_ty e)$/;"	f	file:
symtable_visit_excepthandler	symtable.c	/^symtable_visit_excepthandler(struct symtable *st, excepthandler_ty eh)$/;"	f	file:
symtable_visit_expr	symtable.c	/^symtable_visit_expr(struct symtable *st, expr_ty e)$/;"	f	file:
symtable_visit_genexp	symtable.c	/^symtable_visit_genexp(struct symtable *st, expr_ty e)$/;"	f	file:
symtable_visit_keyword	symtable.c	/^symtable_visit_keyword(struct symtable *st, keyword_ty k)$/;"	f	file:
symtable_visit_listcomp	symtable.c	/^symtable_visit_listcomp(struct symtable *st, expr_ty e)$/;"	f	file:
symtable_visit_params	symtable.c	/^symtable_visit_params(struct symtable *st, asdl_seq *args)$/;"	f	file:
symtable_visit_setcomp	symtable.c	/^symtable_visit_setcomp(struct symtable *st, expr_ty e)$/;"	f	file:
symtable_visit_slice	symtable.c	/^symtable_visit_slice(struct symtable *st, slice_ty s)$/;"	f	file:
symtable_visit_stmt	symtable.c	/^symtable_visit_stmt(struct symtable *st, stmt_ty s)$/;"	f	file:
symtable_visit_withitem	symtable.c	/^symtable_visit_withitem(struct symtable *st, withitem_ty item)$/;"	f	file:
symtable_warn	symtable.c	/^symtable_warn(struct symtable *st, char *msg, int lineno)$/;"	f	file:
sync_nowait_done	pyparallel_private.h	/^    volatile long long  sync_nowait_done;$/;"	m	struct:_PxState
sync_nowait_inflight	pyparallel_private.h	/^    volatile long       sync_nowait_inflight;$/;"	m	struct:_PxState
sync_nowait_pending	pyparallel_private.h	/^    volatile long       sync_nowait_pending;$/;"	m	struct:_PxState
sync_nowait_submitted	pyparallel_private.h	/^    volatile long long  sync_nowait_submitted;$/;"	m	struct:_PxState
sync_wait_done	pyparallel_private.h	/^    volatile long long  sync_wait_done;$/;"	m	struct:_PxState
sync_wait_inflight	pyparallel_private.h	/^    volatile long       sync_wait_inflight;$/;"	m	struct:_PxState
sync_wait_pending	pyparallel_private.h	/^    volatile long       sync_wait_pending;$/;"	m	struct:_PxState
sync_wait_submitted	pyparallel_private.h	/^    volatile long long  sync_wait_submitted;$/;"	m	struct:_PxState
sys	makeopcodetargets.py	/^    import sys$/;"	i
sys_call_tracing	sysmodule.c	/^sys_call_tracing(PyObject *self, PyObject *args)$/;"	f	file:
sys_clear_type_cache	sysmodule.c	/^sys_clear_type_cache(PyObject* self, PyObject* args)$/;"	f	file:
sys_current_frames	sysmodule.c	/^sys_current_frames(PyObject *self, PyObject *noargs)$/;"	f	file:
sys_debugmallocstats	sysmodule.c	/^sys_debugmallocstats(PyObject *self, PyObject *args)$/;"	f	file:
sys_deletes	import.c	/^static char* sys_deletes[] = {$/;"	v	file:
sys_displayhook	sysmodule.c	/^sys_displayhook(PyObject *self, PyObject *o)$/;"	f	file:
sys_displayhook_unencodable	sysmodule.c	/^sys_displayhook_unencodable(PyObject *outf, PyObject *o)$/;"	f	file:
sys_doc	sysmodule.c	/^PyDoc_VAR(sys_doc) =$/;"	v
sys_exc_info	sysmodule.c	/^sys_exc_info(PyObject *self, PyObject *noargs)$/;"	f	file:
sys_excepthook	sysmodule.c	/^sys_excepthook(PyObject* self, PyObject* args)$/;"	f	file:
sys_exit	sysmodule.c	/^sys_exit(PyObject *self, PyObject *args)$/;"	f	file:
sys_files	import.c	/^static char* sys_files[] = {$/;"	v	file:
sys_format	sysmodule.c	/^sys_format(char *name, FILE *fp, const char *format, va_list va)$/;"	f	file:
sys_getcheckinterval	sysmodule.c	/^sys_getcheckinterval(PyObject *self, PyObject *args)$/;"	f	file:
sys_getcounts	sysmodule.c	/^sys_getcounts(PyObject *self)$/;"	f	file:
sys_getdefaultencoding	sysmodule.c	/^sys_getdefaultencoding(PyObject *self)$/;"	f	file:
sys_getdlopenflags	sysmodule.c	/^sys_getdlopenflags(PyObject *self, PyObject *args)$/;"	f	file:
sys_getfilesystemencoding	sysmodule.c	/^sys_getfilesystemencoding(PyObject *self)$/;"	f	file:
sys_getframe	sysmodule.c	/^sys_getframe(PyObject *self, PyObject *args)$/;"	f	file:
sys_getprofile	sysmodule.c	/^sys_getprofile(PyObject *self, PyObject *args)$/;"	f	file:
sys_getrecursionlimit	sysmodule.c	/^sys_getrecursionlimit(PyObject *self)$/;"	f	file:
sys_getrefcount	sysmodule.c	/^sys_getrefcount(PyObject *self, PyObject *arg)$/;"	f	file:
sys_getsizeof	sysmodule.c	/^sys_getsizeof(PyObject *self, PyObject *args, PyObject *kwds)$/;"	f	file:
sys_getswitchinterval	sysmodule.c	/^sys_getswitchinterval(PyObject *self, PyObject *args)$/;"	f	file:
sys_gettotalrefcount	sysmodule.c	/^sys_gettotalrefcount(PyObject *self)$/;"	f	file:
sys_gettrace	sysmodule.c	/^sys_gettrace(PyObject *self, PyObject *args)$/;"	f	file:
sys_getwindowsversion	sysmodule.c	/^sys_getwindowsversion(PyObject *self)$/;"	f	file:
sys_intern	sysmodule.c	/^sys_intern(PyObject *self, PyObject *args)$/;"	f	file:
sys_mdebug	sysmodule.c	/^sys_mdebug(PyObject *self, PyObject *args)$/;"	f	file:
sys_methods	sysmodule.c	/^static PyMethodDef sys_methods[] = {$/;"	v	file:
sys_pyfile_write	sysmodule.c	/^sys_pyfile_write(const char *text, PyObject *file)$/;"	f	file:
sys_pyfile_write_unicode	sysmodule.c	/^sys_pyfile_write_unicode(PyObject *unicode, PyObject *file)$/;"	f	file:
sys_setcheckinterval	sysmodule.c	/^sys_setcheckinterval(PyObject *self, PyObject *args)$/;"	f	file:
sys_setdlopenflags	sysmodule.c	/^sys_setdlopenflags(PyObject *self, PyObject *args)$/;"	f	file:
sys_setprofile	sysmodule.c	/^sys_setprofile(PyObject *self, PyObject *args)$/;"	f	file:
sys_setrecursionlimit	sysmodule.c	/^sys_setrecursionlimit(PyObject *self, PyObject *args)$/;"	f	file:
sys_setswitchinterval	sysmodule.c	/^sys_setswitchinterval(PyObject *self, PyObject *args)$/;"	f	file:
sys_settrace	sysmodule.c	/^sys_settrace(PyObject *self, PyObject *args)$/;"	f	file:
sys_settscdump	sysmodule.c	/^sys_settscdump(PyObject *self, PyObject *args)$/;"	f	file:
sys_update_path	sysmodule.c	/^sys_update_path(int argc, wchar_t **argv)$/;"	f	file:
sys_write	sysmodule.c	/^sys_write(char *name, FILE *fp, const char *format, va_list va)$/;"	f	file:
sysmodule	sysmodule.c	/^static struct PyModuleDef sysmodule = {$/;"	v	typeref:struct:PyModuleDef	file:
take_gil	ceval_gil.h	/^static void take_gil(PyThreadState *tstate)$/;"	f
target	Python-ast.c	/^_Py_IDENTIFIER(target);$/;"	v
target	makeopcodetargets.py	/^        target = "Python\/opcode_targets.h"$/;"	v
target	makeopcodetargets.py	/^        target = sys.argv[1]$/;"	v
targets	Python-ast.c	/^_Py_IDENTIFIER(targets);$/;"	v
tb_clear	traceback.c	/^tb_clear(PyTracebackObject *tb)$/;"	f	file:
tb_dealloc	traceback.c	/^tb_dealloc(PyTracebackObject *tb)$/;"	f	file:
tb_dir	traceback.c	/^tb_dir(PyTracebackObject *self)$/;"	f	file:
tb_displayline	traceback.c	/^tb_displayline(PyObject *f, PyObject *filename, int lineno, PyObject *name)$/;"	f	file:
tb_memberlist	traceback.c	/^static PyMemberDef tb_memberlist[] = {$/;"	v	file:
tb_methods	traceback.c	/^static PyMethodDef tb_methods[] = {$/;"	v	file:
tb_printinternal	traceback.c	/^tb_printinternal(PyTracebackObject *tb, PyObject *f, long limit)$/;"	f	file:
tb_traverse	traceback.c	/^tb_traverse(PyTracebackObject *tb, visitproc visit, void *arg)$/;"	f	file:
tens	dtoa.c	/^tens[] = {$/;"	v	file:
test	Python-ast.c	/^_Py_IDENTIFIER(test);$/;"	v
this_thread_id	pyparallel_private.h	/^    int this_thread_id;$/;"	m	struct:_PxSocket
thousands_sep	formatter_unicode.c	/^    PyObject *thousands_sep;$/;"	m	struct:__anon10	file:
thousands_separators	formatter_unicode.c	/^    int thousands_separators;$/;"	m	struct:__anon9	file:
thread_debug	thread.c	/^static int thread_debug = 0;$/;"	v	file:
thread_id	pyparallel_private.h	/^    DWORD       thread_id;$/;"	m	struct:_PxThreadLocalState
thread_id	pyparallel_private.h	/^    long thread_id;$/;"	m	struct:_PyParallelContextStats
threadinfo_desc	thread.c	/^static PyStructSequence_Desc threadinfo_desc = {$/;"	v	file:
threadinfo_fields	thread.c	/^static PyStructSequence_Field threadinfo_fields[] = {$/;"	v	file:
threadstate_getframe	pystate.c	/^threadstate_getframe(PyThreadState *self)$/;"	f	file:
throughput	pyparallel.c	/^_Py_IDENTIFIER(throughput);$/;"	v
timers_done	pyparallel_private.h	/^    volatile long long  timers_done;$/;"	m	struct:_PxState
timers_inflight	pyparallel_private.h	/^    volatile long       timers_inflight;$/;"	m	struct:_PxState
timers_pending	pyparallel_private.h	/^    volatile long       timers_pending;$/;"	m	struct:_PxState
timers_submitted	pyparallel_private.h	/^    volatile long long  timers_submitted;$/;"	m	struct:_PxState
times_finished	pyparallel_private.h	/^    int times_finished;$/;"	m	struct:_PyParallelContext
times_used	pyparallel_private.h	/^    int times_used;$/;"	m	struct:_PxSocket
tinytens	dtoa.c	/^static const double tinytens[] = { 1e-16, 1e-32, 1e-64, 1e-128,$/;"	v	file:
tls	pyparallel.c	/^Py_TLS TLS tls;$/;"	v
tls	pyparallel_private.h	/^    TLS            *tls;$/;"	m	struct:_TLSBUF
tls_buf	pyparallel_private.h	/^    TLSBUF *tls_buf;$/;"	m	struct:_PxSocket
tls_buf_match	pyparallel_private.h	/^    volatile long tls_buf_match;$/;"	m	struct:_PxState
tls_buf_mismatch	pyparallel_private.h	/^    volatile long tls_buf_mismatch;$/;"	m	struct:_PxState
tls_heap_rollback_match	pyparallel_private.h	/^    volatile long tls_heap_rollback_match;$/;"	m	struct:_PxState
tls_heap_rollback_mismatch	pyparallel_private.h	/^    volatile long tls_heap_rollback_mismatch;$/;"	m	struct:_PxState
too_many_positional	ceval.c	/^too_many_positional(PyCodeObject *co, int given, int defcount, PyObject **fastlocals)$/;"	f	file:
top	symtable.c	/^static identifier top = NULL, lambda = NULL, genexpr = NULL,$/;"	v	file:
total_allocs	pyarena.c	/^    size_t total_allocs;$/;"	m	struct:_arena	file:
total_big_blocks	pyarena.c	/^    size_t total_big_blocks;$/;"	m	struct:_arena	file:
total_block_size	pyarena.c	/^    size_t total_block_size;$/;"	m	struct:_arena	file:
total_blocks	pyarena.c	/^    size_t total_blocks;$/;"	m	struct:_arena	file:
total_size	pyarena.c	/^    size_t total_size;$/;"	m	struct:_arena	file:
tp_io	pyparallel_private.h	/^    TP_IO      *tp_io;$/;"	m	struct:_PyParallelContext
tp_io	pyparallel_private.h	/^    TP_IO  *tp_io;$/;"	m	struct:_PxSocket
tp_timer	pyparallel_private.h	/^    TP_TIMER *tp_timer;$/;"	m	struct:_PyParallelContext
tp_wait	pyparallel_private.h	/^    TP_WAIT        *tp_wait;$/;"	m	struct:_PyParallelContext
trace_init	sysmodule.c	/^trace_init(void)$/;"	f	file:
trace_trampoline	sysmodule.c	/^trace_trampoline(PyObject *self, PyFrameObject *frame,$/;"	f	file:
tstate	pyparallel_private.h	/^    PyThreadState *tstate;$/;"	m	struct:_PxState
tstate_delete_common	pystate.c	/^tstate_delete_common(PyThreadState *tstate)$/;"	f	file:
ttl	pyparallel_private.h	/^    short ttl;$/;"	m	struct:_PyParallelContext
tuple_of_constants	peephole.c	/^tuple_of_constants(unsigned char *codestr, Py_ssize_t n,$/;"	f	file:
tuplesize	bltinmodule.c	/^    Py_ssize_t          tuplesize;$/;"	m	struct:__anon3	file:
type	Python-ast.c	/^_Py_IDENTIFIER(type);$/;"	v
type	formatter_unicode.c	/^    Py_UCS4 type;$/;"	m	struct:__anon9	file:
type_os2_lock	thread_os2.h	/^} *type_os2_lock;$/;"	t	typeref:struct:os2_lock_t
u	compile.c	/^    struct compiler_unit *u; \/* compiler state for current block *\/$/;"	m	struct:compiler	typeref:struct:compiler::compiler_unit	file:
u_argcount	compile.c	/^    int u_argcount;        \/* number of arguments for block *\/$/;"	m	struct:compiler_unit	file:
u_blocks	compile.c	/^    basicblock *u_blocks;$/;"	m	struct:compiler_unit	file:
u_cellvars	compile.c	/^    PyObject *u_cellvars;  \/* cell variables *\/$/;"	m	struct:compiler_unit	file:
u_col_offset	compile.c	/^    int u_col_offset;      \/* the offset of the current stmt *\/$/;"	m	struct:compiler_unit	file:
u_consts	compile.c	/^    PyObject *u_consts;    \/* all constants *\/$/;"	m	struct:compiler_unit	file:
u_curblock	compile.c	/^    basicblock *u_curblock; \/* pointer to current block *\/$/;"	m	struct:compiler_unit	file:
u_fblock	compile.c	/^    struct fblockinfo u_fblock[CO_MAXBLOCKS];$/;"	m	struct:compiler_unit	typeref:struct:compiler_unit::fblockinfo	file:
u_firstlineno	compile.c	/^    int u_firstlineno; \/* the first lineno of the block *\/$/;"	m	struct:compiler_unit	file:
u_freevars	compile.c	/^    PyObject *u_freevars;  \/* free variables *\/$/;"	m	struct:compiler_unit	file:
u_kwonlyargcount	compile.c	/^    int u_kwonlyargcount; \/* number of keyword only arguments for block *\/$/;"	m	struct:compiler_unit	file:
u_lineno	compile.c	/^    int u_lineno;          \/* the lineno for the current stmt *\/$/;"	m	struct:compiler_unit	file:
u_lineno_set	compile.c	/^    int u_lineno_set;  \/* boolean to indicate whether instr$/;"	m	struct:compiler_unit	file:
u_name	compile.c	/^    PyObject *u_name;$/;"	m	struct:compiler_unit	file:
u_names	compile.c	/^    PyObject *u_names;     \/* all names *\/$/;"	m	struct:compiler_unit	file:
u_nfblocks	compile.c	/^    int u_nfblocks;$/;"	m	struct:compiler_unit	file:
u_private	compile.c	/^    PyObject *u_private;        \/* for private name mangling *\/$/;"	m	struct:compiler_unit	file:
u_qualname	compile.c	/^    PyObject *u_qualname;  \/* dot-separated qualified name (lazy) *\/$/;"	m	struct:compiler_unit	file:
u_scope_type	compile.c	/^    int u_scope_type;$/;"	m	struct:compiler_unit	file:
u_ste	compile.c	/^    PySTEntryObject *u_ste;$/;"	m	struct:compiler_unit	file:
u_varnames	compile.c	/^    PyObject *u_varnames;  \/* local variables *\/$/;"	m	struct:compiler_unit	file:
uc_float_strings	pystrtod.c	/^static char *uc_float_strings[] = {$/;"	v	file:
uint64	ceval.c	/^typedef unsigned long long uint64;$/;"	t	file:
ulp	dtoa.c	/^ulp(U *x)$/;"	f	file:
unaryop	compile.c	/^unaryop(unaryop_ty op)$/;"	f	file:
unaryop_type	Python-ast.c	/^static PyTypeObject *unaryop_type;$/;"	v	file:
unicode_concatenate	ceval.c	/^unicode_concatenate(PyObject *v, PyObject *w,$/;"	f	file:
unknown_presentation_type	formatter_unicode.c	/^unknown_presentation_type(Py_UCS4 presentation_type,$/;"	f	file:
unpack_iterable	ceval.c	/^unpack_iterable(PyObject *v, int argcnt, int argcntafter, PyObject **sp)$/;"	f	file:
update_code_filenames	import.c	/^update_code_filenames(PyCodeObject *co, PyObject *oldname, PyObject *newname)$/;"	f	file:
update_compiled_module	import.c	/^update_compiled_module(PyCodeObject *co, PyObject *newname)$/;"	f	file:
update_keyword_args	ceval.c	/^update_keyword_args(PyObject *orig_kwdict, int nk, PyObject ***pp_stack,$/;"	f	file:
update_registry	_warnings.c	/^update_registry(PyObject *registry, PyObject *text, PyObject *category,$/;"	f	file:
update_star_args	ceval.c	/^update_star_args(int nstack, int nstar, PyObject *stararg,$/;"	f	file:
update_symbols	symtable.c	/^update_symbols(PyObject *symbols, PyObject *scopes,$/;"	f	file:
upper	Python-ast.c	/^_Py_IDENTIFIER(upper);$/;"	v
usize_t	pyparallel_private.h	241;"	d
va_build_value	modsupport.c	/^va_build_value(const char *format, va_list va, int flags)$/;"	f	file:
va_double	modsupport.c	/^typedef double va_double;$/;"	t	file:
validate_args	ast.c	/^validate_args(asdl_seq *args)$/;"	f	file:
validate_arguments	ast.c	/^validate_arguments(arguments_ty args)$/;"	f	file:
validate_assignlist	ast.c	/^validate_assignlist(asdl_seq *targets, expr_context_ty ctx)$/;"	f	file:
validate_body	ast.c	/^validate_body(asdl_seq *body, const char *owner)$/;"	f	file:
validate_comprehension	ast.c	/^validate_comprehension(asdl_seq *gens)$/;"	f	file:
validate_expr	ast.c	/^validate_expr(expr_ty exp, expr_context_ty ctx)$/;"	f	file:
validate_exprs	ast.c	/^validate_exprs(asdl_seq *exprs, expr_context_ty ctx, int null_ok)$/;"	f	file:
validate_keywords	ast.c	/^validate_keywords(asdl_seq *keywords)$/;"	f	file:
validate_nonempty_seq	ast.c	/^validate_nonempty_seq(asdl_seq *seq, const char *what, const char *owner)$/;"	f	file:
validate_slice	ast.c	/^validate_slice(slice_ty slice)$/;"	f	file:
validate_stmt	ast.c	/^validate_stmt(stmt_ty stmt)$/;"	f	file:
validate_stmts	ast.c	/^validate_stmts(asdl_seq *seq)$/;"	f	file:
value	Python-ast.c	/^_Py_IDENTIFIER(value);$/;"	v
value	thread.c	/^    void *value;$/;"	m	struct:key	file:
values	Python-ast.c	/^_Py_IDENTIFIER(values);$/;"	v
vararg	Python-ast.c	/^_Py_IDENTIFIER(vararg);$/;"	v
varargannotation	Python-ast.c	/^_Py_IDENTIFIER(varargannotation);$/;"	v
varobjs	pyparallel_private.h	/^    Objects varobjs;$/;"	m	struct:_PyParallelContext
varobjs	pyparallel_private.h	/^    size_t varobjs;$/;"	m	struct:_PyParallelContextStats
version	marshal.c	/^    int version;$/;"	m	struct:__anon14	file:
version_info_desc	sysmodule.c	/^static PyStructSequence_Desc version_info_desc = {$/;"	v	file:
version_info_fields	sysmodule.c	/^static PyStructSequence_Field version_info_fields[] = {$/;"	v	file:
vgetargs1	getargs.c	/^vgetargs1(PyObject *args, const char *format, va_list *p_va, int flags)$/;"	f	file:
vgetargskeywords	getargs.c	/^vgetargskeywords(PyObject *args, PyObject *keywords, const char *format,$/;"	f	file:
vms_urandom	random.c	/^vms_urandom(unsigned char *buffer, Py_ssize_t size, int raise)$/;"	f	file:
w	pyparallel_private.h	/^    WSABUF          w;$/;"	m	struct:_RBUF
w	pyparallel_private.h	/^    WSABUF          w;$/;"	m	struct:_SBUF
w	pyparallel_private.h	/^    WSABUF          w;$/;"	m	struct:_TLSBUF
w	pyparallel_private.h	/^    WSABUF w;$/;"	m	struct:_PxSocketBuf
w_PyLong	marshal.c	/^w_PyLong(const PyLongObject *ob, WFILE *p)$/;"	f	file:
w_byte	marshal.c	71;"	d	file:
w_long	marshal.c	/^w_long(long x, WFILE *p)$/;"	f	file:
w_more	marshal.c	/^w_more(int c, WFILE *p)$/;"	f	file:
w_object	marshal.c	/^w_object(PyObject *v, WFILE *p)$/;"	f	file:
w_pstring	marshal.c	/^w_pstring(const char *s, Py_ssize_t n, WFILE *p)$/;"	f	file:
w_short	marshal.c	/^w_short(int x, WFILE *p)$/;"	f	file:
w_string	marshal.c	/^w_string(const char *s, Py_ssize_t n, WFILE *p)$/;"	f	file:
wait_ctx	pyparallel_private.h	/^    Context  *wait_ctx;$/;"	m	struct:_PxSocket
wait_for_thread_shutdown	pythonrun.c	/^wait_for_thread_shutdown(void)$/;"	f	file:
wait_handles	pyparallel_private.h	/^    HANDLE  wait_handles[3];$/;"	m	struct:_PxSocket
wait_result	pyparallel_private.h	/^    TP_WAIT_RESULT  wait_result;$/;"	m	struct:_PyParallelContext
wait_timeout	pyparallel_private.h	/^    PFILETIME       wait_timeout;$/;"	m	struct:_PyParallelContext
waiting	condvar.h	/^    int waiting; \/* to allow PyCOND_SIGNAL to be a no-op *\/$/;"	m	struct:_PyCOND_T
waitobj	pyparallel_private.h	/^    PyObject *waitobj;$/;"	m	struct:_PyParallelContext
waitobj_timeout	pyparallel_private.h	/^    PyObject *waitobj_timeout;$/;"	m	struct:_PyParallelContext
waits_done	pyparallel_private.h	/^    volatile long long  waits_done;$/;"	m	struct:_PxState
waits_inflight	pyparallel_private.h	/^    volatile long       waits_inflight;$/;"	m	struct:_PxState
waits_pending	pyparallel_private.h	/^    volatile long       waits_pending;$/;"	m	struct:_PxState
waits_submitted	pyparallel_private.h	/^    volatile long long  waits_submitted;$/;"	m	struct:_PxState
wakeup	pyparallel_private.h	/^    HANDLE wakeup;$/;"	m	struct:_PxState
warn_explicit	_warnings.c	/^warn_explicit(PyObject *category, PyObject *message,$/;"	f	file:
warn_unicode	_warnings.c	/^warn_unicode(PyObject *category, PyObject *message,$/;"	f	file:
warnings_functions	_warnings.c	/^static PyMethodDef warnings_functions[] = {$/;"	v	file:
warnings_warn	_warnings.c	/^warnings_warn(PyObject *self, PyObject *args, PyObject *kwds)$/;"	f	file:
warnings_warn_explicit	_warnings.c	/^warnings_warn_explicit(PyObject *self, PyObject *args, PyObject *kwds)$/;"	f	file:
warningsmodule	_warnings.c	/^static struct PyModuleDef warningsmodule = {$/;"	v	typeref:struct:PyModuleDef	file:
warnoptions	sysmodule.c	/^static PyObject *warnoptions = NULL;$/;"	v	file:
was_persisted	pyparallel_private.h	/^    char was_persisted;$/;"	m	struct:_PyParallelContext
wds	dtoa.c	/^    int k, maxwds, sign, wds;$/;"	m	struct:Bigint	file:
whatstrings	sysmodule.c	/^static PyObject *whatstrings[7] = {NULL, NULL, NULL, NULL, NULL, NULL, NULL};$/;"	v	file:
why_code	ceval.c	/^enum why_code {$/;"	g	file:
width	formatter_unicode.c	/^    Py_ssize_t width;$/;"	m	struct:__anon9	file:
win32_urandom	random.c	/^win32_urandom(unsigned char *buffer, Py_ssize_t size, int raise)$/;"	f	file:
win32_urandom_init	random.c	/^win32_urandom_init(int raise)$/;"	f	file:
windows_version_desc	sysmodule.c	/^static PyStructSequence_Desc windows_version_desc = {$/;"	v	file:
windows_version_fields	sysmodule.c	/^static PyStructSequence_Field windows_version_fields[] = {$/;"	v	file:
withitem	Python-ast.c	/^withitem(expr_ty context_expr, expr_ty optional_vars, PyArena *arena)$/;"	f
withitem_fields	Python-ast.c	/^static char *withitem_fields[]={$/;"	v	file:
withitem_type	Python-ast.c	/^static PyTypeObject *withitem_type;$/;"	v	file:
word0	dtoa.c	191;"	d	file:
word0	dtoa.c	194;"	d	file:
word1	dtoa.c	192;"	d	file:
word1	dtoa.c	195;"	d	file:
work_ctx	pyparallel_private.h	/^    WorkContext     *work_ctx;$/;"	m	struct:_PyParallelIOContext
work_ready	pyparallel_private.h	/^    PxListHead *work_ready;$/;"	m	struct:_PxState
write_contents	makeopcodetargets.py	/^def write_contents(f):$/;"	f
write_thread_id	traceback.c	/^write_thread_id(int fd, PyThreadState *tstate, int is_current)$/;"	f	file:
wrong_exception_type	codecs.c	/^static void wrong_exception_type(PyObject *exc)$/;"	f	file:
wsabufs	pyparallel_private.h	/^    WSABUF **wsabufs;$/;"	m	struct:_PxSocketBufList
x	dtoa.c	/^    ULong x[1];$/;"	m	struct:Bigint	file:
xlist	pyparallel_private.h	/^PyAPI_FUNC(PyObject *)  PyXList_Pop(PyObject *xlist);$/;"	v
xlist	pyparallel_private.h	/^PyAPI_FUNC(PyObject *) PyXList_Flush(PyObject *xlist);$/;"	v
xlist_alloc	pyparallel.c	/^xlist_alloc(PyTypeObject *tp, Py_ssize_t nitems)$/;"	f
xlist_as_sequence	pyparallel.c	/^static PySequenceMethods xlist_as_sequence = {$/;"	v	file:
xlist_dealloc	pyparallel.c	/^xlist_dealloc(PyXListObject *xlist)$/;"	f
xlist_flush	pyparallel.c	/^xlist_flush(PyObject *self, PyObject *arg)$/;"	f
xlist_methods	pyparallel.c	/^static PyMethodDef xlist_methods[] = {$/;"	v	file:
xlist_new	pyparallel.c	/^xlist_new(PyTypeObject *tp, PyObject *args, PyObject *kwds)$/;"	f
xlist_pop	pyparallel.c	/^xlist_pop(PyObject *self, PyObject *args)$/;"	f
xlist_push	pyparallel.c	/^xlist_push(PyObject *obj, PyObject *src)$/;"	f
xmlcharrefreplace_errors	codecs.c	/^static PyObject *xmlcharrefreplace_errors(PyObject *self, PyObject *exc)$/;"	f	file:
xoptions	sysmodule.c	/^static PyObject *xoptions = NULL;$/;"	v	file:
zapthreads	pystate.c	/^zapthreads(PyInterpreterState *interp)$/;"	f	file:
zip_dealloc	bltinmodule.c	/^zip_dealloc(zipobject *lz)$/;"	f	file:
zip_methods	bltinmodule.c	/^static PyMethodDef zip_methods[] = {$/;"	v	file:
zip_new	bltinmodule.c	/^zip_new(PyTypeObject *type, PyObject *args, PyObject *kwds)$/;"	f	file:
zip_next	bltinmodule.c	/^zip_next(zipobject *lz)$/;"	f	file:
zip_reduce	bltinmodule.c	/^zip_reduce(zipobject *lz)$/;"	f	file:
zip_traverse	bltinmodule.c	/^zip_traverse(zipobject *lz, visitproc visit, void *arg)$/;"	f	file:
zipobject	bltinmodule.c	/^} zipobject;$/;"	t	typeref:struct:__anon3	file:
